
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
}


int bt_bas_handles_assign(struct bt_gatt_dm *dm,
				 struct bt_bas_client *bas)
{
   0:	00 55 00 20 79 4a 01 00 c3 69 02 00 4d 4a 01 00     .U. yJ...i..MJ..
			bt_gatt_dm_attr_service_val(gatt_service_attr);
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;
	const struct bt_gatt_chrc *chrc_val;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_BAS)) {
  10:	4d 4a 01 00 4d 4a 01 00 4d 4a 01 00 00 00 00 00     MJ..MJ..MJ......
	...
		return -ENOTSUP;
  2c:	f9 44 01 00 4d 4a 01 00 00 00 00 00 a5 44 01 00     .D..MJ.......D..
	}
	LOG_DBG("Getting handles from battery service.");

	/* If connection is established again, cancel previous read request. */
	k_work_cancel_delayable(&bas->periodic_read.read_work);
  3c:	4d 4a 01 00                                         MJ..

00000040 <_irq_vector_table>:
	bas->battery_level = BT_BAS_VAL_INVALID;
  40:	a9 45 01 00 21 97 02 00 a9 45 01 00 a9 45 01 00     .E..!....E...E..
	bas->val_handle = 0;
  50:	a9 45 01 00 a9 45 01 00 a9 45 01 00 a9 45 01 00     .E...E...E...E..
	/* When workqueue is used its instance cannont be cleared. */
	bas_reinit(bas);

	/* Battery level characteristic */
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
  60:	e9 96 02 00 a9 45 01 00 a9 45 01 00 07 97 02 00     .....E...E......
				    */
	bas->properties = chrc_val->properties;
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
					    BT_UUID_BAS_BATTERY_LEVEL);
	if (!gatt_desc) {
		LOG_ERR("No battery level characteristic value found.");
  70:	a9 45 01 00 a9 45 01 00 a9 45 01 00 a9 45 01 00     .E...E...E...E..
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
  80:	a9 45 01 00 a9 45 01 00 a9 45 01 00 a9 45 01 00     .E...E...E...E..
  90:	a9 45 01 00 a9 45 01 00 a9 45 01 00 a9 45 01 00     .E...E...E...E..
					    BT_UUID_BAS_BATTERY_LEVEL);
  a0:	a9 45 01 00 a9 45 01 00 a9 45 01 00 a9 45 01 00     .E...E...E...E..
  b0:	a9 45 01 00 a9 45 01 00 a9 45 01 00 a9 45 01 00     .E...E...E...E..
		return -EINVAL;
	}
	bas->val_handle = gatt_desc->handle;
  c0:	a9 45 01 00 a9 45 01 00 a9 45 01 00 a9 45 01 00     .E...E...E...E..

	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
  d0:	a9 45 01 00 a9 45 01 00 a9 45 01 00                 .E...E...E..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
	if (!gatt_desc) {
		LOG_INF("No battery CCC descriptor found. Battery service do not supported notification.");
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
		bas->notify = true;
		bas->ccc_handle = gatt_desc->handle;
	}

	/* Finally - save connection object */
	bas->conn = bt_gatt_dm_conn_get(dm);
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
		bas->notify = true;
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
		bas->ccc_handle = gatt_desc->handle;
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f00c fd6c 	bl	cbdc <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <ocrypto_bigint_add256>:

		if (err) {
			LOG_ERR("Cannot enable callbacks");
		}
	}
}
     114:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     118:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     11c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     120:	185b      	adds	r3, r3, r1
     122:	eb54 040c 	adcs.w	r4, r4, ip
     126:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     12a:	414d      	adcs	r5, r1
     12c:	eb56 060c 	adcs.w	r6, r6, ip
     130:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     134:	414f      	adcs	r7, r1
     136:	eb58 080c 	adcs.w	r8, r8, ip
     13a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     13e:	eb59 0901 	adcs.w	r9, r9, r1
     142:	eb5a 0a0c 	adcs.w	sl, sl, ip
     146:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     14a:	4180      	sbcs	r0, r0
     14c:	3001      	adds	r0, #1
     14e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     152:	4770      	bx	lr

00000154 <ocrypto_bigint_sub256>:
     154:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     158:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     15c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     160:	1a5b      	subs	r3, r3, r1
     162:	eb74 040c 	sbcs.w	r4, r4, ip
     166:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     16a:	418d      	sbcs	r5, r1
     16c:	eb76 060c 	sbcs.w	r6, r6, ip
     170:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     174:	418f      	sbcs	r7, r1
     176:	eb78 080c 	sbcs.w	r8, r8, ip
     17a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     17e:	eb79 0901 	sbcs.w	r9, r9, r1
     182:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     186:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     18a:	4180      	sbcs	r0, r0
     18c:	4240      	negs	r0, r0
     18e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     192:	4770      	bx	lr

00000194 <ocrypto_bigint_cadd256>:
     194:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     198:	4252      	negs	r2, r2
     19a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     19e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1a2:	4017      	ands	r7, r2
     1a4:	19db      	adds	r3, r3, r7
     1a6:	ea18 0802 	ands.w	r8, r8, r2
     1aa:	eb54 0408 	adcs.w	r4, r4, r8
     1ae:	ea19 0902 	ands.w	r9, r9, r2
     1b2:	eb55 0509 	adcs.w	r5, r5, r9
     1b6:	ea1a 0a02 	ands.w	sl, sl, r2
     1ba:	eb56 060a 	adcs.w	r6, r6, sl
     1be:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1c0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1c4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c8:	4017      	ands	r7, r2
     1ca:	417b      	adcs	r3, r7
     1cc:	ea18 0802 	ands.w	r8, r8, r2
     1d0:	eb54 0408 	adcs.w	r4, r4, r8
     1d4:	ea19 0902 	ands.w	r9, r9, r2
     1d8:	eb55 0509 	adcs.w	r5, r5, r9
     1dc:	ea1a 0a02 	ands.w	sl, sl, r2
     1e0:	eb56 060a 	adcs.w	r6, r6, sl
     1e4:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e6:	4180      	sbcs	r0, r0
     1e8:	3001      	adds	r0, #1
     1ea:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1ee:	4770      	bx	lr

000001f0 <ocrypto_bigint_csub256>:
     1f0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1f4:	4252      	negs	r2, r2
     1f6:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1fa:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1fe:	4017      	ands	r7, r2
     200:	1bdb      	subs	r3, r3, r7
     202:	ea18 0802 	ands.w	r8, r8, r2
     206:	eb74 0408 	sbcs.w	r4, r4, r8
     20a:	ea19 0902 	ands.w	r9, r9, r2
     20e:	eb75 0509 	sbcs.w	r5, r5, r9
     212:	ea1a 0a02 	ands.w	sl, sl, r2
     216:	eb76 060a 	sbcs.w	r6, r6, sl
     21a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     21c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     220:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     224:	4017      	ands	r7, r2
     226:	41bb      	sbcs	r3, r7
     228:	ea18 0802 	ands.w	r8, r8, r2
     22c:	eb74 0408 	sbcs.w	r4, r4, r8
     230:	ea19 0902 	ands.w	r9, r9, r2
     234:	eb75 0509 	sbcs.w	r5, r5, r9
     238:	ea1a 0a02 	ands.w	sl, sl, r2
     23c:	eb76 060a 	sbcs.w	r6, r6, sl
     240:	c078      	stmia	r0!, {r3, r4, r5, r6}
     242:	4180      	sbcs	r0, r0
     244:	4240      	negs	r0, r0
     246:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     24a:	4770      	bx	lr

0000024c <ocrypto_bigint_cswap256>:
     24c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     250:	4252      	negs	r2, r2
     252:	f04f 0804 	mov.w	r8, #4

00000256 <cswap256_loop>:
     256:	e890 0030 	ldmia.w	r0, {r4, r5}
     25a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     25e:	1ba3      	subs	r3, r4, r6
     260:	4013      	ands	r3, r2
     262:	1ae4      	subs	r4, r4, r3
     264:	18f6      	adds	r6, r6, r3
     266:	1beb      	subs	r3, r5, r7
     268:	4013      	ands	r3, r2
     26a:	1aed      	subs	r5, r5, r3
     26c:	18ff      	adds	r7, r7, r3
     26e:	c030      	stmia	r0!, {r4, r5}
     270:	c1c0      	stmia	r1!, {r6, r7}
     272:	f1b8 0801 	subs.w	r8, r8, #1
     276:	d1ee      	bne.n	256 <cswap256_loop>
     278:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     27c:	4770      	bx	lr
     27e:	bf00      	nop

00000280 <ocrypto_mul256_noframe>:
     280:	b500      	push	{lr}
     282:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     286:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     28a:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     28e:	b402      	push	{r1}
     290:	fba7 5102 	umull	r5, r1, r7, r2
     294:	950a      	str	r5, [sp, #40]	; 0x28
     296:	fba8 0b02 	umull	r0, fp, r8, r2
     29a:	fbe7 1063 	umaal	r1, r0, r7, r3
     29e:	fbe9 b062 	umaal	fp, r0, r9, r2
     2a2:	910b      	str	r1, [sp, #44]	; 0x2c
     2a4:	fba8 5103 	umull	r5, r1, r8, r3
     2a8:	fbea 0162 	umaal	r0, r1, sl, r2
     2ac:	fbe7 b564 	umaal	fp, r5, r7, r4
     2b0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2b4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2b8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2bc:	fba9 b603 	umull	fp, r6, r9, r3
     2c0:	fbea 1663 	umaal	r1, r6, sl, r3
     2c4:	fbec 5663 	umaal	r5, r6, ip, r3
     2c8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2cc:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2d0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2d4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2d8:	900d      	str	r0, [sp, #52]	; 0x34
     2da:	fbac 3002 	umull	r3, r0, ip, r2
     2de:	9c05      	ldr	r4, [sp, #20]
     2e0:	fbee 5062 	umaal	r5, r0, lr, r2
     2e4:	fbe9 6064 	umaal	r6, r0, r9, r4
     2e8:	fbea b064 	umaal	fp, r0, sl, r4
     2ec:	fbe7 3164 	umaal	r3, r1, r7, r4
     2f0:	fbe8 5164 	umaal	r5, r1, r8, r4
     2f4:	9c06      	ldr	r4, [sp, #24]
     2f6:	fbe8 6164 	umaal	r6, r1, r8, r4
     2fa:	fbe9 b164 	umaal	fp, r1, r9, r4
     2fe:	fbea 0164 	umaal	r0, r1, sl, r4
     302:	930e      	str	r3, [sp, #56]	; 0x38
     304:	fba7 3204 	umull	r3, r2, r7, r4
     308:	9c07      	ldr	r4, [sp, #28]
     30a:	fbe7 6264 	umaal	r6, r2, r7, r4
     30e:	fbe8 b264 	umaal	fp, r2, r8, r4
     312:	fbe9 0264 	umaal	r0, r2, r9, r4
     316:	fbea 1264 	umaal	r1, r2, sl, r4
     31a:	9c04      	ldr	r4, [sp, #16]
     31c:	fbe9 5364 	umaal	r5, r3, r9, r4
     320:	fbea 6364 	umaal	r6, r3, sl, r4
     324:	9c08      	ldr	r4, [sp, #32]
     326:	fbe7 b364 	umaal	fp, r3, r7, r4
     32a:	fbe8 0364 	umaal	r0, r3, r8, r4
     32e:	fbe9 1364 	umaal	r1, r3, r9, r4
     332:	fbea 2364 	umaal	r2, r3, sl, r4
     336:	950f      	str	r5, [sp, #60]	; 0x3c
     338:	f85d 9b04 	ldr.w	r9, [sp], #4
     33c:	e899 0600 	ldmia.w	r9, {r9, sl}
     340:	f8dd 8000 	ldr.w	r8, [sp]
     344:	fba9 5408 	umull	r5, r4, r9, r8
     348:	fbea b468 	umaal	fp, r4, sl, r8
     34c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     350:	fbec 0468 	umaal	r0, r4, ip, r8
     354:	fbee 1468 	umaal	r1, r4, lr, r8
     358:	fbe9 2468 	umaal	r2, r4, r9, r8
     35c:	fbea 3468 	umaal	r3, r4, sl, r8
     360:	f8dd 8004 	ldr.w	r8, [sp, #4]
     364:	fbee 6568 	umaal	r6, r5, lr, r8
     368:	fbe9 b568 	umaal	fp, r5, r9, r8
     36c:	fbea 0568 	umaal	r0, r5, sl, r8
     370:	f8dd 8014 	ldr.w	r8, [sp, #20]
     374:	fbec 1568 	umaal	r1, r5, ip, r8
     378:	fbee 2568 	umaal	r2, r5, lr, r8
     37c:	fbe9 3568 	umaal	r3, r5, r9, r8
     380:	fbea 4568 	umaal	r4, r5, sl, r8
     384:	960f      	str	r6, [sp, #60]	; 0x3c
     386:	f8dd 8008 	ldr.w	r8, [sp, #8]
     38a:	fbae 7608 	umull	r7, r6, lr, r8
     38e:	fbe9 0668 	umaal	r0, r6, r9, r8
     392:	fbea 1668 	umaal	r1, r6, sl, r8
     396:	f8dd 8018 	ldr.w	r8, [sp, #24]
     39a:	fbec 2668 	umaal	r2, r6, ip, r8
     39e:	fbee 3668 	umaal	r3, r6, lr, r8
     3a2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3a6:	fbea 5668 	umaal	r5, r6, sl, r8
     3aa:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ae:	fbec b768 	umaal	fp, r7, ip, r8
     3b2:	fbee 0768 	umaal	r0, r7, lr, r8
     3b6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3ba:	fbea 2768 	umaal	r2, r7, sl, r8
     3be:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3c2:	fbec 3768 	umaal	r3, r7, ip, r8
     3c6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ca:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ce:	fbea 6768 	umaal	r6, r7, sl, r8
     3d2:	b008      	add	sp, #32
     3d4:	bd00      	pop	{pc}
     3d6:	bf00      	nop

000003d8 <ocrypto_bigint_mul256>:
     3d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3dc:	b087      	sub	sp, #28
     3de:	f7ff ff4f 	bl	280 <ocrypto_mul256_noframe>
     3e2:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e6:	f108 0820 	add.w	r8, r8, #32
     3ea:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     3ee:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     3f0:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000003f8 <ocrypto_sqr256_noframe>:
     3f8:	b500      	push	{lr}
     3fa:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     3fe:	fba3 5203 	umull	r5, r2, r3, r3
     402:	9501      	str	r5, [sp, #4]
     404:	fba3 0104 	umull	r0, r1, r3, r4
     408:	fbe3 2064 	umaal	r2, r0, r3, r4
     40c:	fbe3 1067 	umaal	r1, r0, r3, r7
     410:	9202      	str	r2, [sp, #8]
     412:	fba3 5207 	umull	r5, r2, r3, r7
     416:	fbe3 0268 	umaal	r0, r2, r3, r8
     41a:	fbe4 1564 	umaal	r1, r5, r4, r4
     41e:	fbe3 0568 	umaal	r0, r5, r3, r8
     422:	fbe3 2569 	umaal	r2, r5, r3, r9
     426:	9103      	str	r1, [sp, #12]
     428:	fba4 b607 	umull	fp, r6, r4, r7
     42c:	fbe3 2669 	umaal	r2, r6, r3, r9
     430:	fbe3 566a 	umaal	r5, r6, r3, sl
     434:	fbe4 0b67 	umaal	r0, fp, r4, r7
     438:	fbe4 2b68 	umaal	r2, fp, r4, r8
     43c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     440:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     444:	9004      	str	r0, [sp, #16]
     446:	fba4 1008 	umull	r1, r0, r4, r8
     44a:	fbe4 5069 	umaal	r5, r0, r4, r9
     44e:	fbe3 606c 	umaal	r6, r0, r3, ip
     452:	fbe3 b06e 	umaal	fp, r0, r3, lr
     456:	fbe7 2167 	umaal	r2, r1, r7, r7
     45a:	fbe4 5169 	umaal	r5, r1, r4, r9
     45e:	fbe4 616a 	umaal	r6, r1, r4, sl
     462:	fbe3 b16e 	umaal	fp, r1, r3, lr
     466:	fbe4 016e 	umaal	r0, r1, r4, lr
     46a:	9205      	str	r2, [sp, #20]
     46c:	fba7 3208 	umull	r3, r2, r7, r8
     470:	fbe4 626a 	umaal	r6, r2, r4, sl
     474:	fbe4 b26c 	umaal	fp, r2, r4, ip
     478:	fbe4 026e 	umaal	r0, r2, r4, lr
     47c:	fbe7 126e 	umaal	r1, r2, r7, lr
     480:	fbe7 5368 	umaal	r5, r3, r7, r8
     484:	fbe7 6369 	umaal	r6, r3, r7, r9
     488:	fbe4 b36c 	umaal	fp, r3, r4, ip
     48c:	fbe7 036c 	umaal	r0, r3, r7, ip
     490:	fbe7 136e 	umaal	r1, r3, r7, lr
     494:	fbe8 236e 	umaal	r2, r3, r8, lr
     498:	9506      	str	r5, [sp, #24]
     49a:	fba7 5409 	umull	r5, r4, r7, r9
     49e:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4a2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4a6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4aa:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ae:	fbe9 346e 	umaal	r3, r4, r9, lr
     4b2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4b6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4ba:	fbe8 056a 	umaal	r0, r5, r8, sl
     4be:	fbe8 156c 	umaal	r1, r5, r8, ip
     4c2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4c6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ca:	fbea 456e 	umaal	r4, r5, sl, lr
     4ce:	9607      	str	r6, [sp, #28]
     4d0:	fba8 7609 	umull	r7, r6, r8, r9
     4d4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4d8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4dc:	fbe9 266c 	umaal	r2, r6, r9, ip
     4e0:	fbea 366c 	umaal	r3, r6, sl, ip
     4e4:	fbea 466e 	umaal	r4, r6, sl, lr
     4e8:	fbec 566e 	umaal	r5, r6, ip, lr
     4ec:	fbe8 b769 	umaal	fp, r7, r8, r9
     4f0:	fbe9 0769 	umaal	r0, r7, r9, r9
     4f4:	fbe9 176a 	umaal	r1, r7, r9, sl
     4f8:	fbea 276a 	umaal	r2, r7, sl, sl
     4fc:	fbea 376c 	umaal	r3, r7, sl, ip
     500:	fbec 476c 	umaal	r4, r7, ip, ip
     504:	fbec 576e 	umaal	r5, r7, ip, lr
     508:	fbee 676e 	umaal	r6, r7, lr, lr
     50c:	bd00      	pop	{pc}
     50e:	bf00      	nop

00000510 <ocrypto_bigint_sqr256>:
     510:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     514:	b087      	sub	sp, #28
     516:	f7ff ff6f 	bl	3f8 <ocrypto_sqr256_noframe>
     51a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     51e:	f108 0820 	add.w	r8, r8, #32
     522:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     526:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     528:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000530 <ocrypto_constant_time_equal>:
     530:	b430      	push	{r4, r5}
     532:	f04f 0300 	mov.w	r3, #0

00000536 <constant_time_equal_loop>:
     536:	f810 4b01 	ldrb.w	r4, [r0], #1
     53a:	f811 5b01 	ldrb.w	r5, [r1], #1
     53e:	3a01      	subs	r2, #1
     540:	ea84 0405 	eor.w	r4, r4, r5
     544:	ea43 0304 	orr.w	r3, r3, r4
     548:	d1f5      	bne.n	536 <constant_time_equal_loop>
     54a:	f1a3 0301 	sub.w	r3, r3, #1
     54e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     552:	bc30      	pop	{r4, r5}
     554:	4770      	bx	lr
     556:	bf00      	nop

00000558 <ocrypto_constant_time_is_zero>:
     558:	f04f 0300 	mov.w	r3, #0

0000055c <constant_time_is_zero_loop>:
     55c:	f810 2b01 	ldrb.w	r2, [r0], #1
     560:	3901      	subs	r1, #1
     562:	ea43 0302 	orr.w	r3, r3, r2
     566:	d1f9      	bne.n	55c <constant_time_is_zero_loop>
     568:	f1a3 0301 	sub.w	r3, r3, #1
     56c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     570:	4770      	bx	lr
     572:	bf00      	nop

00000574 <ocrypto_constant_time_xor>:
     574:	b430      	push	{r4, r5}

00000576 <constant_time_xor_loop>:
     576:	f811 4b01 	ldrb.w	r4, [r1], #1
     57a:	f812 5b01 	ldrb.w	r5, [r2], #1
     57e:	406c      	eors	r4, r5
     580:	f800 4b01 	strb.w	r4, [r0], #1
     584:	3b01      	subs	r3, #1
     586:	d1f6      	bne.n	576 <constant_time_xor_loop>
     588:	bc30      	pop	{r4, r5}
     58a:	4770      	bx	lr

0000058c <ocrypto_mod_p256_add>:
     58c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     590:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     594:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     598:	185b      	adds	r3, r3, r1
     59a:	eb54 040c 	adcs.w	r4, r4, ip
     59e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5a2:	414d      	adcs	r5, r1
     5a4:	eb56 060c 	adcs.w	r6, r6, ip
     5a8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5ac:	414f      	adcs	r7, r1
     5ae:	eb58 080c 	adcs.w	r8, r8, ip
     5b2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b6:	eb59 0901 	adcs.w	r9, r9, r1
     5ba:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5be:	4189      	sbcs	r1, r1
     5c0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5c4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5c8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5cc:	f176 0600 	sbcs.w	r6, r6, #0
     5d0:	f177 0700 	sbcs.w	r7, r7, #0
     5d4:	f178 0800 	sbcs.w	r8, r8, #0
     5d8:	f179 0901 	sbcs.w	r9, r9, #1
     5dc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     5e0:	f151 0100 	adcs.w	r1, r1, #0
     5e4:	185b      	adds	r3, r3, r1
     5e6:	414c      	adcs	r4, r1
     5e8:	414d      	adcs	r5, r1
     5ea:	f156 0600 	adcs.w	r6, r6, #0
     5ee:	f157 0700 	adcs.w	r7, r7, #0
     5f2:	f158 0800 	adcs.w	r8, r8, #0
     5f6:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     5fa:	eb5a 0a01 	adcs.w	sl, sl, r1
     5fe:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     602:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     606:	4770      	bx	lr

00000608 <ocrypto_mod_p256_sub>:
     608:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     60c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     610:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     614:	1a5b      	subs	r3, r3, r1
     616:	eb74 040c 	sbcs.w	r4, r4, ip
     61a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     61e:	418d      	sbcs	r5, r1
     620:	eb76 060c 	sbcs.w	r6, r6, ip
     624:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     628:	418f      	sbcs	r7, r1
     62a:	eb78 080c 	sbcs.w	r8, r8, ip
     62e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     632:	eb79 0901 	sbcs.w	r9, r9, r1
     636:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     63a:	4189      	sbcs	r1, r1
     63c:	185b      	adds	r3, r3, r1
     63e:	414c      	adcs	r4, r1
     640:	414d      	adcs	r5, r1
     642:	f156 0600 	adcs.w	r6, r6, #0
     646:	f157 0700 	adcs.w	r7, r7, #0
     64a:	f158 0800 	adcs.w	r8, r8, #0
     64e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     652:	eb5a 0a01 	adcs.w	sl, sl, r1
     656:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     65a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     65e:	4770      	bx	lr

00000660 <mul_reduce>:
     660:	eb18 0804 	adds.w	r8, r8, r4
     664:	eb59 0905 	adcs.w	r9, r9, r5
     668:	eb5a 0a06 	adcs.w	sl, sl, r6
     66c:	eb5b 0b07 	adcs.w	fp, fp, r7
     670:	f05f 0c00 	movs.w	ip, #0
     674:	f14c 0c00 	adc.w	ip, ip, #0
     678:	eb18 0805 	adds.w	r8, r8, r5
     67c:	eb59 0906 	adcs.w	r9, r9, r6
     680:	eb5a 0a07 	adcs.w	sl, sl, r7
     684:	eb5b 0b07 	adcs.w	fp, fp, r7
     688:	eb50 000c 	adcs.w	r0, r0, ip
     68c:	f05f 0c00 	movs.w	ip, #0
     690:	eb51 010c 	adcs.w	r1, r1, ip
     694:	eb52 020c 	adcs.w	r2, r2, ip
     698:	4163      	adcs	r3, r4
     69a:	f14c 0c00 	adc.w	ip, ip, #0
     69e:	ebb8 0807 	subs.w	r8, r8, r7
     6a2:	f179 0900 	sbcs.w	r9, r9, #0
     6a6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6aa:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ae:	41a8      	sbcs	r0, r5
     6b0:	41b1      	sbcs	r1, r6
     6b2:	41a2      	sbcs	r2, r4
     6b4:	41b3      	sbcs	r3, r6
     6b6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ba:	ebbb 0b05 	subs.w	fp, fp, r5
     6be:	41b0      	sbcs	r0, r6
     6c0:	41b9      	sbcs	r1, r7
     6c2:	41aa      	sbcs	r2, r5
     6c4:	41bb      	sbcs	r3, r7
     6c6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ca:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6ce:	ebb8 0804 	subs.w	r8, r8, r4
     6d2:	eb79 0904 	sbcs.w	r9, r9, r4
     6d6:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6da:	f17b 0b00 	sbcs.w	fp, fp, #0
     6de:	f170 0000 	sbcs.w	r0, r0, #0
     6e2:	f171 0100 	sbcs.w	r1, r1, #0
     6e6:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     6ea:	41a3      	sbcs	r3, r4
     6ec:	f16c 0c00 	sbc.w	ip, ip, #0
     6f0:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     6f4:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     6f8:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     6fc:	f15b 0b00 	adcs.w	fp, fp, #0
     700:	f150 0400 	adcs.w	r4, r0, #0
     704:	f151 0500 	adcs.w	r5, r1, #0
     708:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     70c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     710:	f14c 0c00 	adc.w	ip, ip, #0
     714:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     718:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     71c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     720:	f15b 0300 	adcs.w	r3, fp, #0
     724:	f154 0400 	adcs.w	r4, r4, #0
     728:	f155 0500 	adcs.w	r5, r5, #0
     72c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     730:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     734:	4770      	bx	lr
     736:	bf00      	nop

00000738 <ocrypto_mod_p256_mul>:
     738:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     73c:	b087      	sub	sp, #28
     73e:	f7ff fd9f 	bl	280 <ocrypto_mul256_noframe>
     742:	f8dd 8010 	ldr.w	r8, [sp, #16]
     746:	f8dd 9014 	ldr.w	r9, [sp, #20]
     74a:	f8dd a018 	ldr.w	sl, [sp, #24]
     74e:	f7ff ff87 	bl	660 <mul_reduce>
     752:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     756:	f7ff ff83 	bl	660 <mul_reduce>
     75a:	b003      	add	sp, #12
     75c:	f85d 8b04 	ldr.w	r8, [sp], #4
     760:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000768 <ocrypto_mod_p256_sqr>:
     768:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     76c:	b087      	sub	sp, #28
     76e:	f7ff fe43 	bl	3f8 <ocrypto_sqr256_noframe>
     772:	f8dd 8010 	ldr.w	r8, [sp, #16]
     776:	f8dd 9014 	ldr.w	r9, [sp, #20]
     77a:	f8dd a018 	ldr.w	sl, [sp, #24]
     77e:	f7ff ff6f 	bl	660 <mul_reduce>
     782:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     786:	f7ff ff6b 	bl	660 <mul_reduce>
     78a:	b003      	add	sp, #12
     78c:	f85d 8b04 	ldr.w	r8, [sp], #4
     790:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000798 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     798:	4801      	ldr	r0, [pc, #4]	; (7a0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     79a:	7800      	ldrb	r0, [r0, #0]
     79c:	4770      	bx	lr
     79e:	0000      	.short	0x0000
     7a0:	20000028 	.word	0x20000028

000007a4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     7a4:	b570      	push	{r4, r5, r6, lr}
     7a6:	f00c feec 	bl	d582 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     7aa:	4c13      	ldr	r4, [pc, #76]	; (7f8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>)
     7ac:	f06f 0527 	mvn.w	r5, #39	; 0x27
     7b0:	b928      	cbnz	r0, 7be <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     7b2:	f00c ff1c 	bl	d5ee <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     7b6:	b910      	cbnz	r0, 7be <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
     7b8:	f00c ff23 	bl	d602 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     7bc:	b120      	cbz	r0, 7c8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     7be:	480f      	ldr	r0, [pc, #60]	; (7fc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
     7c0:	6060      	str	r0, [r4, #4]
     7c2:	7065      	strb	r5, [r4, #1]
     7c4:	2008      	movs	r0, #8
     7c6:	e010      	b.n	7ea <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     7c8:	f00c feb0 	bl	d52c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     7cc:	b940      	cbnz	r0, 7e0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
     7ce:	f00c feb7 	bl	d540 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     7d2:	b928      	cbnz	r0, 7e0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
     7d4:	f00c fecb 	bl	d56e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     7d8:	b910      	cbnz	r0, 7e0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
     7da:	f00c fedc 	bl	d596 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     7de:	b130      	cbz	r0, 7ee <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x4a>
     7e0:	4806      	ldr	r0, [pc, #24]	; (7fc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
     7e2:	3031      	adds	r0, #49	; 0x31
     7e4:	6060      	str	r0, [r4, #4]
     7e6:	7065      	strb	r5, [r4, #1]
     7e8:	2004      	movs	r0, #4
     7ea:	70a0      	strb	r0, [r4, #2]
     7ec:	bd70      	pop	{r4, r5, r6, pc}
     7ee:	21e8      	movs	r1, #232	; 0xe8
     7f0:	2074      	movs	r0, #116	; 0x74
     7f2:	f003 fbc3 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     7f6:	0000      	.short	0x0000
     7f8:	20000028 	.word	0x20000028
     7fc:	00010bee 	.word	0x00010bee

00000800 <mpsl_tx_power_radio_supported_power_adjust>:
     800:	4907      	ldr	r1, [pc, #28]	; (820 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
     802:	f991 2002 	ldrsb.w	r2, [r1, #2]
     806:	4290      	cmp	r0, r2
     808:	da03      	bge.n	812 <mpsl_tx_power_radio_supported_power_adjust+0x12>
     80a:	f991 2001 	ldrsb.w	r2, [r1, #1]
     80e:	4290      	cmp	r0, r2
     810:	dc01      	bgt.n	816 <mpsl_tx_power_radio_supported_power_adjust+0x16>
     812:	4610      	mov	r0, r2
     814:	4770      	bx	lr
     816:	6849      	ldr	r1, [r1, #4]
     818:	1a80      	subs	r0, r0, r2
     81a:	5608      	ldrsb	r0, [r1, r0]
     81c:	4770      	bx	lr
     81e:	0000      	.short	0x0000
     820:	20000028 	.word	0x20000028

00000824 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     828:	461c      	mov	r4, r3
     82a:	4690      	mov	r8, r2
     82c:	460d      	mov	r5, r1
     82e:	4606      	mov	r6, r0
     830:	f06f 0715 	mvn.w	r7, #21
     834:	2804      	cmp	r0, #4
     836:	d804      	bhi.n	842 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     838:	b11c      	cbz	r4, 842 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     83a:	f00c fb22 	bl	ce82 <__udivmoddi4+0x2a6>
     83e:	42a8      	cmp	r0, r5
     840:	d802      	bhi.n	848 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     842:	4638      	mov	r0, r7
     844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     848:	4805      	ldr	r0, [pc, #20]	; (860 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     84a:	4642      	mov	r2, r8
     84c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     850:	b118      	cbz	r0, 85a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     852:	5740      	ldrsb	r0, [r0, r5]
     854:	4282      	cmp	r2, r0
     856:	dd00      	ble.n	85a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     858:	4602      	mov	r2, r0
     85a:	7022      	strb	r2, [r4, #0]
     85c:	2000      	movs	r0, #0
     85e:	e7f1      	b.n	844 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     860:	20000c80 	.word	0x20000c80
     864:	2800      	cmp	r0, #0
     866:	d019      	beq.n	89c <CONFIG_BT_RX_STACK_SIZE+0x4>
     868:	7803      	ldrb	r3, [r0, #0]
     86a:	4913      	ldr	r1, [pc, #76]	; (8b8 <CONFIG_BT_RX_STACK_SIZE+0x20>)
     86c:	4a13      	ldr	r2, [pc, #76]	; (8bc <CONFIG_BT_RX_STACK_SIZE+0x24>)
     86e:	b113      	cbz	r3, 876 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x52>
     870:	2b01      	cmp	r3, #1
     872:	d00e      	beq.n	892 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
     874:	e011      	b.n	89a <CONFIG_BT_RX_STACK_SIZE+0x2>
     876:	7903      	ldrb	r3, [r0, #4]
     878:	2b01      	cmp	r3, #1
     87a:	d000      	beq.n	87e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x5a>
     87c:	b96b      	cbnz	r3, 89a <CONFIG_BT_RX_STACK_SIZE+0x2>
     87e:	7943      	ldrb	r3, [r0, #5]
     880:	b10b      	cbz	r3, 886 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
     882:	2b01      	cmp	r3, #1
     884:	d109      	bne.n	89a <CONFIG_BT_RX_STACK_SIZE+0x2>
     886:	6883      	ldr	r3, [r0, #8]
     888:	3b64      	subs	r3, #100	; 0x64
     88a:	428b      	cmp	r3, r1
     88c:	d205      	bcs.n	89a <CONFIG_BT_RX_STACK_SIZE+0x2>
     88e:	68c0      	ldr	r0, [r0, #12]
     890:	e00e      	b.n	8b0 <CONFIG_BT_RX_STACK_SIZE+0x18>
     892:	7903      	ldrb	r3, [r0, #4]
     894:	2b01      	cmp	r3, #1
     896:	d002      	beq.n	89e <CONFIG_BT_RX_STACK_SIZE+0x6>
     898:	b10b      	cbz	r3, 89e <CONFIG_BT_RX_STACK_SIZE+0x6>
     89a:	2000      	movs	r0, #0
     89c:	4770      	bx	lr
     89e:	7943      	ldrb	r3, [r0, #5]
     8a0:	b10b      	cbz	r3, 8a6 <CONFIG_BT_RX_STACK_SIZE+0xe>
     8a2:	2b01      	cmp	r3, #1
     8a4:	d1f9      	bne.n	89a <CONFIG_BT_RX_STACK_SIZE+0x2>
     8a6:	68c3      	ldr	r3, [r0, #12]
     8a8:	3b64      	subs	r3, #100	; 0x64
     8aa:	428b      	cmp	r3, r1
     8ac:	d2f5      	bcs.n	89a <CONFIG_BT_RX_STACK_SIZE+0x2>
     8ae:	6880      	ldr	r0, [r0, #8]
     8b0:	4290      	cmp	r0, r2
     8b2:	d8f2      	bhi.n	89a <CONFIG_BT_RX_STACK_SIZE+0x2>
     8b4:	2001      	movs	r0, #1
     8b6:	4770      	bx	lr
     8b8:	0001863d 	.word	0x0001863d
     8bc:	0f423fff 	.word	0x0f423fff
     8c0:	b510      	push	{r4, lr}
     8c2:	4c05      	ldr	r4, [pc, #20]	; (8d8 <CONFIG_BT_RX_STACK_SIZE+0x40>)
     8c4:	6820      	ldr	r0, [r4, #0]
     8c6:	b110      	cbz	r0, 8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
     8c8:	4780      	blx	r0
     8ca:	2000      	movs	r0, #0
     8cc:	6020      	str	r0, [r4, #0]
     8ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     8d2:	f002 b8f9 	b.w	2ac8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     8d6:	0000      	.short	0x0000
     8d8:	20000030 	.word	0x20000030

000008dc <mpsl_timeslot_session_open>:
     8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8e0:	460e      	mov	r6, r1
     8e2:	0005      	movs	r5, r0
     8e4:	d004      	beq.n	8f0 <mpsl_timeslot_session_open+0x14>
     8e6:	f000 f847 	bl	978 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     8ea:	4607      	mov	r7, r0
     8ec:	2400      	movs	r4, #0
     8ee:	e00b      	b.n	908 <mpsl_timeslot_session_open+0x2c>
     8f0:	f06f 0015 	mvn.w	r0, #21
     8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     8f8:	4620      	mov	r0, r4
     8fa:	f000 f843 	bl	984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     8fe:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
     902:	b130      	cbz	r0, 912 <mpsl_timeslot_session_open+0x36>
     904:	1c64      	adds	r4, r4, #1
     906:	b2e4      	uxtb	r4, r4
     908:	42bc      	cmp	r4, r7
     90a:	d3f5      	bcc.n	8f8 <mpsl_timeslot_session_open+0x1c>
     90c:	f06f 000b 	mvn.w	r0, #11
     910:	e7f0      	b.n	8f4 <mpsl_timeslot_session_open+0x18>
     912:	4627      	mov	r7, r4
     914:	2cff      	cmp	r4, #255	; 0xff
     916:	d0f9      	beq.n	90c <mpsl_timeslot_session_open+0x30>
     918:	4620      	mov	r0, r4
     91a:	f000 f833 	bl	984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     91e:	4604      	mov	r4, r0
     920:	f00c fc7b 	bl	d21a <__udivmoddi4+0x63e>
     924:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
     928:	4621      	mov	r1, r4
     92a:	4808      	ldr	r0, [pc, #32]	; (94c <mpsl_timeslot_session_open+0x70>)
     92c:	f002 f8a4 	bl	2a78 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     930:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
     934:	2820      	cmp	r0, #32
     936:	d006      	beq.n	946 <mpsl_timeslot_session_open+0x6a>
     938:	2001      	movs	r0, #1
     93a:	6225      	str	r5, [r4, #32]
     93c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
     940:	7037      	strb	r7, [r6, #0]
     942:	2000      	movs	r0, #0
     944:	e7d6      	b.n	8f4 <mpsl_timeslot_session_open+0x18>
     946:	f06f 0022 	mvn.w	r0, #34	; 0x22
     94a:	e7d3      	b.n	8f4 <mpsl_timeslot_session_open+0x18>
     94c:	0000cf45 	.word	0x0000cf45

00000950 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     950:	b510      	push	{r4, lr}
     952:	0782      	lsls	r2, r0, #30
     954:	d002      	beq.n	95c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     956:	f06f 000d 	mvn.w	r0, #13
     95a:	bd10      	pop	{r4, pc}
     95c:	4a05      	ldr	r2, [pc, #20]	; (974 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
     95e:	7011      	strb	r1, [r2, #0]
     960:	6050      	str	r0, [r2, #4]
     962:	b128      	cbz	r0, 970 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
     964:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     968:	010a      	lsls	r2, r1, #4
     96a:	2100      	movs	r1, #0
     96c:	f00c fedf 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     970:	2000      	movs	r0, #0
     972:	bd10      	pop	{r4, pc}
     974:	20000034 	.word	0x20000034

00000978 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     978:	4801      	ldr	r0, [pc, #4]	; (980 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     97a:	7800      	ldrb	r0, [r0, #0]
     97c:	4770      	bx	lr
     97e:	0000      	.short	0x0000
     980:	20000034 	.word	0x20000034

00000984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     984:	4905      	ldr	r1, [pc, #20]	; (99c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     986:	780a      	ldrb	r2, [r1, #0]
     988:	4290      	cmp	r0, r2
     98a:	d301      	bcc.n	990 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     98c:	2000      	movs	r0, #0
     98e:	4770      	bx	lr
     990:	6849      	ldr	r1, [r1, #4]
     992:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     996:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     99a:	4770      	bx	lr
     99c:	20000034 	.word	0x20000034

000009a0 <MPSL_IRQ_RADIO_Handler>:
     9a0:	490e      	ldr	r1, [pc, #56]	; (9dc <MPSL_IRQ_RADIO_Handler+0x3c>)
     9a2:	b510      	push	{r4, lr}
     9a4:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     9a8:	2820      	cmp	r0, #32
     9aa:	d012      	beq.n	9d2 <MPSL_IRQ_RADIO_Handler+0x32>
     9ac:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     9b0:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     9b4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     9b8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     9bc:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     9c0:	6840      	ldr	r0, [r0, #4]
     9c2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     9c6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     9ce:	2104      	movs	r1, #4
     9d0:	4710      	bx	r2
     9d2:	f640 0187 	movw	r1, #2183	; 0x887
     9d6:	2070      	movs	r0, #112	; 0x70
     9d8:	f003 fad0 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9dc:	20001094 	.word	0x20001094
     9e0:	b570      	push	{r4, r5, r6, lr}
     9e2:	4605      	mov	r5, r0
     9e4:	2a20      	cmp	r2, #32
     9e6:	d028      	beq.n	a3a <MPSL_IRQ_RADIO_Handler+0x9a>
     9e8:	4819      	ldr	r0, [pc, #100]	; (a50 <MPSL_IRQ_RADIO_Handler+0xb0>)
     9ea:	4c1a      	ldr	r4, [pc, #104]	; (a54 <MPSL_IRQ_RADIO_Handler+0xb4>)
     9ec:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     9f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     9f4:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     9f8:	4423      	add	r3, r4
     9fa:	2920      	cmp	r1, #32
     9fc:	d022      	beq.n	a44 <MPSL_IRQ_RADIO_Handler+0xa4>
     9fe:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     a02:	7840      	ldrb	r0, [r0, #1]
     a04:	784c      	ldrb	r4, [r1, #1]
     a06:	7048      	strb	r0, [r1, #1]
     a08:	4620      	mov	r0, r4
     a0a:	4601      	mov	r1, r0
     a0c:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     a10:	4291      	cmp	r1, r2
     a12:	7005      	strb	r5, [r0, #0]
     a14:	7840      	ldrb	r0, [r0, #1]
     a16:	d1f8      	bne.n	a0a <MPSL_IRQ_RADIO_Handler+0x6a>
     a18:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     a1c:	2a20      	cmp	r2, #32
     a1e:	bf1a      	itte	ne
     a20:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     a24:	7054      	strbne	r4, [r2, #1]
     a26:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     a2a:	2220      	movs	r2, #32
     a2c:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     a30:	f88c 2001 	strb.w	r2, [ip, #1]
     a34:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     a38:	bd70      	pop	{r4, r5, r6, pc}
     a3a:	f240 2192 	movw	r1, #658	; 0x292
     a3e:	2070      	movs	r0, #112	; 0x70
     a40:	f003 fa9c 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a44:	f893 4020 	ldrb.w	r4, [r3, #32]
     a48:	7840      	ldrb	r0, [r0, #1]
     a4a:	f883 0020 	strb.w	r0, [r3, #32]
     a4e:	e7db      	b.n	a08 <MPSL_IRQ_RADIO_Handler+0x68>
     a50:	20001014 	.word	0x20001014
     a54:	20001094 	.word	0x20001094
     a58:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a5c:	b085      	sub	sp, #20
     a5e:	4615      	mov	r5, r2
     a60:	460c      	mov	r4, r1
     a62:	f002 f9eb 	bl	2e3c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     a66:	4428      	add	r0, r5
     a68:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     a6c:	9102      	str	r1, [sp, #8]
     a6e:	6820      	ldr	r0, [r4, #0]
     a70:	1a40      	subs	r0, r0, r1
     a72:	0200      	lsls	r0, r0, #8
     a74:	17c1      	asrs	r1, r0, #31
     a76:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a7a:	1200      	asrs	r0, r0, #8
     a7c:	2800      	cmp	r0, #0
     a7e:	f300 80f0 	bgt.w	c62 <MPSL_IRQ_RADIO_Handler+0x2c2>
     a82:	f8dd 8020 	ldr.w	r8, [sp, #32]
     a86:	48ca      	ldr	r0, [pc, #808]	; (db0 <MPSL_IRQ_RADIO_Handler+0x410>)
     a88:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     a8c:	4408      	add	r0, r1
     a8e:	9003      	str	r0, [sp, #12]
     a90:	f890 5020 	ldrb.w	r5, [r0, #32]
     a94:	2020      	movs	r0, #32
     a96:	4ec7      	ldr	r6, [pc, #796]	; (db4 <MPSL_IRQ_RADIO_Handler+0x414>)
     a98:	46ea      	mov	sl, sp
     a9a:	f10d 0904 	add.w	r9, sp, #4
     a9e:	f88d 0000 	strb.w	r0, [sp]
     aa2:	2d20      	cmp	r5, #32
     aa4:	bf1c      	itt	ne
     aa6:	48c4      	ldrne	r0, [pc, #784]	; (db8 <MPSL_IRQ_RADIO_Handler+0x418>)
     aa8:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     aac:	d039      	beq.n	b22 <MPSL_IRQ_RADIO_Handler+0x182>
     aae:	bf00      	nop
     ab0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     ab4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     ab8:	f100 0108 	add.w	r1, r0, #8
     abc:	68c0      	ldr	r0, [r0, #12]
     abe:	6827      	ldr	r7, [r4, #0]
     ac0:	1a38      	subs	r0, r7, r0
     ac2:	0200      	lsls	r0, r0, #8
     ac4:	17c2      	asrs	r2, r0, #31
     ac6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     aca:	1200      	asrs	r0, r0, #8
     acc:	d429      	bmi.n	b22 <MPSL_IRQ_RADIO_Handler+0x182>
     ace:	89e0      	ldrh	r0, [r4, #14]
     ad0:	b300      	cbz	r0, b14 <MPSL_IRQ_RADIO_Handler+0x174>
     ad2:	89c8      	ldrh	r0, [r1, #14]
     ad4:	b9f0      	cbnz	r0, b14 <MPSL_IRQ_RADIO_Handler+0x174>
     ad6:	6808      	ldr	r0, [r1, #0]
     ad8:	9004      	str	r0, [sp, #16]
     ada:	f003 f8c3 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     ade:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     ae2:	bf08      	it	eq
     ae4:	200d      	moveq	r0, #13
     ae6:	d00b      	beq.n	b00 <MPSL_IRQ_RADIO_Handler+0x160>
     ae8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     aec:	3856      	subs	r0, #86	; 0x56
     aee:	bf08      	it	eq
     af0:	201c      	moveq	r0, #28
     af2:	d005      	beq.n	b00 <MPSL_IRQ_RADIO_Handler+0x160>
     af4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     af8:	389f      	subs	r0, #159	; 0x9f
     afa:	bf14      	ite	ne
     afc:	2000      	movne	r0, #0
     afe:	2032      	moveq	r0, #50	; 0x32
     b00:	1c41      	adds	r1, r0, #1
     b02:	9804      	ldr	r0, [sp, #16]
     b04:	1a38      	subs	r0, r7, r0
     b06:	0200      	lsls	r0, r0, #8
     b08:	17c2      	asrs	r2, r0, #31
     b0a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     b0e:	1200      	asrs	r0, r0, #8
     b10:	4288      	cmp	r0, r1
     b12:	db06      	blt.n	b22 <MPSL_IRQ_RADIO_Handler+0x182>
     b14:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     b18:	f88a 5000 	strb.w	r5, [sl]
     b1c:	7845      	ldrb	r5, [r0, #1]
     b1e:	2d20      	cmp	r5, #32
     b20:	d1c6      	bne.n	ab0 <MPSL_IRQ_RADIO_Handler+0x110>
     b22:	f89a 0000 	ldrb.w	r0, [sl]
     b26:	f889 0000 	strb.w	r0, [r9]
     b2a:	2d20      	cmp	r5, #32
     b2c:	bf1c      	itt	ne
     b2e:	48a2      	ldrne	r0, [pc, #648]	; (db8 <MPSL_IRQ_RADIO_Handler+0x418>)
     b30:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     b34:	f000 8138 	beq.w	da8 <MPSL_IRQ_RADIO_Handler+0x408>
     b38:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     b3c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     b40:	6860      	ldr	r0, [r4, #4]
     b42:	f8d7 8008 	ldr.w	r8, [r7, #8]
     b46:	f107 0108 	add.w	r1, r7, #8
     b4a:	eba8 0000 	sub.w	r0, r8, r0
     b4e:	0200      	lsls	r0, r0, #8
     b50:	17c2      	asrs	r2, r0, #31
     b52:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     b56:	1200      	asrs	r0, r0, #8
     b58:	d427      	bmi.n	baa <MPSL_IRQ_RADIO_Handler+0x20a>
     b5a:	89c8      	ldrh	r0, [r1, #14]
     b5c:	2800      	cmp	r0, #0
     b5e:	f000 8123 	beq.w	da8 <MPSL_IRQ_RADIO_Handler+0x408>
     b62:	89e0      	ldrh	r0, [r4, #14]
     b64:	2800      	cmp	r0, #0
     b66:	f040 811f 	bne.w	da8 <MPSL_IRQ_RADIO_Handler+0x408>
     b6a:	f8d4 a000 	ldr.w	sl, [r4]
     b6e:	f003 f879 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     b72:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     b76:	bf08      	it	eq
     b78:	200d      	moveq	r0, #13
     b7a:	d00b      	beq.n	b94 <MPSL_IRQ_RADIO_Handler+0x1f4>
     b7c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     b80:	3856      	subs	r0, #86	; 0x56
     b82:	bf08      	it	eq
     b84:	201c      	moveq	r0, #28
     b86:	d005      	beq.n	b94 <MPSL_IRQ_RADIO_Handler+0x1f4>
     b88:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     b8c:	389f      	subs	r0, #159	; 0x9f
     b8e:	bf14      	ite	ne
     b90:	2000      	movne	r0, #0
     b92:	2032      	moveq	r0, #50	; 0x32
     b94:	1c41      	adds	r1, r0, #1
     b96:	eba8 000a 	sub.w	r0, r8, sl
     b9a:	0200      	lsls	r0, r0, #8
     b9c:	17c2      	asrs	r2, r0, #31
     b9e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     ba2:	1200      	asrs	r0, r0, #8
     ba4:	4288      	cmp	r0, r1
     ba6:	f280 80ff 	bge.w	da8 <MPSL_IRQ_RADIO_Handler+0x408>
     baa:	f889 5000 	strb.w	r5, [r9]
     bae:	7e39      	ldrb	r1, [r7, #24]
     bb0:	7c20      	ldrb	r0, [r4, #16]
     bb2:	4281      	cmp	r1, r0
     bb4:	d906      	bls.n	bc4 <MPSL_IRQ_RADIO_Handler+0x224>
     bb6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     bba:	7845      	ldrb	r5, [r0, #1]
     bbc:	2d20      	cmp	r5, #32
     bbe:	d1bb      	bne.n	b38 <MPSL_IRQ_RADIO_Handler+0x198>
     bc0:	f000 b8f2 	b.w	da8 <MPSL_IRQ_RADIO_Handler+0x408>
     bc4:	f89d 0004 	ldrb.w	r0, [sp, #4]
     bc8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     bcc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     bd0:	8ac1      	ldrh	r1, [r0, #22]
     bd2:	68c5      	ldr	r5, [r0, #12]
     bd4:	bbe1      	cbnz	r1, c50 <MPSL_IRQ_RADIO_Handler+0x2b0>
     bd6:	89e1      	ldrh	r1, [r4, #14]
     bd8:	b3d1      	cbz	r1, c50 <MPSL_IRQ_RADIO_Handler+0x2b0>
     bda:	6887      	ldr	r7, [r0, #8]
     bdc:	f003 f842 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     be0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     be4:	bf08      	it	eq
     be6:	200d      	moveq	r0, #13
     be8:	d00b      	beq.n	c02 <MPSL_IRQ_RADIO_Handler+0x262>
     bea:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     bee:	3856      	subs	r0, #86	; 0x56
     bf0:	bf08      	it	eq
     bf2:	201c      	moveq	r0, #28
     bf4:	d005      	beq.n	c02 <MPSL_IRQ_RADIO_Handler+0x262>
     bf6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     bfa:	389f      	subs	r0, #159	; 0x9f
     bfc:	bf14      	ite	ne
     bfe:	2000      	movne	r0, #0
     c00:	2032      	moveq	r0, #50	; 0x32
     c02:	1c41      	adds	r1, r0, #1
     c04:	1be8      	subs	r0, r5, r7
     c06:	0200      	lsls	r0, r0, #8
     c08:	17c2      	asrs	r2, r0, #31
     c0a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     c0e:	1200      	asrs	r0, r0, #8
     c10:	4288      	cmp	r0, r1
     c12:	da1d      	bge.n	c50 <MPSL_IRQ_RADIO_Handler+0x2b0>
     c14:	f003 f826 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     c18:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     c1c:	bf08      	it	eq
     c1e:	200d      	moveq	r0, #13
     c20:	d00b      	beq.n	c3a <MPSL_IRQ_RADIO_Handler+0x29a>
     c22:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     c26:	3856      	subs	r0, #86	; 0x56
     c28:	bf08      	it	eq
     c2a:	201c      	moveq	r0, #28
     c2c:	d005      	beq.n	c3a <MPSL_IRQ_RADIO_Handler+0x29a>
     c2e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     c32:	389f      	subs	r0, #159	; 0x9f
     c34:	bf14      	ite	ne
     c36:	2000      	movne	r0, #0
     c38:	2032      	moveq	r0, #50	; 0x32
     c3a:	f89d 1004 	ldrb.w	r1, [sp, #4]
     c3e:	1c40      	adds	r0, r0, #1
     c40:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     c44:	eb06 0181 	add.w	r1, r6, r1, lsl #2
     c48:	6889      	ldr	r1, [r1, #8]
     c4a:	4408      	add	r0, r1
     c4c:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     c50:	9802      	ldr	r0, [sp, #8]
     c52:	1a28      	subs	r0, r5, r0
     c54:	0200      	lsls	r0, r0, #8
     c56:	17c1      	asrs	r1, r0, #31
     c58:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     c5c:	1200      	asrs	r0, r0, #8
     c5e:	2800      	cmp	r0, #0
     c60:	dd03      	ble.n	c6a <MPSL_IRQ_RADIO_Handler+0x2ca>
     c62:	b009      	add	sp, #36	; 0x24
     c64:	2000      	movs	r0, #0
     c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c6a:	e9d4 1000 	ldrd	r1, r0, [r4]
     c6e:	1a40      	subs	r0, r0, r1
     c70:	4428      	add	r0, r5
     c72:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
     c76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     c7a:	e9c4 1000 	strd	r1, r0, [r4]
     c7e:	9808      	ldr	r0, [sp, #32]
     c80:	9004      	str	r0, [sp, #16]
     c82:	9803      	ldr	r0, [sp, #12]
     c84:	46ea      	mov	sl, sp
     c86:	f10d 0804 	add.w	r8, sp, #4
     c8a:	f890 5020 	ldrb.w	r5, [r0, #32]
     c8e:	2020      	movs	r0, #32
     c90:	f88d 0000 	strb.w	r0, [sp]
     c94:	2d20      	cmp	r5, #32
     c96:	d03c      	beq.n	d12 <MPSL_IRQ_RADIO_Handler+0x372>
     c98:	4847      	ldr	r0, [pc, #284]	; (db8 <MPSL_IRQ_RADIO_Handler+0x418>)
     c9a:	9904      	ldr	r1, [sp, #16]
     c9c:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
     ca0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     ca4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     ca8:	f100 0108 	add.w	r1, r0, #8
     cac:	68c0      	ldr	r0, [r0, #12]
     cae:	6827      	ldr	r7, [r4, #0]
     cb0:	1a38      	subs	r0, r7, r0
     cb2:	0200      	lsls	r0, r0, #8
     cb4:	17c2      	asrs	r2, r0, #31
     cb6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     cba:	1200      	asrs	r0, r0, #8
     cbc:	d429      	bmi.n	d12 <MPSL_IRQ_RADIO_Handler+0x372>
     cbe:	89e0      	ldrh	r0, [r4, #14]
     cc0:	b300      	cbz	r0, d04 <MPSL_IRQ_RADIO_Handler+0x364>
     cc2:	89c8      	ldrh	r0, [r1, #14]
     cc4:	b9f0      	cbnz	r0, d04 <MPSL_IRQ_RADIO_Handler+0x364>
     cc6:	f8d1 9000 	ldr.w	r9, [r1]
     cca:	f002 ffcb 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     cce:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     cd2:	bf08      	it	eq
     cd4:	200d      	moveq	r0, #13
     cd6:	d00b      	beq.n	cf0 <MPSL_IRQ_RADIO_Handler+0x350>
     cd8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     cdc:	3856      	subs	r0, #86	; 0x56
     cde:	bf08      	it	eq
     ce0:	201c      	moveq	r0, #28
     ce2:	d005      	beq.n	cf0 <MPSL_IRQ_RADIO_Handler+0x350>
     ce4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     ce8:	389f      	subs	r0, #159	; 0x9f
     cea:	bf14      	ite	ne
     cec:	2000      	movne	r0, #0
     cee:	2032      	moveq	r0, #50	; 0x32
     cf0:	1c41      	adds	r1, r0, #1
     cf2:	eba7 0009 	sub.w	r0, r7, r9
     cf6:	0200      	lsls	r0, r0, #8
     cf8:	17c2      	asrs	r2, r0, #31
     cfa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     cfe:	1200      	asrs	r0, r0, #8
     d00:	4288      	cmp	r0, r1
     d02:	db06      	blt.n	d12 <MPSL_IRQ_RADIO_Handler+0x372>
     d04:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     d08:	f88a 5000 	strb.w	r5, [sl]
     d0c:	7845      	ldrb	r5, [r0, #1]
     d0e:	2d20      	cmp	r5, #32
     d10:	d1c6      	bne.n	ca0 <MPSL_IRQ_RADIO_Handler+0x300>
     d12:	f89a 0000 	ldrb.w	r0, [sl]
     d16:	f888 0000 	strb.w	r0, [r8]
     d1a:	9804      	ldr	r0, [sp, #16]
     d1c:	2d20      	cmp	r5, #32
     d1e:	bf1c      	itt	ne
     d20:	4925      	ldrne	r1, [pc, #148]	; (db8 <MPSL_IRQ_RADIO_Handler+0x418>)
     d22:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
     d26:	d03f      	beq.n	da8 <MPSL_IRQ_RADIO_Handler+0x408>
     d28:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     d2c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     d30:	6861      	ldr	r1, [r4, #4]
     d32:	f8d7 9008 	ldr.w	r9, [r7, #8]
     d36:	f107 0008 	add.w	r0, r7, #8
     d3a:	eba9 0101 	sub.w	r1, r9, r1
     d3e:	0209      	lsls	r1, r1, #8
     d40:	17ca      	asrs	r2, r1, #31
     d42:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     d46:	1209      	asrs	r1, r1, #8
     d48:	d422      	bmi.n	d90 <MPSL_IRQ_RADIO_Handler+0x3f0>
     d4a:	89c0      	ldrh	r0, [r0, #14]
     d4c:	b360      	cbz	r0, da8 <MPSL_IRQ_RADIO_Handler+0x408>
     d4e:	89e0      	ldrh	r0, [r4, #14]
     d50:	bb50      	cbnz	r0, da8 <MPSL_IRQ_RADIO_Handler+0x408>
     d52:	f8d4 a000 	ldr.w	sl, [r4]
     d56:	f002 ff85 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     d5a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     d5e:	bf08      	it	eq
     d60:	200d      	moveq	r0, #13
     d62:	d00b      	beq.n	d7c <MPSL_IRQ_RADIO_Handler+0x3dc>
     d64:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     d68:	3856      	subs	r0, #86	; 0x56
     d6a:	bf08      	it	eq
     d6c:	201c      	moveq	r0, #28
     d6e:	d005      	beq.n	d7c <MPSL_IRQ_RADIO_Handler+0x3dc>
     d70:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     d74:	389f      	subs	r0, #159	; 0x9f
     d76:	bf14      	ite	ne
     d78:	2000      	movne	r0, #0
     d7a:	2032      	moveq	r0, #50	; 0x32
     d7c:	1c41      	adds	r1, r0, #1
     d7e:	eba9 000a 	sub.w	r0, r9, sl
     d82:	0200      	lsls	r0, r0, #8
     d84:	17c2      	asrs	r2, r0, #31
     d86:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     d8a:	1200      	asrs	r0, r0, #8
     d8c:	4288      	cmp	r0, r1
     d8e:	da0b      	bge.n	da8 <MPSL_IRQ_RADIO_Handler+0x408>
     d90:	f888 5000 	strb.w	r5, [r8]
     d94:	7e38      	ldrb	r0, [r7, #24]
     d96:	7c21      	ldrb	r1, [r4, #16]
     d98:	4288      	cmp	r0, r1
     d9a:	f67f af13 	bls.w	bc4 <MPSL_IRQ_RADIO_Handler+0x224>
     d9e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     da2:	7845      	ldrb	r5, [r0, #1]
     da4:	2d20      	cmp	r5, #32
     da6:	d1bf      	bne.n	d28 <MPSL_IRQ_RADIO_Handler+0x388>
     da8:	b009      	add	sp, #36	; 0x24
     daa:	2001      	movs	r0, #1
     dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     db0:	20001094 	.word	0x20001094
     db4:	20000c94 	.word	0x20000c94
     db8:	20001014 	.word	0x20001014
     dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dc0:	460f      	mov	r7, r1
     dc2:	4606      	mov	r6, r0
     dc4:	eb01 0047 	add.w	r0, r1, r7, lsl #1
     dc8:	494b      	ldr	r1, [pc, #300]	; (ef8 <MPSL_IRQ_RADIO_Handler+0x558>)
     dca:	4699      	mov	r9, r3
     dcc:	4408      	add	r0, r1
     dce:	4692      	mov	sl, r2
     dd0:	f890 4020 	ldrb.w	r4, [r0, #32]
     dd4:	2020      	movs	r0, #32
     dd6:	7010      	strb	r0, [r2, #0]
     dd8:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
     ddc:	2c20      	cmp	r4, #32
     dde:	bf1c      	itt	ne
     de0:	4846      	ldrne	r0, [pc, #280]	; (efc <MPSL_IRQ_RADIO_Handler+0x55c>)
     de2:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     de6:	d038      	beq.n	e5a <MPSL_IRQ_RADIO_Handler+0x4ba>
     de8:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     dec:	eb08 0080 	add.w	r0, r8, r0, lsl #2
     df0:	f100 0108 	add.w	r1, r0, #8
     df4:	68c0      	ldr	r0, [r0, #12]
     df6:	6835      	ldr	r5, [r6, #0]
     df8:	1a28      	subs	r0, r5, r0
     dfa:	0200      	lsls	r0, r0, #8
     dfc:	17c2      	asrs	r2, r0, #31
     dfe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e02:	1200      	asrs	r0, r0, #8
     e04:	d429      	bmi.n	e5a <MPSL_IRQ_RADIO_Handler+0x4ba>
     e06:	89f0      	ldrh	r0, [r6, #14]
     e08:	b300      	cbz	r0, e4c <MPSL_IRQ_RADIO_Handler+0x4ac>
     e0a:	89c8      	ldrh	r0, [r1, #14]
     e0c:	b9f0      	cbnz	r0, e4c <MPSL_IRQ_RADIO_Handler+0x4ac>
     e0e:	6808      	ldr	r0, [r1, #0]
     e10:	9000      	str	r0, [sp, #0]
     e12:	f002 ff27 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     e16:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     e1a:	bf08      	it	eq
     e1c:	200d      	moveq	r0, #13
     e1e:	d00b      	beq.n	e38 <MPSL_IRQ_RADIO_Handler+0x498>
     e20:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     e24:	3856      	subs	r0, #86	; 0x56
     e26:	bf08      	it	eq
     e28:	201c      	moveq	r0, #28
     e2a:	d005      	beq.n	e38 <MPSL_IRQ_RADIO_Handler+0x498>
     e2c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     e30:	389f      	subs	r0, #159	; 0x9f
     e32:	bf14      	ite	ne
     e34:	2000      	movne	r0, #0
     e36:	2032      	moveq	r0, #50	; 0x32
     e38:	1c41      	adds	r1, r0, #1
     e3a:	9800      	ldr	r0, [sp, #0]
     e3c:	1a28      	subs	r0, r5, r0
     e3e:	0200      	lsls	r0, r0, #8
     e40:	17c2      	asrs	r2, r0, #31
     e42:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e46:	1200      	asrs	r0, r0, #8
     e48:	4288      	cmp	r0, r1
     e4a:	db06      	blt.n	e5a <MPSL_IRQ_RADIO_Handler+0x4ba>
     e4c:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
     e50:	f88a 4000 	strb.w	r4, [sl]
     e54:	7844      	ldrb	r4, [r0, #1]
     e56:	2c20      	cmp	r4, #32
     e58:	d1c6      	bne.n	de8 <MPSL_IRQ_RADIO_Handler+0x448>
     e5a:	f89a 0000 	ldrb.w	r0, [sl]
     e5e:	f889 0000 	strb.w	r0, [r9]
     e62:	2c20      	cmp	r4, #32
     e64:	bf1c      	itt	ne
     e66:	4825      	ldrne	r0, [pc, #148]	; (efc <MPSL_IRQ_RADIO_Handler+0x55c>)
     e68:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
     e6c:	d040      	beq.n	ef0 <MPSL_IRQ_RADIO_Handler+0x550>
     e6e:	bf00      	nop
     e70:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     e74:	eb08 0780 	add.w	r7, r8, r0, lsl #2
     e78:	6870      	ldr	r0, [r6, #4]
     e7a:	68bd      	ldr	r5, [r7, #8]
     e7c:	f107 0108 	add.w	r1, r7, #8
     e80:	1a28      	subs	r0, r5, r0
     e82:	0200      	lsls	r0, r0, #8
     e84:	17c2      	asrs	r2, r0, #31
     e86:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e8a:	1200      	asrs	r0, r0, #8
     e8c:	d422      	bmi.n	ed4 <MPSL_IRQ_RADIO_Handler+0x534>
     e8e:	89c8      	ldrh	r0, [r1, #14]
     e90:	b370      	cbz	r0, ef0 <MPSL_IRQ_RADIO_Handler+0x550>
     e92:	89f0      	ldrh	r0, [r6, #14]
     e94:	bb60      	cbnz	r0, ef0 <MPSL_IRQ_RADIO_Handler+0x550>
     e96:	f8d6 b000 	ldr.w	fp, [r6]
     e9a:	f002 fee3 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     e9e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     ea2:	bf08      	it	eq
     ea4:	200d      	moveq	r0, #13
     ea6:	d00b      	beq.n	ec0 <MPSL_IRQ_RADIO_Handler+0x520>
     ea8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     eac:	3856      	subs	r0, #86	; 0x56
     eae:	bf08      	it	eq
     eb0:	201c      	moveq	r0, #28
     eb2:	d005      	beq.n	ec0 <MPSL_IRQ_RADIO_Handler+0x520>
     eb4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     eb8:	389f      	subs	r0, #159	; 0x9f
     eba:	bf14      	ite	ne
     ebc:	2000      	movne	r0, #0
     ebe:	2032      	moveq	r0, #50	; 0x32
     ec0:	1c41      	adds	r1, r0, #1
     ec2:	eba5 000b 	sub.w	r0, r5, fp
     ec6:	0200      	lsls	r0, r0, #8
     ec8:	17c2      	asrs	r2, r0, #31
     eca:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     ece:	1200      	asrs	r0, r0, #8
     ed0:	4288      	cmp	r0, r1
     ed2:	da0d      	bge.n	ef0 <MPSL_IRQ_RADIO_Handler+0x550>
     ed4:	f889 4000 	strb.w	r4, [r9]
     ed8:	7e38      	ldrb	r0, [r7, #24]
     eda:	7c31      	ldrb	r1, [r6, #16]
     edc:	4288      	cmp	r0, r1
     ede:	d802      	bhi.n	ee6 <MPSL_IRQ_RADIO_Handler+0x546>
     ee0:	2000      	movs	r0, #0
     ee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ee6:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
     eea:	7844      	ldrb	r4, [r0, #1]
     eec:	2c20      	cmp	r4, #32
     eee:	d1bf      	bne.n	e70 <MPSL_IRQ_RADIO_Handler+0x4d0>
     ef0:	2001      	movs	r0, #1
     ef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ef6:	0000      	.short	0x0000
     ef8:	20001094 	.word	0x20001094
     efc:	20001014 	.word	0x20001014
     f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f04:	b082      	sub	sp, #8
     f06:	4605      	mov	r5, r0
     f08:	4614      	mov	r4, r2
     f0a:	4688      	mov	r8, r1
     f0c:	89d0      	ldrh	r0, [r2, #14]
     f0e:	aa01      	add	r2, sp, #4
     f10:	4669      	mov	r1, sp
     f12:	f001 ffaf 	bl	2e74 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f16:	f002 fcd7 	bl	38c8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     f1a:	f001 ff8f 	bl	2e3c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f1e:	4607      	mov	r7, r0
     f20:	4820      	ldr	r0, [pc, #128]	; (fa4 <MPSL_IRQ_RADIO_Handler+0x604>)
     f22:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
     f26:	2920      	cmp	r1, #32
     f28:	d004      	beq.n	f34 <MPSL_IRQ_RADIO_Handler+0x594>
     f2a:	68c0      	ldr	r0, [r0, #12]
     f2c:	1d40      	adds	r0, r0, #5
     f2e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f32:	e024      	b.n	f7e <MPSL_IRQ_RADIO_Handler+0x5de>
     f34:	89e0      	ldrh	r0, [r4, #14]
     f36:	f105 0609 	add.w	r6, r5, #9
     f3a:	b1b0      	cbz	r0, f6a <MPSL_IRQ_RADIO_Handler+0x5ca>
     f3c:	f002 ffa6 	bl	3e8c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     f40:	b998      	cbnz	r0, f6a <MPSL_IRQ_RADIO_Handler+0x5ca>
     f42:	f002 fe8f 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     f46:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     f4a:	bf08      	it	eq
     f4c:	200d      	moveq	r0, #13
     f4e:	d00b      	beq.n	f68 <MPSL_IRQ_RADIO_Handler+0x5c8>
     f50:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     f54:	3856      	subs	r0, #86	; 0x56
     f56:	bf08      	it	eq
     f58:	201c      	moveq	r0, #28
     f5a:	d005      	beq.n	f68 <MPSL_IRQ_RADIO_Handler+0x5c8>
     f5c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     f60:	389f      	subs	r0, #159	; 0x9f
     f62:	bf14      	ite	ne
     f64:	2000      	movne	r0, #0
     f66:	2032      	moveq	r0, #50	; 0x32
     f68:	4406      	add	r6, r0
     f6a:	f1b8 0f00 	cmp.w	r8, #0
     f6e:	d104      	bne.n	f7a <MPSL_IRQ_RADIO_Handler+0x5da>
     f70:	9800      	ldr	r0, [sp, #0]
     f72:	4287      	cmp	r7, r0
     f74:	bf84      	itt	hi
     f76:	1a38      	subhi	r0, r7, r0
     f78:	4406      	addhi	r6, r0
     f7a:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     f7e:	e9d4 2000 	ldrd	r2, r0, [r4]
     f82:	1a80      	subs	r0, r0, r2
     f84:	4408      	add	r0, r1
     f86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f8a:	e9c4 1000 	strd	r1, r0, [r4]
     f8e:	42a9      	cmp	r1, r5
     f90:	bf24      	itt	cs
     f92:	b002      	addcs	sp, #8
     f94:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
     f98:	68a0      	ldr	r0, [r4, #8]
     f9a:	1c40      	adds	r0, r0, #1
     f9c:	60a0      	str	r0, [r4, #8]
     f9e:	b002      	add	sp, #8
     fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fa4:	20001094 	.word	0x20001094
     fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fac:	b097      	sub	sp, #92	; 0x5c
     fae:	4617      	mov	r7, r2
     fb0:	468b      	mov	fp, r1
     fb2:	4605      	mov	r5, r0
     fb4:	f002 f9f0 	bl	3398 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     fb8:	4604      	mov	r4, r0
     fba:	f002 fc85 	bl	38c8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     fbe:	4606      	mov	r6, r0
     fc0:	f1bb 0f01 	cmp.w	fp, #1
     fc4:	bf18      	it	ne
     fc6:	f1bb 0f02 	cmpne.w	fp, #2
     fca:	d005      	beq.n	fd8 <MPSL_IRQ_RADIO_Handler+0x638>
     fcc:	f640 115d 	movw	r1, #2397	; 0x95d
     fd0:	f04f 0070 	mov.w	r0, #112	; 0x70
     fd4:	f002 ffd2 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fd8:	49f8      	ldr	r1, [pc, #992]	; (13bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34>)
     fda:	2001      	movs	r0, #1
     fdc:	6008      	str	r0, [r1, #0]
     fde:	49f8      	ldr	r1, [pc, #992]	; (13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>)
     fe0:	6889      	ldr	r1, [r1, #8]
     fe2:	6008      	str	r0, [r1, #0]
     fe4:	2000      	movs	r0, #0
     fe6:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
     fea:	900c      	str	r0, [sp, #48]	; 0x30
     fec:	1e40      	subs	r0, r0, #1
     fee:	900d      	str	r0, [sp, #52]	; 0x34
     ff0:	49f4      	ldr	r1, [pc, #976]	; (13c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c>)
     ff2:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
     ff6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     ffa:	f100 0108 	add.w	r1, r0, #8
     ffe:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    1002:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    1006:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    100a:	6980      	ldr	r0, [r0, #24]
    100c:	9012      	str	r0, [sp, #72]	; 0x48
    100e:	a80e      	add	r0, sp, #56	; 0x38
    1010:	f000 fbc4 	bl	179c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x414>
    1014:	9007      	str	r0, [sp, #28]
    1016:	48ec      	ldr	r0, [pc, #944]	; (13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>)
    1018:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    101c:	8b80      	ldrh	r0, [r0, #28]
    101e:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    1022:	f1b8 0f00 	cmp.w	r8, #0
    1026:	bf04      	itt	eq
    1028:	2000      	moveq	r0, #0
    102a:	9006      	streq	r0, [sp, #24]
    102c:	d00b      	beq.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
    102e:	2001      	movs	r0, #1
    1030:	9006      	str	r0, [sp, #24]
    1032:	48e5      	ldr	r0, [pc, #916]	; (13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>)
    1034:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    1038:	b928      	cbnz	r0, 1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
    103a:	f002 ff27 	bl	3e8c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    103e:	2800      	cmp	r0, #0
    1040:	bf08      	it	eq
    1042:	2701      	moveq	r7, #1
    1044:	d000      	beq.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    1046:	2700      	movs	r7, #0
    1048:	f002 fe0c 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    104c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1050:	bf08      	it	eq
    1052:	200d      	moveq	r0, #13
    1054:	d00b      	beq.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
    1056:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    105a:	3856      	subs	r0, #86	; 0x56
    105c:	bf08      	it	eq
    105e:	201c      	moveq	r0, #28
    1060:	d005      	beq.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
    1062:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1066:	389f      	subs	r0, #159	; 0x9f
    1068:	bf14      	ite	ne
    106a:	2000      	movne	r0, #0
    106c:	2032      	moveq	r0, #50	; 0x32
    106e:	f04f 0900 	mov.w	r9, #0
    1072:	46ca      	mov	sl, r9
    1074:	900b      	str	r0, [sp, #44]	; 0x2c
    1076:	4546      	cmp	r6, r8
    1078:	d938      	bls.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
    107a:	9907      	ldr	r1, [sp, #28]
    107c:	f8df 934c 	ldr.w	r9, [pc, #844]	; 13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    1080:	ea6f 0c06 	mvn.w	ip, r6
    1084:	466b      	mov	r3, sp
    1086:	aa16      	add	r2, sp, #88	; 0x58
    1088:	eb01 000c 	add.w	r0, r1, ip
    108c:	4549      	cmp	r1, r9
    108e:	d904      	bls.n	109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
    1090:	f240 516f 	movw	r1, #1391	; 0x56f
    1094:	2070      	movs	r0, #112	; 0x70
    1096:	f002 ff71 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    109a:	49cd      	ldr	r1, [pc, #820]	; (13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>)
    109c:	458c      	cmp	ip, r1
    109e:	dd04      	ble.n	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
    10a0:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    10a4:	2070      	movs	r0, #112	; 0x70
    10a6:	f002 ff69 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10aa:	49ca      	ldr	r1, [pc, #808]	; (13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>)
    10ac:	458c      	cmp	ip, r1
    10ae:	da04      	bge.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
    10b0:	f240 5171 	movw	r1, #1393	; 0x571
    10b4:	2070      	movs	r0, #112	; 0x70
    10b6:	f002 ff61 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ba:	49c7      	ldr	r1, [pc, #796]	; (13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>)
    10bc:	4281      	cmp	r1, r0
    10be:	bfdc      	itt	le
    10c0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    10c4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    10c8:	dd05      	ble.n	10d6 <CONFIG_FPROTECT_BLOCK_SIZE+0xd6>
    10ca:	2800      	cmp	r0, #0
    10cc:	bfbc      	itt	lt
    10ce:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    10d2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    10d6:	4619      	mov	r1, r3
    10d8:	f001 fecc 	bl	2e74 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    10dc:	9800      	ldr	r0, [sp, #0]
    10de:	990e      	ldr	r1, [sp, #56]	; 0x38
    10e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    10e4:	9000      	str	r0, [sp, #0]
    10e6:	1a08      	subs	r0, r1, r0
    10e8:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    10ec:	2f00      	cmp	r7, #0
    10ee:	bf18      	it	ne
    10f0:	f8dd a02c 	ldrne.w	sl, [sp, #44]	; 0x2c
    10f4:	d105      	bne.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
    10f6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    10fa:	2800      	cmp	r0, #0
    10fc:	bf18      	it	ne
    10fe:	f04f 0a02 	movne.w	sl, #2
    1102:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1106:	d008      	beq.n	111a <CONFIG_FPROTECT_BLOCK_SIZE+0x11a>
    1108:	980e      	ldr	r0, [sp, #56]	; 0x38
    110a:	1b00      	subs	r0, r0, r4
    110c:	0200      	lsls	r0, r0, #8
    110e:	17c1      	asrs	r1, r0, #31
    1110:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1114:	1200      	asrs	r0, r0, #8
    1116:	2801      	cmp	r0, #1
    1118:	da01      	bge.n	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
    111a:	2003      	movs	r0, #3
    111c:	e00d      	b.n	113a <CONFIG_FPROTECT_BLOCK_SIZE+0x13a>
    111e:	b157      	cbz	r7, 1136 <CONFIG_FPROTECT_BLOCK_SIZE+0x136>
    1120:	48a9      	ldr	r0, [pc, #676]	; (13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>)
    1122:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    1126:	b130      	cbz	r0, 1136 <CONFIG_FPROTECT_BLOCK_SIZE+0x136>
    1128:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    112c:	f110 0a00 	adds.w	sl, r0, #0
    1130:	bf18      	it	ne
    1132:	f04f 0a02 	movne.w	sl, #2
    1136:	4625      	mov	r5, r4
    1138:	2000      	movs	r0, #0
    113a:	4482      	add	sl, r0
    113c:	980e      	ldr	r0, [sp, #56]	; 0x38
    113e:	eba0 0009 	sub.w	r0, r0, r9
    1142:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1146:	1e50      	subs	r0, r2, #1
    1148:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    114c:	1b41      	subs	r1, r0, r5
    114e:	0209      	lsls	r1, r1, #8
    1150:	17cb      	asrs	r3, r1, #31
    1152:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    1156:	1209      	asrs	r1, r1, #8
    1158:	4551      	cmp	r1, sl
    115a:	db04      	blt.n	1166 <CONFIG_FPROTECT_BLOCK_SIZE+0x166>
    115c:	f1b9 0f00 	cmp.w	r9, #0
    1160:	bf18      	it	ne
    1162:	920e      	strne	r2, [sp, #56]	; 0x38
    1164:	e02d      	b.n	11c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c2>
    1166:	f1b9 0f00 	cmp.w	r9, #0
    116a:	d005      	beq.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
    116c:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
    1170:	b920      	cbnz	r0, 117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
    1172:	f002 fb9f 	bl	38b4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1176:	b108      	cbz	r0, 117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
    1178:	b9af      	cbnz	r7, 11a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a6>
    117a:	e00c      	b.n	1196 <CONFIG_FPROTECT_BLOCK_SIZE+0x196>
    117c:	b92f      	cbnz	r7, 118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
    117e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1182:	2800      	cmp	r0, #0
    1184:	bf18      	it	ne
    1186:	f1aa 0a02 	subne.w	sl, sl, #2
    118a:	f04f 0900 	mov.w	r9, #0
    118e:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
    1192:	464e      	mov	r6, r9
    1194:	e007      	b.n	11a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a6>
    1196:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    119a:	b120      	cbz	r0, 11a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a6>
    119c:	2000      	movs	r0, #0
    119e:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    11a2:	f1aa 0a02 	sub.w	sl, sl, #2
    11a6:	980e      	ldr	r0, [sp, #56]	; 0x38
    11a8:	eba0 0009 	sub.w	r0, r0, r9
    11ac:	1e40      	subs	r0, r0, #1
    11ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    11b2:	1b41      	subs	r1, r0, r5
    11b4:	0209      	lsls	r1, r1, #8
    11b6:	17ca      	asrs	r2, r1, #31
    11b8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    11bc:	1209      	asrs	r1, r1, #8
    11be:	4551      	cmp	r1, sl
    11c0:	db7e      	blt.n	12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>
    11c2:	9714      	str	r7, [sp, #80]	; 0x50
    11c4:	4605      	mov	r5, r0
    11c6:	f04f 0900 	mov.w	r9, #0
    11ca:	9f06      	ldr	r7, [sp, #24]
    11cc:	f001 ffbc 	bl	3148 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11d0:	1a28      	subs	r0, r5, r0
    11d2:	0200      	lsls	r0, r0, #8
    11d4:	17c1      	asrs	r1, r0, #31
    11d6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    11da:	ea4f 2a20 	mov.w	sl, r0, asr #8
    11de:	f002 fd41 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    11e2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    11e6:	bf08      	it	eq
    11e8:	200d      	moveq	r0, #13
    11ea:	d00b      	beq.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11ec:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    11f0:	3856      	subs	r0, #86	; 0x56
    11f2:	bf08      	it	eq
    11f4:	201c      	moveq	r0, #28
    11f6:	d005      	beq.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11f8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    11fc:	389f      	subs	r0, #159	; 0x9f
    11fe:	bf14      	ite	ne
    1200:	2000      	movne	r0, #0
    1202:	2032      	moveq	r0, #50	; 0x32
    1204:	300b      	adds	r0, #11
    1206:	4582      	cmp	sl, r0
    1208:	da20      	bge.n	124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>
    120a:	f1bb 0f01 	cmp.w	fp, #1
    120e:	d002      	beq.n	1216 <CONFIG_FPROTECT_BLOCK_SIZE+0x216>
    1210:	9814      	ldr	r0, [sp, #80]	; 0x50
    1212:	b140      	cbz	r0, 1226 <CONFIG_FPROTECT_BLOCK_SIZE+0x226>
    1214:	e012      	b.n	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    1216:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    121a:	d11c      	bne.n	1256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
    121c:	f640 01de 	movw	r1, #2270	; 0x8de
    1220:	2070      	movs	r0, #112	; 0x70
    1222:	f002 feab 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1226:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    122a:	d007      	beq.n	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    122c:	1b60      	subs	r0, r4, r5
    122e:	0200      	lsls	r0, r0, #8
    1230:	17c1      	asrs	r1, r0, #31
    1232:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1236:	1200      	asrs	r0, r0, #8
    1238:	2804      	cmp	r0, #4
    123a:	dd04      	ble.n	1246 <CONFIG_FPROTECT_BLOCK_SIZE+0x246>
    123c:	462c      	mov	r4, r5
    123e:	4620      	mov	r0, r4
    1240:	f001 ffa8 	bl	3194 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1244:	e007      	b.n	1256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
    1246:	2800      	cmp	r0, #0
    1248:	dc63      	bgt.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    124a:	e004      	b.n	1256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
    124c:	462c      	mov	r4, r5
    124e:	4620      	mov	r0, r4
    1250:	f001 ffa0 	bl	3194 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1254:	46b9      	mov	r9, r7
    1256:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    125a:	d055      	beq.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
    125c:	980e      	ldr	r0, [sp, #56]	; 0x38
    125e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1260:	1b00      	subs	r0, r0, r4
    1262:	1b12      	subs	r2, r2, r4
    1264:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1268:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    126c:	2801      	cmp	r0, #1
    126e:	d350      	bcc.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    1270:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1274:	bf98      	it	ls
    1276:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    127a:	d84a      	bhi.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    127c:	4620      	mov	r0, r4
    127e:	f00c f870 	bl	d362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1282:	9907      	ldr	r1, [sp, #28]
    1284:	4a52      	ldr	r2, [pc, #328]	; (13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>)
    1286:	1a0d      	subs	r5, r1, r0
    1288:	f04f 0a00 	mov.w	sl, #0
    128c:	1aaa      	subs	r2, r5, r2
    128e:	f17a 0200 	sbcs.w	r2, sl, #0
    1292:	d318      	bcc.n	12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
    1294:	4b4e      	ldr	r3, [pc, #312]	; (13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>)
    1296:	1a42      	subs	r2, r0, r1
    1298:	1ad3      	subs	r3, r2, r3
    129a:	f17a 0300 	sbcs.w	r3, sl, #0
    129e:	d312      	bcc.n	12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
    12a0:	4b4a      	ldr	r3, [pc, #296]	; (13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>)
    12a2:	42ab      	cmp	r3, r5
    12a4:	bf3e      	ittt	cc
    12a6:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    12aa:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    12ae:	1845      	addcc	r5, r0, r1
    12b0:	d309      	bcc.n	12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
    12b2:	4293      	cmp	r3, r2
    12b4:	d231      	bcs.n	131a <CONFIG_FPROTECT_BLOCK_SIZE+0x31a>
    12b6:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    12ba:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    12be:	e000      	b.n	12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
    12c0:	e027      	b.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    12c2:	4408      	add	r0, r1
    12c4:	4245      	negs	r5, r0
    12c6:	4f40      	ldr	r7, [pc, #256]	; (13c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40>)
    12c8:	7fb8      	ldrb	r0, [r7, #30]
    12ca:	b358      	cbz	r0, 1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>
    12cc:	f1bb 0f01 	cmp.w	fp, #1
    12d0:	d005      	beq.n	12de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>
    12d2:	2002      	movs	r0, #2
    12d4:	f002 f99a 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12d8:	2001      	movs	r0, #1
    12da:	f002 f997 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12de:	45b0      	cmp	r8, r6
    12e0:	d22c      	bcs.n	133c <CONFIG_FPROTECT_BLOCK_SIZE+0x33c>
    12e2:	eba5 0106 	sub.w	r1, r5, r6
    12e6:	f04f 0002 	mov.w	r0, #2
    12ea:	f002 f8d9 	bl	34a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    12ee:	b390      	cbz	r0, 1356 <CONFIG_FPROTECT_BLOCK_SIZE+0x356>
    12f0:	f1b8 0f00 	cmp.w	r8, #0
    12f4:	bf1c      	itt	ne
    12f6:	eba5 0108 	subne.w	r1, r5, r8
    12fa:	2001      	movne	r0, #1
    12fc:	d034      	beq.n	1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>
    12fe:	bf00      	nop
    1300:	f002 f8ce 	bl	34a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1304:	b338      	cbz	r0, 1356 <CONFIG_FPROTECT_BLOCK_SIZE+0x356>
    1306:	e02f      	b.n	1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>
    1308:	f640 11f1 	movw	r1, #2545	; 0x9f1
    130c:	2070      	movs	r0, #112	; 0x70
    130e:	f002 fe35 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1312:	b017      	add	sp, #92	; 0x5c
    1314:	2000      	movs	r0, #0
    1316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    131a:	f640 21c2 	movw	r1, #2754	; 0xac2
    131e:	2070      	movs	r0, #112	; 0x70
    1320:	f002 fe2c 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1324:	45b0      	cmp	r8, r6
    1326:	bf34      	ite	cc
    1328:	4630      	movcc	r0, r6
    132a:	4640      	movcs	r0, r8
    132c:	301e      	adds	r0, #30
    132e:	42a8      	cmp	r0, r5
    1330:	dbcc      	blt.n	12cc <CONFIG_FPROTECT_BLOCK_SIZE+0x2cc>
    1332:	f640 2105 	movw	r1, #2565	; 0xa05
    1336:	2070      	movs	r0, #112	; 0x70
    1338:	f002 fe20 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    133c:	d90c      	bls.n	1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>
    133e:	eba5 0108 	sub.w	r1, r5, r8
    1342:	2001      	movs	r0, #1
    1344:	f002 f8ac 	bl	34a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1348:	b128      	cbz	r0, 1356 <CONFIG_FPROTECT_BLOCK_SIZE+0x356>
    134a:	2e00      	cmp	r6, #0
    134c:	bf1c      	itt	ne
    134e:	1ba9      	subne	r1, r5, r6
    1350:	2002      	movne	r0, #2
    1352:	d009      	beq.n	1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>
    1354:	e7d4      	b.n	1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>
    1356:	e030      	b.n	13ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32>
    1358:	ea56 0008 	orrs.w	r0, r6, r8
    135c:	d004      	beq.n	1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>
    135e:	f640 1141 	movw	r1, #2369	; 0x941
    1362:	2070      	movs	r0, #112	; 0x70
    1364:	f002 fe0a 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1368:	4629      	mov	r1, r5
    136a:	2000      	movs	r0, #0
    136c:	f002 f898 	bl	34a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1370:	b318      	cbz	r0, 13ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32>
    1372:	9806      	ldr	r0, [sp, #24]
    1374:	2601      	movs	r6, #1
    1376:	2800      	cmp	r0, #0
    1378:	bf04      	itt	eq
    137a:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    137e:	2800      	cmpeq	r0, #0
    1380:	d002      	beq.n	1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>
    1382:	f1b9 0f00 	cmp.w	r9, #0
    1386:	d033      	beq.n	13f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68>
    1388:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    138c:	b118      	cbz	r0, 1396 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe>
    138e:	f002 fc6f 	bl	3c70 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1392:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    1396:	f1b9 0f00 	cmp.w	r9, #0
    139a:	d02c      	beq.n	13f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e>
    139c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    139e:	1a20      	subs	r0, r4, r0
    13a0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    13a4:	2005      	movs	r0, #5
    13a6:	f002 f87b 	bl	34a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    13aa:	b3e0      	cbz	r0, 1426 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9e>
    13ac:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    13b0:	2800      	cmp	r0, #0
    13b2:	bf08      	it	eq
    13b4:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    13b8:	e025      	b.n	1406 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e>
    13ba:	e00f      	b.n	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    13bc:	40000508 	.word	0x40000508
    13c0:	2000003c 	.word	0x2000003c
    13c4:	20000c94 	.word	0x20000c94
    13c8:	20001094 	.word	0x20001094
    13cc:	1e847fff 	.word	0x1e847fff
    13d0:	0f424000 	.word	0x0f424000
    13d4:	f0bdc000 	.word	0xf0bdc000
    13d8:	1e848000 	.word	0x1e848000
    13dc:	2002      	movs	r0, #2
    13de:	f002 f915 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13e2:	2001      	movs	r0, #1
    13e4:	f002 f912 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13e8:	b017      	add	sp, #92	; 0x5c
    13ea:	2000      	movs	r0, #0
    13ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13f0:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    13f4:	b190      	cbz	r0, 141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>
    13f6:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    13fa:	b120      	cbz	r0, 1406 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e>
    13fc:	2005      	movs	r0, #5
    13fe:	f002 f905 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1402:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    1406:	eba5 0008 	sub.w	r0, r5, r8
    140a:	f1a0 0119 	sub.w	r1, r0, #25
    140e:	2900      	cmp	r1, #0
    1410:	dc0f      	bgt.n	1432 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaa>
    1412:	f640 212e 	movw	r1, #2606	; 0xa2e
    1416:	2070      	movs	r0, #112	; 0x70
    1418:	f002 fdb0 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    141c:	f002 fc44 	bl	3ca8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1420:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    1424:	e7b7      	b.n	1396 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe>
    1426:	e7ff      	b.n	1428 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0>
    1428:	f240 21f2 	movw	r1, #754	; 0x2f2
    142c:	2070      	movs	r0, #112	; 0x70
    142e:	f002 fda5 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1432:	2003      	movs	r0, #3
    1434:	f002 f834 	bl	34a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1438:	b1c0      	cbz	r0, 146c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe4>
    143a:	480f      	ldr	r0, [pc, #60]	; (1478 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf0>)
    143c:	6880      	ldr	r0, [r0, #8]
    143e:	f8c0 a000 	str.w	sl, [r0]
    1442:	480e      	ldr	r0, [pc, #56]	; (147c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf4>)
    1444:	f8c0 a000 	str.w	sl, [r0]
    1448:	ac0c      	add	r4, sp, #48	; 0x30
    144a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    144e:	6038      	str	r0, [r7, #0]
    1450:	6079      	str	r1, [r7, #4]
    1452:	60ba      	str	r2, [r7, #8]
    1454:	60fb      	str	r3, [r7, #12]
    1456:	ac10      	add	r4, sp, #64	; 0x40
    1458:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    145c:	6138      	str	r0, [r7, #16]
    145e:	6179      	str	r1, [r7, #20]
    1460:	61ba      	str	r2, [r7, #24]
    1462:	61fb      	str	r3, [r7, #28]
    1464:	b017      	add	sp, #92	; 0x5c
    1466:	2001      	movs	r0, #1
    1468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    146c:	f640 2136 	movw	r1, #2614	; 0xa36
    1470:	2070      	movs	r0, #112	; 0x70
    1472:	f002 fd83 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1476:	0000      	.short	0x0000
    1478:	2000003c 	.word	0x2000003c
    147c:	40000508 	.word	0x40000508
    1480:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1484:	4606      	mov	r6, r0
    1486:	7808      	ldrb	r0, [r1, #0]
    1488:	7490      	strb	r0, [r2, #18]
    148a:	7ac8      	ldrb	r0, [r1, #11]
    148c:	7450      	strb	r0, [r2, #17]
    148e:	7a88      	ldrb	r0, [r1, #10]
    1490:	7410      	strb	r0, [r2, #16]
    1492:	8908      	ldrh	r0, [r1, #8]
    1494:	81d0      	strh	r0, [r2, #14]
    1496:	f8df 8198 	ldr.w	r8, [pc, #408]	; 1630 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a8>
    149a:	6870      	ldr	r0, [r6, #4]
    149c:	469a      	mov	sl, r3
    149e:	fba0 7908 	umull	r7, r9, r0, r8
    14a2:	4614      	mov	r4, r2
    14a4:	460d      	mov	r5, r1
    14a6:	6830      	ldr	r0, [r6, #0]
    14a8:	f00b ff5b 	bl	d362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    14ac:	19c1      	adds	r1, r0, r7
    14ae:	7828      	ldrb	r0, [r5, #0]
    14b0:	ea4f 0c68 	mov.w	ip, r8, asr #1
    14b4:	f149 0200 	adc.w	r2, r9, #0
    14b8:	f1a8 0e01 	sub.w	lr, r8, #1
    14bc:	f1cc 0b00 	rsb	fp, ip, #0
    14c0:	b168      	cbz	r0, 14de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x156>
    14c2:	89e0      	ldrh	r0, [r4, #14]
    14c4:	7c67      	ldrb	r7, [r4, #17]
    14c6:	43c0      	mvns	r0, r0
    14c8:	f8d5 9004 	ldr.w	r9, [r5, #4]
    14cc:	f104 020c 	add.w	r2, r4, #12
    14d0:	4560      	cmp	r0, ip
    14d2:	dd5f      	ble.n	1594 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20c>
    14d4:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    14d8:	2070      	movs	r0, #112	; 0x70
    14da:	f002 fd4f 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14de:	f8df 9154 	ldr.w	r9, [pc, #340]	; 1634 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ac>
    14e2:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    14e6:	eb11 0a09 	adds.w	sl, r1, r9
    14ea:	f142 0900 	adc.w	r9, r2, #0
    14ee:	ebb0 0a0a 	subs.w	sl, r0, sl
    14f2:	eb73 0909 	sbcs.w	r9, r3, r9
    14f6:	d245      	bcs.n	1584 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1fc>
    14f8:	1a41      	subs	r1, r0, r1
    14fa:	eb73 0102 	sbcs.w	r1, r3, r2
    14fe:	d341      	bcc.n	1584 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1fc>
    1500:	1bc7      	subs	r7, r0, r7
    1502:	6870      	ldr	r0, [r6, #4]
    1504:	60a0      	str	r0, [r4, #8]
    1506:	4547      	cmp	r7, r8
    1508:	d305      	bcc.n	1516 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18e>
    150a:	1c40      	adds	r0, r0, #1
    150c:	f1a7 57f4 	sub.w	r7, r7, #511705088	; 0x1e800000
    1510:	f5a7 2790 	sub.w	r7, r7, #294912	; 0x48000
    1514:	60a0      	str	r0, [r4, #8]
    1516:	89e0      	ldrh	r0, [r4, #14]
    1518:	686d      	ldr	r5, [r5, #4]
    151a:	43c1      	mvns	r1, r0
    151c:	7c66      	ldrb	r6, [r4, #17]
    151e:	1878      	adds	r0, r7, r1
    1520:	f104 020c 	add.w	r2, r4, #12
    1524:	4577      	cmp	r7, lr
    1526:	d904      	bls.n	1532 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1aa>
    1528:	f240 516f 	movw	r1, #1391	; 0x56f
    152c:	2070      	movs	r0, #112	; 0x70
    152e:	f002 fd25 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1532:	4561      	cmp	r1, ip
    1534:	dcce      	bgt.n	14d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14c>
    1536:	4559      	cmp	r1, fp
    1538:	db2f      	blt.n	159a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x212>
    153a:	4580      	cmp	r8, r0
    153c:	bfdc      	itt	le
    153e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1542:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1546:	dd05      	ble.n	1554 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1cc>
    1548:	2800      	cmp	r0, #0
    154a:	bfbc      	itt	lt
    154c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1550:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1554:	4621      	mov	r1, r4
    1556:	f001 fc8d 	bl	2e74 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    155a:	6820      	ldr	r0, [r4, #0]
    155c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1560:	1978      	adds	r0, r7, r5
    1562:	1c40      	adds	r0, r0, #1
    1564:	6021      	str	r1, [r4, #0]
    1566:	2e00      	cmp	r6, #0
    1568:	bf08      	it	eq
    156a:	307a      	addeq	r0, #122	; 0x7a
    156c:	d003      	beq.n	1576 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ee>
    156e:	2e01      	cmp	r6, #1
    1570:	bf08      	it	eq
    1572:	3048      	addeq	r0, #72	; 0x48
    1574:	d134      	bne.n	15e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x258>
    1576:	f001 fc61 	bl	2e3c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    157a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    157e:	6060      	str	r0, [r4, #4]
    1580:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1584:	6830      	ldr	r0, [r6, #0]
    1586:	1e40      	subs	r0, r0, #1
    1588:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    158c:	6020      	str	r0, [r4, #0]
    158e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    1592:	e7f4      	b.n	157e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f6>
    1594:	4601      	mov	r1, r0
    1596:	4558      	cmp	r0, fp
    1598:	da04      	bge.n	15a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x21c>
    159a:	f240 5171 	movw	r1, #1393	; 0x571
    159e:	2070      	movs	r0, #112	; 0x70
    15a0:	f002 fcec 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15a4:	4580      	cmp	r8, r0
    15a6:	bfdc      	itt	le
    15a8:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    15ac:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    15b0:	dd05      	ble.n	15be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x236>
    15b2:	2800      	cmp	r0, #0
    15b4:	bfbc      	itt	lt
    15b6:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    15ba:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    15be:	4621      	mov	r1, r4
    15c0:	f001 fc58 	bl	2e74 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    15c4:	6820      	ldr	r0, [r4, #0]
    15c6:	2f00      	cmp	r7, #0
    15c8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    15cc:	f109 0001 	add.w	r0, r9, #1
    15d0:	6021      	str	r1, [r4, #0]
    15d2:	bf08      	it	eq
    15d4:	307a      	addeq	r0, #122	; 0x7a
    15d6:	d008      	beq.n	15ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x262>
    15d8:	2f01      	cmp	r7, #1
    15da:	bf08      	it	eq
    15dc:	3048      	addeq	r0, #72	; 0x48
    15de:	d004      	beq.n	15ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x262>
    15e0:	f240 6124 	movw	r1, #1572	; 0x624
    15e4:	2070      	movs	r0, #112	; 0x70
    15e6:	f002 fcc9 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15ea:	f001 fc27 	bl	2e3c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15ee:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    15f2:	6061      	str	r1, [r4, #4]
    15f4:	6870      	ldr	r0, [r6, #4]
    15f6:	60a0      	str	r0, [r4, #8]
    15f8:	2100      	movs	r1, #0
    15fa:	4622      	mov	r2, r4
    15fc:	6830      	ldr	r0, [r6, #0]
    15fe:	f7ff fc7f 	bl	f00 <MPSL_IRQ_RADIO_Handler+0x560>
    1602:	6832      	ldr	r2, [r6, #0]
    1604:	4653      	mov	r3, sl
    1606:	4621      	mov	r1, r4
    1608:	6928      	ldr	r0, [r5, #16]
    160a:	f7ff fa25 	bl	a58 <MPSL_IRQ_RADIO_Handler+0xb8>
    160e:	2800      	cmp	r0, #0
    1610:	bf18      	it	ne
    1612:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1616:	e9d4 2100 	ldrd	r2, r1, [r4]
    161a:	6830      	ldr	r0, [r6, #0]
    161c:	1a89      	subs	r1, r1, r2
    161e:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1622:	4408      	add	r0, r1
    1624:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1628:	e9c4 2000 	strd	r2, r0, [r4]
    162c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1630:	1e848000 	.word	0x1e848000
    1634:	0f424000 	.word	0x0f424000
    1638:	b570      	push	{r4, r5, r6, lr}
    163a:	4d1e      	ldr	r5, [pc, #120]	; (16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>)
    163c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1640:	2820      	cmp	r0, #32
    1642:	bf18      	it	ne
    1644:	bd70      	popne	{r4, r5, r6, pc}
    1646:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    164a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    164e:	4428      	add	r0, r5
    1650:	f890 4020 	ldrb.w	r4, [r0, #32]
    1654:	2c20      	cmp	r4, #32
    1656:	d027      	beq.n	16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>
    1658:	4b17      	ldr	r3, [pc, #92]	; (16b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x330>)
    165a:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    165e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    1662:	7849      	ldrb	r1, [r1, #1]
    1664:	f880 1020 	strb.w	r1, [r0, #32]
    1668:	20ff      	movs	r0, #255	; 0xff
    166a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    166e:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    1672:	4621      	mov	r1, r4
    1674:	2002      	movs	r0, #2
    1676:	f000 f8cb 	bl	1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>
    167a:	2000      	movs	r0, #0
    167c:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    1680:	77a8      	strb	r0, [r5, #30]
    1682:	490e      	ldr	r1, [pc, #56]	; (16bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x334>)
    1684:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1688:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    168c:	7e00      	ldrb	r0, [r0, #24]
    168e:	2800      	cmp	r0, #0
    1690:	bf08      	it	eq
    1692:	f002 fdcd 	bleq	4230 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    1696:	2000      	movs	r0, #0
    1698:	4909      	ldr	r1, [pc, #36]	; (16c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x338>)
    169a:	6849      	ldr	r1, [r1, #4]
    169c:	2900      	cmp	r1, #0
    169e:	bf08      	it	eq
    16a0:	bd70      	popeq	{r4, r5, r6, pc}
    16a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    16a6:	4708      	bx	r1
    16a8:	f44f 714b 	mov.w	r1, #812	; 0x32c
    16ac:	2070      	movs	r0, #112	; 0x70
    16ae:	f002 fc65 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16b2:	0000      	.short	0x0000
    16b4:	20001094 	.word	0x20001094
    16b8:	20001014 	.word	0x20001014
    16bc:	20000c94 	.word	0x20000c94
    16c0:	2000003c 	.word	0x2000003c
    16c4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    16c8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 178c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x404>
    16cc:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    16d0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    16d4:	4440      	add	r0, r8
    16d6:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    16da:	2c20      	cmp	r4, #32
    16dc:	bf08      	it	eq
    16de:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    16e2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1790 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x408>
    16e6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1794 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x40c>
    16ea:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    16ee:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    16f2:	2607      	movs	r6, #7
    16f4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    16f8:	2801      	cmp	r0, #1
    16fa:	d00e      	beq.n	171a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x392>
    16fc:	2804      	cmp	r0, #4
    16fe:	bf08      	it	eq
    1700:	2602      	moveq	r6, #2
    1702:	d00a      	beq.n	171a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x392>
    1704:	2805      	cmp	r0, #5
    1706:	bf0c      	ite	eq
    1708:	2603      	moveq	r6, #3
    170a:	2806      	cmpne	r0, #6
    170c:	d005      	beq.n	171a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x392>
    170e:	f640 01a8 	movw	r1, #2216	; 0x8a8
    1712:	f04f 0070 	mov.w	r0, #112	; 0x70
    1716:	f002 fc31 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    171a:	f1bb 0f00 	cmp.w	fp, #0
    171e:	bf18      	it	ne
    1720:	f3af 8000 	nopne.w
    1724:	f3ef 8010 	mrs	r0, PRIMASK
    1728:	b672      	cpsid	i
    172a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    172e:	784a      	ldrb	r2, [r1, #1]
    1730:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1734:	4441      	add	r1, r8
    1736:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    173a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    173e:	42a2      	cmp	r2, r4
    1740:	bf04      	itt	eq
    1742:	2220      	moveq	r2, #32
    1744:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1748:	b1c0      	cbz	r0, 177c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f4>
    174a:	462a      	mov	r2, r5
    174c:	4621      	mov	r1, r4
    174e:	2001      	movs	r0, #1
    1750:	f000 f85e 	bl	1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>
    1754:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1758:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    175c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    1760:	6840      	ldr	r0, [r0, #4]
    1762:	4631      	mov	r1, r6
    1764:	4790      	blx	r2
    1766:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    176a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    176e:	4440      	add	r0, r8
    1770:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1774:	2c20      	cmp	r4, #32
    1776:	d1ba      	bne.n	16ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x366>
    1778:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    177c:	4806      	ldr	r0, [pc, #24]	; (1798 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x410>)
    177e:	2800      	cmp	r0, #0
    1780:	bf18      	it	ne
    1782:	f3af 8000 	nopne.w
    1786:	b662      	cpsie	i
    1788:	e7df      	b.n	174a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c2>
    178a:	0000      	.short	0x0000
    178c:	20001094 	.word	0x20001094
    1790:	00000000 	.word	0x00000000
    1794:	20001014 	.word	0x20001014
    1798:	00000000 	.word	0x00000000
    179c:	b510      	push	{r4, lr}
    179e:	4604      	mov	r4, r0
    17a0:	6800      	ldr	r0, [r0, #0]
    17a2:	f00b fdde 	bl	d362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    17a6:	4602      	mov	r2, r0
    17a8:	89e0      	ldrh	r0, [r4, #14]
    17aa:	7b21      	ldrb	r1, [r4, #12]
    17ac:	4b14      	ldr	r3, [pc, #80]	; (1800 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x478>)
    17ae:	4408      	add	r0, r1
    17b0:	1c41      	adds	r1, r0, #1
    17b2:	1850      	adds	r0, r2, r1
    17b4:	429a      	cmp	r2, r3
    17b6:	d904      	bls.n	17c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x43a>
    17b8:	f240 516f 	movw	r1, #1391	; 0x56f
    17bc:	2070      	movs	r0, #112	; 0x70
    17be:	f002 fbdd 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17c2:	4a10      	ldr	r2, [pc, #64]	; (1804 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x47c>)
    17c4:	4291      	cmp	r1, r2
    17c6:	dd04      	ble.n	17d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44a>
    17c8:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    17cc:	2070      	movs	r0, #112	; 0x70
    17ce:	f002 fbd5 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17d2:	4a0d      	ldr	r2, [pc, #52]	; (1808 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x480>)
    17d4:	4291      	cmp	r1, r2
    17d6:	da04      	bge.n	17e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x45a>
    17d8:	f240 5171 	movw	r1, #1393	; 0x571
    17dc:	2070      	movs	r0, #112	; 0x70
    17de:	f002 fbcd 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17e2:	490a      	ldr	r1, [pc, #40]	; (180c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x484>)
    17e4:	4281      	cmp	r1, r0
    17e6:	bfde      	ittt	le
    17e8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    17ec:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    17f0:	bd10      	pople	{r4, pc}
    17f2:	2800      	cmp	r0, #0
    17f4:	bfbc      	itt	lt
    17f6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    17fa:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    17fe:	bd10      	pop	{r4, pc}
    1800:	1e847fff 	.word	0x1e847fff
    1804:	0f424000 	.word	0x0f424000
    1808:	f0bdc000 	.word	0xf0bdc000
    180c:	1e848000 	.word	0x1e848000
    1810:	f8df c058 	ldr.w	ip, [pc, #88]	; 186c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e4>
    1814:	b510      	push	{r4, lr}
    1816:	2300      	movs	r3, #0
    1818:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    181c:	2807      	cmp	r0, #7
    181e:	d21f      	bcs.n	1860 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d8>
    1820:	e8df f000 	tbb	[pc, r0]
    1824:	05050505 	.word	0x05050505
    1828:	00040404 	.word	0x00040404
    182c:	2301      	movs	r3, #1
    182e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1832:	2b00      	cmp	r3, #0
    1834:	bf08      	it	eq
    1836:	bd10      	popeq	{r4, pc}
    1838:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    183c:	480c      	ldr	r0, [pc, #48]	; (1870 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e8>)
    183e:	4402      	add	r2, r0
    1840:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1844:	2820      	cmp	r0, #32
    1846:	bf0e      	itee	eq
    1848:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    184c:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1850:	7041      	strbne	r1, [r0, #1]
    1852:	2020      	movs	r0, #32
    1854:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1858:	7058      	strb	r0, [r3, #1]
    185a:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    185e:	bd10      	pop	{r4, pc}
    1860:	f44f 711a 	mov.w	r1, #616	; 0x268
    1864:	2070      	movs	r0, #112	; 0x70
    1866:	f002 fb89 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    186a:	0000      	.short	0x0000
    186c:	20001014 	.word	0x20001014
    1870:	20001094 	.word	0x20001094
    1874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1878:	4617      	mov	r7, r2
    187a:	f8df a158 	ldr.w	sl, [pc, #344]	; 19d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64c>
    187e:	eb02 0047 	add.w	r0, r2, r7, lsl #1
    1882:	4450      	add	r0, sl
    1884:	4688      	mov	r8, r1
    1886:	f890 4020 	ldrb.w	r4, [r0, #32]
    188a:	2901      	cmp	r1, #1
    188c:	4625      	mov	r5, r4
    188e:	bf18      	it	ne
    1890:	f1b8 0f02 	cmpne.w	r8, #2
    1894:	d005      	beq.n	18a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x51a>
    1896:	f640 216c 	movw	r1, #2668	; 0xa6c
    189a:	f04f 0070 	mov.w	r0, #112	; 0x70
    189e:	f002 fb6d 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18a2:	f04f 0b00 	mov.w	fp, #0
    18a6:	2d20      	cmp	r5, #32
    18a8:	d044      	beq.n	1934 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ac>
    18aa:	f89a 001e 	ldrb.w	r0, [sl, #30]
    18ae:	2600      	movs	r6, #0
    18b0:	2800      	cmp	r0, #0
    18b2:	bf08      	it	eq
    18b4:	2602      	moveq	r6, #2
    18b6:	f001 fc47 	bl	3148 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    18ba:	4b47      	ldr	r3, [pc, #284]	; (19d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x650>)
    18bc:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    18c0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    18c4:	688a      	ldr	r2, [r1, #8]
    18c6:	68c9      	ldr	r1, [r1, #12]
    18c8:	1a12      	subs	r2, r2, r0
    18ca:	1a09      	subs	r1, r1, r0
    18cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    18d0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    18d4:	4296      	cmp	r6, r2
    18d6:	bf99      	ittee	ls
    18d8:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    18dc:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    18e0:	4a3e      	ldrhi	r2, [pc, #248]	; (19dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x654>)
    18e2:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    18e6:	d923      	bls.n	1930 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a8>
    18e8:	4622      	mov	r2, r4
    18ea:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    18ee:	784c      	ldrb	r4, [r1, #1]
    18f0:	2c20      	cmp	r4, #32
    18f2:	d015      	beq.n	1920 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x598>
    18f4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    18f8:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    18fc:	f8dc 1008 	ldr.w	r1, [ip, #8]
    1900:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1904:	1a09      	subs	r1, r1, r0
    1906:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    190a:	ebac 0c00 	sub.w	ip, ip, r0
    190e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    1912:	428e      	cmp	r6, r1
    1914:	bf9c      	itt	ls
    1916:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    191a:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    191e:	d8e3      	bhi.n	18e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x560>
    1920:	2a20      	cmp	r2, #32
    1922:	d005      	beq.n	1930 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a8>
    1924:	463b      	mov	r3, r7
    1926:	2120      	movs	r1, #32
    1928:	2004      	movs	r0, #4
    192a:	f7ff f859 	bl	9e0 <MPSL_IRQ_RADIO_Handler+0x40>
    192e:	4604      	mov	r4, r0
    1930:	42ac      	cmp	r4, r5
    1932:	d10f      	bne.n	1954 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5cc>
    1934:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    1938:	2820      	cmp	r0, #32
    193a:	d00f      	beq.n	195c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d4>
    193c:	9900      	ldr	r1, [sp, #0]
    193e:	f8da 0008 	ldr.w	r0, [sl, #8]
    1942:	1c89      	adds	r1, r1, #2
    1944:	1a08      	subs	r0, r1, r0
    1946:	0200      	lsls	r0, r0, #8
    1948:	17c1      	asrs	r1, r0, #31
    194a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    194e:	1200      	asrs	r0, r0, #8
    1950:	2800      	cmp	r0, #0
    1952:	dd03      	ble.n	195c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d4>
    1954:	b003      	add	sp, #12
    1956:	2000      	movs	r0, #0
    1958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    195c:	2d20      	cmp	r5, #32
    195e:	d016      	beq.n	198e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x606>
    1960:	462a      	mov	r2, r5
    1962:	4641      	mov	r1, r8
    1964:	9800      	ldr	r0, [sp, #0]
    1966:	f7ff fb1f 	bl	fa8 <MPSL_IRQ_RADIO_Handler+0x608>
    196a:	2800      	cmp	r0, #0
    196c:	bf1f      	itttt	ne
    196e:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    1972:	2002      	movne	r0, #2
    1974:	b003      	addne	sp, #12
    1976:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    197a:	463b      	mov	r3, r7
    197c:	462a      	mov	r2, r5
    197e:	2120      	movs	r1, #32
    1980:	2004      	movs	r0, #4
    1982:	f7ff f82d 	bl	9e0 <MPSL_IRQ_RADIO_Handler+0x40>
    1986:	b003      	add	sp, #12
    1988:	2000      	movs	r0, #0
    198a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    198e:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    1992:	b118      	cbz	r0, 199c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x614>
    1994:	f002 f96c 	bl	3c70 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1998:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    199c:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    19a0:	b120      	cbz	r0, 19ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x624>
    19a2:	2005      	movs	r0, #5
    19a4:	f001 fe32 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    19a8:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    19ac:	2004      	movs	r0, #4
    19ae:	f001 fe2d 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    19b2:	f001 fe9b 	bl	36ec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    19b6:	2020      	movs	r0, #32
    19b8:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    19bc:	4808      	ldr	r0, [pc, #32]	; (19e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x658>)
    19be:	6880      	ldr	r0, [r0, #8]
    19c0:	f8c0 b000 	str.w	fp, [r0]
    19c4:	4807      	ldr	r0, [pc, #28]	; (19e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x65c>)
    19c6:	f8c0 b000 	str.w	fp, [r0]
    19ca:	b003      	add	sp, #12
    19cc:	2001      	movs	r0, #1
    19ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19d2:	0000      	.short	0x0000
    19d4:	20001094 	.word	0x20001094
    19d8:	20000c94 	.word	0x20000c94
    19dc:	20001014 	.word	0x20001014
    19e0:	2000003c 	.word	0x2000003c
    19e4:	40000508 	.word	0x40000508

000019e8 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    19e8:	4906      	ldr	r1, [pc, #24]	; (1a04 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    19ea:	b510      	push	{r4, lr}
    19ec:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    19f0:	2a20      	cmp	r2, #32
    19f2:	bf1c      	itt	ne
    19f4:	7788      	strbne	r0, [r1, #30]
    19f6:	bd10      	popne	{r4, pc}
    19f8:	f240 317a 	movw	r1, #890	; 0x37a
    19fc:	2070      	movs	r0, #112	; 0x70
    19fe:	f002 fabd 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a02:	0000      	.short	0x0000
    1a04:	20001094 	.word	0x20001094

00001a08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a0c:	4e69      	ldr	r6, [pc, #420]	; (1bb4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1a0e:	4607      	mov	r7, r0
    1a10:	b08d      	sub	sp, #52	; 0x34
    1a12:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1a16:	4688      	mov	r8, r1
    1a18:	2820      	cmp	r0, #32
    1a1a:	d055      	beq.n	1ac8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    1a1c:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1a20:	f106 0408 	add.w	r4, r6, #8
    1a24:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1a28:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    1a2c:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    1a30:	2020      	movs	r0, #32
    1a32:	f88d 0020 	strb.w	r0, [sp, #32]
    1a36:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    1a3a:	aa0a      	add	r2, sp, #40	; 0x28
    1a3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1a40:	4430      	add	r0, r6
    1a42:	a909      	add	r1, sp, #36	; 0x24
    1a44:	f890 5020 	ldrb.w	r5, [r0, #32]
    1a48:	68f0      	ldr	r0, [r6, #12]
    1a4a:	9002      	str	r0, [sp, #8]
    1a4c:	6830      	ldr	r0, [r6, #0]
    1a4e:	4438      	add	r0, r7
    1a50:	f001 fa10 	bl	2e74 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1a54:	f8da 000c 	ldr.w	r0, [sl, #12]
    1a58:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a5a:	2f65      	cmp	r7, #101	; 0x65
    1a5c:	4408      	add	r0, r1
    1a5e:	d338      	bcc.n	1ad2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1a60:	4a55      	ldr	r2, [pc, #340]	; (1bb8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    1a62:	2100      	movs	r1, #0
    1a64:	1bd2      	subs	r2, r2, r7
    1a66:	eb71 0201 	sbcs.w	r2, r1, r1
    1a6a:	d332      	bcc.n	1ad2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1a6c:	6822      	ldr	r2, [r4, #0]
    1a6e:	1a82      	subs	r2, r0, r2
    1a70:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1a74:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1a78:	d82b      	bhi.n	1ad2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    1a7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a7e:	6060      	str	r0, [r4, #4]
    1a80:	4630      	mov	r0, r6
    1a82:	f884 8010 	strb.w	r8, [r4, #16]
    1a86:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1a8a:	f10d 0a20 	add.w	sl, sp, #32
    1a8e:	2d20      	cmp	r5, #32
    1a90:	bf1c      	itt	ne
    1a92:	494a      	ldrne	r1, [pc, #296]	; (1bbc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1a94:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1a98:	d050      	beq.n	1b3c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1a9a:	bf00      	nop
    1a9c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1aa0:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    1aa4:	6861      	ldr	r1, [r4, #4]
    1aa6:	f8d8 6008 	ldr.w	r6, [r8, #8]
    1aaa:	f108 0008 	add.w	r0, r8, #8
    1aae:	1a71      	subs	r1, r6, r1
    1ab0:	0209      	lsls	r1, r1, #8
    1ab2:	17ca      	asrs	r2, r1, #31
    1ab4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1ab8:	1209      	asrs	r1, r1, #8
    1aba:	d42d      	bmi.n	1b18 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    1abc:	89c0      	ldrh	r0, [r0, #14]
    1abe:	2800      	cmp	r0, #0
    1ac0:	d03c      	beq.n	1b3c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1ac2:	89e0      	ldrh	r0, [r4, #14]
    1ac4:	b148      	cbz	r0, 1ada <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    1ac6:	e039      	b.n	1b3c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1ac8:	f44f 6133 	mov.w	r1, #2864	; 0xb30
    1acc:	2070      	movs	r0, #112	; 0x70
    1ace:	f002 fa55 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ad2:	b00d      	add	sp, #52	; 0x34
    1ad4:	2001      	movs	r0, #1
    1ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ada:	6820      	ldr	r0, [r4, #0]
    1adc:	900c      	str	r0, [sp, #48]	; 0x30
    1ade:	f002 f8c1 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1ae2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1ae6:	bf08      	it	eq
    1ae8:	200d      	moveq	r0, #13
    1aea:	d00b      	beq.n	1b04 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1aec:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1af0:	3856      	subs	r0, #86	; 0x56
    1af2:	bf08      	it	eq
    1af4:	201c      	moveq	r0, #28
    1af6:	d005      	beq.n	1b04 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1af8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1afc:	389f      	subs	r0, #159	; 0x9f
    1afe:	bf14      	ite	ne
    1b00:	2000      	movne	r0, #0
    1b02:	2032      	moveq	r0, #50	; 0x32
    1b04:	1c41      	adds	r1, r0, #1
    1b06:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b08:	1a30      	subs	r0, r6, r0
    1b0a:	0200      	lsls	r0, r0, #8
    1b0c:	17c2      	asrs	r2, r0, #31
    1b0e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b12:	1200      	asrs	r0, r0, #8
    1b14:	4288      	cmp	r0, r1
    1b16:	da11      	bge.n	1b3c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1b18:	f88a 5000 	strb.w	r5, [sl]
    1b1c:	f898 1018 	ldrb.w	r1, [r8, #24]
    1b20:	7c20      	ldrb	r0, [r4, #16]
    1b22:	4281      	cmp	r1, r0
    1b24:	d805      	bhi.n	1b32 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1b26:	9802      	ldr	r0, [sp, #8]
    1b28:	6060      	str	r0, [r4, #4]
    1b2a:	b00d      	add	sp, #52	; 0x34
    1b2c:	2002      	movs	r0, #2
    1b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b32:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1b36:	7845      	ldrb	r5, [r0, #1]
    1b38:	2d20      	cmp	r5, #32
    1b3a:	d1af      	bne.n	1a9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    1b3c:	2005      	movs	r0, #5
    1b3e:	f001 fd65 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1b42:	4c1c      	ldr	r4, [pc, #112]	; (1bb4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1b44:	f04f 30ff 	mov.w	r0, #4294967295
    1b48:	6060      	str	r0, [r4, #4]
    1b4a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    1b4e:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1b52:	2120      	movs	r1, #32
    1b54:	2a20      	cmp	r2, #32
    1b56:	d003      	beq.n	1b60 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    1b58:	2005      	movs	r0, #5
    1b5a:	f7fe ff41 	bl	9e0 <MPSL_IRQ_RADIO_Handler+0x40>
    1b5e:	e004      	b.n	1b6a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    1b60:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    1b64:	4420      	add	r0, r4
    1b66:	f890 0020 	ldrb.w	r0, [r0, #32]
    1b6a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    1b6e:	4913      	ldr	r1, [pc, #76]	; (1bbc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    1b70:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1b74:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    1b78:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1b7c:	7048      	strb	r0, [r1, #1]
    1b7e:	6820      	ldr	r0, [r4, #0]
    1b80:	4438      	add	r0, r7
    1b82:	6020      	str	r0, [r4, #0]
    1b84:	20ff      	movs	r0, #255	; 0xff
    1b86:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    1b8a:	7e60      	ldrb	r0, [r4, #25]
    1b8c:	2801      	cmp	r0, #1
    1b8e:	d105      	bne.n	1b9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    1b90:	68e0      	ldr	r0, [r4, #12]
    1b92:	1e40      	subs	r0, r0, #1
    1b94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b98:	f001 fb9c 	bl	32d4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1b9c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    1ba0:	2820      	cmp	r0, #32
    1ba2:	d003      	beq.n	1bac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    1ba4:	4806      	ldr	r0, [pc, #24]	; (1bc0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    1ba6:	7840      	ldrb	r0, [r0, #1]
    1ba8:	f002 fabc 	bl	4124 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1bac:	b00d      	add	sp, #52	; 0x34
    1bae:	2000      	movs	r0, #0
    1bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bb4:	20001094 	.word	0x20001094
    1bb8:	0f424000 	.word	0x0f424000
    1bbc:	20001014 	.word	0x20001014
    1bc0:	2000003c 	.word	0x2000003c

00001bc4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    1bc4:	b570      	push	{r4, r5, r6, lr}
    1bc6:	4a24      	ldr	r2, [pc, #144]	; (1c58 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x94>)
    1bc8:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
    1bcc:	2920      	cmp	r1, #32
    1bce:	d03a      	beq.n	1c46 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x82>
    1bd0:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
    1bd4:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
    1bd8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1bdc:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    1be0:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
    1be4:	f892 402c 	ldrb.w	r4, [r2, #44]	; 0x2c
    1be8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1bec:	4411      	add	r1, r2
    1bee:	f891 1020 	ldrb.w	r1, [r1, #32]
    1bf2:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    1bf6:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    1bfa:	2920      	cmp	r1, #32
    1bfc:	d028      	beq.n	1c50 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8c>
    1bfe:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
    1c02:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1c06:	7e2d      	ldrb	r5, [r5, #24]
    1c08:	4285      	cmp	r5, r0
    1c0a:	bf84      	itt	hi
    1c0c:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    1c10:	7849      	ldrbhi	r1, [r1, #1]
    1c12:	d8f2      	bhi.n	1bfa <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x36>
    1c14:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1c18:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1c1c:	f8dc 000c 	ldr.w	r0, [ip, #12]
    1c20:	6889      	ldr	r1, [r1, #8]
    1c22:	6814      	ldr	r4, [r2, #0]
    1c24:	1a08      	subs	r0, r1, r0
    1c26:	0200      	lsls	r0, r0, #8
    1c28:	17c1      	asrs	r1, r0, #31
    1c2a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1c2e:	1200      	asrs	r0, r0, #8
    1c30:	d407      	bmi.n	1c42 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7e>
    1c32:	f00b fb96 	bl	d362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1c36:	f104 0165 	add.w	r1, r4, #101	; 0x65
    1c3a:	4288      	cmp	r0, r1
    1c3c:	bf24      	itt	cs
    1c3e:	1b00      	subcs	r0, r0, r4
    1c40:	bd70      	popcs	{r4, r5, r6, pc}
    1c42:	2000      	movs	r0, #0
    1c44:	bd70      	pop	{r4, r5, r6, pc}
    1c46:	f640 3102 	movw	r1, #2818	; 0xb02
    1c4a:	2070      	movs	r0, #112	; 0x70
    1c4c:	f002 f996 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c50:	f04f 30ff 	mov.w	r0, #4294967295
    1c54:	bd70      	pop	{r4, r5, r6, pc}
    1c56:	0000      	.short	0x0000
    1c58:	20001094 	.word	0x20001094

00001c5c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1c5c:	4806      	ldr	r0, [pc, #24]	; (1c78 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    1c5e:	b510      	push	{r4, lr}
    1c60:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1c64:	2920      	cmp	r1, #32
    1c66:	bf1c      	itt	ne
    1c68:	7e00      	ldrbne	r0, [r0, #24]
    1c6a:	bd10      	popne	{r4, pc}
    1c6c:	f640 312a 	movw	r1, #2858	; 0xb2a
    1c70:	2070      	movs	r0, #112	; 0x70
    1c72:	f002 f983 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c76:	0000      	.short	0x0000
    1c78:	20001094 	.word	0x20001094

00001c7c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1c7c:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    1c80:	b570      	push	{r4, r5, r6, lr}
    1c82:	4807      	ldr	r0, [pc, #28]	; (1ca0 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    1c84:	4a07      	ldr	r2, [pc, #28]	; (1ca4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x28>)
    1c86:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1c8a:	6901      	ldr	r1, [r0, #16]
    1c8c:	3008      	adds	r0, #8
    1c8e:	fba1 4502 	umull	r4, r5, r1, r2
    1c92:	f7ff fd83 	bl	179c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x414>
    1c96:	1900      	adds	r0, r0, r4
    1c98:	f145 0100 	adc.w	r1, r5, #0
    1c9c:	bd70      	pop	{r4, r5, r6, pc}
    1c9e:	0000      	.short	0x0000
    1ca0:	20000c94 	.word	0x20000c94
    1ca4:	1e848000 	.word	0x1e848000

00001ca8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1caa:	4d6b      	ldr	r5, [pc, #428]	; (1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>)
    1cac:	4a6b      	ldr	r2, [pc, #428]	; (1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>)
    1cae:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    1cb2:	2601      	movs	r6, #1
    1cb4:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    1cb8:	2808      	cmp	r0, #8
    1cba:	d27c      	bcs.n	1db6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6a>
    1cbc:	e8df f000 	tbb	[pc, r0]
    1cc0:	a9977004 	.word	0xa9977004
    1cc4:	b3ae41c7 	.word	0xb3ae41c7
    1cc8:	b919      	cbnz	r1, 1cd2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1cca:	f001 ffed 	bl	3ca8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1cce:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1cd2:	8ae0      	ldrh	r0, [r4, #22]
    1cd4:	b110      	cbz	r0, 1cdc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1cd6:	f002 f8d9 	bl	3e8c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1cda:	b180      	cbz	r0, 1cfe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    1cdc:	f7ff fcac 	bl	1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>
    1ce0:	20ff      	movs	r0, #255	; 0xff
    1ce2:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1ce6:	6861      	ldr	r1, [r4, #4]
    1ce8:	f1b1 3fff 	cmp.w	r1, #4294967295
    1cec:	d003      	beq.n	1cf6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    1cee:	2005      	movs	r0, #5
    1cf0:	f001 fbd6 	bl	34a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cf4:	b140      	cbz	r0, 1d08 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    1cf6:	7e60      	ldrb	r0, [r4, #25]
    1cf8:	2801      	cmp	r0, #1
    1cfa:	d110      	bne.n	1d1e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    1cfc:	e009      	b.n	1d12 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    1cfe:	f640 0134 	movw	r1, #2100	; 0x834
    1d02:	2070      	movs	r0, #112	; 0x70
    1d04:	f002 f93a 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d08:	f640 0139 	movw	r1, #2105	; 0x839
    1d0c:	2070      	movs	r0, #112	; 0x70
    1d0e:	f002 f935 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d12:	68e0      	ldr	r0, [r4, #12]
    1d14:	1e40      	subs	r0, r0, #1
    1d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d1a:	f001 fadb 	bl	32d4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1d1e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d22:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1d26:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1d2a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1d2e:	6840      	ldr	r0, [r0, #4]
    1d30:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1d34:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1d38:	b001      	add	sp, #4
    1d3a:	2101      	movs	r1, #1
    1d3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1d40:	4710      	bx	r2
    1d42:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1d46:	b140      	cbz	r0, 1d5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1d48:	b919      	cbnz	r1, 1d52 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6>
    1d4a:	f001 ffad 	bl	3ca8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1d4e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1d52:	2000      	movs	r0, #0
    1d54:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d5a:	f7ff fc6d 	bl	1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>
    1d5e:	f04f 30ff 	mov.w	r0, #4294967295
    1d62:	6060      	str	r0, [r4, #4]
    1d64:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    1d68:	f88d 0000 	strb.w	r0, [sp]
    1d6c:	f89d 0000 	ldrb.w	r0, [sp]
    1d70:	b188      	cbz	r0, 1d96 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a>
    1d72:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d76:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1d7a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1d7e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1d82:	6840      	ldr	r0, [r0, #4]
    1d84:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1d88:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1d8c:	b001      	add	sp, #4
    1d8e:	2106      	movs	r1, #6
    1d90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1d94:	4710      	bx	r2
    1d96:	f44f 6105 	mov.w	r1, #2128	; 0x850
    1d9a:	2070      	movs	r0, #112	; 0x70
    1d9c:	f002 f8ee 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1da0:	f7ff fc4a 	bl	1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>
    1da4:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    1da8:	f002 f870 	bl	3e8c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1dac:	b120      	cbz	r0, 1db8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6c>
    1dae:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    1db2:	b130      	cbz	r0, 1dc2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x76>
    1db4:	e009      	b.n	1dca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7e>
    1db6:	e04a      	b.n	1e4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x102>
    1db8:	f640 015e 	movw	r1, #2142	; 0x85e
    1dbc:	2070      	movs	r0, #112	; 0x70
    1dbe:	f002 f8dd 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dc2:	f001 ff71 	bl	3ca8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1dc6:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1dca:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1dce:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1dd2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1dd6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1dda:	6840      	ldr	r0, [r0, #4]
    1ddc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1de0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1de4:	b001      	add	sp, #4
    1de6:	2100      	movs	r1, #0
    1de8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1dec:	4710      	bx	r2
    1dee:	f001 fd4d 	bl	388c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    1df2:	8ae0      	ldrh	r0, [r4, #22]
    1df4:	b110      	cbz	r0, 1dfc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb0>
    1df6:	f002 f849 	bl	3e8c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1dfa:	b128      	cbz	r0, 1e08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbc>
    1dfc:	f001 fd5a 	bl	38b4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1e00:	2800      	cmp	r0, #0
    1e02:	bf18      	it	ne
    1e04:	7766      	strbne	r6, [r4, #29]
    1e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e08:	f640 0168 	movw	r1, #2152	; 0x868
    1e0c:	2070      	movs	r0, #112	; 0x70
    1e0e:	f002 f8b5 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e12:	4813      	ldr	r0, [pc, #76]	; (1e60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>)
    1e14:	6006      	str	r6, [r0, #0]
    1e16:	6890      	ldr	r0, [r2, #8]
    1e18:	6006      	str	r6, [r0, #0]
    1e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e1c:	7810      	ldrb	r0, [r2, #0]
    1e1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1e22:	f002 b97f 	b.w	4124 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1e26:	f7ff fc07 	bl	1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>
    1e2a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1e2e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1e32:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1e36:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1e3a:	6840      	ldr	r0, [r0, #4]
    1e3c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1e40:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1e44:	b001      	add	sp, #4
    1e46:	2105      	movs	r1, #5
    1e48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1e4c:	4710      	bx	r2
    1e4e:	f640 017b 	movw	r1, #2171	; 0x87b
    1e52:	2070      	movs	r0, #112	; 0x70
    1e54:	f002 f892 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e58:	20000c94 	.word	0x20000c94
    1e5c:	2000003c 	.word	0x2000003c
    1e60:	40000508 	.word	0x40000508

00001e64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1e64:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e68:	4682      	mov	sl, r0
    1e6a:	48f0      	ldr	r0, [pc, #960]	; (222c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x22c>)
    1e6c:	b095      	sub	sp, #84	; 0x54
    1e6e:	6800      	ldr	r0, [r0, #0]
    1e70:	4def      	ldr	r5, [pc, #956]	; (2230 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x230>)
    1e72:	05c0      	lsls	r0, r0, #23
    1e74:	0dc0      	lsrs	r0, r0, #23
    1e76:	d00e      	beq.n	1e96 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1e78:	3810      	subs	r0, #16
    1e7a:	b240      	sxtb	r0, r0
    1e7c:	2800      	cmp	r0, #0
    1e7e:	bfb8      	it	lt
    1e80:	f000 000f 	andlt.w	r0, r0, #15
    1e84:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1e88:	bfac      	ite	ge
    1e8a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1e8e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1e92:	0940      	lsrs	r0, r0, #5
    1e94:	d00d      	beq.n	1eb2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1e96:	9816      	ldr	r0, [sp, #88]	; 0x58
    1e98:	f04f 0b00 	mov.w	fp, #0
    1e9c:	7800      	ldrb	r0, [r0, #0]
    1e9e:	2800      	cmp	r0, #0
    1ea0:	bf18      	it	ne
    1ea2:	2801      	cmpne	r0, #1
    1ea4:	d018      	beq.n	1ed8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1ea6:	f240 7104 	movw	r1, #1796	; 0x704
    1eaa:	f04f 0070 	mov.w	r0, #112	; 0x70
    1eae:	f002 f865 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eb2:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1eb6:	f04f 0b01 	mov.w	fp, #1
    1eba:	2820      	cmp	r0, #32
    1ebc:	d007      	beq.n	1ece <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    1ebe:	9816      	ldr	r0, [sp, #88]	; 0x58
    1ec0:	7800      	ldrb	r0, [r0, #0]
    1ec2:	b148      	cbz	r0, 1ed8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1ec4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    1ec8:	2070      	movs	r0, #112	; 0x70
    1eca:	f002 f857 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ece:	f240 61fd 	movw	r1, #1789	; 0x6fd
    1ed2:	2070      	movs	r0, #112	; 0x70
    1ed4:	f002 f852 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ed8:	4cd6      	ldr	r4, [pc, #856]	; (2234 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x234>)
    1eda:	b124      	cbz	r4, 1ee6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1edc:	2100      	movs	r1, #0
    1ede:	f240 7007 	movw	r0, #1799	; 0x707
    1ee2:	f3af 8000 	nop.w
    1ee6:	2000      	movs	r0, #0
    1ee8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    1eec:	49d2      	ldr	r1, [pc, #840]	; (2238 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x238>)
    1eee:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    1ef2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1ef6:	f04f 0901 	mov.w	r9, #1
    1efa:	9000      	str	r0, [sp, #0]
    1efc:	b124      	cbz	r4, 1f08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    1efe:	2100      	movs	r1, #0
    1f00:	f240 7012 	movw	r0, #1810	; 0x712
    1f04:	f3af 8000 	nop.w
    1f08:	f1b9 0f00 	cmp.w	r9, #0
    1f0c:	d00a      	beq.n	1f24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    1f0e:	bf00      	nop
    1f10:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    1f14:	f04f 0800 	mov.w	r8, #0
    1f18:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    1f1c:	f1bb 0f00 	cmp.w	fp, #0
    1f20:	d007      	beq.n	1f32 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    1f22:	e038      	b.n	1f96 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    1f24:	48c5      	ldr	r0, [pc, #788]	; (223c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x23c>)
    1f26:	2800      	cmp	r0, #0
    1f28:	bf18      	it	ne
    1f2a:	f3af 8000 	nopne.w
    1f2e:	b662      	cpsie	i
    1f30:	e7ee      	b.n	1f10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    1f32:	4637      	mov	r7, r6
    1f34:	2001      	movs	r0, #1
    1f36:	ea20 0607 	bic.w	r6, r0, r7
    1f3a:	48c1      	ldr	r0, [pc, #772]	; (2240 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x240>)
    1f3c:	2240      	movs	r2, #64	; 0x40
    1f3e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1f42:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1f46:	f00b fb78 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f4a:	b124      	cbz	r4, 1f56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    1f4c:	2100      	movs	r1, #0
    1f4e:	f240 502f 	movw	r0, #1327	; 0x52f
    1f52:	f3af 8000 	nop.w
    1f56:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    1f5a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1f5e:	4429      	add	r1, r5
    1f60:	4428      	add	r0, r5
    1f62:	8c0a      	ldrh	r2, [r1, #32]
    1f64:	8402      	strh	r2, [r0, #32]
    1f66:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    1f6a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    1f6e:	b124      	cbz	r4, 1f7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    1f70:	2100      	movs	r1, #0
    1f72:	f240 5033 	movw	r0, #1331	; 0x533
    1f76:	f3af 8000 	nop.w
    1f7a:	b124      	cbz	r4, 1f86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    1f7c:	2100      	movs	r1, #0
    1f7e:	f240 701c 	movw	r0, #1820	; 0x71c
    1f82:	f3af 8000 	nop.w
    1f86:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    1f8a:	f88d 0008 	strb.w	r0, [sp, #8]
    1f8e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1f92:	2800      	cmp	r0, #0
    1f94:	d1b2      	bne.n	1efc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1f96:	b124      	cbz	r4, 1fa2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    1f98:	2100      	movs	r1, #0
    1f9a:	f240 7026 	movw	r0, #1830	; 0x726
    1f9e:	f3af 8000 	nop.w
    1fa2:	a802      	add	r0, sp, #8
    1fa4:	f001 f8d6 	bl	3154 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    1fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1fac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1fb0:	4633      	mov	r3, r6
    1fb2:	aa09      	add	r2, sp, #36	; 0x24
    1fb4:	a80e      	add	r0, sp, #56	; 0x38
    1fb6:	9916      	ldr	r1, [sp, #88]	; 0x58
    1fb8:	f7ff fa62 	bl	1480 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf8>
    1fbc:	b124      	cbz	r4, 1fc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    1fbe:	2100      	movs	r1, #0
    1fc0:	f240 702d 	movw	r0, #1837	; 0x72d
    1fc4:	f3af 8000 	nop.w
    1fc8:	4a9d      	ldr	r2, [pc, #628]	; (2240 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x240>)
    1fca:	990e      	ldr	r1, [sp, #56]	; 0x38
    1fcc:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    1fd0:	a809      	add	r0, sp, #36	; 0x24
    1fd2:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    1fd6:	2a01      	cmp	r2, #1
    1fd8:	bf18      	it	ne
    1fda:	2a02      	cmpne	r2, #2
    1fdc:	d138      	bne.n	2050 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x50>
    1fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fe2:	eba2 0201 	sub.w	r2, r2, r1
    1fe6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1fea:	eba3 0101 	sub.w	r1, r3, r1
    1fee:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    1ff2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1ff6:	2a02      	cmp	r2, #2
    1ff8:	d364      	bcc.n	20c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc4>
    1ffa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1ffe:	bf98      	it	ls
    2000:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2004:	d85e      	bhi.n	20c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc4>
    2006:	f04f 0801 	mov.w	r8, #1
    200a:	ab14      	add	r3, sp, #80	; 0x50
    200c:	aa13      	add	r2, sp, #76	; 0x4c
    200e:	4631      	mov	r1, r6
    2010:	f7fe fed4 	bl	dbc <MPSL_IRQ_RADIO_Handler+0x41c>
    2014:	2800      	cmp	r0, #0
    2016:	d05d      	beq.n	20d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd4>
    2018:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    201c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    2020:	4633      	mov	r3, r6
    2022:	428a      	cmp	r2, r1
    2024:	d05a      	beq.n	20dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xdc>
    2026:	2005      	movs	r0, #5
    2028:	f7fe fcda 	bl	9e0 <MPSL_IRQ_RADIO_Handler+0x40>
    202c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2030:	7048      	strb	r0, [r1, #1]
    2032:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2036:	2820      	cmp	r0, #32
    2038:	bf1c      	itt	ne
    203a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    203e:	f880 a001 	strbne.w	sl, [r0, #1]
    2042:	d057      	beq.n	20f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf4>
    2044:	4632      	mov	r2, r6
    2046:	4651      	mov	r1, sl
    2048:	f05f 0003 	movs.w	r0, #3
    204c:	f7ff fbe0 	bl	1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>
    2050:	b124      	cbz	r4, 205c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5c>
    2052:	2100      	movs	r1, #0
    2054:	f240 7032 	movw	r0, #1842	; 0x732
    2058:	f3af 8000 	nop.w
    205c:	4879      	ldr	r0, [pc, #484]	; (2244 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x244>)
    205e:	2800      	cmp	r0, #0
    2060:	bf18      	it	ne
    2062:	f3af 8000 	nopne.w
    2066:	f3ef 8910 	mrs	r9, PRIMASK
    206a:	b672      	cpsid	i
    206c:	b124      	cbz	r4, 2078 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x78>
    206e:	2100      	movs	r1, #0
    2070:	f44f 60e7 	mov.w	r0, #1848	; 0x738
    2074:	f3af 8000 	nop.w
    2078:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    207c:	f88d 0008 	strb.w	r0, [sp, #8]
    2080:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2084:	2800      	cmp	r0, #0
    2086:	f47f af39 	bne.w	1efc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    208a:	b124      	cbz	r4, 2096 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x96>
    208c:	2100      	movs	r1, #0
    208e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
    2092:	f3af 8000 	nop.w
    2096:	af09      	add	r7, sp, #36	; 0x24
    2098:	9800      	ldr	r0, [sp, #0]
    209a:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    209e:	f100 0708 	add.w	r7, r0, #8
    20a2:	f1b8 0f00 	cmp.w	r8, #0
    20a6:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    20aa:	990d      	ldr	r1, [sp, #52]	; 0x34
    20ac:	6181      	str	r1, [r0, #24]
    20ae:	d053      	beq.n	2158 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x158>
    20b0:	b124      	cbz	r4, 20bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xbc>
    20b2:	2100      	movs	r1, #0
    20b4:	f240 704d 	movw	r0, #1869	; 0x74d
    20b8:	f3af 8000 	nop.w
    20bc:	f1bb 0f00 	cmp.w	fp, #0
    20c0:	d13a      	bne.n	2138 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x138>
    20c2:	e01f      	b.n	2104 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x104>
    20c4:	4632      	mov	r2, r6
    20c6:	4651      	mov	r1, sl
    20c8:	2004      	movs	r0, #4
    20ca:	f7ff fba1 	bl	1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>
    20ce:	f04f 0801 	mov.w	r8, #1
    20d2:	e7bd      	b.n	2050 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x50>
    20d4:	4632      	mov	r2, r6
    20d6:	4651      	mov	r1, sl
    20d8:	2004      	movs	r0, #4
    20da:	e7b7      	b.n	204c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4c>
    20dc:	2920      	cmp	r1, #32
    20de:	bf19      	ittee	ne
    20e0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    20e4:	7840      	ldrbne	r0, [r0, #1]
    20e6:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    20ea:	4428      	addeq	r0, r5
    20ec:	bf08      	it	eq
    20ee:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    20f2:	e79b      	b.n	202c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2c>
    20f4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    20f8:	4429      	add	r1, r5
    20fa:	f881 a020 	strb.w	sl, [r1, #32]
    20fe:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    2102:	e79f      	b.n	2044 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44>
    2104:	9811      	ldr	r0, [sp, #68]	; 0x44
    2106:	f010 0fff 	tst.w	r0, #255	; 0xff
    210a:	d015      	beq.n	2138 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x138>
    210c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2110:	2820      	cmp	r0, #32
    2112:	d111      	bne.n	2138 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x138>
    2114:	b124      	cbz	r4, 2120 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x120>
    2116:	2100      	movs	r1, #0
    2118:	f240 7052 	movw	r0, #1874	; 0x752
    211c:	f3af 8000 	nop.w
    2120:	4632      	mov	r2, r6
    2122:	2102      	movs	r1, #2
    2124:	980e      	ldr	r0, [sp, #56]	; 0x38
    2126:	f7ff fba5 	bl	1874 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ec>
    212a:	9010      	str	r0, [sp, #64]	; 0x40
    212c:	b920      	cbnz	r0, 2138 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x138>
    212e:	9816      	ldr	r0, [sp, #88]	; 0x58
    2130:	7800      	ldrb	r0, [r0, #0]
    2132:	b1f0      	cbz	r0, 2172 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x172>
    2134:	2801      	cmp	r0, #1
    2136:	d02b      	beq.n	2190 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x190>
    2138:	b124      	cbz	r4, 2144 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x144>
    213a:	2100      	movs	r1, #0
    213c:	f240 706f 	movw	r0, #1903	; 0x76f
    2140:	f3af 8000 	nop.w
    2144:	20ff      	movs	r0, #255	; 0xff
    2146:	f1bb 0f00 	cmp.w	fp, #0
    214a:	bf18      	it	ne
    214c:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    2150:	d027      	beq.n	21a2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a2>
    2152:	bf00      	nop
    2154:	f04f 0801 	mov.w	r8, #1
    2158:	b124      	cbz	r4, 2164 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x164>
    215a:	2100      	movs	r1, #0
    215c:	f44f 60f0 	mov.w	r0, #1920	; 0x780
    2160:	f3af 8000 	nop.w
    2164:	9810      	ldr	r0, [sp, #64]	; 0x40
    2166:	4e38      	ldr	r6, [pc, #224]	; (2248 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x248>)
    2168:	2802      	cmp	r0, #2
    216a:	d023      	beq.n	21b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1b4>
    216c:	2801      	cmp	r0, #1
    216e:	d029      	beq.n	21c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c4>
    2170:	e02d      	b.n	21ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1ce>
    2172:	b124      	cbz	r4, 217e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x17e>
    2174:	2100      	movs	r1, #0
    2176:	f240 705a 	movw	r0, #1882	; 0x75a
    217a:	f3af 8000 	nop.w
    217e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    2182:	4651      	mov	r1, sl
    2184:	2004      	movs	r0, #4
    2186:	f7ff fb43 	bl	1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>
    218a:	f04f 0801 	mov.w	r8, #1
    218e:	e7e3      	b.n	2158 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x158>
    2190:	2c00      	cmp	r4, #0
    2192:	f43f aeb3 	beq.w	1efc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2196:	2100      	movs	r1, #0
    2198:	f240 7065 	movw	r0, #1893	; 0x765
    219c:	f3af 8000 	nop.w
    21a0:	e6ac      	b.n	1efc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    21a2:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    21a6:	2101      	movs	r1, #1
    21a8:	4391      	bics	r1, r2
    21aa:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    21ae:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    21b2:	e7cf      	b.n	2154 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x154>
    21b4:	68a8      	ldr	r0, [r5, #8]
    21b6:	990e      	ldr	r1, [sp, #56]	; 0x38
    21b8:	1a40      	subs	r0, r0, r1
    21ba:	f00b f8d2 	bl	d362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    21be:	6871      	ldr	r1, [r6, #4]
    21c0:	b921      	cbnz	r1, 21cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1cc>
    21c2:	e004      	b.n	21ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1ce>
    21c4:	6871      	ldr	r1, [r6, #4]
    21c6:	f04f 30ff 	mov.w	r0, #4294967295
    21ca:	b101      	cbz	r1, 21ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1ce>
    21cc:	4788      	blx	r1
    21ce:	f1b9 0f00 	cmp.w	r9, #0
    21d2:	d024      	beq.n	221e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x21e>
    21d4:	b124      	cbz	r4, 21e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e0>
    21d6:	2100      	movs	r1, #0
    21d8:	f44f 60f2 	mov.w	r0, #1936	; 0x790
    21dc:	f3af 8000 	nop.w
    21e0:	f1b8 0f00 	cmp.w	r8, #0
    21e4:	d011      	beq.n	220a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20a>
    21e6:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    21ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    21ee:	4428      	add	r0, r5
    21f0:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    21f4:	2820      	cmp	r0, #32
    21f6:	d008      	beq.n	220a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20a>
    21f8:	b124      	cbz	r4, 2204 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x204>
    21fa:	2100      	movs	r1, #0
    21fc:	f240 7097 	movw	r0, #1943	; 0x797
    2200:	f3af 8000 	nop.w
    2204:	7870      	ldrb	r0, [r6, #1]
    2206:	f001 ff8d 	bl	4124 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    220a:	b124      	cbz	r4, 2216 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x216>
    220c:	2100      	movs	r1, #0
    220e:	f240 709c 	movw	r0, #1948	; 0x79c
    2212:	f3af 8000 	nop.w
    2216:	b017      	add	sp, #92	; 0x5c
    2218:	4640      	mov	r0, r8
    221a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    221e:	4807      	ldr	r0, [pc, #28]	; (223c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x23c>)
    2220:	2800      	cmp	r0, #0
    2222:	bf18      	it	ne
    2224:	f3af 8000 	nopne.w
    2228:	b662      	cpsie	i
    222a:	e7d3      	b.n	21d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d4>
    222c:	e000ed04 	.word	0xe000ed04
    2230:	20001094 	.word	0x20001094
    2234:	00000000 	.word	0x00000000
    2238:	20000c94 	.word	0x20000c94
    223c:	00000000 	.word	0x00000000
    2240:	20001014 	.word	0x20001014
    2244:	00000000 	.word	0x00000000
    2248:	2000003c 	.word	0x2000003c

0000224c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    224c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2250:	48c9      	ldr	r0, [pc, #804]	; (2578 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x32c>)
    2252:	b08a      	sub	sp, #40	; 0x28
    2254:	6800      	ldr	r0, [r0, #0]
    2256:	05c0      	lsls	r0, r0, #23
    2258:	0dc0      	lsrs	r0, r0, #23
    225a:	d011      	beq.n	2280 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    225c:	3810      	subs	r0, #16
    225e:	b240      	sxtb	r0, r0
    2260:	2800      	cmp	r0, #0
    2262:	bfb8      	it	lt
    2264:	f000 000f 	andlt.w	r0, r0, #15
    2268:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    226c:	bfac      	ite	ge
    226e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2272:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2276:	0940      	lsrs	r0, r0, #5
    2278:	bf08      	it	eq
    227a:	f04f 0b01 	moveq.w	fp, #1
    227e:	d001      	beq.n	2284 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2280:	f04f 0b00 	mov.w	fp, #0
    2284:	980a      	ldr	r0, [sp, #40]	; 0x28
    2286:	7800      	ldrb	r0, [r0, #0]
    2288:	2800      	cmp	r0, #0
    228a:	bf1e      	ittt	ne
    228c:	2000      	movne	r0, #0
    228e:	b00b      	addne	sp, #44	; 0x2c
    2290:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2294:	f04f 0a00 	mov.w	sl, #0
    2298:	4db8      	ldr	r5, [pc, #736]	; (257c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x330>)
    229a:	4cb9      	ldr	r4, [pc, #740]	; (2580 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x334>)
    229c:	46d1      	mov	r9, sl
    229e:	b125      	cbz	r5, 22aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    22a0:	2100      	movs	r1, #0
    22a2:	f240 50b9 	movw	r0, #1465	; 0x5b9
    22a6:	f3af 8000 	nop.w
    22aa:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    22ae:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    22b2:	f04f 0800 	mov.w	r8, #0
    22b6:	b125      	cbz	r5, 22c2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    22b8:	2100      	movs	r1, #0
    22ba:	f240 50be 	movw	r0, #1470	; 0x5be
    22be:	f3af 8000 	nop.w
    22c2:	f1bb 0f00 	cmp.w	fp, #0
    22c6:	d123      	bne.n	2310 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    22c8:	4637      	mov	r7, r6
    22ca:	2001      	movs	r0, #1
    22cc:	ea20 0607 	bic.w	r6, r0, r7
    22d0:	48ac      	ldr	r0, [pc, #688]	; (2584 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x338>)
    22d2:	2240      	movs	r2, #64	; 0x40
    22d4:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    22d8:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    22dc:	f00b f9ad 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    22e0:	b125      	cbz	r5, 22ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    22e2:	2100      	movs	r1, #0
    22e4:	f240 502f 	movw	r0, #1327	; 0x52f
    22e8:	f3af 8000 	nop.w
    22ec:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    22f0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    22f4:	4421      	add	r1, r4
    22f6:	4420      	add	r0, r4
    22f8:	8c0a      	ldrh	r2, [r1, #32]
    22fa:	8402      	strh	r2, [r0, #32]
    22fc:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2300:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2304:	b125      	cbz	r5, 2310 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    2306:	2100      	movs	r1, #0
    2308:	f240 5033 	movw	r0, #1331	; 0x533
    230c:	f3af 8000 	nop.w
    2310:	b125      	cbz	r5, 231c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd0>
    2312:	2100      	movs	r1, #0
    2314:	f240 50c6 	movw	r0, #1478	; 0x5c6
    2318:	f3af 8000 	nop.w
    231c:	a808      	add	r0, sp, #32
    231e:	f000 ff19 	bl	3154 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2322:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    2326:	e9cd 0106 	strd	r0, r1, [sp, #24]
    232a:	4633      	mov	r3, r6
    232c:	466a      	mov	r2, sp
    232e:	a806      	add	r0, sp, #24
    2330:	990a      	ldr	r1, [sp, #40]	; 0x28
    2332:	f7ff f8a5 	bl	1480 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf8>
    2336:	b125      	cbz	r5, 2342 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xf6>
    2338:	2100      	movs	r1, #0
    233a:	f240 50cc 	movw	r0, #1484	; 0x5cc
    233e:	f3af 8000 	nop.w
    2342:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2346:	2820      	cmp	r0, #32
    2348:	d019      	beq.n	237e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    234a:	68e0      	ldr	r0, [r4, #12]
    234c:	9900      	ldr	r1, [sp, #0]
    234e:	1a09      	subs	r1, r1, r0
    2350:	0209      	lsls	r1, r1, #8
    2352:	17ca      	asrs	r2, r1, #31
    2354:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2358:	1209      	asrs	r1, r1, #8
    235a:	d510      	bpl.n	237e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    235c:	e9dd 2100 	ldrd	r2, r1, [sp]
    2360:	1a89      	subs	r1, r1, r2
    2362:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    2366:	4408      	add	r0, r1
    2368:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    236c:	e9cd 3000 	strd	r3, r0, [sp]
    2370:	4293      	cmp	r3, r2
    2372:	d202      	bcs.n	237a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    2374:	9802      	ldr	r0, [sp, #8]
    2376:	1c40      	adds	r0, r0, #1
    2378:	9002      	str	r0, [sp, #8]
    237a:	f04f 0801 	mov.w	r8, #1
    237e:	b14d      	cbz	r5, 2394 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x148>
    2380:	2100      	movs	r1, #0
    2382:	f240 50df 	movw	r0, #1503	; 0x5df
    2386:	f3af 8000 	nop.w
    238a:	2100      	movs	r1, #0
    238c:	f240 50e5 	movw	r0, #1509	; 0x5e5
    2390:	f3af 8000 	nop.w
    2394:	9900      	ldr	r1, [sp, #0]
    2396:	9806      	ldr	r0, [sp, #24]
    2398:	9a01      	ldr	r2, [sp, #4]
    239a:	1a09      	subs	r1, r1, r0
    239c:	1a10      	subs	r0, r2, r0
    239e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    23a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23a6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    23aa:	bf98      	it	ls
    23ac:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    23b0:	d803      	bhi.n	23ba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16e>
    23b2:	f1bb 0f00 	cmp.w	fp, #0
    23b6:	d10c      	bne.n	23d2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x186>
    23b8:	e003      	b.n	23c2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x176>
    23ba:	f1bb 0f00 	cmp.w	fp, #0
    23be:	d039      	beq.n	2434 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e8>
    23c0:	e0c0      	b.n	2544 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    23c2:	4633      	mov	r3, r6
    23c4:	4669      	mov	r1, sp
    23c6:	4870      	ldr	r0, [pc, #448]	; (2588 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    23c8:	9a06      	ldr	r2, [sp, #24]
    23ca:	f7fe fb45 	bl	a58 <MPSL_IRQ_RADIO_Handler+0xb8>
    23ce:	ea48 0800 	orr.w	r8, r8, r0
    23d2:	f1b8 0f00 	cmp.w	r8, #0
    23d6:	d023      	beq.n	2420 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    23d8:	9800      	ldr	r0, [sp, #0]
    23da:	f00a ffc2 	bl	d362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    23de:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    23e2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    23e6:	4b69      	ldr	r3, [pc, #420]	; (258c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    23e8:	4411      	add	r1, r2
    23ea:	1c49      	adds	r1, r1, #1
    23ec:	1842      	adds	r2, r0, r1
    23ee:	4298      	cmp	r0, r3
    23f0:	d856      	bhi.n	24a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    23f2:	4865      	ldr	r0, [pc, #404]	; (2588 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    23f4:	4281      	cmp	r1, r0
    23f6:	dc7c      	bgt.n	24f2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a6>
    23f8:	4240      	negs	r0, r0
    23fa:	4281      	cmp	r1, r0
    23fc:	db7a      	blt.n	24f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>
    23fe:	1c58      	adds	r0, r3, #1
    2400:	4290      	cmp	r0, r2
    2402:	bfdc      	itt	le
    2404:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2408:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    240c:	dd05      	ble.n	241a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ce>
    240e:	2a00      	cmp	r2, #0
    2410:	bfbc      	itt	lt
    2412:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2416:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    241a:	980a      	ldr	r0, [sp, #40]	; 0x28
    241c:	e9c0 2904 	strd	r2, r9, [r0, #16]
    2420:	f04f 0a01 	mov.w	sl, #1
    2424:	2d00      	cmp	r5, #0
    2426:	d07c      	beq.n	2522 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d6>
    2428:	2100      	movs	r1, #0
    242a:	f44f 60bf 	mov.w	r0, #1528	; 0x5f8
    242e:	f3af 8000 	nop.w
    2432:	e087      	b.n	2544 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    2434:	9807      	ldr	r0, [sp, #28]
    2436:	9002      	str	r0, [sp, #8]
    2438:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    243c:	aa08      	add	r2, sp, #32
    243e:	a905      	add	r1, sp, #20
    2440:	f8dd 8018 	ldr.w	r8, [sp, #24]
    2444:	f000 fd16 	bl	2e74 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2448:	f001 fa3e 	bl	38c8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    244c:	f000 fcf6 	bl	2e3c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2450:	4607      	mov	r7, r0
    2452:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2456:	2820      	cmp	r0, #32
    2458:	d027      	beq.n	24aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    245a:	68e0      	ldr	r0, [r4, #12]
    245c:	1d40      	adds	r0, r0, #5
    245e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2462:	bf00      	nop
    2464:	e9dd 2100 	ldrd	r2, r1, [sp]
    2468:	1a89      	subs	r1, r1, r2
    246a:	9000      	str	r0, [sp, #0]
    246c:	4408      	add	r0, r1
    246e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2472:	9001      	str	r0, [sp, #4]
    2474:	9800      	ldr	r0, [sp, #0]
    2476:	4540      	cmp	r0, r8
    2478:	d202      	bcs.n	2480 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    247a:	9802      	ldr	r0, [sp, #8]
    247c:	1c40      	adds	r0, r0, #1
    247e:	9002      	str	r0, [sp, #8]
    2480:	201f      	movs	r0, #31
    2482:	f88d 000c 	strb.w	r0, [sp, #12]
    2486:	9800      	ldr	r0, [sp, #0]
    2488:	f00a ff6b 	bl	d362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    248c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    2490:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2494:	4b3d      	ldr	r3, [pc, #244]	; (258c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    2496:	4411      	add	r1, r2
    2498:	1c49      	adds	r1, r1, #1
    249a:	1842      	adds	r2, r0, r1
    249c:	4298      	cmp	r0, r3
    249e:	d92a      	bls.n	24f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2aa>
    24a0:	f240 516f 	movw	r1, #1391	; 0x56f
    24a4:	2070      	movs	r0, #112	; 0x70
    24a6:	f001 fd69 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24aa:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    24ae:	f108 0609 	add.w	r6, r8, #9
    24b2:	b1b0      	cbz	r0, 24e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    24b4:	f001 fcea 	bl	3e8c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    24b8:	b998      	cbnz	r0, 24e2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    24ba:	f001 fbd3 	bl	3c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    24be:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    24c2:	bf08      	it	eq
    24c4:	200d      	moveq	r0, #13
    24c6:	d00b      	beq.n	24e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    24c8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    24cc:	3856      	subs	r0, #86	; 0x56
    24ce:	bf08      	it	eq
    24d0:	201c      	moveq	r0, #28
    24d2:	d005      	beq.n	24e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    24d4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    24d8:	389f      	subs	r0, #159	; 0x9f
    24da:	bf14      	ite	ne
    24dc:	4648      	movne	r0, r9
    24de:	2032      	moveq	r0, #50	; 0x32
    24e0:	4406      	add	r6, r0
    24e2:	9805      	ldr	r0, [sp, #20]
    24e4:	4287      	cmp	r7, r0
    24e6:	bf84      	itt	hi
    24e8:	1a38      	subhi	r0, r7, r0
    24ea:	4406      	addhi	r6, r0
    24ec:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    24f0:	e7b8      	b.n	2464 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x218>
    24f2:	e003      	b.n	24fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>
    24f4:	e00a      	b.n	250c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>
    24f6:	4824      	ldr	r0, [pc, #144]	; (2588 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    24f8:	4281      	cmp	r1, r0
    24fa:	dd04      	ble.n	2506 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ba>
    24fc:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2500:	2070      	movs	r0, #112	; 0x70
    2502:	f001 fd3b 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2506:	4822      	ldr	r0, [pc, #136]	; (2590 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x344>)
    2508:	4281      	cmp	r1, r0
    250a:	da04      	bge.n	2516 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ca>
    250c:	f240 5171 	movw	r1, #1393	; 0x571
    2510:	2070      	movs	r0, #112	; 0x70
    2512:	f001 fd33 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2516:	481f      	ldr	r0, [pc, #124]	; (2594 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    2518:	4290      	cmp	r0, r2
    251a:	bfd8      	it	le
    251c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2520:	e000      	b.n	2524 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d8>
    2522:	e00f      	b.n	2544 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    2524:	bfd8      	it	le
    2526:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    252a:	dd05      	ble.n	2538 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ec>
    252c:	2a00      	cmp	r2, #0
    252e:	bfbc      	itt	lt
    2530:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2534:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2538:	980a      	ldr	r0, [sp, #40]	; 0x28
    253a:	f04f 0a01 	mov.w	sl, #1
    253e:	46d0      	mov	r8, sl
    2540:	e9c0 2904 	strd	r2, r9, [r0, #16]
    2544:	ea1a 0f08 	tst.w	sl, r8
    2548:	d009      	beq.n	255e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x312>
    254a:	980a      	ldr	r0, [sp, #40]	; 0x28
    254c:	4911      	ldr	r1, [pc, #68]	; (2594 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    254e:	9b02      	ldr	r3, [sp, #8]
    2550:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
    2554:	fbe3 2001 	umlal	r2, r0, r3, r1
    2558:	990a      	ldr	r1, [sp, #40]	; 0x28
    255a:	e9c1 2004 	strd	r2, r0, [r1, #16]
    255e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2562:	f88d 0014 	strb.w	r0, [sp, #20]
    2566:	f89d 0014 	ldrb.w	r0, [sp, #20]
    256a:	2800      	cmp	r0, #0
    256c:	f47f ae97 	bne.w	229e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    2570:	b00b      	add	sp, #44	; 0x2c
    2572:	4650      	mov	r0, sl
    2574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2578:	e000ed04 	.word	0xe000ed04
    257c:	00000000 	.word	0x00000000
    2580:	20001094 	.word	0x20001094
    2584:	20001014 	.word	0x20001014
    2588:	0f424000 	.word	0x0f424000
    258c:	1e847fff 	.word	0x1e847fff
    2590:	f0bdc000 	.word	0xf0bdc000
    2594:	1e848000 	.word	0x1e848000

00002598 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2598:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    259c:	4d94      	ldr	r5, [pc, #592]	; (27f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    259e:	b08c      	sub	sp, #48	; 0x30
    25a0:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    25a4:	2000      	movs	r0, #0
    25a6:	9009      	str	r0, [sp, #36]	; 0x24
    25a8:	9006      	str	r0, [sp, #24]
    25aa:	2001      	movs	r0, #1
    25ac:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    25b0:	f04f 0800 	mov.w	r8, #0
    25b4:	4607      	mov	r7, r0
    25b6:	4c8f      	ldr	r4, [pc, #572]	; (27f4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    25b8:	f8cd 001c 	str.w	r0, [sp, #28]
    25bc:	f000 fdc4 	bl	3148 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    25c0:	9008      	str	r0, [sp, #32]
    25c2:	b124      	cbz	r4, 25ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x36>
    25c4:	2100      	movs	r1, #0
    25c6:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    25ca:	f3af 8000 	nop.w
    25ce:	9807      	ldr	r0, [sp, #28]
    25d0:	2800      	cmp	r0, #0
    25d2:	d03c      	beq.n	264e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb6>
    25d4:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    25d8:	b124      	cbz	r4, 25e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x4c>
    25da:	2100      	movs	r1, #0
    25dc:	f240 70b5 	movw	r0, #1973	; 0x7b5
    25e0:	f3af 8000 	nop.w
    25e4:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    25e8:	2240      	movs	r2, #64	; 0x40
    25ea:	ea27 060a 	bic.w	r6, r7, sl
    25ee:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    25f2:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    25f6:	4683      	mov	fp, r0
    25f8:	f00b f81f 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    25fc:	b124      	cbz	r4, 2608 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x70>
    25fe:	2100      	movs	r1, #0
    2600:	f240 502f 	movw	r0, #1327	; 0x52f
    2604:	f3af 8000 	nop.w
    2608:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    260c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    2610:	4428      	add	r0, r5
    2612:	4429      	add	r1, r5
    2614:	9000      	str	r0, [sp, #0]
    2616:	8c0a      	ldrh	r2, [r1, #32]
    2618:	8402      	strh	r2, [r0, #32]
    261a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    261e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2622:	b124      	cbz	r4, 262e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    2624:	2100      	movs	r1, #0
    2626:	f240 5033 	movw	r0, #1331	; 0x533
    262a:	f3af 8000 	nop.w
    262e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2632:	f88d 0008 	strb.w	r0, [sp, #8]
    2636:	f89d 0008 	ldrb.w	r0, [sp, #8]
    263a:	b178      	cbz	r0, 265c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc4>
    263c:	2c00      	cmp	r4, #0
    263e:	bf1c      	itt	ne
    2640:	2100      	movne	r1, #0
    2642:	f240 70bb 	movwne	r0, #1979	; 0x7bb
    2646:	d0b9      	beq.n	25bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2648:	f3af 8000 	nop.w
    264c:	e7b6      	b.n	25bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    264e:	486a      	ldr	r0, [pc, #424]	; (27f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    2650:	2800      	cmp	r0, #0
    2652:	bf18      	it	ne
    2654:	f3af 8000 	nopne.w
    2658:	b662      	cpsie	i
    265a:	e7bb      	b.n	25d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    265c:	b124      	cbz	r4, 2668 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xd0>
    265e:	2100      	movs	r1, #0
    2660:	f240 70bf 	movw	r0, #1983	; 0x7bf
    2664:	f3af 8000 	nop.w
    2668:	980c      	ldr	r0, [sp, #48]	; 0x30
    266a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    266e:	2803      	cmp	r0, #3
    2670:	d17d      	bne.n	276e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d6>
    2672:	9a00      	ldr	r2, [sp, #0]
    2674:	990c      	ldr	r1, [sp, #48]	; 0x30
    2676:	f892 0020 	ldrb.w	r0, [r2, #32]
    267a:	4288      	cmp	r0, r1
    267c:	bf14      	ite	ne
    267e:	f04f 0a00 	movne.w	sl, #0
    2682:	f04f 0a01 	moveq.w	sl, #1
    2686:	f102 0c20 	add.w	ip, r2, #32
    268a:	4683      	mov	fp, r0
    268c:	2220      	movs	r2, #32
    268e:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    2692:	e003      	b.n	269c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x104>
    2694:	4602      	mov	r2, r0
    2696:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    269a:	7840      	ldrb	r0, [r0, #1]
    269c:	4288      	cmp	r0, r1
    269e:	d002      	beq.n	26a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    26a0:	2820      	cmp	r0, #32
    26a2:	d00a      	beq.n	26ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    26a4:	e7f6      	b.n	2694 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    26a6:	2820      	cmp	r0, #32
    26a8:	d007      	beq.n	26ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    26aa:	4583      	cmp	fp, r0
    26ac:	d107      	bne.n	26be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    26ae:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    26b2:	7840      	ldrb	r0, [r0, #1]
    26b4:	f88c 0000 	strb.w	r0, [ip]
    26b8:	e007      	b.n	26ca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    26ba:	4640      	mov	r0, r8
    26bc:	e00c      	b.n	26d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    26be:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    26c2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    26c6:	7840      	ldrb	r0, [r0, #1]
    26c8:	7048      	strb	r0, [r1, #1]
    26ca:	b124      	cbz	r4, 26d6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x13e>
    26cc:	2100      	movs	r1, #0
    26ce:	f240 409a 	movw	r0, #1178	; 0x49a
    26d2:	f3af 8000 	nop.w
    26d6:	4638      	mov	r0, r7
    26d8:	46c3      	mov	fp, r8
    26da:	ea10 0f0a 	tst.w	r0, sl
    26de:	bf18      	it	ne
    26e0:	46bb      	movne	fp, r7
    26e2:	2800      	cmp	r0, #0
    26e4:	d04f      	beq.n	2786 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    26e6:	b124      	cbz	r4, 26f2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15a>
    26e8:	2100      	movs	r1, #0
    26ea:	f240 70c4 	movw	r0, #1988	; 0x7c4
    26ee:	f3af 8000 	nop.w
    26f2:	4632      	mov	r2, r6
    26f4:	2001      	movs	r0, #1
    26f6:	990c      	ldr	r1, [sp, #48]	; 0x30
    26f8:	f7ff f88a 	bl	1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>
    26fc:	b124      	cbz	r4, 2708 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    26fe:	2100      	movs	r1, #0
    2700:	f240 70cd 	movw	r0, #1997	; 0x7cd
    2704:	f3af 8000 	nop.w
    2708:	483c      	ldr	r0, [pc, #240]	; (27fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x264>)
    270a:	2800      	cmp	r0, #0
    270c:	bf18      	it	ne
    270e:	f3af 8000 	nopne.w
    2712:	f3ef 8010 	mrs	r0, PRIMASK
    2716:	b672      	cpsid	i
    2718:	9007      	str	r0, [sp, #28]
    271a:	b124      	cbz	r4, 2726 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    271c:	2100      	movs	r1, #0
    271e:	f240 70d2 	movw	r0, #2002	; 0x7d2
    2722:	f3af 8000 	nop.w
    2726:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    272a:	f88d 0008 	strb.w	r0, [sp, #8]
    272e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2732:	b138      	cbz	r0, 2744 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    2734:	2c00      	cmp	r4, #0
    2736:	bf1c      	itt	ne
    2738:	2100      	movne	r1, #0
    273a:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    273e:	f43f af3d 	beq.w	25bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    2742:	e781      	b.n	2648 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2744:	f1bb 0f00 	cmp.w	fp, #0
    2748:	d00a      	beq.n	2760 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    274a:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    274e:	2820      	cmp	r0, #32
    2750:	d106      	bne.n	2760 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    2752:	4632      	mov	r2, r6
    2754:	2102      	movs	r1, #2
    2756:	9808      	ldr	r0, [sp, #32]
    2758:	f7ff f88c 	bl	1874 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ec>
    275c:	9006      	str	r0, [sp, #24]
    275e:	b1f8      	cbz	r0, 27a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>
    2760:	b124      	cbz	r4, 276c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    2762:	2100      	movs	r1, #0
    2764:	f240 70ea 	movw	r0, #2026	; 0x7ea
    2768:	f3af 8000 	nop.w
    276c:	e000      	b.n	2770 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d8>
    276e:	e00a      	b.n	2786 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    2770:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2774:	ea27 0000 	bic.w	r0, r7, r0
    2778:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    277c:	20ff      	movs	r0, #255	; 0xff
    277e:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    2782:	2001      	movs	r0, #1
    2784:	9009      	str	r0, [sp, #36]	; 0x24
    2786:	b124      	cbz	r4, 2792 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fa>
    2788:	2100      	movs	r1, #0
    278a:	f240 70f3 	movw	r0, #2035	; 0x7f3
    278e:	f3af 8000 	nop.w
    2792:	9806      	ldr	r0, [sp, #24]
    2794:	4e1a      	ldr	r6, [pc, #104]	; (2800 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x268>)
    2796:	2802      	cmp	r0, #2
    2798:	d009      	beq.n	27ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x216>
    279a:	2801      	cmp	r0, #1
    279c:	d00f      	beq.n	27be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    279e:	e013      	b.n	27c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    27a0:	b194      	cbz	r4, 27c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    27a2:	2100      	movs	r1, #0
    27a4:	f240 70e5 	movw	r0, #2021	; 0x7e5
    27a8:	f3af 8000 	nop.w
    27ac:	e7ec      	b.n	2788 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    27ae:	68a9      	ldr	r1, [r5, #8]
    27b0:	9808      	ldr	r0, [sp, #32]
    27b2:	1a08      	subs	r0, r1, r0
    27b4:	f00a fdd5 	bl	d362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    27b8:	6871      	ldr	r1, [r6, #4]
    27ba:	b921      	cbnz	r1, 27c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22e>
    27bc:	e004      	b.n	27c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    27be:	6871      	ldr	r1, [r6, #4]
    27c0:	f04f 30ff 	mov.w	r0, #4294967295
    27c4:	b101      	cbz	r1, 27c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    27c6:	4788      	blx	r1
    27c8:	9807      	ldr	r0, [sp, #28]
    27ca:	b148      	cbz	r0, 27e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x248>
    27cc:	b124      	cbz	r4, 27d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    27ce:	2100      	movs	r1, #0
    27d0:	f640 0007 	movw	r0, #2055	; 0x807
    27d4:	f3af 8000 	nop.w
    27d8:	9809      	ldr	r0, [sp, #36]	; 0x24
    27da:	b00d      	add	sp, #52	; 0x34
    27dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27e0:	4805      	ldr	r0, [pc, #20]	; (27f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    27e2:	2800      	cmp	r0, #0
    27e4:	bf18      	it	ne
    27e6:	f3af 8000 	nopne.w
    27ea:	b662      	cpsie	i
    27ec:	e7ee      	b.n	27cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>
    27ee:	0000      	.short	0x0000
    27f0:	20001094 	.word	0x20001094
	...
    2800:	2000003c 	.word	0x2000003c

00002804 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2804:	b510      	push	{r4, lr}
    2806:	2820      	cmp	r0, #32
    2808:	d211      	bcs.n	282e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    280a:	490e      	ldr	r1, [pc, #56]	; (2844 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    280c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2810:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2814:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2818:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    281c:	b13b      	cbz	r3, 282e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    281e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2822:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2826:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    282a:	2a01      	cmp	r2, #1
    282c:	d001      	beq.n	2832 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    282e:	2000      	movs	r0, #0
    2830:	bd10      	pop	{r4, pc}
    2832:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    2836:	4601      	mov	r1, r0
    2838:	2000      	movs	r0, #0
    283a:	f7fe ffe9 	bl	1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>
    283e:	2001      	movs	r0, #1
    2840:	bd10      	pop	{r4, pc}
    2842:	0000      	.short	0x0000
    2844:	20001094 	.word	0x20001094

00002848 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    284c:	4e86      	ldr	r6, [pc, #536]	; (2a68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    284e:	4680      	mov	r8, r0
    2850:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    2854:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2858:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    285c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2860:	2800      	cmp	r0, #0
    2862:	d071      	beq.n	2948 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2864:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    2868:	4d80      	ldr	r5, [pc, #512]	; (2a6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    286a:	b125      	cbz	r5, 2876 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    286c:	2100      	movs	r1, #0
    286e:	f640 3076 	movw	r0, #2934	; 0xb76
    2872:	f3af 8000 	nop.w
    2876:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    287a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    287e:	2801      	cmp	r0, #1
    2880:	d018      	beq.n	28b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2882:	b2c0      	uxtb	r0, r0
    2884:	2804      	cmp	r0, #4
    2886:	bf1c      	itt	ne
    2888:	2805      	cmpne	r0, #5
    288a:	2806      	cmpne	r0, #6
    288c:	d061      	beq.n	2952 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    288e:	b12d      	cbz	r5, 289c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2890:	f04f 0100 	mov.w	r1, #0
    2894:	f640 3082 	movw	r0, #2946	; 0xb82
    2898:	f3af 8000 	nop.w
    289c:	f001 fc98 	bl	41d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    28a0:	b125      	cbz	r5, 28ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    28a2:	2100      	movs	r1, #0
    28a4:	f640 3086 	movw	r0, #2950	; 0xb86
    28a8:	f3af 8000 	nop.w
    28ac:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    28b0:	2801      	cmp	r0, #1
    28b2:	d1e6      	bne.n	2882 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    28b4:	2401      	movs	r4, #1
    28b6:	b125      	cbz	r5, 28c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    28b8:	2100      	movs	r1, #0
    28ba:	f640 308d 	movw	r0, #2957	; 0xb8d
    28be:	f3af 8000 	nop.w
    28c2:	2c00      	cmp	r4, #0
    28c4:	d04b      	beq.n	295e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    28c6:	2000      	movs	r0, #0
    28c8:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    28cc:	b125      	cbz	r5, 28d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    28ce:	2100      	movs	r1, #0
    28d0:	f640 3092 	movw	r0, #2962	; 0xb92
    28d4:	f3af 8000 	nop.w
    28d8:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    28dc:	2001      	movs	r0, #1
    28de:	ea20 090b 	bic.w	r9, r0, fp
    28e2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    28e6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    28ea:	2240      	movs	r2, #64	; 0x40
    28ec:	f00a fea5 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    28f0:	b125      	cbz	r5, 28fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    28f2:	2100      	movs	r1, #0
    28f4:	f240 502f 	movw	r0, #1327	; 0x52f
    28f8:	f3af 8000 	nop.w
    28fc:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    2900:	eb00 0a06 	add.w	sl, r0, r6
    2904:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2908:	4430      	add	r0, r6
    290a:	8c01      	ldrh	r1, [r0, #32]
    290c:	f8aa 1020 	strh.w	r1, [sl, #32]
    2910:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    2914:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2918:	b125      	cbz	r5, 2924 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    291a:	2100      	movs	r1, #0
    291c:	f240 5033 	movw	r0, #1331	; 0x533
    2920:	f3af 8000 	nop.w
    2924:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2928:	f88d 0000 	strb.w	r0, [sp]
    292c:	f89d 0000 	ldrb.w	r0, [sp]
    2930:	b1e0      	cbz	r0, 296c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    2932:	2d00      	cmp	r5, #0
    2934:	bf1c      	itt	ne
    2936:	2100      	movne	r1, #0
    2938:	f640 3098 	movwne	r0, #2968	; 0xb98
    293c:	d0bb      	beq.n	28b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    293e:	bf00      	nop
    2940:	f3af 8000 	nop.w
    2944:	e7b7      	b.n	28b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2946:	e7ff      	b.n	2948 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2948:	f640 316d 	movw	r1, #2925	; 0xb6d
    294c:	2070      	movs	r0, #112	; 0x70
    294e:	f001 fb15 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2952:	464a      	mov	r2, r9
    2954:	4641      	mov	r1, r8
    2956:	2001      	movs	r0, #1
    2958:	f7fe ff5a 	bl	1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>
    295c:	e7a0      	b.n	28a0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    295e:	4844      	ldr	r0, [pc, #272]	; (2a70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2960:	2800      	cmp	r0, #0
    2962:	bf18      	it	ne
    2964:	f3af 8000 	nopne.w
    2968:	b662      	cpsie	i
    296a:	e7ac      	b.n	28c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    296c:	b125      	cbz	r5, 2978 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    296e:	2100      	movs	r1, #0
    2970:	f640 309c 	movw	r0, #2972	; 0xb9c
    2974:	f3af 8000 	nop.w
    2978:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    297c:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2980:	4640      	mov	r0, r8
    2982:	461c      	mov	r4, r3
    2984:	f04f 0b20 	mov.w	fp, #32
    2988:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    298c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2990:	e004      	b.n	299c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    2992:	46a3      	mov	fp, r4
    2994:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2998:	f89c 4001 	ldrb.w	r4, [ip, #1]
    299c:	4284      	cmp	r4, r0
    299e:	d002      	beq.n	29a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    29a0:	2c20      	cmp	r4, #32
    29a2:	d02b      	beq.n	29fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    29a4:	e7f5      	b.n	2992 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    29a6:	2c20      	cmp	r4, #32
    29a8:	d028      	beq.n	29fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    29aa:	42a3      	cmp	r3, r4
    29ac:	d104      	bne.n	29b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    29ae:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    29b2:	7840      	ldrb	r0, [r0, #1]
    29b4:	7008      	strb	r0, [r1, #0]
    29b6:	e005      	b.n	29c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    29b8:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    29bc:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    29c0:	7840      	ldrb	r0, [r0, #1]
    29c2:	7048      	strb	r0, [r1, #1]
    29c4:	f1ba 0f00 	cmp.w	sl, #0
    29c8:	d011      	beq.n	29ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    29ca:	b125      	cbz	r5, 29d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    29cc:	2100      	movs	r1, #0
    29ce:	f240 4092 	movw	r0, #1170	; 0x492
    29d2:	f3af 8000 	nop.w
    29d6:	f89a 0000 	ldrb.w	r0, [sl]
    29da:	42a0      	cmp	r0, r4
    29dc:	d107      	bne.n	29ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    29de:	b125      	cbz	r5, 29ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    29e0:	2100      	movs	r1, #0
    29e2:	f240 4095 	movw	r0, #1173	; 0x495
    29e6:	f3af 8000 	nop.w
    29ea:	f88a b000 	strb.w	fp, [sl]
    29ee:	b15d      	cbz	r5, 2a08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    29f0:	2100      	movs	r1, #0
    29f2:	f240 409a 	movw	r0, #1178	; 0x49a
    29f6:	f3af 8000 	nop.w
    29fa:	e000      	b.n	29fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    29fc:	b125      	cbz	r5, 2a08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    29fe:	2100      	movs	r1, #0
    2a00:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    2a04:	f3af 8000 	nop.w
    2a08:	481a      	ldr	r0, [pc, #104]	; (2a74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    2a0a:	2800      	cmp	r0, #0
    2a0c:	bf18      	it	ne
    2a0e:	f3af 8000 	nopne.w
    2a12:	f3ef 8410 	mrs	r4, PRIMASK
    2a16:	b672      	cpsid	i
    2a18:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2a1c:	f88d 0000 	strb.w	r0, [sp]
    2a20:	f89d 0000 	ldrb.w	r0, [sp]
    2a24:	b138      	cbz	r0, 2a36 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    2a26:	2d00      	cmp	r5, #0
    2a28:	bf1c      	itt	ne
    2a2a:	2100      	movne	r1, #0
    2a2c:	f640 30a6 	movwne	r0, #2982	; 0xba6
    2a30:	f43f af41 	beq.w	28b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2a34:	e784      	b.n	2940 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    2a36:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    2a3a:	20ff      	movs	r0, #255	; 0xff
    2a3c:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2a40:	b154      	cbz	r4, 2a58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    2a42:	2d00      	cmp	r5, #0
    2a44:	bf08      	it	eq
    2a46:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a4a:	2100      	movs	r1, #0
    2a4c:	f640 30b3 	movw	r0, #2995	; 0xbb3
    2a50:	f3af 8000 	nop.w
    2a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a58:	4805      	ldr	r0, [pc, #20]	; (2a70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2a5a:	2800      	cmp	r0, #0
    2a5c:	bf18      	it	ne
    2a5e:	f3af 8000 	nopne.w
    2a62:	b662      	cpsie	i
    2a64:	e7ed      	b.n	2a42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2a66:	0000      	.short	0x0000
    2a68:	20001094 	.word	0x20001094
	...

00002a78 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2a78:	b570      	push	{r4, r5, r6, lr}
    2a7a:	460d      	mov	r5, r1
    2a7c:	4606      	mov	r6, r0
    2a7e:	f001 f9f3 	bl	3e68 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2a82:	480f      	ldr	r0, [pc, #60]	; (2ac0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2a84:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    2a88:	2400      	movs	r4, #0
    2a8a:	3880      	subs	r0, #128	; 0x80
    2a8c:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2a90:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2a94:	b129      	cbz	r1, 2aa2 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2a96:	1c61      	adds	r1, r4, #1
    2a98:	b2cc      	uxtb	r4, r1
    2a9a:	2c20      	cmp	r4, #32
    2a9c:	d3f8      	bcc.n	2a90 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2a9e:	2020      	movs	r0, #32
    2aa0:	bd70      	pop	{r4, r5, r6, pc}
    2aa2:	4808      	ldr	r0, [pc, #32]	; (2ac4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2aa4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2aa8:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    2aac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2ab0:	4621      	mov	r1, r4
    2ab2:	6045      	str	r5, [r0, #4]
    2ab4:	2001      	movs	r0, #1
    2ab6:	f7fe feab 	bl	1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>
    2aba:	4620      	mov	r0, r4
    2abc:	bd70      	pop	{r4, r5, r6, pc}
    2abe:	0000      	.short	0x0000
    2ac0:	20001094 	.word	0x20001094
    2ac4:	20000c94 	.word	0x20000c94

00002ac8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2acc:	f000 fb3c 	bl	3148 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2ad0:	4605      	mov	r5, r0
    2ad2:	f000 fe0b 	bl	36ec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2ad6:	4c60      	ldr	r4, [pc, #384]	; (2c58 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x190>)
    2ad8:	6860      	ldr	r0, [r4, #4]
    2ada:	f1b0 3fff 	cmp.w	r0, #4294967295
    2ade:	bf1c      	itt	ne
    2ae0:	f04f 30ff 	movne.w	r0, #4294967295
    2ae4:	6060      	strne	r0, [r4, #4]
    2ae6:	7fa0      	ldrb	r0, [r4, #30]
    2ae8:	4f5c      	ldr	r7, [pc, #368]	; (2c5c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    2aea:	b990      	cbnz	r0, 2b12 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4a>
    2aec:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    2af0:	1a40      	subs	r0, r0, r1
    2af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2af6:	f44f 710c 	mov.w	r1, #560	; 0x230
    2afa:	f00a fc5d 	bl	d3b8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2afe:	68e1      	ldr	r1, [r4, #12]
    2b00:	4408      	add	r0, r1
    2b02:	1a28      	subs	r0, r5, r0
    2b04:	0200      	lsls	r0, r0, #8
    2b06:	17c1      	asrs	r1, r0, #31
    2b08:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2b0c:	1200      	asrs	r0, r0, #8
    2b0e:	0fc0      	lsrs	r0, r0, #31
    2b10:	d012      	beq.n	2b38 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    2b12:	7e60      	ldrb	r0, [r4, #25]
    2b14:	b320      	cbz	r0, 2b60 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    2b16:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2b1a:	f88d 0000 	strb.w	r0, [sp]
    2b1e:	f89d 0000 	ldrb.w	r0, [sp]
    2b22:	b1e8      	cbz	r0, 2b60 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    2b24:	f000 fc3e 	bl	33a4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2b28:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    2b2c:	b1f0      	cbz	r0, 2b6c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2b2e:	f240 31d5 	movw	r1, #981	; 0x3d5
    2b32:	2070      	movs	r0, #112	; 0x70
    2b34:	f001 fa22 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b38:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2b3c:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2b40:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2b44:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    2b48:	6840      	ldr	r0, [r0, #4]
    2b4a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2b4e:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
    2b52:	2108      	movs	r1, #8
    2b54:	4790      	blx	r2
    2b56:	f240 31bd 	movw	r1, #957	; 0x3bd
    2b5a:	2070      	movs	r0, #112	; 0x70
    2b5c:	f001 fa0e 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b60:	1ce8      	adds	r0, r5, #3
    2b62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b66:	f000 fb15 	bl	3194 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2b6a:	e7dd      	b.n	2b28 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    2b6c:	2001      	movs	r0, #1
    2b6e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2b72:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2b76:	2820      	cmp	r0, #32
    2b78:	d021      	beq.n	2bbe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf6>
    2b7a:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
    2b7e:	2020      	movs	r0, #32
    2b80:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2b84:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2b88:	2600      	movs	r6, #0
    2b8a:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    2b8e:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
    2b92:	6026      	str	r6, [r4, #0]
    2b94:	f000 fe9e 	bl	38d4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    2b98:	7720      	strb	r0, [r4, #28]
    2b9a:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
    2b9e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    2ba2:	eb00 0a04 	add.w	sl, r0, r4
    2ba6:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2baa:	2820      	cmp	r0, #32
    2bac:	d012      	beq.n	2bd4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    2bae:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2bb2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    2bb6:	7e81      	ldrb	r1, [r0, #26]
    2bb8:	2901      	cmp	r1, #1
    2bba:	d005      	beq.n	2bc8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    2bbc:	e00a      	b.n	2bd4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    2bbe:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    2bc2:	2070      	movs	r0, #112	; 0x70
    2bc4:	f001 f9da 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bc8:	f100 0208 	add.w	r2, r0, #8
    2bcc:	2101      	movs	r1, #1
    2bce:	4628      	mov	r0, r5
    2bd0:	f7fe f996 	bl	f00 <MPSL_IRQ_RADIO_Handler+0x560>
    2bd4:	4642      	mov	r2, r8
    2bd6:	2101      	movs	r1, #1
    2bd8:	4628      	mov	r0, r5
    2bda:	f7fe fe4b 	bl	1874 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ec>
    2bde:	0007      	movs	r7, r0
    2be0:	d0f8      	beq.n	2bd4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    2be2:	481f      	ldr	r0, [pc, #124]	; (2c60 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>)
    2be4:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    2be8:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    2bec:	2802      	cmp	r0, #2
    2bee:	d104      	bne.n	2bfa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    2bf0:	4642      	mov	r2, r8
    2bf2:	4649      	mov	r1, r9
    2bf4:	2006      	movs	r0, #6
    2bf6:	f7fe fe0b 	bl	1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>
    2bfa:	20ff      	movs	r0, #255	; 0xff
    2bfc:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2c00:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    2c04:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2c64 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>
    2c08:	2820      	cmp	r0, #32
    2c0a:	bf1c      	itt	ne
    2c0c:	f898 0001 	ldrbne.w	r0, [r8, #1]
    2c10:	f001 fa88 	blne	4124 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2c14:	7f20      	ldrb	r0, [r4, #28]
    2c16:	b118      	cbz	r0, 2c20 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x158>
    2c18:	f000 fe38 	bl	388c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2c1c:	7726      	strb	r6, [r4, #28]
    2c1e:	7766      	strb	r6, [r4, #29]
    2c20:	2f02      	cmp	r7, #2
    2c22:	d00f      	beq.n	2c44 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17c>
    2c24:	2f01      	cmp	r7, #1
    2c26:	bf18      	it	ne
    2c28:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c2c:	f04f 30ff 	mov.w	r0, #4294967295
    2c30:	f8d8 1004 	ldr.w	r1, [r8, #4]
    2c34:	2900      	cmp	r1, #0
    2c36:	bf08      	it	eq
    2c38:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c3c:	b001      	add	sp, #4
    2c3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c42:	4708      	bx	r1
    2c44:	68a0      	ldr	r0, [r4, #8]
    2c46:	1b40      	subs	r0, r0, r5
    2c48:	f00a fb8b 	bl	d362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2c4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    2c50:	2900      	cmp	r1, #0
    2c52:	d1f3      	bne.n	2c3c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    2c54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c58:	20001094 	.word	0x20001094
    2c5c:	20000c94 	.word	0x20000c94
    2c60:	20001014 	.word	0x20001014
    2c64:	2000003c 	.word	0x2000003c

00002c68 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2c68:	b530      	push	{r4, r5, lr}
    2c6a:	4c36      	ldr	r4, [pc, #216]	; (2d44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    2c6c:	4605      	mov	r5, r0
    2c6e:	b083      	sub	sp, #12
    2c70:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2c74:	2820      	cmp	r0, #32
    2c76:	d008      	beq.n	2c8a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    2c78:	6860      	ldr	r0, [r4, #4]
    2c7a:	f1b0 3fff 	cmp.w	r0, #4294967295
    2c7e:	d009      	beq.n	2c94 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    2c80:	f640 21a1 	movw	r1, #2721	; 0xaa1
    2c84:	2070      	movs	r0, #112	; 0x70
    2c86:	f001 f979 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c8a:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
    2c8e:	2070      	movs	r0, #112	; 0x70
    2c90:	f001 f974 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c94:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2c98:	492b      	ldr	r1, [pc, #172]	; (2d48 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe0>)
    2c9a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c9e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2ca2:	3008      	adds	r0, #8
    2ca4:	f7fe fd7a 	bl	179c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x414>
    2ca8:	4601      	mov	r1, r0
    2caa:	4a28      	ldr	r2, [pc, #160]	; (2d4c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe4>)
    2cac:	4428      	add	r0, r5
    2cae:	4291      	cmp	r1, r2
    2cb0:	d904      	bls.n	2cbc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x54>
    2cb2:	f240 516f 	movw	r1, #1391	; 0x56f
    2cb6:	2070      	movs	r0, #112	; 0x70
    2cb8:	f001 f960 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cbc:	4924      	ldr	r1, [pc, #144]	; (2d50 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe8>)
    2cbe:	428d      	cmp	r5, r1
    2cc0:	dd04      	ble.n	2ccc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x64>
    2cc2:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2cc6:	2070      	movs	r0, #112	; 0x70
    2cc8:	f001 f958 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ccc:	4921      	ldr	r1, [pc, #132]	; (2d54 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xec>)
    2cce:	428d      	cmp	r5, r1
    2cd0:	da04      	bge.n	2cdc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x74>
    2cd2:	f240 5171 	movw	r1, #1393	; 0x571
    2cd6:	2070      	movs	r0, #112	; 0x70
    2cd8:	f001 f950 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cdc:	491e      	ldr	r1, [pc, #120]	; (2d58 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
    2cde:	4281      	cmp	r1, r0
    2ce0:	bfdc      	itt	le
    2ce2:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2ce6:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2cea:	dd05      	ble.n	2cf8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    2cec:	2800      	cmp	r0, #0
    2cee:	bfbc      	itt	lt
    2cf0:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2cf4:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2cf8:	aa01      	add	r2, sp, #4
    2cfa:	4669      	mov	r1, sp
    2cfc:	f000 f8ba 	bl	2e74 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2d00:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2d04:	280f      	cmp	r0, #15
    2d06:	bf8c      	ite	hi
    2d08:	2001      	movhi	r0, #1
    2d0a:	2000      	movls	r0, #0
    2d0c:	9900      	ldr	r1, [sp, #0]
    2d0e:	4408      	add	r0, r1
    2d10:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2d14:	6061      	str	r1, [r4, #4]
    2d16:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2d1a:	f88d 0000 	strb.w	r0, [sp]
    2d1e:	f89d 0000 	ldrb.w	r0, [sp]
    2d22:	2800      	cmp	r0, #0
    2d24:	bf04      	itt	eq
    2d26:	b003      	addeq	sp, #12
    2d28:	bd30      	popeq	{r4, r5, pc}
    2d2a:	2005      	movs	r0, #5
    2d2c:	f000 fbb8 	bl	34a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2d30:	2800      	cmp	r0, #0
    2d32:	bf1c      	itt	ne
    2d34:	b003      	addne	sp, #12
    2d36:	bd30      	popne	{r4, r5, pc}
    2d38:	f640 21a8 	movw	r1, #2728	; 0xaa8
    2d3c:	2070      	movs	r0, #112	; 0x70
    2d3e:	f001 f91d 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d42:	0000      	.short	0x0000
    2d44:	20001094 	.word	0x20001094
    2d48:	20000c94 	.word	0x20000c94
    2d4c:	1e847fff 	.word	0x1e847fff
    2d50:	0f424000 	.word	0x0f424000
    2d54:	f0bdc000 	.word	0xf0bdc000
    2d58:	1e848000 	.word	0x1e848000

00002d5c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2d5c:	b570      	push	{r4, r5, r6, lr}
    2d5e:	4c1c      	ldr	r4, [pc, #112]	; (2dd0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    2d60:	2120      	movs	r1, #32
    2d62:	f884 1020 	strb.w	r1, [r4, #32]
    2d66:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2d6a:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2d6e:	2000      	movs	r0, #0
    2d70:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2d74:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    2d78:	1e42      	subs	r2, r0, #1
    2d7a:	e9c4 0200 	strd	r0, r2, [r4]
    2d7e:	77a0      	strb	r0, [r4, #30]
    2d80:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2d84:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2d88:	7720      	strb	r0, [r4, #28]
    2d8a:	7760      	strb	r0, [r4, #29]
    2d8c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    2d90:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    2d94:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2d98:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2d9c:	2210      	movs	r2, #16
    2d9e:	7088      	strb	r0, [r1, #2]
    2da0:	f801 0f04 	strb.w	r0, [r1, #4]!
    2da4:	1e52      	subs	r2, r2, #1
    2da6:	d1fa      	bne.n	2d9e <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    2da8:	f000 fd9e 	bl	38e8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    2dac:	4d09      	ldr	r5, [pc, #36]	; (2dd4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    2dae:	2601      	movs	r6, #1
    2db0:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2db4:	20ff      	movs	r0, #255	; 0xff
    2db6:	7028      	strb	r0, [r5, #0]
    2db8:	4807      	ldr	r0, [pc, #28]	; (2dd8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2dba:	f001 f995 	bl	40e8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2dbe:	7068      	strb	r0, [r5, #1]
    2dc0:	f001 f9f0 	bl	41a4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2dc4:	60a8      	str	r0, [r5, #8]
    2dc6:	f000 fd19 	bl	37fc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2dca:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    2dce:	bd70      	pop	{r4, r5, r6, pc}
    2dd0:	20001094 	.word	0x20001094
    2dd4:	2000003c 	.word	0x2000003c
    2dd8:	000016c5 	.word	0x000016c5

00002ddc <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2ddc:	b570      	push	{r4, r5, r6, lr}
    2dde:	4605      	mov	r5, r0
    2de0:	2001      	movs	r0, #1
    2de2:	fa00 f405 	lsl.w	r4, r0, r5
    2de6:	460e      	mov	r6, r1
    2de8:	2a00      	cmp	r2, #0
    2dea:	bf08      	it	eq
    2dec:	4808      	ldreq	r0, [pc, #32]	; (2e10 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    2dee:	d00c      	beq.n	2e0a <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    2df0:	2000      	movs	r0, #0
    2df2:	f000 fce9 	bl	37c8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    2df6:	00e9      	lsls	r1, r5, #3
    2df8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2dfc:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    2e00:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2e04:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2e08:	4802      	ldr	r0, [pc, #8]	; (2e14 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2e0a:	6004      	str	r4, [r0, #0]
    2e0c:	bd70      	pop	{r4, r5, r6, pc}
    2e0e:	0000      	.short	0x0000
    2e10:	4001f508 	.word	0x4001f508
    2e14:	4001f504 	.word	0x4001f504

00002e18 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    2e18:	b500      	push	{lr}
    2e1a:	b083      	sub	sp, #12
    2e1c:	4668      	mov	r0, sp
    2e1e:	f000 f999 	bl	3154 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2e22:	9800      	ldr	r0, [sp, #0]
    2e24:	f00a fa9d 	bl	d362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2e28:	9a01      	ldr	r2, [sp, #4]
    2e2a:	4b03      	ldr	r3, [pc, #12]	; (2e38 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    2e2c:	2100      	movs	r1, #0
    2e2e:	fbe2 0103 	umlal	r0, r1, r2, r3
    2e32:	b003      	add	sp, #12
    2e34:	bd00      	pop	{pc}
    2e36:	0000      	.short	0x0000
    2e38:	1e848000 	.word	0x1e848000

00002e3c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2e3c:	0b41      	lsrs	r1, r0, #13
    2e3e:	f248 6237 	movw	r2, #34359	; 0x8637
    2e42:	4351      	muls	r1, r2
    2e44:	0c0a      	lsrs	r2, r1, #16
    2e46:	4b09      	ldr	r3, [pc, #36]	; (2e6c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2e48:	0251      	lsls	r1, r2, #9
    2e4a:	fb02 0203 	mla	r2, r2, r3, r0
    2e4e:	4808      	ldr	r0, [pc, #32]	; (2e70 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2e50:	4350      	muls	r0, r2
    2e52:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2e56:	306e      	adds	r0, #110	; 0x6e
    2e58:	0d40      	lsrs	r0, r0, #21
    2e5a:	425b      	negs	r3, r3
    2e5c:	fb10 f303 	smulbb	r3, r0, r3
    2e60:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2e64:	bf88      	it	hi
    2e66:	1c49      	addhi	r1, r1, #1
    2e68:	4408      	add	r0, r1
    2e6a:	4770      	bx	lr
    2e6c:	ffffc2f7 	.word	0xffffc2f7
    2e70:	00010c6f 	.word	0x00010c6f

00002e74 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2e74:	0b43      	lsrs	r3, r0, #13
    2e76:	f248 6c37 	movw	ip, #34359	; 0x8637
    2e7a:	fb03 f30c 	mul.w	r3, r3, ip
    2e7e:	b430      	push	{r4, r5}
    2e80:	0c1b      	lsrs	r3, r3, #16
    2e82:	f8df c044 	ldr.w	ip, [pc, #68]	; 2ec8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2e86:	025c      	lsls	r4, r3, #9
    2e88:	fb03 030c 	mla	r3, r3, ip, r0
    2e8c:	480f      	ldr	r0, [pc, #60]	; (2ecc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2e8e:	4358      	muls	r0, r3
    2e90:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2e94:	eb04 000c 	add.w	r0, r4, ip
    2e98:	f643 5409 	movw	r4, #15625	; 0x3d09
    2e9c:	fb1c f404 	smulbb	r4, ip, r4
    2ea0:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2ea4:	f643 5508 	movw	r5, #15624	; 0x3d08
    2ea8:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2eac:	442c      	add	r4, r5
    2eae:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2eb2:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2eb6:	bf84      	itt	hi
    2eb8:	f04f 0c00 	movhi.w	ip, #0
    2ebc:	1c40      	addhi	r0, r0, #1
    2ebe:	6008      	str	r0, [r1, #0]
    2ec0:	f882 c000 	strb.w	ip, [r2]
    2ec4:	bc30      	pop	{r4, r5}
    2ec6:	4770      	bx	lr
    2ec8:	ffffc2f7 	.word	0xffffc2f7
    2ecc:	00010c6f 	.word	0x00010c6f

00002ed0 <MPSL_IRQ_RTC0_Handler>:
    2ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ed4:	4d3b      	ldr	r5, [pc, #236]	; (2fc4 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2ed6:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2eda:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2fc8 <MPSL_IRQ_RTC0_Handler+0xf8>
    2ede:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2ee2:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2ee6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2eea:	f04f 0400 	mov.w	r4, #0
    2eee:	d019      	beq.n	2f24 <MPSL_IRQ_RTC0_Handler+0x54>
    2ef0:	4836      	ldr	r0, [pc, #216]	; (2fcc <MPSL_IRQ_RTC0_Handler+0xfc>)
    2ef2:	6800      	ldr	r0, [r0, #0]
    2ef4:	b1b0      	cbz	r0, 2f24 <MPSL_IRQ_RTC0_Handler+0x54>
    2ef6:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2efa:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2efe:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    2f02:	f8d8 1000 	ldr.w	r1, [r8]
    2f06:	1a40      	subs	r0, r0, r1
    2f08:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f0c:	2802      	cmp	r0, #2
    2f0e:	d302      	bcc.n	2f16 <MPSL_IRQ_RTC0_Handler+0x46>
    2f10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2f14:	d906      	bls.n	2f24 <MPSL_IRQ_RTC0_Handler+0x54>
    2f16:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2f1a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2f1e:	2004      	movs	r0, #4
    2f20:	f7fe fec2 	bl	1ca8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f24:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2f28:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2f2c:	d01a      	beq.n	2f64 <MPSL_IRQ_RTC0_Handler+0x94>
    2f2e:	4828      	ldr	r0, [pc, #160]	; (2fd0 <MPSL_IRQ_RTC0_Handler+0x100>)
    2f30:	6800      	ldr	r0, [r0, #0]
    2f32:	b1b8      	cbz	r0, 2f64 <MPSL_IRQ_RTC0_Handler+0x94>
    2f34:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    2f38:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2f3c:	4825      	ldr	r0, [pc, #148]	; (2fd4 <MPSL_IRQ_RTC0_Handler+0x104>)
    2f3e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2f42:	f8d8 1000 	ldr.w	r1, [r8]
    2f46:	1a40      	subs	r0, r0, r1
    2f48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f4c:	2802      	cmp	r0, #2
    2f4e:	d302      	bcc.n	2f56 <MPSL_IRQ_RTC0_Handler+0x86>
    2f50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2f54:	d906      	bls.n	2f64 <MPSL_IRQ_RTC0_Handler+0x94>
    2f56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2f5a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2f5e:	2005      	movs	r0, #5
    2f60:	f7fe fea2 	bl	1ca8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2f64:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2f68:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2f6c:	d01a      	beq.n	2fa4 <MPSL_IRQ_RTC0_Handler+0xd4>
    2f6e:	481a      	ldr	r0, [pc, #104]	; (2fd8 <MPSL_IRQ_RTC0_Handler+0x108>)
    2f70:	6800      	ldr	r0, [r0, #0]
    2f72:	b1b8      	cbz	r0, 2fa4 <MPSL_IRQ_RTC0_Handler+0xd4>
    2f74:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    2f78:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2f7c:	4817      	ldr	r0, [pc, #92]	; (2fdc <MPSL_IRQ_RTC0_Handler+0x10c>)
    2f7e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2f82:	f8d8 1000 	ldr.w	r1, [r8]
    2f86:	1a40      	subs	r0, r0, r1
    2f88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f8c:	2802      	cmp	r0, #2
    2f8e:	d302      	bcc.n	2f96 <MPSL_IRQ_RTC0_Handler+0xc6>
    2f90:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2f94:	d906      	bls.n	2fa4 <MPSL_IRQ_RTC0_Handler+0xd4>
    2f96:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2f9a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2f9e:	2006      	movs	r0, #6
    2fa0:	f7fe fe82 	bl	1ca8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2fa4:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    2fa8:	2800      	cmp	r0, #0
    2faa:	bf08      	it	eq
    2fac:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fb0:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    2fb4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2fb8:	4809      	ldr	r0, [pc, #36]	; (2fe0 <MPSL_IRQ_RTC0_Handler+0x110>)
    2fba:	68c1      	ldr	r1, [r0, #12]
    2fbc:	1c49      	adds	r1, r1, #1
    2fbe:	60c1      	str	r1, [r0, #12]
    2fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fc4:	4000b000 	.word	0x4000b000
    2fc8:	4000b504 	.word	0x4000b504
    2fcc:	4000b140 	.word	0x4000b140
    2fd0:	4000b144 	.word	0x4000b144
    2fd4:	4000b004 	.word	0x4000b004
    2fd8:	4000b148 	.word	0x4000b148
    2fdc:	4000b008 	.word	0x4000b008
    2fe0:	20000048 	.word	0x20000048

00002fe4 <MPSL_IRQ_TIMER0_Handler>:
    2fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fe8:	4d38      	ldr	r5, [pc, #224]	; (30cc <MPSL_IRQ_TIMER0_Handler+0xe8>)
    2fea:	7828      	ldrb	r0, [r5, #0]
    2fec:	2804      	cmp	r0, #4
    2fee:	d068      	beq.n	30c2 <MPSL_IRQ_TIMER0_Handler+0xde>
    2ff0:	1ca8      	adds	r0, r5, #2
    2ff2:	2201      	movs	r2, #1
    2ff4:	7801      	ldrb	r1, [r0, #0]
    2ff6:	b159      	cbz	r1, 3010 <MPSL_IRQ_TIMER0_Handler+0x2c>
    2ff8:	2901      	cmp	r1, #1
    2ffa:	bf08      	it	eq
    2ffc:	706a      	strbeq	r2, [r5, #1]
    2ffe:	d002      	beq.n	3006 <MPSL_IRQ_TIMER0_Handler+0x22>
    3000:	7869      	ldrb	r1, [r5, #1]
    3002:	2900      	cmp	r1, #0
    3004:	d058      	beq.n	30b8 <MPSL_IRQ_TIMER0_Handler+0xd4>
    3006:	2102      	movs	r1, #2
    3008:	7001      	strb	r1, [r0, #0]
    300a:	7840      	ldrb	r0, [r0, #1]
    300c:	f000 fafe 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3010:	4c2f      	ldr	r4, [pc, #188]	; (30d0 <MPSL_IRQ_TIMER0_Handler+0xec>)
    3012:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3016:	f04f 0800 	mov.w	r8, #0
    301a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    301e:	f44f 7780 	mov.w	r7, #256	; 0x100
    3022:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    3026:	d00a      	beq.n	303e <MPSL_IRQ_TIMER0_Handler+0x5a>
    3028:	482a      	ldr	r0, [pc, #168]	; (30d4 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    302a:	6800      	ldr	r0, [r0, #0]
    302c:	b138      	cbz	r0, 303e <MPSL_IRQ_TIMER0_Handler+0x5a>
    302e:	2003      	movs	r0, #3
    3030:	f000 faec 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3034:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3038:	2003      	movs	r0, #3
    303a:	f7fe fe35 	bl	1ca8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    303e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3042:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3046:	d00a      	beq.n	305e <MPSL_IRQ_TIMER0_Handler+0x7a>
    3048:	4823      	ldr	r0, [pc, #140]	; (30d8 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    304a:	6800      	ldr	r0, [r0, #0]
    304c:	b138      	cbz	r0, 305e <MPSL_IRQ_TIMER0_Handler+0x7a>
    304e:	2002      	movs	r0, #2
    3050:	f000 fadc 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3054:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3058:	2002      	movs	r0, #2
    305a:	f7fe fe25 	bl	1ca8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    305e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3062:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3066:	d00a      	beq.n	307e <MPSL_IRQ_TIMER0_Handler+0x9a>
    3068:	481c      	ldr	r0, [pc, #112]	; (30dc <MPSL_IRQ_TIMER0_Handler+0xf8>)
    306a:	6800      	ldr	r0, [r0, #0]
    306c:	b138      	cbz	r0, 307e <MPSL_IRQ_TIMER0_Handler+0x9a>
    306e:	2001      	movs	r0, #1
    3070:	f000 facc 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3074:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3078:	2001      	movs	r0, #1
    307a:	f7fe fe15 	bl	1ca8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    307e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3082:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3086:	bf08      	it	eq
    3088:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    308c:	4814      	ldr	r0, [pc, #80]	; (30e0 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    308e:	6800      	ldr	r0, [r0, #0]
    3090:	2800      	cmp	r0, #0
    3092:	bf08      	it	eq
    3094:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3098:	2000      	movs	r0, #0
    309a:	f000 fab7 	bl	360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    309e:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30a2:	2004      	movs	r0, #4
    30a4:	7028      	strb	r0, [r5, #0]
    30a6:	f8c5 8004 	str.w	r8, [r5, #4]
    30aa:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    30ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    30b2:	2000      	movs	r0, #0
    30b4:	f7fe bdf8 	b.w	1ca8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30b8:	f240 419f 	movw	r1, #1183	; 0x49f
    30bc:	206c      	movs	r0, #108	; 0x6c
    30be:	f000 ff5d 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    30c6:	2007      	movs	r0, #7
    30c8:	f7fe bdee 	b.w	1ca8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30cc:	20000048 	.word	0x20000048
    30d0:	40008000 	.word	0x40008000
    30d4:	4000814c 	.word	0x4000814c
    30d8:	40008148 	.word	0x40008148
    30dc:	40008144 	.word	0x40008144
    30e0:	40008140 	.word	0x40008140
    30e4:	2201      	movs	r2, #1
    30e6:	0211      	lsls	r1, r2, #8
    30e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    30ec:	2000      	movs	r0, #0
    30ee:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    30f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    30f6:	f3bf 8f4f 	dsb	sy
    30fa:	f3bf 8f6f 	isb	sy
    30fe:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    3102:	490e      	ldr	r1, [pc, #56]	; (313c <MPSL_IRQ_TIMER0_Handler+0x158>)
    3104:	f841 2f04 	str.w	r2, [r1, #4]!
    3108:	1e43      	subs	r3, r0, #1
    310a:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    310e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3112:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    3116:	4b0a      	ldr	r3, [pc, #40]	; (3140 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3118:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    311c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3120:	1d1b      	adds	r3, r3, #4
    3122:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3126:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    312a:	1d1b      	adds	r3, r3, #4
    312c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3130:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3134:	60ca      	str	r2, [r1, #12]
    3136:	4903      	ldr	r1, [pc, #12]	; (3144 <MPSL_IRQ_TIMER0_Handler+0x160>)
    3138:	7048      	strb	r0, [r1, #1]
    313a:	4770      	bx	lr
    313c:	40008000 	.word	0x40008000
    3140:	40008004 	.word	0x40008004
    3144:	20000048 	.word	0x20000048

00003148 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3148:	4801      	ldr	r0, [pc, #4]	; (3150 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    314a:	6800      	ldr	r0, [r0, #0]
    314c:	4770      	bx	lr
    314e:	0000      	.short	0x0000
    3150:	4000b504 	.word	0x4000b504

00003154 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    3154:	b430      	push	{r4, r5}
    3156:	f3ef 8c10 	mrs	ip, PRIMASK
    315a:	b672      	cpsid	i
    315c:	2500      	movs	r5, #0
    315e:	4b0b      	ldr	r3, [pc, #44]	; (318c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    3160:	4a0b      	ldr	r2, [pc, #44]	; (3190 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    3162:	bf00      	nop
    3164:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    3168:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    316c:	b12c      	cbz	r4, 317a <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    316e:	68d1      	ldr	r1, [r2, #12]
    3170:	1c49      	adds	r1, r1, #1
    3172:	60d1      	str	r1, [r2, #12]
    3174:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    3178:	e7f4      	b.n	3164 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    317a:	68d2      	ldr	r2, [r2, #12]
    317c:	f1bc 0f00 	cmp.w	ip, #0
    3180:	d100      	bne.n	3184 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    3182:	b662      	cpsie	i
    3184:	e9c0 1200 	strd	r1, r2, [r0]
    3188:	bc30      	pop	{r4, r5}
    318a:	4770      	bx	lr
    318c:	4000b000 	.word	0x4000b000
    3190:	20000048 	.word	0x20000048

00003194 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3198:	4e46      	ldr	r6, [pc, #280]	; (32b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    319a:	4605      	mov	r5, r0
    319c:	1eb7      	subs	r7, r6, #2
    319e:	7833      	ldrb	r3, [r6, #0]
    31a0:	68b9      	ldr	r1, [r7, #8]
    31a2:	2b01      	cmp	r3, #1
    31a4:	bf04      	itt	eq
    31a6:	42a9      	cmpeq	r1, r5
    31a8:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31ac:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    31b0:	4a41      	ldr	r2, [pc, #260]	; (32b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    31b2:	6010      	str	r0, [r2, #0]
    31b4:	4a42      	ldr	r2, [pc, #264]	; (32c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    31b6:	4841      	ldr	r0, [pc, #260]	; (32bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    31b8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    31bc:	f102 0c04 	add.w	ip, r2, #4
    31c0:	f04f 0400 	mov.w	r4, #0
    31c4:	2b00      	cmp	r3, #0
    31c6:	d062      	beq.n	328e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    31c8:	483e      	ldr	r0, [pc, #248]	; (32c4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    31ca:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    31ce:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    31d2:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    31d6:	bf00      	nop
    31d8:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    31dc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    31e0:	f04f 0801 	mov.w	r8, #1
    31e4:	2800      	cmp	r0, #0
    31e6:	bf01      	itttt	eq
    31e8:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    31ec:	2800      	cmpeq	r0, #0
    31ee:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    31f2:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    31f6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    31fa:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    31fe:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3202:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3206:	4830      	ldr	r0, [pc, #192]	; (32c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3208:	f8d0 c000 	ldr.w	ip, [r0]
    320c:	eba5 0c0c 	sub.w	ip, r5, ip
    3210:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3214:	f1bc 0f02 	cmp.w	ip, #2
    3218:	d344      	bcc.n	32a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    321a:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    321e:	d841      	bhi.n	32a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3220:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3224:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3228:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    322c:	b12b      	cbz	r3, 323a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    322e:	6802      	ldr	r2, [r0, #0]
    3230:	1a8a      	subs	r2, r1, r2
    3232:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3236:	2a02      	cmp	r2, #2
    3238:	d3f9      	bcc.n	322e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    323a:	f8c7 8004 	str.w	r8, [r7, #4]
    323e:	703c      	strb	r4, [r7, #0]
    3240:	f7ff ff50 	bl	30e4 <MPSL_IRQ_TIMER0_Handler+0x100>
    3244:	4821      	ldr	r0, [pc, #132]	; (32cc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    3246:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    324a:	f364 0101 	bfi	r1, r4, #0, #2
    324e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    3252:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    3256:	2102      	movs	r1, #2
    3258:	f361 0201 	bfi	r2, r1, #0, #2
    325c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    3260:	2104      	movs	r1, #4
    3262:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    3266:	f8c0 800c 	str.w	r8, [r0, #12]
    326a:	6879      	ldr	r1, [r7, #4]
    326c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3270:	1580      	asrs	r0, r0, #22
    3272:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    3276:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    327a:	4915      	ldr	r1, [pc, #84]	; (32d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    327c:	05c0      	lsls	r0, r0, #23
    327e:	6008      	str	r0, [r1, #0]
    3280:	2004      	movs	r0, #4
    3282:	60bd      	str	r5, [r7, #8]
    3284:	7070      	strb	r0, [r6, #1]
    3286:	f886 8000 	strb.w	r8, [r6]
    328a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    328e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3292:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    3296:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    329a:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    329e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    32a2:	e799      	b.n	31d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    32a4:	2000      	movs	r0, #0
    32a6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    32aa:	f240 2193 	movw	r1, #659	; 0x293
    32ae:	206c      	movs	r0, #108	; 0x6c
    32b0:	f000 fe64 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32b4:	2000004a 	.word	0x2000004a
    32b8:	4001f508 	.word	0x4001f508
    32bc:	fffbfffd 	.word	0xfffbfffd
    32c0:	4000b000 	.word	0x4000b000
    32c4:	fffafffd 	.word	0xfffafffd
    32c8:	4000b504 	.word	0x4000b504
    32cc:	40008000 	.word	0x40008000
    32d0:	4001f504 	.word	0x4001f504

000032d4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    32d4:	b570      	push	{r4, r5, r6, lr}
    32d6:	4c2a      	ldr	r4, [pc, #168]	; (3380 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    32d8:	68a1      	ldr	r1, [r4, #8]
    32da:	4281      	cmp	r1, r0
    32dc:	bf14      	ite	ne
    32de:	2201      	movne	r2, #1
    32e0:	2200      	moveq	r2, #0
    32e2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 3384 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    32e6:	f89c 5000 	ldrb.w	r5, [ip]
    32ea:	2d02      	cmp	r5, #2
    32ec:	d002      	beq.n	32f4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    32ee:	2a00      	cmp	r2, #0
    32f0:	d034      	beq.n	335c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    32f2:	e002      	b.n	32fa <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    32f4:	2a00      	cmp	r2, #0
    32f6:	bf08      	it	eq
    32f8:	bd70      	popeq	{r4, r5, r6, pc}
    32fa:	7862      	ldrb	r2, [r4, #1]
    32fc:	b39a      	cbz	r2, 3366 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    32fe:	4b22      	ldr	r3, [pc, #136]	; (3388 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3304:	601a      	str	r2, [r3, #0]
    3306:	4b21      	ldr	r3, [pc, #132]	; (338c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    3308:	1392      	asrs	r2, r2, #14
    330a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    330e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    3312:	2200      	movs	r2, #0
    3314:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3318:	4a1d      	ldr	r2, [pc, #116]	; (3390 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    331a:	6816      	ldr	r6, [r2, #0]
    331c:	1b86      	subs	r6, r0, r6
    331e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    3322:	2e02      	cmp	r6, #2
    3324:	d324      	bcc.n	3370 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3326:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    332a:	d821      	bhi.n	3370 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    332c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3330:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3334:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3338:	b12d      	cbz	r5, 3346 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    333a:	6813      	ldr	r3, [r2, #0]
    333c:	1acb      	subs	r3, r1, r3
    333e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3342:	2b02      	cmp	r3, #2
    3344:	d3f9      	bcc.n	333a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    3346:	4b13      	ldr	r3, [pc, #76]	; (3394 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3348:	2102      	movs	r1, #2
    334a:	074a      	lsls	r2, r1, #29
    334c:	601a      	str	r2, [r3, #0]
    334e:	60a0      	str	r0, [r4, #8]
    3350:	2004      	movs	r0, #4
    3352:	f88c 0001 	strb.w	r0, [ip, #1]
    3356:	f88c 1000 	strb.w	r1, [ip]
    335a:	bd70      	pop	{r4, r5, r6, pc}
    335c:	f240 21a1 	movw	r1, #673	; 0x2a1
    3360:	206c      	movs	r0, #108	; 0x6c
    3362:	f000 fe0b 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3366:	f240 21a5 	movw	r1, #677	; 0x2a5
    336a:	206c      	movs	r0, #108	; 0x6c
    336c:	f000 fe06 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3370:	2000      	movs	r0, #0
    3372:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3376:	f240 21b1 	movw	r1, #689	; 0x2b1
    337a:	206c      	movs	r0, #108	; 0x6c
    337c:	f000 fdfe 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3380:	20000048 	.word	0x20000048
    3384:	2000004a 	.word	0x2000004a
    3388:	4001f508 	.word	0x4001f508
    338c:	4000b000 	.word	0x4000b000
    3390:	4000b504 	.word	0x4000b504
    3394:	4001f504 	.word	0x4001f504

00003398 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3398:	4801      	ldr	r0, [pc, #4]	; (33a0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    339a:	6880      	ldr	r0, [r0, #8]
    339c:	4770      	bx	lr
    339e:	0000      	.short	0x0000
    33a0:	20000048 	.word	0x20000048

000033a4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    33a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33a8:	4836      	ldr	r0, [pc, #216]	; (3484 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    33aa:	4a35      	ldr	r2, [pc, #212]	; (3480 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    33ac:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    33b0:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3488 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    33b4:	1d03      	adds	r3, r0, #4
    33b6:	2100      	movs	r1, #0
    33b8:	f89c 4000 	ldrb.w	r4, [ip]
    33bc:	b184      	cbz	r4, 33e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    33be:	4a33      	ldr	r2, [pc, #204]	; (348c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    33c0:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    33c4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    33c8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    33cc:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    33d0:	2301      	movs	r3, #1
    33d2:	2a00      	cmp	r2, #0
    33d4:	bf04      	itt	eq
    33d6:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    33da:	2800      	cmpeq	r0, #0
    33dc:	d111      	bne.n	3402 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    33de:	e00a      	b.n	33f6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    33e0:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    33e4:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    33e8:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    33ec:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    33f0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    33f4:	e7ea      	b.n	33cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    33f6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    33fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
    33fe:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3402:	2c02      	cmp	r4, #2
    3404:	d004      	beq.n	3410 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    3406:	f240 21bd 	movw	r1, #701	; 0x2bd
    340a:	206c      	movs	r0, #108	; 0x6c
    340c:	f000 fdb6 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3410:	4e1f      	ldr	r6, [pc, #124]	; (3490 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3412:	6830      	ldr	r0, [r6, #0]
    3414:	4c1f      	ldr	r4, [pc, #124]	; (3494 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3416:	1cc0      	adds	r0, r0, #3
    3418:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    341c:	68a2      	ldr	r2, [r4, #8]
    341e:	4d1e      	ldr	r5, [pc, #120]	; (3498 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    3420:	4290      	cmp	r0, r2
    3422:	d00b      	beq.n	343c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3424:	6837      	ldr	r7, [r6, #0]
    3426:	1bd7      	subs	r7, r2, r7
    3428:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    342c:	2f04      	cmp	r7, #4
    342e:	d305      	bcc.n	343c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3430:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    3434:	d802      	bhi.n	343c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3436:	f7ff fead 	bl	3194 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    343a:	e01b      	b.n	3474 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    343c:	6830      	ldr	r0, [r6, #0]
    343e:	1a10      	subs	r0, r2, r0
    3440:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3444:	2802      	cmp	r0, #2
    3446:	d313      	bcc.n	3470 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    3448:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    344c:	d810      	bhi.n	3470 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    344e:	4a13      	ldr	r2, [pc, #76]	; (349c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    3450:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3454:	6010      	str	r0, [r2, #0]
    3456:	6063      	str	r3, [r4, #4]
    3458:	7021      	strb	r1, [r4, #0]
    345a:	606b      	str	r3, [r5, #4]
    345c:	60eb      	str	r3, [r5, #12]
    345e:	0040      	lsls	r0, r0, #1
    3460:	1f11      	subs	r1, r2, #4
    3462:	6008      	str	r0, [r1, #0]
    3464:	2004      	movs	r0, #4
    3466:	f88c 0001 	strb.w	r0, [ip, #1]
    346a:	f88c 3000 	strb.w	r3, [ip]
    346e:	e001      	b.n	3474 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3470:	6063      	str	r3, [r4, #4]
    3472:	7021      	strb	r1, [r4, #0]
    3474:	6860      	ldr	r0, [r4, #4]
    3476:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    347a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    347e:	0000      	.short	0x0000
    3480:	fffbfffd 	.word	0xfffbfffd
    3484:	4000b000 	.word	0x4000b000
    3488:	2000004a 	.word	0x2000004a
    348c:	fffafffd 	.word	0xfffafffd
    3490:	4000b504 	.word	0x4000b504
    3494:	20000048 	.word	0x20000048
    3498:	40008000 	.word	0x40008000
    349c:	4001f508 	.word	0x4001f508

000034a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    34a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34a4:	4a54      	ldr	r2, [pc, #336]	; (35f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    34a6:	2500      	movs	r5, #0
    34a8:	2401      	movs	r4, #1
    34aa:	f892 c000 	ldrb.w	ip, [r2]
    34ae:	7853      	ldrb	r3, [r2, #1]
    34b0:	f44f 76a0 	mov.w	r6, #320	; 0x140
    34b4:	2807      	cmp	r0, #7
    34b6:	d27d      	bcs.n	35b4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    34b8:	e8df f000 	tbb	[pc, r0]
    34bc:	04040404 	.word	0x04040404
    34c0:	00585858 	.word	0x00585858
    34c4:	4a4d      	ldr	r2, [pc, #308]	; (35fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    34c6:	6897      	ldr	r7, [r2, #8]
    34c8:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    34cc:	bf04      	itt	eq
    34ce:	7852      	ldrbeq	r2, [r2, #1]
    34d0:	2a00      	cmpeq	r2, #0
    34d2:	d003      	beq.n	34dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    34d4:	f1bc 0f02 	cmp.w	ip, #2
    34d8:	d005      	beq.n	34e6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    34da:	e026      	b.n	352a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    34dc:	f240 314d 	movw	r1, #845	; 0x34d
    34e0:	206c      	movs	r0, #108	; 0x6c
    34e2:	f000 fd4b 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34e6:	1f1a      	subs	r2, r3, #4
    34e8:	b2d2      	uxtb	r2, r2
    34ea:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    34ee:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    34f2:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    34f6:	2200      	movs	r2, #0
    34f8:	f1bc 0f01 	cmp.w	ip, #1
    34fc:	d003      	beq.n	3506 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    34fe:	f1bc 0f02 	cmp.w	ip, #2
    3502:	d008      	beq.n	3516 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    3504:	e00e      	b.n	3524 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3506:	2b04      	cmp	r3, #4
    3508:	bf24      	itt	cs
    350a:	6837      	ldrcs	r7, [r6, #0]
    350c:	2f00      	cmpcs	r7, #0
    350e:	bf08      	it	eq
    3510:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    3514:	e006      	b.n	3524 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3516:	2b04      	cmp	r3, #4
    3518:	bf24      	itt	cs
    351a:	6837      	ldrcs	r7, [r6, #0]
    351c:	2f00      	cmpcs	r7, #0
    351e:	bf08      	it	eq
    3520:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    3524:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    3528:	d1e5      	bne.n	34f6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    352a:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3600 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    352e:	f100 0210 	add.w	r2, r0, #16
    3532:	fa04 f202 	lsl.w	r2, r4, r2
    3536:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    353a:	f04f 0340 	mov.w	r3, #64	; 0x40
    353e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3542:	b2db      	uxtb	r3, r3
    3544:	4463      	add	r3, ip
    3546:	601c      	str	r4, [r3, #0]
    3548:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    354c:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    3550:	eba1 0303 	sub.w	r3, r1, r3
    3554:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3558:	2b03      	cmp	r3, #3
    355a:	bf26      	itte	cs
    355c:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    3560:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    3564:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    3568:	d237      	bcs.n	35da <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    356a:	e03c      	b.n	35e6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    356c:	f1bc 0f00 	cmp.w	ip, #0
    3570:	d006      	beq.n	3580 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3572:	4283      	cmp	r3, r0
    3574:	d104      	bne.n	3580 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3576:	f240 316d 	movw	r1, #877	; 0x36d
    357a:	206c      	movs	r0, #108	; 0x6c
    357c:	f000 fcfe 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3580:	1f02      	subs	r2, r0, #4
    3582:	b2d3      	uxtb	r3, r2
    3584:	2b03      	cmp	r3, #3
    3586:	d304      	bcc.n	3592 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    3588:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    358c:	206c      	movs	r0, #108	; 0x6c
    358e:	f000 fcf5 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3592:	f8df c070 	ldr.w	ip, [pc, #112]	; 3604 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    3596:	f103 0210 	add.w	r2, r3, #16
    359a:	fa04 f202 	lsl.w	r2, r4, r2
    359e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    35a2:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    35a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    35aa:	f84c 5003 	str.w	r5, [ip, r3]
    35ae:	4b16      	ldr	r3, [pc, #88]	; (3608 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    35b0:	681b      	ldr	r3, [r3, #0]
    35b2:	e000      	b.n	35b6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    35b4:	e01a      	b.n	35ec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    35b6:	1f00      	subs	r0, r0, #4
    35b8:	1acb      	subs	r3, r1, r3
    35ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    35be:	b2c0      	uxtb	r0, r0
    35c0:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    35c4:	2b02      	cmp	r3, #2
    35c6:	d30b      	bcc.n	35e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    35c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    35cc:	d808      	bhi.n	35e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    35ce:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    35d2:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    35d6:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    35da:	2001      	movs	r0, #1
    35dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35e0:	2100      	movs	r1, #0
    35e2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    35e6:	2000      	movs	r0, #0
    35e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35ec:	f240 3171 	movw	r1, #881	; 0x371
    35f0:	206c      	movs	r0, #108	; 0x6c
    35f2:	f000 fcc3 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35f6:	0000      	.short	0x0000
    35f8:	2000004a 	.word	0x2000004a
    35fc:	20000048 	.word	0x20000048
    3600:	40008000 	.word	0x40008000
    3604:	4000b000 	.word	0x4000b000
    3608:	4000b504 	.word	0x4000b504

0000360c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    360c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3610:	2601      	movs	r6, #1
    3612:	2700      	movs	r7, #0
    3614:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3618:	2807      	cmp	r0, #7
    361a:	d251      	bcs.n	36c0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    361c:	e8df f000 	tbb	[pc, r0]
    3620:	04040404 	.word	0x04040404
    3624:	00191919 	.word	0x00191919
    3628:	f100 0110 	add.w	r1, r0, #16
    362c:	fa06 f201 	lsl.w	r2, r6, r1
    3630:	4926      	ldr	r1, [pc, #152]	; (36cc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3632:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3636:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    363a:	2200      	movs	r2, #0
    363c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3640:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    3644:	508f      	str	r7, [r1, r2]
    3646:	4922      	ldr	r1, [pc, #136]	; (36d0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3648:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    364c:	9000      	str	r0, [sp, #0]
    364e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3652:	4d20      	ldr	r5, [pc, #128]	; (36d4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3654:	1f01      	subs	r1, r0, #4
    3656:	b2cc      	uxtb	r4, r1
    3658:	7829      	ldrb	r1, [r5, #0]
    365a:	b179      	cbz	r1, 367c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    365c:	786a      	ldrb	r2, [r5, #1]
    365e:	4282      	cmp	r2, r0
    3660:	d10c      	bne.n	367c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3662:	4a1d      	ldr	r2, [pc, #116]	; (36d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3664:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3668:	6010      	str	r0, [r2, #0]
    366a:	2901      	cmp	r1, #1
    366c:	bf08      	it	eq
    366e:	f7ff fd39 	bleq	30e4 <MPSL_IRQ_TIMER0_Handler+0x100>
    3672:	702f      	strb	r7, [r5, #0]
    3674:	4919      	ldr	r1, [pc, #100]	; (36dc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3676:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    367a:	6088      	str	r0, [r1, #8]
    367c:	4918      	ldr	r1, [pc, #96]	; (36e0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    367e:	f104 0010 	add.w	r0, r4, #16
    3682:	fa06 f000 	lsl.w	r0, r6, r0
    3686:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    368a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    368e:	00a0      	lsls	r0, r4, #2
    3690:	4408      	add	r0, r1
    3692:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3696:	4a13      	ldr	r2, [pc, #76]	; (36e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3698:	6812      	ldr	r2, [r2, #0]
    369a:	1a80      	subs	r0, r0, r2
    369c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    36a0:	2802      	cmp	r0, #2
    36a2:	d307      	bcc.n	36b4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    36a4:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    36a8:	2000      	movs	r0, #0
    36aa:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    36ae:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    36b2:	500f      	str	r7, [r1, r0]
    36b4:	480c      	ldr	r0, [pc, #48]	; (36e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    36b6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    36ba:	9000      	str	r0, [sp, #0]
    36bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    36c0:	f240 31f5 	movw	r1, #1013	; 0x3f5
    36c4:	206c      	movs	r0, #108	; 0x6c
    36c6:	f000 fc59 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36ca:	0000      	.short	0x0000
    36cc:	40008000 	.word	0x40008000
    36d0:	40008140 	.word	0x40008140
    36d4:	2000004a 	.word	0x2000004a
    36d8:	4001f508 	.word	0x4001f508
    36dc:	20000048 	.word	0x20000048
    36e0:	4000b000 	.word	0x4000b000
    36e4:	4000b504 	.word	0x4000b504
    36e8:	4000b140 	.word	0x4000b140

000036ec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    36ec:	4825      	ldr	r0, [pc, #148]	; (3784 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    36ee:	4a24      	ldr	r2, [pc, #144]	; (3780 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    36f0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    36f4:	4924      	ldr	r1, [pc, #144]	; (3788 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    36f6:	1d03      	adds	r3, r0, #4
    36f8:	f891 c000 	ldrb.w	ip, [r1]
    36fc:	2100      	movs	r1, #0
    36fe:	f1bc 0f00 	cmp.w	ip, #0
    3702:	d010      	beq.n	3726 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    3704:	4a21      	ldr	r2, [pc, #132]	; (378c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    3706:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    370a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    370e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3712:	bf00      	nop
    3714:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3718:	2a00      	cmp	r2, #0
    371a:	bf04      	itt	eq
    371c:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3720:	2800      	cmpeq	r0, #0
    3722:	d111      	bne.n	3748 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    3724:	e00a      	b.n	373c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3726:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    372a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    372e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3732:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3736:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    373a:	e7eb      	b.n	3714 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    373c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3740:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3744:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3748:	4811      	ldr	r0, [pc, #68]	; (3790 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    374a:	f04f 32ff 	mov.w	r2, #4294967295
    374e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3752:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3756:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    375a:	f100 0204 	add.w	r2, r0, #4
    375e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3762:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3766:	f102 0204 	add.w	r2, r2, #4
    376a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    376e:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    3772:	f102 0204 	add.w	r2, r2, #4
    3776:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    377a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    377e:	4770      	bx	lr
    3780:	fffbfffd 	.word	0xfffbfffd
    3784:	4000b000 	.word	0x4000b000
    3788:	2000004a 	.word	0x2000004a
    378c:	fffafffd 	.word	0xfffafffd
    3790:	40008000 	.word	0x40008000

00003794 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    3794:	b510      	push	{r4, lr}
    3796:	2807      	cmp	r0, #7
    3798:	d20d      	bcs.n	37b6 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    379a:	e8df f000 	tbb	[pc, r0]
    379e:	0404      	.short	0x0404
    37a0:	06060404 	.word	0x06060404
    37a4:	0006      	.short	0x0006
    37a6:	4906      	ldr	r1, [pc, #24]	; (37c0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    37a8:	e002      	b.n	37b0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    37aa:	1f00      	subs	r0, r0, #4
    37ac:	4905      	ldr	r1, [pc, #20]	; (37c4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    37ae:	b2c0      	uxtb	r0, r0
    37b0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    37b4:	bd10      	pop	{r4, pc}
    37b6:	f240 3195 	movw	r1, #917	; 0x395
    37ba:	206c      	movs	r0, #108	; 0x6c
    37bc:	f000 fbde 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37c0:	40008140 	.word	0x40008140
    37c4:	4000b140 	.word	0x4000b140

000037c8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    37c8:	b510      	push	{r4, lr}
    37ca:	2807      	cmp	r0, #7
    37cc:	d20d      	bcs.n	37ea <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    37ce:	e8df f000 	tbb	[pc, r0]
    37d2:	0404      	.short	0x0404
    37d4:	06060404 	.word	0x06060404
    37d8:	0006      	.short	0x0006
    37da:	4906      	ldr	r1, [pc, #24]	; (37f4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    37dc:	e002      	b.n	37e4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    37de:	1f00      	subs	r0, r0, #4
    37e0:	4905      	ldr	r1, [pc, #20]	; (37f8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    37e2:	b2c0      	uxtb	r0, r0
    37e4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    37e8:	bd10      	pop	{r4, pc}
    37ea:	f240 3195 	movw	r1, #917	; 0x395
    37ee:	206c      	movs	r0, #108	; 0x6c
    37f0:	f000 fbc4 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37f4:	40008140 	.word	0x40008140
    37f8:	4000b140 	.word	0x4000b140

000037fc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    37fc:	b570      	push	{r4, r5, r6, lr}
    37fe:	481f      	ldr	r0, [pc, #124]	; (387c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    3800:	2400      	movs	r4, #0
    3802:	2104      	movs	r1, #4
    3804:	7004      	strb	r4, [r0, #0]
    3806:	1e80      	subs	r0, r0, #2
    3808:	7001      	strb	r1, [r0, #0]
    380a:	0589      	lsls	r1, r1, #22
    380c:	60c4      	str	r4, [r0, #12]
    380e:	6081      	str	r1, [r0, #8]
    3810:	f7ff fc68 	bl	30e4 <MPSL_IRQ_TIMER0_Handler+0x100>
    3814:	2501      	movs	r5, #1
    3816:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    381a:	02eb      	lsls	r3, r5, #11
    381c:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3820:	f3bf 8f4f 	dsb	sy
    3824:	f3bf 8f6f 	isb	sy
    3828:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    382c:	4814      	ldr	r0, [pc, #80]	; (3880 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    382e:	6045      	str	r5, [r0, #4]
    3830:	6085      	str	r5, [r0, #8]
    3832:	4914      	ldr	r1, [pc, #80]	; (3884 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    3834:	680a      	ldr	r2, [r1, #0]
    3836:	2a00      	cmp	r2, #0
    3838:	d1fc      	bne.n	3834 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    383a:	1e51      	subs	r1, r2, #1
    383c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3840:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3844:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3848:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    384c:	490e      	ldr	r1, [pc, #56]	; (3888 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    384e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3852:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3856:	1d09      	adds	r1, r1, #4
    3858:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    385c:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3860:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    3864:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3868:	6005      	str	r5, [r0, #0]
    386a:	f44f 7182 	mov.w	r1, #260	; 0x104
    386e:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    3872:	2102      	movs	r1, #2
    3874:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    3878:	bd70      	pop	{r4, r5, r6, pc}
    387a:	0000      	.short	0x0000
    387c:	2000004a 	.word	0x2000004a
    3880:	4000b000 	.word	0x4000b000
    3884:	4000b504 	.word	0x4000b504
    3888:	4000b004 	.word	0x4000b004

0000388c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    388c:	4808      	ldr	r0, [pc, #32]	; (38b0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    388e:	f990 0000 	ldrsb.w	r0, [r0]
    3892:	2800      	cmp	r0, #0
    3894:	bfb8      	it	lt
    3896:	4770      	bxlt	lr
    3898:	f000 011f 	and.w	r1, r0, #31
    389c:	2201      	movs	r2, #1
    389e:	fa02 f101 	lsl.w	r1, r2, r1
    38a2:	0940      	lsrs	r0, r0, #5
    38a4:	0080      	lsls	r0, r0, #2
    38a6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    38aa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    38ae:	4770      	bx	lr
    38b0:	20000314 	.word	0x20000314

000038b4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    38b4:	4803      	ldr	r0, [pc, #12]	; (38c4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    38b6:	7800      	ldrb	r0, [r0, #0]
    38b8:	2803      	cmp	r0, #3
    38ba:	bf0c      	ite	eq
    38bc:	2001      	moveq	r0, #1
    38be:	2000      	movne	r0, #0
    38c0:	4770      	bx	lr
    38c2:	0000      	.short	0x0000
    38c4:	20000300 	.word	0x20000300

000038c8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    38c8:	4801      	ldr	r0, [pc, #4]	; (38d0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    38ca:	8840      	ldrh	r0, [r0, #2]
    38cc:	4770      	bx	lr
    38ce:	0000      	.short	0x0000
    38d0:	20000300 	.word	0x20000300

000038d4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    38d4:	4803      	ldr	r0, [pc, #12]	; (38e4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    38d6:	7800      	ldrb	r0, [r0, #0]
    38d8:	2802      	cmp	r0, #2
    38da:	bf16      	itet	ne
    38dc:	2803      	cmpne	r0, #3
    38de:	2001      	moveq	r0, #1
    38e0:	2000      	movne	r0, #0
    38e2:	4770      	bx	lr
    38e4:	20000300 	.word	0x20000300

000038e8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    38e8:	4802      	ldr	r0, [pc, #8]	; (38f4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    38ea:	2100      	movs	r1, #0
    38ec:	7001      	strb	r1, [r0, #0]
    38ee:	8041      	strh	r1, [r0, #2]
    38f0:	4770      	bx	lr
    38f2:	0000      	.short	0x0000
    38f4:	20000300 	.word	0x20000300

000038f8 <MPSL_IRQ_CLOCK_Handler>:
    38f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38fc:	4c16      	ldr	r4, [pc, #88]	; (3958 <MPSL_IRQ_CLOCK_Handler+0x60>)
    38fe:	7a60      	ldrb	r0, [r4, #9]
    3900:	2800      	cmp	r0, #0
    3902:	d027      	beq.n	3954 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3904:	f44f 7180 	mov.w	r1, #256	; 0x100
    3908:	058d      	lsls	r5, r1, #22
    390a:	4628      	mov	r0, r5
    390c:	f009 fd78 	bl	d400 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3910:	4680      	mov	r8, r0
    3912:	f44f 7182 	mov.w	r1, #260	; 0x104
    3916:	4628      	mov	r0, r5
    3918:	f009 fd72 	bl	d400 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    391c:	2600      	movs	r6, #0
    391e:	4607      	mov	r7, r0
    3920:	f1b8 0f00 	cmp.w	r8, #0
    3924:	d009      	beq.n	393a <MPSL_IRQ_CLOCK_Handler+0x42>
    3926:	2001      	movs	r0, #1
    3928:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    392c:	7920      	ldrb	r0, [r4, #4]
    392e:	b120      	cbz	r0, 393a <MPSL_IRQ_CLOCK_Handler+0x42>
    3930:	7126      	strb	r6, [r4, #4]
    3932:	69e0      	ldr	r0, [r4, #28]
    3934:	b108      	cbz	r0, 393a <MPSL_IRQ_CLOCK_Handler+0x42>
    3936:	4780      	blx	r0
    3938:	61e6      	str	r6, [r4, #28]
    393a:	b137      	cbz	r7, 394a <MPSL_IRQ_CLOCK_Handler+0x52>
    393c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3940:	2002      	movs	r0, #2
    3942:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3946:	f000 fa4d 	bl	3de4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    394a:	4640      	mov	r0, r8
    394c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3950:	f000 b858 	b.w	3a04 <MPSL_IRQ_CLOCK_Handler+0x10c>
    3954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3958:	20000058 	.word	0x20000058
    395c:	b510      	push	{r4, lr}
    395e:	f009 fdf9 	bl	d554 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3962:	b930      	cbnz	r0, 3972 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3964:	f009 fe17 	bl	d596 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3968:	b918      	cbnz	r0, 3972 <MPSL_IRQ_CLOCK_Handler+0x7a>
    396a:	f009 fe4a 	bl	d602 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    396e:	2800      	cmp	r0, #0
    3970:	d002      	beq.n	3978 <MPSL_IRQ_CLOCK_Handler+0x80>
    3972:	4902      	ldr	r1, [pc, #8]	; (397c <MPSL_IRQ_CLOCK_Handler+0x84>)
    3974:	2002      	movs	r0, #2
    3976:	6008      	str	r0, [r1, #0]
    3978:	bd10      	pop	{r4, pc}
    397a:	0000      	.short	0x0000
    397c:	40000c34 	.word	0x40000c34
    3980:	b570      	push	{r4, r5, r6, lr}
    3982:	f000 f991 	bl	3ca8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3986:	f000 fa81 	bl	3e8c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    398a:	4c09      	ldr	r4, [pc, #36]	; (39b0 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    398c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3990:	b130      	cbz	r0, 39a0 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3992:	f7ff ffe3 	bl	395c <MPSL_IRQ_CLOCK_Handler+0x64>
    3996:	2001      	movs	r0, #1
    3998:	6128      	str	r0, [r5, #16]
    399a:	2004      	movs	r0, #4
    399c:	72a0      	strb	r0, [r4, #10]
    399e:	e004      	b.n	39aa <MPSL_IRQ_CLOCK_Handler+0xb2>
    39a0:	2003      	movs	r0, #3
    39a2:	72a0      	strb	r0, [r4, #10]
    39a4:	2001      	movs	r0, #1
    39a6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    39aa:	2000      	movs	r0, #0
    39ac:	71e0      	strb	r0, [r4, #7]
    39ae:	bd70      	pop	{r4, r5, r6, pc}
    39b0:	20000058 	.word	0x20000058
    39b4:	b570      	push	{r4, r5, r6, lr}
    39b6:	4c12      	ldr	r4, [pc, #72]	; (3a00 <MPSL_IRQ_CLOCK_Handler+0x108>)
    39b8:	79a0      	ldrb	r0, [r4, #6]
    39ba:	b1e0      	cbz	r0, 39f6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    39bc:	79e1      	ldrb	r1, [r4, #7]
    39be:	1e40      	subs	r0, r0, #1
    39c0:	4281      	cmp	r1, r0
    39c2:	da18      	bge.n	39f6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    39c4:	f000 fa62 	bl	3e8c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    39c8:	4605      	mov	r5, r0
    39ca:	f000 fb4b 	bl	4064 <mpsl_temperature_get>
    39ce:	79a1      	ldrb	r1, [r4, #6]
    39d0:	2901      	cmp	r1, #1
    39d2:	d902      	bls.n	39da <MPSL_IRQ_CLOCK_Handler+0xe2>
    39d4:	79e1      	ldrb	r1, [r4, #7]
    39d6:	1c49      	adds	r1, r1, #1
    39d8:	71e1      	strb	r1, [r4, #7]
    39da:	b10d      	cbz	r5, 39e0 <MPSL_IRQ_CLOCK_Handler+0xe8>
    39dc:	6961      	ldr	r1, [r4, #20]
    39de:	e000      	b.n	39e2 <MPSL_IRQ_CLOCK_Handler+0xea>
    39e0:	6921      	ldr	r1, [r4, #16]
    39e2:	1a41      	subs	r1, r0, r1
    39e4:	2902      	cmp	r1, #2
    39e6:	da02      	bge.n	39ee <MPSL_IRQ_CLOCK_Handler+0xf6>
    39e8:	f111 0f02 	cmn.w	r1, #2
    39ec:	dc07      	bgt.n	39fe <MPSL_IRQ_CLOCK_Handler+0x106>
    39ee:	b10d      	cbz	r5, 39f4 <MPSL_IRQ_CLOCK_Handler+0xfc>
    39f0:	6160      	str	r0, [r4, #20]
    39f2:	e000      	b.n	39f6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    39f4:	6120      	str	r0, [r4, #16]
    39f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    39fa:	f7ff bfc1 	b.w	3980 <MPSL_IRQ_CLOCK_Handler+0x88>
    39fe:	bd70      	pop	{r4, r5, r6, pc}
    3a00:	20000058 	.word	0x20000058
    3a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a08:	4606      	mov	r6, r0
    3a0a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3a0e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3a12:	4628      	mov	r0, r5
    3a14:	f009 fcf4 	bl	d400 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a18:	4680      	mov	r8, r0
    3a1a:	f44f 7188 	mov.w	r1, #272	; 0x110
    3a1e:	4628      	mov	r0, r5
    3a20:	f009 fcee 	bl	d400 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a24:	4c27      	ldr	r4, [pc, #156]	; (3ac4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3a26:	4682      	mov	sl, r0
    3a28:	7827      	ldrb	r7, [r4, #0]
    3a2a:	f104 0008 	add.w	r0, r4, #8
    3a2e:	f009 fd5b 	bl	d4e8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3a32:	b110      	cbz	r0, 3a3a <MPSL_IRQ_CLOCK_Handler+0x142>
    3a34:	f240 11b9 	movw	r1, #441	; 0x1b9
    3a38:	e016      	b.n	3a68 <MPSL_IRQ_CLOCK_Handler+0x170>
    3a3a:	f04f 0901 	mov.w	r9, #1
    3a3e:	b146      	cbz	r6, 3a52 <MPSL_IRQ_CLOCK_Handler+0x15a>
    3a40:	7aa0      	ldrb	r0, [r4, #10]
    3a42:	2803      	cmp	r0, #3
    3a44:	d105      	bne.n	3a52 <MPSL_IRQ_CLOCK_Handler+0x15a>
    3a46:	2004      	movs	r0, #4
    3a48:	72a0      	strb	r0, [r4, #10]
    3a4a:	f7ff ff87 	bl	395c <MPSL_IRQ_CLOCK_Handler+0x64>
    3a4e:	f8c5 9010 	str.w	r9, [r5, #16]
    3a52:	2600      	movs	r6, #0
    3a54:	f1b8 0f00 	cmp.w	r8, #0
    3a58:	d018      	beq.n	3a8c <MPSL_IRQ_CLOCK_Handler+0x194>
    3a5a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3a5e:	7aa0      	ldrb	r0, [r4, #10]
    3a60:	2804      	cmp	r0, #4
    3a62:	d004      	beq.n	3a6e <MPSL_IRQ_CLOCK_Handler+0x176>
    3a64:	f240 11cb 	movw	r1, #459	; 0x1cb
    3a68:	206d      	movs	r0, #109	; 0x6d
    3a6a:	f000 fa87 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a6e:	f009 fd71 	bl	d554 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3a72:	b928      	cbnz	r0, 3a80 <MPSL_IRQ_CLOCK_Handler+0x188>
    3a74:	f009 fd8f 	bl	d596 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a78:	b910      	cbnz	r0, 3a80 <MPSL_IRQ_CLOCK_Handler+0x188>
    3a7a:	f009 fdc2 	bl	d602 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3a7e:	b108      	cbz	r0, 3a84 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3a80:	4811      	ldr	r0, [pc, #68]	; (3ac8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3a82:	6006      	str	r6, [r0, #0]
    3a84:	2002      	movs	r0, #2
    3a86:	72a0      	strb	r0, [r4, #10]
    3a88:	f000 f8f2 	bl	3c70 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3a8c:	f1ba 0f00 	cmp.w	sl, #0
    3a90:	d008      	beq.n	3aa4 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3a92:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3a96:	7aa0      	ldrb	r0, [r4, #10]
    3a98:	2802      	cmp	r0, #2
    3a9a:	d101      	bne.n	3aa0 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    3a9c:	f7ff ff8a 	bl	39b4 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3aa0:	f8c5 9014 	str.w	r9, [r5, #20]
    3aa4:	b13f      	cbz	r7, 3ab6 <MPSL_IRQ_CLOCK_Handler+0x1be>
    3aa6:	7026      	strb	r6, [r4, #0]
    3aa8:	7aa0      	ldrb	r0, [r4, #10]
    3aaa:	2802      	cmp	r0, #2
    3aac:	d101      	bne.n	3ab2 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    3aae:	f7ff ff67 	bl	3980 <MPSL_IRQ_CLOCK_Handler+0x88>
    3ab2:	f000 f8dd 	bl	3c70 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3ab6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3aba:	4802      	ldr	r0, [pc, #8]	; (3ac4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3abc:	3008      	adds	r0, #8
    3abe:	f009 bd2a 	b.w	d516 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3ac2:	0000      	.short	0x0000
    3ac4:	20000058 	.word	0x20000058
    3ac8:	40000c34 	.word	0x40000c34
    3acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ad0:	4c5f      	ldr	r4, [pc, #380]	; (3c50 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3ad2:	2700      	movs	r7, #0
    3ad4:	4606      	mov	r6, r0
    3ad6:	61a7      	str	r7, [r4, #24]
    3ad8:	7842      	ldrb	r2, [r0, #1]
    3ada:	7881      	ldrb	r1, [r0, #2]
    3adc:	7800      	ldrb	r0, [r0, #0]
    3ade:	72e0      	strb	r0, [r4, #11]
    3ae0:	7162      	strb	r2, [r4, #5]
    3ae2:	71a1      	strb	r1, [r4, #6]
    3ae4:	71e7      	strb	r7, [r4, #7]
    3ae6:	f04f 0801 	mov.w	r8, #1
    3aea:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3aee:	2805      	cmp	r0, #5
    3af0:	d225      	bcs.n	3b3e <MPSL_IRQ_CLOCK_Handler+0x246>
    3af2:	e8df f000 	tbb	[pc, r0]
    3af6:	0310      	.short	0x0310
    3af8:	00222006 	.word	0x00222006
    3afc:	f8c4 8018 	str.w	r8, [r4, #24]
    3b00:	e009      	b.n	3b16 <MPSL_IRQ_CLOCK_Handler+0x21e>
    3b02:	f000 f8d1 	bl	3ca8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3b06:	2101      	movs	r1, #1
    3b08:	4628      	mov	r0, r5
    3b0a:	f009 fc7e 	bl	d40a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3b0e:	2800      	cmp	r0, #0
    3b10:	d0f9      	beq.n	3b06 <MPSL_IRQ_CLOCK_Handler+0x20e>
    3b12:	2002      	movs	r0, #2
    3b14:	61a0      	str	r0, [r4, #24]
    3b16:	f009 fca4 	bl	d462 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3b1a:	b1b0      	cbz	r0, 3b4a <MPSL_IRQ_CLOCK_Handler+0x252>
    3b1c:	f000 f9d0 	bl	3ec0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3b20:	7e21      	ldrb	r1, [r4, #24]
    3b22:	f001 0103 	and.w	r1, r1, #3
    3b26:	4288      	cmp	r0, r1
    3b28:	d10f      	bne.n	3b4a <MPSL_IRQ_CLOCK_Handler+0x252>
    3b2a:	79b0      	ldrb	r0, [r6, #6]
    3b2c:	b150      	cbz	r0, 3b44 <MPSL_IRQ_CLOCK_Handler+0x24c>
    3b2e:	2002      	movs	r0, #2
    3b30:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3b34:	e070      	b.n	3c18 <MPSL_IRQ_CLOCK_Handler+0x320>
    3b36:	4847      	ldr	r0, [pc, #284]	; (3c54 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3b38:	e7ec      	b.n	3b14 <MPSL_IRQ_CLOCK_Handler+0x21c>
    3b3a:	4847      	ldr	r0, [pc, #284]	; (3c58 <MPSL_IRQ_CLOCK_Handler+0x360>)
    3b3c:	e7ea      	b.n	3b14 <MPSL_IRQ_CLOCK_Handler+0x21c>
    3b3e:	f240 313a 	movw	r1, #826	; 0x33a
    3b42:	e04d      	b.n	3be0 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    3b44:	f000 f990 	bl	3e68 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3b48:	e066      	b.n	3c18 <MPSL_IRQ_CLOCK_Handler+0x320>
    3b4a:	f8c5 800c 	str.w	r8, [r5, #12]
    3b4e:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3b52:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3b56:	69a0      	ldr	r0, [r4, #24]
    3b58:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3b5c:	f009 fce6 	bl	d52c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b60:	b940      	cbnz	r0, 3b74 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3b62:	f009 fced 	bl	d540 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b66:	b928      	cbnz	r0, 3b74 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3b68:	f009 fd01 	bl	d56e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b6c:	b910      	cbnz	r0, 3b74 <MPSL_IRQ_CLOCK_Handler+0x27c>
    3b6e:	f009 fd12 	bl	d596 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b72:	b138      	cbz	r0, 3b84 <MPSL_IRQ_CLOCK_Handler+0x28c>
    3b74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3b78:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    3b7c:	4937      	ldr	r1, [pc, #220]	; (3c5c <MPSL_IRQ_CLOCK_Handler+0x364>)
    3b7e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    3b82:	6008      	str	r0, [r1, #0]
    3b84:	f009 fcd2 	bl	d52c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b88:	b940      	cbnz	r0, 3b9c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    3b8a:	f009 fcd9 	bl	d540 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b8e:	b928      	cbnz	r0, 3b9c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    3b90:	f009 fced 	bl	d56e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b94:	b910      	cbnz	r0, 3b9c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    3b96:	f009 fcfe 	bl	d596 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b9a:	b118      	cbz	r0, 3ba4 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    3b9c:	492f      	ldr	r1, [pc, #188]	; (3c5c <MPSL_IRQ_CLOCK_Handler+0x364>)
    3b9e:	3110      	adds	r1, #16
    3ba0:	f8c1 8000 	str.w	r8, [r1]
    3ba4:	f8c5 8008 	str.w	r8, [r5, #8]
    3ba8:	2002      	movs	r0, #2
    3baa:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3bae:	79b0      	ldrb	r0, [r6, #6]
    3bb0:	bb90      	cbnz	r0, 3c18 <MPSL_IRQ_CLOCK_Handler+0x320>
    3bb2:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3bb6:	f010 0f02 	tst.w	r0, #2
    3bba:	d00f      	beq.n	3bdc <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3bbc:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3c60 <MPSL_IRQ_CLOCK_Handler+0x368>
    3bc0:	f8d9 1000 	ldr.w	r1, [r9]
    3bc4:	43c9      	mvns	r1, r1
    3bc6:	f341 1100 	sbfx	r1, r1, #4, #1
    3bca:	f101 0801 	add.w	r8, r1, #1
    3bce:	f8d9 1000 	ldr.w	r1, [r9]
    3bd2:	f041 0110 	orr.w	r1, r1, #16
    3bd6:	f8c9 1000 	str.w	r1, [r9]
    3bda:	e007      	b.n	3bec <MPSL_IRQ_CLOCK_Handler+0x2f4>
    3bdc:	f240 21fb 	movw	r1, #763	; 0x2fb
    3be0:	206d      	movs	r0, #109	; 0x6d
    3be2:	f000 f9cb 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3be6:	bf00      	nop
    3be8:	f000 faf2 	bl	41d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3bec:	4651      	mov	r1, sl
    3bee:	4628      	mov	r0, r5
    3bf0:	f009 fc06 	bl	d400 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3bf4:	2800      	cmp	r0, #0
    3bf6:	d0f7      	beq.n	3be8 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3bf8:	f000 f936 	bl	3e68 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3bfc:	f1b8 0f00 	cmp.w	r8, #0
    3c00:	d105      	bne.n	3c0e <MPSL_IRQ_CLOCK_Handler+0x316>
    3c02:	f8d9 1000 	ldr.w	r1, [r9]
    3c06:	f021 0110 	bic.w	r1, r1, #16
    3c0a:	f8c9 1000 	str.w	r1, [r9]
    3c0e:	2002      	movs	r0, #2
    3c10:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3c14:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    3c18:	79a0      	ldrb	r0, [r4, #6]
    3c1a:	b170      	cbz	r0, 3c3a <MPSL_IRQ_CLOCK_Handler+0x342>
    3c1c:	7830      	ldrb	r0, [r6, #0]
    3c1e:	b960      	cbnz	r0, 3c3a <MPSL_IRQ_CLOCK_Handler+0x342>
    3c20:	f000 f934 	bl	3e8c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3c24:	4606      	mov	r6, r0
    3c26:	f000 fa1d 	bl	4064 <mpsl_temperature_get>
    3c2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3c2e:	b116      	cbz	r6, 3c36 <MPSL_IRQ_CLOCK_Handler+0x33e>
    3c30:	e9c4 1004 	strd	r1, r0, [r4, #16]
    3c34:	e001      	b.n	3c3a <MPSL_IRQ_CLOCK_Handler+0x342>
    3c36:	e9c4 0104 	strd	r0, r1, [r4, #16]
    3c3a:	2101      	movs	r1, #1
    3c3c:	4628      	mov	r0, r5
    3c3e:	f009 fbe4 	bl	d40a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3c42:	b108      	cbz	r0, 3c48 <MPSL_IRQ_CLOCK_Handler+0x350>
    3c44:	f000 f91c 	bl	3e80 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3c48:	72a7      	strb	r7, [r4, #10]
    3c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c4e:	0000      	.short	0x0000
    3c50:	20000058 	.word	0x20000058
    3c54:	00020001 	.word	0x00020001
    3c58:	00030001 	.word	0x00030001
    3c5c:	4000053c 	.word	0x4000053c
    3c60:	e000ed10 	.word	0xe000ed10

00003c64 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    3c64:	4801      	ldr	r0, [pc, #4]	; (3c6c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    3c66:	89c0      	ldrh	r0, [r0, #14]
    3c68:	4770      	bx	lr
    3c6a:	0000      	.short	0x0000
    3c6c:	20000058 	.word	0x20000058

00003c70 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3c70:	b510      	push	{r4, lr}
    3c72:	f3ef 8410 	mrs	r4, PRIMASK
    3c76:	b672      	cpsid	i
    3c78:	480a      	ldr	r0, [pc, #40]	; (3ca4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3c7a:	7841      	ldrb	r1, [r0, #1]
    3c7c:	b129      	cbz	r1, 3c8a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3c7e:	7841      	ldrb	r1, [r0, #1]
    3c80:	1e49      	subs	r1, r1, #1
    3c82:	7041      	strb	r1, [r0, #1]
    3c84:	7841      	ldrb	r1, [r0, #1]
    3c86:	b129      	cbz	r1, 3c94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3c88:	e008      	b.n	3c9c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c8a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    3c8e:	206d      	movs	r0, #109	; 0x6d
    3c90:	f000 f974 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c94:	7880      	ldrb	r0, [r0, #2]
    3c96:	b908      	cbnz	r0, 3c9c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c98:	f000 f906 	bl	3ea8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3c9c:	2c00      	cmp	r4, #0
    3c9e:	d100      	bne.n	3ca2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3ca0:	b662      	cpsie	i
    3ca2:	bd10      	pop	{r4, pc}
    3ca4:	20000058 	.word	0x20000058

00003ca8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3ca8:	b510      	push	{r4, lr}
    3caa:	f3ef 8410 	mrs	r4, PRIMASK
    3cae:	b672      	cpsid	i
    3cb0:	4806      	ldr	r0, [pc, #24]	; (3ccc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3cb2:	7841      	ldrb	r1, [r0, #1]
    3cb4:	1c49      	adds	r1, r1, #1
    3cb6:	7041      	strb	r1, [r0, #1]
    3cb8:	7840      	ldrb	r0, [r0, #1]
    3cba:	2801      	cmp	r0, #1
    3cbc:	d101      	bne.n	3cc2 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3cbe:	f009 fbbb 	bl	d438 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3cc2:	2c00      	cmp	r4, #0
    3cc4:	d100      	bne.n	3cc8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3cc6:	b662      	cpsie	i
    3cc8:	bd10      	pop	{r4, pc}
    3cca:	0000      	.short	0x0000
    3ccc:	20000058 	.word	0x20000058

00003cd0 <mpsl_clock_hfclk_release>:
    3cd0:	4805      	ldr	r0, [pc, #20]	; (3ce8 <mpsl_clock_hfclk_release+0x18>)
    3cd2:	b510      	push	{r4, lr}
    3cd4:	78c1      	ldrb	r1, [r0, #3]
    3cd6:	b121      	cbz	r1, 3ce2 <mpsl_clock_hfclk_release+0x12>
    3cd8:	2100      	movs	r1, #0
    3cda:	7101      	strb	r1, [r0, #4]
    3cdc:	70c1      	strb	r1, [r0, #3]
    3cde:	f7ff ffc7 	bl	3c70 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3ce2:	2000      	movs	r0, #0
    3ce4:	bd10      	pop	{r4, pc}
    3ce6:	0000      	.short	0x0000
    3ce8:	20000058 	.word	0x20000058

00003cec <mpsl_clock_hfclk_request>:
    3cec:	b570      	push	{r4, r5, r6, lr}
    3cee:	4c0c      	ldr	r4, [pc, #48]	; (3d20 <mpsl_clock_hfclk_request+0x34>)
    3cf0:	78e1      	ldrb	r1, [r4, #3]
    3cf2:	b961      	cbnz	r1, 3d0e <mpsl_clock_hfclk_request+0x22>
    3cf4:	2501      	movs	r5, #1
    3cf6:	70e5      	strb	r5, [r4, #3]
    3cf8:	61e0      	str	r0, [r4, #28]
    3cfa:	f7ff ffd5 	bl	3ca8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3cfe:	f000 f8c5 	bl	3e8c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3d02:	b130      	cbz	r0, 3d12 <mpsl_clock_hfclk_request+0x26>
    3d04:	69e0      	ldr	r0, [r4, #28]
    3d06:	b110      	cbz	r0, 3d0e <mpsl_clock_hfclk_request+0x22>
    3d08:	4780      	blx	r0
    3d0a:	2000      	movs	r0, #0
    3d0c:	61e0      	str	r0, [r4, #28]
    3d0e:	2000      	movs	r0, #0
    3d10:	bd70      	pop	{r4, r5, r6, pc}
    3d12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3d16:	7125      	strb	r5, [r4, #4]
    3d18:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3d1c:	e7f7      	b.n	3d0e <mpsl_clock_hfclk_request+0x22>
    3d1e:	0000      	.short	0x0000
    3d20:	20000058 	.word	0x20000058

00003d24 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d28:	0005      	movs	r5, r0
    3d2a:	f06f 0015 	mvn.w	r0, #21
    3d2e:	d03f      	beq.n	3db0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d30:	7829      	ldrb	r1, [r5, #0]
    3d32:	2904      	cmp	r1, #4
    3d34:	d83c      	bhi.n	3db0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d36:	2900      	cmp	r1, #0
    3d38:	7869      	ldrb	r1, [r5, #1]
    3d3a:	d03b      	beq.n	3db4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    3d3c:	2900      	cmp	r1, #0
    3d3e:	d137      	bne.n	3db0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d40:	78a9      	ldrb	r1, [r5, #2]
    3d42:	2900      	cmp	r1, #0
    3d44:	d134      	bne.n	3db0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3d46:	2000      	movs	r0, #0
    3d48:	f009 fb25 	bl	d396 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    3d4c:	2000      	movs	r0, #0
    3d4e:	f009 fb15 	bl	d37c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3d52:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3d56:	f04f 31ff 	mov.w	r1, #4294967295
    3d5a:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3d5e:	2600      	movs	r6, #0
    3d60:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3d64:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3d68:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3d6c:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3d70:	4c14      	ldr	r4, [pc, #80]	; (3dc4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3d72:	7066      	strb	r6, [r4, #1]
    3d74:	88a8      	ldrh	r0, [r5, #4]
    3d76:	81a0      	strh	r0, [r4, #12]
    3d78:	f009 fb55 	bl	d426 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3d7c:	2701      	movs	r7, #1
    3d7e:	b108      	cbz	r0, 3d84 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3d80:	70e7      	strb	r7, [r4, #3]
    3d82:	7067      	strb	r7, [r4, #1]
    3d84:	2101      	movs	r1, #1
    3d86:	4640      	mov	r0, r8
    3d88:	f009 fb3f 	bl	d40a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3d8c:	b108      	cbz	r0, 3d92 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3d8e:	f000 f877 	bl	3e80 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3d92:	f240 50f5 	movw	r0, #1525	; 0x5f5
    3d96:	81e0      	strh	r0, [r4, #14]
    3d98:	4628      	mov	r0, r5
    3d9a:	f7ff fe97 	bl	3acc <MPSL_IRQ_CLOCK_Handler+0x1d4>
    3d9e:	7267      	strb	r7, [r4, #9]
    3da0:	2000      	movs	r0, #0
    3da2:	f009 faeb 	bl	d37c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    3da6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3daa:	4630      	mov	r0, r6
    3dac:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    3db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3db4:	2900      	cmp	r1, #0
    3db6:	d0fb      	beq.n	3db0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3db8:	2920      	cmp	r1, #32
    3dba:	d8f9      	bhi.n	3db0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3dbc:	78a9      	ldrb	r1, [r5, #2]
    3dbe:	2921      	cmp	r1, #33	; 0x21
    3dc0:	d9c1      	bls.n	3d46 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3dc2:	e7f5      	b.n	3db0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    3dc4:	20000058 	.word	0x20000058

00003dc8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3dc8:	4801      	ldr	r0, [pc, #4]	; (3dd0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3dca:	8980      	ldrh	r0, [r0, #12]
    3dcc:	4770      	bx	lr
    3dce:	0000      	.short	0x0000
    3dd0:	20000058 	.word	0x20000058

00003dd4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3dd4:	4802      	ldr	r0, [pc, #8]	; (3de0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3dd6:	7a80      	ldrb	r0, [r0, #10]
    3dd8:	2800      	cmp	r0, #0
    3dda:	d000      	beq.n	3dde <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3ddc:	2001      	movs	r0, #1
    3dde:	4770      	bx	lr
    3de0:	20000058 	.word	0x20000058

00003de4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3de6:	4d1f      	ldr	r5, [pc, #124]	; (3e64 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3de8:	7ae8      	ldrb	r0, [r5, #11]
    3dea:	2800      	cmp	r0, #0
    3dec:	d10f      	bne.n	3e0e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3dee:	7e28      	ldrb	r0, [r5, #24]
    3df0:	f000 0003 	and.w	r0, r0, #3
    3df4:	f009 fb25 	bl	d442 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3df8:	2800      	cmp	r0, #0
    3dfa:	d008      	beq.n	3e0e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3dfc:	f3ef 8110 	mrs	r1, PRIMASK
    3e00:	b672      	cpsid	i
    3e02:	f7ff ffe7 	bl	3dd4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3e06:	b118      	cbz	r0, 3e10 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3e08:	2900      	cmp	r1, #0
    3e0a:	d100      	bne.n	3e0e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e0c:	b662      	cpsie	i
    3e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e10:	2601      	movs	r6, #1
    3e12:	72ae      	strb	r6, [r5, #10]
    3e14:	b901      	cbnz	r1, 3e18 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3e16:	b662      	cpsie	i
    3e18:	2018      	movs	r0, #24
    3e1a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3e1e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3e22:	61a6      	str	r6, [r4, #24]
    3e24:	f44f 7020 	mov.w	r0, #640	; 0x280
    3e28:	f8ad 0000 	strh.w	r0, [sp]
    3e2c:	f8bd 0000 	ldrh.w	r0, [sp]
    3e30:	1e41      	subs	r1, r0, #1
    3e32:	f8ad 1000 	strh.w	r1, [sp]
    3e36:	d2f9      	bcs.n	3e2c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3e38:	2700      	movs	r7, #0
    3e3a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3e3e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3e42:	4808      	ldr	r0, [pc, #32]	; (3e64 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3e44:	3008      	adds	r0, #8
    3e46:	f009 fb62 	bl	d50e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3e4a:	702f      	strb	r7, [r5, #0]
    3e4c:	f7ff fd98 	bl	3980 <MPSL_IRQ_CLOCK_Handler+0x88>
    3e50:	6166      	str	r6, [r4, #20]
    3e52:	7968      	ldrb	r0, [r5, #5]
    3e54:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3e58:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3e5c:	2018      	movs	r0, #24
    3e5e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e64:	20000058 	.word	0x20000058

00003e68 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3e68:	b510      	push	{r4, lr}
    3e6a:	4c04      	ldr	r4, [pc, #16]	; (3e7c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3e6c:	7e20      	ldrb	r0, [r4, #24]
    3e6e:	f000 0003 	and.w	r0, r0, #3
    3e72:	f009 fae6 	bl	d442 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3e76:	2800      	cmp	r0, #0
    3e78:	d0f8      	beq.n	3e6c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3e7a:	bd10      	pop	{r4, pc}
    3e7c:	20000058 	.word	0x20000058

00003e80 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3e80:	4901      	ldr	r1, [pc, #4]	; (3e88 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3e82:	2001      	movs	r0, #1
    3e84:	7008      	strb	r0, [r1, #0]
    3e86:	4770      	bx	lr
    3e88:	20000315 	.word	0x20000315

00003e8c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3e8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3e90:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3e94:	b918      	cbnz	r0, 3e9e <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3e96:	4803      	ldr	r0, [pc, #12]	; (3ea4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3e98:	7800      	ldrb	r0, [r0, #0]
    3e9a:	2800      	cmp	r0, #0
    3e9c:	d000      	beq.n	3ea0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3e9e:	2001      	movs	r0, #1
    3ea0:	4770      	bx	lr
    3ea2:	0000      	.short	0x0000
    3ea4:	20000315 	.word	0x20000315

00003ea8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3ea8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3eac:	2101      	movs	r1, #1
    3eae:	6041      	str	r1, [r0, #4]
    3eb0:	2100      	movs	r1, #0
    3eb2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3eb6:	4801      	ldr	r0, [pc, #4]	; (3ebc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3eb8:	7001      	strb	r1, [r0, #0]
    3eba:	4770      	bx	lr
    3ebc:	20000315 	.word	0x20000315

00003ec0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3ec0:	4802      	ldr	r0, [pc, #8]	; (3ecc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3ec2:	6800      	ldr	r0, [r0, #0]
    3ec4:	f000 0003 	and.w	r0, r0, #3
    3ec8:	4770      	bx	lr
    3eca:	0000      	.short	0x0000
    3ecc:	4000041c 	.word	0x4000041c
    3ed0:	b510      	push	{r4, lr}
    3ed2:	b131      	cbz	r1, 3ee2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3ed4:	2901      	cmp	r1, #1
    3ed6:	d007      	beq.n	3ee8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3ed8:	f240 3102 	movw	r1, #770	; 0x302
    3edc:	a005      	add	r0, pc, #20	; (adr r0, 3ef4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3ede:	f000 f821 	bl	3f24 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3ee2:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3ee6:	e001      	b.n	3eec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3ee8:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3eec:	f000 0001 	and.w	r0, r0, #1
    3ef0:	bd10      	pop	{r4, pc}
    3ef2:	0000      	.short	0x0000
    3ef4:	5f66726e 	.word	0x5f66726e
    3ef8:	636f6c63 	.word	0x636f6c63
    3efc:	00682e6b 	.word	0x00682e6b
    3f00:	f3bf 8f4f 	dsb	sy
    3f04:	4805      	ldr	r0, [pc, #20]	; (3f1c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3f06:	6801      	ldr	r1, [r0, #0]
    3f08:	4a05      	ldr	r2, [pc, #20]	; (3f20 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3f0a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3f0e:	4311      	orrs	r1, r2
    3f10:	6001      	str	r1, [r0, #0]
    3f12:	f3bf 8f4f 	dsb	sy
    3f16:	bf00      	nop
    3f18:	e7fd      	b.n	3f16 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3f1a:	0000      	.short	0x0000
    3f1c:	e000ed0c 	.word	0xe000ed0c
    3f20:	05fa0004 	.word	0x05fa0004

00003f24 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3f24:	b672      	cpsid	i
    3f26:	4a03      	ldr	r2, [pc, #12]	; (3f34 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3f28:	6852      	ldr	r2, [r2, #4]
    3f2a:	b102      	cbz	r2, 3f2e <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3f2c:	4790      	blx	r2
    3f2e:	f7ff ffe7 	bl	3f00 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3f32:	0000      	.short	0x0000
    3f34:	20000078 	.word	0x20000078
    3f38:	4806      	ldr	r0, [pc, #24]	; (3f54 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3f3a:	b510      	push	{r4, lr}
    3f3c:	2100      	movs	r1, #0
    3f3e:	6001      	str	r1, [r0, #0]
    3f40:	2101      	movs	r1, #1
    3f42:	6001      	str	r1, [r0, #0]
    3f44:	4608      	mov	r0, r1
    3f46:	f009 faa3 	bl	d490 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f4e:	2001      	movs	r0, #1
    3f50:	f009 ba91 	b.w	d476 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3f54:	40001ffc 	.word	0x40001ffc
    3f58:	4807      	ldr	r0, [pc, #28]	; (3f78 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    3f5a:	b510      	push	{r4, lr}
    3f5c:	2101      	movs	r1, #1
    3f5e:	6041      	str	r1, [r0, #4]
    3f60:	1e89      	subs	r1, r1, #2
    3f62:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3f66:	200c      	movs	r0, #12
    3f68:	f009 fa92 	bl	d490 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f70:	200c      	movs	r0, #12
    3f72:	f009 ba80 	b.w	d476 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3f76:	0000      	.short	0x0000
    3f78:	4000c000 	.word	0x4000c000

00003f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3f7c:	b50e      	push	{r1, r2, r3, lr}
    3f7e:	b672      	cpsid	i
    3f80:	4a0f      	ldr	r2, [pc, #60]	; (3fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3f82:	6855      	ldr	r5, [r2, #4]
    3f84:	b1d5      	cbz	r5, 3fbc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    3f86:	2200      	movs	r2, #0
    3f88:	4603      	mov	r3, r0
    3f8a:	466e      	mov	r6, sp
    3f8c:	240a      	movs	r4, #10
    3f8e:	e003      	b.n	3f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3f90:	fbb0 f0f4 	udiv	r0, r0, r4
    3f94:	1c52      	adds	r2, r2, #1
    3f96:	b2d2      	uxtb	r2, r2
    3f98:	2800      	cmp	r0, #0
    3f9a:	d1f9      	bne.n	3f90 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3f9c:	54b0      	strb	r0, [r6, r2]
    3f9e:	e009      	b.n	3fb4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3fa0:	fbb3 f0f4 	udiv	r0, r3, r4
    3fa4:	fb04 3010 	mls	r0, r4, r0, r3
    3fa8:	fbb3 f3f4 	udiv	r3, r3, r4
    3fac:	1e52      	subs	r2, r2, #1
    3fae:	b2d2      	uxtb	r2, r2
    3fb0:	3030      	adds	r0, #48	; 0x30
    3fb2:	54b0      	strb	r0, [r6, r2]
    3fb4:	2a00      	cmp	r2, #0
    3fb6:	d1f3      	bne.n	3fa0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3fb8:	4630      	mov	r0, r6
    3fba:	47a8      	blx	r5
    3fbc:	f7ff ffa0 	bl	3f00 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3fc0:	20000078 	.word	0x20000078

00003fc4 <mpsl_init>:
    3fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fc8:	4c18      	ldr	r4, [pc, #96]	; (402c <mpsl_init+0x68>)
    3fca:	4606      	mov	r6, r0
    3fcc:	4617      	mov	r7, r2
    3fce:	7860      	ldrb	r0, [r4, #1]
    3fd0:	460d      	mov	r5, r1
    3fd2:	b118      	cbz	r0, 3fdc <mpsl_init+0x18>
    3fd4:	f04f 30ff 	mov.w	r0, #4294967295
    3fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fdc:	f7fc fbe2 	bl	7a4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    3fe0:	b906      	cbnz	r6, 3fe4 <mpsl_init+0x20>
    3fe2:	4e13      	ldr	r6, [pc, #76]	; (4030 <mpsl_init+0x6c>)
    3fe4:	6067      	str	r7, [r4, #4]
    3fe6:	7025      	strb	r5, [r4, #0]
    3fe8:	f7ff ffa6 	bl	3f38 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    3fec:	f7ff ffb4 	bl	3f58 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    3ff0:	4630      	mov	r0, r6
    3ff2:	f7ff fe97 	bl	3d24 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3ff6:	0006      	movs	r6, r0
    3ff8:	d1ee      	bne.n	3fd8 <mpsl_init+0x14>
    3ffa:	f7fe feaf 	bl	2d5c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3ffe:	f7ff fef1 	bl	3de4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4002:	f009 f911 	bl	d228 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    4006:	4628      	mov	r0, r5
    4008:	f009 fa35 	bl	d476 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    400c:	2001      	movs	r0, #1
    400e:	2d00      	cmp	r5, #0
    4010:	db09      	blt.n	4026 <mpsl_init+0x62>
    4012:	f005 011f 	and.w	r1, r5, #31
    4016:	fa00 f101 	lsl.w	r1, r0, r1
    401a:	096a      	lsrs	r2, r5, #5
    401c:	0092      	lsls	r2, r2, #2
    401e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4022:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4026:	7060      	strb	r0, [r4, #1]
    4028:	4630      	mov	r0, r6
    402a:	e7d5      	b.n	3fd8 <mpsl_init+0x14>
    402c:	20000078 	.word	0x20000078
    4030:	0000d4b2 	.word	0x0000d4b2

00004034 <mpsl_is_initialized>:
    4034:	4801      	ldr	r0, [pc, #4]	; (403c <mpsl_is_initialized+0x8>)
    4036:	7840      	ldrb	r0, [r0, #1]
    4038:	4770      	bx	lr
    403a:	0000      	.short	0x0000
    403c:	20000078 	.word	0x20000078

00004040 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4040:	4807      	ldr	r0, [pc, #28]	; (4060 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    4042:	f990 0000 	ldrsb.w	r0, [r0]
    4046:	2800      	cmp	r0, #0
    4048:	db09      	blt.n	405e <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    404a:	f000 021f 	and.w	r2, r0, #31
    404e:	2101      	movs	r1, #1
    4050:	4091      	lsls	r1, r2
    4052:	0940      	lsrs	r0, r0, #5
    4054:	0080      	lsls	r0, r0, #2
    4056:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    405a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    405e:	4770      	bx	lr
    4060:	20000078 	.word	0x20000078

00004064 <mpsl_temperature_get>:
    4064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4068:	2601      	movs	r6, #1
    406a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    406e:	0331      	lsls	r1, r6, #12
    4070:	f04f 0800 	mov.w	r8, #0
    4074:	4640      	mov	r0, r8
    4076:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    407a:	f3bf 8f4f 	dsb	sy
    407e:	f3bf 8f6f 	isb	sy
    4082:	4c16      	ldr	r4, [pc, #88]	; (40dc <mpsl_temperature_get+0x78>)
    4084:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4088:	200c      	movs	r0, #12
    408a:	f009 fa20 	bl	d4ce <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    408e:	4d14      	ldr	r5, [pc, #80]	; (40e0 <mpsl_temperature_get+0x7c>)
    4090:	6828      	ldr	r0, [r5, #0]
    4092:	43c0      	mvns	r0, r0
    4094:	f340 1700 	sbfx	r7, r0, #4, #1
    4098:	6828      	ldr	r0, [r5, #0]
    409a:	f040 0010 	orr.w	r0, r0, #16
    409e:	6028      	str	r0, [r5, #0]
    40a0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    40a4:	6026      	str	r6, [r4, #0]
    40a6:	1c7f      	adds	r7, r7, #1
    40a8:	e002      	b.n	40b0 <mpsl_temperature_get+0x4c>
    40aa:	bf00      	nop
    40ac:	f000 f890 	bl	41d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    40b0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    40b4:	2800      	cmp	r0, #0
    40b6:	d0f9      	beq.n	40ac <mpsl_temperature_get+0x48>
    40b8:	b91f      	cbnz	r7, 40c2 <mpsl_temperature_get+0x5e>
    40ba:	6828      	ldr	r0, [r5, #0]
    40bc:	f020 0010 	bic.w	r0, r0, #16
    40c0:	6028      	str	r0, [r5, #0]
    40c2:	4808      	ldr	r0, [pc, #32]	; (40e4 <mpsl_temperature_get+0x80>)
    40c4:	6805      	ldr	r5, [r0, #0]
    40c6:	6066      	str	r6, [r4, #4]
    40c8:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    40cc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    40d0:	200c      	movs	r0, #12
    40d2:	f009 f9fc 	bl	d4ce <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    40d6:	4628      	mov	r0, r5
    40d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40dc:	4000c000 	.word	0x4000c000
    40e0:	e000ed10 	.word	0xe000ed10
    40e4:	4000c508 	.word	0x4000c508

000040e8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    40e8:	b510      	push	{r4, lr}
    40ea:	4602      	mov	r2, r0
    40ec:	2005      	movs	r0, #5
    40ee:	490c      	ldr	r1, [pc, #48]	; (4120 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    40f0:	e004      	b.n	40fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    40f2:	bf00      	nop
    40f4:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    40f8:	791b      	ldrb	r3, [r3, #4]
    40fa:	b133      	cbz	r3, 410a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    40fc:	1e40      	subs	r0, r0, #1
    40fe:	b2c0      	uxtb	r0, r0
    4100:	d2f8      	bcs.n	40f4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4102:	2148      	movs	r1, #72	; 0x48
    4104:	2069      	movs	r0, #105	; 0x69
    4106:	f7ff ff39 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    410a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    410e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4112:	2200      	movs	r2, #0
    4114:	714a      	strb	r2, [r1, #5]
    4116:	718a      	strb	r2, [r1, #6]
    4118:	2201      	movs	r2, #1
    411a:	710a      	strb	r2, [r1, #4]
    411c:	bd10      	pop	{r4, pc}
    411e:	0000      	.short	0x0000
    4120:	200010c4 	.word	0x200010c4

00004124 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4124:	b510      	push	{r4, lr}
    4126:	2805      	cmp	r0, #5
    4128:	d301      	bcc.n	412e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    412a:	2158      	movs	r1, #88	; 0x58
    412c:	e006      	b.n	413c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    412e:	490a      	ldr	r1, [pc, #40]	; (4158 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4130:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4134:	7901      	ldrb	r1, [r0, #4]
    4136:	2901      	cmp	r1, #1
    4138:	d003      	beq.n	4142 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    413a:	2159      	movs	r1, #89	; 0x59
    413c:	2069      	movs	r0, #105	; 0x69
    413e:	f7ff ff1d 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4142:	7941      	ldrb	r1, [r0, #5]
    4144:	7982      	ldrb	r2, [r0, #6]
    4146:	1c49      	adds	r1, r1, #1
    4148:	b2c9      	uxtb	r1, r1
    414a:	428a      	cmp	r2, r1
    414c:	d000      	beq.n	4150 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    414e:	7141      	strb	r1, [r0, #5]
    4150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4154:	f7ff bf74 	b.w	4040 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4158:	200010c4 	.word	0x200010c4

0000415c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    415c:	b570      	push	{r4, r5, r6, lr}
    415e:	2505      	movs	r5, #5
    4160:	4e0e      	ldr	r6, [pc, #56]	; (419c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4162:	4c0f      	ldr	r4, [pc, #60]	; (41a0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4164:	e016      	b.n	4194 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4166:	7821      	ldrb	r1, [r4, #0]
    4168:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    416c:	7902      	ldrb	r2, [r0, #4]
    416e:	2a01      	cmp	r2, #1
    4170:	d108      	bne.n	4184 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4172:	7942      	ldrb	r2, [r0, #5]
    4174:	7983      	ldrb	r3, [r0, #6]
    4176:	429a      	cmp	r2, r3
    4178:	d004      	beq.n	4184 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    417a:	7942      	ldrb	r2, [r0, #5]
    417c:	7182      	strb	r2, [r0, #6]
    417e:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    4182:	4780      	blx	r0
    4184:	7820      	ldrb	r0, [r4, #0]
    4186:	1c40      	adds	r0, r0, #1
    4188:	b2c0      	uxtb	r0, r0
    418a:	7020      	strb	r0, [r4, #0]
    418c:	2805      	cmp	r0, #5
    418e:	d301      	bcc.n	4194 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4190:	2000      	movs	r0, #0
    4192:	7020      	strb	r0, [r4, #0]
    4194:	1e6d      	subs	r5, r5, #1
    4196:	b2ed      	uxtb	r5, r5
    4198:	d2e5      	bcs.n	4166 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    419a:	bd70      	pop	{r4, r5, r6, pc}
    419c:	200010c4 	.word	0x200010c4
    41a0:	20000316 	.word	0x20000316

000041a4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    41a4:	b500      	push	{lr}
    41a6:	f009 f9c1 	bl	d52c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    41aa:	b940      	cbnz	r0, 41be <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41ac:	f009 f9c8 	bl	d540 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    41b0:	b928      	cbnz	r0, 41be <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41b2:	f009 f9dc 	bl	d56e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    41b6:	b910      	cbnz	r0, 41be <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41b8:	f009 f9ed 	bl	d596 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41bc:	b108      	cbz	r0, 41c2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    41be:	4802      	ldr	r0, [pc, #8]	; (41c8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    41c0:	bd00      	pop	{pc}
    41c2:	4802      	ldr	r0, [pc, #8]	; (41cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    41c4:	bd00      	pop	{pc}
    41c6:	0000      	.short	0x0000
    41c8:	4000050c 	.word	0x4000050c
    41cc:	4001e700 	.word	0x4001e700

000041d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    41d0:	b510      	push	{r4, lr}
    41d2:	f009 f9e0 	bl	d596 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41d6:	b330      	cbz	r0, 4226 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    41d8:	f3ef 8010 	mrs	r0, PRIMASK
    41dc:	b1c8      	cbz	r0, 4212 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    41de:	2100      	movs	r1, #0
    41e0:	b672      	cpsid	i
    41e2:	4812      	ldr	r0, [pc, #72]	; (422c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    41e4:	6802      	ldr	r2, [r0, #0]
    41e6:	6803      	ldr	r3, [r0, #0]
    41e8:	f3c2 1200 	ubfx	r2, r2, #4, #1
    41ec:	f043 0310 	orr.w	r3, r3, #16
    41f0:	6003      	str	r3, [r0, #0]
    41f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    41f6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    41fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    41fe:	431c      	orrs	r4, r3
    4200:	d000      	beq.n	4204 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4202:	bf40      	sev
    4204:	bf20      	wfe
    4206:	bf00      	nop
    4208:	bf00      	nop
    420a:	bf00      	nop
    420c:	bf00      	nop
    420e:	b112      	cbz	r2, 4216 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4210:	e005      	b.n	421e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4212:	2101      	movs	r1, #1
    4214:	e7e4      	b.n	41e0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4216:	6802      	ldr	r2, [r0, #0]
    4218:	f022 0210 	bic.w	r2, r2, #16
    421c:	6002      	str	r2, [r0, #0]
    421e:	2900      	cmp	r1, #0
    4220:	d000      	beq.n	4224 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4222:	b662      	cpsie	i
    4224:	bd10      	pop	{r4, pc}
    4226:	bf20      	wfe
    4228:	bd10      	pop	{r4, pc}
    422a:	0000      	.short	0x0000
    422c:	e000ed10 	.word	0xe000ed10

00004230 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    4230:	4901      	ldr	r1, [pc, #4]	; (4238 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    4232:	2001      	movs	r0, #1
    4234:	7088      	strb	r0, [r1, #2]
    4236:	4770      	bx	lr
    4238:	20000080 	.word	0x20000080

0000423c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    423c:	0000d807 0000d83f 0000d829 0000d817     ....?...).......
    424c:	0000d823 0000d811 0000d805 0000d803     #...............
    425c:	0000d83b 0000d82f 0000d81d 0000d80b     ;.../...........
    426c:	0000d7fd 0000d7f5 0000d7f9 0000d7ef     ................

0000427c <mpsl_fem_disable>:
    427c:	4801      	ldr	r0, [pc, #4]	; (4284 <mpsl_fem_disable+0x8>)
    427e:	6800      	ldr	r0, [r0, #0]
    4280:	6800      	ldr	r0, [r0, #0]
    4282:	4700      	bx	r0
    4284:	20000094 	.word	0x20000094

00004288 <mpsl_fem_lna_configuration_clear>:
    4288:	4801      	ldr	r0, [pc, #4]	; (4290 <mpsl_fem_lna_configuration_clear+0x8>)
    428a:	6800      	ldr	r0, [r0, #0]
    428c:	6940      	ldr	r0, [r0, #20]
    428e:	4700      	bx	r0
    4290:	20000094 	.word	0x20000094

00004294 <mpsl_fem_lna_configuration_set>:
    4294:	4a01      	ldr	r2, [pc, #4]	; (429c <mpsl_fem_lna_configuration_set+0x8>)
    4296:	6812      	ldr	r2, [r2, #0]
    4298:	68d2      	ldr	r2, [r2, #12]
    429a:	4710      	bx	r2
    429c:	20000094 	.word	0x20000094

000042a0 <mpsl_fem_lna_is_configured>:
    42a0:	4901      	ldr	r1, [pc, #4]	; (42a8 <mpsl_fem_lna_is_configured+0x8>)
    42a2:	6809      	ldr	r1, [r1, #0]
    42a4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    42a6:	4708      	bx	r1
    42a8:	20000094 	.word	0x20000094

000042ac <mpsl_fem_pa_configuration_clear>:
    42ac:	4801      	ldr	r0, [pc, #4]	; (42b4 <mpsl_fem_pa_configuration_clear+0x8>)
    42ae:	6800      	ldr	r0, [r0, #0]
    42b0:	6900      	ldr	r0, [r0, #16]
    42b2:	4700      	bx	r0
    42b4:	20000094 	.word	0x20000094

000042b8 <mpsl_fem_pa_configuration_set>:
    42b8:	4a01      	ldr	r2, [pc, #4]	; (42c0 <mpsl_fem_pa_configuration_set+0x8>)
    42ba:	6812      	ldr	r2, [r2, #0]
    42bc:	6892      	ldr	r2, [r2, #8]
    42be:	4710      	bx	r2
    42c0:	20000094 	.word	0x20000094

000042c4 <mpsl_fem_pa_gain_set>:
    42c4:	4901      	ldr	r1, [pc, #4]	; (42cc <mpsl_fem_pa_gain_set+0x8>)
    42c6:	6809      	ldr	r1, [r1, #0]
    42c8:	6a49      	ldr	r1, [r1, #36]	; 0x24
    42ca:	4708      	bx	r1
    42cc:	20000094 	.word	0x20000094

000042d0 <mpsl_fem_pa_is_configured>:
    42d0:	4901      	ldr	r1, [pc, #4]	; (42d8 <mpsl_fem_pa_is_configured+0x8>)
    42d2:	6809      	ldr	r1, [r1, #0]
    42d4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    42d6:	4708      	bx	r1
    42d8:	20000094 	.word	0x20000094

000042dc <mpsl_fem_tx_power_split>:
    42dc:	4b01      	ldr	r3, [pc, #4]	; (42e4 <mpsl_fem_tx_power_split+0x8>)
    42de:	681b      	ldr	r3, [r3, #0]
    42e0:	685b      	ldr	r3, [r3, #4]
    42e2:	4718      	bx	r3
    42e4:	20000094 	.word	0x20000094

000042e8 <mpsl_fem_device_config_254_apply_get>:
    42e8:	4801      	ldr	r0, [pc, #4]	; (42f0 <mpsl_fem_device_config_254_apply_get+0x8>)
    42ea:	7800      	ldrb	r0, [r0, #0]
    42ec:	4770      	bx	lr
    42ee:	0000      	.short	0x0000
    42f0:	20000317 	.word	0x20000317
    42f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    42f6:	4c14      	ldr	r4, [pc, #80]	; (4348 <mpsl_fem_device_config_254_apply_get+0x60>)
    42f8:	7a20      	ldrb	r0, [r4, #8]
    42fa:	f88d 0001 	strb.w	r0, [sp, #1]
    42fe:	79e0      	ldrb	r0, [r4, #7]
    4300:	f88d 0000 	strb.w	r0, [sp]
    4304:	79a0      	ldrb	r0, [r4, #6]
    4306:	f8ad 0004 	strh.w	r0, [sp, #4]
    430a:	7960      	ldrb	r0, [r4, #5]
    430c:	f8ad 0002 	strh.w	r0, [sp, #2]
    4310:	4668      	mov	r0, sp
    4312:	f007 f859 	bl	b3c8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4316:	b108      	cbz	r0, 431c <mpsl_fem_device_config_254_apply_get+0x34>
    4318:	2183      	movs	r1, #131	; 0x83
    431a:	e010      	b.n	433e <mpsl_fem_device_config_254_apply_get+0x56>
    431c:	68e0      	ldr	r0, [r4, #12]
    431e:	9002      	str	r0, [sp, #8]
    4320:	a802      	add	r0, sp, #8
    4322:	f007 f867 	bl	b3f4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4326:	b108      	cbz	r0, 432c <mpsl_fem_device_config_254_apply_get+0x44>
    4328:	2187      	movs	r1, #135	; 0x87
    432a:	e008      	b.n	433e <mpsl_fem_device_config_254_apply_get+0x56>
    432c:	4807      	ldr	r0, [pc, #28]	; (434c <mpsl_fem_device_config_254_apply_get+0x64>)
    432e:	6800      	ldr	r0, [r0, #0]
    4330:	9003      	str	r0, [sp, #12]
    4332:	a803      	add	r0, sp, #12
    4334:	f00c f816 	bl	10364 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4338:	2800      	cmp	r0, #0
    433a:	d003      	beq.n	4344 <mpsl_fem_device_config_254_apply_get+0x5c>
    433c:	218b      	movs	r1, #139	; 0x8b
    433e:	2003      	movs	r0, #3
    4340:	f000 f93a 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4344:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4346:	0000      	.short	0x0000
    4348:	200010ec 	.word	0x200010ec
    434c:	000046a8 	.word	0x000046a8
    4350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4354:	460d      	mov	r5, r1
    4356:	4681      	mov	r9, r0
    4358:	f04f 0100 	mov.w	r1, #0
    435c:	f100 0003 	add.w	r0, r0, #3
    4360:	9100      	str	r1, [sp, #0]
    4362:	f020 0003 	bic.w	r0, r0, #3
    4366:	7829      	ldrb	r1, [r5, #0]
    4368:	0016      	movs	r6, r2
    436a:	4604      	mov	r4, r0
    436c:	f88d 1001 	strb.w	r1, [sp, #1]
    4370:	d000      	beq.n	4374 <mpsl_fem_device_config_254_apply_get+0x8c>
    4372:	2000      	movs	r0, #0
    4374:	4669      	mov	r1, sp
    4376:	f000 fb0b 	bl	4990 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    437a:	491a      	ldr	r1, [pc, #104]	; (43e4 <mpsl_fem_device_config_254_apply_get+0xfc>)
    437c:	4420      	add	r0, r4
    437e:	4604      	mov	r4, r0
    4380:	78c9      	ldrb	r1, [r1, #3]
    4382:	b139      	cbz	r1, 4394 <mpsl_fem_device_config_254_apply_get+0xac>
    4384:	7c29      	ldrb	r1, [r5, #16]
    4386:	b129      	cbz	r1, 4394 <mpsl_fem_device_config_254_apply_get+0xac>
    4388:	2225      	movs	r2, #37	; 0x25
    438a:	b106      	cbz	r6, 438e <mpsl_fem_device_config_254_apply_get+0xa6>
    438c:	2000      	movs	r0, #0
    438e:	f000 fd49 	bl	4e24 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4392:	4404      	add	r4, r0
    4394:	7828      	ldrb	r0, [r5, #0]
    4396:	7869      	ldrb	r1, [r5, #1]
    4398:	46b2      	mov	sl, r6
    439a:	2700      	movs	r7, #0
    439c:	4408      	add	r0, r1
    439e:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    43a2:	463e      	mov	r6, r7
    43a4:	e008      	b.n	43b8 <mpsl_fem_device_config_254_apply_get+0xd0>
    43a6:	7a2b      	ldrb	r3, [r5, #8]
    43a8:	79ea      	ldrb	r2, [r5, #7]
    43aa:	79a9      	ldrb	r1, [r5, #6]
    43ac:	7968      	ldrb	r0, [r5, #5]
    43ae:	f00a fa1f 	bl	e7f0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    43b2:	1c76      	adds	r6, r6, #1
    43b4:	4407      	add	r7, r0
    43b6:	b2f6      	uxtb	r6, r6
    43b8:	4546      	cmp	r6, r8
    43ba:	d3f4      	bcc.n	43a6 <mpsl_fem_device_config_254_apply_get+0xbe>
    43bc:	1ce4      	adds	r4, r4, #3
    43be:	f024 0003 	bic.w	r0, r4, #3
    43c2:	4604      	mov	r4, r0
    43c4:	f1ba 0f00 	cmp.w	sl, #0
    43c8:	d000      	beq.n	43cc <mpsl_fem_device_config_254_apply_get+0xe4>
    43ca:	2000      	movs	r0, #0
    43cc:	463a      	mov	r2, r7
    43ce:	4641      	mov	r1, r8
    43d0:	f000 fca6 	bl	4d20 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    43d4:	4420      	add	r0, r4
    43d6:	1dc0      	adds	r0, r0, #7
    43d8:	f020 0007 	bic.w	r0, r0, #7
    43dc:	eba0 0009 	sub.w	r0, r0, r9
    43e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43e4:	20000098 	.word	0x20000098

000043e8 <sdc_build_revision_get>:
    43e8:	b510      	push	{r4, lr}
    43ea:	b128      	cbz	r0, 43f8 <sdc_build_revision_get+0x10>
    43ec:	2214      	movs	r2, #20
    43ee:	4904      	ldr	r1, [pc, #16]	; (4400 <sdc_build_revision_get+0x18>)
    43f0:	f009 f923 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    43f4:	2000      	movs	r0, #0
    43f6:	bd10      	pop	{r4, pc}
    43f8:	f06f 0015 	mvn.w	r0, #21
    43fc:	bd10      	pop	{r4, pc}
    43fe:	0000      	.short	0x0000
    4400:	000046c4 	.word	0x000046c4

00004404 <sdc_cfg_set>:
    4404:	b570      	push	{r4, r5, r6, lr}
    4406:	0003      	movs	r3, r0
    4408:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    440c:	d103      	bne.n	4416 <sdc_cfg_set+0x12>
    440e:	4c2f      	ldr	r4, [pc, #188]	; (44cc <sdc_cfg_set+0xc8>)
    4410:	7863      	ldrb	r3, [r4, #1]
    4412:	b10b      	cbz	r3, 4418 <sdc_cfg_set+0x14>
    4414:	1180      	asrs	r0, r0, #6
    4416:	bd70      	pop	{r4, r5, r6, pc}
    4418:	b301      	cbz	r1, 445c <sdc_cfg_set+0x58>
    441a:	f06f 0515 	mvn.w	r5, #21
    441e:	b39a      	cbz	r2, 4488 <sdc_cfg_set+0x84>
    4420:	4b2b      	ldr	r3, [pc, #172]	; (44d0 <sdc_cfg_set+0xcc>)
    4422:	290c      	cmp	r1, #12
    4424:	d24d      	bcs.n	44c2 <sdc_cfg_set+0xbe>
    4426:	e8df f001 	tbb	[pc, r1]
    442a:	064c      	.short	0x064c
    442c:	1d1a0c09 	.word	0x1d1a0c09
    4430:	33223027 	.word	0x33223027
    4434:	3d38      	.short	0x3d38
    4436:	7810      	ldrb	r0, [r2, #0]
    4438:	7018      	strb	r0, [r3, #0]
    443a:	e037      	b.n	44ac <sdc_cfg_set+0xa8>
    443c:	7810      	ldrb	r0, [r2, #0]
    443e:	7058      	strb	r0, [r3, #1]
    4440:	e034      	b.n	44ac <sdc_cfg_set+0xa8>
    4442:	7890      	ldrb	r0, [r2, #2]
    4444:	b300      	cbz	r0, 4488 <sdc_cfg_set+0x84>
    4446:	78d0      	ldrb	r0, [r2, #3]
    4448:	b1f0      	cbz	r0, 4488 <sdc_cfg_set+0x84>
    444a:	7810      	ldrb	r0, [r2, #0]
    444c:	281b      	cmp	r0, #27
    444e:	d338      	bcc.n	44c2 <sdc_cfg_set+0xbe>
    4450:	7850      	ldrb	r0, [r2, #1]
    4452:	281b      	cmp	r0, #27
    4454:	d335      	bcc.n	44c2 <sdc_cfg_set+0xbe>
    4456:	6810      	ldr	r0, [r2, #0]
    4458:	f8c3 0005 	str.w	r0, [r3, #5]
    445c:	e026      	b.n	44ac <sdc_cfg_set+0xa8>
    445e:	6810      	ldr	r0, [r2, #0]
    4460:	60d8      	str	r0, [r3, #12]
    4462:	e023      	b.n	44ac <sdc_cfg_set+0xa8>
    4464:	7811      	ldrb	r1, [r2, #0]
    4466:	2900      	cmp	r1, #0
    4468:	d1d5      	bne.n	4416 <sdc_cfg_set+0x12>
    446a:	7099      	strb	r1, [r3, #2]
    446c:	e01e      	b.n	44ac <sdc_cfg_set+0xa8>
    446e:	7811      	ldrb	r1, [r2, #0]
    4470:	2900      	cmp	r1, #0
    4472:	d1d0      	bne.n	4416 <sdc_cfg_set+0x12>
    4474:	70d9      	strb	r1, [r3, #3]
    4476:	e019      	b.n	44ac <sdc_cfg_set+0xa8>
    4478:	78e0      	ldrb	r0, [r4, #3]
    447a:	b110      	cbz	r0, 4482 <sdc_cfg_set+0x7e>
    447c:	7810      	ldrb	r0, [r2, #0]
    447e:	2802      	cmp	r0, #2
    4480:	d31f      	bcc.n	44c2 <sdc_cfg_set+0xbe>
    4482:	7810      	ldrb	r0, [r2, #0]
    4484:	7418      	strb	r0, [r3, #16]
    4486:	e011      	b.n	44ac <sdc_cfg_set+0xa8>
    4488:	e01b      	b.n	44c2 <sdc_cfg_set+0xbe>
    448a:	8810      	ldrh	r0, [r2, #0]
    448c:	8258      	strh	r0, [r3, #18]
    448e:	e00d      	b.n	44ac <sdc_cfg_set+0xa8>
    4490:	7811      	ldrb	r1, [r2, #0]
    4492:	2900      	cmp	r1, #0
    4494:	d1bf      	bne.n	4416 <sdc_cfg_set+0x12>
    4496:	7119      	strb	r1, [r3, #4]
    4498:	e008      	b.n	44ac <sdc_cfg_set+0xa8>
    449a:	7810      	ldrb	r0, [r2, #0]
    449c:	2802      	cmp	r0, #2
    449e:	d310      	bcc.n	44c2 <sdc_cfg_set+0xbe>
    44a0:	7518      	strb	r0, [r3, #20]
    44a2:	e003      	b.n	44ac <sdc_cfg_set+0xa8>
    44a4:	7811      	ldrb	r1, [r2, #0]
    44a6:	2900      	cmp	r1, #0
    44a8:	d1b5      	bne.n	4416 <sdc_cfg_set+0x12>
    44aa:	7559      	strb	r1, [r3, #21]
    44ac:	2201      	movs	r2, #1
    44ae:	4908      	ldr	r1, [pc, #32]	; (44d0 <sdc_cfg_set+0xcc>)
    44b0:	2000      	movs	r0, #0
    44b2:	f7ff ff4d 	bl	4350 <mpsl_fem_device_config_254_apply_get+0x68>
    44b6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    44ba:	db04      	blt.n	44c6 <sdc_cfg_set+0xc2>
    44bc:	f06f 000b 	mvn.w	r0, #11
    44c0:	bd70      	pop	{r4, r5, r6, pc}
    44c2:	4628      	mov	r0, r5
    44c4:	bd70      	pop	{r4, r5, r6, pc}
    44c6:	2101      	movs	r1, #1
    44c8:	70a1      	strb	r1, [r4, #2]
    44ca:	bd70      	pop	{r4, r5, r6, pc}
    44cc:	20000098 	.word	0x20000098
    44d0:	200010ec 	.word	0x200010ec

000044d4 <sdc_enable>:
    44d4:	b570      	push	{r4, r5, r6, lr}
    44d6:	460c      	mov	r4, r1
    44d8:	0005      	movs	r5, r0
    44da:	d019      	beq.n	4510 <sdc_enable+0x3c>
    44dc:	b1c4      	cbz	r4, 4510 <sdc_enable+0x3c>
    44de:	f000 f925 	bl	472c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    44e2:	b1c0      	cbz	r0, 4516 <sdc_enable+0x42>
    44e4:	4628      	mov	r0, r5
    44e6:	f7ff fdff 	bl	40e8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    44ea:	4d0c      	ldr	r5, [pc, #48]	; (451c <sdc_enable+0x48>)
    44ec:	2200      	movs	r2, #0
    44ee:	490c      	ldr	r1, [pc, #48]	; (4520 <sdc_enable+0x4c>)
    44f0:	7028      	strb	r0, [r5, #0]
    44f2:	4620      	mov	r0, r4
    44f4:	f7ff ff2c 	bl	4350 <mpsl_fem_device_config_254_apply_get+0x68>
    44f8:	f00c fb0a 	bl	10b10 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    44fc:	2100      	movs	r1, #0
    44fe:	7828      	ldrb	r0, [r5, #0]
    4500:	f007 f966 	bl	b7d0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4504:	f7ff fef6 	bl	42f4 <mpsl_fem_device_config_254_apply_get+0xc>
    4508:	2001      	movs	r0, #1
    450a:	7068      	strb	r0, [r5, #1]
    450c:	2000      	movs	r0, #0
    450e:	bd70      	pop	{r4, r5, r6, pc}
    4510:	f06f 0015 	mvn.w	r0, #21
    4514:	bd70      	pop	{r4, r5, r6, pc}
    4516:	f04f 30ff 	mov.w	r0, #4294967295
    451a:	bd70      	pop	{r4, r5, r6, pc}
    451c:	20000098 	.word	0x20000098
    4520:	200010ec 	.word	0x200010ec

00004524 <sdc_init>:
    4524:	b530      	push	{r4, r5, lr}
    4526:	b087      	sub	sp, #28
    4528:	0005      	movs	r5, r0
    452a:	d00c      	beq.n	4546 <sdc_init+0x22>
    452c:	f7ff fd82 	bl	4034 <mpsl_is_initialized>
    4530:	f04f 34ff 	mov.w	r4, #4294967295
    4534:	b120      	cbz	r0, 4540 <sdc_init+0x1c>
    4536:	f7ff fc47 	bl	3dc8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    453a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    453e:	d905      	bls.n	454c <sdc_init+0x28>
    4540:	4620      	mov	r0, r4
    4542:	b007      	add	sp, #28
    4544:	bd30      	pop	{r4, r5, pc}
    4546:	f06f 0015 	mvn.w	r0, #21
    454a:	e7fa      	b.n	4542 <sdc_init+0x1e>
    454c:	4c15      	ldr	r4, [pc, #84]	; (45a4 <sdc_init+0x80>)
    454e:	4816      	ldr	r0, [pc, #88]	; (45a8 <sdc_init+0x84>)
    4550:	6065      	str	r5, [r4, #4]
    4552:	f000 f9df 	bl	4914 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4556:	2000      	movs	r0, #0
    4558:	7060      	strb	r0, [r4, #1]
    455a:	70a0      	strb	r0, [r4, #2]
    455c:	70e0      	strb	r0, [r4, #3]
    455e:	4601      	mov	r1, r0
    4560:	2218      	movs	r2, #24
    4562:	4668      	mov	r0, sp
    4564:	f009 f8e3 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4568:	2218      	movs	r2, #24
    456a:	4910      	ldr	r1, [pc, #64]	; (45ac <sdc_init+0x88>)
    456c:	4668      	mov	r0, sp
    456e:	f009 f864 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4572:	2218      	movs	r2, #24
    4574:	4669      	mov	r1, sp
    4576:	480e      	ldr	r0, [pc, #56]	; (45b0 <sdc_init+0x8c>)
    4578:	f009 f85f 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    457c:	f3ef 8410 	mrs	r4, PRIMASK
    4580:	b672      	cpsid	i
    4582:	f06f 000c 	mvn.w	r0, #12
    4586:	f000 fc99 	bl	4ebc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    458a:	480a      	ldr	r0, [pc, #40]	; (45b4 <sdc_init+0x90>)
    458c:	f000 fd64 	bl	5058 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4590:	b118      	cbz	r0, 459a <sdc_init+0x76>
    4592:	219e      	movs	r1, #158	; 0x9e
    4594:	2003      	movs	r0, #3
    4596:	f000 f80f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    459a:	b904      	cbnz	r4, 459e <sdc_init+0x7a>
    459c:	b662      	cpsie	i
    459e:	2000      	movs	r0, #0
    45a0:	e7cf      	b.n	4542 <sdc_init+0x1e>
    45a2:	0000      	.short	0x0000
    45a4:	20000098 	.word	0x20000098
    45a8:	000042f5 	.word	0x000042f5
    45ac:	000046ac 	.word	0x000046ac
    45b0:	200010ec 	.word	0x200010ec
    45b4:	00004759 	.word	0x00004759

000045b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    45b8:	b50e      	push	{r1, r2, r3, lr}
    45ba:	b672      	cpsid	i
    45bc:	4a15      	ldr	r2, [pc, #84]	; (4614 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    45be:	6855      	ldr	r5, [r2, #4]
    45c0:	b1dd      	cbz	r5, 45fa <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    45c2:	2200      	movs	r2, #0
    45c4:	4603      	mov	r3, r0
    45c6:	466e      	mov	r6, sp
    45c8:	240a      	movs	r4, #10
    45ca:	e003      	b.n	45d4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    45cc:	fbb0 f0f4 	udiv	r0, r0, r4
    45d0:	1c52      	adds	r2, r2, #1
    45d2:	b2d2      	uxtb	r2, r2
    45d4:	2800      	cmp	r0, #0
    45d6:	d1f9      	bne.n	45cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    45d8:	54b0      	strb	r0, [r6, r2]
    45da:	e00a      	b.n	45f2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    45dc:	b2d8      	uxtb	r0, r3
    45de:	fbb0 f7f4 	udiv	r7, r0, r4
    45e2:	fbb3 f3f4 	udiv	r3, r3, r4
    45e6:	fb04 0017 	mls	r0, r4, r7, r0
    45ea:	1e52      	subs	r2, r2, #1
    45ec:	b2d2      	uxtb	r2, r2
    45ee:	3030      	adds	r0, #48	; 0x30
    45f0:	54b0      	strb	r0, [r6, r2]
    45f2:	2a00      	cmp	r2, #0
    45f4:	d1f2      	bne.n	45dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    45f6:	4630      	mov	r0, r6
    45f8:	47a8      	blx	r5
    45fa:	f3bf 8f4f 	dsb	sy
    45fe:	4806      	ldr	r0, [pc, #24]	; (4618 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4600:	6801      	ldr	r1, [r0, #0]
    4602:	4a06      	ldr	r2, [pc, #24]	; (461c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4604:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4608:	4311      	orrs	r1, r2
    460a:	6001      	str	r1, [r0, #0]
    460c:	f3bf 8f4f 	dsb	sy
    4610:	bf00      	nop
    4612:	e7fd      	b.n	4610 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    4614:	20000098 	.word	0x20000098
    4618:	e000ed0c 	.word	0xe000ed0c
    461c:	05fa0004 	.word	0x05fa0004

00004620 <sdc_support_central>:
    4620:	b510      	push	{r4, lr}
    4622:	4c07      	ldr	r4, [pc, #28]	; (4640 <sdc_support_central+0x20>)
    4624:	78a0      	ldrb	r0, [r4, #2]
    4626:	7861      	ldrb	r1, [r4, #1]
    4628:	4308      	orrs	r0, r1
    462a:	d002      	beq.n	4632 <sdc_support_central+0x12>
    462c:	f04f 30ff 	mov.w	r0, #4294967295
    4630:	bd10      	pop	{r4, pc}
    4632:	f007 f8ed 	bl	b810 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    4636:	2001      	movs	r0, #1
    4638:	70e0      	strb	r0, [r4, #3]
    463a:	2000      	movs	r0, #0
    463c:	bd10      	pop	{r4, pc}
    463e:	0000      	.short	0x0000
    4640:	20000098 	.word	0x20000098

00004644 <sdc_support_dle_central>:
    4644:	4806      	ldr	r0, [pc, #24]	; (4660 <sdc_support_dle_central+0x1c>)
    4646:	b510      	push	{r4, lr}
    4648:	7881      	ldrb	r1, [r0, #2]
    464a:	7840      	ldrb	r0, [r0, #1]
    464c:	4301      	orrs	r1, r0
    464e:	d002      	beq.n	4656 <sdc_support_dle_central+0x12>
    4650:	f04f 30ff 	mov.w	r0, #4294967295
    4654:	bd10      	pop	{r4, pc}
    4656:	f006 ff29 	bl	b4ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>
    465a:	2000      	movs	r0, #0
    465c:	bd10      	pop	{r4, pc}
    465e:	0000      	.short	0x0000
    4660:	20000098 	.word	0x20000098

00004664 <sdc_support_le_2m_phy>:
    4664:	4807      	ldr	r0, [pc, #28]	; (4684 <sdc_support_le_2m_phy+0x20>)
    4666:	b510      	push	{r4, lr}
    4668:	7881      	ldrb	r1, [r0, #2]
    466a:	7840      	ldrb	r0, [r0, #1]
    466c:	4301      	orrs	r1, r0
    466e:	d002      	beq.n	4676 <sdc_support_le_2m_phy+0x12>
    4670:	f04f 30ff 	mov.w	r0, #4294967295
    4674:	bd10      	pop	{r4, pc}
    4676:	f00b ff84 	bl	10582 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    467a:	f00b ffa6 	bl	105ca <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
    467e:	2000      	movs	r0, #0
    4680:	bd10      	pop	{r4, pc}
    4682:	0000      	.short	0x0000
    4684:	20000098 	.word	0x20000098

00004688 <sdc_support_phy_update_central>:
    4688:	4806      	ldr	r0, [pc, #24]	; (46a4 <sdc_support_phy_update_central+0x1c>)
    468a:	b510      	push	{r4, lr}
    468c:	7881      	ldrb	r1, [r0, #2]
    468e:	7840      	ldrb	r0, [r0, #1]
    4690:	4301      	orrs	r1, r0
    4692:	d002      	beq.n	469a <sdc_support_phy_update_central+0x12>
    4694:	f04f 30ff 	mov.w	r0, #4294967295
    4698:	bd10      	pop	{r4, pc}
    469a:	f00b ff96 	bl	105ca <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
    469e:	2000      	movs	r0, #0
    46a0:	bd10      	pop	{r4, pc}
    46a2:	0000      	.short	0x0000
    46a4:	20000098 	.word	0x20000098
    46a8:	00000001 	.word	0x00000001
    46ac:	00010101 	.word	0x00010101
    46b0:	031b1b00 	.word	0x031b1b00
    46b4:	00000002 	.word	0x00000002
    46b8:	00001d4c 	.word	0x00001d4c
    46bc:	001f0003 	.word	0x001f0003
    46c0:	00000000 	.word	0x00000000
    46c4:	f1925c29 	.word	0xf1925c29
    46c8:	d1928136 	.word	0xd1928136
    46cc:	f1f0a9b7 	.word	0xf1f0a9b7
    46d0:	194ce999 	.word	0x194ce999
    46d4:	4a83231f 	.word	0x4a83231f

000046d8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    46d8:	4a05      	ldr	r2, [pc, #20]	; (46f0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    46da:	b510      	push	{r4, lr}
    46dc:	6852      	ldr	r2, [r2, #4]
    46de:	b112      	cbz	r2, 46e6 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    46e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46e4:	4710      	bx	r2
    46e6:	2192      	movs	r1, #146	; 0x92
    46e8:	2004      	movs	r0, #4
    46ea:	f7ff ff65 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46ee:	0000      	.short	0x0000
    46f0:	20001104 	.word	0x20001104

000046f4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    46f4:	4a05      	ldr	r2, [pc, #20]	; (470c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    46f6:	b510      	push	{r4, lr}
    46f8:	6812      	ldr	r2, [r2, #0]
    46fa:	b112      	cbz	r2, 4702 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    46fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4700:	4710      	bx	r2
    4702:	218c      	movs	r1, #140	; 0x8c
    4704:	2004      	movs	r0, #4
    4706:	f7ff ff57 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    470a:	0000      	.short	0x0000
    470c:	20001104 	.word	0x20001104

00004710 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4710:	4a05      	ldr	r2, [pc, #20]	; (4728 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4712:	b510      	push	{r4, lr}
    4714:	6892      	ldr	r2, [r2, #8]
    4716:	b112      	cbz	r2, 471e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    471c:	4710      	bx	r2
    471e:	2198      	movs	r1, #152	; 0x98
    4720:	2004      	movs	r0, #4
    4722:	f7ff ff49 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4726:	0000      	.short	0x0000
    4728:	20001104 	.word	0x20001104

0000472c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    472c:	4805      	ldr	r0, [pc, #20]	; (4744 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    472e:	6801      	ldr	r1, [r0, #0]
    4730:	b129      	cbz	r1, 473e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4732:	6841      	ldr	r1, [r0, #4]
    4734:	b119      	cbz	r1, 473e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4736:	6880      	ldr	r0, [r0, #8]
    4738:	b108      	cbz	r0, 473e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    473a:	2001      	movs	r0, #1
    473c:	4770      	bx	lr
    473e:	2000      	movs	r0, #0
    4740:	4770      	bx	lr
    4742:	0000      	.short	0x0000
    4744:	20001104 	.word	0x20001104

00004748 <sdc_rand_source_register>:
    4748:	4902      	ldr	r1, [pc, #8]	; (4754 <sdc_rand_source_register+0xc>)
    474a:	c80d      	ldmia	r0, {r0, r2, r3}
    474c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4750:	2000      	movs	r0, #0
    4752:	4770      	bx	lr
    4754:	20001104 	.word	0x20001104

00004758 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    475a:	4c12      	ldr	r4, [pc, #72]	; (47a4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    475c:	2600      	movs	r6, #0
    475e:	6825      	ldr	r5, [r4, #0]
    4760:	e011      	b.n	4786 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4762:	9800      	ldr	r0, [sp, #0]
    4764:	2802      	cmp	r0, #2
    4766:	d002      	beq.n	476e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4768:	2803      	cmp	r0, #3
    476a:	d10c      	bne.n	4786 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    476c:	e006      	b.n	477c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    476e:	6820      	ldr	r0, [r4, #0]
    4770:	b110      	cbz	r0, 4778 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4772:	2000      	movs	r0, #0
    4774:	6026      	str	r6, [r4, #0]
    4776:	e005      	b.n	4784 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4778:	2128      	movs	r1, #40	; 0x28
    477a:	e00c      	b.n	4796 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    477c:	6820      	ldr	r0, [r4, #0]
    477e:	b168      	cbz	r0, 479c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4780:	2001      	movs	r0, #1
    4782:	6026      	str	r6, [r4, #0]
    4784:	47a8      	blx	r5
    4786:	4668      	mov	r0, sp
    4788:	f000 fc38 	bl	4ffc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    478c:	2800      	cmp	r0, #0
    478e:	d0e8      	beq.n	4762 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4790:	2805      	cmp	r0, #5
    4792:	d005      	beq.n	47a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4794:	2135      	movs	r1, #53	; 0x35
    4796:	2004      	movs	r0, #4
    4798:	f7ff ff0e 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    479c:	212d      	movs	r1, #45	; 0x2d
    479e:	e7fa      	b.n	4796 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    47a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47a2:	0000      	.short	0x0000
    47a4:	200000a0 	.word	0x200000a0
    47a8:	b570      	push	{r4, r5, r6, lr}
    47aa:	4c14      	ldr	r4, [pc, #80]	; (47fc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    47ac:	4605      	mov	r5, r0
    47ae:	7820      	ldrb	r0, [r4, #0]
    47b0:	b140      	cbz	r0, 47c4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    47b2:	78a2      	ldrb	r2, [r4, #2]
    47b4:	1c61      	adds	r1, r4, #1
    47b6:	4628      	mov	r0, r5
    47b8:	1c92      	adds	r2, r2, #2
    47ba:	f008 ff3e 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    47be:	2000      	movs	r0, #0
    47c0:	7020      	strb	r0, [r4, #0]
    47c2:	e013      	b.n	47ec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    47c4:	480e      	ldr	r0, [pc, #56]	; (4800 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    47c6:	f001 ffd5 	bl	6774 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    47ca:	2800      	cmp	r0, #0
    47cc:	d00f      	beq.n	47ee <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    47ce:	480c      	ldr	r0, [pc, #48]	; (4800 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    47d0:	7800      	ldrb	r0, [r0, #0]
    47d2:	2814      	cmp	r0, #20
    47d4:	d104      	bne.n	47e0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    47d6:	210a      	movs	r1, #10
    47d8:	203e      	movs	r0, #62	; 0x3e
    47da:	f009 f88d 	bl	d8f8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    47de:	b138      	cbz	r0, 47f0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    47e0:	4907      	ldr	r1, [pc, #28]	; (4800 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    47e2:	4628      	mov	r0, r5
    47e4:	f009 f8e4 	bl	d9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    47e8:	2800      	cmp	r0, #0
    47ea:	d000      	beq.n	47ee <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    47ec:	2001      	movs	r0, #1
    47ee:	bd70      	pop	{r4, r5, r6, pc}
    47f0:	4903      	ldr	r1, [pc, #12]	; (4800 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    47f2:	4628      	mov	r0, r5
    47f4:	f009 fb19 	bl	de2a <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    47f8:	e7f8      	b.n	47ec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    47fa:	0000      	.short	0x0000
    47fc:	20001218 	.word	0x20001218
    4800:	20001110 	.word	0x20001110
    4804:	b570      	push	{r4, r5, r6, lr}
    4806:	780a      	ldrb	r2, [r1, #0]
    4808:	7082      	strb	r2, [r0, #2]
    480a:	b33a      	cbz	r2, 485c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    480c:	2a01      	cmp	r2, #1
    480e:	d825      	bhi.n	485c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    4810:	2313      	movs	r3, #19
    4812:	7003      	strb	r3, [r0, #0]
    4814:	2300      	movs	r3, #0
    4816:	e00a      	b.n	482e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    4818:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    481c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4820:	78a6      	ldrb	r6, [r4, #2]
    4822:	70ee      	strb	r6, [r5, #3]
    4824:	8864      	ldrh	r4, [r4, #2]
    4826:	0a24      	lsrs	r4, r4, #8
    4828:	1c5b      	adds	r3, r3, #1
    482a:	712c      	strb	r4, [r5, #4]
    482c:	b2db      	uxtb	r3, r3
    482e:	4293      	cmp	r3, r2
    4830:	d3f2      	bcc.n	4818 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    4832:	2300      	movs	r3, #0
    4834:	e00b      	b.n	484e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    4836:	bf00      	nop
    4838:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    483c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4840:	792e      	ldrb	r6, [r5, #4]
    4842:	7166      	strb	r6, [r4, #5]
    4844:	88ad      	ldrh	r5, [r5, #4]
    4846:	0a2d      	lsrs	r5, r5, #8
    4848:	1c5b      	adds	r3, r3, #1
    484a:	71a5      	strb	r5, [r4, #6]
    484c:	b2db      	uxtb	r3, r3
    484e:	4293      	cmp	r3, r2
    4850:	d3f2      	bcc.n	4838 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    4852:	2101      	movs	r1, #1
    4854:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4858:	b2c0      	uxtb	r0, r0
    485a:	bd70      	pop	{r4, r5, r6, pc}
    485c:	2000      	movs	r0, #0
    485e:	bd70      	pop	{r4, r5, r6, pc}

00004860 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4860:	2840      	cmp	r0, #64	; 0x40
    4862:	d203      	bcs.n	486c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    4864:	1e40      	subs	r0, r0, #1
    4866:	b2c1      	uxtb	r1, r0
    4868:	4805      	ldr	r0, [pc, #20]	; (4880 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    486a:	e005      	b.n	4878 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    486c:	28ff      	cmp	r0, #255	; 0xff
    486e:	d005      	beq.n	487c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    4870:	3840      	subs	r0, #64	; 0x40
    4872:	b2c1      	uxtb	r1, r0
    4874:	4802      	ldr	r0, [pc, #8]	; (4880 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4876:	3008      	adds	r0, #8
    4878:	f009 bb01 	b.w	de7e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    487c:	2001      	movs	r0, #1
    487e:	4770      	bx	lr
    4880:	200000a4 	.word	0x200000a4

00004884 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4884:	1e40      	subs	r0, r0, #1
    4886:	b2c1      	uxtb	r1, r0
    4888:	4801      	ldr	r0, [pc, #4]	; (4890 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    488a:	f009 baf8 	b.w	de7e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    488e:	0000      	.short	0x0000
    4890:	200000b4 	.word	0x200000b4

00004894 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4894:	4902      	ldr	r1, [pc, #8]	; (48a0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    4896:	6802      	ldr	r2, [r0, #0]
    4898:	610a      	str	r2, [r1, #16]
    489a:	6840      	ldr	r0, [r0, #4]
    489c:	6148      	str	r0, [r1, #20]
    489e:	4770      	bx	lr
    48a0:	200000a4 	.word	0x200000a4

000048a4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    48a4:	4905      	ldr	r1, [pc, #20]	; (48bc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    48a6:	6802      	ldr	r2, [r0, #0]
    48a8:	600a      	str	r2, [r1, #0]
    48aa:	6840      	ldr	r0, [r0, #4]
    48ac:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    48b0:	600a      	str	r2, [r1, #0]
    48b2:	4a03      	ldr	r2, [pc, #12]	; (48c0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    48b4:	4310      	orrs	r0, r2
    48b6:	6048      	str	r0, [r1, #4]
    48b8:	4770      	bx	lr
    48ba:	0000      	.short	0x0000
    48bc:	200000a4 	.word	0x200000a4
    48c0:	024007f8 	.word	0x024007f8

000048c4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    48c4:	4902      	ldr	r1, [pc, #8]	; (48d0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    48c6:	6802      	ldr	r2, [r0, #0]
    48c8:	608a      	str	r2, [r1, #8]
    48ca:	6840      	ldr	r0, [r0, #4]
    48cc:	60c8      	str	r0, [r1, #12]
    48ce:	4770      	bx	lr
    48d0:	200000a4 	.word	0x200000a4

000048d4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    48d4:	4807      	ldr	r0, [pc, #28]	; (48f4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    48d6:	f04f 31ff 	mov.w	r1, #4294967295
    48da:	2200      	movs	r2, #0
    48dc:	6001      	str	r1, [r0, #0]
    48de:	0cc9      	lsrs	r1, r1, #19
    48e0:	6041      	str	r1, [r0, #4]
    48e2:	f100 0108 	add.w	r1, r0, #8
    48e6:	201f      	movs	r0, #31
    48e8:	600a      	str	r2, [r1, #0]
    48ea:	604a      	str	r2, [r1, #4]
    48ec:	3108      	adds	r1, #8
    48ee:	e9c1 0200 	strd	r0, r2, [r1]
    48f2:	4770      	bx	lr
    48f4:	200000a4 	.word	0x200000a4

000048f8 <sdc_hci_cmd_cb_reset>:
    48f8:	b510      	push	{r4, lr}
    48fa:	f7ff ffeb 	bl	48d4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    48fe:	f00b fdb9 	bl	10474 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4902:	4604      	mov	r4, r0
    4904:	4802      	ldr	r0, [pc, #8]	; (4910 <sdc_hci_cmd_cb_reset+0x18>)
    4906:	6800      	ldr	r0, [r0, #0]
    4908:	b100      	cbz	r0, 490c <sdc_hci_cmd_cb_reset+0x14>
    490a:	4780      	blx	r0
    490c:	4620      	mov	r0, r4
    490e:	bd10      	pop	{r4, pc}
    4910:	200000bc 	.word	0x200000bc

00004914 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4914:	4901      	ldr	r1, [pc, #4]	; (491c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4916:	6008      	str	r0, [r1, #0]
    4918:	4770      	bx	lr
    491a:	0000      	.short	0x0000
    491c:	200000bc 	.word	0x200000bc

00004920 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4920:	2102      	movs	r1, #2
    4922:	8001      	strh	r1, [r0, #0]
    4924:	8041      	strh	r1, [r0, #2]
    4926:	2100      	movs	r1, #0
    4928:	7101      	strb	r1, [r0, #4]
    492a:	2129      	movs	r1, #41	; 0x29
    492c:	7141      	strb	r1, [r0, #5]
    492e:	f249 215c 	movw	r1, #37468	; 0x925c
    4932:	80c1      	strh	r1, [r0, #6]
    4934:	4901      	ldr	r1, [pc, #4]	; (493c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4936:	6081      	str	r1, [r0, #8]
    4938:	2000      	movs	r0, #0
    493a:	4770      	bx	lr
    493c:	928136f1 	.word	0x928136f1

00004940 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4940:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4942:	4604      	mov	r4, r0
    4944:	4669      	mov	r1, sp
    4946:	f009 ff38 	bl	e7ba <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    494a:	b170      	cbz	r0, 496a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    494c:	f240 215a 	movw	r1, #602	; 0x25a
    4950:	e008      	b.n	4964 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4952:	bf00      	nop
    4954:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4958:	4621      	mov	r1, r4
    495a:	f000 f8a7 	bl	4aac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    495e:	b120      	cbz	r0, 496a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4960:	f240 215f 	movw	r1, #607	; 0x25f
    4964:	2017      	movs	r0, #23
    4966:	f7ff fe27 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    496a:	4668      	mov	r0, sp
    496c:	f000 f850 	bl	4a10 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4970:	2800      	cmp	r0, #0
    4972:	d0ef      	beq.n	4954 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4974:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004978 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4978:	b510      	push	{r4, lr}
    497a:	b120      	cbz	r0, 4986 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    497c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4980:	2017      	movs	r0, #23
    4982:	f7ff fe19 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4986:	4801      	ldr	r0, [pc, #4]	; (498c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    4988:	7800      	ldrb	r0, [r0, #0]
    498a:	bd10      	pop	{r4, pc}
    498c:	2000131c 	.word	0x2000131c

00004990 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4992:	4605      	mov	r5, r0
    4994:	7808      	ldrb	r0, [r1, #0]
    4996:	784a      	ldrb	r2, [r1, #1]
    4998:	4290      	cmp	r0, r2
    499a:	d902      	bls.n	49a2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    499c:	f240 1163 	movw	r1, #355	; 0x163
    49a0:	e00a      	b.n	49b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    49a2:	9500      	str	r5, [sp, #0]
    49a4:	b15d      	cbz	r5, 49be <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    49a6:	2600      	movs	r6, #0
    49a8:	1ce8      	adds	r0, r5, #3
    49aa:	784c      	ldrb	r4, [r1, #1]
    49ac:	f020 0003 	bic.w	r0, r0, #3
    49b0:	42a8      	cmp	r0, r5
    49b2:	d006      	beq.n	49c2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    49b4:	f240 1179 	movw	r1, #377	; 0x179
    49b8:	2017      	movs	r0, #23
    49ba:	f7ff fdfd 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49be:	2601      	movs	r6, #1
    49c0:	e7f2      	b.n	49a8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    49c2:	4f12      	ldr	r7, [pc, #72]	; (4a0c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    49c4:	4631      	mov	r1, r6
    49c6:	4668      	mov	r0, sp
    49c8:	703c      	strb	r4, [r7, #0]
    49ca:	f000 f8e1 	bl	4b90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    49ce:	2000      	movs	r0, #0
    49d0:	4603      	mov	r3, r0
    49d2:	9900      	ldr	r1, [sp, #0]
    49d4:	1cc9      	adds	r1, r1, #3
    49d6:	f021 0103 	bic.w	r1, r1, #3
    49da:	9100      	str	r1, [sp, #0]
    49dc:	b966      	cbnz	r6, 49f8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    49de:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    49e2:	6091      	str	r1, [r2, #8]
    49e4:	2100      	movs	r1, #0
    49e6:	e005      	b.n	49f4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    49e8:	f8d2 c008 	ldr.w	ip, [r2, #8]
    49ec:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    49f0:	1c49      	adds	r1, r1, #1
    49f2:	b2c9      	uxtb	r1, r1
    49f4:	42a1      	cmp	r1, r4
    49f6:	d3f7      	bcc.n	49e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    49f8:	9900      	ldr	r1, [sp, #0]
    49fa:	1c40      	adds	r0, r0, #1
    49fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4a00:	9100      	str	r1, [sp, #0]
    4a02:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    4a06:	d0e4      	beq.n	49d2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    4a08:	1b48      	subs	r0, r1, r5
    4a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a0c:	2000131c 	.word	0x2000131c

00004a10 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4a10:	b570      	push	{r4, r5, r6, lr}
    4a12:	4604      	mov	r4, r0
    4a14:	f009 ff60 	bl	e8d8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4a18:	b108      	cbz	r0, 4a1e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4a1a:	2010      	movs	r0, #16
    4a1c:	bd70      	pop	{r4, r5, r6, pc}
    4a1e:	7825      	ldrb	r5, [r4, #0]
    4a20:	f000 f8f2 	bl	4c08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4a24:	4602      	mov	r2, r0
    4a26:	480c      	ldr	r0, [pc, #48]	; (4a58 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4a28:	8861      	ldrh	r1, [r4, #2]
    4a2a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4a2e:	e00e      	b.n	4a4e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4a30:	6883      	ldr	r3, [r0, #8]
    4a32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4a36:	b143      	cbz	r3, 4a4a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4a38:	1c4a      	adds	r2, r1, #1
    4a3a:	8062      	strh	r2, [r4, #2]
    4a3c:	80a1      	strh	r1, [r4, #4]
    4a3e:	6880      	ldr	r0, [r0, #8]
    4a40:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4a44:	60a0      	str	r0, [r4, #8]
    4a46:	2000      	movs	r0, #0
    4a48:	bd70      	pop	{r4, r5, r6, pc}
    4a4a:	1c49      	adds	r1, r1, #1
    4a4c:	b289      	uxth	r1, r1
    4a4e:	4291      	cmp	r1, r2
    4a50:	d3ee      	bcc.n	4a30 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4a52:	8061      	strh	r1, [r4, #2]
    4a54:	2005      	movs	r0, #5
    4a56:	bd70      	pop	{r4, r5, r6, pc}
    4a58:	2000131c 	.word	0x2000131c

00004a5c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a60:	b949      	cbnz	r1, 4a76 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    4a62:	4c11      	ldr	r4, [pc, #68]	; (4aa8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    4a64:	2700      	movs	r7, #0
    4a66:	463b      	mov	r3, r7
    4a68:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4a6c:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4a70:	f814 c001 	ldrb.w	ip, [r4, r1]
    4a74:	e00d      	b.n	4a92 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    4a76:	2000      	movs	r0, #0
    4a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a7c:	19dc      	adds	r4, r3, r7
    4a7e:	f8d5 e008 	ldr.w	lr, [r5, #8]
    4a82:	b2a4      	uxth	r4, r4
    4a84:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4a88:	f1be 0f00 	cmp.w	lr, #0
    4a8c:	d004      	beq.n	4a98 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    4a8e:	1c5b      	adds	r3, r3, #1
    4a90:	b29b      	uxth	r3, r3
    4a92:	459c      	cmp	ip, r3
    4a94:	d8f2      	bhi.n	4a7c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4a96:	4634      	mov	r4, r6
    4a98:	8004      	strh	r4, [r0, #0]
    4a9a:	4620      	mov	r0, r4
    4a9c:	42b4      	cmp	r4, r6
    4a9e:	d0ea      	beq.n	4a76 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    4aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4aa4:	f000 b82c 	b.w	4b00 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    4aa8:	2000131c 	.word	0x2000131c

00004aac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4aac:	b570      	push	{r4, r5, r6, lr}
    4aae:	4606      	mov	r6, r0
    4ab0:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4ab4:	f243 0502 	movw	r5, #12290	; 0x3002
    4ab8:	38ff      	subs	r0, #255	; 0xff
    4aba:	d01a      	beq.n	4af2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4abc:	b109      	cbz	r1, 4ac2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    4abe:	2007      	movs	r0, #7
    4ac0:	bd70      	pop	{r4, r5, r6, pc}
    4ac2:	4630      	mov	r0, r6
    4ac4:	f000 f854 	bl	4b70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    4ac8:	0004      	movs	r4, r0
    4aca:	d012      	beq.n	4af2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4acc:	480a      	ldr	r0, [pc, #40]	; (4af8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    4ace:	4621      	mov	r1, r4
    4ad0:	6802      	ldr	r2, [r0, #0]
    4ad2:	4630      	mov	r0, r6
    4ad4:	4790      	blx	r2
    4ad6:	4d09      	ldr	r5, [pc, #36]	; (4afc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    4ad8:	2000      	movs	r0, #0
    4ada:	68a9      	ldr	r1, [r5, #8]
    4adc:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    4ae0:	f000 f888 	bl	4bf4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4ae4:	4602      	mov	r2, r0
    4ae6:	4621      	mov	r1, r4
    4ae8:	6868      	ldr	r0, [r5, #4]
    4aea:	f009 fe50 	bl	e78e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4aee:	2000      	movs	r0, #0
    4af0:	bd70      	pop	{r4, r5, r6, pc}
    4af2:	4628      	mov	r0, r5
    4af4:	bd70      	pop	{r4, r5, r6, pc}
    4af6:	0000      	.short	0x0000
    4af8:	00004c1c 	.word	0x00004c1c
    4afc:	2000131c 	.word	0x2000131c
    4b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b04:	4690      	mov	r8, r2
    4b06:	460e      	mov	r6, r1
    4b08:	4607      	mov	r7, r0
    4b0a:	f009 fe66 	bl	e7da <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    4b0e:	b148      	cbz	r0, 4b24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    4b10:	4815      	ldr	r0, [pc, #84]	; (4b68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    4b12:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    4b16:	68a8      	ldr	r0, [r5, #8]
    4b18:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4b1c:	b128      	cbz	r0, 4b2a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    4b1e:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4b22:	e014      	b.n	4b4e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    4b24:	f240 1139 	movw	r1, #313	; 0x139
    4b28:	e011      	b.n	4b4e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    4b2a:	6868      	ldr	r0, [r5, #4]
    4b2c:	2800      	cmp	r0, #0
    4b2e:	d018      	beq.n	4b62 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    4b30:	4630      	mov	r0, r6
    4b32:	f000 f85f 	bl	4bf4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4b36:	4601      	mov	r1, r0
    4b38:	6868      	ldr	r0, [r5, #4]
    4b3a:	f009 fdd0 	bl	e6de <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4b3e:	0004      	movs	r4, r0
    4b40:	d00e      	beq.n	4b60 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4b42:	68a8      	ldr	r0, [r5, #8]
    4b44:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4b48:	b126      	cbz	r6, 4b54 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    4b4a:	f240 1145 	movw	r1, #325	; 0x145
    4b4e:	2017      	movs	r0, #23
    4b50:	f7ff fd32 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b54:	4805      	ldr	r0, [pc, #20]	; (4b6c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    4b56:	4642      	mov	r2, r8
    4b58:	4621      	mov	r1, r4
    4b5a:	6803      	ldr	r3, [r0, #0]
    4b5c:	4638      	mov	r0, r7
    4b5e:	4798      	blx	r3
    4b60:	4620      	mov	r0, r4
    4b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b66:	0000      	.short	0x0000
    4b68:	2000131c 	.word	0x2000131c
    4b6c:	00004c18 	.word	0x00004c18
    4b70:	b570      	push	{r4, r5, r6, lr}
    4b72:	460c      	mov	r4, r1
    4b74:	4605      	mov	r5, r0
    4b76:	f009 fe30 	bl	e7da <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    4b7a:	2800      	cmp	r0, #0
    4b7c:	d005      	beq.n	4b8a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    4b7e:	4803      	ldr	r0, [pc, #12]	; (4b8c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    4b80:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4b84:	6880      	ldr	r0, [r0, #8]
    4b86:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4b8a:	bd70      	pop	{r4, r5, r6, pc}
    4b8c:	2000131c 	.word	0x2000131c
    4b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b94:	4e16      	ldr	r6, [pc, #88]	; (4bf0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    4b96:	4688      	mov	r8, r1
    4b98:	4605      	mov	r5, r0
    4b9a:	2400      	movs	r4, #0
    4b9c:	6828      	ldr	r0, [r5, #0]
    4b9e:	1cc0      	adds	r0, r0, #3
    4ba0:	f020 0003 	bic.w	r0, r0, #3
    4ba4:	6028      	str	r0, [r5, #0]
    4ba6:	4620      	mov	r0, r4
    4ba8:	f000 f824 	bl	4bf4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4bac:	5d31      	ldrb	r1, [r6, r4]
    4bae:	4348      	muls	r0, r1
    4bb0:	f1b8 0f00 	cmp.w	r8, #0
    4bb4:	d001      	beq.n	4bba <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    4bb6:	2200      	movs	r2, #0
    4bb8:	e000      	b.n	4bbc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    4bba:	682a      	ldr	r2, [r5, #0]
    4bbc:	4601      	mov	r1, r0
    4bbe:	9200      	str	r2, [sp, #0]
    4bc0:	b132      	cbz	r2, 4bd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4bc2:	2700      	movs	r7, #0
    4bc4:	ea4f 000d 	mov.w	r0, sp
    4bc8:	f009 fdba 	bl	e740 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4bcc:	b11f      	cbz	r7, 4bd6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    4bce:	e006      	b.n	4bde <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    4bd0:	2701      	movs	r7, #1
    4bd2:	2000      	movs	r0, #0
    4bd4:	e7f8      	b.n	4bc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    4bd6:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4bda:	9a00      	ldr	r2, [sp, #0]
    4bdc:	604a      	str	r2, [r1, #4]
    4bde:	6829      	ldr	r1, [r5, #0]
    4be0:	1c64      	adds	r4, r4, #1
    4be2:	4408      	add	r0, r1
    4be4:	6028      	str	r0, [r5, #0]
    4be6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    4bea:	d0d7      	beq.n	4b9c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    4bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4bf0:	2000131c 	.word	0x2000131c
    4bf4:	4903      	ldr	r1, [pc, #12]	; (4c04 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    4bf6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4bfa:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4bfe:	1cc0      	adds	r0, r0, #3
    4c00:	4008      	ands	r0, r1
    4c02:	4770      	bx	lr
    4c04:	00004c14 	.word	0x00004c14
    4c08:	4801      	ldr	r0, [pc, #4]	; (4c10 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    4c0a:	7800      	ldrb	r0, [r0, #0]
    4c0c:	4770      	bx	lr
    4c0e:	0000      	.short	0x0000
    4c10:	2000131c 	.word	0x2000131c
    4c14:	00000248 	.word	0x00000248
    4c18:	0000e7ef 	.word	0x0000e7ef
    4c1c:	0000fc25 	.word	0x0000fc25

00004c20 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4c20:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c24:	4c27      	ldr	r4, [pc, #156]	; (4cc4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa4>)
    4c26:	4606      	mov	r6, r0
    4c28:	b081      	sub	sp, #4
    4c2a:	6820      	ldr	r0, [r4, #0]
    4c2c:	469a      	mov	sl, r3
    4c2e:	4693      	mov	fp, r2
    4c30:	b158      	cbz	r0, 4c4a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4c32:	7a01      	ldrb	r1, [r0, #8]
    4c34:	42b1      	cmp	r1, r6
    4c36:	d903      	bls.n	4c40 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4c38:	6840      	ldr	r0, [r0, #4]
    4c3a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    4c3e:	b140      	cbz	r0, 4c52 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4c40:	f243 0002 	movw	r0, #12290	; 0x3002
    4c44:	b005      	add	sp, #20
    4c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c4a:	21a5      	movs	r1, #165	; 0xa5
    4c4c:	2018      	movs	r0, #24
    4c4e:	f7ff fcb3 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c52:	4619      	mov	r1, r3
    4c54:	9802      	ldr	r0, [sp, #8]
    4c56:	f009 fde4 	bl	e822 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    4c5a:	4680      	mov	r8, r0
    4c5c:	4658      	mov	r0, fp
    4c5e:	990e      	ldr	r1, [sp, #56]	; 0x38
    4c60:	f009 fdd5 	bl	e80e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    4c64:	4605      	mov	r5, r0
    4c66:	eb08 0005 	add.w	r0, r8, r5
    4c6a:	1d00      	adds	r0, r0, #4
    4c6c:	b287      	uxth	r7, r0
    4c6e:	6820      	ldr	r0, [r4, #0]
    4c70:	46a1      	mov	r9, r4
    4c72:	4639      	mov	r1, r7
    4c74:	6800      	ldr	r0, [r0, #0]
    4c76:	f009 fd32 	bl	e6de <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4c7a:	0004      	movs	r4, r0
    4c7c:	d01f      	beq.n	4cbe <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9e>
    4c7e:	8067      	strh	r7, [r4, #2]
    4c80:	8025      	strh	r5, [r4, #0]
    4c82:	4629      	mov	r1, r5
    4c84:	1d20      	adds	r0, r4, #4
    4c86:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4c88:	4607      	mov	r7, r0
    4c8a:	465a      	mov	r2, fp
    4c8c:	2301      	movs	r3, #1
    4c8e:	9500      	str	r5, [sp, #0]
    4c90:	f009 fc84 	bl	e59c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4c94:	8820      	ldrh	r0, [r4, #0]
    4c96:	4641      	mov	r1, r8
    4c98:	4438      	add	r0, r7
    4c9a:	230a      	movs	r3, #10
    4c9c:	9a02      	ldr	r2, [sp, #8]
    4c9e:	f8cd a000 	str.w	sl, [sp]
    4ca2:	f009 fc7b 	bl	e59c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4ca6:	8820      	ldrh	r0, [r4, #0]
    4ca8:	19c1      	adds	r1, r0, r7
    4caa:	4638      	mov	r0, r7
    4cac:	f009 fca7 	bl	e5fe <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4cb0:	f8d9 0000 	ldr.w	r0, [r9]
    4cb4:	6840      	ldr	r0, [r0, #4]
    4cb6:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    4cba:	2000      	movs	r0, #0
    4cbc:	e7c2      	b.n	4c44 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4cbe:	2004      	movs	r0, #4
    4cc0:	e7c0      	b.n	4c44 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4cc2:	0000      	.short	0x0000
    4cc4:	200000c0 	.word	0x200000c0

00004cc8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4cc8:	b570      	push	{r4, r5, r6, lr}
    4cca:	4c14      	ldr	r4, [pc, #80]	; (4d1c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4ccc:	6823      	ldr	r3, [r4, #0]
    4cce:	b18b      	cbz	r3, 4cf4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4cd0:	7a19      	ldrb	r1, [r3, #8]
    4cd2:	4281      	cmp	r1, r0
    4cd4:	d912      	bls.n	4cfc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4cd6:	685a      	ldr	r2, [r3, #4]
    4cd8:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4cdc:	b171      	cbz	r1, 4cfc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4cde:	2500      	movs	r5, #0
    4ce0:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4ce4:	884a      	ldrh	r2, [r1, #2]
    4ce6:	6818      	ldr	r0, [r3, #0]
    4ce8:	f009 fd51 	bl	e78e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4cec:	6821      	ldr	r1, [r4, #0]
    4cee:	2000      	movs	r0, #0
    4cf0:	7a0a      	ldrb	r2, [r1, #8]
    4cf2:	e00c      	b.n	4d0e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4cf4:	21c8      	movs	r1, #200	; 0xc8
    4cf6:	2018      	movs	r0, #24
    4cf8:	f7ff fc5e 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cfc:	f243 0002 	movw	r0, #12290	; 0x3002
    4d00:	bd70      	pop	{r4, r5, r6, pc}
    4d02:	684b      	ldr	r3, [r1, #4]
    4d04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4d08:	b933      	cbnz	r3, 4d18 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4d0a:	1c40      	adds	r0, r0, #1
    4d0c:	b2c0      	uxtb	r0, r0
    4d0e:	4282      	cmp	r2, r0
    4d10:	d8f7      	bhi.n	4d02 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4d12:	6808      	ldr	r0, [r1, #0]
    4d14:	f009 fd30 	bl	e778 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4d18:	2000      	movs	r0, #0
    4d1a:	bd70      	pop	{r4, r5, r6, pc}
    4d1c:	200000c0 	.word	0x200000c0

00004d20 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d24:	460d      	mov	r5, r1
    4d26:	0004      	movs	r4, r0
    4d28:	4690      	mov	r8, r2
    4d2a:	f04f 0600 	mov.w	r6, #0
    4d2e:	d009      	beq.n	4d44 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4d30:	2700      	movs	r7, #0
    4d32:	1ce0      	adds	r0, r4, #3
    4d34:	f020 0003 	bic.w	r0, r0, #3
    4d38:	42a0      	cmp	r0, r4
    4d3a:	d005      	beq.n	4d48 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4d3c:	2186      	movs	r1, #134	; 0x86
    4d3e:	2018      	movs	r0, #24
    4d40:	f7ff fc3a 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d44:	2701      	movs	r7, #1
    4d46:	e7f4      	b.n	4d32 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4d48:	b1cd      	cbz	r5, 4d7e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4d4a:	4611      	mov	r1, r2
    4d4c:	2000      	movs	r0, #0
    4d4e:	f009 fcf7 	bl	e740 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4d52:	300c      	adds	r0, #12
    4d54:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4d58:	b98f      	cbnz	r7, 4d7e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4d5a:	4f0a      	ldr	r7, [pc, #40]	; (4d84 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4d5c:	f104 000c 	add.w	r0, r4, #12
    4d60:	00aa      	lsls	r2, r5, #2
    4d62:	603c      	str	r4, [r7, #0]
    4d64:	7225      	strb	r5, [r4, #8]
    4d66:	6060      	str	r0, [r4, #4]
    4d68:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4d6c:	6020      	str	r0, [r4, #0]
    4d6e:	2100      	movs	r1, #0
    4d70:	6860      	ldr	r0, [r4, #4]
    4d72:	f008 fcdc 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4d76:	4641      	mov	r1, r8
    4d78:	6838      	ldr	r0, [r7, #0]
    4d7a:	f009 fce1 	bl	e740 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4d7e:	4630      	mov	r0, r6
    4d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d84:	200000c0 	.word	0x200000c0

00004d88 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4d88:	b570      	push	{r4, r5, r6, lr}
    4d8a:	4d08      	ldr	r5, [pc, #32]	; (4dac <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4d8c:	6828      	ldr	r0, [r5, #0]
    4d8e:	2800      	cmp	r0, #0
    4d90:	d00a      	beq.n	4da8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4d92:	2400      	movs	r4, #0
    4d94:	e004      	b.n	4da0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4d96:	4620      	mov	r0, r4
    4d98:	f7ff ff96 	bl	4cc8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4d9c:	1c64      	adds	r4, r4, #1
    4d9e:	b2e4      	uxtb	r4, r4
    4da0:	6828      	ldr	r0, [r5, #0]
    4da2:	7a00      	ldrb	r0, [r0, #8]
    4da4:	42a0      	cmp	r0, r4
    4da6:	d8f6      	bhi.n	4d96 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4da8:	bd70      	pop	{r4, r5, r6, pc}
    4daa:	0000      	.short	0x0000
    4dac:	200000c0 	.word	0x200000c0

00004db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4db0:	4909      	ldr	r1, [pc, #36]	; (4dd8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4db2:	b510      	push	{r4, lr}
    4db4:	4602      	mov	r2, r0
    4db6:	6809      	ldr	r1, [r1, #0]
    4db8:	2000      	movs	r0, #0
    4dba:	b149      	cbz	r1, 4dd0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4dbc:	7a0b      	ldrb	r3, [r1, #8]
    4dbe:	4293      	cmp	r3, r2
    4dc0:	d905      	bls.n	4dce <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4dc2:	6849      	ldr	r1, [r1, #4]
    4dc4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4dc8:	2900      	cmp	r1, #0
    4dca:	d000      	beq.n	4dce <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4dcc:	1d08      	adds	r0, r1, #4
    4dce:	bd10      	pop	{r4, pc}
    4dd0:	21ee      	movs	r1, #238	; 0xee
    4dd2:	2018      	movs	r0, #24
    4dd4:	f7ff fbf0 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dd8:	200000c0 	.word	0x200000c0

00004ddc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4ddc:	490a      	ldr	r1, [pc, #40]	; (4e08 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4dde:	b510      	push	{r4, lr}
    4de0:	4602      	mov	r2, r0
    4de2:	6809      	ldr	r1, [r1, #0]
    4de4:	2000      	movs	r0, #0
    4de6:	b159      	cbz	r1, 4e00 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4de8:	7a0b      	ldrb	r3, [r1, #8]
    4dea:	4293      	cmp	r3, r2
    4dec:	d907      	bls.n	4dfe <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4dee:	6849      	ldr	r1, [r1, #4]
    4df0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4df4:	2900      	cmp	r1, #0
    4df6:	d002      	beq.n	4dfe <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4df8:	f831 0b04 	ldrh.w	r0, [r1], #4
    4dfc:	4408      	add	r0, r1
    4dfe:	bd10      	pop	{r4, pc}
    4e00:	21fc      	movs	r1, #252	; 0xfc
    4e02:	2018      	movs	r0, #24
    4e04:	f7ff fbd8 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e08:	200000c0 	.word	0x200000c0

00004e0c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    4e0c:	4801      	ldr	r0, [pc, #4]	; (4e14 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    4e0e:	7840      	ldrb	r0, [r0, #1]
    4e10:	4770      	bx	lr
    4e12:	0000      	.short	0x0000
    4e14:	200000c4 	.word	0x200000c4

00004e18 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    4e18:	4801      	ldr	r0, [pc, #4]	; (4e20 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    4e1a:	6840      	ldr	r0, [r0, #4]
    4e1c:	4770      	bx	lr
    4e1e:	0000      	.short	0x0000
    4e20:	200000c4 	.word	0x200000c4

00004e24 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    4e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4e28:	460c      	mov	r4, r1
    4e2a:	4607      	mov	r7, r0
    4e2c:	4616      	mov	r6, r2
    4e2e:	2125      	movs	r1, #37	; 0x25
    4e30:	4610      	mov	r0, r2
    4e32:	460d      	mov	r5, r1
    4e34:	4622      	mov	r2, r4
    4e36:	f009 fc0c 	bl	e652 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    4e3a:	4680      	mov	r8, r0
    4e3c:	b157      	cbz	r7, 4e54 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    4e3e:	4638      	mov	r0, r7
    4e40:	4641      	mov	r1, r8
    4e42:	4632      	mov	r2, r6
    4e44:	462b      	mov	r3, r5
    4e46:	9400      	str	r4, [sp, #0]
    4e48:	f009 fba8 	bl	e59c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4e4c:	4803      	ldr	r0, [pc, #12]	; (4e5c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    4e4e:	6047      	str	r7, [r0, #4]
    4e50:	7004      	strb	r4, [r0, #0]
    4e52:	7046      	strb	r6, [r0, #1]
    4e54:	4640      	mov	r0, r8
    4e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4e5a:	0000      	.short	0x0000
    4e5c:	200000c4 	.word	0x200000c4

00004e60 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    4e60:	4802      	ldr	r0, [pc, #8]	; (4e6c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    4e62:	7842      	ldrb	r2, [r0, #1]
    4e64:	7801      	ldrb	r1, [r0, #0]
    4e66:	6840      	ldr	r0, [r0, #4]
    4e68:	f7ff bfdc 	b.w	4e24 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4e6c:	200000c4 	.word	0x200000c4
    4e70:	b530      	push	{r4, r5, lr}
    4e72:	490d      	ldr	r1, [pc, #52]	; (4ea8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
    4e74:	2001      	movs	r0, #1
    4e76:	6048      	str	r0, [r1, #4]
    4e78:	1e82      	subs	r2, r0, #2
    4e7a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4e7e:	490b      	ldr	r1, [pc, #44]	; (4eac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
    4e80:	6088      	str	r0, [r1, #8]
    4e82:	2300      	movs	r3, #0
    4e84:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    4e88:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4e8c:	4c08      	ldr	r4, [pc, #32]	; (4eb0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
    4e8e:	6023      	str	r3, [r4, #0]
    4e90:	1d25      	adds	r5, r4, #4
    4e92:	6028      	str	r0, [r5, #0]
    4e94:	6088      	str	r0, [r1, #8]
    4e96:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4e9a:	6023      	str	r3, [r4, #0]
    4e9c:	6028      	str	r0, [r5, #0]
    4e9e:	4906      	ldr	r1, [pc, #24]	; (4eb8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
    4ea0:	4804      	ldr	r0, [pc, #16]	; (4eb4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
    4ea2:	6008      	str	r0, [r1, #0]
    4ea4:	bd30      	pop	{r4, r5, pc}
    4ea6:	0000      	.short	0x0000
    4ea8:	4000e000 	.word	0x4000e000
    4eac:	4000f000 	.word	0x4000f000
    4eb0:	4000f500 	.word	0x4000f500
    4eb4:	3ff60000 	.word	0x3ff60000
    4eb8:	4001f508 	.word	0x4001f508

00004ebc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4ebc:	b510      	push	{r4, lr}
    4ebe:	4604      	mov	r4, r0
    4ec0:	f7ff ffd6 	bl	4e70 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4ec4:	f009 fcd5 	bl	e872 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    4ec8:	f000 f888 	bl	4fdc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4ecc:	4905      	ldr	r1, [pc, #20]	; (4ee4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    4ece:	4804      	ldr	r0, [pc, #16]	; (4ee0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    4ed0:	6008      	str	r0, [r1, #0]
    4ed2:	4620      	mov	r0, r4
    4ed4:	f000 f8b8 	bl	5048 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4edc:	f000 b8d0 	b.w	5080 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4ee0:	3ff60000 	.word	0x3ff60000
    4ee4:	4001f508 	.word	0x4001f508
    4ee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4eec:	4682      	mov	sl, r0
    4eee:	4838      	ldr	r0, [pc, #224]	; (4fd0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4ef0:	f008 fafa 	bl	d4e8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4ef4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 4fd0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    4ef8:	b128      	cbz	r0, 4f06 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    4efa:	2601      	movs	r6, #1
    4efc:	f10b 0001 	add.w	r0, fp, #1
    4f00:	21ff      	movs	r1, #255	; 0xff
    4f02:	7001      	strb	r1, [r0, #0]
    4f04:	e000      	b.n	4f08 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    4f06:	2600      	movs	r6, #0
    4f08:	f44f 7580 	mov.w	r5, #256	; 0x100
    4f0c:	4c31      	ldr	r4, [pc, #196]	; (4fd4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    4f0e:	f04f 0800 	mov.w	r8, #0
    4f12:	1d2f      	adds	r7, r5, #4
    4f14:	2101      	movs	r1, #1
    4f16:	6061      	str	r1, [r4, #4]
    4f18:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4f1c:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4f20:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    4f24:	6021      	str	r1, [r4, #0]
    4f26:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4fd8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    4f2a:	e01c      	b.n	4f66 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4f2c:	f8d9 0000 	ldr.w	r0, [r9]
    4f30:	06c0      	lsls	r0, r0, #27
    4f32:	d518      	bpl.n	4f66 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4f34:	200e      	movs	r0, #14
    4f36:	f009 fcab 	bl	e890 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    4f3a:	f3ef 8010 	mrs	r0, PRIMASK
    4f3e:	9000      	str	r0, [sp, #0]
    4f40:	b672      	cpsid	i
    4f42:	2103      	movs	r1, #3
    4f44:	4620      	mov	r0, r4
    4f46:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    4f4a:	4629      	mov	r1, r5
    4f4c:	f009 fcad 	bl	e8aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    4f50:	b930      	cbnz	r0, 4f60 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    4f52:	4639      	mov	r1, r7
    4f54:	4620      	mov	r0, r4
    4f56:	f009 fca8 	bl	e8aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    4f5a:	b908      	cbnz	r0, 4f60 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    4f5c:	f7ff f938 	bl	41d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4f60:	9800      	ldr	r0, [sp, #0]
    4f62:	b900      	cbnz	r0, 4f66 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    4f64:	b662      	cpsie	i
    4f66:	4629      	mov	r1, r5
    4f68:	4620      	mov	r0, r4
    4f6a:	f009 fc9e 	bl	e8aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    4f6e:	b928      	cbnz	r0, 4f7c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    4f70:	4639      	mov	r1, r7
    4f72:	4620      	mov	r0, r4
    4f74:	f009 fc99 	bl	e8aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    4f78:	2800      	cmp	r0, #0
    4f7a:	d0d7      	beq.n	4f2c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    4f7c:	4639      	mov	r1, r7
    4f7e:	4620      	mov	r0, r4
    4f80:	f009 fc93 	bl	e8aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    4f84:	2800      	cmp	r0, #0
    4f86:	d1c5      	bne.n	4f14 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    4f88:	bb06      	cbnz	r6, 4fcc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    4f8a:	f89b 1001 	ldrb.w	r1, [fp, #1]
    4f8e:	f88d 1000 	strb.w	r1, [sp]
    4f92:	9900      	ldr	r1, [sp, #0]
    4f94:	9100      	str	r1, [sp, #0]
    4f96:	f89d 1000 	ldrb.w	r1, [sp]
    4f9a:	b109      	cbz	r1, 4fa0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    4f9c:	2501      	movs	r5, #1
    4f9e:	e000      	b.n	4fa2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    4fa0:	2500      	movs	r5, #0
    4fa2:	f10b 0001 	add.w	r0, fp, #1
    4fa6:	f880 8000 	strb.w	r8, [r0]
    4faa:	2003      	movs	r0, #3
    4fac:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4fb0:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4fb4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4fb8:	200e      	movs	r0, #14
    4fba:	f009 fc69 	bl	e890 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    4fbe:	4804      	ldr	r0, [pc, #16]	; (4fd0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    4fc0:	f008 faa9 	bl	d516 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4fc4:	b115      	cbz	r5, 4fcc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    4fc6:	2011      	movs	r0, #17
    4fc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4fcc:	2000      	movs	r0, #0
    4fce:	e7fb      	b.n	4fc8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    4fd0:	20000318 	.word	0x20000318
    4fd4:	4000e000 	.word	0x4000e000
    4fd8:	e000ed10 	.word	0xe000ed10

00004fdc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4fdc:	b510      	push	{r4, lr}
    4fde:	4806      	ldr	r0, [pc, #24]	; (4ff8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    4fe0:	f008 fa95 	bl	d50e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4fe4:	b118      	cbz	r0, 4fee <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    4fe6:	2127      	movs	r1, #39	; 0x27
    4fe8:	201d      	movs	r0, #29
    4fea:	f7ff fae5 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fee:	4802      	ldr	r0, [pc, #8]	; (4ff8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    4ff0:	2100      	movs	r1, #0
    4ff2:	7041      	strb	r1, [r0, #1]
    4ff4:	bd10      	pop	{r4, pc}
    4ff6:	0000      	.short	0x0000
    4ff8:	20000318 	.word	0x20000318

00004ffc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4ffc:	b570      	push	{r4, r5, r6, lr}
    4ffe:	4911      	ldr	r1, [pc, #68]	; (5044 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    5000:	680a      	ldr	r2, [r1, #0]
    5002:	b1ea      	cbz	r2, 5040 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    5004:	2300      	movs	r3, #0
    5006:	461d      	mov	r5, r3
    5008:	2401      	movs	r4, #1
    500a:	684a      	ldr	r2, [r1, #4]
    500c:	1c52      	adds	r2, r2, #1
    500e:	604a      	str	r2, [r1, #4]
    5010:	2a0c      	cmp	r2, #12
    5012:	d300      	bcc.n	5016 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    5014:	604d      	str	r5, [r1, #4]
    5016:	790e      	ldrb	r6, [r1, #4]
    5018:	fa04 f206 	lsl.w	r2, r4, r6
    501c:	680e      	ldr	r6, [r1, #0]
    501e:	4216      	tst	r6, r2
    5020:	d00b      	beq.n	503a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    5022:	f3ef 8310 	mrs	r3, PRIMASK
    5026:	b672      	cpsid	i
    5028:	680c      	ldr	r4, [r1, #0]
    502a:	4394      	bics	r4, r2
    502c:	600c      	str	r4, [r1, #0]
    502e:	b903      	cbnz	r3, 5032 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    5030:	b662      	cpsie	i
    5032:	6849      	ldr	r1, [r1, #4]
    5034:	6001      	str	r1, [r0, #0]
    5036:	2000      	movs	r0, #0
    5038:	bd70      	pop	{r4, r5, r6, pc}
    503a:	1c5b      	adds	r3, r3, #1
    503c:	2b0c      	cmp	r3, #12
    503e:	d3e4      	bcc.n	500a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    5040:	2005      	movs	r0, #5
    5042:	bd70      	pop	{r4, r5, r6, pc}
    5044:	200000cc 	.word	0x200000cc

00005048 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5048:	4802      	ldr	r0, [pc, #8]	; (5054 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    504a:	2100      	movs	r1, #0
    504c:	6001      	str	r1, [r0, #0]
    504e:	6041      	str	r1, [r0, #4]
    5050:	4770      	bx	lr
    5052:	0000      	.short	0x0000
    5054:	200000cc 	.word	0x200000cc

00005058 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5058:	b510      	push	{r4, lr}
    505a:	4c08      	ldr	r4, [pc, #32]	; (507c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    505c:	7861      	ldrb	r1, [r4, #1]
    505e:	b109      	cbz	r1, 5064 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    5060:	200f      	movs	r0, #15
    5062:	bd10      	pop	{r4, pc}
    5064:	f7ff f840 	bl	40e8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5068:	7020      	strb	r0, [r4, #0]
    506a:	28ff      	cmp	r0, #255	; 0xff
    506c:	d001      	beq.n	5072 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    506e:	2000      	movs	r0, #0
    5070:	bd10      	pop	{r4, pc}
    5072:	2178      	movs	r1, #120	; 0x78
    5074:	201f      	movs	r0, #31
    5076:	f7ff fa9f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    507a:	0000      	.short	0x0000
    507c:	20000000 	.word	0x20000000

00005080 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    5080:	4901      	ldr	r1, [pc, #4]	; (5088 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    5082:	2000      	movs	r0, #0
    5084:	7048      	strb	r0, [r1, #1]
    5086:	4770      	bx	lr
    5088:	20000000 	.word	0x20000000

0000508c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    508c:	4806      	ldr	r0, [pc, #24]	; (50a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    508e:	4a07      	ldr	r2, [pc, #28]	; (50ac <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    5090:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5092:	8852      	ldrh	r2, [r2, #2]
    5094:	4291      	cmp	r1, r2
    5096:	d104      	bne.n	50a2 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5098:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    509c:	b108      	cbz	r0, 50a2 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    509e:	2000      	movs	r0, #0
    50a0:	4770      	bx	lr
    50a2:	2001      	movs	r0, #1
    50a4:	4770      	bx	lr
    50a6:	0000      	.short	0x0000
    50a8:	2000138c 	.word	0x2000138c
    50ac:	20000304 	.word	0x20000304

000050b0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    50b0:	4901      	ldr	r1, [pc, #4]	; (50b8 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    50b2:	8048      	strh	r0, [r1, #2]
    50b4:	4770      	bx	lr
    50b6:	0000      	.short	0x0000
    50b8:	20000304 	.word	0x20000304

000050bc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    50bc:	4808      	ldr	r0, [pc, #32]	; (50e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    50be:	4a09      	ldr	r2, [pc, #36]	; (50e4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    50c0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    50c2:	8852      	ldrh	r2, [r2, #2]
    50c4:	4291      	cmp	r1, r2
    50c6:	d109      	bne.n	50dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    50c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    50cc:	8481      	strh	r1, [r0, #36]	; 0x24
    50ce:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    50d2:	b119      	cbz	r1, 50dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    50d4:	2100      	movs	r1, #0
    50d6:	7001      	strb	r1, [r0, #0]
    50d8:	2001      	movs	r0, #1
    50da:	4770      	bx	lr
    50dc:	2000      	movs	r0, #0
    50de:	4770      	bx	lr
    50e0:	2000138c 	.word	0x2000138c
    50e4:	20000304 	.word	0x20000304

000050e8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    50e8:	4807      	ldr	r0, [pc, #28]	; (5108 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    50ea:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    50ee:	2901      	cmp	r1, #1
    50f0:	d007      	beq.n	5102 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    50f2:	2101      	movs	r1, #1
    50f4:	7001      	strb	r1, [r0, #0]
    50f6:	4805      	ldr	r0, [pc, #20]	; (510c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    50f8:	4903      	ldr	r1, [pc, #12]	; (5108 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    50fa:	8800      	ldrh	r0, [r0, #0]
    50fc:	8488      	strh	r0, [r1, #36]	; 0x24
    50fe:	2001      	movs	r0, #1
    5100:	4770      	bx	lr
    5102:	2000      	movs	r0, #0
    5104:	4770      	bx	lr
    5106:	0000      	.short	0x0000
    5108:	2000138c 	.word	0x2000138c
    510c:	20000304 	.word	0x20000304

00005110 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    5110:	4906      	ldr	r1, [pc, #24]	; (512c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    5112:	4b07      	ldr	r3, [pc, #28]	; (5130 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5114:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5116:	885b      	ldrh	r3, [r3, #2]
    5118:	429a      	cmp	r2, r3
    511a:	d105      	bne.n	5128 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    511c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5120:	b112      	cbz	r2, 5128 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5122:	6001      	str	r1, [r0, #0]
    5124:	2001      	movs	r0, #1
    5126:	4770      	bx	lr
    5128:	2000      	movs	r0, #0
    512a:	4770      	bx	lr
    512c:	2000138c 	.word	0x2000138c
    5130:	20000304 	.word	0x20000304

00005134 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5134:	4909      	ldr	r1, [pc, #36]	; (515c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5136:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5138:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    513c:	3bff      	subs	r3, #255	; 0xff
    513e:	d002      	beq.n	5146 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    5140:	2100      	movs	r1, #0
    5142:	6001      	str	r1, [r0, #0]
    5144:	e007      	b.n	5156 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5146:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    514a:	4904      	ldr	r1, [pc, #16]	; (515c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    514c:	2a01      	cmp	r2, #1
    514e:	d002      	beq.n	5156 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5150:	6001      	str	r1, [r0, #0]
    5152:	2001      	movs	r0, #1
    5154:	4770      	bx	lr
    5156:	2000      	movs	r0, #0
    5158:	4770      	bx	lr
    515a:	0000      	.short	0x0000
    515c:	2000138c 	.word	0x2000138c

00005160 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    5160:	4901      	ldr	r1, [pc, #4]	; (5168 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    5162:	8008      	strh	r0, [r1, #0]
    5164:	4770      	bx	lr
    5166:	0000      	.short	0x0000
    5168:	20000304 	.word	0x20000304

0000516c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    516c:	4905      	ldr	r1, [pc, #20]	; (5184 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    516e:	2000      	movs	r0, #0
    5170:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5174:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5178:	8488      	strh	r0, [r1, #36]	; 0x24
    517a:	4903      	ldr	r1, [pc, #12]	; (5188 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    517c:	8008      	strh	r0, [r1, #0]
    517e:	8048      	strh	r0, [r1, #2]
    5180:	4770      	bx	lr
    5182:	0000      	.short	0x0000
    5184:	2000138c 	.word	0x2000138c
    5188:	20000304 	.word	0x20000304
    518c:	4905      	ldr	r1, [pc, #20]	; (51a4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    518e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5190:	4282      	cmp	r2, r0
    5192:	d105      	bne.n	51a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5194:	2000      	movs	r0, #0
    5196:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    519a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    519e:	8488      	strh	r0, [r1, #36]	; 0x24
    51a0:	4770      	bx	lr
    51a2:	0000      	.short	0x0000
    51a4:	2000138c 	.word	0x2000138c

000051a8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    51a8:	4a0a      	ldr	r2, [pc, #40]	; (51d4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    51aa:	b110      	cbz	r0, 51b2 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    51ac:	2801      	cmp	r0, #1
    51ae:	d007      	beq.n	51c0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    51b0:	e00e      	b.n	51d0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    51b2:	7850      	ldrb	r0, [r2, #1]
    51b4:	b160      	cbz	r0, 51d0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    51b6:	f8d2 0002 	ldr.w	r0, [r2, #2]
    51ba:	6008      	str	r0, [r1, #0]
    51bc:	88d0      	ldrh	r0, [r2, #6]
    51be:	e004      	b.n	51ca <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    51c0:	7810      	ldrb	r0, [r2, #0]
    51c2:	b128      	cbz	r0, 51d0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    51c4:	6890      	ldr	r0, [r2, #8]
    51c6:	6008      	str	r0, [r1, #0]
    51c8:	8990      	ldrh	r0, [r2, #12]
    51ca:	8088      	strh	r0, [r1, #4]
    51cc:	2001      	movs	r0, #1
    51ce:	4770      	bx	lr
    51d0:	2000      	movs	r0, #0
    51d2:	4770      	bx	lr
    51d4:	2000031a 	.word	0x2000031a

000051d8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    51d8:	4a08      	ldr	r2, [pc, #32]	; (51fc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    51da:	2301      	movs	r3, #1
    51dc:	b138      	cbz	r0, 51ee <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    51de:	2801      	cmp	r0, #1
    51e0:	d104      	bne.n	51ec <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    51e2:	7013      	strb	r3, [r2, #0]
    51e4:	6808      	ldr	r0, [r1, #0]
    51e6:	6090      	str	r0, [r2, #8]
    51e8:	8888      	ldrh	r0, [r1, #4]
    51ea:	8190      	strh	r0, [r2, #12]
    51ec:	4770      	bx	lr
    51ee:	7053      	strb	r3, [r2, #1]
    51f0:	6808      	ldr	r0, [r1, #0]
    51f2:	f8c2 0002 	str.w	r0, [r2, #2]
    51f6:	8888      	ldrh	r0, [r1, #4]
    51f8:	80d0      	strh	r0, [r2, #6]
    51fa:	4770      	bx	lr
    51fc:	2000031a 	.word	0x2000031a

00005200 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    5200:	4906      	ldr	r1, [pc, #24]	; (521c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    5202:	b110      	cbz	r0, 520a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5204:	2801      	cmp	r0, #1
    5206:	d002      	beq.n	520e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5208:	e005      	b.n	5216 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    520a:	7848      	ldrb	r0, [r1, #1]
    520c:	e000      	b.n	5210 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    520e:	7808      	ldrb	r0, [r1, #0]
    5210:	b108      	cbz	r0, 5216 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5212:	2001      	movs	r0, #1
    5214:	4770      	bx	lr
    5216:	2000      	movs	r0, #0
    5218:	4770      	bx	lr
    521a:	0000      	.short	0x0000
    521c:	2000031a 	.word	0x2000031a

00005220 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5220:	4901      	ldr	r1, [pc, #4]	; (5228 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5222:	7708      	strb	r0, [r1, #28]
    5224:	4770      	bx	lr
    5226:	0000      	.short	0x0000
    5228:	20000b4a 	.word	0x20000b4a

0000522c <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI>:
    522c:	4608      	mov	r0, r1
    522e:	2100      	movs	r1, #0
    5230:	7041      	strb	r1, [r0, #1]
    5232:	211f      	movs	r1, #31
    5234:	f800 1b04 	strb.w	r1, [r0], #4
    5238:	220e      	movs	r2, #14
    523a:	4901      	ldr	r1, [pc, #4]	; (5240 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI+0x14>)
    523c:	f008 b9fd 	b.w	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5240:	20000b58 	.word	0x20000b58

00005244 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5244:	b510      	push	{r4, lr}
    5246:	4604      	mov	r4, r0
    5248:	f000 f95e 	bl	5508 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    524c:	b118      	cbz	r0, 5256 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    524e:	21c2      	movs	r1, #194	; 0xc2
    5250:	2027      	movs	r0, #39	; 0x27
    5252:	f7ff f9b1 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5256:	4803      	ldr	r0, [pc, #12]	; (5264 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5258:	2101      	movs	r1, #1
    525a:	f009 ff2a 	bl	f0b2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    525e:	4802      	ldr	r0, [pc, #8]	; (5268 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5260:	62c4      	str	r4, [r0, #44]	; 0x2c
    5262:	bd10      	pop	{r4, pc}
    5264:	20000b28 	.word	0x20000b28
    5268:	200000d4 	.word	0x200000d4

0000526c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    526c:	4901      	ldr	r1, [pc, #4]	; (5274 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    526e:	2001      	movs	r0, #1
    5270:	7188      	strb	r0, [r1, #6]
    5272:	4770      	bx	lr
    5274:	200000d4 	.word	0x200000d4

00005278 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    527c:	4d68      	ldr	r5, [pc, #416]	; (5420 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    527e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5280:	782e      	ldrb	r6, [r5, #0]
    5282:	bbee      	cbnz	r6, 5300 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5284:	b3e2      	cbz	r2, 5300 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5286:	b3db      	cbz	r3, 5300 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5288:	b3d4      	cbz	r4, 5300 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    528a:	f105 0614 	add.w	r6, r5, #20
    528e:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    5292:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    5296:	2700      	movs	r7, #0
    5298:	71af      	strb	r7, [r5, #6]
    529a:	716f      	strb	r7, [r5, #5]
    529c:	70ef      	strb	r7, [r5, #3]
    529e:	70af      	strb	r7, [r5, #2]
    52a0:	712f      	strb	r7, [r5, #4]
    52a2:	81af      	strh	r7, [r5, #12]
    52a4:	81ef      	strh	r7, [r5, #14]
    52a6:	f000 f973 	bl	5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    52aa:	4606      	mov	r6, r0
    52ac:	f000 f96a 	bl	5584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    52b0:	4604      	mov	r4, r0
    52b2:	f006 fec9 	bl	c048 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    52b6:	f006 fc69 	bl	bb8c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    52ba:	f994 0072 	ldrsb.w	r0, [r4, #114]	; 0x72
    52be:	f006 ff47 	bl	c150 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    52c2:	f104 001c 	add.w	r0, r4, #28
    52c6:	f007 f819 	bl	c2fc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    52ca:	6960      	ldr	r0, [r4, #20]
    52cc:	f007 f80c 	bl	c2e8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    52d0:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    52d4:	f007 f846 	bl	c364 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    52d8:	f04f 0a01 	mov.w	sl, #1
    52dc:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    52e0:	2000      	movs	r0, #0
    52e2:	f006 fdb7 	bl	be54 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    52e6:	2800      	cmp	r0, #0
    52e8:	d07e      	beq.n	53e8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    52ea:	484e      	ldr	r0, [pc, #312]	; (5424 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>)
    52ec:	f006 fe16 	bl	bf1c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    52f0:	8820      	ldrh	r0, [r4, #0]
    52f2:	f7ff fd73 	bl	4ddc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    52f6:	6328      	str	r0, [r5, #48]	; 0x30
    52f8:	8820      	ldrh	r0, [r4, #0]
    52fa:	f7ff fd59 	bl	4db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    52fe:	e000      	b.n	5302 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    5300:	e00a      	b.n	5318 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    5302:	6368      	str	r0, [r5, #52]	; 0x34
    5304:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
    5308:	f88d 0000 	strb.w	r0, [sp]
    530c:	9800      	ldr	r0, [sp, #0]
    530e:	9000      	str	r0, [sp, #0]
    5310:	f89d 0000 	ldrb.w	r0, [sp]
    5314:	b998      	cbnz	r0, 533e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5316:	e002      	b.n	531e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    5318:	f44f 718d 	mov.w	r1, #282	; 0x11a
    531c:	e07c      	b.n	5418 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>
    531e:	6f60      	ldr	r0, [r4, #116]	; 0x74
    5320:	b168      	cbz	r0, 533e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5322:	8f70      	ldrh	r0, [r6, #58]	; 0x3a
    5324:	88b1      	ldrh	r1, [r6, #4]
    5326:	4288      	cmp	r0, r1
    5328:	d109      	bne.n	533e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    532a:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    532e:	2201      	movs	r2, #1
    5330:	4408      	add	r0, r1
    5332:	8770      	strh	r0, [r6, #58]	; 0x3a
    5334:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
    5338:	6f61      	ldr	r1, [r4, #116]	; 0x74
    533a:	f7fd fd4f 	bl	2ddc <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    533e:	3678      	adds	r6, #120	; 0x78
    5340:	4839      	ldr	r0, [pc, #228]	; (5428 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b0>)
    5342:	e8b6 100e 	ldmia.w	r6!, {r1, r2, r3, ip}
    5346:	f100 0808 	add.w	r8, r0, #8
    534a:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    534e:	f856 1b04 	ldr.w	r1, [r6], #4
    5352:	f8c0 1021 	str.w	r1, [r0, #33]	; 0x21
    5356:	f856 198c 	ldr.w	r1, [r6], #-140
    535a:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
    535e:	f000 f993 	bl	5688 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    5362:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    5364:	4601      	mov	r1, r0
    5366:	46b9      	mov	r9, r7
    5368:	4610      	mov	r0, r2
    536a:	f009 fc75 	bl	ec58 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    536e:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    5370:	4281      	cmp	r1, r0
    5372:	d200      	bcs.n	5376 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5374:	4608      	mov	r0, r1
    5376:	7228      	strb	r0, [r5, #8]
    5378:	46a8      	mov	r8, r5
    537a:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    537e:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    5382:	7d37      	ldrb	r7, [r6, #20]
    5384:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
    5388:	2908      	cmp	r1, #8
    538a:	d100      	bne.n	538e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x116>
    538c:	2104      	movs	r1, #4
    538e:	f009 fc63 	bl	ec58 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5392:	b90f      	cbnz	r7, 5398 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    5394:	1d00      	adds	r0, r0, #4
    5396:	b280      	uxth	r0, r0
    5398:	4285      	cmp	r5, r0
    539a:	d200      	bcs.n	539e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x126>
    539c:	4628      	mov	r0, r5
    539e:	b2c0      	uxtb	r0, r0
    53a0:	f888 0009 	strb.w	r0, [r8, #9]
    53a4:	7d32      	ldrb	r2, [r6, #20]
    53a6:	b102      	cbz	r2, 53aa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x132>
    53a8:	2204      	movs	r2, #4
    53aa:	4410      	add	r0, r2
    53ac:	f888 0007 	strb.w	r0, [r8, #7]
    53b0:	7cf0      	ldrb	r0, [r6, #19]
    53b2:	b198      	cbz	r0, 53dc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x164>
    53b4:	481c      	ldr	r0, [pc, #112]	; (5428 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b0>)
    53b6:	464d      	mov	r5, r9
    53b8:	3008      	adds	r0, #8
    53ba:	f880 a018 	strb.w	sl, [r0, #24]
    53be:	e9d6 121a 	ldrd	r1, r2, [r6, #104]	; 0x68
    53c2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    53c6:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    53ca:	f009 fb23 	bl	ea14 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    53ce:	4916      	ldr	r1, [pc, #88]	; (5428 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b0>)
    53d0:	4603      	mov	r3, r0
    53d2:	22fb      	movs	r2, #251	; 0xfb
    53d4:	3108      	adds	r1, #8
    53d6:	4628      	mov	r0, r5
    53d8:	f006 fb44 	bl	ba64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    53dc:	2001      	movs	r0, #1
    53de:	f000 fbb9 	bl	5b54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>
    53e2:	4812      	ldr	r0, [pc, #72]	; (542c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b4>)
    53e4:	6800      	ldr	r0, [r0, #0]
    53e6:	e000      	b.n	53ea <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    53e8:	e012      	b.n	5410 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>
    53ea:	2803      	cmp	r0, #3
    53ec:	d012      	beq.n	5414 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19c>
    53ee:	280b      	cmp	r0, #11
    53f0:	d010      	beq.n	5414 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19c>
    53f2:	480d      	ldr	r0, [pc, #52]	; (5428 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b0>)
    53f4:	220e      	movs	r2, #14
    53f6:	2100      	movs	r1, #0
    53f8:	3052      	adds	r0, #82	; 0x52
    53fa:	f008 f998 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    53fe:	480a      	ldr	r0, [pc, #40]	; (5428 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b0>)
    5400:	88b1      	ldrh	r1, [r6, #4]
    5402:	3052      	adds	r0, #82	; 0x52
    5404:	8041      	strh	r1, [r0, #2]
    5406:	8821      	ldrh	r1, [r4, #0]
    5408:	8001      	strh	r1, [r0, #0]
    540a:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    540e:	7101      	strb	r1, [r0, #4]
    5410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5414:	f240 11d5 	movw	r1, #469	; 0x1d5
    5418:	2027      	movs	r0, #39	; 0x27
    541a:	f7ff f8cd 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    541e:	0000      	.short	0x0000
    5420:	200000d4 	.word	0x200000d4
    5424:	00005cd8 	.word	0x00005cd8
    5428:	20000af8 	.word	0x20000af8
    542c:	40001550 	.word	0x40001550

00005430 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5434:	4605      	mov	r5, r0
    5436:	f000 f8ab 	bl	5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    543a:	4e32      	ldr	r6, [pc, #200]	; (5504 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd4>)
    543c:	4604      	mov	r4, r0
    543e:	f04f 0800 	mov.w	r8, #0
    5442:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5444:	7847      	ldrb	r7, [r0, #1]
    5446:	b10d      	cbz	r5, 544c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1c>
    5448:	2d01      	cmp	r5, #1
    544a:	d101      	bne.n	5450 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    544c:	f886 8001 	strb.w	r8, [r6, #1]
    5450:	7870      	ldrb	r0, [r6, #1]
    5452:	f04f 0901 	mov.w	r9, #1
    5456:	b150      	cbz	r0, 546e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    5458:	2801      	cmp	r0, #1
    545a:	d01a      	beq.n	5492 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x62>
    545c:	2802      	cmp	r0, #2
    545e:	d034      	beq.n	54ca <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9a>
    5460:	2803      	cmp	r0, #3
    5462:	d048      	beq.n	54f6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc6>
    5464:	f240 411d 	movw	r1, #1053	; 0x41d
    5468:	2027      	movs	r0, #39	; 0x27
    546a:	f7ff f8a5 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    546e:	2d01      	cmp	r5, #1
    5470:	d032      	beq.n	54d8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5472:	f000 f8f5 	bl	5660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x13c>
    5476:	4639      	mov	r1, r7
    5478:	2201      	movs	r2, #1
    547a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    547c:	f008 ff04 	bl	e288 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5480:	e028      	b.n	54d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa4>
    5482:	bf00      	nop
    5484:	f884 8008 	strb.w	r8, [r4, #8]
    5488:	e031      	b.n	54ee <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    548a:	bf00      	nop
    548c:	f884 9008 	strb.w	r9, [r4, #8]
    5490:	e02d      	b.n	54ee <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5492:	2d01      	cmp	r5, #1
    5494:	d008      	beq.n	54a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    5496:	f000 f8e3 	bl	5660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x13c>
    549a:	4639      	mov	r1, r7
    549c:	2200      	movs	r2, #0
    549e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    54a0:	f008 fef2 	bl	e288 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    54a4:	2d02      	cmp	r5, #2
    54a6:	d00b      	beq.n	54c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    54a8:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    54ac:	1c40      	adds	r0, r0, #1
    54ae:	f141 0100 	adc.w	r1, r1, #0
    54b2:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    54b6:	7a20      	ldrb	r0, [r4, #8]
    54b8:	2801      	cmp	r0, #1
    54ba:	d003      	beq.n	54c4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    54bc:	f884 9008 	strb.w	r9, [r4, #8]
    54c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54c4:	f884 8008 	strb.w	r8, [r4, #8]
    54c8:	e7fa      	b.n	54c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    54ca:	2d01      	cmp	r5, #1
    54cc:	d004      	beq.n	54d8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    54ce:	6b70      	ldr	r0, [r6, #52]	; 0x34
    54d0:	f009 f900 	bl	e6d4 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    54d4:	2d02      	cmp	r5, #2
    54d6:	d0f3      	beq.n	54c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    54d8:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    54dc:	1c40      	adds	r0, r0, #1
    54de:	f141 0100 	adc.w	r1, r1, #0
    54e2:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    54e6:	7a20      	ldrb	r0, [r4, #8]
    54e8:	2801      	cmp	r0, #1
    54ea:	d1cf      	bne.n	548c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x5c>
    54ec:	e7ca      	b.n	5484 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x54>
    54ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54f2:	f001 ba0d 	b.w	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    54f6:	2d01      	cmp	r5, #1
    54f8:	d0e2      	beq.n	54c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    54fa:	6b70      	ldr	r0, [r6, #52]	; 0x34
    54fc:	f009 f8ea 	bl	e6d4 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5500:	e7f5      	b.n	54ee <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5502:	0000      	.short	0x0000
    5504:	200000d4 	.word	0x200000d4

00005508 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5508:	4804      	ldr	r0, [pc, #16]	; (551c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    550a:	7800      	ldrb	r0, [r0, #0]
    550c:	b108      	cbz	r0, 5512 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    550e:	200c      	movs	r0, #12
    5510:	4770      	bx	lr
    5512:	4903      	ldr	r1, [pc, #12]	; (5520 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5514:	2000      	movs	r0, #0
    5516:	7708      	strb	r0, [r1, #28]
    5518:	4770      	bx	lr
    551a:	0000      	.short	0x0000
    551c:	200000d4 	.word	0x200000d4
    5520:	20000b4a 	.word	0x20000b4a

00005524 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5524:	4812      	ldr	r0, [pc, #72]	; (5570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    5526:	b508      	push	{r3, lr}
    5528:	7801      	ldrb	r1, [r0, #0]
    552a:	b139      	cbz	r1, 553c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    552c:	7800      	ldrb	r0, [r0, #0]
    552e:	2801      	cmp	r0, #1
    5530:	d006      	beq.n	5540 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5532:	f240 11ed 	movw	r1, #493	; 0x1ed
    5536:	2027      	movs	r0, #39	; 0x27
    5538:	f7ff f83e 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    553c:	f000 f9f2 	bl	5924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x400>
    5540:	f000 f820 	bl	5584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5544:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    5548:	f88d 1000 	strb.w	r1, [sp]
    554c:	9900      	ldr	r1, [sp, #0]
    554e:	9100      	str	r1, [sp, #0]
    5550:	f89d 1000 	ldrb.w	r1, [sp]
    5554:	2900      	cmp	r1, #0
    5556:	d10a      	bne.n	556e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    5558:	6f41      	ldr	r1, [r0, #116]	; 0x74
    555a:	2900      	cmp	r1, #0
    555c:	d007      	beq.n	556e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    555e:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    5562:	2200      	movs	r2, #0
    5564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5568:	4611      	mov	r1, r2
    556a:	f7fd bc37 	b.w	2ddc <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    556e:	bd08      	pop	{r3, pc}
    5570:	200000d4 	.word	0x200000d4
    5574:	4a02      	ldr	r2, [pc, #8]	; (5580 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5576:	8993      	ldrh	r3, [r2, #12]
    5578:	4303      	orrs	r3, r0
    557a:	8193      	strh	r3, [r2, #12]
    557c:	6952      	ldr	r2, [r2, #20]
    557e:	4710      	bx	r2
    5580:	200000d4 	.word	0x200000d4
    5584:	4801      	ldr	r0, [pc, #4]	; (558c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5586:	6840      	ldr	r0, [r0, #4]
    5588:	4770      	bx	lr
    558a:	0000      	.short	0x0000
    558c:	2000010c 	.word	0x2000010c
    5590:	4801      	ldr	r0, [pc, #4]	; (5598 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    5592:	6840      	ldr	r0, [r0, #4]
    5594:	3080      	adds	r0, #128	; 0x80
    5596:	4770      	bx	lr
    5598:	2000010c 	.word	0x2000010c
    559c:	4a01      	ldr	r2, [pc, #4]	; (55a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    559e:	2100      	movs	r1, #0
    55a0:	6952      	ldr	r2, [r2, #20]
    55a2:	4710      	bx	r2
    55a4:	200000d4 	.word	0x200000d4
    55a8:	b570      	push	{r4, r5, r6, lr}
    55aa:	f7ff fff1 	bl	5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    55ae:	4604      	mov	r4, r0
    55b0:	f7ff ffe8 	bl	5584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    55b4:	4605      	mov	r5, r0
    55b6:	4621      	mov	r1, r4
    55b8:	f009 fc24 	bl	ee04 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    55bc:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    55c0:	2901      	cmp	r1, #1
    55c2:	d112      	bne.n	55ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc6>
    55c4:	2800      	cmp	r0, #0
    55c6:	d010      	beq.n	55ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc6>
    55c8:	4808      	ldr	r0, [pc, #32]	; (55ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc8>)
    55ca:	882a      	ldrh	r2, [r5, #0]
    55cc:	6841      	ldr	r1, [r0, #4]
    55ce:	f501 709a 	add.w	r0, r1, #308	; 0x134
    55d2:	8142      	strh	r2, [r0, #10]
    55d4:	7a62      	ldrb	r2, [r4, #9]
    55d6:	7302      	strb	r2, [r0, #12]
    55d8:	7aa2      	ldrb	r2, [r4, #10]
    55da:	7342      	strb	r2, [r0, #13]
    55dc:	2218      	movs	r2, #24
    55de:	f001 f8a5 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    55e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55e6:	f001 b993 	b.w	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    55ea:	bd70      	pop	{r4, r5, r6, pc}
    55ec:	2000010c 	.word	0x2000010c
    55f0:	b570      	push	{r4, r5, r6, lr}
    55f2:	4605      	mov	r5, r0
    55f4:	2901      	cmp	r1, #1
    55f6:	d81c      	bhi.n	5632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    55f8:	4c10      	ldr	r4, [pc, #64]	; (563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x118>)
    55fa:	69a1      	ldr	r1, [r4, #24]
    55fc:	4788      	blx	r1
    55fe:	b1c0      	cbz	r0, 5632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    5600:	7960      	ldrb	r0, [r4, #5]
    5602:	b9b0      	cbnz	r0, 5632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    5604:	2d01      	cmp	r5, #1
    5606:	d116      	bne.n	5636 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5608:	f104 0010 	add.w	r0, r4, #16
    560c:	7800      	ldrb	r0, [r0, #0]
    560e:	06c1      	lsls	r1, r0, #27
    5610:	d405      	bmi.n	561e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    5612:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5614:	7809      	ldrb	r1, [r1, #0]
    5616:	06c9      	lsls	r1, r1, #27
    5618:	d401      	bmi.n	561e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    561a:	2101      	movs	r1, #1
    561c:	e000      	b.n	5620 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfc>
    561e:	2100      	movs	r1, #0
    5620:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5622:	b91a      	cbnz	r2, 562c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5624:	8962      	ldrh	r2, [r4, #10]
    5626:	b10a      	cbz	r2, 562c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5628:	06c0      	lsls	r0, r0, #27
    562a:	d502      	bpl.n	5632 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    562c:	89a0      	ldrh	r0, [r4, #12]
    562e:	4301      	orrs	r1, r0
    5630:	d001      	beq.n	5636 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5632:	2001      	movs	r0, #1
    5634:	bd70      	pop	{r4, r5, r6, pc}
    5636:	2000      	movs	r0, #0
    5638:	bd70      	pop	{r4, r5, r6, pc}
    563a:	0000      	.short	0x0000
    563c:	200000d4 	.word	0x200000d4
    5640:	4b06      	ldr	r3, [pc, #24]	; (565c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>)
    5642:	b112      	cbz	r2, 564a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x126>
    5644:	8958      	ldrh	r0, [r3, #10]
    5646:	1c40      	adds	r0, r0, #1
    5648:	8158      	strh	r0, [r3, #10]
    564a:	b119      	cbz	r1, 5654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    564c:	88d8      	ldrh	r0, [r3, #6]
    564e:	1c40      	adds	r0, r0, #1
    5650:	80d8      	strh	r0, [r3, #6]
    5652:	4770      	bx	lr
    5654:	8918      	ldrh	r0, [r3, #8]
    5656:	1c40      	adds	r0, r0, #1
    5658:	8118      	strh	r0, [r3, #8]
    565a:	4770      	bx	lr
    565c:	20000b4a 	.word	0x20000b4a
    5660:	b510      	push	{r4, lr}
    5662:	4c08      	ldr	r4, [pc, #32]	; (5684 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x160>)
    5664:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5666:	b138      	cbz	r0, 5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x154>
    5668:	8962      	ldrh	r2, [r4, #10]
    566a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    566c:	1cd2      	adds	r2, r2, #3
    566e:	f007 ffe4 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5672:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5674:	6260      	str	r0, [r4, #36]	; 0x24
    5676:	bd10      	pop	{r4, pc}
    5678:	f240 4163 	movw	r1, #1123	; 0x463
    567c:	2027      	movs	r0, #39	; 0x27
    567e:	f7fe ff9b 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5682:	0000      	.short	0x0000
    5684:	200000d4 	.word	0x200000d4
    5688:	b510      	push	{r4, lr}
    568a:	f7ff ff7b 	bl	5584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    568e:	4604      	mov	r4, r0
    5690:	f7ff ff7e 	bl	5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5694:	7b41      	ldrb	r1, [r0, #13]
    5696:	4a0a      	ldr	r2, [pc, #40]	; (56c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19c>)
    5698:	2924      	cmp	r1, #36	; 0x24
    569a:	d008      	beq.n	56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18a>
    569c:	7b80      	ldrb	r0, [r0, #14]
    569e:	2824      	cmp	r0, #36	; 0x24
    56a0:	d005      	beq.n	56ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18a>
    56a2:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    56a6:	2804      	cmp	r0, #4
    56a8:	d100      	bne.n	56ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x188>
    56aa:	2008      	movs	r0, #8
    56ac:	bd10      	pop	{r4, pc}
    56ae:	6850      	ldr	r0, [r2, #4]
    56b0:	f890 1202 	ldrb.w	r1, [r0, #514]	; 0x202
    56b4:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    56b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56bc:	f009 b9b8 	b.w	ea30 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    56c0:	2000010c 	.word	0x2000010c
    56c4:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    56c8:	468b      	mov	fp, r1
    56ca:	4607      	mov	r7, r0
    56cc:	f7ff ff60 	bl	5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    56d0:	f04f 0900 	mov.w	r9, #0
    56d4:	4c63      	ldr	r4, [pc, #396]	; (5864 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x340>)
    56d6:	4605      	mov	r5, r0
    56d8:	f88d 9000 	strb.w	r9, [sp]
    56dc:	f8cd 9004 	str.w	r9, [sp, #4]
    56e0:	7820      	ldrb	r0, [r4, #0]
    56e2:	464e      	mov	r6, r9
    56e4:	2802      	cmp	r0, #2
    56e6:	d004      	beq.n	56f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ce>
    56e8:	f240 41ea 	movw	r1, #1258	; 0x4ea
    56ec:	2027      	movs	r0, #39	; 0x27
    56ee:	f7fe ff63 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56f2:	7ba0      	ldrb	r0, [r4, #14]
    56f4:	0640      	lsls	r0, r0, #25
    56f6:	d406      	bmi.n	5706 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e2>
    56f8:	2040      	movs	r0, #64	; 0x40
    56fa:	f7ff ff4f 	bl	559c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    56fe:	89e0      	ldrh	r0, [r4, #14]
    5700:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5704:	81e0      	strh	r0, [r4, #14]
    5706:	7d28      	ldrb	r0, [r5, #20]
    5708:	f04f 0801 	mov.w	r8, #1
    570c:	b3df      	cbz	r7, 5786 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x262>
    570e:	b180      	cbz	r0, 5732 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20e>
    5710:	f006 fa76 	bl	bc00 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5714:	f006 fa50 	bl	bbb8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5718:	b958      	cbnz	r0, 5732 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20e>
    571a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    571c:	7841      	ldrb	r1, [r0, #1]
    571e:	b141      	cbz	r1, 5732 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20e>
    5720:	7800      	ldrb	r0, [r0, #0]
    5722:	7a29      	ldrb	r1, [r5, #8]
    5724:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5728:	4288      	cmp	r0, r1
    572a:	d102      	bne.n	5732 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20e>
    572c:	f884 8002 	strb.w	r8, [r4, #2]
    5730:	e093      	b.n	585a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x336>
    5732:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5734:	7841      	ldrb	r1, [r0, #1]
    5736:	8161      	strh	r1, [r4, #10]
    5738:	b121      	cbz	r1, 5744 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x220>
    573a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    573c:	f008 ff97 	bl	e66e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5740:	62a0      	str	r0, [r4, #40]	; 0x28
    5742:	e000      	b.n	5746 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    5744:	62a6      	str	r6, [r4, #40]	; 0x28
    5746:	89e0      	ldrh	r0, [r4, #14]
    5748:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    574c:	81e0      	strh	r0, [r4, #14]
    574e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5750:	79e9      	ldrb	r1, [r5, #7]
    5752:	7800      	ldrb	r0, [r0, #0]
    5754:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5758:	4288      	cmp	r0, r1
    575a:	d007      	beq.n	576c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x248>
    575c:	a801      	add	r0, sp, #4
    575e:	f000 f977 	bl	5a50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    5762:	89e0      	ldrh	r0, [r4, #14]
    5764:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5768:	81e0      	strh	r0, [r4, #14]
    576a:	e001      	b.n	5770 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24c>
    576c:	f04f 0901 	mov.w	r9, #1
    5770:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5772:	7a29      	ldrb	r1, [r5, #8]
    5774:	7800      	ldrb	r0, [r0, #0]
    5776:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    577a:	4288      	cmp	r0, r1
    577c:	d10e      	bne.n	579c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    577e:	4668      	mov	r0, sp
    5780:	f000 f928 	bl	59d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    5784:	e00a      	b.n	579c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    5786:	e7ff      	b.n	5788 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x264>
    5788:	b108      	cbz	r0, 578e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    578a:	f006 fa33 	bl	bbf4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    578e:	78e0      	ldrb	r0, [r4, #3]
    5790:	1c40      	adds	r0, r0, #1
    5792:	70e0      	strb	r0, [r4, #3]
    5794:	89e0      	ldrh	r0, [r4, #14]
    5796:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    579a:	81e0      	strh	r0, [r4, #14]
    579c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 5864 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x340>
    57a0:	7ce8      	ldrb	r0, [r5, #19]
    57a2:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    57a6:	b190      	cbz	r0, 57ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    57a8:	f7ff feec 	bl	5584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    57ac:	492e      	ldr	r1, [pc, #184]	; (5868 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>)
    57ae:	f881 8018 	strb.w	r8, [r1, #24]
    57b2:	e9d5 231a 	ldrd	r2, r3, [r5, #104]	; 0x68
    57b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    57ba:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    57be:	f009 f929 	bl	ea14 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    57c2:	4603      	mov	r3, r0
    57c4:	22fb      	movs	r2, #251	; 0xfb
    57c6:	4928      	ldr	r1, [pc, #160]	; (5868 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>)
    57c8:	4630      	mov	r0, r6
    57ca:	f006 f94b 	bl	ba64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    57ce:	f04f 0800 	mov.w	r8, #0
    57d2:	f1bb 0f00 	cmp.w	fp, #0
    57d6:	d104      	bne.n	57e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    57d8:	78e1      	ldrb	r1, [r4, #3]
    57da:	2001      	movs	r0, #1
    57dc:	f7ff ff08 	bl	55f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>
    57e0:	b198      	cbz	r0, 580a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e6>
    57e2:	f006 fd6d 	bl	c2c0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    57e6:	f89d 0000 	ldrb.w	r0, [sp]
    57ea:	b110      	cbz	r0, 57f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ce>
    57ec:	2000      	movs	r0, #0
    57ee:	f7ff fe1f 	bl	5430 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    57f2:	88a8      	ldrh	r0, [r5, #4]
    57f4:	464a      	mov	r2, r9
    57f6:	4639      	mov	r1, r7
    57f8:	f7ff ff22 	bl	5640 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    57fc:	b117      	cbz	r7, 5804 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    57fe:	70e6      	strb	r6, [r4, #3]
    5800:	f7ff fed2 	bl	55a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5804:	f04f 0801 	mov.w	r8, #1
    5808:	e017      	b.n	583a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x316>
    580a:	f89d 0000 	ldrb.w	r0, [sp]
    580e:	b110      	cbz	r0, 5816 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f2>
    5810:	2001      	movs	r0, #1
    5812:	f7ff fe0d 	bl	5430 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5816:	2000      	movs	r0, #0
    5818:	f000 f99c 	bl	5b54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>
    581c:	f89d 0000 	ldrb.w	r0, [sp]
    5820:	b110      	cbz	r0, 5828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x304>
    5822:	2002      	movs	r0, #2
    5824:	f7ff fe04 	bl	5430 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5828:	88a8      	ldrh	r0, [r5, #4]
    582a:	464a      	mov	r2, r9
    582c:	4639      	mov	r1, r7
    582e:	f7ff ff07 	bl	5640 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    5832:	b117      	cbz	r7, 583a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x316>
    5834:	70e6      	strb	r6, [r4, #3]
    5836:	f7ff feb7 	bl	55a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    583a:	9801      	ldr	r0, [sp, #4]
    583c:	b150      	cbz	r0, 5854 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>
    583e:	f008 fd7b 	bl	e338 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5842:	f8da 1004 	ldr.w	r1, [sl, #4]
    5846:	1c40      	adds	r0, r0, #1
    5848:	7206      	strb	r6, [r0, #8]
    584a:	220b      	movs	r2, #11
    584c:	f000 ff6e 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5850:	f001 f85e 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5854:	f1b8 0f00 	cmp.w	r8, #0
    5858:	d001      	beq.n	585e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33a>
    585a:	f000 f863 	bl	5924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x400>
    585e:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5862:	0000      	.short	0x0000
    5864:	200000d4 	.word	0x200000d4
    5868:	20000b00 	.word	0x20000b00
    586c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5870:	4688      	mov	r8, r1
    5872:	4681      	mov	r9, r0
    5874:	f7ff fe8c 	bl	5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5878:	4d28      	ldr	r5, [pc, #160]	; (591c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    587a:	4604      	mov	r4, r0
    587c:	7828      	ldrb	r0, [r5, #0]
    587e:	2801      	cmp	r0, #1
    5880:	d004      	beq.n	588c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x368>
    5882:	f240 4172 	movw	r1, #1138	; 0x472
    5886:	2027      	movs	r0, #39	; 0x27
    5888:	f7fe fe96 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    588c:	7820      	ldrb	r0, [r4, #0]
    588e:	2600      	movs	r6, #0
    5890:	2701      	movs	r7, #1
    5892:	b120      	cbz	r0, 589e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x37a>
    5894:	7026      	strb	r6, [r4, #0]
    5896:	2100      	movs	r1, #0
    5898:	2004      	movs	r0, #4
    589a:	f7ff fe6b 	bl	5574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    589e:	6a29      	ldr	r1, [r5, #32]
    58a0:	7808      	ldrb	r0, [r1, #0]
    58a2:	43c0      	mvns	r0, r0
    58a4:	0780      	lsls	r0, r0, #30
    58a6:	d109      	bne.n	58bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    58a8:	79a0      	ldrb	r0, [r4, #6]
    58aa:	bb78      	cbnz	r0, 590c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
    58ac:	2002      	movs	r0, #2
    58ae:	f7ff fe61 	bl	5574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    58b2:	6a28      	ldr	r0, [r5, #32]
    58b4:	7800      	ldrb	r0, [r0, #0]
    58b6:	43c0      	mvns	r0, r0
    58b8:	0780      	lsls	r0, r0, #30
    58ba:	d027      	beq.n	590c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
    58bc:	6a28      	ldr	r0, [r5, #32]
    58be:	7840      	ldrb	r0, [r0, #1]
    58c0:	b110      	cbz	r0, 58c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    58c2:	2002      	movs	r0, #2
    58c4:	71a0      	strb	r0, [r4, #6]
    58c6:	e000      	b.n	58ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    58c8:	71a7      	strb	r7, [r4, #6]
    58ca:	7d20      	ldrb	r0, [r4, #20]
    58cc:	b190      	cbz	r0, 58f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>
    58ce:	f7ff fe59 	bl	5584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    58d2:	4913      	ldr	r1, [pc, #76]	; (5920 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    58d4:	7a6d      	ldrb	r5, [r5, #9]
    58d6:	760e      	strb	r6, [r1, #24]
    58d8:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    58dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    58e0:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    58e4:	f009 f896 	bl	ea14 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    58e8:	4603      	mov	r3, r0
    58ea:	462a      	mov	r2, r5
    58ec:	490c      	ldr	r1, [pc, #48]	; (5920 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    58ee:	4638      	mov	r0, r7
    58f0:	f006 f8b8 	bl	ba64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    58f4:	ea38 0009 	bics.w	r0, r8, r9
    58f8:	d004      	beq.n	5904 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>
    58fa:	2100      	movs	r1, #0
    58fc:	4608      	mov	r0, r1
    58fe:	f7ff fe77 	bl	55f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>
    5902:	b128      	cbz	r0, 5910 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>
    5904:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5908:	f000 b80c 	b.w	5924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x400>
    590c:	2003      	movs	r0, #3
    590e:	e7d9      	b.n	58c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5910:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5914:	2000      	movs	r0, #0
    5916:	f000 b8e1 	b.w	5adc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    591a:	0000      	.short	0x0000
    591c:	200000d4 	.word	0x200000d4
    5920:	20000b00 	.word	0x20000b00
    5924:	b510      	push	{r4, lr}
    5926:	f006 fa0b 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    592a:	f006 f92f 	bl	bb8c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    592e:	4c0e      	ldr	r4, [pc, #56]	; (5968 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    5930:	89e0      	ldrh	r0, [r4, #14]
    5932:	f7ff fe33 	bl	559c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5936:	69e2      	ldr	r2, [r4, #28]
    5938:	7961      	ldrb	r1, [r4, #5]
    593a:	78a0      	ldrb	r0, [r4, #2]
    593c:	4790      	blx	r2
    593e:	480b      	ldr	r0, [pc, #44]	; (596c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    5940:	7f00      	ldrb	r0, [r0, #28]
    5942:	b168      	cbz	r0, 5960 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x43c>
    5944:	4909      	ldr	r1, [pc, #36]	; (596c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    5946:	220e      	movs	r2, #14
    5948:	f101 000e 	add.w	r0, r1, #14
    594c:	f007 fe75 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5950:	4806      	ldr	r0, [pc, #24]	; (596c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    5952:	221d      	movs	r2, #29
    5954:	2100      	movs	r1, #0
    5956:	301d      	adds	r0, #29
    5958:	f000 fee8 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    595c:	f000 ffd8 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5960:	2000      	movs	r0, #0
    5962:	7020      	strb	r0, [r4, #0]
    5964:	bd10      	pop	{r4, pc}
    5966:	0000      	.short	0x0000
    5968:	200000d4 	.word	0x200000d4
    596c:	20000b4a 	.word	0x20000b4a
    5970:	4808      	ldr	r0, [pc, #32]	; (5994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>)
    5972:	b510      	push	{r4, lr}
    5974:	7800      	ldrb	r0, [r0, #0]
    5976:	2802      	cmp	r0, #2
    5978:	d004      	beq.n	5984 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    597a:	f240 212a 	movw	r1, #554	; 0x22a
    597e:	2027      	movs	r0, #39	; 0x27
    5980:	f7fe fe1a 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5984:	4904      	ldr	r1, [pc, #16]	; (5998 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x474>)
    5986:	2001      	movs	r0, #1
    5988:	7308      	strb	r0, [r1, #12]
    598a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    598e:	f7ff bfc9 	b.w	5924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x400>
    5992:	0000      	.short	0x0000
    5994:	200000d4 	.word	0x200000d4
    5998:	20000b4a 	.word	0x20000b4a
    599c:	4b0c      	ldr	r3, [pc, #48]	; (59d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ac>)
    599e:	b430      	push	{r4, r5}
    59a0:	79db      	ldrb	r3, [r3, #7]
    59a2:	b93a      	cbnz	r2, 59b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x490>
    59a4:	2bff      	cmp	r3, #255	; 0xff
    59a6:	d105      	bne.n	59b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x490>
    59a8:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    59ac:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
    59b0:	42a2      	cmp	r2, r4
    59b2:	d00a      	beq.n	59ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a6>
    59b4:	b129      	cbz	r1, 59c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x49e>
    59b6:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    59ba:	bc30      	pop	{r4, r5}
    59bc:	4618      	mov	r0, r3
    59be:	f006 bca7 	b.w	c310 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    59c2:	23ff      	movs	r3, #255	; 0xff
    59c4:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    59c8:	e7f7      	b.n	59ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x496>
    59ca:	bc30      	pop	{r4, r5}
    59cc:	4770      	bx	lr
    59ce:	0000      	.short	0x0000
    59d0:	200000d4 	.word	0x200000d4
    59d4:	b570      	push	{r4, r5, r6, lr}
    59d6:	4606      	mov	r6, r0
    59d8:	f7ff fdda 	bl	5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    59dc:	4a1b      	ldr	r2, [pc, #108]	; (5a4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>)
    59de:	4604      	mov	r4, r0
    59e0:	2501      	movs	r5, #1
    59e2:	6a51      	ldr	r1, [r2, #36]	; 0x24
    59e4:	7808      	ldrb	r0, [r1, #0]
    59e6:	f000 0003 	and.w	r0, r0, #3
    59ea:	2801      	cmp	r0, #1
    59ec:	d00c      	beq.n	5a08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    59ee:	2802      	cmp	r0, #2
    59f0:	d00a      	beq.n	5a08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    59f2:	2803      	cmp	r0, #3
    59f4:	d121      	bne.n	5a3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x516>
    59f6:	7025      	strb	r5, [r4, #0]
    59f8:	89d0      	ldrh	r0, [r2, #14]
    59fa:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    59fe:	81d0      	strh	r0, [r2, #14]
    5a00:	2001      	movs	r0, #1
    5a02:	f7ff fdb7 	bl	5574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5a06:	e018      	b.n	5a3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x516>
    5a08:	7848      	ldrb	r0, [r1, #1]
    5a0a:	b1b0      	cbz	r0, 5a3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x516>
    5a0c:	89d1      	ldrh	r1, [r2, #14]
    5a0e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    5a12:	81d1      	strh	r1, [r2, #14]
    5a14:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5a16:	2900      	cmp	r1, #0
    5a18:	d009      	beq.n	5a2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50a>
    5a1a:	28fb      	cmp	r0, #251	; 0xfb
    5a1c:	d808      	bhi.n	5a30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50c>
    5a1e:	7990      	ldrb	r0, [r2, #6]
    5a20:	b120      	cbz	r0, 5a2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x508>
    5a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5a26:	2020      	movs	r0, #32
    5a28:	f7ff bdb8 	b.w	559c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5a2c:	7035      	strb	r5, [r6, #0]
    5a2e:	bd70      	pop	{r4, r5, r6, pc}
    5a30:	7950      	ldrb	r0, [r2, #5]
    5a32:	f040 0010 	orr.w	r0, r0, #16
    5a36:	7150      	strb	r0, [r2, #5]
    5a38:	bd70      	pop	{r4, r5, r6, pc}
    5a3a:	7a20      	ldrb	r0, [r4, #8]
    5a3c:	2801      	cmp	r0, #1
    5a3e:	d001      	beq.n	5a44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x520>
    5a40:	7225      	strb	r5, [r4, #8]
    5a42:	bd70      	pop	{r4, r5, r6, pc}
    5a44:	2000      	movs	r0, #0
    5a46:	7220      	strb	r0, [r4, #8]
    5a48:	bd70      	pop	{r4, r5, r6, pc}
    5a4a:	0000      	.short	0x0000
    5a4c:	200000d4 	.word	0x200000d4
    5a50:	b570      	push	{r4, r5, r6, lr}
    5a52:	4605      	mov	r5, r0
    5a54:	f7ff fd9c 	bl	5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5a58:	4604      	mov	r4, r0
    5a5a:	7980      	ldrb	r0, [r0, #6]
    5a5c:	2800      	cmp	r0, #0
    5a5e:	d026      	beq.n	5aae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58a>
    5a60:	2802      	cmp	r0, #2
    5a62:	d10c      	bne.n	5a7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55a>
    5a64:	4817      	ldr	r0, [pc, #92]	; (5ac4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a0>)
    5a66:	4629      	mov	r1, r5
    5a68:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5a6a:	f008 fbe1 	bl	e230 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5a6e:	b1f8      	cbz	r0, 5ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58c>
    5a70:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    5a74:	1c40      	adds	r0, r0, #1
    5a76:	f141 0100 	adc.w	r1, r1, #0
    5a7a:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    5a7e:	2500      	movs	r5, #0
    5a80:	71a5      	strb	r5, [r4, #6]
    5a82:	7860      	ldrb	r0, [r4, #1]
    5a84:	2601      	movs	r6, #1
    5a86:	b170      	cbz	r0, 5aa6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x582>
    5a88:	7065      	strb	r5, [r4, #1]
    5a8a:	f7ff fb17 	bl	50bc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5a8e:	b190      	cbz	r0, 5ab6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x592>
    5a90:	2100      	movs	r1, #0
    5a92:	2008      	movs	r0, #8
    5a94:	f7ff fd6e 	bl	5574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5a98:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    5a9c:	1c40      	adds	r0, r0, #1
    5a9e:	f141 0100 	adc.w	r1, r1, #0
    5aa2:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    5aa6:	79e0      	ldrb	r0, [r4, #7]
    5aa8:	2801      	cmp	r0, #1
    5aaa:	d009      	beq.n	5ac0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    5aac:	71e6      	strb	r6, [r4, #7]
    5aae:	bd70      	pop	{r4, r5, r6, pc}
    5ab0:	f240 31b9 	movw	r1, #953	; 0x3b9
    5ab4:	e001      	b.n	5aba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x596>
    5ab6:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5aba:	2027      	movs	r0, #39	; 0x27
    5abc:	f7fe fd7c 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ac0:	71e5      	strb	r5, [r4, #7]
    5ac2:	bd70      	pop	{r4, r5, r6, pc}
    5ac4:	200000d4 	.word	0x200000d4
    5ac8:	4803      	ldr	r0, [pc, #12]	; (5ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>)
    5aca:	7800      	ldrb	r0, [r0, #0]
    5acc:	2800      	cmp	r0, #0
    5ace:	d001      	beq.n	5ad4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    5ad0:	f7ff bf28 	b.w	5924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x400>
    5ad4:	4770      	bx	lr
    5ad6:	0000      	.short	0x0000
    5ad8:	200000d4 	.word	0x200000d4
    5adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ae0:	4607      	mov	r7, r0
    5ae2:	f7ff fd4f 	bl	5584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5ae6:	4680      	mov	r8, r0
    5ae8:	f7ff fd52 	bl	5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5aec:	4c16      	ldr	r4, [pc, #88]	; (5b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x624>)
    5aee:	4605      	mov	r5, r0
    5af0:	463a      	mov	r2, r7
    5af2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5af4:	6260      	str	r0, [r4, #36]	; 0x24
    5af6:	2101      	movs	r1, #1
    5af8:	4640      	mov	r0, r8
    5afa:	f7ff ff4f 	bl	599c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    5afe:	7d28      	ldrb	r0, [r5, #20]
    5b00:	2600      	movs	r6, #0
    5b02:	b168      	cbz	r0, 5b20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5fc>
    5b04:	4811      	ldr	r0, [pc, #68]	; (5b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x628>)
    5b06:	f006 fb45 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5b0a:	4811      	ldr	r0, [pc, #68]	; (5b50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62c>)
    5b0c:	7606      	strb	r6, [r0, #24]
    5b0e:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    5b12:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5b16:	490d      	ldr	r1, [pc, #52]	; (5b4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x628>)
    5b18:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5b1a:	f005 fff5 	bl	bb08 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    5b1e:	e004      	b.n	5b2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x606>
    5b20:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5b22:	f006 fb37 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5b26:	f006 f831 	bl	bb8c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5b2a:	b917      	cbnz	r7, 5b32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60e>
    5b2c:	4630      	mov	r0, r6
    5b2e:	f006 f9fd 	bl	bf2c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5b32:	2100      	movs	r1, #0
    5b34:	f898 206e 	ldrb.w	r2, [r8, #110]	; 0x6e
    5b38:	4608      	mov	r0, r1
    5b3a:	f006 fba3 	bl	c284 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5b3e:	2002      	movs	r0, #2
    5b40:	7020      	strb	r0, [r4, #0]
    5b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b46:	0000      	.short	0x0000
    5b48:	200000d4 	.word	0x200000d4
    5b4c:	200009f8 	.word	0x200009f8
    5b50:	20000b00 	.word	0x20000b00
    5b54:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5b58:	4604      	mov	r4, r0
    5b5a:	f7ff fd19 	bl	5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5b5e:	4605      	mov	r5, r0
    5b60:	f7ff fd10 	bl	5584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5b64:	f04f 0800 	mov.w	r8, #0
    5b68:	4606      	mov	r6, r0
    5b6a:	f8df 9160 	ldr.w	r9, [pc, #352]	; 5ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a8>
    5b6e:	f88d 8000 	strb.w	r8, [sp]
    5b72:	4622      	mov	r2, r4
    5b74:	4641      	mov	r1, r8
    5b76:	f7ff ff11 	bl	599c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    5b7a:	79a8      	ldrb	r0, [r5, #6]
    5b7c:	2701      	movs	r7, #1
    5b7e:	f1a9 0420 	sub.w	r4, r9, #32
    5b82:	b140      	cbz	r0, 5b96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    5b84:	2801      	cmp	r0, #1
    5b86:	d01f      	beq.n	5bc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a4>
    5b88:	2802      	cmp	r0, #2
    5b8a:	d030      	beq.n	5bee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    5b8c:	2803      	cmp	r0, #3
    5b8e:	d03c      	beq.n	5c0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e6>
    5b90:	f240 21d5 	movw	r1, #725	; 0x2d5
    5b94:	e058      	b.n	5c48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x724>
    5b96:	7a20      	ldrb	r0, [r4, #8]
    5b98:	2154      	movs	r1, #84	; 0x54
    5b9a:	f8ad 0004 	strh.w	r0, [sp, #4]
    5b9e:	5388      	strh	r0, [r1, r6]
    5ba0:	4648      	mov	r0, r9
    5ba2:	f7ff fab5 	bl	5110 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5ba6:	b128      	cbz	r0, 5bb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x690>
    5ba8:	2080      	movs	r0, #128	; 0x80
    5baa:	6a21      	ldr	r1, [r4, #32]
    5bac:	f7ff fce2 	bl	5574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5bb0:	706f      	strb	r7, [r5, #1]
    5bb2:	e02e      	b.n	5c12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ee>
    5bb4:	466a      	mov	r2, sp
    5bb6:	a901      	add	r1, sp, #4
    5bb8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5bba:	f008 ff43 	bl	ea44 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5bbe:	6220      	str	r0, [r4, #32]
    5bc0:	b110      	cbz	r0, 5bc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a4>
    5bc2:	f895 104d 	ldrb.w	r1, [r5, #77]	; 0x4d
    5bc6:	b111      	cbz	r1, 5bce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
    5bc8:	4841      	ldr	r0, [pc, #260]	; (5cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>)
    5bca:	6220      	str	r0, [r4, #32]
    5bcc:	e021      	b.n	5c12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ee>
    5bce:	f89d 1000 	ldrb.w	r1, [sp]
    5bd2:	b931      	cbnz	r1, 5be2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6be>
    5bd4:	f8a0 8000 	strh.w	r8, [r0]
    5bd8:	f880 8002 	strb.w	r8, [r0, #2]
    5bdc:	2101      	movs	r1, #1
    5bde:	f009 fa68 	bl	f0b2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5be2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5be6:	6a20      	ldr	r0, [r4, #32]
    5be8:	f009 fa18 	bl	f01c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5bec:	e011      	b.n	5c12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ee>
    5bee:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
    5bf2:	f8ad 0004 	strh.w	r0, [sp, #4]
    5bf6:	466a      	mov	r2, sp
    5bf8:	a901      	add	r1, sp, #4
    5bfa:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5bfc:	f008 ff22 	bl	ea44 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5c00:	6220      	str	r0, [r4, #32]
    5c02:	b930      	cbnz	r0, 5c12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ee>
    5c04:	f240 21c6 	movw	r1, #710	; 0x2c6
    5c08:	e01e      	b.n	5c48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x724>
    5c0a:	4648      	mov	r0, r9
    5c0c:	f7ff fa80 	bl	5110 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5c10:	b1c0      	cbz	r0, 5c44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x720>
    5c12:	6a20      	ldr	r0, [r4, #32]
    5c14:	2308      	movs	r3, #8
    5c16:	7801      	ldrb	r1, [r0, #0]
    5c18:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    5c1c:	7001      	strb	r1, [r0, #0]
    5c1e:	79ea      	ldrb	r2, [r5, #7]
    5c20:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5c24:	4311      	orrs	r1, r2
    5c26:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    5c2a:	7001      	strb	r1, [r0, #0]
    5c2c:	7a2a      	ldrb	r2, [r5, #8]
    5c2e:	2304      	movs	r3, #4
    5c30:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5c34:	4311      	orrs	r1, r2
    5c36:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5c3a:	7001      	strb	r1, [r0, #0]
    5c3c:	43c9      	mvns	r1, r1
    5c3e:	0789      	lsls	r1, r1, #30
    5c40:	d005      	beq.n	5c4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72a>
    5c42:	e007      	b.n	5c54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    5c44:	f240 21cf 	movw	r1, #719	; 0x2cf
    5c48:	2027      	movs	r0, #39	; 0x27
    5c4a:	f7fe fcb5 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c4e:	78c0      	ldrb	r0, [r0, #3]
    5c50:	2802      	cmp	r0, #2
    5c52:	d00f      	beq.n	5c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x750>
    5c54:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5c56:	f008 fc2c 	bl	e4b2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5c5a:	b108      	cbz	r0, 5c60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73c>
    5c5c:	2101      	movs	r1, #1
    5c5e:	e00a      	b.n	5c76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5c60:	6a20      	ldr	r0, [r4, #32]
    5c62:	7800      	ldrb	r0, [r0, #0]
    5c64:	43c0      	mvns	r0, r0
    5c66:	0780      	lsls	r0, r0, #30
    5c68:	d004      	beq.n	5c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x750>
    5c6a:	f7ff fa0f 	bl	508c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5c6e:	f080 0101 	eor.w	r1, r0, #1
    5c72:	e000      	b.n	5c76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    5c74:	2100      	movs	r1, #0
    5c76:	6a20      	ldr	r0, [r4, #32]
    5c78:	7802      	ldrb	r2, [r0, #0]
    5c7a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5c7e:	7001      	strb	r1, [r0, #0]
    5c80:	7ce9      	ldrb	r1, [r5, #19]
    5c82:	b181      	cbz	r1, 5ca6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x782>
    5c84:	7841      	ldrb	r1, [r0, #1]
    5c86:	b171      	cbz	r1, 5ca6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x782>
    5c88:	4812      	ldr	r0, [pc, #72]	; (5cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>)
    5c8a:	f006 fa83 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5c8e:	4810      	ldr	r0, [pc, #64]	; (5cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>)
    5c90:	3828      	subs	r0, #40	; 0x28
    5c92:	7607      	strb	r7, [r0, #24]
    5c94:	e9d5 121a 	ldrd	r1, r2, [r5, #104]	; 0x68
    5c98:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5c9c:	480d      	ldr	r0, [pc, #52]	; (5cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>)
    5c9e:	6a21      	ldr	r1, [r4, #32]
    5ca0:	f005 ff32 	bl	bb08 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    5ca4:	e003      	b.n	5cae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78a>
    5ca6:	f006 fa75 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5caa:	f005 ff6f 	bl	bb8c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5cae:	f896 206f 	ldrb.w	r2, [r6, #111]	; 0x6f
    5cb2:	2101      	movs	r1, #1
    5cb4:	2000      	movs	r0, #0
    5cb6:	f006 fae5 	bl	c284 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5cba:	7127      	strb	r7, [r4, #4]
    5cbc:	6a20      	ldr	r0, [r4, #32]
    5cbe:	8801      	ldrh	r1, [r0, #0]
    5cc0:	8221      	strh	r1, [r4, #16]
    5cc2:	7880      	ldrb	r0, [r0, #2]
    5cc4:	74a0      	strb	r0, [r4, #18]
    5cc6:	7027      	strb	r7, [r4, #0]
    5cc8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5ccc:	200000f4 	.word	0x200000f4
    5cd0:	20000b28 	.word	0x20000b28
    5cd4:	200009f8 	.word	0x200009f8
    5cd8:	00005971 	.word	0x00005971
    5cdc:	000056c5 	.word	0x000056c5
    5ce0:	0000586d 	.word	0x0000586d
    5ce4:	00005ac9 	.word	0x00005ac9

00005ce8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5ce8:	4800      	ldr	r0, [pc, #0]	; (5cec <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5cea:	4770      	bx	lr
    5cec:	20001585 	.word	0x20001585

00005cf0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    5cf0:	b570      	push	{r4, r5, r6, lr}
    5cf2:	2600      	movs	r6, #0
    5cf4:	4635      	mov	r5, r6
    5cf6:	4c0f      	ldr	r4, [pc, #60]	; (5d34 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    5cf8:	e018      	b.n	5d2c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    5cfa:	1960      	adds	r0, r4, r5
    5cfc:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5d00:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5d04:	2a01      	cmp	r2, #1
    5d06:	d002      	beq.n	5d0e <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    5d08:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    5d0c:	b160      	cbz	r0, 5d28 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    5d0e:	480a      	ldr	r0, [pc, #40]	; (5d38 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    5d10:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    5d14:	1c73      	adds	r3, r6, #1
    5d16:	5585      	strb	r5, [r0, r6]
    5d18:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    5d1c:	4630      	mov	r0, r6
    5d1e:	b2de      	uxtb	r6, r3
    5d20:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    5d24:	f006 fbd6 	bl	c4d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5d28:	1c6d      	adds	r5, r5, #1
    5d2a:	b2ed      	uxtb	r5, r5
    5d2c:	78a0      	ldrb	r0, [r4, #2]
    5d2e:	42a8      	cmp	r0, r5
    5d30:	d8e3      	bhi.n	5cfa <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    5d32:	bd70      	pop	{r4, r5, r6, pc}
    5d34:	200013b2 	.word	0x200013b2
    5d38:	2000030c 	.word	0x2000030c

00005d3c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5d3c:	4904      	ldr	r1, [pc, #16]	; (5d50 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5d3e:	788a      	ldrb	r2, [r1, #2]
    5d40:	4282      	cmp	r2, r0
    5d42:	d903      	bls.n	5d4c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5d44:	4408      	add	r0, r1
    5d46:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5d4a:	4770      	bx	lr
    5d4c:	2000      	movs	r0, #0
    5d4e:	4770      	bx	lr
    5d50:	200013b2 	.word	0x200013b2

00005d54 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5d54:	4904      	ldr	r1, [pc, #16]	; (5d68 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5d56:	788a      	ldrb	r2, [r1, #2]
    5d58:	4282      	cmp	r2, r0
    5d5a:	d903      	bls.n	5d64 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5d5c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5d60:	3083      	adds	r0, #131	; 0x83
    5d62:	4770      	bx	lr
    5d64:	2000      	movs	r0, #0
    5d66:	4770      	bx	lr
    5d68:	200013b2 	.word	0x200013b2

00005d6c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5d6c:	4a05      	ldr	r2, [pc, #20]	; (5d84 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5d6e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5d72:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5d76:	6802      	ldr	r2, [r0, #0]
    5d78:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5d7c:	8880      	ldrh	r0, [r0, #4]
    5d7e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5d82:	4770      	bx	lr
    5d84:	200013b2 	.word	0x200013b2

00005d88 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    5d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d8c:	4607      	mov	r7, r0
    5d8e:	2400      	movs	r4, #0
    5d90:	4d10      	ldr	r5, [pc, #64]	; (5dd4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    5d92:	e019      	b.n	5dc8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    5d94:	4620      	mov	r0, r4
    5d96:	f7ff ffdd 	bl	5d54 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    5d9a:	0003      	movs	r3, r0
    5d9c:	d012      	beq.n	5dc4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5d9e:	1928      	adds	r0, r5, r4
    5da0:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5da4:	b970      	cbnz	r0, 5dc4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5da6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    5daa:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    5dae:	f206 160b 	addw	r6, r6, #267	; 0x10b
    5db2:	463a      	mov	r2, r7
    5db4:	4631      	mov	r1, r6
    5db6:	4618      	mov	r0, r3
    5db8:	f008 fdc7 	bl	e94a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    5dbc:	4630      	mov	r0, r6
    5dbe:	4621      	mov	r1, r4
    5dc0:	f7ff ffd4 	bl	5d6c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    5dc4:	1c64      	adds	r4, r4, #1
    5dc6:	b2e4      	uxtb	r4, r4
    5dc8:	78a8      	ldrb	r0, [r5, #2]
    5dca:	42a0      	cmp	r0, r4
    5dcc:	d8e2      	bhi.n	5d94 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    5dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dd2:	0000      	.short	0x0000
    5dd4:	200013b2 	.word	0x200013b2

00005dd8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ddc:	460e      	mov	r6, r1
    5dde:	4607      	mov	r7, r0
    5de0:	4615      	mov	r5, r2
    5de2:	2106      	movs	r1, #6
    5de4:	4630      	mov	r0, r6
    5de6:	f009 f861 	bl	eeac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5dea:	4c0d      	ldr	r4, [pc, #52]	; (5e20 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    5dec:	b160      	cbz	r0, 5e08 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    5dee:	2000      	movs	r0, #0
    5df0:	e004      	b.n	5dfc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    5df2:	1821      	adds	r1, r4, r0
    5df4:	1c40      	adds	r0, r0, #1
    5df6:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    5dfa:	b2c0      	uxtb	r0, r0
    5dfc:	78a1      	ldrb	r1, [r4, #2]
    5dfe:	4281      	cmp	r1, r0
    5e00:	d8f7      	bhi.n	5df2 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    5e02:	2001      	movs	r0, #1
    5e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e08:	4631      	mov	r1, r6
    5e0a:	4638      	mov	r0, r7
    5e0c:	f008 fe29 	bl	ea62 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5e10:	2808      	cmp	r0, #8
    5e12:	d003      	beq.n	5e1c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5e14:	4420      	add	r0, r4
    5e16:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5e1a:	e7f2      	b.n	5e02 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    5e1c:	2000      	movs	r0, #0
    5e1e:	e7f1      	b.n	5e04 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    5e20:	200013b2 	.word	0x200013b2

00005e24 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5e24:	4904      	ldr	r1, [pc, #16]	; (5e38 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5e26:	788a      	ldrb	r2, [r1, #2]
    5e28:	4282      	cmp	r2, r0
    5e2a:	d903      	bls.n	5e34 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5e2c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5e30:	1cc0      	adds	r0, r0, #3
    5e32:	4770      	bx	lr
    5e34:	2000      	movs	r0, #0
    5e36:	4770      	bx	lr
    5e38:	200013b2 	.word	0x200013b2

00005e3c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    5e3c:	4908      	ldr	r1, [pc, #32]	; (5e60 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    5e3e:	788a      	ldrb	r2, [r1, #2]
    5e40:	4282      	cmp	r2, r0
    5e42:	d903      	bls.n	5e4c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    5e44:	180a      	adds	r2, r1, r0
    5e46:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    5e4a:	b10a      	cbz	r2, 5e50 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    5e4c:	2000      	movs	r0, #0
    5e4e:	4770      	bx	lr
    5e50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5e54:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    5e58:	f200 100b 	addw	r0, r0, #267	; 0x10b
    5e5c:	4770      	bx	lr
    5e5e:	0000      	.short	0x0000
    5e60:	200013b2 	.word	0x200013b2

00005e64 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5e64:	b510      	push	{r4, lr}
    5e66:	f240 12d3 	movw	r2, #467	; 0x1d3
    5e6a:	2100      	movs	r1, #0
    5e6c:	4808      	ldr	r0, [pc, #32]	; (5e90 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5e6e:	f007 fc5e 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e72:	2208      	movs	r2, #8
    5e74:	21ff      	movs	r1, #255	; 0xff
    5e76:	4807      	ldr	r0, [pc, #28]	; (5e94 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5e78:	f007 fc59 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e7c:	4805      	ldr	r0, [pc, #20]	; (5e94 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5e7e:	2100      	movs	r1, #0
    5e80:	1f00      	subs	r0, r0, #4
    5e82:	7001      	strb	r1, [r0, #0]
    5e84:	7041      	strb	r1, [r0, #1]
    5e86:	f44f 7161 	mov.w	r1, #900	; 0x384
    5e8a:	8041      	strh	r1, [r0, #2]
    5e8c:	bd10      	pop	{r4, pc}
    5e8e:	0000      	.short	0x0000
    5e90:	200013b2 	.word	0x200013b2
    5e94:	2000030c 	.word	0x2000030c

00005e98 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5e98:	4901      	ldr	r1, [pc, #4]	; (5ea0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5e9a:	7008      	strb	r0, [r1, #0]
    5e9c:	4770      	bx	lr
    5e9e:	0000      	.short	0x0000
    5ea0:	20000308 	.word	0x20000308

00005ea4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5ea4:	4801      	ldr	r0, [pc, #4]	; (5eac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5ea6:	7800      	ldrb	r0, [r0, #0]
    5ea8:	4770      	bx	lr
    5eaa:	0000      	.short	0x0000
    5eac:	20000308 	.word	0x20000308

00005eb0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5eb0:	4b0b      	ldr	r3, [pc, #44]	; (5ee0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5eb2:	b510      	push	{r4, lr}
    5eb4:	789c      	ldrb	r4, [r3, #2]
    5eb6:	4284      	cmp	r4, r0
    5eb8:	d90f      	bls.n	5eda <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5eba:	4418      	add	r0, r3
    5ebc:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5ec0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5ec4:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5ec8:	700b      	strb	r3, [r1, #0]
    5eca:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5ece:	6011      	str	r1, [r2, #0]
    5ed0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5ed4:	8090      	strh	r0, [r2, #4]
    5ed6:	2001      	movs	r0, #1
    5ed8:	bd10      	pop	{r4, pc}
    5eda:	2000      	movs	r0, #0
    5edc:	bd10      	pop	{r4, pc}
    5ede:	0000      	.short	0x0000
    5ee0:	200013b2 	.word	0x200013b2

00005ee4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5ee4:	4907      	ldr	r1, [pc, #28]	; (5f04 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5ee6:	788a      	ldrb	r2, [r1, #2]
    5ee8:	4282      	cmp	r2, r0
    5eea:	d909      	bls.n	5f00 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5eec:	4408      	add	r0, r1
    5eee:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5ef2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5ef6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5efa:	f000 0001 	and.w	r0, r0, #1
    5efe:	4770      	bx	lr
    5f00:	2000      	movs	r0, #0
    5f02:	4770      	bx	lr
    5f04:	200013b2 	.word	0x200013b2

00005f08 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f0c:	4698      	mov	r8, r3
    5f0e:	4691      	mov	r9, r2
    5f10:	460c      	mov	r4, r1
    5f12:	4605      	mov	r5, r0
    5f14:	f000 f962 	bl	61dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5f18:	4606      	mov	r6, r0
    5f1a:	2810      	cmp	r0, #16
    5f1c:	d006      	beq.n	5f2c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5f1e:	f000 f92d 	bl	617c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5f22:	2810      	cmp	r0, #16
    5f24:	d002      	beq.n	5f2c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5f26:	2012      	movs	r0, #18
    5f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f2c:	4f18      	ldr	r7, [pc, #96]	; (5f90 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    5f2e:	78b8      	ldrb	r0, [r7, #2]
    5f30:	2808      	cmp	r0, #8
    5f32:	d22a      	bcs.n	5f8a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    5f34:	2e10      	cmp	r6, #16
    5f36:	d105      	bne.n	5f44 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5f38:	2200      	movs	r2, #0
    5f3a:	4621      	mov	r1, r4
    5f3c:	4628      	mov	r0, r5
    5f3e:	f000 f931 	bl	61a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5f42:	4606      	mov	r6, r0
    5f44:	78bc      	ldrb	r4, [r7, #2]
    5f46:	2210      	movs	r2, #16
    5f48:	1c60      	adds	r0, r4, #1
    5f4a:	70b8      	strb	r0, [r7, #2]
    5f4c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5f50:	1ce8      	adds	r0, r5, #3
    5f52:	4649      	mov	r1, r9
    5f54:	f008 ff49 	bl	edea <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5f58:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5f5c:	2210      	movs	r2, #16
    5f5e:	4641      	mov	r1, r8
    5f60:	f008 ff43 	bl	edea <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5f64:	2110      	movs	r1, #16
    5f66:	4640      	mov	r0, r8
    5f68:	f008 ffa0 	bl	eeac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5f6c:	443c      	add	r4, r7
    5f6e:	2110      	movs	r1, #16
    5f70:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5f74:	4648      	mov	r0, r9
    5f76:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5f7a:	f008 ff97 	bl	eeac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5f7e:	77e0      	strb	r0, [r4, #31]
    5f80:	f804 6c29 	strb.w	r6, [r4, #-41]
    5f84:	2000      	movs	r0, #0
    5f86:	73e0      	strb	r0, [r4, #15]
    5f88:	e7ce      	b.n	5f28 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5f8a:	2007      	movs	r0, #7
    5f8c:	e7cc      	b.n	5f28 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5f8e:	0000      	.short	0x0000
    5f90:	200013b2 	.word	0x200013b2

00005f94 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5f94:	4806      	ldr	r0, [pc, #24]	; (5fb0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5f96:	b510      	push	{r4, lr}
    5f98:	7880      	ldrb	r0, [r0, #2]
    5f9a:	1e40      	subs	r0, r0, #1
    5f9c:	b244      	sxtb	r4, r0
    5f9e:	e004      	b.n	5faa <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5fa0:	b2e0      	uxtb	r0, r4
    5fa2:	f000 f979 	bl	6298 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    5fa6:	1e64      	subs	r4, r4, #1
    5fa8:	b264      	sxtb	r4, r4
    5faa:	2c00      	cmp	r4, #0
    5fac:	daf8      	bge.n	5fa0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    5fae:	bd10      	pop	{r4, pc}
    5fb0:	200013b2 	.word	0x200013b2

00005fb4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5fb4:	4801      	ldr	r0, [pc, #4]	; (5fbc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5fb6:	8840      	ldrh	r0, [r0, #2]
    5fb8:	4770      	bx	lr
    5fba:	0000      	.short	0x0000
    5fbc:	20000308 	.word	0x20000308

00005fc0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5fc0:	b138      	cbz	r0, 5fd2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5fc2:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5fc6:	4288      	cmp	r0, r1
    5fc8:	d803      	bhi.n	5fd2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5fca:	4903      	ldr	r1, [pc, #12]	; (5fd8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5fcc:	8048      	strh	r0, [r1, #2]
    5fce:	2001      	movs	r0, #1
    5fd0:	4770      	bx	lr
    5fd2:	2000      	movs	r0, #0
    5fd4:	4770      	bx	lr
    5fd6:	0000      	.short	0x0000
    5fd8:	20000308 	.word	0x20000308

00005fdc <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    5fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fe0:	4614      	mov	r4, r2
    5fe2:	2501      	movs	r5, #1
    5fe4:	2200      	movs	r2, #0
    5fe6:	461f      	mov	r7, r3
    5fe8:	462e      	mov	r6, r5
    5fea:	7022      	strb	r2, [r4, #0]
    5fec:	f000 f8f6 	bl	61dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5ff0:	2810      	cmp	r0, #16
    5ff2:	d024      	beq.n	603e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5ff4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 604c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    5ff8:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    5ffc:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6000:	f001 0101 	and.w	r1, r1, #1
    6004:	7021      	strb	r1, [r4, #0]
    6006:	f000 f8b9 	bl	617c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    600a:	4604      	mov	r4, r0
    600c:	2810      	cmp	r0, #16
    600e:	d016      	beq.n	603e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    6010:	b107      	cbz	r7, 6014 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    6012:	703c      	strb	r4, [r7, #0]
    6014:	4620      	mov	r0, r4
    6016:	f7ff ff05 	bl	5e24 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    601a:	b180      	cbz	r0, 603e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    601c:	f898 1002 	ldrb.w	r1, [r8, #2]
    6020:	4640      	mov	r0, r8
    6022:	42a1      	cmp	r1, r4
    6024:	d903      	bls.n	602e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    6026:	1901      	adds	r1, r0, r4
    6028:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    602c:	e000      	b.n	6030 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    602e:	2600      	movs	r6, #0
    6030:	eb08 0004 	add.w	r0, r8, r4
    6034:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6038:	2801      	cmp	r0, #1
    603a:	d004      	beq.n	6046 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    603c:	2500      	movs	r5, #0
    603e:	ea45 0006 	orr.w	r0, r5, r6
    6042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6046:	2501      	movs	r5, #1
    6048:	e7f9      	b.n	603e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    604a:	0000      	.short	0x0000
    604c:	200013b2 	.word	0x200013b2

00006050 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6050:	b570      	push	{r4, r5, r6, lr}
    6052:	460d      	mov	r5, r1
    6054:	4606      	mov	r6, r0
    6056:	f000 f8c1 	bl	61dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    605a:	4c10      	ldr	r4, [pc, #64]	; (609c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    605c:	2810      	cmp	r0, #16
    605e:	d007      	beq.n	6070 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6060:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6064:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6068:	07c9      	lsls	r1, r1, #31
    606a:	d001      	beq.n	6070 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    606c:	2001      	movs	r0, #1
    606e:	bd70      	pop	{r4, r5, r6, pc}
    6070:	7861      	ldrb	r1, [r4, #1]
    6072:	2908      	cmp	r1, #8
    6074:	d210      	bcs.n	6098 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6076:	2810      	cmp	r0, #16
    6078:	d008      	beq.n	608c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    607a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    607e:	2101      	movs	r1, #1
    6080:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6084:	7860      	ldrb	r0, [r4, #1]
    6086:	1c40      	adds	r0, r0, #1
    6088:	7060      	strb	r0, [r4, #1]
    608a:	e7ef      	b.n	606c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    608c:	2201      	movs	r2, #1
    608e:	4629      	mov	r1, r5
    6090:	4630      	mov	r0, r6
    6092:	f000 f887 	bl	61a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6096:	e7f5      	b.n	6084 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6098:	2000      	movs	r0, #0
    609a:	bd70      	pop	{r4, r5, r6, pc}
    609c:	200013b2 	.word	0x200013b2

000060a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    60a0:	b570      	push	{r4, r5, r6, lr}
    60a2:	4d0b      	ldr	r5, [pc, #44]	; (60d0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    60a4:	7828      	ldrb	r0, [r5, #0]
    60a6:	1e40      	subs	r0, r0, #1
    60a8:	b244      	sxtb	r4, r0
    60aa:	e00a      	b.n	60c2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    60ac:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    60b0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    60b4:	07c0      	lsls	r0, r0, #31
    60b6:	d002      	beq.n	60be <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    60b8:	b2e0      	uxtb	r0, r4
    60ba:	f000 f935 	bl	6328 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x250>
    60be:	1e64      	subs	r4, r4, #1
    60c0:	b264      	sxtb	r4, r4
    60c2:	2c00      	cmp	r4, #0
    60c4:	daf2      	bge.n	60ac <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    60c6:	4903      	ldr	r1, [pc, #12]	; (60d4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    60c8:	2000      	movs	r0, #0
    60ca:	7048      	strb	r0, [r1, #1]
    60cc:	bd70      	pop	{r4, r5, r6, pc}
    60ce:	0000      	.short	0x0000
    60d0:	200013b2 	.word	0x200013b2
    60d4:	20000308 	.word	0x20000308

000060d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    60d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60dc:	2400      	movs	r4, #0
    60de:	4625      	mov	r5, r4
    60e0:	4e18      	ldr	r6, [pc, #96]	; (6144 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    60e2:	e029      	b.n	6138 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    60e4:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    60e8:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    60ec:	07c0      	lsls	r0, r0, #31
    60ee:	d021      	beq.n	6134 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    60f0:	4628      	mov	r0, r5
    60f2:	f000 f843 	bl	617c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    60f6:	4603      	mov	r3, r0
    60f8:	f7ff fe94 	bl	5e24 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    60fc:	4601      	mov	r1, r0
    60fe:	2000      	movs	r0, #0
    6100:	2b10      	cmp	r3, #16
    6102:	d009      	beq.n	6118 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6104:	18f2      	adds	r2, r6, r3
    6106:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    610a:	f1bc 0f01 	cmp.w	ip, #1
    610e:	d002      	beq.n	6116 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6110:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6114:	b102      	cbz	r2, 6118 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6116:	2001      	movs	r0, #1
    6118:	1e40      	subs	r0, r0, #1
    611a:	4201      	tst	r1, r0
    611c:	d10a      	bne.n	6134 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    611e:	480a      	ldr	r0, [pc, #40]	; (6148 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6120:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6124:	5503      	strb	r3, [r0, r4]
    6126:	4620      	mov	r0, r4
    6128:	1c64      	adds	r4, r4, #1
    612a:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    612e:	b2e4      	uxtb	r4, r4
    6130:	f006 f9d0 	bl	c4d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6134:	1c6d      	adds	r5, r5, #1
    6136:	b2ed      	uxtb	r5, r5
    6138:	7830      	ldrb	r0, [r6, #0]
    613a:	42a8      	cmp	r0, r5
    613c:	d8d2      	bhi.n	60e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    613e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6142:	0000      	.short	0x0000
    6144:	200013b2 	.word	0x200013b2
    6148:	2000030c 	.word	0x2000030c
    614c:	4602      	mov	r2, r0
    614e:	4809      	ldr	r0, [pc, #36]	; (6174 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6150:	b510      	push	{r4, lr}
    6152:	7800      	ldrb	r0, [r0, #0]
    6154:	460b      	mov	r3, r1
    6156:	b158      	cbz	r0, 6170 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6158:	4807      	ldr	r0, [pc, #28]	; (6178 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    615a:	7881      	ldrb	r1, [r0, #2]
    615c:	b141      	cbz	r1, 6170 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    615e:	b10b      	cbz	r3, 6164 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6160:	1cc0      	adds	r0, r0, #3
    6162:	e001      	b.n	6168 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6164:	4804      	ldr	r0, [pc, #16]	; (6178 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6166:	3083      	adds	r0, #131	; 0x83
    6168:	f005 fbd6 	bl	b918 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    616c:	2001      	movs	r0, #1
    616e:	bd10      	pop	{r4, pc}
    6170:	2000      	movs	r0, #0
    6172:	bd10      	pop	{r4, pc}
    6174:	20000308 	.word	0x20000308
    6178:	200013b2 	.word	0x200013b2
    617c:	4908      	ldr	r1, [pc, #32]	; (61a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    617e:	b510      	push	{r4, lr}
    6180:	4603      	mov	r3, r0
    6182:	2000      	movs	r0, #0
    6184:	788a      	ldrb	r2, [r1, #2]
    6186:	e006      	b.n	6196 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6188:	180c      	adds	r4, r1, r0
    618a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    618e:	429c      	cmp	r4, r3
    6190:	d004      	beq.n	619c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    6192:	1c40      	adds	r0, r0, #1
    6194:	b2c0      	uxtb	r0, r0
    6196:	4282      	cmp	r2, r0
    6198:	d8f6      	bhi.n	6188 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    619a:	2010      	movs	r0, #16
    619c:	bd10      	pop	{r4, pc}
    619e:	0000      	.short	0x0000
    61a0:	200013b2 	.word	0x200013b2
    61a4:	b570      	push	{r4, r5, r6, lr}
    61a6:	4b0c      	ldr	r3, [pc, #48]	; (61d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    61a8:	4604      	mov	r4, r0
    61aa:	7818      	ldrb	r0, [r3, #0]
    61ac:	1c45      	adds	r5, r0, #1
    61ae:	701d      	strb	r5, [r3, #0]
    61b0:	2810      	cmp	r0, #16
    61b2:	d303      	bcc.n	61bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    61b4:	2146      	movs	r1, #70	; 0x46
    61b6:	2028      	movs	r0, #40	; 0x28
    61b8:	f7fe f9fe 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61bc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    61c0:	680d      	ldr	r5, [r1, #0]
    61c2:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    61c6:	8889      	ldrh	r1, [r1, #4]
    61c8:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    61cc:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    61d0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    61d4:	bd70      	pop	{r4, r5, r6, pc}
    61d6:	0000      	.short	0x0000
    61d8:	200013b2 	.word	0x200013b2
    61dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    61de:	4c1a      	ldr	r4, [pc, #104]	; (6248 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    61e0:	4603      	mov	r3, r0
    61e2:	2000      	movs	r0, #0
    61e4:	7825      	ldrb	r5, [r4, #0]
    61e6:	e02a      	b.n	623e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    61e8:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    61ec:	780f      	ldrb	r7, [r1, #0]
    61ee:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    61f2:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    61f6:	ea87 070c 	eor.w	r7, r7, ip
    61fa:	405e      	eors	r6, r3
    61fc:	443e      	add	r6, r7
    61fe:	784f      	ldrb	r7, [r1, #1]
    6200:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    6204:	ea87 070c 	eor.w	r7, r7, ip
    6208:	443e      	add	r6, r7
    620a:	788f      	ldrb	r7, [r1, #2]
    620c:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    6210:	ea87 070c 	eor.w	r7, r7, ip
    6214:	443e      	add	r6, r7
    6216:	78cf      	ldrb	r7, [r1, #3]
    6218:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    621c:	ea87 070c 	eor.w	r7, r7, ip
    6220:	443e      	add	r6, r7
    6222:	790f      	ldrb	r7, [r1, #4]
    6224:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    6228:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    622c:	ea87 070c 	eor.w	r7, r7, ip
    6230:	443e      	add	r6, r7
    6232:	794f      	ldrb	r7, [r1, #5]
    6234:	4057      	eors	r7, r2
    6236:	42f7      	cmn	r7, r6
    6238:	d004      	beq.n	6244 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    623a:	1c40      	adds	r0, r0, #1
    623c:	b2c0      	uxtb	r0, r0
    623e:	4285      	cmp	r5, r0
    6240:	d8d2      	bhi.n	61e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    6242:	2010      	movs	r0, #16
    6244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6246:	0000      	.short	0x0000
    6248:	200013b2 	.word	0x200013b2
    624c:	b570      	push	{r4, r5, r6, lr}
    624e:	4605      	mov	r5, r0
    6250:	f7ff ff94 	bl	617c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6254:	2810      	cmp	r0, #16
    6256:	d11c      	bne.n	6292 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    6258:	4c0e      	ldr	r4, [pc, #56]	; (6294 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    625a:	7820      	ldrb	r0, [r4, #0]
    625c:	1e40      	subs	r0, r0, #1
    625e:	b2c0      	uxtb	r0, r0
    6260:	7020      	strb	r0, [r4, #0]
    6262:	42a8      	cmp	r0, r5
    6264:	d015      	beq.n	6292 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    6266:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    626a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    626e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    6272:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    6276:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    627a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    627e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6282:	7820      	ldrb	r0, [r4, #0]
    6284:	f7ff ff7a 	bl	617c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6288:	2810      	cmp	r0, #16
    628a:	d002      	beq.n	6292 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    628c:	4420      	add	r0, r4
    628e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6292:	bd70      	pop	{r4, r5, r6, pc}
    6294:	200013b2 	.word	0x200013b2
    6298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    629c:	4c21      	ldr	r4, [pc, #132]	; (6324 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x24c>)
    629e:	4606      	mov	r6, r0
    62a0:	19a7      	adds	r7, r4, r6
    62a2:	78a0      	ldrb	r0, [r4, #2]
    62a4:	1e40      	subs	r0, r0, #1
    62a6:	b2c5      	uxtb	r5, r0
    62a8:	70a5      	strb	r5, [r4, #2]
    62aa:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    62ae:	42ae      	cmp	r6, r5
    62b0:	d02a      	beq.n	6308 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x230>
    62b2:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    62b6:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    62ba:	f10a 0103 	add.w	r1, sl, #3
    62be:	f109 0003 	add.w	r0, r9, #3
    62c2:	2210      	movs	r2, #16
    62c4:	f007 f9b9 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    62c8:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    62cc:	f109 0083 	add.w	r0, r9, #131	; 0x83
    62d0:	2210      	movs	r2, #16
    62d2:	f007 f9b2 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    62d6:	1960      	adds	r0, r4, r5
    62d8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    62dc:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    62e0:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    62e4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    62e8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    62ec:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    62f0:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    62f4:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    62f8:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    62fc:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6300:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6304:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6308:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    630c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6310:	07c0      	lsls	r0, r0, #31
    6312:	d104      	bne.n	631e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x246>
    6314:	4640      	mov	r0, r8
    6316:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    631a:	f7ff bf97 	b.w	624c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6322:	0000      	.short	0x0000
    6324:	200013b2 	.word	0x200013b2
    6328:	4905      	ldr	r1, [pc, #20]	; (6340 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x268>)
    632a:	784a      	ldrb	r2, [r1, #1]
    632c:	1e52      	subs	r2, r2, #1
    632e:	704a      	strb	r2, [r1, #1]
    6330:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6334:	2200      	movs	r2, #0
    6336:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    633a:	f7ff bf87 	b.w	624c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    633e:	0000      	.short	0x0000
    6340:	200013b2 	.word	0x200013b2

00006344 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    6344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6348:	4604      	mov	r4, r0
    634a:	f100 0780 	add.w	r7, r0, #128	; 0x80
    634e:	b171      	cbz	r1, 636e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    6350:	f104 0697 	add.w	r6, r4, #151	; 0x97
    6354:	1e75      	subs	r5, r6, #1
    6356:	2901      	cmp	r1, #1
    6358:	d016      	beq.n	6388 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    635a:	2902      	cmp	r1, #2
    635c:	d025      	beq.n	63aa <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    635e:	2903      	cmp	r1, #3
    6360:	d110      	bne.n	6384 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    6362:	4631      	mov	r1, r6
    6364:	4628      	mov	r0, r5
    6366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    636a:	f008 bdf2 	b.w	ef52 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    636e:	f44f 7212 	mov.w	r2, #584	; 0x248
    6372:	2100      	movs	r1, #0
    6374:	f007 f9db 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6378:	4638      	mov	r0, r7
    637a:	f008 fda6 	bl	eeca <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    637e:	2020      	movs	r0, #32
    6380:	f884 01f1 	strb.w	r0, [r4, #497]	; 0x1f1
    6384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6388:	6921      	ldr	r1, [r4, #16]
    638a:	480d      	ldr	r0, [pc, #52]	; (63c0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    638c:	460a      	mov	r2, r1
    638e:	4408      	add	r0, r1
    6390:	fbb0 f0f1 	udiv	r0, r0, r1
    6394:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    6398:	f640 30b8 	movw	r0, #3000	; 0xbb8
    639c:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
    63a0:	8b63      	ldrh	r3, [r4, #26]
    63a2:	4638      	mov	r0, r7
    63a4:	f000 f80e 	bl	63c4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    63a8:	e7db      	b.n	6362 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    63aa:	6901      	ldr	r1, [r0, #16]
    63ac:	f8b4 3216 	ldrh.w	r3, [r4, #534]	; 0x216
    63b0:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
    63b4:	4638      	mov	r0, r7
    63b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    63ba:	f000 b803 	b.w	63c4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    63be:	0000      	.short	0x0000
    63c0:	01c9c37f 	.word	0x01c9c37f
    63c4:	b530      	push	{r4, r5, lr}
    63c6:	2400      	movs	r4, #0
    63c8:	87c4      	strh	r4, [r0, #62]	; 0x3e
    63ca:	f8b0 4042 	ldrh.w	r4, [r0, #66]	; 0x42
    63ce:	4d16      	ldr	r5, [pc, #88]	; (6428 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xe4>)
    63d0:	434c      	muls	r4, r1
    63d2:	fbb4 f4f2 	udiv	r4, r4, r2
    63d6:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
    63da:	f242 7410 	movw	r4, #10000	; 0x2710
    63de:	4363      	muls	r3, r4
    63e0:	fbb3 f3f2 	udiv	r3, r3, r2
    63e4:	1c5b      	adds	r3, r3, #1
    63e6:	b29b      	uxth	r3, r3
    63e8:	fb03 f402 	mul.w	r4, r3, r2
    63ec:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    63f0:	42ac      	cmp	r4, r5
    63f2:	d902      	bls.n	63fa <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xb6>
    63f4:	1e5b      	subs	r3, r3, #1
    63f6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    63fa:	4b0c      	ldr	r3, [pc, #48]	; (642c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xe8>)
    63fc:	f240 2471 	movw	r4, #625	; 0x271
    6400:	fbb3 f3f2 	udiv	r3, r3, r2
    6404:	1c5b      	adds	r3, r3, #1
    6406:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    640a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    640c:	4363      	muls	r3, r4
    640e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6412:	1e5b      	subs	r3, r3, #1
    6414:	fbb3 f3f2 	udiv	r3, r3, r2
    6418:	6343      	str	r3, [r0, #52]	; 0x34
    641a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    641c:	434b      	muls	r3, r1
    641e:	fbb3 f1f2 	udiv	r1, r3, r2
    6422:	6301      	str	r1, [r0, #48]	; 0x30
    6424:	bd30      	pop	{r4, r5, pc}
    6426:	0000      	.short	0x0000
    6428:	01e84800 	.word	0x01e84800
    642c:	02625a00 	.word	0x02625a00

00006430 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    6430:	4909      	ldr	r1, [pc, #36]	; (6458 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    6432:	b508      	push	{r3, lr}
    6434:	7809      	ldrb	r1, [r1, #0]
    6436:	f88d 1000 	strb.w	r1, [sp]
    643a:	9900      	ldr	r1, [sp, #0]
    643c:	9100      	str	r1, [sp, #0]
    643e:	f89d 1000 	ldrb.w	r1, [sp]
    6442:	b109      	cbz	r1, 6448 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    6444:	2000      	movs	r0, #0
    6446:	bd08      	pop	{r3, pc}
    6448:	4903      	ldr	r1, [pc, #12]	; (6458 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    644a:	f8d1 2001 	ldr.w	r2, [r1, #1]
    644e:	6002      	str	r2, [r0, #0]
    6450:	7949      	ldrb	r1, [r1, #5]
    6452:	7101      	strb	r1, [r0, #4]
    6454:	2001      	movs	r0, #1
    6456:	bd08      	pop	{r3, pc}
    6458:	20000328 	.word	0x20000328

0000645c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    645c:	4905      	ldr	r1, [pc, #20]	; (6474 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    645e:	22ff      	movs	r2, #255	; 0xff
    6460:	700a      	strb	r2, [r1, #0]
    6462:	460a      	mov	r2, r1
    6464:	6803      	ldr	r3, [r0, #0]
    6466:	f8c2 3001 	str.w	r3, [r2, #1]
    646a:	7900      	ldrb	r0, [r0, #4]
    646c:	7150      	strb	r0, [r2, #5]
    646e:	2000      	movs	r0, #0
    6470:	7008      	strb	r0, [r1, #0]
    6472:	4770      	bx	lr
    6474:	20000328 	.word	0x20000328

00006478 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6478:	b570      	push	{r4, r5, r6, lr}
    647a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    647e:	b28b      	uxth	r3, r1
    6480:	7ac5      	ldrb	r5, [r0, #11]
    6482:	ea83 0102 	eor.w	r1, r3, r2
    6486:	2200      	movs	r2, #0
    6488:	b2cc      	uxtb	r4, r1
    648a:	0a09      	lsrs	r1, r1, #8
    648c:	fa94 f4a4 	rbit	r4, r4
    6490:	fa91 f1a1 	rbit	r1, r1
    6494:	0e24      	lsrs	r4, r4, #24
    6496:	0e09      	lsrs	r1, r1, #24
    6498:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    649c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    64a0:	1c52      	adds	r2, r2, #1
    64a2:	4419      	add	r1, r3
    64a4:	b2d2      	uxtb	r2, r2
    64a6:	b289      	uxth	r1, r1
    64a8:	2a03      	cmp	r2, #3
    64aa:	d3ed      	bcc.n	6488 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    64ac:	4059      	eors	r1, r3
    64ae:	2225      	movs	r2, #37	; 0x25
    64b0:	fbb1 f3f2 	udiv	r3, r1, r2
    64b4:	fb02 1213 	mls	r2, r2, r3, r1
    64b8:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    64bc:	f002 0607 	and.w	r6, r2, #7
    64c0:	785b      	ldrb	r3, [r3, #1]
    64c2:	2401      	movs	r4, #1
    64c4:	fa04 f606 	lsl.w	r6, r4, r6
    64c8:	4233      	tst	r3, r6
    64ca:	d001      	beq.n	64d0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    64cc:	4610      	mov	r0, r2
    64ce:	bd70      	pop	{r4, r5, r6, pc}
    64d0:	434d      	muls	r5, r1
    64d2:	0c29      	lsrs	r1, r5, #16
    64d4:	1c49      	adds	r1, r1, #1
    64d6:	b2c9      	uxtb	r1, r1
    64d8:	2200      	movs	r2, #0
    64da:	1885      	adds	r5, r0, r2
    64dc:	79ab      	ldrb	r3, [r5, #6]
    64de:	428b      	cmp	r3, r1
    64e0:	d312      	bcc.n	6508 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    64e2:	f895 5001 	ldrb.w	r5, [r5, #1]
    64e6:	2300      	movs	r3, #0
    64e8:	fa04 f603 	lsl.w	r6, r4, r3
    64ec:	4235      	tst	r5, r6
    64ee:	d001      	beq.n	64f4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    64f0:	1e49      	subs	r1, r1, #1
    64f2:	b2c9      	uxtb	r1, r1
    64f4:	b121      	cbz	r1, 6500 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    64f6:	1c5b      	adds	r3, r3, #1
    64f8:	b2db      	uxtb	r3, r3
    64fa:	2b08      	cmp	r3, #8
    64fc:	d3f4      	bcc.n	64e8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    64fe:	e005      	b.n	650c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6500:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6504:	b2c0      	uxtb	r0, r0
    6506:	bd70      	pop	{r4, r5, r6, pc}
    6508:	1ac9      	subs	r1, r1, r3
    650a:	b2c9      	uxtb	r1, r1
    650c:	1c52      	adds	r2, r2, #1
    650e:	b2d2      	uxtb	r2, r2
    6510:	2a05      	cmp	r2, #5
    6512:	d3e2      	bcc.n	64da <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6514:	f240 110d 	movw	r1, #269	; 0x10d
    6518:	2046      	movs	r0, #70	; 0x46
    651a:	f7fe f84d 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    651e:	0000      	movs	r0, r0
    6520:	b570      	push	{r4, r5, r6, lr}
    6522:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
    6526:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    652a:	2401      	movs	r4, #1
    652c:	fb03 2101 	mla	r1, r3, r1, r2
    6530:	2225      	movs	r2, #37	; 0x25
    6532:	fbb1 f3f2 	udiv	r3, r1, r2
    6536:	fb02 1113 	mls	r1, r2, r3, r1
    653a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    653e:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6542:	f001 0307 	and.w	r3, r1, #7
    6546:	7dd2      	ldrb	r2, [r2, #23]
    6548:	fa04 f303 	lsl.w	r3, r4, r3
    654c:	421a      	tst	r2, r3
    654e:	d003      	beq.n	6558 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6550:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    6554:	2000      	movs	r0, #0
    6556:	bd70      	pop	{r4, r5, r6, pc}
    6558:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    655c:	fbb1 f3f2 	udiv	r3, r1, r2
    6560:	fb02 1113 	mls	r1, r2, r3, r1
    6564:	1c49      	adds	r1, r1, #1
    6566:	b2c9      	uxtb	r1, r1
    6568:	2300      	movs	r3, #0
    656a:	18c5      	adds	r5, r0, r3
    656c:	7f2a      	ldrb	r2, [r5, #28]
    656e:	428a      	cmp	r2, r1
    6570:	d311      	bcc.n	6596 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6572:	f895 5017 	ldrb.w	r5, [r5, #23]
    6576:	2200      	movs	r2, #0
    6578:	fa04 f602 	lsl.w	r6, r4, r2
    657c:	4235      	tst	r5, r6
    657e:	d001      	beq.n	6584 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6580:	1e49      	subs	r1, r1, #1
    6582:	b2c9      	uxtb	r1, r1
    6584:	b121      	cbz	r1, 6590 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6586:	1c52      	adds	r2, r2, #1
    6588:	b2d2      	uxtb	r2, r2
    658a:	2a08      	cmp	r2, #8
    658c:	d3f4      	bcc.n	6578 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    658e:	e004      	b.n	659a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6590:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6594:	e7dc      	b.n	6550 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6596:	1a89      	subs	r1, r1, r2
    6598:	b2c9      	uxtb	r1, r1
    659a:	1c5b      	adds	r3, r3, #1
    659c:	b2db      	uxtb	r3, r3
    659e:	2b05      	cmp	r3, #5
    65a0:	d3e3      	bcc.n	656a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    65a2:	201f      	movs	r0, #31
    65a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000065a8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    65a8:	7841      	ldrb	r1, [r0, #1]
    65aa:	b141      	cbz	r1, 65be <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    65ac:	78c0      	ldrb	r0, [r0, #3]
    65ae:	2826      	cmp	r0, #38	; 0x26
    65b0:	d203      	bcs.n	65ba <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    65b2:	4a04      	ldr	r2, [pc, #16]	; (65c4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    65b4:	5c10      	ldrb	r0, [r2, r0]
    65b6:	4288      	cmp	r0, r1
    65b8:	d101      	bne.n	65be <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    65ba:	2001      	movs	r0, #1
    65bc:	4770      	bx	lr
    65be:	2000      	movs	r0, #0
    65c0:	4770      	bx	lr
    65c2:	0000      	.short	0x0000
    65c4:	00010c4c 	.word	0x00010c4c

000065c8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    65c8:	b510      	push	{r4, lr}
    65ca:	2201      	movs	r2, #1
    65cc:	70c1      	strb	r1, [r0, #3]
    65ce:	2926      	cmp	r1, #38	; 0x26
    65d0:	d202      	bcs.n	65d8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    65d2:	4a06      	ldr	r2, [pc, #24]	; (65ec <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    65d4:	5c52      	ldrb	r2, [r2, r1]
    65d6:	e006      	b.n	65e6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    65d8:	29ff      	cmp	r1, #255	; 0xff
    65da:	d004      	beq.n	65e6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    65dc:	f240 411d 	movw	r1, #1053	; 0x41d
    65e0:	202a      	movs	r0, #42	; 0x2a
    65e2:	f7fd ffe9 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65e6:	7042      	strb	r2, [r0, #1]
    65e8:	bd10      	pop	{r4, pc}
    65ea:	0000      	.short	0x0000
    65ec:	00010c4c 	.word	0x00010c4c

000065f0 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    65f0:	4904      	ldr	r1, [pc, #16]	; (6604 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    65f2:	7c89      	ldrb	r1, [r1, #18]
    65f4:	0749      	lsls	r1, r1, #29
    65f6:	d400      	bmi.n	65fa <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    65f8:	b108      	cbz	r0, 65fe <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    65fa:	2000      	movs	r0, #0
    65fc:	4770      	bx	lr
    65fe:	2001      	movs	r0, #1
    6600:	4770      	bx	lr
    6602:	0000      	.short	0x0000
    6604:	20001328 	.word	0x20001328

00006608 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    6608:	4803      	ldr	r0, [pc, #12]	; (6618 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    660a:	7c80      	ldrb	r0, [r0, #18]
    660c:	0780      	lsls	r0, r0, #30
    660e:	d401      	bmi.n	6614 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    6610:	2001      	movs	r0, #1
    6612:	4770      	bx	lr
    6614:	2000      	movs	r0, #0
    6616:	4770      	bx	lr
    6618:	20001328 	.word	0x20001328

0000661c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    661c:	4803      	ldr	r0, [pc, #12]	; (662c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    661e:	7c80      	ldrb	r0, [r0, #18]
    6620:	07c0      	lsls	r0, r0, #31
    6622:	d001      	beq.n	6628 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    6624:	2000      	movs	r0, #0
    6626:	4770      	bx	lr
    6628:	2001      	movs	r0, #1
    662a:	4770      	bx	lr
    662c:	20001328 	.word	0x20001328

00006630 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6634:	4c12      	ldr	r4, [pc, #72]	; (6680 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6636:	4607      	mov	r7, r0
    6638:	460e      	mov	r6, r1
    663a:	7da0      	ldrb	r0, [r4, #22]
    663c:	b110      	cbz	r0, 6644 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    663e:	8b20      	ldrh	r0, [r4, #24]
    6640:	2800      	cmp	r0, #0
    6642:	d012      	beq.n	666a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6644:	480e      	ldr	r0, [pc, #56]	; (6680 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6646:	3014      	adds	r0, #20
    6648:	4680      	mov	r8, r0
    664a:	f008 fdb8 	bl	f1be <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    664e:	b9a8      	cbnz	r0, 667c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6650:	8aa5      	ldrh	r5, [r4, #20]
    6652:	8aa0      	ldrh	r0, [r4, #20]
    6654:	4632      	mov	r2, r6
    6656:	4639      	mov	r1, r7
    6658:	f008 fde9 	bl	f22e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    665c:	b138      	cbz	r0, 666e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    665e:	7da0      	ldrb	r0, [r4, #22]
    6660:	b110      	cbz	r0, 6668 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6662:	8b20      	ldrh	r0, [r4, #24]
    6664:	1e40      	subs	r0, r0, #1
    6666:	8320      	strh	r0, [r4, #24]
    6668:	2001      	movs	r0, #1
    666a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    666e:	4640      	mov	r0, r8
    6670:	f008 fda5 	bl	f1be <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6674:	b910      	cbnz	r0, 667c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6676:	8aa0      	ldrh	r0, [r4, #20]
    6678:	42a8      	cmp	r0, r5
    667a:	d1ea      	bne.n	6652 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    667c:	2000      	movs	r0, #0
    667e:	e7f4      	b.n	666a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6680:	20001328 	.word	0x20001328
    6684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6688:	468a      	mov	sl, r1
    668a:	4699      	mov	r9, r3
    668c:	4615      	mov	r5, r2
    668e:	4604      	mov	r4, r0
    6690:	a901      	add	r1, sp, #4
    6692:	f008 fa47 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6696:	bbd8      	cbnz	r0, 6710 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    6698:	9f02      	ldr	r7, [sp, #8]
    669a:	2001      	movs	r0, #1
    669c:	3780      	adds	r7, #128	; 0x80
    669e:	b18d      	cbz	r5, 66c4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x94>
    66a0:	4620      	mov	r0, r4
    66a2:	f7fe fb9b 	bl	4ddc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    66a6:	0004      	movs	r4, r0
    66a8:	d00e      	beq.n	66c8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x98>
    66aa:	4629      	mov	r1, r5
    66ac:	f007 fed3 	bl	e456 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    66b0:	0006      	movs	r6, r0
    66b2:	d003      	beq.n	66bc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8c>
    66b4:	4819      	ldr	r0, [pc, #100]	; (671c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xec>)
    66b6:	8840      	ldrh	r0, [r0, #2]
    66b8:	42a8      	cmp	r0, r5
    66ba:	d207      	bcs.n	66cc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    66bc:	2000      	movs	r0, #0
    66be:	b004      	add	sp, #16
    66c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    66c4:	7578      	strb	r0, [r7, #21]
    66c6:	e023      	b.n	6710 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    66c8:	216e      	movs	r1, #110	; 0x6e
    66ca:	e024      	b.n	6716 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe6>
    66cc:	4620      	mov	r0, r4
    66ce:	4631      	mov	r1, r6
    66d0:	aa03      	add	r2, sp, #12
    66d2:	f007 feb9 	bl	e448 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    66d6:	9803      	ldr	r0, [sp, #12]
    66d8:	f04f 0800 	mov.w	r8, #0
    66dc:	f8a0 8000 	strh.w	r8, [r0]
    66e0:	f880 8002 	strb.w	r8, [r0, #2]
    66e4:	7d79      	ldrb	r1, [r7, #21]
    66e6:	b109      	cbz	r1, 66ec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    66e8:	f04f 0a02 	mov.w	sl, #2
    66ec:	4651      	mov	r1, sl
    66ee:	f008 fce0 	bl	f0b2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    66f2:	4631      	mov	r1, r6
    66f4:	2603      	movs	r6, #3
    66f6:	4620      	mov	r0, r4
    66f8:	464a      	mov	r2, r9
    66fa:	462b      	mov	r3, r5
    66fc:	9600      	str	r6, [sp, #0]
    66fe:	f007 fd70 	bl	e1e2 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6702:	4620      	mov	r0, r4
    6704:	4629      	mov	r1, r5
    6706:	f007 fe4a 	bl	e39e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    670a:	b118      	cbz	r0, 6714 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    670c:	f887 8015 	strb.w	r8, [r7, #21]
    6710:	2001      	movs	r0, #1
    6712:	e7d4      	b.n	66be <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    6714:	2184      	movs	r1, #132	; 0x84
    6716:	202b      	movs	r0, #43	; 0x2b
    6718:	f7fd ff4e 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    671c:	20001328 	.word	0x20001328

00006720 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    6720:	4901      	ldr	r1, [pc, #4]	; (6728 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    6722:	2001      	movs	r0, #1
    6724:	7008      	strb	r0, [r1, #0]
    6726:	4770      	bx	lr
    6728:	200015d0 	.word	0x200015d0

0000672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    672c:	b538      	push	{r3, r4, r5, lr}
    672e:	b198      	cbz	r0, 6758 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x2c>
    6730:	7a03      	ldrb	r3, [r0, #8]
    6732:	f88d 3000 	strb.w	r3, [sp]
    6736:	9b00      	ldr	r3, [sp, #0]
    6738:	9300      	str	r3, [sp, #0]
    673a:	f89d 3000 	ldrb.w	r3, [sp]
    673e:	2b00      	cmp	r3, #0
    6740:	d114      	bne.n	676c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    6742:	6003      	str	r3, [r0, #0]
    6744:	6041      	str	r1, [r0, #4]
    6746:	f3ef 8310 	mrs	r3, PRIMASK
    674a:	b672      	cpsid	i
    674c:	4908      	ldr	r1, [pc, #32]	; (6770 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x44>)
    674e:	680c      	ldr	r4, [r1, #0]
    6750:	b13c      	cbz	r4, 6762 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x36>
    6752:	684c      	ldr	r4, [r1, #4]
    6754:	6020      	str	r0, [r4, #0]
    6756:	e005      	b.n	6764 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x38>
    6758:	f240 4141 	movw	r1, #1089	; 0x441
    675c:	2010      	movs	r0, #16
    675e:	f7fd ff2b 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6762:	6008      	str	r0, [r1, #0]
    6764:	6048      	str	r0, [r1, #4]
    6766:	b903      	cbnz	r3, 676a <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x3e>
    6768:	b662      	cpsie	i
    676a:	7202      	strb	r2, [r0, #8]
    676c:	bd38      	pop	{r3, r4, r5, pc}
    676e:	0000      	.short	0x0000
    6770:	20000118 	.word	0x20000118

00006774 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6778:	0004      	movs	r4, r0
    677a:	d00a      	beq.n	6792 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    677c:	484e      	ldr	r0, [pc, #312]	; (68b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>)
    677e:	2500      	movs	r5, #0
    6780:	7801      	ldrb	r1, [r0, #0]
    6782:	b149      	cbz	r1, 6798 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    6784:	7065      	strb	r5, [r4, #1]
    6786:	2103      	movs	r1, #3
    6788:	7021      	strb	r1, [r4, #0]
    678a:	2101      	movs	r1, #1
    678c:	7121      	strb	r1, [r4, #4]
    678e:	7005      	strb	r5, [r0, #0]
    6790:	e08e      	b.n	68b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    6792:	f240 315d 	movw	r1, #861	; 0x35d
    6796:	e05c      	b.n	6852 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    6798:	f8df 9120 	ldr.w	r9, [pc, #288]	; 68bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    679c:	f88d 5000 	strb.w	r5, [sp]
    67a0:	4668      	mov	r0, sp
    67a2:	f000 f945 	bl	6a30 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xf4>
    67a6:	f89d 1000 	ldrb.w	r1, [sp]
    67aa:	2900      	cmp	r1, #0
    67ac:	d1f8      	bne.n	67a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c>
    67ae:	2800      	cmp	r0, #0
    67b0:	d07f      	beq.n	68b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    67b2:	4606      	mov	r6, r0
    67b4:	7a00      	ldrb	r0, [r0, #8]
    67b6:	f88d 0000 	strb.w	r0, [sp]
    67ba:	9800      	ldr	r0, [sp, #0]
    67bc:	9000      	str	r0, [sp, #0]
    67be:	f89d 7000 	ldrb.w	r7, [sp]
    67c2:	2f21      	cmp	r7, #33	; 0x21
    67c4:	d26e      	bcs.n	68a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    67c6:	e8df f007 	tbb	[pc, r7]
    67ca:	496d      	.short	0x496d
    67cc:	49276d1c 	.word	0x49276d1c
    67d0:	49496d49 	.word	0x49496d49
    67d4:	6d494949 	.word	0x6d494949
    67d8:	4949276d 	.word	0x4949276d
    67dc:	6d6d276d 	.word	0x6d6d276d
    67e0:	6d49496d 	.word	0x6d49496d
    67e4:	5b634949 	.word	0x5b634949
    67e8:	00116d6d 	.word	0x00116d6d
    67ec:	7065      	strb	r5, [r4, #1]
    67ee:	2014      	movs	r0, #20
    67f0:	7020      	strb	r0, [r4, #0]
    67f2:	2220      	movs	r2, #32
    67f4:	2100      	movs	r1, #0
    67f6:	1d20      	adds	r0, r4, #4
    67f8:	f006 ff99 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    67fc:	2002      	movs	r0, #2
    67fe:	7120      	strb	r0, [r4, #4]
    6800:	e02a      	b.n	6858 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe4>
    6802:	f8d9 3000 	ldr.w	r3, [r9]
    6806:	b3ab      	cbz	r3, 6874 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
    6808:	2202      	movs	r2, #2
    680a:	4621      	mov	r1, r4
    680c:	2000      	movs	r0, #0
    680e:	4798      	blx	r3
    6810:	4620      	mov	r0, r4
    6812:	f000 f89b 	bl	694c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    6816:	e04b      	b.n	68b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    6818:	f8d9 3000 	ldr.w	r3, [r9]
    681c:	b35b      	cbz	r3, 6876 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x102>
    681e:	463a      	mov	r2, r7
    6820:	4621      	mov	r1, r4
    6822:	2000      	movs	r0, #0
    6824:	4798      	blx	r3
    6826:	7820      	ldrb	r0, [r4, #0]
    6828:	2818      	cmp	r0, #24
    682a:	d115      	bne.n	6858 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe4>
    682c:	7920      	ldrb	r0, [r4, #4]
    682e:	2801      	cmp	r0, #1
    6830:	d112      	bne.n	6858 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe4>
    6832:	88e0      	ldrh	r0, [r4, #6]
    6834:	2100      	movs	r1, #0
    6836:	f007 ffb7 	bl	e7a8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    683a:	0004      	movs	r4, r0
    683c:	d00c      	beq.n	6858 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe4>
    683e:	8820      	ldrh	r0, [r4, #0]
    6840:	f008 f84f 	bl	e8e2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6844:	8820      	ldrh	r0, [r4, #0]
    6846:	2100      	movs	r1, #0
    6848:	f7fe f930 	bl	4aac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    684c:	b120      	cbz	r0, 6858 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe4>
    684e:	f44f 7196 	mov.w	r1, #300	; 0x12c
    6852:	2010      	movs	r0, #16
    6854:	f7fd feb0 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6858:	7235      	strb	r5, [r6, #8]
    685a:	e029      	b.n	68b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    685c:	4818      	ldr	r0, [pc, #96]	; (68c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14c>)
    685e:	6800      	ldr	r0, [r0, #0]
    6860:	b318      	cbz	r0, 68aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    6862:	463a      	mov	r2, r7
    6864:	4631      	mov	r1, r6
    6866:	4620      	mov	r0, r4
    6868:	f000 f912 	bl	6a90 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x154>
    686c:	b120      	cbz	r0, 6878 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x104>
    686e:	2f0b      	cmp	r7, #11
    6870:	d01e      	beq.n	68b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    6872:	e7f1      	b.n	6858 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe4>
    6874:	e01b      	b.n	68ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    6876:	e019      	b.n	68ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    6878:	2f0b      	cmp	r7, #11
    687a:	d019      	beq.n	68b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    687c:	7235      	strb	r5, [r6, #8]
    687e:	e78d      	b.n	679c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x28>
    6880:	4810      	ldr	r0, [pc, #64]	; (68c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x150>)
    6882:	6803      	ldr	r3, [r0, #0]
    6884:	b11b      	cbz	r3, 688e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11a>
    6886:	2200      	movs	r2, #0
    6888:	4621      	mov	r1, r4
    688a:	4610      	mov	r0, r2
    688c:	4798      	blx	r3
    688e:	e7e3      	b.n	6858 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe4>
    6890:	480d      	ldr	r0, [pc, #52]	; (68c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>)
    6892:	6803      	ldr	r3, [r0, #0]
    6894:	b11b      	cbz	r3, 689e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    6896:	2200      	movs	r2, #0
    6898:	4621      	mov	r1, r4
    689a:	4610      	mov	r0, r2
    689c:	4798      	blx	r3
    689e:	e7db      	b.n	6858 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe4>
    68a0:	e007      	b.n	68b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    68a2:	e7ff      	b.n	68a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    68a4:	f240 412d 	movw	r1, #1069	; 0x42d
    68a8:	e7d3      	b.n	6852 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    68aa:	e7d5      	b.n	6858 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe4>
    68ac:	e7d4      	b.n	6858 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe4>
    68ae:	e7d3      	b.n	6858 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe4>
    68b0:	2001      	movs	r0, #1
    68b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    68b6:	0000      	.short	0x0000
    68b8:	200015d0 	.word	0x200015d0
    68bc:	20000128 	.word	0x20000128
    68c0:	20000124 	.word	0x20000124
    68c4:	2000012c 	.word	0x2000012c
    68c8:	20000120 	.word	0x20000120

000068cc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    68cc:	4901      	ldr	r1, [pc, #4]	; (68d4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    68ce:	7008      	strb	r0, [r1, #0]
    68d0:	f000 b9b0 	b.w	6c34 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f8>
    68d4:	20000114 	.word	0x20000114

000068d8 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>:
    68d8:	b510      	push	{r4, lr}
    68da:	2220      	movs	r2, #32
    68dc:	2100      	movs	r1, #0
    68de:	4803      	ldr	r0, [pc, #12]	; (68ec <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA+0x14>)
    68e0:	f7ff ff24 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    68e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    68e8:	f000 b812 	b.w	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    68ec:	200015d1 	.word	0x200015d1

000068f0 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>:
    68f0:	4806      	ldr	r0, [pc, #24]	; (690c <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY+0x1c>)
    68f2:	b508      	push	{r3, lr}
    68f4:	7a40      	ldrb	r0, [r0, #9]
    68f6:	f88d 0000 	strb.w	r0, [sp]
    68fa:	9800      	ldr	r0, [sp, #0]
    68fc:	9000      	str	r0, [sp, #0]
    68fe:	f89d 0000 	ldrb.w	r0, [sp]
    6902:	2800      	cmp	r0, #0
    6904:	d000      	beq.n	6908 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY+0x18>
    6906:	2001      	movs	r0, #1
    6908:	bd08      	pop	{r3, pc}
    690a:	0000      	.short	0x0000
    690c:	200015d0 	.word	0x200015d0

00006910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6910:	4801      	ldr	r0, [pc, #4]	; (6918 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6912:	7800      	ldrb	r0, [r0, #0]
    6914:	f7fd bc06 	b.w	4124 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6918:	20000114 	.word	0x20000114

0000691c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    691c:	4904      	ldr	r1, [pc, #16]	; (6930 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x14>)
    691e:	4803      	ldr	r0, [pc, #12]	; (692c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x10>)
    6920:	6008      	str	r0, [r1, #0]
    6922:	4905      	ldr	r1, [pc, #20]	; (6938 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1c>)
    6924:	4803      	ldr	r0, [pc, #12]	; (6934 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x18>)
    6926:	6008      	str	r0, [r1, #0]
    6928:	4770      	bx	lr
    692a:	0000      	.short	0x0000
    692c:	0000f2c1 	.word	0x0000f2c1
    6930:	20000124 	.word	0x20000124
    6934:	0000522d 	.word	0x0000522d
    6938:	2000012c 	.word	0x2000012c

0000693c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
    693c:	4902      	ldr	r1, [pc, #8]	; (6948 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
    693e:	4801      	ldr	r0, [pc, #4]	; (6944 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
    6940:	6008      	str	r0, [r1, #0]
    6942:	4770      	bx	lr
    6944:	00006e45 	.word	0x00006e45
    6948:	20000128 	.word	0x20000128
    694c:	b570      	push	{r4, r5, r6, lr}
    694e:	4604      	mov	r4, r0
    6950:	7800      	ldrb	r0, [r0, #0]
    6952:	2805      	cmp	r0, #5
    6954:	d001      	beq.n	695a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e>
    6956:	21cf      	movs	r1, #207	; 0xcf
    6958:	e059      	b.n	6a0e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd2>
    695a:	7ba0      	ldrb	r0, [r4, #14]
    695c:	06c0      	lsls	r0, r0, #27
    695e:	d401      	bmi.n	6964 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x28>
    6960:	21d0      	movs	r1, #208	; 0xd0
    6962:	e054      	b.n	6a0e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd2>
    6964:	221c      	movs	r2, #28
    6966:	1d21      	adds	r1, r4, #4
    6968:	4830      	ldr	r0, [pc, #192]	; (6a2c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xf0>)
    696a:	f006 fe66 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    696e:	482f      	ldr	r0, [pc, #188]	; (6a2c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xf0>)
    6970:	7b22      	ldrb	r2, [r4, #12]
    6972:	f104 0120 	add.w	r1, r4, #32
    6976:	301c      	adds	r0, #28
    6978:	f006 fe5f 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    697c:	482b      	ldr	r0, [pc, #172]	; (6a2c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xf0>)
    697e:	f04f 0201 	mov.w	r2, #1
    6982:	7a81      	ldrb	r1, [r0, #10]
    6984:	0749      	lsls	r1, r1, #29
    6986:	d502      	bpl.n	698e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x52>
    6988:	7cc1      	ldrb	r1, [r0, #19]
    698a:	29fe      	cmp	r1, #254	; 0xfe
    698c:	d00c      	beq.n	69a8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x6c>
    698e:	2304      	movs	r3, #4
    6990:	7023      	strb	r3, [r4, #0]
    6992:	6801      	ldr	r1, [r0, #0]
    6994:	6061      	str	r1, [r4, #4]
    6996:	6841      	ldr	r1, [r0, #4]
    6998:	60a1      	str	r1, [r4, #8]
    699a:	8901      	ldrh	r1, [r0, #8]
    699c:	81a1      	strh	r1, [r4, #12]
    699e:	7a81      	ldrb	r1, [r0, #10]
    69a0:	070d      	lsls	r5, r1, #28
    69a2:	d519      	bpl.n	69d8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x9c>
    69a4:	73a3      	strb	r3, [r4, #14]
    69a6:	e02d      	b.n	6a04 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc8>
    69a8:	2113      	movs	r1, #19
    69aa:	7021      	strb	r1, [r4, #0]
    69ac:	7801      	ldrb	r1, [r0, #0]
    69ae:	7121      	strb	r1, [r4, #4]
    69b0:	7162      	strb	r2, [r4, #5]
    69b2:	7841      	ldrb	r1, [r0, #1]
    69b4:	71a1      	strb	r1, [r4, #6]
    69b6:	f8d0 1002 	ldr.w	r1, [r0, #2]
    69ba:	f8c4 1007 	str.w	r1, [r4, #7]
    69be:	88c1      	ldrh	r1, [r0, #6]
    69c0:	f8a4 100b 	strh.w	r1, [r4, #11]
    69c4:	21fe      	movs	r1, #254	; 0xfe
    69c6:	7361      	strb	r1, [r4, #13]
    69c8:	6941      	ldr	r1, [r0, #20]
    69ca:	f8c4 100e 	str.w	r1, [r4, #14]
    69ce:	8b01      	ldrh	r1, [r0, #24]
    69d0:	8261      	strh	r1, [r4, #18]
    69d2:	7a40      	ldrb	r0, [r0, #9]
    69d4:	7520      	strb	r0, [r4, #20]
    69d6:	bd70      	pop	{r4, r5, r6, pc}
    69d8:	07cb      	lsls	r3, r1, #31
    69da:	d003      	beq.n	69e4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    69dc:	078b      	lsls	r3, r1, #30
    69de:	d501      	bpl.n	69e4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    69e0:	2100      	movs	r1, #0
    69e2:	e00e      	b.n	6a02 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc6>
    69e4:	074b      	lsls	r3, r1, #29
    69e6:	d501      	bpl.n	69ec <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb0>
    69e8:	73a2      	strb	r2, [r4, #14]
    69ea:	e00b      	b.n	6a04 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc8>
    69ec:	07ca      	lsls	r2, r1, #31
    69ee:	d111      	bne.n	6a14 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd8>
    69f0:	078a      	lsls	r2, r1, #30
    69f2:	d501      	bpl.n	69f8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xbc>
    69f4:	2102      	movs	r1, #2
    69f6:	e004      	b.n	6a02 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc6>
    69f8:	07ca      	lsls	r2, r1, #31
    69fa:	d10b      	bne.n	6a14 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd8>
    69fc:	0789      	lsls	r1, r1, #30
    69fe:	d409      	bmi.n	6a14 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd8>
    6a00:	2103      	movs	r1, #3
    6a02:	73a1      	strb	r1, [r4, #14]
    6a04:	7a02      	ldrb	r2, [r0, #8]
    6a06:	2a1f      	cmp	r2, #31
    6a08:	d907      	bls.n	6a1a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xde>
    6a0a:	f44f 718a 	mov.w	r1, #276	; 0x114
    6a0e:	2010      	movs	r0, #16
    6a10:	f7fd fdd2 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a14:	f240 1111 	movw	r1, #273	; 0x111
    6a18:	e7f9      	b.n	6a0e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd2>
    6a1a:	f104 000f 	add.w	r0, r4, #15
    6a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a22:	4902      	ldr	r1, [pc, #8]	; (6a2c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xf0>)
    6a24:	311c      	adds	r1, #28
    6a26:	f006 be08 	b.w	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a2a:	0000      	.short	0x0000
    6a2c:	20001595 	.word	0x20001595
    6a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a32:	4605      	mov	r5, r0
    6a34:	4c15      	ldr	r4, [pc, #84]	; (6a8c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x150>)
    6a36:	2000      	movs	r0, #0
    6a38:	7028      	strb	r0, [r5, #0]
    6a3a:	6820      	ldr	r0, [r4, #0]
    6a3c:	2800      	cmp	r0, #0
    6a3e:	d023      	beq.n	6a88 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x14c>
    6a40:	7a01      	ldrb	r1, [r0, #8]
    6a42:	2601      	movs	r6, #1
    6a44:	f88d 1000 	strb.w	r1, [sp]
    6a48:	9900      	ldr	r1, [sp, #0]
    6a4a:	9100      	str	r1, [sp, #0]
    6a4c:	f89d 1000 	ldrb.w	r1, [sp]
    6a50:	2908      	cmp	r1, #8
    6a52:	d107      	bne.n	6a64 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x128>
    6a54:	6840      	ldr	r0, [r0, #4]
    6a56:	8800      	ldrh	r0, [r0, #0]
    6a58:	f7fe f9aa 	bl	4db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6a5c:	f007 fbd8 	bl	e210 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6a60:	2800      	cmp	r0, #0
    6a62:	d011      	beq.n	6a88 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x14c>
    6a64:	f3ef 8110 	mrs	r1, PRIMASK
    6a68:	6820      	ldr	r0, [r4, #0]
    6a6a:	b672      	cpsid	i
    6a6c:	6802      	ldr	r2, [r0, #0]
    6a6e:	6022      	str	r2, [r4, #0]
    6a70:	b901      	cbnz	r1, 6a74 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x138>
    6a72:	b662      	cpsie	i
    6a74:	7a01      	ldrb	r1, [r0, #8]
    6a76:	f88d 1000 	strb.w	r1, [sp]
    6a7a:	9900      	ldr	r1, [sp, #0]
    6a7c:	9100      	str	r1, [sp, #0]
    6a7e:	f89d 1000 	ldrb.w	r1, [sp]
    6a82:	2900      	cmp	r1, #0
    6a84:	d100      	bne.n	6a88 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x14c>
    6a86:	702e      	strb	r6, [r5, #0]
    6a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a8a:	0000      	.short	0x0000
    6a8c:	20000118 	.word	0x20000118
    6a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a94:	b086      	sub	sp, #24
    6a96:	000f      	movs	r7, r1
    6a98:	4604      	mov	r4, r0
    6a9a:	4691      	mov	r9, r2
    6a9c:	d013      	beq.n	6ac6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    6a9e:	6878      	ldr	r0, [r7, #4]
    6aa0:	b188      	cbz	r0, 6ac6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    6aa2:	f100 0580 	add.w	r5, r0, #128	; 0x80
    6aa6:	f500 719a 	add.w	r1, r0, #308	; 0x134
    6aaa:	8806      	ldrh	r6, [r0, #0]
    6aac:	4610      	mov	r0, r2
    6aae:	f04f 0800 	mov.w	r8, #0
    6ab2:	2a10      	cmp	r2, #16
    6ab4:	d079      	beq.n	6baa <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26e>
    6ab6:	dc09      	bgt.n	6acc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x190>
    6ab8:	f04f 0a01 	mov.w	sl, #1
    6abc:	2801      	cmp	r0, #1
    6abe:	d00a      	beq.n	6ad6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    6ac0:	2a0b      	cmp	r2, #11
    6ac2:	d171      	bne.n	6ba8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26c>
    6ac4:	e01a      	b.n	6afc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1c0>
    6ac6:	f240 2182 	movw	r1, #642	; 0x282
    6aca:	e0ad      	b.n	6c28 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2ec>
    6acc:	281a      	cmp	r0, #26
    6ace:	d04d      	beq.n	6b6c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x230>
    6ad0:	2a1b      	cmp	r2, #27
    6ad2:	d169      	bne.n	6ba8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26c>
    6ad4:	e027      	b.n	6b26 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ea>
    6ad6:	2d00      	cmp	r5, #0
    6ad8:	d00f      	beq.n	6afa <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1be>
    6ada:	f884 8001 	strb.w	r8, [r4, #1]
    6ade:	f884 a000 	strb.w	sl, [r4]
    6ae2:	f884 8004 	strb.w	r8, [r4, #4]
    6ae6:	f8a4 6005 	strh.w	r6, [r4, #5]
    6aea:	f895 0059 	ldrb.w	r0, [r5, #89]	; 0x59
    6aee:	71e0      	strb	r0, [r4, #7]
    6af0:	f835 0f5a 	ldrh.w	r0, [r5, #90]!
    6af4:	8120      	strh	r0, [r4, #8]
    6af6:	8868      	ldrh	r0, [r5, #2]
    6af8:	8160      	strh	r0, [r4, #10]
    6afa:	e076      	b.n	6bea <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2ae>
    6afc:	4630      	mov	r0, r6
    6afe:	f7fe f96d 	bl	4ddc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6b02:	b168      	cbz	r0, 6b20 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e4>
    6b04:	f884 8001 	strb.w	r8, [r4, #1]
    6b08:	220f      	movs	r2, #15
    6b0a:	7022      	strb	r2, [r4, #0]
    6b0c:	80e6      	strh	r6, [r4, #6]
    6b0e:	4641      	mov	r1, r8
    6b10:	f8a4 a008 	strh.w	sl, [r4, #8]
    6b14:	f884 a004 	strb.w	sl, [r4, #4]
    6b18:	460a      	mov	r2, r1
    6b1a:	f007 fd73 	bl	e604 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6b1e:	e064      	b.n	6bea <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2ae>
    6b20:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    6b24:	e080      	b.n	6c28 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2ec>
    6b26:	f7ff fd79 	bl	661c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    6b2a:	b3e8      	cbz	r0, 6ba8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26c>
    6b2c:	f887 8008 	strb.w	r8, [r7, #8]
    6b30:	4630      	mov	r0, r6
    6b32:	f8ad 6000 	strh.w	r6, [sp]
    6b36:	a902      	add	r1, sp, #8
    6b38:	f007 fff4 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6b3c:	b110      	cbz	r0, 6b44 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x208>
    6b3e:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    6b42:	e071      	b.n	6c28 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2ec>
    6b44:	9803      	ldr	r0, [sp, #12]
    6b46:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
    6b4a:	f88d 1002 	strb.w	r1, [sp, #2]
    6b4e:	7841      	ldrb	r1, [r0, #1]
    6b50:	f88d 1003 	strb.w	r1, [sp, #3]
    6b54:	8840      	ldrh	r0, [r0, #2]
    6b56:	f8ad 0004 	strh.w	r0, [sp, #4]
    6b5a:	2102      	movs	r1, #2
    6b5c:	4668      	mov	r0, sp
    6b5e:	f009 fcb0 	bl	104c2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6b62:	2800      	cmp	r0, #0
    6b64:	d034      	beq.n	6bd0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x294>
    6b66:	f44f 71c2 	mov.w	r1, #388	; 0x184
    6b6a:	e05d      	b.n	6c28 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2ec>
    6b6c:	f7ff fd4c 	bl	6608 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    6b70:	b1d0      	cbz	r0, 6ba8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26c>
    6b72:	f887 8008 	strb.w	r8, [r7, #8]
    6b76:	a903      	add	r1, sp, #12
    6b78:	4630      	mov	r0, r6
    6b7a:	f009 fbd7 	bl	1032c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6b7e:	b110      	cbz	r0, 6b86 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x24a>
    6b80:	f240 118b 	movw	r1, #395	; 0x18b
    6b84:	e050      	b.n	6c28 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2ec>
    6b86:	f8ad 6000 	strh.w	r6, [sp]
    6b8a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6b8e:	f8ad 0002 	strh.w	r0, [sp, #2]
    6b92:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6b96:	f8ad 0004 	strh.w	r0, [sp, #4]
    6b9a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6b9e:	f8ad 0006 	strh.w	r0, [sp, #6]
    6ba2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6ba6:	e001      	b.n	6bac <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x270>
    6ba8:	e015      	b.n	6bd6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x29a>
    6baa:	e009      	b.n	6bc0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x284>
    6bac:	f8ad 0008 	strh.w	r0, [sp, #8]
    6bb0:	4668      	mov	r0, sp
    6bb2:	f009 fbdf 	bl	10374 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6bb6:	2800      	cmp	r0, #0
    6bb8:	d00a      	beq.n	6bd0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x294>
    6bba:	f44f 71ca 	mov.w	r1, #404	; 0x194
    6bbe:	e033      	b.n	6c28 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2ec>
    6bc0:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    6bc4:	f000 0001 	and.w	r0, r0, #1
    6bc8:	f7ff fd12 	bl	65f0 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    6bcc:	b130      	cbz	r0, 6bdc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2a0>
    6bce:	2000      	movs	r0, #0
    6bd0:	b006      	add	sp, #24
    6bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6bd6:	f1b9 0f08 	cmp.w	r9, #8
    6bda:	d008      	beq.n	6bee <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b2>
    6bdc:	4814      	ldr	r0, [pc, #80]	; (6c30 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f4>)
    6bde:	6803      	ldr	r3, [r0, #0]
    6be0:	b11b      	cbz	r3, 6bea <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2ae>
    6be2:	6878      	ldr	r0, [r7, #4]
    6be4:	464a      	mov	r2, r9
    6be6:	4621      	mov	r1, r4
    6be8:	4798      	blx	r3
    6bea:	2001      	movs	r0, #1
    6bec:	e7f0      	b.n	6bd0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x294>
    6bee:	4630      	mov	r0, r6
    6bf0:	f7fe f8de 	bl	4db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6bf4:	f007 fb0c 	bl	e210 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6bf8:	b1a0      	cbz	r0, 6c24 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e8>
    6bfa:	4630      	mov	r0, r6
    6bfc:	f007 fe71 	bl	e8e2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6c00:	2100      	movs	r1, #0
    6c02:	4630      	mov	r0, r6
    6c04:	f7fd ff52 	bl	4aac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6c08:	2d00      	cmp	r5, #0
    6c0a:	d0ee      	beq.n	6bea <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2ae>
    6c0c:	f884 8001 	strb.w	r8, [r4, #1]
    6c10:	210c      	movs	r1, #12
    6c12:	7021      	strb	r1, [r4, #0]
    6c14:	f884 8004 	strb.w	r8, [r4, #4]
    6c18:	f8a4 6005 	strh.w	r6, [r4, #5]
    6c1c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    6c20:	71e0      	strb	r0, [r4, #7]
    6c22:	e7e2      	b.n	6bea <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2ae>
    6c24:	f240 21c3 	movw	r1, #707	; 0x2c3
    6c28:	2010      	movs	r0, #16
    6c2a:	f7fd fcc5 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c2e:	0000      	.short	0x0000
    6c30:	20000124 	.word	0x20000124
    6c34:	4904      	ldr	r1, [pc, #16]	; (6c48 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x30c>)
    6c36:	2000      	movs	r0, #0
    6c38:	6048      	str	r0, [r1, #4]
    6c3a:	6088      	str	r0, [r1, #8]
    6c3c:	4903      	ldr	r1, [pc, #12]	; (6c4c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x310>)
    6c3e:	f841 0f3b 	str.w	r0, [r1, #59]!
    6c42:	6048      	str	r0, [r1, #4]
    6c44:	8108      	strh	r0, [r1, #8]
    6c46:	4770      	bx	lr
    6c48:	20000114 	.word	0x20000114
    6c4c:	20001595 	.word	0x20001595

00006c50 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    6c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c52:	f06f 021f 	mvn.w	r2, #31
    6c56:	0c01      	lsrs	r1, r0, #16
    6c58:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    6c5c:	251f      	movs	r5, #31
    6c5e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6c62:	3854      	subs	r0, #84	; 0x54
    6c64:	d00d      	beq.n	6c82 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6c66:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6c6a:	3855      	subs	r0, #85	; 0x55
    6c6c:	d009      	beq.n	6c82 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6c6e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    6c72:	38aa      	subs	r0, #170	; 0xaa
    6c74:	d005      	beq.n	6c82 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6c76:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    6c7a:	38aa      	subs	r0, #170	; 0xaa
    6c7c:	d001      	beq.n	6c82 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6c7e:	2001      	movs	r0, #1
    6c80:	e000      	b.n	6c84 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    6c82:	2000      	movs	r0, #0
    6c84:	2200      	movs	r2, #0
    6c86:	4613      	mov	r3, r2
    6c88:	ea4f 0402 	mov.w	r4, r2
    6c8c:	ea82 0701 	eor.w	r7, r2, r1
    6c90:	43ff      	mvns	r7, r7
    6c92:	431f      	orrs	r7, r3
    6c94:	1c7f      	adds	r7, r7, #1
    6c96:	d00f      	beq.n	6cb8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    6c98:	f006 0701 	and.w	r7, r6, #1
    6c9c:	0852      	lsrs	r2, r2, #1
    6c9e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    6ca2:	f005 0701 	and.w	r7, r5, #1
    6ca6:	085b      	lsrs	r3, r3, #1
    6ca8:	0876      	lsrs	r6, r6, #1
    6caa:	086d      	lsrs	r5, r5, #1
    6cac:	1c64      	adds	r4, r4, #1
    6cae:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    6cb2:	2c16      	cmp	r4, #22
    6cb4:	d3ea      	bcc.n	6c8c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    6cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cb8:	2000      	movs	r0, #0
    6cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006cbc <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    6cbc:	b510      	push	{r4, lr}
    6cbe:	4604      	mov	r4, r0
    6cc0:	f008 fcf1 	bl	f6a6 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    6cc4:	b308      	cbz	r0, 6d0a <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    6cc6:	43e0      	mvns	r0, r4
    6cc8:	f008 fced 	bl	f6a6 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    6ccc:	b1e8      	cbz	r0, 6d0a <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    6cce:	16a0      	asrs	r0, r4, #26
    6cd0:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    6cd4:	1e41      	subs	r1, r0, #1
    6cd6:	4208      	tst	r0, r1
    6cd8:	d017      	beq.n	6d0a <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    6cda:	4620      	mov	r0, r4
    6cdc:	f008 fd32 	bl	f744 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>
    6ce0:	2818      	cmp	r0, #24
    6ce2:	d812      	bhi.n	6d0a <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    6ce4:	b2a0      	uxth	r0, r4
    6ce6:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    6cea:	d107      	bne.n	6cfc <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x40>
    6cec:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    6cf0:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    6cf4:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    6cf8:	4281      	cmp	r1, r0
    6cfa:	d006      	beq.n	6d0a <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    6cfc:	4804      	ldr	r0, [pc, #16]	; (6d10 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    6cfe:	4044      	eors	r4, r0
    6d00:	1e60      	subs	r0, r4, #1
    6d02:	4204      	tst	r4, r0
    6d04:	d001      	beq.n	6d0a <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    6d06:	2001      	movs	r0, #1
    6d08:	bd10      	pop	{r4, pc}
    6d0a:	2000      	movs	r0, #0
    6d0c:	bd10      	pop	{r4, pc}
    6d0e:	0000      	.short	0x0000
    6d10:	8e89bed6 	.word	0x8e89bed6

00006d14 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    6d14:	b510      	push	{r4, lr}
    6d16:	4804      	ldr	r0, [pc, #16]	; (6d28 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    6d18:	f008 fcd6 	bl	f6c8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x74>
    6d1c:	4802      	ldr	r0, [pc, #8]	; (6d28 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    6d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d22:	3008      	adds	r0, #8
    6d24:	f008 bcd0 	b.w	f6c8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x74>
    6d28:	20000130 	.word	0x20000130

00006d2c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    6d2c:	4801      	ldr	r0, [pc, #4]	; (6d34 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    6d2e:	f000 b803 	b.w	6d38 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    6d32:	0000      	.short	0x0000
    6d34:	20000138 	.word	0x20000138
    6d38:	b510      	push	{r4, lr}
    6d3a:	e9d0 2100 	ldrd	r2, r1, [r0]
    6d3e:	4b09      	ldr	r3, [pc, #36]	; (6d64 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    6d40:	4c09      	ldr	r4, [pc, #36]	; (6d68 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    6d42:	4353      	muls	r3, r2
    6d44:	4354      	muls	r4, r2
    6d46:	4051      	eors	r1, r2
    6d48:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    6d4c:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    6d50:	ea4f 41f1 	mov.w	r1, r1, ror #19
    6d54:	e9c0 2100 	strd	r2, r1, [r0]
    6d58:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    6d5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6d60:	4618      	mov	r0, r3
    6d62:	bd10      	pop	{r4, pc}
    6d64:	c6ef3760 	.word	0xc6ef3760
    6d68:	9e3779bb 	.word	0x9e3779bb

00006d6c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    6d6c:	4801      	ldr	r0, [pc, #4]	; (6d74 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    6d6e:	6840      	ldr	r0, [r0, #4]
    6d70:	30a0      	adds	r0, #160	; 0xa0
    6d72:	4770      	bx	lr
    6d74:	20000140 	.word	0x20000140

00006d78 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    6d78:	b510      	push	{r4, lr}
    6d7a:	4c21      	ldr	r4, [pc, #132]	; (6e00 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    6d7c:	6860      	ldr	r0, [r4, #4]
    6d7e:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    6d82:	f008 fcf7 	bl	f774 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x30>
    6d86:	6861      	ldr	r1, [r4, #4]
    6d88:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    6d8c:	314a      	adds	r1, #74	; 0x4a
    6d8e:	f7fe fa0b 	bl	51a8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6d92:	6860      	ldr	r0, [r4, #4]
    6d94:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    6d98:	f008 fcf3 	bl	f782 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x3e>
    6d9c:	6861      	ldr	r1, [r4, #4]
    6d9e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    6da2:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    6da6:	314a      	adds	r1, #74	; 0x4a
    6da8:	f008 fcd0 	bl	f74c <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x8>
    6dac:	b930      	cbnz	r0, 6dbc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    6dae:	6861      	ldr	r1, [r4, #4]
    6db0:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    6db4:	314a      	adds	r1, #74	; 0x4a
    6db6:	f008 fcd2 	bl	f75e <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x1a>
    6dba:	b108      	cbz	r0, 6dc0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    6dbc:	2101      	movs	r1, #1
    6dbe:	e000      	b.n	6dc2 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    6dc0:	2100      	movs	r1, #0
    6dc2:	6860      	ldr	r0, [r4, #4]
    6dc4:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    6dc8:	b919      	cbnz	r1, 6dd2 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    6dca:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    6dce:	2800      	cmp	r0, #0
    6dd0:	d014      	beq.n	6dfc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    6dd2:	f7ff f8ef 	bl	5fb4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6dd6:	490b      	ldr	r1, [pc, #44]	; (6e04 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    6dd8:	fba0 2301 	umull	r2, r3, r0, r1
    6ddc:	6860      	ldr	r0, [r4, #4]
    6dde:	3090      	adds	r0, #144	; 0x90
    6de0:	f008 fd21 	bl	f826 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    6de4:	6860      	ldr	r0, [r4, #4]
    6de6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    6dea:	b110      	cbz	r0, 6df2 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    6dec:	2000      	movs	r0, #0
    6dee:	f7fe ffcb 	bl	5d88 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    6df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6df6:	2000      	movs	r0, #0
    6df8:	f000 be18 	b.w	7a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8a4>
    6dfc:	bd10      	pop	{r4, pc}
    6dfe:	0000      	.short	0x0000
    6e00:	20000140 	.word	0x20000140
    6e04:	000f4240 	.word	0x000f4240

00006e08 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    6e08:	4a04      	ldr	r2, [pc, #16]	; (6e1c <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    6e0a:	2803      	cmp	r0, #3
    6e0c:	6852      	ldr	r2, [r2, #4]
    6e0e:	d100      	bne.n	6e12 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    6e10:	6551      	str	r1, [r2, #84]	; 0x54
    6e12:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    6e16:	2000      	movs	r0, #0
    6e18:	4770      	bx	lr
    6e1a:	0000      	.short	0x0000
    6e1c:	20000140 	.word	0x20000140

00006e20 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    6e20:	4807      	ldr	r0, [pc, #28]	; (6e40 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    6e22:	b508      	push	{r3, lr}
    6e24:	6840      	ldr	r0, [r0, #4]
    6e26:	7a01      	ldrb	r1, [r0, #8]
    6e28:	f88d 1000 	strb.w	r1, [sp]
    6e2c:	9900      	ldr	r1, [sp, #0]
    6e2e:	9100      	str	r1, [sp, #0]
    6e30:	f89d 1000 	ldrb.w	r1, [sp]
    6e34:	b109      	cbz	r1, 6e3a <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    6e36:	8980      	ldrh	r0, [r0, #12]
    6e38:	bd08      	pop	{r3, pc}
    6e3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6e3e:	bd08      	pop	{r3, pc}
    6e40:	20000140 	.word	0x20000140

00006e44 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI>:
    6e44:	b510      	push	{r4, lr}
    6e46:	4608      	mov	r0, r1
    6e48:	2a02      	cmp	r2, #2
    6e4a:	d00d      	beq.n	6e68 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x24>
    6e4c:	4911      	ldr	r1, [pc, #68]	; (6e94 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x50>)
    6e4e:	2300      	movs	r3, #0
    6e50:	2a04      	cmp	r2, #4
    6e52:	6849      	ldr	r1, [r1, #4]
    6e54:	d00c      	beq.n	6e70 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x2c>
    6e56:	2a0f      	cmp	r2, #15
    6e58:	d010      	beq.n	6e7c <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x38>
    6e5a:	2a13      	cmp	r2, #19
    6e5c:	d012      	beq.n	6e84 <sym_OEE7Y6GA2QFP4F46SANDBIPECGZGSUUIR7NQMZI+0x40>
    6e5e:	f240 31f3 	movw	r1, #1011	; 0x3f3
    6e62:	2032      	movs	r0, #50	; 0x32
    6e64:	f7fd fba8 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e6c:	f008 bce6 	b.w	f83c <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY>
    6e70:	7043      	strb	r3, [r0, #1]
    6e72:	2207      	movs	r2, #7
    6e74:	7002      	strb	r2, [r0, #0]
    6e76:	6b49      	ldr	r1, [r1, #52]	; 0x34
    6e78:	6041      	str	r1, [r0, #4]
    6e7a:	bd10      	pop	{r4, pc}
    6e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e80:	f000 b9da 	b.w	7238 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    6e84:	7043      	strb	r3, [r0, #1]
    6e86:	2218      	movs	r2, #24
    6e88:	7002      	strb	r2, [r0, #0]
    6e8a:	f8d1 1042 	ldr.w	r1, [r1, #66]	; 0x42
    6e8e:	6041      	str	r1, [r0, #4]
    6e90:	bd10      	pop	{r4, pc}
    6e92:	0000      	.short	0x0000
    6e94:	20000140 	.word	0x20000140

00006e98 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    6e98:	4902      	ldr	r1, [pc, #8]	; (6ea4 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    6e9a:	6849      	ldr	r1, [r1, #4]
    6e9c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    6ea0:	2000      	movs	r0, #0
    6ea2:	4770      	bx	lr
    6ea4:	20000140 	.word	0x20000140

00006ea8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    6ea8:	480a      	ldr	r0, [pc, #40]	; (6ed4 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    6eaa:	6841      	ldr	r1, [r0, #4]
    6eac:	6e88      	ldr	r0, [r1, #104]	; 0x68
    6eae:	b170      	cbz	r0, 6ece <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    6eb0:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    6eb4:	22ff      	movs	r2, #255	; 0xff
    6eb6:	7002      	strb	r2, [r0, #0]
    6eb8:	2200      	movs	r2, #0
    6eba:	668a      	str	r2, [r1, #104]	; 0x68
    6ebc:	7002      	strb	r2, [r0, #0]
    6ebe:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    6ec2:	2001      	movs	r0, #1
    6ec4:	4088      	lsls	r0, r1
    6ec6:	4904      	ldr	r1, [pc, #16]	; (6ed8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    6ec8:	6008      	str	r0, [r1, #0]
    6eca:	2000      	movs	r0, #0
    6ecc:	4770      	bx	lr
    6ece:	200c      	movs	r0, #12
    6ed0:	4770      	bx	lr
    6ed2:	0000      	.short	0x0000
    6ed4:	20000140 	.word	0x20000140
    6ed8:	4001f508 	.word	0x4001f508

00006edc <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    6edc:	4602      	mov	r2, r0
    6ede:	480c      	ldr	r0, [pc, #48]	; (6f10 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    6ee0:	b510      	push	{r4, lr}
    6ee2:	6082      	str	r2, [r0, #8]
    6ee4:	68c0      	ldr	r0, [r0, #12]
    6ee6:	460c      	mov	r4, r1
    6ee8:	b168      	cbz	r0, 6f06 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    6eea:	f000 ff77 	bl	7ddc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc54>
    6eee:	f008 fdcf 	bl	fa90 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    6ef2:	4620      	mov	r0, r4
    6ef4:	f000 f8a6 	bl	7044 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    6ef8:	2800      	cmp	r0, #0
    6efa:	d007      	beq.n	6f0c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    6efc:	f640 1174 	movw	r1, #2420	; 0x974
    6f00:	2032      	movs	r0, #50	; 0x32
    6f02:	f7fd fb59 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f06:	f640 116e 	movw	r1, #2414	; 0x96e
    6f0a:	e7f9      	b.n	6f00 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    6f0c:	bd10      	pop	{r4, pc}
    6f0e:	0000      	.short	0x0000
    6f10:	20000140 	.word	0x20000140

00006f14 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    6f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f18:	4c0f      	ldr	r4, [pc, #60]	; (6f58 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    6f1a:	4605      	mov	r5, r0
    6f1c:	4616      	mov	r6, r2
    6f1e:	6860      	ldr	r0, [r4, #4]
    6f20:	460f      	mov	r7, r1
    6f22:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    6f26:	f008 fc2c 	bl	f782 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x3e>
    6f2a:	b158      	cbz	r0, 6f44 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    6f2c:	b955      	cbnz	r5, 6f44 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    6f2e:	4638      	mov	r0, r7
    6f30:	f008 fc20 	bl	f774 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x30>
    6f34:	4631      	mov	r1, r6
    6f36:	f007 fd94 	bl	ea62 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6f3a:	2808      	cmp	r0, #8
    6f3c:	d002      	beq.n	6f44 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    6f3e:	2001      	movs	r0, #1
    6f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f44:	6860      	ldr	r0, [r4, #4]
    6f46:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    6f4a:	f008 fc13 	bl	f774 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x30>
    6f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f52:	f7fe b955 	b.w	5200 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    6f56:	0000      	.short	0x0000
    6f58:	20000140 	.word	0x20000140

00006f5c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    6f5c:	b570      	push	{r4, r5, r6, lr}
    6f5e:	4c13      	ldr	r4, [pc, #76]	; (6fac <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    6f60:	4615      	mov	r5, r2
    6f62:	460e      	mov	r6, r1
    6f64:	2800      	cmp	r0, #0
    6f66:	d016      	beq.n	6f96 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    6f68:	f04f 0200 	mov.w	r2, #0
    6f6c:	6861      	ldr	r1, [r4, #4]
    6f6e:	f801 2f51 	strb.w	r2, [r1, #81]!
    6f72:	7248      	strb	r0, [r1, #9]
    6f74:	f04f 0008 	mov.w	r0, #8
    6f78:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    6f7c:	d114      	bne.n	6fa8 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    6f7e:	4630      	mov	r0, r6
    6f80:	f008 fbf8 	bl	f774 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x30>
    6f84:	4629      	mov	r1, r5
    6f86:	f007 fd6c 	bl	ea62 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6f8a:	6861      	ldr	r1, [r4, #4]
    6f8c:	2808      	cmp	r0, #8
    6f8e:	f881 007b 	strb.w	r0, [r1, #123]	; 0x7b
    6f92:	d003      	beq.n	6f9c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    6f94:	e008      	b.n	6fa8 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    6f96:	f04f 0201 	mov.w	r2, #1
    6f9a:	e7e7      	b.n	6f6c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    6f9c:	4630      	mov	r0, r6
    6f9e:	f008 fbf0 	bl	f782 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x3e>
    6fa2:	b108      	cbz	r0, 6fa8 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    6fa4:	2012      	movs	r0, #18
    6fa6:	bd70      	pop	{r4, r5, r6, pc}
    6fa8:	2000      	movs	r0, #0
    6faa:	bd70      	pop	{r4, r5, r6, pc}
    6fac:	20000140 	.word	0x20000140

00006fb0 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>:
    6fb0:	b510      	push	{r4, lr}
    6fb2:	b1b1      	cbz	r1, 6fe2 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x32>
    6fb4:	4a0d      	ldr	r2, [pc, #52]	; (6fec <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x3c>)
    6fb6:	6852      	ldr	r2, [r2, #4]
    6fb8:	f882 005f 	strb.w	r0, [r2, #95]	; 0x5f
    6fbc:	6808      	ldr	r0, [r1, #0]
    6fbe:	6610      	str	r0, [r2, #96]	; 0x60
    6fc0:	8888      	ldrh	r0, [r1, #4]
    6fc2:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    6fc6:	f892 0049 	ldrb.w	r0, [r2, #73]	; 0x49
    6fca:	f852 1f54 	ldr.w	r1, [r2, #84]!
    6fce:	7248      	strb	r0, [r1, #9]
    6fd0:	f852 0908 	ldr.w	r0, [r2], #-8
    6fd4:	f852 1c02 	ldr.w	r1, [r2, #-2]
    6fd8:	f8c0 100a 	str.w	r1, [r0, #10]
    6fdc:	8851      	ldrh	r1, [r2, #2]
    6fde:	81c1      	strh	r1, [r0, #14]
    6fe0:	bd10      	pop	{r4, pc}
    6fe2:	f640 3177 	movw	r1, #2935	; 0xb77
    6fe6:	2032      	movs	r0, #50	; 0x32
    6fe8:	f7fd fae6 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fec:	20000140 	.word	0x20000140

00006ff0 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>:
    6ff0:	4902      	ldr	r1, [pc, #8]	; (6ffc <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0xc>)
    6ff2:	4801      	ldr	r0, [pc, #4]	; (6ff8 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0x8>)
    6ff4:	60c8      	str	r0, [r1, #12]
    6ff6:	4770      	bx	lr
    6ff8:	00008018 	.word	0x00008018
    6ffc:	20000140 	.word	0x20000140

00007000 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    7000:	4902      	ldr	r1, [pc, #8]	; (700c <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    7002:	6849      	ldr	r1, [r1, #4]
    7004:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    7008:	4770      	bx	lr
    700a:	0000      	.short	0x0000
    700c:	20000140 	.word	0x20000140

00007010 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    7010:	b570      	push	{r4, r5, r6, lr}
    7012:	4605      	mov	r5, r0
    7014:	f7fd fefa 	bl	4e0c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7018:	4604      	mov	r4, r0
    701a:	f7fd fefd 	bl	4e18 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    701e:	4621      	mov	r1, r4
    7020:	f008 fbff 	bl	f822 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    7024:	0001      	movs	r1, r0
    7026:	d006      	beq.n	7036 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    7028:	4805      	ldr	r0, [pc, #20]	; (7040 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    702a:	68c0      	ldr	r0, [r0, #12]
    702c:	6802      	ldr	r2, [r0, #0]
    702e:	4628      	mov	r0, r5
    7030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7034:	4710      	bx	r2
    7036:	f640 217b 	movw	r1, #2683	; 0xa7b
    703a:	2032      	movs	r0, #50	; 0x32
    703c:	f7fd fabc 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7040:	20000140 	.word	0x20000140

00007044 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    7044:	b570      	push	{r4, r5, r6, lr}
    7046:	4d19      	ldr	r5, [pc, #100]	; (70ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    7048:	4604      	mov	r4, r0
    704a:	6868      	ldr	r0, [r5, #4]
    704c:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    7050:	2901      	cmp	r1, #1
    7052:	d004      	beq.n	705e <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    7054:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    7058:	b108      	cbz	r0, 705e <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    705a:	200c      	movs	r0, #12
    705c:	bd70      	pop	{r4, r5, r6, pc}
    705e:	f7fd feff 	bl	4e60 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    7062:	f008 fd15 	bl	fa90 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    7066:	f000 f8ad 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    706a:	2246      	movs	r2, #70	; 0x46
    706c:	2100      	movs	r1, #0
    706e:	6868      	ldr	r0, [r5, #4]
    7070:	f006 fb5d 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7074:	6869      	ldr	r1, [r5, #4]
    7076:	2200      	movs	r2, #0
    7078:	2001      	movs	r0, #1
    707a:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    707e:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    7082:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    7086:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    708a:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    708e:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    7092:	2007      	movs	r0, #7
    7094:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    7098:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    709c:	23ff      	movs	r3, #255	; 0xff
    709e:	7003      	strb	r3, [r0, #0]
    70a0:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    70a4:	668a      	str	r2, [r1, #104]	; 0x68
    70a6:	7002      	strb	r2, [r0, #0]
    70a8:	2000      	movs	r0, #0
    70aa:	bd70      	pop	{r4, r5, r6, pc}
    70ac:	20000140 	.word	0x20000140

000070b0 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    70b0:	4805      	ldr	r0, [pc, #20]	; (70c8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    70b2:	b510      	push	{r4, lr}
    70b4:	6840      	ldr	r0, [r0, #4]
    70b6:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    70ba:	f008 fb5b 	bl	f774 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x30>
    70be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    70c2:	f7fe b89d 	b.w	5200 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    70c6:	0000      	.short	0x0000
    70c8:	20000140 	.word	0x20000140

000070cc <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    70cc:	b140      	cbz	r0, 70e0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    70ce:	2802      	cmp	r0, #2
    70d0:	d006      	beq.n	70e0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    70d2:	2200      	movs	r2, #0
    70d4:	4903      	ldr	r1, [pc, #12]	; (70e4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    70d6:	6849      	ldr	r1, [r1, #4]
    70d8:	f801 2f51 	strb.w	r2, [r1, #81]!
    70dc:	7208      	strb	r0, [r1, #8]
    70de:	4770      	bx	lr
    70e0:	2201      	movs	r2, #1
    70e2:	e7f7      	b.n	70d4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    70e4:	20000140 	.word	0x20000140

000070e8 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    70e8:	4902      	ldr	r1, [pc, #8]	; (70f4 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    70ea:	6849      	ldr	r1, [r1, #4]
    70ec:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    70f0:	4770      	bx	lr
    70f2:	0000      	.short	0x0000
    70f4:	20000140 	.word	0x20000140

000070f8 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    70f8:	b510      	push	{r4, lr}
    70fa:	4603      	mov	r3, r0
    70fc:	7800      	ldrb	r0, [r0, #0]
    70fe:	07c0      	lsls	r0, r0, #31
    7100:	d005      	beq.n	710e <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    7102:	7858      	ldrb	r0, [r3, #1]
    7104:	2100      	movs	r1, #0
    7106:	f7ff fe7f 	bl	6e08 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    710a:	2800      	cmp	r0, #0
    710c:	d10c      	bne.n	7128 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    710e:	4c07      	ldr	r4, [pc, #28]	; (712c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    7110:	7898      	ldrb	r0, [r3, #2]
    7112:	6861      	ldr	r1, [r4, #4]
    7114:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    7118:	78d8      	ldrb	r0, [r3, #3]
    711a:	f7ff ffd7 	bl	70cc <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    711e:	6861      	ldr	r1, [r4, #4]
    7120:	7918      	ldrb	r0, [r3, #4]
    7122:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    7126:	2000      	movs	r0, #0
    7128:	bd10      	pop	{r4, pc}
    712a:	0000      	.short	0x0000
    712c:	20000140 	.word	0x20000140

00007130 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    7130:	4801      	ldr	r0, [pc, #4]	; (7138 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    7132:	68c0      	ldr	r0, [r0, #12]
    7134:	6840      	ldr	r0, [r0, #4]
    7136:	4700      	bx	r0
    7138:	20000140 	.word	0x20000140

0000713c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    713c:	b510      	push	{r4, lr}
    713e:	f000 f927 	bl	7390 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x208>
    7142:	4b0c      	ldr	r3, [pc, #48]	; (7174 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    7144:	b140      	cbz	r0, 7158 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    7146:	6858      	ldr	r0, [r3, #4]
    7148:	2101      	movs	r1, #1
    714a:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    714e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    7150:	8809      	ldrh	r1, [r1, #0]
    7152:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    7156:	e004      	b.n	7162 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    7158:	6859      	ldr	r1, [r3, #4]
    715a:	2000      	movs	r0, #0
    715c:	f801 0f42 	strb.w	r0, [r1, #66]!
    7160:	8048      	strh	r0, [r1, #2]
    7162:	6858      	ldr	r0, [r3, #4]
    7164:	2213      	movs	r2, #19
    7166:	2100      	movs	r1, #0
    7168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    716c:	3038      	adds	r0, #56	; 0x38
    716e:	f7ff badd 	b.w	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7172:	0000      	.short	0x0000
    7174:	20000140 	.word	0x20000140

00007178 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    7178:	4802      	ldr	r0, [pc, #8]	; (7184 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    717a:	6840      	ldr	r0, [r0, #4]
    717c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    7180:	4770      	bx	lr
    7182:	0000      	.short	0x0000
    7184:	20000140 	.word	0x20000140

00007188 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    7188:	b510      	push	{r4, lr}
    718a:	f000 f901 	bl	7390 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x208>
    718e:	490c      	ldr	r1, [pc, #48]	; (71c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    7190:	b128      	cbz	r0, 719e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    7192:	6848      	ldr	r0, [r1, #4]
    7194:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    7198:	2801      	cmp	r0, #1
    719a:	d00e      	beq.n	71ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    719c:	e00c      	b.n	71b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    719e:	6849      	ldr	r1, [r1, #4]
    71a0:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    71a4:	2801      	cmp	r0, #1
    71a6:	d001      	beq.n	71ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    71a8:	2802      	cmp	r0, #2
    71aa:	d105      	bne.n	71b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    71ac:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    71b0:	2801      	cmp	r0, #1
    71b2:	d003      	beq.n	71bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    71b4:	2803      	cmp	r0, #3
    71b6:	d001      	beq.n	71bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    71b8:	2000      	movs	r0, #0
    71ba:	bd10      	pop	{r4, pc}
    71bc:	2001      	movs	r0, #1
    71be:	bd10      	pop	{r4, pc}
    71c0:	20000140 	.word	0x20000140
    71c4:	b510      	push	{r4, lr}
    71c6:	4c07      	ldr	r4, [pc, #28]	; (71e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    71c8:	6860      	ldr	r0, [r4, #4]
    71ca:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    71ce:	2800      	cmp	r0, #0
    71d0:	d007      	beq.n	71e2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    71d2:	f004 fd93 	bl	bcfc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    71d6:	f004 fbb7 	bl	b948 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    71da:	6861      	ldr	r1, [r4, #4]
    71dc:	2000      	movs	r0, #0
    71de:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    71e2:	bd10      	pop	{r4, pc}
    71e4:	20000140 	.word	0x20000140
    71e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71ec:	4d10      	ldr	r5, [pc, #64]	; (7230 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    71ee:	4606      	mov	r6, r0
    71f0:	460f      	mov	r7, r1
    71f2:	6868      	ldr	r0, [r5, #4]
    71f4:	490f      	ldr	r1, [pc, #60]	; (7234 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    71f6:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    71fa:	5c0c      	ldrb	r4, [r1, r0]
    71fc:	4620      	mov	r0, r4
    71fe:	f005 f8b1 	bl	c364 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7202:	6868      	ldr	r0, [r5, #4]
    7204:	2101      	movs	r1, #1
    7206:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
    720a:	2025      	movs	r0, #37	; 0x25
    720c:	f005 f880 	bl	c310 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    7210:	4638      	mov	r0, r7
    7212:	f004 ffbf 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7216:	f04f 0101 	mov.w	r1, #1
    721a:	4608      	mov	r0, r1
    721c:	b126      	cbz	r6, 7228 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    721e:	f004 fe19 	bl	be54 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7222:	b918      	cbnz	r0, 722c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    7224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7228:	f004 fdda 	bl	bde0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    722c:	2001      	movs	r0, #1
    722e:	e7f9      	b.n	7224 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    7230:	20000140 	.word	0x20000140
    7234:	00010c75 	.word	0x00010c75
    7238:	b570      	push	{r4, r5, r6, lr}
    723a:	4d11      	ldr	r5, [pc, #68]	; (7280 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xf8>)
    723c:	4604      	mov	r4, r0
    723e:	6868      	ldr	r0, [r5, #4]
    7240:	6d41      	ldr	r1, [r0, #84]	; 0x54
    7242:	6902      	ldr	r2, [r0, #16]
    7244:	f841 2f03 	str.w	r2, [r1, #3]!
    7248:	8a82      	ldrh	r2, [r0, #20]
    724a:	808a      	strh	r2, [r1, #4]
    724c:	7bc0      	ldrb	r0, [r0, #15]
    724e:	f008 fa91 	bl	f774 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x30>
    7252:	6869      	ldr	r1, [r5, #4]
    7254:	2600      	movs	r6, #0
    7256:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    7258:	310a      	adds	r1, #10
    725a:	7090      	strb	r0, [r2, #2]
    725c:	7066      	strb	r6, [r4, #1]
    725e:	2014      	movs	r0, #20
    7260:	7020      	strb	r0, [r4, #0]
    7262:	2220      	movs	r2, #32
    7264:	1d20      	adds	r0, r4, #4
    7266:	f006 f9e8 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    726a:	7226      	strb	r6, [r4, #8]
    726c:	6868      	ldr	r0, [r5, #4]
    726e:	6d40      	ldr	r0, [r0, #84]	; 0x54
    7270:	8800      	ldrh	r0, [r0, #0]
    7272:	f7fd fd9d 	bl	4db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    727a:	f007 b975 	b.w	e568 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    727e:	0000      	.short	0x0000
    7280:	20000140 	.word	0x20000140
    7284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7286:	2600      	movs	r6, #0
    7288:	460f      	mov	r7, r1
    728a:	4605      	mov	r5, r0
    728c:	f88d 6000 	strb.w	r6, [sp]
    7290:	466b      	mov	r3, sp
    7292:	f000 f895 	bl	73c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x238>
    7296:	0001      	movs	r1, r0
    7298:	4810      	ldr	r0, [pc, #64]	; (72dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x154>)
    729a:	d003      	beq.n	72a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11c>
    729c:	6840      	ldr	r0, [r0, #4]
    729e:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    72a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72a4:	6840      	ldr	r0, [r0, #4]
    72a6:	f89d 1000 	ldrb.w	r1, [sp]
    72aa:	2f07      	cmp	r7, #7
    72ac:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    72b0:	d301      	bcc.n	72b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    72b2:	4634      	mov	r4, r6
    72b4:	e002      	b.n	72bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>
    72b6:	0022      	movs	r2, r4
    72b8:	d100      	bne.n	72bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>
    72ba:	460c      	mov	r4, r1
    72bc:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    72c0:	6869      	ldr	r1, [r5, #4]
    72c2:	2900      	cmp	r1, #0
    72c4:	d0ed      	beq.n	72a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x11a>
    72c6:	7c69      	ldrb	r1, [r5, #17]
    72c8:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
    72cc:	6869      	ldr	r1, [r5, #4]
    72ce:	680a      	ldr	r2, [r1, #0]
    72d0:	f840 2f82 	str.w	r2, [r0, #130]!
    72d4:	8889      	ldrh	r1, [r1, #4]
    72d6:	8081      	strh	r1, [r0, #4]
    72d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72da:	0000      	.short	0x0000
    72dc:	20000140 	.word	0x20000140
    72e0:	b510      	push	{r4, lr}
    72e2:	4915      	ldr	r1, [pc, #84]	; (7338 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b0>)
    72e4:	6842      	ldr	r2, [r0, #4]
    72e6:	6849      	ldr	r1, [r1, #4]
    72e8:	7813      	ldrb	r3, [r2, #0]
    72ea:	f891 4082 	ldrb.w	r4, [r1, #130]	; 0x82
    72ee:	42a3      	cmp	r3, r4
    72f0:	d11f      	bne.n	7332 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1aa>
    72f2:	7853      	ldrb	r3, [r2, #1]
    72f4:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    72f8:	42a3      	cmp	r3, r4
    72fa:	d11a      	bne.n	7332 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1aa>
    72fc:	7893      	ldrb	r3, [r2, #2]
    72fe:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    7302:	42a3      	cmp	r3, r4
    7304:	d115      	bne.n	7332 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1aa>
    7306:	78d3      	ldrb	r3, [r2, #3]
    7308:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    730c:	42a3      	cmp	r3, r4
    730e:	d110      	bne.n	7332 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1aa>
    7310:	7913      	ldrb	r3, [r2, #4]
    7312:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    7316:	42a3      	cmp	r3, r4
    7318:	d10b      	bne.n	7332 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1aa>
    731a:	7952      	ldrb	r2, [r2, #5]
    731c:	f891 3087 	ldrb.w	r3, [r1, #135]	; 0x87
    7320:	429a      	cmp	r2, r3
    7322:	d106      	bne.n	7332 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1aa>
    7324:	7c40      	ldrb	r0, [r0, #17]
    7326:	f891 1089 	ldrb.w	r1, [r1, #137]	; 0x89
    732a:	4288      	cmp	r0, r1
    732c:	d101      	bne.n	7332 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1aa>
    732e:	2001      	movs	r0, #1
    7330:	bd10      	pop	{r4, pc}
    7332:	2000      	movs	r0, #0
    7334:	bd10      	pop	{r4, pc}
    7336:	0000      	.short	0x0000
    7338:	20000140 	.word	0x20000140
    733c:	b530      	push	{r4, r5, lr}
    733e:	7801      	ldrb	r1, [r0, #0]
    7340:	b08b      	sub	sp, #44	; 0x2c
    7342:	f001 040f 	and.w	r4, r1, #15
    7346:	4622      	mov	r2, r4
    7348:	a901      	add	r1, sp, #4
    734a:	f000 fe7b 	bl	8044 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    734e:	a801      	add	r0, sp, #4
    7350:	f7ff ffc6 	bl	72e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x158>
    7354:	4605      	mov	r5, r0
    7356:	f004 fcf3 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    735a:	f000 fba7 	bl	7aac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    735e:	2c04      	cmp	r4, #4
    7360:	d111      	bne.n	7386 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fe>
    7362:	b185      	cbz	r5, 7386 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fe>
    7364:	a80a      	add	r0, sp, #40	; 0x28
    7366:	f000 fbad 	bl	7ac4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x93c>
    736a:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    736e:	9000      	str	r0, [sp, #0]
    7370:	4806      	ldr	r0, [pc, #24]	; (738c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x204>)
    7372:	6840      	ldr	r0, [r0, #4]
    7374:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    7378:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    737c:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    7380:	a801      	add	r0, sp, #4
    7382:	f008 fb3a 	bl	f9fa <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    7386:	b00b      	add	sp, #44	; 0x2c
    7388:	2005      	movs	r0, #5
    738a:	bd30      	pop	{r4, r5, pc}
    738c:	20000140 	.word	0x20000140
    7390:	4804      	ldr	r0, [pc, #16]	; (73a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x21c>)
    7392:	6840      	ldr	r0, [r0, #4]
    7394:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    7398:	2803      	cmp	r0, #3
    739a:	d001      	beq.n	73a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x218>
    739c:	2000      	movs	r0, #0
    739e:	4770      	bx	lr
    73a0:	2001      	movs	r0, #1
    73a2:	4770      	bx	lr
    73a4:	20000140 	.word	0x20000140
    73a8:	7c82      	ldrb	r2, [r0, #18]
    73aa:	6883      	ldr	r3, [r0, #8]
    73ac:	4803      	ldr	r0, [pc, #12]	; (73bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x234>)
    73ae:	6841      	ldr	r1, [r0, #4]
    73b0:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    73b4:	314a      	adds	r1, #74	; 0x4a
    73b6:	f007 ba98 	b.w	e8ea <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    73ba:	0000      	.short	0x0000
    73bc:	20000140 	.word	0x20000140
    73c0:	b570      	push	{r4, r5, r6, lr}
    73c2:	6841      	ldr	r1, [r0, #4]
    73c4:	461e      	mov	r6, r3
    73c6:	4604      	mov	r4, r0
    73c8:	b1c1      	cbz	r1, 73fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x274>
    73ca:	7c60      	ldrb	r0, [r4, #17]
    73cc:	f008 f9c7 	bl	f75e <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x1a>
    73d0:	4d10      	ldr	r5, [pc, #64]	; (7414 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x28c>)
    73d2:	6869      	ldr	r1, [r5, #4]
    73d4:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    73d8:	b141      	cbz	r1, 73ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x264>
    73da:	b138      	cbz	r0, 73ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x264>
    73dc:	f007 fb37 	bl	ea4e <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    73e0:	6869      	ldr	r1, [r5, #4]
    73e2:	f801 0f78 	strb.w	r0, [r1, #120]!
    73e6:	7048      	strb	r0, [r1, #1]
    73e8:	2001      	movs	r0, #1
    73ea:	71c8      	strb	r0, [r1, #7]
    73ec:	686b      	ldr	r3, [r5, #4]
    73ee:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
    73f2:	28ff      	cmp	r0, #255	; 0xff
    73f4:	d004      	beq.n	7400 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x278>
    73f6:	f7fe fd75 	bl	5ee4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    73fa:	7030      	strb	r0, [r6, #0]
    73fc:	2000      	movs	r0, #0
    73fe:	bd70      	pop	{r4, r5, r6, pc}
    7400:	7c60      	ldrb	r0, [r4, #17]
    7402:	4632      	mov	r2, r6
    7404:	3378      	adds	r3, #120	; 0x78
    7406:	6861      	ldr	r1, [r4, #4]
    7408:	f7fe fde8 	bl	5fdc <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    740c:	f080 0001 	eor.w	r0, r0, #1
    7410:	bd70      	pop	{r4, r5, r6, pc}
    7412:	0000      	.short	0x0000
    7414:	20000140 	.word	0x20000140
    7418:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    741a:	4c46      	ldr	r4, [pc, #280]	; (7534 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ac>)
    741c:	466f      	mov	r7, sp
    741e:	6860      	ldr	r0, [r4, #4]
    7420:	7a01      	ldrb	r1, [r0, #8]
    7422:	f88d 1008 	strb.w	r1, [sp, #8]
    7426:	9902      	ldr	r1, [sp, #8]
    7428:	9102      	str	r1, [sp, #8]
    742a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    742e:	b111      	cbz	r1, 7436 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2ae>
    7430:	f241 5143 	movw	r1, #5443	; 0x1543
    7434:	e04f      	b.n	74d6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34e>
    7436:	2500      	movs	r5, #0
    7438:	7285      	strb	r5, [r0, #10]
    743a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    743c:	880a      	ldrh	r2, [r1, #0]
    743e:	8182      	strh	r2, [r0, #12]
    7440:	6908      	ldr	r0, [r1, #16]
    7442:	f007 fb7f 	bl	eb44 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7446:	6861      	ldr	r1, [r4, #4]
    7448:	8448      	strh	r0, [r1, #34]	; 0x22
    744a:	6d48      	ldr	r0, [r1, #84]	; 0x54
    744c:	8b02      	ldrh	r2, [r0, #24]
    744e:	848a      	strh	r2, [r1, #36]	; 0x24
    7450:	8b40      	ldrh	r0, [r0, #26]
    7452:	84c8      	strh	r0, [r1, #38]	; 0x26
    7454:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
    7458:	4669      	mov	r1, sp
    745a:	68a0      	ldr	r0, [r4, #8]
    745c:	f007 fe61 	bl	f122 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    7460:	68a0      	ldr	r0, [r4, #8]
    7462:	7800      	ldrb	r0, [r0, #0]
    7464:	f3c0 1680 	ubfx	r6, r0, #6, #1
    7468:	6860      	ldr	r0, [r4, #4]
    746a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    746e:	b120      	cbz	r0, 747a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2f2>
    7470:	4639      	mov	r1, r7
    7472:	4630      	mov	r0, r6
    7474:	f008 f973 	bl	f75e <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x1a>
    7478:	b940      	cbnz	r0, 748c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x304>
    747a:	6860      	ldr	r0, [r4, #4]
    747c:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
    7480:	b160      	cbz	r0, 749c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x314>
    7482:	4639      	mov	r1, r7
    7484:	4630      	mov	r0, r6
    7486:	f008 f961 	bl	f74c <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x8>
    748a:	b138      	cbz	r0, 749c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x314>
    748c:	6860      	ldr	r0, [r4, #4]
    748e:	9900      	ldr	r1, [sp, #0]
    7490:	f8c0 1016 	str.w	r1, [r0, #22]
    7494:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7498:	8341      	strh	r1, [r0, #26]
    749a:	e003      	b.n	74a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x31c>
    749c:	6860      	ldr	r0, [r4, #4]
    749e:	f8c0 5016 	str.w	r5, [r0, #22]
    74a2:	8345      	strh	r5, [r0, #26]
    74a4:	6861      	ldr	r1, [r4, #4]
    74a6:	f891 0079 	ldrb.w	r0, [r1, #121]	; 0x79
    74aa:	28ff      	cmp	r0, #255	; 0xff
    74ac:	d016      	beq.n	74dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x354>
    74ae:	f101 0210 	add.w	r2, r1, #16
    74b2:	310f      	adds	r1, #15
    74b4:	f7fe fcfc 	bl	5eb0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    74b8:	b158      	cbz	r0, 74d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34a>
    74ba:	6860      	ldr	r0, [r4, #4]
    74bc:	7bc1      	ldrb	r1, [r0, #15]
    74be:	f041 0102 	orr.w	r1, r1, #2
    74c2:	73c1      	strb	r1, [r0, #15]
    74c4:	f8d0 1082 	ldr.w	r1, [r0, #130]	; 0x82
    74c8:	61c1      	str	r1, [r0, #28]
    74ca:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    74ce:	8401      	strh	r1, [r0, #32]
    74d0:	e00f      	b.n	74f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36a>
    74d2:	f241 516e 	movw	r1, #5486	; 0x156e
    74d6:	2032      	movs	r0, #50	; 0x32
    74d8:	f7fd f86e 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74dc:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    74e0:	73c8      	strb	r0, [r1, #15]
    74e2:	f8d1 0082 	ldr.w	r0, [r1, #130]	; 0x82
    74e6:	6108      	str	r0, [r1, #16]
    74e8:	f8b1 0086 	ldrh.w	r0, [r1, #134]	; 0x86
    74ec:	8288      	strh	r0, [r1, #20]
    74ee:	61cd      	str	r5, [r1, #28]
    74f0:	840d      	strh	r5, [r1, #32]
    74f2:	6860      	ldr	r0, [r4, #4]
    74f4:	6d42      	ldr	r2, [r0, #84]	; 0x54
    74f6:	f890 105e 	ldrb.w	r1, [r0, #94]	; 0x5e
    74fa:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
    74fe:	220f      	movs	r2, #15
    7500:	2100      	movs	r1, #0
    7502:	f7ff f913 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7506:	6860      	ldr	r0, [r4, #4]
    7508:	6d41      	ldr	r1, [r0, #84]	; 0x54
    750a:	302a      	adds	r0, #42	; 0x2a
    750c:	880a      	ldrh	r2, [r1, #0]
    750e:	490a      	ldr	r1, [pc, #40]	; (7538 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b0>)
    7510:	868a      	strh	r2, [r1, #52]	; 0x34
    7512:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    7514:	f892 2096 	ldrb.w	r2, [r2, #150]	; 0x96
    7518:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    751c:	2204      	movs	r2, #4
    751e:	2100      	movs	r1, #0
    7520:	f7ff f904 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7524:	6860      	ldr	r0, [r4, #4]
    7526:	6d40      	ldr	r0, [r0, #84]	; 0x54
    7528:	8800      	ldrh	r0, [r0, #0]
    752a:	f7fd fc41 	bl	4db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    752e:	f007 f821 	bl	e574 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7532:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7534:	20000140 	.word	0x20000140
    7538:	20000b70 	.word	0x20000b70
    753c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7540:	4c4e      	ldr	r4, [pc, #312]	; (767c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>)
    7542:	4606      	mov	r6, r0
    7544:	2100      	movs	r1, #0
    7546:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    754a:	3570      	adds	r5, #112	; 0x70
    754c:	8001      	strh	r1, [r0, #0]
    754e:	2e03      	cmp	r6, #3
    7550:	d002      	beq.n	7558 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3d0>
    7552:	2e05      	cmp	r6, #5
    7554:	d004      	beq.n	7560 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3d8>
    7556:	e056      	b.n	7606 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x47e>
    7558:	2103      	movs	r1, #3
    755a:	f007 fdf9 	bl	f150 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    755e:	e052      	b.n	7606 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x47e>
    7560:	2105      	movs	r1, #5
    7562:	f007 fdf5 	bl	f150 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7566:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    756a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    756c:	6949      	ldr	r1, [r1, #20]
    756e:	f847 1f0f 	str.w	r1, [r7, #15]!
    7572:	6d41      	ldr	r1, [r0, #84]	; 0x54
    7574:	8b8a      	ldrh	r2, [r1, #28]
    7576:	80ba      	strh	r2, [r7, #4]
    7578:	7f89      	ldrb	r1, [r1, #30]
    757a:	71b9      	strb	r1, [r7, #6]
    757c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    757e:	6901      	ldr	r1, [r0, #16]
    7580:	8c00      	ldrh	r0, [r0, #32]
    7582:	f007 fc8d 	bl	eea0 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    7586:	71f8      	strb	r0, [r7, #7]
    7588:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    758c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    758e:	6901      	ldr	r1, [r0, #16]
    7590:	6a40      	ldr	r0, [r0, #36]	; 0x24
    7592:	f007 fc76 	bl	ee82 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    7596:	75f8      	strb	r0, [r7, #23]
    7598:	0a00      	lsrs	r0, r0, #8
    759a:	7638      	strb	r0, [r7, #24]
    759c:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    75a0:	6d40      	ldr	r0, [r0, #84]	; 0x54
    75a2:	6900      	ldr	r0, [r0, #16]
    75a4:	f007 face 	bl	eb44 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    75a8:	7678      	strb	r0, [r7, #25]
    75aa:	0a00      	lsrs	r0, r0, #8
    75ac:	76b8      	strb	r0, [r7, #26]
    75ae:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    75b2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    75b4:	8b09      	ldrh	r1, [r1, #24]
    75b6:	76f9      	strb	r1, [r7, #27]
    75b8:	0a09      	lsrs	r1, r1, #8
    75ba:	7739      	strb	r1, [r7, #28]
    75bc:	6d41      	ldr	r1, [r0, #84]	; 0x54
    75be:	8b49      	ldrh	r1, [r1, #26]
    75c0:	7779      	strb	r1, [r7, #29]
    75c2:	0a09      	lsrs	r1, r1, #8
    75c4:	77b9      	strb	r1, [r7, #30]
    75c6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    75c8:	f851 2f97 	ldr.w	r2, [r1, #151]!
    75cc:	f8c7 201f 	str.w	r2, [r7, #31]
    75d0:	7909      	ldrb	r1, [r1, #4]
    75d2:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
    75d6:	6d40      	ldr	r0, [r0, #84]	; 0x54
    75d8:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    75dc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
    75e0:	f001 011f 	and.w	r1, r1, #31
    75e4:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    75e8:	4308      	orrs	r0, r1
    75ea:	f887 0024 	strb.w	r0, [r7, #36]	; 0x24
    75ee:	f004 f98d 	bl	b90c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    75f2:	2807      	cmp	r0, #7
    75f4:	d900      	bls.n	75f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x470>
    75f6:	2007      	movs	r0, #7
    75f8:	f817 1f24 	ldrb.w	r1, [r7, #36]!
    75fc:	f001 011f 	and.w	r1, r1, #31
    7600:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    7604:	7039      	strb	r1, [r7, #0]
    7606:	f105 0112 	add.w	r1, r5, #18
    760a:	68a0      	ldr	r0, [r4, #8]
    760c:	f007 fdbb 	bl	f186 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7610:	7e69      	ldrb	r1, [r5, #25]
    7612:	68a0      	ldr	r0, [r4, #8]
    7614:	f007 fdbd 	bl	f192 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7618:	6860      	ldr	r0, [r4, #4]
    761a:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    761e:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    7622:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    7626:	b188      	cbz	r0, 764c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>
    7628:	f7ff feb2 	bl	7390 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x208>
    762c:	b130      	cbz	r0, 763c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b4>
    762e:	6860      	ldr	r0, [r4, #4]
    7630:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    7634:	b111      	cbz	r1, 763c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b4>
    7636:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    763a:	e002      	b.n	7642 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    763c:	6860      	ldr	r0, [r4, #4]
    763e:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    7642:	f7fe fbfb 	bl	5e3c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    7646:	b108      	cbz	r0, 764c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>
    7648:	2701      	movs	r7, #1
    764a:	4605      	mov	r5, r0
    764c:	4629      	mov	r1, r5
    764e:	68a0      	ldr	r0, [r4, #8]
    7650:	f007 fda6 	bl	f1a0 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7654:	4639      	mov	r1, r7
    7656:	68a0      	ldr	r0, [r4, #8]
    7658:	f007 fda8 	bl	f1ac <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    765c:	68a0      	ldr	r0, [r4, #8]
    765e:	f004 fd99 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7662:	2e05      	cmp	r6, #5
    7664:	d108      	bne.n	7678 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f0>
    7666:	6860      	ldr	r0, [r4, #4]
    7668:	682a      	ldr	r2, [r5, #0]
    766a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    766c:	f8c1 200a 	str.w	r2, [r1, #10]
    7670:	88aa      	ldrh	r2, [r5, #4]
    7672:	81ca      	strh	r2, [r1, #14]
    7674:	6d40      	ldr	r0, [r0, #84]	; 0x54
    7676:	7247      	strb	r7, [r0, #9]
    7678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    767c:	20000140 	.word	0x20000140
    7680:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7684:	4f65      	ldr	r7, [pc, #404]	; (781c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x694>)
    7686:	4604      	mov	r4, r0
    7688:	6878      	ldr	r0, [r7, #4]
    768a:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    768e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    7692:	b180      	cbz	r0, 76b6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    7694:	2600      	movs	r6, #0
    7696:	2500      	movs	r5, #0
    7698:	7ca0      	ldrb	r0, [r4, #18]
    769a:	68a1      	ldr	r1, [r4, #8]
    769c:	f008 f85f 	bl	f75e <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x1a>
    76a0:	4682      	mov	sl, r0
    76a2:	f7ff fe75 	bl	7390 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x208>
    76a6:	b140      	cbz	r0, 76ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x532>
    76a8:	6878      	ldr	r0, [r7, #4]
    76aa:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    76ae:	b121      	cbz	r1, 76ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x532>
    76b0:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    76b4:	e004      	b.n	76c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x538>
    76b6:	2601      	movs	r6, #1
    76b8:	e7ed      	b.n	7696 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x50e>
    76ba:	6878      	ldr	r0, [r7, #4]
    76bc:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    76c0:	4683      	mov	fp, r0
    76c2:	f7fe fb47 	bl	5d54 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    76c6:	ea5f 0900 	movs.w	r9, r0
    76ca:	d00c      	beq.n	76e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x55e>
    76cc:	4658      	mov	r0, fp
    76ce:	f7fe fb35 	bl	5d3c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    76d2:	b100      	cbz	r0, 76d6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x54e>
    76d4:	2601      	movs	r6, #1
    76d6:	f1ba 0f00 	cmp.w	sl, #0
    76da:	d004      	beq.n	76e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x55e>
    76dc:	4648      	mov	r0, r9
    76de:	68a1      	ldr	r1, [r4, #8]
    76e0:	f007 f968 	bl	e9b4 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    76e4:	4605      	mov	r5, r0
    76e6:	6878      	ldr	r0, [r7, #4]
    76e8:	46b9      	mov	r9, r7
    76ea:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    76ee:	b10d      	cbz	r5, 76f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56c>
    76f0:	f047 0702 	orr.w	r7, r7, #2
    76f4:	f7ff fe4c 	bl	7390 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x208>
    76f8:	b3a0      	cbz	r0, 7764 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5dc>
    76fa:	6860      	ldr	r0, [r4, #4]
    76fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
    7700:	7802      	ldrb	r2, [r0, #0]
    7702:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    7706:	429a      	cmp	r2, r3
    7708:	d11f      	bne.n	774a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    770a:	7842      	ldrb	r2, [r0, #1]
    770c:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    7710:	429a      	cmp	r2, r3
    7712:	d11a      	bne.n	774a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    7714:	7882      	ldrb	r2, [r0, #2]
    7716:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    771a:	429a      	cmp	r2, r3
    771c:	d115      	bne.n	774a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    771e:	78c2      	ldrb	r2, [r0, #3]
    7720:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    7724:	429a      	cmp	r2, r3
    7726:	d110      	bne.n	774a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    7728:	7902      	ldrb	r2, [r0, #4]
    772a:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    772e:	429a      	cmp	r2, r3
    7730:	d10b      	bne.n	774a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    7732:	7940      	ldrb	r0, [r0, #5]
    7734:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    7738:	4290      	cmp	r0, r2
    773a:	d106      	bne.n	774a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    773c:	7c60      	ldrb	r0, [r4, #17]
    773e:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    7742:	4288      	cmp	r0, r1
    7744:	d101      	bne.n	774a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    7746:	2001      	movs	r0, #1
    7748:	e000      	b.n	774c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c4>
    774a:	2000      	movs	r0, #0
    774c:	4f34      	ldr	r7, [pc, #208]	; (7820 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x698>)
    774e:	4682      	mov	sl, r0
    7750:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    7754:	2808      	cmp	r0, #8
    7756:	d006      	beq.n	7766 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    7758:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    775c:	4288      	cmp	r0, r1
    775e:	d102      	bne.n	7766 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    7760:	2001      	movs	r0, #1
    7762:	e001      	b.n	7768 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e0>
    7764:	e021      	b.n	77aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x622>
    7766:	2000      	movs	r0, #0
    7768:	4681      	mov	r9, r0
    776a:	b925      	cbnz	r5, 7776 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ee>
    776c:	b12e      	cbz	r6, 777a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5f2>
    776e:	4620      	mov	r0, r4
    7770:	f7ff fe1a 	bl	73a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x220>
    7774:	b108      	cbz	r0, 777a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5f2>
    7776:	2001      	movs	r0, #1
    7778:	e000      	b.n	777c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5f4>
    777a:	2000      	movs	r0, #0
    777c:	f1b8 0f00 	cmp.w	r8, #0
    7780:	d009      	beq.n	7796 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60e>
    7782:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    7786:	2901      	cmp	r1, #1
    7788:	d003      	beq.n	7792 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60a>
    778a:	b921      	cbnz	r1, 7796 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60e>
    778c:	ea5a 0109 	orrs.w	r1, sl, r9
    7790:	d001      	beq.n	7796 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60e>
    7792:	2101      	movs	r1, #1
    7794:	e000      	b.n	7798 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x610>
    7796:	2100      	movs	r1, #0
    7798:	4208      	tst	r0, r1
    779a:	d003      	beq.n	77a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61c>
    779c:	200c      	movs	r0, #12
    779e:	b004      	add	sp, #16
    77a0:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    77a4:	f004 facc 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    77a8:	e036      	b.n	7818 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x690>
    77aa:	f004 fac9 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    77ae:	f1b8 0f00 	cmp.w	r8, #0
    77b2:	d031      	beq.n	7818 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x690>
    77b4:	4620      	mov	r0, r4
    77b6:	f7ff fdf7 	bl	73a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x220>
    77ba:	b900      	cbnz	r0, 77be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x636>
    77bc:	b175      	cbz	r5, 77dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x654>
    77be:	a803      	add	r0, sp, #12
    77c0:	f000 f980 	bl	7ac4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x93c>
    77c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
    77c8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    77cc:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    77d0:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    77d4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    77d8:	463b      	mov	r3, r7
    77da:	e018      	b.n	780e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x686>
    77dc:	f8d9 0004 	ldr.w	r0, [r9, #4]
    77e0:	464d      	mov	r5, r9
    77e2:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    77e6:	2803      	cmp	r0, #3
    77e8:	d001      	beq.n	77ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x666>
    77ea:	2802      	cmp	r0, #2
    77ec:	d114      	bne.n	7818 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x690>
    77ee:	f1ba 0f00 	cmp.w	sl, #0
    77f2:	d011      	beq.n	7818 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x690>
    77f4:	a803      	add	r0, sp, #12
    77f6:	f000 f965 	bl	7ac4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x93c>
    77fa:	686a      	ldr	r2, [r5, #4]
    77fc:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7800:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    7804:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    7808:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    780c:	23fe      	movs	r3, #254	; 0xfe
    780e:	2101      	movs	r1, #1
    7810:	4620      	mov	r0, r4
    7812:	324a      	adds	r2, #74	; 0x4a
    7814:	f008 f879 	bl	f90a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7818:	2005      	movs	r0, #5
    781a:	e7c0      	b.n	779e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x616>
    781c:	20000140 	.word	0x20000140
    7820:	20000b70 	.word	0x20000b70
    7824:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7826:	4c3f      	ldr	r4, [pc, #252]	; (7924 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x79c>)
    7828:	4605      	mov	r5, r0
    782a:	6860      	ldr	r0, [r4, #4]
    782c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    7830:	2900      	cmp	r1, #0
    7832:	d06c      	beq.n	790e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x786>
    7834:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    7838:	2802      	cmp	r0, #2
    783a:	d02c      	beq.n	7896 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x70e>
    783c:	2801      	cmp	r0, #1
    783e:	d043      	beq.n	78c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x740>
    7840:	f7ff fda6 	bl	7390 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x208>
    7844:	2800      	cmp	r0, #0
    7846:	d067      	beq.n	7918 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x790>
    7848:	686a      	ldr	r2, [r5, #4]
    784a:	6861      	ldr	r1, [r4, #4]
    784c:	7810      	ldrb	r0, [r2, #0]
    784e:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    7852:	4298      	cmp	r0, r3
    7854:	d14c      	bne.n	78f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x768>
    7856:	7850      	ldrb	r0, [r2, #1]
    7858:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    785c:	4298      	cmp	r0, r3
    785e:	d147      	bne.n	78f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x768>
    7860:	7890      	ldrb	r0, [r2, #2]
    7862:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    7866:	4298      	cmp	r0, r3
    7868:	d142      	bne.n	78f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x768>
    786a:	78d0      	ldrb	r0, [r2, #3]
    786c:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    7870:	4298      	cmp	r0, r3
    7872:	d13d      	bne.n	78f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x768>
    7874:	7910      	ldrb	r0, [r2, #4]
    7876:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    787a:	4298      	cmp	r0, r3
    787c:	d138      	bne.n	78f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x768>
    787e:	7950      	ldrb	r0, [r2, #5]
    7880:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    7884:	4290      	cmp	r0, r2
    7886:	d133      	bne.n	78f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x768>
    7888:	7c68      	ldrb	r0, [r5, #17]
    788a:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    788e:	4290      	cmp	r0, r2
    7890:	d12e      	bne.n	78f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x768>
    7892:	2001      	movs	r0, #1
    7894:	e02d      	b.n	78f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x76a>
    7896:	a803      	add	r0, sp, #12
    7898:	f000 f914 	bl	7ac4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x93c>
    789c:	6862      	ldr	r2, [r4, #4]
    789e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    78a2:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    78a6:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    78aa:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    78ae:	23ff      	movs	r3, #255	; 0xff
    78b0:	2100      	movs	r1, #0
    78b2:	4628      	mov	r0, r5
    78b4:	324a      	adds	r2, #74	; 0x4a
    78b6:	f008 f828 	bl	f90a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    78ba:	6861      	ldr	r1, [r4, #4]
    78bc:	2001      	movs	r0, #1
    78be:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    78c2:	200b      	movs	r0, #11
    78c4:	b004      	add	sp, #16
    78c6:	bd70      	pop	{r4, r5, r6, pc}
    78c8:	a803      	add	r0, sp, #12
    78ca:	f000 f8fb 	bl	7ac4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x93c>
    78ce:	6862      	ldr	r2, [r4, #4]
    78d0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    78d4:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    78d8:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    78dc:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    78e0:	23ff      	movs	r3, #255	; 0xff
    78e2:	2100      	movs	r1, #0
    78e4:	4628      	mov	r0, r5
    78e6:	324a      	adds	r2, #74	; 0x4a
    78e8:	f008 f80f 	bl	f90a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    78ec:	2005      	movs	r0, #5
    78ee:	e7e9      	b.n	78c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x73c>
    78f0:	2000      	movs	r0, #0
    78f2:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    78f6:	2901      	cmp	r1, #1
    78f8:	d00c      	beq.n	7914 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x78c>
    78fa:	b958      	cbnz	r0, 7914 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x78c>
    78fc:	490a      	ldr	r1, [pc, #40]	; (7928 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a0>)
    78fe:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    7902:	2808      	cmp	r0, #8
    7904:	d003      	beq.n	790e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x786>
    7906:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    790a:	4281      	cmp	r1, r0
    790c:	d002      	beq.n	7914 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x78c>
    790e:	f004 fa17 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7912:	e7eb      	b.n	78ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x764>
    7914:	200c      	movs	r0, #12
    7916:	e7d5      	b.n	78c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x73c>
    7918:	f640 61ec 	movw	r1, #3820	; 0xeec
    791c:	2032      	movs	r0, #50	; 0x32
    791e:	f7fc fe4b 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7922:	0000      	.short	0x0000
    7924:	20000140 	.word	0x20000140
    7928:	20000b70 	.word	0x20000b70
    792c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    792e:	4c1e      	ldr	r4, [pc, #120]	; (79a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x820>)
    7930:	4605      	mov	r5, r0
    7932:	6860      	ldr	r0, [r4, #4]
    7934:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    7938:	b129      	cbz	r1, 7946 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7be>
    793a:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    793e:	2802      	cmp	r0, #2
    7940:	d004      	beq.n	794c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c4>
    7942:	2801      	cmp	r0, #1
    7944:	d01b      	beq.n	797e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f6>
    7946:	f004 f9fb 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    794a:	e02a      	b.n	79a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x81a>
    794c:	a803      	add	r0, sp, #12
    794e:	f000 f8b9 	bl	7ac4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x93c>
    7952:	6862      	ldr	r2, [r4, #4]
    7954:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7958:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    795c:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    7960:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7964:	23ff      	movs	r3, #255	; 0xff
    7966:	2106      	movs	r1, #6
    7968:	4628      	mov	r0, r5
    796a:	324a      	adds	r2, #74	; 0x4a
    796c:	f007 ffcd 	bl	f90a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7970:	6862      	ldr	r2, [r4, #4]
    7972:	200b      	movs	r0, #11
    7974:	2100      	movs	r1, #0
    7976:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    797a:	b004      	add	sp, #16
    797c:	bd70      	pop	{r4, r5, r6, pc}
    797e:	a803      	add	r0, sp, #12
    7980:	f000 f8a0 	bl	7ac4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x93c>
    7984:	6862      	ldr	r2, [r4, #4]
    7986:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    798a:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    798e:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    7992:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7996:	23ff      	movs	r3, #255	; 0xff
    7998:	2106      	movs	r1, #6
    799a:	4628      	mov	r0, r5
    799c:	324a      	adds	r2, #74	; 0x4a
    799e:	f007 ffb4 	bl	f90a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    79a2:	2005      	movs	r0, #5
    79a4:	e7e9      	b.n	797a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f2>
    79a6:	0000      	.short	0x0000
    79a8:	20000140 	.word	0x20000140
    79ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    79ae:	b389      	cbz	r1, 7a14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88c>
    79b0:	2901      	cmp	r1, #1
    79b2:	d034      	beq.n	7a1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x896>
    79b4:	2505      	movs	r5, #5
    79b6:	2902      	cmp	r1, #2
    79b8:	d004      	beq.n	79c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x83c>
    79ba:	2906      	cmp	r1, #6
    79bc:	d025      	beq.n	7a0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x882>
    79be:	f004 f9bf 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    79c2:	e01f      	b.n	7a04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x87c>
    79c4:	4606      	mov	r6, r0
    79c6:	f004 f9bb 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    79ca:	4c17      	ldr	r4, [pc, #92]	; (7a28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8a0>)
    79cc:	6860      	ldr	r0, [r4, #4]
    79ce:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    79d2:	b1b9      	cbz	r1, 7a04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x87c>
    79d4:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    79d8:	2801      	cmp	r0, #1
    79da:	d001      	beq.n	79e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x858>
    79dc:	2802      	cmp	r0, #2
    79de:	d111      	bne.n	7a04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x87c>
    79e0:	a803      	add	r0, sp, #12
    79e2:	f000 f86f 	bl	7ac4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x93c>
    79e6:	6862      	ldr	r2, [r4, #4]
    79e8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    79ec:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    79f0:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    79f4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    79f8:	23ff      	movs	r3, #255	; 0xff
    79fa:	2102      	movs	r1, #2
    79fc:	4630      	mov	r0, r6
    79fe:	324a      	adds	r2, #74	; 0x4a
    7a00:	f007 ff83 	bl	f90a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7a04:	b004      	add	sp, #16
    7a06:	4628      	mov	r0, r5
    7a08:	bd70      	pop	{r4, r5, r6, pc}
    7a0a:	b004      	add	sp, #16
    7a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a10:	f7ff bf8c 	b.w	792c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    7a14:	b004      	add	sp, #16
    7a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a1a:	f7ff bf03 	b.w	7824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x69c>
    7a1e:	b004      	add	sp, #16
    7a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a24:	f7ff be2c 	b.w	7680 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f8>
    7a28:	20000140 	.word	0x20000140
    7a2c:	b570      	push	{r4, r5, r6, lr}
    7a2e:	4c11      	ldr	r4, [pc, #68]	; (7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8ec>)
    7a30:	4605      	mov	r5, r0
    7a32:	6861      	ldr	r1, [r4, #4]
    7a34:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    7a38:	2800      	cmp	r0, #0
    7a3a:	d019      	beq.n	7a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8e8>
    7a3c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    7a40:	2800      	cmp	r0, #0
    7a42:	d015      	beq.n	7a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8e8>
    7a44:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    7a48:	314a      	adds	r1, #74	; 0x4a
    7a4a:	f007 fe88 	bl	f75e <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x1a>
    7a4e:	b140      	cbz	r0, 7a62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8da>
    7a50:	f7fe f94a 	bl	5ce8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7a54:	6861      	ldr	r1, [r4, #4]
    7a56:	462a      	mov	r2, r5
    7a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a5c:	314a      	adds	r1, #74	; 0x4a
    7a5e:	f006 bf74 	b.w	e94a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7a62:	6860      	ldr	r0, [r4, #4]
    7a64:	4629      	mov	r1, r5
    7a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a6a:	304a      	adds	r0, #74	; 0x4a
    7a6c:	f006 bf5c 	b.w	e928 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    7a70:	bd70      	pop	{r4, r5, r6, pc}
    7a72:	0000      	.short	0x0000
    7a74:	20000140 	.word	0x20000140
    7a78:	4602      	mov	r2, r0
    7a7a:	480b      	ldr	r0, [pc, #44]	; (7aa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x920>)
    7a7c:	b082      	sub	sp, #8
    7a7e:	6840      	ldr	r0, [r0, #4]
    7a80:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    7a84:	f88d 1000 	strb.w	r1, [sp]
    7a88:	9900      	ldr	r1, [sp, #0]
    7a8a:	9100      	str	r1, [sp, #0]
    7a8c:	f89d 1000 	ldrb.w	r1, [sp]
    7a90:	2900      	cmp	r1, #0
    7a92:	d107      	bne.n	7aa4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x91c>
    7a94:	6e81      	ldr	r1, [r0, #104]	; 0x68
    7a96:	2900      	cmp	r1, #0
    7a98:	d004      	beq.n	7aa4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x91c>
    7a9a:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    7a9e:	b002      	add	sp, #8
    7aa0:	f7fb b99c 	b.w	2ddc <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    7aa4:	b002      	add	sp, #8
    7aa6:	4770      	bx	lr
    7aa8:	20000140 	.word	0x20000140
    7aac:	b510      	push	{r4, lr}
    7aae:	4804      	ldr	r0, [pc, #16]	; (7ac0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x938>)
    7ab0:	f004 fc0e 	bl	c2d0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7ab4:	2800      	cmp	r0, #0
    7ab6:	d102      	bne.n	7abe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x936>
    7ab8:	4901      	ldr	r1, [pc, #4]	; (7ac0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x938>)
    7aba:	207f      	movs	r0, #127	; 0x7f
    7abc:	7008      	strb	r0, [r1, #0]
    7abe:	bd10      	pop	{r4, pc}
    7ac0:	20000140 	.word	0x20000140
    7ac4:	4a07      	ldr	r2, [pc, #28]	; (7ae4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x95c>)
    7ac6:	b510      	push	{r4, lr}
    7ac8:	f992 1000 	ldrsb.w	r1, [r2]
    7acc:	297f      	cmp	r1, #127	; 0x7f
    7ace:	d003      	beq.n	7ad8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x950>
    7ad0:	7001      	strb	r1, [r0, #0]
    7ad2:	207f      	movs	r0, #127	; 0x7f
    7ad4:	7010      	strb	r0, [r2, #0]
    7ad6:	bd10      	pop	{r4, pc}
    7ad8:	f240 411d 	movw	r1, #1053	; 0x41d
    7adc:	2032      	movs	r0, #50	; 0x32
    7ade:	f7fc fd6b 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ae2:	0000      	.short	0x0000
    7ae4:	20000140 	.word	0x20000140
    7ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7aec:	4607      	mov	r7, r0
    7aee:	f7fd f98d 	bl	4e0c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7af2:	4604      	mov	r4, r0
    7af4:	f7fd f990 	bl	4e18 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7af8:	4621      	mov	r1, r4
    7afa:	f007 fe92 	bl	f822 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    7afe:	0005      	movs	r5, r0
    7b00:	d012      	beq.n	7b28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9a0>
    7b02:	4c2d      	ldr	r4, [pc, #180]	; (7bb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa30>)
    7b04:	6860      	ldr	r0, [r4, #4]
    7b06:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    7b0a:	2801      	cmp	r0, #1
    7b0c:	d004      	beq.n	7b18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x990>
    7b0e:	2802      	cmp	r0, #2
    7b10:	d002      	beq.n	7b18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x990>
    7b12:	f7ff fc3d 	bl	7390 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x208>
    7b16:	b150      	cbz	r0, 7b2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9a6>
    7b18:	f06f 0613 	mvn.w	r6, #19
    7b1c:	b33f      	cbz	r7, 7b6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e6>
    7b1e:	4628      	mov	r0, r5
    7b20:	f007 fae7 	bl	f0f2 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    7b24:	b950      	cbnz	r0, 7b3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9b4>
    7b26:	e005      	b.n	7b34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ac>
    7b28:	f241 5113 	movw	r1, #5395	; 0x1513
    7b2c:	e03a      	b.n	7ba4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1c>
    7b2e:	f241 5119 	movw	r1, #5401	; 0x1519
    7b32:	e037      	b.n	7ba4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1c>
    7b34:	4628      	mov	r0, r5
    7b36:	f007 fafe 	bl	f136 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    7b3a:	b1c0      	cbz	r0, 7b6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e6>
    7b3c:	6861      	ldr	r1, [r4, #4]
    7b3e:	4628      	mov	r0, r5
    7b40:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    7b44:	2a05      	cmp	r2, #5
    7b46:	d202      	bcs.n	7b4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c6>
    7b48:	f241 419d 	movw	r1, #5277	; 0x149d
    7b4c:	e02a      	b.n	7ba4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1c>
    7b4e:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    7b52:	2a0b      	cmp	r2, #11
    7b54:	d302      	bcc.n	7b5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9d4>
    7b56:	f241 419e 	movw	r1, #5278	; 0x149e
    7b5a:	e023      	b.n	7ba4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1c>
    7b5c:	68e2      	ldr	r2, [r4, #12]
    7b5e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    7b62:	6952      	ldr	r2, [r2, #20]
    7b64:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    7b68:	5851      	ldr	r1, [r2, r1]
    7b6a:	4788      	blx	r1
    7b6c:	e016      	b.n	7b9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa14>
    7b6e:	6860      	ldr	r0, [r4, #4]
    7b70:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    7b74:	2905      	cmp	r1, #5
    7b76:	d202      	bcs.n	7b7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9f6>
    7b78:	f241 5109 	movw	r1, #5385	; 0x1509
    7b7c:	e012      	b.n	7ba4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1c>
    7b7e:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    7b82:	290b      	cmp	r1, #11
    7b84:	d302      	bcc.n	7b8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa04>
    7b86:	f241 510a 	movw	r1, #5386	; 0x150a
    7b8a:	e00b      	b.n	7ba4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1c>
    7b8c:	68e1      	ldr	r1, [r4, #12]
    7b8e:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    7b92:	6989      	ldr	r1, [r1, #24]
    7b94:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    7b98:	5808      	ldr	r0, [r1, r0]
    7b9a:	4780      	blx	r0
    7b9c:	280f      	cmp	r0, #15
    7b9e:	d304      	bcc.n	7baa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa22>
    7ba0:	f241 512e 	movw	r1, #5422	; 0x152e
    7ba4:	2032      	movs	r0, #50	; 0x32
    7ba6:	f7fc fd07 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7baa:	68e1      	ldr	r1, [r4, #12]
    7bac:	6909      	ldr	r1, [r1, #16]
    7bae:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7bb6:	4700      	bx	r0
    7bb8:	20000140 	.word	0x20000140
    7bbc:	b510      	push	{r4, lr}
    7bbe:	b118      	cbz	r0, 7bc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa40>
    7bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7bc4:	f000 b8fc 	b.w	7dc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc38>
    7bc8:	2900      	cmp	r1, #0
    7bca:	d01d      	beq.n	7c08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa80>
    7bcc:	480f      	ldr	r0, [pc, #60]	; (7c0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa84>)
    7bce:	6841      	ldr	r1, [r0, #4]
    7bd0:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    7bd4:	2a0b      	cmp	r2, #11
    7bd6:	d202      	bcs.n	7bde <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa56>
    7bd8:	f241 51e3 	movw	r1, #5603	; 0x15e3
    7bdc:	e005      	b.n	7bea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa62>
    7bde:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    7be2:	2a0f      	cmp	r2, #15
    7be4:	d304      	bcc.n	7bf0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa68>
    7be6:	f241 51e4 	movw	r1, #5604	; 0x15e4
    7bea:	2032      	movs	r0, #50	; 0x32
    7bec:	f7fc fce4 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bf0:	68c0      	ldr	r0, [r0, #12]
    7bf2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    7bf6:	6880      	ldr	r0, [r0, #8]
    7bf8:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    7bfc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7c00:	5840      	ldr	r0, [r0, r1]
    7c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c06:	4700      	bx	r0
    7c08:	bd10      	pop	{r4, pc}
    7c0a:	0000      	.short	0x0000
    7c0c:	20000140 	.word	0x20000140
    7c10:	b510      	push	{r4, lr}
    7c12:	f7ff fad7 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    7c16:	f000 f8e1 	bl	7ddc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc54>
    7c1a:	4805      	ldr	r0, [pc, #20]	; (7c30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaa8>)
    7c1c:	6881      	ldr	r1, [r0, #8]
    7c1e:	2000      	movs	r0, #0
    7c20:	f7ff fbfa 	bl	7418 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x290>
    7c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c28:	2002      	movs	r0, #2
    7c2a:	f000 ba43 	b.w	80b4 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    7c2e:	0000      	.short	0x0000
    7c30:	20000140 	.word	0x20000140
    7c34:	b510      	push	{r4, lr}
    7c36:	f7fd f8e9 	bl	4e0c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7c3a:	4604      	mov	r4, r0
    7c3c:	f7fd f8ec 	bl	4e18 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7c40:	4621      	mov	r1, r4
    7c42:	f007 fdee 	bl	f822 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    7c46:	b150      	cbz	r0, 7c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xad6>
    7c48:	f004 faa4 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7c4c:	2000      	movs	r0, #0
    7c4e:	f004 f96d 	bl	bf2c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7c52:	4905      	ldr	r1, [pc, #20]	; (7c68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xae0>)
    7c54:	2006      	movs	r0, #6
    7c56:	6849      	ldr	r1, [r1, #4]
    7c58:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    7c5c:	bd10      	pop	{r4, pc}
    7c5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    7c62:	2032      	movs	r0, #50	; 0x32
    7c64:	f7fc fca8 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c68:	20000140 	.word	0x20000140
    7c6c:	490f      	ldr	r1, [pc, #60]	; (7cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb24>)
    7c6e:	b510      	push	{r4, lr}
    7c70:	6848      	ldr	r0, [r1, #4]
    7c72:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    7c76:	2a06      	cmp	r2, #6
    7c78:	d202      	bcs.n	7c80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf8>
    7c7a:	f241 6111 	movw	r1, #5649	; 0x1611
    7c7e:	e005      	b.n	7c8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb04>
    7c80:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    7c84:	2a0b      	cmp	r2, #11
    7c86:	d304      	bcc.n	7c92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0a>
    7c88:	f241 6112 	movw	r1, #5650	; 0x1612
    7c8c:	2032      	movs	r0, #50	; 0x32
    7c8e:	f7fc fc93 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c92:	68c9      	ldr	r1, [r1, #12]
    7c94:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    7c98:	68c9      	ldr	r1, [r1, #12]
    7c9a:	f06f 0213 	mvn.w	r2, #19
    7c9e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    7ca2:	5808      	ldr	r0, [r1, r0]
    7ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ca8:	4700      	bx	r0
    7caa:	0000      	.short	0x0000
    7cac:	20000140 	.word	0x20000140
    7cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7cb4:	4c31      	ldr	r4, [pc, #196]	; (7d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf4>)
    7cb6:	4605      	mov	r5, r0
    7cb8:	460e      	mov	r6, r1
    7cba:	6860      	ldr	r0, [r4, #4]
    7cbc:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    7cc0:	b120      	cbz	r0, 7ccc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb44>
    7cc2:	2801      	cmp	r0, #1
    7cc4:	d002      	beq.n	7ccc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb44>
    7cc6:	200c      	movs	r0, #12
    7cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ccc:	f004 f9bc 	bl	c048 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7cd0:	f004 f814 	bl	bcfc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7cd4:	f003 fe38 	bl	b948 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7cd8:	f004 fc2c 	bl	c534 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7cdc:	4828      	ldr	r0, [pc, #160]	; (7d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf8>)
    7cde:	f004 f91d 	bl	bf1c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7ce2:	4828      	ldr	r0, [pc, #160]	; (7d84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbfc>)
    7ce4:	f004 fb0a 	bl	c2fc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7ce8:	4827      	ldr	r0, [pc, #156]	; (7d88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc00>)
    7cea:	f004 fafd 	bl	c2e8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7cee:	4630      	mov	r0, r6
    7cf0:	f004 fa50 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7cf4:	7968      	ldrb	r0, [r5, #5]
    7cf6:	b110      	cbz	r0, 7cfe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb76>
    7cf8:	2001      	movs	r0, #1
    7cfa:	f7ff febd 	bl	7a78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f0>
    7cfe:	7928      	ldrb	r0, [r5, #4]
    7d00:	2803      	cmp	r0, #3
    7d02:	d001      	beq.n	7d08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb80>
    7d04:	b118      	cbz	r0, 7d0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb86>
    7d06:	e018      	b.n	7d3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbb2>
    7d08:	f640 2111 	movw	r1, #2577	; 0xa11
    7d0c:	e033      	b.n	7d76 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbee>
    7d0e:	6861      	ldr	r1, [r4, #4]
    7d10:	2000      	movs	r0, #0
    7d12:	2503      	movs	r5, #3
    7d14:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    7d18:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    7d1c:	1c52      	adds	r2, r2, #1
    7d1e:	fbb2 f7f5 	udiv	r7, r2, r5
    7d22:	fb05 2217 	mls	r2, r5, r7, r2
    7d26:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    7d2a:	fa23 f202 	lsr.w	r2, r3, r2
    7d2e:	07d2      	lsls	r2, r2, #31
    7d30:	d103      	bne.n	7d3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbb2>
    7d32:	1c40      	adds	r0, r0, #1
    7d34:	b2c0      	uxtb	r0, r0
    7d36:	2803      	cmp	r0, #3
    7d38:	d3ee      	bcc.n	7d18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb90>
    7d3a:	6860      	ldr	r0, [r4, #4]
    7d3c:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    7d40:	f004 fa06 	bl	c150 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7d44:	4631      	mov	r1, r6
    7d46:	2001      	movs	r0, #1
    7d48:	f7ff fa4e 	bl	71e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    7d4c:	2800      	cmp	r0, #0
    7d4e:	d0bb      	beq.n	7cc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb40>
    7d50:	f000 f8fc 	bl	7f4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdc4>
    7d54:	6860      	ldr	r0, [r4, #4]
    7d56:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
    7d5a:	b138      	cbz	r0, 7d6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbe4>
    7d5c:	f7fd ffc8 	bl	5cf0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    7d60:	480a      	ldr	r0, [pc, #40]	; (7d8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc04>)
    7d62:	6800      	ldr	r0, [r0, #0]
    7d64:	2803      	cmp	r0, #3
    7d66:	d004      	beq.n	7d72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbea>
    7d68:	2000      	movs	r0, #0
    7d6a:	e7ad      	b.n	7cc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb40>
    7d6c:	f7fe f9b4 	bl	60d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7d70:	e7f6      	b.n	7d60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbd8>
    7d72:	f640 2123 	movw	r1, #2595	; 0xa23
    7d76:	2032      	movs	r0, #50	; 0x32
    7d78:	f7fc fc1e 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d7c:	20000140 	.word	0x20000140
    7d80:	00008034 	.word	0x00008034
    7d84:	00010c72 	.word	0x00010c72
    7d88:	8e89bed6 	.word	0x8e89bed6
    7d8c:	40001550 	.word	0x40001550
    7d90:	b510      	push	{r4, lr}
    7d92:	2000      	movs	r0, #0
    7d94:	f7ff fe70 	bl	7a78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f0>
    7d98:	4808      	ldr	r0, [pc, #32]	; (7dbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc34>)
    7d9a:	6840      	ldr	r0, [r0, #4]
    7d9c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    7da0:	b128      	cbz	r0, 7dae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc26>
    7da2:	2801      	cmp	r0, #1
    7da4:	d003      	beq.n	7dae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc26>
    7da6:	2802      	cmp	r0, #2
    7da8:	d004      	beq.n	7db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc2c>
    7daa:	200c      	movs	r0, #12
    7dac:	bd10      	pop	{r4, pc}
    7dae:	f000 f807 	bl	7dc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc38>
    7db2:	e001      	b.n	7db8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc30>
    7db4:	f000 f81a 	bl	7dec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc64>
    7db8:	2000      	movs	r0, #0
    7dba:	bd10      	pop	{r4, pc}
    7dbc:	20000140 	.word	0x20000140
    7dc0:	b510      	push	{r4, lr}
    7dc2:	f7ff f9ff 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    7dc6:	4904      	ldr	r1, [pc, #16]	; (7dd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc50>)
    7dc8:	2001      	movs	r0, #1
    7dca:	6849      	ldr	r1, [r1, #4]
    7dcc:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    7dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7dd4:	f000 ba28 	b.w	8228 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY>
    7dd8:	20000140 	.word	0x20000140
    7ddc:	4902      	ldr	r1, [pc, #8]	; (7de8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc60>)
    7dde:	2000      	movs	r0, #0
    7de0:	6849      	ldr	r1, [r1, #4]
    7de2:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    7de6:	4770      	bx	lr
    7de8:	20000140 	.word	0x20000140
    7dec:	b570      	push	{r4, r5, r6, lr}
    7dee:	f7fd f80d 	bl	4e0c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7df2:	4604      	mov	r4, r0
    7df4:	f7fd f810 	bl	4e18 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7df8:	4621      	mov	r1, r4
    7dfa:	f007 fd12 	bl	f822 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    7dfe:	0004      	movs	r4, r0
    7e00:	d020      	beq.n	7e44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcbc>
    7e02:	f007 fd6a 	bl	f8da <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    7e06:	2000      	movs	r0, #0
    7e08:	f000 f9da 	bl	81c0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7e0c:	b1f8      	cbz	r0, 7e4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcc6>
    7e0e:	4d20      	ldr	r5, [pc, #128]	; (7e90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd08>)
    7e10:	6868      	ldr	r0, [r5, #4]
    7e12:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    7e16:	2802      	cmp	r0, #2
    7e18:	d003      	beq.n	7e22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc9a>
    7e1a:	4621      	mov	r1, r4
    7e1c:	2000      	movs	r0, #0
    7e1e:	f7ff f9e3 	bl	71e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    7e22:	1ce0      	adds	r0, r4, #3
    7e24:	f006 fe10 	bl	ea48 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7e28:	6869      	ldr	r1, [r5, #4]
    7e2a:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    7e2e:	b128      	cbz	r0, 7e3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcb4>
    7e30:	2440      	movs	r4, #64	; 0x40
    7e32:	f003 fda9 	bl	b988 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7e36:	4620      	mov	r0, r4
    7e38:	f003 ff6e 	bl	bd18 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7e3c:	f7ff faa8 	bl	7390 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x208>
    7e40:	b970      	cbnz	r0, 7e60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcd8>
    7e42:	e008      	b.n	7e56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcce>
    7e44:	f240 41ee 	movw	r1, #1262	; 0x4ee
    7e48:	2032      	movs	r0, #50	; 0x32
    7e4a:	f7fc fbb5 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e52:	f7ff bfb5 	b.w	7dc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc38>
    7e56:	6868      	ldr	r0, [r5, #4]
    7e58:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    7e5c:	2802      	cmp	r0, #2
    7e5e:	d104      	bne.n	7e6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xce2>
    7e60:	2100      	movs	r1, #0
    7e62:	2201      	movs	r2, #1
    7e64:	4608      	mov	r0, r1
    7e66:	f004 fa0d 	bl	c284 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7e6a:	6868      	ldr	r0, [r5, #4]
    7e6c:	21ff      	movs	r1, #255	; 0xff
    7e6e:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    7e72:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    7e76:	2100      	movs	r1, #0
    7e78:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    7e7c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    7e80:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    7e84:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    7e88:	2105      	movs	r1, #5
    7e8a:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    7e8e:	bd70      	pop	{r4, r5, r6, pc}
    7e90:	20000140 	.word	0x20000140
    7e94:	b570      	push	{r4, r5, r6, lr}
    7e96:	f7fc ffb9 	bl	4e0c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7e9a:	4604      	mov	r4, r0
    7e9c:	f7fc ffbc 	bl	4e18 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7ea0:	4621      	mov	r1, r4
    7ea2:	f007 fcbe 	bl	f822 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    7ea6:	0005      	movs	r5, r0
    7ea8:	d028      	beq.n	7efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd74>
    7eaa:	4e19      	ldr	r6, [pc, #100]	; (7f10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd88>)
    7eac:	2004      	movs	r0, #4
    7eae:	6874      	ldr	r4, [r6, #4]
    7eb0:	3470      	adds	r4, #112	; 0x70
    7eb2:	f000 f985 	bl	81c0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7eb6:	b330      	cbz	r0, 7f06 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd7e>
    7eb8:	200c      	movs	r0, #12
    7eba:	7020      	strb	r0, [r4, #0]
    7ebc:	2000      	movs	r0, #0
    7ebe:	f000 f8f9 	bl	80b4 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    7ec2:	7828      	ldrb	r0, [r5, #0]
    7ec4:	6871      	ldr	r1, [r6, #4]
    7ec6:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7eca:	f881 008a 	strb.w	r0, [r1, #138]	; 0x8a
    7ece:	2005      	movs	r0, #5
    7ed0:	f7ff fb34 	bl	753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b4>
    7ed4:	4a0f      	ldr	r2, [pc, #60]	; (7f14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd8c>)
    7ed6:	68b1      	ldr	r1, [r6, #8]
    7ed8:	2520      	movs	r5, #32
    7eda:	6d50      	ldr	r0, [r2, #84]	; 0x54
    7edc:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
    7ee0:	7808      	ldrb	r0, [r1, #0]
    7ee2:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    7ee6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    7eea:	4318      	orrs	r0, r3
    7eec:	7008      	strb	r0, [r1, #0]
    7eee:	6d50      	ldr	r0, [r2, #84]	; 0x54
    7ef0:	7ea2      	ldrb	r2, [r4, #26]
    7ef2:	f810 1f96 	ldrb.w	r1, [r0, #150]!
    7ef6:	4011      	ands	r1, r2
    7ef8:	7001      	strb	r1, [r0, #0]
    7efa:	bd70      	pop	{r4, r5, r6, pc}
    7efc:	f240 616f 	movw	r1, #1647	; 0x66f
    7f00:	2032      	movs	r0, #50	; 0x32
    7f02:	f7fc fb59 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f0a:	f7ff bf59 	b.w	7dc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc38>
    7f0e:	0000      	.short	0x0000
    7f10:	20000140 	.word	0x20000140
    7f14:	20000b70 	.word	0x20000b70
    7f18:	b510      	push	{r4, lr}
    7f1a:	2003      	movs	r0, #3
    7f1c:	f000 f950 	bl	81c0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7f20:	b168      	cbz	r0, 7f3e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdb6>
    7f22:	2003      	movs	r0, #3
    7f24:	f7ff fb0a 	bl	753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b4>
    7f28:	2201      	movs	r2, #1
    7f2a:	4611      	mov	r1, r2
    7f2c:	2000      	movs	r0, #0
    7f2e:	f004 f9a9 	bl	c284 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7f32:	4905      	ldr	r1, [pc, #20]	; (7f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdc0>)
    7f34:	200b      	movs	r0, #11
    7f36:	6849      	ldr	r1, [r1, #4]
    7f38:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    7f3c:	bd10      	pop	{r4, pc}
    7f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7f42:	f7ff bf3d 	b.w	7dc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc38>
    7f46:	0000      	.short	0x0000
    7f48:	20000140 	.word	0x20000140
    7f4c:	b570      	push	{r4, r5, r6, lr}
    7f4e:	4d19      	ldr	r5, [pc, #100]	; (7fb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe2c>)
    7f50:	2000      	movs	r0, #0
    7f52:	686c      	ldr	r4, [r5, #4]
    7f54:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    7f58:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    7f5c:	b910      	cbnz	r0, 7f64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xddc>
    7f5e:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    7f62:	b308      	cbz	r0, 7fa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe20>
    7f64:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    7f68:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    7f6c:	4050      	eors	r0, r2
    7f6e:	ea70 0101 	orns	r1, r0, r1
    7f72:	d019      	beq.n	7fa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe20>
    7f74:	f7fa ff50 	bl	2e18 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    7f78:	e9d4 2300 	ldrd	r2, r3, [r4]
    7f7c:	1a80      	subs	r0, r0, r2
    7f7e:	4199      	sbcs	r1, r3
    7f80:	d312      	bcc.n	7fa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe20>
    7f82:	f7fe f817 	bl	5fb4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7f86:	490c      	ldr	r1, [pc, #48]	; (7fb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe30>)
    7f88:	fba0 2301 	umull	r2, r3, r0, r1
    7f8c:	6868      	ldr	r0, [r5, #4]
    7f8e:	3090      	adds	r0, #144	; 0x90
    7f90:	f007 fc49 	bl	f826 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    7f94:	6868      	ldr	r0, [r5, #4]
    7f96:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    7f9a:	b110      	cbz	r0, 7fa2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe1a>
    7f9c:	2001      	movs	r0, #1
    7f9e:	f7fd fef3 	bl	5d88 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    7fa2:	2001      	movs	r0, #1
    7fa4:	f7ff fd42 	bl	7a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8a4>
    7fa8:	6869      	ldr	r1, [r5, #4]
    7faa:	2002      	movs	r0, #2
    7fac:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    7fb0:	bd70      	pop	{r4, r5, r6, pc}
    7fb2:	0000      	.short	0x0000
    7fb4:	20000140 	.word	0x20000140
    7fb8:	000f4240 	.word	0x000f4240
    7fbc:	00007ddd 	.word	0x00007ddd
    7fc0:	00007dc1 	.word	0x00007dc1
    7fc4:	0000f803 	.word	0x0000f803
    7fc8:	0000f803 	.word	0x0000f803
    7fcc:	0000f803 	.word	0x0000f803
    7fd0:	00007ded 	.word	0x00007ded
    7fd4:	0000f803 	.word	0x0000f803
    7fd8:	0000f803 	.word	0x0000f803
    7fdc:	0000f803 	.word	0x0000f803
    7fe0:	0000f803 	.word	0x0000f803
    7fe4:	0000f803 	.word	0x0000f803
    7fe8:	00007f19 	.word	0x00007f19
    7fec:	00007e95 	.word	0x00007e95
    7ff0:	0000f803 	.word	0x0000f803
    7ff4:	0000f803 	.word	0x0000f803
    7ff8:	00007c35 	.word	0x00007c35
    7ffc:	00007c11 	.word	0x00007c11
    8000:	00000000 	.word	0x00000000
    8004:	0000f80d 	.word	0x0000f80d
    8008:	0000f7ab 	.word	0x0000f7ab
    800c:	0000f7bd 	.word	0x0000f7bd
    8010:	0000f7cb 	.word	0x0000f7cb
    8014:	0000733d 	.word	0x0000733d
    8018:	00007cb1 	.word	0x00007cb1
    801c:	00007d91 	.word	0x00007d91
    8020:	00007ff8 	.word	0x00007ff8
    8024:	00008000 	.word	0x00008000
    8028:	00007fbc 	.word	0x00007fbc
    802c:	00008010 	.word	0x00008010
    8030:	00008008 	.word	0x00008008
    8034:	00007c6d 	.word	0x00007c6d
    8038:	00007ae9 	.word	0x00007ae9
    803c:	00007bbd 	.word	0x00007bbd
    8040:	0000f81f 	.word	0x0000f81f

00008044 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    8044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8048:	4616      	mov	r6, r2
    804a:	460c      	mov	r4, r1
    804c:	4605      	mov	r5, r0
    804e:	f007 f86e 	bl	f12e <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    8052:	7460      	strb	r0, [r4, #17]
    8054:	4628      	mov	r0, r5
    8056:	f007 f861 	bl	f11c <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    805a:	74a0      	strb	r0, [r4, #18]
    805c:	1cea      	adds	r2, r5, #3
    805e:	4b14      	ldr	r3, [pc, #80]	; (80b0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    8060:	1d90      	adds	r0, r2, #6
    8062:	2100      	movs	r1, #0
    8064:	2e07      	cmp	r6, #7
    8066:	d21f      	bcs.n	80a8 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    8068:	e8df f006 	tbb	[pc, r6]
    806c:	1e110b04 	.word	0x1e110b04
    8070:	00041e13 	.word	0x00041e13
    8074:	781b      	ldrb	r3, [r3, #0]
    8076:	e00d      	b.n	8094 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    8078:	60e0      	str	r0, [r4, #12]
    807a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    807e:	60e1      	str	r1, [r4, #12]
    8080:	e7fb      	b.n	807a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    8082:	785b      	ldrb	r3, [r3, #1]
    8084:	7063      	strb	r3, [r4, #1]
    8086:	e9c4 2001 	strd	r2, r0, [r4, #4]
    808a:	7421      	strb	r1, [r4, #16]
    808c:	e7f7      	b.n	807e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    808e:	789b      	ldrb	r3, [r3, #2]
    8090:	e000      	b.n	8094 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    8092:	78db      	ldrb	r3, [r3, #3]
    8094:	7063      	strb	r3, [r4, #1]
    8096:	e9c4 2101 	strd	r2, r1, [r4, #4]
    809a:	786a      	ldrb	r2, [r5, #1]
    809c:	1f92      	subs	r2, r2, #6
    809e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    80a2:	7422      	strb	r2, [r4, #16]
    80a4:	d0eb      	beq.n	807e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    80a6:	e7e7      	b.n	8078 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    80a8:	7061      	strb	r1, [r4, #1]
    80aa:	6061      	str	r1, [r4, #4]
    80ac:	60a1      	str	r1, [r4, #8]
    80ae:	e7ec      	b.n	808a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    80b0:	00010c78 	.word	0x00010c78

000080b4 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>:
    80b4:	b510      	push	{r4, lr}
    80b6:	b140      	cbz	r0, 80ca <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    80b8:	2801      	cmp	r0, #1
    80ba:	d006      	beq.n	80ca <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    80bc:	2802      	cmp	r0, #2
    80be:	d00a      	beq.n	80d6 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x22>
    80c0:	2803      	cmp	r0, #3
    80c2:	d006      	beq.n	80d2 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x1e>
    80c4:	f640 4109 	movw	r1, #3081	; 0xc09
    80c8:	e017      	b.n	80fa <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x46>
    80ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    80ce:	f000 ba47 	b.w	8560 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd8>
    80d2:	2401      	movs	r4, #1
    80d4:	e000      	b.n	80d8 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x24>
    80d6:	2400      	movs	r4, #0
    80d8:	f7fe fc1a 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    80dc:	480a      	ldr	r0, [pc, #40]	; (8108 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x54>)
    80de:	2101      	movs	r1, #1
    80e0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    80e4:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    80e8:	6a00      	ldr	r0, [r0, #32]
    80ea:	2100      	movs	r1, #0
    80ec:	f880 11f0 	strb.w	r1, [r0, #496]	; 0x1f0
    80f0:	f000 fad4 	bl	869c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x214>
    80f4:	b120      	cbz	r0, 8100 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x4c>
    80f6:	f640 314d 	movw	r1, #2893	; 0xb4d
    80fa:	2035      	movs	r0, #53	; 0x35
    80fc:	f7fc fa5c 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8104:	f000 baba 	b.w	867c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f4>
    8108:	20000c28 	.word	0x20000c28

0000810c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    810c:	b570      	push	{r4, r5, r6, lr}
    810e:	f003 ff61 	bl	bfd4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8112:	4c0e      	ldr	r4, [pc, #56]	; (814c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    8114:	4606      	mov	r6, r0
    8116:	7860      	ldrb	r0, [r4, #1]
    8118:	b170      	cbz	r0, 8138 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    811a:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    811e:	4632      	mov	r2, r6
    8120:	4628      	mov	r0, r5
    8122:	f006 fd15 	bl	eb50 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8126:	6060      	str	r0, [r4, #4]
    8128:	42a8      	cmp	r0, r5
    812a:	d005      	beq.n	8138 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    812c:	68e1      	ldr	r1, [r4, #12]
    812e:	1b40      	subs	r0, r0, r5
    8130:	4408      	add	r0, r1
    8132:	60e0      	str	r0, [r4, #12]
    8134:	f7fa fd98 	bl	2c68 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8138:	6860      	ldr	r0, [r4, #4]
    813a:	42b0      	cmp	r0, r6
    813c:	d301      	bcc.n	8142 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    813e:	7820      	ldrb	r0, [r4, #0]
    8140:	b108      	cbz	r0, 8146 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    8142:	2000      	movs	r0, #0
    8144:	bd70      	pop	{r4, r5, r6, pc}
    8146:	2001      	movs	r0, #1
    8148:	bd70      	pop	{r4, r5, r6, pc}
    814a:	0000      	.short	0x0000
    814c:	20000c18 	.word	0x20000c18

00008150 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    8150:	b510      	push	{r4, lr}
    8152:	2905      	cmp	r1, #5
    8154:	d22d      	bcs.n	81b2 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    8156:	e8df f001 	tbb	[pc, r1]
    815a:	0a05      	.short	0x0a05
    815c:	00280e03 	.word	0x00280e03
    8160:	2100      	movs	r1, #0
    8162:	e000      	b.n	8166 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    8164:	2101      	movs	r1, #1
    8166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    816a:	f000 b9dd 	b.w	8528 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    816e:	2103      	movs	r1, #3
    8170:	f880 11f0 	strb.w	r1, [r0, #496]	; 0x1f0
    8174:	bd10      	pop	{r4, pc}
    8176:	4911      	ldr	r1, [pc, #68]	; (81bc <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    8178:	4604      	mov	r4, r0
    817a:	6900      	ldr	r0, [r0, #16]
    817c:	6008      	str	r0, [r1, #0]
    817e:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    8182:	6260      	str	r0, [r4, #36]	; 0x24
    8184:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
    8188:	8420      	strh	r0, [r4, #32]
    818a:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    818e:	6120      	str	r0, [r4, #16]
    8190:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    8194:	8320      	strh	r0, [r4, #24]
    8196:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
    819a:	8360      	strh	r0, [r4, #26]
    819c:	4620      	mov	r0, r4
    819e:	f007 fcca 	bl	fb36 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    81a2:	2002      	movs	r0, #2
    81a4:	f884 01f0 	strb.w	r0, [r4, #496]	; 0x1f0
    81a8:	bd10      	pop	{r4, pc}
    81aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    81ae:	f007 bcc2 	b.w	fb36 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    81b2:	f640 318d 	movw	r1, #2957	; 0xb8d
    81b6:	2035      	movs	r0, #53	; 0x35
    81b8:	f7fc f9fe 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81bc:	20000150 	.word	0x20000150

000081c0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    81c0:	b570      	push	{r4, r5, r6, lr}
    81c2:	4605      	mov	r5, r0
    81c4:	f7fa fe28 	bl	2e18 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    81c8:	4c16      	ldr	r4, [pc, #88]	; (8224 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    81ca:	6921      	ldr	r1, [r4, #16]
    81cc:	1a46      	subs	r6, r0, r1
    81ce:	b155      	cbz	r5, 81e6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    81d0:	2d03      	cmp	r5, #3
    81d2:	d00d      	beq.n	81f0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    81d4:	2d04      	cmp	r5, #4
    81d6:	d00e      	beq.n	81f6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    81d8:	2d06      	cmp	r5, #6
    81da:	d01d      	beq.n	8218 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    81dc:	f240 5193 	movw	r1, #1427	; 0x593
    81e0:	2035      	movs	r0, #53	; 0x35
    81e2:	f7fc f9e9 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81e6:	2001      	movs	r0, #1
    81e8:	f007 fc91 	bl	fb0e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    81ec:	3098      	adds	r0, #152	; 0x98
    81ee:	e004      	b.n	81fa <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    81f0:	f44f 7057 	mov.w	r0, #860	; 0x35c
    81f4:	e001      	b.n	81fa <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    81f6:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    81fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
    81fc:	1835      	adds	r5, r6, r0
    81fe:	39f4      	subs	r1, #244	; 0xf4
    8200:	428d      	cmp	r5, r1
    8202:	d307      	bcc.n	8214 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    8204:	2600      	movs	r6, #0
    8206:	f000 fce1 	bl	8bcc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x744>
    820a:	b140      	cbz	r0, 821e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    820c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    820e:	38f4      	subs	r0, #244	; 0xf4
    8210:	4285      	cmp	r5, r0
    8212:	d203      	bcs.n	821c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    8214:	2601      	movs	r6, #1
    8216:	e002      	b.n	821e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    8218:	2001      	movs	r0, #1
    821a:	bd70      	pop	{r4, r5, r6, pc}
    821c:	2600      	movs	r6, #0
    821e:	4630      	mov	r0, r6
    8220:	bd70      	pop	{r4, r5, r6, pc}
    8222:	0000      	.short	0x0000
    8224:	20000c28 	.word	0x20000c28

00008228 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY>:
    8228:	b510      	push	{r4, lr}
    822a:	b086      	sub	sp, #24
    822c:	f7fe fb70 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8230:	4c0f      	ldr	r4, [pc, #60]	; (8270 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x48>)
    8232:	7b20      	ldrb	r0, [r4, #12]
    8234:	b1b0      	cbz	r0, 8264 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x3c>
    8236:	7860      	ldrb	r0, [r4, #1]
    8238:	b9a0      	cbnz	r0, 8264 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x3c>
    823a:	2300      	movs	r3, #0
    823c:	461a      	mov	r2, r3
    823e:	4619      	mov	r1, r3
    8240:	4668      	mov	r0, sp
    8242:	f000 fd61 	bl	8d08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x880>
    8246:	b158      	cbz	r0, 8260 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x38>
    8248:	f7fe fd90 	bl	6d6c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    824c:	7800      	ldrb	r0, [r0, #0]
    824e:	4669      	mov	r1, sp
    8250:	f007 fc83 	bl	fb5a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x52>
    8254:	b930      	cbnz	r0, 8264 <sym_UXRNNIFU5PXIYRINROHWBAFH5AGNGDMLJAXKACY+0x3c>
    8256:	f640 2199 	movw	r1, #2713	; 0xa99
    825a:	2035      	movs	r0, #53	; 0x35
    825c:	f7fc f9ac 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8260:	2001      	movs	r0, #1
    8262:	70a0      	strb	r0, [r4, #2]
    8264:	b006      	add	sp, #24
    8266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    826a:	f000 ba07 	b.w	867c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f4>
    826e:	0000      	.short	0x0000
    8270:	20000c28 	.word	0x20000c28

00008274 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    8274:	b508      	push	{r3, lr}
    8276:	2258      	movs	r2, #88	; 0x58
    8278:	2100      	movs	r1, #0
    827a:	480c      	ldr	r0, [pc, #48]	; (82ac <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    827c:	f005 fa57 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8280:	f7fe fd74 	bl	6d6c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8284:	2120      	movs	r1, #32
    8286:	7001      	strb	r1, [r0, #0]
    8288:	4808      	ldr	r0, [pc, #32]	; (82ac <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    828a:	3810      	subs	r0, #16
    828c:	2100      	movs	r1, #0
    828e:	6001      	str	r1, [r0, #0]
    8290:	6041      	str	r1, [r0, #4]
    8292:	6081      	str	r1, [r0, #8]
    8294:	60c1      	str	r1, [r0, #12]
    8296:	f000 f80b 	bl	82b0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    829a:	f242 7010 	movw	r0, #10000	; 0x2710
    829e:	9000      	str	r0, [sp, #0]
    82a0:	2201      	movs	r2, #1
    82a2:	4669      	mov	r1, sp
    82a4:	1080      	asrs	r0, r0, #2
    82a6:	f000 faf1 	bl	888c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x404>
    82aa:	bd08      	pop	{r3, pc}
    82ac:	20000c28 	.word	0x20000c28

000082b0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    82b0:	4804      	ldr	r0, [pc, #16]	; (82c4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x14>)
    82b2:	b510      	push	{r4, lr}
    82b4:	7800      	ldrb	r0, [r0, #0]
    82b6:	b108      	cbz	r0, 82bc <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc>
    82b8:	f000 f8a8 	bl	840c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    82bc:	f000 f900 	bl	84c0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    82c0:	2000      	movs	r0, #0
    82c2:	bd10      	pop	{r4, pc}
    82c4:	20000c28 	.word	0x20000c28

000082c8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    82c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    82ca:	4c1e      	ldr	r4, [pc, #120]	; (8344 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x7c>)
    82cc:	4607      	mov	r7, r0
    82ce:	b087      	sub	sp, #28
    82d0:	7820      	ldrb	r0, [r4, #0]
    82d2:	460e      	mov	r6, r1
    82d4:	b110      	cbz	r0, 82dc <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x14>
    82d6:	200c      	movs	r0, #12
    82d8:	b007      	add	sp, #28
    82da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82dc:	f7fe fd46 	bl	6d6c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    82e0:	4605      	mov	r5, r0
    82e2:	6227      	str	r7, [r4, #32]
    82e4:	f897 01f0 	ldrb.w	r0, [r7, #496]	; 0x1f0
    82e8:	b110      	cbz	r0, 82f0 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x28>
    82ea:	f240 4123 	movw	r1, #1059	; 0x423
    82ee:	e025      	b.n	833c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    82f0:	2005      	movs	r0, #5
    82f2:	7020      	strb	r0, [r4, #0]
    82f4:	2000      	movs	r0, #0
    82f6:	7060      	strb	r0, [r4, #1]
    82f8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    82fc:	f000 fcae 	bl	8c5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d4>
    8300:	6420      	str	r0, [r4, #64]	; 0x40
    8302:	2100      	movs	r1, #0
    8304:	4810      	ldr	r0, [pc, #64]	; (8348 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    8306:	f7fa fbb7 	bl	2a78 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    830a:	7028      	strb	r0, [r5, #0]
    830c:	2820      	cmp	r0, #32
    830e:	d00d      	beq.n	832c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x64>
    8310:	4633      	mov	r3, r6
    8312:	2200      	movs	r2, #0
    8314:	2101      	movs	r1, #1
    8316:	4668      	mov	r0, sp
    8318:	f000 fcf6 	bl	8d08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x880>
    831c:	b148      	cbz	r0, 8332 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6a>
    831e:	7828      	ldrb	r0, [r5, #0]
    8320:	4669      	mov	r1, sp
    8322:	f007 fc1a 	bl	fb5a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x52>
    8326:	b138      	cbz	r0, 8338 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x70>
    8328:	2000      	movs	r0, #0
    832a:	e7d5      	b.n	82d8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    832c:	f240 4131 	movw	r1, #1073	; 0x431
    8330:	e004      	b.n	833c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    8332:	f240 4134 	movw	r1, #1076	; 0x434
    8336:	e001      	b.n	833c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    8338:	f240 4135 	movw	r1, #1077	; 0x435
    833c:	2035      	movs	r0, #53	; 0x35
    833e:	f7fc f93b 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8342:	0000      	.short	0x0000
    8344:	20000c28 	.word	0x20000c28
    8348:	00008719 	.word	0x00008719

0000834c <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    834c:	4902      	ldr	r1, [pc, #8]	; (8358 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    834e:	6a09      	ldr	r1, [r1, #32]
    8350:	6001      	str	r1, [r0, #0]
    8352:	f000 b85b 	b.w	840c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    8356:	0000      	.short	0x0000
    8358:	20000c28 	.word	0x20000c28

0000835c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    835c:	4901      	ldr	r1, [pc, #4]	; (8364 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    835e:	7048      	strb	r0, [r1, #1]
    8360:	4770      	bx	lr
    8362:	0000      	.short	0x0000
    8364:	20000c18 	.word	0x20000c18

00008368 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    8368:	b570      	push	{r4, r5, r6, lr}
    836a:	4605      	mov	r5, r0
    836c:	4809      	ldr	r0, [pc, #36]	; (8394 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x2c>)
    836e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8372:	fbb0 f4f1 	udiv	r4, r0, r1
    8376:	f007 fc38 	bl	fbea <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xe2>
    837a:	1901      	adds	r1, r0, r4
    837c:	4628      	mov	r0, r5
    837e:	f501 719d 	add.w	r1, r1, #314	; 0x13a
    8382:	f007 f8fb 	bl	f57c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8386:	f640 0148 	movw	r1, #2120	; 0x848
    838a:	4288      	cmp	r0, r1
    838c:	d300      	bcc.n	8390 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x28>
    838e:	4608      	mov	r0, r1
    8390:	b280      	uxth	r0, r0
    8392:	bd70      	pop	{r4, r5, r6, pc}
    8394:	000122f9 	.word	0x000122f9

00008398 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    8398:	b570      	push	{r4, r5, r6, lr}
    839a:	b086      	sub	sp, #24
    839c:	4606      	mov	r6, r0
    839e:	b111      	cbz	r1, 83a6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    83a0:	2011      	movs	r0, #17
    83a2:	b006      	add	sp, #24
    83a4:	bd70      	pop	{r4, r5, r6, pc}
    83a6:	4c17      	ldr	r4, [pc, #92]	; (8404 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    83a8:	7820      	ldrb	r0, [r4, #0]
    83aa:	b108      	cbz	r0, 83b0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    83ac:	200c      	movs	r0, #12
    83ae:	e7f8      	b.n	83a2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    83b0:	f7fe fcdc 	bl	6d6c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    83b4:	4605      	mov	r5, r0
    83b6:	2000      	movs	r0, #0
    83b8:	7060      	strb	r0, [r4, #1]
    83ba:	2004      	movs	r0, #4
    83bc:	7020      	strb	r0, [r4, #0]
    83be:	f000 fc4d 	bl	8c5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d4>
    83c2:	6420      	str	r0, [r4, #64]	; 0x40
    83c4:	2100      	movs	r1, #0
    83c6:	4810      	ldr	r0, [pc, #64]	; (8408 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    83c8:	f7fa fb56 	bl	2a78 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    83cc:	7028      	strb	r0, [r5, #0]
    83ce:	2820      	cmp	r0, #32
    83d0:	d00d      	beq.n	83ee <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    83d2:	4633      	mov	r3, r6
    83d4:	2200      	movs	r2, #0
    83d6:	2101      	movs	r1, #1
    83d8:	4668      	mov	r0, sp
    83da:	f000 fc95 	bl	8d08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x880>
    83de:	b148      	cbz	r0, 83f4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    83e0:	7828      	ldrb	r0, [r5, #0]
    83e2:	4669      	mov	r1, sp
    83e4:	f007 fbb9 	bl	fb5a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x52>
    83e8:	b138      	cbz	r0, 83fa <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    83ea:	2000      	movs	r0, #0
    83ec:	e7d9      	b.n	83a2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    83ee:	f240 4197 	movw	r1, #1175	; 0x497
    83f2:	e004      	b.n	83fe <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    83f4:	f240 4199 	movw	r1, #1177	; 0x499
    83f8:	e001      	b.n	83fe <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    83fa:	f240 419a 	movw	r1, #1178	; 0x49a
    83fe:	2035      	movs	r0, #53	; 0x35
    8400:	f7fc f8da 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8404:	20000c28 	.word	0x20000c28
    8408:	00008719 	.word	0x00008719

0000840c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8410:	2700      	movs	r7, #0
    8412:	f7fe fcab 	bl	6d6c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8416:	4c18      	ldr	r4, [pc, #96]	; (8478 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    8418:	4605      	mov	r5, r0
    841a:	7820      	ldrb	r0, [r4, #0]
    841c:	2804      	cmp	r0, #4
    841e:	d005      	beq.n	842c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    8420:	7820      	ldrb	r0, [r4, #0]
    8422:	2805      	cmp	r0, #5
    8424:	d002      	beq.n	842c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    8426:	200c      	movs	r0, #12
    8428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    842c:	2001      	movs	r0, #1
    842e:	7060      	strb	r0, [r4, #1]
    8430:	7b20      	ldrb	r0, [r4, #12]
    8432:	b160      	cbz	r0, 844e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    8434:	f3ef 8610 	mrs	r6, PRIMASK
    8438:	b672      	cpsid	i
    843a:	7b20      	ldrb	r0, [r4, #12]
    843c:	b128      	cbz	r0, 844a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    843e:	7b60      	ldrb	r0, [r4, #13]
    8440:	b118      	cbz	r0, 844a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    8442:	f007 f9a8 	bl	f796 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    8446:	f000 f919 	bl	867c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f4>
    844a:	b126      	cbz	r6, 8456 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    844c:	e004      	b.n	8458 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    844e:	7828      	ldrb	r0, [r5, #0]
    8450:	f7fa f8a2 	bl	2598 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8454:	e000      	b.n	8458 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    8456:	b662      	cpsie	i
    8458:	7828      	ldrb	r0, [r5, #0]
    845a:	f7fa f9f5 	bl	2848 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    845e:	f000 fdab 	bl	8fb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb30>
    8462:	2000      	movs	r0, #0
    8464:	7060      	strb	r0, [r4, #1]
    8466:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    846a:	b100      	cbz	r0, 846e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    846c:	270c      	movs	r7, #12
    846e:	f000 fdcf 	bl	9010 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb88>
    8472:	4638      	mov	r0, r7
    8474:	e7d8      	b.n	8428 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    8476:	0000      	.short	0x0000
    8478:	20000c28 	.word	0x20000c28

0000847c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    847c:	4801      	ldr	r0, [pc, #4]	; (8484 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    847e:	7800      	ldrb	r0, [r0, #0]
    8480:	4770      	bx	lr
    8482:	0000      	.short	0x0000
    8484:	20000c28 	.word	0x20000c28

00008488 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    8488:	490c      	ldr	r1, [pc, #48]	; (84bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    848a:	b508      	push	{r3, lr}
    848c:	7809      	ldrb	r1, [r1, #0]
    848e:	b121      	cbz	r1, 849a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    8490:	f240 4151 	movw	r1, #1105	; 0x451
    8494:	2035      	movs	r0, #53	; 0x35
    8496:	f7fc f88f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    849a:	2300      	movs	r3, #0
    849c:	9300      	str	r3, [sp, #0]
    849e:	7801      	ldrb	r1, [r0, #0]
    84a0:	461a      	mov	r2, r3
    84a2:	07c9      	lsls	r1, r1, #31
    84a4:	d003      	beq.n	84ae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    84a6:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    84aa:	2201      	movs	r2, #1
    84ac:	9000      	str	r0, [sp, #0]
    84ae:	4669      	mov	r1, sp
    84b0:	4618      	mov	r0, r3
    84b2:	f000 f9eb 	bl	888c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x404>
    84b6:	2000      	movs	r0, #0
    84b8:	bd08      	pop	{r3, pc}
    84ba:	0000      	.short	0x0000
    84bc:	20000c28 	.word	0x20000c28
    84c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    84c2:	4c18      	ldr	r4, [pc, #96]	; (8524 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>)
    84c4:	2001      	movs	r0, #1
    84c6:	7020      	strb	r0, [r4, #0]
    84c8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    84cc:	e00b      	b.n	84e6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e>
    84ce:	2100      	movs	r1, #0
    84d0:	f006 f96a 	bl	e7a8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    84d4:	0006      	movs	r6, r0
    84d6:	d010      	beq.n	84fa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72>
    84d8:	f896 01f1 	ldrb.w	r0, [r6, #497]	; 0x1f1
    84dc:	f7fa f9b4 	bl	2848 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    84e0:	4630      	mov	r0, r6
    84e2:	f007 fb3c 	bl	fb5e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x56>
    84e6:	4669      	mov	r1, sp
    84e8:	2000      	movs	r0, #0
    84ea:	f006 f966 	bl	e7ba <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    84ee:	b180      	cbz	r0, 8512 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    84f0:	f240 2143 	movw	r1, #579	; 0x243
    84f4:	2035      	movs	r0, #53	; 0x35
    84f6:	f7fc f85f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84fa:	f240 5144 	movw	r1, #1348	; 0x544
    84fe:	e7f9      	b.n	84f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c>
    8500:	9802      	ldr	r0, [sp, #8]
    8502:	b130      	cbz	r0, 8512 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    8504:	f890 11f0 	ldrb.w	r1, [r0, #496]	; 0x1f0
    8508:	b119      	cbz	r1, 8512 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    850a:	8800      	ldrh	r0, [r0, #0]
    850c:	42a8      	cmp	r0, r5
    850e:	d1de      	bne.n	84ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x46>
    8510:	e004      	b.n	851c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x94>
    8512:	4668      	mov	r0, sp
    8514:	f7fc fa7c 	bl	4a10 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8518:	2800      	cmp	r0, #0
    851a:	d0f1      	beq.n	8500 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x78>
    851c:	2000      	movs	r0, #0
    851e:	7020      	strb	r0, [r4, #0]
    8520:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8522:	0000      	.short	0x0000
    8524:	20000c18 	.word	0x20000c18
    8528:	b510      	push	{r4, lr}
    852a:	4604      	mov	r4, r0
    852c:	2901      	cmp	r1, #1
    852e:	d102      	bne.n	8536 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xae>
    8530:	480a      	ldr	r0, [pc, #40]	; (855c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd4>)
    8532:	7800      	ldrb	r0, [r0, #0]
    8534:	b140      	cbz	r0, 8548 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc0>
    8536:	2004      	movs	r0, #4
    8538:	f884 01f0 	strb.w	r0, [r4, #496]	; 0x1f0
    853c:	f003 fd50 	bl	bfe0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8544:	f7fa bac0 	b.w	2ac8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8548:	2200      	movs	r2, #0
    854a:	2101      	movs	r1, #1
    854c:	4620      	mov	r0, r4
    854e:	f007 fb1e 	bl	fb8e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x86>
    8552:	f834 0f84 	ldrh.w	r0, [r4, #132]!
    8556:	1c40      	adds	r0, r0, #1
    8558:	8020      	strh	r0, [r4, #0]
    855a:	e7ef      	b.n	853c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb4>
    855c:	20000c18 	.word	0x20000c18
    8560:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8564:	4c43      	ldr	r4, [pc, #268]	; (8674 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ec>)
    8566:	b082      	sub	sp, #8
    8568:	e9d4 6504 	ldrd	r6, r5, [r4, #16]
    856c:	f003 fd32 	bl	bfd4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8570:	4681      	mov	r9, r0
    8572:	6a20      	ldr	r0, [r4, #32]
    8574:	2201      	movs	r2, #1
    8576:	f880 206e 	strb.w	r2, [r0, #110]	; 0x6e
    857a:	f880 206f 	strb.w	r2, [r0, #111]	; 0x6f
    857e:	3066      	adds	r0, #102	; 0x66
    8580:	21ff      	movs	r1, #255	; 0xff
    8582:	7281      	strb	r1, [r0, #10]
    8584:	6a20      	ldr	r0, [r4, #32]
    8586:	f04f 0800 	mov.w	r8, #0
    858a:	4641      	mov	r1, r8
    858c:	3030      	adds	r0, #48	; 0x30
    858e:	f006 ffdc 	bl	f54a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8592:	464f      	mov	r7, r9
    8594:	2101      	movs	r1, #1
    8596:	2000      	movs	r0, #0
    8598:	f000 fd90 	bl	90bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc34>
    859c:	19f2      	adds	r2, r6, r7
    859e:	eb45 0308 	adc.w	r3, r5, r8
    85a2:	1880      	adds	r0, r0, r2
    85a4:	eb48 0103 	adc.w	r1, r8, r3
    85a8:	2233      	movs	r2, #51	; 0x33
    85aa:	1a82      	subs	r2, r0, r2
    85ac:	f161 0000 	sbc.w	r0, r1, #0
    85b0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    85b4:	1857      	adds	r7, r2, r1
    85b6:	6a21      	ldr	r1, [r4, #32]
    85b8:	f140 0800 	adc.w	r8, r0, #0
    85bc:	468a      	mov	sl, r1
    85be:	f8d1 b010 	ldr.w	fp, [r1, #16]
    85c2:	f002 fc9d 	bl	af00 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    85c6:	f104 0138 	add.w	r1, r4, #56	; 0x38
    85ca:	4288      	cmp	r0, r1
    85cc:	d00d      	beq.n	85ea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x162>
    85ce:	e9cd 7800 	strd	r7, r8, [sp]
    85d2:	465a      	mov	r2, fp
    85d4:	f8da 11d4 	ldr.w	r1, [sl, #468]	; 0x1d4
    85d8:	f8da 01d0 	ldr.w	r0, [sl, #464]	; 0x1d0
    85dc:	f007 fbdd 	bl	fd9a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    85e0:	4558      	cmp	r0, fp
    85e2:	d903      	bls.n	85ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>
    85e4:	f240 51f9 	movw	r1, #1529	; 0x5f9
    85e8:	e022      	b.n	8630 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a8>
    85ea:	2000      	movs	r0, #0
    85ec:	4922      	ldr	r1, [pc, #136]	; (8678 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f0>)
    85ee:	4607      	mov	r7, r0
    85f0:	6849      	ldr	r1, [r1, #4]
    85f2:	4288      	cmp	r0, r1
    85f4:	d203      	bcs.n	85fe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x176>
    85f6:	6a21      	ldr	r1, [r4, #32]
    85f8:	6908      	ldr	r0, [r1, #16]
    85fa:	4407      	add	r7, r0
    85fc:	e009      	b.n	8612 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18a>
    85fe:	6a20      	ldr	r0, [r4, #32]
    8600:	6901      	ldr	r1, [r0, #16]
    8602:	4638      	mov	r0, r7
    8604:	f006 fc3d 	bl	ee82 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    8608:	6a21      	ldr	r1, [r4, #32]
    860a:	6909      	ldr	r1, [r1, #16]
    860c:	f006 fc35 	bl	ee7a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8610:	6a21      	ldr	r1, [r4, #32]
    8612:	6248      	str	r0, [r1, #36]	; 0x24
    8614:	6a20      	ldr	r0, [r4, #32]
    8616:	6901      	ldr	r1, [r0, #16]
    8618:	2005      	movs	r0, #5
    861a:	f006 fc38 	bl	ee8e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    861e:	6a21      	ldr	r1, [r4, #32]
    8620:	8408      	strh	r0, [r1, #32]
    8622:	6a21      	ldr	r1, [r4, #32]
    8624:	6a49      	ldr	r1, [r1, #36]	; 0x24
    8626:	1a79      	subs	r1, r7, r1
    8628:	4288      	cmp	r0, r1
    862a:	d804      	bhi.n	8636 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ae>
    862c:	f640 3124 	movw	r1, #2852	; 0xb24
    8630:	2035      	movs	r0, #53	; 0x35
    8632:	f7fb ffc1 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8636:	2101      	movs	r1, #1
    8638:	9802      	ldr	r0, [sp, #8]
    863a:	f000 fd3f 	bl	90bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc34>
    863e:	4448      	add	r0, r9
    8640:	4407      	add	r7, r0
    8642:	2101      	movs	r1, #1
    8644:	9802      	ldr	r0, [sp, #8]
    8646:	f006 fb41 	bl	eccc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    864a:	4407      	add	r7, r0
    864c:	2001      	movs	r0, #1
    864e:	f003 fdb1 	bl	c1b4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8652:	f64a 2113 	movw	r1, #43539	; 0xaa13
    8656:	4408      	add	r0, r1
    8658:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    865c:	fbb0 f0f1 	udiv	r0, r0, r1
    8660:	1a38      	subs	r0, r7, r0
    8662:	6a21      	ldr	r1, [r4, #32]
    8664:	1830      	adds	r0, r6, r0
    8666:	f145 0500 	adc.w	r5, r5, #0
    866a:	e9c1 0574 	strd	r0, r5, [r1, #464]	; 0x1d0
    866e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8672:	0000      	.short	0x0000
    8674:	20000c28 	.word	0x20000c28
    8678:	20000150 	.word	0x20000150
    867c:	b510      	push	{r4, lr}
    867e:	4c06      	ldr	r4, [pc, #24]	; (8698 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x210>)
    8680:	7b20      	ldrb	r0, [r4, #12]
    8682:	2800      	cmp	r0, #0
    8684:	d006      	beq.n	8694 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x20c>
    8686:	f003 fcab 	bl	bfe0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    868a:	f7fa fa1d 	bl	2ac8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    868e:	2000      	movs	r0, #0
    8690:	7320      	strb	r0, [r4, #12]
    8692:	7360      	strb	r0, [r4, #13]
    8694:	bd10      	pop	{r4, pc}
    8696:	0000      	.short	0x0000
    8698:	20000c28 	.word	0x20000c28
    869c:	b510      	push	{r4, lr}
    869e:	4c1c      	ldr	r4, [pc, #112]	; (8710 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x288>)
    86a0:	b086      	sub	sp, #24
    86a2:	7820      	ldrb	r0, [r4, #0]
    86a4:	2805      	cmp	r0, #5
    86a6:	d002      	beq.n	86ae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x226>
    86a8:	200c      	movs	r0, #12
    86aa:	b006      	add	sp, #24
    86ac:	bd10      	pop	{r4, pc}
    86ae:	6a21      	ldr	r1, [r4, #32]
    86b0:	b129      	cbz	r1, 86be <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x236>
    86b2:	f891 01f0 	ldrb.w	r0, [r1, #496]	; 0x1f0
    86b6:	b128      	cbz	r0, 86c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x23c>
    86b8:	f240 41fd 	movw	r1, #1277	; 0x4fd
    86bc:	e025      	b.n	870a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x282>
    86be:	f240 41fc 	movw	r1, #1276	; 0x4fc
    86c2:	e022      	b.n	870a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x282>
    86c4:	f891 01f1 	ldrb.w	r0, [r1, #497]	; 0x1f1
    86c8:	2820      	cmp	r0, #32
    86ca:	d002      	beq.n	86d2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x24a>
    86cc:	f240 41ff 	movw	r1, #1279	; 0x4ff
    86d0:	e01b      	b.n	870a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x282>
    86d2:	4810      	ldr	r0, [pc, #64]	; (8714 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x28c>)
    86d4:	f7fa f9d0 	bl	2a78 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    86d8:	6a21      	ldr	r1, [r4, #32]
    86da:	2820      	cmp	r0, #32
    86dc:	f881 01f1 	strb.w	r0, [r1, #497]	; 0x1f1
    86e0:	d00e      	beq.n	8700 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x278>
    86e2:	2300      	movs	r3, #0
    86e4:	2201      	movs	r2, #1
    86e6:	4668      	mov	r0, sp
    86e8:	f000 f968 	bl	89bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x534>
    86ec:	6a20      	ldr	r0, [r4, #32]
    86ee:	4669      	mov	r1, sp
    86f0:	f890 01f1 	ldrb.w	r0, [r0, #497]	; 0x1f1
    86f4:	f007 fa31 	bl	fb5a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x52>
    86f8:	b128      	cbz	r0, 8706 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x27e>
    86fa:	2000      	movs	r0, #0
    86fc:	6220      	str	r0, [r4, #32]
    86fe:	e7d4      	b.n	86aa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x222>
    8700:	f240 5103 	movw	r1, #1283	; 0x503
    8704:	e001      	b.n	870a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x282>
    8706:	f240 5106 	movw	r1, #1286	; 0x506
    870a:	2035      	movs	r0, #53	; 0x35
    870c:	f7fb ff54 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8710:	20000c28 	.word	0x20000c28
    8714:	000088e1 	.word	0x000088e1
    8718:	b5f0      	push	{r4, r5, r6, r7, lr}
    871a:	b087      	sub	sp, #28
    871c:	460d      	mov	r5, r1
    871e:	f7fe fb25 	bl	6d6c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8722:	2701      	movs	r7, #1
    8724:	4c40      	ldr	r4, [pc, #256]	; (8828 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3a0>)
    8726:	2d09      	cmp	r5, #9
    8728:	d27a      	bcs.n	8820 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x398>
    872a:	e8df f005 	tbb	[pc, r5]
    872e:	3b05      	.short	0x3b05
    8730:	794c5151 	.word	0x794c5151
    8734:	00746f66 	.word	0x00746f66
    8738:	7327      	strb	r7, [r4, #12]
    873a:	7861      	ldrb	r1, [r4, #1]
    873c:	2900      	cmp	r1, #0
    873e:	d12f      	bne.n	87a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x318>
    8740:	7800      	ldrb	r0, [r0, #0]
    8742:	f7f9 fa9b 	bl	1c7c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    8746:	4605      	mov	r5, r0
    8748:	460e      	mov	r6, r1
    874a:	e9c4 0104 	strd	r0, r1, [r4, #16]
    874e:	f000 fc7b 	bl	9048 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc0>
    8752:	b118      	cbz	r0, 875c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d4>
    8754:	2000      	movs	r0, #0
    8756:	f88d 0004 	strb.w	r0, [sp, #4]
    875a:	e001      	b.n	8760 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d8>
    875c:	f88d 7004 	strb.w	r7, [sp, #4]
    8760:	f000 fa90 	bl	8c84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7fc>
    8764:	4633      	mov	r3, r6
    8766:	462a      	mov	r2, r5
    8768:	f007 fa4c 	bl	fc04 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfc>
    876c:	6861      	ldr	r1, [r4, #4]
    876e:	fbb0 f2f1 	udiv	r2, r0, r1
    8772:	fb01 0012 	mls	r0, r1, r2, r0
    8776:	b150      	cbz	r0, 878e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x306>
    8778:	f05f 0000 	movs.w	r0, #0
    877c:	f88d 0005 	strb.w	r0, [sp, #5]
    8780:	4668      	mov	r0, sp
    8782:	f7fe fc45 	bl	7010 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    8786:	b120      	cbz	r0, 8792 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x30a>
    8788:	f44f 7141 	mov.w	r1, #772	; 0x304
    878c:	e045      	b.n	881a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x392>
    878e:	2001      	movs	r0, #1
    8790:	e7f4      	b.n	877c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2f4>
    8792:	4925      	ldr	r1, [pc, #148]	; (8828 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3a0>)
    8794:	6b20      	ldr	r0, [r4, #48]	; 0x30
    8796:	3910      	subs	r1, #16
    8798:	38e3      	subs	r0, #227	; 0xe3
    879a:	60c8      	str	r0, [r1, #12]
    879c:	f7fa fa64 	bl	2c68 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    87a0:	b007      	add	sp, #28
    87a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    87a4:	7860      	ldrb	r0, [r4, #1]
    87a6:	b130      	cbz	r0, 87b6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x32e>
    87a8:	f006 fff5 	bl	f796 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    87ac:	b007      	add	sp, #28
    87ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    87b2:	f7ff bf63 	b.w	867c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f4>
    87b6:	7367      	strb	r7, [r4, #13]
    87b8:	f7fe fcba 	bl	7130 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    87bc:	2800      	cmp	r0, #0
    87be:	d0ef      	beq.n	87a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x318>
    87c0:	f240 3117 	movw	r1, #791	; 0x317
    87c4:	e029      	b.n	881a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x392>
    87c6:	b007      	add	sp, #28
    87c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    87cc:	f003 bdd0 	b.w	c370 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    87d0:	7805      	ldrb	r5, [r0, #0]
    87d2:	2300      	movs	r3, #0
    87d4:	2201      	movs	r2, #1
    87d6:	4619      	mov	r1, r3
    87d8:	4668      	mov	r0, sp
    87da:	f000 fa95 	bl	8d08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x880>
    87de:	b140      	cbz	r0, 87f2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x36a>
    87e0:	4669      	mov	r1, sp
    87e2:	4628      	mov	r0, r5
    87e4:	f007 f9b9 	bl	fb5a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x52>
    87e8:	2800      	cmp	r0, #0
    87ea:	d1d9      	bne.n	87a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x318>
    87ec:	f640 21b5 	movw	r1, #2741	; 0xab5
    87f0:	e013      	b.n	881a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x392>
    87f2:	70a7      	strb	r7, [r4, #2]
    87f4:	f000 f81a 	bl	882c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3a4>
    87f8:	e7d2      	b.n	87a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x318>
    87fa:	f000 f9e7 	bl	8bcc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x744>
    87fe:	2800      	cmp	r0, #0
    8800:	d1ce      	bne.n	87a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x318>
    8802:	b007      	add	sp, #28
    8804:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8808:	f006 bfc3 	b.w	f792 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    880c:	b007      	add	sp, #28
    880e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8812:	f000 b80b 	b.w	882c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3a4>
    8816:	f240 3149 	movw	r1, #841	; 0x349
    881a:	2035      	movs	r0, #53	; 0x35
    881c:	f7fb fecc 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8820:	f240 314d 	movw	r1, #845	; 0x34d
    8824:	e7f9      	b.n	881a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x392>
    8826:	0000      	.short	0x0000
    8828:	20000c28 	.word	0x20000c28
    882c:	b510      	push	{r4, lr}
    882e:	4c0c      	ldr	r4, [pc, #48]	; (8860 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d8>)
    8830:	7820      	ldrb	r0, [r4, #0]
    8832:	b138      	cbz	r0, 8844 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3bc>
    8834:	f000 fbc0 	bl	8fb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb30>
    8838:	78a0      	ldrb	r0, [r4, #2]
    883a:	b160      	cbz	r0, 8856 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ce>
    883c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    8840:	b128      	cbz	r0, 884e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c6>
    8842:	e008      	b.n	8856 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ce>
    8844:	f240 21b7 	movw	r1, #695	; 0x2b7
    8848:	2035      	movs	r0, #53	; 0x35
    884a:	f7fb feb5 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    884e:	f7fe fc75 	bl	713c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    8852:	f7fe f85d 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    885a:	f000 bbd9 	b.w	9010 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb88>
    885e:	0000      	.short	0x0000
    8860:	20000c28 	.word	0x20000c28
    8864:	b510      	push	{r4, lr}
    8866:	4604      	mov	r4, r0
    8868:	4608      	mov	r0, r1
    886a:	f003 fca3 	bl	c1b4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    886e:	4906      	ldr	r1, [pc, #24]	; (8888 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x400>)
    8870:	f200 709d 	addw	r0, r0, #1949	; 0x79d
    8874:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
    8878:	4408      	add	r0, r1
    887a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    887e:	fbb0 f0f1 	udiv	r0, r0, r1
    8882:	f500 709d 	add.w	r0, r0, #314	; 0x13a
    8886:	bd10      	pop	{r4, pc}
    8888:	0000fc0a 	.word	0x0000fc0a
    888c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8890:	4d11      	ldr	r5, [pc, #68]	; (88d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x450>)
    8892:	4616      	mov	r6, r2
    8894:	460f      	mov	r7, r1
    8896:	2400      	movs	r4, #0
    8898:	6068      	str	r0, [r5, #4]
    889a:	f007 f9a6 	bl	fbea <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xe2>
    889e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 88dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x454>
    88a2:	2100      	movs	r1, #0
    88a4:	f81c 2001 	ldrb.w	r2, [ip, r1]
    88a8:	4232      	tst	r2, r6
    88aa:	d007      	beq.n	88bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x434>
    88ac:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    88b0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    88b4:	1a1b      	subs	r3, r3, r0
    88b6:	1c64      	adds	r4, r4, #1
    88b8:	b2e4      	uxtb	r4, r4
    88ba:	6093      	str	r3, [r2, #8]
    88bc:	1c49      	adds	r1, r1, #1
    88be:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    88c2:	d0ef      	beq.n	88a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x41c>
    88c4:	f016 0f0e 	tst.w	r6, #14
    88c8:	d004      	beq.n	88d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x44c>
    88ca:	f640 11ea 	movw	r1, #2538	; 0x9ea
    88ce:	2035      	movs	r0, #53	; 0x35
    88d0:	f7fb fe72 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88d8:	20000c28 	.word	0x20000c28
    88dc:	0000fc08 	.word	0x0000fc08
    88e0:	b570      	push	{r4, r5, r6, lr}
    88e2:	0004      	movs	r4, r0
    88e4:	d008      	beq.n	88f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x470>
    88e6:	2909      	cmp	r1, #9
    88e8:	d262      	bcs.n	89b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x528>
    88ea:	e8df f001 	tbb	[pc, r1]
    88ee:	3808      	.short	0x3808
    88f0:	613c4040 	.word	0x613c4040
    88f4:	005c4e47 	.word	0x005c4e47
    88f8:	f240 2163 	movw	r1, #611	; 0x263
    88fc:	e055      	b.n	89aa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x522>
    88fe:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
    8902:	b348      	cbz	r0, 8958 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4d0>
    8904:	4620      	mov	r0, r4
    8906:	f000 fcc5 	bl	9294 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    890a:	f007 f96e 	bl	fbea <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xe2>
    890e:	f200 103b 	addw	r0, r0, #315	; 0x13b
    8912:	b285      	uxth	r5, r0
    8914:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8918:	2128      	movs	r1, #40	; 0x28
    891a:	f007 f90a 	bl	fb32 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2a>
    891e:	182e      	adds	r6, r5, r0
    8920:	6921      	ldr	r1, [r4, #16]
    8922:	6b20      	ldr	r0, [r4, #48]	; 0x30
    8924:	4281      	cmp	r1, r0
    8926:	d300      	bcc.n	892a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4a2>
    8928:	4601      	mov	r1, r0
    892a:	4632      	mov	r2, r6
    892c:	4620      	mov	r0, r4
    892e:	f006 fd93 	bl	f458 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8932:	4d21      	ldr	r5, [pc, #132]	; (89b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x530>)
    8934:	4632      	mov	r2, r6
    8936:	6068      	str	r0, [r5, #4]
    8938:	4620      	mov	r0, r4
    893a:	6921      	ldr	r1, [r4, #16]
    893c:	f006 fd8c 	bl	f458 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8940:	60a8      	str	r0, [r5, #8]
    8942:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8946:	f006 fdea 	bl	f51e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    894a:	f5a0 7095 	sub.w	r0, r0, #298	; 0x12a
    894e:	60e8      	str	r0, [r5, #12]
    8950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8954:	f7fa b988 	b.w	2c68 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8958:	f240 216b 	movw	r1, #619	; 0x26b
    895c:	e025      	b.n	89aa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x522>
    895e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8962:	f007 b963 	b.w	fc2c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    8966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    896a:	f003 bd01 	b.w	c370 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    896e:	4620      	mov	r0, r4
    8970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8974:	2201      	movs	r2, #1
    8976:	2100      	movs	r1, #0
    8978:	f007 b909 	b.w	fb8e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x86>
    897c:	2001      	movs	r0, #1
    897e:	f7f9 f833 	bl	19e8 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    8982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8986:	f006 b843 	b.w	ea10 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    898a:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
    898e:	2804      	cmp	r0, #4
    8990:	d002      	beq.n	8998 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x510>
    8992:	f240 219f 	movw	r1, #671	; 0x29f
    8996:	e008      	b.n	89aa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x522>
    8998:	4620      	mov	r0, r4
    899a:	f007 f8e0 	bl	fb5e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x56>
    899e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    89a2:	f7fd bfb5 	b.w	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    89a6:	f240 21aa 	movw	r1, #682	; 0x2aa
    89aa:	2035      	movs	r0, #53	; 0x35
    89ac:	f7fb fe04 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89b0:	f240 21ae 	movw	r1, #686	; 0x2ae
    89b4:	e7f9      	b.n	89aa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x522>
    89b6:	0000      	.short	0x0000
    89b8:	20000c18 	.word	0x20000c18
    89bc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    89c0:	4606      	mov	r6, r0
    89c2:	f891 008d 	ldrb.w	r0, [r1, #141]	; 0x8d
    89c6:	2500      	movs	r5, #0
    89c8:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
    89cc:	469b      	mov	fp, r3
    89ce:	460c      	mov	r4, r1
    89d0:	280d      	cmp	r0, #13
    89d2:	d021      	beq.n	8a18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x590>
    89d4:	280c      	cmp	r0, #12
    89d6:	d01f      	beq.n	8a18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x590>
    89d8:	2824      	cmp	r0, #36	; 0x24
    89da:	d01d      	beq.n	8a18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x590>
    89dc:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
    89e0:	2824      	cmp	r0, #36	; 0x24
    89e2:	d019      	beq.n	8a18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x590>
    89e4:	f05f 0700 	movs.w	r7, #0
    89e8:	f007 f8e8 	bl	fbbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb4>
    89ec:	4682      	mov	sl, r0
    89ee:	f1bb 0f00 	cmp.w	fp, #0
    89f2:	d003      	beq.n	89fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x574>
    89f4:	2101      	movs	r1, #1
    89f6:	4620      	mov	r0, r4
    89f8:	f000 fcc6 	bl	9388 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    89fc:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
    8a00:	f04f 0801 	mov.w	r8, #1
    8a04:	b150      	cbz	r0, 8a1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x594>
    8a06:	2801      	cmp	r0, #1
    8a08:	d01b      	beq.n	8a42 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5ba>
    8a0a:	2802      	cmp	r0, #2
    8a0c:	d011      	beq.n	8a32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5aa>
    8a0e:	2803      	cmp	r0, #3
    8a10:	d017      	beq.n	8a42 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5ba>
    8a12:	f640 116d 	movw	r1, #2413	; 0x96d
    8a16:	e083      	b.n	8b20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x698>
    8a18:	2701      	movs	r7, #1
    8a1a:	e7e5      	b.n	89e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x560>
    8a1c:	9802      	ldr	r0, [sp, #8]
    8a1e:	b128      	cbz	r0, 8a2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a4>
    8a20:	f884 81f0 	strb.w	r8, [r4, #496]	; 0x1f0
    8a24:	4620      	mov	r0, r4
    8a26:	f007 f886 	bl	fb36 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    8a2a:	e00b      	b.n	8a44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5bc>
    8a2c:	f640 1133 	movw	r1, #2355	; 0x933
    8a30:	e076      	b.n	8b20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x698>
    8a32:	483d      	ldr	r0, [pc, #244]	; (8b28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>)
    8a34:	6801      	ldr	r1, [r0, #0]
    8a36:	2003      	movs	r0, #3
    8a38:	eb01 0509 	add.w	r5, r1, r9
    8a3c:	f884 01f0 	strb.w	r0, [r4, #496]	; 0x1f0
    8a40:	e000      	b.n	8a44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5bc>
    8a42:	6925      	ldr	r5, [r4, #16]
    8a44:	e9d4 1074 	ldrd	r1, r0, [r4, #464]	; 0x1d0
    8a48:	f04f 0900 	mov.w	r9, #0
    8a4c:	1949      	adds	r1, r1, r5
    8a4e:	eb40 0009 	adc.w	r0, r0, r9
    8a52:	e9c4 1074 	strd	r1, r0, [r4, #464]	; 0x1d0
    8a56:	e9c6 1004 	strd	r1, r0, [r6, #16]
    8a5a:	f886 9000 	strb.w	r9, [r6]
    8a5e:	f8a6 a008 	strh.w	sl, [r6, #8]
    8a62:	4620      	mov	r0, r4
    8a64:	f000 fb5c 	bl	9120 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    8a68:	1e79      	subs	r1, r7, #1
    8a6a:	4208      	tst	r0, r1
    8a6c:	d102      	bne.n	8a74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5ec>
    8a6e:	f886 900a 	strb.w	r9, [r6, #10]
    8a72:	e005      	b.n	8a80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5f8>
    8a74:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
    8a78:	2801      	cmp	r0, #1
    8a7a:	d016      	beq.n	8aaa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x622>
    8a7c:	2002      	movs	r0, #2
    8a7e:	72b0      	strb	r0, [r6, #10]
    8a80:	f886 800b 	strb.w	r8, [r6, #11]
    8a84:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8a88:	f006 fd49 	bl	f51e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8a8c:	6070      	str	r0, [r6, #4]
    8a8e:	f1bb 0f00 	cmp.w	fp, #0
    8a92:	d041      	beq.n	8b18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x690>
    8a94:	4629      	mov	r1, r5
    8a96:	4630      	mov	r0, r6
    8a98:	f006 f977 	bl	ed8a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8a9c:	fa1f f880 	uxth.w	r8, r0
    8aa0:	4620      	mov	r0, r4
    8aa2:	f000 fb3d 	bl	9120 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    8aa6:	b11f      	cbz	r7, 8ab0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x628>
    8aa8:	e018      	b.n	8adc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x654>
    8aaa:	f886 800a 	strb.w	r8, [r6, #10]
    8aae:	e7e7      	b.n	8a80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5f8>
    8ab0:	4540      	cmp	r0, r8
    8ab2:	d813      	bhi.n	8adc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x654>
    8ab4:	f886 900a 	strb.w	r9, [r6, #10]
    8ab8:	e9d4 3274 	ldrd	r3, r2, [r4, #464]	; 0x1d0
    8abc:	4607      	mov	r7, r0
    8abe:	fb05 f107 	mul.w	r1, r5, r7
    8ac2:	1859      	adds	r1, r3, r1
    8ac4:	eb42 0209 	adc.w	r2, r2, r9
    8ac8:	e9c6 1204 	strd	r1, r2, [r6, #16]
    8acc:	b335      	cbz	r5, 8b1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x694>
    8ace:	4629      	mov	r1, r5
    8ad0:	4630      	mov	r0, r6
    8ad2:	f006 f95a 	bl	ed8a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8ad6:	4438      	add	r0, r7
    8ad8:	fa1f f880 	uxth.w	r8, r0
    8adc:	4641      	mov	r1, r8
    8ade:	4620      	mov	r0, r4
    8ae0:	f000 fc52 	bl	9388 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8ae4:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    8ae8:	e9c4 0174 	strd	r0, r1, [r4, #464]	; 0x1d0
    8aec:	6f60      	ldr	r0, [r4, #116]	; 0x74
    8aee:	2800      	cmp	r0, #0
    8af0:	d012      	beq.n	8b18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x690>
    8af2:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
    8af6:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
    8afa:	1a80      	subs	r0, r0, r2
    8afc:	b201      	sxth	r1, r0
    8afe:	2900      	cmp	r1, #0
    8b00:	dd0a      	ble.n	8b18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x690>
    8b02:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
    8b06:	4401      	add	r1, r0
    8b08:	1e49      	subs	r1, r1, #1
    8b0a:	fb91 f1f0 	sdiv	r1, r1, r0
    8b0e:	b289      	uxth	r1, r1
    8b10:	fb01 2000 	mla	r0, r1, r0, r2
    8b14:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    8b18:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    8b1c:	f640 11a9 	movw	r1, #2473	; 0x9a9
    8b20:	2035      	movs	r0, #53	; 0x35
    8b22:	f7fb fd49 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b26:	0000      	.short	0x0000
    8b28:	20000150 	.word	0x20000150
    8b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b30:	b086      	sub	sp, #24
    8b32:	4692      	mov	sl, r2
    8b34:	4607      	mov	r7, r0
    8b36:	4689      	mov	r9, r1
    8b38:	f000 fa92 	bl	9060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbd8>
    8b3c:	4d22      	ldr	r5, [pc, #136]	; (8bc8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x740>)
    8b3e:	f04f 0800 	mov.w	r8, #0
    8b42:	686a      	ldr	r2, [r5, #4]
    8b44:	1886      	adds	r6, r0, r2
    8b46:	eb41 0108 	adc.w	r1, r1, r8
    8b4a:	460c      	mov	r4, r1
    8b4c:	460b      	mov	r3, r1
    8b4e:	4632      	mov	r2, r6
    8b50:	4638      	mov	r0, r7
    8b52:	4649      	mov	r1, r9
    8b54:	f007 f856 	bl	fc04 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfc>
    8b58:	4607      	mov	r7, r0
    8b5a:	f007 f84c 	bl	fbf6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xee>
    8b5e:	4287      	cmp	r7, r0
    8b60:	da13      	bge.n	8b8a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x702>
    8b62:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    8b66:	f000 fa7b 	bl	9060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbd8>
    8b6a:	4632      	mov	r2, r6
    8b6c:	4623      	mov	r3, r4
    8b6e:	f007 f849 	bl	fc04 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfc>
    8b72:	6869      	ldr	r1, [r5, #4]
    8b74:	fbb0 f1f1 	udiv	r1, r0, r1
    8b78:	f8ca 1000 	str.w	r1, [sl]
    8b7c:	6868      	ldr	r0, [r5, #4]
    8b7e:	1980      	adds	r0, r0, r6
    8b80:	eb48 0104 	adc.w	r1, r8, r4
    8b84:	b006      	add	sp, #24
    8b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b8a:	f88d 8000 	strb.w	r8, [sp]
    8b8e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    8b90:	9001      	str	r0, [sp, #4]
    8b92:	f007 f813 	bl	fbbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb4>
    8b96:	f8ad 0008 	strh.w	r0, [sp, #8]
    8b9a:	2001      	movs	r0, #1
    8b9c:	f88d 000b 	strb.w	r0, [sp, #11]
    8ba0:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    8ba4:	f000 fa5c 	bl	9060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbd8>
    8ba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    8bac:	f000 f9ea 	bl	8f84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xafc>
    8bb0:	f88d 000a 	strb.w	r0, [sp, #10]
    8bb4:	4668      	mov	r0, sp
    8bb6:	6869      	ldr	r1, [r5, #4]
    8bb8:	f006 f8e7 	bl	ed8a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8bbc:	f8ca 0000 	str.w	r0, [sl]
    8bc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    8bc4:	e7de      	b.n	8b84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6fc>
    8bc6:	0000      	.short	0x0000
    8bc8:	20000c28 	.word	0x20000c28
    8bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bd0:	f7fa f922 	bl	2e18 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8bd4:	4c20      	ldr	r4, [pc, #128]	; (8c58 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d0>)
    8bd6:	4606      	mov	r6, r0
    8bd8:	460d      	mov	r5, r1
    8bda:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    8bde:	f000 f9d1 	bl	8f84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xafc>
    8be2:	4607      	mov	r7, r0
    8be4:	f7f8 ffee 	bl	1bc4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    8be8:	4602      	mov	r2, r0
    8bea:	2865      	cmp	r0, #101	; 0x65
    8bec:	d323      	bcc.n	8c36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ae>
    8bee:	1c50      	adds	r0, r2, #1
    8bf0:	d024      	beq.n	8c3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7b4>
    8bf2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8bf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8bf6:	1888      	adds	r0, r1, r2
    8bf8:	4283      	cmp	r3, r0
    8bfa:	d800      	bhi.n	8bfe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x776>
    8bfc:	1a5a      	subs	r2, r3, r1
    8bfe:	f06f 0039 	mvn.w	r0, #57	; 0x39
    8c02:	1830      	adds	r0, r6, r0
    8c04:	f145 31ff 	adc.w	r1, r5, #4294967295
    8c08:	f000 fa40 	bl	908c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc04>
    8c0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8c0e:	4408      	add	r0, r1
    8c10:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8c12:	1a45      	subs	r5, r0, r1
    8c14:	f241 3088 	movw	r0, #5000	; 0x1388
    8c18:	4285      	cmp	r5, r0
    8c1a:	d900      	bls.n	8c1e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x796>
    8c1c:	4605      	mov	r5, r0
    8c1e:	f7fa f8fb 	bl	2e18 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8c22:	1b80      	subs	r0, r0, r6
    8c24:	f100 009d 	add.w	r0, r0, #157	; 0x9d
    8c28:	4285      	cmp	r5, r0
    8c2a:	d304      	bcc.n	8c36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ae>
    8c2c:	4639      	mov	r1, r7
    8c2e:	4628      	mov	r0, r5
    8c30:	f7f8 feea 	bl	1a08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    8c34:	b120      	cbz	r0, 8c40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7b8>
    8c36:	2000      	movs	r0, #0
    8c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    8c3e:	e7e7      	b.n	8c10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x788>
    8c40:	6b20      	ldr	r0, [r4, #48]	; 0x30
    8c42:	4905      	ldr	r1, [pc, #20]	; (8c58 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d0>)
    8c44:	4428      	add	r0, r5
    8c46:	3910      	subs	r1, #16
    8c48:	6320      	str	r0, [r4, #48]	; 0x30
    8c4a:	68c8      	ldr	r0, [r1, #12]
    8c4c:	4428      	add	r0, r5
    8c4e:	60c8      	str	r0, [r1, #12]
    8c50:	f7fa f80a 	bl	2c68 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8c54:	2001      	movs	r0, #1
    8c56:	e7ef      	b.n	8c38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7b0>
    8c58:	20000c28 	.word	0x20000c28
    8c5c:	b510      	push	{r4, lr}
    8c5e:	2400      	movs	r4, #0
    8c60:	f006 ffc3 	bl	fbea <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xe2>
    8c64:	4a06      	ldr	r2, [pc, #24]	; (8c80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f8>)
    8c66:	2100      	movs	r1, #0
    8c68:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    8c6c:	4404      	add	r4, r0
    8c6e:	689b      	ldr	r3, [r3, #8]
    8c70:	1c49      	adds	r1, r1, #1
    8c72:	441c      	add	r4, r3
    8c74:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8c78:	d0f6      	beq.n	8c68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7e0>
    8c7a:	4620      	mov	r0, r4
    8c7c:	bd10      	pop	{r4, pc}
    8c7e:	0000      	.short	0x0000
    8c80:	20000c28 	.word	0x20000c28
    8c84:	4901      	ldr	r1, [pc, #4]	; (8c8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x804>)
    8c86:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    8c8a:	4770      	bx	lr
    8c8c:	20000c28 	.word	0x20000c28
    8c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c94:	4606      	mov	r6, r0
    8c96:	481b      	ldr	r0, [pc, #108]	; (8d04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x87c>)
    8c98:	4688      	mov	r8, r1
    8c9a:	4615      	mov	r5, r2
    8c9c:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    8ca0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    8ca4:	2701      	movs	r7, #1
    8ca6:	4050      	eors	r0, r2
    8ca8:	b086      	sub	sp, #24
    8caa:	ea70 0101 	orns	r1, r0, r1
    8cae:	d023      	beq.n	8cf8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x870>
    8cb0:	2400      	movs	r4, #0
    8cb2:	f88d 4000 	strb.w	r4, [sp]
    8cb6:	9501      	str	r5, [sp, #4]
    8cb8:	f006 ff80 	bl	fbbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb4>
    8cbc:	f8ad 0008 	strh.w	r0, [sp, #8]
    8cc0:	f88d 700b 	strb.w	r7, [sp, #11]
    8cc4:	f006 ff97 	bl	fbf6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xee>
    8cc8:	1982      	adds	r2, r0, r6
    8cca:	eb44 0008 	adc.w	r0, r4, r8
    8cce:	e9cd 2004 	strd	r2, r0, [sp, #16]
    8cd2:	2002      	movs	r0, #2
    8cd4:	f88d 000a 	strb.w	r0, [sp, #10]
    8cd8:	4668      	mov	r0, sp
    8cda:	f7f9 fab7 	bl	224c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    8cde:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
    8ce2:	1953      	adds	r3, r2, r5
    8ce4:	4a07      	ldr	r2, [pc, #28]	; (8d04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x87c>)
    8ce6:	4161      	adcs	r1, r4
    8ce8:	e9d2 420a 	ldrd	r4, r2, [r2, #40]	; 0x28
    8cec:	1ae3      	subs	r3, r4, r3
    8cee:	eb62 0201 	sbc.w	r2, r2, r1
    8cf2:	b128      	cbz	r0, 8d00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x878>
    8cf4:	2a00      	cmp	r2, #0
    8cf6:	db03      	blt.n	8d00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x878>
    8cf8:	2001      	movs	r0, #1
    8cfa:	b006      	add	sp, #24
    8cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d00:	2000      	movs	r0, #0
    8d02:	e7fa      	b.n	8cfa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x872>
    8d04:	20000c28 	.word	0x20000c28
    8d08:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d0c:	b087      	sub	sp, #28
    8d0e:	4614      	mov	r4, r2
    8d10:	4606      	mov	r6, r0
    8d12:	f7fa f881 	bl	2e18 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8d16:	4d99      	ldr	r5, [pc, #612]	; (8f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>)
    8d18:	4680      	mov	r8, r0
    8d1a:	4689      	mov	r9, r1
    8d1c:	68a8      	ldr	r0, [r5, #8]
    8d1e:	f04f 0a00 	mov.w	sl, #0
    8d22:	9002      	str	r0, [sp, #8]
    8d24:	f7ff ff9a 	bl	8c5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d4>
    8d28:	6869      	ldr	r1, [r5, #4]
    8d2a:	4288      	cmp	r0, r1
    8d2c:	d101      	bne.n	8d32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8aa>
    8d2e:	2001      	movs	r0, #1
    8d30:	e000      	b.n	8d34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8ac>
    8d32:	2000      	movs	r0, #0
    8d34:	9004      	str	r0, [sp, #16]
    8d36:	4020      	ands	r0, r4
    8d38:	9003      	str	r0, [sp, #12]
    8d3a:	9808      	ldr	r0, [sp, #32]
    8d3c:	2800      	cmp	r0, #0
    8d3e:	d07f      	beq.n	8e40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b8>
    8d40:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    8d44:	eb18 0b02 	adds.w	fp, r8, r2
    8d48:	f149 0400 	adc.w	r4, r9, #0
    8d4c:	f002 f8de 	bl	af0c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    8d50:	9000      	str	r0, [sp, #0]
    8d52:	488a      	ldr	r0, [pc, #552]	; (8f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>)
    8d54:	7800      	ldrb	r0, [r0, #0]
    8d56:	4f89      	ldr	r7, [pc, #548]	; (8f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>)
    8d58:	3738      	adds	r7, #56	; 0x38
    8d5a:	2805      	cmp	r0, #5
    8d5c:	d135      	bne.n	8dca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x942>
    8d5e:	4887      	ldr	r0, [pc, #540]	; (8f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>)
    8d60:	6a00      	ldr	r0, [r0, #32]
    8d62:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
    8d66:	f002 f8b1 	bl	aecc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    8d6a:	9900      	ldr	r1, [sp, #0]
    8d6c:	4605      	mov	r5, r0
    8d6e:	4288      	cmp	r0, r1
    8d70:	d009      	beq.n	8d86 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8fe>
    8d72:	4882      	ldr	r0, [pc, #520]	; (8f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>)
    8d74:	4629      	mov	r1, r5
    8d76:	6a00      	ldr	r0, [r0, #32]
    8d78:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
    8d7c:	f002 f86a 	bl	ae54 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    8d80:	2000      	movs	r0, #0
    8d82:	61b8      	str	r0, [r7, #24]
    8d84:	e00c      	b.n	8da0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x918>
    8d86:	497d      	ldr	r1, [pc, #500]	; (8f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>)
    8d88:	6a08      	ldr	r0, [r1, #32]
    8d8a:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
    8d8e:	61b8      	str	r0, [r7, #24]
    8d90:	6a08      	ldr	r0, [r1, #32]
    8d92:	6c0a      	ldr	r2, [r1, #64]	; 0x40
    8d94:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
    8d98:	4282      	cmp	r2, r0
    8d9a:	d300      	bcc.n	8d9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x916>
    8d9c:	4610      	mov	r0, r2
    8d9e:	6408      	str	r0, [r1, #64]	; 0x40
    8da0:	4876      	ldr	r0, [pc, #472]	; (8f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>)
    8da2:	6a00      	ldr	r0, [r0, #32]
    8da4:	b158      	cbz	r0, 8dbe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x936>
    8da6:	b16d      	cbz	r5, 8dc4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x93c>
    8da8:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    8dac:	f8d5 c000 	ldr.w	ip, [r5]
    8db0:	eb1c 0303 	adds.w	r3, ip, r3
    8db4:	eb41 010a 	adc.w	r1, r1, sl
    8db8:	e9c0 3174 	strd	r3, r1, [r0, #464]	; 0x1d0
    8dbc:	e005      	b.n	8dca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x942>
    8dbe:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    8dc2:	e01a      	b.n	8dfa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x972>
    8dc4:	2100      	movs	r1, #0
    8dc6:	e9c0 1174 	strd	r1, r1, [r0, #464]	; 0x1d0
    8dca:	4638      	mov	r0, r7
    8dcc:	9900      	ldr	r1, [sp, #0]
    8dce:	f002 f841 	bl	ae54 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    8dd2:	486a      	ldr	r0, [pc, #424]	; (8f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>)
    8dd4:	9a00      	ldr	r2, [sp, #0]
    8dd6:	6845      	ldr	r5, [r0, #4]
    8dd8:	b192      	cbz	r2, 8e00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x978>
    8dda:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    8dde:	6817      	ldr	r7, [r2, #0]
    8de0:	e9cd b400 	strd	fp, r4, [sp]
    8de4:	18f8      	adds	r0, r7, r3
    8de6:	eb41 010a 	adc.w	r1, r1, sl
    8dea:	462a      	mov	r2, r5
    8dec:	f006 ffd5 	bl	fd9a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    8df0:	4601      	mov	r1, r0
    8df2:	42a8      	cmp	r0, r5
    8df4:	d905      	bls.n	8e02 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x97a>
    8df6:	f240 51e6 	movw	r1, #1510	; 0x5e6
    8dfa:	2035      	movs	r0, #53	; 0x35
    8dfc:	f7fb fbdc 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e00:	2100      	movs	r1, #0
    8e02:	eb1b 0501 	adds.w	r5, fp, r1
    8e06:	495d      	ldr	r1, [pc, #372]	; (8f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>)
    8e08:	4650      	mov	r0, sl
    8e0a:	4144      	adcs	r4, r0
    8e0c:	684a      	ldr	r2, [r1, #4]
    8e0e:	1aab      	subs	r3, r5, r2
    8e10:	eb64 020a 	sbc.w	r2, r4, sl
    8e14:	e9c1 320e 	strd	r3, r2, [r1, #56]	; 0x38
    8e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8e1a:	3128      	adds	r1, #40	; 0x28
    8e1c:	b152      	cbz	r2, 8e34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9ac>
    8e1e:	f242 7310 	movw	r3, #10000	; 0x2710
    8e22:	435a      	muls	r2, r3
    8e24:	18aa      	adds	r2, r5, r2
    8e26:	eb44 000a 	adc.w	r0, r4, sl
    8e2a:	e9c1 2000 	strd	r2, r0, [r1]
    8e2e:	2001      	movs	r0, #1
    8e30:	e051      	b.n	8ed6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa4e>
    8e32:	e005      	b.n	8e40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b8>
    8e34:	f04f 30ff 	mov.w	r0, #4294967295
    8e38:	0842      	lsrs	r2, r0, #1
    8e3a:	e9c1 0200 	strd	r0, r2, [r1]
    8e3e:	e7f6      	b.n	8e2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9a6>
    8e40:	9803      	ldr	r0, [sp, #12]
    8e42:	b1d8      	cbz	r0, 8e7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9f4>
    8e44:	2001      	movs	r0, #1
    8e46:	f006 fe62 	bl	fb0e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    8e4a:	4604      	mov	r4, r0
    8e4c:	2001      	movs	r0, #1
    8e4e:	f003 f9b1 	bl	c1b4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8e52:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8e56:	4401      	add	r1, r0
    8e58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8e5c:	fbb1 f0f0 	udiv	r0, r1, r0
    8e60:	1822      	adds	r2, r4, r0
    8e62:	4640      	mov	r0, r8
    8e64:	4649      	mov	r1, r9
    8e66:	32f4      	adds	r2, #244	; 0xf4
    8e68:	f7ff ff12 	bl	8c90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x808>
    8e6c:	b908      	cbnz	r0, 8e72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9ea>
    8e6e:	2000      	movs	r0, #0
    8e70:	9002      	str	r0, [sp, #8]
    8e72:	4645      	mov	r5, r8
    8e74:	464c      	mov	r4, r9
    8e76:	f8cd a014 	str.w	sl, [sp, #20]
    8e7a:	e02d      	b.n	8ed8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa50>
    8e7c:	b13c      	cbz	r4, 8e8e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa06>
    8e7e:	aa05      	add	r2, sp, #20
    8e80:	4640      	mov	r0, r8
    8e82:	4649      	mov	r1, r9
    8e84:	f7ff fe52 	bl	8b2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a4>
    8e88:	4605      	mov	r5, r0
    8e8a:	460c      	mov	r4, r1
    8e8c:	e024      	b.n	8ed8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa50>
    8e8e:	4640      	mov	r0, r8
    8e90:	4649      	mov	r1, r9
    8e92:	f000 f8e5 	bl	9060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbd8>
    8e96:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>
    8e9a:	4602      	mov	r2, r0
    8e9c:	4608      	mov	r0, r1
    8e9e:	f8db 1008 	ldr.w	r1, [fp, #8]
    8ea2:	9102      	str	r1, [sp, #8]
    8ea4:	f8db 3004 	ldr.w	r3, [fp, #4]
    8ea8:	4657      	mov	r7, sl
    8eaa:	189d      	adds	r5, r3, r2
    8eac:	eb4a 0400 	adc.w	r4, sl, r0
    8eb0:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    8eb4:	f000 f8c8 	bl	9048 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc0>
    8eb8:	f8db 1004 	ldr.w	r1, [fp, #4]
    8ebc:	4348      	muls	r0, r1
    8ebe:	9000      	str	r0, [sp, #0]
    8ec0:	f7ff fee0 	bl	8c84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7fc>
    8ec4:	9a00      	ldr	r2, [sp, #0]
    8ec6:	1880      	adds	r0, r0, r2
    8ec8:	4179      	adcs	r1, r7
    8eca:	e9cb 010e 	strd	r0, r1, [fp, #56]	; 0x38
    8ece:	4621      	mov	r1, r4
    8ed0:	4628      	mov	r0, r5
    8ed2:	f000 f8b9 	bl	9048 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc0>
    8ed6:	9005      	str	r0, [sp, #20]
    8ed8:	2001      	movs	r0, #1
    8eda:	f006 fe18 	bl	fb0e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    8ede:	4607      	mov	r7, r0
    8ee0:	2001      	movs	r0, #1
    8ee2:	f003 f967 	bl	c1b4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8ee6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8eea:	4401      	add	r1, r0
    8eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8ef0:	fbb1 f0f0 	udiv	r0, r1, r0
    8ef4:	4407      	add	r7, r0
    8ef6:	4628      	mov	r0, r5
    8ef8:	4621      	mov	r1, r4
    8efa:	37f4      	adds	r7, #244	; 0xf4
    8efc:	9a02      	ldr	r2, [sp, #8]
    8efe:	f000 f8c5 	bl	908c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc04>
    8f02:	491e      	ldr	r1, [pc, #120]	; (8f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf4>)
    8f04:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    8f08:	6892      	ldr	r2, [r2, #8]
    8f0a:	4282      	cmp	r2, r0
    8f0c:	d800      	bhi.n	8f10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa88>
    8f0e:	4610      	mov	r0, r2
    8f10:	6348      	str	r0, [r1, #52]	; 0x34
    8f12:	9a08      	ldr	r2, [sp, #32]
    8f14:	b10a      	cbz	r2, 8f1a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa92>
    8f16:	e9c1 5404 	strd	r5, r4, [r1, #16]
    8f1a:	e9c1 5406 	strd	r5, r4, [r1, #24]
    8f1e:	468b      	mov	fp, r1
    8f20:	9904      	ldr	r1, [sp, #16]
    8f22:	b111      	cbz	r1, 8f2a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa2>
    8f24:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    8f28:	e001      	b.n	8f2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa6>
    8f2a:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    8f2e:	2001      	movs	r0, #1
    8f30:	72f0      	strb	r0, [r6, #11]
    8f32:	f006 fe43 	bl	fbbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb4>
    8f36:	8130      	strh	r0, [r6, #8]
    8f38:	4628      	mov	r0, r5
    8f3a:	4621      	mov	r1, r4
    8f3c:	f000 f822 	bl	8f84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xafc>
    8f40:	72b0      	strb	r0, [r6, #10]
    8f42:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    8f46:	6070      	str	r0, [r6, #4]
    8f48:	9803      	ldr	r0, [sp, #12]
    8f4a:	b148      	cbz	r0, 8f60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xad8>
    8f4c:	2001      	movs	r0, #1
    8f4e:	7030      	strb	r0, [r6, #0]
    8f50:	4a0b      	ldr	r2, [pc, #44]	; (8f80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf8>)
    8f52:	4640      	mov	r0, r8
    8f54:	4649      	mov	r1, r9
    8f56:	f000 f899 	bl	908c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc04>
    8f5a:	1bc0      	subs	r0, r0, r7
    8f5c:	6130      	str	r0, [r6, #16]
    8f5e:	e003      	b.n	8f68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xae0>
    8f60:	f886 a000 	strb.w	sl, [r6]
    8f64:	e9c6 5404 	strd	r5, r4, [r6, #16]
    8f68:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    8f6c:	42b8      	cmp	r0, r7
    8f6e:	d303      	bcc.n	8f78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaf0>
    8f70:	2001      	movs	r0, #1
    8f72:	b00b      	add	sp, #44	; 0x2c
    8f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f78:	2000      	movs	r0, #0
    8f7a:	e7fa      	b.n	8f72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaea>
    8f7c:	20000c28 	.word	0x20000c28
    8f80:	0f424000 	.word	0x0f424000
    8f84:	b570      	push	{r4, r5, r6, lr}
    8f86:	4604      	mov	r4, r0
    8f88:	480a      	ldr	r0, [pc, #40]	; (8fb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb2c>)
    8f8a:	460d      	mov	r5, r1
    8f8c:	7801      	ldrb	r1, [r0, #0]
    8f8e:	2904      	cmp	r1, #4
    8f90:	d10d      	bne.n	8fae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb26>
    8f92:	6840      	ldr	r0, [r0, #4]
    8f94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8f98:	0046      	lsls	r6, r0, #1
    8f9a:	f7ff fe73 	bl	8c84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7fc>
    8f9e:	4622      	mov	r2, r4
    8fa0:	462b      	mov	r3, r5
    8fa2:	f006 fe2f 	bl	fc04 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfc>
    8fa6:	42b0      	cmp	r0, r6
    8fa8:	d201      	bcs.n	8fae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb26>
    8faa:	2002      	movs	r0, #2
    8fac:	bd70      	pop	{r4, r5, r6, pc}
    8fae:	2001      	movs	r0, #1
    8fb0:	bd70      	pop	{r4, r5, r6, pc}
    8fb2:	0000      	.short	0x0000
    8fb4:	20000c28 	.word	0x20000c28
    8fb8:	b570      	push	{r4, r5, r6, lr}
    8fba:	4d14      	ldr	r5, [pc, #80]	; (900c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb84>)
    8fbc:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    8fc0:	f105 0438 	add.w	r4, r5, #56	; 0x38
    8fc4:	2800      	cmp	r0, #0
    8fc6:	7828      	ldrb	r0, [r5, #0]
    8fc8:	d00f      	beq.n	8fea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb62>
    8fca:	2805      	cmp	r0, #5
    8fcc:	d004      	beq.n	8fd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb50>
    8fce:	f240 3192 	movw	r1, #914	; 0x392
    8fd2:	2035      	movs	r0, #53	; 0x35
    8fd4:	f7fb faf0 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fd8:	4620      	mov	r0, r4
    8fda:	f006 fd90 	bl	fafe <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8fde:	b178      	cbz	r0, 9000 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb78>
    8fe0:	4620      	mov	r0, r4
    8fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8fe6:	f001 bf13 	b.w	ae10 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    8fea:	2805      	cmp	r0, #5
    8fec:	d108      	bne.n	9000 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb78>
    8fee:	4620      	mov	r0, r4
    8ff0:	f006 fd85 	bl	fafe <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8ff4:	b920      	cbnz	r0, 9000 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb78>
    8ff6:	6a28      	ldr	r0, [r5, #32]
    8ff8:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
    8ffc:	f001 ff4a 	bl	ae94 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    9000:	4620      	mov	r0, r4
    9002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9006:	f001 bf45 	b.w	ae94 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    900a:	0000      	.short	0x0000
    900c:	20000c28 	.word	0x20000c28
    9010:	b510      	push	{r4, lr}
    9012:	f7fd ff49 	bl	6ea8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    9016:	490b      	ldr	r1, [pc, #44]	; (9044 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbbc>)
    9018:	2000      	movs	r0, #0
    901a:	7088      	strb	r0, [r1, #2]
    901c:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    9020:	6208      	str	r0, [r1, #32]
    9022:	7008      	strb	r0, [r1, #0]
    9024:	f7fd fea2 	bl	6d6c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    9028:	4604      	mov	r4, r0
    902a:	7800      	ldrb	r0, [r0, #0]
    902c:	f7f9 fbea 	bl	2804 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9030:	b110      	cbz	r0, 9038 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbb0>
    9032:	2020      	movs	r0, #32
    9034:	7020      	strb	r0, [r4, #0]
    9036:	bd10      	pop	{r4, pc}
    9038:	f240 512b 	movw	r1, #1323	; 0x52b
    903c:	2035      	movs	r0, #53	; 0x35
    903e:	f7fb fabb 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9042:	0000      	.short	0x0000
    9044:	20000c28 	.word	0x20000c28
    9048:	b510      	push	{r4, lr}
    904a:	4604      	mov	r4, r0
    904c:	f7ff fe1a 	bl	8c84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7fc>
    9050:	4902      	ldr	r1, [pc, #8]	; (905c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbd4>)
    9052:	1a20      	subs	r0, r4, r0
    9054:	6849      	ldr	r1, [r1, #4]
    9056:	fbb0 f0f1 	udiv	r0, r0, r1
    905a:	bd10      	pop	{r4, pc}
    905c:	20000c28 	.word	0x20000c28
    9060:	b570      	push	{r4, r5, r6, lr}
    9062:	4604      	mov	r4, r0
    9064:	460d      	mov	r5, r1
    9066:	f7ff fe0d 	bl	8c84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7fc>
    906a:	4622      	mov	r2, r4
    906c:	462b      	mov	r3, r5
    906e:	f006 fdc9 	bl	fc04 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfc>
    9072:	4905      	ldr	r1, [pc, #20]	; (9088 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc00>)
    9074:	684c      	ldr	r4, [r1, #4]
    9076:	fbb0 f0f4 	udiv	r0, r0, r4
    907a:	4344      	muls	r4, r0
    907c:	f7ff fe02 	bl	8c84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7fc>
    9080:	1900      	adds	r0, r0, r4
    9082:	f141 0100 	adc.w	r1, r1, #0
    9086:	bd70      	pop	{r4, r5, r6, pc}
    9088:	20000c28 	.word	0x20000c28
    908c:	4b0a      	ldr	r3, [pc, #40]	; (90b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc30>)
    908e:	b510      	push	{r4, lr}
    9090:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    9094:	1a20      	subs	r0, r4, r0
    9096:	eb63 0301 	sbc.w	r3, r3, r1
    909a:	2400      	movs	r4, #0
    909c:	4621      	mov	r1, r4
    909e:	1a24      	subs	r4, r4, r0
    90a0:	4199      	sbcs	r1, r3
    90a2:	da06      	bge.n	90b2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc2a>
    90a4:	2100      	movs	r1, #0
    90a6:	1a14      	subs	r4, r2, r0
    90a8:	eb71 0403 	sbcs.w	r4, r1, r3
    90ac:	da00      	bge.n	90b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc28>
    90ae:	4610      	mov	r0, r2
    90b0:	bd10      	pop	{r4, pc}
    90b2:	2000      	movs	r0, #0
    90b4:	bd10      	pop	{r4, pc}
    90b6:	0000      	.short	0x0000
    90b8:	20000c28 	.word	0x20000c28
    90bc:	b1a0      	cbz	r0, 90e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc60>
    90be:	f44f 70a8 	mov.w	r0, #336	; 0x150
    90c2:	2908      	cmp	r1, #8
    90c4:	d004      	beq.n	90d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc48>
    90c6:	2904      	cmp	r1, #4
    90c8:	d002      	beq.n	90d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc48>
    90ca:	2902      	cmp	r1, #2
    90cc:	d009      	beq.n	90e2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc5a>
    90ce:	2028      	movs	r0, #40	; 0x28
    90d0:	f05f 0108 	movs.w	r1, #8
    90d4:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    90d8:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    90dc:	4408      	add	r0, r1
    90de:	3098      	adds	r0, #152	; 0x98
    90e0:	4770      	bx	lr
    90e2:	2018      	movs	r0, #24
    90e4:	2104      	movs	r1, #4
    90e6:	e7f5      	b.n	90d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc4c>
    90e8:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    90ec:	4770      	bx	lr
	...

000090f0 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    90f0:	4806      	ldr	r0, [pc, #24]	; (910c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    90f2:	4905      	ldr	r1, [pc, #20]	; (9108 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    90f4:	6501      	str	r1, [r0, #80]	; 0x50
    90f6:	4906      	ldr	r1, [pc, #24]	; (9110 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    90f8:	6541      	str	r1, [r0, #84]	; 0x54
    90fa:	4807      	ldr	r0, [pc, #28]	; (9118 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    90fc:	4905      	ldr	r1, [pc, #20]	; (9114 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    90fe:	6501      	str	r1, [r0, #80]	; 0x50
    9100:	4906      	ldr	r1, [pc, #24]	; (911c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    9102:	6541      	str	r1, [r0, #84]	; 0x54
    9104:	4770      	bx	lr
    9106:	0000      	.short	0x0000
    9108:	0000a1e9 	.word	0x0000a1e9
    910c:	2000016c 	.word	0x2000016c
    9110:	0000a2bd 	.word	0x0000a2bd
    9114:	0000a941 	.word	0x0000a941
    9118:	20000204 	.word	0x20000204
    911c:	0000a971 	.word	0x0000a971

00009120 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    9120:	b570      	push	{r4, r5, r6, lr}
    9122:	4605      	mov	r5, r0
    9124:	f8b0 00be 	ldrh.w	r0, [r0, #190]	; 0xbe
    9128:	f895 1092 	ldrb.w	r1, [r5, #146]	; 0x92
    912c:	b1c9      	cbz	r1, 9162 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    912e:	f8b5 10c0 	ldrh.w	r1, [r5, #192]	; 0xc0
    9132:	1a0c      	subs	r4, r1, r0
    9134:	f1b4 0404 	subs.w	r4, r4, #4
    9138:	f895 00bc 	ldrb.w	r0, [r5, #188]	; 0xbc
    913c:	b140      	cbz	r0, 9150 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    913e:	f895 208d 	ldrb.w	r2, [r5, #141]	; 0x8d
    9142:	2300      	movs	r3, #0
    9144:	2109      	movs	r1, #9
    9146:	f105 0080 	add.w	r0, r5, #128	; 0x80
    914a:	f005 fd14 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    914e:	b160      	cbz	r0, 916a <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    9150:	4628      	mov	r0, r5
    9152:	f006 fe13 	bl	fd7c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x150>
    9156:	b138      	cbz	r0, 9168 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    9158:	e9d5 102c 	ldrd	r1, r0, [r5, #176]	; 0xb0
    915c:	1a40      	subs	r0, r0, r1
    915e:	1f00      	subs	r0, r0, #4
    9160:	e003      	b.n	916a <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    9162:	f1c0 0402 	rsb	r4, r0, #2
    9166:	e7e7      	b.n	9138 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    9168:	4620      	mov	r0, r4
    916a:	42a0      	cmp	r0, r4
    916c:	da00      	bge.n	9170 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    916e:	4604      	mov	r4, r0
    9170:	2c00      	cmp	r4, #0
    9172:	dc01      	bgt.n	9178 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    9174:	2000      	movs	r0, #0
    9176:	bd70      	pop	{r4, r5, r6, pc}
    9178:	b2a0      	uxth	r0, r4
    917a:	bd70      	pop	{r4, r5, r6, pc}

0000917c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    917c:	481d      	ldr	r0, [pc, #116]	; (91f4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    917e:	491c      	ldr	r1, [pc, #112]	; (91f0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    9180:	6081      	str	r1, [r0, #8]
    9182:	491d      	ldr	r1, [pc, #116]	; (91f8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    9184:	61c1      	str	r1, [r0, #28]
    9186:	491d      	ldr	r1, [pc, #116]	; (91fc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    9188:	62c1      	str	r1, [r0, #44]	; 0x2c
    918a:	491d      	ldr	r1, [pc, #116]	; (9200 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    918c:	6101      	str	r1, [r0, #16]
    918e:	491d      	ldr	r1, [pc, #116]	; (9204 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    9190:	6141      	str	r1, [r0, #20]
    9192:	491d      	ldr	r1, [pc, #116]	; (9208 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    9194:	6441      	str	r1, [r0, #68]	; 0x44
    9196:	491d      	ldr	r1, [pc, #116]	; (920c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    9198:	6181      	str	r1, [r0, #24]
    919a:	491d      	ldr	r1, [pc, #116]	; (9210 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    919c:	6301      	str	r1, [r0, #48]	; 0x30
    919e:	491d      	ldr	r1, [pc, #116]	; (9214 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    91a0:	6241      	str	r1, [r0, #36]	; 0x24
    91a2:	491d      	ldr	r1, [pc, #116]	; (9218 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    91a4:	64c1      	str	r1, [r0, #76]	; 0x4c
    91a6:	491d      	ldr	r1, [pc, #116]	; (921c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    91a8:	6481      	str	r1, [r0, #72]	; 0x48
    91aa:	491d      	ldr	r1, [pc, #116]	; (9220 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    91ac:	6341      	str	r1, [r0, #52]	; 0x34
    91ae:	491d      	ldr	r1, [pc, #116]	; (9224 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    91b0:	6381      	str	r1, [r0, #56]	; 0x38
    91b2:	481e      	ldr	r0, [pc, #120]	; (922c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    91b4:	491c      	ldr	r1, [pc, #112]	; (9228 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    91b6:	6081      	str	r1, [r0, #8]
    91b8:	491d      	ldr	r1, [pc, #116]	; (9230 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    91ba:	61c1      	str	r1, [r0, #28]
    91bc:	491d      	ldr	r1, [pc, #116]	; (9234 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    91be:	6201      	str	r1, [r0, #32]
    91c0:	491d      	ldr	r1, [pc, #116]	; (9238 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    91c2:	6041      	str	r1, [r0, #4]
    91c4:	491d      	ldr	r1, [pc, #116]	; (923c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    91c6:	6001      	str	r1, [r0, #0]
    91c8:	491d      	ldr	r1, [pc, #116]	; (9240 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    91ca:	6281      	str	r1, [r0, #40]	; 0x28
    91cc:	491d      	ldr	r1, [pc, #116]	; (9244 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    91ce:	62c1      	str	r1, [r0, #44]	; 0x2c
    91d0:	491d      	ldr	r1, [pc, #116]	; (9248 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    91d2:	60c1      	str	r1, [r0, #12]
    91d4:	491d      	ldr	r1, [pc, #116]	; (924c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    91d6:	6181      	str	r1, [r0, #24]
    91d8:	491d      	ldr	r1, [pc, #116]	; (9250 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    91da:	6301      	str	r1, [r0, #48]	; 0x30
    91dc:	491d      	ldr	r1, [pc, #116]	; (9254 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd8>)
    91de:	6481      	str	r1, [r0, #72]	; 0x48
    91e0:	491d      	ldr	r1, [pc, #116]	; (9258 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xdc>)
    91e2:	64c1      	str	r1, [r0, #76]	; 0x4c
    91e4:	491d      	ldr	r1, [pc, #116]	; (925c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe0>)
    91e6:	6441      	str	r1, [r0, #68]	; 0x44
    91e8:	491d      	ldr	r1, [pc, #116]	; (9260 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe4>)
    91ea:	6241      	str	r1, [r0, #36]	; 0x24
    91ec:	4770      	bx	lr
    91ee:	0000      	.short	0x0000
    91f0:	0000a6b9 	.word	0x0000a6b9
    91f4:	2000016c 	.word	0x2000016c
    91f8:	0000a6f9 	.word	0x0000a6f9
    91fc:	0000a399 	.word	0x0000a399
    9200:	0000a0b1 	.word	0x0000a0b1
    9204:	0000a5f1 	.word	0x0000a5f1
    9208:	0000a5a9 	.word	0x0000a5a9
    920c:	0000a631 	.word	0x0000a631
    9210:	0000a779 	.word	0x0000a779
    9214:	0000a0ed 	.word	0x0000a0ed
    9218:	0000a369 	.word	0x0000a369
    921c:	0000a335 	.word	0x0000a335
    9220:	0000a5cd 	.word	0x0000a5cd
    9224:	0000a3bd 	.word	0x0000a3bd
    9228:	0000ab55 	.word	0x0000ab55
    922c:	20000204 	.word	0x20000204
    9230:	0000ab85 	.word	0x0000ab85
    9234:	0000a911 	.word	0x0000a911
    9238:	0000a875 	.word	0x0000a875
    923c:	0000a8a5 	.word	0x0000a8a5
    9240:	0000aa11 	.word	0x0000aa11
    9244:	0000aa45 	.word	0x0000aa45
    9248:	0000a8d5 	.word	0x0000a8d5
    924c:	0000ab31 	.word	0x0000ab31
    9250:	0000abc5 	.word	0x0000abc5
    9254:	0000a9d1 	.word	0x0000a9d1
    9258:	0000aa01 	.word	0x0000aa01
    925c:	0000ab1d 	.word	0x0000ab1d
    9260:	0000a9a1 	.word	0x0000a9a1

00009264 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    9264:	4806      	ldr	r0, [pc, #24]	; (9280 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    9266:	4905      	ldr	r1, [pc, #20]	; (927c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    9268:	6581      	str	r1, [r0, #88]	; 0x58
    926a:	4906      	ldr	r1, [pc, #24]	; (9284 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    926c:	65c1      	str	r1, [r0, #92]	; 0x5c
    926e:	4807      	ldr	r0, [pc, #28]	; (928c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    9270:	4905      	ldr	r1, [pc, #20]	; (9288 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    9272:	6581      	str	r1, [r0, #88]	; 0x58
    9274:	4906      	ldr	r1, [pc, #24]	; (9290 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    9276:	6601      	str	r1, [r0, #96]	; 0x60
    9278:	4770      	bx	lr
    927a:	0000      	.short	0x0000
    927c:	0000a41d 	.word	0x0000a41d
    9280:	2000016c 	.word	0x2000016c
    9284:	0000a53d 	.word	0x0000a53d
    9288:	0000aa71 	.word	0x0000aa71
    928c:	20000204 	.word	0x20000204
    9290:	0000aaa1 	.word	0x0000aaa1

00009294 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    9294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9296:	4d38      	ldr	r5, [pc, #224]	; (9378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    9298:	2600      	movs	r6, #0
    929a:	f1a5 070c 	sub.w	r7, r5, #12
    929e:	702e      	strb	r6, [r5, #0]
    92a0:	6068      	str	r0, [r5, #4]
    92a2:	807e      	strh	r6, [r7, #2]
    92a4:	707e      	strb	r6, [r7, #1]
    92a6:	4604      	mov	r4, r0
    92a8:	703e      	strb	r6, [r7, #0]
    92aa:	8800      	ldrh	r0, [r0, #0]
    92ac:	f7fb ff58 	bl	5160 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    92b0:	6868      	ldr	r0, [r5, #4]
    92b2:	8800      	ldrh	r0, [r0, #0]
    92b4:	f7fb fefc 	bl	50b0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    92b8:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    92bc:	1c40      	adds	r0, r0, #1
    92be:	b282      	uxth	r2, r0
    92c0:	6868      	ldr	r0, [r5, #4]
    92c2:	f100 0380 	add.w	r3, r0, #128	; 0x80
    92c6:	4601      	mov	r1, r0
    92c8:	4618      	mov	r0, r3
    92ca:	f005 fe21 	bl	ef10 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    92ce:	b120      	cbz	r0, 92da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x46>
    92d0:	f240 115d 	movw	r1, #349	; 0x15d
    92d4:	2036      	movs	r0, #54	; 0x36
    92d6:	f7fb f96f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92da:	f8a4 61f2 	strh.w	r6, [r4, #498]	; 0x1f2
    92de:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
    92e2:	2824      	cmp	r0, #36	; 0x24
    92e4:	d10a      	bne.n	92fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    92e6:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
    92ea:	f8b4 1200 	ldrh.w	r1, [r4, #512]	; 0x200
    92ee:	1a40      	subs	r0, r0, r1
    92f0:	b200      	sxth	r0, r0
    92f2:	2800      	cmp	r0, #0
    92f4:	db02      	blt.n	92fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    92f6:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
    92fa:	e00f      	b.n	931c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x88>
    92fc:	f894 008d 	ldrb.w	r0, [r4, #141]	; 0x8d
    9300:	2824      	cmp	r0, #36	; 0x24
    9302:	d001      	beq.n	9308 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x74>
    9304:	2825      	cmp	r0, #37	; 0x25
    9306:	d10c      	bne.n	9322 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8e>
    9308:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
    930c:	f8b4 1200 	ldrh.w	r1, [r4, #512]	; 0x200
    9310:	1a40      	subs	r0, r0, r1
    9312:	b200      	sxth	r0, r0
    9314:	2800      	cmp	r0, #0
    9316:	db04      	blt.n	9322 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8e>
    9318:	f884 608d 	strb.w	r6, [r4, #141]	; 0x8d
    931c:	f000 fe12 	bl	9f44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbbc>
    9320:	b318      	cbz	r0, 936a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd6>
    9322:	f000 fcb3 	bl	9c8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x904>
    9326:	2800      	cmp	r0, #0
    9328:	d125      	bne.n	9376 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2>
    932a:	6868      	ldr	r0, [r5, #4]
    932c:	3080      	adds	r0, #128	; 0x80
    932e:	f006 fc8b 	bl	fc48 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9332:	b120      	cbz	r0, 933e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa>
    9334:	6868      	ldr	r0, [r5, #4]
    9336:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    933a:	f000 fb4d 	bl	99d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x650>
    933e:	480f      	ldr	r0, [pc, #60]	; (937c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    9340:	9000      	str	r0, [sp, #0]
    9342:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    9346:	4b0e      	ldr	r3, [pc, #56]	; (9380 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>)
    9348:	4a0e      	ldr	r2, [pc, #56]	; (9384 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf0>)
    934a:	f7fb ff95 	bl	5278 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    934e:	6868      	ldr	r0, [r5, #4]
    9350:	2300      	movs	r3, #0
    9352:	2105      	movs	r1, #5
    9354:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    9358:	3080      	adds	r0, #128	; 0x80
    935a:	f005 fc0c 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    935e:	2800      	cmp	r0, #0
    9360:	d009      	beq.n	9376 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2>
    9362:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9366:	f7fb bf81 	b.w	526c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    936a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    936e:	2100      	movs	r1, #0
    9370:	4608      	mov	r0, r1
    9372:	f000 bc33 	b.w	9bdc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x854>
    9376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9378:	20000164 	.word	0x20000164
    937c:	00009bdd 	.word	0x00009bdd
    9380:	00009565 	.word	0x00009565
    9384:	00009ebd 	.word	0x00009ebd

00009388 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    9388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    938a:	460d      	mov	r5, r1
    938c:	4604      	mov	r4, r0
    938e:	2600      	movs	r6, #0
    9390:	e053      	b.n	943a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb2>
    9392:	bf00      	nop
    9394:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    9398:	1c40      	adds	r0, r0, #1
    939a:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    939e:	f8b4 00be 	ldrh.w	r0, [r4, #190]	; 0xbe
    93a2:	1c40      	adds	r0, r0, #1
    93a4:	f8a4 00be 	strh.w	r0, [r4, #190]	; 0xbe
    93a8:	4620      	mov	r0, r4
    93aa:	f006 fce7 	bl	fd7c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x150>
    93ae:	b1a8      	cbz	r0, 93dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x54>
    93b0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
    93b4:	1c40      	adds	r0, r0, #1
    93b6:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    93ba:	4620      	mov	r0, r4
    93bc:	f006 fc65 	bl	fc8a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    93c0:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
    93c4:	4288      	cmp	r0, r1
    93c6:	d309      	bcc.n	93dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x54>
    93c8:	220c      	movs	r2, #12
    93ca:	4621      	mov	r1, r4
    93cc:	f504 70a1 	add.w	r0, r4, #322	; 0x142
    93d0:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
    93d4:	f7fd f9aa 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    93d8:	f7fd fa9a 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    93dc:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    93e0:	b120      	cbz	r0, 93ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x64>
    93e2:	f8b4 00c4 	ldrh.w	r0, [r4, #196]	; 0xc4
    93e6:	1c40      	adds	r0, r0, #1
    93e8:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
    93ec:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
    93f0:	b120      	cbz	r0, 93fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x74>
    93f2:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
    93f6:	1c40      	adds	r0, r0, #1
    93f8:	f8a4 00ca 	strh.w	r0, [r4, #202]	; 0xca
    93fc:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    9400:	f88d 0000 	strb.w	r0, [sp]
    9404:	9800      	ldr	r0, [sp, #0]
    9406:	9000      	str	r0, [sp, #0]
    9408:	f89d 0000 	ldrb.w	r0, [sp]
    940c:	b940      	cbnz	r0, 9420 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x98>
    940e:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
    9412:	2300      	movs	r3, #0
    9414:	2101      	movs	r1, #1
    9416:	f104 0080 	add.w	r0, r4, #128	; 0x80
    941a:	f005 fbac 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    941e:	b120      	cbz	r0, 942a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa2>
    9420:	f8b4 00c2 	ldrh.w	r0, [r4, #194]	; 0xc2
    9424:	1c40      	adds	r0, r0, #1
    9426:	f8a4 00c2 	strh.w	r0, [r4, #194]	; 0xc2
    942a:	4620      	mov	r0, r4
    942c:	f006 fc3c 	bl	fca8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    9430:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
    9434:	1c40      	adds	r0, r0, #1
    9436:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    943a:	1e6d      	subs	r5, r5, #1
    943c:	b2ad      	uxth	r5, r5
    943e:	d2a9      	bcs.n	9394 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc>
    9440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9442:	0000      	movs	r0, r0
    9444:	4411      	add	r1, r2
    9446:	78c2      	ldrb	r2, [r0, #3]
    9448:	480c      	ldr	r0, [pc, #48]	; (947c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf4>)
    944a:	1d89      	adds	r1, r1, #6
    944c:	b289      	uxth	r1, r1
    944e:	6840      	ldr	r0, [r0, #4]
    9450:	2a01      	cmp	r2, #1
    9452:	d006      	beq.n	9462 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xda>
    9454:	b142      	cbz	r2, 9468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0>
    9456:	2a18      	cmp	r2, #24
    9458:	d105      	bne.n	9466 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde>
    945a:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
    945e:	b132      	cbz	r2, 946e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe6>
    9460:	e009      	b.n	9476 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    9462:	f8a0 11fe 	strh.w	r1, [r0, #510]	; 0x1fe
    9466:	4770      	bx	lr
    9468:	f8a0 1206 	strh.w	r1, [r0, #518]	; 0x206
    946c:	4770      	bx	lr
    946e:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
    9472:	b902      	cbnz	r2, 9476 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    9474:	2100      	movs	r1, #0
    9476:	f8a0 1200 	strh.w	r1, [r0, #512]	; 0x200
    947a:	4770      	bx	lr
    947c:	20000164 	.word	0x20000164
    9480:	490b      	ldr	r1, [pc, #44]	; (94b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x128>)
    9482:	78c2      	ldrb	r2, [r0, #3]
    9484:	6849      	ldr	r1, [r1, #4]
    9486:	2a01      	cmp	r2, #1
    9488:	d006      	beq.n	9498 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x110>
    948a:	b15a      	cbz	r2, 94a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c>
    948c:	2a18      	cmp	r2, #24
    948e:	d108      	bne.n	94a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a>
    9490:	f8b1 1200 	ldrh.w	r1, [r1, #512]	; 0x200
    9494:	f005 be27 	b.w	f0e6 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    9498:	f8b1 11fe 	ldrh.w	r1, [r1, #510]	; 0x1fe
    949c:	7241      	strb	r1, [r0, #9]
    949e:	0a09      	lsrs	r1, r1, #8
    94a0:	7281      	strb	r1, [r0, #10]
    94a2:	4770      	bx	lr
    94a4:	f8b1 1206 	ldrh.w	r1, [r1, #518]	; 0x206
    94a8:	7341      	strb	r1, [r0, #13]
    94aa:	0a09      	lsrs	r1, r1, #8
    94ac:	7381      	strb	r1, [r0, #14]
    94ae:	4770      	bx	lr
    94b0:	20000164 	.word	0x20000164
    94b4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    94b6:	4c2a      	ldr	r4, [pc, #168]	; (9560 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d8>)
    94b8:	2300      	movs	r3, #0
    94ba:	4619      	mov	r1, r3
    94bc:	6860      	ldr	r0, [r4, #4]
    94be:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    94c2:	3080      	adds	r0, #128	; 0x80
    94c4:	f005 fb57 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94c8:	2800      	cmp	r0, #0
    94ca:	d048      	beq.n	955e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    94cc:	6860      	ldr	r0, [r4, #4]
    94ce:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    94d2:	f88d 1000 	strb.w	r1, [sp]
    94d6:	9900      	ldr	r1, [sp, #0]
    94d8:	9100      	str	r1, [sp, #0]
    94da:	f89d 1000 	ldrb.w	r1, [sp]
    94de:	2500      	movs	r5, #0
    94e0:	2900      	cmp	r1, #0
    94e2:	d03c      	beq.n	955e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    94e4:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    94e8:	f005 fb9e 	bl	ec28 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    94ec:	2800      	cmp	r0, #0
    94ee:	d136      	bne.n	955e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    94f0:	6860      	ldr	r0, [r4, #4]
    94f2:	f8b0 0084 	ldrh.w	r0, [r0, #132]	; 0x84
    94f6:	280a      	cmp	r0, #10
    94f8:	d931      	bls.n	955e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    94fa:	4668      	mov	r0, sp
    94fc:	f7fc ff98 	bl	6430 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    9500:	2800      	cmp	r0, #0
    9502:	d02c      	beq.n	955e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    9504:	6861      	ldr	r1, [r4, #4]
    9506:	2205      	movs	r2, #5
    9508:	4668      	mov	r0, sp
    950a:	3197      	adds	r1, #151	; 0x97
    950c:	f004 f883 	bl	d616 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    9510:	b310      	cbz	r0, 9558 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d0>
    9512:	6860      	ldr	r0, [r4, #4]
    9514:	f8d0 11f8 	ldr.w	r1, [r0, #504]	; 0x1f8
    9518:	7808      	ldrb	r0, [r1, #0]
    951a:	b158      	cbz	r0, 9534 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1ac>
    951c:	2205      	movs	r2, #5
    951e:	4668      	mov	r0, sp
    9520:	1c49      	adds	r1, r1, #1
    9522:	f004 f878 	bl	d616 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    9526:	2800      	cmp	r0, #0
    9528:	d119      	bne.n	955e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    952a:	6860      	ldr	r0, [r4, #4]
    952c:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
    9530:	7800      	ldrb	r0, [r0, #0]
    9532:	b940      	cbnz	r0, 9546 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1be>
    9534:	6860      	ldr	r0, [r4, #4]
    9536:	9900      	ldr	r1, [sp, #0]
    9538:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
    953c:	f8c0 1001 	str.w	r1, [r0, #1]
    9540:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9544:	7141      	strb	r1, [r0, #5]
    9546:	6860      	ldr	r0, [r4, #4]
    9548:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
    954c:	7801      	ldrb	r1, [r0, #0]
    954e:	1c49      	adds	r1, r1, #1
    9550:	7001      	strb	r1, [r0, #0]
    9552:	2001      	movs	r0, #1
    9554:	f000 fd62 	bl	a01c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    9558:	6860      	ldr	r0, [r4, #4]
    955a:	f880 51fc 	strb.w	r5, [r0, #508]	; 0x1fc
    955e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9560:	20000164 	.word	0x20000164
    9564:	4a0c      	ldr	r2, [pc, #48]	; (9598 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x210>)
    9566:	7851      	ldrb	r1, [r2, #1]
    9568:	b9a1      	cbnz	r1, 9594 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    956a:	f102 010c 	add.w	r1, r2, #12
    956e:	2801      	cmp	r0, #1
    9570:	6849      	ldr	r1, [r1, #4]
    9572:	d008      	beq.n	9586 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fe>
    9574:	7890      	ldrb	r0, [r2, #2]
    9576:	0740      	lsls	r0, r0, #29
    9578:	d503      	bpl.n	9582 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fa>
    957a:	f891 0090 	ldrb.w	r0, [r1, #144]	; 0x90
    957e:	2807      	cmp	r0, #7
    9580:	d008      	beq.n	9594 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    9582:	2001      	movs	r0, #1
    9584:	4770      	bx	lr
    9586:	f8b1 0054 	ldrh.w	r0, [r1, #84]	; 0x54
    958a:	8f09      	ldrh	r1, [r1, #56]	; 0x38
    958c:	4288      	cmp	r0, r1
    958e:	d801      	bhi.n	9594 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    9590:	f7fe bdbc 	b.w	810c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    9594:	2000      	movs	r0, #0
    9596:	4770      	bx	lr
    9598:	20000158 	.word	0x20000158
    959c:	b538      	push	{r3, r4, r5, lr}
    959e:	4c89      	ldr	r4, [pc, #548]	; (97c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x43c>)
    95a0:	6860      	ldr	r0, [r4, #4]
    95a2:	3080      	adds	r0, #128	; 0x80
    95a4:	f006 fb50 	bl	fc48 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    95a8:	2800      	cmp	r0, #0
    95aa:	d15e      	bne.n	966a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2e2>
    95ac:	6860      	ldr	r0, [r4, #4]
    95ae:	2300      	movs	r3, #0
    95b0:	2101      	movs	r1, #1
    95b2:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
    95b6:	3080      	adds	r0, #128	; 0x80
    95b8:	f005 fadd 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95bc:	2800      	cmp	r0, #0
    95be:	d154      	bne.n	966a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2e2>
    95c0:	6860      	ldr	r0, [r4, #4]
    95c2:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    95c6:	f88d 1000 	strb.w	r1, [sp]
    95ca:	9900      	ldr	r1, [sp, #0]
    95cc:	9100      	str	r1, [sp, #0]
    95ce:	f89d 1000 	ldrb.w	r1, [sp]
    95d2:	b109      	cbz	r1, 95d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x250>
    95d4:	2002      	movs	r0, #2
    95d6:	e03a      	b.n	964e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c6>
    95d8:	2500      	movs	r5, #0
    95da:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    95de:	462b      	mov	r3, r5
    95e0:	4629      	mov	r1, r5
    95e2:	3080      	adds	r0, #128	; 0x80
    95e4:	f005 fac7 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95e8:	b128      	cbz	r0, 95f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    95ea:	6860      	ldr	r0, [r4, #4]
    95ec:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    95f0:	b108      	cbz	r0, 95f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    95f2:	2012      	movs	r0, #18
    95f4:	e02b      	b.n	964e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c6>
    95f6:	6860      	ldr	r0, [r4, #4]
    95f8:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    95fc:	2a12      	cmp	r2, #18
    95fe:	d01f      	beq.n	9640 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2b8>
    9600:	dc04      	bgt.n	960c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x284>
    9602:	2a03      	cmp	r2, #3
    9604:	d027      	beq.n	9656 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ce>
    9606:	2a11      	cmp	r2, #17
    9608:	d104      	bne.n	9614 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x28c>
    960a:	e01b      	b.n	9644 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2bc>
    960c:	2a18      	cmp	r2, #24
    960e:	d01d      	beq.n	964c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c4>
    9610:	2a23      	cmp	r2, #35	; 0x23
    9612:	d02b      	beq.n	966c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2e4>
    9614:	2300      	movs	r3, #0
    9616:	2104      	movs	r1, #4
    9618:	3080      	adds	r0, #128	; 0x80
    961a:	f005 faac 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    961e:	2800      	cmp	r0, #0
    9620:	d123      	bne.n	966a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2e2>
    9622:	6860      	ldr	r0, [r4, #4]
    9624:	f890 108e 	ldrb.w	r1, [r0, #142]	; 0x8e
    9628:	291d      	cmp	r1, #29
    962a:	d042      	beq.n	96b2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x32a>
    962c:	dc25      	bgt.n	967a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f2>
    962e:	2901      	cmp	r1, #1
    9630:	d030      	beq.n	9694 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x30c>
    9632:	2902      	cmp	r1, #2
    9634:	d03b      	beq.n	96ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x326>
    9636:	2903      	cmp	r1, #3
    9638:	d026      	beq.n	9688 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x300>
    963a:	2904      	cmp	r1, #4
    963c:	d136      	bne.n	96ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x324>
    963e:	e0a7      	b.n	9790 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x408>
    9640:	200b      	movs	r0, #11
    9642:	e004      	b.n	964e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c6>
    9644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9648:	f000 bbf8 	b.w	9e3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xab4>
    964c:	2006      	movs	r0, #6
    964e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9652:	f000 bce3 	b.w	a01c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    9656:	f890 1111 	ldrb.w	r1, [r0, #273]	; 0x111
    965a:	f880 1116 	strb.w	r1, [r0, #278]	; 0x116
    965e:	2007      	movs	r0, #7
    9660:	f000 fcdc 	bl	a01c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    9664:	6860      	ldr	r0, [r4, #4]
    9666:	f880 508d 	strb.w	r5, [r0, #141]	; 0x8d
    966a:	bd38      	pop	{r3, r4, r5, pc}
    966c:	2018      	movs	r0, #24
    966e:	f000 fcd5 	bl	a01c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    9672:	6860      	ldr	r0, [r4, #4]
    9674:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
    9678:	bd38      	pop	{r3, r4, r5, pc}
    967a:	291e      	cmp	r1, #30
    967c:	d019      	beq.n	96b2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x32a>
    967e:	2921      	cmp	r1, #33	; 0x21
    9680:	d058      	beq.n	9734 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ac>
    9682:	2928      	cmp	r1, #40	; 0x28
    9684:	d175      	bne.n	9772 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ea>
    9686:	e081      	b.n	978c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x404>
    9688:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    968c:	f880 1116 	strb.w	r1, [r0, #278]	; 0x116
    9690:	2007      	movs	r0, #7
    9692:	e07e      	b.n	9792 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    9694:	200c      	movs	r0, #12
    9696:	f000 fcc1 	bl	a01c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    969a:	6860      	ldr	r0, [r4, #4]
    969c:	f820 5fca 	strh.w	r5, [r0, #202]!
    96a0:	7941      	ldrb	r1, [r0, #5]
    96a2:	f041 0101 	orr.w	r1, r1, #1
    96a6:	7141      	strb	r1, [r0, #5]
    96a8:	f800 5c3c 	strb.w	r5, [r0, #-60]
    96ac:	e061      	b.n	9772 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ea>
    96ae:	2013      	movs	r0, #19
    96b0:	e033      	b.n	971a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x392>
    96b2:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
    96b6:	f88d 2000 	strb.w	r2, [sp]
    96ba:	9a00      	ldr	r2, [sp, #0]
    96bc:	9200      	str	r2, [sp, #0]
    96be:	f89d 2000 	ldrb.w	r2, [sp]
    96c2:	bb8a      	cbnz	r2, 9728 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3a0>
    96c4:	f890 2122 	ldrb.w	r2, [r0, #290]	; 0x122
    96c8:	f88d 2000 	strb.w	r2, [sp]
    96cc:	9a00      	ldr	r2, [sp, #0]
    96ce:	9200      	str	r2, [sp, #0]
    96d0:	f89d 2000 	ldrb.w	r2, [sp]
    96d4:	b34a      	cbz	r2, 972a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3a2>
    96d6:	2924      	cmp	r1, #36	; 0x24
    96d8:	d02a      	beq.n	9730 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3a8>
    96da:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    96de:	2924      	cmp	r1, #36	; 0x24
    96e0:	d026      	beq.n	9730 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3a8>
    96e2:	2300      	movs	r3, #0
    96e4:	f200 2202 	addw	r2, r0, #514	; 0x202
    96e8:	f500 7191 	add.w	r1, r0, #290	; 0x122
    96ec:	f005 fea6 	bl	f43c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    96f0:	6860      	ldr	r0, [r4, #4]
    96f2:	211e      	movs	r1, #30
    96f4:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    96f8:	f880 5122 	strb.w	r5, [r0, #290]	; 0x122
    96fc:	6860      	ldr	r0, [r4, #4]
    96fe:	f005 feb8 	bl	f472 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9702:	f000 f861 	bl	97c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x440>
    9706:	6861      	ldr	r1, [r4, #4]
    9708:	f101 0030 	add.w	r0, r1, #48	; 0x30
    970c:	8bc2      	ldrh	r2, [r0, #30]
    970e:	f8a1 2116 	strh.w	r2, [r1, #278]	; 0x116
    9712:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9714:	f8a1 0118 	strh.w	r0, [r1, #280]	; 0x118
    9718:	2015      	movs	r0, #21
    971a:	f000 fc7f 	bl	a01c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    971e:	6860      	ldr	r0, [r4, #4]
    9720:	f8a0 50ca 	strh.w	r5, [r0, #202]	; 0xca
    9724:	f880 508e 	strb.w	r5, [r0, #142]	; 0x8e
    9728:	e023      	b.n	9772 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ea>
    972a:	291e      	cmp	r1, #30
    972c:	d0e6      	beq.n	96fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x374>
    972e:	e020      	b.n	9772 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ea>
    9730:	2301      	movs	r3, #1
    9732:	e7d7      	b.n	96e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x35c>
    9734:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    9738:	2901      	cmp	r1, #1
    973a:	d108      	bne.n	974e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    973c:	f890 112d 	ldrb.w	r1, [r0, #301]	; 0x12d
    9740:	f88d 1000 	strb.w	r1, [sp]
    9744:	9900      	ldr	r1, [sp, #0]
    9746:	9100      	str	r1, [sp, #0]
    9748:	f89d 1000 	ldrb.w	r1, [sp]
    974c:	b121      	cbz	r1, 9758 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3d0>
    974e:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    9752:	2902      	cmp	r1, #2
    9754:	d005      	beq.n	9762 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3da>
    9756:	e00c      	b.n	9772 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ea>
    9758:	f8d0 1066 	ldr.w	r1, [r0, #102]	; 0x66
    975c:	f8d0 012e 	ldr.w	r0, [r0, #302]	; 0x12e
    9760:	e002      	b.n	9768 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3e0>
    9762:	f850 1f66 	ldr.w	r1, [r0, #102]!
    9766:	6840      	ldr	r0, [r0, #4]
    9768:	f000 fc7c 	bl	a064 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcdc>
    976c:	2018      	movs	r0, #24
    976e:	f000 fc55 	bl	a01c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    9772:	6860      	ldr	r0, [r4, #4]
    9774:	3080      	adds	r0, #128	; 0x80
    9776:	f006 fa67 	bl	fc48 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    977a:	2800      	cmp	r0, #0
    977c:	f47f af7c 	bne.w	9678 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f0>
    9780:	6860      	ldr	r0, [r4, #4]
    9782:	3080      	adds	r0, #128	; 0x80
    9784:	f006 fa60 	bl	fc48 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9788:	b138      	cbz	r0, 979a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x412>
    978a:	e011      	b.n	97b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x428>
    978c:	2011      	movs	r0, #17
    978e:	e000      	b.n	9792 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    9790:	2009      	movs	r0, #9
    9792:	f000 fc43 	bl	a01c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    9796:	6860      	ldr	r0, [r4, #4]
    9798:	e7c4      	b.n	9724 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x39c>
    979a:	6860      	ldr	r0, [r4, #4]
    979c:	2300      	movs	r3, #0
    979e:	4619      	mov	r1, r3
    97a0:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    97a4:	3080      	adds	r0, #128	; 0x80
    97a6:	f005 f9e6 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97aa:	b108      	cbz	r0, 97b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x428>
    97ac:	f000 fa98 	bl	9ce0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x958>
    97b0:	6860      	ldr	r0, [r4, #4]
    97b2:	3080      	adds	r0, #128	; 0x80
    97b4:	f006 fa48 	bl	fc48 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    97b8:	2800      	cmp	r0, #0
    97ba:	d1df      	bne.n	977c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3f4>
    97bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    97c0:	f7ff be78 	b.w	94b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c>
    97c4:	20000164 	.word	0x20000164
    97c8:	480a      	ldr	r0, [pc, #40]	; (97f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x46c>)
    97ca:	b510      	push	{r4, lr}
    97cc:	6843      	ldr	r3, [r0, #4]
    97ce:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    97d2:	2801      	cmp	r0, #1
    97d4:	d00a      	beq.n	97ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x464>
    97d6:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
    97da:	f103 0130 	add.w	r1, r3, #48	; 0x30
    97de:	8818      	ldrh	r0, [r3, #0]
    97e0:	f005 fe04 	bl	f3ec <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    97e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    97e8:	f7fd b892 	b.w	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    97ec:	2002      	movs	r0, #2
    97ee:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    97f2:	bd10      	pop	{r4, pc}
    97f4:	20000164 	.word	0x20000164
    97f8:	b538      	push	{r3, r4, r5, lr}
    97fa:	4d1c      	ldr	r5, [pc, #112]	; (986c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4e4>)
    97fc:	6869      	ldr	r1, [r5, #4]
    97fe:	f891 208d 	ldrb.w	r2, [r1, #141]	; 0x8d
    9802:	2a16      	cmp	r2, #22
    9804:	d001      	beq.n	980a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x482>
    9806:	2a13      	cmp	r2, #19
    9808:	d102      	bne.n	9810 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x488>
    980a:	f891 20ce 	ldrb.w	r2, [r1, #206]	; 0xce
    980e:	b10a      	cbz	r2, 9814 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x48c>
    9810:	2002      	movs	r0, #2
    9812:	bd38      	pop	{r3, r4, r5, pc}
    9814:	2400      	movs	r4, #0
    9816:	f881 40cd 	strb.w	r4, [r1, #205]	; 0xcd
    981a:	f881 40c8 	strb.w	r4, [r1, #200]	; 0xc8
    981e:	f891 21c6 	ldrb.w	r2, [r1, #454]	; 0x1c6
    9822:	f88d 2000 	strb.w	r2, [sp]
    9826:	9a00      	ldr	r2, [sp, #0]
    9828:	9200      	str	r2, [sp, #0]
    982a:	f89d 2000 	ldrb.w	r2, [sp]
    982e:	b122      	cbz	r2, 983a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4b2>
    9830:	f240 3119 	movw	r1, #793	; 0x319
    9834:	2036      	movs	r0, #54	; 0x36
    9836:	f7fa febf 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    983a:	880a      	ldrh	r2, [r1, #0]
    983c:	f8a1 21ca 	strh.w	r2, [r1, #458]	; 0x1ca
    9840:	f881 01c8 	strb.w	r0, [r1, #456]	; 0x1c8
    9844:	f881 41cc 	strb.w	r4, [r1, #460]	; 0x1cc
    9848:	f881 4218 	strb.w	r4, [r1, #536]	; 0x218
    984c:	f001 fa9e 	bl	ad8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a04>
    9850:	6869      	ldr	r1, [r5, #4]
    9852:	2209      	movs	r2, #9
    9854:	f501 70df 	add.w	r0, r1, #446	; 0x1be
    9858:	f7fc ff68 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    985c:	f7fd f858 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9860:	6868      	ldr	r0, [r5, #4]
    9862:	f880 408d 	strb.w	r4, [r0, #141]	; 0x8d
    9866:	2000      	movs	r0, #0
    9868:	bd38      	pop	{r3, r4, r5, pc}
    986a:	0000      	.short	0x0000
    986c:	20000164 	.word	0x20000164
    9870:	b570      	push	{r4, r5, r6, lr}
    9872:	4d21      	ldr	r5, [pc, #132]	; (98f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x570>)
    9874:	f105 040c 	add.w	r4, r5, #12
    9878:	8869      	ldrh	r1, [r5, #2]
    987a:	0748      	lsls	r0, r1, #29
    987c:	d511      	bpl.n	98a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x51a>
    987e:	6860      	ldr	r0, [r4, #4]
    9880:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    9884:	2a03      	cmp	r2, #3
    9886:	d004      	beq.n	9892 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50a>
    9888:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
    988c:	2a07      	cmp	r2, #7
    988e:	d108      	bne.n	98a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x51a>
    9890:	e002      	b.n	9898 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x510>
    9892:	f240 6144 	movw	r1, #1604	; 0x644
    9896:	e024      	b.n	98e2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x55a>
    9898:	2201      	movs	r2, #1
    989a:	702a      	strb	r2, [r5, #0]
    989c:	2200      	movs	r2, #0
    989e:	f880 2090 	strb.w	r2, [r0, #144]	; 0x90
    98a2:	0788      	lsls	r0, r1, #30
    98a4:	d508      	bpl.n	98b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x530>
    98a6:	6868      	ldr	r0, [r5, #4]
    98a8:	78c0      	ldrb	r0, [r0, #3]
    98aa:	2826      	cmp	r0, #38	; 0x26
    98ac:	d217      	bcs.n	98de <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x556>
    98ae:	4913      	ldr	r1, [pc, #76]	; (98fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x574>)
    98b0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    98b4:	b198      	cbz	r0, 98de <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x556>
    98b6:	4780      	blx	r0
    98b8:	f000 f866 	bl	9988 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x600>
    98bc:	f000 f820 	bl	9900 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x578>
    98c0:	4606      	mov	r6, r0
    98c2:	7868      	ldrb	r0, [r5, #1]
    98c4:	0700      	lsls	r0, r0, #28
    98c6:	d512      	bpl.n	98ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x566>
    98c8:	6860      	ldr	r0, [r4, #4]
    98ca:	2300      	movs	r3, #0
    98cc:	2105      	movs	r1, #5
    98ce:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    98d2:	3080      	adds	r0, #128	; 0x80
    98d4:	f005 f94f 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98d8:	b130      	cbz	r0, 98e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x560>
    98da:	2608      	movs	r6, #8
    98dc:	e007      	b.n	98ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x566>
    98de:	f240 7143 	movw	r1, #1859	; 0x743
    98e2:	2036      	movs	r0, #54	; 0x36
    98e4:	f7fa fe68 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98e8:	2000      	movs	r0, #0
    98ea:	f7fb fda1 	bl	5430 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    98ee:	6860      	ldr	r0, [r4, #4]
    98f0:	f006 f9da 	bl	fca8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    98f4:	4630      	mov	r0, r6
    98f6:	bd70      	pop	{r4, r5, r6, pc}
    98f8:	20000158 	.word	0x20000158
    98fc:	20000204 	.word	0x20000204
    9900:	b570      	push	{r4, r5, r6, lr}
    9902:	4c1f      	ldr	r4, [pc, #124]	; (9980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5f8>)
    9904:	2000      	movs	r0, #0
    9906:	78a1      	ldrb	r1, [r4, #2]
    9908:	07c9      	lsls	r1, r1, #31
    990a:	d01d      	beq.n	9948 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c0>
    990c:	68a0      	ldr	r0, [r4, #8]
    990e:	f104 050c 	add.w	r5, r4, #12
    9912:	2300      	movs	r3, #0
    9914:	78c6      	ldrb	r6, [r0, #3]
    9916:	6868      	ldr	r0, [r5, #4]
    9918:	2105      	movs	r1, #5
    991a:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    991e:	3080      	adds	r0, #128	; 0x80
    9920:	f005 f929 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9924:	b188      	cbz	r0, 994a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c2>
    9926:	2e06      	cmp	r6, #6
    9928:	d00f      	beq.n	994a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c2>
    992a:	dc06      	bgt.n	993a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5b2>
    992c:	2e02      	cmp	r6, #2
    992e:	d00c      	beq.n	994a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c2>
    9930:	2e04      	cmp	r6, #4
    9932:	d00a      	beq.n	994a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c2>
    9934:	2e05      	cmp	r6, #5
    9936:	d106      	bne.n	9946 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5be>
    9938:	e007      	b.n	994a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c2>
    993a:	2e0b      	cmp	r6, #11
    993c:	d005      	beq.n	994a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c2>
    993e:	2e0d      	cmp	r6, #13
    9940:	d003      	beq.n	994a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c2>
    9942:	2e11      	cmp	r6, #17
    9944:	d001      	beq.n	994a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c2>
    9946:	2008      	movs	r0, #8
    9948:	bd70      	pop	{r4, r5, r6, pc}
    994a:	68a0      	ldr	r0, [r4, #8]
    994c:	f7fc fe2c 	bl	65a8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9950:	b148      	cbz	r0, 9966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5de>
    9952:	68a0      	ldr	r0, [r4, #8]
    9954:	78c0      	ldrb	r0, [r0, #3]
    9956:	2826      	cmp	r0, #38	; 0x26
    9958:	d205      	bcs.n	9966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5de>
    995a:	490a      	ldr	r1, [pc, #40]	; (9984 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5fc>)
    995c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    9960:	b108      	cbz	r0, 9966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5de>
    9962:	4780      	blx	r0
    9964:	e002      	b.n	996c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5e4>
    9966:	2000      	movs	r0, #0
    9968:	f000 fc02 	bl	a170 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    996c:	686a      	ldr	r2, [r5, #4]
    996e:	e9f2 133c 	ldrd	r1, r3, [r2, #240]!	; 0xf0
    9972:	1c49      	adds	r1, r1, #1
    9974:	f143 0300 	adc.w	r3, r3, #0
    9978:	e9c2 1300 	strd	r1, r3, [r2]
    997c:	bd70      	pop	{r4, r5, r6, pc}
    997e:	0000      	.short	0x0000
    9980:	20000158 	.word	0x20000158
    9984:	2000016c 	.word	0x2000016c
    9988:	b570      	push	{r4, r5, r6, lr}
    998a:	4d12      	ldr	r5, [pc, #72]	; (99d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x64c>)
    998c:	78a8      	ldrb	r0, [r5, #2]
    998e:	0700      	lsls	r0, r0, #28
    9990:	d519      	bpl.n	99c6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x63e>
    9992:	f105 040c 	add.w	r4, r5, #12
    9996:	2100      	movs	r1, #0
    9998:	6860      	ldr	r0, [r4, #4]
    999a:	f890 0114 	ldrb.w	r0, [r0, #276]	; 0x114
    999e:	f001 fa01 	bl	ada4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a1c>
    99a2:	6860      	ldr	r0, [r4, #4]
    99a4:	3080      	adds	r0, #128	; 0x80
    99a6:	f006 f94f 	bl	fc48 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    99aa:	b168      	cbz	r0, 99c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x640>
    99ac:	6860      	ldr	r0, [r4, #4]
    99ae:	21fe      	movs	r1, #254	; 0xfe
    99b0:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
    99b4:	f890 1090 	ldrb.w	r1, [r0, #144]	; 0x90
    99b8:	2908      	cmp	r1, #8
    99ba:	d104      	bne.n	99c6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x63e>
    99bc:	2102      	movs	r1, #2
    99be:	7029      	strb	r1, [r5, #0]
    99c0:	2100      	movs	r1, #0
    99c2:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
    99c6:	bd70      	pop	{r4, r5, r6, pc}
    99c8:	f240 714f 	movw	r1, #1871	; 0x74f
    99cc:	2036      	movs	r0, #54	; 0x36
    99ce:	f7fa fdf3 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99d2:	0000      	.short	0x0000
    99d4:	20000158 	.word	0x20000158
    99d8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    99da:	4606      	mov	r6, r0
    99dc:	4668      	mov	r0, sp
    99de:	f7fb fba9 	bl	5134 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    99e2:	b328      	cbz	r0, 9a30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6a8>
    99e4:	2222      	movs	r2, #34	; 0x22
    99e6:	2100      	movs	r1, #0
    99e8:	9800      	ldr	r0, [sp, #0]
    99ea:	f003 fea0 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    99ee:	2103      	movs	r1, #3
    99f0:	9800      	ldr	r0, [sp, #0]
    99f2:	f005 fb5e 	bl	f0b2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    99f6:	9800      	ldr	r0, [sp, #0]
    99f8:	7801      	ldrb	r1, [r0, #0]
    99fa:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    99fe:	7001      	strb	r1, [r0, #0]
    9a00:	4631      	mov	r1, r6
    9a02:	f7fc fde1 	bl	65c8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9a06:	2100      	movs	r1, #0
    9a08:	4c73      	ldr	r4, [pc, #460]	; (9bd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x850>)
    9a0a:	f644 152f 	movw	r5, #18735	; 0x492f
    9a0e:	2e19      	cmp	r6, #25
    9a10:	d271      	bcs.n	9af6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x76e>
    9a12:	e8df f006 	tbb	[pc, r6]
    9a16:	1c24      	.short	0x1c24
    9a18:	d9d94c10 	.word	0xd9d94c10
    9a1c:	7d7116d2 	.word	0x7d7116d2
    9a20:	d965d2d2 	.word	0xd965d2d2
    9a24:	c6d9d9d9 	.word	0xc6d9d9d9
    9a28:	9191d2d2 	.word	0x9191d2d2
    9a2c:	00b3d9aa 	.word	0x00b3d9aa
    9a30:	f640 01ef 	movw	r1, #2287	; 0x8ef
    9a34:	e0cd      	b.n	9bd2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x84a>
    9a36:	6860      	ldr	r0, [r4, #4]
    9a38:	9900      	ldr	r1, [sp, #0]
    9a3a:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    9a3e:	7108      	strb	r0, [r1, #4]
    9a40:	e0bb      	b.n	9bba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x832>
    9a42:	6861      	ldr	r1, [r4, #4]
    9a44:	9800      	ldr	r0, [sp, #0]
    9a46:	f891 1116 	ldrb.w	r1, [r1, #278]	; 0x116
    9a4a:	7101      	strb	r1, [r0, #4]
    9a4c:	e0b5      	b.n	9bba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x832>
    9a4e:	6860      	ldr	r0, [r4, #4]
    9a50:	f8d0 11f8 	ldr.w	r1, [r0, #504]	; 0x1f8
    9a54:	9800      	ldr	r0, [sp, #0]
    9a56:	1c49      	adds	r1, r1, #1
    9a58:	f005 fb06 	bl	f068 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    9a5c:	e0ad      	b.n	9bba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x832>
    9a5e:	6860      	ldr	r0, [r4, #4]
    9a60:	9d00      	ldr	r5, [sp, #0]
    9a62:	f8d0 1210 	ldr.w	r1, [r0, #528]	; 0x210
    9a66:	f8b0 0208 	ldrh.w	r0, [r0, #520]	; 0x208
    9a6a:	f005 fa19 	bl	eea0 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    9a6e:	7128      	strb	r0, [r5, #4]
    9a70:	6860      	ldr	r0, [r4, #4]
    9a72:	9d00      	ldr	r5, [sp, #0]
    9a74:	f500 7003 	add.w	r0, r0, #524	; 0x20c
    9a78:	c803      	ldmia	r0, {r0, r1}
    9a7a:	f005 fa02 	bl	ee82 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    9a7e:	7168      	strb	r0, [r5, #5]
    9a80:	0a00      	lsrs	r0, r0, #8
    9a82:	71a8      	strb	r0, [r5, #6]
    9a84:	6860      	ldr	r0, [r4, #4]
    9a86:	9d00      	ldr	r5, [sp, #0]
    9a88:	f8d0 0210 	ldr.w	r0, [r0, #528]	; 0x210
    9a8c:	f005 f85a 	bl	eb44 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    9a90:	71e8      	strb	r0, [r5, #7]
    9a92:	0a00      	lsrs	r0, r0, #8
    9a94:	7228      	strb	r0, [r5, #8]
    9a96:	6862      	ldr	r2, [r4, #4]
    9a98:	9800      	ldr	r0, [sp, #0]
    9a9a:	f8b2 1214 	ldrh.w	r1, [r2, #532]	; 0x214
    9a9e:	7241      	strb	r1, [r0, #9]
    9aa0:	0a09      	lsrs	r1, r1, #8
    9aa2:	7281      	strb	r1, [r0, #10]
    9aa4:	f8b2 1216 	ldrh.w	r1, [r2, #534]	; 0x216
    9aa8:	f005 fae3 	bl	f072 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    9aac:	e085      	b.n	9bba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x832>
    9aae:	6861      	ldr	r1, [r4, #4]
    9ab0:	9800      	ldr	r0, [sp, #0]
    9ab2:	f201 2119 	addw	r1, r1, #537	; 0x219
    9ab6:	f005 fae7 	bl	f088 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    9aba:	6861      	ldr	r1, [r4, #4]
    9abc:	9800      	ldr	r0, [sp, #0]
    9abe:	f201 2121 	addw	r1, r1, #545	; 0x221
    9ac2:	f005 fada 	bl	f07a <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    9ac6:	6861      	ldr	r1, [r4, #4]
    9ac8:	9800      	ldr	r0, [sp, #0]
    9aca:	f201 2133 	addw	r1, r1, #563	; 0x233
    9ace:	f005 fae0 	bl	f092 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    9ad2:	6861      	ldr	r1, [r4, #4]
    9ad4:	9800      	ldr	r0, [sp, #0]
    9ad6:	f501 7184 	add.w	r1, r1, #264	; 0x108
    9ada:	f005 fad1 	bl	f080 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    9ade:	e06c      	b.n	9bba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x832>
    9ae0:	9800      	ldr	r0, [sp, #0]
    9ae2:	220c      	movs	r2, #12
    9ae4:	7102      	strb	r2, [r0, #4]
    9ae6:	2259      	movs	r2, #89	; 0x59
    9ae8:	7142      	strb	r2, [r0, #5]
    9aea:	7181      	strb	r1, [r0, #6]
    9aec:	21d8      	movs	r1, #216	; 0xd8
    9aee:	71c1      	strb	r1, [r0, #7]
    9af0:	2111      	movs	r1, #17
    9af2:	7201      	strb	r1, [r0, #8]
    9af4:	e061      	b.n	9bba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x832>
    9af6:	e067      	b.n	9bc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x840>
    9af8:	f001 fed8 	bl	b8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9afc:	4028      	ands	r0, r5
    9afe:	f001 0106 	and.w	r1, r1, #6
    9b02:	e9cd 0101 	strd	r0, r1, [sp, #4]
    9b06:	a901      	add	r1, sp, #4
    9b08:	9800      	ldr	r0, [sp, #0]
    9b0a:	f005 fac8 	bl	f09e <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9b0e:	e054      	b.n	9bba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x832>
    9b10:	f001 fecc 	bl	b8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b14:	4028      	ands	r0, r5
    9b16:	f001 0106 	and.w	r1, r1, #6
    9b1a:	e9cd 0101 	strd	r0, r1, [sp, #4]
    9b1e:	6861      	ldr	r1, [r4, #4]
    9b20:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9b24:	f891 10de 	ldrb.w	r1, [r1, #222]	; 0xde
    9b28:	4008      	ands	r0, r1
    9b2a:	f88d 0004 	strb.w	r0, [sp, #4]
    9b2e:	a901      	add	r1, sp, #4
    9b30:	9800      	ldr	r0, [sp, #0]
    9b32:	f005 fab9 	bl	f0a8 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9b36:	e040      	b.n	9bba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x832>
    9b38:	6860      	ldr	r0, [r4, #4]
    9b3a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9b3e:	9800      	ldr	r0, [sp, #0]
    9b40:	f005 fac9 	bl	f0d6 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9b44:	6860      	ldr	r0, [r4, #4]
    9b46:	f8b0 1116 	ldrh.w	r1, [r0, #278]	; 0x116
    9b4a:	9800      	ldr	r0, [sp, #0]
    9b4c:	f005 fac7 	bl	f0de <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9b50:	6860      	ldr	r0, [r4, #4]
    9b52:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    9b56:	9800      	ldr	r0, [sp, #0]
    9b58:	f005 fab5 	bl	f0c6 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9b5c:	6860      	ldr	r0, [r4, #4]
    9b5e:	f8b0 1118 	ldrh.w	r1, [r0, #280]	; 0x118
    9b62:	9800      	ldr	r0, [sp, #0]
    9b64:	f005 fab3 	bl	f0ce <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9b68:	e027      	b.n	9bba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x832>
    9b6a:	6862      	ldr	r2, [r4, #4]
    9b6c:	9800      	ldr	r0, [sp, #0]
    9b6e:	f892 112e 	ldrb.w	r1, [r2, #302]	; 0x12e
    9b72:	7101      	strb	r1, [r0, #4]
    9b74:	f892 112f 	ldrb.w	r1, [r2, #303]	; 0x12f
    9b78:	7141      	strb	r1, [r0, #5]
    9b7a:	e01e      	b.n	9bba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x832>
    9b7c:	6860      	ldr	r0, [r4, #4]
    9b7e:	f890 0203 	ldrb.w	r0, [r0, #515]	; 0x203
    9b82:	f005 f89d 	bl	ecc0 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    9b86:	4601      	mov	r1, r0
    9b88:	9800      	ldr	r0, [sp, #0]
    9b8a:	f005 fab0 	bl	f0ee <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    9b8e:	6860      	ldr	r0, [r4, #4]
    9b90:	f890 0202 	ldrb.w	r0, [r0, #514]	; 0x202
    9b94:	f005 f894 	bl	ecc0 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    9b98:	4601      	mov	r1, r0
    9b9a:	9800      	ldr	r0, [sp, #0]
    9b9c:	f005 fa91 	bl	f0c2 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    9ba0:	e00b      	b.n	9bba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x832>
    9ba2:	6860      	ldr	r0, [r4, #4]
    9ba4:	f890 1113 	ldrb.w	r1, [r0, #275]	; 0x113
    9ba8:	9800      	ldr	r0, [sp, #0]
    9baa:	f005 fa59 	bl	f060 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9bae:	6860      	ldr	r0, [r4, #4]
    9bb0:	f890 1112 	ldrb.w	r1, [r0, #274]	; 0x112
    9bb4:	9800      	ldr	r0, [sp, #0]
    9bb6:	f005 fa55 	bl	f064 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    9bba:	f7fb fa95 	bl	50e8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9bbe:	b130      	cbz	r0, 9bce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x846>
    9bc0:	9800      	ldr	r0, [sp, #0]
    9bc2:	f7ff fc5d 	bl	9480 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    9bc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9bc8:	f44f 6118 	mov.w	r1, #2432	; 0x980
    9bcc:	e001      	b.n	9bd2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x84a>
    9bce:	f640 1186 	movw	r1, #2438	; 0x986
    9bd2:	2036      	movs	r0, #54	; 0x36
    9bd4:	f7fa fcf0 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bd8:	20000164 	.word	0x20000164
    9bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9be0:	4e29      	ldr	r6, [pc, #164]	; (9c88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x900>)
    9be2:	4680      	mov	r8, r0
    9be4:	460d      	mov	r5, r1
    9be6:	8870      	ldrh	r0, [r6, #2]
    9be8:	f106 040c 	add.w	r4, r6, #12
    9bec:	05c1      	lsls	r1, r0, #23
    9bee:	6860      	ldr	r0, [r4, #4]
    9bf0:	f04f 0700 	mov.w	r7, #0
    9bf4:	d502      	bpl.n	9bfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x874>
    9bf6:	f8a0 70be 	strh.w	r7, [r0, #190]	; 0xbe
    9bfa:	e004      	b.n	9c06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x87e>
    9bfc:	f8b0 10be 	ldrh.w	r1, [r0, #190]	; 0xbe
    9c00:	1c49      	adds	r1, r1, #1
    9c02:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
    9c06:	f006 f8b9 	bl	fd7c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x150>
    9c0a:	b1f8      	cbz	r0, 9c4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8c4>
    9c0c:	8870      	ldrh	r0, [r6, #2]
    9c0e:	0500      	lsls	r0, r0, #20
    9c10:	d506      	bpl.n	9c20 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x898>
    9c12:	6860      	ldr	r0, [r4, #4]
    9c14:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    9c18:	b111      	cbz	r1, 9c20 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x898>
    9c1a:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
    9c1e:	e015      	b.n	9c4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8c4>
    9c20:	6860      	ldr	r0, [r4, #4]
    9c22:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    9c26:	1c49      	adds	r1, r1, #1
    9c28:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
    9c2c:	f006 f82d 	bl	fc8a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    9c30:	6861      	ldr	r1, [r4, #4]
    9c32:	e9d1 022c 	ldrd	r0, r2, [r1, #176]	; 0xb0
    9c36:	4290      	cmp	r0, r2
    9c38:	d308      	bcc.n	9c4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8c4>
    9c3a:	f501 70a1 	add.w	r0, r1, #322	; 0x142
    9c3e:	220c      	movs	r2, #12
    9c40:	f8c1 70b0 	str.w	r7, [r1, #176]	; 0xb0
    9c44:	f7fc fd72 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9c48:	f7fc fe62 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9c4c:	8870      	ldrh	r0, [r6, #2]
    9c4e:	f410 7f40 	tst.w	r0, #768	; 0x300
    9c52:	d008      	beq.n	9c66 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8de>
    9c54:	6860      	ldr	r0, [r4, #4]
    9c56:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
    9c5a:	b921      	cbnz	r1, 9c66 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8de>
    9c5c:	2101      	movs	r1, #1
    9c5e:	f880 1092 	strb.w	r1, [r0, #146]	; 0x92
    9c62:	f7fe fa75 	bl	8150 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    9c66:	ea58 0005 	orrs.w	r0, r8, r5
    9c6a:	d104      	bne.n	9c76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8ee>
    9c6c:	f7ff fe00 	bl	9870 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4e8>
    9c70:	4605      	mov	r5, r0
    9c72:	f7ff fc93 	bl	959c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x214>
    9c76:	4629      	mov	r1, r5
    9c78:	4640      	mov	r0, r8
    9c7a:	f000 ffd3 	bl	ac24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x189c>
    9c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9c82:	f7fb ba1b 	b.w	50bc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9c86:	0000      	.short	0x0000
    9c88:	20000158 	.word	0x20000158
    9c8c:	4813      	ldr	r0, [pc, #76]	; (9cdc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x954>)
    9c8e:	6840      	ldr	r0, [r0, #4]
    9c90:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
    9c94:	b129      	cbz	r1, 9ca2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x91a>
    9c96:	f8b0 10c4 	ldrh.w	r1, [r0, #196]	; 0xc4
    9c9a:	f8b0 20c6 	ldrh.w	r2, [r0, #198]	; 0xc6
    9c9e:	4291      	cmp	r1, r2
    9ca0:	d215      	bcs.n	9cce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x946>
    9ca2:	f890 10cc 	ldrb.w	r1, [r0, #204]	; 0xcc
    9ca6:	b129      	cbz	r1, 9cb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x92c>
    9ca8:	f8b0 10ca 	ldrh.w	r1, [r0, #202]	; 0xca
    9cac:	f8b0 20c6 	ldrh.w	r2, [r0, #198]	; 0xc6
    9cb0:	4291      	cmp	r1, r2
    9cb2:	d20c      	bcs.n	9cce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x946>
    9cb4:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
    9cb8:	f8b0 10c0 	ldrh.w	r1, [r0, #192]	; 0xc0
    9cbc:	428a      	cmp	r2, r1
    9cbe:	d206      	bcs.n	9cce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x946>
    9cc0:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
    9cc4:	f8b0 00be 	ldrh.w	r0, [r0, #190]	; 0xbe
    9cc8:	b11a      	cbz	r2, 9cd2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94a>
    9cca:	4288      	cmp	r0, r1
    9ccc:	d303      	bcc.n	9cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94e>
    9cce:	2001      	movs	r0, #1
    9cd0:	4770      	bx	lr
    9cd2:	2806      	cmp	r0, #6
    9cd4:	d2fb      	bcs.n	9cce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x946>
    9cd6:	2000      	movs	r0, #0
    9cd8:	4770      	bx	lr
    9cda:	0000      	.short	0x0000
    9cdc:	20000164 	.word	0x20000164
    9ce0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9ce2:	4c55      	ldr	r4, [pc, #340]	; (9e38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xab0>)
    9ce4:	6860      	ldr	r0, [r4, #4]
    9ce6:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
    9cea:	f88d 1000 	strb.w	r1, [sp]
    9cee:	9900      	ldr	r1, [sp, #0]
    9cf0:	9100      	str	r1, [sp, #0]
    9cf2:	f89d 1000 	ldrb.w	r1, [sp]
    9cf6:	2601      	movs	r6, #1
    9cf8:	2500      	movs	r5, #0
    9cfa:	b129      	cbz	r1, 9d08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x980>
    9cfc:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    9d00:	f004 ff92 	bl	ec28 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9d04:	2800      	cmp	r0, #0
    9d06:	d00a      	beq.n	9d1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x996>
    9d08:	6860      	ldr	r0, [r4, #4]
    9d0a:	f890 1218 	ldrb.w	r1, [r0, #536]	; 0x218
    9d0e:	b181      	cbz	r1, 9d32 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9aa>
    9d10:	f890 1093 	ldrb.w	r1, [r0, #147]	; 0x93
    9d14:	b149      	cbz	r1, 9d2a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a2>
    9d16:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
    9d1a:	b108      	cbz	r0, 9d20 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x998>
    9d1c:	200a      	movs	r0, #10
    9d1e:	e086      	b.n	9e2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa6>
    9d20:	f240 71c9 	movw	r1, #1993	; 0x7c9
    9d24:	2036      	movs	r0, #54	; 0x36
    9d26:	f7fa fc47 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d2a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9d2e:	f000 b885 	b.w	9e3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xab4>
    9d32:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    9d36:	b109      	cbz	r1, 9d3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b4>
    9d38:	2008      	movs	r0, #8
    9d3a:	e078      	b.n	9e2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa6>
    9d3c:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    9d40:	b179      	cbz	r1, 9d62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9da>
    9d42:	f890 00cf 	ldrb.w	r0, [r0, #207]	; 0xcf
    9d46:	0780      	lsls	r0, r0, #30
    9d48:	d10a      	bne.n	9d60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9d8>
    9d4a:	200c      	movs	r0, #12
    9d4c:	f000 f966 	bl	a01c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    9d50:	6860      	ldr	r0, [r4, #4]
    9d52:	f820 5fc4 	strh.w	r5, [r0, #196]!
    9d56:	7106      	strb	r6, [r0, #4]
    9d58:	7ac1      	ldrb	r1, [r0, #11]
    9d5a:	f041 0101 	orr.w	r1, r1, #1
    9d5e:	72c1      	strb	r1, [r0, #11]
    9d60:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9d62:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    9d66:	f88d 1004 	strb.w	r1, [sp, #4]
    9d6a:	9901      	ldr	r1, [sp, #4]
    9d6c:	9101      	str	r1, [sp, #4]
    9d6e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9d72:	b141      	cbz	r1, 9d86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fe>
    9d74:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    9d78:	f88d 1000 	strb.w	r1, [sp]
    9d7c:	9900      	ldr	r1, [sp, #0]
    9d7e:	9100      	str	r1, [sp, #0]
    9d80:	f89d 1000 	ldrb.w	r1, [sp]
    9d84:	b391      	cbz	r1, 9dec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa64>
    9d86:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    9d8a:	2901      	cmp	r1, #1
    9d8c:	d1e8      	bne.n	9d60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9d8>
    9d8e:	f890 112d 	ldrb.w	r1, [r0, #301]	; 0x12d
    9d92:	f88d 1000 	strb.w	r1, [sp]
    9d96:	9900      	ldr	r1, [sp, #0]
    9d98:	9100      	str	r1, [sp, #0]
    9d9a:	f89d 1000 	ldrb.w	r1, [sp]
    9d9e:	2900      	cmp	r1, #0
    9da0:	d1de      	bne.n	9d60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9d8>
    9da2:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    9da6:	f004 ff3f 	bl	ec28 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9daa:	2800      	cmp	r0, #0
    9dac:	d1d8      	bne.n	9d60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9d8>
    9dae:	6860      	ldr	r0, [r4, #4]
    9db0:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    9db4:	f005 ff50 	bl	fc58 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9db8:	4605      	mov	r5, r0
    9dba:	6860      	ldr	r0, [r4, #4]
    9dbc:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    9dc0:	f005 ff4a 	bl	fc58 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9dc4:	4606      	mov	r6, r0
    9dc6:	6860      	ldr	r0, [r4, #4]
    9dc8:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    9dcc:	4628      	mov	r0, r5
    9dce:	f005 ff4e 	bl	fc6e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    9dd2:	b358      	cbz	r0, 9e2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa4>
    9dd4:	6860      	ldr	r0, [r4, #4]
    9dd6:	f890 112f 	ldrb.w	r1, [r0, #303]	; 0x12f
    9dda:	4630      	mov	r0, r6
    9ddc:	f005 ff47 	bl	fc6e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    9de0:	b320      	cbz	r0, 9e2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa4>
    9de2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9de6:	2000      	movs	r0, #0
    9de8:	f000 b8f2 	b.w	9fd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc48>
    9dec:	f890 108e 	ldrb.w	r1, [r0, #142]	; 0x8e
    9df0:	2924      	cmp	r1, #36	; 0x24
    9df2:	d019      	beq.n	9e28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa0>
    9df4:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    9df8:	2924      	cmp	r1, #36	; 0x24
    9dfa:	d015      	beq.n	9e28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa0>
    9dfc:	f05f 0300 	movs.w	r3, #0
    9e00:	f200 2202 	addw	r2, r0, #514	; 0x202
    9e04:	f500 7191 	add.w	r1, r0, #290	; 0x122
    9e08:	f005 fb18 	bl	f43c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9e0c:	6860      	ldr	r0, [r4, #4]
    9e0e:	4601      	mov	r1, r0
    9e10:	f880 5122 	strb.w	r5, [r0, #290]	; 0x122
    9e14:	f101 0230 	add.w	r2, r1, #48	; 0x30
    9e18:	8bd0      	ldrh	r0, [r2, #30]
    9e1a:	f8a1 0116 	strh.w	r0, [r1, #278]	; 0x116
    9e1e:	8c50      	ldrh	r0, [r2, #34]	; 0x22
    9e20:	f8a1 0118 	strh.w	r0, [r1, #280]	; 0x118
    9e24:	2014      	movs	r0, #20
    9e26:	e002      	b.n	9e2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa6>
    9e28:	2301      	movs	r3, #1
    9e2a:	e7e9      	b.n	9e00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa78>
    9e2c:	2016      	movs	r0, #22
    9e2e:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9e32:	f000 b8f3 	b.w	a01c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    9e36:	0000      	.short	0x0000
    9e38:	20000164 	.word	0x20000164
    9e3c:	b510      	push	{r4, lr}
    9e3e:	4c1e      	ldr	r4, [pc, #120]	; (9eb8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb30>)
    9e40:	6862      	ldr	r2, [r4, #4]
    9e42:	f892 011a 	ldrb.w	r0, [r2, #282]	; 0x11a
    9e46:	2808      	cmp	r0, #8
    9e48:	d20d      	bcs.n	9e66 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xade>
    9e4a:	f1c0 0108 	rsb	r1, r0, #8
    9e4e:	f200 2033 	addw	r0, r0, #563	; 0x233
    9e52:	b2c9      	uxtb	r1, r1
    9e54:	4410      	add	r0, r2
    9e56:	f7fa fc3f 	bl	46d8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9e5a:	6861      	ldr	r1, [r4, #4]
    9e5c:	f891 211a 	ldrb.w	r2, [r1, #282]	; 0x11a
    9e60:	4410      	add	r0, r2
    9e62:	f881 011a 	strb.w	r0, [r1, #282]	; 0x11a
    9e66:	6862      	ldr	r2, [r4, #4]
    9e68:	f892 011a 	ldrb.w	r0, [r2, #282]	; 0x11a
    9e6c:	3808      	subs	r0, #8
    9e6e:	2804      	cmp	r0, #4
    9e70:	d20d      	bcs.n	9e8e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb06>
    9e72:	f1c0 0104 	rsb	r1, r0, #4
    9e76:	f500 7084 	add.w	r0, r0, #264	; 0x108
    9e7a:	b2c9      	uxtb	r1, r1
    9e7c:	4410      	add	r0, r2
    9e7e:	f7fa fc2b 	bl	46d8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9e82:	6861      	ldr	r1, [r4, #4]
    9e84:	f891 211a 	ldrb.w	r2, [r1, #282]	; 0x11a
    9e88:	4410      	add	r0, r2
    9e8a:	f881 011a 	strb.w	r0, [r1, #282]	; 0x11a
    9e8e:	6860      	ldr	r0, [r4, #4]
    9e90:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    9e94:	290c      	cmp	r1, #12
    9e96:	d30e      	bcc.n	9eb6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb2e>
    9e98:	d005      	beq.n	9ea6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb1e>
    9e9a:	f640 11dc 	movw	r1, #2524	; 0x9dc
    9e9e:	f04f 0036 	mov.w	r0, #54	; 0x36
    9ea2:	f7fa fb89 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ea6:	2100      	movs	r1, #0
    9ea8:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
    9eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9eb0:	2003      	movs	r0, #3
    9eb2:	f000 b8b3 	b.w	a01c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc94>
    9eb6:	bd10      	pop	{r4, pc}
    9eb8:	20000164 	.word	0x20000164
    9ebc:	b570      	push	{r4, r5, r6, lr}
    9ebe:	4b20      	ldr	r3, [pc, #128]	; (9f40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbb8>)
    9ec0:	4602      	mov	r2, r0
    9ec2:	460c      	mov	r4, r1
    9ec4:	8858      	ldrh	r0, [r3, #2]
    9ec6:	4310      	orrs	r0, r2
    9ec8:	8058      	strh	r0, [r3, #2]
    9eca:	f103 000c 	add.w	r0, r3, #12
    9ece:	0791      	lsls	r1, r2, #30
    9ed0:	6840      	ldr	r0, [r0, #4]
    9ed2:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    9ed6:	d507      	bpl.n	9ee8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb60>
    9ed8:	b121      	cbz	r1, 9ee4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb5c>
    9eda:	f640 21ce 	movw	r1, #2766	; 0xace
    9ede:	2036      	movs	r0, #54	; 0x36
    9ee0:	f7fa fb6a 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ee4:	605c      	str	r4, [r3, #4]
    9ee6:	e003      	b.n	9ef0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb68>
    9ee8:	b101      	cbz	r1, 9eec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    9eea:	609c      	str	r4, [r3, #8]
    9eec:	0791      	lsls	r1, r2, #30
    9eee:	d515      	bpl.n	9f1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb94>
    9ef0:	78e1      	ldrb	r1, [r4, #3]
    9ef2:	2906      	cmp	r1, #6
    9ef4:	d002      	beq.n	9efc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb74>
    9ef6:	290b      	cmp	r1, #11
    9ef8:	d110      	bne.n	9f1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb94>
    9efa:	e008      	b.n	9f0e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb86>
    9efc:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    9f00:	2918      	cmp	r1, #24
    9f02:	d10b      	bne.n	9f1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb94>
    9f04:	2100      	movs	r1, #0
    9f06:	e9c0 113c 	strd	r1, r1, [r0, #240]	; 0xf0
    9f0a:	2101      	movs	r1, #1
    9f0c:	e004      	b.n	9f18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb90>
    9f0e:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    9f12:	2912      	cmp	r1, #18
    9f14:	d102      	bne.n	9f1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb94>
    9f16:	2100      	movs	r1, #0
    9f18:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
    9f1c:	0691      	lsls	r1, r2, #26
    9f1e:	d501      	bpl.n	9f24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9c>
    9f20:	2108      	movs	r1, #8
    9f22:	7059      	strb	r1, [r3, #1]
    9f24:	0611      	lsls	r1, r2, #24
    9f26:	d50a      	bpl.n	9f3e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbb6>
    9f28:	8b02      	ldrh	r2, [r0, #24]
    9f2a:	f8b0 1084 	ldrh.w	r1, [r0, #132]	; 0x84
    9f2e:	4620      	mov	r0, r4
    9f30:	f7ff fa88 	bl	9444 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbc>
    9f34:	4620      	mov	r0, r4
    9f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9f3a:	f7ff baa1 	b.w	9480 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    9f3e:	bd70      	pop	{r4, r5, r6, pc}
    9f40:	20000158 	.word	0x20000158
    9f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f48:	4c20      	ldr	r4, [pc, #128]	; (9fcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc44>)
    9f4a:	2501      	movs	r5, #1
    9f4c:	6862      	ldr	r2, [r4, #4]
    9f4e:	f892 0202 	ldrb.w	r0, [r2, #514]	; 0x202
    9f52:	b908      	cbnz	r0, 9f58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbd0>
    9f54:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
    9f58:	f892 1203 	ldrb.w	r1, [r2, #515]	; 0x203
    9f5c:	b909      	cbnz	r1, 9f62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbda>
    9f5e:	f892 106f 	ldrb.w	r1, [r2, #111]	; 0x6f
    9f62:	f882 006e 	strb.w	r0, [r2, #110]	; 0x6e
    9f66:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
    9f6a:	3266      	adds	r2, #102	; 0x66
    9f6c:	20ff      	movs	r0, #255	; 0xff
    9f6e:	7290      	strb	r0, [r2, #10]
    9f70:	2000      	movs	r0, #0
    9f72:	f000 f82d 	bl	9fd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc48>
    9f76:	6860      	ldr	r0, [r4, #4]
    9f78:	3030      	adds	r0, #48	; 0x30
    9f7a:	f005 fad0 	bl	f51e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9f7e:	4606      	mov	r6, r0
    9f80:	2104      	movs	r1, #4
    9f82:	6860      	ldr	r0, [r4, #4]
    9f84:	f7fe f8e4 	bl	8150 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    9f88:	6860      	ldr	r0, [r4, #4]
    9f8a:	3030      	adds	r0, #48	; 0x30
    9f8c:	f005 fac7 	bl	f51e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9f90:	4607      	mov	r7, r0
    9f92:	42be      	cmp	r6, r7
    9f94:	d20a      	bcs.n	9fac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc24>
    9f96:	f7f7 fe61 	bl	1c5c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9f9a:	4601      	mov	r1, r0
    9f9c:	1bb8      	subs	r0, r7, r6
    9f9e:	2865      	cmp	r0, #101	; 0x65
    9fa0:	d200      	bcs.n	9fa4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc1c>
    9fa2:	2065      	movs	r0, #101	; 0x65
    9fa4:	f7f7 fd30 	bl	1a08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9fa8:	b100      	cbz	r0, 9fac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc24>
    9faa:	2500      	movs	r5, #0
    9fac:	6860      	ldr	r0, [r4, #4]
    9fae:	f005 fa60 	bl	f472 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9fb2:	b138      	cbz	r0, 9fc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc3c>
    9fb4:	6863      	ldr	r3, [r4, #4]
    9fb6:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
    9fba:	f103 0130 	add.w	r1, r3, #48	; 0x30
    9fbe:	8818      	ldrh	r0, [r3, #0]
    9fc0:	f005 fa14 	bl	f3ec <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9fc4:	4628      	mov	r0, r5
    9fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fca:	0000      	.short	0x0000
    9fcc:	20000164 	.word	0x20000164
    9fd0:	b510      	push	{r4, lr}
    9fd2:	4c11      	ldr	r4, [pc, #68]	; (a018 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc90>)
    9fd4:	6861      	ldr	r1, [r4, #4]
    9fd6:	880a      	ldrh	r2, [r1, #0]
    9fd8:	f8a1 2190 	strh.w	r2, [r1, #400]	; 0x190
    9fdc:	f881 018e 	strb.w	r0, [r1, #398]	; 0x18e
    9fe0:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
    9fe4:	f005 fe38 	bl	fc58 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9fe8:	6861      	ldr	r1, [r4, #4]
    9fea:	f881 0192 	strb.w	r0, [r1, #402]	; 0x192
    9fee:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
    9ff2:	f005 fe31 	bl	fc58 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9ff6:	6861      	ldr	r1, [r4, #4]
    9ff8:	2211      	movs	r2, #17
    9ffa:	f881 0193 	strb.w	r0, [r1, #403]	; 0x193
    9ffe:	f501 70c2 	add.w	r0, r1, #388	; 0x184
    a002:	f7fc fb93 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a006:	6861      	ldr	r1, [r4, #4]
    a008:	2000      	movs	r0, #0
    a00a:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    a00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a012:	f7fc bc7d 	b.w	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a016:	0000      	.short	0x0000
    a018:	20000164 	.word	0x20000164
    a01c:	4910      	ldr	r1, [pc, #64]	; (a060 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcd8>)
    a01e:	280c      	cmp	r0, #12
    a020:	6849      	ldr	r1, [r1, #4]
    a022:	f881 0114 	strb.w	r0, [r1, #276]	; 0x114
    a026:	d016      	beq.n	a056 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcce>
    a028:	2813      	cmp	r0, #19
    a02a:	d014      	beq.n	a056 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcce>
    a02c:	2818      	cmp	r0, #24
    a02e:	d012      	beq.n	a056 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcce>
    a030:	2200      	movs	r2, #0
    a032:	2811      	cmp	r0, #17
    a034:	d010      	beq.n	a058 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcd0>
    a036:	2807      	cmp	r0, #7
    a038:	d00d      	beq.n	a056 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcce>
    a03a:	2809      	cmp	r0, #9
    a03c:	d00b      	beq.n	a056 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcce>
    a03e:	2815      	cmp	r0, #21
    a040:	d00a      	beq.n	a058 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcd0>
    a042:	2801      	cmp	r0, #1
    a044:	d007      	beq.n	a056 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcce>
    a046:	2800      	cmp	r0, #0
    a048:	d005      	beq.n	a056 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcce>
    a04a:	2802      	cmp	r0, #2
    a04c:	d003      	beq.n	a056 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcce>
    a04e:	f821 2fc4 	strh.w	r2, [r1, #196]!
    a052:	2001      	movs	r0, #1
    a054:	7108      	strb	r0, [r1, #4]
    a056:	4770      	bx	lr
    a058:	f8a1 20ca 	strh.w	r2, [r1, #202]	; 0xca
    a05c:	4770      	bx	lr
    a05e:	0000      	.short	0x0000
    a060:	20000164 	.word	0x20000164
    a064:	b538      	push	{r3, r4, r5, lr}
    a066:	4c11      	ldr	r4, [pc, #68]	; (a0ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd24>)
    a068:	6862      	ldr	r2, [r4, #4]
    a06a:	f8b2 206e 	ldrh.w	r2, [r2, #110]	; 0x6e
    a06e:	f8ad 2000 	strh.w	r2, [sp]
    a072:	f004 fe5a 	bl	ed2a <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    a076:	f89d 3000 	ldrb.w	r3, [sp]
    a07a:	b2c2      	uxtb	r2, r0
    a07c:	2100      	movs	r1, #0
    a07e:	4293      	cmp	r3, r2
    a080:	d003      	beq.n	a08a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd02>
    a082:	6863      	ldr	r3, [r4, #4]
    a084:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
    a088:	e002      	b.n	a090 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd08>
    a08a:	6862      	ldr	r2, [r4, #4]
    a08c:	f882 1202 	strb.w	r1, [r2, #514]	; 0x202
    a090:	f89d 2001 	ldrb.w	r2, [sp, #1]
    a094:	f3c0 2007 	ubfx	r0, r0, #8, #8
    a098:	4282      	cmp	r2, r0
    a09a:	d003      	beq.n	a0a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd1c>
    a09c:	6861      	ldr	r1, [r4, #4]
    a09e:	f881 0203 	strb.w	r0, [r1, #515]	; 0x203
    a0a2:	bd38      	pop	{r3, r4, r5, pc}
    a0a4:	6860      	ldr	r0, [r4, #4]
    a0a6:	f880 1203 	strb.w	r1, [r0, #515]	; 0x203
    a0aa:	bd38      	pop	{r3, r4, r5, pc}
    a0ac:	20000164 	.word	0x20000164
    a0b0:	b570      	push	{r4, r5, r6, lr}
    a0b2:	4c0d      	ldr	r4, [pc, #52]	; (a0e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd60>)
    a0b4:	6861      	ldr	r1, [r4, #4]
    a0b6:	f891 008d 	ldrb.w	r0, [r1, #141]	; 0x8d
    a0ba:	2813      	cmp	r0, #19
    a0bc:	d001      	beq.n	a0c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd3a>
    a0be:	2002      	movs	r0, #2
    a0c0:	bd70      	pop	{r4, r5, r6, pc}
    a0c2:	4d09      	ldr	r5, [pc, #36]	; (a0e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd60>)
    a0c4:	f201 213b 	addw	r1, r1, #571	; 0x23b
    a0c8:	3d0c      	subs	r5, #12
    a0ca:	68a8      	ldr	r0, [r5, #8]
    a0cc:	f004 ff7a 	bl	efc4 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    a0d0:	6861      	ldr	r1, [r4, #4]
    a0d2:	68a8      	ldr	r0, [r5, #8]
    a0d4:	f501 7186 	add.w	r1, r1, #268	; 0x10c
    a0d8:	f004 ff71 	bl	efbe <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    a0dc:	6861      	ldr	r1, [r4, #4]
    a0de:	2016      	movs	r0, #22
    a0e0:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
    a0e4:	2000      	movs	r0, #0
    a0e6:	bd70      	pop	{r4, r5, r6, pc}
    a0e8:	20000164 	.word	0x20000164
    a0ec:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a0ee:	4c1f      	ldr	r4, [pc, #124]	; (a16c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde4>)
    a0f0:	2300      	movs	r3, #0
    a0f2:	2107      	movs	r1, #7
    a0f4:	6860      	ldr	r0, [r4, #4]
    a0f6:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a0fa:	3080      	adds	r0, #128	; 0x80
    a0fc:	f004 fd3b 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a100:	b388      	cbz	r0, a166 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdde>
    a102:	f1a4 000c 	sub.w	r0, r4, #12
    a106:	4669      	mov	r1, sp
    a108:	6880      	ldr	r0, [r0, #8]
    a10a:	f004 ff60 	bl	efce <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a10e:	f001 fbcd 	bl	b8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a112:	f644 122f 	movw	r2, #18735	; 0x492f
    a116:	e9dd 5600 	ldrd	r5, r6, [sp]
    a11a:	4002      	ands	r2, r0
    a11c:	f001 0306 	and.w	r3, r1, #6
    a120:	6860      	ldr	r0, [r4, #4]
    a122:	4015      	ands	r5, r2
    a124:	4601      	mov	r1, r0
    a126:	401e      	ands	r6, r3
    a128:	f840 5fde 	str.w	r5, [r0, #222]!
    a12c:	2500      	movs	r5, #0
    a12e:	6046      	str	r6, [r0, #4]
    a130:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
    a134:	f881 5133 	strb.w	r5, [r1, #307]	; 0x133
    a138:	8808      	ldrh	r0, [r1, #0]
    a13a:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
    a13e:	f881 519e 	strb.w	r5, [r1, #414]	; 0x19e
    a142:	9a00      	ldr	r2, [sp, #0]
    a144:	f8c1 21a2 	str.w	r2, [r1, #418]	; 0x1a2
    a148:	9a01      	ldr	r2, [sp, #4]
    a14a:	f8c1 21a6 	str.w	r2, [r1, #422]	; 0x1a6
    a14e:	f501 70ca 	add.w	r0, r1, #404	; 0x194
    a152:	2205      	movs	r2, #5
    a154:	f7fc faea 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a158:	f7fc fbda 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a15c:	6860      	ldr	r0, [r4, #4]
    a15e:	f880 508d 	strb.w	r5, [r0, #141]	; 0x8d
    a162:	2000      	movs	r0, #0
    a164:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a166:	e7ff      	b.n	a168 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde0>
    a168:	2001      	movs	r0, #1
    a16a:	e7fb      	b.n	a164 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xddc>
    a16c:	20000164 	.word	0x20000164
    a170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a174:	4e1b      	ldr	r6, [pc, #108]	; (a1e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe5c>)
    a176:	2500      	movs	r5, #0
    a178:	f106 010c 	add.w	r1, r6, #12
    a17c:	2703      	movs	r7, #3
    a17e:	f8d1 c004 	ldr.w	ip, [r1, #4]
    a182:	2401      	movs	r4, #1
    a184:	b1a0      	cbz	r0, a1b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe28>
    a186:	68b0      	ldr	r0, [r6, #8]
    a188:	78c0      	ldrb	r0, [r0, #3]
    a18a:	f88c 0111 	strb.w	r0, [ip, #273]	; 0x111
    a18e:	fa04 f000 	lsl.w	r0, r4, r0
    a192:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    a196:	b130      	cbz	r0, a1a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe1e>
    a198:	f88c 708d 	strb.w	r7, [ip, #141]	; 0x8d
    a19c:	f8ac 50c4 	strh.w	r5, [ip, #196]	; 0xc4
    a1a0:	f88c 40c8 	strb.w	r4, [ip, #200]	; 0xc8
    a1a4:	e019      	b.n	a1da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe52>
    a1a6:	f240 51cf 	movw	r1, #1487	; 0x5cf
    a1aa:	2036      	movs	r0, #54	; 0x36
    a1ac:	f7fa fa04 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1b0:	4688      	mov	r8, r1
    a1b2:	2300      	movs	r3, #0
    a1b4:	f89c 208e 	ldrb.w	r2, [ip, #142]	; 0x8e
    a1b8:	f10c 0080 	add.w	r0, ip, #128	; 0x80
    a1bc:	4619      	mov	r1, r3
    a1be:	f004 fcda 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1c2:	b168      	cbz	r0, a1e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe58>
    a1c4:	68b0      	ldr	r0, [r6, #8]
    a1c6:	78c1      	ldrb	r1, [r0, #3]
    a1c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a1cc:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
    a1d0:	f800 7f8e 	strb.w	r7, [r0, #142]!
    a1d4:	8785      	strh	r5, [r0, #60]	; 0x3c
    a1d6:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    a1da:	2000      	movs	r0, #0
    a1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a1e0:	2001      	movs	r0, #1
    a1e2:	e7fb      	b.n	a1dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe54>
    a1e4:	20000158 	.word	0x20000158
    a1e8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a1ec:	4c32      	ldr	r4, [pc, #200]	; (a2b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf30>)
    a1ee:	2300      	movs	r3, #0
    a1f0:	4619      	mov	r1, r3
    a1f2:	6860      	ldr	r0, [r4, #4]
    a1f4:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
    a1f8:	3080      	adds	r0, #128	; 0x80
    a1fa:	f004 fcbc 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1fe:	b318      	cbz	r0, a248 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xec0>
    a200:	f1a4 050c 	sub.w	r5, r4, #12
    a204:	68a8      	ldr	r0, [r5, #8]
    a206:	f004 fef7 	bl	eff8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a20a:	b300      	cbz	r0, a24e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xec6>
    a20c:	68a8      	ldr	r0, [r5, #8]
    a20e:	f004 fee9 	bl	efe4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a212:	4607      	mov	r7, r0
    a214:	68a8      	ldr	r0, [r5, #8]
    a216:	f004 fee9 	bl	efec <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a21a:	4680      	mov	r8, r0
    a21c:	68a8      	ldr	r0, [r5, #8]
    a21e:	f004 fedf 	bl	efe0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a222:	4606      	mov	r6, r0
    a224:	68a8      	ldr	r0, [r5, #8]
    a226:	f004 fedf 	bl	efe8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a22a:	4601      	mov	r1, r0
    a22c:	9700      	str	r7, [sp, #0]
    a22e:	6860      	ldr	r0, [r4, #4]
    a230:	4643      	mov	r3, r8
    a232:	4632      	mov	r2, r6
    a234:	3030      	adds	r0, #48	; 0x30
    a236:	f005 f9ac 	bl	f592 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a23a:	6863      	ldr	r3, [r4, #4]
    a23c:	2501      	movs	r5, #1
    a23e:	f893 008d 	ldrb.w	r0, [r3, #141]	; 0x8d
    a242:	281c      	cmp	r0, #28
    a244:	d008      	beq.n	a258 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xed0>
    a246:	e009      	b.n	a25c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xed4>
    a248:	2001      	movs	r0, #1
    a24a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a24e:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a252:	2000      	movs	r0, #0
    a254:	f7ff bf8c 	b.w	a170 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    a258:	f883 5064 	strb.w	r5, [r3, #100]	; 0x64
    a25c:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    a260:	2600      	movs	r6, #0
    a262:	2801      	cmp	r0, #1
    a264:	d011      	beq.n	a28a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf02>
    a266:	f893 0123 	ldrb.w	r0, [r3, #291]	; 0x123
    a26a:	f88d 0004 	strb.w	r0, [sp, #4]
    a26e:	9801      	ldr	r0, [sp, #4]
    a270:	9001      	str	r0, [sp, #4]
    a272:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a276:	b940      	cbnz	r0, a28a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf02>
    a278:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
    a27c:	f88d 0000 	strb.w	r0, [sp]
    a280:	9800      	ldr	r0, [sp, #0]
    a282:	9000      	str	r0, [sp, #0]
    a284:	f89d 0000 	ldrb.w	r0, [sp]
    a288:	b140      	cbz	r0, a29c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf14>
    a28a:	201e      	movs	r0, #30
    a28c:	f883 008e 	strb.w	r0, [r3, #142]	; 0x8e
    a290:	6860      	ldr	r0, [r4, #4]
    a292:	f820 6fca 	strh.w	r6, [r0, #202]!
    a296:	7085      	strb	r5, [r0, #2]
    a298:	2000      	movs	r0, #0
    a29a:	e7d6      	b.n	a24a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xec2>
    a29c:	201d      	movs	r0, #29
    a29e:	f883 008e 	strb.w	r0, [r3, #142]	; 0x8e
    a2a2:	f503 72b1 	add.w	r2, r3, #354	; 0x162
    a2a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
    a2aa:	8818      	ldrh	r0, [r3, #0]
    a2ac:	f005 f978 	bl	f5a0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a2b0:	f7fc fb2e 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a2b4:	e7ec      	b.n	a290 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf08>
    a2b6:	0000      	.short	0x0000
    a2b8:	20000164 	.word	0x20000164
    a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a2c0:	4c1b      	ldr	r4, [pc, #108]	; (a330 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfa8>)
    a2c2:	2300      	movs	r3, #0
    a2c4:	210a      	movs	r1, #10
    a2c6:	6860      	ldr	r0, [r4, #4]
    a2c8:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a2cc:	3080      	adds	r0, #128	; 0x80
    a2ce:	f004 fc52 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2d2:	b358      	cbz	r0, a32c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfa4>
    a2d4:	f1a4 050c 	sub.w	r5, r4, #12
    a2d8:	68a8      	ldr	r0, [r5, #8]
    a2da:	f004 fe8d 	bl	eff8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a2de:	b1d0      	cbz	r0, a316 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8e>
    a2e0:	68a8      	ldr	r0, [r5, #8]
    a2e2:	f004 fe7f 	bl	efe4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a2e6:	4680      	mov	r8, r0
    a2e8:	68a8      	ldr	r0, [r5, #8]
    a2ea:	f004 fe7f 	bl	efec <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a2ee:	4607      	mov	r7, r0
    a2f0:	68a8      	ldr	r0, [r5, #8]
    a2f2:	f004 fe75 	bl	efe0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a2f6:	4606      	mov	r6, r0
    a2f8:	68a8      	ldr	r0, [r5, #8]
    a2fa:	f004 fe75 	bl	efe8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a2fe:	4601      	mov	r1, r0
    a300:	f8cd 8000 	str.w	r8, [sp]
    a304:	6860      	ldr	r0, [r4, #4]
    a306:	463b      	mov	r3, r7
    a308:	4632      	mov	r2, r6
    a30a:	3030      	adds	r0, #48	; 0x30
    a30c:	f005 f941 	bl	f592 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a310:	6860      	ldr	r0, [r4, #4]
    a312:	f005 f8ae 	bl	f472 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a316:	6861      	ldr	r1, [r4, #4]
    a318:	2000      	movs	r0, #0
    a31a:	f881 00c8 	strb.w	r0, [r1, #200]	; 0xc8
    a31e:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
    a322:	f7ff fa51 	bl	97c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x440>
    a326:	2000      	movs	r0, #0
    a328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a32c:	2001      	movs	r0, #1
    a32e:	e7fb      	b.n	a328 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfa0>
    a330:	20000164 	.word	0x20000164
    a334:	b510      	push	{r4, lr}
    a336:	4c0b      	ldr	r4, [pc, #44]	; (a364 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfdc>)
    a338:	2300      	movs	r3, #0
    a33a:	4619      	mov	r1, r3
    a33c:	6860      	ldr	r0, [r4, #4]
    a33e:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
    a342:	3080      	adds	r0, #128	; 0x80
    a344:	f004 fc17 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a348:	b150      	cbz	r0, a360 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfd8>
    a34a:	6860      	ldr	r0, [r4, #4]
    a34c:	2100      	movs	r1, #0
    a34e:	f820 1fca 	strh.w	r1, [r0, #202]!
    a352:	2101      	movs	r1, #1
    a354:	7081      	strb	r1, [r0, #2]
    a356:	2102      	movs	r1, #2
    a358:	f800 1c3c 	strb.w	r1, [r0, #-60]
    a35c:	2000      	movs	r0, #0
    a35e:	bd10      	pop	{r4, pc}
    a360:	2001      	movs	r0, #1
    a362:	bd10      	pop	{r4, pc}
    a364:	20000164 	.word	0x20000164
    a368:	b510      	push	{r4, lr}
    a36a:	4c0a      	ldr	r4, [pc, #40]	; (a394 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x100c>)
    a36c:	2300      	movs	r3, #0
    a36e:	2109      	movs	r1, #9
    a370:	6860      	ldr	r0, [r4, #4]
    a372:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a376:	3080      	adds	r0, #128	; 0x80
    a378:	f004 fbfd 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a37c:	2800      	cmp	r0, #0
    a37e:	d007      	beq.n	a390 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1008>
    a380:	6860      	ldr	r0, [r4, #4]
    a382:	2100      	movs	r1, #0
    a384:	f800 1fbc 	strb.w	r1, [r0, #188]!
    a388:	7301      	strb	r1, [r0, #12]
    a38a:	f800 1c2f 	strb.w	r1, [r0, #-47]
    a38e:	4608      	mov	r0, r1
    a390:	bd10      	pop	{r4, pc}
    a392:	0000      	.short	0x0000
    a394:	20000164 	.word	0x20000164
    a398:	4807      	ldr	r0, [pc, #28]	; (a3b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1030>)
    a39a:	6840      	ldr	r0, [r0, #4]
    a39c:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    a3a0:	290f      	cmp	r1, #15
    a3a2:	d001      	beq.n	a3a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1020>
    a3a4:	2002      	movs	r0, #2
    a3a6:	4770      	bx	lr
    a3a8:	2100      	movs	r1, #0
    a3aa:	f880 1093 	strb.w	r1, [r0, #147]	; 0x93
    a3ae:	2112      	movs	r1, #18
    a3b0:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    a3b4:	2000      	movs	r0, #0
    a3b6:	4770      	bx	lr
    a3b8:	20000164 	.word	0x20000164
    a3bc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a3be:	4c16      	ldr	r4, [pc, #88]	; (a418 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1090>)
    a3c0:	2300      	movs	r3, #0
    a3c2:	4619      	mov	r1, r3
    a3c4:	6860      	ldr	r0, [r4, #4]
    a3c6:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
    a3ca:	3080      	adds	r0, #128	; 0x80
    a3cc:	f004 fbd3 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3d0:	b1f8      	cbz	r0, a412 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x108a>
    a3d2:	f1a4 000c 	sub.w	r0, r4, #12
    a3d6:	4669      	mov	r1, sp
    a3d8:	6880      	ldr	r0, [r0, #8]
    a3da:	f004 fdf8 	bl	efce <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a3de:	f001 fa65 	bl	b8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a3e2:	f644 122f 	movw	r2, #18735	; 0x492f
    a3e6:	4010      	ands	r0, r2
    a3e8:	f001 0206 	and.w	r2, r1, #6
    a3ec:	6861      	ldr	r1, [r4, #4]
    a3ee:	e9dd 4300 	ldrd	r4, r3, [sp]
    a3f2:	4004      	ands	r4, r0
    a3f4:	4013      	ands	r3, r2
    a3f6:	f8c1 40de 	str.w	r4, [r1, #222]	; 0xde
    a3fa:	f8c1 30e2 	str.w	r3, [r1, #226]	; 0xe2
    a3fe:	2000      	movs	r0, #0
    a400:	f821 0fca 	strh.w	r0, [r1, #202]!
    a404:	2001      	movs	r0, #1
    a406:	7088      	strb	r0, [r1, #2]
    a408:	2004      	movs	r0, #4
    a40a:	f801 0c3c 	strb.w	r0, [r1, #-60]
    a40e:	2000      	movs	r0, #0
    a410:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a412:	2001      	movs	r0, #1
    a414:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a416:	0000      	.short	0x0000
    a418:	20000164 	.word	0x20000164
    a41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a420:	4c45      	ldr	r4, [pc, #276]	; (a538 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11b0>)
    a422:	f04f 0800 	mov.w	r8, #0
    a426:	b088      	sub	sp, #32
    a428:	6860      	ldr	r0, [r4, #4]
    a42a:	4643      	mov	r3, r8
    a42c:	4641      	mov	r1, r8
    a42e:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
    a432:	3080      	adds	r0, #128	; 0x80
    a434:	f004 fb9f 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a438:	b180      	cbz	r0, a45c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d4>
    a43a:	6860      	ldr	r0, [r4, #4]
    a43c:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    a440:	2823      	cmp	r0, #35	; 0x23
    a442:	d00f      	beq.n	a464 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    a444:	2824      	cmp	r0, #36	; 0x24
    a446:	d00d      	beq.n	a464 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    a448:	4668      	mov	r0, sp
    a44a:	f7fa fe61 	bl	5110 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    a44e:	b158      	cbz	r0, a468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e0>
    a450:	9800      	ldr	r0, [sp, #0]
    a452:	a901      	add	r1, sp, #4
    a454:	78c0      	ldrb	r0, [r0, #3]
    a456:	f88d 0004 	strb.w	r0, [sp, #4]
    a45a:	e006      	b.n	a46a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e2>
    a45c:	2001      	movs	r0, #1
    a45e:	b008      	add	sp, #32
    a460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a464:	2020      	movs	r0, #32
    a466:	e7fa      	b.n	a45e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    a468:	2100      	movs	r1, #0
    a46a:	6860      	ldr	r0, [r4, #4]
    a46c:	ab04      	add	r3, sp, #16
    a46e:	2216      	movs	r2, #22
    a470:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    a474:	f004 fc3c 	bl	ecf0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    a478:	2501      	movs	r5, #1
    a47a:	2600      	movs	r6, #0
    a47c:	b178      	cbz	r0, a49e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1116>
    a47e:	6860      	ldr	r0, [r4, #4]
    a480:	f89d 2010 	ldrb.w	r2, [sp, #16]
    a484:	2116      	movs	r1, #22
    a486:	f880 2112 	strb.w	r2, [r0, #274]	; 0x112
    a48a:	f880 1113 	strb.w	r1, [r0, #275]	; 0x113
    a48e:	2128      	movs	r1, #40	; 0x28
    a490:	f800 1f8e 	strb.w	r1, [r0, #142]!
    a494:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
    a498:	8786      	strh	r6, [r0, #60]	; 0x3c
    a49a:	2000      	movs	r0, #0
    a49c:	e7df      	b.n	a45e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    a49e:	4f26      	ldr	r7, [pc, #152]	; (a538 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11b0>)
    a4a0:	3f0c      	subs	r7, #12
    a4a2:	68b8      	ldr	r0, [r7, #8]
    a4a4:	f004 fdc4 	bl	f030 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a4a8:	b1a8      	cbz	r0, a4d6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x114e>
    a4aa:	68b8      	ldr	r0, [r7, #8]
    a4ac:	7901      	ldrb	r1, [r0, #4]
    a4ae:	f001 0207 	and.w	r2, r1, #7
    a4b2:	6861      	ldr	r1, [r4, #4]
    a4b4:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    a4b8:	7940      	ldrb	r0, [r0, #5]
    a4ba:	f000 0007 	and.w	r0, r0, #7
    a4be:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    a4c2:	f891 312d 	ldrb.w	r3, [r1, #301]	; 0x12d
    a4c6:	f88d 3018 	strb.w	r3, [sp, #24]
    a4ca:	9b06      	ldr	r3, [sp, #24]
    a4cc:	9301      	str	r3, [sp, #4]
    a4ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
    a4d2:	bb3b      	cbnz	r3, a524 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x119c>
    a4d4:	e004      	b.n	a4e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1158>
    a4d6:	2000      	movs	r0, #0
    a4d8:	f7ff fe4a 	bl	a170 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    a4dc:	4680      	mov	r8, r0
    a4de:	e028      	b.n	a532 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11aa>
    a4e0:	f891 312c 	ldrb.w	r3, [r1, #300]	; 0x12c
    a4e4:	2b01      	cmp	r3, #1
    a4e6:	d01d      	beq.n	a524 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x119c>
    a4e8:	f101 036e 	add.w	r3, r1, #110	; 0x6e
    a4ec:	785f      	ldrb	r7, [r3, #1]
    a4ee:	4297      	cmp	r7, r2
    a4f0:	d106      	bne.n	a500 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1178>
    a4f2:	781a      	ldrb	r2, [r3, #0]
    a4f4:	4282      	cmp	r2, r0
    a4f6:	d103      	bne.n	a500 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1178>
    a4f8:	2002      	movs	r0, #2
    a4fa:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    a4fe:	e011      	b.n	a524 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x119c>
    a500:	f501 70c0 	add.w	r0, r1, #384	; 0x180
    a504:	880a      	ldrh	r2, [r1, #0]
    a506:	f820 2b02 	strh.w	r2, [r0], #2
    a50a:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    a50e:	f800 2b01 	strb.w	r2, [r0], #1
    a512:	f891 2067 	ldrb.w	r2, [r1, #103]	; 0x67
    a516:	f800 290d 	strb.w	r2, [r0], #-13
    a51a:	221b      	movs	r2, #27
    a51c:	f7fc f906 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a520:	f7fc f9f6 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a524:	6860      	ldr	r0, [r4, #4]
    a526:	2121      	movs	r1, #33	; 0x21
    a528:	f800 1f8e 	strb.w	r1, [r0, #142]!
    a52c:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
    a530:	8786      	strh	r6, [r0, #60]	; 0x3c
    a532:	4640      	mov	r0, r8
    a534:	e793      	b.n	a45e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    a536:	0000      	.short	0x0000
    a538:	20000164 	.word	0x20000164
    a53c:	b570      	push	{r4, r5, r6, lr}
    a53e:	4c19      	ldr	r4, [pc, #100]	; (a5a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x121c>)
    a540:	6860      	ldr	r0, [r4, #4]
    a542:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    a546:	281f      	cmp	r0, #31
    a548:	d001      	beq.n	a54e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c6>
    a54a:	2001      	movs	r0, #1
    a54c:	bd70      	pop	{r4, r5, r6, pc}
    a54e:	4e15      	ldr	r6, [pc, #84]	; (a5a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x121c>)
    a550:	3e0c      	subs	r6, #12
    a552:	68b0      	ldr	r0, [r6, #8]
    a554:	f004 fd76 	bl	f044 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    a558:	b1d8      	cbz	r0, a592 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x120a>
    a55a:	68b0      	ldr	r0, [r6, #8]
    a55c:	2201      	movs	r2, #1
    a55e:	7901      	ldrb	r1, [r0, #4]
    a560:	7940      	ldrb	r0, [r0, #5]
    a562:	f001 0107 	and.w	r1, r1, #7
    a566:	f361 0507 	bfi	r5, r1, #0, #8
    a56a:	4629      	mov	r1, r5
    a56c:	f000 0007 	and.w	r0, r0, #7
    a570:	f360 210f 	bfi	r1, r0, #8, #8
    a574:	6860      	ldr	r0, [r4, #4]
    a576:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
    a57a:	2200      	movs	r2, #0
    a57c:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
    a580:	2223      	movs	r2, #35	; 0x23
    a582:	f880 208d 	strb.w	r2, [r0, #141]	; 0x8d
    a586:	f8d0 012e 	ldr.w	r0, [r0, #302]	; 0x12e
    a58a:	f7ff fd6b 	bl	a064 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcdc>
    a58e:	2000      	movs	r0, #0
    a590:	bd70      	pop	{r4, r5, r6, pc}
    a592:	2001      	movs	r0, #1
    a594:	f7ff fdec 	bl	a170 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    a598:	4604      	mov	r4, r0
    a59a:	201e      	movs	r0, #30
    a59c:	f7ff fd18 	bl	9fd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc48>
    a5a0:	4620      	mov	r0, r4
    a5a2:	bd70      	pop	{r4, r5, r6, pc}
    a5a4:	20000164 	.word	0x20000164
    a5a8:	b570      	push	{r4, r5, r6, lr}
    a5aa:	4c07      	ldr	r4, [pc, #28]	; (a5c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1240>)
    a5ac:	68a0      	ldr	r0, [r4, #8]
    a5ae:	f004 fd53 	bl	f058 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a5b2:	4605      	mov	r5, r0
    a5b4:	68a0      	ldr	r0, [r4, #8]
    a5b6:	f004 fd51 	bl	f05c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a5ba:	4601      	mov	r1, r0
    a5bc:	4628      	mov	r0, r5
    a5be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a5c2:	f005 bbd0 	b.w	fd66 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x13a>
    a5c6:	0000      	.short	0x0000
    a5c8:	20000158 	.word	0x20000158
    a5cc:	4807      	ldr	r0, [pc, #28]	; (a5ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1264>)
    a5ce:	6880      	ldr	r0, [r0, #8]
    a5d0:	7901      	ldrb	r1, [r0, #4]
    a5d2:	4806      	ldr	r0, [pc, #24]	; (a5ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1264>)
    a5d4:	300c      	adds	r0, #12
    a5d6:	6840      	ldr	r0, [r0, #4]
    a5d8:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    a5dc:	380f      	subs	r0, #15
    a5de:	280c      	cmp	r0, #12
    a5e0:	d801      	bhi.n	a5e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x125e>
    a5e2:	2003      	movs	r0, #3
    a5e4:	e000      	b.n	a5e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1260>
    a5e6:	20fe      	movs	r0, #254	; 0xfe
    a5e8:	f005 bbbd 	b.w	fd66 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x13a>
    a5ec:	20000158 	.word	0x20000158
    a5f0:	b510      	push	{r4, lr}
    a5f2:	4c0e      	ldr	r4, [pc, #56]	; (a62c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a4>)
    a5f4:	6860      	ldr	r0, [r4, #4]
    a5f6:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    a5fa:	2916      	cmp	r1, #22
    a5fc:	d001      	beq.n	a602 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x127a>
    a5fe:	2002      	movs	r0, #2
    a600:	bd10      	pop	{r4, pc}
    a602:	f100 03f8 	add.w	r3, r0, #248	; 0xf8
    a606:	f200 2133 	addw	r1, r0, #563	; 0x233
    a60a:	2200      	movs	r2, #0
    a60c:	f200 2023 	addw	r0, r0, #547	; 0x223
    a610:	f004 fa4c 	bl	eaac <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a614:	6860      	ldr	r0, [r4, #4]
    a616:	2100      	movs	r1, #0
    a618:	e9c0 113a 	strd	r1, r1, [r0, #232]	; 0xe8
    a61c:	2101      	movs	r1, #1
    a61e:	f880 1093 	strb.w	r1, [r0, #147]	; 0x93
    a622:	2118      	movs	r1, #24
    a624:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    a628:	2000      	movs	r0, #0
    a62a:	bd10      	pop	{r4, pc}
    a62c:	20000164 	.word	0x20000164
    a630:	b538      	push	{r3, r4, r5, lr}
    a632:	4d20      	ldr	r5, [pc, #128]	; (a6b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132c>)
    a634:	6869      	ldr	r1, [r5, #4]
    a636:	f891 008d 	ldrb.w	r0, [r1, #141]	; 0x8d
    a63a:	281a      	cmp	r0, #26
    a63c:	d001      	beq.n	a642 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ba>
    a63e:	2002      	movs	r0, #2
    a640:	bd38      	pop	{r3, r4, r5, pc}
    a642:	2400      	movs	r4, #0
    a644:	f881 40cd 	strb.w	r4, [r1, #205]	; 0xcd
    a648:	f881 40c8 	strb.w	r4, [r1, #200]	; 0xc8
    a64c:	f881 4218 	strb.w	r4, [r1, #536]	; 0x218
    a650:	f891 01c6 	ldrb.w	r0, [r1, #454]	; 0x1c6
    a654:	f88d 0000 	strb.w	r0, [sp]
    a658:	9800      	ldr	r0, [sp, #0]
    a65a:	9000      	str	r0, [sp, #0]
    a65c:	f89d 0000 	ldrb.w	r0, [sp]
    a660:	2201      	movs	r2, #1
    a662:	b120      	cbz	r0, a66e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12e6>
    a664:	f240 3143 	movw	r1, #835	; 0x343
    a668:	2036      	movs	r0, #54	; 0x36
    a66a:	f7f9 ffa5 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a66e:	4811      	ldr	r0, [pc, #68]	; (a6b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132c>)
    a670:	f891 30ce 	ldrb.w	r3, [r1, #206]	; 0xce
    a674:	6840      	ldr	r0, [r0, #4]
    a676:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    a67a:	b143      	cbz	r3, a68e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1306>
    a67c:	f881 40ce 	strb.w	r4, [r1, #206]	; 0xce
    a680:	880a      	ldrh	r2, [r1, #0]
    a682:	f8a1 21ca 	strh.w	r2, [r1, #458]	; 0x1ca
    a686:	f881 41c8 	strb.w	r4, [r1, #456]	; 0x1c8
    a68a:	220a      	movs	r2, #10
    a68c:	e007      	b.n	a69e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1316>
    a68e:	880b      	ldrh	r3, [r1, #0]
    a690:	f8a1 31ca 	strh.w	r3, [r1, #458]	; 0x1ca
    a694:	f881 41c8 	strb.w	r4, [r1, #456]	; 0x1c8
    a698:	f881 21cc 	strb.w	r2, [r1, #460]	; 0x1cc
    a69c:	2209      	movs	r2, #9
    a69e:	f7fc f845 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a6a2:	f000 fb73 	bl	ad8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a04>
    a6a6:	f7fc f933 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a6aa:	6868      	ldr	r0, [r5, #4]
    a6ac:	f880 408d 	strb.w	r4, [r0, #141]	; 0x8d
    a6b0:	2000      	movs	r0, #0
    a6b2:	bd38      	pop	{r3, r4, r5, pc}
    a6b4:	20000164 	.word	0x20000164
    a6b8:	b510      	push	{r4, lr}
    a6ba:	4c0e      	ldr	r4, [pc, #56]	; (a6f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x136c>)
    a6bc:	2300      	movs	r3, #0
    a6be:	2101      	movs	r1, #1
    a6c0:	6860      	ldr	r0, [r4, #4]
    a6c2:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
    a6c6:	3080      	adds	r0, #128	; 0x80
    a6c8:	f004 fa55 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a6cc:	b108      	cbz	r0, a6d2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134a>
    a6ce:	2000      	movs	r0, #0
    a6d0:	bd10      	pop	{r4, pc}
    a6d2:	4808      	ldr	r0, [pc, #32]	; (a6f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x136c>)
    a6d4:	380c      	subs	r0, #12
    a6d6:	6880      	ldr	r0, [r0, #8]
    a6d8:	f004 fc8a 	bl	eff0 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a6dc:	6861      	ldr	r1, [r4, #4]
    a6de:	f881 0091 	strb.w	r0, [r1, #145]	; 0x91
    a6e2:	2007      	movs	r0, #7
    a6e4:	f801 0f90 	strb.w	r0, [r1, #144]!
    a6e8:	2000      	movs	r0, #0
    a6ea:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
    a6ee:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    a6f2:	e7ec      	b.n	a6ce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1346>
    a6f4:	20000164 	.word	0x20000164
    a6f8:	b570      	push	{r4, r5, r6, lr}
    a6fa:	481e      	ldr	r0, [pc, #120]	; (a774 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13ec>)
    a6fc:	4c1d      	ldr	r4, [pc, #116]	; (a774 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13ec>)
    a6fe:	2500      	movs	r5, #0
    a700:	6880      	ldr	r0, [r0, #8]
    a702:	340c      	adds	r4, #12
    a704:	7901      	ldrb	r1, [r0, #4]
    a706:	6860      	ldr	r0, [r4, #4]
    a708:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a70c:	3080      	adds	r0, #128	; 0x80
    a70e:	2912      	cmp	r1, #18
    a710:	d004      	beq.n	a71c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1394>
    a712:	2914      	cmp	r1, #20
    a714:	d00b      	beq.n	a72e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13a6>
    a716:	2916      	cmp	r1, #22
    a718:	d129      	bne.n	a76e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    a71a:	e017      	b.n	a74c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13c4>
    a71c:	2109      	movs	r1, #9
    a71e:	2300      	movs	r3, #0
    a720:	f004 fa29 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a724:	b318      	cbz	r0, a76e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    a726:	f7ff fe1f 	bl	a368 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfe0>
    a72a:	4605      	mov	r5, r0
    a72c:	e01f      	b.n	a76e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    a72e:	210a      	movs	r1, #10
    a730:	2300      	movs	r3, #0
    a732:	f004 fa20 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a736:	b1d0      	cbz	r0, a76e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    a738:	f000 f890 	bl	a85c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14d4>
    a73c:	6860      	ldr	r0, [r4, #4]
    a73e:	2105      	movs	r1, #5
    a740:	30de      	adds	r0, #222	; 0xde
    a742:	f005 fa65 	bl	fc10 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x108>
    a746:	f7ff f83f 	bl	97c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x440>
    a74a:	e010      	b.n	a76e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    a74c:	2a1f      	cmp	r2, #31
    a74e:	d10e      	bne.n	a76e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    a750:	f000 f884 	bl	a85c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14d4>
    a754:	6860      	ldr	r0, [r4, #4]
    a756:	2108      	movs	r1, #8
    a758:	30de      	adds	r0, #222	; 0xde
    a75a:	f005 fa59 	bl	fc10 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x108>
    a75e:	6860      	ldr	r0, [r4, #4]
    a760:	210b      	movs	r1, #11
    a762:	30de      	adds	r0, #222	; 0xde
    a764:	f005 fa54 	bl	fc10 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x108>
    a768:	201a      	movs	r0, #26
    a76a:	f7ff fc31 	bl	9fd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc48>
    a76e:	4628      	mov	r0, r5
    a770:	bd70      	pop	{r4, r5, r6, pc}
    a772:	0000      	.short	0x0000
    a774:	20000158 	.word	0x20000158
    a778:	b570      	push	{r4, r5, r6, lr}
    a77a:	4c37      	ldr	r4, [pc, #220]	; (a858 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14d0>)
    a77c:	2300      	movs	r3, #0
    a77e:	4619      	mov	r1, r3
    a780:	6860      	ldr	r0, [r4, #4]
    a782:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
    a786:	3080      	adds	r0, #128	; 0x80
    a788:	f004 f9f5 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a78c:	b940      	cbnz	r0, a7a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1418>
    a78e:	6860      	ldr	r0, [r4, #4]
    a790:	2300      	movs	r3, #0
    a792:	2108      	movs	r1, #8
    a794:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a798:	3080      	adds	r0, #128	; 0x80
    a79a:	f004 f9ec 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a79e:	b308      	cbz	r0, a7e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    a7a0:	6860      	ldr	r0, [r4, #4]
    a7a2:	f890 00cf 	ldrb.w	r0, [r0, #207]	; 0xcf
    a7a6:	0780      	lsls	r0, r0, #30
    a7a8:	d414      	bmi.n	a7d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144c>
    a7aa:	4d2b      	ldr	r5, [pc, #172]	; (a858 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14d0>)
    a7ac:	3d0c      	subs	r5, #12
    a7ae:	68a8      	ldr	r0, [r5, #8]
    a7b0:	f004 fc20 	bl	eff4 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a7b4:	6861      	ldr	r1, [r4, #4]
    a7b6:	f881 00d9 	strb.w	r0, [r1, #217]	; 0xd9
    a7ba:	68a8      	ldr	r0, [r5, #8]
    a7bc:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a7c0:	f8a1 20da 	strh.w	r2, [r1, #218]	; 0xda
    a7c4:	8840      	ldrh	r0, [r0, #2]
    a7c6:	f8a1 00dc 	strh.w	r0, [r1, #220]	; 0xdc
    a7ca:	f811 0fcf 	ldrb.w	r0, [r1, #207]!
    a7ce:	f040 0002 	orr.w	r0, r0, #2
    a7d2:	7008      	strb	r0, [r1, #0]
    a7d4:	6860      	ldr	r0, [r4, #4]
    a7d6:	f04f 0500 	mov.w	r5, #0
    a7da:	f890 10cf 	ldrb.w	r1, [r0, #207]	; 0xcf
    a7de:	07c9      	lsls	r1, r1, #31
    a7e0:	d002      	beq.n	a7e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1460>
    a7e2:	e015      	b.n	a810 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1488>
    a7e4:	2001      	movs	r0, #1
    a7e6:	bd70      	pop	{r4, r5, r6, pc}
    a7e8:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
    a7ec:	2300      	movs	r3, #0
    a7ee:	4619      	mov	r1, r3
    a7f0:	3080      	adds	r0, #128	; 0x80
    a7f2:	f004 f9c0 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7f6:	b1c8      	cbz	r0, a82c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14a4>
    a7f8:	6860      	ldr	r0, [r4, #4]
    a7fa:	2101      	movs	r1, #1
    a7fc:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
    a800:	f880 10cc 	strb.w	r1, [r0, #204]	; 0xcc
    a804:	f8a0 50ca 	strh.w	r5, [r0, #202]	; 0xca
    a808:	f890 00cf 	ldrb.w	r0, [r0, #207]	; 0xcf
    a80c:	07c0      	lsls	r0, r0, #31
    a80e:	d007      	beq.n	a820 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1498>
    a810:	6861      	ldr	r1, [r4, #4]
    a812:	2201      	movs	r2, #1
    a814:	f101 00d0 	add.w	r0, r1, #208	; 0xd0
    a818:	f7fb ff88 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a81c:	f7fc f878 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a820:	6860      	ldr	r0, [r4, #4]
    a822:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    a826:	2901      	cmp	r1, #1
    a828:	d005      	beq.n	a836 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14ae>
    a82a:	e008      	b.n	a83e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14b6>
    a82c:	f240 3185 	movw	r1, #901	; 0x385
    a830:	2036      	movs	r0, #54	; 0x36
    a832:	f7f9 fec1 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a836:	f880 508d 	strb.w	r5, [r0, #141]	; 0x8d
    a83a:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    a83e:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    a842:	b131      	cbz	r1, a852 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14ca>
    a844:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    a848:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    a84c:	b909      	cbnz	r1, a852 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14ca>
    a84e:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    a852:	2000      	movs	r0, #0
    a854:	bd70      	pop	{r4, r5, r6, pc}
    a856:	0000      	.short	0x0000
    a858:	20000164 	.word	0x20000164
    a85c:	4904      	ldr	r1, [pc, #16]	; (a870 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14e8>)
    a85e:	2000      	movs	r0, #0
    a860:	6849      	ldr	r1, [r1, #4]
    a862:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
    a866:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    a86a:	f881 00c8 	strb.w	r0, [r1, #200]	; 0xc8
    a86e:	4770      	bx	lr
    a870:	20000164 	.word	0x20000164
    a874:	b510      	push	{r4, lr}
    a876:	4c0a      	ldr	r4, [pc, #40]	; (a8a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1518>)
    a878:	2300      	movs	r3, #0
    a87a:	4619      	mov	r1, r3
    a87c:	6860      	ldr	r0, [r4, #4]
    a87e:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a882:	3080      	adds	r0, #128	; 0x80
    a884:	f004 f977 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a888:	b120      	cbz	r0, a894 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x150c>
    a88a:	6861      	ldr	r1, [r4, #4]
    a88c:	200c      	movs	r0, #12
    a88e:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
    a892:	bd10      	pop	{r4, pc}
    a894:	f240 618c 	movw	r1, #1676	; 0x68c
    a898:	2036      	movs	r0, #54	; 0x36
    a89a:	f7f9 fe8d 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a89e:	0000      	.short	0x0000
    a8a0:	20000164 	.word	0x20000164
    a8a4:	b510      	push	{r4, lr}
    a8a6:	4c0a      	ldr	r4, [pc, #40]	; (a8d0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1548>)
    a8a8:	2300      	movs	r3, #0
    a8aa:	4619      	mov	r1, r3
    a8ac:	6860      	ldr	r0, [r4, #4]
    a8ae:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a8b2:	3080      	adds	r0, #128	; 0x80
    a8b4:	f004 f95f 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8b8:	b120      	cbz	r0, a8c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x153c>
    a8ba:	6861      	ldr	r1, [r4, #4]
    a8bc:	200d      	movs	r0, #13
    a8be:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
    a8c2:	bd10      	pop	{r4, pc}
    a8c4:	f240 6192 	movw	r1, #1682	; 0x692
    a8c8:	2036      	movs	r0, #54	; 0x36
    a8ca:	f7f9 fe75 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8ce:	0000      	.short	0x0000
    a8d0:	20000164 	.word	0x20000164
    a8d4:	b510      	push	{r4, lr}
    a8d6:	4c0d      	ldr	r4, [pc, #52]	; (a90c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1584>)
    a8d8:	2300      	movs	r3, #0
    a8da:	4619      	mov	r1, r3
    a8dc:	6860      	ldr	r0, [r4, #4]
    a8de:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a8e2:	3080      	adds	r0, #128	; 0x80
    a8e4:	f004 f947 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8e8:	b918      	cbnz	r0, a8f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156a>
    a8ea:	6860      	ldr	r0, [r4, #4]
    a8ec:	f890 00ce 	ldrb.w	r0, [r0, #206]	; 0xce
    a8f0:	b138      	cbz	r0, a902 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x157a>
    a8f2:	6860      	ldr	r0, [r4, #4]
    a8f4:	2101      	movs	r1, #1
    a8f6:	f880 10cd 	strb.w	r1, [r0, #205]	; 0xcd
    a8fa:	2113      	movs	r1, #19
    a8fc:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    a900:	bd10      	pop	{r4, pc}
    a902:	f240 61a7 	movw	r1, #1703	; 0x6a7
    a906:	2036      	movs	r0, #54	; 0x36
    a908:	f7f9 fe56 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a90c:	20000164 	.word	0x20000164
    a910:	b510      	push	{r4, lr}
    a912:	4c0a      	ldr	r4, [pc, #40]	; (a93c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15b4>)
    a914:	2300      	movs	r3, #0
    a916:	4619      	mov	r1, r3
    a918:	6860      	ldr	r0, [r4, #4]
    a91a:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a91e:	3080      	adds	r0, #128	; 0x80
    a920:	f004 f929 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a924:	b120      	cbz	r0, a930 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15a8>
    a926:	6861      	ldr	r1, [r4, #4]
    a928:	2004      	movs	r0, #4
    a92a:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
    a92e:	bd10      	pop	{r4, pc}
    a930:	f44f 61d0 	mov.w	r1, #1664	; 0x680
    a934:	2036      	movs	r0, #54	; 0x36
    a936:	f7f9 fe3f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a93a:	0000      	.short	0x0000
    a93c:	20000164 	.word	0x20000164
    a940:	b510      	push	{r4, lr}
    a942:	4c0a      	ldr	r4, [pc, #40]	; (a96c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15e4>)
    a944:	2300      	movs	r3, #0
    a946:	4619      	mov	r1, r3
    a948:	6860      	ldr	r0, [r4, #4]
    a94a:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a94e:	3080      	adds	r0, #128	; 0x80
    a950:	f004 f911 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a954:	b120      	cbz	r0, a960 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d8>
    a956:	6861      	ldr	r1, [r4, #4]
    a958:	201c      	movs	r0, #28
    a95a:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
    a95e:	bd10      	pop	{r4, pc}
    a960:	f240 61de 	movw	r1, #1758	; 0x6de
    a964:	2036      	movs	r0, #54	; 0x36
    a966:	f7f9 fe27 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a96a:	0000      	.short	0x0000
    a96c:	20000164 	.word	0x20000164
    a970:	b510      	push	{r4, lr}
    a972:	4c0a      	ldr	r4, [pc, #40]	; (a99c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1614>)
    a974:	2300      	movs	r3, #0
    a976:	4619      	mov	r1, r3
    a978:	6860      	ldr	r0, [r4, #4]
    a97a:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
    a97e:	3080      	adds	r0, #128	; 0x80
    a980:	f004 f8f9 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a984:	b120      	cbz	r0, a990 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1608>
    a986:	6861      	ldr	r1, [r4, #4]
    a988:	2000      	movs	r0, #0
    a98a:	f881 00cc 	strb.w	r0, [r1, #204]	; 0xcc
    a98e:	bd10      	pop	{r4, pc}
    a990:	f240 61e5 	movw	r1, #1765	; 0x6e5
    a994:	2036      	movs	r0, #54	; 0x36
    a996:	f7f9 fe0f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a99a:	0000      	.short	0x0000
    a99c:	20000164 	.word	0x20000164
    a9a0:	b510      	push	{r4, lr}
    a9a2:	4c0a      	ldr	r4, [pc, #40]	; (a9cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1644>)
    a9a4:	2300      	movs	r3, #0
    a9a6:	4619      	mov	r1, r3
    a9a8:	6860      	ldr	r0, [r4, #4]
    a9aa:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
    a9ae:	3080      	adds	r0, #128	; 0x80
    a9b0:	f004 f8e1 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9b4:	b120      	cbz	r0, a9c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1638>
    a9b6:	6861      	ldr	r1, [r4, #4]
    a9b8:	2000      	movs	r0, #0
    a9ba:	f881 00cc 	strb.w	r0, [r1, #204]	; 0xcc
    a9be:	bd10      	pop	{r4, pc}
    a9c0:	f240 6186 	movw	r1, #1670	; 0x686
    a9c4:	2036      	movs	r0, #54	; 0x36
    a9c6:	f7f9 fdf7 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9ca:	0000      	.short	0x0000
    a9cc:	20000164 	.word	0x20000164
    a9d0:	b510      	push	{r4, lr}
    a9d2:	4c0a      	ldr	r4, [pc, #40]	; (a9fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1674>)
    a9d4:	2300      	movs	r3, #0
    a9d6:	4619      	mov	r1, r3
    a9d8:	6860      	ldr	r0, [r4, #4]
    a9da:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    a9de:	3080      	adds	r0, #128	; 0x80
    a9e0:	f004 f8c9 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9e4:	b120      	cbz	r0, a9f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    a9e6:	6861      	ldr	r1, [r4, #4]
    a9e8:	2005      	movs	r0, #5
    a9ea:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
    a9ee:	bd10      	pop	{r4, pc}
    a9f0:	f240 61d1 	movw	r1, #1745	; 0x6d1
    a9f4:	2036      	movs	r0, #54	; 0x36
    a9f6:	f7f9 fddf 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9fa:	0000      	.short	0x0000
    a9fc:	20000164 	.word	0x20000164
    aa00:	4902      	ldr	r1, [pc, #8]	; (aa0c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1684>)
    aa02:	2000      	movs	r0, #0
    aa04:	6849      	ldr	r1, [r1, #4]
    aa06:	f881 00cc 	strb.w	r0, [r1, #204]	; 0xcc
    aa0a:	4770      	bx	lr
    aa0c:	20000164 	.word	0x20000164
    aa10:	b510      	push	{r4, lr}
    aa12:	4c0b      	ldr	r4, [pc, #44]	; (aa40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16b8>)
    aa14:	2300      	movs	r3, #0
    aa16:	4619      	mov	r1, r3
    aa18:	6860      	ldr	r0, [r4, #4]
    aa1a:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    aa1e:	3080      	adds	r0, #128	; 0x80
    aa20:	f004 f8a9 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa24:	b138      	cbz	r0, aa36 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16ae>
    aa26:	6860      	ldr	r0, [r4, #4]
    aa28:	2101      	movs	r1, #1
    aa2a:	f880 10cd 	strb.w	r1, [r0, #205]	; 0xcd
    aa2e:	210f      	movs	r1, #15
    aa30:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    aa34:	bd10      	pop	{r4, pc}
    aa36:	f44f 61d3 	mov.w	r1, #1688	; 0x698
    aa3a:	2036      	movs	r0, #54	; 0x36
    aa3c:	f7f9 fdbc 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa40:	20000164 	.word	0x20000164
    aa44:	4809      	ldr	r0, [pc, #36]	; (aa6c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16e4>)
    aa46:	b510      	push	{r4, lr}
    aa48:	6840      	ldr	r0, [r0, #4]
    aa4a:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    aa4e:	2912      	cmp	r1, #18
    aa50:	d004      	beq.n	aa5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16d4>
    aa52:	f44f 61d4 	mov.w	r1, #1696	; 0x6a0
    aa56:	2036      	movs	r0, #54	; 0x36
    aa58:	f7f9 fdae 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa5c:	2101      	movs	r1, #1
    aa5e:	f880 10ce 	strb.w	r1, [r0, #206]	; 0xce
    aa62:	2111      	movs	r1, #17
    aa64:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    aa68:	bd10      	pop	{r4, pc}
    aa6a:	0000      	.short	0x0000
    aa6c:	20000164 	.word	0x20000164
    aa70:	b510      	push	{r4, lr}
    aa72:	4c0a      	ldr	r4, [pc, #40]	; (aa9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1714>)
    aa74:	2300      	movs	r3, #0
    aa76:	4619      	mov	r1, r3
    aa78:	6860      	ldr	r0, [r4, #4]
    aa7a:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    aa7e:	3080      	adds	r0, #128	; 0x80
    aa80:	f004 f879 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa84:	b120      	cbz	r0, aa90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1708>
    aa86:	6861      	ldr	r1, [r4, #4]
    aa88:	201f      	movs	r0, #31
    aa8a:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
    aa8e:	bd10      	pop	{r4, pc}
    aa90:	f240 61ee 	movw	r1, #1774	; 0x6ee
    aa94:	2036      	movs	r0, #54	; 0x36
    aa96:	f7f9 fd8f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa9a:	0000      	.short	0x0000
    aa9c:	20000164 	.word	0x20000164
    aaa0:	b570      	push	{r4, r5, r6, lr}
    aaa2:	4c1d      	ldr	r4, [pc, #116]	; (ab18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1790>)
    aaa4:	6860      	ldr	r0, [r4, #4]
    aaa6:	f890 1202 	ldrb.w	r1, [r0, #514]	; 0x202
    aaaa:	b911      	cbnz	r1, aab2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x172a>
    aaac:	f890 1203 	ldrb.w	r1, [r0, #515]	; 0x203
    aab0:	b179      	cbz	r1, aad2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x174a>
    aab2:	2100      	movs	r1, #0
    aab4:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    aab8:	2224      	movs	r2, #36	; 0x24
    aaba:	2500      	movs	r5, #0
    aabc:	2b21      	cmp	r3, #33	; 0x21
    aabe:	d00a      	beq.n	aad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x174e>
    aac0:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    aac4:	2b23      	cmp	r3, #35	; 0x23
    aac6:	d01a      	beq.n	aafe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1776>
    aac8:	f240 711a 	movw	r1, #1818	; 0x71a
    aacc:	2036      	movs	r0, #54	; 0x36
    aace:	f7f9 fd73 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aad2:	2101      	movs	r1, #1
    aad4:	e7ee      	b.n	aab4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x172c>
    aad6:	b161      	cbz	r1, aaf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x176a>
    aad8:	f880 508e 	strb.w	r5, [r0, #142]	; 0x8e
    aadc:	f890 012c 	ldrb.w	r0, [r0, #300]	; 0x12c
    aae0:	2801      	cmp	r0, #1
    aae2:	d102      	bne.n	aaea <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1762>
    aae4:	2000      	movs	r0, #0
    aae6:	f7ff fa73 	bl	9fd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc48>
    aaea:	6860      	ldr	r0, [r4, #4]
    aaec:	f880 512c 	strb.w	r5, [r0, #300]	; 0x12c
    aaf0:	e001      	b.n	aaf6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x176e>
    aaf2:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    aaf6:	6860      	ldr	r0, [r4, #4]
    aaf8:	f880 50cc 	strb.w	r5, [r0, #204]	; 0xcc
    aafc:	bd70      	pop	{r4, r5, r6, pc}
    aafe:	b129      	cbz	r1, ab0c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1784>
    ab00:	f880 508d 	strb.w	r5, [r0, #141]	; 0x8d
    ab04:	2000      	movs	r0, #0
    ab06:	f7ff fa63 	bl	9fd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc48>
    ab0a:	e001      	b.n	ab10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1788>
    ab0c:	f880 208d 	strb.w	r2, [r0, #141]	; 0x8d
    ab10:	6860      	ldr	r0, [r4, #4]
    ab12:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    ab16:	bd70      	pop	{r4, r5, r6, pc}
    ab18:	20000164 	.word	0x20000164
    ab1c:	4903      	ldr	r1, [pc, #12]	; (ab2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x17a4>)
    ab1e:	2000      	movs	r0, #0
    ab20:	6849      	ldr	r1, [r1, #4]
    ab22:	f881 008e 	strb.w	r0, [r1, #142]	; 0x8e
    ab26:	f881 00cc 	strb.w	r0, [r1, #204]	; 0xcc
    ab2a:	4770      	bx	lr
    ab2c:	20000164 	.word	0x20000164
    ab30:	4807      	ldr	r0, [pc, #28]	; (ab50 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x17c8>)
    ab32:	b510      	push	{r4, lr}
    ab34:	6840      	ldr	r0, [r0, #4]
    ab36:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    ab3a:	2918      	cmp	r1, #24
    ab3c:	d004      	beq.n	ab48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x17c0>
    ab3e:	f44f 61d6 	mov.w	r1, #1712	; 0x6b0
    ab42:	2036      	movs	r0, #54	; 0x36
    ab44:	f7f9 fd38 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab48:	211a      	movs	r1, #26
    ab4a:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    ab4e:	bd10      	pop	{r4, pc}
    ab50:	20000164 	.word	0x20000164
    ab54:	b510      	push	{r4, lr}
    ab56:	4c0a      	ldr	r4, [pc, #40]	; (ab80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x17f8>)
    ab58:	2300      	movs	r3, #0
    ab5a:	2101      	movs	r1, #1
    ab5c:	6860      	ldr	r0, [r4, #4]
    ab5e:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
    ab62:	3080      	adds	r0, #128	; 0x80
    ab64:	f004 f807 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab68:	2800      	cmp	r0, #0
    ab6a:	d108      	bne.n	ab7e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x17f6>
    ab6c:	6860      	ldr	r0, [r4, #4]
    ab6e:	2108      	movs	r1, #8
    ab70:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
    ab74:	2100      	movs	r1, #0
    ab76:	f880 10c8 	strb.w	r1, [r0, #200]	; 0xc8
    ab7a:	f880 10cc 	strb.w	r1, [r0, #204]	; 0xcc
    ab7e:	bd10      	pop	{r4, pc}
    ab80:	20000164 	.word	0x20000164
    ab84:	b570      	push	{r4, r5, r6, lr}
    ab86:	4c0e      	ldr	r4, [pc, #56]	; (abc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1838>)
    ab88:	2300      	movs	r3, #0
    ab8a:	4619      	mov	r1, r3
    ab8c:	6860      	ldr	r0, [r4, #4]
    ab8e:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
    ab92:	3080      	adds	r0, #128	; 0x80
    ab94:	f003 ffef 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab98:	2500      	movs	r5, #0
    ab9a:	b110      	cbz	r0, aba2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x181a>
    ab9c:	6860      	ldr	r0, [r4, #4]
    ab9e:	f880 50cc 	strb.w	r5, [r0, #204]	; 0xcc
    aba2:	6860      	ldr	r0, [r4, #4]
    aba4:	2300      	movs	r3, #0
    aba6:	4619      	mov	r1, r3
    aba8:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    abac:	3080      	adds	r0, #128	; 0x80
    abae:	f003 ffe2 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abb2:	2800      	cmp	r0, #0
    abb4:	d002      	beq.n	abbc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1834>
    abb6:	6860      	ldr	r0, [r4, #4]
    abb8:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    abbc:	bd70      	pop	{r4, r5, r6, pc}
    abbe:	0000      	.short	0x0000
    abc0:	20000164 	.word	0x20000164
    abc4:	b570      	push	{r4, r5, r6, lr}
    abc6:	4d16      	ldr	r5, [pc, #88]	; (ac20 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1898>)
    abc8:	f04f 0400 	mov.w	r4, #0
    abcc:	6868      	ldr	r0, [r5, #4]
    abce:	f890 10cf 	ldrb.w	r1, [r0, #207]	; 0xcf
    abd2:	0789      	lsls	r1, r1, #30
    abd4:	d411      	bmi.n	abfa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1872>
    abd6:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    abda:	2300      	movs	r3, #0
    abdc:	4619      	mov	r1, r3
    abde:	3080      	adds	r0, #128	; 0x80
    abe0:	f003 ffc9 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abe4:	b120      	cbz	r0, abf0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1868>
    abe6:	6869      	ldr	r1, [r5, #4]
    abe8:	2001      	movs	r0, #1
    abea:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
    abee:	e008      	b.n	ac02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x187a>
    abf0:	f240 61bd 	movw	r1, #1725	; 0x6bd
    abf4:	2036      	movs	r0, #54	; 0x36
    abf6:	f7f9 fcdf 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abfa:	f880 40c8 	strb.w	r4, [r0, #200]	; 0xc8
    abfe:	f880 4132 	strb.w	r4, [r0, #306]	; 0x132
    ac02:	6868      	ldr	r0, [r5, #4]
    ac04:	2300      	movs	r3, #0
    ac06:	4619      	mov	r1, r3
    ac08:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
    ac0c:	3080      	adds	r0, #128	; 0x80
    ac0e:	f003 ffb2 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ac12:	2800      	cmp	r0, #0
    ac14:	d002      	beq.n	ac1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1894>
    ac16:	6868      	ldr	r0, [r5, #4]
    ac18:	f880 40cc 	strb.w	r4, [r0, #204]	; 0xcc
    ac1c:	bd70      	pop	{r4, r5, r6, pc}
    ac1e:	0000      	.short	0x0000
    ac20:	20000164 	.word	0x20000164
    ac24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ac28:	4d57      	ldr	r5, [pc, #348]	; (ad88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a00>)
    ac2a:	4680      	mov	r8, r0
    ac2c:	460e      	mov	r6, r1
    ac2e:	6868      	ldr	r0, [r5, #4]
    ac30:	f100 0480 	add.w	r4, r0, #128	; 0x80
    ac34:	f890 0120 	ldrb.w	r0, [r0, #288]	; 0x120
    ac38:	f88d 0000 	strb.w	r0, [sp]
    ac3c:	9800      	ldr	r0, [sp, #0]
    ac3e:	9000      	str	r0, [sp, #0]
    ac40:	f89d 0000 	ldrb.w	r0, [sp]
    ac44:	2700      	movs	r7, #0
    ac46:	b930      	cbnz	r0, ac56 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x18ce>
    ac48:	7c22      	ldrb	r2, [r4, #16]
    ac4a:	2300      	movs	r3, #0
    ac4c:	2101      	movs	r1, #1
    ac4e:	4620      	mov	r0, r4
    ac50:	f003 ff91 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ac54:	b120      	cbz	r0, ac60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x18d8>
    ac56:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    ac5a:	1c40      	adds	r0, r0, #1
    ac5c:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
    ac60:	213d      	movs	r1, #61	; 0x3d
    ac62:	f1b8 0f00 	cmp.w	r8, #0
    ac66:	d131      	bne.n	accc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1944>
    ac68:	4847      	ldr	r0, [pc, #284]	; (ad88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a00>)
    ac6a:	380c      	subs	r0, #12
    ac6c:	7800      	ldrb	r0, [r0, #0]
    ac6e:	2802      	cmp	r0, #2
    ac70:	d006      	beq.n	ac80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x18f8>
    ac72:	2801      	cmp	r0, #1
    ac74:	d008      	beq.n	ac88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1900>
    ac76:	b386      	cbz	r6, acda <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1952>
    ac78:	06f0      	lsls	r0, r6, #27
    ac7a:	d525      	bpl.n	acc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1940>
    ac7c:	201e      	movs	r0, #30
    ac7e:	e035      	b.n	acec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1964>
    ac80:	2016      	movs	r0, #22
    ac82:	e033      	b.n	acec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1964>
    ac84:	6869      	ldr	r1, [r5, #4]
    ac86:	e004      	b.n	ac92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x190a>
    ac88:	6869      	ldr	r1, [r5, #4]
    ac8a:	f891 0091 	ldrb.w	r0, [r1, #145]	; 0x91
    ac8e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    ac92:	2208      	movs	r2, #8
    ac94:	f104 0025 	add.w	r0, r4, #37	; 0x25
    ac98:	f7fb fd48 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    ac9c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    aca0:	f88d 0000 	strb.w	r0, [sp]
    aca4:	9800      	ldr	r0, [sp, #0]
    aca6:	9000      	str	r0, [sp, #0]
    aca8:	f89d 0000 	ldrb.w	r0, [sp]
    acac:	b3f0      	cbz	r0, ad2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x19a4>
    acae:	7367      	strb	r7, [r4, #13]
    acb0:	73a7      	strb	r7, [r4, #14]
    acb2:	74a7      	strb	r7, [r4, #18]
    acb4:	2102      	movs	r1, #2
    acb6:	6868      	ldr	r0, [r5, #4]
    acb8:	f7fd fa4a 	bl	8150 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    acbc:	6868      	ldr	r0, [r5, #4]
    acbe:	f890 1114 	ldrb.w	r1, [r0, #276]	; 0x114
    acc2:	2901      	cmp	r1, #1
    acc4:	d057      	beq.n	ad76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x19ee>
    acc6:	e05b      	b.n	ad80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x19f8>
    acc8:	0730      	lsls	r0, r6, #28
    acca:	d502      	bpl.n	acd2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x194a>
    accc:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    acd0:	e7d8      	b.n	ac84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x18fc>
    acd2:	07b0      	lsls	r0, r6, #30
    acd4:	d002      	beq.n	acdc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1954>
    acd6:	202a      	movs	r0, #42	; 0x2a
    acd8:	e008      	b.n	acec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1964>
    acda:	e00a      	b.n	acf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x196a>
    acdc:	06b0      	lsls	r0, r6, #26
    acde:	d404      	bmi.n	acea <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1962>
    ace0:	f640 315b 	movw	r1, #2907	; 0xb5b
    ace4:	2036      	movs	r0, #54	; 0x36
    ace6:	f7f9 fc67 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acea:	2023      	movs	r0, #35	; 0x23
    acec:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    acf0:	e7c8      	b.n	ac84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x18fc>
    acf2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    acf6:	b140      	cbz	r0, ad0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1982>
    acf8:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    acfc:	1c41      	adds	r1, r0, #1
    acfe:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
    ad02:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    ad06:	4288      	cmp	r0, r1
    ad08:	d221      	bcs.n	ad4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x19c6>
    ad0a:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    ad0e:	b140      	cbz	r0, ad22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x199a>
    ad10:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
    ad14:	1c41      	adds	r1, r0, #1
    ad16:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
    ad1a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    ad1e:	4288      	cmp	r0, r1
    ad20:	d215      	bcs.n	ad4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x19c6>
    ad22:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    ad26:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
    ad2a:	e000      	b.n	ad2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x19a6>
    ad2c:	e01d      	b.n	ad6a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x19e2>
    ad2e:	4281      	cmp	r1, r0
    ad30:	d309      	bcc.n	ad46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x19be>
    ad32:	686a      	ldr	r2, [r5, #4]
    ad34:	f892 2120 	ldrb.w	r2, [r2, #288]	; 0x120
    ad38:	f88d 2000 	strb.w	r2, [sp]
    ad3c:	9a00      	ldr	r2, [sp, #0]
    ad3e:	9200      	str	r2, [sp, #0]
    ad40:	f89d 2000 	ldrb.w	r2, [sp]
    ad44:	b91a      	cbnz	r2, ad4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x19c6>
    ad46:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
    ad4a:	4291      	cmp	r1, r2
    ad4c:	d301      	bcc.n	ad52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x19ca>
    ad4e:	2022      	movs	r0, #34	; 0x22
    ad50:	e7cc      	b.n	acec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1964>
    ad52:	7ca1      	ldrb	r1, [r4, #18]
    ad54:	b121      	cbz	r1, ad60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x19d8>
    ad56:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    ad58:	4281      	cmp	r1, r0
    ad5a:	d39f      	bcc.n	ac9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1914>
    ad5c:	2008      	movs	r0, #8
    ad5e:	e7c5      	b.n	acec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1964>
    ad60:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    ad62:	2806      	cmp	r0, #6
    ad64:	d39a      	bcc.n	ac9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1914>
    ad66:	203e      	movs	r0, #62	; 0x3e
    ad68:	e7c0      	b.n	acec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1964>
    ad6a:	6868      	ldr	r0, [r5, #4]
    ad6c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ad70:	2100      	movs	r1, #0
    ad72:	f7fd b9ed 	b.w	8150 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    ad76:	f8d0 01f8 	ldr.w	r0, [r0, #504]	; 0x1f8
    ad7a:	7801      	ldrb	r1, [r0, #0]
    ad7c:	1e49      	subs	r1, r1, #1
    ad7e:	7001      	strb	r1, [r0, #0]
    ad80:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ad84:	f7fb bdc4 	b.w	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ad88:	20000164 	.word	0x20000164
    ad8c:	4804      	ldr	r0, [pc, #16]	; (ada0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a18>)
    ad8e:	b510      	push	{r4, lr}
    ad90:	6840      	ldr	r0, [r0, #4]
    ad92:	8800      	ldrh	r0, [r0, #0]
    ad94:	f7fa f80c 	bl	4db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ad98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad9c:	f003 bbea 	b.w	e574 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    ada0:	20000164 	.word	0x20000164
    ada4:	4a19      	ldr	r2, [pc, #100]	; (ae0c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a84>)
    ada6:	2901      	cmp	r1, #1
    ada8:	6852      	ldr	r2, [r2, #4]
    adaa:	d010      	beq.n	adce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a46>
    adac:	2100      	movs	r1, #0
    adae:	b1c8      	cbz	r0, ade4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a5c>
    adb0:	2801      	cmp	r0, #1
    adb2:	d022      	beq.n	adfa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a72>
    adb4:	2803      	cmp	r0, #3
    adb6:	d109      	bne.n	adcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a44>
    adb8:	f892 008d 	ldrb.w	r0, [r2, #141]	; 0x8d
    adbc:	2813      	cmp	r0, #19
    adbe:	d005      	beq.n	adcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a44>
    adc0:	2816      	cmp	r0, #22
    adc2:	d003      	beq.n	adcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a44>
    adc4:	2818      	cmp	r0, #24
    adc6:	d001      	beq.n	adcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a44>
    adc8:	f882 1218 	strb.w	r1, [r2, #536]	; 0x218
    adcc:	4770      	bx	lr
    adce:	f892 0114 	ldrb.w	r0, [r2, #276]	; 0x114
    add2:	2801      	cmp	r0, #1
    add4:	d0fa      	beq.n	adcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a44>
    add6:	bf00      	nop
    add8:	f8d2 01f8 	ldr.w	r0, [r2, #504]	; 0x1f8
    addc:	7801      	ldrb	r1, [r0, #0]
    adde:	1e49      	subs	r1, r1, #1
    ade0:	7001      	strb	r1, [r0, #0]
    ade2:	4770      	bx	lr
    ade4:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
    ade8:	f8b2 3206 	ldrh.w	r3, [r2, #518]	; 0x206
    adec:	1ac0      	subs	r0, r0, r3
    adee:	b200      	sxth	r0, r0
    adf0:	2800      	cmp	r0, #0
    adf2:	dbf6      	blt.n	ade2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a5a>
    adf4:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
    adf8:	4770      	bx	lr
    adfa:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
    adfe:	f8b2 11fe 	ldrh.w	r1, [r2, #510]	; 0x1fe
    ae02:	1a40      	subs	r0, r0, r1
    ae04:	b200      	sxth	r0, r0
    ae06:	2800      	cmp	r0, #0
    ae08:	dae6      	bge.n	add8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a50>
    ae0a:	4770      	bx	lr
    ae0c:	20000164 	.word	0x20000164

0000ae10 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    ae10:	b510      	push	{r4, lr}
    ae12:	6981      	ldr	r1, [r0, #24]
    ae14:	b119      	cbz	r1, ae1e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    ae16:	6882      	ldr	r2, [r0, #8]
    ae18:	688b      	ldr	r3, [r1, #8]
    ae1a:	429a      	cmp	r2, r3
    ae1c:	d203      	bcs.n	ae26 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    ae1e:	21c7      	movs	r1, #199	; 0xc7
    ae20:	2037      	movs	r0, #55	; 0x37
    ae22:	f7f9 fbc9 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae26:	6942      	ldr	r2, [r0, #20]
    ae28:	614a      	str	r2, [r1, #20]
    ae2a:	6903      	ldr	r3, [r0, #16]
    ae2c:	610b      	str	r3, [r1, #16]
    ae2e:	b10a      	cbz	r2, ae34 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    ae30:	6111      	str	r1, [r2, #16]
    ae32:	e001      	b.n	ae38 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    ae34:	4a06      	ldr	r2, [pc, #24]	; (ae50 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    ae36:	6011      	str	r1, [r2, #0]
    ae38:	690a      	ldr	r2, [r1, #16]
    ae3a:	b132      	cbz	r2, ae4a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    ae3c:	6151      	str	r1, [r2, #20]
    ae3e:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    ae42:	4410      	add	r0, r2
    ae44:	688a      	ldr	r2, [r1, #8]
    ae46:	1a80      	subs	r0, r0, r2
    ae48:	e000      	b.n	ae4c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    ae4a:	2000      	movs	r0, #0
    ae4c:	60c8      	str	r0, [r1, #12]
    ae4e:	bd10      	pop	{r4, pc}
    ae50:	2000029c 	.word	0x2000029c

0000ae54 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    ae54:	b510      	push	{r4, lr}
    ae56:	2200      	movs	r2, #0
    ae58:	6141      	str	r1, [r0, #20]
    ae5a:	b189      	cbz	r1, ae80 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    ae5c:	690b      	ldr	r3, [r1, #16]
    ae5e:	6108      	str	r0, [r1, #16]
    ae60:	6103      	str	r3, [r0, #16]
    ae62:	b103      	cbz	r3, ae66 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    ae64:	6158      	str	r0, [r3, #20]
    ae66:	6941      	ldr	r1, [r0, #20]
    ae68:	60c2      	str	r2, [r0, #12]
    ae6a:	2900      	cmp	r1, #0
    ae6c:	d00f      	beq.n	ae8e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    ae6e:	68cb      	ldr	r3, [r1, #12]
    ae70:	b163      	cbz	r3, ae8c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    ae72:	6884      	ldr	r4, [r0, #8]
    ae74:	42a3      	cmp	r3, r4
    ae76:	d207      	bcs.n	ae88 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    ae78:	212a      	movs	r1, #42	; 0x2a
    ae7a:	2037      	movs	r0, #55	; 0x37
    ae7c:	f7f9 fb9c 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae80:	4903      	ldr	r1, [pc, #12]	; (ae90 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    ae82:	6102      	str	r2, [r0, #16]
    ae84:	6008      	str	r0, [r1, #0]
    ae86:	e7ee      	b.n	ae66 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    ae88:	1b1b      	subs	r3, r3, r4
    ae8a:	60c3      	str	r3, [r0, #12]
    ae8c:	60ca      	str	r2, [r1, #12]
    ae8e:	bd10      	pop	{r4, pc}
    ae90:	2000029c 	.word	0x2000029c

0000ae94 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    ae94:	6941      	ldr	r1, [r0, #20]
    ae96:	b149      	cbz	r1, aeac <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    ae98:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    ae9c:	441a      	add	r2, r3
    ae9e:	68cb      	ldr	r3, [r1, #12]
    aea0:	441a      	add	r2, r3
    aea2:	60ca      	str	r2, [r1, #12]
    aea4:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    aea8:	6111      	str	r1, [r2, #16]
    aeaa:	e002      	b.n	aeb2 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    aeac:	4a06      	ldr	r2, [pc, #24]	; (aec8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    aeae:	6901      	ldr	r1, [r0, #16]
    aeb0:	6011      	str	r1, [r2, #0]
    aeb2:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
    aeb6:	b109      	cbz	r1, aebc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    aeb8:	6148      	str	r0, [r1, #20]
    aeba:	4770      	bx	lr
    aebc:	2800      	cmp	r0, #0
    aebe:	d0fc      	beq.n	aeba <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    aec0:	2100      	movs	r1, #0
    aec2:	60c1      	str	r1, [r0, #12]
    aec4:	4770      	bx	lr
    aec6:	0000      	.short	0x0000
    aec8:	2000029c 	.word	0x2000029c

0000aecc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    aecc:	b510      	push	{r4, lr}
    aece:	4604      	mov	r4, r0
    aed0:	490a      	ldr	r1, [pc, #40]	; (aefc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    aed2:	2000      	movs	r0, #0
    aed4:	4602      	mov	r2, r0
    aed6:	6809      	ldr	r1, [r1, #0]
    aed8:	1e43      	subs	r3, r0, #1
    aeda:	e008      	b.n	aeee <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    aedc:	68ca      	ldr	r2, [r1, #12]
    aede:	42a2      	cmp	r2, r4
    aee0:	d303      	bcc.n	aeea <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    aee2:	429a      	cmp	r2, r3
    aee4:	d201      	bcs.n	aeea <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    aee6:	4613      	mov	r3, r2
    aee8:	4608      	mov	r0, r1
    aeea:	460a      	mov	r2, r1
    aeec:	6909      	ldr	r1, [r1, #16]
    aeee:	2900      	cmp	r1, #0
    aef0:	d1f4      	bne.n	aedc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    aef2:	2800      	cmp	r0, #0
    aef4:	d100      	bne.n	aef8 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    aef6:	4610      	mov	r0, r2
    aef8:	bd10      	pop	{r4, pc}
    aefa:	0000      	.short	0x0000
    aefc:	2000029c 	.word	0x2000029c

0000af00 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    af00:	4801      	ldr	r0, [pc, #4]	; (af08 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    af02:	6800      	ldr	r0, [r0, #0]
    af04:	4770      	bx	lr
    af06:	0000      	.short	0x0000
    af08:	2000029c 	.word	0x2000029c

0000af0c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    af0c:	4804      	ldr	r0, [pc, #16]	; (af20 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    af0e:	6801      	ldr	r1, [r0, #0]
    af10:	2000      	movs	r0, #0
    af12:	e001      	b.n	af18 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    af14:	4608      	mov	r0, r1
    af16:	6909      	ldr	r1, [r1, #16]
    af18:	2900      	cmp	r1, #0
    af1a:	d1fb      	bne.n	af14 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    af1c:	4770      	bx	lr
    af1e:	0000      	.short	0x0000
    af20:	2000029c 	.word	0x2000029c

0000af24 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    af24:	4801      	ldr	r0, [pc, #4]	; (af2c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    af26:	2100      	movs	r1, #0
    af28:	6001      	str	r1, [r0, #0]
    af2a:	4770      	bx	lr
    af2c:	2000029c 	.word	0x2000029c

0000af30 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    af30:	4903      	ldr	r1, [pc, #12]	; (af40 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    af32:	2000      	movs	r0, #0
    af34:	6809      	ldr	r1, [r1, #0]
    af36:	2900      	cmp	r1, #0
    af38:	d000      	beq.n	af3c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    af3a:	200c      	movs	r0, #12
    af3c:	4770      	bx	lr
    af3e:	0000      	.short	0x0000
    af40:	2000029c 	.word	0x2000029c

0000af44 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    af44:	b500      	push	{lr}
    af46:	7941      	ldrb	r1, [r0, #5]
    af48:	b095      	sub	sp, #84	; 0x54
    af4a:	b141      	cbz	r1, af5e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    af4c:	2901      	cmp	r1, #1
    af4e:	d006      	beq.n	af5e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    af50:	2902      	cmp	r1, #2
    af52:	d004      	beq.n	af5e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    af54:	2903      	cmp	r1, #3
    af56:	d002      	beq.n	af5e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    af58:	2012      	movs	r0, #18
    af5a:	b015      	add	sp, #84	; 0x54
    af5c:	bd00      	pop	{pc}
    af5e:	7901      	ldrb	r1, [r0, #4]
    af60:	f88d 1000 	strb.w	r1, [sp]
    af64:	7b01      	ldrb	r1, [r0, #12]
    af66:	f88d 1001 	strb.w	r1, [sp, #1]
    af6a:	7942      	ldrb	r2, [r0, #5]
    af6c:	2100      	movs	r1, #0
    af6e:	2301      	movs	r3, #1
    af70:	b3e2      	cbz	r2, afec <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    af72:	2a02      	cmp	r2, #2
    af74:	d03b      	beq.n	afee <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    af76:	f88d 3002 	strb.w	r3, [sp, #2]
    af7a:	bf00      	nop
    af7c:	f8d0 2006 	ldr.w	r2, [r0, #6]
    af80:	f8cd 2003 	str.w	r2, [sp, #3]
    af84:	8942      	ldrh	r2, [r0, #10]
    af86:	f8ad 2007 	strh.w	r2, [sp, #7]
    af8a:	f88d 3009 	strb.w	r3, [sp, #9]
    af8e:	f830 2b01 	ldrh.w	r2, [r0], #1
    af92:	f240 2371 	movw	r3, #625	; 0x271
    af96:	435a      	muls	r2, r3
    af98:	9203      	str	r2, [sp, #12]
    af9a:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    af9e:	435a      	muls	r2, r3
    afa0:	9206      	str	r2, [sp, #24]
    afa2:	8982      	ldrh	r2, [r0, #12]
    afa4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    afa8:	89c2      	ldrh	r2, [r0, #14]
    afaa:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    afae:	8a02      	ldrh	r2, [r0, #16]
    afb0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    afb4:	8a42      	ldrh	r2, [r0, #18]
    afb6:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    afba:	8a82      	ldrh	r2, [r0, #20]
    afbc:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    afc0:	8ac0      	ldrh	r0, [r0, #22]
    afc2:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    afc6:	2007      	movs	r0, #7
    afc8:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    afcc:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    afd0:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    afd4:	9806      	ldr	r0, [sp, #24]
    afd6:	f000 fb21 	bl	b61c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x170>
    afda:	b158      	cbz	r0, aff4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    afdc:	9803      	ldr	r0, [sp, #12]
    afde:	f000 fb11 	bl	b604 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x158>
    afe2:	b138      	cbz	r0, aff4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    afe4:	4668      	mov	r0, sp
    afe6:	f000 f891 	bl	b10c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    afea:	e7b6      	b.n	af5a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    afec:	e7ff      	b.n	afee <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    afee:	f88d 1002 	strb.w	r1, [sp, #2]
    aff2:	e7c3      	b.n	af7c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    aff4:	2030      	movs	r0, #48	; 0x30
    aff6:	e7b0      	b.n	af5a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000aff8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    aff8:	4903      	ldr	r1, [pc, #12]	; (b008 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    affa:	884a      	ldrh	r2, [r1, #2]
    affc:	8002      	strh	r2, [r0, #0]
    affe:	7809      	ldrb	r1, [r1, #0]
    b000:	7081      	strb	r1, [r0, #2]
    b002:	2000      	movs	r0, #0
    b004:	4770      	bx	lr
    b006:	0000      	.short	0x0000
    b008:	20001328 	.word	0x20001328

0000b00c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    b00c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b00e:	460c      	mov	r4, r1
    b010:	4605      	mov	r5, r0
    b012:	8800      	ldrh	r0, [r0, #0]
    b014:	4669      	mov	r1, sp
    b016:	f003 fd85 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b01a:	2200      	movs	r2, #0
    b01c:	b128      	cbz	r0, b02a <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    b01e:	f8c4 2002 	str.w	r2, [r4, #2]
    b022:	71a2      	strb	r2, [r4, #6]
    b024:	8022      	strh	r2, [r4, #0]
    b026:	2002      	movs	r0, #2
    b028:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b02a:	9901      	ldr	r1, [sp, #4]
    b02c:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    b030:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    b034:	f8d1 0017 	ldr.w	r0, [r1, #23]
    b038:	f8c4 0002 	str.w	r0, [r4, #2]
    b03c:	7ec8      	ldrb	r0, [r1, #27]
    b03e:	71a0      	strb	r0, [r4, #6]
    b040:	8828      	ldrh	r0, [r5, #0]
    b042:	8020      	strh	r0, [r4, #0]
    b044:	f891 0066 	ldrb.w	r0, [r1, #102]	; 0x66
    b048:	f88d 0008 	strb.w	r0, [sp, #8]
    b04c:	9802      	ldr	r0, [sp, #8]
    b04e:	9002      	str	r0, [sp, #8]
    b050:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b054:	2800      	cmp	r0, #0
    b056:	d1eb      	bne.n	b030 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    b058:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000b05c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    b05c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    b05e:	460d      	mov	r5, r1
    b060:	4606      	mov	r6, r0
    b062:	8800      	ldrh	r0, [r0, #0]
    b064:	4669      	mov	r1, sp
    b066:	f003 fd5d 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b06a:	2800      	cmp	r0, #0
    b06c:	d11a      	bne.n	b0a4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    b06e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    b072:	2700      	movs	r7, #0
    b074:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    b078:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
    b07c:	f005 fac9 	bl	10612 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    b080:	70a8      	strb	r0, [r5, #2]
    b082:	7860      	ldrb	r0, [r4, #1]
    b084:	f005 fac5 	bl	10612 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    b088:	70e8      	strb	r0, [r5, #3]
    b08a:	78a0      	ldrb	r0, [r4, #2]
    b08c:	f88d 0008 	strb.w	r0, [sp, #8]
    b090:	9802      	ldr	r0, [sp, #8]
    b092:	9002      	str	r0, [sp, #8]
    b094:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b098:	3c6e      	subs	r4, #110	; 0x6e
    b09a:	2800      	cmp	r0, #0
    b09c:	d1ea      	bne.n	b074 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    b09e:	8830      	ldrh	r0, [r6, #0]
    b0a0:	8028      	strh	r0, [r5, #0]
    b0a2:	2000      	movs	r0, #0
    b0a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000b0a8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    b0a8:	4903      	ldr	r1, [pc, #12]	; (b0b8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    b0aa:	888a      	ldrh	r2, [r1, #4]
    b0ac:	8002      	strh	r2, [r0, #0]
    b0ae:	88c9      	ldrh	r1, [r1, #6]
    b0b0:	8041      	strh	r1, [r0, #2]
    b0b2:	2000      	movs	r0, #0
    b0b4:	4770      	bx	lr
    b0b6:	0000      	.short	0x0000
    b0b8:	200002ae 	.word	0x200002ae

0000b0bc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    b0bc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b0be:	2400      	movs	r4, #0
    b0c0:	a902      	add	r1, sp, #8
    b0c2:	f88d 4004 	strb.w	r4, [sp, #4]
    b0c6:	f88d 4008 	strb.w	r4, [sp, #8]
    b0ca:	9100      	str	r1, [sp, #0]
    b0cc:	7882      	ldrb	r2, [r0, #2]
    b0ce:	7841      	ldrb	r1, [r0, #1]
    b0d0:	7800      	ldrb	r0, [r0, #0]
    b0d2:	ab01      	add	r3, sp, #4
    b0d4:	f005 fc9d 	bl	10a12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x444>
    b0d8:	2800      	cmp	r0, #0
    b0da:	d112      	bne.n	b102 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    b0dc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b0e0:	f005 faae 	bl	10640 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    b0e4:	b170      	cbz	r0, b104 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    b0e6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b0ea:	f005 faa9 	bl	10640 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    b0ee:	b148      	cbz	r0, b104 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    b0f0:	4805      	ldr	r0, [pc, #20]	; (b108 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    b0f2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b0f6:	7381      	strb	r1, [r0, #14]
    b0f8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b0fc:	73c1      	strb	r1, [r0, #15]
    b0fe:	8204      	strh	r4, [r0, #16]
    b100:	2000      	movs	r0, #0
    b102:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b104:	2011      	movs	r0, #17
    b106:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b108:	20001328 	.word	0x20001328

0000b10c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    b10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b110:	a1a8      	add	r1, pc, #672	; (adr r1, b3b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a8>)
    b112:	4605      	mov	r5, r0
    b114:	e9d1 8700 	ldrd	r8, r7, [r1]
    b118:	7a40      	ldrb	r0, [r0, #9]
    b11a:	b08c      	sub	sp, #48	; 0x30
    b11c:	0781      	lsls	r1, r0, #30
    b11e:	d502      	bpl.n	b126 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    b120:	f040 0001 	orr.w	r0, r0, #1
    b124:	7268      	strb	r0, [r5, #9]
    b126:	4628      	mov	r0, r5
    b128:	f005 fae9 	bl	106fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    b12c:	2800      	cmp	r0, #0
    b12e:	d10c      	bne.n	b14a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b130:	f005 fc5d 	bl	109ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x420>
    b134:	b940      	cbnz	r0, b148 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    b136:	f7fb fbdb 	bl	68f0 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    b13a:	b928      	cbnz	r0, b148 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    b13c:	f7fb fe70 	bl	6e20 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    b140:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    b144:	39ff      	subs	r1, #255	; 0xff
    b146:	d003      	beq.n	b150 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    b148:	200c      	movs	r0, #12
    b14a:	b00c      	add	sp, #48	; 0x30
    b14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b150:	2103      	movs	r1, #3
    b152:	f105 0018 	add.w	r0, r5, #24
    b156:	f000 fa6d 	bl	b634 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x188>
    b15a:	2200      	movs	r2, #0
    b15c:	4611      	mov	r1, r2
    b15e:	a802      	add	r0, sp, #8
    b160:	f7f9 fc7c 	bl	4a5c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b164:	0004      	movs	r4, r0
    b166:	d015      	beq.n	b194 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x88>
    b168:	2100      	movs	r1, #0
    b16a:	f7fb f8eb 	bl	6344 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    b16e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    b172:	8020      	strh	r0, [r4, #0]
    b174:	4891      	ldr	r0, [pc, #580]	; (b3bc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2b0>)
    b176:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    b17a:	f000 fb97 	bl	b8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b17e:	0940      	lsrs	r0, r0, #5
    b180:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    b184:	07c0      	lsls	r0, r0, #31
    b186:	498e      	ldr	r1, [pc, #568]	; (b3c0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2b4>)
    b188:	f104 0030 	add.w	r0, r4, #48	; 0x30
    b18c:	d004      	beq.n	b198 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    b18e:	884a      	ldrh	r2, [r1, #2]
    b190:	888b      	ldrh	r3, [r1, #4]
    b192:	e003      	b.n	b19c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x90>
    b194:	2009      	movs	r0, #9
    b196:	e7d8      	b.n	b14a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b198:	221b      	movs	r2, #27
    b19a:	4613      	mov	r3, r2
    b19c:	84c2      	strh	r2, [r0, #38]	; 0x26
    b19e:	8503      	strh	r3, [r0, #40]	; 0x28
    b1a0:	4689      	mov	r9, r1
    b1a2:	4608      	mov	r0, r1
    b1a4:	7849      	ldrb	r1, [r1, #1]
    b1a6:	9100      	str	r1, [sp, #0]
    b1a8:	7803      	ldrb	r3, [r0, #0]
    b1aa:	8882      	ldrh	r2, [r0, #4]
    b1ac:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    b1b0:	8820      	ldrh	r0, [r4, #0]
    b1b2:	f7f9 fd35 	bl	4c20 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b1b6:	b110      	cbz	r0, b1be <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xb2>
    b1b8:	f640 61cd 	movw	r1, #3789	; 0xecd
    b1bc:	e0f4      	b.n	b3a8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>
    b1be:	f004 fa49 	bl	f654 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    b1c2:	6160      	str	r0, [r4, #20]
    b1c4:	a07f      	add	r0, pc, #508	; (adr r0, b3c4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2b8>)
    b1c6:	f104 061c 	add.w	r6, r4, #28
    b1ca:	6800      	ldr	r0, [r0, #0]
    b1cc:	9005      	str	r0, [sp, #20]
    b1ce:	2103      	movs	r1, #3
    b1d0:	a805      	add	r0, sp, #20
    b1d2:	f7f9 fa8f 	bl	46f4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    b1d6:	2000      	movs	r0, #0
    b1d8:	a905      	add	r1, sp, #20
    b1da:	5c0a      	ldrb	r2, [r1, r0]
    b1dc:	5432      	strb	r2, [r6, r0]
    b1de:	1c40      	adds	r0, r0, #1
    b1e0:	b2c0      	uxtb	r0, r0
    b1e2:	2803      	cmp	r0, #3
    b1e4:	d3f9      	bcc.n	b1da <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xce>
    b1e6:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    b1e8:	f003 fca8 	bl	eb3c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    b1ec:	6120      	str	r0, [r4, #16]
    b1ee:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    b1f0:	8320      	strh	r0, [r4, #24]
    b1f2:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    b1f4:	8360      	strh	r0, [r4, #26]
    b1f6:	7a68      	ldrb	r0, [r5, #9]
    b1f8:	f005 fa01 	bl	105fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    b1fc:	f8d9 1008 	ldr.w	r1, [r9, #8]
    b200:	464e      	mov	r6, r9
    b202:	4620      	mov	r0, r4
    b204:	6321      	str	r1, [r4, #48]	; 0x30
    b206:	f004 fc7f 	bl	fb08 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    b20a:	f8c4 8097 	str.w	r8, [r4, #151]	; 0x97
    b20e:	f04f 0901 	mov.w	r9, #1
    b212:	f884 709b 	strb.w	r7, [r4, #155]	; 0x9b
    b216:	20ff      	movs	r0, #255	; 0xff
    b218:	f884 01fc 	strb.w	r0, [r4, #508]	; 0x1fc
    b21c:	4867      	ldr	r0, [pc, #412]	; (b3bc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2b0>)
    b21e:	3808      	subs	r0, #8
    b220:	6843      	ldr	r3, [r0, #4]
    b222:	b123      	cbz	r3, b22e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x122>
    b224:	2201      	movs	r2, #1
    b226:	f504 7191 	add.w	r1, r4, #290	; 0x122
    b22a:	4620      	mov	r0, r4
    b22c:	4798      	blx	r3
    b22e:	8821      	ldrh	r1, [r4, #0]
    b230:	f8ad 1014 	strh.w	r1, [sp, #20]
    b234:	7bb1      	ldrb	r1, [r6, #14]
    b236:	f88d 1016 	strb.w	r1, [sp, #22]
    b23a:	7bf1      	ldrb	r1, [r6, #15]
    b23c:	f88d 1017 	strb.w	r1, [sp, #23]
    b240:	8a31      	ldrh	r1, [r6, #16]
    b242:	f8ad 1018 	strh.w	r1, [sp, #24]
    b246:	a908      	add	r1, sp, #32
    b248:	9100      	str	r1, [sp, #0]
    b24a:	2000      	movs	r0, #0
    b24c:	ab07      	add	r3, sp, #28
    b24e:	aa05      	add	r2, sp, #20
    b250:	4621      	mov	r1, r4
    b252:	f005 fb8c 	bl	1096e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a0>
    b256:	0006      	movs	r6, r0
    b258:	d10f      	bne.n	b27a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x16e>
    b25a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    b25e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    b262:	f89d 0020 	ldrb.w	r0, [sp, #32]
    b266:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    b26a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    b26e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    b272:	a909      	add	r1, sp, #36	; 0x24
    b274:	4620      	mov	r0, r4
    b276:	f003 fd1f 	bl	ecb8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b27a:	f04f 0800 	mov.w	r8, #0
    b27e:	f88d 800c 	strb.w	r8, [sp, #12]
    b282:	2101      	movs	r1, #1
    b284:	a803      	add	r0, sp, #12
    b286:	f7f9 fa35 	bl	46f4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    b28a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    b28e:	f000 0107 	and.w	r1, r0, #7
    b292:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    b296:	4411      	add	r1, r2
    b298:	f3c0 1040 	ubfx	r0, r0, #5, #1
    b29c:	4408      	add	r0, r1
    b29e:	f88d 000c 	strb.w	r0, [sp, #12]
    b2a2:	1d40      	adds	r0, r0, #5
    b2a4:	f884 00a2 	strb.w	r0, [r4, #162]	; 0xa2
    b2a8:	2809      	cmp	r0, #9
    b2aa:	d202      	bcs.n	b2b2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a6>
    b2ac:	3008      	adds	r0, #8
    b2ae:	f884 00a2 	strb.w	r0, [r4, #162]	; 0xa2
    b2b2:	2101      	movs	r1, #1
    b2b4:	4620      	mov	r0, r4
    b2b6:	f7fb f845 	bl	6344 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    b2ba:	7868      	ldrb	r0, [r5, #1]
    b2bc:	f7fb fea0 	bl	7000 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    b2c0:	2e00      	cmp	r6, #0
    b2c2:	d167      	bne.n	b394 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x288>
    b2c4:	78a9      	ldrb	r1, [r5, #2]
    b2c6:	7828      	ldrb	r0, [r5, #0]
    b2c8:	1cea      	adds	r2, r5, #3
    b2ca:	f7fb fe23 	bl	6f14 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    b2ce:	b148      	cbz	r0, b2e4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1d8>
    b2d0:	f7fb fd52 	bl	6d78 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    b2d4:	78a9      	ldrb	r1, [r5, #2]
    b2d6:	7828      	ldrb	r0, [r5, #0]
    b2d8:	1cea      	adds	r2, r5, #3
    b2da:	f7fb fe3f 	bl	6f5c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    b2de:	0006      	movs	r6, r0
    b2e0:	d002      	beq.n	b2e8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1dc>
    b2e2:	e057      	b.n	b394 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x288>
    b2e4:	2612      	movs	r6, #18
    b2e6:	e055      	b.n	b394 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x288>
    b2e8:	4621      	mov	r1, r4
    b2ea:	2003      	movs	r0, #3
    b2ec:	f7fb fd8c 	bl	6e08 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    b2f0:	4606      	mov	r6, r0
    b2f2:	78a8      	ldrb	r0, [r5, #2]
    b2f4:	f004 fd83 	bl	fdfe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x64>
    b2f8:	1ce9      	adds	r1, r5, #3
    b2fa:	f7fb fe59 	bl	6fb0 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>
    b2fe:	bb16      	cbnz	r6, b346 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x23a>
    b300:	7828      	ldrb	r0, [r5, #0]
    b302:	bb30      	cbnz	r0, b352 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x246>
    b304:	f895 a002 	ldrb.w	sl, [r5, #2]
    b308:	1cef      	adds	r7, r5, #3
    b30a:	a907      	add	r1, sp, #28
    b30c:	2000      	movs	r0, #0
    b30e:	f003 fa54 	bl	e7ba <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    b312:	b1c8      	cbz	r0, b348 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x23c>
    b314:	f240 2102 	movw	r1, #514	; 0x202
    b318:	e046      	b.n	b3a8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>
    b31a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b31c:	42b4      	cmp	r4, r6
    b31e:	d013      	beq.n	b348 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x23c>
    b320:	4650      	mov	r0, sl
    b322:	f004 fd6c 	bl	fdfe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x64>
    b326:	78b2      	ldrb	r2, [r6, #2]
    b328:	1cf3      	adds	r3, r6, #3
    b32a:	4639      	mov	r1, r7
    b32c:	f003 fadd 	bl	e8ea <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    b330:	b150      	cbz	r0, b348 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x23c>
    b332:	7a72      	ldrb	r2, [r6, #9]
    b334:	7a60      	ldrb	r0, [r4, #9]
    b336:	f106 030a 	add.w	r3, r6, #10
    b33a:	f104 010a 	add.w	r1, r4, #10
    b33e:	f003 fad4 	bl	e8ea <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    b342:	b108      	cbz	r0, b348 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x23c>
    b344:	260b      	movs	r6, #11
    b346:	e025      	b.n	b394 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x288>
    b348:	a807      	add	r0, sp, #28
    b34a:	f7f9 fb61 	bl	4a10 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    b34e:	2800      	cmp	r0, #0
    b350:	d0e3      	beq.n	b31a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x20e>
    b352:	464f      	mov	r7, r9
    b354:	4648      	mov	r0, r9
    b356:	f7fb fd9f 	bl	6e98 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    b35a:	0006      	movs	r6, r0
    b35c:	d11a      	bne.n	b394 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x288>
    b35e:	f88d 800c 	strb.w	r8, [sp, #12]
    b362:	7a68      	ldrb	r0, [r5, #9]
    b364:	07c0      	lsls	r0, r0, #31
    b366:	d005      	beq.n	b374 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x268>
    b368:	68e8      	ldr	r0, [r5, #12]
    b36a:	9004      	str	r0, [sp, #16]
    b36c:	69a8      	ldr	r0, [r5, #24]
    b36e:	9005      	str	r0, [sp, #20]
    b370:	f88d 700c 	strb.w	r7, [sp, #12]
    b374:	a803      	add	r0, sp, #12
    b376:	f7fd f887 	bl	8488 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    b37a:	4606      	mov	r6, r0
    b37c:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    b380:	f7fb feb2 	bl	70e8 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    b384:	b936      	cbnz	r6, b394 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x288>
    b386:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    b38a:	4620      	mov	r0, r4
    b38c:	f7fc ff9c 	bl	82c8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    b390:	0006      	movs	r6, r0
    b392:	d00c      	beq.n	b3ae <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a2>
    b394:	8820      	ldrh	r0, [r4, #0]
    b396:	f003 faa4 	bl	e8e2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    b39a:	8820      	ldrh	r0, [r4, #0]
    b39c:	2100      	movs	r1, #0
    b39e:	f7f9 fb85 	bl	4aac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b3a2:	b120      	cbz	r0, b3ae <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a2>
    b3a4:	f640 719d 	movw	r1, #3997	; 0xf9d
    b3a8:	2039      	movs	r0, #57	; 0x39
    b3aa:	f7f9 f905 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3ae:	4630      	mov	r0, r6
    b3b0:	e6cb      	b.n	b14a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b3b2:	0000      	.short	0x0000
    b3b4:	ffffffff 	.word	0xffffffff
    b3b8:	0000001f 	.word	0x0000001f
    b3bc:	200002a8 	.word	0x200002a8
    b3c0:	20001328 	.word	0x20001328
    b3c4:	00332211 	.word	0x00332211

0000b3c8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    b3c8:	7801      	ldrb	r1, [r0, #0]
    b3ca:	b171      	cbz	r1, b3ea <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b3cc:	7841      	ldrb	r1, [r0, #1]
    b3ce:	b161      	cbz	r1, b3ea <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b3d0:	8841      	ldrh	r1, [r0, #2]
    b3d2:	291b      	cmp	r1, #27
    b3d4:	d309      	bcc.n	b3ea <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b3d6:	8881      	ldrh	r1, [r0, #4]
    b3d8:	291b      	cmp	r1, #27
    b3da:	d306      	bcc.n	b3ea <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b3dc:	4904      	ldr	r1, [pc, #16]	; (b3f0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    b3de:	6802      	ldr	r2, [r0, #0]
    b3e0:	600a      	str	r2, [r1, #0]
    b3e2:	8880      	ldrh	r0, [r0, #4]
    b3e4:	8088      	strh	r0, [r1, #4]
    b3e6:	2000      	movs	r0, #0
    b3e8:	4770      	bx	lr
    b3ea:	2012      	movs	r0, #18
    b3ec:	4770      	bx	lr
    b3ee:	0000      	.short	0x0000
    b3f0:	20001328 	.word	0x20001328

0000b3f4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    b3f4:	6800      	ldr	r0, [r0, #0]
    b3f6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b3fa:	4288      	cmp	r0, r1
    b3fc:	d303      	bcc.n	b406 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    b3fe:	4903      	ldr	r1, [pc, #12]	; (b40c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    b400:	6088      	str	r0, [r1, #8]
    b402:	2000      	movs	r0, #0
    b404:	4770      	bx	lr
    b406:	2012      	movs	r0, #18
    b408:	4770      	bx	lr
    b40a:	0000      	.short	0x0000
    b40c:	20001328 	.word	0x20001328

0000b410 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    b410:	b510      	push	{r4, lr}
    b412:	b086      	sub	sp, #24
    b414:	4604      	mov	r4, r0
    b416:	f005 f9e9 	bl	107ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21e>
    b41a:	2800      	cmp	r0, #0
    b41c:	d103      	bne.n	b426 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    b41e:	f005 fae6 	bl	109ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x420>
    b422:	b110      	cbz	r0, b42a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    b424:	200c      	movs	r0, #12
    b426:	b006      	add	sp, #24
    b428:	bd10      	pop	{r4, pc}
    b42a:	2102      	movs	r1, #2
    b42c:	f104 0010 	add.w	r0, r4, #16
    b430:	f000 f900 	bl	b634 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x188>
    b434:	78a0      	ldrb	r0, [r4, #2]
    b436:	f88d 0008 	strb.w	r0, [sp, #8]
    b43a:	78a0      	ldrb	r0, [r4, #2]
    b43c:	f88d 0000 	strb.w	r0, [sp]
    b440:	7860      	ldrb	r0, [r4, #1]
    b442:	f88d 0003 	strb.w	r0, [sp, #3]
    b446:	7820      	ldrb	r0, [r4, #0]
    b448:	f88d 0002 	strb.w	r0, [sp, #2]
    b44c:	7e20      	ldrb	r0, [r4, #24]
    b44e:	f88d 0004 	strb.w	r0, [sp, #4]
    b452:	78a0      	ldrb	r0, [r4, #2]
    b454:	07c0      	lsls	r0, r0, #31
    b456:	d00b      	beq.n	b470 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    b458:	78e0      	ldrb	r0, [r4, #3]
    b45a:	2801      	cmp	r0, #1
    b45c:	d011      	beq.n	b482 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    b45e:	b190      	cbz	r0, b486 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    b460:	f05f 0000 	movs.w	r0, #0
    b464:	f88d 0001 	strb.w	r0, [sp, #1]
    b468:	68a0      	ldr	r0, [r4, #8]
    b46a:	9003      	str	r0, [sp, #12]
    b46c:	6920      	ldr	r0, [r4, #16]
    b46e:	9004      	str	r0, [sp, #16]
    b470:	a802      	add	r0, sp, #8
    b472:	f7fd f809 	bl	8488 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    b476:	2800      	cmp	r0, #0
    b478:	d1d5      	bne.n	b426 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    b47a:	4668      	mov	r0, sp
    b47c:	f7fb fe3c 	bl	70f8 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    b480:	e7d1      	b.n	b426 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    b482:	2002      	movs	r0, #2
    b484:	e7ee      	b.n	b464 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    b486:	2001      	movs	r0, #1
    b488:	e7ec      	b.n	b464 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000b48c <sym_EXR6VNSRXAXVPW6IU2YEAYBOR4HO5UQ4GQ2J6XA>:
    b48c:	4801      	ldr	r0, [pc, #4]	; (b494 <sym_EXR6VNSRXAXVPW6IU2YEAYBOR4HO5UQ4GQ2J6XA+0x8>)
    b48e:	f990 0000 	ldrsb.w	r0, [r0]
    b492:	4770      	bx	lr
    b494:	200002a0 	.word	0x200002a0

0000b498 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    b498:	4a03      	ldr	r2, [pc, #12]	; (b4a8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    b49a:	e9d2 1200 	ldrd	r1, r2, [r2]
    b49e:	6001      	str	r1, [r0, #0]
    b4a0:	6042      	str	r2, [r0, #4]
    b4a2:	2000      	movs	r0, #0
    b4a4:	4770      	bx	lr
    b4a6:	0000      	.short	0x0000
    b4a8:	0000b7c8 	.word	0x0000b7c8

0000b4ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>:
    b4ac:	b510      	push	{r4, lr}
    b4ae:	2005      	movs	r0, #5
    b4b0:	f000 f9f0 	bl	b894 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    b4b4:	f7fd fe1c 	bl	90f0 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    b4b8:	4902      	ldr	r1, [pc, #8]	; (b4c4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x18>)
    b4ba:	4801      	ldr	r0, [pc, #4]	; (b4c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14>)
    b4bc:	6048      	str	r0, [r1, #4]
    b4be:	bd10      	pop	{r4, pc}
    b4c0:	0000b4c9 	.word	0x0000b4c9
    b4c4:	200002a0 	.word	0x200002a0
    b4c8:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    b4cc:	4613      	mov	r3, r2
    b4ce:	4a33      	ldr	r2, [pc, #204]	; (b59c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf0>)
    b4d0:	460f      	mov	r7, r1
    b4d2:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
    b4d6:	8814      	ldrh	r4, [r2, #0]
    b4d8:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
    b4dc:	428c      	cmp	r4, r1
    b4de:	d200      	bcs.n	b4e2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x36>
    b4e0:	4621      	mov	r1, r4
    b4e2:	4688      	mov	r8, r1
    b4e4:	8891      	ldrh	r1, [r2, #4]
    b4e6:	42b1      	cmp	r1, r6
    b4e8:	d200      	bcs.n	b4ec <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x40>
    b4ea:	460e      	mov	r6, r1
    b4ec:	8851      	ldrh	r1, [r2, #2]
    b4ee:	f640 0448 	movw	r4, #2120	; 0x848
    b4f2:	42a1      	cmp	r1, r4
    b4f4:	d300      	bcc.n	b4f8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x4c>
    b4f6:	4621      	mov	r1, r4
    b4f8:	88d5      	ldrh	r5, [r2, #6]
    b4fa:	42a5      	cmp	r5, r4
    b4fc:	d300      	bcc.n	b500 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x54>
    b4fe:	4625      	mov	r5, r4
    b500:	42a1      	cmp	r1, r4
    b502:	d200      	bcs.n	b506 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x5a>
    b504:	460c      	mov	r4, r1
    b506:	f44f 72a4 	mov.w	r2, #328	; 0x148
    b50a:	2e1b      	cmp	r6, #27
    b50c:	d001      	beq.n	b512 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x66>
    b50e:	4295      	cmp	r5, r2
    b510:	d104      	bne.n	b51c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x70>
    b512:	f1b8 0f1b 	cmp.w	r8, #27
    b516:	d03e      	beq.n	b596 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    b518:	4294      	cmp	r4, r2
    b51a:	d03c      	beq.n	b596 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    b51c:	466a      	mov	r2, sp
    b51e:	4619      	mov	r1, r3
    b520:	f005 f9ef 	bl	10902 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x334>
    b524:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    b528:	4641      	mov	r1, r8
    b52a:	4540      	cmp	r0, r8
    b52c:	d900      	bls.n	b530 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x84>
    b52e:	4608      	mov	r0, r1
    b530:	80f8      	strh	r0, [r7, #6]
    b532:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    b536:	42a1      	cmp	r1, r4
    b538:	d800      	bhi.n	b53c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x90>
    b53a:	460c      	mov	r4, r1
    b53c:	813c      	strh	r4, [r7, #8]
    b53e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    b542:	42b1      	cmp	r1, r6
    b544:	d800      	bhi.n	b548 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x9c>
    b546:	460e      	mov	r6, r1
    b548:	807e      	strh	r6, [r7, #2]
    b54a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b54e:	42a9      	cmp	r1, r5
    b550:	d800      	bhi.n	b554 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa8>
    b552:	460d      	mov	r5, r1
    b554:	80bd      	strh	r5, [r7, #4]
    b556:	21ff      	movs	r1, #255	; 0xff
    b558:	7039      	strb	r1, [r7, #0]
    b55a:	381b      	subs	r0, #27
    b55c:	28e0      	cmp	r0, #224	; 0xe0
    b55e:	d902      	bls.n	b566 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xba>
    b560:	f640 41b8 	movw	r1, #3256	; 0xcb8
    b564:	e014      	b.n	b590 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    b566:	3e1b      	subs	r6, #27
    b568:	2ee0      	cmp	r6, #224	; 0xe0
    b56a:	d902      	bls.n	b572 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xc6>
    b56c:	f640 41ba 	movw	r1, #3258	; 0xcba
    b570:	e00e      	b.n	b590 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    b572:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    b576:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    b57a:	4284      	cmp	r4, r0
    b57c:	d902      	bls.n	b584 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xd8>
    b57e:	f640 41bc 	movw	r1, #3260	; 0xcbc
    b582:	e005      	b.n	b590 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    b584:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    b588:	4285      	cmp	r5, r0
    b58a:	d904      	bls.n	b596 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    b58c:	f640 41be 	movw	r1, #3262	; 0xcbe
    b590:	2039      	movs	r0, #57	; 0x39
    b592:	f7f9 f811 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b596:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    b59a:	0000      	.short	0x0000
    b59c:	200002ae 	.word	0x200002ae
    b5a0:	b510      	push	{r4, lr}
    b5a2:	4810      	ldr	r0, [pc, #64]	; (b5e4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x138>)
    b5a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b5a8:	4b0f      	ldr	r3, [pc, #60]	; (b5e8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x13c>)
    b5aa:	8281      	strh	r1, [r0, #20]
    b5ac:	2100      	movs	r1, #0
    b5ae:	7581      	strb	r1, [r0, #22]
    b5b0:	8301      	strh	r1, [r0, #24]
    b5b2:	221b      	movs	r2, #27
    b5b4:	801a      	strh	r2, [r3, #0]
    b5b6:	f44f 74a4 	mov.w	r4, #328	; 0x148
    b5ba:	805c      	strh	r4, [r3, #2]
    b5bc:	809a      	strh	r2, [r3, #4]
    b5be:	80dc      	strh	r4, [r3, #6]
    b5c0:	7381      	strb	r1, [r0, #14]
    b5c2:	73c1      	strb	r1, [r0, #15]
    b5c4:	2303      	movs	r3, #3
    b5c6:	7003      	strb	r3, [r0, #0]
    b5c8:	2302      	movs	r3, #2
    b5ca:	7043      	strb	r3, [r0, #1]
    b5cc:	8042      	strh	r2, [r0, #2]
    b5ce:	8082      	strh	r2, [r0, #4]
    b5d0:	f640 62a6 	movw	r2, #3750	; 0xea6
    b5d4:	6082      	str	r2, [r0, #8]
    b5d6:	7481      	strb	r1, [r0, #18]
    b5d8:	7301      	strb	r1, [r0, #12]
    b5da:	4803      	ldr	r0, [pc, #12]	; (b5e8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x13c>)
    b5dc:	1f80      	subs	r0, r0, #6
    b5de:	7001      	strb	r1, [r0, #0]
    b5e0:	bd10      	pop	{r4, pc}
    b5e2:	0000      	.short	0x0000
    b5e4:	20001328 	.word	0x20001328
    b5e8:	200002ae 	.word	0x200002ae
    b5ec:	4904      	ldr	r1, [pc, #16]	; (b600 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x154>)
    b5ee:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    b5f2:	4288      	cmp	r0, r1
    b5f4:	d301      	bcc.n	b5fa <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14e>
    b5f6:	2000      	movs	r0, #0
    b5f8:	4770      	bx	lr
    b5fa:	2001      	movs	r0, #1
    b5fc:	4770      	bx	lr
    b5fe:	0000      	.short	0x0000
    b600:	0270f3cc 	.word	0x0270f3cc
    b604:	4904      	ldr	r1, [pc, #16]	; (b618 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x16c>)
    b606:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    b60a:	4288      	cmp	r0, r1
    b60c:	d301      	bcc.n	b612 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x166>
    b60e:	2000      	movs	r0, #0
    b610:	4770      	bx	lr
    b612:	2001      	movs	r0, #1
    b614:	4770      	bx	lr
    b616:	0000      	.short	0x0000
    b618:	009c363d 	.word	0x009c363d
    b61c:	4904      	ldr	r1, [pc, #16]	; (b630 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x184>)
    b61e:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    b622:	4288      	cmp	r0, r1
    b624:	d301      	bcc.n	b62a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x17e>
    b626:	2000      	movs	r0, #0
    b628:	4770      	bx	lr
    b62a:	2001      	movs	r0, #1
    b62c:	4770      	bx	lr
    b62e:	0000      	.short	0x0000
    b630:	009c363d 	.word	0x009c363d
    b634:	b530      	push	{r4, r5, lr}
    b636:	2200      	movs	r2, #0
    b638:	4d07      	ldr	r5, [pc, #28]	; (b658 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1ac>)
    b63a:	e009      	b.n	b650 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a4>
    b63c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    b640:	462b      	mov	r3, r5
    b642:	429c      	cmp	r4, r3
    b644:	d800      	bhi.n	b648 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x19c>
    b646:	4623      	mov	r3, r4
    b648:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    b64c:	1c52      	adds	r2, r2, #1
    b64e:	b2d2      	uxtb	r2, r2
    b650:	428a      	cmp	r2, r1
    b652:	d3f3      	bcc.n	b63c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x190>
    b654:	bd30      	pop	{r4, r5, pc}
    b656:	0000      	.short	0x0000
    b658:	00f42400 	.word	0x00f42400
    b65c:	4a09      	ldr	r2, [pc, #36]	; (b684 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1d8>)
    b65e:	4290      	cmp	r0, r2
    b660:	d80b      	bhi.n	b67a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1ce>
    b662:	2901      	cmp	r1, #1
    b664:	d002      	beq.n	b66c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1c0>
    b666:	2904      	cmp	r1, #4
    b668:	d003      	beq.n	b672 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1c6>
    b66a:	e008      	b.n	b67e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1d2>
    b66c:	f240 7153 	movw	r1, #1875	; 0x753
    b670:	e001      	b.n	b676 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1ca>
    b672:	f640 11c4 	movw	r1, #2500	; 0x9c4
    b676:	4288      	cmp	r0, r1
    b678:	d201      	bcs.n	b67e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1d2>
    b67a:	2000      	movs	r0, #0
    b67c:	4770      	bx	lr
    b67e:	2001      	movs	r0, #1
    b680:	4770      	bx	lr
    b682:	0000      	.short	0x0000
    b684:	0270fd8f 	.word	0x0270fd8f
    b688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b68c:	b088      	sub	sp, #32
    b68e:	4604      	mov	r4, r0
    b690:	8800      	ldrh	r0, [r0, #0]
    b692:	a906      	add	r1, sp, #24
    b694:	f003 fa46 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b698:	2800      	cmp	r0, #0
    b69a:	d147      	bne.n	b72c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x280>
    b69c:	9807      	ldr	r0, [sp, #28]
    b69e:	f890 116a 	ldrb.w	r1, [r0, #362]	; 0x16a
    b6a2:	f88d 1008 	strb.w	r1, [sp, #8]
    b6a6:	9902      	ldr	r1, [sp, #8]
    b6a8:	9102      	str	r1, [sp, #8]
    b6aa:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b6ae:	3080      	adds	r0, #128	; 0x80
    b6b0:	b101      	cbz	r1, b6b4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x208>
    b6b2:	2101      	movs	r1, #1
    b6b4:	f88d 100c 	strb.w	r1, [sp, #12]
    b6b8:	7b81      	ldrb	r1, [r0, #14]
    b6ba:	f04f 0801 	mov.w	r8, #1
    b6be:	291d      	cmp	r1, #29
    b6c0:	d102      	bne.n	b6c8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x21c>
    b6c2:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b6c6:	b149      	cbz	r1, b6dc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x230>
    b6c8:	f05f 0100 	movs.w	r1, #0
    b6cc:	f88d 1004 	strb.w	r1, [sp, #4]
    b6d0:	2105      	movs	r1, #5
    b6d2:	305e      	adds	r0, #94	; 0x5e
    b6d4:	f004 fb8a 	bl	fdec <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x52>
    b6d8:	b110      	cbz	r0, b6e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x234>
    b6da:	e004      	b.n	b6e6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x23a>
    b6dc:	2101      	movs	r1, #1
    b6de:	e7f5      	b.n	b6cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x220>
    b6e0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b6e4:	b308      	cbz	r0, b72a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x27e>
    b6e6:	8921      	ldrh	r1, [r4, #8]
    b6e8:	88e0      	ldrh	r0, [r4, #6]
    b6ea:	f004 ffbe 	bl	1066a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    b6ee:	2800      	cmp	r0, #0
    b6f0:	d11c      	bne.n	b72c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x280>
    b6f2:	88a1      	ldrh	r1, [r4, #4]
    b6f4:	8860      	ldrh	r0, [r4, #2]
    b6f6:	f004 ffb8 	bl	1066a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    b6fa:	2800      	cmp	r0, #0
    b6fc:	d116      	bne.n	b72c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x280>
    b6fe:	8921      	ldrh	r1, [r4, #8]
    b700:	88e0      	ldrh	r0, [r4, #6]
    b702:	f004 ffa8 	bl	10656 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    b706:	2800      	cmp	r0, #0
    b708:	d110      	bne.n	b72c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x280>
    b70a:	88a1      	ldrh	r1, [r4, #4]
    b70c:	8860      	ldrh	r0, [r4, #2]
    b70e:	f004 ffa2 	bl	10656 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    b712:	0006      	movs	r6, r0
    b714:	d10a      	bne.n	b72c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x280>
    b716:	9807      	ldr	r0, [sp, #28]
    b718:	f500 7591 	add.w	r5, r0, #290	; 0x122
    b71c:	27ff      	movs	r7, #255	; 0xff
    b71e:	706f      	strb	r7, [r5, #1]
    b720:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b724:	b129      	cbz	r1, b732 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x286>
    b726:	263a      	movs	r6, #58	; 0x3a
    b728:	e02e      	b.n	b788 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2dc>
    b72a:	201a      	movs	r0, #26
    b72c:	b008      	add	sp, #32
    b72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b732:	4641      	mov	r1, r8
    b734:	aa03      	add	r2, sp, #12
    b736:	f005 f8e4 	bl	10902 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x334>
    b73a:	8861      	ldrh	r1, [r4, #2]
    b73c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    b740:	4281      	cmp	r1, r0
    b742:	d200      	bcs.n	b746 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x29a>
    b744:	4608      	mov	r0, r1
    b746:	80e8      	strh	r0, [r5, #6]
    b748:	88a1      	ldrh	r1, [r4, #4]
    b74a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    b74e:	4281      	cmp	r1, r0
    b750:	d200      	bcs.n	b754 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2a8>
    b752:	4608      	mov	r0, r1
    b754:	8128      	strh	r0, [r5, #8]
    b756:	88e2      	ldrh	r2, [r4, #6]
    b758:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b75c:	428a      	cmp	r2, r1
    b75e:	d200      	bcs.n	b762 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2b6>
    b760:	4611      	mov	r1, r2
    b762:	8069      	strh	r1, [r5, #2]
    b764:	8922      	ldrh	r2, [r4, #8]
    b766:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    b76a:	428a      	cmp	r2, r1
    b76c:	d200      	bcs.n	b770 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2c4>
    b76e:	4611      	mov	r1, r2
    b770:	f640 0248 	movw	r2, #2120	; 0x848
    b774:	80a9      	strh	r1, [r5, #4]
    b776:	4291      	cmp	r1, r2
    b778:	d300      	bcc.n	b77c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2d0>
    b77a:	4611      	mov	r1, r2
    b77c:	80a9      	strh	r1, [r5, #4]
    b77e:	4290      	cmp	r0, r2
    b780:	d200      	bcs.n	b784 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2d8>
    b782:	4602      	mov	r2, r0
    b784:	812a      	strh	r2, [r5, #8]
    b786:	702f      	strb	r7, [r5, #0]
    b788:	2000      	movs	r0, #0
    b78a:	7068      	strb	r0, [r5, #1]
    b78c:	4630      	mov	r0, r6
    b78e:	e7cd      	b.n	b72c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x280>
    b790:	b510      	push	{r4, lr}
    b792:	4604      	mov	r4, r0
    b794:	88c1      	ldrh	r1, [r0, #6]
    b796:	8880      	ldrh	r0, [r0, #4]
    b798:	f004 ff67 	bl	1066a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    b79c:	2800      	cmp	r0, #0
    b79e:	d10f      	bne.n	b7c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x314>
    b7a0:	8861      	ldrh	r1, [r4, #2]
    b7a2:	8820      	ldrh	r0, [r4, #0]
    b7a4:	f004 ff61 	bl	1066a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    b7a8:	2800      	cmp	r0, #0
    b7aa:	d109      	bne.n	b7c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x314>
    b7ac:	4805      	ldr	r0, [pc, #20]	; (b7c4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x318>)
    b7ae:	88a1      	ldrh	r1, [r4, #4]
    b7b0:	8081      	strh	r1, [r0, #4]
    b7b2:	8821      	ldrh	r1, [r4, #0]
    b7b4:	8001      	strh	r1, [r0, #0]
    b7b6:	88e1      	ldrh	r1, [r4, #6]
    b7b8:	80c1      	strh	r1, [r0, #6]
    b7ba:	8861      	ldrh	r1, [r4, #2]
    b7bc:	8041      	strh	r1, [r0, #2]
    b7be:	2000      	movs	r0, #0
    b7c0:	bd10      	pop	{r4, pc}
    b7c2:	0000      	.short	0x0000
    b7c4:	200002ae 	.word	0x200002ae
    b7c8:	0c11d80c 	.word	0x0c11d80c
    b7cc:	11d80059 	.word	0x11d80059

0000b7d0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b7d0:	b510      	push	{r4, lr}
    b7d2:	460c      	mov	r4, r1
    b7d4:	f7fb f87a 	bl	68cc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b7d8:	4805      	ldr	r0, [pc, #20]	; (b7f0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    b7da:	6004      	str	r4, [r0, #0]
    b7dc:	6840      	ldr	r0, [r0, #4]
    b7de:	f005 f947 	bl	10a70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a2>
    b7e2:	f004 fe6c 	bl	104be <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b7e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7ea:	f7fb ba93 	b.w	6d14 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    b7ee:	0000      	.short	0x0000
    b7f0:	200002b8 	.word	0x200002b8

0000b7f4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b7f4:	b510      	push	{r4, lr}
    b7f6:	4c05      	ldr	r4, [pc, #20]	; (b80c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    b7f8:	68a0      	ldr	r0, [r4, #8]
    b7fa:	f005 f939 	bl	10a70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a2>
    b7fe:	68e0      	ldr	r0, [r4, #12]
    b800:	f005 f936 	bl	10a70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a2>
    b804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b808:	f004 bee1 	b.w	105ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b80c:	200002b8 	.word	0x200002b8

0000b810 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    b810:	b510      	push	{r4, lr}
    b812:	4908      	ldr	r1, [pc, #32]	; (b834 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    b814:	4808      	ldr	r0, [pc, #32]	; (b838 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    b816:	f005 f91e 	bl	10a56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x488>
    b81a:	4807      	ldr	r0, [pc, #28]	; (b838 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    b81c:	4907      	ldr	r1, [pc, #28]	; (b83c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    b81e:	1d00      	adds	r0, r0, #4
    b820:	f005 f919 	bl	10a56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x488>
    b824:	4804      	ldr	r0, [pc, #16]	; (b838 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    b826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b82a:	4905      	ldr	r1, [pc, #20]	; (b840 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    b82c:	3008      	adds	r0, #8
    b82e:	f005 b912 	b.w	10a56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x488>
    b832:	0000      	.short	0x0000
    b834:	200002d0 	.word	0x200002d0
    b838:	200002bc 	.word	0x200002bc
    b83c:	200002d8 	.word	0x200002d8
    b840:	200002c8 	.word	0x200002c8
    b844:	b510      	push	{r4, lr}
    b846:	f7fb fbd3 	bl	6ff0 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>
    b84a:	f000 f811 	bl	b870 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>
    b84e:	f003 f84a 	bl	e8e6 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b852:	4806      	ldr	r0, [pc, #24]	; (b86c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x5c>)
    b854:	f7f9 fcf6 	bl	5244 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b858:	2000      	movs	r0, #0
    b85a:	f7f9 f871 	bl	4940 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b85e:	f7fd fc8d 	bl	917c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    b862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b866:	f7fb b859 	b.w	691c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    b86a:	0000      	.short	0x0000
    b86c:	200015da 	.word	0x200015da
    b870:	b510      	push	{r4, lr}
    b872:	f7ff fb57 	bl	af24 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    b876:	f7fc fcfd 	bl	8274 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    b87a:	f7ff fe07 	bl	b48c <sym_EXR6VNSRXAXVPW6IU2YEAYBOR4HO5UQ4GQ2J6XA>
    b87e:	4601      	mov	r1, r0
    b880:	4803      	ldr	r0, [pc, #12]	; (b890 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x80>)
    b882:	f7fb fb2b 	bl	6edc <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    b886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b88a:	f7fb b857 	b.w	693c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
    b88e:	0000      	.short	0x0000
    b890:	200015da 	.word	0x200015da

0000b894 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b894:	4a04      	ldr	r2, [pc, #16]	; (b8a8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    b896:	08c1      	lsrs	r1, r0, #3
    b898:	f000 0307 	and.w	r3, r0, #7
    b89c:	2001      	movs	r0, #1
    b89e:	4098      	lsls	r0, r3
    b8a0:	5c53      	ldrb	r3, [r2, r1]
    b8a2:	4303      	orrs	r3, r0
    b8a4:	5453      	strb	r3, [r2, r1]
    b8a6:	4770      	bx	lr
    b8a8:	20000020 	.word	0x20000020

0000b8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b8ac:	4901      	ldr	r1, [pc, #4]	; (b8b4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b8ae:	e9d1 0100 	ldrd	r0, r1, [r1]
    b8b2:	4770      	bx	lr
    b8b4:	20000020 	.word	0x20000020

0000b8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b8b8:	4806      	ldr	r0, [pc, #24]	; (b8d4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    b8ba:	8801      	ldrh	r1, [r0, #0]
    b8bc:	7900      	ldrb	r0, [r0, #4]
    b8be:	0602      	lsls	r2, r0, #24
    b8c0:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    b8c4:	f000 0001 	and.w	r0, r0, #1
    b8c8:	1800      	adds	r0, r0, r0
    b8ca:	b2c0      	uxtb	r0, r0
    b8cc:	f040 0001 	orr.w	r0, r0, #1
    b8d0:	4770      	bx	lr
    b8d2:	0000      	.short	0x0000
    b8d4:	20000020 	.word	0x20000020

0000b8d8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b8d8:	b510      	push	{r4, lr}
    b8da:	f7f8 fa75 	bl	3dc8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b8de:	2200      	movs	r2, #0
    b8e0:	4b08      	ldr	r3, [pc, #32]	; (b904 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b8e2:	4611      	mov	r1, r2
    b8e4:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b8e8:	4284      	cmp	r4, r0
    b8ea:	d303      	bcc.n	b8f4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b8ec:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b8f0:	7882      	ldrb	r2, [r0, #2]
    b8f2:	e003      	b.n	b8fc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b8f4:	1c49      	adds	r1, r1, #1
    b8f6:	b2c9      	uxtb	r1, r1
    b8f8:	290c      	cmp	r1, #12
    b8fa:	d3f3      	bcc.n	b8e4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b8fc:	4802      	ldr	r0, [pc, #8]	; (b908 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b8fe:	7002      	strb	r2, [r0, #0]
    b900:	bd10      	pop	{r4, pc}
    b902:	0000      	.short	0x0000
    b904:	00010ae0 	.word	0x00010ae0
    b908:	2000032e 	.word	0x2000032e

0000b90c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    b90c:	4801      	ldr	r0, [pc, #4]	; (b914 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    b90e:	7800      	ldrb	r0, [r0, #0]
    b910:	4770      	bx	lr
    b912:	0000      	.short	0x0000
    b914:	2000032e 	.word	0x2000032e

0000b918 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b918:	b570      	push	{r4, r5, r6, lr}
    b91a:	4605      	mov	r5, r0
    b91c:	4616      	mov	r6, r2
    b91e:	460c      	mov	r4, r1
    b920:	2002      	movs	r0, #2
    b922:	f000 f9b7 	bl	bc94 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b926:	4906      	ldr	r1, [pc, #24]	; (b940 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b928:	2001      	movs	r0, #1
    b92a:	1ef6      	subs	r6, r6, #3
    b92c:	7008      	strb	r0, [r1, #0]
    b92e:	4805      	ldr	r0, [pc, #20]	; (b944 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b930:	6006      	str	r6, [r0, #0]
    b932:	4804      	ldr	r0, [pc, #16]	; (b944 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b934:	3808      	subs	r0, #8
    b936:	6005      	str	r5, [r0, #0]
    b938:	1f00      	subs	r0, r0, #4
    b93a:	6004      	str	r4, [r0, #0]
    b93c:	bd70      	pop	{r4, r5, r6, pc}
    b93e:	0000      	.short	0x0000
    b940:	2000032f 	.word	0x2000032f
    b944:	4000f510 	.word	0x4000f510

0000b948 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b948:	b510      	push	{r4, lr}
    b94a:	4c0c      	ldr	r4, [pc, #48]	; (b97c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b94c:	7820      	ldrb	r0, [r4, #0]
    b94e:	b180      	cbz	r0, b972 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b950:	490b      	ldr	r1, [pc, #44]	; (b980 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b952:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b956:	6008      	str	r0, [r1, #0]
    b958:	f000 f86a 	bl	ba30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b95c:	2100      	movs	r1, #0
    b95e:	b120      	cbz	r0, b96a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b960:	2001      	movs	r0, #1
    b962:	7060      	strb	r0, [r4, #1]
    b964:	4807      	ldr	r0, [pc, #28]	; (b984 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b966:	6800      	ldr	r0, [r0, #0]
    b968:	e001      	b.n	b96e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b96a:	7061      	strb	r1, [r4, #1]
    b96c:	2010      	movs	r0, #16
    b96e:	70a0      	strb	r0, [r4, #2]
    b970:	7021      	strb	r1, [r4, #0]
    b972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b976:	2000      	movs	r0, #0
    b978:	f000 b98c 	b.w	bc94 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b97c:	2000032f 	.word	0x2000032f
    b980:	4001f508 	.word	0x4001f508
    b984:	4000f400 	.word	0x4000f400

0000b988 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b988:	b510      	push	{r4, lr}
    b98a:	2002      	movs	r0, #2
    b98c:	f000 f982 	bl	bc94 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b990:	4904      	ldr	r1, [pc, #16]	; (b9a4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b992:	2001      	movs	r0, #1
    b994:	7008      	strb	r0, [r1, #0]
    b996:	f000 f859 	bl	ba4c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b99a:	4903      	ldr	r1, [pc, #12]	; (b9a8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b99c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b9a0:	6008      	str	r0, [r1, #0]
    b9a2:	bd10      	pop	{r4, pc}
    b9a4:	2000032f 	.word	0x2000032f
    b9a8:	4001f504 	.word	0x4001f504

0000b9ac <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b9ac:	4803      	ldr	r0, [pc, #12]	; (b9bc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b9ae:	2100      	movs	r1, #0
    b9b0:	7001      	strb	r1, [r0, #0]
    b9b2:	7041      	strb	r1, [r0, #1]
    b9b4:	2110      	movs	r1, #16
    b9b6:	7081      	strb	r1, [r0, #2]
    b9b8:	4770      	bx	lr
    b9ba:	0000      	.short	0x0000
    b9bc:	2000032f 	.word	0x2000032f

0000b9c0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b9c0:	4807      	ldr	r0, [pc, #28]	; (b9e0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b9c2:	b510      	push	{r4, lr}
    b9c4:	7801      	ldrb	r1, [r0, #0]
    b9c6:	b141      	cbz	r1, b9da <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b9c8:	f000 f832 	bl	ba30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b9cc:	b118      	cbz	r0, b9d6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b9ce:	4805      	ldr	r0, [pc, #20]	; (b9e4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b9d0:	6800      	ldr	r0, [r0, #0]
    b9d2:	b2c0      	uxtb	r0, r0
    b9d4:	bd10      	pop	{r4, pc}
    b9d6:	2010      	movs	r0, #16
    b9d8:	bd10      	pop	{r4, pc}
    b9da:	7880      	ldrb	r0, [r0, #2]
    b9dc:	bd10      	pop	{r4, pc}
    b9de:	0000      	.short	0x0000
    b9e0:	2000032f 	.word	0x2000032f
    b9e4:	4000f400 	.word	0x4000f400

0000b9e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b9e8:	4808      	ldr	r0, [pc, #32]	; (ba0c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b9ea:	b510      	push	{r4, lr}
    b9ec:	7801      	ldrb	r1, [r0, #0]
    b9ee:	b159      	cbz	r1, ba08 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b9f0:	4807      	ldr	r0, [pc, #28]	; (ba10 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b9f2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b9f6:	b128      	cbz	r0, ba04 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b9f8:	f000 f80c 	bl	ba14 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b9fc:	2800      	cmp	r0, #0
    b9fe:	d000      	beq.n	ba02 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    ba00:	2001      	movs	r0, #1
    ba02:	bd10      	pop	{r4, pc}
    ba04:	2002      	movs	r0, #2
    ba06:	bd10      	pop	{r4, pc}
    ba08:	7840      	ldrb	r0, [r0, #1]
    ba0a:	bd10      	pop	{r4, pc}
    ba0c:	2000032f 	.word	0x2000032f
    ba10:	4000f000 	.word	0x4000f000
    ba14:	4805      	ldr	r0, [pc, #20]	; (ba2c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    ba16:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    ba1a:	b111      	cbz	r1, ba22 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    ba1c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    ba20:	b108      	cbz	r0, ba26 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    ba22:	2000      	movs	r0, #0
    ba24:	4770      	bx	lr
    ba26:	2001      	movs	r0, #1
    ba28:	4770      	bx	lr
    ba2a:	0000      	.short	0x0000
    ba2c:	4000f000 	.word	0x4000f000
    ba30:	4805      	ldr	r0, [pc, #20]	; (ba48 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    ba32:	b510      	push	{r4, lr}
    ba34:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    ba38:	b120      	cbz	r0, ba44 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    ba3a:	f7ff ffeb 	bl	ba14 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    ba3e:	b108      	cbz	r0, ba44 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    ba40:	2001      	movs	r0, #1
    ba42:	bd10      	pop	{r4, pc}
    ba44:	2000      	movs	r0, #0
    ba46:	bd10      	pop	{r4, pc}
    ba48:	4000f000 	.word	0x4000f000
    ba4c:	4804      	ldr	r0, [pc, #16]	; (ba60 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    ba4e:	2100      	movs	r1, #0
    ba50:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    ba54:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    ba58:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    ba5c:	4770      	bx	lr
    ba5e:	0000      	.short	0x0000
    ba60:	4000f000 	.word	0x4000f000

0000ba64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    ba64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba68:	4604      	mov	r4, r0
    ba6a:	461e      	mov	r6, r3
    ba6c:	4690      	mov	r8, r2
    ba6e:	460f      	mov	r7, r1
    ba70:	2001      	movs	r0, #1
    ba72:	f000 f90f 	bl	bc94 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ba76:	4d1e      	ldr	r5, [pc, #120]	; (baf0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    ba78:	481e      	ldr	r0, [pc, #120]	; (baf4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    ba7a:	f004 0103 	and.w	r1, r4, #3
    ba7e:	712e      	strb	r6, [r5, #4]
    ba80:	6800      	ldr	r0, [r0, #0]
    ba82:	0432      	lsls	r2, r6, #16
    ba84:	f361 0007 	bfi	r0, r1, #0, #8
    ba88:	f366 200f 	bfi	r0, r6, #8, #8
    ba8c:	0c00      	lsrs	r0, r0, #16
    ba8e:	4e1a      	ldr	r6, [pc, #104]	; (baf8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    ba90:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    ba94:	4308      	orrs	r0, r1
    ba96:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    ba9a:	4818      	ldr	r0, [pc, #96]	; (bafc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    ba9c:	6007      	str	r7, [r0, #0]
    ba9e:	f001 fd7a 	bl	d596 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    baa2:	b938      	cbnz	r0, bab4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    baa4:	4815      	ldr	r0, [pc, #84]	; (bafc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    baa6:	3010      	adds	r0, #16
    baa8:	6801      	ldr	r1, [r0, #0]
    baaa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    baae:	ea41 0108 	orr.w	r1, r1, r8
    bab2:	6001      	str	r1, [r0, #0]
    bab4:	f000 f8e4 	bl	bc80 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    bab8:	b10c      	cbz	r4, babe <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    baba:	2c04      	cmp	r4, #4
    babc:	d107      	bne.n	bace <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    babe:	4811      	ldr	r0, [pc, #68]	; (bb04 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    bac0:	490d      	ldr	r1, [pc, #52]	; (baf8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    bac2:	4a0f      	ldr	r2, [pc, #60]	; (bb00 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    bac4:	1d09      	adds	r1, r1, #4
    bac6:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    baca:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    bace:	2001      	movs	r0, #1
    bad0:	7068      	strb	r0, [r5, #1]
    bad2:	70ec      	strb	r4, [r5, #3]
    bad4:	b11c      	cbz	r4, bade <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    bad6:	2c01      	cmp	r4, #1
    bad8:	d001      	beq.n	bade <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    bada:	2c02      	cmp	r4, #2
    badc:	d106      	bne.n	baec <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    bade:	7028      	strb	r0, [r5, #0]
    bae0:	2100      	movs	r1, #0
    bae2:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    bae6:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    baea:	6030      	str	r0, [r6, #0]
    baec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    baf0:	20000332 	.word	0x20000332
    baf4:	0000bc90 	.word	0x0000bc90
    baf8:	4000f000 	.word	0x4000f000
    bafc:	4000f508 	.word	0x4000f508
    bb00:	4000f100 	.word	0x4000f100
    bb04:	4001f088 	.word	0x4001f088

0000bb08 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    bb08:	b570      	push	{r4, r5, r6, lr}
    bb0a:	4a1c      	ldr	r2, [pc, #112]	; (bb7c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    bb0c:	7853      	ldrb	r3, [r2, #1]
    bb0e:	b1a3      	cbz	r3, bb3a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    bb10:	4b1b      	ldr	r3, [pc, #108]	; (bb80 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    bb12:	6019      	str	r1, [r3, #0]
    bb14:	1d19      	adds	r1, r3, #4
    bb16:	6008      	str	r0, [r1, #0]
    bb18:	2501      	movs	r5, #1
    bb1a:	7095      	strb	r5, [r2, #2]
    bb1c:	4610      	mov	r0, r2
    bb1e:	78d6      	ldrb	r6, [r2, #3]
    bb20:	4b18      	ldr	r3, [pc, #96]	; (bb84 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    bb22:	7800      	ldrb	r0, [r0, #0]
    bb24:	4c18      	ldr	r4, [pc, #96]	; (bb88 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    bb26:	2100      	movs	r1, #0
    bb28:	b156      	cbz	r6, bb40 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    bb2a:	2e04      	cmp	r6, #4
    bb2c:	d01b      	beq.n	bb66 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    bb2e:	b308      	cbz	r0, bb74 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    bb30:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bb34:	0668      	lsls	r0, r5, #25
    bb36:	6018      	str	r0, [r3, #0]
    bb38:	bd70      	pop	{r4, r5, r6, pc}
    bb3a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    bb3e:	e01a      	b.n	bb76 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    bb40:	b178      	cbz	r0, bb62 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    bb42:	4620      	mov	r0, r4
    bb44:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bb48:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    bb4c:	601e      	str	r6, [r3, #0]
    bb4e:	1271      	asrs	r1, r6, #9
    bb50:	f004 fffb 	bl	10b4a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bb54:	2800      	cmp	r0, #0
    bb56:	d0ef      	beq.n	bb38 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    bb58:	6065      	str	r5, [r4, #4]
    bb5a:	480a      	ldr	r0, [pc, #40]	; (bb84 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    bb5c:	1d00      	adds	r0, r0, #4
    bb5e:	6006      	str	r6, [r0, #0]
    bb60:	bd70      	pop	{r4, r5, r6, pc}
    bb62:	21b3      	movs	r1, #179	; 0xb3
    bb64:	e007      	b.n	bb76 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    bb66:	7015      	strb	r5, [r2, #0]
    bb68:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bb6c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    bb70:	6025      	str	r5, [r4, #0]
    bb72:	bd70      	pop	{r4, r5, r6, pc}
    bb74:	21c6      	movs	r1, #198	; 0xc6
    bb76:	203c      	movs	r0, #60	; 0x3c
    bb78:	f7f8 fd1e 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb7c:	20000332 	.word	0x20000332
    bb80:	4000f50c 	.word	0x4000f50c
    bb84:	4001f504 	.word	0x4001f504
    bb88:	4000f000 	.word	0x4000f000

0000bb8c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    bb8c:	b570      	push	{r4, r5, r6, lr}
    bb8e:	4d05      	ldr	r5, [pc, #20]	; (bba4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    bb90:	2400      	movs	r4, #0
    bb92:	7828      	ldrb	r0, [r5, #0]
    bb94:	b110      	cbz	r0, bb9c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    bb96:	f000 f873 	bl	bc80 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    bb9a:	702c      	strb	r4, [r5, #0]
    bb9c:	706c      	strb	r4, [r5, #1]
    bb9e:	70ac      	strb	r4, [r5, #2]
    bba0:	bd70      	pop	{r4, r5, r6, pc}
    bba2:	0000      	.short	0x0000
    bba4:	20000332 	.word	0x20000332

0000bba8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    bba8:	4802      	ldr	r0, [pc, #8]	; (bbb4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    bbaa:	2100      	movs	r1, #0
    bbac:	7001      	strb	r1, [r0, #0]
    bbae:	7041      	strb	r1, [r0, #1]
    bbb0:	7081      	strb	r1, [r0, #2]
    bbb2:	4770      	bx	lr
    bbb4:	20000332 	.word	0x20000332

0000bbb8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    bbb8:	480b      	ldr	r0, [pc, #44]	; (bbe8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    bbba:	b510      	push	{r4, lr}
    bbbc:	7800      	ldrb	r0, [r0, #0]
    bbbe:	b158      	cbz	r0, bbd8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    bbc0:	f44f 7182 	mov.w	r1, #260	; 0x104
    bbc4:	4809      	ldr	r0, [pc, #36]	; (bbec <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    bbc6:	f004 ffc0 	bl	10b4a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bbca:	b140      	cbz	r0, bbde <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    bbcc:	4808      	ldr	r0, [pc, #32]	; (bbf0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    bbce:	6800      	ldr	r0, [r0, #0]
    bbd0:	2800      	cmp	r0, #0
    bbd2:	d000      	beq.n	bbd6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    bbd4:	2001      	movs	r0, #1
    bbd6:	bd10      	pop	{r4, pc}
    bbd8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    bbdc:	e001      	b.n	bbe2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    bbde:	f240 11eb 	movw	r1, #491	; 0x1eb
    bbe2:	203c      	movs	r0, #60	; 0x3c
    bbe4:	f7f8 fce8 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbe8:	20000332 	.word	0x20000332
    bbec:	4000f000 	.word	0x4000f000
    bbf0:	4000f400 	.word	0x4000f400

0000bbf4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    bbf4:	4801      	ldr	r0, [pc, #4]	; (bbfc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    bbf6:	2101      	movs	r1, #1
    bbf8:	6081      	str	r1, [r0, #8]
    bbfa:	4770      	bx	lr
    bbfc:	4000f000 	.word	0x4000f000

0000bc00 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    bc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc04:	481b      	ldr	r0, [pc, #108]	; (bc74 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    bc06:	7800      	ldrb	r0, [r0, #0]
    bc08:	b1d8      	cbz	r0, bc42 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    bc0a:	f8df 806c 	ldr.w	r8, [pc, #108]	; bc78 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    bc0e:	f44f 7682 	mov.w	r6, #260	; 0x104
    bc12:	4631      	mov	r1, r6
    bc14:	4640      	mov	r0, r8
    bc16:	f004 ff98 	bl	10b4a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bc1a:	2800      	cmp	r0, #0
    bc1c:	d128      	bne.n	bc70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    bc1e:	2002      	movs	r0, #2
    bc20:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    bc24:	4c15      	ldr	r4, [pc, #84]	; (bc7c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    bc26:	6820      	ldr	r0, [r4, #0]
    bc28:	43c0      	mvns	r0, r0
    bc2a:	f340 1500 	sbfx	r5, r0, #4, #1
    bc2e:	6820      	ldr	r0, [r4, #0]
    bc30:	f040 0010 	orr.w	r0, r0, #16
    bc34:	6020      	str	r0, [r4, #0]
    bc36:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    bc3a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    bc3e:	1c6d      	adds	r5, r5, #1
    bc40:	e008      	b.n	bc54 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    bc42:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    bc46:	203c      	movs	r0, #60	; 0x3c
    bc48:	f7f8 fcb6 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc4c:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    bc50:	f7f8 fabe 	bl	41d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bc54:	4631      	mov	r1, r6
    bc56:	4640      	mov	r0, r8
    bc58:	f004 ff77 	bl	10b4a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bc5c:	2800      	cmp	r0, #0
    bc5e:	d0f5      	beq.n	bc4c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    bc60:	b91d      	cbnz	r5, bc6a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    bc62:	6820      	ldr	r0, [r4, #0]
    bc64:	f020 0010 	bic.w	r0, r0, #16
    bc68:	6020      	str	r0, [r4, #0]
    bc6a:	2002      	movs	r0, #2
    bc6c:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    bc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bc74:	20000332 	.word	0x20000332
    bc78:	4000f000 	.word	0x4000f000
    bc7c:	e000ed10 	.word	0xe000ed10
    bc80:	4902      	ldr	r1, [pc, #8]	; (bc8c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    bc82:	4801      	ldr	r0, [pc, #4]	; (bc88 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    bc84:	6008      	str	r0, [r1, #0]
    bc86:	4770      	bx	lr
    bc88:	02020000 	.word	0x02020000
    bc8c:	4001f508 	.word	0x4001f508
    bc90:	00010000 	.word	0x00010000

0000bc94 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    bc94:	b510      	push	{r4, lr}
    bc96:	4604      	mov	r4, r0
    bc98:	f000 f820 	bl	bcdc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    bc9c:	2c00      	cmp	r4, #0
    bc9e:	d00e      	beq.n	bcbe <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    bca0:	4a0b      	ldr	r2, [pc, #44]	; (bcd0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    bca2:	480b      	ldr	r0, [pc, #44]	; (bcd0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    bca4:	490b      	ldr	r1, [pc, #44]	; (bcd4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    bca6:	3214      	adds	r2, #20
    bca8:	2c01      	cmp	r4, #1
    bcaa:	d005      	beq.n	bcb8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    bcac:	2c02      	cmp	r4, #2
    bcae:	d007      	beq.n	bcc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    bcb0:	2181      	movs	r1, #129	; 0x81
    bcb2:	203d      	movs	r0, #61	; 0x3d
    bcb4:	f7f8 fc80 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcb8:	2302      	movs	r3, #2
    bcba:	6003      	str	r3, [r0, #0]
    bcbc:	6011      	str	r1, [r2, #0]
    bcbe:	bd10      	pop	{r4, pc}
    bcc0:	2303      	movs	r3, #3
    bcc2:	6003      	str	r3, [r0, #0]
    bcc4:	6011      	str	r1, [r2, #0]
    bcc6:	4904      	ldr	r1, [pc, #16]	; (bcd8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    bcc8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bccc:	6008      	str	r0, [r1, #0]
    bcce:	bd10      	pop	{r4, pc}
    bcd0:	4000f500 	.word	0x4000f500
    bcd4:	200016dc 	.word	0x200016dc
    bcd8:	4001f504 	.word	0x4001f504
    bcdc:	4805      	ldr	r0, [pc, #20]	; (bcf4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    bcde:	b510      	push	{r4, lr}
    bce0:	2100      	movs	r1, #0
    bce2:	6001      	str	r1, [r0, #0]
    bce4:	6001      	str	r1, [r0, #0]
    bce6:	f7ff ff51 	bl	bb8c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    bcea:	4903      	ldr	r1, [pc, #12]	; (bcf8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    bcec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bcf0:	6008      	str	r0, [r1, #0]
    bcf2:	bd10      	pop	{r4, pc}
    bcf4:	4000f500 	.word	0x4000f500
    bcf8:	4001f508 	.word	0x4001f508

0000bcfc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    bcfc:	4805      	ldr	r0, [pc, #20]	; (bd14 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    bcfe:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    bd02:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    bd06:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bd0a:	2100      	movs	r1, #0
    bd0c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    bd10:	4770      	bx	lr
    bd12:	0000      	.short	0x0000
    bd14:	40001000 	.word	0x40001000

0000bd18 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    bd18:	4904      	ldr	r1, [pc, #16]	; (bd2c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    bd1a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    bd1e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    bd22:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    bd26:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    bd2a:	4770      	bx	lr
    bd2c:	40001000 	.word	0x40001000

0000bd30 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    bd30:	4902      	ldr	r1, [pc, #8]	; (bd3c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    bd32:	5c08      	ldrb	r0, [r1, r0]
    bd34:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    bd38:	4770      	bx	lr
    bd3a:	0000      	.short	0x0000
    bd3c:	0000c9da 	.word	0x0000c9da

0000bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd42:	4c24      	ldr	r4, [pc, #144]	; (bdd4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    bd44:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    bd48:	f010 0f10 	tst.w	r0, #16
    bd4c:	d001      	beq.n	bd52 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    bd4e:	2701      	movs	r7, #1
    bd50:	e000      	b.n	bd54 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    bd52:	2700      	movs	r7, #0
    bd54:	2010      	movs	r0, #16
    bd56:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    bd5a:	2002      	movs	r0, #2
    bd5c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    bd60:	481d      	ldr	r0, [pc, #116]	; (bdd8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    bd62:	2500      	movs	r5, #0
    bd64:	491d      	ldr	r1, [pc, #116]	; (bddc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    bd66:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    bd6a:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    bd6e:	6008      	str	r0, [r1, #0]
    bd70:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    bd74:	f44f 7688 	mov.w	r6, #272	; 0x110
    bd78:	f010 0fff 	tst.w	r0, #255	; 0xff
    bd7c:	d019      	beq.n	bdb2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    bd7e:	20ff      	movs	r0, #255	; 0xff
    bd80:	f88d 0000 	strb.w	r0, [sp]
    bd84:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bd88:	2001      	movs	r0, #1
    bd8a:	6120      	str	r0, [r4, #16]
    bd8c:	e005      	b.n	bd9a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    bd8e:	bf00      	nop
    bd90:	f89d 0000 	ldrb.w	r0, [sp]
    bd94:	1e40      	subs	r0, r0, #1
    bd96:	f88d 0000 	strb.w	r0, [sp]
    bd9a:	f89d 0000 	ldrb.w	r0, [sp]
    bd9e:	b128      	cbz	r0, bdac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    bda0:	4631      	mov	r1, r6
    bda2:	4620      	mov	r0, r4
    bda4:	f004 ff00 	bl	10ba8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    bda8:	2800      	cmp	r0, #0
    bdaa:	d0f1      	beq.n	bd90 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    bdac:	f89d 0000 	ldrb.w	r0, [sp]
    bdb0:	b158      	cbz	r0, bdca <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    bdb2:	f000 fc07 	bl	c5c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    bdb6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bdba:	f000 fd8f 	bl	c8dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    bdbe:	2f00      	cmp	r7, #0
    bdc0:	d002      	beq.n	bdc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    bdc2:	2010      	movs	r0, #16
    bdc4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bdc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bdca:	f640 0183 	movw	r1, #2179	; 0x883
    bdce:	203e      	movs	r0, #62	; 0x3e
    bdd0:	f7f8 fbf2 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdd4:	40001000 	.word	0x40001000
    bdd8:	20001354 	.word	0x20001354
    bddc:	4001f508 	.word	0x4001f508

0000bde0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    bde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bde4:	4d18      	ldr	r5, [pc, #96]	; (be48 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    bde6:	4607      	mov	r7, r0
    bde8:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    bdec:	07c2      	lsls	r2, r0, #31
    bdee:	d00f      	beq.n	be10 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    bdf0:	4c16      	ldr	r4, [pc, #88]	; (be4c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    bdf2:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    bdf6:	f042 0201 	orr.w	r2, r2, #1
    bdfa:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    bdfe:	f040 0002 	orr.w	r0, r0, #2
    be02:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    be06:	2601      	movs	r6, #1
    be08:	b13f      	cbz	r7, be1a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    be0a:	2f01      	cmp	r7, #1
    be0c:	d00b      	beq.n	be26 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    be0e:	e010      	b.n	be32 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    be10:	f44f 61ed 	mov.w	r1, #1896	; 0x768
    be14:	203e      	movs	r0, #62	; 0x3e
    be16:	f7f8 fbcf 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be1a:	4608      	mov	r0, r1
    be1c:	f000 fdb8 	bl	c990 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    be20:	726e      	strb	r6, [r5, #9]
    be22:	6026      	str	r6, [r4, #0]
    be24:	e005      	b.n	be32 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    be26:	4608      	mov	r0, r1
    be28:	f000 fd98 	bl	c95c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    be2c:	2002      	movs	r0, #2
    be2e:	7268      	strb	r0, [r5, #9]
    be30:	6066      	str	r6, [r4, #4]
    be32:	4807      	ldr	r0, [pc, #28]	; (be50 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    be34:	64c6      	str	r6, [r0, #76]	; 0x4c
    be36:	4806      	ldr	r0, [pc, #24]	; (be50 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    be38:	300c      	adds	r0, #12
    be3a:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    be3e:	4638      	mov	r0, r7
    be40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    be44:	f000 bd1c 	b.w	c880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    be48:	20001354 	.word	0x20001354
    be4c:	40001000 	.word	0x40001000
    be50:	40008000 	.word	0x40008000

0000be54 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    be54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be58:	4c2c      	ldr	r4, [pc, #176]	; (bf0c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    be5a:	0006      	movs	r6, r0
    be5c:	4d2c      	ldr	r5, [pc, #176]	; (bf10 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    be5e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    be62:	f8df 80b0 	ldr.w	r8, [pc, #176]	; bf14 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    be66:	f040 0002 	orr.w	r0, r0, #2
    be6a:	4689      	mov	r9, r1
    be6c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    be70:	f04f 0700 	mov.w	r7, #0
    be74:	d002      	beq.n	be7c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    be76:	2e01      	cmp	r6, #1
    be78:	d020      	beq.n	bebc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    be7a:	e036      	b.n	beea <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    be7c:	4608      	mov	r0, r1
    be7e:	f000 fd87 	bl	c990 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    be82:	2001      	movs	r0, #1
    be84:	7260      	strb	r0, [r4, #9]
    be86:	79e0      	ldrb	r0, [r4, #7]
    be88:	2801      	cmp	r0, #1
    be8a:	d105      	bne.n	be98 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    be8c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    be90:	f040 0008 	orr.w	r0, r0, #8
    be94:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    be98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    be9a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    be9e:	62a0      	str	r0, [r4, #40]	; 0x28
    bea0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    bea4:	f8c8 0000 	str.w	r0, [r8]
    bea8:	491b      	ldr	r1, [pc, #108]	; (bf18 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    beaa:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    beae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    beb2:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    beb6:	fbb0 f7f1 	udiv	r7, r0, r1
    beba:	e016      	b.n	beea <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    bebc:	4608      	mov	r0, r1
    bebe:	f000 fd4d 	bl	c95c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    bec2:	2002      	movs	r0, #2
    bec4:	7260      	strb	r0, [r4, #9]
    bec6:	79e0      	ldrb	r0, [r4, #7]
    bec8:	2801      	cmp	r0, #1
    beca:	d105      	bne.n	bed8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    becc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    bed0:	f040 0004 	orr.w	r0, r0, #4
    bed4:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    bed8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    beda:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    bede:	62a0      	str	r0, [r4, #40]	; 0x28
    bee0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    bee4:	f8c8 0000 	str.w	r0, [r8]
    bee8:	2729      	movs	r7, #41	; 0x29
    beea:	f000 fbd7 	bl	c69c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    beee:	f001 fa2f 	bl	d350 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    bef2:	b120      	cbz	r0, befe <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    bef4:	f7ff ff24 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bef8:	2000      	movs	r0, #0
    befa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    befe:	2100      	movs	r1, #0
    bf00:	4630      	mov	r0, r6
    bf02:	f000 fcbd 	bl	c880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    bf06:	4638      	mov	r0, r7
    bf08:	e7f7      	b.n	befa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    bf0a:	0000      	.short	0x0000
    bf0c:	20001354 	.word	0x20001354
    bf10:	40001000 	.word	0x40001000
    bf14:	4001f504 	.word	0x4001f504
    bf18:	0000c9d4 	.word	0x0000c9d4

0000bf1c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    bf1c:	b510      	push	{r4, lr}
    bf1e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    bf20:	4901      	ldr	r1, [pc, #4]	; (bf28 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    bf22:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    bf26:	bd10      	pop	{r4, pc}
    bf28:	20001344 	.word	0x20001344

0000bf2c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    bf2c:	b570      	push	{r4, r5, r6, lr}
    bf2e:	4c0f      	ldr	r4, [pc, #60]	; (bf6c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    bf30:	4603      	mov	r3, r0
    bf32:	2002      	movs	r0, #2
    bf34:	7320      	strb	r0, [r4, #12]
    bf36:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    bf3a:	2096      	movs	r0, #150	; 0x96
    bf3c:	f894 1020 	ldrb.w	r1, [r4, #32]
    bf40:	7d22      	ldrb	r2, [r4, #20]
    bf42:	2d01      	cmp	r5, #1
    bf44:	d00e      	beq.n	bf64 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    bf46:	f000 fd81 	bl	ca4c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    bf4a:	6120      	str	r0, [r4, #16]
    bf4c:	4808      	ldr	r0, [pc, #32]	; (bf70 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    bf4e:	2100      	movs	r1, #0
    bf50:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bf54:	6921      	ldr	r1, [r4, #16]
    bf56:	69e0      	ldr	r0, [r4, #28]
    bf58:	4408      	add	r0, r1
    bf5a:	4905      	ldr	r1, [pc, #20]	; (bf70 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    bf5c:	1d09      	adds	r1, r1, #4
    bf5e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bf62:	bd70      	pop	{r4, r5, r6, pc}
    bf64:	f000 fd90 	bl	ca88 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    bf68:	e7ef      	b.n	bf4a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    bf6a:	0000      	.short	0x0000
    bf6c:	20001354 	.word	0x20001354
    bf70:	40008000 	.word	0x40008000

0000bf74 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    bf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf78:	2238      	movs	r2, #56	; 0x38
    bf7a:	2100      	movs	r1, #0
    bf7c:	4813      	ldr	r0, [pc, #76]	; (bfcc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    bf7e:	f001 fbd6 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bf82:	f000 fcab 	bl	c8dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    bf86:	f001 fadb 	bl	d540 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf8a:	4d11      	ldr	r5, [pc, #68]	; (bfd0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bf8c:	4e10      	ldr	r6, [pc, #64]	; (bfd0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bf8e:	2400      	movs	r4, #0
    bf90:	4f0f      	ldr	r7, [pc, #60]	; (bfd0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bf92:	3508      	adds	r5, #8
    bf94:	3610      	adds	r6, #16
    bf96:	b928      	cbnz	r0, bfa4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bf98:	f001 fae9 	bl	d56e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf9c:	b910      	cbnz	r0, bfa4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bf9e:	f001 faf0 	bl	d582 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    bfa2:	b108      	cbz	r0, bfa8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    bfa4:	2224      	movs	r2, #36	; 0x24
    bfa6:	e006      	b.n	bfb6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bfa8:	f001 fb2b 	bl	d602 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bfac:	b910      	cbnz	r0, bfb4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    bfae:	f001 fb1e 	bl	d5ee <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    bfb2:	b140      	cbz	r0, bfc6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    bfb4:	2240      	movs	r2, #64	; 0x40
    bfb6:	21ff      	movs	r1, #255	; 0xff
    bfb8:	4638      	mov	r0, r7
    bfba:	f001 fbb8 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bfbe:	602c      	str	r4, [r5, #0]
    bfc0:	6034      	str	r4, [r6, #0]
    bfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bfc6:	2238      	movs	r2, #56	; 0x38
    bfc8:	e7f5      	b.n	bfb6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bfca:	0000      	.short	0x0000
    bfcc:	20001354 	.word	0x20001354
    bfd0:	40000e00 	.word	0x40000e00

0000bfd4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    bfd4:	4801      	ldr	r0, [pc, #4]	; (bfdc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    bfd6:	69c0      	ldr	r0, [r0, #28]
    bfd8:	4770      	bx	lr
    bfda:	0000      	.short	0x0000
    bfdc:	20001354 	.word	0x20001354

0000bfe0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    bfe0:	b510      	push	{r4, lr}
    bfe2:	f000 fc2f 	bl	c844 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    bfe6:	f7ff feab 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bfea:	f7f8 f947 	bl	427c <mpsl_fem_disable>
    bfee:	b130      	cbz	r0, bffe <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    bff0:	1c40      	adds	r0, r0, #1
    bff2:	d004      	beq.n	bffe <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    bff4:	f240 5146 	movw	r1, #1350	; 0x546
    bff8:	203e      	movs	r0, #62	; 0x3e
    bffa:	f7f8 fadd 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bffe:	480f      	ldr	r0, [pc, #60]	; (c03c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    c000:	4a0f      	ldr	r2, [pc, #60]	; (c040 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    c002:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c004:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    c008:	6011      	str	r1, [r2, #0]
    c00a:	2400      	movs	r4, #0
    c00c:	6284      	str	r4, [r0, #40]	; 0x28
    c00e:	7304      	strb	r4, [r0, #12]
    c010:	61c4      	str	r4, [r0, #28]
    c012:	6184      	str	r4, [r0, #24]
    c014:	f000 fc16 	bl	c844 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    c018:	480a      	ldr	r0, [pc, #40]	; (c044 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    c01a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c01e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c022:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c026:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    c02a:	2001      	movs	r0, #1
    c02c:	f004 fdab 	bl	10b86 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c034:	2001      	movs	r0, #1
    c036:	f004 bd99 	b.w	10b6c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c03a:	0000      	.short	0x0000
    c03c:	20001354 	.word	0x20001354
    c040:	4001f508 	.word	0x4001f508
    c044:	40008000 	.word	0x40008000

0000c048 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    c048:	b570      	push	{r4, r5, r6, lr}
    c04a:	2001      	movs	r0, #1
    c04c:	f004 fd9b 	bl	10b86 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c050:	4c37      	ldr	r4, [pc, #220]	; (c130 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    c052:	2000      	movs	r0, #0
    c054:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c058:	2001      	movs	r0, #1
    c05a:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c05e:	f001 faa6 	bl	d5ae <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c062:	4d34      	ldr	r5, [pc, #208]	; (c134 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c064:	b118      	cbz	r0, c06e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    c066:	6828      	ldr	r0, [r5, #0]
    c068:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c06c:	6028      	str	r0, [r5, #0]
    c06e:	f001 fa92 	bl	d596 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c072:	b128      	cbz	r0, c080 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    c074:	6828      	ldr	r0, [r5, #0]
    c076:	4930      	ldr	r1, [pc, #192]	; (c138 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c078:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    c07c:	4308      	orrs	r0, r1
    c07e:	6028      	str	r0, [r5, #0]
    c080:	f001 faa5 	bl	d5ce <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c084:	b138      	cbz	r0, c096 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    c086:	482b      	ldr	r0, [pc, #172]	; (c134 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c088:	1d00      	adds	r0, r0, #4
    c08a:	6801      	ldr	r1, [r0, #0]
    c08c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    c090:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    c094:	6001      	str	r1, [r0, #0]
    c096:	4927      	ldr	r1, [pc, #156]	; (c134 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c098:	4828      	ldr	r0, [pc, #160]	; (c13c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    c09a:	313c      	adds	r1, #60	; 0x3c
    c09c:	6008      	str	r0, [r1, #0]
    c09e:	f7f8 f923 	bl	42e8 <mpsl_fem_device_config_254_apply_get>
    c0a2:	b140      	cbz	r0, c0b6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c0a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c0a8:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    c0ac:	1c41      	adds	r1, r0, #1
    c0ae:	d002      	beq.n	c0b6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c0b0:	4920      	ldr	r1, [pc, #128]	; (c134 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c0b2:	3110      	adds	r1, #16
    c0b4:	6008      	str	r0, [r1, #0]
    c0b6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    c0ba:	6e00      	ldr	r0, [r0, #96]	; 0x60
    c0bc:	1c41      	adds	r1, r0, #1
    c0be:	d004      	beq.n	c0ca <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    c0c0:	491f      	ldr	r1, [pc, #124]	; (c140 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    c0c2:	680a      	ldr	r2, [r1, #0]
    c0c4:	f360 4217 	bfi	r2, r0, #16, #8
    c0c8:	600a      	str	r2, [r1, #0]
    c0ca:	f240 1103 	movw	r1, #259	; 0x103
    c0ce:	f240 605b 	movw	r0, #1627	; 0x65b
    c0d2:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    c0d6:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c0da:	2001      	movs	r0, #1
    c0dc:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    c0e0:	f000 f842 	bl	c168 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c0e4:	f240 2001 	movw	r0, #513	; 0x201
    c0e8:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    c0ec:	2002      	movs	r0, #2
    c0ee:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c0f2:	4914      	ldr	r1, [pc, #80]	; (c144 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c0f4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c0f8:	6008      	str	r0, [r1, #0]
    c0fa:	4913      	ldr	r1, [pc, #76]	; (c148 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    c0fc:	2000      	movs	r0, #0
    c0fe:	4d13      	ldr	r5, [pc, #76]	; (c14c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    c100:	8608      	strh	r0, [r1, #48]	; 0x30
    c102:	3110      	adds	r1, #16
    c104:	61c8      	str	r0, [r1, #28]
    c106:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    c10a:	7028      	strb	r0, [r5, #0]
    c10c:	2001      	movs	r0, #1
    c10e:	f004 fd2d 	bl	10b6c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c112:	2010      	movs	r0, #16
    c114:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c118:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c11c:	2002      	movs	r0, #2
    c11e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c122:	6868      	ldr	r0, [r5, #4]
    c124:	2800      	cmp	r0, #0
    c126:	d002      	beq.n	c12e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    c128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c12c:	4700      	bx	r0
    c12e:	bd70      	pop	{r4, r5, r6, pc}
    c130:	40001000 	.word	0x40001000
    c134:	4000173c 	.word	0x4000173c
    c138:	80000096 	.word	0x80000096
    c13c:	8900002c 	.word	0x8900002c
    c140:	4000158c 	.word	0x4000158c
    c144:	4001f504 	.word	0x4001f504
    c148:	20001344 	.word	0x20001344
    c14c:	200002e0 	.word	0x200002e0

0000c150 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    c150:	4901      	ldr	r1, [pc, #4]	; (c158 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    c152:	7548      	strb	r0, [r1, #21]
    c154:	4770      	bx	lr
    c156:	0000      	.short	0x0000
    c158:	20001354 	.word	0x20001354

0000c15c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    c15c:	4901      	ldr	r1, [pc, #4]	; (c164 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    c15e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c162:	4770      	bx	lr
    c164:	0000ca28 	.word	0x0000ca28

0000c168 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    c168:	4908      	ldr	r1, [pc, #32]	; (c18c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    c16a:	b510      	push	{r4, lr}
    c16c:	7508      	strb	r0, [r1, #20]
    c16e:	4908      	ldr	r1, [pc, #32]	; (c190 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    c170:	2801      	cmp	r0, #1
    c172:	d006      	beq.n	c182 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    c174:	2802      	cmp	r0, #2
    c176:	d006      	beq.n	c186 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    c178:	f640 5155 	movw	r1, #3413	; 0xd55
    c17c:	203e      	movs	r0, #62	; 0x3e
    c17e:	f7f8 fa1b 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c182:	2003      	movs	r0, #3
    c184:	e000      	b.n	c188 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    c186:	2004      	movs	r0, #4
    c188:	6008      	str	r0, [r1, #0]
    c18a:	bd10      	pop	{r4, pc}
    c18c:	20001354 	.word	0x20001354
    c190:	40001510 	.word	0x40001510

0000c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    c194:	4905      	ldr	r1, [pc, #20]	; (c1ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    c196:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    c19a:	4805      	ldr	r0, [pc, #20]	; (c1b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    c19c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    c1a0:	f041 0101 	orr.w	r1, r1, #1
    c1a4:	7001      	strb	r1, [r0, #0]
    c1a6:	f000 ba3f 	b.w	c628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c1aa:	0000      	.short	0x0000
    c1ac:	40001000 	.word	0x40001000
    c1b0:	20001354 	.word	0x20001354

0000c1b4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    c1b4:	4901      	ldr	r1, [pc, #4]	; (c1bc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    c1b6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c1ba:	4770      	bx	lr
    c1bc:	0000ca34 	.word	0x0000ca34

0000c1c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    c1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c1c4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; c268 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    c1c8:	4d28      	ldr	r5, [pc, #160]	; (c26c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    c1ca:	460f      	mov	r7, r1
    c1cc:	0006      	movs	r6, r0
    c1ce:	4614      	mov	r4, r2
    c1d0:	f04f 0801 	mov.w	r8, #1
    c1d4:	d004      	beq.n	c1e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    c1d6:	2e01      	cmp	r6, #1
    c1d8:	d010      	beq.n	c1fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    c1da:	f640 0114 	movw	r1, #2068	; 0x814
    c1de:	e039      	b.n	c254 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    c1e0:	4610      	mov	r0, r2
    c1e2:	f000 fbd5 	bl	c990 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c1e6:	4822      	ldr	r0, [pc, #136]	; (c270 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    c1e8:	f885 8009 	strb.w	r8, [r5, #9]
    c1ec:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    c1f0:	4638      	mov	r0, r7
    c1f2:	f000 fb7b 	bl	c8ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    c1f6:	4604      	mov	r4, r0
    c1f8:	4648      	mov	r0, r9
    c1fa:	e00c      	b.n	c216 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    c1fc:	4610      	mov	r0, r2
    c1fe:	f000 fbad 	bl	c95c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    c202:	2002      	movs	r0, #2
    c204:	7268      	strb	r0, [r5, #9]
    c206:	f649 71ba 	movw	r1, #40890	; 0x9fba
    c20a:	4638      	mov	r0, r7
    c20c:	f000 fb6e 	bl	c8ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    c210:	4604      	mov	r4, r0
    c212:	4815      	ldr	r0, [pc, #84]	; (c268 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    c214:	1d00      	adds	r0, r0, #4
    c216:	f000 fb27 	bl	c868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    c21a:	4f16      	ldr	r7, [pc, #88]	; (c274 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    c21c:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    c220:	4916      	ldr	r1, [pc, #88]	; (c27c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    c222:	4815      	ldr	r0, [pc, #84]	; (c278 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    c224:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    c228:	2010      	movs	r0, #16
    c22a:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    c22e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    c230:	4913      	ldr	r1, [pc, #76]	; (c280 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    c232:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    c236:	62a8      	str	r0, [r5, #40]	; 0x28
    c238:	0138      	lsls	r0, r7, #4
    c23a:	6008      	str	r0, [r1, #0]
    c23c:	f000 fa2e 	bl	c69c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    c240:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    c244:	480b      	ldr	r0, [pc, #44]	; (c274 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    c246:	300c      	adds	r0, #12
    c248:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c24c:	42a0      	cmp	r0, r4
    c24e:	d304      	bcc.n	c25a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    c250:	f640 012a 	movw	r1, #2090	; 0x82a
    c254:	203e      	movs	r0, #62	; 0x3e
    c256:	f7f8 f9af 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c25a:	4621      	mov	r1, r4
    c25c:	4630      	mov	r0, r6
    c25e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c262:	f000 bb0d 	b.w	c880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c266:	0000      	.short	0x0000
    c268:	40001000 	.word	0x40001000
    c26c:	20001354 	.word	0x20001354
    c270:	0000c9d4 	.word	0x0000c9d4
    c274:	40008000 	.word	0x40008000
    c278:	40008140 	.word	0x40008140
    c27c:	4001f098 	.word	0x4001f098
    c280:	4001f504 	.word	0x4001f504

0000c284 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    c284:	4b0d      	ldr	r3, [pc, #52]	; (c2bc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    c286:	b510      	push	{r4, lr}
    c288:	71d8      	strb	r0, [r3, #7]
    c28a:	729a      	strb	r2, [r3, #10]
    c28c:	b151      	cbz	r1, c2a4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    c28e:	2002      	movs	r0, #2
    c290:	7218      	strb	r0, [r3, #8]
    c292:	2801      	cmp	r0, #1
    c294:	d008      	beq.n	c2a8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    c296:	2802      	cmp	r0, #2
    c298:	d00f      	beq.n	c2ba <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c29a:	f640 213d 	movw	r1, #2621	; 0xa3d
    c29e:	203e      	movs	r0, #62	; 0x3e
    c2a0:	f7f8 f98a 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2a4:	2001      	movs	r0, #1
    c2a6:	e7f3      	b.n	c290 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    c2a8:	7a58      	ldrb	r0, [r3, #9]
    c2aa:	2802      	cmp	r0, #2
    c2ac:	d105      	bne.n	c2ba <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c2ae:	f000 f97f 	bl	c5b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    c2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2b6:	f000 baad 	b.w	c814 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    c2ba:	bd10      	pop	{r4, pc}
    c2bc:	20001354 	.word	0x20001354

0000c2c0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    c2c0:	4902      	ldr	r1, [pc, #8]	; (c2cc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    c2c2:	2000      	movs	r0, #0
    c2c4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c2c8:	4770      	bx	lr
    c2ca:	0000      	.short	0x0000
    c2cc:	40008000 	.word	0x40008000

0000c2d0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    c2d0:	4904      	ldr	r1, [pc, #16]	; (c2e4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    c2d2:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    c2d6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    c2da:	4249      	negs	r1, r1
    c2dc:	7001      	strb	r1, [r0, #0]
    c2de:	2001      	movs	r0, #1
    c2e0:	4770      	bx	lr
    c2e2:	0000      	.short	0x0000
    c2e4:	40001000 	.word	0x40001000

0000c2e8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    c2e8:	4903      	ldr	r1, [pc, #12]	; (c2f8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    c2ea:	0e02      	lsrs	r2, r0, #24
    c2ec:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    c2f0:	0200      	lsls	r0, r0, #8
    c2f2:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    c2f6:	4770      	bx	lr
    c2f8:	40001000 	.word	0x40001000

0000c2fc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    c2fc:	6800      	ldr	r0, [r0, #0]
    c2fe:	4903      	ldr	r1, [pc, #12]	; (c30c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    c300:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c304:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    c308:	4770      	bx	lr
    c30a:	0000      	.short	0x0000
    c30c:	40001000 	.word	0x40001000

0000c310 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    c310:	b510      	push	{r4, lr}
    c312:	2200      	movs	r2, #0
    c314:	2901      	cmp	r1, #1
    c316:	d006      	beq.n	c326 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    c318:	2902      	cmp	r1, #2
    c31a:	d002      	beq.n	c322 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    c31c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    c320:	e014      	b.n	c34c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    c322:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c326:	490b      	ldr	r1, [pc, #44]	; (c354 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    c328:	430a      	orrs	r2, r1
    c32a:	490b      	ldr	r1, [pc, #44]	; (c358 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c32c:	600a      	str	r2, [r1, #0]
    c32e:	490b      	ldr	r1, [pc, #44]	; (c35c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    c330:	4308      	orrs	r0, r1
    c332:	4909      	ldr	r1, [pc, #36]	; (c358 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c334:	1d09      	adds	r1, r1, #4
    c336:	6008      	str	r0, [r1, #0]
    c338:	4809      	ldr	r0, [pc, #36]	; (c360 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    c33a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c33e:	b2c0      	uxtb	r0, r0
    c340:	2803      	cmp	r0, #3
    c342:	d001      	beq.n	c348 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    c344:	280b      	cmp	r0, #11
    c346:	d104      	bne.n	c352 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    c348:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    c34c:	203e      	movs	r0, #62	; 0x3e
    c34e:	f7f8 f933 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c352:	bd10      	pop	{r4, pc}
    c354:	00100108 	.word	0x00100108
    c358:	40001514 	.word	0x40001514
    c35c:	02030000 	.word	0x02030000
    c360:	40001000 	.word	0x40001000

0000c364 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    c364:	4901      	ldr	r1, [pc, #4]	; (c36c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    c366:	7588      	strb	r0, [r1, #22]
    c368:	4770      	bx	lr
    c36a:	0000      	.short	0x0000
    c36c:	20001354 	.word	0x20001354

0000c370 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    c370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c374:	4852      	ldr	r0, [pc, #328]	; (c4c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c376:	f04f 0a01 	mov.w	sl, #1
    c37a:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    c37e:	4850      	ldr	r0, [pc, #320]	; (c4c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c380:	300c      	adds	r0, #12
    c382:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    c386:	f000 ffe1 	bl	d34c <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    c38a:	4c4e      	ldr	r4, [pc, #312]	; (c4c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c38c:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    c390:	f000 f918 	bl	c5c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    c394:	494c      	ldr	r1, [pc, #304]	; (c4c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c396:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c398:	6008      	str	r0, [r1, #0]
    c39a:	f8df 9130 	ldr.w	r9, [pc, #304]	; c4cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    c39e:	2000      	movs	r0, #0
    c3a0:	62a0      	str	r0, [r4, #40]	; 0x28
    c3a2:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    c3a6:	f240 131d 	movw	r3, #285	; 0x11d
    c3aa:	439a      	bics	r2, r3
    c3ac:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    c3b0:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c3b4:	f000 f986 	bl	c6c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    c3b8:	4605      	mov	r5, r0
    c3ba:	4841      	ldr	r0, [pc, #260]	; (c4c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c3bc:	3008      	adds	r0, #8
    c3be:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c3c2:	4e3f      	ldr	r6, [pc, #252]	; (c4c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c3c4:	61e0      	str	r0, [r4, #28]
    c3c6:	1d36      	adds	r6, r6, #4
    c3c8:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c3cc:	61a0      	str	r0, [r4, #24]
    c3ce:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c3d2:	7d21      	ldrb	r1, [r4, #20]
    c3d4:	f884 1020 	strb.w	r1, [r4, #32]
    c3d8:	7a61      	ldrb	r1, [r4, #9]
    c3da:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    c3de:	46a0      	mov	r8, r4
    c3e0:	2400      	movs	r4, #0
    c3e2:	4639      	mov	r1, r7
    c3e4:	4628      	mov	r0, r5
    c3e6:	f000 f9e1 	bl	c7ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    c3ea:	b910      	cbnz	r0, c3f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    c3ec:	f8c9 a010 	str.w	sl, [r9, #16]
    c3f0:	2401      	movs	r4, #1
    c3f2:	4f34      	ldr	r7, [pc, #208]	; (c4c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c3f4:	07e8      	lsls	r0, r5, #31
    c3f6:	f1a7 0710 	sub.w	r7, r7, #16
    c3fa:	d002      	beq.n	c402 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    c3fc:	6838      	ldr	r0, [r7, #0]
    c3fe:	4780      	blx	r0
    c400:	e032      	b.n	c468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    c402:	07a8      	lsls	r0, r5, #30
    c404:	d527      	bpl.n	c456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    c406:	0768      	lsls	r0, r5, #29
    c408:	d41f      	bmi.n	c44a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c40a:	f001 f8e0 	bl	d5ce <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c40e:	b9e0      	cbnz	r0, c44a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c410:	f001 f8cd 	bl	d5ae <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c414:	b9c8      	cbnz	r0, c44a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c416:	482e      	ldr	r0, [pc, #184]	; (c4d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    c418:	6800      	ldr	r0, [r0, #0]
    c41a:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    c41e:	f3c0 5142 	ubfx	r1, r0, #21, #3
    c422:	f000 030f 	and.w	r3, r0, #15
    c426:	f3c0 1203 	ubfx	r2, r0, #4, #4
    c42a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c42e:	f1bc 0f00 	cmp.w	ip, #0
    c432:	d00a      	beq.n	c44a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c434:	b10b      	cbz	r3, c43a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    c436:	b102      	cbz	r2, c43a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    c438:	b938      	cbnz	r0, c44a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c43a:	4825      	ldr	r0, [pc, #148]	; (c4d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    c43c:	1d00      	adds	r0, r0, #4
    c43e:	6800      	ldr	r0, [r0, #0]
    c440:	b118      	cbz	r0, c44a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c442:	2903      	cmp	r1, #3
    c444:	d201      	bcs.n	c44a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c446:	f045 0504 	orr.w	r5, r5, #4
    c44a:	f345 0080 	sbfx	r0, r5, #2, #1
    c44e:	4621      	mov	r1, r4
    c450:	1c40      	adds	r0, r0, #1
    c452:	687a      	ldr	r2, [r7, #4]
    c454:	e007      	b.n	c466 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    c456:	f015 0f28 	tst.w	r5, #40	; 0x28
    c45a:	d005      	beq.n	c468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    c45c:	f345 1140 	sbfx	r1, r5, #5, #1
    c460:	68ba      	ldr	r2, [r7, #8]
    c462:	4620      	mov	r0, r4
    c464:	1c49      	adds	r1, r1, #1
    c466:	4790      	blx	r2
    c468:	06e8      	lsls	r0, r5, #27
    c46a:	d501      	bpl.n	c470 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    c46c:	68f8      	ldr	r0, [r7, #12]
    c46e:	4780      	blx	r0
    c470:	f898 1009 	ldrb.w	r1, [r8, #9]
    c474:	4640      	mov	r0, r8
    c476:	2902      	cmp	r1, #2
    c478:	d120      	bne.n	c4bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    c47a:	7b01      	ldrb	r1, [r0, #12]
    c47c:	2900      	cmp	r1, #0
    c47e:	d01d      	beq.n	c4bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    c480:	2902      	cmp	r1, #2
    c482:	d004      	beq.n	c48e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    c484:	2901      	cmp	r1, #1
    c486:	d009      	beq.n	c49c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    c488:	f640 4134 	movw	r1, #3124	; 0xc34
    c48c:	e00d      	b.n	c4aa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    c48e:	69c1      	ldr	r1, [r0, #28]
    c490:	f8d8 0010 	ldr.w	r0, [r8, #16]
    c494:	4408      	add	r0, r1
    c496:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    c49a:	e00b      	b.n	c4b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c49c:	6901      	ldr	r1, [r0, #16]
    c49e:	f8d8 001c 	ldr.w	r0, [r8, #28]
    c4a2:	4281      	cmp	r1, r0
    c4a4:	d804      	bhi.n	c4b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    c4a6:	f640 4135 	movw	r1, #3125	; 0xc35
    c4aa:	203e      	movs	r0, #62	; 0x3e
    c4ac:	f7f8 f884 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c4b0:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    c4b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4b8:	f000 b9b6 	b.w	c828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c4c0:	40008000 	.word	0x40008000
    c4c4:	20001354 	.word	0x20001354
    c4c8:	4001f508 	.word	0x4001f508
    c4cc:	40001000 	.word	0x40001000
    c4d0:	40001450 	.word	0x40001450

0000c4d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c4d4:	b570      	push	{r4, r5, r6, lr}
    c4d6:	4b16      	ldr	r3, [pc, #88]	; (c530 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    c4d8:	888c      	ldrh	r4, [r1, #4]
    c4da:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    c4de:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    c4e2:	780c      	ldrb	r4, [r1, #0]
    c4e4:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c4e8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    c4ec:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    c4f0:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    c4f4:	2401      	movs	r4, #1
    c4f6:	4084      	lsls	r4, r0
    c4f8:	b2c9      	uxtb	r1, r1
    c4fa:	b2e5      	uxtb	r5, r4
    c4fc:	4329      	orrs	r1, r5
    c4fe:	b132      	cbz	r2, c50e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    c500:	2a01      	cmp	r2, #1
    c502:	d00a      	beq.n	c51a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    c504:	f240 51ad 	movw	r1, #1453	; 0x5ad
    c508:	203e      	movs	r0, #62	; 0x3e
    c50a:	f7f8 f855 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c50e:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c512:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c516:	43a0      	bics	r0, r4
    c518:	e004      	b.n	c524 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    c51a:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c51e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c522:	4328      	orrs	r0, r5
    c524:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c528:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    c52c:	bd70      	pop	{r4, r5, r6, pc}
    c52e:	0000      	.short	0x0000
    c530:	40001000 	.word	0x40001000

0000c534 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c534:	4901      	ldr	r1, [pc, #4]	; (c53c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c536:	2001      	movs	r0, #1
    c538:	7008      	strb	r0, [r1, #0]
    c53a:	4770      	bx	lr
    c53c:	200002e0 	.word	0x200002e0
    c540:	480b      	ldr	r0, [pc, #44]	; (c570 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    c542:	7d81      	ldrb	r1, [r0, #22]
    c544:	480b      	ldr	r0, [pc, #44]	; (c574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    c546:	5c40      	ldrb	r0, [r0, r1]
    c548:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    c54c:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c550:	d204      	bcs.n	c55c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    c552:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    c556:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c55a:	e001      	b.n	c560 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    c55c:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    c560:	4a05      	ldr	r2, [pc, #20]	; (c578 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    c562:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    c566:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c56a:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    c56e:	4770      	bx	lr
    c570:	20001354 	.word	0x20001354
    c574:	0000c9da 	.word	0x0000c9da
    c578:	40001000 	.word	0x40001000
    c57c:	b508      	push	{r3, lr}
    c57e:	490b      	ldr	r1, [pc, #44]	; (c5ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    c580:	466b      	mov	r3, sp
    c582:	f991 2015 	ldrsb.w	r2, [r1, #21]
    c586:	7d89      	ldrb	r1, [r1, #22]
    c588:	f000 faca 	bl	cb20 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    c58c:	f99d 0000 	ldrsb.w	r0, [sp]
    c590:	f000 fa9a 	bl	cac8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c594:	f10d 0001 	add.w	r0, sp, #1
    c598:	f7f7 fe94 	bl	42c4 <mpsl_fem_pa_gain_set>
    c59c:	2800      	cmp	r0, #0
    c59e:	d004      	beq.n	c5aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    c5a0:	f240 51ee 	movw	r1, #1518	; 0x5ee
    c5a4:	203e      	movs	r0, #62	; 0x3e
    c5a6:	f7f8 f807 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5aa:	bd08      	pop	{r3, pc}
    c5ac:	20001354 	.word	0x20001354
    c5b0:	4803      	ldr	r0, [pc, #12]	; (c5c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    c5b2:	7a01      	ldrb	r1, [r0, #8]
    c5b4:	2901      	cmp	r1, #1
    c5b6:	d102      	bne.n	c5be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    c5b8:	7a80      	ldrb	r0, [r0, #10]
    c5ba:	f7ff bfdf 	b.w	c57c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    c5be:	4770      	bx	lr
    c5c0:	20001354 	.word	0x20001354
    c5c4:	480d      	ldr	r0, [pc, #52]	; (c5fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    c5c6:	b510      	push	{r4, lr}
    c5c8:	7a40      	ldrb	r0, [r0, #9]
    c5ca:	2801      	cmp	r0, #1
    c5cc:	d00c      	beq.n	c5e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    c5ce:	2802      	cmp	r0, #2
    c5d0:	d113      	bne.n	c5fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c5d2:	f7f7 fe59 	bl	4288 <mpsl_fem_lna_configuration_clear>
    c5d6:	2800      	cmp	r0, #0
    c5d8:	d00f      	beq.n	c5fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c5da:	1c40      	adds	r0, r0, #1
    c5dc:	d00d      	beq.n	c5fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c5de:	f640 019a 	movw	r1, #2202	; 0x89a
    c5e2:	203e      	movs	r0, #62	; 0x3e
    c5e4:	f7f7 ffe8 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5e8:	f7f7 fe60 	bl	42ac <mpsl_fem_pa_configuration_clear>
    c5ec:	2800      	cmp	r0, #0
    c5ee:	d004      	beq.n	c5fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c5f0:	1c40      	adds	r0, r0, #1
    c5f2:	d002      	beq.n	c5fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c5f4:	f640 0194 	movw	r1, #2196	; 0x894
    c5f8:	e7f3      	b.n	c5e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    c5fa:	bd10      	pop	{r4, pc}
    c5fc:	20001354 	.word	0x20001354
    c600:	4808      	ldr	r0, [pc, #32]	; (c624 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    c602:	2100      	movs	r1, #0
    c604:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c608:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c60c:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c610:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c614:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c618:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c61c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c620:	4770      	bx	lr
    c622:	0000      	.short	0x0000
    c624:	40001000 	.word	0x40001000
    c628:	4818      	ldr	r0, [pc, #96]	; (c68c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    c62a:	b510      	push	{r4, lr}
    c62c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c630:	07c1      	lsls	r1, r0, #31
    c632:	d029      	beq.n	c688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c634:	0781      	lsls	r1, r0, #30
    c636:	d514      	bpl.n	c662 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    c638:	4815      	ldr	r0, [pc, #84]	; (c690 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    c63a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c63e:	f041 0101 	orr.w	r1, r1, #1
    c642:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c646:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c64a:	b2c0      	uxtb	r0, r0
    c64c:	280b      	cmp	r0, #11
    c64e:	d005      	beq.n	c65c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c650:	280a      	cmp	r0, #10
    c652:	d003      	beq.n	c65c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c654:	2803      	cmp	r0, #3
    c656:	d001      	beq.n	c65c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c658:	2802      	cmp	r0, #2
    c65a:	d115      	bne.n	c688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c65c:	f240 6117 	movw	r1, #1559	; 0x617
    c660:	e00f      	b.n	c682 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    c662:	0740      	lsls	r0, r0, #29
    c664:	d510      	bpl.n	c688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c666:	480a      	ldr	r0, [pc, #40]	; (c690 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    c668:	490a      	ldr	r1, [pc, #40]	; (c694 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    c66a:	3008      	adds	r0, #8
    c66c:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c670:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c674:	4808      	ldr	r0, [pc, #32]	; (c698 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    c676:	f004 fa9c 	bl	10bb2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c67a:	2800      	cmp	r0, #0
    c67c:	d004      	beq.n	c688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c67e:	f240 611f 	movw	r1, #1567	; 0x61f
    c682:	203e      	movs	r0, #62	; 0x3e
    c684:	f7f7 ff98 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c688:	bd10      	pop	{r4, pc}
    c68a:	0000      	.short	0x0000
    c68c:	20001354 	.word	0x20001354
    c690:	40001000 	.word	0x40001000
    c694:	4001f098 	.word	0x4001f098
    c698:	40008000 	.word	0x40008000
    c69c:	4808      	ldr	r0, [pc, #32]	; (c6c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    c69e:	4601      	mov	r1, r0
    c6a0:	79c2      	ldrb	r2, [r0, #7]
    c6a2:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c6a6:	b112      	cbz	r2, c6ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    c6a8:	2a01      	cmp	r2, #1
    c6aa:	d003      	beq.n	c6b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    c6ac:	e006      	b.n	c6bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c6ae:	f041 0102 	orr.w	r1, r1, #2
    c6b2:	e001      	b.n	c6b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    c6b4:	f041 0104 	orr.w	r1, r1, #4
    c6b8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c6bc:	f7ff bfb4 	b.w	c628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c6c0:	20001354 	.word	0x20001354
    c6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6c8:	4d34      	ldr	r5, [pc, #208]	; (c79c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    c6ca:	2400      	movs	r4, #0
    c6cc:	7b28      	ldrb	r0, [r5, #12]
    c6ce:	b138      	cbz	r0, c6e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    c6d0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c6d4:	4832      	ldr	r0, [pc, #200]	; (c7a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    c6d6:	f004 fa6c 	bl	10bb2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c6da:	b108      	cbz	r0, c6e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    c6dc:	2601      	movs	r6, #1
    c6de:	e000      	b.n	c6e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    c6e0:	2600      	movs	r6, #0
    c6e2:	7a68      	ldrb	r0, [r5, #9]
    c6e4:	4f2f      	ldr	r7, [pc, #188]	; (c7a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    c6e6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c6ea:	2801      	cmp	r0, #1
    c6ec:	d002      	beq.n	c6f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c6ee:	2802      	cmp	r0, #2
    c6f0:	d006      	beq.n	c700 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    c6f2:	e016      	b.n	c722 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c6f4:	4638      	mov	r0, r7
    c6f6:	f004 fa57 	bl	10ba8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c6fa:	b190      	cbz	r0, c722 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c6fc:	2408      	movs	r4, #8
    c6fe:	e010      	b.n	c722 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c700:	4638      	mov	r0, r7
    c702:	f004 fa51 	bl	10ba8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c706:	b100      	cbz	r0, c70a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    c708:	2402      	movs	r4, #2
    c70a:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    c70e:	43c0      	mvns	r0, r0
    c710:	f340 0000 	sbfx	r0, r0, #0, #1
    c714:	1c40      	adds	r0, r0, #1
    c716:	d101      	bne.n	c71c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    c718:	f044 0404 	orr.w	r4, r4, #4
    c71c:	b10e      	cbz	r6, c722 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c71e:	f044 0401 	orr.w	r4, r4, #1
    c722:	f014 0f0b 	tst.w	r4, #11
    c726:	d107      	bne.n	c738 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c728:	f44f 7188 	mov.w	r1, #272	; 0x110
    c72c:	4638      	mov	r0, r7
    c72e:	f004 fa3b 	bl	10ba8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c732:	b108      	cbz	r0, c738 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c734:	f044 0410 	orr.w	r4, r4, #16
    c738:	481b      	ldr	r0, [pc, #108]	; (c7a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    c73a:	7800      	ldrb	r0, [r0, #0]
    c73c:	b1f8      	cbz	r0, c77e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    c73e:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c742:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c746:	d007      	beq.n	c758 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c748:	f44f 718a 	mov.w	r1, #276	; 0x114
    c74c:	4638      	mov	r0, r7
    c74e:	f004 fa2b 	bl	10ba8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c752:	b108      	cbz	r0, c758 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c754:	2001      	movs	r0, #1
    c756:	e000      	b.n	c75a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    c758:	2000      	movs	r0, #0
    c75a:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c75e:	b13e      	cbz	r6, c770 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c760:	f44f 718c 	mov.w	r1, #280	; 0x118
    c764:	4638      	mov	r0, r7
    c766:	f004 fa1f 	bl	10ba8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c76a:	b108      	cbz	r0, c770 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c76c:	2001      	movs	r0, #1
    c76e:	e000      	b.n	c772 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    c770:	2000      	movs	r0, #0
    c772:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c776:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c77a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c77e:	f7ff ff3f 	bl	c600 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c782:	06e0      	lsls	r0, r4, #27
    c784:	d506      	bpl.n	c794 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c786:	0720      	lsls	r0, r4, #28
    c788:	d404      	bmi.n	c794 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c78a:	7a68      	ldrb	r0, [r5, #9]
    c78c:	2801      	cmp	r0, #1
    c78e:	d101      	bne.n	c794 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c790:	f044 0420 	orr.w	r4, r4, #32
    c794:	4620      	mov	r0, r4
    c796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c79a:	0000      	.short	0x0000
    c79c:	20001354 	.word	0x20001354
    c7a0:	40008000 	.word	0x40008000
    c7a4:	40001000 	.word	0x40001000
    c7a8:	200002e0 	.word	0x200002e0
    c7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7b0:	4c17      	ldr	r4, [pc, #92]	; (c810 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    c7b2:	460d      	mov	r5, r1
    c7b4:	7a21      	ldrb	r1, [r4, #8]
    c7b6:	b129      	cbz	r1, c7c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    c7b8:	f010 0f11 	tst.w	r0, #17
    c7bc:	d007      	beq.n	c7ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    c7be:	f7ff fabf 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c7c2:	e023      	b.n	c80c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c7c4:	f000 f88a 	bl	c8dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c7c8:	2000      	movs	r0, #0
    c7ca:	7320      	strb	r0, [r4, #12]
    c7cc:	e01e      	b.n	c80c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c7ce:	2901      	cmp	r1, #1
    c7d0:	d001      	beq.n	c7d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c7d2:	2601      	movs	r6, #1
    c7d4:	e000      	b.n	c7d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    c7d6:	2600      	movs	r6, #0
    c7d8:	79e0      	ldrb	r0, [r4, #7]
    c7da:	2801      	cmp	r0, #1
    c7dc:	d00e      	beq.n	c7fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    c7de:	2700      	movs	r7, #0
    c7e0:	f000 f87c 	bl	c8dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c7e4:	2196      	movs	r1, #150	; 0x96
    c7e6:	4630      	mov	r0, r6
    c7e8:	f000 f88e 	bl	c908 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    c7ec:	4601      	mov	r1, r0
    c7ee:	b14f      	cbz	r7, c804 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    c7f0:	353b      	adds	r5, #59	; 0x3b
    c7f2:	428d      	cmp	r5, r1
    c7f4:	d904      	bls.n	c800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    c7f6:	2000      	movs	r0, #0
    c7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7fc:	2701      	movs	r7, #1
    c7fe:	e7ef      	b.n	c7e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    c800:	2001      	movs	r0, #1
    c802:	71e0      	strb	r0, [r4, #7]
    c804:	7aa2      	ldrb	r2, [r4, #10]
    c806:	4630      	mov	r0, r6
    c808:	f7ff fcda 	bl	c1c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c80c:	2001      	movs	r0, #1
    c80e:	e7f3      	b.n	c7f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c810:	20001354 	.word	0x20001354
    c814:	4803      	ldr	r0, [pc, #12]	; (c824 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    c816:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c81a:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c81e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c822:	4770      	bx	lr
    c824:	40001000 	.word	0x40001000
    c828:	4804      	ldr	r0, [pc, #16]	; (c83c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    c82a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c82c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c830:	6281      	str	r1, [r0, #40]	; 0x28
    c832:	4903      	ldr	r1, [pc, #12]	; (c840 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    c834:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c838:	6008      	str	r0, [r1, #0]
    c83a:	4770      	bx	lr
    c83c:	20001354 	.word	0x20001354
    c840:	4001f504 	.word	0x4001f504
    c844:	4a07      	ldr	r2, [pc, #28]	; (c864 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c846:	2000      	movs	r0, #0
    c848:	3208      	adds	r2, #8
    c84a:	4906      	ldr	r1, [pc, #24]	; (c864 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c84c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c850:	1d0a      	adds	r2, r1, #4
    c852:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c856:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c85a:	4902      	ldr	r1, [pc, #8]	; (c864 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c85c:	310c      	adds	r1, #12
    c85e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c862:	4770      	bx	lr
    c864:	40008000 	.word	0x40008000
    c868:	4903      	ldr	r1, [pc, #12]	; (c878 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    c86a:	79c9      	ldrb	r1, [r1, #7]
    c86c:	2900      	cmp	r1, #0
    c86e:	d102      	bne.n	c876 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    c870:	4902      	ldr	r1, [pc, #8]	; (c87c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    c872:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c876:	4770      	bx	lr
    c878:	20001354 	.word	0x20001354
    c87c:	4001f098 	.word	0x4001f098
    c880:	b510      	push	{r4, lr}
    c882:	4a14      	ldr	r2, [pc, #80]	; (c8d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    c884:	b120      	cbz	r0, c890 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c886:	2801      	cmp	r0, #1
    c888:	d011      	beq.n	c8ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    c88a:	f240 714c 	movw	r1, #1868	; 0x74c
    c88e:	e01c      	b.n	c8ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    c890:	f101 0028 	add.w	r0, r1, #40	; 0x28
    c894:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c898:	490f      	ldr	r1, [pc, #60]	; (c8d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    c89a:	480e      	ldr	r0, [pc, #56]	; (c8d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    c89c:	f7f7 fd0c 	bl	42b8 <mpsl_fem_pa_configuration_set>
    c8a0:	2800      	cmp	r0, #0
    c8a2:	d015      	beq.n	c8d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c8a4:	1c40      	adds	r0, r0, #1
    c8a6:	d013      	beq.n	c8d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c8a8:	f240 713b 	movw	r1, #1851	; 0x73b
    c8ac:	e00d      	b.n	c8ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    c8ae:	f101 0029 	add.w	r0, r1, #41	; 0x29
    c8b2:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c8b6:	4908      	ldr	r1, [pc, #32]	; (c8d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    c8b8:	4806      	ldr	r0, [pc, #24]	; (c8d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    c8ba:	f7f7 fceb 	bl	4294 <mpsl_fem_lna_configuration_set>
    c8be:	2800      	cmp	r0, #0
    c8c0:	d006      	beq.n	c8d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c8c2:	1c40      	adds	r0, r0, #1
    c8c4:	d004      	beq.n	c8d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    c8c6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    c8ca:	203e      	movs	r0, #62	; 0x3e
    c8cc:	f7f7 fe74 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c8d0:	bd10      	pop	{r4, pc}
    c8d2:	0000      	.short	0x0000
    c8d4:	200002e8 	.word	0x200002e8
    c8d8:	0000ca04 	.word	0x0000ca04
    c8dc:	4802      	ldr	r0, [pc, #8]	; (c8e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    c8de:	2100      	movs	r1, #0
    c8e0:	71c1      	strb	r1, [r0, #7]
    c8e2:	7201      	strb	r1, [r0, #8]
    c8e4:	7241      	strb	r1, [r0, #9]
    c8e6:	4770      	bx	lr
    c8e8:	20001354 	.word	0x20001354
    c8ec:	4a05      	ldr	r2, [pc, #20]	; (c904 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    c8ee:	79d2      	ldrb	r2, [r2, #7]
    c8f0:	2a01      	cmp	r2, #1
    c8f2:	d006      	beq.n	c902 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    c8f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c8f8:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c8fc:	fbb1 f1f2 	udiv	r1, r1, r2
    c900:	1a40      	subs	r0, r0, r1
    c902:	4770      	bx	lr
    c904:	20001354 	.word	0x20001354
    c908:	b570      	push	{r4, r5, r6, lr}
    c90a:	4c13      	ldr	r4, [pc, #76]	; (c958 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    c90c:	4603      	mov	r3, r0
    c90e:	460d      	mov	r5, r1
    c910:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c914:	2000      	movs	r0, #0
    c916:	b15a      	cbz	r2, c930 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    c918:	4621      	mov	r1, r4
    c91a:	f891 1020 	ldrb.w	r1, [r1, #32]
    c91e:	b163      	cbz	r3, c93a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    c920:	2b01      	cmp	r3, #1
    c922:	d111      	bne.n	c948 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    c924:	2a01      	cmp	r2, #1
    c926:	4628      	mov	r0, r5
    c928:	d012      	beq.n	c950 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    c92a:	f004 f947 	bl	10bbc <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c92e:	e009      	b.n	c944 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    c930:	f640 0147 	movw	r1, #2119	; 0x847
    c934:	203e      	movs	r0, #62	; 0x3e
    c936:	f7f7 fe3f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c93a:	2a01      	cmp	r2, #1
    c93c:	4628      	mov	r0, r5
    c93e:	d004      	beq.n	c94a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    c940:	f004 f94a 	bl	10bd8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c944:	69e1      	ldr	r1, [r4, #28]
    c946:	4408      	add	r0, r1
    c948:	bd70      	pop	{r4, r5, r6, pc}
    c94a:	f000 f8d1 	bl	caf0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c94e:	e7f9      	b.n	c944 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    c950:	f000 f8c0 	bl	cad4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c954:	e7f6      	b.n	c944 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    c956:	0000      	.short	0x0000
    c958:	20001354 	.word	0x20001354
    c95c:	b510      	push	{r4, lr}
    c95e:	f7ff fc03 	bl	c168 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c962:	f7ff fded 	bl	c540 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c966:	f7ff fe23 	bl	c5b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    c96a:	f7ff ff53 	bl	c814 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    c96e:	f000 fe2e 	bl	d5ce <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c972:	2800      	cmp	r0, #0
    c974:	d108      	bne.n	c988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c976:	f000 fe1a 	bl	d5ae <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c97a:	2800      	cmp	r0, #0
    c97c:	d104      	bne.n	c988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c97e:	4803      	ldr	r0, [pc, #12]	; (c98c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    c980:	6801      	ldr	r1, [r0, #0]
    c982:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c986:	6001      	str	r1, [r0, #0]
    c988:	bd10      	pop	{r4, pc}
    c98a:	0000      	.short	0x0000
    c98c:	40001568 	.word	0x40001568
    c990:	b510      	push	{r4, lr}
    c992:	4604      	mov	r4, r0
    c994:	f7ff fbe8 	bl	c168 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c998:	f7ff fdd2 	bl	c540 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c99c:	4620      	mov	r0, r4
    c99e:	f7ff fded 	bl	c57c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    c9a2:	f000 fe14 	bl	d5ce <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c9a6:	2800      	cmp	r0, #0
    c9a8:	d00d      	beq.n	c9c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    c9aa:	4a09      	ldr	r2, [pc, #36]	; (c9d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    c9ac:	6811      	ldr	r1, [r2, #0]
    c9ae:	0650      	lsls	r0, r2, #25
    c9b0:	2c02      	cmp	r4, #2
    c9b2:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c9b6:	d007      	beq.n	c9c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    c9b8:	f3c0 2006 	ubfx	r0, r0, #8, #7
    c9bc:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c9c0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c9c4:	6010      	str	r0, [r2, #0]
    c9c6:	bd10      	pop	{r4, pc}
    c9c8:	f3c0 6006 	ubfx	r0, r0, #24, #7
    c9cc:	e7f6      	b.n	c9bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    c9ce:	0000      	.short	0x0000
    c9d0:	40001588 	.word	0x40001588
    c9d4:	a62c0000 	.word	0xa62c0000
    c9d8:	0604a1e0 	.word	0x0604a1e0
    c9dc:	0e0c0a08 	.word	0x0e0c0a08
    c9e0:	16141210 	.word	0x16141210
    c9e4:	201e1c18 	.word	0x201e1c18
    c9e8:	28262422 	.word	0x28262422
    c9ec:	302e2c2a 	.word	0x302e2c2a
    c9f0:	38363432 	.word	0x38363432
    c9f4:	403e3c3a 	.word	0x403e3c3a
    c9f8:	48464442 	.word	0x48464442
    c9fc:	024e4c4a 	.word	0x024e4c4a
    ca00:	0000501a 	.word	0x0000501a
    ca04:	00000001 	.word	0x00000001
    ca08:	40001110 	.word	0x40001110
	...
    ca20:	00001e14 	.word	0x00001e14
    ca24:	00001130 	.word	0x00001130
    ca28:	00000000 	.word	0x00000000
    ca2c:	00000028 	.word	0x00000028
    ca30:	00000018 	.word	0x00000018
    ca34:	00000000 	.word	0x00000000
    ca38:	00001e14 	.word	0x00001e14
    ca3c:	00001130 	.word	0x00001130
    ca40:	00000000 	.word	0x00000000
    ca44:	00001770 	.word	0x00001770
    ca48:	00000fa0 	.word	0x00000fa0

0000ca4c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    ca4c:	b570      	push	{r4, r5, r6, lr}
    ca4e:	4605      	mov	r5, r0
    ca50:	4614      	mov	r4, r2
    ca52:	4608      	mov	r0, r1
    ca54:	f7ff fbae 	bl	c1b4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ca58:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    ca5c:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    ca60:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    ca64:	4807      	ldr	r0, [pc, #28]	; (ca84 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    ca66:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    ca6a:	4408      	add	r0, r1
    ca6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ca70:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    ca74:	fbb0 f5f1 	udiv	r5, r0, r1
    ca78:	4620      	mov	r0, r4
    ca7a:	f7ff fb6f 	bl	c15c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ca7e:	4428      	add	r0, r5
    ca80:	1d40      	adds	r0, r0, #5
    ca82:	bd70      	pop	{r4, r5, r6, pc}
    ca84:	0000cb14 	.word	0x0000cb14

0000ca88 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    ca88:	b570      	push	{r4, r5, r6, lr}
    ca8a:	4d0e      	ldr	r5, [pc, #56]	; (cac4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    ca8c:	461c      	mov	r4, r3
    ca8e:	3d08      	subs	r5, #8
    ca90:	4b0c      	ldr	r3, [pc, #48]	; (cac4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    ca92:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    ca96:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    ca9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ca9e:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    caa2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    caa6:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    caaa:	4418      	add	r0, r3
    caac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    cab0:	fbb0 f5f1 	udiv	r5, r0, r1
    cab4:	4610      	mov	r0, r2
    cab6:	f7ff fb51 	bl	c15c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    caba:	4428      	add	r0, r5
    cabc:	4420      	add	r0, r4
    cabe:	1d40      	adds	r0, r0, #5
    cac0:	bd70      	pop	{r4, r5, r6, pc}
    cac2:	0000      	.short	0x0000
    cac4:	0000cb14 	.word	0x0000cb14

0000cac8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    cac8:	4901      	ldr	r1, [pc, #4]	; (cad0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    caca:	b2c0      	uxtb	r0, r0
    cacc:	6008      	str	r0, [r1, #0]
    cace:	4770      	bx	lr
    cad0:	4000150c 	.word	0x4000150c

0000cad4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    cad4:	4a05      	ldr	r2, [pc, #20]	; (caec <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    cad6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    cada:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cade:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    cae2:	fbb1 f1f2 	udiv	r1, r1, r2
    cae6:	4408      	add	r0, r1
    cae8:	1e80      	subs	r0, r0, #2
    caea:	4770      	bx	lr
    caec:	0000cb0c 	.word	0x0000cb0c

0000caf0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    caf0:	4a05      	ldr	r2, [pc, #20]	; (cb08 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    caf2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    caf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cafa:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    cafe:	fbb1 f1f2 	udiv	r1, r1, r2
    cb02:	4408      	add	r0, r1
    cb04:	4770      	bx	lr
    cb06:	0000      	.short	0x0000
    cb08:	0000cb0c 	.word	0x0000cb0c
    cb0c:	05dc0000 	.word	0x05dc0000
    cb10:	000003e8 	.word	0x000003e8
    cb14:	00000000 	.word	0x00000000
    cb18:	00001e14 	.word	0x00001e14
    cb1c:	00001130 	.word	0x00001130

0000cb20 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cb24:	461e      	mov	r6, r3
    cb26:	4617      	mov	r7, r2
    cb28:	460c      	mov	r4, r1
    cb2a:	4605      	mov	r5, r0
    cb2c:	f7f3 fe34 	bl	798 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    cb30:	f8df 90a4 	ldr.w	r9, [pc, #164]	; cbd8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    cb34:	4680      	mov	r8, r0
    cb36:	f899 0000 	ldrb.w	r0, [r9]
    cb3a:	42a8      	cmp	r0, r5
    cb3c:	d110      	bne.n	cb60 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cb3e:	f899 1001 	ldrb.w	r1, [r9, #1]
    cb42:	4648      	mov	r0, r9
    cb44:	42a1      	cmp	r1, r4
    cb46:	d10b      	bne.n	cb60 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cb48:	f990 1002 	ldrsb.w	r1, [r0, #2]
    cb4c:	42b9      	cmp	r1, r7
    cb4e:	d107      	bne.n	cb60 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cb50:	78c2      	ldrb	r2, [r0, #3]
    cb52:	4542      	cmp	r2, r8
    cb54:	d104      	bne.n	cb60 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cb56:	8881      	ldrh	r1, [r0, #4]
    cb58:	8031      	strh	r1, [r6, #0]
    cb5a:	7980      	ldrb	r0, [r0, #6]
    cb5c:	70b0      	strb	r0, [r6, #2]
    cb5e:	e036      	b.n	cbce <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    cb60:	463a      	mov	r2, r7
    cb62:	4621      	mov	r1, r4
    cb64:	2d01      	cmp	r5, #1
    cb66:	d009      	beq.n	cb7c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    cb68:	2d02      	cmp	r5, #2
    cb6a:	d009      	beq.n	cb80 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    cb6c:	2d04      	cmp	r5, #4
    cb6e:	d009      	beq.n	cb84 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    cb70:	2d08      	cmp	r5, #8
    cb72:	d009      	beq.n	cb88 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    cb74:	f240 4133 	movw	r1, #1075	; 0x433
    cb78:	2006      	movs	r0, #6
    cb7a:	e00c      	b.n	cb96 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    cb7c:	2000      	movs	r0, #0
    cb7e:	e004      	b.n	cb8a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cb80:	2001      	movs	r0, #1
    cb82:	e002      	b.n	cb8a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cb84:	2003      	movs	r0, #3
    cb86:	e000      	b.n	cb8a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cb88:	2002      	movs	r0, #2
    cb8a:	466b      	mov	r3, sp
    cb8c:	f7f3 fe4a 	bl	824 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    cb90:	b118      	cbz	r0, cb9a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    cb92:	213d      	movs	r1, #61	; 0x3d
    cb94:	2075      	movs	r0, #117	; 0x75
    cb96:	f7f7 fd0f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb9a:	4620      	mov	r0, r4
    cb9c:	f7ff f8c8 	bl	bd30 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    cba0:	4602      	mov	r2, r0
    cba2:	4631      	mov	r1, r6
    cba4:	f99d 0000 	ldrsb.w	r0, [sp]
    cba8:	f7f7 fb98 	bl	42dc <mpsl_fem_tx_power_split>
    cbac:	4601      	mov	r1, r0
    cbae:	f889 1007 	strb.w	r1, [r9, #7]
    cbb2:	8831      	ldrh	r1, [r6, #0]
    cbb4:	f8a9 1004 	strh.w	r1, [r9, #4]
    cbb8:	78b1      	ldrb	r1, [r6, #2]
    cbba:	f889 1006 	strb.w	r1, [r9, #6]
    cbbe:	f889 5000 	strb.w	r5, [r9]
    cbc2:	f889 4001 	strb.w	r4, [r9, #1]
    cbc6:	f889 7002 	strb.w	r7, [r9, #2]
    cbca:	f889 8003 	strb.w	r8, [r9, #3]
    cbce:	f999 0007 	ldrsb.w	r0, [r9, #7]
    cbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cbd6:	0000      	.short	0x0000
    cbd8:	20000337 	.word	0x20000337

0000cbdc <__udivmoddi4>:
    cbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbe0:	4607      	mov	r7, r0
    cbe2:	468c      	mov	ip, r1
    cbe4:	4608      	mov	r0, r1
    cbe6:	9e09      	ldr	r6, [sp, #36]	; 0x24
    cbe8:	4615      	mov	r5, r2
    cbea:	463c      	mov	r4, r7
    cbec:	4619      	mov	r1, r3
    cbee:	2b00      	cmp	r3, #0
    cbf0:	f040 80c6 	bne.w	cd80 <__udivmoddi4+0x1a4>
    cbf4:	4282      	cmp	r2, r0
    cbf6:	fab2 f782 	clz	r7, r2
    cbfa:	d946      	bls.n	cc8a <__udivmoddi4+0xae>
    cbfc:	b14f      	cbz	r7, cc12 <__udivmoddi4+0x36>
    cbfe:	f1c7 0e20 	rsb	lr, r7, #32
    cc02:	fa24 fe0e 	lsr.w	lr, r4, lr
    cc06:	fa00 f307 	lsl.w	r3, r0, r7
    cc0a:	40bd      	lsls	r5, r7
    cc0c:	ea4e 0c03 	orr.w	ip, lr, r3
    cc10:	40bc      	lsls	r4, r7
    cc12:	ea4f 4815 	mov.w	r8, r5, lsr #16
    cc16:	fa1f fe85 	uxth.w	lr, r5
    cc1a:	fbbc f9f8 	udiv	r9, ip, r8
    cc1e:	0c22      	lsrs	r2, r4, #16
    cc20:	fb08 c319 	mls	r3, r8, r9, ip
    cc24:	fb09 fa0e 	mul.w	sl, r9, lr
    cc28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    cc2c:	459a      	cmp	sl, r3
    cc2e:	d928      	bls.n	cc82 <__udivmoddi4+0xa6>
    cc30:	18eb      	adds	r3, r5, r3
    cc32:	f109 30ff 	add.w	r0, r9, #4294967295
    cc36:	d204      	bcs.n	cc42 <__udivmoddi4+0x66>
    cc38:	459a      	cmp	sl, r3
    cc3a:	d902      	bls.n	cc42 <__udivmoddi4+0x66>
    cc3c:	f1a9 0002 	sub.w	r0, r9, #2
    cc40:	442b      	add	r3, r5
    cc42:	eba3 030a 	sub.w	r3, r3, sl
    cc46:	b2a4      	uxth	r4, r4
    cc48:	fbb3 f2f8 	udiv	r2, r3, r8
    cc4c:	fb08 3312 	mls	r3, r8, r2, r3
    cc50:	fb02 fe0e 	mul.w	lr, r2, lr
    cc54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cc58:	45a6      	cmp	lr, r4
    cc5a:	d914      	bls.n	cc86 <__udivmoddi4+0xaa>
    cc5c:	192c      	adds	r4, r5, r4
    cc5e:	f102 33ff 	add.w	r3, r2, #4294967295
    cc62:	d203      	bcs.n	cc6c <__udivmoddi4+0x90>
    cc64:	45a6      	cmp	lr, r4
    cc66:	d901      	bls.n	cc6c <__udivmoddi4+0x90>
    cc68:	1e93      	subs	r3, r2, #2
    cc6a:	442c      	add	r4, r5
    cc6c:	eba4 040e 	sub.w	r4, r4, lr
    cc70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cc74:	b11e      	cbz	r6, cc7e <__udivmoddi4+0xa2>
    cc76:	40fc      	lsrs	r4, r7
    cc78:	2300      	movs	r3, #0
    cc7a:	6034      	str	r4, [r6, #0]
    cc7c:	6073      	str	r3, [r6, #4]
    cc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc82:	4648      	mov	r0, r9
    cc84:	e7dd      	b.n	cc42 <__udivmoddi4+0x66>
    cc86:	4613      	mov	r3, r2
    cc88:	e7f0      	b.n	cc6c <__udivmoddi4+0x90>
    cc8a:	b902      	cbnz	r2, cc8e <__udivmoddi4+0xb2>
    cc8c:	deff      	udf	#255	; 0xff
    cc8e:	bb87      	cbnz	r7, ccf2 <__udivmoddi4+0x116>
    cc90:	1a83      	subs	r3, r0, r2
    cc92:	2101      	movs	r1, #1
    cc94:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cc98:	b2aa      	uxth	r2, r5
    cc9a:	fbb3 fcfe 	udiv	ip, r3, lr
    cc9e:	0c20      	lsrs	r0, r4, #16
    cca0:	fb0e 331c 	mls	r3, lr, ip, r3
    cca4:	fb0c f802 	mul.w	r8, ip, r2
    cca8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    ccac:	4598      	cmp	r8, r3
    ccae:	d963      	bls.n	cd78 <__udivmoddi4+0x19c>
    ccb0:	18eb      	adds	r3, r5, r3
    ccb2:	f10c 30ff 	add.w	r0, ip, #4294967295
    ccb6:	d204      	bcs.n	ccc2 <__udivmoddi4+0xe6>
    ccb8:	4598      	cmp	r8, r3
    ccba:	d902      	bls.n	ccc2 <__udivmoddi4+0xe6>
    ccbc:	f1ac 0002 	sub.w	r0, ip, #2
    ccc0:	442b      	add	r3, r5
    ccc2:	eba3 0308 	sub.w	r3, r3, r8
    ccc6:	b2a4      	uxth	r4, r4
    ccc8:	fbb3 fcfe 	udiv	ip, r3, lr
    cccc:	fb0e 331c 	mls	r3, lr, ip, r3
    ccd0:	fb0c f202 	mul.w	r2, ip, r2
    ccd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    ccd8:	42a2      	cmp	r2, r4
    ccda:	d94f      	bls.n	cd7c <__udivmoddi4+0x1a0>
    ccdc:	192c      	adds	r4, r5, r4
    ccde:	f10c 33ff 	add.w	r3, ip, #4294967295
    cce2:	d204      	bcs.n	ccee <__udivmoddi4+0x112>
    cce4:	42a2      	cmp	r2, r4
    cce6:	d902      	bls.n	ccee <__udivmoddi4+0x112>
    cce8:	f1ac 0302 	sub.w	r3, ip, #2
    ccec:	442c      	add	r4, r5
    ccee:	1aa4      	subs	r4, r4, r2
    ccf0:	e7be      	b.n	cc70 <__udivmoddi4+0x94>
    ccf2:	f1c7 0c20 	rsb	ip, r7, #32
    ccf6:	fa20 f80c 	lsr.w	r8, r0, ip
    ccfa:	fa00 f307 	lsl.w	r3, r0, r7
    ccfe:	fa24 fc0c 	lsr.w	ip, r4, ip
    cd02:	40bd      	lsls	r5, r7
    cd04:	ea4c 0203 	orr.w	r2, ip, r3
    cd08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cd0c:	b2ab      	uxth	r3, r5
    cd0e:	fbb8 fcfe 	udiv	ip, r8, lr
    cd12:	0c11      	lsrs	r1, r2, #16
    cd14:	fb0e 801c 	mls	r0, lr, ip, r8
    cd18:	fb0c f903 	mul.w	r9, ip, r3
    cd1c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    cd20:	4581      	cmp	r9, r0
    cd22:	fa04 f407 	lsl.w	r4, r4, r7
    cd26:	d923      	bls.n	cd70 <__udivmoddi4+0x194>
    cd28:	1828      	adds	r0, r5, r0
    cd2a:	f10c 31ff 	add.w	r1, ip, #4294967295
    cd2e:	d204      	bcs.n	cd3a <__udivmoddi4+0x15e>
    cd30:	4581      	cmp	r9, r0
    cd32:	d902      	bls.n	cd3a <__udivmoddi4+0x15e>
    cd34:	f1ac 0102 	sub.w	r1, ip, #2
    cd38:	4428      	add	r0, r5
    cd3a:	eba0 0009 	sub.w	r0, r0, r9
    cd3e:	b292      	uxth	r2, r2
    cd40:	fbb0 fcfe 	udiv	ip, r0, lr
    cd44:	fb0e 001c 	mls	r0, lr, ip, r0
    cd48:	fb0c f803 	mul.w	r8, ip, r3
    cd4c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    cd50:	4598      	cmp	r8, r3
    cd52:	d90f      	bls.n	cd74 <__udivmoddi4+0x198>
    cd54:	18eb      	adds	r3, r5, r3
    cd56:	f10c 32ff 	add.w	r2, ip, #4294967295
    cd5a:	d204      	bcs.n	cd66 <__udivmoddi4+0x18a>
    cd5c:	4598      	cmp	r8, r3
    cd5e:	d902      	bls.n	cd66 <__udivmoddi4+0x18a>
    cd60:	f1ac 0202 	sub.w	r2, ip, #2
    cd64:	442b      	add	r3, r5
    cd66:	eba3 0308 	sub.w	r3, r3, r8
    cd6a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    cd6e:	e791      	b.n	cc94 <__udivmoddi4+0xb8>
    cd70:	4661      	mov	r1, ip
    cd72:	e7e2      	b.n	cd3a <__udivmoddi4+0x15e>
    cd74:	4662      	mov	r2, ip
    cd76:	e7f6      	b.n	cd66 <__udivmoddi4+0x18a>
    cd78:	4660      	mov	r0, ip
    cd7a:	e7a2      	b.n	ccc2 <__udivmoddi4+0xe6>
    cd7c:	4663      	mov	r3, ip
    cd7e:	e7b6      	b.n	ccee <__udivmoddi4+0x112>
    cd80:	4283      	cmp	r3, r0
    cd82:	d905      	bls.n	cd90 <__udivmoddi4+0x1b4>
    cd84:	b10e      	cbz	r6, cd8a <__udivmoddi4+0x1ae>
    cd86:	e9c6 7000 	strd	r7, r0, [r6]
    cd8a:	2100      	movs	r1, #0
    cd8c:	4608      	mov	r0, r1
    cd8e:	e776      	b.n	cc7e <__udivmoddi4+0xa2>
    cd90:	fab3 f183 	clz	r1, r3
    cd94:	b981      	cbnz	r1, cdb8 <__udivmoddi4+0x1dc>
    cd96:	4283      	cmp	r3, r0
    cd98:	d301      	bcc.n	cd9e <__udivmoddi4+0x1c2>
    cd9a:	42ba      	cmp	r2, r7
    cd9c:	d80a      	bhi.n	cdb4 <__udivmoddi4+0x1d8>
    cd9e:	1abc      	subs	r4, r7, r2
    cda0:	eb60 0303 	sbc.w	r3, r0, r3
    cda4:	2001      	movs	r0, #1
    cda6:	469c      	mov	ip, r3
    cda8:	2e00      	cmp	r6, #0
    cdaa:	d068      	beq.n	ce7e <__udivmoddi4+0x2a2>
    cdac:	e9c6 4c00 	strd	r4, ip, [r6]
    cdb0:	2100      	movs	r1, #0
    cdb2:	e764      	b.n	cc7e <__udivmoddi4+0xa2>
    cdb4:	4608      	mov	r0, r1
    cdb6:	e7f7      	b.n	cda8 <__udivmoddi4+0x1cc>
    cdb8:	f1c1 0c20 	rsb	ip, r1, #32
    cdbc:	408b      	lsls	r3, r1
    cdbe:	fa22 f40c 	lsr.w	r4, r2, ip
    cdc2:	431c      	orrs	r4, r3
    cdc4:	fa02 f501 	lsl.w	r5, r2, r1
    cdc8:	fa00 f301 	lsl.w	r3, r0, r1
    cdcc:	fa27 f20c 	lsr.w	r2, r7, ip
    cdd0:	fa20 fb0c 	lsr.w	fp, r0, ip
    cdd4:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cdd8:	4313      	orrs	r3, r2
    cdda:	fbbb f8f9 	udiv	r8, fp, r9
    cdde:	fa1f fe84 	uxth.w	lr, r4
    cde2:	fb09 bb18 	mls	fp, r9, r8, fp
    cde6:	0c1a      	lsrs	r2, r3, #16
    cde8:	fb08 fa0e 	mul.w	sl, r8, lr
    cdec:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    cdf0:	4592      	cmp	sl, r2
    cdf2:	fa07 f701 	lsl.w	r7, r7, r1
    cdf6:	d93e      	bls.n	ce76 <__udivmoddi4+0x29a>
    cdf8:	18a2      	adds	r2, r4, r2
    cdfa:	f108 30ff 	add.w	r0, r8, #4294967295
    cdfe:	d204      	bcs.n	ce0a <__udivmoddi4+0x22e>
    ce00:	4592      	cmp	sl, r2
    ce02:	d902      	bls.n	ce0a <__udivmoddi4+0x22e>
    ce04:	f1a8 0002 	sub.w	r0, r8, #2
    ce08:	4422      	add	r2, r4
    ce0a:	eba2 020a 	sub.w	r2, r2, sl
    ce0e:	b29b      	uxth	r3, r3
    ce10:	fbb2 f8f9 	udiv	r8, r2, r9
    ce14:	fb09 2218 	mls	r2, r9, r8, r2
    ce18:	fb08 fe0e 	mul.w	lr, r8, lr
    ce1c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    ce20:	4596      	cmp	lr, r2
    ce22:	d92a      	bls.n	ce7a <__udivmoddi4+0x29e>
    ce24:	18a2      	adds	r2, r4, r2
    ce26:	f108 33ff 	add.w	r3, r8, #4294967295
    ce2a:	d204      	bcs.n	ce36 <__udivmoddi4+0x25a>
    ce2c:	4596      	cmp	lr, r2
    ce2e:	d902      	bls.n	ce36 <__udivmoddi4+0x25a>
    ce30:	f1a8 0302 	sub.w	r3, r8, #2
    ce34:	4422      	add	r2, r4
    ce36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ce3a:	fba0 9305 	umull	r9, r3, r0, r5
    ce3e:	eba2 020e 	sub.w	r2, r2, lr
    ce42:	429a      	cmp	r2, r3
    ce44:	46ce      	mov	lr, r9
    ce46:	4698      	mov	r8, r3
    ce48:	d302      	bcc.n	ce50 <__udivmoddi4+0x274>
    ce4a:	d106      	bne.n	ce5a <__udivmoddi4+0x27e>
    ce4c:	454f      	cmp	r7, r9
    ce4e:	d204      	bcs.n	ce5a <__udivmoddi4+0x27e>
    ce50:	ebb9 0e05 	subs.w	lr, r9, r5
    ce54:	eb63 0804 	sbc.w	r8, r3, r4
    ce58:	3801      	subs	r0, #1
    ce5a:	b186      	cbz	r6, ce7e <__udivmoddi4+0x2a2>
    ce5c:	ebb7 030e 	subs.w	r3, r7, lr
    ce60:	eb62 0708 	sbc.w	r7, r2, r8
    ce64:	fa07 fc0c 	lsl.w	ip, r7, ip
    ce68:	40cb      	lsrs	r3, r1
    ce6a:	ea4c 0303 	orr.w	r3, ip, r3
    ce6e:	40cf      	lsrs	r7, r1
    ce70:	e9c6 3700 	strd	r3, r7, [r6]
    ce74:	e79c      	b.n	cdb0 <__udivmoddi4+0x1d4>
    ce76:	4640      	mov	r0, r8
    ce78:	e7c7      	b.n	ce0a <__udivmoddi4+0x22e>
    ce7a:	4643      	mov	r3, r8
    ce7c:	e7db      	b.n	ce36 <__udivmoddi4+0x25a>
    ce7e:	4631      	mov	r1, r6
    ce80:	e6fd      	b.n	cc7e <__udivmoddi4+0xa2>
    ce82:	2804      	cmp	r0, #4
    ce84:	d202      	bcs.n	ce8c <__udivmoddi4+0x2b0>
    ce86:	f04f 0028 	mov.w	r0, #40	; 0x28
    ce8a:	4770      	bx	lr
    ce8c:	d102      	bne.n	ce94 <__udivmoddi4+0x2b8>
    ce8e:	f04f 0010 	mov.w	r0, #16
    ce92:	4770      	bx	lr
    ce94:	f04f 0000 	mov.w	r0, #0
    ce98:	4770      	bx	lr
    ce9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce9e:	000d      	movs	r5, r1
    cea0:	4604      	mov	r4, r0
    cea2:	f04f 0602 	mov.w	r6, #2
    cea6:	f04f 0701 	mov.w	r7, #1
    ceaa:	d008      	beq.n	cebe <__udivmoddi4+0x2e2>
    ceac:	7828      	ldrb	r0, [r5, #0]
    ceae:	b1d0      	cbz	r0, cee6 <__udivmoddi4+0x30a>
    ceb0:	2801      	cmp	r0, #1
    ceb2:	d007      	beq.n	cec4 <__udivmoddi4+0x2e8>
    ceb4:	2802      	cmp	r0, #2
    ceb6:	d014      	beq.n	cee2 <__udivmoddi4+0x306>
    ceb8:	2803      	cmp	r0, #3
    ceba:	d13e      	bne.n	cf3a <__udivmoddi4+0x35e>
    cebc:	e016      	b.n	ceec <__udivmoddi4+0x310>
    cebe:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    cec2:	e00e      	b.n	cee2 <__udivmoddi4+0x306>
    cec4:	6868      	ldr	r0, [r5, #4]
    cec6:	28c8      	cmp	r0, #200	; 0xc8
    cec8:	d303      	bcc.n	ced2 <__udivmoddi4+0x2f6>
    ceca:	2103      	movs	r1, #3
    cecc:	f7f4 fd9c 	bl	1a08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ced0:	b108      	cbz	r0, ced6 <__udivmoddi4+0x2fa>
    ced2:	2600      	movs	r6, #0
    ced4:	e007      	b.n	cee6 <__udivmoddi4+0x30a>
    ced6:	4620      	mov	r0, r4
    ced8:	6869      	ldr	r1, [r5, #4]
    ceda:	f000 f943 	bl	d164 <__udivmoddi4+0x588>
    cede:	2601      	movs	r6, #1
    cee0:	e001      	b.n	cee6 <__udivmoddi4+0x30a>
    cee2:	f7f3 fced 	bl	8c0 <CONFIG_BT_RX_STACK_SIZE+0x28>
    cee6:	4630      	mov	r0, r6
    cee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ceec:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    cef0:	2800      	cmp	r0, #0
    cef2:	d1f6      	bne.n	cee2 <__udivmoddi4+0x306>
    cef4:	6868      	ldr	r0, [r5, #4]
    cef6:	f7f3 fcb5 	bl	864 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    cefa:	b1f0      	cbz	r0, cf3a <__udivmoddi4+0x35e>
    cefc:	6869      	ldr	r1, [r5, #4]
    cefe:	7808      	ldrb	r0, [r1, #0]
    cf00:	b130      	cbz	r0, cf10 <__udivmoddi4+0x334>
    cf02:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cf06:	2805      	cmp	r0, #5
    cf08:	d008      	beq.n	cf1c <__udivmoddi4+0x340>
    cf0a:	f44f 71be 	mov.w	r1, #380	; 0x17c
    cf0e:	e011      	b.n	cf34 <__udivmoddi4+0x358>
    cf10:	4620      	mov	r0, r4
    cf12:	f000 f92f 	bl	d174 <__udivmoddi4+0x598>
    cf16:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    cf1a:	e7e2      	b.n	cee2 <__udivmoddi4+0x306>
    cf1c:	4620      	mov	r0, r4
    cf1e:	f000 f942 	bl	d1a6 <__udivmoddi4+0x5ca>
    cf22:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    cf26:	4621      	mov	r1, r4
    cf28:	f000 f80a 	bl	cf40 <__udivmoddi4+0x364>
    cf2c:	2800      	cmp	r0, #0
    cf2e:	d1d8      	bne.n	cee2 <__udivmoddi4+0x306>
    cf30:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    cf34:	206a      	movs	r0, #106	; 0x6a
    cf36:	f7f7 f821 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cf3a:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    cf3e:	e7d0      	b.n	cee2 <__udivmoddi4+0x306>
    cf40:	f7f4 bf90 	b.w	1e64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    cf44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf48:	460d      	mov	r5, r1
    cf4a:	0004      	movs	r4, r0
    cf4c:	d00c      	beq.n	cf68 <__udivmoddi4+0x38c>
    cf4e:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    cf52:	2700      	movs	r7, #0
    cf54:	2002      	movs	r0, #2
    cf56:	2d09      	cmp	r5, #9
    cf58:	d270      	bcs.n	d03c <__udivmoddi4+0x460>
    cf5a:	e8df f005 	tbb	[pc, r5]
    cf5e:	1108      	.short	0x1108
    cf60:	70653535 	.word	0x70653535
    cf64:	0093a588 	.word	0x0093a588
    cf68:	f44f 71cb 	mov.w	r1, #406	; 0x196
    cf6c:	e0f7      	b.n	d15e <__udivmoddi4+0x582>
    cf6e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cf72:	2804      	cmp	r0, #4
    cf74:	d07a      	beq.n	d06c <__udivmoddi4+0x490>
    cf76:	2803      	cmp	r0, #3
    cf78:	d0fc      	beq.n	cf74 <__udivmoddi4+0x398>
    cf7a:	f240 11a1 	movw	r1, #417	; 0x1a1
    cf7e:	e0ee      	b.n	d15e <__udivmoddi4+0x582>
    cf80:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    cf84:	2804      	cmp	r0, #4
    cf86:	d004      	beq.n	cf92 <__udivmoddi4+0x3b6>
    cf88:	2803      	cmp	r0, #3
    cf8a:	d002      	beq.n	cf92 <__udivmoddi4+0x3b6>
    cf8c:	f240 11a5 	movw	r1, #421	; 0x1a5
    cf90:	e0e5      	b.n	d15e <__udivmoddi4+0x582>
    cf92:	2005      	movs	r0, #5
    cf94:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    cf98:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    cf9c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    cfa0:	bbb0      	cbnz	r0, d010 <__udivmoddi4+0x434>
    cfa2:	2100      	movs	r1, #0
    cfa4:	4620      	mov	r0, r4
    cfa6:	f000 f8dd 	bl	d164 <__udivmoddi4+0x588>
    cfaa:	7820      	ldrb	r0, [r4, #0]
    cfac:	2801      	cmp	r0, #1
    cfae:	d006      	beq.n	cfbe <__udivmoddi4+0x3e2>
    cfb0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    cfb4:	e9c4 0106 	strd	r0, r1, [r4, #24]
    cfb8:	2100      	movs	r1, #0
    cfba:	6a22      	ldr	r2, [r4, #32]
    cfbc:	e048      	b.n	d050 <__udivmoddi4+0x474>
    cfbe:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    cfc2:	f7f4 fe5b 	bl	1c7c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    cfc6:	e7f5      	b.n	cfb4 <__udivmoddi4+0x3d8>
    cfc8:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    cfcc:	2904      	cmp	r1, #4
    cfce:	d004      	beq.n	cfda <__udivmoddi4+0x3fe>
    cfd0:	2903      	cmp	r1, #3
    cfd2:	d002      	beq.n	cfda <__udivmoddi4+0x3fe>
    cfd4:	f240 11c3 	movw	r1, #451	; 0x1c3
    cfd8:	e0c1      	b.n	d15e <__udivmoddi4+0x582>
    cfda:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    cfde:	b122      	cbz	r2, cfea <__udivmoddi4+0x40e>
    cfe0:	4621      	mov	r1, r4
    cfe2:	4630      	mov	r0, r6
    cfe4:	f000 f8fe 	bl	d1e4 <__udivmoddi4+0x608>
    cfe8:	e0b1      	b.n	d14e <__udivmoddi4+0x572>
    cfea:	2904      	cmp	r1, #4
    cfec:	d000      	beq.n	cff0 <__udivmoddi4+0x414>
    cfee:	2001      	movs	r0, #1
    cff0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    cff4:	6a22      	ldr	r2, [r4, #32]
    cff6:	2d02      	cmp	r5, #2
    cff8:	d00b      	beq.n	d012 <__udivmoddi4+0x436>
    cffa:	2106      	movs	r1, #6
    cffc:	4630      	mov	r0, r6
    cffe:	4790      	blx	r2
    d000:	2800      	cmp	r0, #0
    d002:	d06d      	beq.n	d0e0 <__udivmoddi4+0x504>
    d004:	7800      	ldrb	r0, [r0, #0]
    d006:	2800      	cmp	r0, #0
    d008:	d06a      	beq.n	d0e0 <__udivmoddi4+0x504>
    d00a:	f240 11dd 	movw	r1, #477	; 0x1dd
    d00e:	e0a6      	b.n	d15e <__udivmoddi4+0x582>
    d010:	e034      	b.n	d07c <__udivmoddi4+0x4a0>
    d012:	2105      	movs	r1, #5
    d014:	4630      	mov	r0, r6
    d016:	4790      	blx	r2
    d018:	2800      	cmp	r0, #0
    d01a:	d07c      	beq.n	d116 <__udivmoddi4+0x53a>
    d01c:	7800      	ldrb	r0, [r0, #0]
    d01e:	2800      	cmp	r0, #0
    d020:	d079      	beq.n	d116 <__udivmoddi4+0x53a>
    d022:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    d026:	e09a      	b.n	d15e <__udivmoddi4+0x582>
    d028:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d02c:	2805      	cmp	r0, #5
    d02e:	d002      	beq.n	d036 <__udivmoddi4+0x45a>
    d030:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    d034:	e093      	b.n	d15e <__udivmoddi4+0x582>
    d036:	2102      	movs	r1, #2
    d038:	6a22      	ldr	r2, [r4, #32]
    d03a:	e009      	b.n	d050 <__udivmoddi4+0x474>
    d03c:	e07e      	b.n	d13c <__udivmoddi4+0x560>
    d03e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d042:	2805      	cmp	r0, #5
    d044:	d002      	beq.n	d04c <__udivmoddi4+0x470>
    d046:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    d04a:	e088      	b.n	d15e <__udivmoddi4+0x582>
    d04c:	6a22      	ldr	r2, [r4, #32]
    d04e:	2101      	movs	r1, #1
    d050:	4630      	mov	r0, r6
    d052:	4790      	blx	r2
    d054:	4601      	mov	r1, r0
    d056:	4620      	mov	r0, r4
    d058:	f7ff ff1f 	bl	ce9a <__udivmoddi4+0x2be>
    d05c:	2802      	cmp	r0, #2
    d05e:	d076      	beq.n	d14e <__udivmoddi4+0x572>
    d060:	b3e8      	cbz	r0, d0de <__udivmoddi4+0x502>
    d062:	2801      	cmp	r0, #1
    d064:	d06d      	beq.n	d142 <__udivmoddi4+0x566>
    d066:	f240 212a 	movw	r1, #554	; 0x22a
    d06a:	e078      	b.n	d15e <__udivmoddi4+0x582>
    d06c:	e071      	b.n	d152 <__udivmoddi4+0x576>
    d06e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d072:	2805      	cmp	r0, #5
    d074:	d002      	beq.n	d07c <__udivmoddi4+0x4a0>
    d076:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    d07a:	e070      	b.n	d15e <__udivmoddi4+0x582>
    d07c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d080:	f7f3 bc1e 	b.w	8c0 <CONFIG_BT_RX_STACK_SIZE+0x28>
    d084:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d088:	2805      	cmp	r0, #5
    d08a:	d002      	beq.n	d092 <__udivmoddi4+0x4b6>
    d08c:	f240 11f5 	movw	r1, #501	; 0x1f5
    d090:	e065      	b.n	d15e <__udivmoddi4+0x582>
    d092:	6a22      	ldr	r2, [r4, #32]
    d094:	210a      	movs	r1, #10
    d096:	4630      	mov	r0, r6
    d098:	4790      	blx	r2
    d09a:	4601      	mov	r1, r0
    d09c:	4620      	mov	r0, r4
    d09e:	f7ff fefc 	bl	ce9a <__udivmoddi4+0x2be>
    d0a2:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    d0a6:	e05a      	b.n	d15e <__udivmoddi4+0x582>
    d0a8:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    d0ac:	2905      	cmp	r1, #5
    d0ae:	d007      	beq.n	d0c0 <__udivmoddi4+0x4e4>
    d0b0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    d0b4:	b10a      	cbz	r2, d0ba <__udivmoddi4+0x4de>
    d0b6:	2903      	cmp	r1, #3
    d0b8:	d002      	beq.n	d0c0 <__udivmoddi4+0x4e4>
    d0ba:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    d0be:	e04e      	b.n	d15e <__udivmoddi4+0x582>
    d0c0:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    d0c4:	b129      	cbz	r1, d0d2 <__udivmoddi4+0x4f6>
    d0c6:	4621      	mov	r1, r4
    d0c8:	4630      	mov	r0, r6
    d0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d0ce:	f000 b889 	b.w	d1e4 <__udivmoddi4+0x608>
    d0d2:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
    d0d6:	b199      	cbz	r1, d100 <__udivmoddi4+0x524>
    d0d8:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d0dc:	e001      	b.n	d0e2 <__udivmoddi4+0x506>
    d0de:	e033      	b.n	d148 <__udivmoddi4+0x56c>
    d0e0:	e035      	b.n	d14e <__udivmoddi4+0x572>
    d0e2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d0e6:	6a22      	ldr	r2, [r4, #32]
    d0e8:	2108      	movs	r1, #8
    d0ea:	4630      	mov	r0, r6
    d0ec:	4790      	blx	r2
    d0ee:	2800      	cmp	r0, #0
    d0f0:	d011      	beq.n	d116 <__udivmoddi4+0x53a>
    d0f2:	7800      	ldrb	r0, [r0, #0]
    d0f4:	2800      	cmp	r0, #0
    d0f6:	d00e      	beq.n	d116 <__udivmoddi4+0x53a>
    d0f8:	f44f 7102 	mov.w	r1, #520	; 0x208
    d0fc:	e02f      	b.n	d15e <__udivmoddi4+0x582>
    d0fe:	e00a      	b.n	d116 <__udivmoddi4+0x53a>
    d100:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    d104:	b161      	cbz	r1, d120 <__udivmoddi4+0x544>
    d106:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d10a:	4621      	mov	r1, r4
    d10c:	f7ff ff18 	bl	cf40 <__udivmoddi4+0x364>
    d110:	b118      	cbz	r0, d11a <__udivmoddi4+0x53e>
    d112:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    d116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d11a:	f44f 7103 	mov.w	r1, #524	; 0x20c
    d11e:	e01e      	b.n	d15e <__udivmoddi4+0x582>
    d120:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d124:	6a22      	ldr	r2, [r4, #32]
    d126:	2107      	movs	r1, #7
    d128:	4630      	mov	r0, r6
    d12a:	4790      	blx	r2
    d12c:	2800      	cmp	r0, #0
    d12e:	d0f2      	beq.n	d116 <__udivmoddi4+0x53a>
    d130:	7800      	ldrb	r0, [r0, #0]
    d132:	2800      	cmp	r0, #0
    d134:	d0ef      	beq.n	d116 <__udivmoddi4+0x53a>
    d136:	f44f 7105 	mov.w	r1, #532	; 0x214
    d13a:	e010      	b.n	d15e <__udivmoddi4+0x582>
    d13c:	f240 2119 	movw	r1, #537	; 0x219
    d140:	e00d      	b.n	d15e <__udivmoddi4+0x582>
    d142:	2104      	movs	r1, #4
    d144:	6a22      	ldr	r2, [r4, #32]
    d146:	e783      	b.n	d050 <__udivmoddi4+0x474>
    d148:	2103      	movs	r1, #3
    d14a:	6a22      	ldr	r2, [r4, #32]
    d14c:	e780      	b.n	d050 <__udivmoddi4+0x474>
    d14e:	2d00      	cmp	r5, #0
    d150:	d1e1      	bne.n	d116 <__udivmoddi4+0x53a>
    d152:	f000 f8fd 	bl	d350 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    d156:	2800      	cmp	r0, #0
    d158:	d0dd      	beq.n	d116 <__udivmoddi4+0x53a>
    d15a:	f240 2133 	movw	r1, #563	; 0x233
    d15e:	206a      	movs	r0, #106	; 0x6a
    d160:	f7f6 ff0c 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d164:	4602      	mov	r2, r0
    d166:	7803      	ldrb	r3, [r0, #0]
    d168:	6840      	ldr	r0, [r0, #4]
    d16a:	4408      	add	r0, r1
    d16c:	6050      	str	r0, [r2, #4]
    d16e:	3859      	subs	r0, #89	; 0x59
    d170:	f7f5 bd7a 	b.w	2c68 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    d174:	2201      	movs	r2, #1
    d176:	7002      	strb	r2, [r0, #0]
    d178:	2200      	movs	r2, #0
    d17a:	72c2      	strb	r2, [r0, #11]
    d17c:	790a      	ldrb	r2, [r1, #4]
    d17e:	b172      	cbz	r2, d19e <__udivmoddi4+0x5c2>
    d180:	2200      	movs	r2, #0
    d182:	8102      	strh	r2, [r0, #8]
    d184:	794a      	ldrb	r2, [r1, #5]
    d186:	b162      	cbz	r2, d1a2 <__udivmoddi4+0x5c6>
    d188:	2203      	movs	r2, #3
    d18a:	7282      	strb	r2, [r0, #10]
    d18c:	688a      	ldr	r2, [r1, #8]
    d18e:	326a      	adds	r2, #106	; 0x6a
    d190:	6042      	str	r2, [r0, #4]
    d192:	68c9      	ldr	r1, [r1, #12]
    d194:	6101      	str	r1, [r0, #16]
    d196:	2103      	movs	r1, #3
    d198:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d19c:	4770      	bx	lr
    d19e:	222b      	movs	r2, #43	; 0x2b
    d1a0:	e7ef      	b.n	d182 <__udivmoddi4+0x5a6>
    d1a2:	2202      	movs	r2, #2
    d1a4:	e7f1      	b.n	d18a <__udivmoddi4+0x5ae>
    d1a6:	b510      	push	{r4, lr}
    d1a8:	2200      	movs	r2, #0
    d1aa:	7002      	strb	r2, [r0, #0]
    d1ac:	72c2      	strb	r2, [r0, #11]
    d1ae:	790a      	ldrb	r2, [r1, #4]
    d1b0:	b1a2      	cbz	r2, d1dc <__udivmoddi4+0x600>
    d1b2:	2200      	movs	r2, #0
    d1b4:	8102      	strh	r2, [r0, #8]
    d1b6:	794a      	ldrb	r2, [r1, #5]
    d1b8:	b192      	cbz	r2, d1e0 <__udivmoddi4+0x604>
    d1ba:	2203      	movs	r2, #3
    d1bc:	7282      	strb	r2, [r0, #10]
    d1be:	68ca      	ldr	r2, [r1, #12]
    d1c0:	326a      	adds	r2, #106	; 0x6a
    d1c2:	6042      	str	r2, [r0, #4]
    d1c4:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    d1c8:	6889      	ldr	r1, [r1, #8]
    d1ca:	17cb      	asrs	r3, r1, #31
    d1cc:	1861      	adds	r1, r4, r1
    d1ce:	415a      	adcs	r2, r3
    d1d0:	e9c0 1204 	strd	r1, r2, [r0, #16]
    d1d4:	2104      	movs	r1, #4
    d1d6:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d1da:	bd10      	pop	{r4, pc}
    d1dc:	222b      	movs	r2, #43	; 0x2b
    d1de:	e7e9      	b.n	d1b4 <__udivmoddi4+0x5d8>
    d1e0:	2202      	movs	r2, #2
    d1e2:	e7eb      	b.n	d1bc <__udivmoddi4+0x5e0>
    d1e4:	b570      	push	{r4, r5, r6, lr}
    d1e6:	4605      	mov	r5, r0
    d1e8:	460c      	mov	r4, r1
    d1ea:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    d1ee:	f7f5 fb09 	bl	2804 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    d1f2:	b178      	cbz	r0, d214 <__udivmoddi4+0x638>
    d1f4:	4620      	mov	r0, r4
    d1f6:	f000 f810 	bl	d21a <__udivmoddi4+0x63e>
    d1fa:	6a22      	ldr	r2, [r4, #32]
    d1fc:	2109      	movs	r1, #9
    d1fe:	4628      	mov	r0, r5
    d200:	4790      	blx	r2
    d202:	2800      	cmp	r0, #0
    d204:	d008      	beq.n	d218 <__udivmoddi4+0x63c>
    d206:	7800      	ldrb	r0, [r0, #0]
    d208:	2800      	cmp	r0, #0
    d20a:	d005      	beq.n	d218 <__udivmoddi4+0x63c>
    d20c:	21dc      	movs	r1, #220	; 0xdc
    d20e:	206a      	movs	r0, #106	; 0x6a
    d210:	f7f6 feb4 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d214:	21d8      	movs	r1, #216	; 0xd8
    d216:	e7fa      	b.n	d20e <__udivmoddi4+0x632>
    d218:	bd70      	pop	{r4, r5, r6, pc}
    d21a:	2100      	movs	r1, #0
    d21c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d220:	f800 1f24 	strb.w	r1, [r0, #36]!
    d224:	7041      	strb	r1, [r0, #1]
    d226:	4770      	bx	lr

0000d228 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    d228:	b570      	push	{r4, r5, r6, lr}
    d22a:	f7f3 fba5 	bl	978 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d22e:	4605      	mov	r5, r0
    d230:	2400      	movs	r4, #0
    d232:	e006      	b.n	d242 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    d234:	4620      	mov	r0, r4
    d236:	f7f3 fba5 	bl	984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d23a:	f7ff ffee 	bl	d21a <__udivmoddi4+0x63e>
    d23e:	1c64      	adds	r4, r4, #1
    d240:	b2e4      	uxtb	r4, r4
    d242:	42ac      	cmp	r4, r5
    d244:	d3f6      	bcc.n	d234 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    d246:	bd70      	pop	{r4, r5, r6, pc}

0000d248 <mpsl_timeslot_request>:
    d248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d24c:	460d      	mov	r5, r1
    d24e:	f7f3 fb99 	bl	984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d252:	0004      	movs	r4, r0
    d254:	d008      	beq.n	d268 <mpsl_timeslot_request+0x20>
    d256:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d25a:	f06f 0622 	mvn.w	r6, #34	; 0x22
    d25e:	2801      	cmp	r0, #1
    d260:	d006      	beq.n	d270 <mpsl_timeslot_request+0x28>
    d262:	2802      	cmp	r0, #2
    d264:	d111      	bne.n	d28a <mpsl_timeslot_request+0x42>
    d266:	e003      	b.n	d270 <mpsl_timeslot_request+0x28>
    d268:	f06f 0001 	mvn.w	r0, #1
    d26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d270:	f06f 0715 	mvn.w	r7, #21
    d274:	b15d      	cbz	r5, d28e <mpsl_timeslot_request+0x46>
    d276:	4628      	mov	r0, r5
    d278:	f7f3 faf4 	bl	864 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    d27c:	b138      	cbz	r0, d28e <mpsl_timeslot_request+0x46>
    d27e:	7828      	ldrb	r0, [r5, #0]
    d280:	b138      	cbz	r0, d292 <mpsl_timeslot_request+0x4a>
    d282:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d286:	2802      	cmp	r0, #2
    d288:	d008      	beq.n	d29c <mpsl_timeslot_request+0x54>
    d28a:	4630      	mov	r0, r6
    d28c:	e7ee      	b.n	d26c <mpsl_timeslot_request+0x24>
    d28e:	4638      	mov	r0, r7
    d290:	e7ec      	b.n	d26c <mpsl_timeslot_request+0x24>
    d292:	4629      	mov	r1, r5
    d294:	4620      	mov	r0, r4
    d296:	f7ff ff6d 	bl	d174 <__udivmoddi4+0x598>
    d29a:	e003      	b.n	d2a4 <mpsl_timeslot_request+0x5c>
    d29c:	4629      	mov	r1, r5
    d29e:	4620      	mov	r0, r4
    d2a0:	f7ff ff81 	bl	d1a6 <__udivmoddi4+0x5ca>
    d2a4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d2a8:	4621      	mov	r1, r4
    d2aa:	f7ff fe49 	bl	cf40 <__udivmoddi4+0x364>
    d2ae:	b108      	cbz	r0, d2b4 <mpsl_timeslot_request+0x6c>
    d2b0:	2000      	movs	r0, #0
    d2b2:	e7db      	b.n	d26c <mpsl_timeslot_request+0x24>
    d2b4:	f240 21b1 	movw	r1, #689	; 0x2b1
    d2b8:	206a      	movs	r0, #106	; 0x6a
    d2ba:	f7f6 fe5f 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000d2be <mpsl_timeslot_session_close>:
    d2be:	b510      	push	{r4, lr}
    d2c0:	4604      	mov	r4, r0
    d2c2:	f7f3 fb5f 	bl	984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d2c6:	0001      	movs	r1, r0
    d2c8:	d005      	beq.n	d2d6 <mpsl_timeslot_session_close+0x18>
    d2ca:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    d2ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
    d2d2:	b978      	cbnz	r0, d2f4 <mpsl_timeslot_session_close+0x36>
    d2d4:	e002      	b.n	d2dc <mpsl_timeslot_session_close+0x1e>
    d2d6:	f06f 0001 	mvn.w	r0, #1
    d2da:	bd10      	pop	{r4, pc}
    d2dc:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    d2e0:	b140      	cbz	r0, d2f4 <mpsl_timeslot_session_close+0x36>
    d2e2:	2802      	cmp	r0, #2
    d2e4:	d008      	beq.n	d2f8 <mpsl_timeslot_session_close+0x3a>
    d2e6:	2801      	cmp	r0, #1
    d2e8:	d006      	beq.n	d2f8 <mpsl_timeslot_session_close+0x3a>
    d2ea:	2001      	movs	r0, #1
    d2ec:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    d2f0:	2000      	movs	r0, #0
    d2f2:	bd10      	pop	{r4, pc}
    d2f4:	4610      	mov	r0, r2
    d2f6:	bd10      	pop	{r4, pc}
    d2f8:	4620      	mov	r0, r4
    d2fa:	f7ff ff73 	bl	d1e4 <__udivmoddi4+0x608>
    d2fe:	e7f7      	b.n	d2f0 <mpsl_timeslot_session_close+0x32>

0000d300 <mpsl_timeslot_session_count_set>:
    d300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d304:	460e      	mov	r6, r1
    d306:	4607      	mov	r7, r0
    d308:	f7f3 fb36 	bl	978 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d30c:	4605      	mov	r5, r0
    d30e:	2400      	movs	r4, #0
    d310:	e00b      	b.n	d32a <mpsl_timeslot_session_count_set+0x2a>
    d312:	4620      	mov	r0, r4
    d314:	f7f3 fb36 	bl	984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d318:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    d31c:	b118      	cbz	r0, d326 <mpsl_timeslot_session_count_set+0x26>
    d31e:	f04f 30ff 	mov.w	r0, #4294967295
    d322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d326:	1c64      	adds	r4, r4, #1
    d328:	b2e4      	uxtb	r4, r4
    d32a:	42ac      	cmp	r4, r5
    d32c:	d3f1      	bcc.n	d312 <mpsl_timeslot_session_count_set+0x12>
    d32e:	2e08      	cmp	r6, #8
    d330:	d902      	bls.n	d338 <mpsl_timeslot_session_count_set+0x38>
    d332:	f06f 0015 	mvn.w	r0, #21
    d336:	e7f4      	b.n	d322 <mpsl_timeslot_session_count_set+0x22>
    d338:	b117      	cbz	r7, d340 <mpsl_timeslot_session_count_set+0x40>
    d33a:	4631      	mov	r1, r6
    d33c:	4638      	mov	r0, r7
    d33e:	e001      	b.n	d344 <mpsl_timeslot_session_count_set+0x44>
    d340:	2100      	movs	r1, #0
    d342:	4608      	mov	r0, r1
    d344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d348:	f7f3 bb02 	b.w	950 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000d34c <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    d34c:	f7f5 befc 	b.w	3148 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000d350 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    d350:	b510      	push	{r4, lr}
    d352:	2000      	movs	r0, #0
    d354:	f7f6 fa1e 	bl	3794 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    d358:	6800      	ldr	r0, [r0, #0]
    d35a:	2800      	cmp	r0, #0
    d35c:	bf18      	it	ne
    d35e:	2001      	movne	r0, #1
    d360:	bd10      	pop	{r4, pc}

0000d362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    d362:	0a41      	lsrs	r1, r0, #9
    d364:	f643 5209 	movw	r2, #15625	; 0x3d09
    d368:	4351      	muls	r1, r2
    d36a:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d36e:	fb10 f002 	smulbb	r0, r0, r2
    d372:	f500 7080 	add.w	r0, r0, #256	; 0x100
    d376:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    d37a:	4770      	bx	lr
    d37c:	2800      	cmp	r0, #0
    d37e:	db09      	blt.n	d394 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    d380:	f000 021f 	and.w	r2, r0, #31
    d384:	2101      	movs	r1, #1
    d386:	4091      	lsls	r1, r2
    d388:	0940      	lsrs	r0, r0, #5
    d38a:	0080      	lsls	r0, r0, #2
    d38c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d390:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d394:	4770      	bx	lr
    d396:	2800      	cmp	r0, #0
    d398:	db0d      	blt.n	d3b6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    d39a:	f000 021f 	and.w	r2, r0, #31
    d39e:	2101      	movs	r1, #1
    d3a0:	4091      	lsls	r1, r2
    d3a2:	0940      	lsrs	r0, r0, #5
    d3a4:	0080      	lsls	r0, r0, #2
    d3a6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d3aa:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d3ae:	f3bf 8f4f 	dsb	sy
    d3b2:	f3bf 8f6f 	isb	sy
    d3b6:	4770      	bx	lr

0000d3b8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    d3b8:	b570      	push	{r4, r5, r6, lr}
    d3ba:	4602      	mov	r2, r0
    d3bc:	2000      	movs	r0, #0
    d3be:	2900      	cmp	r1, #0
    d3c0:	d01d      	beq.n	d3fe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    d3c2:	fba2 0101 	umull	r0, r1, r2, r1
    d3c6:	0a40      	lsrs	r0, r0, #9
    d3c8:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    d3cc:	0a49      	lsrs	r1, r1, #9
    d3ce:	1c40      	adds	r0, r0, #1
    d3d0:	f141 0100 	adc.w	r1, r1, #0
    d3d4:	f240 72a1 	movw	r2, #1953	; 0x7a1
    d3d8:	1883      	adds	r3, r0, r2
    d3da:	f141 0100 	adc.w	r1, r1, #0
    d3de:	1c5b      	adds	r3, r3, #1
    d3e0:	f141 0400 	adc.w	r4, r1, #0
    d3e4:	2100      	movs	r1, #0
    d3e6:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    d3ea:	41a1      	sbcs	r1, r4
    d3ec:	d203      	bcs.n	d3f6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    d3ee:	2172      	movs	r1, #114	; 0x72
    d3f0:	206d      	movs	r0, #109	; 0x6d
    d3f2:	f7f6 fdc3 	bl	3f7c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d3f6:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    d3fa:	fbb0 f0f2 	udiv	r0, r0, r2
    d3fe:	bd70      	pop	{r4, r5, r6, pc}
    d400:	5840      	ldr	r0, [r0, r1]
    d402:	2800      	cmp	r0, #0
    d404:	d000      	beq.n	d408 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    d406:	2001      	movs	r0, #1
    d408:	4770      	bx	lr
    d40a:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    d40e:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    d412:	f002 0201 	and.w	r2, r2, #1
    d416:	03c0      	lsls	r0, r0, #15
    d418:	d503      	bpl.n	d422 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d41a:	428a      	cmp	r2, r1
    d41c:	d101      	bne.n	d422 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d41e:	2001      	movs	r0, #1
    d420:	4770      	bx	lr
    d422:	2000      	movs	r0, #0
    d424:	4770      	bx	lr

0000d426 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    d426:	b510      	push	{r4, lr}
    d428:	2101      	movs	r1, #1
    d42a:	0788      	lsls	r0, r1, #30
    d42c:	f7f6 fd50 	bl	3ed0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d430:	2800      	cmp	r0, #0
    d432:	d000      	beq.n	d436 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    d434:	2001      	movs	r0, #1
    d436:	bd10      	pop	{r4, pc}

0000d438 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    d438:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d43c:	2101      	movs	r1, #1
    d43e:	6001      	str	r1, [r0, #0]
    d440:	4770      	bx	lr

0000d442 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    d442:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d446:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    d44a:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    d44e:	f002 0203 	and.w	r2, r2, #3
    d452:	03c9      	lsls	r1, r1, #15
    d454:	d503      	bpl.n	d45e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d456:	4282      	cmp	r2, r0
    d458:	d101      	bne.n	d45e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d45a:	2001      	movs	r0, #1
    d45c:	4770      	bx	lr
    d45e:	2000      	movs	r0, #0
    d460:	4770      	bx	lr

0000d462 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    d462:	b510      	push	{r4, lr}
    d464:	2100      	movs	r1, #0
    d466:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d46a:	f7f6 fd31 	bl	3ed0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d46e:	2800      	cmp	r0, #0
    d470:	d000      	beq.n	d474 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    d472:	2001      	movs	r0, #1
    d474:	bd10      	pop	{r4, pc}
    d476:	2800      	cmp	r0, #0
    d478:	db09      	blt.n	d48e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    d47a:	f000 021f 	and.w	r2, r0, #31
    d47e:	2101      	movs	r1, #1
    d480:	4091      	lsls	r1, r2
    d482:	0940      	lsrs	r0, r0, #5
    d484:	0080      	lsls	r0, r0, #2
    d486:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d48a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d48e:	4770      	bx	lr
    d490:	2800      	cmp	r0, #0
    d492:	db0d      	blt.n	d4b0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    d494:	f000 021f 	and.w	r2, r0, #31
    d498:	2101      	movs	r1, #1
    d49a:	4091      	lsls	r1, r2
    d49c:	0940      	lsrs	r0, r0, #5
    d49e:	0080      	lsls	r0, r0, #2
    d4a0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d4a4:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d4a8:	f3bf 8f4f 	dsb	sy
    d4ac:	f3bf 8f6f 	isb	sy
    d4b0:	4770      	bx	lr
    d4b2:	1000      	.short	0x1000
    d4b4:	00fa0002 	.word	0x00fa0002
    d4b8:	0f140000 	.word	0x0f140000
    d4bc:	f9cf63a7 	.word	0xf9cf63a7
    d4c0:	f9efc477 	.word	0xf9efc477
    d4c4:	f561e931 	.word	0xf561e931
    d4c8:	749a03bc 	.word	0x749a03bc
    d4cc:	2b06      	.short	0x2b06
    d4ce:	2800      	cmp	r0, #0
    d4d0:	db09      	blt.n	d4e6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    d4d2:	f000 021f 	and.w	r2, r0, #31
    d4d6:	2101      	movs	r1, #1
    d4d8:	4091      	lsls	r1, r2
    d4da:	0940      	lsrs	r0, r0, #5
    d4dc:	0080      	lsls	r0, r0, #2
    d4de:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d4e2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d4e6:	4770      	bx	lr

0000d4e8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    d4e8:	f3ef 8110 	mrs	r1, PRIMASK
    d4ec:	b672      	cpsid	i
    d4ee:	7802      	ldrb	r2, [r0, #0]
    d4f0:	2a01      	cmp	r2, #1
    d4f2:	d001      	beq.n	d4f8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    d4f4:	2201      	movs	r2, #1
    d4f6:	e000      	b.n	d4fa <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    d4f8:	2200      	movs	r2, #0
    d4fa:	2301      	movs	r3, #1
    d4fc:	7003      	strb	r3, [r0, #0]
    d4fe:	b901      	cbnz	r1, d502 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    d500:	b662      	cpsie	i
    d502:	b10a      	cbz	r2, d508 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    d504:	2000      	movs	r0, #0
    d506:	4770      	bx	lr
    d508:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d50c:	4770      	bx	lr

0000d50e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    d50e:	2100      	movs	r1, #0
    d510:	7001      	strb	r1, [r0, #0]
    d512:	4608      	mov	r0, r1
    d514:	4770      	bx	lr

0000d516 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    d516:	f3ef 8110 	mrs	r1, PRIMASK
    d51a:	b672      	cpsid	i
    d51c:	2200      	movs	r2, #0
    d51e:	7002      	strb	r2, [r0, #0]
    d520:	b901      	cbnz	r1, d524 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    d522:	b662      	cpsie	i
    d524:	2000      	movs	r0, #0
    d526:	4770      	bx	lr

0000d528 <mpsl_low_priority_process>:
    d528:	f7f6 be18 	b.w	415c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000d52c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    d52c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d530:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d534:	280f      	cmp	r0, #15
    d536:	d001      	beq.n	d53c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    d538:	2000      	movs	r0, #0
    d53a:	4770      	bx	lr
    d53c:	2001      	movs	r0, #1
    d53e:	4770      	bx	lr

0000d540 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    d540:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d544:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d548:	280a      	cmp	r0, #10
    d54a:	d001      	beq.n	d550 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    d54c:	2000      	movs	r0, #0
    d54e:	4770      	bx	lr
    d550:	2001      	movs	r0, #1
    d552:	4770      	bx	lr

0000d554 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    d554:	b500      	push	{lr}
    d556:	f7ff fff3 	bl	d540 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d55a:	b120      	cbz	r0, d566 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    d55c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d560:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d564:	b108      	cbz	r0, d56a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    d566:	2000      	movs	r0, #0
    d568:	bd00      	pop	{pc}
    d56a:	2001      	movs	r0, #1
    d56c:	bd00      	pop	{pc}

0000d56e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    d56e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d572:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d576:	280e      	cmp	r0, #14
    d578:	d001      	beq.n	d57e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    d57a:	2000      	movs	r0, #0
    d57c:	4770      	bx	lr
    d57e:	2001      	movs	r0, #1
    d580:	4770      	bx	lr

0000d582 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    d582:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d586:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d58a:	2810      	cmp	r0, #16
    d58c:	d001      	beq.n	d592 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    d58e:	2000      	movs	r0, #0
    d590:	4770      	bx	lr
    d592:	2001      	movs	r0, #1
    d594:	4770      	bx	lr

0000d596 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    d596:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d59a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d59e:	2806      	cmp	r0, #6
    d5a0:	d003      	beq.n	d5aa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d5a2:	1c40      	adds	r0, r0, #1
    d5a4:	d001      	beq.n	d5aa <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d5a6:	2000      	movs	r0, #0
    d5a8:	4770      	bx	lr
    d5aa:	2001      	movs	r0, #1
    d5ac:	4770      	bx	lr

0000d5ae <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    d5ae:	b500      	push	{lr}
    d5b0:	f7ff fff1 	bl	d596 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d5b4:	b148      	cbz	r0, d5ca <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d5b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d5ba:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d5be:	2806      	cmp	r0, #6
    d5c0:	d303      	bcc.n	d5ca <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d5c2:	1c40      	adds	r0, r0, #1
    d5c4:	d001      	beq.n	d5ca <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d5c6:	2001      	movs	r0, #1
    d5c8:	bd00      	pop	{pc}
    d5ca:	2000      	movs	r0, #0
    d5cc:	bd00      	pop	{pc}

0000d5ce <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    d5ce:	b500      	push	{lr}
    d5d0:	f7ff ffe1 	bl	d596 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d5d4:	b138      	cbz	r0, d5e6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    d5d6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d5da:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d5de:	2806      	cmp	r0, #6
    d5e0:	d303      	bcc.n	d5ea <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d5e2:	1c40      	adds	r0, r0, #1
    d5e4:	d001      	beq.n	d5ea <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d5e6:	2000      	movs	r0, #0
    d5e8:	bd00      	pop	{pc}
    d5ea:	2001      	movs	r0, #1
    d5ec:	bd00      	pop	{pc}

0000d5ee <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    d5ee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d5f2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d5f6:	280d      	cmp	r0, #13
    d5f8:	d001      	beq.n	d5fe <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    d5fa:	2000      	movs	r0, #0
    d5fc:	4770      	bx	lr
    d5fe:	2001      	movs	r0, #1
    d600:	4770      	bx	lr

0000d602 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    d602:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d606:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d60a:	2808      	cmp	r0, #8
    d60c:	d001      	beq.n	d612 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d60e:	2000      	movs	r0, #0
    d610:	4770      	bx	lr
    d612:	2001      	movs	r0, #1
    d614:	4770      	bx	lr

0000d616 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    d616:	2a00      	cmp	r2, #0
    d618:	bf04      	itt	eq
    d61a:	2000      	moveq	r0, #0
    d61c:	4770      	bxeq	lr
    d61e:	1e52      	subs	r2, r2, #1
    d620:	d007      	beq.n	d632 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    d622:	7803      	ldrb	r3, [r0, #0]
    d624:	f891 c000 	ldrb.w	ip, [r1]
    d628:	4563      	cmp	r3, ip
    d62a:	bf04      	itt	eq
    d62c:	1c40      	addeq	r0, r0, #1
    d62e:	1c49      	addeq	r1, r1, #1
    d630:	d0f5      	beq.n	d61e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    d632:	7800      	ldrb	r0, [r0, #0]
    d634:	7809      	ldrb	r1, [r1, #0]
    d636:	1a40      	subs	r0, r0, r1
    d638:	4770      	bx	lr

0000d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d63a:	b4f0      	push	{r4, r5, r6, r7}
    d63c:	ea80 0c01 	eor.w	ip, r0, r1
    d640:	4603      	mov	r3, r0
    d642:	f01c 0f03 	tst.w	ip, #3
    d646:	d13c      	bne.n	d6c2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d648:	f013 0f03 	tst.w	r3, #3
    d64c:	d00b      	beq.n	d666 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d64e:	2a00      	cmp	r2, #0
    d650:	bf04      	itt	eq
    d652:	bcf0      	popeq	{r4, r5, r6, r7}
    d654:	4770      	bxeq	lr
    d656:	f811 cb01 	ldrb.w	ip, [r1], #1
    d65a:	f803 cb01 	strb.w	ip, [r3], #1
    d65e:	1e52      	subs	r2, r2, #1
    d660:	f013 0f03 	tst.w	r3, #3
    d664:	d1f3      	bne.n	d64e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d666:	2a03      	cmp	r2, #3
    d668:	d94f      	bls.n	d70a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d66a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d66e:	d24c      	bcs.n	d70a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d670:	f1c2 0c00 	rsb	ip, r2, #0
    d674:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d678:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d67c:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d680:	f1cc 0c00 	rsb	ip, ip, #0
    d684:	f1bc 0f00 	cmp.w	ip, #0
    d688:	dd1b      	ble.n	d6c2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d68a:	1f0d      	subs	r5, r1, #4
    d68c:	1f1c      	subs	r4, r3, #4
    d68e:	f01c 0f01 	tst.w	ip, #1
    d692:	d003      	beq.n	d69c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d694:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d698:	f844 6f04 	str.w	r6, [r4, #4]!
    d69c:	ea5f 066c 	movs.w	r6, ip, asr #1
    d6a0:	d007      	beq.n	d6b2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d6a2:	686f      	ldr	r7, [r5, #4]
    d6a4:	6067      	str	r7, [r4, #4]
    d6a6:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d6aa:	f844 7f08 	str.w	r7, [r4, #8]!
    d6ae:	1e76      	subs	r6, r6, #1
    d6b0:	d1f7      	bne.n	d6a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d6b2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d6b6:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d6ba:	f1cc 0c00 	rsb	ip, ip, #0
    d6be:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d6c2:	2a00      	cmp	r2, #0
    d6c4:	bf04      	itt	eq
    d6c6:	bcf0      	popeq	{r4, r5, r6, r7}
    d6c8:	4770      	bxeq	lr
    d6ca:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d6ce:	d226      	bcs.n	d71e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d6d0:	2a00      	cmp	r2, #0
    d6d2:	bfdc      	itt	le
    d6d4:	bcf0      	pople	{r4, r5, r6, r7}
    d6d6:	4770      	bxle	lr
    d6d8:	1e49      	subs	r1, r1, #1
    d6da:	1e5b      	subs	r3, r3, #1
    d6dc:	f012 0f01 	tst.w	r2, #1
    d6e0:	d003      	beq.n	d6ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d6e2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d6e6:	f803 cf01 	strb.w	ip, [r3, #1]!
    d6ea:	1052      	asrs	r2, r2, #1
    d6ec:	bf04      	itt	eq
    d6ee:	bcf0      	popeq	{r4, r5, r6, r7}
    d6f0:	4770      	bxeq	lr
    d6f2:	f891 c001 	ldrb.w	ip, [r1, #1]
    d6f6:	f883 c001 	strb.w	ip, [r3, #1]
    d6fa:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d6fe:	f803 cf02 	strb.w	ip, [r3, #2]!
    d702:	1e52      	subs	r2, r2, #1
    d704:	d1f5      	bne.n	d6f2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d706:	bcf0      	pop	{r4, r5, r6, r7}
    d708:	4770      	bx	lr
    d70a:	2a04      	cmp	r2, #4
    d70c:	d3d9      	bcc.n	d6c2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d70e:	f851 cb04 	ldr.w	ip, [r1], #4
    d712:	1f12      	subs	r2, r2, #4
    d714:	f843 cb04 	str.w	ip, [r3], #4
    d718:	2a04      	cmp	r2, #4
    d71a:	d2f8      	bcs.n	d70e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d71c:	e7d1      	b.n	d6c2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d71e:	f811 cb01 	ldrb.w	ip, [r1], #1
    d722:	f803 cb01 	strb.w	ip, [r3], #1
    d726:	1e52      	subs	r2, r2, #1
    d728:	d1f9      	bne.n	d71e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d72a:	bcf0      	pop	{r4, r5, r6, r7}
    d72c:	4770      	bx	lr

0000d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d72e:	b470      	push	{r4, r5, r6}
    d730:	4603      	mov	r3, r0
    d732:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d736:	f010 0f03 	tst.w	r0, #3
    d73a:	d009      	beq.n	d750 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d73c:	2a00      	cmp	r2, #0
    d73e:	bf04      	itt	eq
    d740:	bc70      	popeq	{r4, r5, r6}
    d742:	4770      	bxeq	lr
    d744:	f803 cb01 	strb.w	ip, [r3], #1
    d748:	1e52      	subs	r2, r2, #1
    d74a:	f013 0f03 	tst.w	r3, #3
    d74e:	d1f5      	bne.n	d73c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d750:	b2c9      	uxtb	r1, r1
    d752:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d756:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d75a:	2a03      	cmp	r2, #3
    d75c:	d939      	bls.n	d7d2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d75e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d762:	d236      	bcs.n	d7d2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d764:	4251      	negs	r1, r2
    d766:	17cc      	asrs	r4, r1, #31
    d768:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d76c:	1089      	asrs	r1, r1, #2
    d76e:	424e      	negs	r6, r1
    d770:	2e00      	cmp	r6, #0
    d772:	dd11      	ble.n	d798 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d774:	1f19      	subs	r1, r3, #4
    d776:	f016 0f01 	tst.w	r6, #1
    d77a:	bf18      	it	ne
    d77c:	f841 5f04 	strne.w	r5, [r1, #4]!
    d780:	1074      	asrs	r4, r6, #1
    d782:	d004      	beq.n	d78e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d784:	604d      	str	r5, [r1, #4]
    d786:	f841 5f08 	str.w	r5, [r1, #8]!
    d78a:	1e64      	subs	r4, r4, #1
    d78c:	d1fa      	bne.n	d784 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d78e:	4271      	negs	r1, r6
    d790:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d794:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d798:	2a00      	cmp	r2, #0
    d79a:	bf04      	itt	eq
    d79c:	bc70      	popeq	{r4, r5, r6}
    d79e:	4770      	bxeq	lr
    d7a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d7a4:	d21d      	bcs.n	d7e2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d7a6:	2a00      	cmp	r2, #0
    d7a8:	bfdc      	itt	le
    d7aa:	bc70      	pople	{r4, r5, r6}
    d7ac:	4770      	bxle	lr
    d7ae:	1e59      	subs	r1, r3, #1
    d7b0:	f012 0f01 	tst.w	r2, #1
    d7b4:	bf18      	it	ne
    d7b6:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d7ba:	1052      	asrs	r2, r2, #1
    d7bc:	bf04      	itt	eq
    d7be:	bc70      	popeq	{r4, r5, r6}
    d7c0:	4770      	bxeq	lr
    d7c2:	f881 c001 	strb.w	ip, [r1, #1]
    d7c6:	f801 cf02 	strb.w	ip, [r1, #2]!
    d7ca:	1e52      	subs	r2, r2, #1
    d7cc:	d1f9      	bne.n	d7c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d7ce:	bc70      	pop	{r4, r5, r6}
    d7d0:	4770      	bx	lr
    d7d2:	2a04      	cmp	r2, #4
    d7d4:	d3e0      	bcc.n	d798 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d7d6:	1f12      	subs	r2, r2, #4
    d7d8:	f843 5b04 	str.w	r5, [r3], #4
    d7dc:	2a04      	cmp	r2, #4
    d7de:	d2fa      	bcs.n	d7d6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d7e0:	e7da      	b.n	d798 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d7e2:	f803 cb01 	strb.w	ip, [r3], #1
    d7e6:	1e52      	subs	r2, r2, #1
    d7e8:	d1fb      	bne.n	d7e2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d7ea:	bc70      	pop	{r4, r5, r6}
    d7ec:	4770      	bx	lr
    d7ee:	f04f 30ff 	mov.w	r0, #4294967295
    d7f2:	4770      	bx	lr
    d7f4:	2000      	movs	r0, #0
    d7f6:	4770      	bx	lr
    d7f8:	2000      	movs	r0, #0
    d7fa:	4770      	bx	lr
    d7fc:	f04f 30ff 	mov.w	r0, #4294967295
    d800:	4770      	bx	lr
    d802:	4770      	bx	lr
    d804:	4770      	bx	lr
    d806:	2000      	movs	r0, #0
    d808:	4770      	bx	lr
    d80a:	2100      	movs	r1, #0
    d80c:	7001      	strb	r1, [r0, #0]
    d80e:	4770      	bx	lr
    d810:	f04f 30ff 	mov.w	r0, #4294967295
    d814:	4770      	bx	lr
    d816:	f04f 30ff 	mov.w	r0, #4294967295
    d81a:	4770      	bx	lr
    d81c:	2100      	movs	r1, #0
    d81e:	7001      	strb	r1, [r0, #0]
    d820:	4770      	bx	lr
    d822:	f04f 30ff 	mov.w	r0, #4294967295
    d826:	4770      	bx	lr
    d828:	f04f 30ff 	mov.w	r0, #4294967295
    d82c:	4770      	bx	lr
    d82e:	7800      	ldrb	r0, [r0, #0]
    d830:	2800      	cmp	r0, #0
    d832:	d001      	beq.n	d838 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    d834:	f06f 0015 	mvn.w	r0, #21
    d838:	4770      	bx	lr
    d83a:	2000      	movs	r0, #0
    d83c:	4770      	bx	lr
    d83e:	2200      	movs	r2, #0
    d840:	f000 b800 	b.w	d844 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000d844 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    d844:	b570      	push	{r4, r5, r6, lr}
    d846:	4614      	mov	r4, r2
    d848:	460d      	mov	r5, r1
    d84a:	1b00      	subs	r0, r0, r4
    d84c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    d850:	4288      	cmp	r0, r1
    d852:	da01      	bge.n	d858 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    d854:	4608      	mov	r0, r1
    d856:	e002      	b.n	d85e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    d858:	287f      	cmp	r0, #127	; 0x7f
    d85a:	dd00      	ble.n	d85e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    d85c:	207f      	movs	r0, #127	; 0x7f
    d85e:	b240      	sxtb	r0, r0
    d860:	f7f2 ffce 	bl	800 <mpsl_tx_power_radio_supported_power_adjust>
    d864:	7028      	strb	r0, [r5, #0]
    d866:	706c      	strb	r4, [r5, #1]
    d868:	2100      	movs	r1, #0
    d86a:	4420      	add	r0, r4
    d86c:	70a9      	strb	r1, [r5, #2]
    d86e:	b240      	sxtb	r0, r0
    d870:	bd70      	pop	{r4, r5, r6, pc}

0000d872 <sdc_soc_ecb_block_encrypt>:
    d872:	b530      	push	{r4, r5, lr}
    d874:	460d      	mov	r5, r1
    d876:	b08d      	sub	sp, #52	; 0x34
    d878:	4614      	mov	r4, r2
    d87a:	4601      	mov	r1, r0
    d87c:	2210      	movs	r2, #16
    d87e:	4668      	mov	r0, sp
    d880:	f7ff fedb 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d884:	2210      	movs	r2, #16
    d886:	4629      	mov	r1, r5
    d888:	a804      	add	r0, sp, #16
    d88a:	f7ff fed6 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d88e:	4668      	mov	r0, sp
    d890:	f001 f810 	bl	e8b4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d894:	b118      	cbz	r0, d89e <sdc_soc_ecb_block_encrypt+0x2c>
    d896:	f06f 0015 	mvn.w	r0, #21
    d89a:	b00d      	add	sp, #52	; 0x34
    d89c:	bd30      	pop	{r4, r5, pc}
    d89e:	2210      	movs	r2, #16
    d8a0:	4620      	mov	r0, r4
    d8a2:	a908      	add	r1, sp, #32
    d8a4:	f7ff fec9 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d8a8:	2000      	movs	r0, #0
    d8aa:	e7f6      	b.n	d89a <sdc_soc_ecb_block_encrypt+0x28>

0000d8ac <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    d8ac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d8ae:	4604      	mov	r4, r0
    d8b0:	1d01      	adds	r1, r0, #4
    d8b2:	4668      	mov	r0, sp
    d8b4:	f7f8 febc 	bl	6630 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    d8b8:	2800      	cmp	r0, #0
    d8ba:	d004      	beq.n	d8c6 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    d8bc:	4669      	mov	r1, sp
    d8be:	4620      	mov	r0, r4
    d8c0:	f000 f848 	bl	d954 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d8c4:	2001      	movs	r0, #1
    d8c6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000d8c8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    d8c8:	b50e      	push	{r1, r2, r3, lr}
    d8ca:	4601      	mov	r1, r0
    d8cc:	4668      	mov	r0, sp
    d8ce:	f000 f827 	bl	d920 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d8d2:	4668      	mov	r0, sp
    d8d4:	f001 fc94 	bl	f200 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d8d8:	bd0e      	pop	{r1, r2, r3, pc}

0000d8da <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d8da:	b510      	push	{r4, lr}
    d8dc:	4604      	mov	r4, r0
    d8de:	4620      	mov	r0, r4
    d8e0:	f7f6 ff62 	bl	47a8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d8e4:	2800      	cmp	r0, #0
    d8e6:	d006      	beq.n	d8f6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d8e8:	78a1      	ldrb	r1, [r4, #2]
    d8ea:	7820      	ldrb	r0, [r4, #0]
    d8ec:	f000 f804 	bl	d8f8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d8f0:	2800      	cmp	r0, #0
    d8f2:	d0f4      	beq.n	d8de <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d8f4:	2001      	movs	r0, #1
    d8f6:	bd10      	pop	{r4, pc}
    d8f8:	b570      	push	{r4, r5, r6, lr}
    d8fa:	460c      	mov	r4, r1
    d8fc:	4605      	mov	r5, r0
    d8fe:	f7f6 ffaf 	bl	4860 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d902:	2800      	cmp	r0, #0
    d904:	d002      	beq.n	d90c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d906:	2d3e      	cmp	r5, #62	; 0x3e
    d908:	d001      	beq.n	d90e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d90a:	2001      	movs	r0, #1
    d90c:	bd70      	pop	{r4, r5, r6, pc}
    d90e:	2c12      	cmp	r4, #18
    d910:	d004      	beq.n	d91c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d912:	4620      	mov	r0, r4
    d914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d918:	f7f6 bfb4 	b.w	4884 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d91c:	2000      	movs	r0, #0
    d91e:	bd70      	pop	{r4, r5, r6, pc}

0000d920 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d920:	880a      	ldrh	r2, [r1, #0]
    d922:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d926:	8002      	strh	r2, [r0, #0]
    d928:	884a      	ldrh	r2, [r1, #2]
    d92a:	8042      	strh	r2, [r0, #2]
    d92c:	784a      	ldrb	r2, [r1, #1]
    d92e:	0993      	lsrs	r3, r2, #6
    d930:	2200      	movs	r2, #0
    d932:	7142      	strb	r2, [r0, #5]
    d934:	784b      	ldrb	r3, [r1, #1]
    d936:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d93a:	b11b      	cbz	r3, d944 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d93c:	2b01      	cmp	r3, #1
    d93e:	d005      	beq.n	d94c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d940:	2b02      	cmp	r3, #2
    d942:	d005      	beq.n	d950 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d944:	7102      	strb	r2, [r0, #4]
    d946:	1d09      	adds	r1, r1, #4
    d948:	6081      	str	r1, [r0, #8]
    d94a:	4770      	bx	lr
    d94c:	2201      	movs	r2, #1
    d94e:	e7f9      	b.n	d944 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d950:	2202      	movs	r2, #2
    d952:	e7f7      	b.n	d944 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d954 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d954:	b510      	push	{r4, lr}
    d956:	460c      	mov	r4, r1
    d958:	7809      	ldrb	r1, [r1, #0]
    d95a:	7001      	strb	r1, [r0, #0]
    d95c:	7841      	ldrb	r1, [r0, #1]
    d95e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    d962:	7041      	strb	r1, [r0, #1]
    d964:	8822      	ldrh	r2, [r4, #0]
    d966:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d96a:	4311      	orrs	r1, r2
    d96c:	7041      	strb	r1, [r0, #1]
    d96e:	78a2      	ldrb	r2, [r4, #2]
    d970:	7082      	strb	r2, [r0, #2]
    d972:	8862      	ldrh	r2, [r4, #2]
    d974:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    d978:	0a12      	lsrs	r2, r2, #8
    d97a:	70c2      	strb	r2, [r0, #3]
    d97c:	7041      	strb	r1, [r0, #1]
    d97e:	7922      	ldrb	r2, [r4, #4]
    d980:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d984:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    d988:	7041      	strb	r1, [r0, #1]
    d98a:	7962      	ldrb	r2, [r4, #5]
    d98c:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d990:	7041      	strb	r1, [r0, #1]
    d992:	68a1      	ldr	r1, [r4, #8]
    d994:	1d02      	adds	r2, r0, #4
    d996:	4291      	cmp	r1, r2
    d998:	d006      	beq.n	d9a8 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    d99a:	8862      	ldrh	r2, [r4, #2]
    d99c:	2afb      	cmp	r2, #251	; 0xfb
    d99e:	d300      	bcc.n	d9a2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    d9a0:	22fb      	movs	r2, #251	; 0xfb
    d9a2:	1d00      	adds	r0, r0, #4
    d9a4:	f7ff fe49 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d9a8:	78a0      	ldrb	r0, [r4, #2]
    d9aa:	1d00      	adds	r0, r0, #4
    d9ac:	b2c0      	uxtb	r0, r0
    d9ae:	bd10      	pop	{r4, pc}

0000d9b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9b4:	4604      	mov	r4, r0
    d9b6:	f891 c000 	ldrb.w	ip, [r1]
    d9ba:	2000      	movs	r0, #0
    d9bc:	2613      	movs	r6, #19
    d9be:	223e      	movs	r2, #62	; 0x3e
    d9c0:	2712      	movs	r7, #18
    d9c2:	25ff      	movs	r5, #255	; 0xff
    d9c4:	f04f 090c 	mov.w	r9, #12
    d9c8:	f04f 0e05 	mov.w	lr, #5
    d9cc:	f04f 0a01 	mov.w	sl, #1
    d9d0:	f104 030d 	add.w	r3, r4, #13
    d9d4:	f04f 0b11 	mov.w	fp, #17
    d9d8:	f1bc 0f20 	cmp.w	ip, #32
    d9dc:	d270      	bcs.n	dac0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x110>
    d9de:	e8df f00c 	tbb	[pc, ip]
    d9e2:	106f      	.short	0x106f
    d9e4:	f6302a28 	.word	0xf6302a28
    d9e8:	f7d2c870 	.word	0xf7d2c870
    d9ec:	f1f2f3f4 	.word	0xf1f2f3f4
    d9f0:	6feeeff0 	.word	0x6feeeff0
    d9f4:	ed96526f 	.word	0xed96526f
    d9f8:	e9eaebec 	.word	0xe9eaebec
    d9fc:	e5e6e7e8 	.word	0xe5e6e7e8
    da00:	e46f      	.short	0xe46f
    da02:	f884 9000 	strb.w	r9, [r4]
    da06:	7908      	ldrb	r0, [r1, #4]
    da08:	70a0      	strb	r0, [r4, #2]
    da0a:	7948      	ldrb	r0, [r1, #5]
    da0c:	70e0      	strb	r0, [r4, #3]
    da0e:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    da12:	0a00      	lsrs	r0, r0, #8
    da14:	7120      	strb	r0, [r4, #4]
    da16:	79c8      	ldrb	r0, [r1, #7]
    da18:	7160      	strb	r0, [r4, #5]
    da1a:	7a08      	ldrb	r0, [r1, #8]
    da1c:	71a0      	strb	r0, [r4, #6]
    da1e:	8908      	ldrh	r0, [r1, #8]
    da20:	0a00      	lsrs	r0, r0, #8
    da22:	71e0      	strb	r0, [r4, #7]
    da24:	7a88      	ldrb	r0, [r1, #10]
    da26:	7220      	strb	r0, [r4, #8]
    da28:	8948      	ldrh	r0, [r1, #10]
    da2a:	0a00      	lsrs	r0, r0, #8
    da2c:	7260      	strb	r0, [r4, #9]
    da2e:	2008      	movs	r0, #8
    da30:	e178      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    da32:	2010      	movs	r0, #16
    da34:	e000      	b.n	da38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x88>
    da36:	201a      	movs	r0, #26
    da38:	7020      	strb	r0, [r4, #0]
    da3a:	7908      	ldrb	r0, [r1, #4]
    da3c:	70a0      	strb	r0, [r4, #2]
    da3e:	2001      	movs	r0, #1
    da40:	e170      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    da42:	7022      	strb	r2, [r4, #0]
    da44:	2002      	movs	r0, #2
    da46:	70a0      	strb	r0, [r4, #2]
    da48:	7908      	ldrb	r0, [r1, #4]
    da4a:	70e0      	strb	r0, [r4, #3]
    da4c:	7b88      	ldrb	r0, [r1, #14]
    da4e:	7120      	strb	r0, [r4, #4]
    da50:	7948      	ldrb	r0, [r1, #5]
    da52:	7160      	strb	r0, [r4, #5]
    da54:	f8d1 0006 	ldr.w	r0, [r1, #6]
    da58:	f8c4 0006 	str.w	r0, [r4, #6]
    da5c:	8948      	ldrh	r0, [r1, #10]
    da5e:	8160      	strh	r0, [r4, #10]
    da60:	7b08      	ldrb	r0, [r1, #12]
    da62:	7320      	strb	r0, [r4, #12]
    da64:	7b0e      	ldrb	r6, [r1, #12]
    da66:	1d0d      	adds	r5, r1, #4
    da68:	2e1f      	cmp	r6, #31
    da6a:	d300      	bcc.n	da6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xbe>
    da6c:	261f      	movs	r6, #31
    da6e:	4618      	mov	r0, r3
    da70:	4632      	mov	r2, r6
    da72:	f105 010b 	add.w	r1, r5, #11
    da76:	f7ff fde0 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da7a:	360d      	adds	r6, #13
    da7c:	7a69      	ldrb	r1, [r5, #9]
    da7e:	55a1      	strb	r1, [r4, r6]
    da80:	1e76      	subs	r6, r6, #1
    da82:	b2f0      	uxtb	r0, r6
    da84:	e14c      	b.n	dd20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    da86:	7022      	strb	r2, [r4, #0]
    da88:	200b      	movs	r0, #11
    da8a:	70a0      	strb	r0, [r4, #2]
    da8c:	7908      	ldrb	r0, [r1, #4]
    da8e:	70e0      	strb	r0, [r4, #3]
    da90:	7948      	ldrb	r0, [r1, #5]
    da92:	7120      	strb	r0, [r4, #4]
    da94:	7988      	ldrb	r0, [r1, #6]
    da96:	7160      	strb	r0, [r4, #5]
    da98:	f8d1 0007 	ldr.w	r0, [r1, #7]
    da9c:	f8c4 0006 	str.w	r0, [r4, #6]
    daa0:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    daa4:	8160      	strh	r0, [r4, #10]
    daa6:	7b48      	ldrb	r0, [r1, #13]
    daa8:	7320      	strb	r0, [r4, #12]
    daaa:	f8d1 000e 	ldr.w	r0, [r1, #14]
    daae:	f8c4 000d 	str.w	r0, [r4, #13]
    dab2:	8a48      	ldrh	r0, [r1, #18]
    dab4:	f8a4 0011 	strh.w	r0, [r4, #17]
    dab8:	7d08      	ldrb	r0, [r1, #20]
    daba:	74e0      	strb	r0, [r4, #19]
    dabc:	4638      	mov	r0, r7
    dabe:	e131      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    dac0:	e132      	b.n	dd28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x378>
    dac2:	7022      	strb	r2, [r4, #0]
    dac4:	f884 a002 	strb.w	sl, [r4, #2]
    dac8:	7908      	ldrb	r0, [r1, #4]
    daca:	70e0      	strb	r0, [r4, #3]
    dacc:	7988      	ldrb	r0, [r1, #6]
    dace:	7120      	strb	r0, [r4, #4]
    dad0:	88c8      	ldrh	r0, [r1, #6]
    dad2:	0a00      	lsrs	r0, r0, #8
    dad4:	7160      	strb	r0, [r4, #5]
    dad6:	7a08      	ldrb	r0, [r1, #8]
    dad8:	71a0      	strb	r0, [r4, #6]
    dada:	7a48      	ldrb	r0, [r1, #9]
    dadc:	71e0      	strb	r0, [r4, #7]
    dade:	f8d1 000a 	ldr.w	r0, [r1, #10]
    dae2:	60a0      	str	r0, [r4, #8]
    dae4:	89c8      	ldrh	r0, [r1, #14]
    dae6:	81a0      	strh	r0, [r4, #12]
    dae8:	7c08      	ldrb	r0, [r1, #16]
    daea:	73a0      	strb	r0, [r4, #14]
    daec:	8a08      	ldrh	r0, [r1, #16]
    daee:	0a00      	lsrs	r0, r0, #8
    daf0:	73e0      	strb	r0, [r4, #15]
    daf2:	7c88      	ldrb	r0, [r1, #18]
    daf4:	7420      	strb	r0, [r4, #16]
    daf6:	8a48      	ldrh	r0, [r1, #18]
    daf8:	0a00      	lsrs	r0, r0, #8
    dafa:	7460      	strb	r0, [r4, #17]
    dafc:	7d08      	ldrb	r0, [r1, #20]
    dafe:	74a0      	strb	r0, [r4, #18]
    db00:	8a88      	ldrh	r0, [r1, #20]
    db02:	0a00      	lsrs	r0, r0, #8
    db04:	74e0      	strb	r0, [r4, #19]
    db06:	7d88      	ldrb	r0, [r1, #22]
    db08:	7520      	strb	r0, [r4, #20]
    db0a:	4630      	mov	r0, r6
    db0c:	e10a      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    db0e:	7022      	strb	r2, [r4, #0]
    db10:	200a      	movs	r0, #10
    db12:	70a0      	strb	r0, [r4, #2]
    db14:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    db18:	70e0      	strb	r0, [r4, #3]
    db1a:	7888      	ldrb	r0, [r1, #2]
    db1c:	7120      	strb	r0, [r4, #4]
    db1e:	8848      	ldrh	r0, [r1, #2]
    db20:	0a00      	lsrs	r0, r0, #8
    db22:	7160      	strb	r0, [r4, #5]
    db24:	7908      	ldrb	r0, [r1, #4]
    db26:	71a0      	strb	r0, [r4, #6]
    db28:	7948      	ldrb	r0, [r1, #5]
    db2a:	71e0      	strb	r0, [r4, #7]
    db2c:	f8d1 0006 	ldr.w	r0, [r1, #6]
    db30:	60a0      	str	r0, [r4, #8]
    db32:	8948      	ldrh	r0, [r1, #10]
    db34:	81a0      	strh	r0, [r4, #12]
    db36:	68c8      	ldr	r0, [r1, #12]
    db38:	f8c4 000e 	str.w	r0, [r4, #14]
    db3c:	8a08      	ldrh	r0, [r1, #16]
    db3e:	8260      	strh	r0, [r4, #18]
    db40:	f8d1 0012 	ldr.w	r0, [r1, #18]
    db44:	6160      	str	r0, [r4, #20]
    db46:	8ac8      	ldrh	r0, [r1, #22]
    db48:	8320      	strh	r0, [r4, #24]
    db4a:	7e08      	ldrb	r0, [r1, #24]
    db4c:	76a0      	strb	r0, [r4, #26]
    db4e:	8b08      	ldrh	r0, [r1, #24]
    db50:	0a00      	lsrs	r0, r0, #8
    db52:	76e0      	strb	r0, [r4, #27]
    db54:	7e88      	ldrb	r0, [r1, #26]
    db56:	7720      	strb	r0, [r4, #28]
    db58:	8b48      	ldrh	r0, [r1, #26]
    db5a:	0a00      	lsrs	r0, r0, #8
    db5c:	7760      	strb	r0, [r4, #29]
    db5e:	7f08      	ldrb	r0, [r1, #28]
    db60:	77a0      	strb	r0, [r4, #30]
    db62:	8b88      	ldrh	r0, [r1, #28]
    db64:	0a00      	lsrs	r0, r0, #8
    db66:	77e0      	strb	r0, [r4, #31]
    db68:	7f88      	ldrb	r0, [r1, #30]
    db6a:	f884 0020 	strb.w	r0, [r4, #32]
    db6e:	201f      	movs	r0, #31
    db70:	e0d8      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    db72:	7022      	strb	r2, [r4, #0]
    db74:	2014      	movs	r0, #20
    db76:	70a0      	strb	r0, [r4, #2]
    db78:	7908      	ldrb	r0, [r1, #4]
    db7a:	70e0      	strb	r0, [r4, #3]
    db7c:	8888      	ldrh	r0, [r1, #4]
    db7e:	0a00      	lsrs	r0, r0, #8
    db80:	7120      	strb	r0, [r4, #4]
    db82:	7988      	ldrb	r0, [r1, #6]
    db84:	e0ee      	b.n	dd64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b4>
    db86:	7022      	strb	r2, [r4, #0]
    db88:	2004      	movs	r0, #4
    db8a:	70a0      	strb	r0, [r4, #2]
    db8c:	7908      	ldrb	r0, [r1, #4]
    db8e:	70e0      	strb	r0, [r4, #3]
    db90:	7988      	ldrb	r0, [r1, #6]
    db92:	7120      	strb	r0, [r4, #4]
    db94:	88c8      	ldrh	r0, [r1, #6]
    db96:	0a00      	lsrs	r0, r0, #8
    db98:	7160      	strb	r0, [r4, #5]
    db9a:	6888      	ldr	r0, [r1, #8]
    db9c:	f8c4 0006 	str.w	r0, [r4, #6]
    dba0:	68c8      	ldr	r0, [r1, #12]
    dba2:	f8c4 000a 	str.w	r0, [r4, #10]
    dba6:	200c      	movs	r0, #12
    dba8:	e0bc      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    dbaa:	e127      	b.n	ddfc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x44c>
    dbac:	e0fb      	b.n	dda6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3f6>
    dbae:	e0dc      	b.n	dd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ba>
    dbb0:	e107      	b.n	ddc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x412>
    dbb2:	e115      	b.n	dde0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x430>
    dbb4:	e0ce      	b.n	dd54 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    dbb6:	e0b9      	b.n	dd2c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x37c>
    dbb8:	e0bd      	b.n	dd36 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x386>
    dbba:	e05f      	b.n	dc7c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2cc>
    dbbc:	e05b      	b.n	dc76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c6>
    dbbe:	e070      	b.n	dca2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    dbc0:	e06a      	b.n	dc98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2e8>
    dbc2:	e04d      	b.n	dc60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b0>
    dbc4:	e041      	b.n	dc4a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29a>
    dbc6:	e034      	b.n	dc32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x282>
    dbc8:	e030      	b.n	dc2c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27c>
    dbca:	e01b      	b.n	dc04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x254>
    dbcc:	e000      	b.n	dbd0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x220>
    dbce:	e071      	b.n	dcb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    dbd0:	7022      	strb	r2, [r4, #0]
    dbd2:	2003      	movs	r0, #3
    dbd4:	70a0      	strb	r0, [r4, #2]
    dbd6:	7908      	ldrb	r0, [r1, #4]
    dbd8:	70e0      	strb	r0, [r4, #3]
    dbda:	7988      	ldrb	r0, [r1, #6]
    dbdc:	7120      	strb	r0, [r4, #4]
    dbde:	88c8      	ldrh	r0, [r1, #6]
    dbe0:	0a00      	lsrs	r0, r0, #8
    dbe2:	7160      	strb	r0, [r4, #5]
    dbe4:	7a08      	ldrb	r0, [r1, #8]
    dbe6:	71a0      	strb	r0, [r4, #6]
    dbe8:	8908      	ldrh	r0, [r1, #8]
    dbea:	0a00      	lsrs	r0, r0, #8
    dbec:	71e0      	strb	r0, [r4, #7]
    dbee:	7a88      	ldrb	r0, [r1, #10]
    dbf0:	7220      	strb	r0, [r4, #8]
    dbf2:	8948      	ldrh	r0, [r1, #10]
    dbf4:	0a00      	lsrs	r0, r0, #8
    dbf6:	7260      	strb	r0, [r4, #9]
    dbf8:	7b08      	ldrb	r0, [r1, #12]
    dbfa:	72a0      	strb	r0, [r4, #10]
    dbfc:	8988      	ldrh	r0, [r1, #12]
    dbfe:	0a00      	lsrs	r0, r0, #8
    dc00:	72e0      	strb	r0, [r4, #11]
    dc02:	e0eb      	b.n	dddc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x42c>
    dc04:	7022      	strb	r2, [r4, #0]
    dc06:	f884 e002 	strb.w	lr, [r4, #2]
    dc0a:	7908      	ldrb	r0, [r1, #4]
    dc0c:	70e0      	strb	r0, [r4, #3]
    dc0e:	8888      	ldrh	r0, [r1, #4]
    dc10:	0a00      	lsrs	r0, r0, #8
    dc12:	7120      	strb	r0, [r4, #4]
    dc14:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dc18:	f8c4 0005 	str.w	r0, [r4, #5]
    dc1c:	f8d1 000a 	ldr.w	r0, [r1, #10]
    dc20:	f8c4 0009 	str.w	r0, [r4, #9]
    dc24:	89c8      	ldrh	r0, [r1, #14]
    dc26:	f8a4 000d 	strh.w	r0, [r4, #13]
    dc2a:	e0fc      	b.n	de26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x476>
    dc2c:	f884 b000 	strb.w	fp, [r4]
    dc30:	e039      	b.n	dca6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    dc32:	f884 e000 	strb.w	lr, [r4]
    dc36:	7908      	ldrb	r0, [r1, #4]
    dc38:	70a0      	strb	r0, [r4, #2]
    dc3a:	7948      	ldrb	r0, [r1, #5]
    dc3c:	70e0      	strb	r0, [r4, #3]
    dc3e:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    dc42:	0a00      	lsrs	r0, r0, #8
    dc44:	7120      	strb	r0, [r4, #4]
    dc46:	79c8      	ldrb	r0, [r1, #7]
    dc48:	e08c      	b.n	dd64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b4>
    dc4a:	2008      	movs	r0, #8
    dc4c:	7020      	strb	r0, [r4, #0]
    dc4e:	7908      	ldrb	r0, [r1, #4]
    dc50:	70a0      	strb	r0, [r4, #2]
    dc52:	7988      	ldrb	r0, [r1, #6]
    dc54:	70e0      	strb	r0, [r4, #3]
    dc56:	88c8      	ldrh	r0, [r1, #6]
    dc58:	0a00      	lsrs	r0, r0, #8
    dc5a:	7120      	strb	r0, [r4, #4]
    dc5c:	7a08      	ldrb	r0, [r1, #8]
    dc5e:	e081      	b.n	dd64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b4>
    dc60:	2030      	movs	r0, #48	; 0x30
    dc62:	7020      	strb	r0, [r4, #0]
    dc64:	7908      	ldrb	r0, [r1, #4]
    dc66:	70a0      	strb	r0, [r4, #2]
    dc68:	7988      	ldrb	r0, [r1, #6]
    dc6a:	70e0      	strb	r0, [r4, #3]
    dc6c:	88c8      	ldrh	r0, [r1, #6]
    dc6e:	0a00      	lsrs	r0, r0, #8
    dc70:	7120      	strb	r0, [r4, #4]
    dc72:	2003      	movs	r0, #3
    dc74:	e056      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    dc76:	7022      	strb	r2, [r4, #0]
    dc78:	2007      	movs	r0, #7
    dc7a:	e078      	b.n	dd6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3be>
    dc7c:	7022      	strb	r2, [r4, #0]
    dc7e:	f884 9002 	strb.w	r9, [r4, #2]
    dc82:	7908      	ldrb	r0, [r1, #4]
    dc84:	70e0      	strb	r0, [r4, #3]
    dc86:	7988      	ldrb	r0, [r1, #6]
    dc88:	7120      	strb	r0, [r4, #4]
    dc8a:	88c8      	ldrh	r0, [r1, #6]
    dc8c:	0a00      	lsrs	r0, r0, #8
    dc8e:	7160      	strb	r0, [r4, #5]
    dc90:	7a08      	ldrb	r0, [r1, #8]
    dc92:	71a0      	strb	r0, [r4, #6]
    dc94:	7a48      	ldrb	r0, [r1, #9]
    dc96:	e05a      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x39e>
    dc98:	4620      	mov	r0, r4
    dc9a:	1d09      	adds	r1, r1, #4
    dc9c:	f7f6 fdb2 	bl	4804 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    dca0:	e03e      	b.n	dd20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    dca2:	2057      	movs	r0, #87	; 0x57
    dca4:	7020      	strb	r0, [r4, #0]
    dca6:	7908      	ldrb	r0, [r1, #4]
    dca8:	70a0      	strb	r0, [r4, #2]
    dcaa:	8888      	ldrh	r0, [r1, #4]
    dcac:	0a00      	lsrs	r0, r0, #8
    dcae:	70e0      	strb	r0, [r4, #3]
    dcb0:	2002      	movs	r0, #2
    dcb2:	e037      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    dcb4:	7022      	strb	r2, [r4, #0]
    dcb6:	220d      	movs	r2, #13
    dcb8:	70a2      	strb	r2, [r4, #2]
    dcba:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    dcbe:	70e2      	strb	r2, [r4, #3]
    dcc0:	894a      	ldrh	r2, [r1, #10]
    dcc2:	80a2      	strh	r2, [r4, #4]
    dcc4:	784a      	ldrb	r2, [r1, #1]
    dcc6:	71a2      	strb	r2, [r4, #6]
    dcc8:	f8d1 2002 	ldr.w	r2, [r1, #2]
    dccc:	f8c4 2007 	str.w	r2, [r4, #7]
    dcd0:	88ca      	ldrh	r2, [r1, #6]
    dcd2:	f8a4 200b 	strh.w	r2, [r4, #11]
    dcd6:	7b0a      	ldrb	r2, [r1, #12]
    dcd8:	4620      	mov	r0, r4
    dcda:	7362      	strb	r2, [r4, #13]
    dcdc:	7b4a      	ldrb	r2, [r1, #13]
    dcde:	7382      	strb	r2, [r0, #14]
    dce0:	7b8a      	ldrb	r2, [r1, #14]
    dce2:	73c2      	strb	r2, [r0, #15]
    dce4:	7e8a      	ldrb	r2, [r1, #26]
    dce6:	7402      	strb	r2, [r0, #16]
    dce8:	7a4a      	ldrb	r2, [r1, #9]
    dcea:	7442      	strb	r2, [r0, #17]
    dcec:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    dcf0:	f8ad 2000 	strh.w	r2, [sp]
    dcf4:	8242      	strh	r2, [r0, #18]
    dcf6:	7cca      	ldrb	r2, [r1, #19]
    dcf8:	7502      	strb	r2, [r0, #20]
    dcfa:	694a      	ldr	r2, [r1, #20]
    dcfc:	f8c0 2015 	str.w	r2, [r0, #21]
    dd00:	8b0a      	ldrh	r2, [r1, #24]
    dd02:	f8a0 2019 	strh.w	r2, [r0, #25]
    dd06:	7a0a      	ldrb	r2, [r1, #8]
    dd08:	76c2      	strb	r2, [r0, #27]
    dd0a:	7a0d      	ldrb	r5, [r1, #8]
    dd0c:	2de5      	cmp	r5, #229	; 0xe5
    dd0e:	d300      	bcc.n	dd12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x362>
    dd10:	25e5      	movs	r5, #229	; 0xe5
    dd12:	462a      	mov	r2, r5
    dd14:	301c      	adds	r0, #28
    dd16:	311c      	adds	r1, #28
    dd18:	f7ff fc8f 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd1c:	351a      	adds	r5, #26
    dd1e:	b2e8      	uxtb	r0, r5
    dd20:	2800      	cmp	r0, #0
    dd22:	d001      	beq.n	dd28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x378>
    dd24:	7060      	strb	r0, [r4, #1]
    dd26:	1c80      	adds	r0, r0, #2
    dd28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd2c:	7022      	strb	r2, [r4, #0]
    dd2e:	f884 b002 	strb.w	fp, [r4, #2]
    dd32:	4650      	mov	r0, sl
    dd34:	e7f6      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    dd36:	7022      	strb	r2, [r4, #0]
    dd38:	70a7      	strb	r7, [r4, #2]
    dd3a:	7908      	ldrb	r0, [r1, #4]
    dd3c:	70e0      	strb	r0, [r4, #3]
    dd3e:	7948      	ldrb	r0, [r1, #5]
    dd40:	7120      	strb	r0, [r4, #4]
    dd42:	7988      	ldrb	r0, [r1, #6]
    dd44:	7160      	strb	r0, [r4, #5]
    dd46:	88c8      	ldrh	r0, [r1, #6]
    dd48:	0a00      	lsrs	r0, r0, #8
    dd4a:	71a0      	strb	r0, [r4, #6]
    dd4c:	7a08      	ldrb	r0, [r1, #8]
    dd4e:	71e0      	strb	r0, [r4, #7]
    dd50:	2006      	movs	r0, #6
    dd52:	e7e7      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    dd54:	7025      	strb	r5, [r4, #0]
    dd56:	20a1      	movs	r0, #161	; 0xa1
    dd58:	70a0      	strb	r0, [r4, #2]
    dd5a:	7908      	ldrb	r0, [r1, #4]
    dd5c:	70e0      	strb	r0, [r4, #3]
    dd5e:	7948      	ldrb	r0, [r1, #5]
    dd60:	7120      	strb	r0, [r4, #4]
    dd62:	2000      	movs	r0, #0
    dd64:	7160      	strb	r0, [r4, #5]
    dd66:	2004      	movs	r0, #4
    dd68:	e7dc      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    dd6a:	7025      	strb	r5, [r4, #0]
    dd6c:	20a2      	movs	r0, #162	; 0xa2
    dd6e:	70a0      	strb	r0, [r4, #2]
    dd70:	7908      	ldrb	r0, [r1, #4]
    dd72:	70e0      	strb	r0, [r4, #3]
    dd74:	8888      	ldrh	r0, [r1, #4]
    dd76:	0a00      	lsrs	r0, r0, #8
    dd78:	7120      	strb	r0, [r4, #4]
    dd7a:	7988      	ldrb	r0, [r1, #6]
    dd7c:	7160      	strb	r0, [r4, #5]
    dd7e:	88c8      	ldrh	r0, [r1, #6]
    dd80:	0a00      	lsrs	r0, r0, #8
    dd82:	71a0      	strb	r0, [r4, #6]
    dd84:	7a08      	ldrb	r0, [r1, #8]
    dd86:	71e0      	strb	r0, [r4, #7]
    dd88:	8908      	ldrh	r0, [r1, #8]
    dd8a:	0a00      	lsrs	r0, r0, #8
    dd8c:	7220      	strb	r0, [r4, #8]
    dd8e:	7a88      	ldrb	r0, [r1, #10]
    dd90:	7260      	strb	r0, [r4, #9]
    dd92:	8948      	ldrh	r0, [r1, #10]
    dd94:	0a00      	lsrs	r0, r0, #8
    dd96:	72a0      	strb	r0, [r4, #10]
    dd98:	7b08      	ldrb	r0, [r1, #12]
    dd9a:	72e0      	strb	r0, [r4, #11]
    dd9c:	8988      	ldrh	r0, [r1, #12]
    dd9e:	0a00      	lsrs	r0, r0, #8
    dda0:	7320      	strb	r0, [r4, #12]
    dda2:	200b      	movs	r0, #11
    dda4:	e7be      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    dda6:	7025      	strb	r5, [r4, #0]
    dda8:	20a3      	movs	r0, #163	; 0xa3
    ddaa:	70a0      	strb	r0, [r4, #2]
    ddac:	7908      	ldrb	r0, [r1, #4]
    ddae:	70e0      	strb	r0, [r4, #3]
    ddb0:	8888      	ldrh	r0, [r1, #4]
    ddb2:	0a00      	lsrs	r0, r0, #8
    ddb4:	7120      	strb	r0, [r4, #4]
    ddb6:	7988      	ldrb	r0, [r1, #6]
    ddb8:	7160      	strb	r0, [r4, #5]
    ddba:	79c8      	ldrb	r0, [r1, #7]
    ddbc:	71a0      	strb	r0, [r4, #6]
    ddbe:	2005      	movs	r0, #5
    ddc0:	e7b0      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    ddc2:	7022      	strb	r2, [r4, #0]
    ddc4:	70a6      	strb	r6, [r4, #2]
    ddc6:	7908      	ldrb	r0, [r1, #4]
    ddc8:	70e0      	strb	r0, [r4, #3]
    ddca:	7948      	ldrb	r0, [r1, #5]
    ddcc:	7120      	strb	r0, [r4, #4]
    ddce:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ddd2:	f8c4 0005 	str.w	r0, [r4, #5]
    ddd6:	8948      	ldrh	r0, [r1, #10]
    ddd8:	f8a4 0009 	strh.w	r0, [r4, #9]
    dddc:	200a      	movs	r0, #10
    ddde:	e7a1      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    dde0:	7025      	strb	r5, [r4, #0]
    dde2:	20a4      	movs	r0, #164	; 0xa4
    dde4:	70a0      	strb	r0, [r4, #2]
    dde6:	7908      	ldrb	r0, [r1, #4]
    dde8:	70e0      	strb	r0, [r4, #3]
    ddea:	8888      	ldrh	r0, [r1, #4]
    ddec:	0a00      	lsrs	r0, r0, #8
    ddee:	7120      	strb	r0, [r4, #4]
    ddf0:	7988      	ldrb	r0, [r1, #6]
    ddf2:	7160      	strb	r0, [r4, #5]
    ddf4:	79c8      	ldrb	r0, [r1, #7]
    ddf6:	71a0      	strb	r0, [r4, #6]
    ddf8:	2007      	movs	r0, #7
    ddfa:	e793      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    ddfc:	7025      	strb	r5, [r4, #0]
    ddfe:	2080      	movs	r0, #128	; 0x80
    de00:	70a0      	strb	r0, [r4, #2]
    de02:	888a      	ldrh	r2, [r1, #4]
    de04:	f8a4 2003 	strh.w	r2, [r4, #3]
    de08:	88ca      	ldrh	r2, [r1, #6]
    de0a:	f8a4 2005 	strh.w	r2, [r4, #5]
    de0e:	7a0a      	ldrb	r2, [r1, #8]
    de10:	71e2      	strb	r2, [r4, #7]
    de12:	894a      	ldrh	r2, [r1, #10]
    de14:	8122      	strh	r2, [r4, #8]
    de16:	898a      	ldrh	r2, [r1, #12]
    de18:	8162      	strh	r2, [r4, #10]
    de1a:	89ca      	ldrh	r2, [r1, #14]
    de1c:	81a2      	strh	r2, [r4, #12]
    de1e:	7c09      	ldrb	r1, [r1, #16]
    de20:	f001 0101 	and.w	r1, r1, #1
    de24:	73a1      	strb	r1, [r4, #14]
    de26:	200d      	movs	r0, #13
    de28:	e77c      	b.n	dd24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>

0000de2a <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    de2a:	223e      	movs	r2, #62	; 0x3e
    de2c:	7002      	strb	r2, [r0, #0]
    de2e:	2201      	movs	r2, #1
    de30:	7082      	strb	r2, [r0, #2]
    de32:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    de36:	70c2      	strb	r2, [r0, #3]
    de38:	788a      	ldrb	r2, [r1, #2]
    de3a:	7102      	strb	r2, [r0, #4]
    de3c:	884a      	ldrh	r2, [r1, #2]
    de3e:	0a12      	lsrs	r2, r2, #8
    de40:	7142      	strb	r2, [r0, #5]
    de42:	790a      	ldrb	r2, [r1, #4]
    de44:	7182      	strb	r2, [r0, #6]
    de46:	794a      	ldrb	r2, [r1, #5]
    de48:	71c2      	strb	r2, [r0, #7]
    de4a:	f8d1 2006 	ldr.w	r2, [r1, #6]
    de4e:	6082      	str	r2, [r0, #8]
    de50:	894a      	ldrh	r2, [r1, #10]
    de52:	8182      	strh	r2, [r0, #12]
    de54:	7e0a      	ldrb	r2, [r1, #24]
    de56:	7382      	strb	r2, [r0, #14]
    de58:	8b0a      	ldrh	r2, [r1, #24]
    de5a:	0a12      	lsrs	r2, r2, #8
    de5c:	73c2      	strb	r2, [r0, #15]
    de5e:	7e8a      	ldrb	r2, [r1, #26]
    de60:	7402      	strb	r2, [r0, #16]
    de62:	8b4a      	ldrh	r2, [r1, #26]
    de64:	0a12      	lsrs	r2, r2, #8
    de66:	7442      	strb	r2, [r0, #17]
    de68:	7f0a      	ldrb	r2, [r1, #28]
    de6a:	7482      	strb	r2, [r0, #18]
    de6c:	8b8a      	ldrh	r2, [r1, #28]
    de6e:	0a12      	lsrs	r2, r2, #8
    de70:	74c2      	strb	r2, [r0, #19]
    de72:	7f89      	ldrb	r1, [r1, #30]
    de74:	7501      	strb	r1, [r0, #20]
    de76:	2113      	movs	r1, #19
    de78:	7041      	strb	r1, [r0, #1]
    de7a:	4608      	mov	r0, r1
    de7c:	4770      	bx	lr
    de7e:	094a      	lsrs	r2, r1, #5
    de80:	f001 011f 	and.w	r1, r1, #31
    de84:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    de88:	40c8      	lsrs	r0, r1
    de8a:	f000 0001 	and.w	r0, r0, #1
    de8e:	4770      	bx	lr

0000de90 <sdc_hci_data_get>:
    de90:	b510      	push	{r4, lr}
    de92:	b120      	cbz	r0, de9e <sdc_hci_data_get+0xe>
    de94:	f7ff fd0a 	bl	d8ac <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    de98:	b120      	cbz	r0, dea4 <sdc_hci_data_get+0x14>
    de9a:	2000      	movs	r0, #0
    de9c:	bd10      	pop	{r4, pc}
    de9e:	f06f 0015 	mvn.w	r0, #21
    dea2:	bd10      	pop	{r4, pc}
    dea4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dea8:	bd10      	pop	{r4, pc}

0000deaa <sdc_hci_data_put>:
    deaa:	b510      	push	{r4, lr}
    deac:	f06f 0415 	mvn.w	r4, #21
    deb0:	b120      	cbz	r0, debc <sdc_hci_data_put+0x12>
    deb2:	f7ff fd09 	bl	d8c8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    deb6:	b108      	cbz	r0, debc <sdc_hci_data_put+0x12>
    deb8:	2000      	movs	r0, #0
    deba:	bd10      	pop	{r4, pc}
    debc:	4620      	mov	r0, r4
    debe:	bd10      	pop	{r4, pc}

0000dec0 <sdc_hci_evt_get>:
    dec0:	b510      	push	{r4, lr}
    dec2:	b120      	cbz	r0, dece <sdc_hci_evt_get+0xe>
    dec4:	f7ff fd09 	bl	d8da <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    dec8:	b120      	cbz	r0, ded4 <sdc_hci_evt_get+0x14>
    deca:	2000      	movs	r0, #0
    decc:	bd10      	pop	{r4, pc}
    dece:	f06f 0015 	mvn.w	r0, #21
    ded2:	bd10      	pop	{r4, pc}
    ded4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ded8:	bd10      	pop	{r4, pc}

0000deda <sdc_hci_get>:
    deda:	b118      	cbz	r0, dee4 <sdc_hci_get+0xa>
    dedc:	b111      	cbz	r1, dee4 <sdc_hci_get+0xa>
    dede:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dee2:	4770      	bx	lr
    dee4:	f06f 0015 	mvn.w	r0, #21
    dee8:	4770      	bx	lr

0000deea <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    deea:	f002 ba5f 	b.w	103ac <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000deee <sdc_hci_cmd_cb_read_transmit_power_level>:
    deee:	f002 baaa 	b.w	10446 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000def2 <sdc_hci_cmd_cb_set_event_mask>:
    def2:	b510      	push	{r4, lr}
    def4:	f7f6 fcd6 	bl	48a4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    def8:	2000      	movs	r0, #0
    defa:	bd10      	pop	{r4, pc}

0000defc <sdc_hci_cmd_cb_set_event_mask_page_2>:
    defc:	b510      	push	{r4, lr}
    defe:	f7f6 fce1 	bl	48c4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    df02:	2000      	movs	r0, #0
    df04:	bd10      	pop	{r4, pc}

0000df06 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    df06:	f002 baba 	b.w	1047e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000df0a <sdc_hci_cmd_vs_conn_event_extend>:
    df0a:	b508      	push	{r3, lr}
    df0c:	7800      	ldrb	r0, [r0, #0]
    df0e:	f88d 0000 	strb.w	r0, [sp]
    df12:	4668      	mov	r0, sp
    df14:	f002 fa26 	bl	10364 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    df18:	bd08      	pop	{r3, pc}

0000df1a <sdc_hci_cmd_vs_conn_update>:
    df1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    df1c:	2100      	movs	r1, #0
    df1e:	9100      	str	r1, [sp, #0]
    df20:	9101      	str	r1, [sp, #4]
    df22:	9102      	str	r1, [sp, #8]
    df24:	9103      	str	r1, [sp, #12]
    df26:	f8d0 1002 	ldr.w	r1, [r0, #2]
    df2a:	f641 524c 	movw	r2, #7500	; 0x1d4c
    df2e:	4291      	cmp	r1, r2
    df30:	d304      	bcc.n	df3c <sdc_hci_cmd_vs_conn_update+0x22>
    df32:	f240 42e2 	movw	r2, #1250	; 0x4e2
    df36:	fbb1 f1f2 	udiv	r1, r1, r2
    df3a:	e005      	b.n	df48 <sdc_hci_cmd_vs_conn_update+0x2e>
    df3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    df40:	fbb1 f1f2 	udiv	r1, r1, r2
    df44:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    df48:	8802      	ldrh	r2, [r0, #0]
    df4a:	b289      	uxth	r1, r1
    df4c:	f8ad 2000 	strh.w	r2, [sp]
    df50:	f8ad 1002 	strh.w	r1, [sp, #2]
    df54:	f8ad 1004 	strh.w	r1, [sp, #4]
    df58:	88c1      	ldrh	r1, [r0, #6]
    df5a:	f8ad 1006 	strh.w	r1, [sp, #6]
    df5e:	8900      	ldrh	r0, [r0, #8]
    df60:	f8ad 0008 	strh.w	r0, [sp, #8]
    df64:	4668      	mov	r0, sp
    df66:	f001 ffe5 	bl	ff34 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    df6a:	b004      	add	sp, #16
    df6c:	bd10      	pop	{r4, pc}

0000df6e <sdc_hci_cmd_vs_event_length_set>:
    df6e:	f7fd ba41 	b.w	b3f4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000df72 <sdc_hci_cmd_vs_llpm_mode_set>:
    df72:	2001      	movs	r0, #1
    df74:	4770      	bx	lr

0000df76 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    df76:	7800      	ldrb	r0, [r0, #0]
    df78:	b100      	cbz	r0, df7c <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    df7a:	2001      	movs	r0, #1
    df7c:	f002 b9d1 	b.w	10322 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000df80 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    df80:	b570      	push	{r4, r5, r6, lr}
    df82:	4605      	mov	r5, r0
    df84:	2210      	movs	r2, #16
    df86:	2100      	movs	r1, #0
    df88:	f7ff fbd1 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    df8c:	2210      	movs	r2, #16
    df8e:	2100      	movs	r1, #0
    df90:	f105 0010 	add.w	r0, r5, #16
    df94:	f7ff fbcb 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    df98:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    df9c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    dfa0:	1c40      	adds	r0, r0, #1
    dfa2:	d10b      	bne.n	dfbc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    dfa4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    dfa8:	1c40      	adds	r0, r0, #1
    dfaa:	d107      	bne.n	dfbc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    dfac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    dfb0:	1c40      	adds	r0, r0, #1
    dfb2:	d103      	bne.n	dfbc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    dfb4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    dfb8:	1c40      	adds	r0, r0, #1
    dfba:	d00b      	beq.n	dfd4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    dfbc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    dfc0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    dfc4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    dfc8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    dfcc:	612a      	str	r2, [r5, #16]
    dfce:	6168      	str	r0, [r5, #20]
    dfd0:	61a9      	str	r1, [r5, #24]
    dfd2:	61eb      	str	r3, [r5, #28]
    dfd4:	2000      	movs	r0, #0
    dfd6:	f7f7 f913 	bl	5200 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    dfda:	b918      	cbnz	r0, dfe4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    dfdc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    dfe0:	07c0      	lsls	r0, r0, #31
    dfe2:	d118      	bne.n	e016 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    dfe4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    dfe8:	1c40      	adds	r0, r0, #1
    dfea:	d10b      	bne.n	e004 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    dfec:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    dff0:	1c40      	adds	r0, r0, #1
    dff2:	d107      	bne.n	e004 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    dff4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    dff8:	1c40      	adds	r0, r0, #1
    dffa:	d103      	bne.n	e004 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    dffc:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e000:	1c40      	adds	r0, r0, #1
    e002:	d008      	beq.n	e016 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e004:	f854 0f90 	ldr.w	r0, [r4, #144]!
    e008:	6861      	ldr	r1, [r4, #4]
    e00a:	68a2      	ldr	r2, [r4, #8]
    e00c:	68e3      	ldr	r3, [r4, #12]
    e00e:	6028      	str	r0, [r5, #0]
    e010:	6069      	str	r1, [r5, #4]
    e012:	60aa      	str	r2, [r5, #8]
    e014:	60eb      	str	r3, [r5, #12]
    e016:	2000      	movs	r0, #0
    e018:	bd70      	pop	{r4, r5, r6, pc}

0000e01a <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    e01a:	b538      	push	{r3, r4, r5, lr}
    e01c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    e020:	4604      	mov	r4, r0
    e022:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e026:	1c40      	adds	r0, r0, #1
    e028:	d105      	bne.n	e036 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    e02a:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    e02e:	43c0      	mvns	r0, r0
    e030:	0400      	lsls	r0, r0, #16
    e032:	0c00      	lsrs	r0, r0, #16
    e034:	d03e      	beq.n	e0b4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e036:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    e03a:	07c0      	lsls	r0, r0, #31
    e03c:	d03a      	beq.n	e0b4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e03e:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e042:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    e046:	f8ad 1000 	strh.w	r1, [sp]
    e04a:	f8c4 0001 	str.w	r0, [r4, #1]
    e04e:	f8bd 0000 	ldrh.w	r0, [sp]
    e052:	f8a4 0005 	strh.w	r0, [r4, #5]
    e056:	79a0      	ldrb	r0, [r4, #6]
    e058:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    e05c:	71a0      	strb	r0, [r4, #6]
    e05e:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    e062:	1c40      	adds	r0, r0, #1
    e064:	d00f      	beq.n	e086 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e066:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    e06a:	1c40      	adds	r0, r0, #1
    e06c:	d00b      	beq.n	e086 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e06e:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    e072:	1c40      	adds	r0, r0, #1
    e074:	d007      	beq.n	e086 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e076:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    e07a:	1c40      	adds	r0, r0, #1
    e07c:	d003      	beq.n	e086 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e07e:	2000      	movs	r0, #0
    e080:	f7f7 f8be 	bl	5200 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    e084:	b140      	cbz	r0, e098 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    e086:	2210      	movs	r2, #16
    e088:	2100      	movs	r1, #0
    e08a:	1de0      	adds	r0, r4, #7
    e08c:	f7ff fb4f 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e090:	2001      	movs	r0, #1
    e092:	7020      	strb	r0, [r4, #0]
    e094:	2000      	movs	r0, #0
    e096:	bd38      	pop	{r3, r4, r5, pc}
    e098:	f855 2f90 	ldr.w	r2, [r5, #144]!
    e09c:	6869      	ldr	r1, [r5, #4]
    e09e:	68a8      	ldr	r0, [r5, #8]
    e0a0:	68eb      	ldr	r3, [r5, #12]
    e0a2:	f8c4 2007 	str.w	r2, [r4, #7]
    e0a6:	f8c4 100b 	str.w	r1, [r4, #11]
    e0aa:	f8c4 000f 	str.w	r0, [r4, #15]
    e0ae:	f8c4 3013 	str.w	r3, [r4, #19]
    e0b2:	e7ed      	b.n	e090 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    e0b4:	2000      	movs	r0, #0
    e0b6:	e7ec      	b.n	e092 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000e0b8 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    e0b8:	f002 b946 	b.w	10348 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000e0bc <sdc_hci_cmd_ip_read_bd_addr>:
    e0bc:	f002 b987 	b.w	103ce <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000e0c0 <sdc_hci_cmd_ip_read_local_version_information>:
    e0c0:	f7fd b9ea 	b.w	b498 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000e0c4 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    e0c4:	f001 bf08 	b.w	fed8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000e0c8 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    e0c8:	f001 beeb 	b.w	fea2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000e0cc <sdc_hci_cmd_le_clear_filter_accept_list>:
    e0cc:	f001 bf28 	b.w	ff20 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000e0d0 <sdc_hci_cmd_le_clear_resolving_list>:
    e0d0:	f001 bf19 	b.w	ff06 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000e0d4 <sdc_hci_cmd_le_conn_update>:
    e0d4:	f001 bf2e 	b.w	ff34 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000e0d8 <sdc_hci_cmd_le_create_conn>:
    e0d8:	f7fc bf34 	b.w	af44 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000e0dc <sdc_hci_cmd_le_create_conn_cancel>:
    e0dc:	f001 bf6d 	b.w	ffba <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000e0e0 <sdc_hci_cmd_le_enable_encryption>:
    e0e0:	f002 b8dc 	b.w	1029c <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000e0e4 <sdc_hci_cmd_le_encrypt>:
    e0e4:	f001 bf91 	b.w	1000a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000e0e8 <sdc_hci_cmd_le_rand>:
    e0e8:	f001 bf98 	b.w	1001c <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000e0ec <sdc_hci_cmd_le_read_buffer_size>:
    e0ec:	f7fc bf84 	b.w	aff8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000e0f0 <sdc_hci_cmd_le_read_channel_map>:
    e0f0:	f7fc bf8c 	b.w	b00c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000e0f4 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    e0f4:	f001 bfc9 	b.w	1008a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000e0f8 <sdc_hci_cmd_le_read_max_data_length>:
    e0f8:	f001 bf96 	b.w	10028 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000e0fc <sdc_hci_cmd_le_read_phy>:
    e0fc:	f7fc bfae 	b.w	b05c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000e100 <sdc_hci_cmd_le_read_remote_features>:
    e100:	f001 bf9b 	b.w	1003a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000e104 <sdc_hci_cmd_le_read_resolving_list_size>:
    e104:	f001 bfb4 	b.w	10070 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000e108 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    e108:	f7fc bfce 	b.w	b0a8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000e10c <sdc_hci_cmd_le_read_transmit_power>:
    e10c:	f001 bfb4 	b.w	10078 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000e110 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    e110:	f001 bfd8 	b.w	100c4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000e114 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    e114:	f001 bfbd 	b.w	10092 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000e118 <sdc_hci_cmd_le_set_address_resolution_enable>:
    e118:	f001 bfe9 	b.w	100ee <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000e11c <sdc_hci_cmd_le_set_data_length>:
    e11c:	f001 bff5 	b.w	1010a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000e120 <sdc_hci_cmd_le_set_default_phy>:
    e120:	f7fc bfcc 	b.w	b0bc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000e124 <sdc_hci_cmd_le_set_event_mask>:
    e124:	b510      	push	{r4, lr}
    e126:	f7f6 fbb5 	bl	4894 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    e12a:	2000      	movs	r0, #0
    e12c:	bd10      	pop	{r4, pc}

0000e12e <sdc_hci_cmd_le_set_host_channel_classification>:
    e12e:	f002 b80c 	b.w	1014a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000e132 <sdc_hci_cmd_le_set_phy>:
    e132:	f002 b82a 	b.w	1018a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000e136 <sdc_hci_cmd_le_set_privacy_mode>:
    e136:	f002 b841 	b.w	101bc <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000e13a <sdc_hci_cmd_le_set_random_address>:
    e13a:	f002 b855 	b.w	101e8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000e13e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    e13e:	f002 b861 	b.w	10204 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000e142 <sdc_hci_cmd_le_set_scan_enable>:
    e142:	f002 b868 	b.w	10216 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000e146 <sdc_hci_cmd_le_set_scan_params>:
    e146:	f002 b87c 	b.w	10242 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000e14a <sdc_hci_cmd_le_write_suggested_default_data_length>:
    e14a:	f002 b8d9 	b.w	10300 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000e14e <sdc_hci_cmd_lc_disconnect>:
    e14e:	f001 be5d 	b.w	fe0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000e152 <sdc_hci_cmd_lc_read_remote_version_information>:
    e152:	f002 b948 	b.w	103e6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    e156:	b570      	push	{r4, r5, r6, lr}
    e158:	880b      	ldrh	r3, [r1, #0]
    e15a:	7f04      	ldrb	r4, [r0, #28]
    e15c:	f100 0524 	add.w	r5, r0, #36	; 0x24
    e160:	f3c3 060e 	ubfx	r6, r3, #0, #15
    e164:	8802      	ldrh	r2, [r0, #0]
    e166:	4435      	add	r5, r6
    e168:	1da4      	adds	r4, r4, #6
    e16a:	882d      	ldrh	r5, [r5, #0]
    e16c:	4422      	add	r2, r4
    e16e:	b292      	uxth	r2, r2
    e170:	4425      	add	r5, r4
    e172:	1e54      	subs	r4, r2, #1
    e174:	442c      	add	r4, r5
    e176:	fb94 f4f2 	sdiv	r4, r4, r2
    e17a:	fb02 6204 	mla	r2, r2, r4, r6
    e17e:	8840      	ldrh	r0, [r0, #2]
    e180:	b292      	uxth	r2, r2
    e182:	4290      	cmp	r0, r2
    e184:	d903      	bls.n	e18e <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    e186:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    e18a:	4310      	orrs	r0, r2
    e18c:	e002      	b.n	e194 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    e18e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e192:	4398      	bics	r0, r3
    e194:	8008      	strh	r0, [r1, #0]
    e196:	bd70      	pop	{r4, r5, r6, pc}
    e198:	0442      	lsls	r2, r0, #17
    e19a:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    e19e:	d107      	bne.n	e1b0 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    e1a0:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    e1a4:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    e1a8:	4288      	cmp	r0, r1
    e1aa:	d001      	beq.n	e1b0 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    e1ac:	2001      	movs	r0, #1
    e1ae:	4770      	bx	lr
    e1b0:	2000      	movs	r0, #0
    e1b2:	4770      	bx	lr

0000e1b4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    e1b4:	b570      	push	{r4, r5, r6, lr}
    e1b6:	7f00      	ldrb	r0, [r0, #28]
    e1b8:	461c      	mov	r4, r3
    e1ba:	1d80      	adds	r0, r0, #6
    e1bc:	4408      	add	r0, r1
    e1be:	4613      	mov	r3, r2
    e1c0:	8809      	ldrh	r1, [r1, #0]
    e1c2:	9a04      	ldr	r2, [sp, #16]
    e1c4:	1cc9      	adds	r1, r1, #3
    e1c6:	b289      	uxth	r1, r1
    e1c8:	1915      	adds	r5, r2, r4
    e1ca:	1ec0      	subs	r0, r0, #3
    e1cc:	428d      	cmp	r5, r1
    e1ce:	d805      	bhi.n	e1dc <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    e1d0:	1881      	adds	r1, r0, r2
    e1d2:	4622      	mov	r2, r4
    e1d4:	4618      	mov	r0, r3
    e1d6:	f7ff fa30 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e1da:	e000      	b.n	e1de <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    e1dc:	2400      	movs	r4, #0
    e1de:	4620      	mov	r0, r4
    e1e0:	bd70      	pop	{r4, r5, r6, pc}

0000e1e2 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    e1e2:	b570      	push	{r4, r5, r6, lr}
    e1e4:	7f00      	ldrb	r0, [r0, #28]
    e1e6:	461c      	mov	r4, r3
    e1e8:	1d80      	adds	r0, r0, #6
    e1ea:	4408      	add	r0, r1
    e1ec:	4613      	mov	r3, r2
    e1ee:	8809      	ldrh	r1, [r1, #0]
    e1f0:	9a04      	ldr	r2, [sp, #16]
    e1f2:	1cc9      	adds	r1, r1, #3
    e1f4:	b289      	uxth	r1, r1
    e1f6:	1915      	adds	r5, r2, r4
    e1f8:	1ec0      	subs	r0, r0, #3
    e1fa:	428d      	cmp	r5, r1
    e1fc:	d805      	bhi.n	e20a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    e1fe:	4410      	add	r0, r2
    e200:	4622      	mov	r2, r4
    e202:	4619      	mov	r1, r3
    e204:	f7ff fa19 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e208:	e000      	b.n	e20c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    e20a:	2400      	movs	r4, #0
    e20c:	4620      	mov	r0, r4
    e20e:	bd70      	pop	{r4, r5, r6, pc}

0000e210 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    e210:	8881      	ldrh	r1, [r0, #4]
    e212:	88c0      	ldrh	r0, [r0, #6]
    e214:	4288      	cmp	r0, r1
    e216:	d101      	bne.n	e21c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    e218:	2001      	movs	r0, #1
    e21a:	4770      	bx	lr
    e21c:	2000      	movs	r0, #0
    e21e:	4770      	bx	lr

0000e220 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    e220:	8881      	ldrh	r1, [r0, #4]
    e222:	8900      	ldrh	r0, [r0, #8]
    e224:	4288      	cmp	r0, r1
    e226:	d101      	bne.n	e22c <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    e228:	2001      	movs	r0, #1
    e22a:	4770      	bx	lr
    e22c:	2000      	movs	r0, #0
    e22e:	4770      	bx	lr

0000e230 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    e230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e234:	460f      	mov	r7, r1
    e236:	4604      	mov	r4, r0
    e238:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e23c:	8880      	ldrh	r0, [r0, #4]
    e23e:	2600      	movs	r6, #0
    e240:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e244:	1845      	adds	r5, r0, r1
    e246:	603e      	str	r6, [r7, #0]
    e248:	8a20      	ldrh	r0, [r4, #16]
    e24a:	2800      	cmp	r0, #0
    e24c:	d01a      	beq.n	e284 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
    e24e:	89a1      	ldrh	r1, [r4, #12]
    e250:	4408      	add	r0, r1
    e252:	b280      	uxth	r0, r0
    e254:	81a0      	strh	r0, [r4, #12]
    e256:	8829      	ldrh	r1, [r5, #0]
    e258:	4288      	cmp	r0, r1
    e25a:	d905      	bls.n	e268 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    e25c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e260:	f04f 0014 	mov.w	r0, #20
    e264:	f7f6 f9a8 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e268:	d10a      	bne.n	e280 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
    e26a:	69a0      	ldr	r0, [r4, #24]
    e26c:	b108      	cbz	r0, e272 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x42>
    e26e:	7f40      	ldrb	r0, [r0, #29]
    e270:	70a8      	strb	r0, [r5, #2]
    e272:	f104 0104 	add.w	r1, r4, #4
    e276:	4620      	mov	r0, r4
    e278:	f7ff ff6d 	bl	e156 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e27c:	81a6      	strh	r6, [r4, #12]
    e27e:	603d      	str	r5, [r7, #0]
    e280:	8226      	strh	r6, [r4, #16]
    e282:	2001      	movs	r0, #1
    e284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e288 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    e288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e28a:	4604      	mov	r4, r0
    e28c:	f100 0324 	add.w	r3, r0, #36	; 0x24
    e290:	88c0      	ldrh	r0, [r0, #6]
    e292:	460e      	mov	r6, r1
    e294:	f3c0 070e 	ubfx	r7, r0, #0, #15
    e298:	8a60      	ldrh	r0, [r4, #18]
    e29a:	19d9      	adds	r1, r3, r7
    e29c:	b108      	cbz	r0, e2a2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    e29e:	42b0      	cmp	r0, r6
    e2a0:	d201      	bcs.n	e2a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    e2a2:	2000      	movs	r0, #0
    e2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2a6:	89e0      	ldrh	r0, [r4, #14]
    e2a8:	2500      	movs	r5, #0
    e2aa:	b140      	cbz	r0, e2be <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    e2ac:	f8b1 c000 	ldrh.w	ip, [r1]
    e2b0:	4560      	cmp	r0, ip
    e2b2:	d008      	beq.n	e2c6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    e2b4:	f240 2151 	movw	r1, #593	; 0x251
    e2b8:	2014      	movs	r0, #20
    e2ba:	f7f6 f97d 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2be:	7f60      	ldrb	r0, [r4, #29]
    e2c0:	7088      	strb	r0, [r1, #2]
    e2c2:	800d      	strh	r5, [r1, #0]
    e2c4:	e00e      	b.n	e2e4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    e2c6:	f894 c01c 	ldrb.w	ip, [r4, #28]
    e2ca:	4418      	add	r0, r3
    e2cc:	f10c 0c06 	add.w	ip, ip, #6
    e2d0:	44bc      	add	ip, r7
    e2d2:	4460      	add	r0, ip
    e2d4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    e2d8:	f820 cc03 	strh.w	ip, [r0, #-3]
    e2dc:	f894 c020 	ldrb.w	ip, [r4, #32]
    e2e0:	f800 cc01 	strb.w	ip, [r0, #-1]
    e2e4:	89e0      	ldrh	r0, [r4, #14]
    e2e6:	4430      	add	r0, r6
    e2e8:	81e0      	strh	r0, [r4, #14]
    e2ea:	8808      	ldrh	r0, [r1, #0]
    e2ec:	4430      	add	r0, r6
    e2ee:	8008      	strh	r0, [r1, #0]
    e2f0:	b19a      	cbz	r2, e31a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    e2f2:	1da1      	adds	r1, r4, #6
    e2f4:	4620      	mov	r0, r4
    e2f6:	f7ff ff2e 	bl	e156 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e2fa:	81e5      	strh	r5, [r4, #14]
    e2fc:	7f60      	ldrb	r0, [r4, #29]
    e2fe:	1c40      	adds	r0, r0, #1
    e300:	7760      	strb	r0, [r4, #29]
    e302:	7da0      	ldrb	r0, [r4, #22]
    e304:	f88d 0000 	strb.w	r0, [sp]
    e308:	9800      	ldr	r0, [sp, #0]
    e30a:	9000      	str	r0, [sp, #0]
    e30c:	f89d 0000 	ldrb.w	r0, [sp]
    e310:	b178      	cbz	r0, e332 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e312:	88e0      	ldrh	r0, [r4, #6]
    e314:	82a0      	strh	r0, [r4, #20]
    e316:	75a5      	strb	r5, [r4, #22]
    e318:	e00b      	b.n	e332 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e31a:	7f20      	ldrb	r0, [r4, #28]
    e31c:	89e1      	ldrh	r1, [r4, #14]
    e31e:	1d80      	adds	r0, r0, #6
    e320:	4438      	add	r0, r7
    e322:	4419      	add	r1, r3
    e324:	4408      	add	r0, r1
    e326:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    e32a:	83e1      	strh	r1, [r4, #30]
    e32c:	7880      	ldrb	r0, [r0, #2]
    e32e:	f884 0020 	strb.w	r0, [r4, #32]
    e332:	8265      	strh	r5, [r4, #18]
    e334:	2001      	movs	r0, #1
    e336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e338 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    e338:	1cc0      	adds	r0, r0, #3
    e33a:	4770      	bx	lr

0000e33c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    e33c:	b510      	push	{r4, lr}
    e33e:	88c2      	ldrh	r2, [r0, #6]
    e340:	8943      	ldrh	r3, [r0, #10]
    e342:	f3c2 010e 	ubfx	r1, r2, #0, #15
    e346:	f3c3 040e 	ubfx	r4, r3, #0, #15
    e34a:	1a61      	subs	r1, r4, r1
    e34c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    e350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    e354:	429a      	cmp	r2, r3
    e356:	d101      	bne.n	e35c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    e358:	8842      	ldrh	r2, [r0, #2]
    e35a:	4411      	add	r1, r2
    e35c:	7f02      	ldrb	r2, [r0, #28]
    e35e:	8800      	ldrh	r0, [r0, #0]
    e360:	4410      	add	r0, r2
    e362:	1d80      	adds	r0, r0, #6
    e364:	b280      	uxth	r0, r0
    e366:	fb91 f0f0 	sdiv	r0, r1, r0
    e36a:	b280      	uxth	r0, r0
    e36c:	bd10      	pop	{r4, pc}

0000e36e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    e36e:	b510      	push	{r4, lr}
    e370:	4604      	mov	r4, r0
    e372:	88c0      	ldrh	r0, [r0, #6]
    e374:	88a1      	ldrh	r1, [r4, #4]
    e376:	4281      	cmp	r1, r0
    e378:	d007      	beq.n	e38a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e37a:	89a0      	ldrh	r0, [r4, #12]
    e37c:	b928      	cbnz	r0, e38a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e37e:	8a20      	ldrh	r0, [r4, #16]
    e380:	b918      	cbnz	r0, e38a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e382:	88a0      	ldrh	r0, [r4, #4]
    e384:	8aa1      	ldrh	r1, [r4, #20]
    e386:	4288      	cmp	r0, r1
    e388:	d101      	bne.n	e38e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    e38a:	2000      	movs	r0, #0
    e38c:	bd10      	pop	{r4, pc}
    e38e:	1d21      	adds	r1, r4, #4
    e390:	4620      	mov	r0, r4
    e392:	f7ff fee0 	bl	e156 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e396:	2000      	movs	r0, #0
    e398:	8220      	strh	r0, [r4, #16]
    e39a:	2001      	movs	r0, #1
    e39c:	bd10      	pop	{r4, pc}

0000e39e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    e39e:	b510      	push	{r4, lr}
    e3a0:	4604      	mov	r4, r0
    e3a2:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e3a6:	88c0      	ldrh	r0, [r0, #6]
    e3a8:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e3ac:	4402      	add	r2, r0
    e3ae:	8820      	ldrh	r0, [r4, #0]
    e3b0:	2845      	cmp	r0, #69	; 0x45
    e3b2:	d200      	bcs.n	e3b6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    e3b4:	2045      	movs	r0, #69	; 0x45
    e3b6:	4288      	cmp	r0, r1
    e3b8:	d204      	bcs.n	e3c4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    e3ba:	f240 1119 	movw	r1, #281	; 0x119
    e3be:	2014      	movs	r0, #20
    e3c0:	f7f6 f8fa 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3c4:	7de0      	ldrb	r0, [r4, #23]
    e3c6:	2800      	cmp	r0, #0
    e3c8:	d003      	beq.n	e3d2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    e3ca:	8810      	ldrh	r0, [r2, #0]
    e3cc:	4288      	cmp	r0, r1
    e3ce:	d201      	bcs.n	e3d4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    e3d0:	2000      	movs	r0, #0
    e3d2:	bd10      	pop	{r4, pc}
    e3d4:	8011      	strh	r1, [r2, #0]
    e3d6:	1da1      	adds	r1, r4, #6
    e3d8:	4620      	mov	r0, r4
    e3da:	f7ff febc 	bl	e156 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e3de:	2000      	movs	r0, #0
    e3e0:	75e0      	strb	r0, [r4, #23]
    e3e2:	2001      	movs	r0, #1
    e3e4:	bd10      	pop	{r4, pc}

0000e3e6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    e3e6:	b530      	push	{r4, r5, lr}
    e3e8:	88c4      	ldrh	r4, [r0, #6]
    e3ea:	8881      	ldrh	r1, [r0, #4]
    e3ec:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e3f0:	f3c1 030e 	ubfx	r3, r1, #0, #15
    e3f4:	4413      	add	r3, r2
    e3f6:	8882      	ldrh	r2, [r0, #4]
    e3f8:	8a85      	ldrh	r5, [r0, #20]
    e3fa:	42aa      	cmp	r2, r5
    e3fc:	d012      	beq.n	e424 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e3fe:	42a1      	cmp	r1, r4
    e400:	d010      	beq.n	e424 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e402:	8981      	ldrh	r1, [r0, #12]
    e404:	b971      	cbnz	r1, e424 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e406:	6982      	ldr	r2, [r0, #24]
    e408:	b172      	cbz	r2, e428 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e40a:	4610      	mov	r0, r2
    e40c:	f7ff ff08 	bl	e220 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    e410:	b950      	cbnz	r0, e428 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e412:	8910      	ldrh	r0, [r2, #8]
    e414:	3224      	adds	r2, #36	; 0x24
    e416:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e41a:	4410      	add	r0, r2
    e41c:	7899      	ldrb	r1, [r3, #2]
    e41e:	7880      	ldrb	r0, [r0, #2]
    e420:	4288      	cmp	r0, r1
    e422:	d101      	bne.n	e428 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e424:	2000      	movs	r0, #0
    e426:	bd30      	pop	{r4, r5, pc}
    e428:	4618      	mov	r0, r3
    e42a:	bd30      	pop	{r4, r5, pc}

0000e42c <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    e42c:	8803      	ldrh	r3, [r0, #0]
    e42e:	2b45      	cmp	r3, #69	; 0x45
    e430:	d200      	bcs.n	e434 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    e432:	2345      	movs	r3, #69	; 0x45
    e434:	8013      	strh	r3, [r2, #0]
    e436:	88c2      	ldrh	r2, [r0, #6]
    e438:	f3c2 030e 	ubfx	r3, r2, #0, #15
    e43c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e440:	441a      	add	r2, r3
    e442:	600a      	str	r2, [r1, #0]
    e444:	89c0      	ldrh	r0, [r0, #14]
    e446:	4770      	bx	lr

0000e448 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    e448:	7f00      	ldrb	r0, [r0, #28]
    e44a:	1d80      	adds	r0, r0, #6
    e44c:	4408      	add	r0, r1
    e44e:	1ec0      	subs	r0, r0, #3
    e450:	6010      	str	r0, [r2, #0]
    e452:	8808      	ldrh	r0, [r1, #0]
    e454:	4770      	bx	lr

0000e456 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    e456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e45a:	460e      	mov	r6, r1
    e45c:	88c1      	ldrh	r1, [r0, #6]
    e45e:	8902      	ldrh	r2, [r0, #8]
    e460:	4604      	mov	r4, r0
    e462:	f100 0824 	add.w	r8, r0, #36	; 0x24
    e466:	8800      	ldrh	r0, [r0, #0]
    e468:	f3c1 050e 	ubfx	r5, r1, #0, #15
    e46c:	f3c2 070e 	ubfx	r7, r2, #0, #15
    e470:	2845      	cmp	r0, #69	; 0x45
    e472:	d200      	bcs.n	e476 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    e474:	2045      	movs	r0, #69	; 0x45
    e476:	42b0      	cmp	r0, r6
    e478:	d203      	bcs.n	e482 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    e47a:	21db      	movs	r1, #219	; 0xdb
    e47c:	2014      	movs	r0, #20
    e47e:	f7f6 f89b 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e482:	4610      	mov	r0, r2
    e484:	f7ff fe88 	bl	e198 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e488:	b110      	cbz	r0, e490 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    e48a:	2000      	movs	r0, #0
    e48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e490:	42af      	cmp	r7, r5
    e492:	d908      	bls.n	e4a6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e494:	7f21      	ldrb	r1, [r4, #28]
    e496:	1b78      	subs	r0, r7, r5
    e498:	1a40      	subs	r0, r0, r1
    e49a:	1f80      	subs	r0, r0, #6
    e49c:	4286      	cmp	r6, r0
    e49e:	dd02      	ble.n	e4a6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e4a0:	2000      	movs	r0, #0
    e4a2:	75e0      	strb	r0, [r4, #23]
    e4a4:	e7f1      	b.n	e48a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    e4a6:	eb08 0005 	add.w	r0, r8, r5
    e4aa:	2101      	movs	r1, #1
    e4ac:	8006      	strh	r6, [r0, #0]
    e4ae:	75e1      	strb	r1, [r4, #23]
    e4b0:	e7ec      	b.n	e48c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000e4b2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    e4b2:	b538      	push	{r3, r4, r5, lr}
    e4b4:	88c4      	ldrh	r4, [r0, #6]
    e4b6:	8881      	ldrh	r1, [r0, #4]
    e4b8:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e4bc:	f3c1 030e 	ubfx	r3, r1, #0, #15
    e4c0:	441a      	add	r2, r3
    e4c2:	42a1      	cmp	r1, r4
    e4c4:	d010      	beq.n	e4e8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e4c6:	8983      	ldrh	r3, [r0, #12]
    e4c8:	8a05      	ldrh	r5, [r0, #16]
    e4ca:	8812      	ldrh	r2, [r2, #0]
    e4cc:	442b      	add	r3, r5
    e4ce:	4293      	cmp	r3, r2
    e4d0:	d308      	bcc.n	e4e4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    e4d2:	f8ad 1000 	strh.w	r1, [sp]
    e4d6:	4669      	mov	r1, sp
    e4d8:	f7ff fe3d 	bl	e156 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e4dc:	f8bd 0000 	ldrh.w	r0, [sp]
    e4e0:	42a0      	cmp	r0, r4
    e4e2:	d001      	beq.n	e4e8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e4e4:	2001      	movs	r0, #1
    e4e6:	bd38      	pop	{r3, r4, r5, pc}
    e4e8:	2000      	movs	r0, #0
    e4ea:	bd38      	pop	{r3, r4, r5, pc}

0000e4ec <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    e4ec:	b570      	push	{r4, r5, r6, lr}
    e4ee:	88c6      	ldrh	r6, [r0, #6]
    e4f0:	8885      	ldrh	r5, [r0, #4]
    e4f2:	4603      	mov	r3, r0
    e4f4:	f100 0424 	add.w	r4, r0, #36	; 0x24
    e4f8:	f3c5 000e 	ubfx	r0, r5, #0, #15
    e4fc:	4420      	add	r0, r4
    e4fe:	42b5      	cmp	r5, r6
    e500:	d102      	bne.n	e508 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    e502:	2000      	movs	r0, #0
    e504:	8218      	strh	r0, [r3, #16]
    e506:	bd70      	pop	{r4, r5, r6, pc}
    e508:	8804      	ldrh	r4, [r0, #0]
    e50a:	899d      	ldrh	r5, [r3, #12]
    e50c:	7f1e      	ldrb	r6, [r3, #28]
    e50e:	1b64      	subs	r4, r4, r5
    e510:	4435      	add	r5, r6
    e512:	4428      	add	r0, r5
    e514:	880d      	ldrh	r5, [r1, #0]
    e516:	b2a4      	uxth	r4, r4
    e518:	1cc0      	adds	r0, r0, #3
    e51a:	42a5      	cmp	r5, r4
    e51c:	d900      	bls.n	e520 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    e51e:	800c      	strh	r4, [r1, #0]
    e520:	899c      	ldrh	r4, [r3, #12]
    e522:	b124      	cbz	r4, e52e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    e524:	2400      	movs	r4, #0
    e526:	7014      	strb	r4, [r2, #0]
    e528:	8809      	ldrh	r1, [r1, #0]
    e52a:	8219      	strh	r1, [r3, #16]
    e52c:	bd70      	pop	{r4, r5, r6, pc}
    e52e:	2401      	movs	r4, #1
    e530:	e7f9      	b.n	e526 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000e532 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    e532:	b508      	push	{r3, lr}
    e534:	8a81      	ldrh	r1, [r0, #20]
    e536:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e53a:	3aff      	subs	r2, #255	; 0xff
    e53c:	d008      	beq.n	e550 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    e53e:	7d82      	ldrb	r2, [r0, #22]
    e540:	f88d 2000 	strb.w	r2, [sp]
    e544:	9a00      	ldr	r2, [sp, #0]
    e546:	9200      	str	r2, [sp, #0]
    e548:	f89d 2000 	ldrb.w	r2, [sp]
    e54c:	b952      	cbnz	r2, e564 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e54e:	e004      	b.n	e55a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    e550:	f240 318e 	movw	r1, #910	; 0x38e
    e554:	2014      	movs	r0, #20
    e556:	f7f6 f82f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e55a:	8880      	ldrh	r0, [r0, #4]
    e55c:	4281      	cmp	r1, r0
    e55e:	d101      	bne.n	e564 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e560:	2000      	movs	r0, #0
    e562:	bd08      	pop	{r3, pc}
    e564:	2001      	movs	r0, #1
    e566:	bd08      	pop	{r3, pc}

0000e568 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    e568:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e56c:	8281      	strh	r1, [r0, #20]
    e56e:	2100      	movs	r1, #0
    e570:	7581      	strb	r1, [r0, #22]
    e572:	4770      	bx	lr

0000e574 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    e574:	b510      	push	{r4, lr}
    e576:	8a81      	ldrh	r1, [r0, #20]
    e578:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e57c:	3aff      	subs	r2, #255	; 0xff
    e57e:	d004      	beq.n	e58a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    e580:	f240 316a 	movw	r1, #874	; 0x36a
    e584:	2014      	movs	r0, #20
    e586:	f7f6 f817 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e58a:	88c1      	ldrh	r1, [r0, #6]
    e58c:	8281      	strh	r1, [r0, #20]
    e58e:	89c1      	ldrh	r1, [r0, #14]
    e590:	b109      	cbz	r1, e596 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    e592:	21ff      	movs	r1, #255	; 0xff
    e594:	e000      	b.n	e598 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    e596:	2100      	movs	r1, #0
    e598:	7581      	strb	r1, [r0, #22]
    e59a:	bd10      	pop	{r4, pc}

0000e59c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    e59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5a0:	461d      	mov	r5, r3
    e5a2:	4616      	mov	r6, r2
    e5a4:	9f06      	ldr	r7, [sp, #24]
    e5a6:	460b      	mov	r3, r1
    e5a8:	4604      	mov	r4, r0
    e5aa:	463a      	mov	r2, r7
    e5ac:	4629      	mov	r1, r5
    e5ae:	4630      	mov	r0, r6
    e5b0:	f000 f84f 	bl	e652 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e5b4:	4283      	cmp	r3, r0
    e5b6:	d201      	bcs.n	e5bc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    e5b8:	21a8      	movs	r1, #168	; 0xa8
    e5ba:	e018      	b.n	e5ee <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e5bc:	1ce0      	adds	r0, r4, #3
    e5be:	f020 0103 	bic.w	r1, r0, #3
    e5c2:	4620      	mov	r0, r4
    e5c4:	42a1      	cmp	r1, r4
    e5c6:	d001      	beq.n	e5cc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    e5c8:	21a9      	movs	r1, #169	; 0xa9
    e5ca:	e010      	b.n	e5ee <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e5cc:	2224      	movs	r2, #36	; 0x24
    e5ce:	2100      	movs	r1, #0
    e5d0:	f7ff f8ad 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e5d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e5d8:	82a0      	strh	r0, [r4, #20]
    e5da:	19a8      	adds	r0, r5, r6
    e5dc:	1d80      	adds	r0, r0, #6
    e5de:	4378      	muls	r0, r7
    e5e0:	b280      	uxth	r0, r0
    e5e2:	7725      	strb	r5, [r4, #28]
    e5e4:	8060      	strh	r0, [r4, #2]
    e5e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    e5ea:	d903      	bls.n	e5f4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    e5ec:	21af      	movs	r1, #175	; 0xaf
    e5ee:	2014      	movs	r0, #20
    e5f0:	f7f5 ffe2 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5f4:	8026      	strh	r6, [r4, #0]
    e5f6:	2000      	movs	r0, #0
    e5f8:	7760      	strb	r0, [r4, #29]
    e5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e5fe <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    e5fe:	6181      	str	r1, [r0, #24]
    e600:	6188      	str	r0, [r1, #24]
    e602:	4770      	bx	lr

0000e604 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    e604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e608:	460b      	mov	r3, r1
    e60a:	4604      	mov	r4, r0
    e60c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e610:	8905      	ldrh	r5, [r0, #8]
    e612:	8946      	ldrh	r6, [r0, #10]
    e614:	8880      	ldrh	r0, [r0, #4]
    e616:	f3c5 070e 	ubfx	r7, r5, #0, #15
    e61a:	4439      	add	r1, r7
    e61c:	460f      	mov	r7, r1
    e61e:	4285      	cmp	r5, r0
    e620:	d102      	bne.n	e628 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    e622:	2000      	movs	r0, #0
    e624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e628:	b10a      	cbz	r2, e62e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    e62a:	1cc8      	adds	r0, r1, #3
    e62c:	6010      	str	r0, [r2, #0]
    e62e:	b123      	cbz	r3, e63a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    e630:	7f22      	ldrb	r2, [r4, #28]
    e632:	1cf9      	adds	r1, r7, #3
    e634:	4618      	mov	r0, r3
    e636:	f7ff f800 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e63a:	883f      	ldrh	r7, [r7, #0]
    e63c:	f104 0108 	add.w	r1, r4, #8
    e640:	4620      	mov	r0, r4
    e642:	f7ff fd88 	bl	e156 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e646:	42b5      	cmp	r5, r6
    e648:	d101      	bne.n	e64e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    e64a:	8920      	ldrh	r0, [r4, #8]
    e64c:	8160      	strh	r0, [r4, #10]
    e64e:	4638      	mov	r0, r7
    e650:	e7e8      	b.n	e624 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000e652 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    e652:	4401      	add	r1, r0
    e654:	1d89      	adds	r1, r1, #6
    e656:	4351      	muls	r1, r2
    e658:	b28a      	uxth	r2, r1
    e65a:	2100      	movs	r1, #0
    e65c:	2845      	cmp	r0, #69	; 0x45
    e65e:	d202      	bcs.n	e666 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    e660:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    e664:	b281      	uxth	r1, r0
    e666:	3224      	adds	r2, #36	; 0x24
    e668:	1850      	adds	r0, r2, r1
    e66a:	b280      	uxth	r0, r0
    e66c:	4770      	bx	lr

0000e66e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    e66e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e672:	4688      	mov	r8, r1
    e674:	88c1      	ldrh	r1, [r0, #6]
    e676:	4604      	mov	r4, r0
    e678:	8900      	ldrh	r0, [r0, #8]
    e67a:	f3c1 060e 	ubfx	r6, r1, #0, #15
    e67e:	f104 0524 	add.w	r5, r4, #36	; 0x24
    e682:	f3c0 070e 	ubfx	r7, r0, #0, #15
    e686:	eb05 0906 	add.w	r9, r5, r6
    e68a:	f7ff fd85 	bl	e198 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e68e:	2200      	movs	r2, #0
    e690:	b998      	cbnz	r0, e6ba <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e692:	8820      	ldrh	r0, [r4, #0]
    e694:	2845      	cmp	r0, #69	; 0x45
    e696:	d200      	bcs.n	e69a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e698:	2045      	movs	r0, #69	; 0x45
    e69a:	42b7      	cmp	r7, r6
    e69c:	d906      	bls.n	e6ac <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e69e:	7f23      	ldrb	r3, [r4, #28]
    e6a0:	1bb9      	subs	r1, r7, r6
    e6a2:	1ac9      	subs	r1, r1, r3
    e6a4:	1f89      	subs	r1, r1, #6
    e6a6:	4281      	cmp	r1, r0
    e6a8:	da00      	bge.n	e6ac <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e6aa:	4608      	mov	r0, r1
    e6ac:	89e1      	ldrh	r1, [r4, #14]
    e6ae:	b111      	cbz	r1, e6b6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e6b0:	f8b9 3000 	ldrh.w	r3, [r9]
    e6b4:	1ac0      	subs	r0, r0, r3
    e6b6:	4540      	cmp	r0, r8
    e6b8:	da03      	bge.n	e6c2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e6ba:	8262      	strh	r2, [r4, #18]
    e6bc:	2000      	movs	r0, #0
    e6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e6c2:	7f20      	ldrb	r0, [r4, #28]
    e6c4:	4429      	add	r1, r5
    e6c6:	1d80      	adds	r0, r0, #6
    e6c8:	4430      	add	r0, r6
    e6ca:	4408      	add	r0, r1
    e6cc:	f8a4 8012 	strh.w	r8, [r4, #18]
    e6d0:	1ec0      	subs	r0, r0, #3
    e6d2:	e7f4      	b.n	e6be <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000e6d4 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    e6d4:	2100      	movs	r1, #0
    e6d6:	81c1      	strh	r1, [r0, #14]
    e6d8:	8241      	strh	r1, [r0, #18]
    e6da:	7581      	strb	r1, [r0, #22]
    e6dc:	4770      	bx	lr

0000e6de <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    e6de:	b570      	push	{r4, r5, r6, lr}
    e6e0:	2300      	movs	r3, #0
    e6e2:	f1a1 0208 	sub.w	r2, r1, #8
    e6e6:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    e6ea:	42a2      	cmp	r2, r4
    e6ec:	d304      	bcc.n	e6f8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    e6ee:	f240 11cd 	movw	r1, #461	; 0x1cd
    e6f2:	2015      	movs	r0, #21
    e6f4:	f7f5 ff60 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6f8:	6802      	ldr	r2, [r0, #0]
    e6fa:	b90a      	cbnz	r2, e700 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    e6fc:	e01e      	b.n	e73c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    e6fe:	4610      	mov	r0, r2
    e700:	6802      	ldr	r2, [r0, #0]
    e702:	8893      	ldrh	r3, [r2, #4]
    e704:	428b      	cmp	r3, r1
    e706:	d002      	beq.n	e70e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    e708:	6813      	ldr	r3, [r2, #0]
    e70a:	2b00      	cmp	r3, #0
    e70c:	d1f7      	bne.n	e6fe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    e70e:	8894      	ldrh	r4, [r2, #4]
    e710:	4613      	mov	r3, r2
    e712:	428c      	cmp	r4, r1
    e714:	d101      	bne.n	e71a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    e716:	6811      	ldr	r1, [r2, #0]
    e718:	e00d      	b.n	e736 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    e71a:	f101 0508 	add.w	r5, r1, #8
    e71e:	b2ae      	uxth	r6, r5
    e720:	2500      	movs	r5, #0
    e722:	42b4      	cmp	r4, r6
    e724:	d309      	bcc.n	e73a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    e726:	1a64      	subs	r4, r4, r1
    e728:	4411      	add	r1, r2
    e72a:	600d      	str	r5, [r1, #0]
    e72c:	808c      	strh	r4, [r1, #4]
    e72e:	6802      	ldr	r2, [r0, #0]
    e730:	6812      	ldr	r2, [r2, #0]
    e732:	6002      	str	r2, [r0, #0]
    e734:	600a      	str	r2, [r1, #0]
    e736:	6001      	str	r1, [r0, #0]
    e738:	e000      	b.n	e73c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    e73a:	2300      	movs	r3, #0
    e73c:	4618      	mov	r0, r3
    e73e:	bd70      	pop	{r4, r5, r6, pc}

0000e740 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    e740:	b510      	push	{r4, lr}
    e742:	000c      	movs	r4, r1
    e744:	d004      	beq.n	e750 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    e746:	2c08      	cmp	r4, #8
    e748:	d207      	bcs.n	e75a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    e74a:	f240 1195 	movw	r1, #405	; 0x195
    e74e:	e00a      	b.n	e766 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    e750:	b108      	cbz	r0, e756 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    e752:	2100      	movs	r1, #0
    e754:	6001      	str	r1, [r0, #0]
    e756:	2000      	movs	r0, #0
    e758:	bd10      	pop	{r4, pc}
    e75a:	b158      	cbz	r0, e774 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    e75c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    e760:	d304      	bcc.n	e76c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    e762:	f240 11a7 	movw	r1, #423	; 0x1a7
    e766:	2015      	movs	r0, #21
    e768:	f7f5 ff26 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e76c:	b2a1      	uxth	r1, r4
    e76e:	6800      	ldr	r0, [r0, #0]
    e770:	f000 f814 	bl	e79c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e774:	1d20      	adds	r0, r4, #4
    e776:	bd10      	pop	{r4, pc}

0000e778 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e778:	2100      	movs	r1, #0
    e77a:	6802      	ldr	r2, [r0, #0]
    e77c:	e003      	b.n	e786 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e77e:	8893      	ldrh	r3, [r2, #4]
    e780:	6812      	ldr	r2, [r2, #0]
    e782:	4419      	add	r1, r3
    e784:	b289      	uxth	r1, r1
    e786:	2a00      	cmp	r2, #0
    e788:	d1f9      	bne.n	e77e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e78a:	f000 b807 	b.w	e79c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e78e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e78e:	2300      	movs	r3, #0
    e790:	600b      	str	r3, [r1, #0]
    e792:	808a      	strh	r2, [r1, #4]
    e794:	6802      	ldr	r2, [r0, #0]
    e796:	600a      	str	r2, [r1, #0]
    e798:	6001      	str	r1, [r0, #0]
    e79a:	4770      	bx	lr
    e79c:	2300      	movs	r3, #0
    e79e:	6043      	str	r3, [r0, #4]
    e7a0:	1d02      	adds	r2, r0, #4
    e7a2:	8101      	strh	r1, [r0, #8]
    e7a4:	6002      	str	r2, [r0, #0]
    e7a6:	4770      	bx	lr

0000e7a8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e7a8:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e7ac:	3aff      	subs	r2, #255	; 0xff
    e7ae:	d000      	beq.n	e7b2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    e7b0:	b109      	cbz	r1, e7b6 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    e7b2:	2000      	movs	r0, #0
    e7b4:	4770      	bx	lr
    e7b6:	f7f6 b9db 	b.w	4b70 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000e7ba <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e7ba:	b570      	push	{r4, r5, r6, lr}
    e7bc:	4605      	mov	r5, r0
    e7be:	460c      	mov	r4, r1
    e7c0:	4608      	mov	r0, r1
    e7c2:	f000 f889 	bl	e8d8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e7c6:	b108      	cbz	r0, e7cc <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e7c8:	2010      	movs	r0, #16
    e7ca:	bd70      	pop	{r4, r5, r6, pc}
    e7cc:	b10d      	cbz	r5, e7d2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    e7ce:	2007      	movs	r0, #7
    e7d0:	bd70      	pop	{r4, r5, r6, pc}
    e7d2:	7025      	strb	r5, [r4, #0]
    e7d4:	2000      	movs	r0, #0
    e7d6:	8060      	strh	r0, [r4, #2]
    e7d8:	bd70      	pop	{r4, r5, r6, pc}
    e7da:	b510      	push	{r4, lr}
    e7dc:	4604      	mov	r4, r0
    e7de:	f7f6 fa13 	bl	4c08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    e7e2:	42a0      	cmp	r0, r4
    e7e4:	d901      	bls.n	e7ea <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    e7e6:	2001      	movs	r0, #1
    e7e8:	bd10      	pop	{r4, pc}
    e7ea:	2000      	movs	r0, #0
    e7ec:	bd10      	pop	{r4, pc}
    e7ee:	4770      	bx	lr

0000e7f0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e7f0:	b570      	push	{r4, r5, r6, lr}
    e7f2:	460e      	mov	r6, r1
    e7f4:	461d      	mov	r5, r3
    e7f6:	4611      	mov	r1, r2
    e7f8:	f000 f813 	bl	e822 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    e7fc:	4604      	mov	r4, r0
    e7fe:	4629      	mov	r1, r5
    e800:	4630      	mov	r0, r6
    e802:	f000 f804 	bl	e80e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    e806:	4420      	add	r0, r4
    e808:	1d00      	adds	r0, r0, #4
    e80a:	b280      	uxth	r0, r0
    e80c:	bd70      	pop	{r4, r5, r6, pc}
    e80e:	b510      	push	{r4, lr}
    e810:	460a      	mov	r2, r1
    e812:	2101      	movs	r1, #1
    e814:	f7ff ff1d 	bl	e652 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e818:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e81c:	1cc0      	adds	r0, r0, #3
    e81e:	4008      	ands	r0, r1
    e820:	bd10      	pop	{r4, pc}
    e822:	b510      	push	{r4, lr}
    e824:	460a      	mov	r2, r1
    e826:	210a      	movs	r1, #10
    e828:	f7ff ff13 	bl	e652 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e82c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e830:	1cc0      	adds	r0, r0, #3
    e832:	4008      	ands	r0, r1
    e834:	bd10      	pop	{r4, pc}
    e836:	2800      	cmp	r0, #0
    e838:	db09      	blt.n	e84e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    e83a:	f000 021f 	and.w	r2, r0, #31
    e83e:	2101      	movs	r1, #1
    e840:	4091      	lsls	r1, r2
    e842:	0940      	lsrs	r0, r0, #5
    e844:	0080      	lsls	r0, r0, #2
    e846:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e84a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e84e:	4770      	bx	lr
    e850:	2800      	cmp	r0, #0
    e852:	db0d      	blt.n	e870 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    e854:	f000 021f 	and.w	r2, r0, #31
    e858:	2101      	movs	r1, #1
    e85a:	4091      	lsls	r1, r2
    e85c:	0940      	lsrs	r0, r0, #5
    e85e:	0080      	lsls	r0, r0, #2
    e860:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e864:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e868:	f3bf 8f4f 	dsb	sy
    e86c:	f3bf 8f6f 	isb	sy
    e870:	4770      	bx	lr
    e872:	b510      	push	{r4, lr}
    e874:	200e      	movs	r0, #14
    e876:	f7ff ffeb 	bl	e850 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    e87a:	200e      	movs	r0, #14
    e87c:	f7ff ffdb 	bl	e836 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    e880:	200f      	movs	r0, #15
    e882:	f7ff ffe5 	bl	e850 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    e886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e88a:	200f      	movs	r0, #15
    e88c:	f7ff bfd3 	b.w	e836 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    e890:	2800      	cmp	r0, #0
    e892:	db09      	blt.n	e8a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    e894:	f000 021f 	and.w	r2, r0, #31
    e898:	2101      	movs	r1, #1
    e89a:	4091      	lsls	r1, r2
    e89c:	0940      	lsrs	r0, r0, #5
    e89e:	0080      	lsls	r0, r0, #2
    e8a0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e8a4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e8a8:	4770      	bx	lr
    e8aa:	5840      	ldr	r0, [r0, r1]
    e8ac:	2800      	cmp	r0, #0
    e8ae:	d000      	beq.n	e8b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    e8b0:	2001      	movs	r0, #1
    e8b2:	4770      	bx	lr

0000e8b4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    e8b4:	b510      	push	{r4, lr}
    e8b6:	4604      	mov	r4, r0
    e8b8:	4620      	mov	r0, r4
    e8ba:	f7f6 fb15 	bl	4ee8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    e8be:	2811      	cmp	r0, #17
    e8c0:	d0fa      	beq.n	e8b8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    e8c2:	bd10      	pop	{r4, pc}

0000e8c4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e8c4:	b510      	push	{r4, lr}
    e8c6:	f7ff fff5 	bl	e8b4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    e8ca:	2800      	cmp	r0, #0
    e8cc:	d003      	beq.n	e8d6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    e8ce:	21a0      	movs	r1, #160	; 0xa0
    e8d0:	201d      	movs	r0, #29
    e8d2:	f7f5 fe71 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8d6:	bd10      	pop	{r4, pc}

0000e8d8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e8d8:	b108      	cbz	r0, e8de <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e8da:	2000      	movs	r0, #0
    e8dc:	4770      	bx	lr
    e8de:	2001      	movs	r0, #1
    e8e0:	4770      	bx	lr

0000e8e2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    e8e2:	f7f6 bc53 	b.w	518c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000e8e6 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    e8e6:	f7f6 bc41 	b.w	516c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000e8ea <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    e8ea:	b510      	push	{r4, lr}
    e8ec:	4050      	eors	r0, r2
    e8ee:	780a      	ldrb	r2, [r1, #0]
    e8f0:	781c      	ldrb	r4, [r3, #0]
    e8f2:	4062      	eors	r2, r4
    e8f4:	4410      	add	r0, r2
    e8f6:	784a      	ldrb	r2, [r1, #1]
    e8f8:	785c      	ldrb	r4, [r3, #1]
    e8fa:	4062      	eors	r2, r4
    e8fc:	4410      	add	r0, r2
    e8fe:	788a      	ldrb	r2, [r1, #2]
    e900:	789c      	ldrb	r4, [r3, #2]
    e902:	4062      	eors	r2, r4
    e904:	4410      	add	r0, r2
    e906:	78ca      	ldrb	r2, [r1, #3]
    e908:	78dc      	ldrb	r4, [r3, #3]
    e90a:	4062      	eors	r2, r4
    e90c:	4410      	add	r0, r2
    e90e:	790a      	ldrb	r2, [r1, #4]
    e910:	791c      	ldrb	r4, [r3, #4]
    e912:	7949      	ldrb	r1, [r1, #5]
    e914:	4062      	eors	r2, r4
    e916:	4410      	add	r0, r2
    e918:	795a      	ldrb	r2, [r3, #5]
    e91a:	4051      	eors	r1, r2
    e91c:	42c1      	cmn	r1, r0
    e91e:	d101      	bne.n	e924 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    e920:	2001      	movs	r0, #1
    e922:	bd10      	pop	{r4, pc}
    e924:	2000      	movs	r0, #0
    e926:	bd10      	pop	{r4, pc}

0000e928 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e928:	b510      	push	{r4, lr}
    e92a:	2900      	cmp	r1, #0
    e92c:	4604      	mov	r4, r0
    e92e:	f04f 0106 	mov.w	r1, #6
    e932:	d002      	beq.n	e93a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e934:	f7f5 fed0 	bl	46d8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e938:	e001      	b.n	e93e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e93a:	f7f5 fee9 	bl	4710 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e93e:	7960      	ldrb	r0, [r4, #5]
    e940:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e944:	7160      	strb	r0, [r4, #5]
    e946:	bd10      	pop	{r4, pc}

0000e948 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e948:	4770      	bx	lr

0000e94a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e94a:	b530      	push	{r4, r5, lr}
    e94c:	460c      	mov	r4, r1
    e94e:	4605      	mov	r5, r0
    e950:	b08d      	sub	sp, #52	; 0x34
    e952:	f04f 0103 	mov.w	r1, #3
    e956:	f104 0003 	add.w	r0, r4, #3
    e95a:	b112      	cbz	r2, e962 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e95c:	f7f5 febc 	bl	46d8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e960:	e001      	b.n	e966 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e962:	f7f5 fed5 	bl	4710 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e966:	7960      	ldrb	r0, [r4, #5]
    e968:	220d      	movs	r2, #13
    e96a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e96e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e972:	7160      	strb	r0, [r4, #5]
    e974:	2100      	movs	r1, #0
    e976:	a804      	add	r0, sp, #16
    e978:	f7fe fed9 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e97c:	78e0      	ldrb	r0, [r4, #3]
    e97e:	f88d 001f 	strb.w	r0, [sp, #31]
    e982:	7920      	ldrb	r0, [r4, #4]
    e984:	f88d 001e 	strb.w	r0, [sp, #30]
    e988:	7960      	ldrb	r0, [r4, #5]
    e98a:	f88d 001d 	strb.w	r0, [sp, #29]
    e98e:	2210      	movs	r2, #16
    e990:	4629      	mov	r1, r5
    e992:	4668      	mov	r0, sp
    e994:	f7fe fe51 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e998:	4668      	mov	r0, sp
    e99a:	f7ff ff93 	bl	e8c4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e99e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e9a2:	7020      	strb	r0, [r4, #0]
    e9a4:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e9a8:	7060      	strb	r0, [r4, #1]
    e9aa:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e9ae:	70a0      	strb	r0, [r4, #2]
    e9b0:	b00d      	add	sp, #52	; 0x34
    e9b2:	bd30      	pop	{r4, r5, pc}

0000e9b4 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    e9b4:	b530      	push	{r4, r5, lr}
    e9b6:	b08d      	sub	sp, #52	; 0x34
    e9b8:	460c      	mov	r4, r1
    e9ba:	4605      	mov	r5, r0
    e9bc:	220d      	movs	r2, #13
    e9be:	2100      	movs	r1, #0
    e9c0:	a804      	add	r0, sp, #16
    e9c2:	f7fe feb4 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e9c6:	78e0      	ldrb	r0, [r4, #3]
    e9c8:	f88d 001f 	strb.w	r0, [sp, #31]
    e9cc:	7920      	ldrb	r0, [r4, #4]
    e9ce:	f88d 001e 	strb.w	r0, [sp, #30]
    e9d2:	7960      	ldrb	r0, [r4, #5]
    e9d4:	f88d 001d 	strb.w	r0, [sp, #29]
    e9d8:	2210      	movs	r2, #16
    e9da:	4629      	mov	r1, r5
    e9dc:	4668      	mov	r0, sp
    e9de:	f7fe fe2c 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e9e2:	4668      	mov	r0, sp
    e9e4:	f7ff ff6e 	bl	e8c4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e9e8:	7820      	ldrb	r0, [r4, #0]
    e9ea:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    e9ee:	4288      	cmp	r0, r1
    e9f0:	d10c      	bne.n	ea0c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e9f2:	7860      	ldrb	r0, [r4, #1]
    e9f4:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    e9f8:	4288      	cmp	r0, r1
    e9fa:	d107      	bne.n	ea0c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e9fc:	78a0      	ldrb	r0, [r4, #2]
    e9fe:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    ea02:	4288      	cmp	r0, r1
    ea04:	d102      	bne.n	ea0c <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    ea06:	2001      	movs	r0, #1
    ea08:	b00d      	add	sp, #52	; 0x34
    ea0a:	bd30      	pop	{r4, r5, pc}
    ea0c:	2000      	movs	r0, #0
    ea0e:	e7fb      	b.n	ea08 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000ea10 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    ea10:	f7f6 bf88 	b.w	5924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x400>
    ea14:	b510      	push	{r4, lr}
    ea16:	2801      	cmp	r0, #1
    ea18:	d008      	beq.n	ea2c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    ea1a:	2802      	cmp	r0, #2
    ea1c:	d004      	beq.n	ea28 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    ea1e:	f240 31f3 	movw	r1, #1011	; 0x3f3
    ea22:	2006      	movs	r0, #6
    ea24:	f7f5 fdc8 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea28:	2001      	movs	r0, #1
    ea2a:	bd10      	pop	{r4, pc}
    ea2c:	2000      	movs	r0, #0
    ea2e:	bd10      	pop	{r4, pc}
    ea30:	2900      	cmp	r1, #0
    ea32:	d004      	beq.n	ea3e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    ea34:	2801      	cmp	r0, #1
    ea36:	d003      	beq.n	ea40 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    ea38:	2901      	cmp	r1, #1
    ea3a:	d001      	beq.n	ea40 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    ea3c:	2002      	movs	r0, #2
    ea3e:	4770      	bx	lr
    ea40:	2001      	movs	r0, #1
    ea42:	4770      	bx	lr
    ea44:	f7ff bd52 	b.w	e4ec <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000ea48 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    ea48:	2101      	movs	r1, #1
    ea4a:	f7f7 bb7f 	b.w	614c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000ea4e <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    ea4e:	b510      	push	{r4, lr}
    ea50:	f002 f869 	bl	10b26 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    ea54:	b118      	cbz	r0, ea5e <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    ea56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea5a:	f7fc bfb1 	b.w	b9c0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    ea5e:	20ff      	movs	r0, #255	; 0xff
    ea60:	bd10      	pop	{r4, pc}

0000ea62 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    ea62:	b510      	push	{r4, lr}
    ea64:	f7f7 fbba 	bl	61dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ea68:	2810      	cmp	r0, #16
    ea6a:	d003      	beq.n	ea74 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    ea6c:	f7f7 fb86 	bl	617c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    ea70:	2810      	cmp	r0, #16
    ea72:	d100      	bne.n	ea76 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    ea74:	2008      	movs	r0, #8
    ea76:	bd10      	pop	{r4, pc}

0000ea78 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    ea78:	b510      	push	{r4, lr}
    ea7a:	f7f7 fbaf 	bl	61dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ea7e:	2810      	cmp	r0, #16
    ea80:	d007      	beq.n	ea92 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    ea82:	f7f7 fb7b 	bl	617c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    ea86:	2810      	cmp	r0, #16
    ea88:	d003      	beq.n	ea92 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    ea8a:	f7f7 fc05 	bl	6298 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    ea8e:	2001      	movs	r0, #1
    ea90:	bd10      	pop	{r4, pc}
    ea92:	2000      	movs	r0, #0
    ea94:	bd10      	pop	{r4, pc}

0000ea96 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    ea96:	b510      	push	{r4, lr}
    ea98:	f7f7 fba0 	bl	61dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ea9c:	2810      	cmp	r0, #16
    ea9e:	d003      	beq.n	eaa8 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    eaa0:	f7f7 fc42 	bl	6328 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x250>
    eaa4:	2001      	movs	r0, #1
    eaa6:	bd10      	pop	{r4, pc}
    eaa8:	2000      	movs	r0, #0
    eaaa:	bd10      	pop	{r4, pc}

0000eaac <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    eaac:	b570      	push	{r4, r5, r6, lr}
    eaae:	460e      	mov	r6, r1
    eab0:	b08c      	sub	sp, #48	; 0x30
    eab2:	4614      	mov	r4, r2
    eab4:	4601      	mov	r1, r0
    eab6:	461d      	mov	r5, r3
    eab8:	2210      	movs	r2, #16
    eaba:	4668      	mov	r0, sp
    eabc:	f000 f995 	bl	edea <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    eac0:	2210      	movs	r2, #16
    eac2:	4631      	mov	r1, r6
    eac4:	a804      	add	r0, sp, #16
    eac6:	f000 f990 	bl	edea <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    eaca:	4668      	mov	r0, sp
    eacc:	f7ff fefa 	bl	e8c4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ead0:	a908      	add	r1, sp, #32
    ead2:	f04f 0210 	mov.w	r2, #16
    ead6:	4628      	mov	r0, r5
    ead8:	b11c      	cbz	r4, eae2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    eada:	f000 f986 	bl	edea <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    eade:	b00c      	add	sp, #48	; 0x30
    eae0:	bd70      	pop	{r4, r5, r6, pc}
    eae2:	f7fe fdaa 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eae6:	e7fa      	b.n	eade <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    eae8:	0781      	lsls	r1, r0, #30
    eaea:	d501      	bpl.n	eaf0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    eaec:	2002      	movs	r0, #2
    eaee:	4770      	bx	lr
    eaf0:	07c0      	lsls	r0, r0, #31
    eaf2:	d0fc      	beq.n	eaee <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    eaf4:	2001      	movs	r0, #1
    eaf6:	4770      	bx	lr

0000eaf8 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    eaf8:	b570      	push	{r4, r5, r6, lr}
    eafa:	4606      	mov	r6, r0
    eafc:	7900      	ldrb	r0, [r0, #4]
    eafe:	0940      	lsrs	r0, r0, #5
    eb00:	d10e      	bne.n	eb20 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    eb02:	2500      	movs	r5, #0
    eb04:	462c      	mov	r4, r5
    eb06:	5d30      	ldrb	r0, [r6, r4]
    eb08:	f000 fe0b 	bl	f722 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    eb0c:	1c64      	adds	r4, r4, #1
    eb0e:	4428      	add	r0, r5
    eb10:	b2e4      	uxtb	r4, r4
    eb12:	b2c5      	uxtb	r5, r0
    eb14:	2c05      	cmp	r4, #5
    eb16:	d3f6      	bcc.n	eb06 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    eb18:	2d01      	cmp	r5, #1
    eb1a:	d901      	bls.n	eb20 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    eb1c:	2001      	movs	r0, #1
    eb1e:	bd70      	pop	{r4, r5, r6, pc}
    eb20:	2000      	movs	r0, #0
    eb22:	bd70      	pop	{r4, r5, r6, pc}

0000eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    eb24:	b510      	push	{r4, lr}
    eb26:	460c      	mov	r4, r1
    eb28:	2100      	movs	r1, #0
    eb2a:	f7ff fe3d 	bl	e7a8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eb2e:	6060      	str	r0, [r4, #4]
    eb30:	b110      	cbz	r0, eb38 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    eb32:	2000      	movs	r0, #0
    eb34:	7020      	strb	r0, [r4, #0]
    eb36:	bd10      	pop	{r4, pc}
    eb38:	2002      	movs	r0, #2
    eb3a:	bd10      	pop	{r4, pc}

0000eb3c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    eb3c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eb40:	4348      	muls	r0, r1
    eb42:	4770      	bx	lr

0000eb44 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    eb44:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eb48:	fbb0 f0f1 	udiv	r0, r0, r1
    eb4c:	b280      	uxth	r0, r0
    eb4e:	4770      	bx	lr

0000eb50 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    eb50:	b570      	push	{r4, r5, r6, lr}
    eb52:	4604      	mov	r4, r0
    eb54:	4290      	cmp	r0, r2
    eb56:	d20b      	bcs.n	eb70 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    eb58:	1b10      	subs	r0, r2, r4
    eb5a:	2865      	cmp	r0, #101	; 0x65
    eb5c:	d200      	bcs.n	eb60 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    eb5e:	2065      	movs	r0, #101	; 0x65
    eb60:	1825      	adds	r5, r4, r0
    eb62:	428d      	cmp	r5, r1
    eb64:	d803      	bhi.n	eb6e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    eb66:	2103      	movs	r1, #3
    eb68:	f7f2 ff4e 	bl	1a08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    eb6c:	b108      	cbz	r0, eb72 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    eb6e:	4620      	mov	r0, r4
    eb70:	bd70      	pop	{r4, r5, r6, pc}
    eb72:	4628      	mov	r0, r5
    eb74:	bd70      	pop	{r4, r5, r6, pc}

0000eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    eb76:	b510      	push	{r4, lr}
    eb78:	f1a2 030f 	sub.w	r3, r2, #15
    eb7c:	290c      	cmp	r1, #12
    eb7e:	d24f      	bcs.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    eb80:	e8df f001 	tbb	[pc, r1]
    eb84:	120d0806 	.word	0x120d0806
    eb88:	2f271815 	.word	0x2f271815
    eb8c:	3d354c32 	.word	0x3d354c32
    eb90:	b3a2      	cbz	r2, ebfc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    eb92:	e045      	b.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    eb94:	2a07      	cmp	r2, #7
    eb96:	d045      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    eb98:	2a08      	cmp	r2, #8
    eb9a:	d043      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    eb9c:	e040      	b.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    eb9e:	2a0c      	cmp	r2, #12
    eba0:	d040      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    eba2:	2a0b      	cmp	r2, #11
    eba4:	d03e      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    eba6:	e03b      	b.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    eba8:	2a0d      	cmp	r2, #13
    ebaa:	d03b      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebac:	e038      	b.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebae:	2b0c      	cmp	r3, #12
    ebb0:	d938      	bls.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebb2:	e035      	b.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebb4:	2a12      	cmp	r2, #18
    ebb6:	d035      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebb8:	2a11      	cmp	r2, #17
    ebba:	d033      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebbc:	f890 004e 	ldrb.w	r0, [r0, #78]	; 0x4e
    ebc0:	b120      	cbz	r0, ebcc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    ebc2:	2a12      	cmp	r2, #18
    ebc4:	d32c      	bcc.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebc6:	2a1a      	cmp	r2, #26
    ebc8:	d92c      	bls.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebca:	e029      	b.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebcc:	2a16      	cmp	r2, #22
    ebce:	d2fa      	bcs.n	ebc6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    ebd0:	e026      	b.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebd2:	2b03      	cmp	r3, #3
    ebd4:	d926      	bls.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebd6:	f890 004e 	ldrb.w	r0, [r0, #78]	; 0x4e
    ebda:	b308      	cbz	r0, ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebdc:	2a1b      	cmp	r2, #27
    ebde:	d921      	bls.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebe0:	e01e      	b.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebe2:	2a04      	cmp	r2, #4
    ebe4:	d01e      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebe6:	e01b      	b.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebe8:	2a01      	cmp	r2, #1
    ebea:	d01b      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebec:	e018      	b.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebee:	2a1c      	cmp	r2, #28
    ebf0:	d018      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebf2:	2a1d      	cmp	r2, #29
    ebf4:	d016      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebf6:	2a1e      	cmp	r2, #30
    ebf8:	d014      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebfa:	e011      	b.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebfc:	e012      	b.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebfe:	2a1f      	cmp	r2, #31
    ec00:	d010      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec02:	2a20      	cmp	r2, #32
    ec04:	d00e      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec06:	2a21      	cmp	r2, #33	; 0x21
    ec08:	d00c      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec0a:	2a22      	cmp	r2, #34	; 0x22
    ec0c:	d00a      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec0e:	2a23      	cmp	r2, #35	; 0x23
    ec10:	d008      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec12:	2a24      	cmp	r2, #36	; 0x24
    ec14:	d006      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec16:	2a27      	cmp	r2, #39	; 0x27
    ec18:	d004      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec1a:	e001      	b.n	ec20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ec1c:	2a05      	cmp	r2, #5
    ec1e:	d001      	beq.n	ec24 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec20:	2000      	movs	r0, #0
    ec22:	bd10      	pop	{r4, pc}
    ec24:	2001      	movs	r0, #1
    ec26:	bd10      	pop	{r4, pc}

0000ec28 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ec28:	280c      	cmp	r0, #12
    ec2a:	d013      	beq.n	ec54 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec2c:	280b      	cmp	r0, #11
    ec2e:	d011      	beq.n	ec54 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec30:	280d      	cmp	r0, #13
    ec32:	d00f      	beq.n	ec54 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec34:	281f      	cmp	r0, #31
    ec36:	d00d      	beq.n	ec54 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec38:	2820      	cmp	r0, #32
    ec3a:	d00b      	beq.n	ec54 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec3c:	2821      	cmp	r0, #33	; 0x21
    ec3e:	d009      	beq.n	ec54 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec40:	2822      	cmp	r0, #34	; 0x22
    ec42:	d007      	beq.n	ec54 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec44:	2823      	cmp	r0, #35	; 0x23
    ec46:	d005      	beq.n	ec54 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec48:	2824      	cmp	r0, #36	; 0x24
    ec4a:	d003      	beq.n	ec54 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec4c:	2827      	cmp	r0, #39	; 0x27
    ec4e:	d001      	beq.n	ec54 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec50:	2000      	movs	r0, #0
    ec52:	4770      	bx	lr
    ec54:	2001      	movs	r0, #1
    ec56:	4770      	bx	lr

0000ec58 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ec58:	f011 0f0c 	tst.w	r1, #12
    ec5c:	d018      	beq.n	ec90 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    ec5e:	074a      	lsls	r2, r1, #29
    ec60:	f44f 7116 	mov.w	r1, #600	; 0x258
    ec64:	2a00      	cmp	r2, #0
    ec66:	da02      	bge.n	ec6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    ec68:	f04f 0210 	mov.w	r2, #16
    ec6c:	e001      	b.n	ec72 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    ec6e:	f04f 0240 	mov.w	r2, #64	; 0x40
    ec72:	da01      	bge.n	ec78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    ec74:	f04f 0196 	mov.w	r1, #150	; 0x96
    ec78:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    ec7c:	eba0 0301 	sub.w	r3, r0, r1
    ec80:	4288      	cmp	r0, r1
    ec82:	d903      	bls.n	ec8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ec84:	fb93 f0f2 	sdiv	r0, r3, r2
    ec88:	b280      	uxth	r0, r0
    ec8a:	4770      	bx	lr
    ec8c:	2000      	movs	r0, #0
    ec8e:	4770      	bx	lr
    ec90:	2902      	cmp	r1, #2
    ec92:	d008      	beq.n	eca6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ec94:	2870      	cmp	r0, #112	; 0x70
    ec96:	d9f9      	bls.n	ec8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ec98:	3870      	subs	r0, #112	; 0x70
    ec9a:	17c1      	asrs	r1, r0, #31
    ec9c:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    eca0:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    eca4:	4770      	bx	lr
    eca6:	283c      	cmp	r0, #60	; 0x3c
    eca8:	d9f0      	bls.n	ec8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ecaa:	383c      	subs	r0, #60	; 0x3c
    ecac:	17c1      	asrs	r1, r0, #31
    ecae:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ecb2:	f3c0 008f 	ubfx	r0, r0, #2, #16
    ecb6:	4770      	bx	lr

0000ecb8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    ecb8:	6809      	ldr	r1, [r1, #0]
    ecba:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    ecbe:	4770      	bx	lr

0000ecc0 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    ecc0:	2801      	cmp	r0, #1
    ecc2:	d002      	beq.n	ecca <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    ecc4:	2802      	cmp	r0, #2
    ecc6:	d000      	beq.n	ecca <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    ecc8:	2000      	movs	r0, #0
    ecca:	4770      	bx	lr

0000eccc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    eccc:	b510      	push	{r4, lr}
    ecce:	f640 12c4 	movw	r2, #2500	; 0x9c4
    ecd2:	2901      	cmp	r1, #1
    ecd4:	d006      	beq.n	ece4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    ecd6:	2902      	cmp	r1, #2
    ecd8:	d005      	beq.n	ece6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    ecda:	f240 31ba 	movw	r1, #954	; 0x3ba
    ecde:	2029      	movs	r0, #41	; 0x29
    ece0:	f7f5 fc6a 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ece4:	b108      	cbz	r0, ecea <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    ece6:	4610      	mov	r0, r2
    ece8:	bd10      	pop	{r4, pc}
    ecea:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ecee:	bd10      	pop	{r4, pc}

0000ecf0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    ecf0:	b530      	push	{r4, r5, lr}
    ecf2:	242a      	movs	r4, #42	; 0x2a
    ecf4:	2523      	movs	r5, #35	; 0x23
    ecf6:	2a16      	cmp	r2, #22
    ecf8:	d105      	bne.n	ed06 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    ecfa:	280c      	cmp	r0, #12
    ecfc:	d007      	beq.n	ed0e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    ecfe:	280d      	cmp	r0, #13
    ed00:	d005      	beq.n	ed0e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    ed02:	281f      	cmp	r0, #31
    ed04:	d005      	beq.n	ed12 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    ed06:	b171      	cbz	r1, ed26 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    ed08:	2a16      	cmp	r2, #22
    ed0a:	d10c      	bne.n	ed26 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    ed0c:	e004      	b.n	ed18 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    ed0e:	701c      	strb	r4, [r3, #0]
    ed10:	e000      	b.n	ed14 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    ed12:	701d      	strb	r5, [r3, #0]
    ed14:	2001      	movs	r0, #1
    ed16:	bd30      	pop	{r4, r5, pc}
    ed18:	7808      	ldrb	r0, [r1, #0]
    ed1a:	2801      	cmp	r0, #1
    ed1c:	d0f7      	beq.n	ed0e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    ed1e:	2800      	cmp	r0, #0
    ed20:	d0f5      	beq.n	ed0e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    ed22:	2816      	cmp	r0, #22
    ed24:	d0f5      	beq.n	ed12 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    ed26:	2000      	movs	r0, #0
    ed28:	bd30      	pop	{r4, r5, pc}

0000ed2a <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    ed2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed2c:	b2cf      	uxtb	r7, r1
    ed2e:	4606      	mov	r6, r0
    ed30:	f3c1 2407 	ubfx	r4, r1, #8, #8
    ed34:	4621      	mov	r1, r4
    ed36:	4638      	mov	r0, r7
    ed38:	f000 f8dc 	bl	eef4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    ed3c:	b2f5      	uxtb	r5, r6
    ed3e:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ed42:	b920      	cbnz	r0, ed4e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    ed44:	4631      	mov	r1, r6
    ed46:	4628      	mov	r0, r5
    ed48:	f000 f8d4 	bl	eef4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x48>
    ed4c:	b140      	cbz	r0, ed60 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    ed4e:	4027      	ands	r7, r4
    ed50:	4035      	ands	r5, r6
    ed52:	403d      	ands	r5, r7
    ed54:	4644      	mov	r4, r8
    ed56:	f365 0407 	bfi	r4, r5, #0, #8
    ed5a:	f365 240f 	bfi	r4, r5, #8, #8
    ed5e:	e006      	b.n	ed6e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    ed60:	4025      	ands	r5, r4
    ed62:	4644      	mov	r4, r8
    ed64:	f365 0407 	bfi	r4, r5, #0, #8
    ed68:	403e      	ands	r6, r7
    ed6a:	f366 240f 	bfi	r4, r6, #8, #8
    ed6e:	b2e0      	uxtb	r0, r4
    ed70:	f7ff feba 	bl	eae8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    ed74:	f88d 0000 	strb.w	r0, [sp]
    ed78:	f3c4 2007 	ubfx	r0, r4, #8, #8
    ed7c:	f7ff feb4 	bl	eae8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    ed80:	f88d 0001 	strb.w	r0, [sp, #1]
    ed84:	f8bd 0000 	ldrh.w	r0, [sp]
    ed88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ed8a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    ed8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed8e:	4607      	mov	r7, r0
    ed90:	460e      	mov	r6, r1
    ed92:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    ed96:	f7f3 fa59 	bl	224c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    ed9a:	b198      	cbz	r0, edc4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    ed9c:	b31e      	cbz	r6, ede6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    ed9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    eda2:	1b40      	subs	r0, r0, r5
    eda4:	2300      	movs	r3, #0
    eda6:	eb61 0104 	sbc.w	r1, r1, r4
    edaa:	461a      	mov	r2, r3
    edac:	1a1b      	subs	r3, r3, r0
    edae:	418a      	sbcs	r2, r1
    edb0:	da19      	bge.n	ede6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    edb2:	1c42      	adds	r2, r0, #1
    edb4:	f171 0100 	sbcs.w	r1, r1, #0
    edb8:	db07      	blt.n	edca <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    edba:	f240 2136 	movw	r1, #566	; 0x236
    edbe:	2029      	movs	r0, #41	; 0x29
    edc0:	f7f5 fbfa 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edc4:	f44f 710b 	mov.w	r1, #556	; 0x22c
    edc8:	e7f9      	b.n	edbe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    edca:	4430      	add	r0, r6
    edcc:	1e40      	subs	r0, r0, #1
    edce:	fbb0 f1f6 	udiv	r1, r0, r6
    edd2:	fb01 f006 	mul.w	r0, r1, r6
    edd6:	1828      	adds	r0, r5, r0
    edd8:	f144 0400 	adc.w	r4, r4, #0
    eddc:	e9c7 0404 	strd	r0, r4, [r7, #16]
    ede0:	4608      	mov	r0, r1
    ede2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ede6:	2000      	movs	r0, #0
    ede8:	e7fb      	b.n	ede2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000edea <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    edea:	b530      	push	{r4, r5, lr}
    edec:	4613      	mov	r3, r2
    edee:	e006      	b.n	edfe <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    edf0:	18cc      	adds	r4, r1, r3
    edf2:	1ad5      	subs	r5, r2, r3
    edf4:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    edf8:	1e5b      	subs	r3, r3, #1
    edfa:	5544      	strb	r4, [r0, r5]
    edfc:	b2db      	uxtb	r3, r3
    edfe:	2b00      	cmp	r3, #0
    ee00:	d1f6      	bne.n	edf0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    ee02:	bd30      	pop	{r4, r5, pc}

0000ee04 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    ee04:	b538      	push	{r3, r4, r5, lr}
    ee06:	4605      	mov	r5, r0
    ee08:	460c      	mov	r4, r1
    ee0a:	4668      	mov	r0, sp
    ee0c:	f7fd fa60 	bl	c2d0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    ee10:	b310      	cbz	r0, ee58 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    ee12:	f99d 0000 	ldrsb.w	r0, [sp]
    ee16:	7260      	strb	r0, [r4, #9]
    ee18:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    ee1c:	72a1      	strb	r1, [r4, #10]
    ee1e:	f994 100b 	ldrsb.w	r1, [r4, #11]
    ee22:	2200      	movs	r2, #0
    ee24:	1a41      	subs	r1, r0, r1
    ee26:	d500      	bpl.n	ee2a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    ee28:	4249      	negs	r1, r1
    ee2a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    ee2e:	428b      	cmp	r3, r1
    ee30:	dc10      	bgt.n	ee54 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ee32:	2bff      	cmp	r3, #255	; 0xff
    ee34:	d00e      	beq.n	ee54 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ee36:	7b21      	ldrb	r1, [r4, #12]
    ee38:	1c49      	adds	r1, r1, #1
    ee3a:	b2c9      	uxtb	r1, r1
    ee3c:	7321      	strb	r1, [r4, #12]
    ee3e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    ee42:	4299      	cmp	r1, r3
    ee44:	d802      	bhi.n	ee4c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    ee46:	7ae1      	ldrb	r1, [r4, #11]
    ee48:	297f      	cmp	r1, #127	; 0x7f
    ee4a:	d103      	bne.n	ee54 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ee4c:	72e0      	strb	r0, [r4, #11]
    ee4e:	2000      	movs	r0, #0
    ee50:	7320      	strb	r0, [r4, #12]
    ee52:	2201      	movs	r2, #1
    ee54:	4610      	mov	r0, r2
    ee56:	bd38      	pop	{r3, r4, r5, pc}
    ee58:	207f      	movs	r0, #127	; 0x7f
    ee5a:	7260      	strb	r0, [r4, #9]
    ee5c:	2000      	movs	r0, #0
    ee5e:	bd38      	pop	{r3, r4, r5, pc}

0000ee60 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    ee60:	2300      	movs	r3, #0
    ee62:	6303      	str	r3, [r0, #48]	; 0x30
    ee64:	8702      	strh	r2, [r0, #56]	; 0x38
    ee66:	f240 2371 	movw	r3, #625	; 0x271
    ee6a:	435a      	muls	r2, r3
    ee6c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    ee70:	1e52      	subs	r2, r2, #1
    ee72:	fbb2 f1f1 	udiv	r1, r2, r1
    ee76:	6341      	str	r1, [r0, #52]	; 0x34
    ee78:	4770      	bx	lr

0000ee7a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    ee7a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ee7e:	4348      	muls	r0, r1
    ee80:	4770      	bx	lr

0000ee82 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    ee82:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ee86:	fbb0 f0f1 	udiv	r0, r0, r1
    ee8a:	b280      	uxth	r0, r0
    ee8c:	4770      	bx	lr

0000ee8e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    ee8e:	f240 2171 	movw	r1, #625	; 0x271
    ee92:	fb10 f001 	smulbb	r0, r0, r1
    ee96:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ee9a:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    ee9e:	4770      	bx	lr

0000eea0 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    eea0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eea4:	fbb0 f0f1 	udiv	r0, r0, r1
    eea8:	b2c0      	uxtb	r0, r0
    eeaa:	4770      	bx	lr

0000eeac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    eeac:	b510      	push	{r4, lr}
    eeae:	2300      	movs	r3, #0
    eeb0:	461a      	mov	r2, r3
    eeb2:	e003      	b.n	eebc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    eeb4:	5c84      	ldrb	r4, [r0, r2]
    eeb6:	4323      	orrs	r3, r4
    eeb8:	1c52      	adds	r2, r2, #1
    eeba:	b2d2      	uxtb	r2, r2
    eebc:	428a      	cmp	r2, r1
    eebe:	d3f9      	bcc.n	eeb4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    eec0:	b10b      	cbz	r3, eec6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    eec2:	2000      	movs	r0, #0
    eec4:	bd10      	pop	{r4, pc}
    eec6:	2001      	movs	r0, #1
    eec8:	bd10      	pop	{r4, pc}
    eeca:	b510      	push	{r4, lr}
    eecc:	4604      	mov	r4, r0
    eece:	2001      	movs	r0, #1
    eed0:	75a0      	strb	r0, [r4, #22]
    eed2:	f7fc fceb 	bl	b8ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    eed6:	f644 122b 	movw	r2, #18731	; 0x492b
    eeda:	4010      	ands	r0, r2
    eedc:	f8c4 005e 	str.w	r0, [r4, #94]	; 0x5e
    eee0:	f001 0106 	and.w	r1, r1, #6
    eee4:	f8c4 1062 	str.w	r1, [r4, #98]	; 0x62
    eee8:	20fe      	movs	r0, #254	; 0xfe
    eeea:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    eeee:	207f      	movs	r0, #127	; 0x7f
    eef0:	7260      	strb	r0, [r4, #9]
    eef2:	bd10      	pop	{r4, pc}
    eef4:	2801      	cmp	r0, #1
    eef6:	d002      	beq.n	eefe <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x52>
    eef8:	2802      	cmp	r0, #2
    eefa:	d003      	beq.n	ef04 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x58>
    eefc:	e004      	b.n	ef08 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5c>
    eefe:	2901      	cmp	r1, #1
    ef00:	d004      	beq.n	ef0c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x60>
    ef02:	e001      	b.n	ef08 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5c>
    ef04:	2902      	cmp	r1, #2
    ef06:	d001      	beq.n	ef0c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x60>
    ef08:	2000      	movs	r0, #0
    ef0a:	4770      	bx	lr
    ef0c:	2001      	movs	r0, #1
    ef0e:	4770      	bx	lr

0000ef10 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    ef10:	b510      	push	{r4, lr}
    ef12:	4604      	mov	r4, r0
    ef14:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    ef18:	b108      	cbz	r0, ef1e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    ef1a:	2825      	cmp	r0, #37	; 0x25
    ef1c:	d901      	bls.n	ef22 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    ef1e:	2012      	movs	r0, #18
    ef20:	bd10      	pop	{r4, pc}
    ef22:	b12a      	cbz	r2, ef30 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    ef24:	7da0      	ldrb	r0, [r4, #22]
    ef26:	b128      	cbz	r0, ef34 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    ef28:	2801      	cmp	r0, #1
    ef2a:	d009      	beq.n	ef40 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    ef2c:	201f      	movs	r0, #31
    ef2e:	bd10      	pop	{r4, pc}
    ef30:	2000      	movs	r0, #0
    ef32:	bd10      	pop	{r4, pc}
    ef34:	4620      	mov	r0, r4
    ef36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef3a:	4611      	mov	r1, r2
    ef3c:	f7f7 baf0 	b.w	6520 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    ef40:	88a2      	ldrh	r2, [r4, #4]
    ef42:	6949      	ldr	r1, [r1, #20]
    ef44:	f104 0016 	add.w	r0, r4, #22
    ef48:	f7f7 fa96 	bl	6478 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    ef4c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    ef50:	e7ee      	b.n	ef30 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000ef52 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    ef52:	b530      	push	{r4, r5, lr}
    ef54:	1c42      	adds	r2, r0, #1
    ef56:	428a      	cmp	r2, r1
    ef58:	d004      	beq.n	ef64 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    ef5a:	680a      	ldr	r2, [r1, #0]
    ef5c:	f8c0 2001 	str.w	r2, [r0, #1]
    ef60:	7909      	ldrb	r1, [r1, #4]
    ef62:	7141      	strb	r1, [r0, #5]
    ef64:	7941      	ldrb	r1, [r0, #5]
    ef66:	f001 011f 	and.w	r1, r1, #31
    ef6a:	7141      	strb	r1, [r0, #5]
    ef6c:	2100      	movs	r1, #0
    ef6e:	72c1      	strb	r1, [r0, #11]
    ef70:	1843      	adds	r3, r0, r1
    ef72:	1c49      	adds	r1, r1, #1
    ef74:	785c      	ldrb	r4, [r3, #1]
    ef76:	b2c9      	uxtb	r1, r1
    ef78:	f004 0201 	and.w	r2, r4, #1
    ef7c:	0864      	lsrs	r4, r4, #1
    ef7e:	f004 0501 	and.w	r5, r4, #1
    ef82:	4415      	add	r5, r2
    ef84:	0862      	lsrs	r2, r4, #1
    ef86:	f002 0401 	and.w	r4, r2, #1
    ef8a:	442c      	add	r4, r5
    ef8c:	0852      	lsrs	r2, r2, #1
    ef8e:	f002 0501 	and.w	r5, r2, #1
    ef92:	442c      	add	r4, r5
    ef94:	0852      	lsrs	r2, r2, #1
    ef96:	f002 0501 	and.w	r5, r2, #1
    ef9a:	442c      	add	r4, r5
    ef9c:	0852      	lsrs	r2, r2, #1
    ef9e:	f002 0501 	and.w	r5, r2, #1
    efa2:	442c      	add	r4, r5
    efa4:	0852      	lsrs	r2, r2, #1
    efa6:	f002 0501 	and.w	r5, r2, #1
    efaa:	442c      	add	r4, r5
    efac:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    efb0:	719a      	strb	r2, [r3, #6]
    efb2:	7ac3      	ldrb	r3, [r0, #11]
    efb4:	2905      	cmp	r1, #5
    efb6:	441a      	add	r2, r3
    efb8:	72c2      	strb	r2, [r0, #11]
    efba:	d3d9      	bcc.n	ef70 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    efbc:	bd30      	pop	{r4, r5, pc}

0000efbe <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    efbe:	68c0      	ldr	r0, [r0, #12]
    efc0:	6008      	str	r0, [r1, #0]
    efc2:	4770      	bx	lr

0000efc4 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    efc4:	6842      	ldr	r2, [r0, #4]
    efc6:	600a      	str	r2, [r1, #0]
    efc8:	6880      	ldr	r0, [r0, #8]
    efca:	6048      	str	r0, [r1, #4]
    efcc:	4770      	bx	lr

0000efce <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    efce:	6842      	ldr	r2, [r0, #4]
    efd0:	600a      	str	r2, [r1, #0]
    efd2:	6880      	ldr	r0, [r0, #8]
    efd4:	6048      	str	r0, [r1, #4]
    efd6:	4770      	bx	lr

0000efd8 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    efd8:	7800      	ldrb	r0, [r0, #0]
    efda:	f000 0003 	and.w	r0, r0, #3
    efde:	4770      	bx	lr

0000efe0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    efe0:	8880      	ldrh	r0, [r0, #4]
    efe2:	4770      	bx	lr

0000efe4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    efe4:	88c0      	ldrh	r0, [r0, #6]
    efe6:	4770      	bx	lr

0000efe8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    efe8:	8900      	ldrh	r0, [r0, #8]
    efea:	4770      	bx	lr

0000efec <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    efec:	8940      	ldrh	r0, [r0, #10]
    efee:	4770      	bx	lr

0000eff0 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    eff0:	7900      	ldrb	r0, [r0, #4]
    eff2:	4770      	bx	lr

0000eff4 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    eff4:	7900      	ldrb	r0, [r0, #4]
    eff6:	4770      	bx	lr

0000eff8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    eff8:	8901      	ldrh	r1, [r0, #8]
    effa:	291b      	cmp	r1, #27
    effc:	d30c      	bcc.n	f018 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    effe:	8941      	ldrh	r1, [r0, #10]
    f000:	f44f 72a4 	mov.w	r2, #328	; 0x148
    f004:	4291      	cmp	r1, r2
    f006:	d307      	bcc.n	f018 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f008:	8881      	ldrh	r1, [r0, #4]
    f00a:	291b      	cmp	r1, #27
    f00c:	d304      	bcc.n	f018 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f00e:	88c0      	ldrh	r0, [r0, #6]
    f010:	4290      	cmp	r0, r2
    f012:	d301      	bcc.n	f018 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f014:	2001      	movs	r0, #1
    f016:	4770      	bx	lr
    f018:	2000      	movs	r0, #0
    f01a:	4770      	bx	lr

0000f01c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    f01c:	b510      	push	{r4, lr}
    f01e:	29fb      	cmp	r1, #251	; 0xfb
    f020:	d904      	bls.n	f02c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    f022:	f240 51fe 	movw	r1, #1534	; 0x5fe
    f026:	202a      	movs	r0, #42	; 0x2a
    f028:	f7f5 fac6 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f02c:	7041      	strb	r1, [r0, #1]
    f02e:	bd10      	pop	{r4, pc}

0000f030 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    f030:	7901      	ldrb	r1, [r0, #4]
    f032:	0749      	lsls	r1, r1, #29
    f034:	d004      	beq.n	f040 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f036:	7940      	ldrb	r0, [r0, #5]
    f038:	0740      	lsls	r0, r0, #29
    f03a:	d001      	beq.n	f040 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f03c:	2001      	movs	r0, #1
    f03e:	4770      	bx	lr
    f040:	2000      	movs	r0, #0
    f042:	4770      	bx	lr

0000f044 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    f044:	7901      	ldrb	r1, [r0, #4]
    f046:	0749      	lsls	r1, r1, #29
    f048:	d004      	beq.n	f054 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    f04a:	7940      	ldrb	r0, [r0, #5]
    f04c:	0740      	lsls	r0, r0, #29
    f04e:	d001      	beq.n	f054 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    f050:	2001      	movs	r0, #1
    f052:	4770      	bx	lr
    f054:	2000      	movs	r0, #0
    f056:	4770      	bx	lr

0000f058 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    f058:	7900      	ldrb	r0, [r0, #4]
    f05a:	4770      	bx	lr

0000f05c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    f05c:	7940      	ldrb	r0, [r0, #5]
    f05e:	4770      	bx	lr

0000f060 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    f060:	7101      	strb	r1, [r0, #4]
    f062:	4770      	bx	lr

0000f064 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    f064:	7141      	strb	r1, [r0, #5]
    f066:	4770      	bx	lr

0000f068 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    f068:	680a      	ldr	r2, [r1, #0]
    f06a:	6042      	str	r2, [r0, #4]
    f06c:	7909      	ldrb	r1, [r1, #4]
    f06e:	7201      	strb	r1, [r0, #8]
    f070:	4770      	bx	lr

0000f072 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    f072:	72c1      	strb	r1, [r0, #11]
    f074:	0a09      	lsrs	r1, r1, #8
    f076:	7301      	strb	r1, [r0, #12]
    f078:	4770      	bx	lr

0000f07a <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    f07a:	8809      	ldrh	r1, [r1, #0]
    f07c:	8181      	strh	r1, [r0, #12]
    f07e:	4770      	bx	lr

0000f080 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    f080:	6809      	ldr	r1, [r1, #0]
    f082:	f8c0 1016 	str.w	r1, [r0, #22]
    f086:	4770      	bx	lr

0000f088 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    f088:	680a      	ldr	r2, [r1, #0]
    f08a:	6042      	str	r2, [r0, #4]
    f08c:	6849      	ldr	r1, [r1, #4]
    f08e:	6081      	str	r1, [r0, #8]
    f090:	4770      	bx	lr

0000f092 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    f092:	680a      	ldr	r2, [r1, #0]
    f094:	f840 2f0e 	str.w	r2, [r0, #14]!
    f098:	6849      	ldr	r1, [r1, #4]
    f09a:	6041      	str	r1, [r0, #4]
    f09c:	4770      	bx	lr

0000f09e <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    f09e:	680a      	ldr	r2, [r1, #0]
    f0a0:	6042      	str	r2, [r0, #4]
    f0a2:	6849      	ldr	r1, [r1, #4]
    f0a4:	6081      	str	r1, [r0, #8]
    f0a6:	4770      	bx	lr

0000f0a8 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    f0a8:	680a      	ldr	r2, [r1, #0]
    f0aa:	6042      	str	r2, [r0, #4]
    f0ac:	6849      	ldr	r1, [r1, #4]
    f0ae:	6081      	str	r1, [r0, #8]
    f0b0:	4770      	bx	lr

0000f0b2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    f0b2:	7802      	ldrb	r2, [r0, #0]
    f0b4:	f001 0103 	and.w	r1, r1, #3
    f0b8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    f0bc:	430a      	orrs	r2, r1
    f0be:	7002      	strb	r2, [r0, #0]
    f0c0:	4770      	bx	lr

0000f0c2 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    f0c2:	7101      	strb	r1, [r0, #4]
    f0c4:	4770      	bx	lr

0000f0c6 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    f0c6:	7101      	strb	r1, [r0, #4]
    f0c8:	0a09      	lsrs	r1, r1, #8
    f0ca:	7141      	strb	r1, [r0, #5]
    f0cc:	4770      	bx	lr

0000f0ce <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    f0ce:	7181      	strb	r1, [r0, #6]
    f0d0:	0a09      	lsrs	r1, r1, #8
    f0d2:	71c1      	strb	r1, [r0, #7]
    f0d4:	4770      	bx	lr

0000f0d6 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    f0d6:	7201      	strb	r1, [r0, #8]
    f0d8:	0a09      	lsrs	r1, r1, #8
    f0da:	7241      	strb	r1, [r0, #9]
    f0dc:	4770      	bx	lr

0000f0de <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    f0de:	7281      	strb	r1, [r0, #10]
    f0e0:	0a09      	lsrs	r1, r1, #8
    f0e2:	72c1      	strb	r1, [r0, #11]
    f0e4:	4770      	bx	lr

0000f0e6 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    f0e6:	7181      	strb	r1, [r0, #6]
    f0e8:	0a09      	lsrs	r1, r1, #8
    f0ea:	71c1      	strb	r1, [r0, #7]
    f0ec:	4770      	bx	lr

0000f0ee <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    f0ee:	7141      	strb	r1, [r0, #5]
    f0f0:	4770      	bx	lr

0000f0f2 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    f0f2:	7841      	ldrb	r1, [r0, #1]
    f0f4:	7800      	ldrb	r0, [r0, #0]
    f0f6:	f010 000f 	ands.w	r0, r0, #15
    f0fa:	d005      	beq.n	f108 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    f0fc:	2801      	cmp	r0, #1
    f0fe:	d007      	beq.n	f110 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    f100:	2802      	cmp	r0, #2
    f102:	d001      	beq.n	f108 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    f104:	2806      	cmp	r0, #6
    f106:	d105      	bne.n	f114 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    f108:	1f89      	subs	r1, r1, #6
    f10a:	291f      	cmp	r1, #31
    f10c:	d904      	bls.n	f118 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    f10e:	e001      	b.n	f114 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    f110:	290c      	cmp	r1, #12
    f112:	d001      	beq.n	f118 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    f114:	2000      	movs	r0, #0
    f116:	4770      	bx	lr
    f118:	2001      	movs	r0, #1
    f11a:	4770      	bx	lr

0000f11c <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    f11c:	7800      	ldrb	r0, [r0, #0]
    f11e:	09c0      	lsrs	r0, r0, #7
    f120:	4770      	bx	lr

0000f122 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    f122:	f850 2f03 	ldr.w	r2, [r0, #3]!
    f126:	600a      	str	r2, [r1, #0]
    f128:	8880      	ldrh	r0, [r0, #4]
    f12a:	8088      	strh	r0, [r1, #4]
    f12c:	4770      	bx	lr

0000f12e <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    f12e:	7800      	ldrb	r0, [r0, #0]
    f130:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f134:	4770      	bx	lr

0000f136 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    f136:	7801      	ldrb	r1, [r0, #0]
    f138:	f001 010f 	and.w	r1, r1, #15
    f13c:	2904      	cmp	r1, #4
    f13e:	d105      	bne.n	f14c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    f140:	7840      	ldrb	r0, [r0, #1]
    f142:	1f80      	subs	r0, r0, #6
    f144:	281f      	cmp	r0, #31
    f146:	d801      	bhi.n	f14c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    f148:	2001      	movs	r0, #1
    f14a:	4770      	bx	lr
    f14c:	2000      	movs	r0, #0
    f14e:	4770      	bx	lr

0000f150 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    f150:	b510      	push	{r4, lr}
    f152:	7802      	ldrb	r2, [r0, #0]
    f154:	f001 030f 	and.w	r3, r1, #15
    f158:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    f15c:	431a      	orrs	r2, r3
    f15e:	7002      	strb	r2, [r0, #0]
    f160:	2907      	cmp	r1, #7
    f162:	d20c      	bcs.n	f17e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    f164:	e8df f001 	tbb	[pc, r1]
    f168:	06040604 	.word	0x06040604
    f16c:	00040804 	.word	0x00040804
    f170:	2106      	movs	r1, #6
    f172:	e002      	b.n	f17a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f174:	210c      	movs	r1, #12
    f176:	e000      	b.n	f17a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f178:	2122      	movs	r1, #34	; 0x22
    f17a:	7041      	strb	r1, [r0, #1]
    f17c:	bd10      	pop	{r4, pc}
    f17e:	216f      	movs	r1, #111	; 0x6f
    f180:	202a      	movs	r0, #42	; 0x2a
    f182:	f7f5 fa19 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f186 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    f186:	680a      	ldr	r2, [r1, #0]
    f188:	f840 2f09 	str.w	r2, [r0, #9]!
    f18c:	8889      	ldrh	r1, [r1, #4]
    f18e:	8081      	strh	r1, [r0, #4]
    f190:	4770      	bx	lr

0000f192 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    f192:	7802      	ldrb	r2, [r0, #0]
    f194:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f198:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    f19c:	7002      	strb	r2, [r0, #0]
    f19e:	4770      	bx	lr

0000f1a0 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    f1a0:	680a      	ldr	r2, [r1, #0]
    f1a2:	f840 2f03 	str.w	r2, [r0, #3]!
    f1a6:	8889      	ldrh	r1, [r1, #4]
    f1a8:	8081      	strh	r1, [r0, #4]
    f1aa:	4770      	bx	lr

0000f1ac <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    f1ac:	7802      	ldrb	r2, [r0, #0]
    f1ae:	2340      	movs	r3, #64	; 0x40
    f1b0:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    f1b4:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    f1b8:	430a      	orrs	r2, r1
    f1ba:	7002      	strb	r2, [r0, #0]
    f1bc:	4770      	bx	lr

0000f1be <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    f1be:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f1c2:	4604      	mov	r4, r0
    f1c4:	2000      	movs	r0, #0
    f1c6:	f7f5 fbd7 	bl	4978 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f1ca:	2600      	movs	r6, #0
    f1cc:	4605      	mov	r5, r0
    f1ce:	4637      	mov	r7, r6
    f1d0:	e00e      	b.n	f1f0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    f1d2:	8820      	ldrh	r0, [r4, #0]
    f1d4:	1c40      	adds	r0, r0, #1
    f1d6:	b280      	uxth	r0, r0
    f1d8:	8020      	strh	r0, [r4, #0]
    f1da:	42a8      	cmp	r0, r5
    f1dc:	d300      	bcc.n	f1e0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    f1de:	8027      	strh	r7, [r4, #0]
    f1e0:	8820      	ldrh	r0, [r4, #0]
    f1e2:	4669      	mov	r1, sp
    f1e4:	f7ff fc9e 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f1e8:	2800      	cmp	r0, #0
    f1ea:	d007      	beq.n	f1fc <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    f1ec:	1c76      	adds	r6, r6, #1
    f1ee:	b2f6      	uxtb	r6, r6
    f1f0:	42ae      	cmp	r6, r5
    f1f2:	d3ee      	bcc.n	f1d2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    f1f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f1f8:	8020      	strh	r0, [r4, #0]
    f1fa:	2012      	movs	r0, #18
    f1fc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000f200 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    f200:	b510      	push	{r4, lr}
    f202:	7901      	ldrb	r1, [r0, #4]
    f204:	b119      	cbz	r1, f20e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    f206:	2901      	cmp	r1, #1
    f208:	d006      	beq.n	f218 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    f20a:	2000      	movs	r0, #0
    f20c:	bd10      	pop	{r4, pc}
    f20e:	8842      	ldrh	r2, [r0, #2]
    f210:	6883      	ldr	r3, [r0, #8]
    f212:	8800      	ldrh	r0, [r0, #0]
    f214:	2102      	movs	r1, #2
    f216:	e003      	b.n	f220 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    f218:	8842      	ldrh	r2, [r0, #2]
    f21a:	6883      	ldr	r3, [r0, #8]
    f21c:	8800      	ldrh	r0, [r0, #0]
    f21e:	2101      	movs	r1, #1
    f220:	f7f7 fa30 	bl	6684 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    f224:	b908      	cbnz	r0, f22a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    f226:	f7f7 fa7b 	bl	6720 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    f22a:	2001      	movs	r0, #1
    f22c:	bd10      	pop	{r4, pc}
    f22e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f232:	460e      	mov	r6, r1
    f234:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    f238:	4617      	mov	r7, r2
    f23a:	39ff      	subs	r1, #255	; 0xff
    f23c:	d014      	beq.n	f268 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f23e:	8030      	strh	r0, [r6, #0]
    f240:	2100      	movs	r1, #0
    f242:	7171      	strb	r1, [r6, #5]
    f244:	f7f5 fdb4 	bl	4db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f248:	4604      	mov	r4, r0
    f24a:	f7ff f8cc 	bl	e3e6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f24e:	0005      	movs	r5, r0
    f250:	d00a      	beq.n	f268 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f252:	4620      	mov	r0, r4
    f254:	4629      	mov	r1, r5
    f256:	aa01      	add	r2, sp, #4
    f258:	f7ff f8f6 	bl	e448 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f25c:	8070      	strh	r0, [r6, #2]
    f25e:	b130      	cbz	r0, f26e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    f260:	28fb      	cmp	r0, #251	; 0xfb
    f262:	d906      	bls.n	f272 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    f264:	21ae      	movs	r1, #174	; 0xae
    f266:	e026      	b.n	f2b6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f268:	2000      	movs	r0, #0
    f26a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f26e:	21ad      	movs	r1, #173	; 0xad
    f270:	e021      	b.n	f2b6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f272:	9801      	ldr	r0, [sp, #4]
    f274:	f7ff feb0 	bl	efd8 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    f278:	2801      	cmp	r0, #1
    f27a:	d003      	beq.n	f284 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f27c:	2802      	cmp	r0, #2
    f27e:	d001      	beq.n	f284 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f280:	21bd      	movs	r1, #189	; 0xbd
    f282:	e018      	b.n	f2b6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f284:	7130      	strb	r0, [r6, #4]
    f286:	4629      	mov	r1, r5
    f288:	8873      	ldrh	r3, [r6, #2]
    f28a:	2503      	movs	r5, #3
    f28c:	4620      	mov	r0, r4
    f28e:	463a      	mov	r2, r7
    f290:	9500      	str	r5, [sp, #0]
    f292:	f7fe ff8f 	bl	e1b4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    f296:	4620      	mov	r0, r4
    f298:	60b7      	str	r7, [r6, #8]
    f29a:	f7ff f868 	bl	e36e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f29e:	b138      	cbz	r0, f2b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    f2a0:	2100      	movs	r1, #0
    f2a2:	4620      	mov	r0, r4
    f2a4:	460a      	mov	r2, r1
    f2a6:	f7ff f9ad 	bl	e604 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f2aa:	b118      	cbz	r0, f2b4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    f2ac:	2001      	movs	r0, #1
    f2ae:	e7dc      	b.n	f26a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    f2b0:	21cd      	movs	r1, #205	; 0xcd
    f2b2:	e000      	b.n	f2b6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f2b4:	21d2      	movs	r1, #210	; 0xd2
    f2b6:	202b      	movs	r0, #43	; 0x2b
    f2b8:	f7f5 f97e 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f2bc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    f2bc:	f7f7 bcba 	b.w	6c34 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f8>
    f2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2c4:	460c      	mov	r4, r1
    f2c6:	b180      	cbz	r0, f2ea <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    f2c8:	2700      	movs	r7, #0
    f2ca:	4606      	mov	r6, r0
    f2cc:	f500 759a 	add.w	r5, r0, #308	; 0x134
    f2d0:	2a10      	cmp	r2, #16
    f2d2:	d060      	beq.n	f396 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xda>
    f2d4:	dc0c      	bgt.n	f2f0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    f2d6:	f1a2 0205 	sub.w	r2, r2, #5
    f2da:	2a08      	cmp	r2, #8
    f2dc:	d210      	bcs.n	f300 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    f2de:	e8df f002 	tbb	[pc, r2]
    f2e2:	124e      	.short	0x124e
    f2e4:	20330f0f 	.word	0x20330f0f
    f2e8:	540f      	.short	0x540f
    f2ea:	f44f 7112 	mov.w	r1, #584	; 0x248
    f2ee:	e034      	b.n	f35a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f2f0:	2a11      	cmp	r2, #17
    f2f2:	d072      	beq.n	f3da <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    f2f4:	2a18      	cmp	r2, #24
    f2f6:	d068      	beq.n	f3ca <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x10e>
    f2f8:	2a1a      	cmp	r2, #26
    f2fa:	d057      	beq.n	f3ac <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xf0>
    f2fc:	2a1b      	cmp	r2, #27
    f2fe:	d060      	beq.n	f3c2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x106>
    f300:	f240 2175 	movw	r1, #629	; 0x275
    f304:	e029      	b.n	f35a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f306:	7067      	strb	r7, [r4, #1]
    f308:	2009      	movs	r0, #9
    f30a:	7020      	strb	r0, [r4, #0]
    f30c:	8537      	strh	r7, [r6, #40]	; 0x28
    f30e:	f855 0f80 	ldr.w	r0, [r5, #128]!
    f312:	6060      	str	r0, [r4, #4]
    f314:	6868      	ldr	r0, [r5, #4]
    f316:	60a0      	str	r0, [r4, #8]
    f318:	8928      	ldrh	r0, [r5, #8]
    f31a:	81a0      	strh	r0, [r4, #12]
    f31c:	7127      	strb	r7, [r4, #4]
    f31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f322:	8830      	ldrh	r0, [r6, #0]
    f324:	f7f5 fd44 	bl	4db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f328:	4680      	mov	r8, r0
    f32a:	f7ff f902 	bl	e532 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    f32e:	b110      	cbz	r0, f336 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x7a>
    f330:	f240 11b9 	movw	r1, #441	; 0x1b9
    f334:	e011      	b.n	f35a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f336:	7067      	strb	r7, [r4, #1]
    f338:	200e      	movs	r0, #14
    f33a:	7020      	strb	r0, [r4, #0]
    f33c:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
    f340:	7120      	strb	r0, [r4, #4]
    f342:	8830      	ldrh	r0, [r6, #0]
    f344:	80e0      	strh	r0, [r4, #6]
    f346:	e015      	b.n	f374 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xb8>
    f348:	8830      	ldrh	r0, [r6, #0]
    f34a:	f7f5 fd31 	bl	4db0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f34e:	4680      	mov	r8, r0
    f350:	f7ff f8ef 	bl	e532 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    f354:	b120      	cbz	r0, f360 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    f356:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    f35a:	2010      	movs	r0, #16
    f35c:	f7f5 f92c 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f360:	7067      	strb	r7, [r4, #1]
    f362:	200d      	movs	r0, #13
    f364:	7020      	strb	r0, [r4, #0]
    f366:	f815 0f94 	ldrb.w	r0, [r5, #148]!
    f36a:	7120      	strb	r0, [r4, #4]
    f36c:	8830      	ldrh	r0, [r6, #0]
    f36e:	80e0      	strh	r0, [r4, #6]
    f370:	7928      	ldrb	r0, [r5, #4]
    f372:	7220      	strb	r0, [r4, #8]
    f374:	4640      	mov	r0, r8
    f376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f37a:	f7ff b8f5 	b.w	e568 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    f37e:	7067      	strb	r7, [r4, #1]
    f380:	2008      	movs	r0, #8
    f382:	7020      	strb	r0, [r4, #0]
    f384:	f855 0f6a 	ldr.w	r0, [r5, #106]!
    f388:	e00a      	b.n	f3a0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe4>
    f38a:	7067      	strb	r7, [r4, #1]
    f38c:	2010      	movs	r0, #16
    f38e:	7020      	strb	r0, [r4, #0]
    f390:	8830      	ldrh	r0, [r6, #0]
    f392:	8088      	strh	r0, [r1, #4]
    f394:	e7c3      	b.n	f31e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f396:	7067      	strb	r7, [r4, #1]
    f398:	2015      	movs	r0, #21
    f39a:	7020      	strb	r0, [r4, #0]
    f39c:	f855 0f22 	ldr.w	r0, [r5, #34]!
    f3a0:	6060      	str	r0, [r4, #4]
    f3a2:	6868      	ldr	r0, [r5, #4]
    f3a4:	60a0      	str	r0, [r4, #8]
    f3a6:	68a8      	ldr	r0, [r5, #8]
    f3a8:	60e0      	str	r0, [r4, #12]
    f3aa:	e7b8      	b.n	f31e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f3ac:	7067      	strb	r7, [r4, #1]
    f3ae:	201c      	movs	r0, #28
    f3b0:	7020      	strb	r0, [r4, #0]
    f3b2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    f3b4:	6060      	str	r0, [r4, #4]
    f3b6:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    f3b8:	60a0      	str	r0, [r4, #8]
    f3ba:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
    f3be:	81a0      	strh	r0, [r4, #12]
    f3c0:	e7ad      	b.n	f31e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f3c2:	201d      	movs	r0, #29
    f3c4:	7020      	strb	r0, [r4, #0]
    f3c6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    f3c8:	e004      	b.n	f3d4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x118>
    f3ca:	7067      	strb	r7, [r4, #1]
    f3cc:	201a      	movs	r0, #26
    f3ce:	7020      	strb	r0, [r4, #0]
    f3d0:	f8d5 000a 	ldr.w	r0, [r5, #10]
    f3d4:	6048      	str	r0, [r1, #4]
    f3d6:	e7a2      	b.n	f31e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f3d8:	e7ff      	b.n	f3da <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    f3da:	7067      	strb	r7, [r4, #1]
    f3dc:	2016      	movs	r0, #22
    f3de:	7020      	strb	r0, [r4, #0]
    f3e0:	f855 0f5a 	ldr.w	r0, [r5, #90]!
    f3e4:	6060      	str	r0, [r4, #4]
    f3e6:	88a8      	ldrh	r0, [r5, #4]
    f3e8:	8120      	strh	r0, [r4, #8]
    f3ea:	e798      	b.n	f31e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>

0000f3ec <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    f3ec:	b4f0      	push	{r4, r5, r6, r7}
    f3ee:	8150      	strh	r0, [r2, #10]
    f3f0:	890d      	ldrh	r5, [r1, #8]
    f3f2:	4614      	mov	r4, r2
    f3f4:	8195      	strh	r5, [r2, #12]
    f3f6:	898a      	ldrh	r2, [r1, #12]
    f3f8:	81e2      	strh	r2, [r4, #14]
    f3fa:	8948      	ldrh	r0, [r1, #10]
    f3fc:	8220      	strh	r0, [r4, #16]
    f3fe:	89ce      	ldrh	r6, [r1, #14]
    f400:	8266      	strh	r6, [r4, #18]
    f402:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    f404:	42b7      	cmp	r7, r6
    f406:	d108      	bne.n	f41a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f408:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    f40a:	4286      	cmp	r6, r0
    f40c:	d105      	bne.n	f41a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f40e:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    f410:	4296      	cmp	r6, r2
    f412:	d102      	bne.n	f41a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f414:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    f416:	42aa      	cmp	r2, r5
    f418:	d001      	beq.n	f41e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    f41a:	2201      	movs	r2, #1
    f41c:	e000      	b.n	f420 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    f41e:	2200      	movs	r2, #0
    f420:	7522      	strb	r2, [r4, #20]
    f422:	8548      	strh	r0, [r1, #42]	; 0x2a
    f424:	8a60      	ldrh	r0, [r4, #18]
    f426:	85c8      	strh	r0, [r1, #46]	; 0x2e
    f428:	89a0      	ldrh	r0, [r4, #12]
    f42a:	8588      	strh	r0, [r1, #44]	; 0x2c
    f42c:	89e0      	ldrh	r0, [r4, #14]
    f42e:	8608      	strh	r0, [r1, #48]	; 0x30
    f430:	4620      	mov	r0, r4
    f432:	bcf0      	pop	{r4, r5, r6, r7}
    f434:	2210      	movs	r2, #16
    f436:	4619      	mov	r1, r3
    f438:	f7f7 b978 	b.w	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000f43c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    f43c:	b510      	push	{r4, lr}
    f43e:	888c      	ldrh	r4, [r1, #4]
    f440:	890a      	ldrh	r2, [r1, #8]
    f442:	884b      	ldrh	r3, [r1, #2]
    f444:	88c9      	ldrh	r1, [r1, #6]
    f446:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    f44a:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    f44e:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    f452:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    f456:	bd10      	pop	{r4, pc}

0000f458 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    f458:	b570      	push	{r4, r5, r6, lr}
    f45a:	4615      	mov	r5, r2
    f45c:	460c      	mov	r4, r1
    f45e:	f000 f8ce 	bl	f5fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    f462:	3096      	adds	r0, #150	; 0x96
    f464:	4428      	add	r0, r5
    f466:	42a0      	cmp	r0, r4
    f468:	d801      	bhi.n	f46e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    f46a:	1a20      	subs	r0, r4, r0
    f46c:	bd70      	pop	{r4, r5, r6, pc}
    f46e:	2000      	movs	r0, #0
    f470:	bd70      	pop	{r4, r5, r6, pc}

0000f472 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    f472:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f476:	4604      	mov	r4, r0
    f478:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
    f47a:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    f47c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    f480:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    f484:	4285      	cmp	r5, r0
    f486:	d300      	bcc.n	f48a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    f488:	4605      	mov	r5, r0
    f48a:	4620      	mov	r0, r4
    f48c:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    f490:	f000 f8a5 	bl	f5de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    f494:	4601      	mov	r1, r0
    f496:	8765      	strh	r5, [r4, #58]	; 0x3a
    f498:	87e1      	strh	r1, [r4, #62]	; 0x3e
    f49a:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    f49e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f4a2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    f4a6:	4680      	mov	r8, r0
    f4a8:	42aa      	cmp	r2, r5
    f4aa:	d200      	bcs.n	f4ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    f4ac:	462a      	mov	r2, r5
    f4ae:	428b      	cmp	r3, r1
    f4b0:	d200      	bcs.n	f4b4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    f4b2:	460b      	mov	r3, r1
    f4b4:	8202      	strh	r2, [r0, #16]
    f4b6:	f8a8 3012 	strh.w	r3, [r8, #18]
    f4ba:	42bd      	cmp	r5, r7
    f4bc:	d101      	bne.n	f4c2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    f4be:	42b1      	cmp	r1, r6
    f4c0:	d001      	beq.n	f4c6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    f4c2:	2001      	movs	r0, #1
    f4c4:	e000      	b.n	f4c8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x56>
    f4c6:	2000      	movs	r0, #0
    f4c8:	4681      	mov	r9, r0
    f4ca:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
    f4ce:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    f4d2:	8f27      	ldrh	r7, [r4, #56]	; 0x38
    f4d4:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    f4d6:	4285      	cmp	r5, r0
    f4d8:	d300      	bcc.n	f4dc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6a>
    f4da:	4605      	mov	r5, r0
    f4dc:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    f4e0:	4620      	mov	r0, r4
    f4e2:	f000 f884 	bl	f5ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f4e6:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    f4ea:	2902      	cmp	r1, #2
    f4ec:	d108      	bne.n	f500 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8e>
    f4ee:	42af      	cmp	r7, r5
    f4f0:	d200      	bcs.n	f4f4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x82>
    f4f2:	463d      	mov	r5, r7
    f4f4:	4286      	cmp	r6, r0
    f4f6:	d200      	bcs.n	f4fa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
    f4f8:	4630      	mov	r0, r6
    f4fa:	2100      	movs	r1, #0
    f4fc:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    f500:	f8a8 5008 	strh.w	r5, [r8, #8]
    f504:	f8a8 000c 	strh.w	r0, [r8, #12]
    f508:	42bd      	cmp	r5, r7
    f50a:	d101      	bne.n	f510 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    f50c:	42b0      	cmp	r0, r6
    f50e:	d001      	beq.n	f514 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
    f510:	2001      	movs	r0, #1
    f512:	e000      	b.n	f516 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa4>
    f514:	2000      	movs	r0, #0
    f516:	ea40 0009 	orr.w	r0, r0, r9
    f51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f51e <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    f51e:	6840      	ldr	r0, [r0, #4]
    f520:	4770      	bx	lr

0000f522 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    f522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f526:	4616      	mov	r6, r2
    f528:	460f      	mov	r7, r1
    f52a:	4604      	mov	r4, r0
    f52c:	f000 f867 	bl	f5fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    f530:	4605      	mov	r5, r0
    f532:	463a      	mov	r2, r7
    f534:	6921      	ldr	r1, [r4, #16]
    f536:	6b20      	ldr	r0, [r4, #48]	; 0x30
    f538:	f000 f84c 	bl	f5d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f53c:	19a9      	adds	r1, r5, r6
    f53e:	4281      	cmp	r1, r0
    f540:	d300      	bcc.n	f544 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    f542:	4608      	mov	r0, r1
    f544:	6360      	str	r0, [r4, #52]	; 0x34
    f546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f54a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f54a:	221b      	movs	r2, #27
    f54c:	8402      	strh	r2, [r0, #32]
    f54e:	8382      	strh	r2, [r0, #28]
    f550:	82c2      	strh	r2, [r0, #22]
    f552:	8282      	strh	r2, [r0, #20]
    f554:	8142      	strh	r2, [r0, #10]
    f556:	8202      	strh	r2, [r0, #16]
    f558:	8102      	strh	r2, [r0, #8]
    f55a:	8542      	strh	r2, [r0, #42]	; 0x2a
    f55c:	8582      	strh	r2, [r0, #44]	; 0x2c
    f55e:	8482      	strh	r2, [r0, #36]	; 0x24
    f560:	2900      	cmp	r1, #0
    f562:	d10a      	bne.n	f57a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f564:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f568:	8441      	strh	r1, [r0, #34]	; 0x22
    f56a:	83c1      	strh	r1, [r0, #30]
    f56c:	8341      	strh	r1, [r0, #26]
    f56e:	8301      	strh	r1, [r0, #24]
    f570:	81c1      	strh	r1, [r0, #14]
    f572:	8241      	strh	r1, [r0, #18]
    f574:	8181      	strh	r1, [r0, #12]
    f576:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f578:	8601      	strh	r1, [r0, #48]	; 0x30
    f57a:	4770      	bx	lr

0000f57c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f57c:	6800      	ldr	r0, [r0, #0]
    f57e:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f582:	4290      	cmp	r0, r2
    f584:	d903      	bls.n	f58e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f586:	1a40      	subs	r0, r0, r1
    f588:	389c      	subs	r0, #156	; 0x9c
    f58a:	0840      	lsrs	r0, r0, #1
    f58c:	4770      	bx	lr
    f58e:	2000      	movs	r0, #0
    f590:	4770      	bx	lr

0000f592 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f592:	b510      	push	{r4, lr}
    f594:	9c02      	ldr	r4, [sp, #8]
    f596:	8281      	strh	r1, [r0, #20]
    f598:	82c2      	strh	r2, [r0, #22]
    f59a:	8303      	strh	r3, [r0, #24]
    f59c:	8344      	strh	r4, [r0, #26]
    f59e:	bd10      	pop	{r4, pc}

0000f5a0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    f5a0:	b430      	push	{r4, r5}
    f5a2:	8150      	strh	r0, [r2, #10]
    f5a4:	8a88      	ldrh	r0, [r1, #20]
    f5a6:	8190      	strh	r0, [r2, #12]
    f5a8:	8ac8      	ldrh	r0, [r1, #22]
    f5aa:	81d0      	strh	r0, [r2, #14]
    f5ac:	8b08      	ldrh	r0, [r1, #24]
    f5ae:	8210      	strh	r0, [r2, #16]
    f5b0:	8b48      	ldrh	r0, [r1, #26]
    f5b2:	4614      	mov	r4, r2
    f5b4:	8250      	strh	r0, [r2, #18]
    f5b6:	4620      	mov	r0, r4
    f5b8:	bc30      	pop	{r4, r5}
    f5ba:	221a      	movs	r2, #26
    f5bc:	4619      	mov	r1, r3
    f5be:	f7f7 b8b5 	b.w	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f5c2:	2902      	cmp	r1, #2
    f5c4:	d003      	beq.n	f5ce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    f5c6:	00c0      	lsls	r0, r0, #3
    f5c8:	3070      	adds	r0, #112	; 0x70
    f5ca:	b280      	uxth	r0, r0
    f5cc:	4770      	bx	lr
    f5ce:	0080      	lsls	r0, r0, #2
    f5d0:	303c      	adds	r0, #60	; 0x3c
    f5d2:	e7fa      	b.n	f5ca <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    f5d4:	4288      	cmp	r0, r1
    f5d6:	d300      	bcc.n	f5da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    f5d8:	4608      	mov	r0, r1
    f5da:	1a80      	subs	r0, r0, r2
    f5dc:	4770      	bx	lr
    f5de:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    f5e2:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    f5e6:	4281      	cmp	r1, r0
    f5e8:	d200      	bcs.n	f5ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    f5ea:	4608      	mov	r0, r1
    f5ec:	4770      	bx	lr
    f5ee:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f5f2:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    f5f6:	4281      	cmp	r1, r0
    f5f8:	d200      	bcs.n	f5fc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    f5fa:	4608      	mov	r0, r1
    f5fc:	4770      	bx	lr
    f5fe:	2196      	movs	r1, #150	; 0x96
    f600:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
    f604:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
    f608:	f000 b800 	b.w	f60c <__kernel_ram_size+0x4>
    f60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f610:	460d      	mov	r5, r1
    f612:	4606      	mov	r6, r0
    f614:	4698      	mov	r8, r3
    f616:	4617      	mov	r7, r2
    f618:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    f61a:	4611      	mov	r1, r2
    f61c:	f7ff ffd1 	bl	f5c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f620:	4604      	mov	r4, r0
    f622:	4639      	mov	r1, r7
    f624:	4630      	mov	r0, r6
    f626:	f7ff ffe2 	bl	f5ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f62a:	42a0      	cmp	r0, r4
    f62c:	d200      	bcs.n	f630 <__kernel_ram_size+0x28>
    f62e:	4604      	mov	r4, r0
    f630:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
    f634:	4641      	mov	r1, r8
    f636:	f7ff ffc4 	bl	f5c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f63a:	4607      	mov	r7, r0
    f63c:	4641      	mov	r1, r8
    f63e:	4630      	mov	r0, r6
    f640:	f7ff ffcd 	bl	f5de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    f644:	42b8      	cmp	r0, r7
    f646:	d300      	bcc.n	f64a <__kernel_ram_size+0x42>
    f648:	4638      	mov	r0, r7
    f64a:	4420      	add	r0, r4
    f64c:	4428      	add	r0, r5
    f64e:	1d80      	adds	r0, r0, #6
    f650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f654 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    f654:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f656:	2700      	movs	r7, #0
    f658:	463d      	mov	r5, r7
    f65a:	2623      	movs	r6, #35	; 0x23
    f65c:	f7f7 fb66 	bl	6d2c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    f660:	4604      	mov	r4, r0
    f662:	f7f7 fb2b 	bl	6cbc <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    f666:	b190      	cbz	r0, f68e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    f668:	4669      	mov	r1, sp
    f66a:	2000      	movs	r0, #0
    f66c:	f7ff f8a5 	bl	e7ba <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f670:	e003      	b.n	f67a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x26>
    f672:	9802      	ldr	r0, [sp, #8]
    f674:	6941      	ldr	r1, [r0, #20]
    f676:	42a1      	cmp	r1, r4
    f678:	d009      	beq.n	f68e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    f67a:	4668      	mov	r0, sp
    f67c:	f7f5 f9c8 	bl	4a10 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f680:	2800      	cmp	r0, #0
    f682:	d0f6      	beq.n	f672 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x1e>
    f684:	4625      	mov	r5, r4
    f686:	4620      	mov	r0, r4
    f688:	f7f7 fae2 	bl	6c50 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    f68c:	4607      	mov	r7, r0
    f68e:	1e76      	subs	r6, r6, #1
    f690:	d001      	beq.n	f696 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x42>
    f692:	2f00      	cmp	r7, #0
    f694:	d0e2      	beq.n	f65c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8>
    f696:	b10d      	cbz	r5, f69c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x48>
    f698:	4628      	mov	r0, r5
    f69a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f69c:	f240 116b 	movw	r1, #363	; 0x16b
    f6a0:	200f      	movs	r0, #15
    f6a2:	f7f4 ff89 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6a6:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    f6aa:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    f6ae:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    f6b2:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    f6b6:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    f6ba:	ea10 0f40 	tst.w	r0, r0, lsl #1
    f6be:	d001      	beq.n	f6c4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x70>
    f6c0:	2000      	movs	r0, #0
    f6c2:	4770      	bx	lr
    f6c4:	2001      	movs	r0, #1
    f6c6:	4770      	bx	lr
    f6c8:	b510      	push	{r4, lr}
    f6ca:	4604      	mov	r4, r0
    f6cc:	2108      	movs	r1, #8
    f6ce:	4620      	mov	r0, r4
    f6d0:	f7f5 f81e 	bl	4710 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f6d4:	6820      	ldr	r0, [r4, #0]
    f6d6:	2800      	cmp	r0, #0
    f6d8:	d102      	bne.n	f6e0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8c>
    f6da:	6860      	ldr	r0, [r4, #4]
    f6dc:	2800      	cmp	r0, #0
    f6de:	d0f5      	beq.n	f6cc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x78>
    f6e0:	bd10      	pop	{r4, pc}

0000f6e2 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>:
    f6e2:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    f6e6:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    f6ea:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    f6ee:	4408      	add	r0, r1
    f6f0:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    f6f4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    f6f8:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    f6fc:	4408      	add	r0, r1
    f6fe:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    f702:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    f706:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    f70a:	4408      	add	r0, r1
    f70c:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    f710:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    f714:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    f718:	4408      	add	r0, r1
    f71a:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    f71e:	b2c0      	uxtb	r0, r0
    f720:	4770      	bx	lr

0000f722 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    f722:	f000 0155 	and.w	r1, r0, #85	; 0x55
    f726:	2255      	movs	r2, #85	; 0x55
    f728:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    f72c:	4408      	add	r0, r1
    f72e:	f000 0133 	and.w	r1, r0, #51	; 0x33
    f732:	2233      	movs	r2, #51	; 0x33
    f734:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    f738:	4408      	add	r0, r1
    f73a:	f000 010f 	and.w	r1, r0, #15
    f73e:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    f742:	4770      	bx	lr

0000f744 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>:
    f744:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    f748:	f7ff bfcb 	b.w	f6e2 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>
    f74c:	2801      	cmp	r0, #1
    f74e:	d102      	bne.n	f756 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x12>
    f750:	7948      	ldrb	r0, [r1, #5]
    f752:	0980      	lsrs	r0, r0, #6
    f754:	d001      	beq.n	f75a <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x16>
    f756:	2000      	movs	r0, #0
    f758:	4770      	bx	lr
    f75a:	2001      	movs	r0, #1
    f75c:	4770      	bx	lr
    f75e:	2801      	cmp	r0, #1
    f760:	d106      	bne.n	f770 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x2c>
    f762:	7948      	ldrb	r0, [r1, #5]
    f764:	2101      	movs	r1, #1
    f766:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f76a:	d101      	bne.n	f770 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x2c>
    f76c:	2001      	movs	r0, #1
    f76e:	4770      	bx	lr
    f770:	2000      	movs	r0, #0
    f772:	4770      	bx	lr
    f774:	b118      	cbz	r0, f77e <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x3a>
    f776:	2802      	cmp	r0, #2
    f778:	d001      	beq.n	f77e <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x3a>
    f77a:	2001      	movs	r0, #1
    f77c:	4770      	bx	lr
    f77e:	2000      	movs	r0, #0
    f780:	4770      	bx	lr
    f782:	2802      	cmp	r0, #2
    f784:	d003      	beq.n	f78e <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x4a>
    f786:	2803      	cmp	r0, #3
    f788:	d001      	beq.n	f78e <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A+0x4a>
    f78a:	2000      	movs	r0, #0
    f78c:	4770      	bx	lr
    f78e:	2001      	movs	r0, #1
    f790:	4770      	bx	lr

0000f792 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    f792:	f7f8 bb15 	b.w	7dc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc38>

0000f796 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    f796:	b510      	push	{r4, lr}
    f798:	2000      	movs	r0, #0
    f79a:	f7f8 f96d 	bl	7a78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f0>
    f79e:	f7f7 fd11 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    f7a2:	f7f8 fb1b 	bl	7ddc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc54>
    f7a6:	2000      	movs	r0, #0
    f7a8:	bd10      	pop	{r4, pc}
    f7aa:	b510      	push	{r4, lr}
    f7ac:	f7f8 f97e 	bl	7aac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    f7b0:	f7f7 fd08 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    f7b4:	f7fc fac4 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f7b8:	2005      	movs	r0, #5
    f7ba:	bd10      	pop	{r4, pc}
    f7bc:	b510      	push	{r4, lr}
    f7be:	f7f8 f975 	bl	7aac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    f7c2:	f7fc fabd 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f7c6:	2005      	movs	r0, #5
    f7c8:	bd10      	pop	{r4, pc}
    f7ca:	b530      	push	{r4, r5, lr}
    f7cc:	b089      	sub	sp, #36	; 0x24
    f7ce:	4605      	mov	r5, r0
    f7d0:	f7f8 f96c 	bl	7aac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    f7d4:	7828      	ldrb	r0, [r5, #0]
    f7d6:	4669      	mov	r1, sp
    f7d8:	f000 040f 	and.w	r4, r0, #15
    f7dc:	4622      	mov	r2, r4
    f7de:	4628      	mov	r0, r5
    f7e0:	f7f8 fc30 	bl	8044 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    f7e4:	2200      	movs	r2, #0
    f7e6:	4621      	mov	r1, r4
    f7e8:	4668      	mov	r0, sp
    f7ea:	f7f7 fd4b 	bl	7284 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xfc>
    f7ee:	4621      	mov	r1, r4
    f7f0:	4668      	mov	r0, sp
    f7f2:	f7f8 f8db 	bl	79ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x824>
    f7f6:	4604      	mov	r4, r0
    f7f8:	f7f7 fce4 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    f7fc:	b009      	add	sp, #36	; 0x24
    f7fe:	4620      	mov	r0, r4
    f800:	bd30      	pop	{r4, r5, pc}
    f802:	f240 3191 	movw	r1, #913	; 0x391
    f806:	2032      	movs	r0, #50	; 0x32
    f808:	f7f4 fed6 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f80c:	b510      	push	{r4, lr}
    f80e:	f7f8 f94d 	bl	7aac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    f812:	f7fc fa95 	bl	bd40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f81a:	f7f8 bae7 	b.w	7dec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc64>
    f81e:	f7f8 bacf 	b.w	7dc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc38>
    f822:	f7fe bf24 	b.w	e66e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    f826:	b570      	push	{r4, r5, r6, lr}
    f828:	4614      	mov	r4, r2
    f82a:	461d      	mov	r5, r3
    f82c:	4606      	mov	r6, r0
    f82e:	f7f3 faf3 	bl	2e18 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f832:	1900      	adds	r0, r0, r4
    f834:	4169      	adcs	r1, r5
    f836:	e9c6 0100 	strd	r0, r1, [r6]
    f83a:	bd70      	pop	{r4, r5, r6, pc}

0000f83c <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY>:
    f83c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f83e:	b08b      	sub	sp, #44	; 0x2c
    f840:	4607      	mov	r7, r0
    f842:	f7f5 fae9 	bl	4e18 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f846:	4604      	mov	r4, r0
    f848:	f7fe fdcd 	bl	e3e6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f84c:	0005      	movs	r5, r0
    f84e:	d00c      	beq.n	f86a <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x2e>
    f850:	4620      	mov	r0, r4
    f852:	4629      	mov	r1, r5
    f854:	466a      	mov	r2, sp
    f856:	f7fe fdf7 	bl	e448 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f85a:	4606      	mov	r6, r0
    f85c:	f7f5 fad6 	bl	4e0c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f860:	42b0      	cmp	r0, r6
    f862:	d005      	beq.n	f870 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x34>
    f864:	f240 1155 	movw	r1, #341	; 0x155
    f868:	e034      	b.n	f8d4 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x98>
    f86a:	f240 114b 	movw	r1, #331	; 0x14b
    f86e:	e031      	b.n	f8d4 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x98>
    f870:	a901      	add	r1, sp, #4
    f872:	9800      	ldr	r0, [sp, #0]
    f874:	f000 f93e 	bl	faf4 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    f878:	1d3e      	adds	r6, r7, #4
    f87a:	4628      	mov	r0, r5
    f87c:	f7fe fd5c 	bl	e338 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f880:	4605      	mov	r5, r0
    f882:	f100 0109 	add.w	r1, r0, #9
    f886:	221c      	movs	r2, #28
    f888:	4630      	mov	r0, r6
    f88a:	f7fd fed6 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f88e:	7ce8      	ldrb	r0, [r5, #19]
    f890:	f04f 0500 	mov.w	r5, #0
    f894:	06c1      	lsls	r1, r0, #27
    f896:	d50d      	bpl.n	f8b4 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x78>
    f898:	0740      	lsls	r0, r0, #29
    f89a:	d40a      	bmi.n	f8b2 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x76>
    f89c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    f8a0:	f106 001c 	add.w	r0, r6, #28
    f8a4:	9904      	ldr	r1, [sp, #16]
    f8a6:	f7fd fec8 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f8aa:	f89d 0014 	ldrb.w	r0, [sp, #20]
    f8ae:	7230      	strb	r0, [r6, #8]
    f8b0:	e000      	b.n	f8b4 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x78>
    f8b2:	7235      	strb	r5, [r6, #8]
    f8b4:	707d      	strb	r5, [r7, #1]
    f8b6:	2005      	movs	r0, #5
    f8b8:	7038      	strb	r0, [r7, #0]
    f8ba:	4620      	mov	r0, r4
    f8bc:	f7fe fd57 	bl	e36e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f8c0:	b130      	cbz	r0, f8d0 <sym_IPWY5L55KNQVGDBWQN2N6MN5EEF7TC2RZ3APWJY+0x94>
    f8c2:	2100      	movs	r1, #0
    f8c4:	4620      	mov	r0, r4
    f8c6:	460a      	mov	r2, r1
    f8c8:	f7fe fe9c 	bl	e604 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f8cc:	b00b      	add	sp, #44	; 0x2c
    f8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8d0:	f240 1195 	movw	r1, #405	; 0x195
    f8d4:	2033      	movs	r0, #51	; 0x33
    f8d6:	f7f4 fe6f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f8da <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    f8da:	b510      	push	{r4, lr}
    f8dc:	f7f5 fa9c 	bl	4e18 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f8e0:	f000 f8fd 	bl	fade <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x4e>
    f8e4:	4604      	mov	r4, r0
    f8e6:	221c      	movs	r2, #28
    f8e8:	2100      	movs	r1, #0
    f8ea:	3009      	adds	r0, #9
    f8ec:	f7fd ff1f 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f8f0:	207f      	movs	r0, #127	; 0x7f
    f8f2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    f8f6:	21ff      	movs	r1, #255	; 0xff
    f8f8:	75e1      	strb	r1, [r4, #23]
    f8fa:	72a1      	strb	r1, [r4, #10]
    f8fc:	7721      	strb	r1, [r4, #28]
    f8fe:	7ce0      	ldrb	r0, [r4, #19]
    f900:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    f904:	3020      	adds	r0, #32
    f906:	74e0      	strb	r0, [r4, #19]
    f908:	bd10      	pop	{r4, pc}

0000f90a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    f90a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f90e:	461d      	mov	r5, r3
    f910:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    f914:	4616      	mov	r6, r2
    f916:	4688      	mov	r8, r1
    f918:	4681      	mov	r9, r0
    f91a:	f7f5 fa7d 	bl	4e18 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f91e:	4604      	mov	r4, r0
    f920:	f7fe fd0c 	bl	e33c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    f924:	2801      	cmp	r0, #1
    f926:	d066      	beq.n	f9f6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    f928:	4620      	mov	r0, r4
    f92a:	f000 f8d8 	bl	fade <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x4e>
    f92e:	4604      	mov	r4, r0
    f930:	221c      	movs	r2, #28
    f932:	2100      	movs	r1, #0
    f934:	3009      	adds	r0, #9
    f936:	f7fd fefa 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f93a:	2701      	movs	r7, #1
    f93c:	7267      	strb	r7, [r4, #9]
    f93e:	ea5f 0008 	movs.w	r0, r8
    f942:	d009      	beq.n	f958 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    f944:	2801      	cmp	r0, #1
    f946:	d00b      	beq.n	f960 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    f948:	2802      	cmp	r0, #2
    f94a:	d02d      	beq.n	f9a8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    f94c:	f1b8 0f06 	cmp.w	r8, #6
    f950:	d02c      	beq.n	f9ac <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    f952:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    f956:	e04b      	b.n	f9f0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    f958:	7ce0      	ldrb	r0, [r4, #19]
    f95a:	f040 0001 	orr.w	r0, r0, #1
    f95e:	e026      	b.n	f9ae <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    f960:	7ce0      	ldrb	r0, [r4, #19]
    f962:	f040 0005 	orr.w	r0, r0, #5
    f966:	f040 0010 	orr.w	r0, r0, #16
    f96a:	74e0      	strb	r0, [r4, #19]
    f96c:	f104 030a 	add.w	r3, r4, #10
    f970:	1c5a      	adds	r2, r3, #1
    f972:	4648      	mov	r0, r9
    f974:	990a      	ldr	r1, [sp, #40]	; 0x28
    f976:	f000 f88d 	bl	fa94 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x4>
    f97a:	f884 a012 	strb.w	sl, [r4, #18]
    f97e:	7567      	strb	r7, [r4, #21]
    f980:	2000      	movs	r0, #0
    f982:	75a0      	strb	r0, [r4, #22]
    f984:	20ff      	movs	r0, #255	; 0xff
    f986:	75e0      	strb	r0, [r4, #23]
    f988:	7ce1      	ldrb	r1, [r4, #19]
    f98a:	0749      	lsls	r1, r1, #29
    f98c:	d518      	bpl.n	f9c0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    f98e:	f104 001d 	add.w	r0, r4, #29
    f992:	1e41      	subs	r1, r0, #1
    f994:	2d02      	cmp	r5, #2
    f996:	d00d      	beq.n	f9b4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    f998:	2d03      	cmp	r5, #3
    f99a:	d00b      	beq.n	f9b4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    f99c:	f8d9 2008 	ldr.w	r2, [r9, #8]
    f9a0:	6813      	ldr	r3, [r2, #0]
    f9a2:	6003      	str	r3, [r0, #0]
    f9a4:	8892      	ldrh	r2, [r2, #4]
    f9a6:	e008      	b.n	f9ba <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    f9a8:	7ce0      	ldrb	r0, [r4, #19]
    f9aa:	e7dc      	b.n	f966 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    f9ac:	7ce0      	ldrb	r0, [r4, #19]
    f9ae:	f040 0002 	orr.w	r0, r0, #2
    f9b2:	e7d8      	b.n	f966 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    f9b4:	6832      	ldr	r2, [r6, #0]
    f9b6:	6002      	str	r2, [r0, #0]
    f9b8:	88b2      	ldrh	r2, [r6, #4]
    f9ba:	8082      	strh	r2, [r0, #4]
    f9bc:	700d      	strb	r5, [r1, #0]
    f9be:	e000      	b.n	f9c2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    f9c0:	7720      	strb	r0, [r4, #28]
    f9c2:	207f      	movs	r0, #127	; 0x7f
    f9c4:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    f9c8:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    f9cc:	f7f5 fa1e 	bl	4e0c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f9d0:	4605      	mov	r5, r0
    f9d2:	f7f5 fa21 	bl	4e18 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f9d6:	2201      	movs	r2, #1
    f9d8:	4629      	mov	r1, r5
    f9da:	f000 f889 	bl	faf0 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x60>
    f9de:	b128      	cbz	r0, f9ec <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    f9e0:	4620      	mov	r0, r4
    f9e2:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f9e6:	2100      	movs	r1, #0
    f9e8:	f000 b86f 	b.w	faca <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x3a>
    f9ec:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    f9f0:	2033      	movs	r0, #51	; 0x33
    f9f2:	f7f4 fde1 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9f6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000f9fa <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    f9fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f9fe:	461e      	mov	r6, r3
    fa00:	4617      	mov	r7, r2
    fa02:	4689      	mov	r9, r1
    fa04:	4682      	mov	sl, r0
    fa06:	f8dd 8020 	ldr.w	r8, [sp, #32]
    fa0a:	f7f5 fa05 	bl	4e18 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    fa0e:	4604      	mov	r4, r0
    fa10:	f7fe fc94 	bl	e33c <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    fa14:	2801      	cmp	r0, #1
    fa16:	d039      	beq.n	fa8c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    fa18:	4620      	mov	r0, r4
    fa1a:	f000 f860 	bl	fade <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x4e>
    fa1e:	4604      	mov	r4, r0
    fa20:	221c      	movs	r2, #28
    fa22:	2100      	movs	r1, #0
    fa24:	3009      	adds	r0, #9
    fa26:	f7fd fe82 	bl	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    fa2a:	2501      	movs	r5, #1
    fa2c:	f104 030a 	add.w	r3, r4, #10
    fa30:	7265      	strb	r5, [r4, #9]
    fa32:	1c5a      	adds	r2, r3, #1
    fa34:	4649      	mov	r1, r9
    fa36:	4650      	mov	r0, sl
    fa38:	f000 f82c 	bl	fa94 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x4>
    fa3c:	f884 8012 	strb.w	r8, [r4, #18]
    fa40:	7ce0      	ldrb	r0, [r4, #19]
    fa42:	21ff      	movs	r1, #255	; 0xff
    fa44:	f367 0000 	bfi	r0, r7, #0, #1
    fa48:	f040 001a 	orr.w	r0, r0, #26
    fa4c:	74e0      	strb	r0, [r4, #19]
    fa4e:	7565      	strb	r5, [r4, #21]
    fa50:	2000      	movs	r0, #0
    fa52:	75a0      	strb	r0, [r4, #22]
    fa54:	75e1      	strb	r1, [r4, #23]
    fa56:	7721      	strb	r1, [r4, #28]
    fa58:	207f      	movs	r0, #127	; 0x7f
    fa5a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    fa5e:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    fa62:	f7f5 f9d3 	bl	4e0c <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    fa66:	4605      	mov	r5, r0
    fa68:	f7f5 f9d6 	bl	4e18 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    fa6c:	2201      	movs	r2, #1
    fa6e:	4629      	mov	r1, r5
    fa70:	f000 f83e 	bl	faf0 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x60>
    fa74:	b128      	cbz	r0, fa82 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    fa76:	4620      	mov	r0, r4
    fa78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa7c:	2100      	movs	r1, #0
    fa7e:	f000 b824 	b.w	faca <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x3a>
    fa82:	f240 21fd 	movw	r1, #765	; 0x2fd
    fa86:	2033      	movs	r0, #51	; 0x33
    fa88:	f7f4 fd96 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000fa90 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    fa90:	f7ff bf23 	b.w	f8da <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    fa94:	b510      	push	{r4, lr}
    fa96:	461c      	mov	r4, r3
    fa98:	460b      	mov	r3, r1
    fa9a:	29ff      	cmp	r1, #255	; 0xff
    fa9c:	d00d      	beq.n	faba <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x2a>
    fa9e:	4621      	mov	r1, r4
    faa0:	4618      	mov	r0, r3
    faa2:	f7f6 fa05 	bl	5eb0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    faa6:	b120      	cbz	r0, fab2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x22>
    faa8:	7820      	ldrb	r0, [r4, #0]
    faaa:	f040 0002 	orr.w	r0, r0, #2
    faae:	7020      	strb	r0, [r4, #0]
    fab0:	bd10      	pop	{r4, pc}
    fab2:	2189      	movs	r1, #137	; 0x89
    fab4:	2033      	movs	r0, #51	; 0x33
    fab6:	f7f4 fd7f 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    faba:	7c41      	ldrb	r1, [r0, #17]
    fabc:	7021      	strb	r1, [r4, #0]
    fabe:	6840      	ldr	r0, [r0, #4]
    fac0:	6801      	ldr	r1, [r0, #0]
    fac2:	6011      	str	r1, [r2, #0]
    fac4:	8880      	ldrh	r0, [r0, #4]
    fac6:	8090      	strh	r0, [r2, #4]
    fac8:	bd10      	pop	{r4, pc}
    faca:	b510      	push	{r4, lr}
    facc:	2100      	movs	r1, #0
    face:	7201      	strb	r1, [r0, #8]
    fad0:	2202      	movs	r2, #2
    fad2:	f7f6 fe2b 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    fad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fada:	f7f6 bf19 	b.w	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fade:	b51c      	push	{r2, r3, r4, lr}
    fae0:	4669      	mov	r1, sp
    fae2:	aa01      	add	r2, sp, #4
    fae4:	f7fe fca2 	bl	e42c <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    fae8:	9800      	ldr	r0, [sp, #0]
    faea:	f7fe fc25 	bl	e338 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    faee:	bd1c      	pop	{r2, r3, r4, pc}
    faf0:	f7fe bbca 	b.w	e288 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000faf4 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    faf4:	7802      	ldrb	r2, [r0, #0]
    faf6:	f002 020f 	and.w	r2, r2, #15
    fafa:	f7f8 baa3 	b.w	8044 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    fafe:	6980      	ldr	r0, [r0, #24]
    fb00:	2800      	cmp	r0, #0
    fb02:	d000      	beq.n	fb06 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12>
    fb04:	2001      	movs	r0, #1
    fb06:	4770      	bx	lr

0000fb08 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    fb08:	f8c0 11d8 	str.w	r1, [r0, #472]	; 0x1d8
    fb0c:	4770      	bx	lr
    fb0e:	b510      	push	{r4, lr}
    fb10:	2802      	cmp	r0, #2
    fb12:	d006      	beq.n	fb22 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1a>
    fb14:	2108      	movs	r1, #8
    fb16:	2801      	cmp	r0, #1
    fb18:	d005      	beq.n	fb26 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1e>
    fb1a:	21df      	movs	r1, #223	; 0xdf
    fb1c:	2005      	movs	r0, #5
    fb1e:	f7f4 fd4b 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb22:	2104      	movs	r1, #4
    fb24:	e7f7      	b.n	fb16 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xe>
    fb26:	202a      	movs	r0, #42	; 0x2a
    fb28:	2228      	movs	r2, #40	; 0x28
    fb2a:	fb11 2000 	smlabb	r0, r1, r0, r2
    fb2e:	b280      	uxth	r0, r0
    fb30:	bd10      	pop	{r4, pc}
    fb32:	2000      	movs	r0, #0
    fb34:	4770      	bx	lr
    fb36:	b570      	push	{r4, r5, r6, lr}
    fb38:	4604      	mov	r4, r0
    fb3a:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    fb3e:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    fb42:	f7f8 fe8f 	bl	8864 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3dc>
    fb46:	4605      	mov	r5, r0
    fb48:	f000 f84f 	bl	fbea <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xe2>
    fb4c:	4601      	mov	r1, r0
    fb4e:	462a      	mov	r2, r5
    fb50:	4620      	mov	r0, r4
    fb52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb56:	f7ff bce4 	b.w	f522 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    fb5a:	f7f2 b983 	b.w	1e64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    fb5e:	b510      	push	{r4, lr}
    fb60:	4604      	mov	r4, r0
    fb62:	2000      	movs	r0, #0
    fb64:	f884 01f0 	strb.w	r0, [r4, #496]	; 0x1f0
    fb68:	f894 01f1 	ldrb.w	r0, [r4, #497]	; 0x1f1
    fb6c:	f7f2 fe4a 	bl	2804 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    fb70:	b140      	cbz	r0, fb84 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7c>
    fb72:	2020      	movs	r0, #32
    fb74:	f884 01f1 	strb.w	r0, [r4, #497]	; 0x1f1
    fb78:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    fb7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb80:	f7fb b988 	b.w	ae94 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    fb84:	f240 5133 	movw	r1, #1331	; 0x533
    fb88:	2035      	movs	r0, #53	; 0x35
    fb8a:	f7f4 fd15 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb8e:	b510      	push	{r4, lr}
    fb90:	4613      	mov	r3, r2
    fb92:	460a      	mov	r2, r1
    fb94:	b086      	sub	sp, #24
    fb96:	4604      	mov	r4, r0
    fb98:	4601      	mov	r1, r0
    fb9a:	4668      	mov	r0, sp
    fb9c:	f7f8 ff0e 	bl	89bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x534>
    fba0:	f894 01f1 	ldrb.w	r0, [r4, #497]	; 0x1f1
    fba4:	4669      	mov	r1, sp
    fba6:	f7ff ffd8 	bl	fb5a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x52>
    fbaa:	2800      	cmp	r0, #0
    fbac:	d104      	bne.n	fbb8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb0>
    fbae:	f640 216d 	movw	r1, #2669	; 0xa6d
    fbb2:	2035      	movs	r0, #53	; 0x35
    fbb4:	f7f4 fd00 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbb8:	b006      	add	sp, #24
    fbba:	bd10      	pop	{r4, pc}
    fbbc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fbbe:	255b      	movs	r5, #91	; 0x5b
    fbc0:	4668      	mov	r0, sp
    fbc2:	f7f4 fb85 	bl	42d0 <mpsl_fem_pa_is_configured>
    fbc6:	f89d 0000 	ldrb.w	r0, [sp]
    fbca:	b108      	cbz	r0, fbd0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc8>
    fbcc:	2401      	movs	r4, #1
    fbce:	e000      	b.n	fbd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xca>
    fbd0:	2400      	movs	r4, #0
    fbd2:	a801      	add	r0, sp, #4
    fbd4:	f7f4 fb64 	bl	42a0 <mpsl_fem_lna_is_configured>
    fbd8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fbdc:	b100      	cbz	r0, fbe0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xd8>
    fbde:	2001      	movs	r0, #1
    fbe0:	4304      	orrs	r4, r0
    fbe2:	d000      	beq.n	fbe6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xde>
    fbe4:	2564      	movs	r5, #100	; 0x64
    fbe6:	4628      	mov	r0, r5
    fbe8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fbea:	b510      	push	{r4, lr}
    fbec:	f7ff ffe6 	bl	fbbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb4>
    fbf0:	3069      	adds	r0, #105	; 0x69
    fbf2:	b280      	uxth	r0, r0
    fbf4:	bd10      	pop	{r4, pc}
    fbf6:	b510      	push	{r4, lr}
    fbf8:	f7ff ffe0 	bl	fbbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb4>
    fbfc:	f500 7081 	add.w	r0, r0, #258	; 0x102
    fc00:	b280      	uxth	r0, r0
    fc02:	bd10      	pop	{r4, pc}
    fc04:	1a10      	subs	r0, r2, r0
    fc06:	4770      	bx	lr
    fc08:	00000001 	.word	0x00000001
    fc0c:	a1e0a62c 	.word	0xa1e0a62c
    fc10:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fc14:	f001 0307 	and.w	r3, r1, #7
    fc18:	7802      	ldrb	r2, [r0, #0]
    fc1a:	2101      	movs	r1, #1
    fc1c:	4099      	lsls	r1, r3
    fc1e:	438a      	bics	r2, r1
    fc20:	7002      	strb	r2, [r0, #0]
    fc22:	4770      	bx	lr

0000fc24 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    fc24:	f7f5 b850 	b.w	4cc8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000fc28 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    fc28:	2000      	movs	r0, #0
    fc2a:	4770      	bx	lr

0000fc2c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    fc2c:	b510      	push	{r4, lr}
    fc2e:	f7fa f82d 	bl	9c8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x904>
    fc32:	b128      	cbz	r0, fc40 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    fc34:	2000      	movs	r0, #0
    fc36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc3a:	4601      	mov	r1, r0
    fc3c:	f7f9 bfce 	b.w	9bdc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x854>
    fc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc44:	f7f5 bc6e 	b.w	5524 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    fc48:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
    fc4c:	28fe      	cmp	r0, #254	; 0xfe
    fc4e:	d001      	beq.n	fc54 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    fc50:	2001      	movs	r0, #1
    fc52:	4770      	bx	lr
    fc54:	2000      	movs	r0, #0
    fc56:	4770      	bx	lr
    fc58:	b510      	push	{r4, lr}
    fc5a:	2801      	cmp	r0, #1
    fc5c:	d006      	beq.n	fc6c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    fc5e:	2802      	cmp	r0, #2
    fc60:	d004      	beq.n	fc6c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    fc62:	f240 21a9 	movw	r1, #681	; 0x2a9
    fc66:	2006      	movs	r0, #6
    fc68:	f7f4 fca6 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc6c:	bd10      	pop	{r4, pc}
    fc6e:	2801      	cmp	r0, #1
    fc70:	d002      	beq.n	fc78 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    fc72:	2802      	cmp	r0, #2
    fc74:	d105      	bne.n	fc82 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    fc76:	e002      	b.n	fc7e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    fc78:	2901      	cmp	r1, #1
    fc7a:	d004      	beq.n	fc86 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    fc7c:	e001      	b.n	fc82 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    fc7e:	2902      	cmp	r1, #2
    fc80:	d001      	beq.n	fc86 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    fc82:	2000      	movs	r0, #0
    fc84:	4770      	bx	lr
    fc86:	2001      	movs	r0, #1
    fc88:	4770      	bx	lr
    fc8a:	e9d0 122c 	ldrd	r1, r2, [r0, #176]	; 0xb0
    fc8e:	428a      	cmp	r2, r1
    fc90:	d301      	bcc.n	fc96 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    fc92:	1a51      	subs	r1, r2, r1
    fc94:	e000      	b.n	fc98 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    fc96:	2100      	movs	r1, #0
    fc98:	8b02      	ldrh	r2, [r0, #24]
    fc9a:	1d52      	adds	r2, r2, #5
    fc9c:	428a      	cmp	r2, r1
    fc9e:	d302      	bcc.n	fca6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    fca0:	2101      	movs	r1, #1
    fca2:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    fca6:	4770      	bx	lr
    fca8:	b570      	push	{r4, r5, r6, lr}
    fcaa:	4604      	mov	r4, r0
    fcac:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    fcb0:	2500      	movs	r5, #0
    fcb2:	280c      	cmp	r0, #12
    fcb4:	d030      	beq.n	fd18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xec>
    fcb6:	280d      	cmp	r0, #13
    fcb8:	d12d      	bne.n	fd16 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xea>
    fcba:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
    fcbe:	f8b4 1206 	ldrh.w	r1, [r4, #518]	; 0x206
    fcc2:	1c40      	adds	r0, r0, #1
    fcc4:	4288      	cmp	r0, r1
    fcc6:	d126      	bne.n	fd16 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xea>
    fcc8:	8820      	ldrh	r0, [r4, #0]
    fcca:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
    fcce:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    fcd2:	f7fe ff37 	bl	eb44 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    fcd6:	f8a4 01b8 	strh.w	r0, [r4, #440]	; 0x1b8
    fcda:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    fcde:	f8a4 01ba 	strh.w	r0, [r4, #442]	; 0x1ba
    fce2:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
    fce6:	f8a4 01bc 	strh.w	r0, [r4, #444]	; 0x1bc
    fcea:	f884 51b4 	strb.w	r5, [r4, #436]	; 0x1b4
    fcee:	2206      	movs	r2, #6
    fcf0:	4621      	mov	r1, r4
    fcf2:	f504 70d5 	add.w	r0, r4, #426	; 0x1aa
    fcf6:	f7f6 fd19 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    fcfa:	f884 5204 	strb.w	r5, [r4, #516]	; 0x204
    fcfe:	2102      	movs	r1, #2
    fd00:	4620      	mov	r0, r4
    fd02:	f7f6 fb1f 	bl	6344 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    fd06:	f7f6 fe03 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fd0a:	2103      	movs	r1, #3
    fd0c:	4620      	mov	r0, r4
    fd0e:	f7f8 fa1f 	bl	8150 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    fd12:	f884 508d 	strb.w	r5, [r4, #141]	; 0x8d
    fd16:	bd70      	pop	{r4, r5, r6, pc}
    fd18:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
    fd1c:	f8b4 11fe 	ldrh.w	r1, [r4, #510]	; 0x1fe
    fd20:	1c40      	adds	r0, r0, #1
    fd22:	4288      	cmp	r0, r1
    fd24:	d1f7      	bne.n	fd16 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xea>
    fd26:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
    fd2a:	f8d0 1001 	ldr.w	r1, [r0, #1]
    fd2e:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    fd32:	7940      	ldrb	r0, [r0, #5]
    fd34:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    fd38:	2103      	movs	r1, #3
    fd3a:	4620      	mov	r0, r4
    fd3c:	f7f6 fb02 	bl	6344 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    fd40:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
    fd44:	7800      	ldrb	r0, [r0, #0]
    fd46:	b148      	cbz	r0, fd5c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x130>
    fd48:	2101      	movs	r1, #1
    fd4a:	20fe      	movs	r0, #254	; 0xfe
    fd4c:	f7fb f82a 	bl	ada4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1a1c>
    fd50:	f884 508d 	strb.w	r5, [r4, #141]	; 0x8d
    fd54:	20ff      	movs	r0, #255	; 0xff
    fd56:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
    fd5a:	bd70      	pop	{r4, r5, r6, pc}
    fd5c:	f240 11ed 	movw	r1, #493	; 0x1ed
    fd60:	2036      	movs	r0, #54	; 0x36
    fd62:	f7f4 fc29 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd66:	4602      	mov	r2, r0
    fd68:	2000      	movs	r0, #0
    fd6a:	2a03      	cmp	r2, #3
    fd6c:	d003      	beq.n	fd76 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14a>
    fd6e:	2afe      	cmp	r2, #254	; 0xfe
    fd70:	d100      	bne.n	fd74 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x148>
    fd72:	2002      	movs	r0, #2
    fd74:	4770      	bx	lr
    fd76:	4608      	mov	r0, r1
    fd78:	f7f9 bd3e 	b.w	97f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x470>
    fd7c:	b510      	push	{r4, lr}
    fd7e:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    fd82:	b941      	cbnz	r1, fd96 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x16a>
    fd84:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    fd88:	2300      	movs	r3, #0
    fd8a:	2106      	movs	r1, #6
    fd8c:	3080      	adds	r0, #128	; 0x80
    fd8e:	f7fe fef2 	bl	eb76 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    fd92:	2800      	cmp	r0, #0
    fd94:	d000      	beq.n	fd98 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x16c>
    fd96:	2001      	movs	r0, #1
    fd98:	bd10      	pop	{r4, pc}

0000fd9a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    fd9a:	b510      	push	{r4, lr}
    fd9c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    fda0:	1ac0      	subs	r0, r0, r3
    fda2:	41a1      	sbcs	r1, r4
    fda4:	d513      	bpl.n	fdce <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x34>
    fda6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    fdaa:	17e3      	asrs	r3, r4, #31
    fdac:	1a24      	subs	r4, r4, r0
    fdae:	418b      	sbcs	r3, r1
    fdb0:	db01      	blt.n	fdb6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1c>
    fdb2:	21b2      	movs	r1, #178	; 0xb2
    fdb4:	e012      	b.n	fddc <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x42>
    fdb6:	4240      	negs	r0, r0
    fdb8:	eb00 0102 	add.w	r1, r0, r2
    fdbc:	f1a1 0101 	sub.w	r1, r1, #1
    fdc0:	fbb1 f1f2 	udiv	r1, r1, r2
    fdc4:	fb01 f102 	mul.w	r1, r1, r2
    fdc8:	eba1 0000 	sub.w	r0, r1, r0
    fdcc:	bd10      	pop	{r4, pc}
    fdce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    fdd2:	1ac3      	subs	r3, r0, r3
    fdd4:	f171 0100 	sbcs.w	r1, r1, #0
    fdd8:	db03      	blt.n	fde2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x48>
    fdda:	21bb      	movs	r1, #187	; 0xbb
    fddc:	2037      	movs	r0, #55	; 0x37
    fdde:	f7f4 fbeb 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fde2:	fb90 f1f2 	sdiv	r1, r0, r2
    fde6:	fb01 0012 	mls	r0, r1, r2, r0
    fdea:	bd10      	pop	{r4, pc}
    fdec:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fdf0:	f001 0107 	and.w	r1, r1, #7
    fdf4:	7800      	ldrb	r0, [r0, #0]
    fdf6:	40c8      	lsrs	r0, r1
    fdf8:	f000 0001 	and.w	r0, r0, #1
    fdfc:	4770      	bx	lr
    fdfe:	b118      	cbz	r0, fe08 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x6e>
    fe00:	2802      	cmp	r0, #2
    fe02:	d001      	beq.n	fe08 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x6e>
    fe04:	2001      	movs	r0, #1
    fe06:	4770      	bx	lr
    fe08:	2000      	movs	r0, #0
    fe0a:	4770      	bx	lr

0000fe0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    fe0c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fe0e:	7881      	ldrb	r1, [r0, #2]
    fe10:	4604      	mov	r4, r0
    fe12:	291a      	cmp	r1, #26
    fe14:	d025      	beq.n	fe62 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    fe16:	dc0e      	bgt.n	fe36 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    fe18:	2916      	cmp	r1, #22
    fe1a:	d22c      	bcs.n	fe76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fe1c:	e8df f001 	tbb	[pc, r1]
    fe20:	2b2b2b2b 	.word	0x2b2b2b2b
    fe24:	2b2b212b 	.word	0x2b2b212b
    fe28:	2b2b2b2b 	.word	0x2b2b2b2b
    fe2c:	2b2b2b2b 	.word	0x2b2b2b2b
    fe30:	212b2b2b 	.word	0x212b2b2b
    fe34:	2121      	.short	0x2121
    fe36:	292a      	cmp	r1, #42	; 0x2a
    fe38:	d01d      	beq.n	fe76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fe3a:	dc0b      	bgt.n	fe54 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    fe3c:	f1a1 011e 	sub.w	r1, r1, #30
    fe40:	290c      	cmp	r1, #12
    fe42:	d218      	bcs.n	fe76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fe44:	e8df f001 	tbb	[pc, r1]
    fe48:	17171717 	.word	0x17171717
    fe4c:	17171717 	.word	0x17171717
    fe50:	0d171717 	.word	0x0d171717
    fe54:	393a      	subs	r1, #58	; 0x3a
    fe56:	2904      	cmp	r1, #4
    fe58:	d20d      	bcs.n	fe76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fe5a:	e8df f001 	tbb	[pc, r1]
    fe5e:	020c      	.short	0x020c
    fe60:	020c      	.short	0x020c
    fe62:	8820      	ldrh	r0, [r4, #0]
    fe64:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fe68:	d205      	bcs.n	fe76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fe6a:	4669      	mov	r1, sp
    fe6c:	f7fe fe5a 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe70:	b118      	cbz	r0, fe7a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    fe72:	2002      	movs	r0, #2
    fe74:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fe76:	2012      	movs	r0, #18
    fe78:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fe7a:	9801      	ldr	r0, [sp, #4]
    fe7c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    fe80:	f88d 1008 	strb.w	r1, [sp, #8]
    fe84:	9902      	ldr	r1, [sp, #8]
    fe86:	9102      	str	r1, [sp, #8]
    fe88:	f89d 1008 	ldrb.w	r1, [sp, #8]
    fe8c:	f500 7090 	add.w	r0, r0, #288	; 0x120
    fe90:	b109      	cbz	r1, fe96 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
    fe92:	200c      	movs	r0, #12
    fe94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fe96:	21ff      	movs	r1, #255	; 0xff
    fe98:	7001      	strb	r1, [r0, #0]
    fe9a:	78a1      	ldrb	r1, [r4, #2]
    fe9c:	7041      	strb	r1, [r0, #1]
    fe9e:	2000      	movs	r0, #0
    fea0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fea2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    fea2:	b510      	push	{r4, lr}
    fea4:	4604      	mov	r4, r0
    fea6:	7800      	ldrb	r0, [r0, #0]
    fea8:	b118      	cbz	r0, feb2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    feaa:	2801      	cmp	r0, #1
    feac:	d001      	beq.n	feb2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    feae:	2012      	movs	r0, #18
    feb0:	bd10      	pop	{r4, pc}
    feb2:	f000 fd95 	bl	109e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x412>
    feb6:	b120      	cbz	r0, fec2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    feb8:	f7f5 fff4 	bl	5ea4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    febc:	b108      	cbz	r0, fec2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    febe:	200c      	movs	r0, #12
    fec0:	bd10      	pop	{r4, pc}
    fec2:	7820      	ldrb	r0, [r4, #0]
    fec4:	f7ff ff9b 	bl	fdfe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x64>
    fec8:	1de2      	adds	r2, r4, #7
    feca:	f104 0317 	add.w	r3, r4, #23
    fece:	1c61      	adds	r1, r4, #1
    fed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fed4:	f7f6 b818 	b.w	5f08 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000fed8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fed8:	b510      	push	{r4, lr}
    feda:	4604      	mov	r4, r0
    fedc:	f000 fdb0 	bl	10a40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x472>
    fee0:	b108      	cbz	r0, fee6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fee2:	200c      	movs	r0, #12
    fee4:	bd10      	pop	{r4, pc}
    fee6:	7820      	ldrb	r0, [r4, #0]
    fee8:	b118      	cbz	r0, fef2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    feea:	2801      	cmp	r0, #1
    feec:	d001      	beq.n	fef2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    feee:	2012      	movs	r0, #18
    fef0:	bd10      	pop	{r4, pc}
    fef2:	f7ff ff84 	bl	fdfe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x64>
    fef6:	1c61      	adds	r1, r4, #1
    fef8:	f7f6 f8aa 	bl	6050 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fefc:	b108      	cbz	r0, ff02 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fefe:	2000      	movs	r0, #0
    ff00:	bd10      	pop	{r4, pc}
    ff02:	2007      	movs	r0, #7
    ff04:	bd10      	pop	{r4, pc}

0000ff06 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    ff06:	b510      	push	{r4, lr}
    ff08:	f000 fd6a 	bl	109e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x412>
    ff0c:	b120      	cbz	r0, ff18 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ff0e:	f7f5 ffc9 	bl	5ea4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ff12:	b108      	cbz	r0, ff18 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ff14:	200c      	movs	r0, #12
    ff16:	bd10      	pop	{r4, pc}
    ff18:	f7f6 f83c 	bl	5f94 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    ff1c:	2000      	movs	r0, #0
    ff1e:	bd10      	pop	{r4, pc}

0000ff20 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    ff20:	b510      	push	{r4, lr}
    ff22:	f000 fd8d 	bl	10a40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x472>
    ff26:	b108      	cbz	r0, ff2c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    ff28:	200c      	movs	r0, #12
    ff2a:	bd10      	pop	{r4, pc}
    ff2c:	f7f6 f8b8 	bl	60a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    ff30:	2000      	movs	r0, #0
    ff32:	bd10      	pop	{r4, pc}

0000ff34 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    ff34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ff38:	4605      	mov	r5, r0
    ff3a:	f000 fb25 	bl	10588 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    ff3e:	2800      	cmp	r0, #0
    ff40:	d112      	bne.n	ff68 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ff42:	8828      	ldrh	r0, [r5, #0]
    ff44:	2100      	movs	r1, #0
    ff46:	f7fe fc2f 	bl	e7a8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff4a:	0004      	movs	r4, r0
    ff4c:	d00e      	beq.n	ff6c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    ff4e:	f000 fd31 	bl	109b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
    ff52:	b158      	cbz	r0, ff6c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    ff54:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    ff58:	f88d 0000 	strb.w	r0, [sp]
    ff5c:	9800      	ldr	r0, [sp, #0]
    ff5e:	9000      	str	r0, [sp, #0]
    ff60:	f89d 0000 	ldrb.w	r0, [sp]
    ff64:	b120      	cbz	r0, ff70 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    ff66:	203a      	movs	r0, #58	; 0x3a
    ff68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ff6c:	2002      	movs	r0, #2
    ff6e:	e7fb      	b.n	ff68 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ff70:	f04f 0800 	mov.w	r8, #0
    ff74:	88a8      	ldrh	r0, [r5, #4]
    ff76:	f7fe fde1 	bl	eb3c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    ff7a:	4607      	mov	r7, r0
    ff7c:	4601      	mov	r1, r0
    ff7e:	2005      	movs	r0, #5
    ff80:	f7fe ff85 	bl	ee8e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    ff84:	4606      	mov	r6, r0
    ff86:	4639      	mov	r1, r7
    ff88:	2008      	movs	r0, #8
    ff8a:	f7fe ff80 	bl	ee8e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    ff8e:	42b0      	cmp	r0, r6
    ff90:	d301      	bcc.n	ff96 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    ff92:	42be      	cmp	r6, r7
    ff94:	d301      	bcc.n	ff9a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    ff96:	2012      	movs	r0, #18
    ff98:	e7e6      	b.n	ff68 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ff9a:	f8a4 6208 	strh.w	r6, [r4, #520]	; 0x208
    ff9e:	e9c4 8783 	strd	r8, r7, [r4, #524]	; 0x20c
    ffa2:	88e8      	ldrh	r0, [r5, #6]
    ffa4:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
    ffa8:	8928      	ldrh	r0, [r5, #8]
    ffaa:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    ffae:	f504 7401 	add.w	r4, r4, #516	; 0x204
    ffb2:	20ff      	movs	r0, #255	; 0xff
    ffb4:	7020      	strb	r0, [r4, #0]
    ffb6:	2000      	movs	r0, #0
    ffb8:	e7d6      	b.n	ff68 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000ffba <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    ffba:	b508      	push	{r3, lr}
    ffbc:	f7f6 fc98 	bl	68f0 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    ffc0:	b970      	cbnz	r0, ffe0 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    ffc2:	f7f8 fa5b 	bl	847c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    ffc6:	2805      	cmp	r0, #5
    ffc8:	d005      	beq.n	ffd6 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    ffca:	f7f6 ff29 	bl	6e20 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    ffce:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    ffd2:	39ff      	subs	r1, #255	; 0xff
    ffd4:	d004      	beq.n	ffe0 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    ffd6:	4668      	mov	r0, sp
    ffd8:	f7f8 f9b8 	bl	834c <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    ffdc:	b110      	cbz	r0, ffe4 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    ffde:	e012      	b.n	10006 <CONFIG_PM_SRAM_SIZE+0x6>
    ffe0:	200c      	movs	r0, #12
    ffe2:	bd08      	pop	{r3, pc}
    ffe4:	9800      	ldr	r0, [sp, #0]
    ffe6:	8800      	ldrh	r0, [r0, #0]
    ffe8:	f7fe fc7b 	bl	e8e2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ffec:	9800      	ldr	r0, [sp, #0]
    ffee:	2100      	movs	r1, #0
    fff0:	8800      	ldrh	r0, [r0, #0]
    fff2:	f7f4 fd5b 	bl	4aac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fff6:	b120      	cbz	r0, 10002 <CONFIG_PM_SRAM_SIZE+0x2>
    fff8:	f640 71bd 	movw	r1, #4029	; 0xfbd
    fffc:	2039      	movs	r0, #57	; 0x39
    fffe:	f7f4 fadb 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10002:	f7f6 fc69 	bl	68d8 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>
   10006:	2000      	movs	r0, #0
   10008:	bd08      	pop	{r3, pc}

0001000a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   1000a:	b510      	push	{r4, lr}
   1000c:	460b      	mov	r3, r1
   1000e:	2201      	movs	r2, #1
   10010:	f100 0110 	add.w	r1, r0, #16
   10014:	f7fe fd4a 	bl	eaac <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   10018:	2000      	movs	r0, #0
   1001a:	bd10      	pop	{r4, pc}

0001001c <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   1001c:	b510      	push	{r4, lr}
   1001e:	2108      	movs	r1, #8
   10020:	f7f4 fb76 	bl	4710 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   10024:	2000      	movs	r0, #0
   10026:	bd10      	pop	{r4, pc}

00010028 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   10028:	21fb      	movs	r1, #251	; 0xfb
   1002a:	8001      	strh	r1, [r0, #0]
   1002c:	f640 0248 	movw	r2, #2120	; 0x848
   10030:	8042      	strh	r2, [r0, #2]
   10032:	8081      	strh	r1, [r0, #4]
   10034:	80c2      	strh	r2, [r0, #6]
   10036:	2000      	movs	r0, #0
   10038:	4770      	bx	lr

0001003a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   1003a:	b51c      	push	{r2, r3, r4, lr}
   1003c:	8800      	ldrh	r0, [r0, #0]
   1003e:	4669      	mov	r1, sp
   10040:	f7fe fd70 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10044:	2800      	cmp	r0, #0
   10046:	d10c      	bne.n	10062 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
   10048:	9c01      	ldr	r4, [sp, #4]
   1004a:	f89d 0000 	ldrb.w	r0, [sp]
   1004e:	f504 7490 	add.w	r4, r4, #288	; 0x120
   10052:	b918      	cbnz	r0, 1005c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
   10054:	9801      	ldr	r0, [sp, #4]
   10056:	f000 fcad 	bl	109b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   1005a:	b118      	cbz	r0, 10064 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
   1005c:	7ce0      	ldrb	r0, [r4, #19]
   1005e:	b118      	cbz	r0, 10068 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
   10060:	203a      	movs	r0, #58	; 0x3a
   10062:	bd1c      	pop	{r2, r3, r4, pc}
   10064:	2002      	movs	r0, #2
   10066:	bd1c      	pop	{r2, r3, r4, pc}
   10068:	2001      	movs	r0, #1
   1006a:	74e0      	strb	r0, [r4, #19]
   1006c:	2000      	movs	r0, #0
   1006e:	bd1c      	pop	{r2, r3, r4, pc}

00010070 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   10070:	2108      	movs	r1, #8
   10072:	7001      	strb	r1, [r0, #0]
   10074:	2000      	movs	r0, #0
   10076:	4770      	bx	lr

00010078 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   10078:	b510      	push	{r4, lr}
   1007a:	4604      	mov	r4, r0
   1007c:	20d8      	movs	r0, #216	; 0xd8
   1007e:	7020      	strb	r0, [r4, #0]
   10080:	f000 fc95 	bl	109ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e0>
   10084:	7060      	strb	r0, [r4, #1]
   10086:	2000      	movs	r0, #0
   10088:	bd10      	pop	{r4, pc}

0001008a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   1008a:	2108      	movs	r1, #8
   1008c:	7001      	strb	r1, [r0, #0]
   1008e:	2000      	movs	r0, #0
   10090:	4770      	bx	lr

00010092 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   10092:	b510      	push	{r4, lr}
   10094:	4604      	mov	r4, r0
   10096:	7800      	ldrb	r0, [r0, #0]
   10098:	b108      	cbz	r0, 1009e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   1009a:	2801      	cmp	r0, #1
   1009c:	d110      	bne.n	100c0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   1009e:	f000 fc9f 	bl	109e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x412>
   100a2:	b120      	cbz	r0, 100ae <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   100a4:	f7f5 fefe 	bl	5ea4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   100a8:	b108      	cbz	r0, 100ae <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   100aa:	200c      	movs	r0, #12
   100ac:	bd10      	pop	{r4, pc}
   100ae:	7820      	ldrb	r0, [r4, #0]
   100b0:	f7ff fea5 	bl	fdfe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x64>
   100b4:	1c61      	adds	r1, r4, #1
   100b6:	f7fe fcdf 	bl	ea78 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   100ba:	b108      	cbz	r0, 100c0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   100bc:	2000      	movs	r0, #0
   100be:	bd10      	pop	{r4, pc}
   100c0:	2012      	movs	r0, #18
   100c2:	bd10      	pop	{r4, pc}

000100c4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   100c4:	b510      	push	{r4, lr}
   100c6:	4604      	mov	r4, r0
   100c8:	f000 fcba 	bl	10a40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x472>
   100cc:	b108      	cbz	r0, 100d2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   100ce:	200c      	movs	r0, #12
   100d0:	bd10      	pop	{r4, pc}
   100d2:	7820      	ldrb	r0, [r4, #0]
   100d4:	b108      	cbz	r0, 100da <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   100d6:	2801      	cmp	r0, #1
   100d8:	d107      	bne.n	100ea <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   100da:	f7ff fe90 	bl	fdfe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x64>
   100de:	1c61      	adds	r1, r4, #1
   100e0:	f7fe fcd9 	bl	ea96 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   100e4:	b108      	cbz	r0, 100ea <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   100e6:	2000      	movs	r0, #0
   100e8:	bd10      	pop	{r4, pc}
   100ea:	2012      	movs	r0, #18
   100ec:	bd10      	pop	{r4, pc}

000100ee <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   100ee:	b510      	push	{r4, lr}
   100f0:	4604      	mov	r4, r0
   100f2:	f000 fc75 	bl	109e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x412>
   100f6:	b108      	cbz	r0, 100fc <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   100f8:	200c      	movs	r0, #12
   100fa:	bd10      	pop	{r4, pc}
   100fc:	7820      	ldrb	r0, [r4, #0]
   100fe:	b100      	cbz	r0, 10102 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
   10100:	2001      	movs	r0, #1
   10102:	f7f5 fec9 	bl	5e98 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   10106:	2000      	movs	r0, #0
   10108:	bd10      	pop	{r4, pc}

0001010a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   1010a:	b50e      	push	{r1, r2, r3, lr}
   1010c:	8882      	ldrh	r2, [r0, #4]
   1010e:	f244 2390 	movw	r3, #17040	; 0x4290
   10112:	429a      	cmp	r2, r3
   10114:	d901      	bls.n	1011a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   10116:	2012      	movs	r0, #18
   10118:	bd0e      	pop	{r1, r2, r3, pc}
   1011a:	f640 0348 	movw	r3, #2120	; 0x848
   1011e:	429a      	cmp	r2, r3
   10120:	d300      	bcc.n	10124 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   10122:	461a      	mov	r2, r3
   10124:	8803      	ldrh	r3, [r0, #0]
   10126:	f8ad 3000 	strh.w	r3, [sp]
   1012a:	8843      	ldrh	r3, [r0, #2]
   1012c:	f8ad 3002 	strh.w	r3, [sp, #2]
   10130:	f8ad 2004 	strh.w	r2, [sp, #4]
   10134:	8843      	ldrh	r3, [r0, #2]
   10136:	f8ad 3006 	strh.w	r3, [sp, #6]
   1013a:	f8ad 2008 	strh.w	r2, [sp, #8]
   1013e:	8800      	ldrh	r0, [r0, #0]
   10140:	8008      	strh	r0, [r1, #0]
   10142:	4668      	mov	r0, sp
   10144:	f7fb faa0 	bl	b688 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1dc>
   10148:	bd0e      	pop	{r1, r2, r3, pc}

0001014a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
   1014a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1014c:	4604      	mov	r4, r0
   1014e:	f7fe fcd3 	bl	eaf8 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
   10152:	b160      	cbz	r0, 1016e <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
   10154:	4620      	mov	r0, r4
   10156:	f7f6 f981 	bl	645c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
   1015a:	4669      	mov	r1, sp
   1015c:	2000      	movs	r0, #0
   1015e:	f7fe fb2c 	bl	e7ba <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10162:	b150      	cbz	r0, 1017a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
   10164:	f241 0143 	movw	r1, #4163	; 0x1043
   10168:	2039      	movs	r0, #57	; 0x39
   1016a:	f7f4 fa25 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1016e:	2012      	movs	r0, #18
   10170:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10172:	9802      	ldr	r0, [sp, #8]
   10174:	f880 41fc 	strb.w	r4, [r0, #508]	; 0x1fc
   10178:	e000      	b.n	1017c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
   1017a:	24ff      	movs	r4, #255	; 0xff
   1017c:	4668      	mov	r0, sp
   1017e:	f7f4 fc47 	bl	4a10 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10182:	2800      	cmp	r0, #0
   10184:	d0f5      	beq.n	10172 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
   10186:	2000      	movs	r0, #0
   10188:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001018a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   1018a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1018c:	4604      	mov	r4, r0
   1018e:	f10d 0007 	add.w	r0, sp, #7
   10192:	9000      	str	r0, [sp, #0]
   10194:	7922      	ldrb	r2, [r4, #4]
   10196:	78e1      	ldrb	r1, [r4, #3]
   10198:	78a0      	ldrb	r0, [r4, #2]
   1019a:	f10d 0306 	add.w	r3, sp, #6
   1019e:	f000 fc38 	bl	10a12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x444>
   101a2:	2800      	cmp	r0, #0
   101a4:	d109      	bne.n	101ba <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   101a6:	8820      	ldrh	r0, [r4, #0]
   101a8:	f8ad 0004 	strh.w	r0, [sp, #4]
   101ac:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   101b0:	f8ad 0008 	strh.w	r0, [sp, #8]
   101b4:	a801      	add	r0, sp, #4
   101b6:	f000 f8df 	bl	10378 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   101ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000101bc <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   101bc:	b510      	push	{r4, lr}
   101be:	4604      	mov	r4, r0
   101c0:	f000 fc0e 	bl	109e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x412>
   101c4:	b120      	cbz	r0, 101d0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   101c6:	f7f5 fe6d 	bl	5ea4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   101ca:	b108      	cbz	r0, 101d0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   101cc:	200c      	movs	r0, #12
   101ce:	bd10      	pop	{r4, pc}
   101d0:	7820      	ldrb	r0, [r4, #0]
   101d2:	f7ff fe14 	bl	fdfe <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x64>
   101d6:	79e2      	ldrb	r2, [r4, #7]
   101d8:	1c61      	adds	r1, r4, #1
   101da:	f7f5 fdfd 	bl	5dd8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   101de:	b108      	cbz	r0, 101e4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   101e0:	2000      	movs	r0, #0
   101e2:	bd10      	pop	{r4, pc}
   101e4:	2002      	movs	r0, #2
   101e6:	bd10      	pop	{r4, pc}

000101e8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   101e8:	b510      	push	{r4, lr}
   101ea:	4604      	mov	r4, r0
   101ec:	2001      	movs	r0, #1
   101ee:	f000 fa1b 	bl	10628 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
   101f2:	b128      	cbz	r0, 10200 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   101f4:	4621      	mov	r1, r4
   101f6:	2001      	movs	r0, #1
   101f8:	f7f4 ffee 	bl	51d8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   101fc:	2000      	movs	r0, #0
   101fe:	bd10      	pop	{r4, pc}
   10200:	200c      	movs	r0, #12
   10202:	bd10      	pop	{r4, pc}

00010204 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   10204:	b510      	push	{r4, lr}
   10206:	8800      	ldrh	r0, [r0, #0]
   10208:	f7f5 feda 	bl	5fc0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   1020c:	b108      	cbz	r0, 10212 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   1020e:	2000      	movs	r0, #0
   10210:	bd10      	pop	{r4, pc}
   10212:	2030      	movs	r0, #48	; 0x30
   10214:	bd10      	pop	{r4, pc}

00010216 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
   10216:	b51c      	push	{r2, r3, r4, lr}
   10218:	7801      	ldrb	r1, [r0, #0]
   1021a:	f88d 1000 	strb.w	r1, [sp]
   1021e:	7840      	ldrb	r0, [r0, #1]
   10220:	f88d 0001 	strb.w	r0, [sp, #1]
   10224:	2000      	movs	r0, #0
   10226:	f8ad 0002 	strh.w	r0, [sp, #2]
   1022a:	f8ad 0004 	strh.w	r0, [sp, #4]
   1022e:	4601      	mov	r1, r0
   10230:	4668      	mov	r0, sp
   10232:	f000 fa44 	bl	106be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf0>
   10236:	2800      	cmp	r0, #0
   10238:	d102      	bne.n	10240 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
   1023a:	4668      	mov	r0, sp
   1023c:	f000 fa23 	bl	10686 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
   10240:	bd1c      	pop	{r2, r3, r4, pc}

00010242 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
   10242:	b500      	push	{lr}
   10244:	b087      	sub	sp, #28
   10246:	7941      	ldrb	r1, [r0, #5]
   10248:	f88d 1000 	strb.w	r1, [sp]
   1024c:	7981      	ldrb	r1, [r0, #6]
   1024e:	f88d 1001 	strb.w	r1, [sp, #1]
   10252:	2101      	movs	r1, #1
   10254:	f88d 1002 	strb.w	r1, [sp, #2]
   10258:	7801      	ldrb	r1, [r0, #0]
   1025a:	f88d 1003 	strb.w	r1, [sp, #3]
   1025e:	f8b0 1001 	ldrh.w	r1, [r0, #1]
   10262:	f240 2271 	movw	r2, #625	; 0x271
   10266:	4351      	muls	r1, r2
   10268:	9102      	str	r1, [sp, #8]
   1026a:	f8b0 0003 	ldrh.w	r0, [r0, #3]
   1026e:	4350      	muls	r0, r2
   10270:	9004      	str	r0, [sp, #16]
   10272:	2007      	movs	r0, #7
   10274:	f88d 0018 	strb.w	r0, [sp, #24]
   10278:	2000      	movs	r0, #0
   1027a:	f88d 0019 	strb.w	r0, [sp, #25]
   1027e:	9804      	ldr	r0, [sp, #16]
   10280:	f7fb f9cc 	bl	b61c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x170>
   10284:	b140      	cbz	r0, 10298 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
   10286:	9802      	ldr	r0, [sp, #8]
   10288:	f7fb f9bc 	bl	b604 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x158>
   1028c:	b120      	cbz	r0, 10298 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
   1028e:	4668      	mov	r0, sp
   10290:	f7fb f8be 	bl	b410 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
   10294:	b007      	add	sp, #28
   10296:	bd00      	pop	{pc}
   10298:	2030      	movs	r0, #48	; 0x30
   1029a:	e7fb      	b.n	10294 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0001029c <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
   1029c:	b570      	push	{r4, r5, r6, lr}
   1029e:	4605      	mov	r5, r0
   102a0:	8800      	ldrh	r0, [r0, #0]
   102a2:	2100      	movs	r1, #0
   102a4:	f7fe fa80 	bl	e7a8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   102a8:	0004      	movs	r4, r0
   102aa:	d007      	beq.n	102bc <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
   102ac:	f000 fb82 	bl	109b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   102b0:	b120      	cbz	r0, 102bc <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
   102b2:	f894 0218 	ldrb.w	r0, [r4, #536]	; 0x218
   102b6:	b118      	cbz	r0, 102c0 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
   102b8:	203a      	movs	r0, #58	; 0x3a
   102ba:	bd70      	pop	{r4, r5, r6, pc}
   102bc:	2002      	movs	r0, #2
   102be:	bd70      	pop	{r4, r5, r6, pc}
   102c0:	2100      	movs	r1, #0
   102c2:	f104 00de 	add.w	r0, r4, #222	; 0xde
   102c6:	f7ff fd91 	bl	fdec <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x52>
   102ca:	2801      	cmp	r0, #1
   102cc:	d001      	beq.n	102d2 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
   102ce:	201a      	movs	r0, #26
   102d0:	bd70      	pop	{r4, r5, r6, pc}
   102d2:	f8d5 1002 	ldr.w	r1, [r5, #2]
   102d6:	f8c4 1219 	str.w	r1, [r4, #537]	; 0x219
   102da:	f8d5 1006 	ldr.w	r1, [r5, #6]
   102de:	f8c4 121d 	str.w	r1, [r4, #541]	; 0x21d
   102e2:	8969      	ldrh	r1, [r5, #10]
   102e4:	f8a4 1221 	strh.w	r1, [r4, #545]	; 0x221
   102e8:	2210      	movs	r2, #16
   102ea:	f105 010c 	add.w	r1, r5, #12
   102ee:	f204 2023 	addw	r0, r4, #547	; 0x223
   102f2:	f7fd f9a2 	bl	d63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   102f6:	2001      	movs	r0, #1
   102f8:	f884 0218 	strb.w	r0, [r4, #536]	; 0x218
   102fc:	2000      	movs	r0, #0
   102fe:	bd70      	pop	{r4, r5, r6, pc}

00010300 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10300:	b51c      	push	{r2, r3, r4, lr}
   10302:	8801      	ldrh	r1, [r0, #0]
   10304:	f8ad 1000 	strh.w	r1, [sp]
   10308:	8841      	ldrh	r1, [r0, #2]
   1030a:	f8ad 1002 	strh.w	r1, [sp, #2]
   1030e:	8801      	ldrh	r1, [r0, #0]
   10310:	f8ad 1004 	strh.w	r1, [sp, #4]
   10314:	8840      	ldrh	r0, [r0, #2]
   10316:	f8ad 0006 	strh.w	r0, [sp, #6]
   1031a:	4668      	mov	r0, sp
   1031c:	f7fb fa38 	bl	b790 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2e4>
   10320:	bd1c      	pop	{r2, r3, r4, pc}

00010322 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10322:	b510      	push	{r4, lr}
   10324:	f7f4 ff7c 	bl	5220 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   10328:	2000      	movs	r0, #0
   1032a:	bd10      	pop	{r4, pc}

0001032c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   1032c:	b51c      	push	{r2, r3, r4, lr}
   1032e:	460c      	mov	r4, r1
   10330:	4669      	mov	r1, sp
   10332:	f7fe fbf7 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10336:	2800      	cmp	r0, #0
   10338:	d105      	bne.n	10346 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   1033a:	2101      	movs	r1, #1
   1033c:	4622      	mov	r2, r4
   1033e:	9801      	ldr	r0, [sp, #4]
   10340:	f000 fadf 	bl	10902 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x334>
   10344:	2000      	movs	r0, #0
   10346:	bd1c      	pop	{r2, r3, r4, pc}

00010348 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   10348:	b510      	push	{r4, lr}
   1034a:	4604      	mov	r4, r0
   1034c:	2000      	movs	r0, #0
   1034e:	f000 f96b 	bl	10628 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
   10352:	b128      	cbz	r0, 10360 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   10354:	4621      	mov	r1, r4
   10356:	2000      	movs	r0, #0
   10358:	f7f4 ff3e 	bl	51d8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   1035c:	2000      	movs	r0, #0
   1035e:	bd10      	pop	{r4, pc}
   10360:	200c      	movs	r0, #12
   10362:	bd10      	pop	{r4, pc}

00010364 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   10364:	b510      	push	{r4, lr}
   10366:	7800      	ldrb	r0, [r0, #0]
   10368:	b100      	cbz	r0, 1036c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   1036a:	2001      	movs	r0, #1
   1036c:	f7f7 fff6 	bl	835c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
   10370:	2000      	movs	r0, #0
   10372:	bd10      	pop	{r4, pc}

00010374 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   10374:	f7fb b988 	b.w	b688 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1dc>

00010378 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   10378:	b510      	push	{r4, lr}
   1037a:	4604      	mov	r4, r0
   1037c:	8880      	ldrh	r0, [r0, #4]
   1037e:	b128      	cbz	r0, 1038c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10380:	2801      	cmp	r0, #1
   10382:	d003      	beq.n	1038c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10384:	2802      	cmp	r0, #2
   10386:	d001      	beq.n	1038c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10388:	2012      	movs	r0, #18
   1038a:	bd10      	pop	{r4, pc}
   1038c:	78e0      	ldrb	r0, [r4, #3]
   1038e:	f000 f957 	bl	10640 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
   10392:	b148      	cbz	r0, 103a8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10394:	78a0      	ldrb	r0, [r4, #2]
   10396:	f000 f953 	bl	10640 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
   1039a:	b128      	cbz	r0, 103a8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1039c:	4620      	mov	r0, r4
   1039e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   103a2:	2101      	movs	r1, #1
   103a4:	f000 b88d 	b.w	104c2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   103a8:	2011      	movs	r0, #17
   103aa:	bd10      	pop	{r4, pc}

000103ac <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   103ac:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   103ae:	460c      	mov	r4, r1
   103b0:	4605      	mov	r5, r0
   103b2:	8800      	ldrh	r0, [r0, #0]
   103b4:	4669      	mov	r1, sp
   103b6:	f7fe fbb5 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   103ba:	2800      	cmp	r0, #0
   103bc:	d106      	bne.n	103cc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   103be:	9801      	ldr	r0, [sp, #4]
   103c0:	8829      	ldrh	r1, [r5, #0]
   103c2:	8021      	strh	r1, [r4, #0]
   103c4:	f8b0 00b8 	ldrh.w	r0, [r0, #184]	; 0xb8
   103c8:	8060      	strh	r0, [r4, #2]
   103ca:	2000      	movs	r0, #0
   103cc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000103ce <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   103ce:	b510      	push	{r4, lr}
   103d0:	4604      	mov	r4, r0
   103d2:	4601      	mov	r1, r0
   103d4:	2000      	movs	r0, #0
   103d6:	f7f4 fee7 	bl	51a8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   103da:	b910      	cbnz	r0, 103e2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   103dc:	2000      	movs	r0, #0
   103de:	6020      	str	r0, [r4, #0]
   103e0:	80a0      	strh	r0, [r4, #4]
   103e2:	2000      	movs	r0, #0
   103e4:	bd10      	pop	{r4, pc}

000103e6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   103e6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   103e8:	8800      	ldrh	r0, [r0, #0]
   103ea:	4669      	mov	r1, sp
   103ec:	f7fe fb9a 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   103f0:	b968      	cbnz	r0, 1040e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   103f2:	2401      	movs	r4, #1
   103f4:	9801      	ldr	r0, [sp, #4]
   103f6:	f000 fadd 	bl	109b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   103fa:	b140      	cbz	r0, 1040e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   103fc:	9801      	ldr	r0, [sp, #4]
   103fe:	4601      	mov	r1, r0
   10400:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
   10404:	3080      	adds	r0, #128	; 0x80
   10406:	f501 7199 	add.w	r1, r1, #306	; 0x132
   1040a:	b95a      	cbnz	r2, 10424 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   1040c:	e001      	b.n	10412 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   1040e:	2002      	movs	r0, #2
   10410:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10412:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   10416:	f88d 2008 	strb.w	r2, [sp, #8]
   1041a:	9a02      	ldr	r2, [sp, #8]
   1041c:	9202      	str	r2, [sp, #8]
   1041e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10422:	b10a      	cbz	r2, 10428 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   10424:	203a      	movs	r0, #58	; 0x3a
   10426:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10428:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   1042c:	0792      	lsls	r2, r2, #30
   1042e:	d008      	beq.n	10442 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>
   10430:	2201      	movs	r2, #1
   10432:	3050      	adds	r0, #80	; 0x50
   10434:	9901      	ldr	r1, [sp, #4]
   10436:	f7f6 f979 	bl	672c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1043a:	f7f6 fa69 	bl	6910 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   1043e:	2000      	movs	r0, #0
   10440:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10442:	700c      	strb	r4, [r1, #0]
   10444:	e7fb      	b.n	1043e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>

00010446 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10446:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10448:	460c      	mov	r4, r1
   1044a:	4605      	mov	r5, r0
   1044c:	8800      	ldrh	r0, [r0, #0]
   1044e:	4669      	mov	r1, sp
   10450:	f7fe fb68 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10454:	b108      	cbz	r0, 1045a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10456:	2002      	movs	r0, #2
   10458:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1045a:	78a8      	ldrb	r0, [r5, #2]
   1045c:	b130      	cbz	r0, 1046c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   1045e:	f000 faa6 	bl	109ae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e0>
   10462:	70a0      	strb	r0, [r4, #2]
   10464:	8828      	ldrh	r0, [r5, #0]
   10466:	8020      	strh	r0, [r4, #0]
   10468:	2000      	movs	r0, #0
   1046a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1046c:	9801      	ldr	r0, [sp, #4]
   1046e:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   10472:	e7f6      	b.n	10462 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00010474 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   10474:	b510      	push	{r4, lr}
   10476:	f7fb f9bd 	bl	b7f4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   1047a:	2000      	movs	r0, #0
   1047c:	bd10      	pop	{r4, pc}

0001047e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   1047e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10482:	4604      	mov	r4, r0
   10484:	8840      	ldrh	r0, [r0, #2]
   10486:	460d      	mov	r5, r1
   10488:	b1b8      	cbz	r0, 104ba <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   1048a:	8820      	ldrh	r0, [r4, #0]
   1048c:	4669      	mov	r1, sp
   1048e:	f7fe fb49 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10492:	2800      	cmp	r0, #0
   10494:	d10f      	bne.n	104b6 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10496:	8820      	ldrh	r0, [r4, #0]
   10498:	8028      	strh	r0, [r5, #0]
   1049a:	9e01      	ldr	r6, [sp, #4]
   1049c:	f106 0510 	add.w	r5, r6, #16
   104a0:	3680      	adds	r6, #128	; 0x80
   104a2:	682f      	ldr	r7, [r5, #0]
   104a4:	8862      	ldrh	r2, [r4, #2]
   104a6:	4639      	mov	r1, r7
   104a8:	4630      	mov	r0, r6
   104aa:	f7fe fcd9 	bl	ee60 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   104ae:	6828      	ldr	r0, [r5, #0]
   104b0:	42b8      	cmp	r0, r7
   104b2:	d1f6      	bne.n	104a2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   104b4:	2000      	movs	r0, #0
   104b6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   104ba:	2012      	movs	r0, #18
   104bc:	e7fb      	b.n	104b6 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

000104be <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   104be:	f000 b886 	b.w	105ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000104c2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   104c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   104c6:	b086      	sub	sp, #24
   104c8:	4689      	mov	r9, r1
   104ca:	4607      	mov	r7, r0
   104cc:	8800      	ldrh	r0, [r0, #0]
   104ce:	a901      	add	r1, sp, #4
   104d0:	f7fe fb28 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   104d4:	2800      	cmp	r0, #0
   104d6:	d136      	bne.n	10546 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   104d8:	9802      	ldr	r0, [sp, #8]
   104da:	4601      	mov	r1, r0
   104dc:	4688      	mov	r8, r1
   104de:	f890 117e 	ldrb.w	r1, [r0, #382]	; 0x17e
   104e2:	f500 7490 	add.w	r4, r0, #288	; 0x120
   104e6:	f88d 1000 	strb.w	r1, [sp]
   104ea:	9900      	ldr	r1, [sp, #0]
   104ec:	9100      	str	r1, [sp, #0]
   104ee:	f89d 1000 	ldrb.w	r1, [sp]
   104f2:	3080      	adds	r0, #128	; 0x80
   104f4:	b109      	cbz	r1, 104fa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   104f6:	2601      	movs	r6, #1
   104f8:	e000      	b.n	104fc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   104fa:	2600      	movs	r6, #0
   104fc:	7b81      	ldrb	r1, [r0, #14]
   104fe:	2921      	cmp	r1, #33	; 0x21
   10500:	d100      	bne.n	10504 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10502:	b13e      	cbz	r6, 10514 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   10504:	2500      	movs	r5, #0
   10506:	305e      	adds	r0, #94	; 0x5e
   10508:	2108      	movs	r1, #8
   1050a:	4682      	mov	sl, r0
   1050c:	f7ff fc6e 	bl	fdec <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x52>
   10510:	b110      	cbz	r0, 10518 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   10512:	e007      	b.n	10524 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10514:	2501      	movs	r5, #1
   10516:	e7f6      	b.n	10506 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   10518:	210b      	movs	r1, #11
   1051a:	4650      	mov	r0, sl
   1051c:	f7ff fc66 	bl	fdec <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x52>
   10520:	b900      	cbnz	r0, 10524 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10522:	b17d      	cbz	r5, 10544 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   10524:	a804      	add	r0, sp, #16
   10526:	9000      	str	r0, [sp, #0]
   10528:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1052c:	ab03      	add	r3, sp, #12
   1052e:	463a      	mov	r2, r7
   10530:	4641      	mov	r1, r8
   10532:	f000 fa1c 	bl	1096e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a0>
   10536:	0005      	movs	r5, r0
   10538:	d105      	bne.n	10546 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   1053a:	340c      	adds	r4, #12
   1053c:	20ff      	movs	r0, #255	; 0xff
   1053e:	7060      	strb	r0, [r4, #1]
   10540:	b936      	cbnz	r6, 10550 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10542:	e003      	b.n	1054c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   10544:	201a      	movs	r0, #26
   10546:	b006      	add	sp, #24
   10548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1054c:	7820      	ldrb	r0, [r4, #0]
   1054e:	b108      	cbz	r0, 10554 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   10550:	253a      	movs	r5, #58	; 0x3a
   10552:	e012      	b.n	1057a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   10554:	f884 9000 	strb.w	r9, [r4]
   10558:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1055c:	70a0      	strb	r0, [r4, #2]
   1055e:	f89d 1010 	ldrb.w	r1, [sp, #16]
   10562:	70e1      	strb	r1, [r4, #3]
   10564:	f88d 0000 	strb.w	r0, [sp]
   10568:	f88d 1001 	strb.w	r1, [sp, #1]
   1056c:	88b8      	ldrh	r0, [r7, #4]
   1056e:	f8ad 0002 	strh.w	r0, [sp, #2]
   10572:	4669      	mov	r1, sp
   10574:	4640      	mov	r0, r8
   10576:	f7fe fb9f 	bl	ecb8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1057a:	2000      	movs	r0, #0
   1057c:	7060      	strb	r0, [r4, #1]
   1057e:	4628      	mov	r0, r5
   10580:	e7e1      	b.n	10546 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

00010582 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10582:	2008      	movs	r0, #8
   10584:	f7fb b986 	b.w	b894 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00010588 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   10588:	b510      	push	{r4, lr}
   1058a:	4604      	mov	r4, r0
   1058c:	2000      	movs	r0, #0
   1058e:	8822      	ldrh	r2, [r4, #0]
   10590:	b086      	sub	sp, #24
   10592:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   10596:	39ff      	subs	r1, #255	; 0xff
   10598:	d008      	beq.n	105ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   1059a:	a903      	add	r1, sp, #12
   1059c:	4610      	mov	r0, r2
   1059e:	f7fe fac1 	bl	eb24 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   105a2:	b110      	cbz	r0, 105aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   105a4:	2002      	movs	r0, #2
   105a6:	b006      	add	sp, #24
   105a8:	bd10      	pop	{r4, pc}
   105aa:	9804      	ldr	r0, [sp, #16]
   105ac:	8921      	ldrh	r1, [r4, #8]
   105ae:	89a3      	ldrh	r3, [r4, #12]
   105b0:	8962      	ldrh	r2, [r4, #10]
   105b2:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   105b6:	88e3      	ldrh	r3, [r4, #6]
   105b8:	88a2      	ldrh	r2, [r4, #4]
   105ba:	8861      	ldrh	r1, [r4, #2]
   105bc:	f000 f976 	bl	108ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2de>
   105c0:	b108      	cbz	r0, 105c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   105c2:	2000      	movs	r0, #0
   105c4:	e7ef      	b.n	105a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   105c6:	2030      	movs	r0, #48	; 0x30
   105c8:	e7ed      	b.n	105a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

000105ca <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>:
   105ca:	f7f8 be4b 	b.w	9264 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

000105ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   105ce:	b510      	push	{r4, lr}
   105d0:	f7fe f9ba 	bl	e948 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   105d4:	f7f5 fc46 	bl	5e64 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   105d8:	f7fb f97e 	bl	b8d8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   105dc:	f7fe fe6e 	bl	f2bc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   105e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   105e4:	f7fa bfdc 	b.w	b5a0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf4>
   105e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
   105ec:	4288      	cmp	r0, r1
   105ee:	d303      	bcc.n	105f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
   105f0:	f640 0148 	movw	r1, #2120	; 0x848
   105f4:	4288      	cmp	r0, r1
   105f6:	d300      	bcc.n	105fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c>
   105f8:	4608      	mov	r0, r1
   105fa:	b280      	uxth	r0, r0
   105fc:	4770      	bx	lr
   105fe:	07c1      	lsls	r1, r0, #31
   10600:	d001      	beq.n	10606 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
   10602:	2001      	movs	r0, #1
   10604:	4770      	bx	lr
   10606:	0780      	lsls	r0, r0, #30
   10608:	d501      	bpl.n	1060e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
   1060a:	2002      	movs	r0, #2
   1060c:	4770      	bx	lr
   1060e:	2000      	movs	r0, #0
   10610:	4770      	bx	lr
   10612:	b510      	push	{r4, lr}
   10614:	2801      	cmp	r0, #1
   10616:	d006      	beq.n	10626 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
   10618:	2802      	cmp	r0, #2
   1061a:	d004      	beq.n	10626 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
   1061c:	f240 21a9 	movw	r1, #681	; 0x2a9
   10620:	2006      	movs	r0, #6
   10622:	f7f3 ffc9 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10626:	bd10      	pop	{r4, pc}
   10628:	b510      	push	{r4, lr}
   1062a:	f000 f9e0 	bl	109ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x420>
   1062e:	b128      	cbz	r0, 1063c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
   10630:	f7f6 fda2 	bl	7178 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   10634:	2801      	cmp	r0, #1
   10636:	d001      	beq.n	1063c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
   10638:	2000      	movs	r0, #0
   1063a:	bd10      	pop	{r4, pc}
   1063c:	2001      	movs	r0, #1
   1063e:	bd10      	pop	{r4, pc}
   10640:	b510      	push	{r4, lr}
   10642:	0004      	movs	r4, r0
   10644:	d005      	beq.n	10652 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
   10646:	f7fb f937 	bl	b8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1064a:	4384      	bics	r4, r0
   1064c:	d001      	beq.n	10652 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
   1064e:	2000      	movs	r0, #0
   10650:	bd10      	pop	{r4, pc}
   10652:	2001      	movs	r0, #1
   10654:	bd10      	pop	{r4, pc}
   10656:	28fb      	cmp	r0, #251	; 0xfb
   10658:	d803      	bhi.n	10662 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x94>
   1065a:	f640 0048 	movw	r0, #2120	; 0x848
   1065e:	4281      	cmp	r1, r0
   10660:	d901      	bls.n	10666 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x98>
   10662:	2011      	movs	r0, #17
   10664:	4770      	bx	lr
   10666:	2000      	movs	r0, #0
   10668:	4770      	bx	lr
   1066a:	381b      	subs	r0, #27
   1066c:	28e1      	cmp	r0, #225	; 0xe1
   1066e:	d206      	bcs.n	1067e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
   10670:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10674:	d303      	bcc.n	1067e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
   10676:	f244 2090 	movw	r0, #17040	; 0x4290
   1067a:	4281      	cmp	r1, r0
   1067c:	d901      	bls.n	10682 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
   1067e:	2012      	movs	r0, #18
   10680:	4770      	bx	lr
   10682:	2000      	movs	r0, #0
   10684:	4770      	bx	lr
   10686:	b510      	push	{r4, lr}
   10688:	4604      	mov	r4, r0
   1068a:	7800      	ldrb	r0, [r0, #0]
   1068c:	2801      	cmp	r0, #1
   1068e:	d009      	beq.n	106a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
   10690:	f7f7 fef4 	bl	847c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   10694:	2805      	cmp	r0, #5
   10696:	d003      	beq.n	106a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
   10698:	f7f7 feb8 	bl	840c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
   1069c:	2800      	cmp	r0, #0
   1069e:	d000      	beq.n	106a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
   106a0:	200c      	movs	r0, #12
   106a2:	bd10      	pop	{r4, pc}
   106a4:	f7f6 fd04 	bl	70b0 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
   106a8:	b138      	cbz	r0, 106ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
   106aa:	f7f6 fb65 	bl	6d78 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   106ae:	88a1      	ldrh	r1, [r4, #4]
   106b0:	8860      	ldrh	r0, [r4, #2]
   106b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   106b6:	f7f7 be6f 	b.w	8398 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
   106ba:	2012      	movs	r0, #18
   106bc:	bd10      	pop	{r4, pc}
   106be:	7802      	ldrb	r2, [r0, #0]
   106c0:	2a01      	cmp	r2, #1
   106c2:	d001      	beq.n	106c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
   106c4:	b1ba      	cbz	r2, 106f6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
   106c6:	e018      	b.n	106fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12c>
   106c8:	7842      	ldrb	r2, [r0, #1]
   106ca:	b13a      	cbz	r2, 106dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10e>
   106cc:	2a01      	cmp	r2, #1
   106ce:	d005      	beq.n	106dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10e>
   106d0:	2a02      	cmp	r2, #2
   106d2:	d112      	bne.n	106fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12c>
   106d4:	b189      	cbz	r1, 106fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12c>
   106d6:	8881      	ldrh	r1, [r0, #4]
   106d8:	b179      	cbz	r1, 106fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12c>
   106da:	e000      	b.n	106de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x110>
   106dc:	b159      	cbz	r1, 106f6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
   106de:	8841      	ldrh	r1, [r0, #2]
   106e0:	b149      	cbz	r1, 106f6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
   106e2:	8880      	ldrh	r0, [r0, #4]
   106e4:	b138      	cbz	r0, 106f6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
   106e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   106ea:	0049      	lsls	r1, r1, #1
   106ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   106f0:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
   106f4:	d201      	bcs.n	106fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12c>
   106f6:	2000      	movs	r0, #0
   106f8:	4770      	bx	lr
   106fa:	2012      	movs	r0, #18
   106fc:	4770      	bx	lr
   106fe:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   10702:	7a45      	ldrb	r5, [r0, #9]
   10704:	4604      	mov	r4, r0
   10706:	0768      	lsls	r0, r5, #29
   10708:	d06c      	beq.n	107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   1070a:	08e8      	lsrs	r0, r5, #3
   1070c:	d16a      	bne.n	107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   1070e:	2d02      	cmp	r5, #2
   10710:	d068      	beq.n	107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   10712:	f7fb f8d1 	bl	b8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10716:	ea25 0000 	bic.w	r0, r5, r0
   1071a:	0740      	lsls	r0, r0, #29
   1071c:	d102      	bne.n	10724 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x156>
   1071e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   10722:	b110      	cbz	r0, 1072a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x15c>
   10724:	2011      	movs	r0, #17
   10726:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   1072a:	2d01      	cmp	r5, #1
   1072c:	d15a      	bne.n	107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   1072e:	27ff      	movs	r7, #255	; 0xff
   10730:	2101      	movs	r1, #1
   10732:	69a0      	ldr	r0, [r4, #24]
   10734:	f7fa ff92 	bl	b65c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1b0>
   10738:	b3e8      	cbz	r0, 107b6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e8>
   1073a:	46a8      	mov	r8, r5
   1073c:	2600      	movs	r6, #0
   1073e:	4635      	mov	r5, r6
   10740:	42bd      	cmp	r5, r7
   10742:	d02f      	beq.n	107a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d6>
   10744:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   10748:	6988      	ldr	r0, [r1, #24]
   1074a:	68c9      	ldr	r1, [r1, #12]
   1074c:	4288      	cmp	r0, r1
   1074e:	d849      	bhi.n	107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   10750:	4406      	add	r6, r0
   10752:	eb04 0045 	add.w	r0, r4, r5, lsl #1
   10756:	4681      	mov	r9, r0
   10758:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   1075a:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   1075e:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   10760:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   10764:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   10766:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   10768:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   1076a:	2000      	movs	r0, #0
   1076c:	f000 f89e 	bl	108ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2de>
   10770:	b308      	cbz	r0, 107b6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e8>
   10772:	b1bd      	cbz	r5, 107a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d6>
   10774:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
   10778:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
   1077c:	4281      	cmp	r1, r0
   1077e:	d131      	bne.n	107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   10780:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
   10784:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
   10788:	4281      	cmp	r1, r0
   1078a:	d12b      	bne.n	107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   1078c:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
   10790:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
   10794:	4281      	cmp	r1, r0
   10796:	d125      	bne.n	107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   10798:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   1079c:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
   107a0:	4281      	cmp	r1, r0
   107a2:	d11f      	bne.n	107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   107a4:	1c6d      	adds	r5, r5, #1
   107a6:	b2ed      	uxtb	r5, r5
   107a8:	4545      	cmp	r5, r8
   107aa:	d3c9      	bcc.n	10740 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x172>
   107ac:	68e0      	ldr	r0, [r4, #12]
   107ae:	42b0      	cmp	r0, r6
   107b0:	d318      	bcc.n	107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   107b2:	7820      	ldrb	r0, [r4, #0]
   107b4:	e000      	b.n	107b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ea>
   107b6:	e003      	b.n	107c0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
   107b8:	b120      	cbz	r0, 107c4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f6>
   107ba:	2801      	cmp	r0, #1
   107bc:	d112      	bne.n	107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   107be:	e004      	b.n	107ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fc>
   107c0:	2030      	movs	r0, #48	; 0x30
   107c2:	e7b0      	b.n	10726 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
   107c4:	78a0      	ldrb	r0, [r4, #2]
   107c6:	2800      	cmp	r0, #0
   107c8:	d1f7      	bne.n	107ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ec>
   107ca:	7860      	ldrb	r0, [r4, #1]
   107cc:	b128      	cbz	r0, 107da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
   107ce:	2801      	cmp	r0, #1
   107d0:	d003      	beq.n	107da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
   107d2:	2802      	cmp	r0, #2
   107d4:	d001      	beq.n	107da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
   107d6:	2803      	cmp	r0, #3
   107d8:	d104      	bne.n	107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   107da:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   107de:	b108      	cbz	r0, 107e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   107e0:	2807      	cmp	r0, #7
   107e2:	d901      	bls.n	107e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
   107e4:	2012      	movs	r0, #18
   107e6:	e79e      	b.n	10726 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
   107e8:	2000      	movs	r0, #0
   107ea:	e79c      	b.n	10726 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
   107ec:	b570      	push	{r4, r5, r6, lr}
   107ee:	4604      	mov	r4, r0
   107f0:	7800      	ldrb	r0, [r0, #0]
   107f2:	2500      	movs	r5, #0
   107f4:	2801      	cmp	r0, #1
   107f6:	d004      	beq.n	10802 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x234>
   107f8:	b118      	cbz	r0, 10802 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x234>
   107fa:	2802      	cmp	r0, #2
   107fc:	d001      	beq.n	10802 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x234>
   107fe:	2803      	cmp	r0, #3
   10800:	d139      	bne.n	10876 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a8>
   10802:	7860      	ldrb	r0, [r4, #1]
   10804:	b128      	cbz	r0, 10812 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x244>
   10806:	2801      	cmp	r0, #1
   10808:	d003      	beq.n	10812 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x244>
   1080a:	2802      	cmp	r0, #2
   1080c:	d001      	beq.n	10812 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x244>
   1080e:	2803      	cmp	r0, #3
   10810:	d131      	bne.n	10876 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a8>
   10812:	7e60      	ldrb	r0, [r4, #25]
   10814:	b948      	cbnz	r0, 1082a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25c>
   10816:	78a0      	ldrb	r0, [r4, #2]
   10818:	2801      	cmp	r0, #1
   1081a:	d12c      	bne.n	10876 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a8>
   1081c:	f7fb f84c 	bl	b8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10820:	4601      	mov	r1, r0
   10822:	78a0      	ldrb	r0, [r4, #2]
   10824:	ea30 0101 	bics.w	r1, r0, r1
   10828:	d001      	beq.n	1082e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
   1082a:	2011      	movs	r0, #17
   1082c:	bd70      	pop	{r4, r5, r6, pc}
   1082e:	07c0      	lsls	r0, r0, #31
   10830:	d006      	beq.n	10840 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x272>
   10832:	78e0      	ldrb	r0, [r4, #3]
   10834:	2301      	movs	r3, #1
   10836:	6922      	ldr	r2, [r4, #16]
   10838:	68a1      	ldr	r1, [r4, #8]
   1083a:	f000 f820 	bl	1087e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b0>
   1083e:	4605      	mov	r5, r0
   10840:	78a0      	ldrb	r0, [r4, #2]
   10842:	0780      	lsls	r0, r0, #30
   10844:	d506      	bpl.n	10854 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x286>
   10846:	78e0      	ldrb	r0, [r4, #3]
   10848:	2302      	movs	r3, #2
   1084a:	6922      	ldr	r2, [r4, #16]
   1084c:	68a1      	ldr	r1, [r4, #8]
   1084e:	f000 f816 	bl	1087e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b0>
   10852:	4305      	orrs	r5, r0
   10854:	78a0      	ldrb	r0, [r4, #2]
   10856:	0740      	lsls	r0, r0, #29
   10858:	d506      	bpl.n	10868 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29a>
   1085a:	78e0      	ldrb	r0, [r4, #3]
   1085c:	2304      	movs	r3, #4
   1085e:	6922      	ldr	r2, [r4, #16]
   10860:	68a1      	ldr	r1, [r4, #8]
   10862:	f000 f80c 	bl	1087e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b0>
   10866:	4305      	orrs	r5, r0
   10868:	b10d      	cbz	r5, 1086e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a0>
   1086a:	4628      	mov	r0, r5
   1086c:	bd70      	pop	{r4, r5, r6, pc}
   1086e:	7e20      	ldrb	r0, [r4, #24]
   10870:	b108      	cbz	r0, 10876 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a8>
   10872:	2807      	cmp	r0, #7
   10874:	d901      	bls.n	1087a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ac>
   10876:	2012      	movs	r0, #18
   10878:	bd70      	pop	{r4, r5, r6, pc}
   1087a:	2000      	movs	r0, #0
   1087c:	bd70      	pop	{r4, r5, r6, pc}
   1087e:	b570      	push	{r4, r5, r6, lr}
   10880:	4614      	mov	r4, r2
   10882:	460d      	mov	r5, r1
   10884:	b108      	cbz	r0, 1088a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2bc>
   10886:	2801      	cmp	r0, #1
   10888:	d10a      	bne.n	108a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2d2>
   1088a:	4619      	mov	r1, r3
   1088c:	4610      	mov	r0, r2
   1088e:	f7fa fee5 	bl	b65c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1b0>
   10892:	b138      	cbz	r0, 108a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2d6>
   10894:	4628      	mov	r0, r5
   10896:	f7fa fea9 	bl	b5ec <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x140>
   1089a:	b118      	cbz	r0, 108a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2d6>
   1089c:	42ac      	cmp	r4, r5
   1089e:	d903      	bls.n	108a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2da>
   108a0:	2012      	movs	r0, #18
   108a2:	bd70      	pop	{r4, r5, r6, pc}
   108a4:	2030      	movs	r0, #48	; 0x30
   108a6:	bd70      	pop	{r4, r5, r6, pc}
   108a8:	2000      	movs	r0, #0
   108aa:	bd70      	pop	{r4, r5, r6, pc}
   108ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108b0:	461d      	mov	r5, r3
   108b2:	4610      	mov	r0, r2
   108b4:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
   108b8:	1f8b      	subs	r3, r1, #6
   108ba:	f640 427a 	movw	r2, #3194	; 0xc7a
   108be:	9e08      	ldr	r6, [sp, #32]
   108c0:	4293      	cmp	r3, r2
   108c2:	d81c      	bhi.n	108fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x330>
   108c4:	1f83      	subs	r3, r0, #6
   108c6:	4293      	cmp	r3, r2
   108c8:	d819      	bhi.n	108fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x330>
   108ca:	4281      	cmp	r1, r0
   108cc:	d817      	bhi.n	108fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x330>
   108ce:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   108d2:	d214      	bcs.n	108fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x330>
   108d4:	f1a4 010a 	sub.w	r1, r4, #10
   108d8:	1f12      	subs	r2, r2, #4
   108da:	4291      	cmp	r1, r2
   108dc:	d80f      	bhi.n	108fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x330>
   108de:	f7fe f92d 	bl	eb3c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   108e2:	1c6d      	adds	r5, r5, #1
   108e4:	4368      	muls	r0, r5
   108e6:	f240 2171 	movw	r1, #625	; 0x271
   108ea:	0040      	lsls	r0, r0, #1
   108ec:	434c      	muls	r4, r1
   108ee:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
   108f2:	d204      	bcs.n	108fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x330>
   108f4:	42b7      	cmp	r7, r6
   108f6:	d802      	bhi.n	108fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x330>
   108f8:	2001      	movs	r0, #1
   108fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   108fe:	2000      	movs	r0, #0
   10900:	e7fb      	b.n	108fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x32c>
   10902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10906:	4606      	mov	r6, r0
   10908:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   1090c:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   10910:	4615      	mov	r5, r2
   10912:	3030      	adds	r0, #48	; 0x30
   10914:	f7f7 fd28 	bl	8368 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
   10918:	4680      	mov	r8, r0
   1091a:	2102      	movs	r1, #2
   1091c:	f7fe f99c 	bl	ec58 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10920:	4287      	cmp	r7, r0
   10922:	d200      	bcs.n	10926 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x358>
   10924:	4638      	mov	r0, r7
   10926:	4607      	mov	r7, r0
   10928:	2102      	movs	r1, #2
   1092a:	4640      	mov	r0, r8
   1092c:	f7fe f994 	bl	ec58 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10930:	4284      	cmp	r4, r0
   10932:	d200      	bcs.n	10936 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x368>
   10934:	4620      	mov	r0, r4
   10936:	8831      	ldrh	r1, [r6, #0]
   10938:	8029      	strh	r1, [r5, #0]
   1093a:	2f1b      	cmp	r7, #27
   1093c:	d913      	bls.n	10966 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x398>
   1093e:	2ffb      	cmp	r7, #251	; 0xfb
   10940:	d300      	bcc.n	10944 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x376>
   10942:	27fb      	movs	r7, #251	; 0xfb
   10944:	806f      	strh	r7, [r5, #2]
   10946:	281b      	cmp	r0, #27
   10948:	d90f      	bls.n	1096a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x39c>
   1094a:	28fb      	cmp	r0, #251	; 0xfb
   1094c:	d300      	bcc.n	10950 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x382>
   1094e:	20fb      	movs	r0, #251	; 0xfb
   10950:	80e8      	strh	r0, [r5, #6]
   10952:	4640      	mov	r0, r8
   10954:	f7ff fe48 	bl	105e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
   10958:	80a8      	strh	r0, [r5, #4]
   1095a:	4640      	mov	r0, r8
   1095c:	f7ff fe44 	bl	105e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
   10960:	8128      	strh	r0, [r5, #8]
   10962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10966:	271b      	movs	r7, #27
   10968:	e7ec      	b.n	10944 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x376>
   1096a:	201b      	movs	r0, #27
   1096c:	e7f0      	b.n	10950 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x382>
   1096e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10972:	7890      	ldrb	r0, [r2, #2]
   10974:	9e06      	ldr	r6, [sp, #24]
   10976:	461d      	mov	r5, r3
   10978:	4614      	mov	r4, r2
   1097a:	b908      	cbnz	r0, 10980 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3b2>
   1097c:	f7fa ff9c 	bl	b8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10980:	78e4      	ldrb	r4, [r4, #3]
   10982:	4607      	mov	r7, r0
   10984:	b914      	cbnz	r4, 1098c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3be>
   10986:	f7fa ff97 	bl	b8b8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1098a:	4604      	mov	r4, r0
   1098c:	b16f      	cbz	r7, 109aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3dc>
   1098e:	b164      	cbz	r4, 109aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3dc>
   10990:	4638      	mov	r0, r7
   10992:	f7ff fe34 	bl	105fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   10996:	4620      	mov	r0, r4
   10998:	f7ff fe31 	bl	105fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   1099c:	b12f      	cbz	r7, 109aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3dc>
   1099e:	b124      	cbz	r4, 109aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3dc>
   109a0:	702f      	strb	r7, [r5, #0]
   109a2:	7034      	strb	r4, [r6, #0]
   109a4:	2000      	movs	r0, #0
   109a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   109aa:	2009      	movs	r0, #9
   109ac:	e7fb      	b.n	109a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3d8>
   109ae:	207f      	movs	r0, #127	; 0x7f
   109b0:	f000 b828 	b.w	10a04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x436>
   109b4:	b508      	push	{r3, lr}
   109b6:	f890 11f0 	ldrb.w	r1, [r0, #496]	; 0x1f0
   109ba:	f890 00ad 	ldrb.w	r0, [r0, #173]	; 0xad
   109be:	f88d 0000 	strb.w	r0, [sp]
   109c2:	9800      	ldr	r0, [sp, #0]
   109c4:	9000      	str	r0, [sp, #0]
   109c6:	f89d 0000 	ldrb.w	r0, [sp]
   109ca:	b100      	cbz	r0, 109ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x400>
   109cc:	2001      	movs	r0, #1
   109ce:	1e40      	subs	r0, r0, #1
   109d0:	4208      	tst	r0, r1
   109d2:	d003      	beq.n	109dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40e>
   109d4:	2904      	cmp	r1, #4
   109d6:	d001      	beq.n	109dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40e>
   109d8:	2001      	movs	r0, #1
   109da:	bd08      	pop	{r3, pc}
   109dc:	2000      	movs	r0, #0
   109de:	bd08      	pop	{r3, pc}
   109e0:	b510      	push	{r4, lr}
   109e2:	f000 f804 	bl	109ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x420>
   109e6:	2800      	cmp	r0, #0
   109e8:	d000      	beq.n	109ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41e>
   109ea:	2001      	movs	r0, #1
   109ec:	bd10      	pop	{r4, pc}
   109ee:	b510      	push	{r4, lr}
   109f0:	f7f7 fd44 	bl	847c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   109f4:	2804      	cmp	r0, #4
   109f6:	d003      	beq.n	10a00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
   109f8:	2805      	cmp	r0, #5
   109fa:	d001      	beq.n	10a00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
   109fc:	2000      	movs	r0, #0
   109fe:	bd10      	pop	{r4, pc}
   10a00:	2001      	movs	r0, #1
   10a02:	bd10      	pop	{r4, pc}
   10a04:	b508      	push	{r3, lr}
   10a06:	f640 1288 	movw	r2, #2440	; 0x988
   10a0a:	4669      	mov	r1, sp
   10a0c:	f7f3 fc66 	bl	42dc <mpsl_fem_tx_power_split>
   10a10:	bd08      	pop	{r3, pc}
   10a12:	b530      	push	{r4, r5, lr}
   10a14:	f340 0400 	sbfx	r4, r0, #0, #1
   10a18:	f340 0040 	sbfx	r0, r0, #1, #1
   10a1c:	1c40      	adds	r0, r0, #1
   10a1e:	9d03      	ldr	r5, [sp, #12]
   10a20:	1c64      	adds	r4, r4, #1
   10a22:	d000      	beq.n	10a26 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x458>
   10a24:	b119      	cbz	r1, 10a2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x460>
   10a26:	b100      	cbz	r0, 10a2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45c>
   10a28:	b10a      	cbz	r2, 10a2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x460>
   10a2a:	b91c      	cbnz	r4, 10a34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x466>
   10a2c:	e001      	b.n	10a32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x464>
   10a2e:	2011      	movs	r0, #17
   10a30:	bd30      	pop	{r4, r5, pc}
   10a32:	2100      	movs	r1, #0
   10a34:	7019      	strb	r1, [r3, #0]
   10a36:	b900      	cbnz	r0, 10a3a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46c>
   10a38:	2200      	movs	r2, #0
   10a3a:	702a      	strb	r2, [r5, #0]
   10a3c:	2000      	movs	r0, #0
   10a3e:	bd30      	pop	{r4, r5, pc}
   10a40:	b510      	push	{r4, lr}
   10a42:	f7ff ffd4 	bl	109ee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x420>
   10a46:	b120      	cbz	r0, 10a52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x484>
   10a48:	f7f6 fb9e 	bl	7188 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   10a4c:	b108      	cbz	r0, 10a52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x484>
   10a4e:	2001      	movs	r0, #1
   10a50:	bd10      	pop	{r4, pc}
   10a52:	2000      	movs	r0, #0
   10a54:	bd10      	pop	{r4, pc}
   10a56:	6802      	ldr	r2, [r0, #0]
   10a58:	b912      	cbnz	r2, 10a60 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x492>
   10a5a:	6001      	str	r1, [r0, #0]
   10a5c:	4770      	bx	lr
   10a5e:	4602      	mov	r2, r0
   10a60:	6850      	ldr	r0, [r2, #4]
   10a62:	b108      	cbz	r0, 10a68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49a>
   10a64:	428a      	cmp	r2, r1
   10a66:	d1fa      	bne.n	10a5e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x490>
   10a68:	428a      	cmp	r2, r1
   10a6a:	d0f7      	beq.n	10a5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48e>
   10a6c:	6051      	str	r1, [r2, #4]
   10a6e:	4770      	bx	lr
   10a70:	b510      	push	{r4, lr}
   10a72:	4604      	mov	r4, r0
   10a74:	e002      	b.n	10a7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
   10a76:	6820      	ldr	r0, [r4, #0]
   10a78:	4780      	blx	r0
   10a7a:	6864      	ldr	r4, [r4, #4]
   10a7c:	2c00      	cmp	r4, #0
   10a7e:	d1fa      	bne.n	10a76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a8>
   10a80:	bd10      	pop	{r4, pc}
   10a82:	b510      	push	{r4, lr}
   10a84:	2000      	movs	r0, #0
   10a86:	f7f3 ff5b 	bl	4940 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10a8a:	f7f4 f97d 	bl	4d88 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10a8e:	f7f4 fb6d 	bl	516c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10a92:	f7f4 fd39 	bl	5508 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10a96:	2800      	cmp	r0, #0
   10a98:	d003      	beq.n	10aa2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4d4>
   10a9a:	21c6      	movs	r1, #198	; 0xc6
   10a9c:	2001      	movs	r0, #1
   10a9e:	f7f3 fd8b 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10aa2:	bd10      	pop	{r4, pc}
   10aa4:	b510      	push	{r4, lr}
   10aa6:	f000 f80a 	bl	10abe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4f0>
   10aaa:	f7ff f8bd 	bl	fc28 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   10aae:	2800      	cmp	r0, #0
   10ab0:	d004      	beq.n	10abc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ee>
   10ab2:	f44f 71aa 	mov.w	r1, #340	; 0x154
   10ab6:	2001      	movs	r0, #1
   10ab8:	f7f3 fd7e 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10abc:	bd10      	pop	{r4, pc}
   10abe:	b510      	push	{r4, lr}
   10ac0:	f7f7 fbf6 	bl	82b0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   10ac4:	b120      	cbz	r0, 10ad0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x502>
   10ac6:	f240 112d 	movw	r1, #301	; 0x12d
   10aca:	2001      	movs	r0, #1
   10acc:	f7f3 fd74 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10ad0:	f7fa fcdc 	bl	b48c <sym_EXR6VNSRXAXVPW6IU2YEAYBOR4HO5UQ4GQ2J6XA>
   10ad4:	f7f6 fab6 	bl	7044 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   10ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10adc:	f7fa ba28 	b.w	af30 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   10ae0:	000b0001 	.word	0x000b0001
   10ae4:	000a0002 	.word	0x000a0002
   10ae8:	00090005 	.word	0x00090005
   10aec:	0008000a 	.word	0x0008000a
   10af0:	00070014 	.word	0x00070014
   10af4:	0006001e 	.word	0x0006001e
   10af8:	00050032 	.word	0x00050032
   10afc:	0004004b 	.word	0x0004004b
   10b00:	00030064 	.word	0x00030064
   10b04:	00020096 	.word	0x00020096
   10b08:	000100fa 	.word	0x000100fa
   10b0c:	000001f4 	.word	0x000001f4

00010b10 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10b10:	b510      	push	{r4, lr}
   10b12:	f7fb fa2f 	bl	bf74 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10b16:	f000 f81d 	bl	10b54 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10b1a:	f7fa ff47 	bl	b9ac <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10b22:	f7fb b841 	b.w	bba8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010b26 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10b26:	b510      	push	{r4, lr}
   10b28:	24c8      	movs	r4, #200	; 0xc8
   10b2a:	1e64      	subs	r4, r4, #1
   10b2c:	b2e4      	uxtb	r4, r4
   10b2e:	f7fa ff5b 	bl	b9e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10b32:	2802      	cmp	r0, #2
   10b34:	d003      	beq.n	10b3e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10b36:	2801      	cmp	r0, #1
   10b38:	d000      	beq.n	10b3c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10b3a:	2000      	movs	r0, #0
   10b3c:	bd10      	pop	{r4, pc}
   10b3e:	2c00      	cmp	r4, #0
   10b40:	d1f3      	bne.n	10b2a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10b42:	219e      	movs	r1, #158	; 0x9e
   10b44:	203b      	movs	r0, #59	; 0x3b
   10b46:	f7f3 fd37 	bl	45b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b4a:	5840      	ldr	r0, [r0, r1]
   10b4c:	2800      	cmp	r0, #0
   10b4e:	d000      	beq.n	10b52 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10b50:	2001      	movs	r0, #1
   10b52:	4770      	bx	lr

00010b54 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10b54:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10b58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10b5c:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10b60:	f3bf 8f4f 	dsb	sy
   10b64:	f3bf 8f6f 	isb	sy
   10b68:	f7fb b8b8 	b.w	bcdc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10b6c:	2800      	cmp	r0, #0
   10b6e:	db09      	blt.n	10b84 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10b70:	f000 021f 	and.w	r2, r0, #31
   10b74:	2101      	movs	r1, #1
   10b76:	4091      	lsls	r1, r2
   10b78:	0940      	lsrs	r0, r0, #5
   10b7a:	0080      	lsls	r0, r0, #2
   10b7c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b80:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10b84:	4770      	bx	lr
   10b86:	2800      	cmp	r0, #0
   10b88:	db0d      	blt.n	10ba6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10b8a:	f000 021f 	and.w	r2, r0, #31
   10b8e:	2101      	movs	r1, #1
   10b90:	4091      	lsls	r1, r2
   10b92:	0940      	lsrs	r0, r0, #5
   10b94:	0080      	lsls	r0, r0, #2
   10b96:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b9a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10b9e:	f3bf 8f4f 	dsb	sy
   10ba2:	f3bf 8f6f 	isb	sy
   10ba6:	4770      	bx	lr
   10ba8:	5840      	ldr	r0, [r0, r1]
   10baa:	2800      	cmp	r0, #0
   10bac:	d000      	beq.n	10bb0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10bae:	2001      	movs	r0, #1
   10bb0:	4770      	bx	lr
   10bb2:	5840      	ldr	r0, [r0, r1]
   10bb4:	2800      	cmp	r0, #0
   10bb6:	d000      	beq.n	10bba <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10bb8:	2001      	movs	r0, #1
   10bba:	4770      	bx	lr

00010bbc <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10bbc:	b510      	push	{r4, lr}
   10bbe:	4604      	mov	r4, r0
   10bc0:	4608      	mov	r0, r1
   10bc2:	f7fb faf7 	bl	c1b4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10bc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10bca:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10bce:	fbb0 f0f1 	udiv	r0, r0, r1
   10bd2:	1a20      	subs	r0, r4, r0
   10bd4:	1e80      	subs	r0, r0, #2
   10bd6:	bd10      	pop	{r4, pc}

00010bd8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10bd8:	b510      	push	{r4, lr}
   10bda:	4604      	mov	r4, r0
   10bdc:	4608      	mov	r0, r1
   10bde:	f7fb fae9 	bl	c1b4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10be2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10be6:	fbb0 f0f1 	udiv	r0, r0, r1
   10bea:	1a20      	subs	r0, r4, r0
   10bec:	bd10      	pop	{r4, pc}
   10bee:	d8d8      	.short	0xd8d8
   10bf0:	d8d8d8d8 	.word	0xd8d8d8d8
   10bf4:	d8d8d8d8 	.word	0xd8d8d8d8
   10bf8:	d8d8d8d8 	.word	0xd8d8d8d8
   10bfc:	d8d8d8d8 	.word	0xd8d8d8d8
   10c00:	ececd8d8 	.word	0xececd8d8
   10c04:	f0f0ecec 	.word	0xf0f0ecec
   10c08:	f4f4f0f0 	.word	0xf4f4f0f0
   10c0c:	f8f8f4f4 	.word	0xf8f8f4f4
   10c10:	fcfcf8f8 	.word	0xfcfcf8f8
   10c14:	0000fcfc 	.word	0x0000fcfc
   10c18:	05040302 	.word	0x05040302
   10c1c:	d8080706 	.word	0xd8080706
   10c20:	d8d8d8d8 	.word	0xd8d8d8d8
   10c24:	d8d8d8d8 	.word	0xd8d8d8d8
   10c28:	d8d8d8d8 	.word	0xd8d8d8d8
   10c2c:	d8d8d8d8 	.word	0xd8d8d8d8
   10c30:	ecd8d8d8 	.word	0xecd8d8d8
   10c34:	f0ececec 	.word	0xf0ececec
   10c38:	f4f0f0f0 	.word	0xf4f0f0f0
   10c3c:	f8f4f4f4 	.word	0xf8f4f4f4
   10c40:	fcf8f8f8 	.word	0xfcf8f8f8
   10c44:	00fcfcfc 	.word	0x00fcfcfc
   10c48:	04030000 	.word	0x04030000
   10c4c:	1702080c 	.word	0x1702080c
   10c50:	0201010d 	.word	0x0201010d
   10c54:	01010909 	.word	0x01010909
   10c58:	18090206 	.word	0x18090206
   10c5c:	01010318 	.word	0x01010318
   10c60:	03030909 	.word	0x03030909
   10c64:	01020305 	.word	0x01020305
   10c68:	24020222 	.word	0x24020222
   10c6c:	04041009 	.word	0x04041009
   10c70:	0505      	.short	0x0505
   10c72:	5555      	.short	0x5555
   10c74:	27262555 	.word	0x27262555
   10c78:	01010301 	.word	0x01010301
   10c7c:	00000000 	.word	0x00000000

00010c80 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   10c80:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10c82:	4d41      	ldr	r5, [pc, #260]	; (10d88 <bt_init+0x108>)
   10c84:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   10c88:	6899      	ldr	r1, [r3, #8]
   10c8a:	f011 0101 	ands.w	r1, r1, #1
{
   10c8e:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10c90:	d123      	bne.n	10cda <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   10c92:	aa05      	add	r2, sp, #20
   10c94:	f640 4003 	movw	r0, #3075	; 0xc03
   10c98:	f004 ff0c 	bl	15ab4 <bt_hci_cmd_send_sync>
		if (err) {
   10c9c:	4604      	mov	r4, r0
   10c9e:	2800      	cmp	r0, #0
   10ca0:	d16f      	bne.n	10d82 <bt_init+0x102>
	uint8_t status = buf->data[0];
   10ca2:	9b05      	ldr	r3, [sp, #20]
   10ca4:	689b      	ldr	r3, [r3, #8]
	if (status) {
   10ca6:	781b      	ldrb	r3, [r3, #0]
   10ca8:	b9a3      	cbnz	r3, 10cd4 <bt_init+0x54>
		bt_scan_reset();
   10caa:	f006 faa9 	bl	17200 <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10cae:	f3bf 8f5b 	dmb	ish
   10cb2:	462b      	mov	r3, r5
   10cb4:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   10cb8:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   10cbc:	f002 0209 	and.w	r2, r2, #9
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10cc0:	f3bf 8f5b 	dmb	ish
   10cc4:	e853 1f00 	ldrex	r1, [r3]
   10cc8:	e843 2000 	strex	r0, r2, [r3]
   10ccc:	2800      	cmp	r0, #0
   10cce:	d1f9      	bne.n	10cc4 <bt_init+0x44>
   10cd0:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   10cd4:	9805      	ldr	r0, [sp, #20]
   10cd6:	f00d faf1 	bl	1e2bc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   10cda:	aa05      	add	r2, sp, #20
   10cdc:	2100      	movs	r1, #0
   10cde:	f241 0003 	movw	r0, #4099	; 0x1003
   10ce2:	f004 fee7 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   10ce6:	4604      	mov	r4, r0
   10ce8:	2800      	cmp	r0, #0
   10cea:	d14a      	bne.n	10d82 <bt_init+0x102>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   10cec:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   10cee:	4827      	ldr	r0, [pc, #156]	; (10d8c <bt_init+0x10c>)
   10cf0:	6899      	ldr	r1, [r3, #8]
   10cf2:	2208      	movs	r2, #8
   10cf4:	3101      	adds	r1, #1
   10cf6:	f015 ff2c 	bl	26b52 <memcpy>
	net_buf_unref(rsp);
   10cfa:	9805      	ldr	r0, [sp, #20]
   10cfc:	f00d fade 	bl	1e2bc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   10d00:	4621      	mov	r1, r4
   10d02:	aa05      	add	r2, sp, #20
   10d04:	f241 0001 	movw	r0, #4097	; 0x1001
   10d08:	f004 fed4 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   10d0c:	4604      	mov	r4, r0
   10d0e:	2800      	cmp	r0, #0
   10d10:	d137      	bne.n	10d82 <bt_init+0x102>
	read_local_ver_complete(rsp);
   10d12:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   10d14:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   10d16:	785a      	ldrb	r2, [r3, #1]
   10d18:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   10d1c:	78d9      	ldrb	r1, [r3, #3]
   10d1e:	789a      	ldrb	r2, [r3, #2]
   10d20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10d24:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   10d28:	791a      	ldrb	r2, [r3, #4]
   10d2a:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   10d2e:	7a19      	ldrb	r1, [r3, #8]
   10d30:	79da      	ldrb	r2, [r3, #7]
   10d32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10d36:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   10d3a:	795a      	ldrb	r2, [r3, #5]
   10d3c:	799b      	ldrb	r3, [r3, #6]
   10d3e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   10d42:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   10d46:	f00d fab9 	bl	1e2bc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   10d4a:	4621      	mov	r1, r4
   10d4c:	aa05      	add	r2, sp, #20
   10d4e:	f241 0002 	movw	r0, #4098	; 0x1002
   10d52:	f004 feaf 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   10d56:	4604      	mov	r4, r0
   10d58:	b998      	cbnz	r0, 10d82 <bt_init+0x102>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   10d5a:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.supported_commands, rp->commands,
   10d5c:	480c      	ldr	r0, [pc, #48]	; (10d90 <bt_init+0x110>)
   10d5e:	6899      	ldr	r1, [r3, #8]
   10d60:	2240      	movs	r2, #64	; 0x40
   10d62:	3101      	adds	r1, #1
   10d64:	f015 fef5 	bl	26b52 <memcpy>
	net_buf_unref(rsp);
   10d68:	9805      	ldr	r0, [sp, #20]
   10d6a:	f00d faa7 	bl	1e2bc <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   10d6e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   10d72:	065a      	lsls	r2, r3, #25
   10d74:	d410      	bmi.n	10d98 <bt_init+0x118>
		BT_ERR("Non-LE capable controller detected!");
   10d76:	4807      	ldr	r0, [pc, #28]	; (10d94 <bt_init+0x114>)
   10d78:	2145      	movs	r1, #69	; 0x45
   10d7a:	f014 ff4a 	bl	25c12 <z_log_minimal_printk>
		return -ENODEV;
   10d7e:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   10d82:	4620      	mov	r0, r4
   10d84:	b006      	add	sp, #24
   10d86:	bd70      	pop	{r4, r5, r6, pc}
   10d88:	20000340 	.word	0x20000340
   10d8c:	200003b0 	.word	0x200003b0
   10d90:	200003b8 	.word	0x200003b8
   10d94:	0002c51b 	.word	0x0002c51b
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   10d98:	4621      	mov	r1, r4
   10d9a:	aa05      	add	r2, sp, #20
   10d9c:	f242 0003 	movw	r0, #8195	; 0x2003
   10da0:	f004 fe88 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   10da4:	4604      	mov	r4, r0
   10da6:	2800      	cmp	r0, #0
   10da8:	d1eb      	bne.n	10d82 <bt_init+0x102>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   10daa:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   10dac:	48b4      	ldr	r0, [pc, #720]	; (11080 <bt_init+0x400>)
   10dae:	6899      	ldr	r1, [r3, #8]
   10db0:	2208      	movs	r2, #8
   10db2:	3101      	adds	r1, #1
   10db4:	f015 fecd 	bl	26b52 <memcpy>
	net_buf_unref(rsp);
   10db8:	9805      	ldr	r0, [sp, #20]
   10dba:	f00d fa7f 	bl	1e2bc <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   10dbe:	4621      	mov	r1, r4
   10dc0:	aa05      	add	r2, sp, #20
   10dc2:	f242 0002 	movw	r0, #8194	; 0x2002
   10dc6:	f004 fe75 	bl	15ab4 <bt_hci_cmd_send_sync>
		if (err) {
   10dca:	4604      	mov	r4, r0
   10dcc:	2800      	cmp	r0, #0
   10dce:	d1d8      	bne.n	10d82 <bt_init+0x102>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   10dd0:	9b05      	ldr	r3, [sp, #20]
   10dd2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   10dd4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10dd8:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   10ddc:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   10dde:	b121      	cbz	r1, 10dea <bt_init+0x16a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   10de0:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   10de2:	48a8      	ldr	r0, [pc, #672]	; (11084 <bt_init+0x404>)
   10de4:	4611      	mov	r1, r2
   10de6:	f018 fe1a 	bl	29a1e <z_impl_k_sem_init>
		net_buf_unref(rsp);
   10dea:	9805      	ldr	r0, [sp, #20]
   10dec:	f00d fa66 	bl	1e2bc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10df0:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   10df4:	f016 0620 	ands.w	r6, r6, #32
   10df8:	f000 8112 	beq.w	11020 <bt_init+0x3a0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   10dfc:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   10e00:	071b      	lsls	r3, r3, #28
   10e02:	d512      	bpl.n	10e2a <bt_init+0x1aa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   10e04:	aa05      	add	r2, sp, #20
   10e06:	2100      	movs	r1, #0
   10e08:	f242 001c 	movw	r0, #8220	; 0x201c
   10e0c:	f004 fe52 	bl	15ab4 <bt_hci_cmd_send_sync>
		if (err) {
   10e10:	4604      	mov	r4, r0
   10e12:	2800      	cmp	r0, #0
   10e14:	d1b5      	bne.n	10d82 <bt_init+0x102>
		le_read_supp_states_complete(rsp);
   10e16:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10e18:	6883      	ldr	r3, [r0, #8]
   10e1a:	f8d3 2001 	ldr.w	r2, [r3, #1]
   10e1e:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   10e22:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   10e26:	f00d fa49 	bl	1e2bc <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   10e2a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10e2e:	069e      	lsls	r6, r3, #26
   10e30:	d523      	bpl.n	10e7a <bt_init+0x1fa>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   10e32:	f10d 0112 	add.w	r1, sp, #18
   10e36:	a804      	add	r0, sp, #16
   10e38:	f004 fe9e 	bl	15b78 <hci_le_read_max_data_len>
		if (err) {
   10e3c:	4604      	mov	r4, r0
   10e3e:	2800      	cmp	r0, #0
   10e40:	d19f      	bne.n	10d82 <bt_init+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10e42:	2104      	movs	r1, #4
   10e44:	f242 0024 	movw	r0, #8228	; 0x2024
   10e48:	f004 fdec 	bl	15a24 <bt_hci_cmd_create>
		if (!buf) {
   10e4c:	4606      	mov	r6, r0
   10e4e:	2800      	cmp	r0, #0
   10e50:	f000 80ed 	beq.w	1102e <bt_init+0x3ae>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   10e54:	2104      	movs	r1, #4
   10e56:	3008      	adds	r0, #8
   10e58:	f00d fb46 	bl	1e4e8 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   10e5c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   10e60:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   10e62:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   10e66:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10e68:	4622      	mov	r2, r4
   10e6a:	4631      	mov	r1, r6
   10e6c:	f242 0024 	movw	r0, #8228	; 0x2024
   10e70:	f004 fe20 	bl	15ab4 <bt_hci_cmd_send_sync>
		if (err) {
   10e74:	4604      	mov	r4, r0
   10e76:	2800      	cmp	r0, #0
   10e78:	d183      	bne.n	10d82 <bt_init+0x102>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   10e7a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10e7e:	065c      	lsls	r4, r3, #25
   10e80:	d52a      	bpl.n	10ed8 <bt_init+0x258>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   10e82:	2102      	movs	r1, #2
   10e84:	f242 002e 	movw	r0, #8238	; 0x202e
   10e88:	f004 fdcc 	bl	15a24 <bt_hci_cmd_create>
		if (!buf) {
   10e8c:	4604      	mov	r4, r0
   10e8e:	2800      	cmp	r0, #0
   10e90:	f000 80cd 	beq.w	1102e <bt_init+0x3ae>
   10e94:	2102      	movs	r1, #2
   10e96:	3008      	adds	r0, #8
   10e98:	f00d fb26 	bl	1e4e8 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(bt_dev.rpa_timeout);
   10e9c:	f8b5 31a8 	ldrh.w	r3, [r5, #424]	; 0x1a8
   10ea0:	8003      	strh	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   10ea2:	4621      	mov	r1, r4
   10ea4:	2200      	movs	r2, #0
   10ea6:	f242 002e 	movw	r0, #8238	; 0x202e
   10eaa:	f004 fe03 	bl	15ab4 <bt_hci_cmd_send_sync>
		if (err) {
   10eae:	4604      	mov	r4, r0
   10eb0:	2800      	cmp	r0, #0
   10eb2:	f47f af66 	bne.w	10d82 <bt_init+0x102>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   10eb6:	4601      	mov	r1, r0
   10eb8:	aa05      	add	r2, sp, #20
   10eba:	f242 002a 	movw	r0, #8234	; 0x202a
   10ebe:	f004 fdf9 	bl	15ab4 <bt_hci_cmd_send_sync>
		if (err) {
   10ec2:	4604      	mov	r4, r0
   10ec4:	2800      	cmp	r0, #0
   10ec6:	f47f af5c 	bne.w	10d82 <bt_init+0x102>
		le_read_resolving_list_size_complete(rsp);
   10eca:	9805      	ldr	r0, [sp, #20]
	bt_dev.le.rl_size = rp->rl_size;
   10ecc:	6883      	ldr	r3, [r0, #8]
   10ece:	785b      	ldrb	r3, [r3, #1]
   10ed0:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   10ed4:	f00d f9f2 	bl	1e2bc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   10ed8:	2108      	movs	r1, #8
   10eda:	f242 0001 	movw	r0, #8193	; 0x2001
   10ede:	f004 fda1 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   10ee2:	4604      	mov	r4, r0
   10ee4:	2800      	cmp	r0, #0
   10ee6:	f000 80a2 	beq.w	1102e <bt_init+0x3ae>
   10eea:	2108      	movs	r1, #8
   10eec:	4408      	add	r0, r1
   10eee:	f00d fafb 	bl	1e4e8 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   10ef2:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   10ef6:	f011 0f40 	tst.w	r1, #64	; 0x40
   10efa:	4602      	mov	r2, r0
   10efc:	f240 2302 	movw	r3, #514	; 0x202
   10f00:	bf08      	it	eq
   10f02:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   10f04:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   10f06:	bf4c      	ite	mi
   10f08:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   10f0c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   10f10:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10f12:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   10f16:	bf48      	it	mi
   10f18:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10f1c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10f20:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   10f24:	bf18      	it	ne
   10f26:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10f2a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10f2e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   10f30:	bf48      	it	mi
   10f32:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10f36:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   10f38:	bf08      	it	eq
   10f3a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   10f3e:	2100      	movs	r1, #0
   10f40:	f015 ff3b 	bl	26dba <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10f44:	4621      	mov	r1, r4
   10f46:	2200      	movs	r2, #0
   10f48:	f242 0001 	movw	r0, #8193	; 0x2001
   10f4c:	f004 fdb2 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   10f50:	4604      	mov	r4, r0
   10f52:	2800      	cmp	r0, #0
   10f54:	f47f af15 	bne.w	10d82 <bt_init+0x102>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10f58:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   10f5c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10f60:	0698      	lsls	r0, r3, #26
   10f62:	d479      	bmi.n	11058 <bt_init+0x3d8>
	if (bt_dev.le.acl_mtu) {
   10f64:	b9d9      	cbnz	r1, 10f9e <bt_init+0x31e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   10f66:	aa05      	add	r2, sp, #20
   10f68:	f241 0005 	movw	r0, #4101	; 0x1005
   10f6c:	f004 fda2 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   10f70:	4604      	mov	r4, r0
   10f72:	2800      	cmp	r0, #0
   10f74:	f47f af05 	bne.w	10d82 <bt_init+0x102>
	if (bt_dev.le.acl_mtu) {
   10f78:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   10f7c:	b963      	cbnz	r3, 10f98 <bt_init+0x318>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   10f7e:	9b05      	ldr	r3, [sp, #20]
   10f80:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   10f82:	785a      	ldrb	r2, [r3, #1]
   10f84:	7899      	ldrb	r1, [r3, #2]
   10f86:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10f8a:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   10f8e:	889a      	ldrh	r2, [r3, #4]
   10f90:	483c      	ldr	r0, [pc, #240]	; (11084 <bt_init+0x404>)
   10f92:	4611      	mov	r1, r2
   10f94:	f018 fd43 	bl	29a1e <z_impl_k_sem_init>
	net_buf_unref(rsp);
   10f98:	9805      	ldr	r0, [sp, #20]
   10f9a:	f00d f98f 	bl	1e2bc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   10f9e:	2108      	movs	r1, #8
   10fa0:	f640 4001 	movw	r0, #3073	; 0xc01
   10fa4:	f004 fd3e 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   10fa8:	4604      	mov	r4, r0
   10faa:	2800      	cmp	r0, #0
   10fac:	d03f      	beq.n	1102e <bt_init+0x3ae>
   10fae:	2108      	movs	r1, #8
   10fb0:	4408      	add	r0, r1
   10fb2:	f00d fa99 	bl	1e4e8 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10fb6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10fba:	07d9      	lsls	r1, r3, #31
   10fbc:	4602      	mov	r2, r0
   10fbe:	d554      	bpl.n	1106a <bt_init+0x3ea>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   10fc0:	a12d      	add	r1, pc, #180	; (adr r1, 11078 <bt_init+0x3f8>)
   10fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   10fc6:	f015 fef8 	bl	26dba <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   10fca:	4621      	mov	r1, r4
   10fcc:	2200      	movs	r2, #0
   10fce:	f640 4001 	movw	r0, #3073	; 0xc01
   10fd2:	f004 fd6f 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   10fd6:	4604      	mov	r4, r0
   10fd8:	2800      	cmp	r0, #0
   10fda:	f47f aed2 	bne.w	10d82 <bt_init+0x102>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   10fde:	4601      	mov	r1, r0
   10fe0:	aa05      	add	r2, sp, #20
   10fe2:	f64f 4001 	movw	r0, #64513	; 0xfc01
   10fe6:	f004 fd65 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   10fea:	2800      	cmp	r0, #0
   10fec:	d054      	beq.n	11098 <bt_init+0x418>
		BT_WARN("Vendor HCI extensions not available");
   10fee:	4826      	ldr	r0, [pc, #152]	; (11088 <bt_init+0x408>)
   10ff0:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
   10ff2:	f014 fe0e 	bl	25c12 <z_log_minimal_printk>
	err = bt_id_init();
   10ff6:	f006 f871 	bl	170dc <bt_id_init>
	if (err) {
   10ffa:	4604      	mov	r4, r0
   10ffc:	2800      	cmp	r0, #0
   10ffe:	f47f aec0 	bne.w	10d82 <bt_init+0x102>
		err = bt_conn_init();
   11002:	f007 fc4d 	bl	188a0 <bt_conn_init>
		if (err) {
   11006:	4604      	mov	r4, r0
   11008:	2800      	cmp	r0, #0
   1100a:	f47f aeba 	bne.w	10d82 <bt_init+0x102>
		if (!bt_dev.id_count) {
   1100e:	79eb      	ldrb	r3, [r5, #7]
   11010:	2b00      	cmp	r3, #0
   11012:	f040 80a6 	bne.w	11162 <bt_init+0x4e2>
			BT_INFO("No ID address. App must call settings_load()");
   11016:	481d      	ldr	r0, [pc, #116]	; (1108c <bt_init+0x40c>)
   11018:	2149      	movs	r1, #73	; 0x49
   1101a:	f014 fdfa 	bl	25c12 <z_log_minimal_printk>
			return 0;
   1101e:	e6b0      	b.n	10d82 <bt_init+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   11020:	2102      	movs	r1, #2
   11022:	f640 406d 	movw	r0, #3181	; 0xc6d
   11026:	f004 fcfd 	bl	15a24 <bt_hci_cmd_create>
		if (!buf) {
   1102a:	4604      	mov	r4, r0
   1102c:	b910      	cbnz	r0, 11034 <bt_init+0x3b4>
		return -ENOBUFS;
   1102e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   11032:	e6a6      	b.n	10d82 <bt_init+0x102>
   11034:	2102      	movs	r1, #2
   11036:	3008      	adds	r0, #8
   11038:	f00d fa56 	bl	1e4e8 <net_buf_simple_add>
		cp_le->le = 0x01;
   1103c:	2301      	movs	r3, #1
   1103e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   11040:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   11042:	4621      	mov	r1, r4
   11044:	4632      	mov	r2, r6
   11046:	f640 406d 	movw	r0, #3181	; 0xc6d
   1104a:	f004 fd33 	bl	15ab4 <bt_hci_cmd_send_sync>
		if (err) {
   1104e:	4604      	mov	r4, r0
   11050:	2800      	cmp	r0, #0
   11052:	f43f aed3 	beq.w	10dfc <bt_init+0x17c>
   11056:	e694      	b.n	10d82 <bt_init+0x102>
	else if (!bt_dev.le.acl_mtu) {
   11058:	2900      	cmp	r1, #0
   1105a:	d1a0      	bne.n	10f9e <bt_init+0x31e>
		BT_ERR("ACL BR/EDR buffers not initialized");
   1105c:	480c      	ldr	r0, [pc, #48]	; (11090 <bt_init+0x410>)
   1105e:	2145      	movs	r1, #69	; 0x45
   11060:	f014 fdd7 	bl	25c12 <z_log_minimal_printk>
		return -EIO;
   11064:	f06f 0404 	mvn.w	r4, #4
   11068:	e68b      	b.n	10d82 <bt_init+0x102>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   1106a:	480a      	ldr	r0, [pc, #40]	; (11094 <bt_init+0x414>)
   1106c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   11070:	e7a9      	b.n	10fc6 <bt_init+0x346>
   11072:	bf00      	nop
   11074:	f3af 8000 	nop.w
   11078:	02008890 	.word	0x02008890
   1107c:	20008000 	.word	0x20008000
   11080:	20000410 	.word	0x20000410
   11084:	20000440 	.word	0x20000440
   11088:	0002c56c 	.word	0x0002c56c
   1108c:	0002c65e 	.word	0x0002c65e
   11090:	0002c544 	.word	0x0002c544
   11094:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
   11098:	9b05      	ldr	r3, [sp, #20]
	BT_INFO("HW Platform: %s (0x%04x)",
   1109a:	4835      	ldr	r0, [pc, #212]	; (11170 <bt_init+0x4f0>)
	rp.info = (void *)rsp->data;
   1109c:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   1109e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   110a2:	2b03      	cmp	r3, #3
		return plat_str[platform];
   110a4:	bf96      	itet	ls
   110a6:	4a33      	ldrls	r2, [pc, #204]	; (11174 <bt_init+0x4f4>)
	return "unknown";
   110a8:	4a33      	ldrhi	r2, [pc, #204]	; (11178 <bt_init+0x4f8>)
		return plat_str[platform];
   110aa:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   110ae:	2149      	movs	r1, #73	; 0x49
   110b0:	f014 fdaf 	bl	25c12 <z_log_minimal_printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   110b4:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   110b8:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   110bc:	2a02      	cmp	r2, #2
   110be:	d12a      	bne.n	11116 <bt_init+0x496>
	if (variant < ARRAY_SIZE(nordic_str)) {
   110c0:	2b03      	cmp	r3, #3
   110c2:	d828      	bhi.n	11116 <bt_init+0x496>
		return nordic_str[variant];
   110c4:	4a2d      	ldr	r2, [pc, #180]	; (1117c <bt_init+0x4fc>)
   110c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   110ca:	482d      	ldr	r0, [pc, #180]	; (11180 <bt_init+0x500>)
   110cc:	2149      	movs	r1, #73	; 0x49
   110ce:	f014 fda0 	bl	25c12 <z_log_minimal_printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   110d2:	7963      	ldrb	r3, [r4, #5]
   110d4:	f8d4 1009 	ldr.w	r1, [r4, #9]
   110d8:	9102      	str	r1, [sp, #8]
	if (variant < ARRAY_SIZE(var_str)) {
   110da:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   110dc:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
   110e0:	bf98      	it	ls
   110e2:	4a28      	ldrls	r2, [pc, #160]	; (11184 <bt_init+0x504>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   110e4:	9101      	str	r1, [sp, #4]
   110e6:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
   110e8:	bf94      	ite	ls
   110ea:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
   110ee:	4a22      	ldrhi	r2, [pc, #136]	; (11178 <bt_init+0x4f8>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   110f0:	4825      	ldr	r0, [pc, #148]	; (11188 <bt_init+0x508>)
   110f2:	9100      	str	r1, [sp, #0]
   110f4:	2149      	movs	r1, #73	; 0x49
   110f6:	f014 fd8c 	bl	25c12 <z_log_minimal_printk>
	net_buf_unref(rsp);
   110fa:	9805      	ldr	r0, [sp, #20]
   110fc:	f00d f8de 	bl	1e2bc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   11100:	aa05      	add	r2, sp, #20
   11102:	2100      	movs	r1, #0
   11104:	f64f 4002 	movw	r0, #64514	; 0xfc02
   11108:	f004 fcd4 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   1110c:	4604      	mov	r4, r0
   1110e:	b120      	cbz	r0, 1111a <bt_init+0x49a>
		BT_WARN("Failed to read supported vendor commands");
   11110:	481e      	ldr	r0, [pc, #120]	; (1118c <bt_init+0x50c>)
   11112:	2157      	movs	r1, #87	; 0x57
   11114:	e76d      	b.n	10ff2 <bt_init+0x372>
		return "unknown";
   11116:	4a18      	ldr	r2, [pc, #96]	; (11178 <bt_init+0x4f8>)
   11118:	e7d7      	b.n	110ca <bt_init+0x44a>
	rp.cmds = (void *)rsp->data;
   1111a:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1111c:	481c      	ldr	r0, [pc, #112]	; (11190 <bt_init+0x510>)
   1111e:	6899      	ldr	r1, [r3, #8]
   11120:	2202      	movs	r2, #2
   11122:	3101      	adds	r1, #1
   11124:	f015 fd15 	bl	26b52 <memcpy>
	net_buf_unref(rsp);
   11128:	9805      	ldr	r0, [sp, #20]
   1112a:	f00d f8c7 	bl	1e2bc <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1112e:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   11132:	075b      	lsls	r3, r3, #29
   11134:	f57f af5f 	bpl.w	10ff6 <bt_init+0x376>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   11138:	aa05      	add	r2, sp, #20
   1113a:	4621      	mov	r1, r4
   1113c:	f64f 4003 	movw	r0, #64515	; 0xfc03
   11140:	f004 fcb8 	bl	15ab4 <bt_hci_cmd_send_sync>
		if (err) {
   11144:	b110      	cbz	r0, 1114c <bt_init+0x4cc>
			BT_WARN("Failed to read supported vendor features");
   11146:	4813      	ldr	r0, [pc, #76]	; (11194 <bt_init+0x514>)
   11148:	2157      	movs	r1, #87	; 0x57
   1114a:	e752      	b.n	10ff2 <bt_init+0x372>
		rp.feat = (void *)rsp->data;
   1114c:	9b05      	ldr	r3, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1114e:	4812      	ldr	r0, [pc, #72]	; (11198 <bt_init+0x518>)
   11150:	6899      	ldr	r1, [r3, #8]
   11152:	2201      	movs	r2, #1
   11154:	4411      	add	r1, r2
   11156:	f015 fcfc 	bl	26b52 <memcpy>
		net_buf_unref(rsp);
   1115a:	9805      	ldr	r0, [sp, #20]
   1115c:	f00d f8ae 	bl	1e2bc <net_buf_unref>
   11160:	e749      	b.n	10ff6 <bt_init+0x376>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11162:	2108      	movs	r1, #8
   11164:	480d      	ldr	r0, [pc, #52]	; (1119c <bt_init+0x51c>)
   11166:	f015 fe0d 	bl	26d84 <atomic_or>
	bt_finalize_init();
   1116a:	f005 fa0b 	bl	16584 <bt_finalize_init>
	return 0;
   1116e:	e608      	b.n	10d82 <bt_init+0x102>
   11170:	0002c595 	.word	0x0002c595
   11174:	0002a4a0 	.word	0x0002a4a0
   11178:	0002c01b 	.word	0x0002c01b
   1117c:	0002a460 	.word	0x0002a460
   11180:	0002c5b3 	.word	0x0002c5b3
   11184:	0002a4d8 	.word	0x0002a4d8
   11188:	0002c5d0 	.word	0x0002c5d0
   1118c:	0002c602 	.word	0x0002c602
   11190:	200003f9 	.word	0x200003f9
   11194:	0002c630 	.word	0x0002c630
   11198:	200003f8 	.word	0x200003f8
   1119c:	2000040c 	.word	0x2000040c

000111a0 <kbdslc_ccc_cfg_changed>:
static struct bt_kbds_cb       kbds_cb;

static void kbdslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   111a0:	1e4b      	subs	r3, r1, #1
   111a2:	4259      	negs	r1, r3
   111a4:	4159      	adcs	r1, r3
   111a6:	4b01      	ldr	r3, [pc, #4]	; (111ac <kbdslc_ccc_cfg_changed+0xc>)
   111a8:	6019      	str	r1, [r3, #0]
}
   111aa:	4770      	bx	lr
   111ac:	200020b0 	.word	0x200020b0

000111b0 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
   111b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   111b4:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	//LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle,
		//(void *)conn);

	if (kbds_cb.button_cb) {
   111b6:	4b0d      	ldr	r3, [pc, #52]	; (111ec <read_button+0x3c>)
{
   111b8:	4605      	mov	r5, r0
	if (kbds_cb.button_cb) {
   111ba:	6818      	ldr	r0, [r3, #0]
{
   111bc:	460c      	mov	r4, r1
   111be:	4616      	mov	r6, r2
	if (kbds_cb.button_cb) {
   111c0:	b180      	cbz	r0, 111e4 <read_button+0x34>
	const char *value = attr->user_data;
   111c2:	f8d1 800c 	ldr.w	r8, [r1, #12]
		keystate = kbds_cb.button_cb();
   111c6:	4780      	blx	r0
   111c8:	4b09      	ldr	r3, [pc, #36]	; (111f0 <read_button+0x40>)
   111ca:	6018      	str	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   111cc:	2301      	movs	r3, #1
   111ce:	e9cd 8301 	strd	r8, r3, [sp, #4]
   111d2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   111d6:	9300      	str	r3, [sp, #0]
   111d8:	4632      	mov	r2, r6
   111da:	463b      	mov	r3, r7
   111dc:	4621      	mov	r1, r4
   111de:	4628      	mov	r0, r5
   111e0:	f017 f989 	bl	284f6 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
   111e4:	b004      	add	sp, #16
   111e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111ea:	bf00      	nop
   111ec:	200020a8 	.word	0x200020a8
   111f0:	200020ac 	.word	0x200020ac

000111f4 <periodic_read_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t periodic_read_process(struct bt_conn *conn, uint8_t err,
				  struct bt_gatt_read_params *params,
				  const void *data, uint16_t length)
{
   111f4:	b570      	push	{r4, r5, r6, lr}
   111f6:	4614      	mov	r4, r2
	const uint8_t *bdata = data;

	kbds = CONTAINER_OF(params, struct bt_kbds_client,
			periodic_read.params);

	if (!kbds->notify_cb) {
   111f8:	6992      	ldr	r2, [r2, #24]
   111fa:	b91a      	cbnz	r2, 11204 <periodic_read_process+0x10>
		printk("No notification callback present");
   111fc:	481b      	ldr	r0, [pc, #108]	; (1126c <periodic_read_process+0x78>)
	} else  if (err) {
		printk("Read value error: %d", err);
	} else if (!data || length != 1) {
		printk("Unexpected read value size.\n");
   111fe:	f014 fb09 	bl	25814 <printk>
   11202:	e003      	b.n	1120c <periodic_read_process+0x18>
	} else  if (err) {
   11204:	b1f1      	cbz	r1, 11244 <periodic_read_process+0x50>
		printk("Read value error: %d", err);
   11206:	481a      	ldr	r0, [pc, #104]	; (11270 <periodic_read_process+0x7c>)
   11208:	f014 fb04 	bl	25814 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1120c:	f3bf 8f5b 	dmb	ish
   11210:	6925      	ldr	r5, [r4, #16]
   11212:	f3bf 8f5b 	dmb	ish
			/* Do nothing. */
		}
	}

	interval = atomic_get(&kbds->periodic_read.interval);
	if (interval) {
   11216:	b19d      	cbz	r5, 11240 <periodic_read_process+0x4c>
		k_work_schedule(&kbds->periodic_read.read_work,
				K_MSEC(interval));
   11218:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1121c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   11220:	f240 30e7 	movw	r0, #999	; 0x3e7
   11224:	2100      	movs	r1, #0
   11226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1122a:	2300      	movs	r3, #0
   1122c:	fbc5 0106 	smlal	r0, r1, r5, r6
   11230:	f7ee ff56 	bl	e0 <__aeabi_uldivmod>
   11234:	4602      	mov	r2, r0
   11236:	460b      	mov	r3, r1
		k_work_schedule(&kbds->periodic_read.read_work,
   11238:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   1123c:	f011 ff24 	bl	23088 <k_work_schedule>
	}
	return BT_GATT_ITER_STOP;
}
   11240:	2000      	movs	r0, #0
   11242:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!data || length != 1) {
   11244:	b11b      	cbz	r3, 1124e <periodic_read_process+0x5a>
   11246:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1124a:	2901      	cmp	r1, #1
   1124c:	d001      	beq.n	11252 <periodic_read_process+0x5e>
		printk("Unexpected read value size.\n");
   1124e:	4809      	ldr	r0, [pc, #36]	; (11274 <periodic_read_process+0x80>)
   11250:	e7d5      	b.n	111fe <periodic_read_process+0xa>
		keystates = bdata[0];
   11252:	7819      	ldrb	r1, [r3, #0]
		if (keystates > BT_KBDS_VAL_MAX) {
   11254:	2964      	cmp	r1, #100	; 0x64
   11256:	d901      	bls.n	1125c <periodic_read_process+0x68>
			printk("Unexpected read value.\n");
   11258:	4807      	ldr	r0, [pc, #28]	; (11278 <periodic_read_process+0x84>)
   1125a:	e7d0      	b.n	111fe <periodic_read_process+0xa>
		} else if (kbds->keystates != keystates) {
   1125c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1125e:	428b      	cmp	r3, r1
   11260:	d0d4      	beq.n	1120c <periodic_read_process+0x18>
			kbds->keystates = keystates;
   11262:	6261      	str	r1, [r4, #36]	; 0x24
			kbds->notify_cb(kbds, keystates);
   11264:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
   11268:	4790      	blx	r2
   1126a:	e7cf      	b.n	1120c <periodic_read_process+0x18>
   1126c:	0002aa9e 	.word	0x0002aa9e
   11270:	0002aa71 	.word	0x0002aa71
   11274:	0002aabf 	.word	0x0002aabf
   11278:	0002aa86 	.word	0x0002aa86

0001127c <kbds_read_value_handler>:
 * @brief Periodic read workqueue handler.
 *
 * @param work Work instance.
 */
static void kbds_read_value_handler(struct k_work *work)
{
   1127c:	b508      	push	{r3, lr}
   1127e:	f3bf 8f5b 	dmb	ish
   11282:	6c03      	ldr	r3, [r0, #64]	; 0x40
   11284:	f3bf 8f5b 	dmb	ish
   11288:	4601      	mov	r1, r0
	struct bt_kbds_client *kbds;

	kbds = CONTAINER_OF(work, struct bt_kbds_client,
			     periodic_read.read_work);

	if (!atomic_get(&kbds->periodic_read.interval)) {
   1128a:	b1d3      	cbz	r3, 112c2 <kbds_read_value_handler+0x46>
		/* disabled */
		return;
	}

	if (!kbds->conn) {
   1128c:	f850 0c30 	ldr.w	r0, [r0, #-48]
   11290:	b920      	cbnz	r0, 1129c <kbds_read_value_handler+0x20>
	 */
	if (err) {
		printk("Periodic Battery Level characteristic read error: %d",
			err);
	}
}
   11292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("No connection object.\n");
   11296:	480b      	ldr	r0, [pc, #44]	; (112c4 <kbds_read_value_handler+0x48>)
   11298:	f014 babc 	b.w	25814 <printk>
	kbds->periodic_read.params.func = periodic_read_process;
   1129c:	4b0a      	ldr	r3, [pc, #40]	; (112c8 <kbds_read_value_handler+0x4c>)
   1129e:	630b      	str	r3, [r1, #48]	; 0x30
	kbds->periodic_read.params.handle_count  = 1;
   112a0:	2301      	movs	r3, #1
   112a2:	634b      	str	r3, [r1, #52]	; 0x34
	kbds->periodic_read.params.single.handle = kbds->val_handle;
   112a4:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
   112a8:	870b      	strh	r3, [r1, #56]	; 0x38
	kbds->periodic_read.params.single.offset = 0;
   112aa:	2300      	movs	r3, #0
   112ac:	874b      	strh	r3, [r1, #58]	; 0x3a
	err = bt_gatt_read(kbds->conn, &kbds->periodic_read.params);
   112ae:	3130      	adds	r1, #48	; 0x30
   112b0:	f00a fc1a 	bl	1bae8 <bt_gatt_read>
	if (err) {
   112b4:	4601      	mov	r1, r0
   112b6:	b120      	cbz	r0, 112c2 <kbds_read_value_handler+0x46>
}
   112b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Periodic Battery Level characteristic read error: %d",
   112bc:	4803      	ldr	r0, [pc, #12]	; (112cc <kbds_read_value_handler+0x50>)
   112be:	f014 baa9 	b.w	25814 <printk>
}
   112c2:	bd08      	pop	{r3, pc}
   112c4:	0002aadc 	.word	0x0002aadc
   112c8:	000111f5 	.word	0x000111f5
   112cc:	0002aaf3 	.word	0x0002aaf3

000112d0 <bt_kbds_client_init>:
	kbds->notify = false;
}


void bt_kbds_client_init(struct bt_kbds_client *kbds)
{
   112d0:	b510      	push	{r4, lr}
	memset(kbds, 0, sizeof(*kbds));
   112d2:	2100      	movs	r1, #0
{
   112d4:	4604      	mov	r4, r0
	memset(kbds, 0, sizeof(*kbds));
   112d6:	2290      	movs	r2, #144	; 0x90
   112d8:	f015 fc46 	bl	26b68 <memset>
	kbds->keystates = BT_KBDS_VAL_INVALID;
   112dc:	23ff      	movs	r3, #255	; 0xff
   112de:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

	k_work_init_delayable(&kbds->periodic_read.read_work,
   112e2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   112e6:	4902      	ldr	r1, [pc, #8]	; (112f0 <bt_kbds_client_init+0x20>)
			      kbds_read_value_handler);
}
   112e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&kbds->periodic_read.read_work,
   112ec:	f011 be3e 	b.w	22f6c <k_work_init_delayable>
   112f0:	0001127d 	.word	0x0001127d

000112f4 <bt_kbds_handles_assign>:


int bt_kbds_handles_assign(struct bt_gatt_dm *dm,
				 struct bt_kbds_client *kbds)
{
   112f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   112f8:	b08c      	sub	sp, #48	; 0x30
   112fa:	460c      	mov	r4, r1
   112fc:	4606      	mov	r6, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
   112fe:	f015 f89c 	bl	2643a <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
   11302:	f015 f864 	bl	263ce <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;
	const struct bt_gatt_chrc *chrc_val;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_KBDS)) {
   11306:	4b48      	ldr	r3, [pc, #288]	; (11428 <bt_kbds_handles_assign+0x134>)
   11308:	6807      	ldr	r7, [r0, #0]
   1130a:	aa07      	add	r2, sp, #28
   1130c:	f103 0c10 	add.w	ip, r3, #16
   11310:	4690      	mov	r8, r2
   11312:	6818      	ldr	r0, [r3, #0]
   11314:	6859      	ldr	r1, [r3, #4]
   11316:	4615      	mov	r5, r2
   11318:	c503      	stmia	r5!, {r0, r1}
   1131a:	3308      	adds	r3, #8
   1131c:	4563      	cmp	r3, ip
   1131e:	462a      	mov	r2, r5
   11320:	d1f7      	bne.n	11312 <bt_kbds_handles_assign+0x1e>
   11322:	781b      	ldrb	r3, [r3, #0]
   11324:	702b      	strb	r3, [r5, #0]
   11326:	4641      	mov	r1, r8
   11328:	4638      	mov	r0, r7
   1132a:	f015 fca6 	bl	26c7a <bt_uuid_cmp>
   1132e:	4605      	mov	r5, r0
   11330:	b128      	cbz	r0, 1133e <bt_kbds_handles_assign+0x4a>
		return -ENOTSUP;
   11332:	f06f 0585 	mvn.w	r5, #133	; 0x85
	}

	/* Finally - save connection object */
	kbds->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
   11336:	4628      	mov	r0, r5
   11338:	b00c      	add	sp, #48	; 0x30
   1133a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	printk("Getting handles from battery service.\n");
   1133e:	483b      	ldr	r0, [pc, #236]	; (1142c <bt_kbds_handles_assign+0x138>)
   11340:	f014 fa68 	bl	25814 <printk>
	k_work_cancel_delayable(&kbds->periodic_read.read_work);
   11344:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11348:	f011 ff0c 	bl	23164 <k_work_cancel_delayable>
	kbds->keystates = BT_KBDS_VAL_INVALID;
   1134c:	23ff      	movs	r3, #255	; 0xff
   1134e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	kbds->read_cb = NULL;
   11352:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_KBDS_BUTTON);
   11356:	4b36      	ldr	r3, [pc, #216]	; (11430 <bt_kbds_handles_assign+0x13c>)
	kbds->conn = NULL;
   11358:	6025      	str	r5, [r4, #0]
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_KBDS_BUTTON);
   1135a:	aa02      	add	r2, sp, #8
	kbds->val_handle = 0;
   1135c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	kbds->notify = false;
   11360:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_KBDS_BUTTON);
   11364:	f103 0910 	add.w	r9, r3, #16
   11368:	4694      	mov	ip, r2
   1136a:	6818      	ldr	r0, [r3, #0]
   1136c:	6859      	ldr	r1, [r3, #4]
   1136e:	4617      	mov	r7, r2
   11370:	c703      	stmia	r7!, {r0, r1}
   11372:	3308      	adds	r3, #8
   11374:	454b      	cmp	r3, r9
   11376:	463a      	mov	r2, r7
   11378:	d1f7      	bne.n	1136a <bt_kbds_handles_assign+0x76>
   1137a:	781b      	ldrb	r3, [r3, #0]
   1137c:	703b      	strb	r3, [r7, #0]
   1137e:	4661      	mov	r1, ip
   11380:	4630      	mov	r0, r6
   11382:	f002 fc21 	bl	13bc8 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   11386:	4607      	mov	r7, r0
   11388:	b928      	cbnz	r0, 11396 <bt_kbds_handles_assign+0xa2>
		printk("No battery level characteristic found.\n");
   1138a:	482a      	ldr	r0, [pc, #168]	; (11434 <bt_kbds_handles_assign+0x140>)
		printk("No battery level characteristic value found.\n");
   1138c:	f014 fa42 	bl	25814 <printk>
		return -EINVAL;
   11390:	f06f 0515 	mvn.w	r5, #21
   11394:	e7cf      	b.n	11336 <bt_kbds_handles_assign+0x42>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
   11396:	f015 f83a 	bl	2640e <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
   1139a:	4682      	mov	sl, r0
   1139c:	b950      	cbnz	r0, 113b4 <bt_kbds_handles_assign+0xc0>
   1139e:	4926      	ldr	r1, [pc, #152]	; (11438 <bt_kbds_handles_assign+0x144>)
   113a0:	4826      	ldr	r0, [pc, #152]	; (1143c <bt_kbds_handles_assign+0x148>)
   113a2:	f240 1219 	movw	r2, #281	; 0x119
   113a6:	f014 fc26 	bl	25bf6 <assert_print>
   113aa:	4823      	ldr	r0, [pc, #140]	; (11438 <bt_kbds_handles_assign+0x144>)
   113ac:	f240 1119 	movw	r1, #281	; 0x119
   113b0:	f014 fc1a 	bl	25be8 <assert_post_action>
	kbds->properties = chrc_val->properties;
   113b4:	f89a 3006 	ldrb.w	r3, [sl, #6]
   113b8:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
					    BT_UUID_KBDS_BUTTON);
   113bc:	4b1c      	ldr	r3, [pc, #112]	; (11430 <bt_kbds_handles_assign+0x13c>)
   113be:	4642      	mov	r2, r8
   113c0:	6818      	ldr	r0, [r3, #0]
   113c2:	6859      	ldr	r1, [r3, #4]
   113c4:	4694      	mov	ip, r2
   113c6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   113ca:	3308      	adds	r3, #8
   113cc:	454b      	cmp	r3, r9
   113ce:	4662      	mov	r2, ip
   113d0:	d1f6      	bne.n	113c0 <bt_kbds_handles_assign+0xcc>
   113d2:	781b      	ldrb	r3, [r3, #0]
   113d4:	f88c 3000 	strb.w	r3, [ip]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
   113d8:	4642      	mov	r2, r8
   113da:	4639      	mov	r1, r7
   113dc:	4630      	mov	r0, r6
   113de:	f015 f879 	bl	264d4 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   113e2:	b908      	cbnz	r0, 113e8 <bt_kbds_handles_assign+0xf4>
		printk("No battery level characteristic value found.\n");
   113e4:	4816      	ldr	r0, [pc, #88]	; (11440 <bt_kbds_handles_assign+0x14c>)
   113e6:	e7d1      	b.n	1138c <bt_kbds_handles_assign+0x98>
	kbds->val_handle = gatt_desc->handle;
   113e8:	8883      	ldrh	r3, [r0, #4]
   113ea:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
   113ee:	2300      	movs	r3, #0
   113f0:	f88d 3004 	strb.w	r3, [sp, #4]
   113f4:	aa01      	add	r2, sp, #4
   113f6:	f642 1302 	movw	r3, #10498	; 0x2902
   113fa:	4639      	mov	r1, r7
   113fc:	4630      	mov	r0, r6
   113fe:	f8ad 3006 	strh.w	r3, [sp, #6]
   11402:	f015 f867 	bl	264d4 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   11406:	b938      	cbnz	r0, 11418 <bt_kbds_handles_assign+0x124>
		printk("No battery CCC descriptor found. Battery service do not supported notification.\n");
   11408:	480e      	ldr	r0, [pc, #56]	; (11444 <bt_kbds_handles_assign+0x150>)
   1140a:	f014 fa03 	bl	25814 <printk>
	kbds->conn = bt_gatt_dm_conn_get(dm);
   1140e:	4630      	mov	r0, r6
   11410:	f015 f811 	bl	26436 <bt_gatt_dm_conn_get>
   11414:	6020      	str	r0, [r4, #0]
	return 0;
   11416:	e78e      	b.n	11336 <bt_kbds_handles_assign+0x42>
		kbds->notify = true;
   11418:	2301      	movs	r3, #1
   1141a:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
		kbds->ccc_handle = gatt_desc->handle;
   1141e:	8883      	ldrh	r3, [r0, #4]
   11420:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
   11424:	e7f3      	b.n	1140e <bt_kbds_handles_assign+0x11a>
   11426:	bf00      	nop
   11428:	0002a27c 	.word	0x0002a27c
   1142c:	0002ab28 	.word	0x0002ab28
   11430:	0002a28d 	.word	0x0002a28d
   11434:	0002ab4f 	.word	0x0002ab4f
   11438:	0002ab77 	.word	0x0002ab77
   1143c:	0002ab8c 	.word	0x0002ab8c
   11440:	0002aba4 	.word	0x0002aba4
   11444:	0002abd2 	.word	0x0002abd2

00011448 <bt_kbds_subscribe_keystates>:

int bt_kbds_subscribe_keystates(struct bt_kbds_client *kbds,
				   bt_kbds_notify_cb func)
{
   11448:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!kbds || !func) {
   1144a:	4604      	mov	r4, r0
   1144c:	2800      	cmp	r0, #0
   1144e:	d035      	beq.n	114bc <bt_kbds_subscribe_keystates+0x74>
   11450:	2900      	cmp	r1, #0
   11452:	d033      	beq.n	114bc <bt_kbds_subscribe_keystates+0x74>
		return -EINVAL;
	}
	if (!kbds->conn) {
   11454:	6803      	ldr	r3, [r0, #0]
   11456:	b38b      	cbz	r3, 114bc <bt_kbds_subscribe_keystates+0x74>
		return -EINVAL;
	}
	if (!(kbds->properties & BT_GATT_CHRC_NOTIFY)) {
   11458:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
   1145c:	06db      	lsls	r3, r3, #27
   1145e:	d530      	bpl.n	114c2 <bt_kbds_subscribe_keystates+0x7a>
		return -ENOTSUP;
	}
	if (kbds->notify_cb) {
   11460:	6f86      	ldr	r6, [r0, #120]	; 0x78
   11462:	bb8e      	cbnz	r6, 114c8 <bt_kbds_subscribe_keystates+0x80>
		return -EALREADY;
	}

	kbds->notify_cb = func;

	kbds->notify_params.notify = notify_process;
   11464:	4b1a      	ldr	r3, [pc, #104]	; (114d0 <bt_kbds_subscribe_keystates+0x88>)
   11466:	6043      	str	r3, [r0, #4]
	kbds->notify_params.value = BT_GATT_CCC_NOTIFY;
   11468:	2301      	movs	r3, #1
   1146a:	8283      	strh	r3, [r0, #20]
	kbds->notify_params.value_handle = kbds->val_handle;
   1146c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   11470:	6103      	str	r3, [r0, #16]
	kbds->notify_cb = func;
   11472:	6781      	str	r1, [r0, #120]	; 0x78
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11474:	f100 0318 	add.w	r3, r0, #24
   11478:	f3bf 8f5b 	dmb	ish
   1147c:	e853 2f00 	ldrex	r2, [r3]
   11480:	f042 0201 	orr.w	r2, r2, #1
   11484:	e843 2100 	strex	r1, r2, [r3]
   11488:	2900      	cmp	r1, #0
   1148a:	d1f7      	bne.n	1147c <bt_kbds_subscribe_keystates+0x34>
   1148c:	f3bf 8f5b 	dmb	ish
	kbds->notify_params.ccc_handle = kbds->ccc_handle;
	atomic_set_bit(kbds->notify_params.flags,
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	printk("Subscribe: val: %u, ccc: %u \n",
   11490:	4810      	ldr	r0, [pc, #64]	; (114d4 <bt_kbds_subscribe_keystates+0x8c>)
   11492:	8a62      	ldrh	r2, [r4, #18]
   11494:	8a21      	ldrh	r1, [r4, #16]
   11496:	f014 f9bd 	bl	25814 <printk>
		kbds->notify_params.value_handle,
		kbds->notify_params.ccc_handle);
	err = bt_gatt_subscribe(kbds->conn, &kbds->notify_params);
   1149a:	6820      	ldr	r0, [r4, #0]
   1149c:	1d21      	adds	r1, r4, #4
   1149e:	f00a fc05 	bl	1bcac <bt_gatt_subscribe>
	if (err) {
   114a2:	4605      	mov	r5, r0
   114a4:	b130      	cbz	r0, 114b4 <bt_kbds_subscribe_keystates+0x6c>
		printk("Report notification subscribe error: %d.\n", err);
   114a6:	4601      	mov	r1, r0
   114a8:	480b      	ldr	r0, [pc, #44]	; (114d8 <bt_kbds_subscribe_keystates+0x90>)
   114aa:	f014 f9b3 	bl	25814 <printk>
		kbds->notify_cb = NULL;
   114ae:	67a6      	str	r6, [r4, #120]	; 0x78
		return err;
	}
	printk("Report subscribed.\n");
	return err;
}
   114b0:	4628      	mov	r0, r5
   114b2:	bd70      	pop	{r4, r5, r6, pc}
	printk("Report subscribed.\n");
   114b4:	4809      	ldr	r0, [pc, #36]	; (114dc <bt_kbds_subscribe_keystates+0x94>)
   114b6:	f014 f9ad 	bl	25814 <printk>
	return err;
   114ba:	e7f9      	b.n	114b0 <bt_kbds_subscribe_keystates+0x68>
		return -EINVAL;
   114bc:	f06f 0515 	mvn.w	r5, #21
   114c0:	e7f6      	b.n	114b0 <bt_kbds_subscribe_keystates+0x68>
		return -ENOTSUP;
   114c2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   114c6:	e7f3      	b.n	114b0 <bt_kbds_subscribe_keystates+0x68>
		return -EALREADY;
   114c8:	f06f 0577 	mvn.w	r5, #119	; 0x77
   114cc:	e7f0      	b.n	114b0 <bt_kbds_subscribe_keystates+0x68>
   114ce:	bf00      	nop
   114d0:	00025665 	.word	0x00025665
   114d4:	0002ac23 	.word	0x0002ac23
   114d8:	0002ac41 	.word	0x0002ac41
   114dc:	0002ac6b 	.word	0x0002ac6b

000114e0 <discovery_error_found_cb>:

static void discovery_error_found_cb(struct bt_conn *conn,
				     int err,
				     void *context)
{
	printk("The discovery procedure failed with %d\n", err);
   114e0:	4801      	ldr	r0, [pc, #4]	; (114e8 <discovery_error_found_cb+0x8>)
   114e2:	f014 b997 	b.w	25814 <printk>
   114e6:	bf00      	nop
   114e8:	0002ac7f 	.word	0x0002ac7f

000114ec <discovery_service_not_found_cb>:
	printk("The service could not be found during the discovery\n");
   114ec:	4801      	ldr	r0, [pc, #4]	; (114f4 <discovery_service_not_found_cb+0x8>)
   114ee:	f014 b991 	b.w	25814 <printk>
   114f2:	bf00      	nop
   114f4:	0002aca7 	.word	0x0002aca7

000114f8 <scan_connecting_error>:
	printk("Connecting failed\n");
   114f8:	4801      	ldr	r0, [pc, #4]	; (11500 <scan_connecting_error+0x8>)
   114fa:	f014 b98b 	b.w	25814 <printk>
   114fe:	bf00      	nop
   11500:	0002acdc 	.word	0x0002acdc

00011504 <discovery_completed_cb>:
{
   11504:	b510      	push	{r4, lr}
   11506:	4604      	mov	r4, r0
	printk("The discovery procedure succeeded\n");
   11508:	4818      	ldr	r0, [pc, #96]	; (1156c <discovery_completed_cb+0x68>)
   1150a:	f014 f983 	bl	25814 <printk>
	bt_gatt_dm_data_print(dm);
   1150e:	4620      	mov	r0, r4
   11510:	f002 fbec 	bl	13cec <bt_gatt_dm_data_print>
	err = bt_kbds_handles_assign(dm, &kbds);
   11514:	4916      	ldr	r1, [pc, #88]	; (11570 <discovery_completed_cb+0x6c>)
   11516:	4620      	mov	r0, r4
   11518:	f7ff feec 	bl	112f4 <bt_kbds_handles_assign>
	if (err) {
   1151c:	4601      	mov	r1, r0
   1151e:	b110      	cbz	r0, 11526 <discovery_completed_cb+0x22>
		printk("Could not init KBDS client object, error: %d\n", err);
   11520:	4814      	ldr	r0, [pc, #80]	; (11574 <discovery_completed_cb+0x70>)
   11522:	f014 f977 	bl	25814 <printk>
 * @retval true If notifications are supported.
 *              Otherwise, @c false is returned.
 */
static inline bool bt_kbds_notify_supported(struct bt_kbds_client *kbds)
{
	return kbds->notify;
   11526:	4812      	ldr	r0, [pc, #72]	; (11570 <discovery_completed_cb+0x6c>)
	if (bt_kbds_notify_supported(&kbds)) {
   11528:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
   1152c:	b18b      	cbz	r3, 11552 <discovery_completed_cb+0x4e>
		err = bt_kbds_subscribe_keystates(&kbds,
   1152e:	4912      	ldr	r1, [pc, #72]	; (11578 <discovery_completed_cb+0x74>)
   11530:	f7ff ff8a 	bl	11448 <bt_kbds_subscribe_keystates>
		if (err) {
   11534:	4601      	mov	r1, r0
   11536:	b110      	cbz	r0, 1153e <discovery_completed_cb+0x3a>
			printk("Cannot subscribe to KBDS value notification "
   11538:	4810      	ldr	r0, [pc, #64]	; (1157c <discovery_completed_cb+0x78>)
   1153a:	f014 f96b 	bl	25814 <printk>
	err = bt_gatt_dm_data_release(dm);
   1153e:	4620      	mov	r0, r4
   11540:	f014 ffda 	bl	264f8 <bt_gatt_dm_data_release>
	if (err) {
   11544:	4601      	mov	r1, r0
   11546:	b178      	cbz	r0, 11568 <discovery_completed_cb+0x64>
}
   11548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not release the discovery data, error "
   1154c:	480c      	ldr	r0, [pc, #48]	; (11580 <discovery_completed_cb+0x7c>)
   1154e:	f014 b961 	b.w	25814 <printk>
		err = bt_kbds_start_per_read_keystates(
   11552:	4a09      	ldr	r2, [pc, #36]	; (11578 <discovery_completed_cb+0x74>)
   11554:	f242 7110 	movw	r1, #10000	; 0x2710
   11558:	f014 f891 	bl	2567e <bt_kbds_start_per_read_keystates>
		if (err) {
   1155c:	2800      	cmp	r0, #0
   1155e:	d0ee      	beq.n	1153e <discovery_completed_cb+0x3a>
			printk("Could not start periodic read of KBDS value\n");
   11560:	4808      	ldr	r0, [pc, #32]	; (11584 <discovery_completed_cb+0x80>)
   11562:	f014 f957 	bl	25814 <printk>
   11566:	e7ea      	b.n	1153e <discovery_completed_cb+0x3a>
}
   11568:	bd10      	pop	{r4, pc}
   1156a:	bf00      	nop
   1156c:	0002acef 	.word	0x0002acef
   11570:	200017e8 	.word	0x200017e8
   11574:	0002ad12 	.word	0x0002ad12
   11578:	00011749 	.word	0x00011749
   1157c:	0002ad40 	.word	0x0002ad40
   11580:	0002ada4 	.word	0x0002ada4
   11584:	0002ad77 	.word	0x0002ad77

00011588 <scan_connecting>:
{
   11588:	b508      	push	{r3, lr}
	default_conn = bt_conn_ref(conn);
   1158a:	4608      	mov	r0, r1
   1158c:	f015 fd40 	bl	27010 <bt_conn_ref>
   11590:	4b01      	ldr	r3, [pc, #4]	; (11598 <scan_connecting+0x10>)
   11592:	6018      	str	r0, [r3, #0]
}
   11594:	bd08      	pop	{r3, pc}
   11596:	bf00      	nop
   11598:	200020b4 	.word	0x200020b4

0001159c <gatt_discover>:
	.service_not_found = discovery_service_not_found_cb,
	.error_found = discovery_error_found_cb,
};

static void gatt_discover(struct bt_conn *conn)
{
   1159c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (conn != default_conn) {
   1159e:	4b11      	ldr	r3, [pc, #68]	; (115e4 <gatt_discover+0x48>)
   115a0:	681b      	ldr	r3, [r3, #0]
   115a2:	4283      	cmp	r3, r0
{
   115a4:	b087      	sub	sp, #28
   115a6:	4604      	mov	r4, r0
	if (conn != default_conn) {
   115a8:	d119      	bne.n	115de <gatt_discover+0x42>
		return;
	}

	err = bt_gatt_dm_start(conn, BT_UUID_KBDS, &discovery_cb, NULL);
   115aa:	4b0f      	ldr	r3, [pc, #60]	; (115e8 <gatt_discover+0x4c>)
   115ac:	aa01      	add	r2, sp, #4
   115ae:	f103 0710 	add.w	r7, r3, #16
   115b2:	4616      	mov	r6, r2
   115b4:	6818      	ldr	r0, [r3, #0]
   115b6:	6859      	ldr	r1, [r3, #4]
   115b8:	4615      	mov	r5, r2
   115ba:	c503      	stmia	r5!, {r0, r1}
   115bc:	3308      	adds	r3, #8
   115be:	42bb      	cmp	r3, r7
   115c0:	462a      	mov	r2, r5
   115c2:	d1f7      	bne.n	115b4 <gatt_discover+0x18>
   115c4:	781b      	ldrb	r3, [r3, #0]
   115c6:	702b      	strb	r3, [r5, #0]
   115c8:	4631      	mov	r1, r6
   115ca:	4a08      	ldr	r2, [pc, #32]	; (115ec <gatt_discover+0x50>)
   115cc:	2300      	movs	r3, #0
   115ce:	4620      	mov	r0, r4
   115d0:	f002 fb26 	bl	13c20 <bt_gatt_dm_start>
	if (err) {
   115d4:	4601      	mov	r1, r0
   115d6:	b110      	cbz	r0, 115de <gatt_discover+0x42>
		printk("Could not start the discovery procedure, error "
   115d8:	4805      	ldr	r0, [pc, #20]	; (115f0 <gatt_discover+0x54>)
   115da:	f014 f91b 	bl	25814 <printk>
		       "code: %d\n", err);
	}
}
   115de:	b007      	add	sp, #28
   115e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115e2:	bf00      	nop
   115e4:	200020b4 	.word	0x200020b4
   115e8:	0002a1c0 	.word	0x0002a1c0
   115ec:	20000538 	.word	0x20000538
   115f0:	0002adda 	.word	0x0002adda

000115f4 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   115f4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   115f6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   115f8:	b08a      	sub	sp, #40	; 0x28
   115fa:	4604      	mov	r4, r0
   115fc:	460e      	mov	r6, r1
   115fe:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   11600:	2b03      	cmp	r3, #3
   11602:	d820      	bhi.n	11646 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   11604:	e8df f003 	tbb	[pc, r3]
   11608:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   1160c:	4911      	ldr	r1, [pc, #68]	; (11654 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   1160e:	4628      	mov	r0, r5
   11610:	f015 fa57 	bl	26ac2 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11614:	7863      	ldrb	r3, [r4, #1]
   11616:	9304      	str	r3, [sp, #16]
   11618:	78a3      	ldrb	r3, [r4, #2]
   1161a:	9303      	str	r3, [sp, #12]
   1161c:	78e3      	ldrb	r3, [r4, #3]
   1161e:	9302      	str	r3, [sp, #8]
   11620:	7923      	ldrb	r3, [r4, #4]
   11622:	9301      	str	r3, [sp, #4]
   11624:	7963      	ldrb	r3, [r4, #5]
   11626:	9300      	str	r3, [sp, #0]
   11628:	4a0b      	ldr	r2, [pc, #44]	; (11658 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   1162a:	79a3      	ldrb	r3, [r4, #6]
   1162c:	9505      	str	r5, [sp, #20]
   1162e:	211e      	movs	r1, #30
   11630:	4630      	mov	r0, r6
   11632:	f014 f8fc 	bl	2582e <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   11636:	b00a      	add	sp, #40	; 0x28
   11638:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   1163a:	4908      	ldr	r1, [pc, #32]	; (1165c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   1163c:	e7e7      	b.n	1160e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   1163e:	4908      	ldr	r1, [pc, #32]	; (11660 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   11640:	e7e5      	b.n	1160e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   11642:	4908      	ldr	r1, [pc, #32]	; (11664 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   11644:	e7e3      	b.n	1160e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11646:	4a08      	ldr	r2, [pc, #32]	; (11668 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   11648:	210a      	movs	r1, #10
   1164a:	4628      	mov	r0, r5
   1164c:	f014 f8ef 	bl	2582e <snprintk>
		break;
   11650:	e7e0      	b.n	11614 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   11652:	bf00      	nop
   11654:	0002ae13 	.word	0x0002ae13
   11658:	0002ae3c 	.word	0x0002ae3c
   1165c:	0002ae1a 	.word	0x0002ae1a
   11660:	0002ae21 	.word	0x0002ae21
   11664:	0002ae2b 	.word	0x0002ae2b
   11668:	0002ae35 	.word	0x0002ae35

0001166c <pairing_failed>:
	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
}


static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
   1166c:	b510      	push	{r4, lr}
   1166e:	b088      	sub	sp, #32
   11670:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11672:	f015 fda0 	bl	271b6 <bt_conn_get_dst>
   11676:	4669      	mov	r1, sp
   11678:	f7ff ffbc 	bl	115f4 <bt_addr_le_to_str.constprop.0.isra.0>

	printk("Pairing failed conn: %s, reason %d\n", addr, reason);
   1167c:	4803      	ldr	r0, [pc, #12]	; (1168c <pairing_failed+0x20>)
   1167e:	4622      	mov	r2, r4
   11680:	4669      	mov	r1, sp
   11682:	f014 f8c7 	bl	25814 <printk>
}
   11686:	b008      	add	sp, #32
   11688:	bd10      	pop	{r4, pc}
   1168a:	bf00      	nop
   1168c:	0002ae5f 	.word	0x0002ae5f

00011690 <pairing_complete>:
{
   11690:	b510      	push	{r4, lr}
   11692:	b088      	sub	sp, #32
   11694:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11696:	f015 fd8e 	bl	271b6 <bt_conn_get_dst>
   1169a:	4669      	mov	r1, sp
   1169c:	f7ff ffaa 	bl	115f4 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
   116a0:	4803      	ldr	r0, [pc, #12]	; (116b0 <pairing_complete+0x20>)
   116a2:	4622      	mov	r2, r4
   116a4:	4669      	mov	r1, sp
   116a6:	f014 f8b5 	bl	25814 <printk>
}
   116aa:	b008      	add	sp, #32
   116ac:	bd10      	pop	{r4, pc}
   116ae:	bf00      	nop
   116b0:	0002ae83 	.word	0x0002ae83

000116b4 <auth_cancel>:
{
   116b4:	b500      	push	{lr}
   116b6:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   116b8:	f015 fd7d 	bl	271b6 <bt_conn_get_dst>
   116bc:	4669      	mov	r1, sp
   116be:	f7ff ff99 	bl	115f4 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing cancelled: %s\n", addr);
   116c2:	4803      	ldr	r0, [pc, #12]	; (116d0 <auth_cancel+0x1c>)
   116c4:	4669      	mov	r1, sp
   116c6:	f014 f8a5 	bl	25814 <printk>
}
   116ca:	b009      	add	sp, #36	; 0x24
   116cc:	f85d fb04 	ldr.w	pc, [sp], #4
   116d0:	0002aea6 	.word	0x0002aea6

000116d4 <scan_filter_match>:
{
   116d4:	b510      	push	{r4, lr}
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   116d6:	6803      	ldr	r3, [r0, #0]
{
   116d8:	b088      	sub	sp, #32
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   116da:	6818      	ldr	r0, [r3, #0]
   116dc:	4669      	mov	r1, sp
{
   116de:	4614      	mov	r4, r2
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   116e0:	f7ff ff88 	bl	115f4 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Filters matched. Address: %s connectable: %s\n",
   116e4:	4b05      	ldr	r3, [pc, #20]	; (116fc <scan_filter_match+0x28>)
   116e6:	4a06      	ldr	r2, [pc, #24]	; (11700 <scan_filter_match+0x2c>)
   116e8:	4806      	ldr	r0, [pc, #24]	; (11704 <scan_filter_match+0x30>)
   116ea:	2c00      	cmp	r4, #0
   116ec:	bf08      	it	eq
   116ee:	461a      	moveq	r2, r3
   116f0:	4669      	mov	r1, sp
   116f2:	f014 f88f 	bl	25814 <printk>
}
   116f6:	b008      	add	sp, #32
   116f8:	bd10      	pop	{r4, pc}
   116fa:	bf00      	nop
   116fc:	0002aec1 	.word	0x0002aec1
   11700:	0002aebd 	.word	0x0002aebd
   11704:	0002aec4 	.word	0x0002aec4

00011708 <security_changed>:
{
   11708:	b570      	push	{r4, r5, r6, lr}
   1170a:	b088      	sub	sp, #32
   1170c:	460c      	mov	r4, r1
   1170e:	4615      	mov	r5, r2
   11710:	4606      	mov	r6, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11712:	f015 fd50 	bl	271b6 <bt_conn_get_dst>
   11716:	4669      	mov	r1, sp
   11718:	f7ff ff6c 	bl	115f4 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
   1171c:	b94d      	cbnz	r5, 11732 <security_changed+0x2a>
		printk("Security changed: %s level %u\n", addr, level);
   1171e:	4808      	ldr	r0, [pc, #32]	; (11740 <security_changed+0x38>)
   11720:	4622      	mov	r2, r4
   11722:	4669      	mov	r1, sp
   11724:	f014 f876 	bl	25814 <printk>
	gatt_discover(conn);
   11728:	4630      	mov	r0, r6
   1172a:	f7ff ff37 	bl	1159c <gatt_discover>
}
   1172e:	b008      	add	sp, #32
   11730:	bd70      	pop	{r4, r5, r6, pc}
		printk("Security failed: %s level %u err %d\n", addr, level,
   11732:	4804      	ldr	r0, [pc, #16]	; (11744 <security_changed+0x3c>)
   11734:	462b      	mov	r3, r5
   11736:	4622      	mov	r2, r4
   11738:	4669      	mov	r1, sp
   1173a:	f014 f86b 	bl	25814 <printk>
   1173e:	e7f3      	b.n	11728 <security_changed+0x20>
   11740:	0002aef2 	.word	0x0002aef2
   11744:	0002af11 	.word	0x0002af11

00011748 <notify_keystates_cb>:
{
   11748:	b510      	push	{r4, lr}
   1174a:	b088      	sub	sp, #32
   1174c:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(bt_kbds_conn(kbds)),
   1174e:	f013 ff94 	bl	2567a <bt_kbds_conn>
   11752:	f015 fd30 	bl	271b6 <bt_conn_get_dst>
   11756:	4669      	mov	r1, sp
   11758:	f7ff ff4c 	bl	115f4 <bt_addr_le_to_str.constprop.0.isra.0>
	if (keystates == BT_KBDS_VAL_INVALID) {
   1175c:	2cff      	cmp	r4, #255	; 0xff
   1175e:	d105      	bne.n	1176c <notify_keystates_cb+0x24>
		printk("[%s] Battery notification aborted\n", addr);
   11760:	4805      	ldr	r0, [pc, #20]	; (11778 <notify_keystates_cb+0x30>)
   11762:	4669      	mov	r1, sp
   11764:	f014 f856 	bl	25814 <printk>
}
   11768:	b008      	add	sp, #32
   1176a:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %x \n",
   1176c:	4803      	ldr	r0, [pc, #12]	; (1177c <notify_keystates_cb+0x34>)
   1176e:	4622      	mov	r2, r4
   11770:	4669      	mov	r1, sp
   11772:	f014 f84f 	bl	25814 <printk>
}
   11776:	e7f7      	b.n	11768 <notify_keystates_cb+0x20>
   11778:	0002af36 	.word	0x0002af36
   1177c:	0002af59 	.word	0x0002af59

00011780 <disconnected>:
{
   11780:	b530      	push	{r4, r5, lr}
   11782:	b089      	sub	sp, #36	; 0x24
   11784:	460d      	mov	r5, r1
   11786:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11788:	f015 fd15 	bl	271b6 <bt_conn_get_dst>
   1178c:	4669      	mov	r1, sp
   1178e:	f7ff ff31 	bl	115f4 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Disconnected: %s (reason %u)\n", addr, reason);
   11792:	462a      	mov	r2, r5
	if (default_conn != conn) {
   11794:	4d0a      	ldr	r5, [pc, #40]	; (117c0 <disconnected+0x40>)
	printk("Disconnected: %s (reason %u)\n", addr, reason);
   11796:	480b      	ldr	r0, [pc, #44]	; (117c4 <disconnected+0x44>)
   11798:	4669      	mov	r1, sp
   1179a:	f014 f83b 	bl	25814 <printk>
	if (default_conn != conn) {
   1179e:	6828      	ldr	r0, [r5, #0]
   117a0:	42a0      	cmp	r0, r4
   117a2:	d10b      	bne.n	117bc <disconnected+0x3c>
	bt_conn_unref(default_conn);
   117a4:	f006 faca 	bl	17d3c <bt_conn_unref>
	default_conn = NULL;
   117a8:	2300      	movs	r3, #0
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   117aa:	2001      	movs	r0, #1
	default_conn = NULL;
   117ac:	602b      	str	r3, [r5, #0]
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   117ae:	f002 fd17 	bl	141e0 <bt_scan_start>
	if (err) {
   117b2:	4601      	mov	r1, r0
   117b4:	b110      	cbz	r0, 117bc <disconnected+0x3c>
		printk("Scanning failed to start (err %d)\n", err);
   117b6:	4804      	ldr	r0, [pc, #16]	; (117c8 <disconnected+0x48>)
   117b8:	f014 f82c 	bl	25814 <printk>
}
   117bc:	b009      	add	sp, #36	; 0x24
   117be:	bd30      	pop	{r4, r5, pc}
   117c0:	200020b4 	.word	0x200020b4
   117c4:	0002af79 	.word	0x0002af79
   117c8:	0002af97 	.word	0x0002af97

000117cc <connected>:
{
   117cc:	b530      	push	{r4, r5, lr}
   117ce:	b089      	sub	sp, #36	; 0x24
   117d0:	460d      	mov	r5, r1
   117d2:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   117d4:	f015 fcef 	bl	271b6 <bt_conn_get_dst>
   117d8:	4669      	mov	r1, sp
   117da:	f7ff ff0b 	bl	115f4 <bt_addr_le_to_str.constprop.0.isra.0>
	if (conn_err) {
   117de:	b1b5      	cbz	r5, 1180e <connected+0x42>
		printk("Failed to connect to %s (%u)\n", addr, conn_err);
   117e0:	462a      	mov	r2, r5
		if (conn == default_conn) {
   117e2:	4d15      	ldr	r5, [pc, #84]	; (11838 <connected+0x6c>)
		printk("Failed to connect to %s (%u)\n", addr, conn_err);
   117e4:	4815      	ldr	r0, [pc, #84]	; (1183c <connected+0x70>)
   117e6:	4669      	mov	r1, sp
   117e8:	f014 f814 	bl	25814 <printk>
		if (conn == default_conn) {
   117ec:	6828      	ldr	r0, [r5, #0]
   117ee:	42a0      	cmp	r0, r4
   117f0:	d10b      	bne.n	1180a <connected+0x3e>
			bt_conn_unref(default_conn);
   117f2:	f006 faa3 	bl	17d3c <bt_conn_unref>
			default_conn = NULL;
   117f6:	2300      	movs	r3, #0
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   117f8:	2001      	movs	r0, #1
			default_conn = NULL;
   117fa:	602b      	str	r3, [r5, #0]
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   117fc:	f002 fcf0 	bl	141e0 <bt_scan_start>
			if (err) {
   11800:	4601      	mov	r1, r0
   11802:	b110      	cbz	r0, 1180a <connected+0x3e>
				printk("Scanning failed to start (err %d)\n",
   11804:	480e      	ldr	r0, [pc, #56]	; (11840 <connected+0x74>)
   11806:	f014 f805 	bl	25814 <printk>
}
   1180a:	b009      	add	sp, #36	; 0x24
   1180c:	bd30      	pop	{r4, r5, pc}
	printk("Connected: %s\n", addr);
   1180e:	480d      	ldr	r0, [pc, #52]	; (11844 <connected+0x78>)
   11810:	4669      	mov	r1, sp
   11812:	f013 ffff 	bl	25814 <printk>
	err = bt_conn_set_security(conn, BT_SECURITY_L1);
   11816:	2101      	movs	r1, #1
   11818:	4620      	mov	r0, r4
   1181a:	f015 fc7a 	bl	27112 <bt_conn_set_security>
	if (err) {
   1181e:	4601      	mov	r1, r0
   11820:	b128      	cbz	r0, 1182e <connected+0x62>
		printk("Failed to set security: %d\n", err);
   11822:	4809      	ldr	r0, [pc, #36]	; (11848 <connected+0x7c>)
   11824:	f013 fff6 	bl	25814 <printk>
		gatt_discover(conn);
   11828:	4620      	mov	r0, r4
   1182a:	f7ff feb7 	bl	1159c <gatt_discover>
	gatt_discover(conn);
   1182e:	4620      	mov	r0, r4
   11830:	f7ff feb4 	bl	1159c <gatt_discover>
   11834:	e7e9      	b.n	1180a <connected+0x3e>
   11836:	bf00      	nop
   11838:	200020b4 	.word	0x200020b4
   1183c:	0002afba 	.word	0x0002afba
   11840:	0002af97 	.word	0x0002af97
   11844:	0002afd8 	.word	0x0002afd8
   11848:	0002afe7 	.word	0x0002afe7

0001184c <scan_filter_no_match>:
{
   1184c:	b570      	push	{r4, r5, r6, lr}
	if (device_info->recv_info->adv_type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   1184e:	6803      	ldr	r3, [r0, #0]
   11850:	79da      	ldrb	r2, [r3, #7]
   11852:	2a01      	cmp	r2, #1
{
   11854:	b08e      	sub	sp, #56	; 0x38
   11856:	4605      	mov	r5, r0
	if (device_info->recv_info->adv_type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   11858:	d11f      	bne.n	1189a <scan_filter_no_match+0x4e>
		bt_addr_le_to_str(device_info->recv_info->addr, addr,
   1185a:	6818      	ldr	r0, [r3, #0]
   1185c:	a906      	add	r1, sp, #24
   1185e:	f7ff fec9 	bl	115f4 <bt_addr_le_to_str.constprop.0.isra.0>
		printk("Direct advertising received from %s\n", addr);
   11862:	a906      	add	r1, sp, #24
   11864:	480e      	ldr	r0, [pc, #56]	; (118a0 <scan_filter_no_match+0x54>)
   11866:	f013 ffd5 	bl	25814 <printk>
		bt_scan_stop();
   1186a:	f014 fe76 	bl	2655a <bt_scan_stop>
		err = bt_conn_le_create(device_info->recv_info->addr,
   1186e:	682b      	ldr	r3, [r5, #0]
   11870:	681e      	ldr	r6, [r3, #0]
					BT_CONN_LE_CREATE_CONN,
   11872:	4b0c      	ldr	r3, [pc, #48]	; (118a4 <scan_filter_no_match+0x58>)
   11874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11876:	ac02      	add	r4, sp, #8
   11878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		err = bt_conn_le_create(device_info->recv_info->addr,
   1187c:	686a      	ldr	r2, [r5, #4]
   1187e:	ab01      	add	r3, sp, #4
   11880:	4621      	mov	r1, r4
   11882:	4630      	mov	r0, r6
   11884:	f006 fd6a 	bl	1835c <bt_conn_le_create>
		if (!err) {
   11888:	b938      	cbnz	r0, 1189a <scan_filter_no_match+0x4e>
			default_conn = bt_conn_ref(conn);
   1188a:	9801      	ldr	r0, [sp, #4]
   1188c:	f015 fbc0 	bl	27010 <bt_conn_ref>
   11890:	4b05      	ldr	r3, [pc, #20]	; (118a8 <scan_filter_no_match+0x5c>)
   11892:	6018      	str	r0, [r3, #0]
			bt_conn_unref(conn);
   11894:	9801      	ldr	r0, [sp, #4]
   11896:	f006 fa51 	bl	17d3c <bt_conn_unref>
}
   1189a:	b00e      	add	sp, #56	; 0x38
   1189c:	bd70      	pop	{r4, r5, r6, pc}
   1189e:	bf00      	nop
   118a0:	0002b003 	.word	0x0002b003
   118a4:	0002a1d4 	.word	0x0002a1d4
   118a8:	200020b4 	.word	0x200020b4

000118ac <main>:
	.pairing_failed = pairing_failed
};


void main(void)
{
   118ac:	b570      	push	{r4, r5, r6, lr}
	int err;

	printk("Starting Bluetooth Central KBDS example\n");
   118ae:	4831      	ldr	r0, [pc, #196]	; (11974 <main+0xc8>)
{
   118b0:	b08a      	sub	sp, #40	; 0x28
	printk("Starting Bluetooth Central KBDS example\n");
   118b2:	f013 ffaf 	bl	25814 <printk>

	bt_kbds_client_init(&kbds);
   118b6:	4830      	ldr	r0, [pc, #192]	; (11978 <main+0xcc>)
   118b8:	f7ff fd0a 	bl	112d0 <bt_kbds_client_init>

	err = bt_enable(NULL);
   118bc:	2000      	movs	r0, #0
   118be:	f004 fec9 	bl	16654 <bt_enable>
	if (err) {
   118c2:	4604      	mov	r4, r0
   118c4:	b130      	cbz	r0, 118d4 <main+0x28>
		printk("Bluetooth init failed (err %d)\n", err);
   118c6:	4601      	mov	r1, r0
   118c8:	482c      	ldr	r0, [pc, #176]	; (1197c <main+0xd0>)
		printk("Scanning failed to start (err %d)\n", err);
		return;
	}

	printk("Scanning successfully started\n");
}
   118ca:	b00a      	add	sp, #40	; 0x28
   118cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Scanning failed to start (err %d)\n", err);
   118d0:	f013 bfa0 	b.w	25814 <printk>
	printk("Bluetooth initialized\n");
   118d4:	482a      	ldr	r0, [pc, #168]	; (11980 <main+0xd4>)
   118d6:	f013 ff9d 	bl	25814 <printk>
		settings_load();
   118da:	f014 fc10 	bl	260fe <settings_load>
	struct bt_scan_init_param scan_init = {
   118de:	9402      	str	r4, [sp, #8]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT
   118e0:	4c28      	ldr	r4, [pc, #160]	; (11984 <main+0xd8>)
	struct bt_scan_init_param scan_init = {
   118e2:	f8cd d010 	str.w	sp, [sp, #16]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT
   118e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   118e8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	struct bt_scan_init_param scan_init = {
   118ea:	2301      	movs	r3, #1
   118ec:	f88d 300c 	strb.w	r3, [sp, #12]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT
   118f0:	466b      	mov	r3, sp
   118f2:	c303      	stmia	r3!, {r0, r1}
	bt_scan_init(&scan_init);
   118f4:	4618      	mov	r0, r3
   118f6:	f002 fc41 	bl	1417c <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
   118fa:	4823      	ldr	r0, [pc, #140]	; (11988 <main+0xdc>)
   118fc:	f002 fafc 	bl	13ef8 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_KBDS);
   11900:	aa05      	add	r2, sp, #20
   11902:	4623      	mov	r3, r4
   11904:	f104 0610 	add.w	r6, r4, #16
   11908:	4615      	mov	r5, r2
   1190a:	6818      	ldr	r0, [r3, #0]
   1190c:	6859      	ldr	r1, [r3, #4]
   1190e:	4614      	mov	r4, r2
   11910:	c403      	stmia	r4!, {r0, r1}
   11912:	3308      	adds	r3, #8
   11914:	42b3      	cmp	r3, r6
   11916:	4622      	mov	r2, r4
   11918:	d1f7      	bne.n	1190a <main+0x5e>
   1191a:	781b      	ldrb	r3, [r3, #0]
   1191c:	7023      	strb	r3, [r4, #0]
   1191e:	4629      	mov	r1, r5
   11920:	2003      	movs	r0, #3
   11922:	f002 faf9 	bl	13f18 <bt_scan_filter_add>
	if (err) {
   11926:	4601      	mov	r1, r0
   11928:	b160      	cbz	r0, 11944 <main+0x98>
		printk("Scanning filters cannot be set (err %d)\n", err);
   1192a:	4818      	ldr	r0, [pc, #96]	; (1198c <main+0xe0>)
		printk("Filters cannot be turned on (err %d)\n", err);
   1192c:	f013 ff72 	bl	25814 <printk>
	err = bt_conn_auth_cb_register(&conn_auth_callbacks);
   11930:	4817      	ldr	r0, [pc, #92]	; (11990 <main+0xe4>)
   11932:	f006 ff83 	bl	1883c <bt_conn_auth_cb_register>
	if (err) {
   11936:	b168      	cbz	r0, 11954 <main+0xa8>
		printk("Failed to register authorization callbacks.\n");
   11938:	4816      	ldr	r0, [pc, #88]	; (11994 <main+0xe8>)
}
   1193a:	b00a      	add	sp, #40	; 0x28
   1193c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("Scanning successfully started\n");
   11940:	f013 bf68 	b.w	25814 <printk>
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
   11944:	2004      	movs	r0, #4
   11946:	f002 fb4b 	bl	13fe0 <bt_scan_filter_enable>
	if (err) {
   1194a:	4601      	mov	r1, r0
   1194c:	2800      	cmp	r0, #0
   1194e:	d0ef      	beq.n	11930 <main+0x84>
		printk("Filters cannot be turned on (err %d)\n", err);
   11950:	4811      	ldr	r0, [pc, #68]	; (11998 <main+0xec>)
   11952:	e7eb      	b.n	1192c <main+0x80>
	err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
   11954:	4811      	ldr	r0, [pc, #68]	; (1199c <main+0xf0>)
   11956:	f006 ff8d 	bl	18874 <bt_conn_auth_info_cb_register>
	if (err) {
   1195a:	b108      	cbz	r0, 11960 <main+0xb4>
		printk("Failed to register authorization info callbacks.\n");
   1195c:	4810      	ldr	r0, [pc, #64]	; (119a0 <main+0xf4>)
   1195e:	e7ec      	b.n	1193a <main+0x8e>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   11960:	2001      	movs	r0, #1
   11962:	f002 fc3d 	bl	141e0 <bt_scan_start>
	if (err) {
   11966:	4601      	mov	r1, r0
   11968:	b108      	cbz	r0, 1196e <main+0xc2>
		printk("Scanning failed to start (err %d)\n", err);
   1196a:	480e      	ldr	r0, [pc, #56]	; (119a4 <main+0xf8>)
   1196c:	e7ad      	b.n	118ca <main+0x1e>
	printk("Scanning successfully started\n");
   1196e:	480e      	ldr	r0, [pc, #56]	; (119a8 <main+0xfc>)
   11970:	e7e3      	b.n	1193a <main+0x8e>
   11972:	bf00      	nop
   11974:	0002b028 	.word	0x0002b028
   11978:	200017e8 	.word	0x200017e8
   1197c:	0002b051 	.word	0x0002b051
   11980:	0002b071 	.word	0x0002b071
   11984:	0002a1c0 	.word	0x0002a1c0
   11988:	20000544 	.word	0x20000544
   1198c:	0002b088 	.word	0x0002b088
   11990:	20000510 	.word	0x20000510
   11994:	0002b0d7 	.word	0x0002b0d7
   11998:	0002b0b1 	.word	0x0002b0b1
   1199c:	20000528 	.word	0x20000528
   119a0:	0002b104 	.word	0x0002b104
   119a4:	0002af97 	.word	0x0002af97
   119a8:	0002b136 	.word	0x0002b136

000119ac <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   119ac:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   119ae:	4c0a      	ldr	r4, [pc, #40]	; (119d8 <crc8_ccitt+0x2c>)
   119b0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   119b2:	4291      	cmp	r1, r2
   119b4:	d100      	bne.n	119b8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   119b6:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   119b8:	f811 3b01 	ldrb.w	r3, [r1], #1
   119bc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   119be:	0903      	lsrs	r3, r0, #4
   119c0:	5ce3      	ldrb	r3, [r4, r3]
   119c2:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   119c6:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   119c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   119cc:	5ce0      	ldrb	r0, [r4, r3]
   119ce:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   119d2:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   119d4:	e7ed      	b.n	119b2 <crc8_ccitt+0x6>
   119d6:	bf00      	nop
   119d8:	0002b155 	.word	0x0002b155

000119dc <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   119dc:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   119de:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   119e2:	2b02      	cmp	r3, #2
{
   119e4:	b570      	push	{r4, r5, r6, lr}
   119e6:	4604      	mov	r4, r0
   119e8:	460e      	mov	r6, r1
	notify->result = res;
   119ea:	6081      	str	r1, [r0, #8]
	switch (method) {
   119ec:	d010      	beq.n	11a10 <sys_notify_finalize+0x34>
   119ee:	2b03      	cmp	r3, #3
   119f0:	d004      	beq.n	119fc <sys_notify_finalize+0x20>
   119f2:	2b01      	cmp	r3, #1
   119f4:	d10f      	bne.n	11a16 <sys_notify_finalize+0x3a>
   119f6:	2500      	movs	r5, #0
   119f8:	4628      	mov	r0, r5
   119fa:	e001      	b.n	11a00 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   119fc:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   119fe:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11a00:	2300      	movs	r3, #0
   11a02:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   11a04:	b110      	cbz	r0, 11a0c <sys_notify_finalize+0x30>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11a06:	4631      	mov	r1, r6
   11a08:	f013 f9fc 	bl	24e04 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11a0c:	4628      	mov	r0, r5
   11a0e:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   11a10:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   11a12:	2500      	movs	r5, #0
		break;
   11a14:	e7f4      	b.n	11a00 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   11a16:	4905      	ldr	r1, [pc, #20]	; (11a2c <sys_notify_finalize+0x50>)
   11a18:	4805      	ldr	r0, [pc, #20]	; (11a30 <sys_notify_finalize+0x54>)
   11a1a:	2245      	movs	r2, #69	; 0x45
   11a1c:	f014 f8eb 	bl	25bf6 <assert_print>
   11a20:	4802      	ldr	r0, [pc, #8]	; (11a2c <sys_notify_finalize+0x50>)
   11a22:	2145      	movs	r1, #69	; 0x45
   11a24:	f014 f8e0 	bl	25be8 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   11a28:	2500      	movs	r5, #0
   11a2a:	e7e8      	b.n	119fe <sys_notify_finalize+0x22>
   11a2c:	0002b165 	.word	0x0002b165
   11a30:	0002ab8c 	.word	0x0002ab8c

00011a34 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   11a34:	4b01      	ldr	r3, [pc, #4]	; (11a3c <char_out+0x8>)
   11a36:	681b      	ldr	r3, [r3, #0]
   11a38:	4718      	bx	r3
   11a3a:	bf00      	nop
   11a3c:	2000054c 	.word	0x2000054c

00011a40 <__printk_hook_install>:
	_char_out = fn;
   11a40:	4b01      	ldr	r3, [pc, #4]	; (11a48 <__printk_hook_install+0x8>)
   11a42:	6018      	str	r0, [r3, #0]
}
   11a44:	4770      	bx	lr
   11a46:	bf00      	nop
   11a48:	2000054c 	.word	0x2000054c

00011a4c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   11a4c:	b507      	push	{r0, r1, r2, lr}
   11a4e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   11a50:	2100      	movs	r1, #0
   11a52:	4602      	mov	r2, r0
   11a54:	9100      	str	r1, [sp, #0]
   11a56:	4803      	ldr	r0, [pc, #12]	; (11a64 <vprintk+0x18>)
   11a58:	f000 fbae 	bl	121b8 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   11a5c:	b003      	add	sp, #12
   11a5e:	f85d fb04 	ldr.w	pc, [sp], #4
   11a62:	bf00      	nop
   11a64:	00011a35 	.word	0x00011a35

00011a68 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   11a68:	b530      	push	{r4, r5, lr}
   11a6a:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   11a6c:	2500      	movs	r5, #0
   11a6e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   11a72:	4604      	mov	r4, r0
   11a74:	9500      	str	r5, [sp, #0]
   11a76:	a903      	add	r1, sp, #12
   11a78:	4805      	ldr	r0, [pc, #20]	; (11a90 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   11a7a:	9505      	str	r5, [sp, #20]
   11a7c:	f000 fb9c 	bl	121b8 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   11a80:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   11a84:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   11a86:	bfb8      	it	lt
   11a88:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   11a8a:	b007      	add	sp, #28
   11a8c:	bd30      	pop	{r4, r5, pc}
   11a8e:	bf00      	nop
   11a90:	000257ef 	.word	0x000257ef

00011a94 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11a98:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11a9c:	f01a 0f08 	tst.w	sl, #8
{
   11aa0:	4604      	mov	r4, r0
   11aa2:	4693      	mov	fp, r2
	if (processing) {
   11aa4:	d01c      	beq.n	11ae0 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
   11aa6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11aa8:	bf0c      	ite	eq
   11aaa:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   11aae:	f04a 0a20 	orrne.w	sl, sl, #32
   11ab2:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11ab6:	f104 0014 	add.w	r0, r4, #20
   11aba:	f010 fbc7 	bl	2224c <z_spin_unlock_valid>
   11abe:	b940      	cbnz	r0, 11ad2 <process_event+0x3e>
   11ac0:	4992      	ldr	r1, [pc, #584]	; (11d0c <process_event+0x278>)
   11ac2:	4893      	ldr	r0, [pc, #588]	; (11d10 <process_event+0x27c>)
   11ac4:	22b9      	movs	r2, #185	; 0xb9
   11ac6:	f014 f896 	bl	25bf6 <assert_print>
   11aca:	4890      	ldr	r0, [pc, #576]	; (11d0c <process_event+0x278>)
   11acc:	21b9      	movs	r1, #185	; 0xb9
   11ace:	f014 f88b 	bl	25be8 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11ad2:	f38b 8811 	msr	BASEPRI, fp
   11ad6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11ada:	b003      	add	sp, #12
   11adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   11ae0:	4f8c      	ldr	r7, [pc, #560]	; (11d14 <process_event+0x280>)
   11ae2:	f8df 822c 	ldr.w	r8, [pc, #556]	; 11d10 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11ae6:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
   11aea:	2902      	cmp	r1, #2
   11aec:	d106      	bne.n	11afc <process_event+0x68>
			evt = process_recheck(mgr);
   11aee:	4620      	mov	r0, r4
   11af0:	f013 feaa 	bl	25848 <process_recheck>
		if (evt == EVT_NOP) {
   11af4:	2800      	cmp	r0, #0
   11af6:	d0de      	beq.n	11ab6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   11af8:	2801      	cmp	r0, #1
   11afa:	d163      	bne.n	11bc4 <process_event+0x130>
			res = mgr->last_res;
   11afc:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11b00:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   11b02:	f1b9 0f00 	cmp.w	r9, #0
   11b06:	da19      	bge.n	11b3c <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   11b08:	2600      	movs	r6, #0
		*clients = mgr->clients;
   11b0a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11b0c:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   11b10:	e9c4 6600 	strd	r6, r6, [r4]
   11b14:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11b18:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11b1a:	8ba3      	ldrh	r3, [r4, #28]
   11b1c:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11b20:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11b22:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
   11b24:	d003      	beq.n	11b2e <process_event+0x9a>
		if (do_monitors
   11b26:	68a2      	ldr	r2, [r4, #8]
   11b28:	2a00      	cmp	r2, #0
   11b2a:	f040 80f5 	bne.w	11d18 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
   11b2e:	b915      	cbnz	r5, 11b36 <process_event+0xa2>
		    || (transit != NULL)) {
   11b30:	2e00      	cmp	r6, #0
   11b32:	f000 812f 	beq.w	11d94 <process_event+0x300>
   11b36:	f04f 0a00 	mov.w	sl, #0
   11b3a:	e0ef      	b.n	11d1c <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11b3c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11b40:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11b42:	2901      	cmp	r1, #1
   11b44:	d820      	bhi.n	11b88 <process_event+0xf4>
	list->head = NULL;
   11b46:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11b48:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   11b4c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   11b4e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11b50:	b29b      	uxth	r3, r3
	list->tail = NULL;
   11b52:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11b56:	d10a      	bne.n	11b6e <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11b58:	b13d      	cbz	r5, 11b6a <process_event+0xd6>
   11b5a:	8be2      	ldrh	r2, [r4, #30]
   11b5c:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   11b5e:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
   11b60:	3201      	adds	r2, #1
   11b62:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11b64:	2900      	cmp	r1, #0
   11b66:	d1fa      	bne.n	11b5e <process_event+0xca>
   11b68:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11b6a:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   11b6e:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11b70:	4620      	mov	r0, r4
   11b72:	f013 fe69 	bl	25848 <process_recheck>
   11b76:	4606      	mov	r6, r0
   11b78:	2800      	cmp	r0, #0
   11b7a:	d0ce      	beq.n	11b1a <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11b7c:	8ba3      	ldrh	r3, [r4, #28]
   11b7e:	f043 0320 	orr.w	r3, r3, #32
   11b82:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   11b84:	2600      	movs	r6, #0
   11b86:	e7c8      	b.n	11b1a <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11b88:	2a04      	cmp	r2, #4
   11b8a:	d10d      	bne.n	11ba8 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11b8c:	f023 0307 	bic.w	r3, r3, #7
   11b90:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11b92:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11b94:	4620      	mov	r0, r4
   11b96:	f013 fe57 	bl	25848 <process_recheck>
   11b9a:	4605      	mov	r5, r0
   11b9c:	b180      	cbz	r0, 11bc0 <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11b9e:	f042 0220 	orr.w	r2, r2, #32
   11ba2:	83a2      	strh	r2, [r4, #28]
   11ba4:	2500      	movs	r5, #0
   11ba6:	e7ed      	b.n	11b84 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
   11ba8:	f240 121b 	movw	r2, #283	; 0x11b
   11bac:	4639      	mov	r1, r7
   11bae:	4640      	mov	r0, r8
   11bb0:	f014 f821 	bl	25bf6 <assert_print>
   11bb4:	f240 111b 	movw	r1, #283	; 0x11b
   11bb8:	4638      	mov	r0, r7
   11bba:	f014 f815 	bl	25be8 <assert_post_action>
   11bbe:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   11bc0:	462e      	mov	r6, r5
   11bc2:	e7aa      	b.n	11b1a <process_event+0x86>
		} else if (evt == EVT_START) {
   11bc4:	2803      	cmp	r0, #3
   11bc6:	d131      	bne.n	11c2c <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   11bc8:	f1ba 0f00 	cmp.w	sl, #0
   11bcc:	d00a      	beq.n	11be4 <process_event+0x150>
   11bce:	4639      	mov	r1, r7
   11bd0:	4640      	mov	r0, r8
   11bd2:	f44f 72ab 	mov.w	r2, #342	; 0x156
   11bd6:	f014 f80e 	bl	25bf6 <assert_print>
   11bda:	f44f 71ab 	mov.w	r1, #342	; 0x156
   11bde:	4638      	mov	r0, r7
   11be0:	f014 f802 	bl	25be8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11be4:	6823      	ldr	r3, [r4, #0]
   11be6:	b953      	cbnz	r3, 11bfe <process_event+0x16a>
   11be8:	4639      	mov	r1, r7
   11bea:	4640      	mov	r0, r8
   11bec:	f240 1257 	movw	r2, #343	; 0x157
   11bf0:	f014 f801 	bl	25bf6 <assert_print>
   11bf4:	f240 1157 	movw	r1, #343	; 0x157
   11bf8:	4638      	mov	r0, r7
   11bfa:	f013 fff5 	bl	25be8 <assert_post_action>
			transit = mgr->transitions->start;
   11bfe:	6923      	ldr	r3, [r4, #16]
   11c00:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   11c02:	b956      	cbnz	r6, 11c1a <process_event+0x186>
   11c04:	4639      	mov	r1, r7
   11c06:	4640      	mov	r0, r8
   11c08:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   11c0c:	f013 fff3 	bl	25bf6 <assert_print>
   11c10:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   11c14:	4638      	mov	r0, r7
   11c16:	f013 ffe7 	bl	25be8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11c1a:	8ba3      	ldrh	r3, [r4, #28]
   11c1c:	f023 0307 	bic.w	r3, r3, #7
   11c20:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   11c24:	83a3      	strh	r3, [r4, #28]
}
   11c26:	2500      	movs	r5, #0
		res = 0;
   11c28:	46a9      	mov	r9, r5
}
   11c2a:	e776      	b.n	11b1a <process_event+0x86>
		} else if (evt == EVT_STOP) {
   11c2c:	2804      	cmp	r0, #4
   11c2e:	d12e      	bne.n	11c8e <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   11c30:	f1ba 0f02 	cmp.w	sl, #2
   11c34:	d00a      	beq.n	11c4c <process_event+0x1b8>
   11c36:	4639      	mov	r1, r7
   11c38:	4640      	mov	r0, r8
   11c3a:	f240 125d 	movw	r2, #349	; 0x15d
   11c3e:	f013 ffda 	bl	25bf6 <assert_print>
   11c42:	f240 115d 	movw	r1, #349	; 0x15d
   11c46:	4638      	mov	r0, r7
   11c48:	f013 ffce 	bl	25be8 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   11c4c:	8be3      	ldrh	r3, [r4, #30]
   11c4e:	b153      	cbz	r3, 11c66 <process_event+0x1d2>
   11c50:	4639      	mov	r1, r7
   11c52:	4640      	mov	r0, r8
   11c54:	f44f 72af 	mov.w	r2, #350	; 0x15e
   11c58:	f013 ffcd 	bl	25bf6 <assert_print>
   11c5c:	f44f 71af 	mov.w	r1, #350	; 0x15e
   11c60:	4638      	mov	r0, r7
   11c62:	f013 ffc1 	bl	25be8 <assert_post_action>
			transit = mgr->transitions->stop;
   11c66:	6923      	ldr	r3, [r4, #16]
   11c68:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   11c6a:	b956      	cbnz	r6, 11c82 <process_event+0x1ee>
   11c6c:	4639      	mov	r1, r7
   11c6e:	4640      	mov	r0, r8
   11c70:	f240 1261 	movw	r2, #353	; 0x161
   11c74:	f013 ffbf 	bl	25bf6 <assert_print>
   11c78:	f240 1161 	movw	r1, #353	; 0x161
   11c7c:	4638      	mov	r0, r7
   11c7e:	f013 ffb3 	bl	25be8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11c82:	8ba3      	ldrh	r3, [r4, #28]
   11c84:	f023 0307 	bic.w	r3, r3, #7
   11c88:	f043 0304 	orr.w	r3, r3, #4
   11c8c:	e7ca      	b.n	11c24 <process_event+0x190>
		} else if (evt == EVT_RESET) {
   11c8e:	2805      	cmp	r0, #5
   11c90:	d12e      	bne.n	11cf0 <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11c92:	f1ba 0f01 	cmp.w	sl, #1
   11c96:	d00a      	beq.n	11cae <process_event+0x21a>
   11c98:	4639      	mov	r1, r7
   11c9a:	4640      	mov	r0, r8
   11c9c:	f44f 72b2 	mov.w	r2, #356	; 0x164
   11ca0:	f013 ffa9 	bl	25bf6 <assert_print>
   11ca4:	f44f 71b2 	mov.w	r1, #356	; 0x164
   11ca8:	4638      	mov	r0, r7
   11caa:	f013 ff9d 	bl	25be8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11cae:	6823      	ldr	r3, [r4, #0]
   11cb0:	b953      	cbnz	r3, 11cc8 <process_event+0x234>
   11cb2:	4639      	mov	r1, r7
   11cb4:	4640      	mov	r0, r8
   11cb6:	f240 1265 	movw	r2, #357	; 0x165
   11cba:	f013 ff9c 	bl	25bf6 <assert_print>
   11cbe:	f240 1165 	movw	r1, #357	; 0x165
   11cc2:	4638      	mov	r0, r7
   11cc4:	f013 ff90 	bl	25be8 <assert_post_action>
			transit = mgr->transitions->reset;
   11cc8:	6923      	ldr	r3, [r4, #16]
   11cca:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   11ccc:	b956      	cbnz	r6, 11ce4 <process_event+0x250>
   11cce:	4639      	mov	r1, r7
   11cd0:	4640      	mov	r0, r8
   11cd2:	f44f 72b4 	mov.w	r2, #360	; 0x168
   11cd6:	f013 ff8e 	bl	25bf6 <assert_print>
   11cda:	f44f 71b4 	mov.w	r1, #360	; 0x168
   11cde:	4638      	mov	r0, r7
   11ce0:	f013 ff82 	bl	25be8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11ce4:	8ba3      	ldrh	r3, [r4, #28]
   11ce6:	f023 0307 	bic.w	r3, r3, #7
   11cea:	f043 0305 	orr.w	r3, r3, #5
   11cee:	e799      	b.n	11c24 <process_event+0x190>
			__ASSERT_NO_MSG(false);
   11cf0:	f240 126b 	movw	r2, #363	; 0x16b
   11cf4:	4639      	mov	r1, r7
   11cf6:	4640      	mov	r0, r8
   11cf8:	f013 ff7d 	bl	25bf6 <assert_print>
   11cfc:	2500      	movs	r5, #0
   11cfe:	f240 116b 	movw	r1, #363	; 0x16b
   11d02:	4638      	mov	r0, r7
   11d04:	f013 ff70 	bl	25be8 <assert_post_action>
		onoff_transition_fn transit = NULL;
   11d08:	462e      	mov	r6, r5
   11d0a:	e78d      	b.n	11c28 <process_event+0x194>
   11d0c:	0002b1aa 	.word	0x0002b1aa
   11d10:	0002ab8c 	.word	0x0002ab8c
   11d14:	0002b188 	.word	0x0002b188
				   && !sys_slist_is_empty(&mgr->monitors);
   11d18:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11d1c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   11d20:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   11d22:	f104 0314 	add.w	r3, r4, #20
   11d26:	4618      	mov	r0, r3
   11d28:	9301      	str	r3, [sp, #4]
   11d2a:	f010 fa8f 	bl	2224c <z_spin_unlock_valid>
   11d2e:	b940      	cbnz	r0, 11d42 <process_event+0x2ae>
   11d30:	4931      	ldr	r1, [pc, #196]	; (11df8 <process_event+0x364>)
   11d32:	4640      	mov	r0, r8
   11d34:	22b9      	movs	r2, #185	; 0xb9
   11d36:	f013 ff5e 	bl	25bf6 <assert_print>
   11d3a:	482f      	ldr	r0, [pc, #188]	; (11df8 <process_event+0x364>)
   11d3c:	21b9      	movs	r1, #185	; 0xb9
   11d3e:	f013 ff53 	bl	25be8 <assert_post_action>
   11d42:	f38b 8811 	msr	BASEPRI, fp
   11d46:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11d4a:	f1ba 0f00 	cmp.w	sl, #0
   11d4e:	d130      	bne.n	11db2 <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
   11d50:	2d00      	cmp	r5, #0
   11d52:	d140      	bne.n	11dd6 <process_event+0x342>
			if (transit != NULL) {
   11d54:	b116      	cbz	r6, 11d5c <process_event+0x2c8>
				transit(mgr, transition_complete);
   11d56:	4929      	ldr	r1, [pc, #164]	; (11dfc <process_event+0x368>)
   11d58:	4620      	mov	r0, r4
   11d5a:	47b0      	blx	r6
	__asm__ volatile(
   11d5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11d60:	f3ef 8b11 	mrs	fp, BASEPRI
   11d64:	f383 8812 	msr	BASEPRI_MAX, r3
   11d68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11d6c:	9801      	ldr	r0, [sp, #4]
   11d6e:	f010 fa5f 	bl	22230 <z_spin_lock_valid>
   11d72:	b940      	cbnz	r0, 11d86 <process_event+0x2f2>
   11d74:	4920      	ldr	r1, [pc, #128]	; (11df8 <process_event+0x364>)
   11d76:	4640      	mov	r0, r8
   11d78:	228e      	movs	r2, #142	; 0x8e
   11d7a:	f013 ff3c 	bl	25bf6 <assert_print>
   11d7e:	481e      	ldr	r0, [pc, #120]	; (11df8 <process_event+0x364>)
   11d80:	218e      	movs	r1, #142	; 0x8e
   11d82:	f013 ff31 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   11d86:	9801      	ldr	r0, [sp, #4]
   11d88:	f010 fa70 	bl	2226c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11d8c:	8ba3      	ldrh	r3, [r4, #28]
   11d8e:	f023 0308 	bic.w	r3, r3, #8
   11d92:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11d94:	8ba3      	ldrh	r3, [r4, #28]
   11d96:	06da      	lsls	r2, r3, #27
   11d98:	d525      	bpl.n	11de6 <process_event+0x352>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11d9a:	f023 0310 	bic.w	r3, r3, #16
   11d9e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   11da0:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   11da2:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
   11da6:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
   11daa:	2900      	cmp	r1, #0
   11dac:	f47f ae9d 	bne.w	11aea <process_event+0x56>
out:
   11db0:	e681      	b.n	11ab6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11db2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11db4:	2900      	cmp	r1, #0
   11db6:	d0cb      	beq.n	11d50 <process_event+0x2bc>
	return node->next;
   11db8:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
   11dbc:	f8d1 b004 	ldr.w	fp, [r1, #4]
   11dc0:	9a00      	ldr	r2, [sp, #0]
   11dc2:	464b      	mov	r3, r9
   11dc4:	4620      	mov	r0, r4
   11dc6:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11dc8:	f1ba 0f00 	cmp.w	sl, #0
   11dcc:	d0c0      	beq.n	11d50 <process_event+0x2bc>
   11dce:	4651      	mov	r1, sl
   11dd0:	f8da a000 	ldr.w	sl, [sl]
   11dd4:	e7f2      	b.n	11dbc <process_event+0x328>
   11dd6:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   11dd8:	9a00      	ldr	r2, [sp, #0]
   11dda:	682d      	ldr	r5, [r5, #0]
   11ddc:	464b      	mov	r3, r9
   11dde:	4620      	mov	r0, r4
   11de0:	f013 fd4e 	bl	25880 <notify_one>
   11de4:	e7b4      	b.n	11d50 <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   11de6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11dea:	bf1e      	ittt	ne
   11dec:	f023 0320 	bicne.w	r3, r3, #32
   11df0:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   11df2:	2102      	movne	r1, #2
   11df4:	e7d5      	b.n	11da2 <process_event+0x30e>
   11df6:	bf00      	nop
   11df8:	0002b1aa 	.word	0x0002b1aa
   11dfc:	00011e01 	.word	0x00011e01

00011e00 <transition_complete>:
{
   11e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e02:	4604      	mov	r4, r0
   11e04:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11e06:	f100 0614 	add.w	r6, r0, #20
   11e0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   11e0e:	f3ef 8711 	mrs	r7, BASEPRI
   11e12:	f383 8812 	msr	BASEPRI_MAX, r3
   11e16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11e1a:	4630      	mov	r0, r6
   11e1c:	f010 fa08 	bl	22230 <z_spin_lock_valid>
   11e20:	b940      	cbnz	r0, 11e34 <transition_complete+0x34>
   11e22:	490a      	ldr	r1, [pc, #40]	; (11e4c <transition_complete+0x4c>)
   11e24:	480a      	ldr	r0, [pc, #40]	; (11e50 <transition_complete+0x50>)
   11e26:	228e      	movs	r2, #142	; 0x8e
   11e28:	f013 fee5 	bl	25bf6 <assert_print>
   11e2c:	4807      	ldr	r0, [pc, #28]	; (11e4c <transition_complete+0x4c>)
   11e2e:	218e      	movs	r1, #142	; 0x8e
   11e30:	f013 feda 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   11e34:	4630      	mov	r0, r6
   11e36:	f010 fa19 	bl	2226c <z_spin_lock_set_owner>
	mgr->last_res = res;
   11e3a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   11e3c:	463a      	mov	r2, r7
   11e3e:	4620      	mov	r0, r4
   11e40:	2101      	movs	r1, #1
}
   11e42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   11e46:	f7ff be25 	b.w	11a94 <process_event>
   11e4a:	bf00      	nop
   11e4c:	0002b1aa 	.word	0x0002b1aa
   11e50:	0002ab8c 	.word	0x0002ab8c

00011e54 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11e58:	4604      	mov	r4, r0
   11e5a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11e5c:	f013 fd26 	bl	258ac <validate_args>

	if (rv < 0) {
   11e60:	1e05      	subs	r5, r0, #0
   11e62:	db54      	blt.n	11f0e <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11e64:	f104 0914 	add.w	r9, r4, #20
   11e68:	f04f 0340 	mov.w	r3, #64	; 0x40
   11e6c:	f3ef 8a11 	mrs	sl, BASEPRI
   11e70:	f383 8812 	msr	BASEPRI_MAX, r3
   11e74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11e78:	4648      	mov	r0, r9
   11e7a:	f010 f9d9 	bl	22230 <z_spin_lock_valid>
   11e7e:	b940      	cbnz	r0, 11e92 <onoff_request+0x3e>
   11e80:	4933      	ldr	r1, [pc, #204]	; (11f50 <onoff_request+0xfc>)
   11e82:	4834      	ldr	r0, [pc, #208]	; (11f54 <onoff_request+0x100>)
   11e84:	228e      	movs	r2, #142	; 0x8e
   11e86:	f013 feb6 	bl	25bf6 <assert_print>
   11e8a:	4831      	ldr	r0, [pc, #196]	; (11f50 <onoff_request+0xfc>)
   11e8c:	218e      	movs	r1, #142	; 0x8e
   11e8e:	f013 feab 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   11e92:	4648      	mov	r0, r9
   11e94:	f010 f9ea 	bl	2226c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   11e98:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11e9a:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   11e9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11ea0:	428b      	cmp	r3, r1
   11ea2:	f002 0607 	and.w	r6, r2, #7
   11ea6:	d04a      	beq.n	11f3e <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   11ea8:	2e02      	cmp	r6, #2
   11eaa:	d11f      	bne.n	11eec <onoff_request+0x98>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   11eac:	3301      	adds	r3, #1
   11eae:	83e3      	strh	r3, [r4, #30]
	rv = state;
   11eb0:	4635      	mov	r5, r6
		notify = true;
   11eb2:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11eb6:	4648      	mov	r0, r9
   11eb8:	f010 f9c8 	bl	2224c <z_spin_unlock_valid>
   11ebc:	b940      	cbnz	r0, 11ed0 <onoff_request+0x7c>
   11ebe:	4924      	ldr	r1, [pc, #144]	; (11f50 <onoff_request+0xfc>)
   11ec0:	4824      	ldr	r0, [pc, #144]	; (11f54 <onoff_request+0x100>)
   11ec2:	22b9      	movs	r2, #185	; 0xb9
   11ec4:	f013 fe97 	bl	25bf6 <assert_print>
   11ec8:	4821      	ldr	r0, [pc, #132]	; (11f50 <onoff_request+0xfc>)
   11eca:	21b9      	movs	r1, #185	; 0xb9
   11ecc:	f013 fe8c 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   11ed0:	f38a 8811 	msr	BASEPRI, sl
   11ed4:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   11ed8:	f1b8 0f00 	cmp.w	r8, #0
   11edc:	d017      	beq.n	11f0e <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   11ede:	2300      	movs	r3, #0
   11ee0:	4632      	mov	r2, r6
   11ee2:	4639      	mov	r1, r7
   11ee4:	4620      	mov	r0, r4
   11ee6:	f013 fccb 	bl	25880 <notify_one>
   11eea:	e010      	b.n	11f0e <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   11eec:	0793      	lsls	r3, r2, #30
   11eee:	d001      	beq.n	11ef4 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   11ef0:	2e06      	cmp	r6, #6
   11ef2:	d10f      	bne.n	11f14 <onoff_request+0xc0>
	parent->next = child;
   11ef4:	2300      	movs	r3, #0
   11ef6:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   11ef8:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   11efa:	b9eb      	cbnz	r3, 11f38 <onoff_request+0xe4>
	list->head = node;
   11efc:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   11f00:	4635      	mov	r5, r6
   11f02:	b9f6      	cbnz	r6, 11f42 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   11f04:	4652      	mov	r2, sl
   11f06:	2102      	movs	r1, #2
   11f08:	4620      	mov	r0, r4
   11f0a:	f7ff fdc3 	bl	11a94 <process_event>
		}
	}

	return rv;
}
   11f0e:	4628      	mov	r0, r5
   11f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   11f14:	2e05      	cmp	r6, #5
   11f16:	d017      	beq.n	11f48 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11f18:	2e01      	cmp	r6, #1
   11f1a:	d00a      	beq.n	11f32 <onoff_request+0xde>
   11f1c:	490e      	ldr	r1, [pc, #56]	; (11f58 <onoff_request+0x104>)
   11f1e:	480d      	ldr	r0, [pc, #52]	; (11f54 <onoff_request+0x100>)
   11f20:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   11f24:	f013 fe67 	bl	25bf6 <assert_print>
   11f28:	480b      	ldr	r0, [pc, #44]	; (11f58 <onoff_request+0x104>)
   11f2a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   11f2e:	f013 fe5b 	bl	25be8 <assert_post_action>
		rv = -EIO;
   11f32:	f06f 0504 	mvn.w	r5, #4
   11f36:	e004      	b.n	11f42 <onoff_request+0xee>
	parent->next = child;
   11f38:	601f      	str	r7, [r3, #0]
	list->tail = node;
   11f3a:	6067      	str	r7, [r4, #4]
}
   11f3c:	e7e0      	b.n	11f00 <onoff_request+0xac>
		rv = -EAGAIN;
   11f3e:	f06f 050a 	mvn.w	r5, #10
   11f42:	f04f 0800 	mov.w	r8, #0
   11f46:	e7b6      	b.n	11eb6 <onoff_request+0x62>
		rv = -ENOTSUP;
   11f48:	f06f 0585 	mvn.w	r5, #133	; 0x85
   11f4c:	e7f9      	b.n	11f42 <onoff_request+0xee>
   11f4e:	bf00      	nop
   11f50:	0002b1aa 	.word	0x0002b1aa
   11f54:	0002ab8c 	.word	0x0002ab8c
   11f58:	0002b188 	.word	0x0002b188

00011f5c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   11f5c:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   11f5e:	b379      	cbz	r1, 11fc0 <sys_heap_free+0x64>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   11f60:	6805      	ldr	r5, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11f62:	1f0c      	subs	r4, r1, #4
   11f64:	1b64      	subs	r4, r4, r5
   11f66:	08e6      	lsrs	r6, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   11f68:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   11f6c:	442c      	add	r4, r5
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   11f6e:	8863      	ldrh	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   11f70:	07db      	lsls	r3, r3, #31
   11f72:	d408      	bmi.n	11f86 <sys_heap_free+0x2a>
   11f74:	4913      	ldr	r1, [pc, #76]	; (11fc4 <sys_heap_free+0x68>)
   11f76:	4814      	ldr	r0, [pc, #80]	; (11fc8 <sys_heap_free+0x6c>)
   11f78:	22ac      	movs	r2, #172	; 0xac
   11f7a:	f013 fe3c 	bl	25bf6 <assert_print>
   11f7e:	4811      	ldr	r0, [pc, #68]	; (11fc4 <sys_heap_free+0x68>)
   11f80:	21ac      	movs	r1, #172	; 0xac
   11f82:	f013 fe31 	bl	25be8 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   11f86:	4631      	mov	r1, r6
   11f88:	4628      	mov	r0, r5
   11f8a:	f013 fcbb 	bl	25904 <chunk_size>
   11f8e:	4430      	add	r0, r6
		return ((uint16_t *)cmem)[f];
   11f90:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   11f94:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   11f96:	4286      	cmp	r6, r0
   11f98:	d008      	beq.n	11fac <sys_heap_free+0x50>
   11f9a:	490a      	ldr	r1, [pc, #40]	; (11fc4 <sys_heap_free+0x68>)
   11f9c:	480a      	ldr	r0, [pc, #40]	; (11fc8 <sys_heap_free+0x6c>)
   11f9e:	22b4      	movs	r2, #180	; 0xb4
   11fa0:	f013 fe29 	bl	25bf6 <assert_print>
   11fa4:	4807      	ldr	r0, [pc, #28]	; (11fc4 <sys_heap_free+0x68>)
   11fa6:	21b4      	movs	r1, #180	; 0xb4
   11fa8:	f013 fe1e 	bl	25be8 <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   11fac:	8863      	ldrh	r3, [r4, #2]
   11fae:	f023 0301 	bic.w	r3, r3, #1
   11fb2:	8063      	strh	r3, [r4, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   11fb4:	4631      	mov	r1, r6
   11fb6:	4628      	mov	r0, r5
}
   11fb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   11fbc:	f013 bd5e 	b.w	25a7c <free_chunk>
}
   11fc0:	bd70      	pop	{r4, r5, r6, pc}
   11fc2:	bf00      	nop
   11fc4:	0002b1d7 	.word	0x0002b1d7
   11fc8:	0002ab8c 	.word	0x0002ab8c

00011fcc <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   11fcc:	424b      	negs	r3, r1
{
   11fce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   11fd2:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   11fd6:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
   11fda:	6806      	ldr	r6, [r0, #0]
{
   11fdc:	4614      	mov	r4, r2
	if (align != rew) {
   11fde:	d01b      	beq.n	12018 <sys_heap_aligned_alloc+0x4c>
		return false;
   11fe0:	2f04      	cmp	r7, #4
   11fe2:	463d      	mov	r5, r7
   11fe4:	46b9      	mov	r9, r7
   11fe6:	bf28      	it	cs
   11fe8:	2504      	movcs	r5, #4
		align -= rew;
   11fea:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11fec:	f107 3aff 	add.w	sl, r7, #4294967295
   11ff0:	ea1a 0f07 	tst.w	sl, r7
   11ff4:	d00a      	beq.n	1200c <sys_heap_aligned_alloc+0x40>
   11ff6:	4931      	ldr	r1, [pc, #196]	; (120bc <sys_heap_aligned_alloc+0xf0>)
   11ff8:	4831      	ldr	r0, [pc, #196]	; (120c0 <sys_heap_aligned_alloc+0xf4>)
   11ffa:	f44f 72a0 	mov.w	r2, #320	; 0x140
   11ffe:	f013 fdfa 	bl	25bf6 <assert_print>
   12002:	482e      	ldr	r0, [pc, #184]	; (120bc <sys_heap_aligned_alloc+0xf0>)
   12004:	f44f 71a0 	mov.w	r1, #320	; 0x140
   12008:	f013 fdee 	bl	25be8 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   1200c:	b97c      	cbnz	r4, 1202e <sys_heap_aligned_alloc+0x62>
		return NULL;
   1200e:	f04f 0900 	mov.w	r9, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   12012:	4648      	mov	r0, r9
   12014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   12018:	2904      	cmp	r1, #4
   1201a:	d804      	bhi.n	12026 <sys_heap_aligned_alloc+0x5a>
}
   1201c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   12020:	4611      	mov	r1, r2
   12022:	f013 bd5c 	b.w	25ade <sys_heap_alloc>
		rew = 0;
   12026:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1202a:	2504      	movs	r5, #4
   1202c:	e7de      	b.n	11fec <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1202e:	68b3      	ldr	r3, [r6, #8]
   12030:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   12034:	d9eb      	bls.n	1200e <sys_heap_aligned_alloc+0x42>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12036:	f104 010b 	add.w	r1, r4, #11
   1203a:	4439      	add	r1, r7
   1203c:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1203e:	08c9      	lsrs	r1, r1, #3
   12040:	4630      	mov	r0, r6
   12042:	f013 fcb5 	bl	259b0 <alloc_chunk>
	if (c0 == 0) {
   12046:	4680      	mov	r8, r0
   12048:	2800      	cmp	r0, #0
   1204a:	d0e0      	beq.n	1200e <sys_heap_aligned_alloc+0x42>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1204c:	f109 0504 	add.w	r5, r9, #4
   12050:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   12054:	4435      	add	r5, r6
   12056:	4455      	add	r5, sl
   12058:	427f      	negs	r7, r7
   1205a:	402f      	ands	r7, r5
   1205c:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12060:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12062:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12066:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12068:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1206a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1206e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   12070:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12074:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   12078:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1207c:	d208      	bcs.n	12090 <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c0, c);
   1207e:	4601      	mov	r1, r0
   12080:	463a      	mov	r2, r7
   12082:	4630      	mov	r0, r6
   12084:	f013 fce0 	bl	25a48 <split_chunks>
		free_list_add(h, c0);
   12088:	4641      	mov	r1, r8
   1208a:	4630      	mov	r0, r6
   1208c:	f013 fc3f 	bl	2590e <free_list_add>
	return c + chunk_size(h, c);
   12090:	4639      	mov	r1, r7
   12092:	4630      	mov	r0, r6
   12094:	f013 fc36 	bl	25904 <chunk_size>
   12098:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1209a:	4284      	cmp	r4, r0
   1209c:	d207      	bcs.n	120ae <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c, c_end);
   1209e:	4630      	mov	r0, r6
   120a0:	4622      	mov	r2, r4
   120a2:	f013 fcd1 	bl	25a48 <split_chunks>
		free_list_add(h, c_end);
   120a6:	4621      	mov	r1, r4
   120a8:	4630      	mov	r0, r6
   120aa:	f013 fc30 	bl	2590e <free_list_add>
	void *cmem = &buf[c];
   120ae:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   120b2:	8873      	ldrh	r3, [r6, #2]
   120b4:	f043 0301 	orr.w	r3, r3, #1
   120b8:	8073      	strh	r3, [r6, #2]
   120ba:	e7aa      	b.n	12012 <sys_heap_aligned_alloc+0x46>
   120bc:	0002b1d7 	.word	0x0002b1d7
   120c0:	0002ab8c 	.word	0x0002ab8c

000120c4 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   120c4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   120c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   120cc:	4604      	mov	r4, r0
   120ce:	460e      	mov	r6, r1
   120d0:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   120d2:	d35e      	bcc.n	12192 <sys_heap_init+0xce>
   120d4:	4936      	ldr	r1, [pc, #216]	; (121b0 <sys_heap_init+0xec>)
   120d6:	4837      	ldr	r0, [pc, #220]	; (121b4 <sys_heap_init+0xf0>)
   120d8:	f240 12e3 	movw	r2, #483	; 0x1e3
   120dc:	f013 fd8b 	bl	25bf6 <assert_print>
   120e0:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   120e4:	4832      	ldr	r0, [pc, #200]	; (121b0 <sys_heap_init+0xec>)
   120e6:	f013 fd7f 	bl	25be8 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   120ea:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   120ec:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   120ee:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   120f0:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   120f4:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   120f8:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   120fa:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   120fc:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12100:	d80a      	bhi.n	12118 <sys_heap_init+0x54>
   12102:	492b      	ldr	r1, [pc, #172]	; (121b0 <sys_heap_init+0xec>)
   12104:	482b      	ldr	r0, [pc, #172]	; (121b4 <sys_heap_init+0xf0>)
   12106:	f240 12f3 	movw	r2, #499	; 0x1f3
   1210a:	f013 fd74 	bl	25bf6 <assert_print>
   1210e:	4828      	ldr	r0, [pc, #160]	; (121b0 <sys_heap_init+0xec>)
   12110:	f240 11f3 	movw	r1, #499	; 0x1f3
   12114:	f013 fd68 	bl	25be8 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   12118:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1211a:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1211e:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12122:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
   12126:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12128:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   1212a:	2300      	movs	r3, #0
   1212c:	08e4      	lsrs	r4, r4, #3
   1212e:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12130:	1c63      	adds	r3, r4, #1
   12132:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   12134:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12136:	d90a      	bls.n	1214e <sys_heap_init+0x8a>
   12138:	491d      	ldr	r1, [pc, #116]	; (121b0 <sys_heap_init+0xec>)
   1213a:	481e      	ldr	r0, [pc, #120]	; (121b4 <sys_heap_init+0xf0>)
   1213c:	f44f 7201 	mov.w	r2, #516	; 0x204
   12140:	f013 fd59 	bl	25bf6 <assert_print>
   12144:	481a      	ldr	r0, [pc, #104]	; (121b0 <sys_heap_init+0xec>)
   12146:	f44f 7101 	mov.w	r1, #516	; 0x204
   1214a:	f013 fd4d 	bl	25be8 <assert_post_action>
   1214e:	f105 0310 	add.w	r3, r5, #16
   12152:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   12156:	2200      	movs	r2, #0

	for (int i = 0; i < nb_buckets; i++) {
   12158:	4598      	cmp	r8, r3
   1215a:	d125      	bne.n	121a8 <sys_heap_init+0xe4>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1215c:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1215e:	f043 0301 	orr.w	r3, r3, #1
   12162:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
   12164:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   12168:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1216a:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
   1216c:	802a      	strh	r2, [r5, #0]
   1216e:	8048      	strh	r0, [r1, #2]
   12170:	19a9      	adds	r1, r5, r6
   12172:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
   12176:	804a      	strh	r2, [r1, #2]
   12178:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
   1217a:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1217e:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12180:	885a      	ldrh	r2, [r3, #2]
   12182:	f042 0201 	orr.w	r2, r2, #1
   12186:	4628      	mov	r0, r5
   12188:	805a      	strh	r2, [r3, #2]
}
   1218a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   1218e:	f013 bbbe 	b.w	2590e <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   12192:	2a04      	cmp	r2, #4
   12194:	d8a9      	bhi.n	120ea <sys_heap_init+0x26>
   12196:	4906      	ldr	r1, [pc, #24]	; (121b0 <sys_heap_init+0xec>)
   12198:	4806      	ldr	r0, [pc, #24]	; (121b4 <sys_heap_init+0xf0>)
   1219a:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   1219e:	f013 fd2a 	bl	25bf6 <assert_print>
   121a2:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   121a6:	e79d      	b.n	120e4 <sys_heap_init+0x20>
		h->buckets[i].next = 0;
   121a8:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
   121ac:	e7d4      	b.n	12158 <sys_heap_init+0x94>
   121ae:	bf00      	nop
   121b0:	0002b1d7 	.word	0x0002b1d7
   121b4:	0002ab8c 	.word	0x0002ab8c

000121b8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   121b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121bc:	b091      	sub	sp, #68	; 0x44
   121be:	468b      	mov	fp, r1
   121c0:	9002      	str	r0, [sp, #8]
   121c2:	4692      	mov	sl, r2
   121c4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   121c6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   121c8:	f89a 0000 	ldrb.w	r0, [sl]
   121cc:	b908      	cbnz	r0, 121d2 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   121ce:	4628      	mov	r0, r5
   121d0:	e363      	b.n	1289a <z_cbvprintf_impl+0x6e2>
		if (*fp != '%') {
   121d2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   121d4:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
   121d8:	d007      	beq.n	121ea <z_cbvprintf_impl+0x32>
			OUTC('%');
   121da:	9b02      	ldr	r3, [sp, #8]
   121dc:	4659      	mov	r1, fp
   121de:	4798      	blx	r3
   121e0:	2800      	cmp	r0, #0
   121e2:	f2c0 835a 	blt.w	1289a <z_cbvprintf_impl+0x6e2>
   121e6:	3501      	adds	r5, #1
			break;
   121e8:	e212      	b.n	12610 <z_cbvprintf_impl+0x458>
		} state = {
   121ea:	2218      	movs	r2, #24
   121ec:	2100      	movs	r1, #0
   121ee:	a80a      	add	r0, sp, #40	; 0x28
   121f0:	f014 fcba 	bl	26b68 <memset>
	if (*sp == '%') {
   121f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
   121f8:	2b25      	cmp	r3, #37	; 0x25
   121fa:	d078      	beq.n	122ee <z_cbvprintf_impl+0x136>
   121fc:	2200      	movs	r2, #0
   121fe:	4610      	mov	r0, r2
   12200:	4696      	mov	lr, r2
   12202:	4694      	mov	ip, r2
   12204:	4616      	mov	r6, r2
   12206:	4639      	mov	r1, r7
		switch (*sp) {
   12208:	f817 3b01 	ldrb.w	r3, [r7], #1
   1220c:	2b2b      	cmp	r3, #43	; 0x2b
   1220e:	f000 809d 	beq.w	1234c <z_cbvprintf_impl+0x194>
   12212:	f200 8094 	bhi.w	1233e <z_cbvprintf_impl+0x186>
   12216:	2b20      	cmp	r3, #32
   12218:	f000 809b 	beq.w	12352 <z_cbvprintf_impl+0x19a>
   1221c:	2b23      	cmp	r3, #35	; 0x23
   1221e:	f000 809b 	beq.w	12358 <z_cbvprintf_impl+0x1a0>
   12222:	b12e      	cbz	r6, 12230 <z_cbvprintf_impl+0x78>
   12224:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   12228:	f046 0604 	orr.w	r6, r6, #4
   1222c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   12230:	f1bc 0f00 	cmp.w	ip, #0
   12234:	d005      	beq.n	12242 <z_cbvprintf_impl+0x8a>
   12236:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   1223a:	f046 0608 	orr.w	r6, r6, #8
   1223e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   12242:	f1be 0f00 	cmp.w	lr, #0
   12246:	d005      	beq.n	12254 <z_cbvprintf_impl+0x9c>
   12248:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   1224c:	f046 0610 	orr.w	r6, r6, #16
   12250:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   12254:	b128      	cbz	r0, 12262 <z_cbvprintf_impl+0xaa>
   12256:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1225a:	f040 0020 	orr.w	r0, r0, #32
   1225e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   12262:	b12a      	cbz	r2, 12270 <z_cbvprintf_impl+0xb8>
   12264:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1226c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   12270:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12274:	f002 0044 	and.w	r0, r2, #68	; 0x44
   12278:	2844      	cmp	r0, #68	; 0x44
   1227a:	d103      	bne.n	12284 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   1227c:	f36f 1286 	bfc	r2, #6, #1
   12280:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   12284:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   12288:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   1228a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1228e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   12292:	d17b      	bne.n	1238c <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
   12294:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12298:	f042 0201 	orr.w	r2, r2, #1
			++sp;
   1229c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   1229e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   122a2:	781a      	ldrb	r2, [r3, #0]
   122a4:	2a2e      	cmp	r2, #46	; 0x2e
   122a6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   122aa:	bf0c      	ite	eq
   122ac:	2101      	moveq	r1, #1
   122ae:	2100      	movne	r1, #0
   122b0:	f361 0241 	bfi	r2, r1, #1, #1
   122b4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   122b8:	d174      	bne.n	123a4 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
   122ba:	785a      	ldrb	r2, [r3, #1]
   122bc:	2a2a      	cmp	r2, #42	; 0x2a
   122be:	d06a      	beq.n	12396 <z_cbvprintf_impl+0x1de>
	++sp;
   122c0:	3301      	adds	r3, #1
	size_t val = 0;
   122c2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   122c4:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   122c6:	4618      	mov	r0, r3
   122c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   122cc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   122d0:	2f09      	cmp	r7, #9
   122d2:	f240 808e 	bls.w	123f2 <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   122d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   122da:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   122dc:	f3c2 0040 	ubfx	r0, r2, #1, #1
   122e0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   122e4:	f361 0241 	bfi	r2, r1, #1, #1
   122e8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   122ec:	e05a      	b.n	123a4 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
   122ee:	f10a 0702 	add.w	r7, sl, #2
   122f2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   122f6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   122fa:	07d9      	lsls	r1, r3, #31
   122fc:	f140 8149 	bpl.w	12592 <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
   12300:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   12304:	f1b9 0f00 	cmp.w	r9, #0
   12308:	da07      	bge.n	1231a <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
   1230a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1230e:	f042 0204 	orr.w	r2, r2, #4
   12312:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   12316:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   1231a:	075a      	lsls	r2, r3, #29
   1231c:	f140 8142 	bpl.w	125a4 <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
   12320:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   12324:	f1b8 0f00 	cmp.w	r8, #0
   12328:	f280 8141 	bge.w	125ae <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
   1232c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12330:	f36f 0341 	bfc	r3, #1, #1
   12334:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   12338:	f04f 38ff 	mov.w	r8, #4294967295
   1233c:	e137      	b.n	125ae <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
   1233e:	2b2d      	cmp	r3, #45	; 0x2d
   12340:	d00c      	beq.n	1235c <z_cbvprintf_impl+0x1a4>
   12342:	2b30      	cmp	r3, #48	; 0x30
   12344:	f47f af6d 	bne.w	12222 <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
   12348:	2201      	movs	r2, #1
	} while (loop);
   1234a:	e75c      	b.n	12206 <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
   1234c:	f04f 0c01 	mov.w	ip, #1
   12350:	e759      	b.n	12206 <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
   12352:	f04f 0e01 	mov.w	lr, #1
   12356:	e756      	b.n	12206 <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
   12358:	2001      	movs	r0, #1
   1235a:	e754      	b.n	12206 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
   1235c:	2601      	movs	r6, #1
   1235e:	e752      	b.n	12206 <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
   12360:	fb0c 0202 	mla	r2, ip, r2, r0
   12364:	3a30      	subs	r2, #48	; 0x30
   12366:	4633      	mov	r3, r6
   12368:	461e      	mov	r6, r3
   1236a:	f816 0b01 	ldrb.w	r0, [r6], #1
   1236e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12372:	2f09      	cmp	r7, #9
   12374:	d9f4      	bls.n	12360 <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
   12376:	4299      	cmp	r1, r3
   12378:	d093      	beq.n	122a2 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1237a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   1237e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   12380:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   12382:	f362 0141 	bfi	r1, r2, #1, #1
   12386:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1238a:	e78a      	b.n	122a2 <z_cbvprintf_impl+0xea>
   1238c:	460b      	mov	r3, r1
	size_t val = 0;
   1238e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12390:	f04f 0c0a 	mov.w	ip, #10
   12394:	e7e8      	b.n	12368 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
   12396:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1239a:	f042 0204 	orr.w	r2, r2, #4
   1239e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   123a2:	3302      	adds	r3, #2
	switch (*sp) {
   123a4:	461f      	mov	r7, r3
   123a6:	f817 2b01 	ldrb.w	r2, [r7], #1
   123aa:	2a6c      	cmp	r2, #108	; 0x6c
   123ac:	d041      	beq.n	12432 <z_cbvprintf_impl+0x27a>
   123ae:	d825      	bhi.n	123fc <z_cbvprintf_impl+0x244>
   123b0:	2a68      	cmp	r2, #104	; 0x68
   123b2:	d02b      	beq.n	1240c <z_cbvprintf_impl+0x254>
   123b4:	2a6a      	cmp	r2, #106	; 0x6a
   123b6:	d046      	beq.n	12446 <z_cbvprintf_impl+0x28e>
   123b8:	2a4c      	cmp	r2, #76	; 0x4c
   123ba:	d04c      	beq.n	12456 <z_cbvprintf_impl+0x29e>
   123bc:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   123be:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   123c2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
   123c6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   123ca:	2a78      	cmp	r2, #120	; 0x78
   123cc:	f200 80d9 	bhi.w	12582 <z_cbvprintf_impl+0x3ca>
   123d0:	2a57      	cmp	r2, #87	; 0x57
   123d2:	d84d      	bhi.n	12470 <z_cbvprintf_impl+0x2b8>
   123d4:	2a41      	cmp	r2, #65	; 0x41
   123d6:	d003      	beq.n	123e0 <z_cbvprintf_impl+0x228>
   123d8:	3a45      	subs	r2, #69	; 0x45
   123da:	2a02      	cmp	r2, #2
   123dc:	f200 80d1 	bhi.w	12582 <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   123e0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   123e4:	2204      	movs	r2, #4
   123e6:	f362 0302 	bfi	r3, r2, #0, #3
   123ea:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   123ee:	2301      	movs	r3, #1
			break;
   123f0:	e09e      	b.n	12530 <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
   123f2:	fb06 2101 	mla	r1, r6, r1, r2
   123f6:	3930      	subs	r1, #48	; 0x30
   123f8:	4603      	mov	r3, r0
   123fa:	e764      	b.n	122c6 <z_cbvprintf_impl+0x10e>
	switch (*sp) {
   123fc:	2a74      	cmp	r2, #116	; 0x74
   123fe:	d026      	beq.n	1244e <z_cbvprintf_impl+0x296>
   12400:	2a7a      	cmp	r2, #122	; 0x7a
   12402:	d1db      	bne.n	123bc <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
   12404:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12408:	2206      	movs	r2, #6
   1240a:	e00d      	b.n	12428 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
   1240c:	785a      	ldrb	r2, [r3, #1]
   1240e:	2a68      	cmp	r2, #104	; 0x68
   12410:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12414:	d106      	bne.n	12424 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
   12416:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12418:	f361 02c6 	bfi	r2, r1, #3, #4
   1241c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   12420:	1c9f      	adds	r7, r3, #2
   12422:	e7cc      	b.n	123be <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
   12424:	4613      	mov	r3, r2
   12426:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   12428:	f362 03c6 	bfi	r3, r2, #3, #4
   1242c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   12430:	e7c5      	b.n	123be <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
   12432:	785a      	ldrb	r2, [r3, #1]
   12434:	2a6c      	cmp	r2, #108	; 0x6c
   12436:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1243a:	d101      	bne.n	12440 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
   1243c:	2104      	movs	r1, #4
   1243e:	e7eb      	b.n	12418 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
   12440:	4613      	mov	r3, r2
   12442:	2203      	movs	r2, #3
   12444:	e7f0      	b.n	12428 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
   12446:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1244a:	2205      	movs	r2, #5
   1244c:	e7ec      	b.n	12428 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
   1244e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12452:	2207      	movs	r2, #7
   12454:	e7e8      	b.n	12428 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
   12456:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1245a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1245e:	f023 0302 	bic.w	r3, r3, #2
   12462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   12466:	f043 0302 	orr.w	r3, r3, #2
   1246a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   1246e:	e7a6      	b.n	123be <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
   12470:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   12474:	2920      	cmp	r1, #32
   12476:	f200 8084 	bhi.w	12582 <z_cbvprintf_impl+0x3ca>
   1247a:	a001      	add	r0, pc, #4	; (adr r0, 12480 <z_cbvprintf_impl+0x2c8>)
   1247c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12480:	00012545 	.word	0x00012545
   12484:	00012583 	.word	0x00012583
   12488:	00012583 	.word	0x00012583
   1248c:	00012583 	.word	0x00012583
   12490:	00012583 	.word	0x00012583
   12494:	00012583 	.word	0x00012583
   12498:	00012583 	.word	0x00012583
   1249c:	00012583 	.word	0x00012583
   124a0:	00012583 	.word	0x00012583
   124a4:	000123e1 	.word	0x000123e1
   124a8:	00012583 	.word	0x00012583
   124ac:	00012545 	.word	0x00012545
   124b0:	00012505 	.word	0x00012505
   124b4:	000123e1 	.word	0x000123e1
   124b8:	000123e1 	.word	0x000123e1
   124bc:	000123e1 	.word	0x000123e1
   124c0:	00012583 	.word	0x00012583
   124c4:	00012505 	.word	0x00012505
   124c8:	00012583 	.word	0x00012583
   124cc:	00012583 	.word	0x00012583
   124d0:	00012583 	.word	0x00012583
   124d4:	00012583 	.word	0x00012583
   124d8:	0001254d 	.word	0x0001254d
   124dc:	00012545 	.word	0x00012545
   124e0:	00012569 	.word	0x00012569
   124e4:	00012583 	.word	0x00012583
   124e8:	00012583 	.word	0x00012583
   124ec:	00012569 	.word	0x00012569
   124f0:	00012583 	.word	0x00012583
   124f4:	00012545 	.word	0x00012545
   124f8:	00012583 	.word	0x00012583
   124fc:	00012583 	.word	0x00012583
   12500:	00012545 	.word	0x00012545
		conv->specifier_cat = SPECIFIER_SINT;
   12504:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   12508:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1250a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1250e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12512:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12514:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   12518:	bf02      	ittt	eq
   1251a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   1251e:	f041 0101 	orreq.w	r1, r1, #1
   12522:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   12526:	2a63      	cmp	r2, #99	; 0x63
   12528:	d131      	bne.n	1258e <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1252a:	3b00      	subs	r3, #0
   1252c:	bf18      	it	ne
   1252e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   12530:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12534:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12538:	430b      	orrs	r3, r1
   1253a:	f363 0241 	bfi	r2, r3, #1, #1
   1253e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   12542:	e6d8      	b.n	122f6 <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   12544:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   12548:	2002      	movs	r0, #2
   1254a:	e7de      	b.n	1250a <z_cbvprintf_impl+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   1254c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12550:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12554:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   12558:	2103      	movs	r1, #3
   1255a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1255e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   12560:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12564:	4143      	adcs	r3, r0
   12566:	e7e3      	b.n	12530 <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   12568:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1256c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   1256e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12572:	f361 0202 	bfi	r2, r1, #0, #3
   12576:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1257a:	bf14      	ite	ne
   1257c:	2301      	movne	r3, #1
   1257e:	2300      	moveq	r3, #0
   12580:	e7d6      	b.n	12530 <z_cbvprintf_impl+0x378>
		conv->invalid = true;
   12582:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12586:	f043 0301 	orr.w	r3, r3, #1
   1258a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   1258e:	2300      	movs	r3, #0
   12590:	e7ce      	b.n	12530 <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
   12592:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   12596:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12598:	bfb4      	ite	lt
   1259a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   1259e:	f04f 39ff 	movge.w	r9, #4294967295
   125a2:	e6ba      	b.n	1231a <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
   125a4:	079b      	lsls	r3, r3, #30
   125a6:	f57f aec7 	bpl.w	12338 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
   125aa:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   125ae:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   125b2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   125b4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   125b8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   125bc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   125c0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   125c2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   125c6:	d135      	bne.n	12634 <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
   125c8:	1ecb      	subs	r3, r1, #3
   125ca:	2b04      	cmp	r3, #4
   125cc:	d822      	bhi.n	12614 <z_cbvprintf_impl+0x45c>
   125ce:	e8df f003 	tbb	[pc, r3]
   125d2:	0903      	.short	0x0903
   125d4:	2109      	.short	0x2109
   125d6:	21          	.byte	0x21
   125d7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   125d8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   125dc:	17da      	asrs	r2, r3, #31
   125de:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   125e2:	e006      	b.n	125f2 <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
   125e4:	3407      	adds	r4, #7
   125e6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   125ea:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   125ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   125f2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   125f6:	f013 0603 	ands.w	r6, r3, #3
   125fa:	d059      	beq.n	126b0 <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
   125fc:	9802      	ldr	r0, [sp, #8]
   125fe:	463b      	mov	r3, r7
   12600:	4652      	mov	r2, sl
   12602:	4659      	mov	r1, fp
   12604:	f013 fada 	bl	25bbc <outs>
   12608:	2800      	cmp	r0, #0
   1260a:	f2c0 8146 	blt.w	1289a <z_cbvprintf_impl+0x6e2>
   1260e:	4405      	add	r5, r0
			continue;
   12610:	46ba      	mov	sl, r7
   12612:	e5d9      	b.n	121c8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12614:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12618:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1261a:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1261e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   12622:	d102      	bne.n	1262a <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
   12624:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
   12628:	e7d8      	b.n	125dc <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
   1262a:	2902      	cmp	r1, #2
   1262c:	d1e1      	bne.n	125f2 <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
   1262e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   12632:	e7d3      	b.n	125dc <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12634:	2b02      	cmp	r3, #2
   12636:	d129      	bne.n	1268c <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
   12638:	1ecb      	subs	r3, r1, #3
   1263a:	2b04      	cmp	r3, #4
   1263c:	d813      	bhi.n	12666 <z_cbvprintf_impl+0x4ae>
   1263e:	e8df f003 	tbb	[pc, r3]
   12642:	0a03      	.short	0x0a03
   12644:	120a      	.short	0x120a
   12646:	12          	.byte	0x12
   12647:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   12648:	6822      	ldr	r2, [r4, #0]
   1264a:	920a      	str	r2, [sp, #40]	; 0x28
   1264c:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   1264e:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   12650:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   12652:	4604      	mov	r4, r0
   12654:	e7cd      	b.n	125f2 <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
   12656:	1de0      	adds	r0, r4, #7
   12658:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   1265c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   12660:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   12664:	e7f5      	b.n	12652 <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
   12666:	f854 3b04 	ldr.w	r3, [r4], #4
   1266a:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1266c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1266e:	f04f 0300 	mov.w	r3, #0
   12672:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   12674:	d105      	bne.n	12682 <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
   12676:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   1267a:	930a      	str	r3, [sp, #40]	; 0x28
   1267c:	2300      	movs	r3, #0
   1267e:	930b      	str	r3, [sp, #44]	; 0x2c
   12680:	e7b7      	b.n	125f2 <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
   12682:	2902      	cmp	r1, #2
   12684:	d1b5      	bne.n	125f2 <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
   12686:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1268a:	e7f6      	b.n	1267a <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
   1268c:	2b04      	cmp	r3, #4
   1268e:	d109      	bne.n	126a4 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
   12690:	1de3      	adds	r3, r4, #7
   12692:	f023 0307 	bic.w	r3, r3, #7
   12696:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   1269a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1269e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   126a2:	e7a6      	b.n	125f2 <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   126a4:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   126a6:	bf04      	itt	eq
   126a8:	f854 3b04 	ldreq.w	r3, [r4], #4
   126ac:	930a      	streq	r3, [sp, #40]	; 0x28
   126ae:	e7a0      	b.n	125f2 <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
   126b0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   126b4:	2878      	cmp	r0, #120	; 0x78
   126b6:	d8ab      	bhi.n	12610 <z_cbvprintf_impl+0x458>
   126b8:	2862      	cmp	r0, #98	; 0x62
   126ba:	d822      	bhi.n	12702 <z_cbvprintf_impl+0x54a>
   126bc:	2825      	cmp	r0, #37	; 0x25
   126be:	f43f ad8c 	beq.w	121da <z_cbvprintf_impl+0x22>
   126c2:	2858      	cmp	r0, #88	; 0x58
   126c4:	d1a4      	bne.n	12610 <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
   126c6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   126ca:	9300      	str	r3, [sp, #0]
   126cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   126d0:	ab04      	add	r3, sp, #16
   126d2:	aa0c      	add	r2, sp, #48	; 0x30
   126d4:	f013 fa2c 	bl	25b30 <encode_uint>
   126d8:	4682      	mov	sl, r0
			if (precision >= 0) {
   126da:	f1b8 0f00 	cmp.w	r8, #0
   126de:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   126e2:	db0c      	blt.n	126fe <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
   126e4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   126e8:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   126ec:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   126f0:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   126f2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   126f6:	d902      	bls.n	126fe <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
   126f8:	eba8 0303 	sub.w	r3, r8, r3
   126fc:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   126fe:	4680      	mov	r8, r0
   12700:	e03e      	b.n	12780 <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
   12702:	3863      	subs	r0, #99	; 0x63
   12704:	2815      	cmp	r0, #21
   12706:	d883      	bhi.n	12610 <z_cbvprintf_impl+0x458>
   12708:	a201      	add	r2, pc, #4	; (adr r2, 12710 <z_cbvprintf_impl+0x558>)
   1270a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1270e:	bf00      	nop
   12710:	00012791 	.word	0x00012791
   12714:	000127f5 	.word	0x000127f5
   12718:	00012611 	.word	0x00012611
   1271c:	00012611 	.word	0x00012611
   12720:	00012611 	.word	0x00012611
   12724:	00012611 	.word	0x00012611
   12728:	000127f5 	.word	0x000127f5
   1272c:	00012611 	.word	0x00012611
   12730:	00012611 	.word	0x00012611
   12734:	00012611 	.word	0x00012611
   12738:	00012611 	.word	0x00012611
   1273c:	0001284f 	.word	0x0001284f
   12740:	0001281d 	.word	0x0001281d
   12744:	00012821 	.word	0x00012821
   12748:	00012611 	.word	0x00012611
   1274c:	00012611 	.word	0x00012611
   12750:	00012769 	.word	0x00012769
   12754:	00012611 	.word	0x00012611
   12758:	0001281d 	.word	0x0001281d
   1275c:	00012611 	.word	0x00012611
   12760:	00012611 	.word	0x00012611
   12764:	0001281d 	.word	0x0001281d
			if (precision >= 0) {
   12768:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   1276c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   12770:	db0a      	blt.n	12788 <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
   12772:	4641      	mov	r1, r8
   12774:	4650      	mov	r0, sl
   12776:	f014 f9b5 	bl	26ae4 <strnlen>
			bpe = bps + len;
   1277a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   1277e:	2600      	movs	r6, #0
		if (bps == NULL) {
   12780:	f1ba 0f00 	cmp.w	sl, #0
   12784:	d10c      	bne.n	127a0 <z_cbvprintf_impl+0x5e8>
   12786:	e743      	b.n	12610 <z_cbvprintf_impl+0x458>
				len = strlen(bps);
   12788:	4650      	mov	r0, sl
   1278a:	f014 f9a4 	bl	26ad6 <strlen>
   1278e:	e7f4      	b.n	1277a <z_cbvprintf_impl+0x5c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12792:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   12796:	2600      	movs	r6, #0
			bps = buf;
   12798:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
   1279c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
   127a0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   127a4:	b106      	cbz	r6, 127a8 <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
   127a6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   127a8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   127ac:	06d0      	lsls	r0, r2, #27
   127ae:	d568      	bpl.n	12882 <z_cbvprintf_impl+0x6ca>
			nj_len += 2U;
   127b0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   127b2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   127b4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   127b6:	bf48      	it	mi
   127b8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   127ba:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   127bc:	bf48      	it	mi
   127be:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   127c0:	f1b9 0f00 	cmp.w	r9, #0
   127c4:	dd76      	ble.n	128b4 <z_cbvprintf_impl+0x6fc>
			if (!conv->flag_dash) {
   127c6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   127ca:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   127ce:	f3c2 0380 	ubfx	r3, r2, #2, #1
   127d2:	9303      	str	r3, [sp, #12]
   127d4:	0753      	lsls	r3, r2, #29
   127d6:	d46d      	bmi.n	128b4 <z_cbvprintf_impl+0x6fc>
				if (conv->flag_zero) {
   127d8:	0650      	lsls	r0, r2, #25
   127da:	d561      	bpl.n	128a0 <z_cbvprintf_impl+0x6e8>
					if (sign != 0) {
   127dc:	b146      	cbz	r6, 127f0 <z_cbvprintf_impl+0x638>
						OUTC(sign);
   127de:	9b02      	ldr	r3, [sp, #8]
   127e0:	4659      	mov	r1, fp
   127e2:	4630      	mov	r0, r6
   127e4:	4798      	blx	r3
   127e6:	2800      	cmp	r0, #0
   127e8:	db57      	blt.n	1289a <z_cbvprintf_impl+0x6e2>
						sign = 0;
   127ea:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   127ec:	3501      	adds	r5, #1
						sign = 0;
   127ee:	461e      	mov	r6, r3
					pad = '0';
   127f0:	2330      	movs	r3, #48	; 0x30
   127f2:	e056      	b.n	128a2 <z_cbvprintf_impl+0x6ea>
			if (conv->flag_plus) {
   127f4:	071e      	lsls	r6, r3, #28
   127f6:	d40f      	bmi.n	12818 <z_cbvprintf_impl+0x660>
				sign = ' ';
   127f8:	f013 0610 	ands.w	r6, r3, #16
   127fc:	bf18      	it	ne
   127fe:	2620      	movne	r6, #32
			sint = value->sint;
   12800:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   12804:	2b00      	cmp	r3, #0
   12806:	f6bf af5e 	bge.w	126c6 <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
   1280a:	4252      	negs	r2, r2
   1280c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12810:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   12814:	262d      	movs	r6, #45	; 0x2d
   12816:	e756      	b.n	126c6 <z_cbvprintf_impl+0x50e>
				sign = '+';
   12818:	262b      	movs	r6, #43	; 0x2b
   1281a:	e7f1      	b.n	12800 <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
   1281c:	2600      	movs	r6, #0
   1281e:	e752      	b.n	126c6 <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
   12820:	980a      	ldr	r0, [sp, #40]	; 0x28
   12822:	b340      	cbz	r0, 12876 <z_cbvprintf_impl+0x6be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12824:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   12828:	9300      	str	r3, [sp, #0]
   1282a:	aa0c      	add	r2, sp, #48	; 0x30
   1282c:	ab04      	add	r3, sp, #16
   1282e:	2100      	movs	r1, #0
   12830:	f013 f97e 	bl	25b30 <encode_uint>
				conv->altform_0c = true;
   12834:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   12838:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1283c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12840:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12844:	4682      	mov	sl, r0
				conv->altform_0c = true;
   12846:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   1284a:	2600      	movs	r6, #0
				goto prec_int_pad0;
   1284c:	e745      	b.n	126da <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
   1284e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   12850:	2907      	cmp	r1, #7
   12852:	f63f aedd 	bhi.w	12610 <z_cbvprintf_impl+0x458>
   12856:	e8df f001 	tbb	[pc, r1]
   1285a:	040c      	.short	0x040c
   1285c:	08080c06 	.word	0x08080c06
   12860:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   12862:	701d      	strb	r5, [r3, #0]
		break;
   12864:	e6d4      	b.n	12610 <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
   12866:	801d      	strh	r5, [r3, #0]
		break;
   12868:	e6d2      	b.n	12610 <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
   1286a:	17ea      	asrs	r2, r5, #31
   1286c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   12870:	e6ce      	b.n	12610 <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12872:	601d      	str	r5, [r3, #0]
		break;
   12874:	e6cc      	b.n	12610 <z_cbvprintf_impl+0x458>
			bps = "(nil)";
   12876:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 12940 <z_cbvprintf_impl+0x788>
   1287a:	4606      	mov	r6, r0
			bpe = bps + 5;
   1287c:	f10a 0805 	add.w	r8, sl, #5
   12880:	e78e      	b.n	127a0 <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
   12882:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   12884:	bf48      	it	mi
   12886:	3301      	addmi	r3, #1
   12888:	e793      	b.n	127b2 <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
   1288a:	4618      	mov	r0, r3
   1288c:	9303      	str	r3, [sp, #12]
   1288e:	4659      	mov	r1, fp
   12890:	9b02      	ldr	r3, [sp, #8]
   12892:	4798      	blx	r3
   12894:	2800      	cmp	r0, #0
   12896:	9b03      	ldr	r3, [sp, #12]
   12898:	da04      	bge.n	128a4 <z_cbvprintf_impl+0x6ec>
#undef OUTS
#undef OUTC
}
   1289a:	b011      	add	sp, #68	; 0x44
   1289c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   128a0:	2320      	movs	r3, #32
   128a2:	444d      	add	r5, r9
   128a4:	464a      	mov	r2, r9
				while (width-- > 0) {
   128a6:	2a00      	cmp	r2, #0
   128a8:	eba5 0109 	sub.w	r1, r5, r9
   128ac:	f109 39ff 	add.w	r9, r9, #4294967295
   128b0:	dceb      	bgt.n	1288a <z_cbvprintf_impl+0x6d2>
   128b2:	460d      	mov	r5, r1
		if (sign != 0) {
   128b4:	b136      	cbz	r6, 128c4 <z_cbvprintf_impl+0x70c>
			OUTC(sign);
   128b6:	9b02      	ldr	r3, [sp, #8]
   128b8:	4659      	mov	r1, fp
   128ba:	4630      	mov	r0, r6
   128bc:	4798      	blx	r3
   128be:	2800      	cmp	r0, #0
   128c0:	dbeb      	blt.n	1289a <z_cbvprintf_impl+0x6e2>
   128c2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   128c4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   128c8:	06d9      	lsls	r1, r3, #27
   128ca:	d401      	bmi.n	128d0 <z_cbvprintf_impl+0x718>
   128cc:	071a      	lsls	r2, r3, #28
   128ce:	d506      	bpl.n	128de <z_cbvprintf_impl+0x726>
				OUTC('0');
   128d0:	9b02      	ldr	r3, [sp, #8]
   128d2:	4659      	mov	r1, fp
   128d4:	2030      	movs	r0, #48	; 0x30
   128d6:	4798      	blx	r3
   128d8:	2800      	cmp	r0, #0
   128da:	dbde      	blt.n	1289a <z_cbvprintf_impl+0x6e2>
   128dc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   128de:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   128e2:	06db      	lsls	r3, r3, #27
   128e4:	d507      	bpl.n	128f6 <z_cbvprintf_impl+0x73e>
				OUTC(conv->specifier);
   128e6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   128ea:	9b02      	ldr	r3, [sp, #8]
   128ec:	4659      	mov	r1, fp
   128ee:	4798      	blx	r3
   128f0:	2800      	cmp	r0, #0
   128f2:	dbd2      	blt.n	1289a <z_cbvprintf_impl+0x6e2>
   128f4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   128f6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   128f8:	442e      	add	r6, r5
   128fa:	1b73      	subs	r3, r6, r5
   128fc:	2b00      	cmp	r3, #0
   128fe:	dc16      	bgt.n	1292e <z_cbvprintf_impl+0x776>
			OUTS(bps, bpe);
   12900:	9802      	ldr	r0, [sp, #8]
   12902:	4643      	mov	r3, r8
   12904:	4652      	mov	r2, sl
   12906:	4659      	mov	r1, fp
   12908:	f013 f958 	bl	25bbc <outs>
   1290c:	2800      	cmp	r0, #0
   1290e:	dbc4      	blt.n	1289a <z_cbvprintf_impl+0x6e2>
   12910:	4405      	add	r5, r0
		while (width > 0) {
   12912:	44a9      	add	r9, r5
   12914:	eba9 0305 	sub.w	r3, r9, r5
   12918:	2b00      	cmp	r3, #0
   1291a:	f77f ae79 	ble.w	12610 <z_cbvprintf_impl+0x458>
			OUTC(' ');
   1291e:	9b02      	ldr	r3, [sp, #8]
   12920:	4659      	mov	r1, fp
   12922:	2020      	movs	r0, #32
   12924:	4798      	blx	r3
   12926:	2800      	cmp	r0, #0
   12928:	dbb7      	blt.n	1289a <z_cbvprintf_impl+0x6e2>
   1292a:	3501      	adds	r5, #1
			--width;
   1292c:	e7f2      	b.n	12914 <z_cbvprintf_impl+0x75c>
				OUTC('0');
   1292e:	9b02      	ldr	r3, [sp, #8]
   12930:	4659      	mov	r1, fp
   12932:	2030      	movs	r0, #48	; 0x30
   12934:	4798      	blx	r3
   12936:	2800      	cmp	r0, #0
   12938:	dbaf      	blt.n	1289a <z_cbvprintf_impl+0x6e2>
   1293a:	3501      	adds	r5, #1
   1293c:	e7dd      	b.n	128fa <z_cbvprintf_impl+0x742>
   1293e:	bf00      	nop
   12940:	0002b1f8 	.word	0x0002b1f8

00012944 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   12944:	f00e ba0a 	b.w	20d5c <SystemInit>

00012948 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   12948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1294c:	e9cd 0100 	strd	r0, r1, [sp]
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
		printk("%c: ", z_log_minimal_level_to_char(level));
   12950:	f8df 8094 	ldr.w	r8, [pc, #148]	; 129e8 <z_log_minimal_hexdump_print+0xa0>
			printk("   ");
   12954:	f8df 9094 	ldr.w	r9, [pc, #148]	; 129ec <z_log_minimal_hexdump_print+0xa4>
{
   12958:	4616      	mov	r6, r2
	while (size > 0U) {
   1295a:	4614      	mov	r4, r2
   1295c:	9b01      	ldr	r3, [sp, #4]
   1295e:	199d      	adds	r5, r3, r6
   12960:	1b2d      	subs	r5, r5, r4
   12962:	b914      	cbnz	r4, 1296a <z_log_minimal_hexdump_print+0x22>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   12964:	b003      	add	sp, #12
   12966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   1296a:	9b00      	ldr	r3, [sp, #0]
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   1296c:	4f20      	ldr	r7, [pc, #128]	; (129f0 <z_log_minimal_hexdump_print+0xa8>)
   1296e:	3b01      	subs	r3, #1
   12970:	2b03      	cmp	r3, #3
   12972:	bf96      	itet	ls
   12974:	4a1f      	ldrls	r2, [pc, #124]	; (129f4 <z_log_minimal_hexdump_print+0xac>)
   12976:	213f      	movhi	r1, #63	; 0x3f
   12978:	5cd1      	ldrbls	r1, [r2, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   1297a:	4640      	mov	r0, r8
   1297c:	f012 ff4a 	bl	25814 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12980:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   12984:	455c      	cmp	r4, fp
   12986:	d926      	bls.n	129d6 <z_log_minimal_hexdump_print+0x8e>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   12988:	f815 100b 	ldrb.w	r1, [r5, fp]
   1298c:	4638      	mov	r0, r7
   1298e:	f012 ff41 	bl	25814 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12992:	f10b 0b01 	add.w	fp, fp, #1
   12996:	f1bb 0f08 	cmp.w	fp, #8
   1299a:	d1f3      	bne.n	12984 <z_log_minimal_hexdump_print+0x3c>
	printk("|");
   1299c:	4816      	ldr	r0, [pc, #88]	; (129f8 <z_log_minimal_hexdump_print+0xb0>)
			printk(" ");
   1299e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 129fc <z_log_minimal_hexdump_print+0xb4>
			printk("%c", isprint((int)c) != 0 ? c : '.');
   129a2:	f8df b05c 	ldr.w	fp, [pc, #92]	; 12a00 <z_log_minimal_hexdump_print+0xb8>
	printk("|");
   129a6:	f012 ff35 	bl	25814 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   129aa:	2700      	movs	r7, #0
		if (i < length) {
   129ac:	42bc      	cmp	r4, r7
   129ae:	d916      	bls.n	129de <z_log_minimal_hexdump_print+0x96>
			unsigned char c = data[i];
   129b0:	5de9      	ldrb	r1, [r5, r7]
	return (int)((((unsigned)c) >= ' ') &&
   129b2:	f1a1 0220 	sub.w	r2, r1, #32
   129b6:	2a5f      	cmp	r2, #95	; 0x5f
			printk("%c", isprint((int)c) != 0 ? c : '.');
   129b8:	bf28      	it	cs
   129ba:	212e      	movcs	r1, #46	; 0x2e
   129bc:	4658      	mov	r0, fp
   129be:	f012 ff29 	bl	25814 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   129c2:	3701      	adds	r7, #1
   129c4:	2f08      	cmp	r7, #8
   129c6:	d1f1      	bne.n	129ac <z_log_minimal_hexdump_print+0x64>
	printk("\n");
   129c8:	480e      	ldr	r0, [pc, #56]	; (12a04 <z_log_minimal_hexdump_print+0xbc>)
   129ca:	f012 ff23 	bl	25814 <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   129ce:	2c07      	cmp	r4, #7
   129d0:	d9c8      	bls.n	12964 <z_log_minimal_hexdump_print+0x1c>
		size -= HEXDUMP_BYTES_IN_LINE;
   129d2:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   129d4:	e7c2      	b.n	1295c <z_log_minimal_hexdump_print+0x14>
			printk("   ");
   129d6:	4648      	mov	r0, r9
   129d8:	f012 ff1c 	bl	25814 <printk>
   129dc:	e7d9      	b.n	12992 <z_log_minimal_hexdump_print+0x4a>
			printk(" ");
   129de:	4650      	mov	r0, sl
   129e0:	f012 ff18 	bl	25814 <printk>
   129e4:	e7ed      	b.n	129c2 <z_log_minimal_hexdump_print+0x7a>
   129e6:	bf00      	nop
   129e8:	0002b1fe 	.word	0x0002b1fe
   129ec:	0002b209 	.word	0x0002b209
   129f0:	0002b203 	.word	0x0002b203
   129f4:	0002b212 	.word	0x0002b212
   129f8:	0002b20d 	.word	0x0002b20d
   129fc:	0002b20b 	.word	0x0002b20b
   12a00:	0002b20f 	.word	0x0002b20f
   12a04:	0002e264 	.word	0x0002e264

00012a08 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   12a08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12a0c:	460f      	mov	r7, r1
   12a0e:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12a10:	2108      	movs	r1, #8
   12a12:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   12a14:	f8df 9050 	ldr.w	r9, [pc, #80]	; 12a68 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12a18:	f013 f993 	bl	25d42 <nvs_al_size.isra.0>
	*addr -= ate_size;
   12a1c:	683c      	ldr	r4, [r7, #0]
   12a1e:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12a20:	4680      	mov	r8, r0
	*addr -= ate_size;
   12a22:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   12a24:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   12a28:	42ac      	cmp	r4, r5
   12a2a:	d803      	bhi.n	12a34 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   12a2c:	2000      	movs	r0, #0
}
   12a2e:	b003      	add	sp, #12
   12a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12a34:	2308      	movs	r3, #8
   12a36:	466a      	mov	r2, sp
   12a38:	4621      	mov	r1, r4
   12a3a:	4630      	mov	r0, r6
   12a3c:	f013 f8f6 	bl	25c2c <nvs_flash_rd>
		if (rc) {
   12a40:	2800      	cmp	r0, #0
   12a42:	d1f4      	bne.n	12a2e <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   12a44:	4669      	mov	r1, sp
   12a46:	4630      	mov	r0, r6
   12a48:	f013 f985 	bl	25d56 <nvs_ate_valid>
   12a4c:	b140      	cbz	r0, 12a60 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   12a4e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   12a52:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   12a56:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   12a58:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   12a5c:	4413      	add	r3, r2
   12a5e:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   12a60:	eba4 0408 	sub.w	r4, r4, r8
   12a64:	e7e0      	b.n	12a28 <nvs_recover_last_ate+0x20>
   12a66:	bf00      	nop
   12a68:	ffff0000 	.word	0xffff0000

00012a6c <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   12a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a70:	4604      	mov	r4, r0
   12a72:	b089      	sub	sp, #36	; 0x24

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   12a74:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   12a78:	4638      	mov	r0, r7
   12a7a:	f016 ff9b 	bl	299b4 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   12a7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   12a80:	6883      	ldr	r3, [r0, #8]
   12a82:	68db      	ldr	r3, [r3, #12]
   12a84:	4798      	blx	r3
   12a86:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   12a88:	b948      	cbnz	r0, 12a9e <nvs_mount+0x32>
		LOG_ERR("Could not obtain flash parameters");
   12a8a:	48a8      	ldr	r0, [pc, #672]	; (12d2c <nvs_mount+0x2c0>)
   12a8c:	2145      	movs	r1, #69	; 0x45
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
   12a8e:	f013 f8c0 	bl	25c12 <z_log_minimal_printk>
		return -EINVAL;
   12a92:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   12a96:	4628      	mov	r0, r5
   12a98:	b009      	add	sp, #36	; 0x24
   12a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   12a9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   12aa0:	6883      	ldr	r3, [r0, #8]
   12aa2:	68db      	ldr	r3, [r3, #12]
   12aa4:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   12aa6:	6803      	ldr	r3, [r0, #0]
   12aa8:	3b01      	subs	r3, #1
   12aaa:	2b1f      	cmp	r3, #31
   12aac:	d902      	bls.n	12ab4 <nvs_mount+0x48>
		LOG_ERR("Unsupported write block size");
   12aae:	48a0      	ldr	r0, [pc, #640]	; (12d30 <nvs_mount+0x2c4>)
   12ab0:	2145      	movs	r1, #69	; 0x45
   12ab2:	e7ec      	b.n	12a8e <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   12ab4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   12ab6:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   12ab8:	aa05      	add	r2, sp, #20
   12aba:	f016 fc23 	bl	29304 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   12abe:	b110      	cbz	r0, 12ac6 <nvs_mount+0x5a>
		LOG_ERR("Unable to get page info");
   12ac0:	489c      	ldr	r0, [pc, #624]	; (12d34 <nvs_mount+0x2c8>)
   12ac2:	2145      	movs	r1, #69	; 0x45
   12ac4:	e7e3      	b.n	12a8e <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
   12ac6:	89a5      	ldrh	r5, [r4, #12]
   12ac8:	b12d      	cbz	r5, 12ad6 <nvs_mount+0x6a>
   12aca:	9b06      	ldr	r3, [sp, #24]
   12acc:	fbb5 f2f3 	udiv	r2, r5, r3
   12ad0:	fb03 5512 	mls	r5, r3, r2, r5
   12ad4:	b115      	cbz	r5, 12adc <nvs_mount+0x70>
		LOG_ERR("Invalid sector size");
   12ad6:	4898      	ldr	r0, [pc, #608]	; (12d38 <nvs_mount+0x2cc>)
   12ad8:	2145      	movs	r1, #69	; 0x45
   12ada:	e7d8      	b.n	12a8e <nvs_mount+0x22>
	if (fs->sector_count < 2) {
   12adc:	89e3      	ldrh	r3, [r4, #14]
   12ade:	2b01      	cmp	r3, #1
   12ae0:	d802      	bhi.n	12ae8 <nvs_mount+0x7c>
		LOG_ERR("Configuration error - sector count");
   12ae2:	4896      	ldr	r0, [pc, #600]	; (12d3c <nvs_mount+0x2d0>)
   12ae4:	2145      	movs	r1, #69	; 0x45
   12ae6:	e7d2      	b.n	12a8e <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   12ae8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   12aea:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   12aec:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   12af0:	f04f 33ff 	mov.w	r3, #4294967295
   12af4:	f04f 32ff 	mov.w	r2, #4294967295
   12af8:	4638      	mov	r0, r7
   12afa:	f00f fbed 	bl	222d8 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12afe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12b00:	2108      	movs	r1, #8
   12b02:	f013 f91e 	bl	25d42 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   12b06:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12b08:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   12b0a:	89e3      	ldrh	r3, [r4, #14]
   12b0c:	fa1f fa85 	uxth.w	sl, r5
   12b10:	4553      	cmp	r3, sl
   12b12:	d845      	bhi.n	12ba0 <nvs_mount+0x134>
	if (closed_sectors == fs->sector_count) {
   12b14:	89e3      	ldrh	r3, [r4, #14]
   12b16:	454b      	cmp	r3, r9
   12b18:	f000 80d7 	beq.w	12cca <nvs_mount+0x25e>
	if (i == fs->sector_count) {
   12b1c:	4553      	cmp	r3, sl
   12b1e:	d10b      	bne.n	12b38 <nvs_mount+0xcc>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   12b20:	9900      	ldr	r1, [sp, #0]
   12b22:	2308      	movs	r3, #8
   12b24:	4642      	mov	r2, r8
   12b26:	1b89      	subs	r1, r1, r6
   12b28:	4620      	mov	r0, r4
   12b2a:	f013 f8b7 	bl	25c9c <nvs_flash_cmp_const>
		if (!rc) {
   12b2e:	b918      	cbnz	r0, 12b38 <nvs_mount+0xcc>
			nvs_sector_advance(fs, &addr);
   12b30:	89e0      	ldrh	r0, [r4, #14]
   12b32:	4669      	mov	r1, sp
   12b34:	f013 f8fa 	bl	25d2c <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   12b38:	4669      	mov	r1, sp
   12b3a:	4620      	mov	r0, r4
   12b3c:	f7ff ff64 	bl	12a08 <nvs_recover_last_ate>
	if (rc) {
   12b40:	4605      	mov	r5, r0
   12b42:	2800      	cmp	r0, #0
   12b44:	f040 80c3 	bne.w	12cce <nvs_mount+0x262>
	fs->ate_wra = addr;
   12b48:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   12b4a:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 12d40 <nvs_mount+0x2d4>
	fs->ate_wra = addr;
   12b4e:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   12b50:	ea03 0309 	and.w	r3, r3, r9
   12b54:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   12b56:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   12b5a:	4299      	cmp	r1, r3
   12b5c:	d30e      	bcc.n	12b7c <nvs_mount+0x110>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12b5e:	2308      	movs	r3, #8
   12b60:	aa01      	add	r2, sp, #4
   12b62:	4620      	mov	r0, r4
   12b64:	f013 f862 	bl	25c2c <nvs_flash_rd>
		if (rc) {
   12b68:	b9c0      	cbnz	r0, 12b9c <nvs_mount+0x130>
   12b6a:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   12b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
   12b70:	4590      	cmp	r8, r2
   12b72:	f040 80f1 	bne.w	12d58 <nvs_mount+0x2ec>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   12b76:	3001      	adds	r0, #1
   12b78:	2808      	cmp	r0, #8
   12b7a:	d1f7      	bne.n	12b6c <nvs_mount+0x100>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12b7c:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   12b7e:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12b80:	0c1b      	lsrs	r3, r3, #16
   12b82:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   12b84:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12b86:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   12b88:	f013 f8d0 	bl	25d2c <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   12b8c:	89a3      	ldrh	r3, [r4, #12]
   12b8e:	9900      	ldr	r1, [sp, #0]
   12b90:	4642      	mov	r2, r8
   12b92:	4620      	mov	r0, r4
   12b94:	f013 f882 	bl	25c9c <nvs_flash_cmp_const>
	if (rc < 0) {
   12b98:	2800      	cmp	r0, #0
   12b9a:	da26      	bge.n	12bea <nvs_mount+0x17e>
   12b9c:	4605      	mov	r5, r0
   12b9e:	e096      	b.n	12cce <nvs_mount+0x262>
		       (uint16_t)(fs->sector_size - ate_size);
   12ba0:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   12ba2:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   12ba4:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   12ba6:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12baa:	4642      	mov	r2, r8
   12bac:	2308      	movs	r3, #8
   12bae:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   12bb0:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12bb2:	f013 f873 	bl	25c9c <nvs_flash_cmp_const>
		if (rc) {
   12bb6:	b178      	cbz	r0, 12bd8 <nvs_mount+0x16c>
			nvs_sector_advance(fs, &addr);
   12bb8:	89e0      	ldrh	r0, [r4, #14]
   12bba:	4669      	mov	r1, sp
   12bbc:	f013 f8b6 	bl	25d2c <nvs_sector_advance.isra.0>
			closed_sectors++;
   12bc0:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12bc4:	9900      	ldr	r1, [sp, #0]
   12bc6:	2308      	movs	r3, #8
   12bc8:	4642      	mov	r2, r8
   12bca:	4620      	mov	r0, r4
			closed_sectors++;
   12bcc:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12bd0:	f013 f864 	bl	25c9c <nvs_flash_cmp_const>
			if (!rc) {
   12bd4:	2800      	cmp	r0, #0
   12bd6:	d09d      	beq.n	12b14 <nvs_mount+0xa8>
	for (i = 0; i < fs->sector_count; i++) {
   12bd8:	3501      	adds	r5, #1
   12bda:	e796      	b.n	12b0a <nvs_mount+0x9e>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12bdc:	f1ba 0f00 	cmp.w	sl, #0
   12be0:	f000 80d2 	beq.w	12d88 <nvs_mount+0x31c>
				rc = -ESPIPE;
   12be4:	f06f 051c 	mvn.w	r5, #28
   12be8:	e071      	b.n	12cce <nvs_mount+0x262>
	if (rc) {
   12bea:	d049      	beq.n	12c80 <nvs_mount+0x214>
		addr = fs->ate_wra + ate_size;
   12bec:	6863      	ldr	r3, [r4, #4]
   12bee:	4433      	add	r3, r6
   12bf0:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   12bf2:	f64f 78ff 	movw	r8, #65535	; 0xffff
   12bf6:	9900      	ldr	r1, [sp, #0]
   12bf8:	89a3      	ldrh	r3, [r4, #12]
   12bfa:	b28a      	uxth	r2, r1
   12bfc:	1b9b      	subs	r3, r3, r6
   12bfe:	429a      	cmp	r2, r3
   12c00:	d319      	bcc.n	12c36 <nvs_mount+0x1ca>
		LOG_INF("No GC Done marker found: restarting gc");
   12c02:	4850      	ldr	r0, [pc, #320]	; (12d44 <nvs_mount+0x2d8>)
   12c04:	2149      	movs	r1, #73	; 0x49
   12c06:	f013 f804 	bl	25c12 <z_log_minimal_printk>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   12c0a:	6861      	ldr	r1, [r4, #4]
   12c0c:	4620      	mov	r0, r4
   12c0e:	f013 f86a 	bl	25ce6 <nvs_flash_erase_sector>
		if (rc) {
   12c12:	2800      	cmp	r0, #0
   12c14:	d1c2      	bne.n	12b9c <nvs_mount+0x130>
		fs->ate_wra &= ADDR_SECT_MASK;
   12c16:	6863      	ldr	r3, [r4, #4]
   12c18:	4a49      	ldr	r2, [pc, #292]	; (12d40 <nvs_mount+0x2d4>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   12c1a:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   12c1c:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   12c1e:	440b      	add	r3, r1
   12c20:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   12c24:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   12c26:	4013      	ands	r3, r2
   12c28:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   12c2a:	4620      	mov	r0, r4
   12c2c:	f013 f988 	bl	25f40 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   12c30:	2800      	cmp	r0, #0
   12c32:	d040      	beq.n	12cb6 <nvs_mount+0x24a>
   12c34:	e7b2      	b.n	12b9c <nvs_mount+0x130>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12c36:	2308      	movs	r3, #8
   12c38:	aa03      	add	r2, sp, #12
   12c3a:	4620      	mov	r0, r4
   12c3c:	f012 fff6 	bl	25c2c <nvs_flash_rd>
			if (rc) {
   12c40:	2800      	cmp	r0, #0
   12c42:	d1ab      	bne.n	12b9c <nvs_mount+0x130>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   12c44:	a903      	add	r1, sp, #12
   12c46:	4620      	mov	r0, r4
   12c48:	f013 f885 	bl	25d56 <nvs_ate_valid>
   12c4c:	b138      	cbz	r0, 12c5e <nvs_mount+0x1f2>
   12c4e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   12c52:	4543      	cmp	r3, r8
   12c54:	d103      	bne.n	12c5e <nvs_mount+0x1f2>
			    (gc_done_ate.id == 0xffff) &&
   12c56:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   12c5a:	2b00      	cmp	r3, #0
   12c5c:	d054      	beq.n	12d08 <nvs_mount+0x29c>
			addr += ate_size;
   12c5e:	9b00      	ldr	r3, [sp, #0]
   12c60:	4433      	add	r3, r6
   12c62:	9300      	str	r3, [sp, #0]
   12c64:	e7c7      	b.n	12bf6 <nvs_mount+0x18a>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   12c66:	1a5b      	subs	r3, r3, r1
   12c68:	4642      	mov	r2, r8
   12c6a:	4620      	mov	r0, r4
   12c6c:	f013 f816 	bl	25c9c <nvs_flash_cmp_const>
		if (rc < 0) {
   12c70:	2800      	cmp	r0, #0
   12c72:	db93      	blt.n	12b9c <nvs_mount+0x130>
		if (!rc) {
   12c74:	d008      	beq.n	12c88 <nvs_mount+0x21c>
		fs->data_wra += fs->flash_parameters->write_block_size;
   12c76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   12c78:	68a3      	ldr	r3, [r4, #8]
   12c7a:	6812      	ldr	r2, [r2, #0]
   12c7c:	4413      	add	r3, r2
   12c7e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   12c80:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   12c84:	428b      	cmp	r3, r1
   12c86:	d8ee      	bhi.n	12c66 <nvs_mount+0x1fa>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   12c88:	6861      	ldr	r1, [r4, #4]
   12c8a:	89a3      	ldrh	r3, [r4, #12]
   12c8c:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   12c90:	429a      	cmp	r2, r3
   12c92:	d1cd      	bne.n	12c30 <nvs_mount+0x1c4>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   12c94:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 12d40 <nvs_mount+0x2d4>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   12c98:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   12c9a:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   12c9e:	4293      	cmp	r3, r2
   12ca0:	d0c6      	beq.n	12c30 <nvs_mount+0x1c4>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   12ca2:	4620      	mov	r0, r4
   12ca4:	f013 f81f 	bl	25ce6 <nvs_flash_erase_sector>
		if (rc) {
   12ca8:	2800      	cmp	r0, #0
   12caa:	f47f af77 	bne.w	12b9c <nvs_mount+0x130>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   12cae:	6863      	ldr	r3, [r4, #4]
   12cb0:	ea03 0308 	and.w	r3, r3, r8
   12cb4:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   12cb6:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   12cb8:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   12cba:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   12cbe:	42b3      	cmp	r3, r6
   12cc0:	d105      	bne.n	12cce <nvs_mount+0x262>
		rc = nvs_add_gc_done_ate(fs);
   12cc2:	4620      	mov	r0, r4
   12cc4:	f013 f927 	bl	25f16 <nvs_add_gc_done_ate>
   12cc8:	e768      	b.n	12b9c <nvs_mount+0x130>
		rc = -EDEADLK;
   12cca:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   12cce:	4638      	mov	r0, r7
   12cd0:	f00f fbd4 	bl	2247c <z_impl_k_mutex_unlock>
	if (rc) {
   12cd4:	2d00      	cmp	r5, #0
   12cd6:	f47f aede 	bne.w	12a96 <nvs_mount+0x2a>
	fs->ready = true;
   12cda:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   12cdc:	89e2      	ldrh	r2, [r4, #14]
	fs->ready = true;
   12cde:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   12ce0:	4819      	ldr	r0, [pc, #100]	; (12d48 <nvs_mount+0x2dc>)
   12ce2:	89a3      	ldrh	r3, [r4, #12]
   12ce4:	2149      	movs	r1, #73	; 0x49
   12ce6:	f012 ff94 	bl	25c12 <z_log_minimal_printk>
	LOG_INF("alloc wra: %d, %x",
   12cea:	6862      	ldr	r2, [r4, #4]
   12cec:	4817      	ldr	r0, [pc, #92]	; (12d4c <nvs_mount+0x2e0>)
   12cee:	b293      	uxth	r3, r2
   12cf0:	2149      	movs	r1, #73	; 0x49
   12cf2:	0c12      	lsrs	r2, r2, #16
   12cf4:	f012 ff8d 	bl	25c12 <z_log_minimal_printk>
	LOG_INF("data wra: %d, %x",
   12cf8:	68a2      	ldr	r2, [r4, #8]
   12cfa:	4815      	ldr	r0, [pc, #84]	; (12d50 <nvs_mount+0x2e4>)
   12cfc:	b293      	uxth	r3, r2
   12cfe:	2149      	movs	r1, #73	; 0x49
   12d00:	0c12      	lsrs	r2, r2, #16
   12d02:	f012 ff86 	bl	25c12 <z_log_minimal_printk>
	return 0;
   12d06:	e6c6      	b.n	12a96 <nvs_mount+0x2a>
			LOG_INF("GC Done marker found");
   12d08:	4812      	ldr	r0, [pc, #72]	; (12d54 <nvs_mount+0x2e8>)
   12d0a:	2149      	movs	r1, #73	; 0x49
   12d0c:	f012 ff81 	bl	25c12 <z_log_minimal_printk>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12d10:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   12d12:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12d14:	0c1b      	lsrs	r3, r3, #16
   12d16:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   12d18:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12d1a:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   12d1c:	f013 f806 	bl	25d2c <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   12d20:	9900      	ldr	r1, [sp, #0]
   12d22:	4620      	mov	r0, r4
   12d24:	f012 ffdf 	bl	25ce6 <nvs_flash_erase_sector>
			goto end;
   12d28:	e782      	b.n	12c30 <nvs_mount+0x1c4>
   12d2a:	bf00      	nop
   12d2c:	0002b22f 	.word	0x0002b22f
   12d30:	0002b256 	.word	0x0002b256
   12d34:	0002b278 	.word	0x0002b278
   12d38:	0002b295 	.word	0x0002b295
   12d3c:	0002b2ae 	.word	0x0002b2ae
   12d40:	ffff0000 	.word	0xffff0000
   12d44:	0002b339 	.word	0x0002b339
   12d48:	0002b2d6 	.word	0x0002b2d6
   12d4c:	0002b2f2 	.word	0x0002b2f2
   12d50:	0002b309 	.word	0x0002b309
   12d54:	0002b31f 	.word	0x0002b31f
		if (nvs_ate_valid(fs, &last_ate)) {
   12d58:	a901      	add	r1, sp, #4
   12d5a:	4620      	mov	r0, r4
   12d5c:	f012 fffb 	bl	25d56 <nvs_ate_valid>
   12d60:	f8d4 b004 	ldr.w	fp, [r4, #4]
   12d64:	b180      	cbz	r0, 12d88 <nvs_mount+0x31c>
			fs->data_wra = addr & ADDR_SECT_MASK;
   12d66:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12d68:	f8bd a008 	ldrh.w	sl, [sp, #8]
   12d6c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   12d70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   12d72:	ea02 0209 	and.w	r2, r2, r9
   12d76:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12d78:	4451      	add	r1, sl
   12d7a:	f012 ffe2 	bl	25d42 <nvs_al_size.isra.0>
   12d7e:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12d80:	455a      	cmp	r2, fp
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12d82:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12d84:	f43f af2a 	beq.w	12bdc <nvs_mount+0x170>
		fs->ate_wra -= ate_size;
   12d88:	ebab 0306 	sub.w	r3, fp, r6
   12d8c:	6063      	str	r3, [r4, #4]
   12d8e:	e6e2      	b.n	12b56 <nvs_mount+0xea>

00012d90 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   12d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d94:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   12d96:	7c03      	ldrb	r3, [r0, #16]
{
   12d98:	b089      	sub	sp, #36	; 0x24
   12d9a:	4604      	mov	r4, r0
   12d9c:	4689      	mov	r9, r1
   12d9e:	4690      	mov	r8, r2
	if (!fs->ready) {
   12da0:	b94b      	cbnz	r3, 12db6 <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
   12da2:	485e      	ldr	r0, [pc, #376]	; (12f1c <nvs_write+0x18c>)
   12da4:	2145      	movs	r1, #69	; 0x45
   12da6:	f012 ff34 	bl	25c12 <z_log_minimal_printk>
		return -EACCES;
   12daa:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   12dae:	4628      	mov	r0, r5
   12db0:	b009      	add	sp, #36	; 0x24
   12db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12db6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   12db8:	2108      	movs	r1, #8
   12dba:	4610      	mov	r0, r2
   12dbc:	f012 ffc1 	bl	25d42 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   12dc0:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12dc2:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   12dc4:	4610      	mov	r0, r2
   12dc6:	f012 ffbc 	bl	25d42 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   12dca:	89a3      	ldrh	r3, [r4, #12]
   12dcc:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   12dd0:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   12dd2:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   12dd4:	f200 809e 	bhi.w	12f14 <nvs_write+0x184>
   12dd8:	b11e      	cbz	r6, 12de2 <nvs_write+0x52>
	    ((len > 0) && (data == NULL))) {
   12dda:	f1b8 0f00 	cmp.w	r8, #0
   12dde:	f000 8099 	beq.w	12f14 <nvs_write+0x184>
	wlk_addr = fs->ate_wra;
   12de2:	6863      	ldr	r3, [r4, #4]
   12de4:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12de6:	aa04      	add	r2, sp, #16
   12de8:	a903      	add	r1, sp, #12
   12dea:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   12dec:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12df0:	f012 ffe9 	bl	25dc6 <nvs_prev_ate>
		if (rc) {
   12df4:	4605      	mov	r5, r0
   12df6:	2800      	cmp	r0, #0
   12df8:	d1d9      	bne.n	12dae <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   12dfa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   12dfe:	454b      	cmp	r3, r9
   12e00:	d005      	beq.n	12e0e <nvs_write+0x7e>
		if (wlk_addr == fs->ate_wra) {
   12e02:	6862      	ldr	r2, [r4, #4]
   12e04:	9b03      	ldr	r3, [sp, #12]
   12e06:	429a      	cmp	r2, r3
   12e08:	d1ed      	bne.n	12de6 <nvs_write+0x56>
		if (len == 0) {
   12e0a:	b9e6      	cbnz	r6, 12e46 <nvs_write+0xb6>
   12e0c:	e7cf      	b.n	12dae <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   12e0e:	a904      	add	r1, sp, #16
   12e10:	4620      	mov	r0, r4
   12e12:	f012 ffa0 	bl	25d56 <nvs_ate_valid>
   12e16:	2800      	cmp	r0, #0
   12e18:	d0f3      	beq.n	12e02 <nvs_write+0x72>
			if (wlk_ate.len == 0U) {
   12e1a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   12e1e:	b186      	cbz	r6, 12e42 <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
   12e20:	429e      	cmp	r6, r3
   12e22:	d110      	bne.n	12e46 <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
   12e24:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   12e28:	ea4f 411b 	mov.w	r1, fp, lsr #16
   12e2c:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   12e2e:	4401      	add	r1, r0
   12e30:	4633      	mov	r3, r6
   12e32:	4642      	mov	r2, r8
   12e34:	4620      	mov	r0, r4
   12e36:	f012 ff07 	bl	25c48 <nvs_flash_block_cmp>
			if (rc <= 0) {
   12e3a:	2800      	cmp	r0, #0
   12e3c:	dc03      	bgt.n	12e46 <nvs_write+0xb6>
   12e3e:	4605      	mov	r5, r0
   12e40:	e7b5      	b.n	12dae <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
   12e42:	2b00      	cmp	r3, #0
   12e44:	d0b3      	beq.n	12dae <nvs_write+0x1e>
	if (data_size) {
   12e46:	bba7      	cbnz	r7, 12eb2 <nvs_write+0x122>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   12e48:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   12e4c:	f04f 32ff 	mov.w	r2, #4294967295
   12e50:	f04f 33ff 	mov.w	r3, #4294967295
   12e54:	4650      	mov	r0, sl
   12e56:	f00f fa3f 	bl	222d8 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   12e5a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 12f20 <nvs_write+0x190>
		if (gc_count == fs->sector_count) {
   12e5e:	89e3      	ldrh	r3, [r4, #14]
   12e60:	429d      	cmp	r5, r3
   12e62:	d054      	beq.n	12f0e <nvs_write+0x17e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   12e64:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   12e68:	18f9      	adds	r1, r7, r3
   12e6a:	428a      	cmp	r2, r1
   12e6c:	d324      	bcc.n	12eb8 <nvs_write+0x128>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   12e6e:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   12e72:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   12e74:	23ff      	movs	r3, #255	; 0xff
   12e76:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   12e7a:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   12e7e:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
   12e82:	f012 ff4a 	bl	25d1a <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   12e86:	4632      	mov	r2, r6
   12e88:	4641      	mov	r1, r8
   12e8a:	4620      	mov	r0, r4
   12e8c:	f013 f81f 	bl	25ece <nvs_flash_data_wrt>
	if (rc) {
   12e90:	4603      	mov	r3, r0
   12e92:	b938      	cbnz	r0, 12ea4 <nvs_write+0x114>
	rc = nvs_flash_ate_wrt(fs, &entry);
   12e94:	a906      	add	r1, sp, #24
   12e96:	4620      	mov	r0, r4
   12e98:	f013 f82c 	bl	25ef4 <nvs_flash_ate_wrt>
	rc = len;
   12e9c:	2800      	cmp	r0, #0
   12e9e:	bf14      	ite	ne
   12ea0:	4603      	movne	r3, r0
   12ea2:	4633      	moveq	r3, r6
   12ea4:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   12ea6:	4650      	mov	r0, sl
   12ea8:	f00f fae8 	bl	2247c <z_impl_k_mutex_unlock>
	return rc;
   12eac:	9b01      	ldr	r3, [sp, #4]
   12eae:	461d      	mov	r5, r3
   12eb0:	e77d      	b.n	12dae <nvs_write+0x1e>
		required_space = data_size + ate_size;
   12eb2:	4457      	add	r7, sl
   12eb4:	b2bf      	uxth	r7, r7
   12eb6:	e7c7      	b.n	12e48 <nvs_write+0xb8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12eb8:	2108      	movs	r1, #8
   12eba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12ebc:	f012 ff41 	bl	25d42 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   12ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12ec4:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   12ec8:	2300      	movs	r3, #0
   12eca:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   12ece:	1813      	adds	r3, r2, r0
   12ed0:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   12ed4:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   12ed6:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   12eda:	441a      	add	r2, r3
   12edc:	1a12      	subs	r2, r2, r0
   12ede:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   12ee0:	a806      	add	r0, sp, #24
   12ee2:	f012 ff1a 	bl	25d1a <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   12ee6:	a906      	add	r1, sp, #24
   12ee8:	4620      	mov	r0, r4
   12eea:	f013 f803 	bl	25ef4 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   12eee:	89e0      	ldrh	r0, [r4, #14]
   12ef0:	1d21      	adds	r1, r4, #4
   12ef2:	f012 ff1b 	bl	25d2c <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   12ef6:	6863      	ldr	r3, [r4, #4]
   12ef8:	ea03 030b 	and.w	r3, r3, fp
   12efc:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   12efe:	4620      	mov	r0, r4
   12f00:	f013 f81e 	bl	25f40 <nvs_gc>
		if (rc) {
   12f04:	4603      	mov	r3, r0
   12f06:	2800      	cmp	r0, #0
   12f08:	d1cc      	bne.n	12ea4 <nvs_write+0x114>
		gc_count++;
   12f0a:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   12f0c:	e7a7      	b.n	12e5e <nvs_write+0xce>
			rc = -ENOSPC;
   12f0e:	f06f 031b 	mvn.w	r3, #27
   12f12:	e7c7      	b.n	12ea4 <nvs_write+0x114>
		return -EINVAL;
   12f14:	f06f 0515 	mvn.w	r5, #21
   12f18:	e749      	b.n	12dae <nvs_write+0x1e>
   12f1a:	bf00      	nop
   12f1c:	0002b216 	.word	0x0002b216
   12f20:	ffff0000 	.word	0xffff0000

00012f24 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   12f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   12f28:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   12f2a:	7c03      	ldrb	r3, [r0, #16]
{
   12f2c:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   12f30:	4604      	mov	r4, r0
   12f32:	460f      	mov	r7, r1
   12f34:	4690      	mov	r8, r2
	if (!fs->ready) {
   12f36:	b943      	cbnz	r3, 12f4a <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
   12f38:	4828      	ldr	r0, [pc, #160]	; (12fdc <nvs_read_hist+0xb8>)
   12f3a:	2145      	movs	r1, #69	; 0x45
   12f3c:	f012 fe69 	bl	25c12 <z_log_minimal_printk>
		return -EACCES;
   12f40:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   12f44:	b004      	add	sp, #16
   12f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12f4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   12f4c:	2108      	movs	r1, #8
   12f4e:	f012 fef8 	bl	25d42 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   12f52:	89a3      	ldrh	r3, [r4, #12]
   12f54:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   12f58:	429e      	cmp	r6, r3
   12f5a:	d83c      	bhi.n	12fd6 <nvs_read_hist+0xb2>
	wlk_addr = fs->ate_wra;
   12f5c:	6863      	ldr	r3, [r4, #4]
   12f5e:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   12f60:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12f64:	aa02      	add	r2, sp, #8
   12f66:	a901      	add	r1, sp, #4
   12f68:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   12f6a:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12f6c:	f012 ff2b 	bl	25dc6 <nvs_prev_ate>
		if (rc) {
   12f70:	2800      	cmp	r0, #0
   12f72:	d1e7      	bne.n	12f44 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   12f74:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12f78:	42bb      	cmp	r3, r7
   12f7a:	d108      	bne.n	12f8e <nvs_read_hist+0x6a>
   12f7c:	a902      	add	r1, sp, #8
   12f7e:	4620      	mov	r0, r4
   12f80:	f012 fee9 	bl	25d56 <nvs_ate_valid>
   12f84:	b118      	cbz	r0, 12f8e <nvs_read_hist+0x6a>
			cnt_his++;
   12f86:	f10a 0a01 	add.w	sl, sl, #1
   12f8a:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   12f8e:	6862      	ldr	r2, [r4, #4]
   12f90:	9b01      	ldr	r3, [sp, #4]
   12f92:	429a      	cmp	r2, r3
   12f94:	d018      	beq.n	12fc8 <nvs_read_hist+0xa4>
	while (cnt_his <= cnt) {
   12f96:	45d1      	cmp	r9, sl
   12f98:	d2e4      	bcs.n	12f64 <nvs_read_hist+0x40>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   12f9a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   12f9e:	b1bb      	cbz	r3, 12fd0 <nvs_read_hist+0xac>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   12fa0:	45d1      	cmp	r9, sl
   12fa2:	d815      	bhi.n	12fd0 <nvs_read_hist+0xac>
	rd_addr += wlk_ate.offset;
   12fa4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   12fa8:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   12faa:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   12fac:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   12fb0:	bf28      	it	cs
   12fb2:	4633      	movcs	r3, r6
   12fb4:	4642      	mov	r2, r8
   12fb6:	4429      	add	r1, r5
   12fb8:	4620      	mov	r0, r4
   12fba:	f012 fe37 	bl	25c2c <nvs_flash_rd>
	if (rc) {
   12fbe:	2800      	cmp	r0, #0
   12fc0:	d1c0      	bne.n	12f44 <nvs_read_hist+0x20>
	return wlk_ate.len;
   12fc2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   12fc6:	e7bd      	b.n	12f44 <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   12fc8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12fcc:	42bb      	cmp	r3, r7
   12fce:	d0e4      	beq.n	12f9a <nvs_read_hist+0x76>
		return -ENOENT;
   12fd0:	f06f 0001 	mvn.w	r0, #1
   12fd4:	e7b6      	b.n	12f44 <nvs_read_hist+0x20>
		return -EINVAL;
   12fd6:	f06f 0015 	mvn.w	r0, #21
   12fda:	e7b3      	b.n	12f44 <nvs_read_hist+0x20>
   12fdc:	0002b216 	.word	0x0002b216

00012fe0 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   12fe0:	4b11      	ldr	r3, [pc, #68]	; (13028 <flash_area_open+0x48>)
   12fe2:	681b      	ldr	r3, [r3, #0]
{
   12fe4:	b570      	push	{r4, r5, r6, lr}
   12fe6:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   12fe8:	b18b      	cbz	r3, 1300e <flash_area_open+0x2e>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   12fea:	4a10      	ldr	r2, [pc, #64]	; (1302c <flash_area_open+0x4c>)
   12fec:	6811      	ldr	r1, [r2, #0]
   12fee:	2200      	movs	r2, #0
   12ff0:	428a      	cmp	r2, r1
   12ff2:	db02      	blt.n	12ffa <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   12ff4:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   12ff8:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   12ffa:	461d      	mov	r5, r3
   12ffc:	f813 6b10 	ldrb.w	r6, [r3], #16
   13000:	4286      	cmp	r6, r0
   13002:	d007      	beq.n	13014 <flash_area_open+0x34>
	for (int i = 0; i < flash_map_entries; i++) {
   13004:	3201      	adds	r2, #1
   13006:	e7f3      	b.n	12ff0 <flash_area_open+0x10>
	*fap = area;
   13008:	6025      	str	r5, [r4, #0]
	return 0;
   1300a:	2000      	movs	r0, #0
   1300c:	e7f4      	b.n	12ff8 <flash_area_open+0x18>
		return -EACCES;
   1300e:	f06f 000c 	mvn.w	r0, #12
   13012:	e7f1      	b.n	12ff8 <flash_area_open+0x18>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   13014:	68e8      	ldr	r0, [r5, #12]
   13016:	b118      	cbz	r0, 13020 <flash_area_open+0x40>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   13018:	f016 fc9a 	bl	29950 <z_device_is_ready>
   1301c:	2800      	cmp	r0, #0
   1301e:	d1f3      	bne.n	13008 <flash_area_open+0x28>
		return -ENODEV;
   13020:	f06f 0012 	mvn.w	r0, #18
   13024:	e7e8      	b.n	12ff8 <flash_area_open+0x18>
   13026:	bf00      	nop
   13028:	20000550 	.word	0x20000550
   1302c:	0002a398 	.word	0x0002a398

00013030 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   13030:	b570      	push	{r4, r5, r6, lr}
   13032:	b088      	sub	sp, #32
   13034:	4605      	mov	r5, r0
   13036:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   13038:	b2c0      	uxtb	r0, r0
   1303a:	4669      	mov	r1, sp
{
   1303c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   1303e:	f7ff ffcf 	bl	12fe0 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   13042:	2800      	cmp	r0, #0
   13044:	db1b      	blt.n	1307e <flash_area_get_sectors+0x4e>
   13046:	9800      	ldr	r0, [sp, #0]
   13048:	b1c8      	cbz	r0, 1307e <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   1304a:	6843      	ldr	r3, [r0, #4]
   1304c:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   1304e:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   13050:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   13052:	9501      	str	r5, [sp, #4]
	flash_dev = fa->fa_dev;
   13054:	68c5      	ldr	r5, [r0, #12]
	cb_data->ret = ret;
   13056:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   1305a:	2300      	movs	r3, #0
	cb_data->status = 0;
   1305c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   13060:	9305      	str	r3, [sp, #20]
	flash_area_close(fa);
   13062:	f013 f82d 	bl	260c0 <flash_area_close>
	if (flash_dev == NULL) {
   13066:	b16d      	cbz	r5, 13084 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   13068:	4628      	mov	r0, r5
   1306a:	4908      	ldr	r1, [pc, #32]	; (1308c <flash_area_get_sectors+0x5c>)
   1306c:	aa01      	add	r2, sp, #4
   1306e:	f016 f94d 	bl	2930c <flash_page_foreach>
	if (cb_data->status == 0) {
   13072:	9807      	ldr	r0, [sp, #28]
   13074:	b908      	cbnz	r0, 1307a <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   13076:	9b05      	ldr	r3, [sp, #20]
   13078:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   1307a:	b008      	add	sp, #32
   1307c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1307e:	f06f 0015 	mvn.w	r0, #21
   13082:	e7fa      	b.n	1307a <flash_area_get_sectors+0x4a>
		return -ENODEV;
   13084:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   13088:	e7f7      	b.n	1307a <flash_area_get_sectors+0x4a>
   1308a:	bf00      	nop
   1308c:	000260c3 	.word	0x000260c3

00013090 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   13090:	4b10      	ldr	r3, [pc, #64]	; (130d4 <settings_save_one+0x44>)
{
   13092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   13096:	681c      	ldr	r4, [r3, #0]
{
   13098:	4605      	mov	r5, r0
   1309a:	460e      	mov	r6, r1
   1309c:	4617      	mov	r7, r2
	if (!cs) {
   1309e:	b1ac      	cbz	r4, 130cc <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   130a0:	f04f 32ff 	mov.w	r2, #4294967295
   130a4:	f04f 33ff 	mov.w	r3, #4294967295
   130a8:	480b      	ldr	r0, [pc, #44]	; (130d8 <settings_save_one+0x48>)
   130aa:	f00f f915 	bl	222d8 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   130ae:	6863      	ldr	r3, [r4, #4]
   130b0:	4632      	mov	r2, r6
   130b2:	f8d3 8008 	ldr.w	r8, [r3, #8]
   130b6:	4629      	mov	r1, r5
   130b8:	463b      	mov	r3, r7
   130ba:	4620      	mov	r0, r4
   130bc:	47c0      	blx	r8
   130be:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   130c0:	4805      	ldr	r0, [pc, #20]	; (130d8 <settings_save_one+0x48>)
   130c2:	f00f f9db 	bl	2247c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   130c6:	4620      	mov	r0, r4
   130c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   130cc:	f06f 0401 	mvn.w	r4, #1
   130d0:	e7f9      	b.n	130c6 <settings_save_one+0x36>
   130d2:	bf00      	nop
   130d4:	200020c0 	.word	0x200020c0
   130d8:	2000085c 	.word	0x2000085c

000130dc <settings_src_register>:
	parent->next = child;
   130dc:	2300      	movs	r3, #0
   130de:	6003      	str	r3, [r0, #0]
	return list->tail;
   130e0:	4b04      	ldr	r3, [pc, #16]	; (130f4 <settings_src_register+0x18>)
   130e2:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   130e4:	b912      	cbnz	r2, 130ec <settings_src_register+0x10>
	list->head = node;
   130e6:	e9c3 0000 	strd	r0, r0, [r3]
}
   130ea:	4770      	bx	lr
	parent->next = child;
   130ec:	6010      	str	r0, [r2, #0]
	list->tail = node;
   130ee:	6058      	str	r0, [r3, #4]
}
   130f0:	4770      	bx	lr
   130f2:	bf00      	nop
   130f4:	200020b8 	.word	0x200020b8

000130f8 <settings_dst_register>:
	settings_save_dst = cs;
   130f8:	4b01      	ldr	r3, [pc, #4]	; (13100 <settings_dst_register+0x8>)
   130fa:	6018      	str	r0, [r3, #0]
}
   130fc:	4770      	bx	lr
   130fe:	bf00      	nop
   13100:	200020c0 	.word	0x200020c0

00013104 <settings_load_subtree>:
{
   13104:	b530      	push	{r4, r5, lr}
   13106:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   13108:	2300      	movs	r3, #0
{
   1310a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   1310c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   13110:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   13112:	f04f 33ff 	mov.w	r3, #4294967295
   13116:	480c      	ldr	r0, [pc, #48]	; (13148 <settings_load_subtree+0x44>)
   13118:	f04f 32ff 	mov.w	r2, #4294967295
   1311c:	f00f f8dc 	bl	222d8 <z_impl_k_mutex_lock>
	return list->head;
   13120:	4b0a      	ldr	r3, [pc, #40]	; (1314c <settings_load_subtree+0x48>)
   13122:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13124:	b134      	cbz	r4, 13134 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   13126:	6863      	ldr	r3, [r4, #4]
   13128:	4620      	mov	r0, r4
   1312a:	681b      	ldr	r3, [r3, #0]
   1312c:	a901      	add	r1, sp, #4
   1312e:	4798      	blx	r3
	return node->next;
   13130:	6824      	ldr	r4, [r4, #0]
   13132:	e7f7      	b.n	13124 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   13134:	4628      	mov	r0, r5
   13136:	f000 f8d1 	bl	132dc <settings_commit_subtree>
   1313a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1313c:	4802      	ldr	r0, [pc, #8]	; (13148 <settings_load_subtree+0x44>)
   1313e:	f00f f99d 	bl	2247c <z_impl_k_mutex_unlock>
}
   13142:	4620      	mov	r0, r4
   13144:	b005      	add	sp, #20
   13146:	bd30      	pop	{r4, r5, pc}
   13148:	2000085c 	.word	0x2000085c
   1314c:	200020b8 	.word	0x200020b8

00013150 <settings_load_subtree_direct>:
{
   13150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   13152:	e9cd 0101 	strd	r0, r1, [sp, #4]
   13156:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   13158:	f04f 33ff 	mov.w	r3, #4294967295
   1315c:	480a      	ldr	r0, [pc, #40]	; (13188 <settings_load_subtree_direct+0x38>)
   1315e:	f04f 32ff 	mov.w	r2, #4294967295
   13162:	f00f f8b9 	bl	222d8 <z_impl_k_mutex_lock>
	return list->head;
   13166:	4b09      	ldr	r3, [pc, #36]	; (1318c <settings_load_subtree_direct+0x3c>)
   13168:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1316a:	b134      	cbz	r4, 1317a <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   1316c:	6863      	ldr	r3, [r4, #4]
   1316e:	4620      	mov	r0, r4
   13170:	681b      	ldr	r3, [r3, #0]
   13172:	a901      	add	r1, sp, #4
   13174:	4798      	blx	r3
	return node->next;
   13176:	6824      	ldr	r4, [r4, #0]
   13178:	e7f7      	b.n	1316a <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   1317a:	4803      	ldr	r0, [pc, #12]	; (13188 <settings_load_subtree_direct+0x38>)
   1317c:	f00f f97e 	bl	2247c <z_impl_k_mutex_unlock>
}
   13180:	2000      	movs	r0, #0
   13182:	b004      	add	sp, #16
   13184:	bd10      	pop	{r4, pc}
   13186:	bf00      	nop
   13188:	2000085c 	.word	0x2000085c
   1318c:	200020b8 	.word	0x200020b8

00013190 <settings_store_init>:
	list->head = NULL;
   13190:	4b02      	ldr	r3, [pc, #8]	; (1319c <settings_store_init+0xc>)
   13192:	2200      	movs	r2, #0
	list->tail = NULL;
   13194:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   13198:	4770      	bx	lr
   1319a:	bf00      	nop
   1319c:	200020b8 	.word	0x200020b8

000131a0 <settings_init>:
	list->head = NULL;
   131a0:	4b02      	ldr	r3, [pc, #8]	; (131ac <settings_init+0xc>)
   131a2:	2200      	movs	r2, #0
	list->tail = NULL;
   131a4:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   131a8:	f7ff bff2 	b.w	13190 <settings_store_init>
   131ac:	200020c4 	.word	0x200020c4

000131b0 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   131b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   131b4:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   131b6:	460e      	mov	r6, r1
   131b8:	b109      	cbz	r1, 131be <settings_parse_and_lookup+0xe>
		*next = NULL;
   131ba:	2300      	movs	r3, #0
   131bc:	600b      	str	r3, [r1, #0]
   131be:	4c23      	ldr	r4, [pc, #140]	; (1324c <settings_parse_and_lookup+0x9c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   131c0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 13250 <settings_parse_and_lookup+0xa0>
   131c4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 13254 <settings_parse_and_lookup+0xa4>
   131c8:	2500      	movs	r5, #0
   131ca:	4544      	cmp	r4, r8
   131cc:	d908      	bls.n	131e0 <settings_parse_and_lookup+0x30>
   131ce:	4822      	ldr	r0, [pc, #136]	; (13258 <settings_parse_and_lookup+0xa8>)
   131d0:	4649      	mov	r1, r9
   131d2:	2294      	movs	r2, #148	; 0x94
   131d4:	f012 fd0f 	bl	25bf6 <assert_print>
   131d8:	2194      	movs	r1, #148	; 0x94
   131da:	4648      	mov	r0, r9
   131dc:	f012 fd04 	bl	25be8 <assert_post_action>
   131e0:	4544      	cmp	r4, r8
   131e2:	d310      	bcc.n	13206 <settings_parse_and_lookup+0x56>
	return list->head;
   131e4:	4b1d      	ldr	r3, [pc, #116]	; (1325c <settings_parse_and_lookup+0xac>)
   131e6:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   131e8:	b35c      	cbz	r4, 13242 <settings_parse_and_lookup+0x92>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   131ea:	aa01      	add	r2, sp, #4
   131ec:	4638      	mov	r0, r7
   131ee:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   131f2:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   131f4:	f012 ff8a 	bl	2610c <settings_name_steq>
   131f8:	b308      	cbz	r0, 1323e <settings_parse_and_lookup+0x8e>
			continue;
		}
		if (!bestmatch) {
   131fa:	b9cd      	cbnz	r5, 13230 <settings_parse_and_lookup+0x80>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   131fc:	b10e      	cbz	r6, 13202 <settings_parse_and_lookup+0x52>
				*next = tmpnext;
   131fe:	9b01      	ldr	r3, [sp, #4]
   13200:	6033      	str	r3, [r6, #0]
   13202:	4625      	mov	r5, r4
   13204:	e01b      	b.n	1323e <settings_parse_and_lookup+0x8e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13206:	6821      	ldr	r1, [r4, #0]
   13208:	aa01      	add	r2, sp, #4
   1320a:	4638      	mov	r0, r7
   1320c:	f012 ff7e 	bl	2610c <settings_name_steq>
   13210:	b160      	cbz	r0, 1322c <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   13212:	b925      	cbnz	r5, 1321e <settings_parse_and_lookup+0x6e>
			if (next) {
   13214:	b10e      	cbz	r6, 1321a <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   13216:	9b01      	ldr	r3, [sp, #4]
   13218:	6033      	str	r3, [r6, #0]
   1321a:	4625      	mov	r5, r4
   1321c:	e006      	b.n	1322c <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1321e:	6829      	ldr	r1, [r5, #0]
   13220:	6820      	ldr	r0, [r4, #0]
   13222:	2200      	movs	r2, #0
   13224:	f012 ff72 	bl	2610c <settings_name_steq>
   13228:	2800      	cmp	r0, #0
   1322a:	d1f3      	bne.n	13214 <settings_parse_and_lookup+0x64>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1322c:	3414      	adds	r4, #20
   1322e:	e7cc      	b.n	131ca <settings_parse_and_lookup+0x1a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   13230:	6829      	ldr	r1, [r5, #0]
   13232:	6820      	ldr	r0, [r4, #0]
   13234:	2200      	movs	r2, #0
   13236:	f012 ff69 	bl	2610c <settings_name_steq>
   1323a:	2800      	cmp	r0, #0
   1323c:	d1de      	bne.n	131fc <settings_parse_and_lookup+0x4c>
	return node->next;
   1323e:	6964      	ldr	r4, [r4, #20]
   13240:	e7d2      	b.n	131e8 <settings_parse_and_lookup+0x38>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   13242:	4628      	mov	r0, r5
   13244:	b003      	add	sp, #12
   13246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1324a:	bf00      	nop
   1324c:	0002a13c 	.word	0x0002a13c
   13250:	0002a1b4 	.word	0x0002a1b4
   13254:	0002b36c 	.word	0x0002b36c
   13258:	0002ab8c 	.word	0x0002ab8c
   1325c:	200020c4 	.word	0x200020c4

00013260 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   13260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13264:	b085      	sub	sp, #20
   13266:	4604      	mov	r4, r0
   13268:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   1326c:	9003      	str	r0, [sp, #12]
{
   1326e:	460d      	mov	r5, r1
   13270:	4616      	mov	r6, r2
   13272:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   13274:	f1b8 0f00 	cmp.w	r8, #0
   13278:	d018      	beq.n	132ac <settings_call_set_handler+0x4c>
   1327a:	f8d8 1000 	ldr.w	r1, [r8]
   1327e:	b181      	cbz	r1, 132a2 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   13280:	aa03      	add	r2, sp, #12
   13282:	f012 ff43 	bl	2610c <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   13286:	b960      	cbnz	r0, 132a2 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				name, rc);
			/* Ignoring the error */
			rc = 0;
   13288:	2000      	movs	r0, #0
   1328a:	e007      	b.n	1329c <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   1328c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13290:	9300      	str	r3, [sp, #0]
   13292:	9803      	ldr	r0, [sp, #12]
   13294:	463b      	mov	r3, r7
   13296:	4632      	mov	r2, r6
   13298:	4629      	mov	r1, r5
   1329a:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   1329c:	b005      	add	sp, #20
   1329e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   132a2:	f8d8 9004 	ldr.w	r9, [r8, #4]
   132a6:	f1b9 0f00 	cmp.w	r9, #0
   132aa:	d1ef      	bne.n	1328c <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   132ac:	a903      	add	r1, sp, #12
   132ae:	4620      	mov	r0, r4
   132b0:	f7ff ff7e 	bl	131b0 <settings_parse_and_lookup>
		if (!ch) {
   132b4:	2800      	cmp	r0, #0
   132b6:	d0e7      	beq.n	13288 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   132b8:	f8d0 8008 	ldr.w	r8, [r0, #8]
   132bc:	9803      	ldr	r0, [sp, #12]
   132be:	463b      	mov	r3, r7
   132c0:	4632      	mov	r2, r6
   132c2:	4629      	mov	r1, r5
   132c4:	47c0      	blx	r8
		if (rc != 0) {
   132c6:	4603      	mov	r3, r0
   132c8:	2800      	cmp	r0, #0
   132ca:	d0dd      	beq.n	13288 <settings_call_set_handler+0x28>
			LOG_ERR("set-value failure. key: %s error(%d)",
   132cc:	4802      	ldr	r0, [pc, #8]	; (132d8 <settings_call_set_handler+0x78>)
   132ce:	4622      	mov	r2, r4
   132d0:	2145      	movs	r1, #69	; 0x45
   132d2:	f012 fc9e 	bl	25c12 <z_log_minimal_printk>
   132d6:	e7d7      	b.n	13288 <settings_call_set_handler+0x28>
   132d8:	0002b39e 	.word	0x0002b39e

000132dc <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   132dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   132e0:	4c1e      	ldr	r4, [pc, #120]	; (1335c <settings_commit_subtree+0x80>)
   132e2:	4f1f      	ldr	r7, [pc, #124]	; (13360 <settings_commit_subtree+0x84>)
   132e4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 13364 <settings_commit_subtree+0x88>
{
   132e8:	4606      	mov	r6, r0
	rc = 0;
   132ea:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   132ec:	42bc      	cmp	r4, r7
   132ee:	d908      	bls.n	13302 <settings_commit_subtree+0x26>
   132f0:	481d      	ldr	r0, [pc, #116]	; (13368 <settings_commit_subtree+0x8c>)
   132f2:	4641      	mov	r1, r8
   132f4:	22f4      	movs	r2, #244	; 0xf4
   132f6:	f012 fc7e 	bl	25bf6 <assert_print>
   132fa:	21f4      	movs	r1, #244	; 0xf4
   132fc:	4640      	mov	r0, r8
   132fe:	f012 fc73 	bl	25be8 <assert_post_action>
   13302:	42bc      	cmp	r4, r7
   13304:	d308      	bcc.n	13318 <settings_commit_subtree+0x3c>
	return list->head;
   13306:	4b19      	ldr	r3, [pc, #100]	; (1336c <settings_commit_subtree+0x90>)
   13308:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1330a:	b324      	cbz	r4, 13356 <settings_commit_subtree+0x7a>
   1330c:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1330e:	b9ae      	cbnz	r6, 1333c <settings_commit_subtree+0x60>
			continue;
		}
		if (ch->h_commit) {
   13310:	68e3      	ldr	r3, [r4, #12]
   13312:	b9db      	cbnz	r3, 1334c <settings_commit_subtree+0x70>
	return node->next;
   13314:	6964      	ldr	r4, [r4, #20]
   13316:	e7f8      	b.n	1330a <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13318:	b91e      	cbnz	r6, 13322 <settings_commit_subtree+0x46>
		if (ch->h_commit) {
   1331a:	68e3      	ldr	r3, [r4, #12]
   1331c:	b94b      	cbnz	r3, 13332 <settings_commit_subtree+0x56>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1331e:	3414      	adds	r4, #20
   13320:	e7e4      	b.n	132ec <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13322:	6820      	ldr	r0, [r4, #0]
   13324:	2200      	movs	r2, #0
   13326:	4631      	mov	r1, r6
   13328:	f012 fef0 	bl	2610c <settings_name_steq>
   1332c:	2800      	cmp	r0, #0
   1332e:	d1f4      	bne.n	1331a <settings_commit_subtree+0x3e>
   13330:	e7f5      	b.n	1331e <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
   13332:	4798      	blx	r3
				rc = rc2;
   13334:	2d00      	cmp	r5, #0
   13336:	bf08      	it	eq
   13338:	4605      	moveq	r5, r0
   1333a:	e7f0      	b.n	1331e <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1333c:	6820      	ldr	r0, [r4, #0]
   1333e:	2200      	movs	r2, #0
   13340:	4631      	mov	r1, r6
   13342:	f012 fee3 	bl	2610c <settings_name_steq>
   13346:	2800      	cmp	r0, #0
   13348:	d1e2      	bne.n	13310 <settings_commit_subtree+0x34>
   1334a:	e7e3      	b.n	13314 <settings_commit_subtree+0x38>
			rc2 = ch->h_commit();
   1334c:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   1334e:	2d00      	cmp	r5, #0
   13350:	bf08      	it	eq
   13352:	4605      	moveq	r5, r0
   13354:	e7de      	b.n	13314 <settings_commit_subtree+0x38>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   13356:	4628      	mov	r0, r5
   13358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1335c:	0002a13c 	.word	0x0002a13c
   13360:	0002a1b4 	.word	0x0002a1b4
   13364:	0002b36c 	.word	0x0002b36c
   13368:	0002ab8c 	.word	0x0002ab8c
   1336c:	200020c4 	.word	0x200020c4

00013370 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   13370:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   13372:	4c06      	ldr	r4, [pc, #24]	; (1338c <settings_subsys_init+0x1c>)
   13374:	7823      	ldrb	r3, [r4, #0]
   13376:	b93b      	cbnz	r3, 13388 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   13378:	f7ff ff12 	bl	131a0 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   1337c:	f000 f864 	bl	13448 <settings_backend_init>

	if (!err) {
   13380:	b908      	cbnz	r0, 13386 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   13382:	2301      	movs	r3, #1
   13384:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   13386:	bd10      	pop	{r4, pc}
		return 0;
   13388:	2000      	movs	r0, #0
   1338a:	e7fc      	b.n	13386 <settings_subsys_init+0x16>
   1338c:	200027f4 	.word	0x200027f4

00013390 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   13390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   13394:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   13396:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 13444 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   1339a:	3401      	adds	r4, #1
{
   1339c:	b098      	sub	sp, #96	; 0x60
   1339e:	4680      	mov	r8, r0
   133a0:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   133a2:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   133a4:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   133a8:	1e65      	subs	r5, r4, #1
   133aa:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   133ac:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   133b0:	d045      	beq.n	1343e <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   133b2:	234a      	movs	r3, #74	; 0x4a
   133b4:	aa05      	add	r2, sp, #20
   133b6:	4629      	mov	r1, r5
   133b8:	4630      	mov	r0, r6
   133ba:	f012 fe7a 	bl	260b2 <nvs_read>
   133be:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   133c2:	343f      	adds	r4, #63	; 0x3f
   133c4:	b2a4      	uxth	r4, r4
   133c6:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   133c8:	4621      	mov	r1, r4
   133ca:	2301      	movs	r3, #1
   133cc:	f10d 020b 	add.w	r2, sp, #11
   133d0:	4630      	mov	r0, r6
   133d2:	f012 fe6e 	bl	260b2 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   133d6:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   133d8:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   133da:	dc03      	bgt.n	133e4 <settings_nvs_load+0x54>
   133dc:	2800      	cmp	r0, #0
   133de:	dc03      	bgt.n	133e8 <settings_nvs_load+0x58>
{
   133e0:	462c      	mov	r4, r5
   133e2:	e7e1      	b.n	133a8 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   133e4:	2800      	cmp	r0, #0
   133e6:	dc16      	bgt.n	13416 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   133e8:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   133ec:	42ab      	cmp	r3, r5
   133ee:	d109      	bne.n	13404 <settings_nvs_load+0x74>
				cf->last_name_id--;
   133f0:	4642      	mov	r2, r8
   133f2:	1e6b      	subs	r3, r5, #1
   133f4:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   133f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   133fc:	2302      	movs	r3, #2
   133fe:	4630      	mov	r0, r6
   13400:	f7ff fcc6 	bl	12d90 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   13404:	4629      	mov	r1, r5
   13406:	4630      	mov	r0, r6
   13408:	f012 fe4f 	bl	260aa <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   1340c:	4621      	mov	r1, r4
   1340e:	4630      	mov	r0, r6
   13410:	f012 fe4b 	bl	260aa <nvs_delete>
			continue;
   13414:	e7e4      	b.n	133e0 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   13416:	ab18      	add	r3, sp, #96	; 0x60
   13418:	441f      	add	r7, r3
   1341a:	2300      	movs	r3, #0
   1341c:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   13420:	4652      	mov	r2, sl
   13422:	f8cd 9000 	str.w	r9, [sp]
   13426:	ab03      	add	r3, sp, #12
   13428:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   1342a:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   1342c:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   13430:	f7ff ff16 	bl	13260 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   13434:	2800      	cmp	r0, #0
   13436:	d0d3      	beq.n	133e0 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   13438:	b018      	add	sp, #96	; 0x60
   1343a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1343e:	2000      	movs	r0, #0
	return ret;
   13440:	e7fa      	b.n	13438 <settings_nvs_load+0xa8>
   13442:	bf00      	nop
   13444:	00026183 	.word	0x00026183

00013448 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   13448:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   1344a:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   1344c:	4669      	mov	r1, sp
   1344e:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   13450:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   13452:	f7ff fdc5 	bl	12fe0 <flash_area_open>
	if (rc) {
   13456:	4604      	mov	r4, r0
   13458:	2800      	cmp	r0, #0
   1345a:	d136      	bne.n	134ca <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   1345c:	aa02      	add	r2, sp, #8
   1345e:	a901      	add	r1, sp, #4
   13460:	2004      	movs	r0, #4
   13462:	f7ff fde5 	bl	13030 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   13466:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   1346a:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   1346c:	d02d      	beq.n	134ca <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   1346e:	b138      	cbz	r0, 13480 <settings_backend_init+0x38>
   13470:	340c      	adds	r4, #12
   13472:	d005      	beq.n	13480 <settings_backend_init+0x38>
		k_panic();
   13474:	4040      	eors	r0, r0
   13476:	f380 8811 	msr	BASEPRI, r0
   1347a:	f04f 0004 	mov.w	r0, #4
   1347e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   13480:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   13482:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   13486:	d223      	bcs.n	134d0 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   13488:	9a00      	ldr	r2, [sp, #0]
   1348a:	2300      	movs	r3, #0
   1348c:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   1348e:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   13490:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   13492:	4285      	cmp	r5, r0
   13494:	b29c      	uxth	r4, r3
   13496:	d303      	bcc.n	134a0 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   13498:	3301      	adds	r3, #1
   1349a:	2b08      	cmp	r3, #8
   1349c:	d1f8      	bne.n	13490 <settings_backend_init+0x48>
   1349e:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   134a0:	4d0d      	ldr	r5, [pc, #52]	; (134d8 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   134a2:	6853      	ldr	r3, [r2, #4]
   134a4:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   134a6:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   134a8:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   134aa:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   134ac:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev = fa->fa_dev;
   134ae:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   134b0:	f012 fefe 	bl	262b0 <settings_nvs_backend_init>
	if (rc) {
   134b4:	4604      	mov	r4, r0
   134b6:	b940      	cbnz	r0, 134ca <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   134b8:	4e08      	ldr	r6, [pc, #32]	; (134dc <settings_backend_init+0x94>)
   134ba:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   134bc:	4628      	mov	r0, r5
   134be:	f7ff fe0d 	bl	130dc <settings_src_register>
	settings_dst_register(&cf->cf_store);
   134c2:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   134c4:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   134c6:	f7ff fe17 	bl	130f8 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   134ca:	4620      	mov	r0, r4
   134cc:	b004      	add	sp, #16
   134ce:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   134d0:	f06f 0420 	mvn.w	r4, #32
   134d4:	e7f9      	b.n	134ca <settings_backend_init+0x82>
   134d6:	bf00      	nop
   134d8:	200020cc 	.word	0x200020cc
   134dc:	20000554 	.word	0x20000554

000134e0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   134e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   134e4:	4605      	mov	r5, r0
	__asm__ volatile(
   134e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   134ea:	f3ef 8611 	mrs	r6, BASEPRI
   134ee:	f383 8812 	msr	BASEPRI_MAX, r3
   134f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   134f6:	481d      	ldr	r0, [pc, #116]	; (1356c <pm_state_notify+0x8c>)
   134f8:	f00e fe9a 	bl	22230 <z_spin_lock_valid>
   134fc:	b940      	cbnz	r0, 13510 <pm_state_notify+0x30>
   134fe:	491c      	ldr	r1, [pc, #112]	; (13570 <pm_state_notify+0x90>)
   13500:	481c      	ldr	r0, [pc, #112]	; (13574 <pm_state_notify+0x94>)
   13502:	228e      	movs	r2, #142	; 0x8e
   13504:	f012 fb77 	bl	25bf6 <assert_print>
   13508:	4819      	ldr	r0, [pc, #100]	; (13570 <pm_state_notify+0x90>)
   1350a:	218e      	movs	r1, #142	; 0x8e
   1350c:	f012 fb6c 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   13510:	4816      	ldr	r0, [pc, #88]	; (1356c <pm_state_notify+0x8c>)
   13512:	f00e feab 	bl	2226c <z_spin_lock_set_owner>
	return list->head;
   13516:	4b18      	ldr	r3, [pc, #96]	; (13578 <pm_state_notify+0x98>)
   13518:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1351a:	b19c      	cbz	r4, 13544 <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1351c:	4f17      	ldr	r7, [pc, #92]	; (1357c <pm_state_notify+0x9c>)
   1351e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 13580 <pm_state_notify+0xa0>
   13522:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   13526:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1352a:	2d00      	cmp	r5, #0
   1352c:	bf08      	it	eq
   1352e:	4613      	moveq	r3, r2
		if (callback) {
   13530:	b12b      	cbz	r3, 1353e <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13532:	f898 2014 	ldrb.w	r2, [r8, #20]
   13536:	fb09 f202 	mul.w	r2, r9, r2
   1353a:	5cb8      	ldrb	r0, [r7, r2]
   1353c:	4798      	blx	r3
	return node->next;
   1353e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13540:	2c00      	cmp	r4, #0
   13542:	d1f0      	bne.n	13526 <pm_state_notify+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13544:	4809      	ldr	r0, [pc, #36]	; (1356c <pm_state_notify+0x8c>)
   13546:	f00e fe81 	bl	2224c <z_spin_unlock_valid>
   1354a:	b940      	cbnz	r0, 1355e <pm_state_notify+0x7e>
   1354c:	4908      	ldr	r1, [pc, #32]	; (13570 <pm_state_notify+0x90>)
   1354e:	4809      	ldr	r0, [pc, #36]	; (13574 <pm_state_notify+0x94>)
   13550:	22b9      	movs	r2, #185	; 0xb9
   13552:	f012 fb50 	bl	25bf6 <assert_print>
   13556:	4806      	ldr	r0, [pc, #24]	; (13570 <pm_state_notify+0x90>)
   13558:	21b9      	movs	r1, #185	; 0xb9
   1355a:	f012 fb45 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   1355e:	f386 8811 	msr	BASEPRI, r6
   13562:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1356a:	bf00      	nop
   1356c:	20002110 	.word	0x20002110
   13570:	0002b1aa 	.word	0x0002b1aa
   13574:	0002ab8c 	.word	0x0002ab8c
   13578:	20002114 	.word	0x20002114
   1357c:	20002128 	.word	0x20002128
   13580:	20002780 	.word	0x20002780

00013584 <pm_system_resume>:

void pm_system_resume(void)
{
   13584:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
   13586:	4b1a      	ldr	r3, [pc, #104]	; (135f0 <pm_system_resume+0x6c>)
   13588:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1358a:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   1358e:	f004 031f 	and.w	r3, r4, #31
   13592:	2201      	movs	r2, #1
   13594:	409a      	lsls	r2, r3
   13596:	4b17      	ldr	r3, [pc, #92]	; (135f4 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13598:	0961      	lsrs	r1, r4, #5
   1359a:	43d0      	mvns	r0, r2
   1359c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   135a0:	e853 1f00 	ldrex	r1, [r3]
   135a4:	ea01 0500 	and.w	r5, r1, r0
   135a8:	e843 5c00 	strex	ip, r5, [r3]
   135ac:	f1bc 0f00 	cmp.w	ip, #0
   135b0:	d1f6      	bne.n	135a0 <pm_system_resume+0x1c>
   135b2:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   135b6:	4211      	tst	r1, r2
   135b8:	d013      	beq.n	135e2 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   135ba:	4b0f      	ldr	r3, [pc, #60]	; (135f8 <pm_system_resume+0x74>)
   135bc:	4d0f      	ldr	r5, [pc, #60]	; (135fc <pm_system_resume+0x78>)
   135be:	b18b      	cbz	r3, 135e4 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   135c0:	230c      	movs	r3, #12
   135c2:	4363      	muls	r3, r4
   135c4:	18ea      	adds	r2, r5, r3
   135c6:	5ce8      	ldrb	r0, [r5, r3]
   135c8:	7851      	ldrb	r1, [r2, #1]
   135ca:	f013 fae5 	bl	26b98 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   135ce:	2000      	movs	r0, #0
   135d0:	f7ff ff86 	bl	134e0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   135d4:	230c      	movs	r3, #12
   135d6:	435c      	muls	r4, r3
   135d8:	192a      	adds	r2, r5, r4
   135da:	2300      	movs	r3, #0
   135dc:	512b      	str	r3, [r5, r4]
   135de:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   135e2:	bd38      	pop	{r3, r4, r5, pc}
   135e4:	f383 8811 	msr	BASEPRI, r3
   135e8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   135ec:	e7ef      	b.n	135ce <pm_system_resume+0x4a>
   135ee:	bf00      	nop
   135f0:	20002780 	.word	0x20002780
   135f4:	20002134 	.word	0x20002134
   135f8:	00026b99 	.word	0x00026b99
   135fc:	20002128 	.word	0x20002128

00013600 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   13600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   13604:	4b42      	ldr	r3, [pc, #264]	; (13710 <pm_system_suspend+0x110>)
{
   13606:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   13608:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   1360a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1360e:	f3ef 8811 	mrs	r8, BASEPRI
   13612:	f383 8812 	msr	BASEPRI_MAX, r3
   13616:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1361a:	483e      	ldr	r0, [pc, #248]	; (13714 <pm_system_suspend+0x114>)
   1361c:	f00e fe08 	bl	22230 <z_spin_lock_valid>
   13620:	b940      	cbnz	r0, 13634 <pm_system_suspend+0x34>
   13622:	493d      	ldr	r1, [pc, #244]	; (13718 <pm_system_suspend+0x118>)
   13624:	483d      	ldr	r0, [pc, #244]	; (1371c <pm_system_suspend+0x11c>)
   13626:	228e      	movs	r2, #142	; 0x8e
   13628:	f012 fae5 	bl	25bf6 <assert_print>
   1362c:	483a      	ldr	r0, [pc, #232]	; (13718 <pm_system_suspend+0x118>)
   1362e:	218e      	movs	r1, #142	; 0x8e
   13630:	f012 fada 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   13634:	4837      	ldr	r0, [pc, #220]	; (13714 <pm_system_suspend+0x114>)
   13636:	4e3a      	ldr	r6, [pc, #232]	; (13720 <pm_system_suspend+0x120>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   13638:	240c      	movs	r4, #12
   1363a:	f00e fe17 	bl	2226c <z_spin_lock_set_owner>
   1363e:	436c      	muls	r4, r5
   13640:	4b38      	ldr	r3, [pc, #224]	; (13724 <pm_system_suspend+0x124>)
   13642:	5d19      	ldrb	r1, [r3, r4]
   13644:	191a      	adds	r2, r3, r4
   13646:	2900      	cmp	r1, #0
   13648:	d056      	beq.n	136f8 <pm_system_suspend+0xf8>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1364a:	ca07      	ldmia	r2, {r0, r1, r2}
   1364c:	eb06 0c04 	add.w	ip, r6, r4
   13650:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   13654:	2200      	movs	r2, #0
   13656:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13658:	482e      	ldr	r0, [pc, #184]	; (13714 <pm_system_suspend+0x114>)
   1365a:	f00e fdf7 	bl	2224c <z_spin_unlock_valid>
   1365e:	b940      	cbnz	r0, 13672 <pm_system_suspend+0x72>
   13660:	492d      	ldr	r1, [pc, #180]	; (13718 <pm_system_suspend+0x118>)
   13662:	482e      	ldr	r0, [pc, #184]	; (1371c <pm_system_suspend+0x11c>)
   13664:	22b9      	movs	r2, #185	; 0xb9
   13666:	f012 fac6 	bl	25bf6 <assert_print>
   1366a:	482b      	ldr	r0, [pc, #172]	; (13718 <pm_system_suspend+0x118>)
   1366c:	21b9      	movs	r1, #185	; 0xb9
   1366e:	f012 fabb 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   13672:	f388 8811 	msr	BASEPRI, r8
   13676:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   1367a:	230c      	movs	r3, #12
   1367c:	436b      	muls	r3, r5
   1367e:	18f2      	adds	r2, r6, r3
   13680:	5cf0      	ldrb	r0, [r6, r3]
   13682:	b3b8      	cbz	r0, 136f4 <pm_system_suspend+0xf4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   13684:	1c7b      	adds	r3, r7, #1
   13686:	d00f      	beq.n	136a8 <pm_system_suspend+0xa8>
			return (uint32_t)((t * to_hz + off) / from_hz);
   13688:	f8d2 c008 	ldr.w	ip, [r2, #8]
   1368c:	4826      	ldr	r0, [pc, #152]	; (13728 <pm_system_suspend+0x128>)
   1368e:	4a27      	ldr	r2, [pc, #156]	; (1372c <pm_system_suspend+0x12c>)
   13690:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   13694:	2100      	movs	r1, #0
   13696:	2300      	movs	r3, #0
   13698:	fbec 0104 	umlal	r0, r1, ip, r4
   1369c:	f7ec fd20 	bl	e0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   136a0:	2101      	movs	r1, #1
   136a2:	1a38      	subs	r0, r7, r0
   136a4:	f010 fffc 	bl	246a0 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   136a8:	f00f febc 	bl	23424 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   136ac:	2001      	movs	r0, #1
   136ae:	f7ff ff17 	bl	134e0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   136b2:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   136b6:	f005 021f 	and.w	r2, r5, #31
   136ba:	2101      	movs	r1, #1
   136bc:	4091      	lsls	r1, r2
   136be:	4a1c      	ldr	r2, [pc, #112]	; (13730 <pm_system_suspend+0x130>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   136c0:	096b      	lsrs	r3, r5, #5
   136c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   136c6:	e853 2f00 	ldrex	r2, [r3]
   136ca:	430a      	orrs	r2, r1
   136cc:	e843 2000 	strex	r0, r2, [r3]
   136d0:	2800      	cmp	r0, #0
   136d2:	d1f8      	bne.n	136c6 <pm_system_suspend+0xc6>
   136d4:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   136d8:	4b16      	ldr	r3, [pc, #88]	; (13734 <pm_system_suspend+0x134>)
   136da:	b133      	cbz	r3, 136ea <pm_system_suspend+0xea>
		pm_state_set(info->state, info->substate_id);
   136dc:	200c      	movs	r0, #12
   136de:	4368      	muls	r0, r5
   136e0:	1833      	adds	r3, r6, r0
   136e2:	5c30      	ldrb	r0, [r6, r0]
   136e4:	7859      	ldrb	r1, [r3, #1]
   136e6:	f013 fa4b 	bl	26b80 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   136ea:	f7ff ff4b 	bl	13584 <pm_system_resume>
	k_sched_unlock();
   136ee:	f010 faf7 	bl	23ce0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   136f2:	2001      	movs	r0, #1
}
   136f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   136f8:	4639      	mov	r1, r7
   136fa:	4628      	mov	r0, r5
   136fc:	f000 f81c 	bl	13738 <pm_policy_next_state>
		if (info != NULL) {
   13700:	2800      	cmp	r0, #0
   13702:	d0a9      	beq.n	13658 <pm_system_suspend+0x58>
			z_cpus_pm_state[id] = *info;
   13704:	c807      	ldmia	r0, {r0, r1, r2}
   13706:	4434      	add	r4, r6
   13708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   1370c:	e7a4      	b.n	13658 <pm_system_suspend+0x58>
   1370e:	bf00      	nop
   13710:	20002780 	.word	0x20002780
   13714:	2000210c 	.word	0x2000210c
   13718:	0002b1aa 	.word	0x0002b1aa
   1371c:	0002ab8c 	.word	0x0002ab8c
   13720:	20002128 	.word	0x20002128
   13724:	2000211c 	.word	0x2000211c
   13728:	000f423f 	.word	0x000f423f
   1372c:	000f4240 	.word	0x000f4240
   13730:	20002134 	.word	0x20002134
   13734:	00026b81 	.word	0x00026b81

00013738 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   13738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1373c:	b085      	sub	sp, #20
   1373e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13740:	a903      	add	r1, sp, #12
   13742:	f000 f841 	bl	137c8 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
   13746:	9b03      	ldr	r3, [sp, #12]
   13748:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1374a:	4b1c      	ldr	r3, [pc, #112]	; (137bc <pm_policy_next_state+0x84>)
   1374c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 137c0 <pm_policy_next_state+0x88>
   13750:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13754:	1e44      	subs	r4, r0, #1
   13756:	b224      	sxth	r4, r4
   13758:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1375c:	f04f 0b00 	mov.w	fp, #0
   13760:	1c63      	adds	r3, r4, #1
   13762:	d104      	bne.n	1376e <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   13764:	2500      	movs	r5, #0
}
   13766:	4628      	mov	r0, r5
   13768:	b005      	add	sp, #20
   1376a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   1376e:	9b01      	ldr	r3, [sp, #4]
   13770:	4a14      	ldr	r2, [pc, #80]	; (137c4 <pm_policy_next_state+0x8c>)
   13772:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   13776:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1377a:	46c4      	mov	ip, r8
   1377c:	6868      	ldr	r0, [r5, #4]
   1377e:	4659      	mov	r1, fp
   13780:	fbe0 c107 	umlal	ip, r1, r0, r7
   13784:	2300      	movs	r3, #0
   13786:	4660      	mov	r0, ip
   13788:	f7ec fcaa 	bl	e0 <__aeabi_uldivmod>
   1378c:	4681      	mov	r9, r0
   1378e:	68a8      	ldr	r0, [r5, #8]
   13790:	4a0c      	ldr	r2, [pc, #48]	; (137c4 <pm_policy_next_state+0x8c>)
   13792:	46c4      	mov	ip, r8
   13794:	4659      	mov	r1, fp
   13796:	fbe0 c107 	umlal	ip, r1, r0, r7
   1379a:	2300      	movs	r3, #0
   1379c:	4660      	mov	r0, ip
   1379e:	f7ec fc9f 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   137a2:	f1ba 3fff 	cmp.w	sl, #4294967295
   137a6:	d001      	beq.n	137ac <pm_policy_next_state+0x74>
   137a8:	4582      	cmp	sl, r0
   137aa:	d904      	bls.n	137b6 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   137ac:	1c72      	adds	r2, r6, #1
   137ae:	d0da      	beq.n	13766 <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
   137b0:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
   137b2:	42b0      	cmp	r0, r6
   137b4:	d9d7      	bls.n	13766 <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   137b6:	3c01      	subs	r4, #1
   137b8:	b224      	sxth	r4, r4
   137ba:	e7d1      	b.n	13760 <pm_policy_next_state+0x28>
   137bc:	20000568 	.word	0x20000568
   137c0:	000f423f 	.word	0x000f423f
   137c4:	000f4240 	.word	0x000f4240

000137c8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   137c8:	b908      	cbnz	r0, 137ce <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   137ca:	4b02      	ldr	r3, [pc, #8]	; (137d4 <pm_state_cpu_get_all+0xc>)
   137cc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   137ce:	2000      	movs	r0, #0
   137d0:	4770      	bx	lr
   137d2:	bf00      	nop
   137d4:	0002a39c 	.word	0x0002a39c

000137d8 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
   137d8:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = ROUND_UP(len, DATA_ALIGN);
   137da:	1cc5      	adds	r5, r0, #3
   137dc:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
   137e0:	2d74      	cmp	r5, #116	; 0x74
   137e2:	d908      	bls.n	137f6 <user_data_alloc.constprop.0+0x1e>
   137e4:	4917      	ldr	r1, [pc, #92]	; (13844 <user_data_alloc.constprop.0+0x6c>)
   137e6:	4818      	ldr	r0, [pc, #96]	; (13848 <user_data_alloc.constprop.0+0x70>)
   137e8:	225b      	movs	r2, #91	; 0x5b
   137ea:	f012 fa04 	bl	25bf6 <assert_print>
   137ee:	4815      	ldr	r0, [pc, #84]	; (13844 <user_data_alloc.constprop.0+0x6c>)
   137f0:	215b      	movs	r1, #91	; 0x5b
   137f2:	f012 f9f9 	bl	25be8 <assert_post_action>
	return list->head;
   137f6:	4c15      	ldr	r4, [pc, #84]	; (1384c <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
   137f8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
   137fc:	b123      	cbz	r3, 13808 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
   137fe:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
   13802:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
   13804:	2b74      	cmp	r3, #116	; 0x74
   13806:	d919      	bls.n	1383c <user_data_alloc.constprop.0+0x64>

		item = k_calloc(1, sizeof(struct data_chunk_item));
   13808:	2178      	movs	r1, #120	; 0x78
   1380a:	2001      	movs	r0, #1
   1380c:	f016 fa8d 	bl	29d2a <k_calloc>

		if (!item) {
   13810:	b178      	cbz	r0, 13832 <user_data_alloc.constprop.0+0x5a>
	return list->tail;
   13812:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
	parent->next = child;
   13816:	2300      	movs	r3, #0
   13818:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   1381a:	b95a      	cbnz	r2, 13834 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
   1381c:	e9c4 0054 	strd	r0, r0, [r4, #336]	; 0x150
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
   13820:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
   13824:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
   13828:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
   1382a:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
   1382c:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
   1382e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

	return user_data_loc;
}
   13832:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   13834:	6010      	str	r0, [r2, #0]
	list->tail = node;
   13836:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
}
   1383a:	e7f1      	b.n	13820 <user_data_alloc.constprop.0+0x48>
	return list->tail;
   1383c:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   13840:	e7f0      	b.n	13824 <user_data_alloc.constprop.0+0x4c>
   13842:	bf00      	nop
   13844:	0002b3cb 	.word	0x0002b3cb
   13848:	0002ab8c 	.word	0x0002ab8c
   1384c:	20002138 	.word	0x20002138

00013850 <discovery_complete.constprop.0>:
   13850:	480a      	ldr	r0, [pc, #40]	; (1387c <discovery_complete.constprop.0+0x2c>)
   13852:	f3bf 8f5b 	dmb	ish
   13856:	f500 739c 	add.w	r3, r0, #312	; 0x138
   1385a:	e853 2f00 	ldrex	r2, [r3]
   1385e:	f042 0202 	orr.w	r2, r2, #2
   13862:	e843 2100 	strex	r1, r2, [r3]
   13866:	2900      	cmp	r1, #0
   13868:	d1f7      	bne.n	1385a <discovery_complete.constprop.0+0xa>
   1386a:	f3bf 8f5b 	dmb	ish

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
   1386e:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
   13872:	681b      	ldr	r3, [r3, #0]
   13874:	b10b      	cbz	r3, 1387a <discovery_complete.constprop.0+0x2a>
		dm->callback->completed(dm, dm->context);
   13876:	6841      	ldr	r1, [r0, #4]
   13878:	4718      	bx	r3
	}
}
   1387a:	4770      	bx	lr
   1387c:	20002138 	.word	0x20002138

00013880 <get_uuid_size.isra.0>:
	switch (uuid->type) {
   13880:	2802      	cmp	r0, #2
static size_t get_uuid_size(const struct bt_uuid *uuid)
   13882:	b508      	push	{r3, lr}
   13884:	d802      	bhi.n	1388c <get_uuid_size.isra.0+0xc>
   13886:	4b04      	ldr	r3, [pc, #16]	; (13898 <get_uuid_size.isra.0+0x18>)
   13888:	5c18      	ldrb	r0, [r3, r0]
}
   1388a:	bd08      	pop	{r3, pc}
		LOG_ERR("Unsupported UUID type.");
   1388c:	4803      	ldr	r0, [pc, #12]	; (1389c <get_uuid_size.isra.0+0x1c>)
   1388e:	2145      	movs	r1, #69	; 0x45
   13890:	f012 f9bf 	bl	25c12 <z_log_minimal_printk>
   13894:	2000      	movs	r0, #0
   13896:	e7f8      	b.n	1388a <get_uuid_size.isra.0+0xa>
   13898:	0002b65b 	.word	0x0002b65b
   1389c:	0002b3f6 	.word	0x0002b3f6

000138a0 <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   138a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   138a4:	4c1a      	ldr	r4, [pc, #104]	; (13910 <attr_store.constprop.0+0x70>)
   138a6:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   138aa:	2b22      	cmp	r3, #34	; 0x22
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   138ac:	4607      	mov	r7, r0
   138ae:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   138b0:	d907      	bls.n	138c2 <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
   138b2:	4818      	ldr	r0, [pc, #96]	; (13914 <attr_store.constprop.0+0x74>)
   138b4:	2145      	movs	r1, #69	; 0x45
   138b6:	f012 f9ac 	bl	25c12 <z_log_minimal_printk>
		return NULL;
   138ba:	2500      	movs	r5, #0
}
   138bc:	4628      	mov	r0, r5
   138be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
   138c2:	6803      	ldr	r3, [r0, #0]
   138c4:	7818      	ldrb	r0, [r3, #0]
   138c6:	f7ff ffdb 	bl	13880 <get_uuid_size.isra.0>
   138ca:	4680      	mov	r8, r0
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
   138cc:	4430      	add	r0, r6
   138ce:	f7ff ff83 	bl	137d8 <user_data_alloc.constprop.0>
	if (!attr_data) {
   138d2:	4605      	mov	r5, r0
   138d4:	b920      	cbnz	r0, 138e0 <attr_store.constprop.0+0x40>
		LOG_ERR("No space for attribute data.");
   138d6:	4810      	ldr	r0, [pc, #64]	; (13918 <attr_store.constprop.0+0x78>)
   138d8:	2145      	movs	r1, #69	; 0x45
   138da:	f012 f99a 	bl	25c12 <z_log_minimal_printk>
		return NULL;
   138de:	e7ed      	b.n	138bc <attr_store.constprop.0+0x1c>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   138e0:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
   138e4:	6839      	ldr	r1, [r7, #0]
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   138e6:	1c5a      	adds	r2, r3, #1
   138e8:	3303      	adds	r3, #3
   138ea:	00db      	lsls	r3, r3, #3
   138ec:	f103 0904 	add.w	r9, r3, #4
   138f0:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
   138f4:	44a1      	add	r9, r4
	cur_attr->handle = attr->handle;
   138f6:	441c      	add	r4, r3
   138f8:	8a3b      	ldrh	r3, [r7, #16]
   138fa:	8123      	strh	r3, [r4, #8]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
   138fc:	4430      	add	r0, r6
	cur_attr->perm = attr->perm;
   138fe:	8a7b      	ldrh	r3, [r7, #18]
   13900:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
   13902:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
   13904:	4642      	mov	r2, r8
   13906:	f013 f924 	bl	26b52 <memcpy>
	return cur_attr;
   1390a:	464d      	mov	r5, r9
   1390c:	e7d6      	b.n	138bc <attr_store.constprop.0+0x1c>
   1390e:	bf00      	nop
   13910:	20002138 	.word	0x20002138
   13914:	0002b412 	.word	0x0002b412
   13918:	0002b433 	.word	0x0002b433

0001391c <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
   1391c:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
   1391e:	4604      	mov	r4, r0
   13920:	b930      	cbnz	r0, 13930 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
   13922:	480c      	ldr	r0, [pc, #48]	; (13954 <uuid_store.constprop.0+0x38>)
   13924:	2145      	movs	r1, #69	; 0x45
   13926:	f012 f974 	bl	25c12 <z_log_minimal_printk>
		return NULL;
   1392a:	4625      	mov	r5, r4
}
   1392c:	4628      	mov	r0, r5
   1392e:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
   13930:	7800      	ldrb	r0, [r0, #0]
   13932:	f7ff ffa5 	bl	13880 <get_uuid_size.isra.0>
   13936:	4606      	mov	r6, r0
	void *buffer = user_data_alloc(dm, size);
   13938:	f7ff ff4e 	bl	137d8 <user_data_alloc.constprop.0>
	if (!buffer) {
   1393c:	4605      	mov	r5, r0
   1393e:	b920      	cbnz	r0, 1394a <uuid_store.constprop.0+0x2e>
		LOG_ERR("No space for a UUID.");
   13940:	4805      	ldr	r0, [pc, #20]	; (13958 <uuid_store.constprop.0+0x3c>)
   13942:	2145      	movs	r1, #69	; 0x45
   13944:	f012 f965 	bl	25c12 <z_log_minimal_printk>
		return NULL;
   13948:	e7f0      	b.n	1392c <uuid_store.constprop.0+0x10>
	memcpy(buffer, uuid, size);
   1394a:	4632      	mov	r2, r6
   1394c:	4621      	mov	r1, r4
   1394e:	f013 f900 	bl	26b52 <memcpy>
	return (struct bt_uuid *)buffer;
   13952:	e7eb      	b.n	1392c <uuid_store.constprop.0+0x10>
   13954:	0002b455 	.word	0x0002b455
   13958:	0002b46e 	.word	0x0002b46e

0001395c <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
   1395c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
   13960:	4e8f      	ldr	r6, [pc, #572]	; (13ba0 <discovery_callback+0x244>)
   13962:	6833      	ldr	r3, [r6, #0]
   13964:	4283      	cmp	r3, r0
{
   13966:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
   13968:	d009      	beq.n	1397e <discovery_callback+0x22>
		LOG_ERR("Unexpected conn object. Aborting.");
   1396a:	2145      	movs	r1, #69	; 0x45
   1396c:	488d      	ldr	r0, [pc, #564]	; (13ba4 <discovery_callback+0x248>)
   1396e:	f012 f950 	bl	25c12 <z_log_minimal_printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
   13972:	f06f 010d 	mvn.w	r1, #13
				discovery_complete_error(dm, err);
   13976:	4630      	mov	r0, r6
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
		discovery_complete_error(&bt_gatt_dm_inst, -EINVAL);
   13978:	f012 fd13 	bl	263a2 <discovery_complete_error>
   1397c:	e033      	b.n	139e6 <discovery_callback+0x8a>
   1397e:	7c13      	ldrb	r3, [r2, #16]
	switch (params->type) {
   13980:	2b03      	cmp	r3, #3
   13982:	f000 80cc 	beq.w	13b1e <discovery_callback+0x1c2>
   13986:	d80f      	bhi.n	139a8 <discovery_callback+0x4c>
   13988:	2b02      	cmp	r3, #2
   1398a:	d128      	bne.n	139de <discovery_callback+0x82>
		__ASSERT(false, "Unknown param type.");
   1398c:	4986      	ldr	r1, [pc, #536]	; (13ba8 <discovery_callback+0x24c>)
   1398e:	4887      	ldr	r0, [pc, #540]	; (13bac <discovery_callback+0x250>)
   13990:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   13994:	f012 f92f 	bl	25bf6 <assert_print>
   13998:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1399c:	4882      	ldr	r0, [pc, #520]	; (13ba8 <discovery_callback+0x24c>)
   1399e:	f012 f923 	bl	25be8 <assert_post_action>
		discovery_complete_error(&bt_gatt_dm_inst, -EINVAL);
   139a2:	f06f 0115 	mvn.w	r1, #21
   139a6:	e050      	b.n	13a4a <discovery_callback+0xee>
	switch (params->type) {
   139a8:	2b05      	cmp	r3, #5
   139aa:	d1ef      	bne.n	1398c <discovery_callback+0x30>
	if (!attr) {
   139ac:	2900      	cmp	r1, #0
   139ae:	f040 808a 	bne.w	13ac6 <discovery_callback+0x16a>
		if (dm->cur_attr_id > 1) {
   139b2:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
   139b6:	2b01      	cmp	r3, #1
   139b8:	d970      	bls.n	13a9c <discovery_callback+0x140>
				dm->attrs[0].handle + 1;
   139ba:	8c33      	ldrh	r3, [r6, #32]
   139bc:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
   139be:	8233      	strh	r3, [r6, #16]
			int err = bt_gatt_discover(dm->conn,
   139c0:	f106 0108 	add.w	r1, r6, #8
			dm->discover_params.type =
   139c4:	2303      	movs	r3, #3
   139c6:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
   139c8:	f007 fcb6 	bl	1b338 <bt_gatt_discover>
			if (err) {
   139cc:	4604      	mov	r4, r0
   139ce:	b150      	cbz	r0, 139e6 <discovery_callback+0x8a>
				LOG_ERR("Characteristic discover failed,"
   139d0:	4602      	mov	r2, r0
   139d2:	2145      	movs	r1, #69	; 0x45
   139d4:	4876      	ldr	r0, [pc, #472]	; (13bb0 <discovery_callback+0x254>)
   139d6:	f012 f91c 	bl	25c12 <z_log_minimal_printk>
				discovery_complete_error(dm, err);
   139da:	4621      	mov	r1, r4
   139dc:	e7cb      	b.n	13976 <discovery_callback+0x1a>
	if (!attr) {
   139de:	b921      	cbnz	r1, 139ea <discovery_callback+0x8e>
		discovery_complete_not_found(dm);
   139e0:	4630      	mov	r0, r6
   139e2:	f012 fcca 	bl	2637a <discovery_complete_not_found>

		break;
	}

	return BT_GATT_ITER_STOP;
   139e6:	2400      	movs	r4, #0
   139e8:	e083      	b.n	13af2 <discovery_callback+0x196>
	struct bt_gatt_service_val *service_val = attr->user_data;
   139ea:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
   139ee:	4628      	mov	r0, r5
   139f0:	2108      	movs	r1, #8
   139f2:	f7ff ff55 	bl	138a0 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   139f6:	2400      	movs	r4, #0
		attr_store(dm, attr, sizeof(*service_val));
   139f8:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   139fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   139fe:	6828      	ldr	r0, [r5, #0]
   13a00:	f88d 4000 	strb.w	r4, [sp]
   13a04:	4669      	mov	r1, sp
   13a06:	f8ad 3002 	strh.w	r3, [sp, #2]
   13a0a:	f013 f936 	bl	26c7a <bt_uuid_cmp>
   13a0e:	b1a8      	cbz	r0, 13a3c <discovery_callback+0xe0>
   13a10:	f642 0301 	movw	r3, #10241	; 0x2801
   13a14:	6828      	ldr	r0, [r5, #0]
   13a16:	f88d 4004 	strb.w	r4, [sp, #4]
   13a1a:	a901      	add	r1, sp, #4
   13a1c:	f8ad 3006 	strh.w	r3, [sp, #6]
   13a20:	f013 f92b 	bl	26c7a <bt_uuid_cmp>
   13a24:	b150      	cbz	r0, 13a3c <discovery_callback+0xe0>
   13a26:	4960      	ldr	r1, [pc, #384]	; (13ba8 <discovery_callback+0x24c>)
   13a28:	4860      	ldr	r0, [pc, #384]	; (13bac <discovery_callback+0x250>)
   13a2a:	f240 1227 	movw	r2, #295	; 0x127
   13a2e:	f012 f8e2 	bl	25bf6 <assert_print>
   13a32:	485d      	ldr	r0, [pc, #372]	; (13ba8 <discovery_callback+0x24c>)
   13a34:	f240 1127 	movw	r1, #295	; 0x127
   13a38:	f012 f8d6 	bl	25be8 <assert_post_action>
	if (!cur_attr) {
   13a3c:	b93f      	cbnz	r7, 13a4e <discovery_callback+0xf2>
		LOG_ERR("Not enough memory for service attribute.");
   13a3e:	2145      	movs	r1, #69	; 0x45
   13a40:	485c      	ldr	r0, [pc, #368]	; (13bb4 <discovery_callback+0x258>)
   13a42:	f012 f8e6 	bl	25c12 <z_log_minimal_printk>
		discovery_complete_error(dm, -ENOMEM);
   13a46:	f06f 010b 	mvn.w	r1, #11
		discovery_complete_error(&bt_gatt_dm_inst, -EINVAL);
   13a4a:	4855      	ldr	r0, [pc, #340]	; (13ba0 <discovery_callback+0x244>)
   13a4c:	e794      	b.n	13978 <discovery_callback+0x1c>
		bt_gatt_dm_attr_service_val(cur_attr);
   13a4e:	4638      	mov	r0, r7
   13a50:	f012 fcbd 	bl	263ce <bt_gatt_dm_attr_service_val>
	__ASSERT_NO_MSG(cur_service_val != NULL);
   13a54:	4605      	mov	r5, r0
   13a56:	b950      	cbnz	r0, 13a6e <discovery_callback+0x112>
   13a58:	4953      	ldr	r1, [pc, #332]	; (13ba8 <discovery_callback+0x24c>)
   13a5a:	4854      	ldr	r0, [pc, #336]	; (13bac <discovery_callback+0x250>)
   13a5c:	f240 123b 	movw	r2, #315	; 0x13b
   13a60:	f012 f8c9 	bl	25bf6 <assert_print>
   13a64:	4850      	ldr	r0, [pc, #320]	; (13ba8 <discovery_callback+0x24c>)
   13a66:	f240 113b 	movw	r1, #315	; 0x13b
   13a6a:	f012 f8bd 	bl	25be8 <assert_post_action>
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
   13a6e:	2208      	movs	r2, #8
   13a70:	4641      	mov	r1, r8
   13a72:	4628      	mov	r0, r5
   13a74:	f013 f86d 	bl	26b52 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
   13a78:	6828      	ldr	r0, [r5, #0]
   13a7a:	f7ff ff4f 	bl	1391c <uuid_store.constprop.0>
   13a7e:	4604      	mov	r4, r0
   13a80:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
   13a82:	b930      	cbnz	r0, 13a92 <discovery_callback+0x136>
		LOG_ERR("Not enough memory for service attribute data.");
   13a84:	484c      	ldr	r0, [pc, #304]	; (13bb8 <discovery_callback+0x25c>)
   13a86:	2145      	movs	r1, #69	; 0x45
   13a88:	f012 f8c3 	bl	25c12 <z_log_minimal_printk>
		discovery_complete_error(dm, -ENOMEM);
   13a8c:	f06f 010b 	mvn.w	r1, #11
   13a90:	e066      	b.n	13b60 <discovery_callback+0x204>
	dm->discover_params.end_handle = cur_service_val->end_handle;
   13a92:	88aa      	ldrh	r2, [r5, #4]
	if (cur_attr->handle == cur_service_val->end_handle) {
   13a94:	88bb      	ldrh	r3, [r7, #4]
	dm->discover_params.end_handle = cur_service_val->end_handle;
   13a96:	82f2      	strh	r2, [r6, #22]
	if (cur_attr->handle == cur_service_val->end_handle) {
   13a98:	429a      	cmp	r2, r3
   13a9a:	d102      	bne.n	13aa2 <discovery_callback+0x146>
		discovery_complete(dm);
   13a9c:	f7ff fed8 	bl	13850 <discovery_complete.constprop.0>
		return BT_GATT_ITER_STOP;
   13aa0:	e7a1      	b.n	139e6 <discovery_callback+0x8a>
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
   13aa2:	2205      	movs	r2, #5
	dm->discover_params.start_handle = cur_attr->handle + 1;
   13aa4:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   13aa6:	4945      	ldr	r1, [pc, #276]	; (13bbc <discovery_callback+0x260>)
   13aa8:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
   13aaa:	7632      	strb	r2, [r6, #24]
	dm->discover_params.uuid         = NULL;
   13aac:	2400      	movs	r4, #0
   13aae:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   13ab0:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   13ab2:	f007 fc41 	bl	1b338 <bt_gatt_discover>
	if (err) {
   13ab6:	4602      	mov	r2, r0
   13ab8:	2800      	cmp	r0, #0
   13aba:	d094      	beq.n	139e6 <discovery_callback+0x8a>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
   13abc:	4840      	ldr	r0, [pc, #256]	; (13bc0 <discovery_callback+0x264>)
   13abe:	2145      	movs	r1, #69	; 0x45
   13ac0:	f012 f8a7 	bl	25c12 <z_log_minimal_printk>
		discovery_complete_error(dm, -ENOMEM);
   13ac4:	e7e2      	b.n	13a8c <discovery_callback+0x130>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   13ac6:	2400      	movs	r4, #0
   13ac8:	f642 0303 	movw	r3, #10243	; 0x2803
   13acc:	6828      	ldr	r0, [r5, #0]
   13ace:	f88d 4004 	strb.w	r4, [sp, #4]
   13ad2:	a901      	add	r1, sp, #4
   13ad4:	f8ad 3006 	strh.w	r3, [sp, #6]
   13ad8:	f013 f8cf 	bl	26c7a <bt_uuid_cmp>
   13adc:	b968      	cbnz	r0, 13afa <discovery_callback+0x19e>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
   13ade:	2108      	movs	r1, #8
   13ae0:	4628      	mov	r0, r5
   13ae2:	f7ff fedd 	bl	138a0 <attr_store.constprop.0>
   13ae6:	4604      	mov	r4, r0
		struct bt_gatt_chrc *cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   13ae8:	f012 fc91 	bl	2640e <bt_gatt_dm_attr_chrc_val>
		cur_gatt_chrc->uuid = cur_attr->uuid;
   13aec:	6823      	ldr	r3, [r4, #0]
   13aee:	6003      	str	r3, [r0, #0]
	return BT_GATT_ITER_CONTINUE;
   13af0:	2401      	movs	r4, #1
}
   13af2:	4620      	mov	r0, r4
   13af4:	b002      	add	sp, #8
   13af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cur_attr = attr_store(dm, attr, 0);
   13afa:	4621      	mov	r1, r4
   13afc:	4628      	mov	r0, r5
   13afe:	f7ff fecf 	bl	138a0 <attr_store.constprop.0>
	if (!cur_attr) {
   13b02:	4604      	mov	r4, r0
   13b04:	2800      	cmp	r0, #0
   13b06:	d1f3      	bne.n	13af0 <discovery_callback+0x194>
		LOG_ERR("Not enough memory for next attribute descriptor"
   13b08:	482e      	ldr	r0, [pc, #184]	; (13bc4 <discovery_callback+0x268>)
   13b0a:	8a2a      	ldrh	r2, [r5, #16]
   13b0c:	2145      	movs	r1, #69	; 0x45
   13b0e:	f012 f880 	bl	25c12 <z_log_minimal_printk>
		discovery_complete_error(dm, -ENOMEM);
   13b12:	f06f 010b 	mvn.w	r1, #11
   13b16:	4630      	mov	r0, r6
		discovery_complete_error(dm, -ENOMEM);
   13b18:	f012 fc43 	bl	263a2 <discovery_complete_error>
		return BT_GATT_ITER_STOP;
   13b1c:	e7e9      	b.n	13af2 <discovery_callback+0x196>
	if (!attr) {
   13b1e:	2900      	cmp	r1, #0
   13b20:	d0bc      	beq.n	13a9c <discovery_callback+0x140>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
   13b22:	2300      	movs	r3, #0
   13b24:	f88d 3004 	strb.w	r3, [sp, #4]
   13b28:	6828      	ldr	r0, [r5, #0]
   13b2a:	f642 0303 	movw	r3, #10243	; 0x2803
   13b2e:	a901      	add	r1, sp, #4
   13b30:	f8ad 3006 	strh.w	r3, [sp, #6]
   13b34:	f013 f8a1 	bl	26c7a <bt_uuid_cmp>
   13b38:	b150      	cbz	r0, 13b50 <discovery_callback+0x1f4>
   13b3a:	491b      	ldr	r1, [pc, #108]	; (13ba8 <discovery_callback+0x24c>)
   13b3c:	481b      	ldr	r0, [pc, #108]	; (13bac <discovery_callback+0x250>)
   13b3e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
   13b42:	f012 f858 	bl	25bf6 <assert_print>
   13b46:	4818      	ldr	r0, [pc, #96]	; (13ba8 <discovery_callback+0x24c>)
   13b48:	f44f 71ce 	mov.w	r1, #412	; 0x19c
   13b4c:	f012 f84c 	bl	25be8 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
   13b50:	8a29      	ldrh	r1, [r5, #16]
   13b52:	4813      	ldr	r0, [pc, #76]	; (13ba0 <discovery_callback+0x244>)
   13b54:	f012 fbcd 	bl	262f2 <attr_find_by_handle>
	if (!cur_attr) {
   13b58:	4604      	mov	r4, r0
   13b5a:	b918      	cbnz	r0, 13b64 <discovery_callback+0x208>
		discovery_complete_error(dm, -ESRCH);
   13b5c:	f06f 0102 	mvn.w	r1, #2
		discovery_complete_error(dm, -ENOMEM);
   13b60:	480f      	ldr	r0, [pc, #60]	; (13ba0 <discovery_callback+0x244>)
   13b62:	e7d9      	b.n	13b18 <discovery_callback+0x1bc>
	gatt_chrc = attr->user_data;
   13b64:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   13b66:	f012 fc52 	bl	2640e <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(cur_gatt_chrc != NULL);
   13b6a:	4605      	mov	r5, r0
   13b6c:	b950      	cbnz	r0, 13b84 <discovery_callback+0x228>
   13b6e:	490e      	ldr	r1, [pc, #56]	; (13ba8 <discovery_callback+0x24c>)
   13b70:	480e      	ldr	r0, [pc, #56]	; (13bac <discovery_callback+0x250>)
   13b72:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
   13b76:	f012 f83e 	bl	25bf6 <assert_print>
   13b7a:	480b      	ldr	r0, [pc, #44]	; (13ba8 <discovery_callback+0x24c>)
   13b7c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   13b80:	f012 f832 	bl	25be8 <assert_post_action>
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
   13b84:	4621      	mov	r1, r4
   13b86:	2208      	movs	r2, #8
   13b88:	4628      	mov	r0, r5
   13b8a:	f012 ffe2 	bl	26b52 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
   13b8e:	6828      	ldr	r0, [r5, #0]
   13b90:	f7ff fec4 	bl	1391c <uuid_store.constprop.0>
   13b94:	4604      	mov	r4, r0
   13b96:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
   13b98:	2800      	cmp	r0, #0
   13b9a:	d1a9      	bne.n	13af0 <discovery_callback+0x194>
   13b9c:	e776      	b.n	13a8c <discovery_callback+0x130>
   13b9e:	bf00      	nop
   13ba0:	20002138 	.word	0x20002138
   13ba4:	0002b488 	.word	0x0002b488
   13ba8:	0002b3cb 	.word	0x0002b3cb
   13bac:	0002ab8c 	.word	0x0002ab8c
   13bb0:	0002b53c 	.word	0x0002b53c
   13bb4:	0002b4af 	.word	0x0002b4af
   13bb8:	0002b4dd 	.word	0x0002b4dd
   13bbc:	20002140 	.word	0x20002140
   13bc0:	0002b510 	.word	0x0002b510
   13bc4:	0002b56c 	.word	0x0002b56c

00013bc8 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
   13bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct bt_gatt_dm_attr *curr = NULL;

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
   13bcc:	f8df 8048 	ldr.w	r8, [pc, #72]	; 13c18 <bt_gatt_dm_char_by_uuid+0x50>
   13bd0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 13c1c <bt_gatt_dm_char_by_uuid+0x54>
{
   13bd4:	4606      	mov	r6, r0
   13bd6:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
   13bd8:	2400      	movs	r4, #0
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
   13bda:	4621      	mov	r1, r4
   13bdc:	4630      	mov	r0, r6
   13bde:	f012 fc2e 	bl	2643e <bt_gatt_dm_char_next>
   13be2:	4604      	mov	r4, r0
   13be4:	b1a0      	cbz	r0, 13c10 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
   13be6:	f012 fc12 	bl	2640e <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
   13bea:	4605      	mov	r5, r0
   13bec:	b950      	cbnz	r0, 13c04 <bt_gatt_dm_char_by_uuid+0x3c>
   13bee:	4641      	mov	r1, r8
   13bf0:	4648      	mov	r0, r9
   13bf2:	f44f 7207 	mov.w	r2, #540	; 0x21c
   13bf6:	f011 fffe 	bl	25bf6 <assert_print>
   13bfa:	f44f 7107 	mov.w	r1, #540	; 0x21c
   13bfe:	4640      	mov	r0, r8
   13c00:	f011 fff2 	bl	25be8 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
   13c04:	6829      	ldr	r1, [r5, #0]
   13c06:	4638      	mov	r0, r7
   13c08:	f013 f837 	bl	26c7a <bt_uuid_cmp>
   13c0c:	2800      	cmp	r0, #0
   13c0e:	d1e4      	bne.n	13bda <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
   13c10:	4620      	mov	r0, r4
   13c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13c16:	bf00      	nop
   13c18:	0002b3cb 	.word	0x0002b3cb
   13c1c:	0002ab8c 	.word	0x0002ab8c

00013c20 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
   13c20:	b570      	push	{r4, r5, r6, lr}
   13c22:	4606      	mov	r6, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
   13c24:	460d      	mov	r5, r1
   13c26:	b119      	cbz	r1, 13c30 <bt_gatt_dm_start+0x10>
   13c28:	7809      	ldrb	r1, [r1, #0]
   13c2a:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   13c2e:	d14c      	bne.n	13cca <bt_gatt_dm_start+0xaa>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
   13c30:	2a00      	cmp	r2, #0
   13c32:	d04a      	beq.n	13cca <bt_gatt_dm_start+0xaa>
   13c34:	f3bf 8f5b 	dmb	ish
   13c38:	4c27      	ldr	r4, [pc, #156]	; (13cd8 <bt_gatt_dm_start+0xb8>)
   13c3a:	f504 709c 	add.w	r0, r4, #312	; 0x138
   13c3e:	e850 1f00 	ldrex	r1, [r0]
   13c42:	f041 0c01 	orr.w	ip, r1, #1
   13c46:	e840 ce00 	strex	lr, ip, [r0]
   13c4a:	f1be 0f00 	cmp.w	lr, #0
   13c4e:	d1f6      	bne.n	13c3e <bt_gatt_dm_start+0x1e>
   13c50:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
   13c54:	f011 0101 	ands.w	r1, r1, #1
   13c58:	d13a      	bne.n	13cd0 <bt_gatt_dm_start+0xb0>
	dm->context = context;
	dm->callback = cb;
	dm->cur_attr_id = 0;
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
	dm->search_svc_by_uuid = (svc_uuid != NULL);
   13c5a:	2d00      	cmp	r5, #0
	dm->context = context;
   13c5c:	e9c4 6300 	strd	r6, r3, [r4]
	dm->search_svc_by_uuid = (svc_uuid != NULL);
   13c60:	bf14      	ite	ne
   13c62:	2301      	movne	r3, #1
   13c64:	2300      	moveq	r3, #0
	list->tail = NULL;
   13c66:	e9c4 1154 	strd	r1, r1, [r4, #336]	; 0x150
	dm->callback = cb;
   13c6a:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	dm->cur_attr_id = 0;
   13c6e:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	dm->cur_chunk_len = 0;
   13c72:	f8c4 1158 	str.w	r1, [r4, #344]	; 0x158
	dm->search_svc_by_uuid = (svc_uuid != NULL);
   13c76:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160

	if (svc_uuid) {
   13c7a:	d00a      	beq.n	13c92 <bt_gatt_dm_start+0x72>
		size_t uuid_size;

		uuid_size = get_uuid_size(svc_uuid);
   13c7c:	7828      	ldrb	r0, [r5, #0]
   13c7e:	f7ff fdff 	bl	13880 <get_uuid_size.isra.0>
		memcpy(&dm->svc_uuid.uuid, svc_uuid, uuid_size);
   13c82:	4629      	mov	r1, r5
		uuid_size = get_uuid_size(svc_uuid);
   13c84:	4602      	mov	r2, r0
		memcpy(&dm->svc_uuid.uuid, svc_uuid, uuid_size);
   13c86:	f504 709e 	add.w	r0, r4, #316	; 0x13c
   13c8a:	f012 ff62 	bl	26b52 <memcpy>
	}

	dm->discover_params.uuid = svc_uuid ? &dm->svc_uuid.uuid : NULL;
   13c8e:	f504 759e 	add.w	r5, r4, #316	; 0x13c
	dm->discover_params.func = discovery_callback;
   13c92:	4b12      	ldr	r3, [pc, #72]	; (13cdc <bt_gatt_dm_start+0xbc>)
   13c94:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
   13c96:	2301      	movs	r3, #1
   13c98:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
   13c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13c9e:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;

	err = bt_gatt_discover(conn, &dm->discover_params);
   13ca0:	490f      	ldr	r1, [pc, #60]	; (13ce0 <bt_gatt_dm_start+0xc0>)
	dm->discover_params.uuid = svc_uuid ? &dm->svc_uuid.uuid : NULL;
   13ca2:	60a5      	str	r5, [r4, #8]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   13ca4:	2300      	movs	r3, #0
	err = bt_gatt_discover(conn, &dm->discover_params);
   13ca6:	4630      	mov	r0, r6
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   13ca8:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
   13caa:	f007 fb45 	bl	1b338 <bt_gatt_discover>
	if (err) {
   13cae:	4604      	mov	r4, r0
   13cb0:	b148      	cbz	r0, 13cc6 <bt_gatt_dm_start+0xa6>
		LOG_ERR("Discover failed, error: %d.", err);
   13cb2:	4602      	mov	r2, r0
   13cb4:	2145      	movs	r1, #69	; 0x45
   13cb6:	480b      	ldr	r0, [pc, #44]	; (13ce4 <bt_gatt_dm_start+0xc4>)
   13cb8:	f011 ffab 	bl	25c12 <z_log_minimal_printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13cbc:	480a      	ldr	r0, [pc, #40]	; (13ce8 <bt_gatt_dm_start+0xc8>)
   13cbe:	f06f 0101 	mvn.w	r1, #1
   13cc2:	f012 fb4b 	bl	2635c <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
   13cc6:	4620      	mov	r0, r4
   13cc8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   13cca:	f06f 0415 	mvn.w	r4, #21
   13cce:	e7fa      	b.n	13cc6 <bt_gatt_dm_start+0xa6>
		return -EALREADY;
   13cd0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13cd4:	e7f7      	b.n	13cc6 <bt_gatt_dm_start+0xa6>
   13cd6:	bf00      	nop
   13cd8:	20002138 	.word	0x20002138
   13cdc:	0001395d 	.word	0x0001395d
   13ce0:	20002140 	.word	0x20002140
   13ce4:	0002b5af 	.word	0x0002b5af
   13ce8:	20002270 	.word	0x20002270

00013cec <bt_gatt_dm_data_print>:
		printk("\tCCCD\n");
	}
}

void bt_gatt_dm_data_print(const struct bt_gatt_dm *dm)
{
   13cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printk("ATT[%u]: \tUUID: 0x%s\tHandle: 0x%04X\tValue:\n",
   13cf0:	4f36      	ldr	r7, [pc, #216]	; (13dcc <bt_gatt_dm_data_print+0xe0>)
		printk("\tCCCD\n");
   13cf2:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 13dd0 <bt_gatt_dm_data_print+0xe4>
	printk("\tCharacteristic: 0x%s\tProperties: 0x%04X\n",
   13cf6:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 13dd4 <bt_gatt_dm_data_print+0xe8>
{
   13cfa:	b099      	sub	sp, #100	; 0x64
   13cfc:	4605      	mov	r5, r0
	const struct bt_gatt_dm_attr *attr = NULL;
   13cfe:	2400      	movs	r4, #0

	while (NULL != (attr = bt_gatt_dm_attr_next(dm, attr))) {
   13d00:	4621      	mov	r1, r4
   13d02:	4628      	mov	r0, r5
   13d04:	f012 fbbd 	bl	26482 <bt_gatt_dm_attr_next>
   13d08:	4604      	mov	r4, r0
   13d0a:	b910      	cbnz	r0, 13d12 <bt_gatt_dm_data_print+0x26>
		attr_print(dm, attr);
	}
}
   13d0c:	b019      	add	sp, #100	; 0x64
   13d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_uuid_to_str(attr->uuid, str, sizeof(str));
   13d12:	6820      	ldr	r0, [r4, #0]
   13d14:	2225      	movs	r2, #37	; 0x25
   13d16:	a904      	add	r1, sp, #16
   13d18:	f001 fa6e 	bl	151f8 <bt_uuid_to_str>
	       (unsigned int)(attr - dm->attrs), str, attr->handle);
   13d1c:	f105 011c 	add.w	r1, r5, #28
   13d20:	1a61      	subs	r1, r4, r1
	printk("ATT[%u]: \tUUID: 0x%s\tHandle: 0x%04X\tValue:\n",
   13d22:	88a3      	ldrh	r3, [r4, #4]
   13d24:	10c9      	asrs	r1, r1, #3
   13d26:	4638      	mov	r0, r7
   13d28:	aa04      	add	r2, sp, #16
   13d2a:	f011 fd73 	bl	25814 <printk>
	if ((bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0) ||
   13d2e:	2600      	movs	r6, #0
   13d30:	6820      	ldr	r0, [r4, #0]
   13d32:	f88d 600c 	strb.w	r6, [sp, #12]
   13d36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   13d3a:	a903      	add	r1, sp, #12
   13d3c:	f8ad 300e 	strh.w	r3, [sp, #14]
   13d40:	f012 ff9b 	bl	26c7a <bt_uuid_cmp>
   13d44:	b970      	cbnz	r0, 13d64 <bt_gatt_dm_data_print+0x78>
		svc_attr_data_print(bt_gatt_dm_attr_service_val(attr));
   13d46:	4620      	mov	r0, r4
   13d48:	f012 fb41 	bl	263ce <bt_gatt_dm_attr_service_val>
   13d4c:	4606      	mov	r6, r0
	bt_uuid_to_str(gatt_service->uuid, str, sizeof(str));
   13d4e:	2225      	movs	r2, #37	; 0x25
   13d50:	6800      	ldr	r0, [r0, #0]
   13d52:	a90e      	add	r1, sp, #56	; 0x38
   13d54:	f001 fa50 	bl	151f8 <bt_uuid_to_str>
	printk("\tService: 0x%s\tEnd Handle: 0x%04X\n",
   13d58:	88b2      	ldrh	r2, [r6, #4]
   13d5a:	481f      	ldr	r0, [pc, #124]	; (13dd8 <bt_gatt_dm_data_print+0xec>)
   13d5c:	a90e      	add	r1, sp, #56	; 0x38
	printk("\tCharacteristic: 0x%s\tProperties: 0x%04X\n",
   13d5e:	f011 fd59 	bl	25814 <printk>
}
   13d62:	e7cd      	b.n	13d00 <bt_gatt_dm_data_print+0x14>
	    (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY) == 0)) {
   13d64:	6820      	ldr	r0, [r4, #0]
   13d66:	f88d 6008 	strb.w	r6, [sp, #8]
   13d6a:	f642 0301 	movw	r3, #10241	; 0x2801
   13d6e:	a902      	add	r1, sp, #8
   13d70:	f8ad 300a 	strh.w	r3, [sp, #10]
   13d74:	f012 ff81 	bl	26c7a <bt_uuid_cmp>
	if ((bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0) ||
   13d78:	2800      	cmp	r0, #0
   13d7a:	d0e4      	beq.n	13d46 <bt_gatt_dm_data_print+0x5a>
	} else if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   13d7c:	6820      	ldr	r0, [r4, #0]
   13d7e:	f88d 6004 	strb.w	r6, [sp, #4]
   13d82:	f642 0303 	movw	r3, #10243	; 0x2803
   13d86:	a901      	add	r1, sp, #4
   13d88:	f8ad 3006 	strh.w	r3, [sp, #6]
   13d8c:	f012 ff75 	bl	26c7a <bt_uuid_cmp>
   13d90:	b960      	cbnz	r0, 13dac <bt_gatt_dm_data_print+0xc0>
		chrc_attr_data_print(bt_gatt_dm_attr_chrc_val(attr));
   13d92:	4620      	mov	r0, r4
   13d94:	f012 fb3b 	bl	2640e <bt_gatt_dm_attr_chrc_val>
   13d98:	4606      	mov	r6, r0
	bt_uuid_to_str(gatt_chrc->uuid, str, sizeof(str));
   13d9a:	2225      	movs	r2, #37	; 0x25
   13d9c:	6800      	ldr	r0, [r0, #0]
   13d9e:	a90e      	add	r1, sp, #56	; 0x38
   13da0:	f001 fa2a 	bl	151f8 <bt_uuid_to_str>
	printk("\tCharacteristic: 0x%s\tProperties: 0x%04X\n",
   13da4:	79b2      	ldrb	r2, [r6, #6]
   13da6:	a90e      	add	r1, sp, #56	; 0x38
   13da8:	4648      	mov	r0, r9
   13daa:	e7d8      	b.n	13d5e <bt_gatt_dm_data_print+0x72>
	} else if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) == 0) {
   13dac:	6820      	ldr	r0, [r4, #0]
   13dae:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
   13db2:	f642 1302 	movw	r3, #10498	; 0x2902
   13db6:	a90e      	add	r1, sp, #56	; 0x38
   13db8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   13dbc:	f012 ff5d 	bl	26c7a <bt_uuid_cmp>
   13dc0:	2800      	cmp	r0, #0
   13dc2:	d19d      	bne.n	13d00 <bt_gatt_dm_data_print+0x14>
		printk("\tCCCD\n");
   13dc4:	4640      	mov	r0, r8
   13dc6:	f011 fd25 	bl	25814 <printk>
}
   13dca:	e799      	b.n	13d00 <bt_gatt_dm_data_print+0x14>
   13dcc:	0002b5d0 	.word	0x0002b5d0
   13dd0:	0002b649 	.word	0x0002b649
   13dd4:	0002b61f 	.word	0x0002b61f
   13dd8:	0002b5fc 	.word	0x0002b5fc

00013ddc <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   13ddc:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   13dde:	4c06      	ldr	r4, [pc, #24]	; (13df8 <scan_default_param_set+0x1c>)
   13de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
   13de2:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   13de4:	ad01      	add	r5, sp, #4
   13de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   13de8:	ad01      	add	r5, sp, #4
   13dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   13dec:	6826      	ldr	r6, [r4, #0]
	bt_scan.scan_param = *scan_param;
   13dee:	4c03      	ldr	r4, [pc, #12]	; (13dfc <scan_default_param_set+0x20>)
   13df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13df2:	6026      	str	r6, [r4, #0]
}
   13df4:	b006      	add	sp, #24
   13df6:	bd70      	pop	{r4, r5, r6, pc}
   13df8:	0002a1ec 	.word	0x0002a1ec
   13dfc:	200022cc 	.word	0x200022cc

00013e00 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
   13e00:	4b03      	ldr	r3, [pc, #12]	; (13e10 <scan_default_conn_param_set+0x10>)
   13e02:	4904      	ldr	r1, [pc, #16]	; (13e14 <scan_default_conn_param_set+0x14>)
   13e04:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
   13e08:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
}
   13e0c:	4770      	bx	lr
   13e0e:	bf00      	nop
   13e10:	2000229c 	.word	0x2000229c
   13e14:	00280018 	.word	0x00280018

00013e18 <uuid_check>:
{
   13e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return CONFIG_BT_SCAN_UUID_CNT && bt_scan.scan_filters.uuid.enabled;
   13e1c:	4c29      	ldr	r4, [pc, #164]	; (13ec4 <uuid_check+0xac>)
{
   13e1e:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
   13e20:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
{
   13e24:	9100      	str	r1, [sp, #0]
   13e26:	4606      	mov	r6, r0
   13e28:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
   13e2a:	2b00      	cmp	r3, #0
   13e2c:	d03c      	beq.n	13ea8 <uuid_check+0x90>
	uint8_t data_len = data->data_len;
   13e2e:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
   13e30:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   13e34:	f894 a020 	ldrb.w	sl, [r4, #32]
	uint8_t data_len = data->data_len;
   13e38:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
   13e3a:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
   13e3c:	463d      	mov	r5, r7
	for (size_t i = 0; i < counter; i++) {
   13e3e:	4557      	cmp	r7, sl
   13e40:	d30e      	bcc.n	13e60 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
   13e42:	f886 503c 	strb.w	r5, [r6, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   13e46:	f1bb 0f00 	cmp.w	fp, #0
   13e4a:	d02b      	beq.n	13ea4 <uuid_check+0x8c>
   13e4c:	45aa      	cmp	sl, r5
   13e4e:	d12b      	bne.n	13ea8 <uuid_check+0x90>
			control->filter_match_cnt++;
   13e50:	7873      	ldrb	r3, [r6, #1]
   13e52:	3301      	adds	r3, #1
   13e54:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
   13e56:	2301      	movs	r3, #1
   13e58:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
   13e5c:	70b3      	strb	r3, [r6, #2]
}
   13e5e:	e023      	b.n	13ea8 <uuid_check+0x90>
		if (find_uuid(data->data, data_len, uuid_type,
   13e60:	9b00      	ldr	r3, [sp, #0]
   13e62:	9a03      	ldr	r2, [sp, #12]
   13e64:	685b      	ldr	r3, [r3, #4]
   13e66:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
   13e68:	4b17      	ldr	r3, [pc, #92]	; (13ec8 <uuid_check+0xb0>)
   13e6a:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
   13e6e:	f04f 0900 	mov.w	r9, #0
   13e72:	9b01      	ldr	r3, [sp, #4]
   13e74:	4599      	cmp	r9, r3
   13e76:	d305      	bcc.n	13e84 <uuid_check+0x6c>
		} else if (all_filters_mode) {
   13e78:	f1bb 0f00 	cmp.w	fp, #0
   13e7c:	d1e1      	bne.n	13e42 <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
   13e7e:	3701      	adds	r7, #1
   13e80:	3418      	adds	r4, #24
   13e82:	e7dc      	b.n	13e3e <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
   13e84:	9b02      	ldr	r3, [sp, #8]
   13e86:	4642      	mov	r2, r8
   13e88:	eb03 0109 	add.w	r1, r3, r9
   13e8c:	a805      	add	r0, sp, #20
   13e8e:	f012 ff22 	bl	26cd6 <bt_uuid_create>
   13e92:	2800      	cmp	r0, #0
   13e94:	d0f0      	beq.n	13e78 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
   13e96:	68a1      	ldr	r1, [r4, #8]
   13e98:	a805      	add	r0, sp, #20
   13e9a:	f012 feee 	bl	26c7a <bt_uuid_cmp>
   13e9e:	b130      	cbz	r0, 13eae <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
   13ea0:	44c1      	add	r9, r8
   13ea2:	e7e6      	b.n	13e72 <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
   13ea4:	2d00      	cmp	r5, #0
   13ea6:	d1d3      	bne.n	13e50 <uuid_check+0x38>
}
   13ea8:	b00b      	add	sp, #44	; 0x2c
   13eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   13eae:	eb06 0285 	add.w	r2, r6, r5, lsl #2
				uuid_filter->uuid[i].uuid;
   13eb2:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   13eb4:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
   13eb6:	3501      	adds	r5, #1
   13eb8:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
   13eba:	f1bb 0f00 	cmp.w	fp, #0
   13ebe:	d1de      	bne.n	13e7e <uuid_check+0x66>
   13ec0:	e7bf      	b.n	13e42 <uuid_check+0x2a>
   13ec2:	bf00      	nop
   13ec4:	2000229c 	.word	0x2000229c
   13ec8:	0002b66a 	.word	0x0002b66a

00013ecc <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   13ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   13ece:	4b09      	ldr	r3, [pc, #36]	; (13ef4 <notify_filter_matched.constprop.0+0x28>)
   13ed0:	681c      	ldr	r4, [r3, #0]
   13ed2:	4605      	mov	r5, r0
   13ed4:	460e      	mov	r6, r1
   13ed6:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13ed8:	b154      	cbz	r4, 13ef0 <notify_filter_matched.constprop.0+0x24>
		if (cb->cb_addr->filter_match) {
   13eda:	f854 3c04 	ldr.w	r3, [r4, #-4]
   13ede:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   13ee0:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_match) {
   13ee2:	b11b      	cbz	r3, 13eec <notify_filter_matched.constprop.0+0x20>
			cb->cb_addr->filter_match(device_info, filter_match,
   13ee4:	463a      	mov	r2, r7
   13ee6:	4631      	mov	r1, r6
   13ee8:	4628      	mov	r0, r5
   13eea:	4798      	blx	r3
	return node->next;
   13eec:	6864      	ldr	r4, [r4, #4]
   13eee:	e7f3      	b.n	13ed8 <notify_filter_matched.constprop.0+0xc>
}
   13ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13ef2:	bf00      	nop
   13ef4:	200022e8 	.word	0x200022e8

00013ef8 <bt_scan_cb_register>:
	if (!cb) {
   13ef8:	b150      	cbz	r0, 13f10 <bt_scan_cb_register+0x18>
	parent->next = child;
   13efa:	2300      	movs	r3, #0
   13efc:	6043      	str	r3, [r0, #4]
	return list->tail;
   13efe:	4b05      	ldr	r3, [pc, #20]	; (13f14 <bt_scan_cb_register+0x1c>)
   13f00:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   13f02:	1d02      	adds	r2, r0, #4
Z_GENLIST_APPEND(slist, snode)
   13f04:	b911      	cbnz	r1, 13f0c <bt_scan_cb_register+0x14>
	list->head = node;
   13f06:	e9c3 2200 	strd	r2, r2, [r3]
}
   13f0a:	4770      	bx	lr
	parent->next = child;
   13f0c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   13f0e:	605a      	str	r2, [r3, #4]
}
   13f10:	4770      	bx	lr
   13f12:	bf00      	nop
   13f14:	200022e8 	.word	0x200022e8

00013f18 <bt_scan_filter_add>:

int bt_scan_filter_add(enum bt_scan_filter_type type,
		       const void *data)
{
   13f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f1a:	4605      	mov	r5, r0
	struct bt_uuid *uuid;
	uint16_t appearance;
	struct bt_scan_manufacturer_data *manufacturer_data;
	int err = 0;

	if (!data) {
   13f1c:	460c      	mov	r4, r1
   13f1e:	2900      	cmp	r1, #0
   13f20:	d048      	beq.n	13fb4 <bt_scan_filter_add+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
   13f22:	4826      	ldr	r0, [pc, #152]	; (13fbc <bt_scan_filter_add+0xa4>)
   13f24:	f04f 32ff 	mov.w	r2, #4294967295
   13f28:	f04f 33ff 	mov.w	r3, #4294967295
   13f2c:	f00e f9d4 	bl	222d8 <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&scan_mutex, K_FOREVER);

	switch (type) {
   13f30:	2d03      	cmp	r5, #3
   13f32:	d00c      	beq.n	13f4e <bt_scan_filter_add+0x36>
   13f34:	d938      	bls.n	13fa8 <bt_scan_filter_add+0x90>
   13f36:	3d04      	subs	r5, #4
		manufacturer_data = (struct bt_scan_manufacturer_data *)data;
		err = scan_manufacturer_data_filter_add(manufacturer_data);
		break;

	default:
		err = -EINVAL;
   13f38:	2d01      	cmp	r5, #1
   13f3a:	bf94      	ite	ls
   13f3c:	f06f 040b 	mvnls.w	r4, #11
   13f40:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
   13f44:	481d      	ldr	r0, [pc, #116]	; (13fbc <bt_scan_filter_add+0xa4>)
   13f46:	f00e fa99 	bl	2247c <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&scan_mutex);

	return err;
}
   13f4a:	4620      	mov	r0, r4
   13f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   13f4e:	4a1c      	ldr	r2, [pc, #112]	; (13fc0 <bt_scan_filter_add+0xa8>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
   13f50:	f892 3020 	ldrb.w	r3, [r2, #32]
   13f54:	bb43      	cbnz	r3, 13fa8 <bt_scan_filter_add+0x90>
	switch (uuid->type) {
   13f56:	7823      	ldrb	r3, [r4, #0]
   13f58:	2b01      	cmp	r3, #1
   13f5a:	d00c      	beq.n	13f76 <bt_scan_filter_add+0x5e>
   13f5c:	2b02      	cmp	r3, #2
   13f5e:	d011      	beq.n	13f84 <bt_scan_filter_add+0x6c>
   13f60:	bb2b      	cbnz	r3, 13fae <bt_scan_filter_add+0x96>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
   13f62:	6820      	ldr	r0, [r4, #0]
   13f64:	60d0      	str	r0, [r2, #12]
   13f66:	f102 030c 	add.w	r3, r2, #12
		uuid_filter[counter].uuid =
   13f6a:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
   13f6c:	2301      	movs	r3, #1
   13f6e:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
   13f72:	2400      	movs	r4, #0
   13f74:	e7e6      	b.n	13f44 <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
   13f76:	e894 0003 	ldmia.w	r4, {r0, r1}
   13f7a:	f102 030c 	add.w	r3, r2, #12
   13f7e:	e883 0003 	stmia.w	r3, {r0, r1}
   13f82:	e7f2      	b.n	13f6a <bt_scan_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
   13f84:	4623      	mov	r3, r4
   13f86:	f102 040c 	add.w	r4, r2, #12
   13f8a:	f103 0710 	add.w	r7, r3, #16
   13f8e:	4626      	mov	r6, r4
   13f90:	6818      	ldr	r0, [r3, #0]
   13f92:	6859      	ldr	r1, [r3, #4]
   13f94:	4625      	mov	r5, r4
   13f96:	c503      	stmia	r5!, {r0, r1}
   13f98:	3308      	adds	r3, #8
   13f9a:	42bb      	cmp	r3, r7
   13f9c:	462c      	mov	r4, r5
   13f9e:	d1f7      	bne.n	13f90 <bt_scan_filter_add+0x78>
   13fa0:	781b      	ldrb	r3, [r3, #0]
   13fa2:	702b      	strb	r3, [r5, #0]
		uuid_filter[counter].uuid =
   13fa4:	6096      	str	r6, [r2, #8]
		break;
   13fa6:	e7e1      	b.n	13f6c <bt_scan_filter_add+0x54>
		return -ENOMEM;
   13fa8:	f06f 040b 	mvn.w	r4, #11
   13fac:	e7ca      	b.n	13f44 <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
   13fae:	f06f 0415 	mvn.w	r4, #21
   13fb2:	e7c7      	b.n	13f44 <bt_scan_filter_add+0x2c>
		return -EINVAL;
   13fb4:	f06f 0415 	mvn.w	r4, #21
   13fb8:	e7c7      	b.n	13f4a <bt_scan_filter_add+0x32>
   13fba:	bf00      	nop
   13fbc:	20000848 	.word	0x20000848
   13fc0:	2000229c 	.word	0x2000229c

00013fc4 <bt_scan_filter_disable>:
}

void bt_scan_filter_disable(void)
{
	/* Disable all filters. */
	bt_scan.scan_filters.name.enabled = false;
   13fc4:	4b05      	ldr	r3, [pc, #20]	; (13fdc <bt_scan_filter_disable+0x18>)
   13fc6:	2200      	movs	r2, #0
   13fc8:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
   13fca:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
   13fcc:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
   13fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
   13fd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   13fd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
   13fda:	4770      	bx	lr
   13fdc:	2000229c 	.word	0x2000229c

00013fe0 <bt_scan_filter_enable>:

int bt_scan_filter_enable(uint8_t mode, bool match_all)
{
   13fe0:	b508      	push	{r3, lr}
	/* Check if the mode is correct. */
	if (!check_filter_mode(mode)) {
   13fe2:	0683      	lsls	r3, r0, #26
   13fe4:	d022      	beq.n	1402c <bt_scan_filter_enable+0x4c>
		return -EINVAL;
	}

	/* Disable filters. */
	bt_scan_filter_disable();
   13fe6:	f7ff ffed 	bl	13fc4 <bt_scan_filter_disable>

	struct bt_scan_filters *filters = &bt_scan.scan_filters;

	/* Turn on the filters of your choice. */
	if (mode & BT_SCAN_ADDR_FILTER) {
   13fea:	4b12      	ldr	r3, [pc, #72]	; (14034 <bt_scan_filter_enable+0x54>)
   13fec:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   13ff0:	bf1c      	itt	ne
   13ff2:	2201      	movne	r2, #1
   13ff4:	715a      	strbne	r2, [r3, #5]
	}

	if (mode & BT_SCAN_NAME_FILTER) {
   13ff6:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   13ff8:	bf44      	itt	mi
   13ffa:	2201      	movmi	r2, #1
   13ffc:	705a      	strbmi	r2, [r3, #1]
	}

	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   13ffe:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   14000:	bf44      	itt	mi
   14002:	2201      	movmi	r2, #1
   14004:	70da      	strbmi	r2, [r3, #3]
	}

	if (mode & BT_SCAN_UUID_FILTER) {
   14006:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   14008:	bf44      	itt	mi
   1400a:	2201      	movmi	r2, #1
   1400c:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	}

	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   14010:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   14012:	bf44      	itt	mi
   14014:	2201      	movmi	r2, #1
   14016:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	}

	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   1401a:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   1401c:	bf44      	itt	mi
   1401e:	2201      	movmi	r2, #1
   14020:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	}

	/* Select the filter mode. */
	filters->all_mode = match_all;
   14024:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28

	return 0;
   14028:	2000      	movs	r0, #0
}
   1402a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1402c:	f06f 0015 	mvn.w	r0, #21
   14030:	e7fb      	b.n	1402a <bt_scan_filter_enable+0x4a>
   14032:	bf00      	nop
   14034:	2000229c 	.word	0x2000229c

00014038 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   14038:	b570      	push	{r4, r5, r6, lr}
   1403a:	b086      	sub	sp, #24
   1403c:	460e      	mov	r6, r1
   1403e:	4605      	mov	r5, r0
	bt_scan_stop();
   14040:	f012 fa8b 	bl	2655a <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   14044:	4b15      	ldr	r3, [pc, #84]	; (1409c <scan_connect_with_target.part.0+0x64>)
   14046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14048:	ac02      	add	r4, sp, #8
   1404a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   1404e:	ab01      	add	r3, sp, #4
   14050:	4621      	mov	r1, r4
   14052:	4a13      	ldr	r2, [pc, #76]	; (140a0 <scan_connect_with_target.part.0+0x68>)
   14054:	4630      	mov	r0, r6
   14056:	f004 f981 	bl	1835c <bt_conn_le_create>
	if (err) {
   1405a:	4b12      	ldr	r3, [pc, #72]	; (140a4 <scan_connect_with_target.part.0+0x6c>)
		notify_connecting_error(&control->device_info);
   1405c:	3508      	adds	r5, #8
	return list->head;
   1405e:	681c      	ldr	r4, [r3, #0]
	if (err) {
   14060:	b148      	cbz	r0, 14076 <scan_connect_with_target.part.0+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14062:	b164      	cbz	r4, 1407e <scan_connect_with_target.part.0+0x46>
		if (cb->cb_addr->connecting_error) {
   14064:	f854 3c04 	ldr.w	r3, [r4, #-4]
   14068:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1406a:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting_error) {
   1406c:	b10b      	cbz	r3, 14072 <scan_connect_with_target.part.0+0x3a>
			cb->cb_addr->connecting_error(device_info);
   1406e:	4628      	mov	r0, r5
   14070:	4798      	blx	r3
	return node->next;
   14072:	6864      	ldr	r4, [r4, #4]
   14074:	e7f5      	b.n	14062 <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14076:	b924      	cbnz	r4, 14082 <scan_connect_with_target.part.0+0x4a>
		bt_conn_unref(conn);
   14078:	9801      	ldr	r0, [sp, #4]
   1407a:	f003 fe5f 	bl	17d3c <bt_conn_unref>
}
   1407e:	b006      	add	sp, #24
   14080:	bd70      	pop	{r4, r5, r6, pc}
		notify_connecting(&control->device_info, conn);
   14082:	9e01      	ldr	r6, [sp, #4]
		if (cb->cb_addr->connecting) {
   14084:	f854 3c04 	ldr.w	r3, [r4, #-4]
   14088:	68db      	ldr	r3, [r3, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1408a:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting) {
   1408c:	b113      	cbz	r3, 14094 <scan_connect_with_target.part.0+0x5c>
			cb->cb_addr->connecting(device_info, conn);
   1408e:	4631      	mov	r1, r6
   14090:	4628      	mov	r0, r5
   14092:	4798      	blx	r3
   14094:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14096:	2c00      	cmp	r4, #0
   14098:	d1f4      	bne.n	14084 <scan_connect_with_target.part.0+0x4c>
   1409a:	e7ed      	b.n	14078 <scan_connect_with_target.part.0+0x40>
   1409c:	0002a200 	.word	0x0002a200
   140a0:	200022e0 	.word	0x200022e0
   140a4:	200022e8 	.word	0x200022e8

000140a8 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   140a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   140ac:	4f2f      	ldr	r7, [pc, #188]	; (1416c <scan_recv+0xc4>)
{
   140ae:	b096      	sub	sp, #88	; 0x58
   140b0:	4605      	mov	r5, r0
   140b2:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
   140b4:	2254      	movs	r2, #84	; 0x54
   140b6:	2100      	movs	r1, #0
   140b8:	a801      	add	r0, sp, #4
   140ba:	f012 fd55 	bl	26b68 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   140be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   140c2:	f88d 3007 	strb.w	r3, [sp, #7]
	control->filter_cnt = 0;
   140c6:	2300      	movs	r3, #0
   140c8:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_uuid_filter_enabled()) {
   140cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   140d0:	b113      	cbz	r3, 140d8 <scan_recv+0x30>
		control->filter_cnt++;
   140d2:	2301      	movs	r3, #1
   140d4:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   140d8:	7a2b      	ldrb	r3, [r5, #8]
	state->offset = net_buf_simple_headroom(buf);
   140da:	4620      	mov	r0, r4
   140dc:	f003 0301 	and.w	r3, r3, #1
   140e0:	f88d 3008 	strb.w	r3, [sp, #8]
   140e4:	f014 fff4 	bl	290d0 <net_buf_simple_headroom>

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   140e8:	4921      	ldr	r1, [pc, #132]	; (14170 <scan_recv+0xc8>)
	state->len = buf->len;
   140ea:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   140ee:	4606      	mov	r6, r0
   140f0:	aa01      	add	r2, sp, #4
   140f2:	4620      	mov	r0, r4
   140f4:	f002 fb3e 	bl	16774 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   140f8:	4b1e      	ldr	r3, [pc, #120]	; (14174 <scan_recv+0xcc>)
	buf->data = buf->__buf + state->offset;
   140fa:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   140fc:	f8a4 8004 	strh.w	r8, [r4, #4]
	scan_control.device_info.adv_data = ad;
   14100:	e9cd 3404 	strd	r3, r4, [sp, #16]
	if (control->all_mode &&
   14104:	f89d 3007 	ldrb.w	r3, [sp, #7]
	scan_control.device_info.recv_info = info;
   14108:	9503      	str	r5, [sp, #12]
	buf->data = buf->__buf + state->offset;
   1410a:	fa10 f686 	uxtah	r6, r0, r6
   1410e:	6026      	str	r6, [r4, #0]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   14110:	682c      	ldr	r4, [r5, #0]
	if (control->all_mode &&
   14112:	b1ab      	cbz	r3, 14140 <scan_recv+0x98>
   14114:	f89d 2005 	ldrb.w	r2, [sp, #5]
   14118:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1411c:	429a      	cmp	r2, r3
   1411e:	d113      	bne.n	14148 <scan_recv+0xa0>
		notify_filter_matched(&control->device_info,
   14120:	f89d 2008 	ldrb.w	r2, [sp, #8]
   14124:	a906      	add	r1, sp, #24
   14126:	a803      	add	r0, sp, #12
   14128:	f7ff fed0 	bl	13ecc <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   1412c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   14130:	b11b      	cbz	r3, 1413a <scan_recv+0x92>
   14132:	4621      	mov	r1, r4
   14134:	a801      	add	r0, sp, #4
   14136:	f7ff ff7f 	bl	14038 <scan_connect_with_target.part.0>
}
   1413a:	b016      	add	sp, #88	; 0x58
   1413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   14140:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14144:	2b00      	cmp	r3, #0
   14146:	d1eb      	bne.n	14120 <scan_recv+0x78>
	return list->head;
   14148:	4b0b      	ldr	r3, [pc, #44]	; (14178 <scan_recv+0xd0>)
   1414a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1414c:	2c00      	cmp	r4, #0
   1414e:	d0f4      	beq.n	1413a <scan_recv+0x92>
		notify_filter_no_match(&control->device_info,
   14150:	f89d 5008 	ldrb.w	r5, [sp, #8]
		if (cb->cb_addr->filter_no_match) {
   14154:	f854 3c04 	ldr.w	r3, [r4, #-4]
   14158:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1415a:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_no_match) {
   1415c:	b113      	cbz	r3, 14164 <scan_recv+0xbc>
			cb->cb_addr->filter_no_match(device_info, connectable);
   1415e:	4629      	mov	r1, r5
   14160:	a803      	add	r0, sp, #12
   14162:	4798      	blx	r3
	return node->next;
   14164:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14166:	2c00      	cmp	r4, #0
   14168:	d1f4      	bne.n	14154 <scan_recv+0xac>
   1416a:	e7e6      	b.n	1413a <scan_recv+0x92>
   1416c:	2000229c 	.word	0x2000229c
   14170:	00026529 	.word	0x00026529
   14174:	200022e0 	.word	0x200022e0
   14178:	200022e8 	.word	0x200022e8

0001417c <bt_scan_init>:
{
   1417c:	b570      	push	{r4, r5, r6, lr}
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   1417e:	4c15      	ldr	r4, [pc, #84]	; (141d4 <bt_scan_init+0x58>)
{
   14180:	4606      	mov	r6, r0
	bt_le_scan_cb_register(&scan_cb);
   14182:	4815      	ldr	r0, [pc, #84]	; (141d8 <bt_scan_init+0x5c>)
   14184:	f003 fa14 	bl	175b0 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   14188:	222c      	movs	r2, #44	; 0x2c
   1418a:	2100      	movs	r1, #0
   1418c:	4620      	mov	r0, r4
   1418e:	f012 fceb 	bl	26b68 <memset>
	if (init) {
   14192:	b1be      	cbz	r6, 141c4 <bt_scan_init+0x48>
		if (init->scan_param) {
   14194:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
   14196:	7933      	ldrb	r3, [r6, #4]
   14198:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
   1419c:	b15d      	cbz	r5, 141b6 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
   1419e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   141a0:	3430      	adds	r4, #48	; 0x30
   141a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   141a4:	682b      	ldr	r3, [r5, #0]
   141a6:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
   141a8:	68b2      	ldr	r2, [r6, #8]
   141aa:	b13a      	cbz	r2, 141bc <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
   141ac:	4b0b      	ldr	r3, [pc, #44]	; (141dc <bt_scan_init+0x60>)
   141ae:	6810      	ldr	r0, [r2, #0]
   141b0:	6851      	ldr	r1, [r2, #4]
   141b2:	c303      	stmia	r3!, {r0, r1}
}
   141b4:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
   141b6:	f7ff fe11 	bl	13ddc <scan_default_param_set>
   141ba:	e7f5      	b.n	141a8 <bt_scan_init+0x2c>
}
   141bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
   141c0:	f7ff be1e 	b.w	13e00 <scan_default_conn_param_set>
		scan_default_param_set();
   141c4:	f7ff fe0a 	bl	13ddc <scan_default_param_set>
		scan_default_conn_param_set();
   141c8:	f7ff fe1a 	bl	13e00 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
   141cc:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
   141d0:	e7f0      	b.n	141b4 <bt_scan_init+0x38>
   141d2:	bf00      	nop
   141d4:	2000229c 	.word	0x2000229c
   141d8:	2000056c 	.word	0x2000056c
   141dc:	200022e0 	.word	0x200022e0

000141e0 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   141e0:	b108      	cbz	r0, 141e6 <bt_scan_start+0x6>
   141e2:	2801      	cmp	r0, #1
   141e4:	d106      	bne.n	141f4 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   141e6:	4b05      	ldr	r3, [pc, #20]	; (141fc <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   141e8:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   141ea:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   141ee:	4804      	ldr	r0, [pc, #16]	; (14200 <bt_scan_start+0x20>)
   141f0:	f003 b948 	b.w	17484 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   141f4:	f06f 0015 	mvn.w	r0, #21
   141f8:	4770      	bx	lr
   141fa:	bf00      	nop
   141fc:	2000229c 	.word	0x2000229c
   14200:	200022cc 	.word	0x200022cc

00014204 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   14204:	4904      	ldr	r1, [pc, #16]	; (14218 <sub_bytes+0x14>)
   14206:	1e43      	subs	r3, r0, #1
   14208:	300f      	adds	r0, #15
   1420a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1420e:	5c8a      	ldrb	r2, [r1, r2]
   14210:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   14212:	4283      	cmp	r3, r0
   14214:	d1f9      	bne.n	1420a <sub_bytes+0x6>
	}
}
   14216:	4770      	bx	lr
   14218:	0002b678 	.word	0x0002b678

0001421c <tc_aes128_set_encrypt_key>:
{
   1421c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1421e:	4e26      	ldr	r6, [pc, #152]	; (142b8 <tc_aes128_set_encrypt_key+0x9c>)
{
   14220:	4607      	mov	r7, r0
   14222:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   14224:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   14226:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   14228:	ad01      	add	r5, sp, #4
   1422a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1422c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1422e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14230:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   14234:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   14238:	4638      	mov	r0, r7
   1423a:	2f00      	cmp	r7, #0
   1423c:	d038      	beq.n	142b0 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   1423e:	2c00      	cmp	r4, #0
   14240:	d038      	beq.n	142b4 <tc_aes128_set_encrypt_key+0x98>
   14242:	1f38      	subs	r0, r7, #4
   14244:	4621      	mov	r1, r4
   14246:	4602      	mov	r2, r0
   14248:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1424a:	784b      	ldrb	r3, [r1, #1]
   1424c:	780d      	ldrb	r5, [r1, #0]
   1424e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14250:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   14254:	78cd      	ldrb	r5, [r1, #3]
   14256:	432b      	orrs	r3, r5
   14258:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   1425a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1425c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   14260:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14262:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   14266:	d1f0      	bne.n	1424a <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14268:	4c14      	ldr	r4, [pc, #80]	; (142bc <tc_aes128_set_encrypt_key+0xa0>)
   1426a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   1426c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1426e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   14270:	d116      	bne.n	142a0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14272:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14276:	5ca5      	ldrb	r5, [r4, r2]
   14278:	0e1a      	lsrs	r2, r3, #24
   1427a:	5ca2      	ldrb	r2, [r4, r2]
   1427c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   14280:	f3c3 2507 	ubfx	r5, r3, #8, #8
   14284:	b2db      	uxtb	r3, r3
   14286:	5d65      	ldrb	r5, [r4, r5]
   14288:	5ce3      	ldrb	r3, [r4, r3]
   1428a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1428e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   14292:	ad0c      	add	r5, sp, #48	; 0x30
   14294:	f021 0303 	bic.w	r3, r1, #3
   14298:	442b      	add	r3, r5
   1429a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1429e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   142a0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   142a4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   142a6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   142a8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   142aa:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   142ac:	d1de      	bne.n	1426c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   142ae:	2001      	movs	r0, #1
}
   142b0:	b00d      	add	sp, #52	; 0x34
   142b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   142b4:	4620      	mov	r0, r4
   142b6:	e7fb      	b.n	142b0 <tc_aes128_set_encrypt_key+0x94>
   142b8:	0002a210 	.word	0x0002a210
   142bc:	0002b678 	.word	0x0002b678

000142c0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   142c0:	4901      	ldr	r1, [pc, #4]	; (142c8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   142c2:	2210      	movs	r2, #16
	str	r2, [r1]
   142c4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   142c6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   142c8:	e000ed10 	.word	0xe000ed10

000142cc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   142cc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   142ce:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   142d0:	f380 8811 	msr	BASEPRI, r0
	isb
   142d4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   142d8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   142dc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   142de:	b662      	cpsie	i
	isb
   142e0:	f3bf 8f6f 	isb	sy

	bx	lr
   142e4:	4770      	bx	lr
   142e6:	bf00      	nop

000142e8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   142e8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   142ea:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   142ec:	f381 8811 	msr	BASEPRI, r1

	wfe
   142f0:	bf20      	wfe

	msr	BASEPRI, r0
   142f2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   142f6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   142f8:	4770      	bx	lr
   142fa:	bf00      	nop

000142fc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   142fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   142fe:	4605      	mov	r5, r0

	if (esf != NULL) {
   14300:	460c      	mov	r4, r1
   14302:	b1c9      	cbz	r1, 14338 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14304:	688b      	ldr	r3, [r1, #8]
   14306:	9300      	str	r3, [sp, #0]
   14308:	e9d1 2300 	ldrd	r2, r3, [r1]
   1430c:	480e      	ldr	r0, [pc, #56]	; (14348 <z_arm_fatal_error+0x4c>)
   1430e:	2145      	movs	r1, #69	; 0x45
   14310:	f011 fc7f 	bl	25c12 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14314:	6963      	ldr	r3, [r4, #20]
   14316:	9300      	str	r3, [sp, #0]
   14318:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   1431c:	480b      	ldr	r0, [pc, #44]	; (1434c <z_arm_fatal_error+0x50>)
   1431e:	2145      	movs	r1, #69	; 0x45
   14320:	f011 fc77 	bl	25c12 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14324:	69e2      	ldr	r2, [r4, #28]
   14326:	480a      	ldr	r0, [pc, #40]	; (14350 <z_arm_fatal_error+0x54>)
   14328:	2145      	movs	r1, #69	; 0x45
   1432a:	f011 fc72 	bl	25c12 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1432e:	69a2      	ldr	r2, [r4, #24]
   14330:	4808      	ldr	r0, [pc, #32]	; (14354 <z_arm_fatal_error+0x58>)
   14332:	2145      	movs	r1, #69	; 0x45
   14334:	f011 fc6d 	bl	25c12 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14338:	4621      	mov	r1, r4
   1433a:	4628      	mov	r0, r5
}
   1433c:	b003      	add	sp, #12
   1433e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   14342:	f00d bb67 	b.w	21a14 <z_fatal_error>
   14346:	bf00      	nop
   14348:	0002b778 	.word	0x0002b778
   1434c:	0002b7ac 	.word	0x0002b7ac
   14350:	0002b7e0 	.word	0x0002b7e0
   14354:	0002b7f4 	.word	0x0002b7f4

00014358 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14358:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1435a:	2b00      	cmp	r3, #0
   1435c:	db08      	blt.n	14370 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1435e:	2201      	movs	r2, #1
   14360:	f000 001f 	and.w	r0, r0, #31
   14364:	fa02 f000 	lsl.w	r0, r2, r0
   14368:	095b      	lsrs	r3, r3, #5
   1436a:	4a02      	ldr	r2, [pc, #8]	; (14374 <arch_irq_enable+0x1c>)
   1436c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   14370:	4770      	bx	lr
   14372:	bf00      	nop
   14374:	e000e100 	.word	0xe000e100

00014378 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14378:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1437a:	2b00      	cmp	r3, #0
   1437c:	db0d      	blt.n	1439a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1437e:	2201      	movs	r2, #1
   14380:	095b      	lsrs	r3, r3, #5
   14382:	f000 001f 	and.w	r0, r0, #31
   14386:	fa02 f000 	lsl.w	r0, r2, r0
   1438a:	3320      	adds	r3, #32
   1438c:	4a03      	ldr	r2, [pc, #12]	; (1439c <arch_irq_disable+0x24>)
   1438e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14392:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14396:	f3bf 8f6f 	isb	sy
}
   1439a:	4770      	bx	lr
   1439c:	e000e100 	.word	0xe000e100

000143a0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   143a0:	4b05      	ldr	r3, [pc, #20]	; (143b8 <arch_irq_is_enabled+0x18>)
   143a2:	0942      	lsrs	r2, r0, #5
   143a4:	f000 001f 	and.w	r0, r0, #31
   143a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   143ac:	2301      	movs	r3, #1
   143ae:	fa03 f000 	lsl.w	r0, r3, r0
}
   143b2:	4010      	ands	r0, r2
   143b4:	4770      	bx	lr
   143b6:	bf00      	nop
   143b8:	e000e100 	.word	0xe000e100

000143bc <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   143bc:	b538      	push	{r3, r4, r5, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   143be:	07d3      	lsls	r3, r2, #31
{
   143c0:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   143c2:	d41e      	bmi.n	14402 <z_arm_irq_priority_set+0x46>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   143c4:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   143c6:	2c07      	cmp	r4, #7
   143c8:	d908      	bls.n	143dc <z_arm_irq_priority_set+0x20>
   143ca:	490f      	ldr	r1, [pc, #60]	; (14408 <z_arm_irq_priority_set+0x4c>)
   143cc:	480f      	ldr	r0, [pc, #60]	; (1440c <z_arm_irq_priority_set+0x50>)
   143ce:	225b      	movs	r2, #91	; 0x5b
   143d0:	f011 fc11 	bl	25bf6 <assert_print>
   143d4:	480c      	ldr	r0, [pc, #48]	; (14408 <z_arm_irq_priority_set+0x4c>)
   143d6:	215b      	movs	r1, #91	; 0x5b
   143d8:	f011 fc06 	bl	25be8 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   143dc:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   143de:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   143e0:	bfac      	ite	ge
   143e2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   143e6:	4b0a      	ldrlt	r3, [pc, #40]	; (14410 <z_arm_irq_priority_set+0x54>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   143e8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   143ec:	bfb8      	it	lt
   143ee:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   143f2:	b2e4      	uxtb	r4, r4
   143f4:	bfaa      	itet	ge
   143f6:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   143fa:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   143fc:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   14400:	bd38      	pop	{r3, r4, r5, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14402:	2400      	movs	r4, #0
   14404:	e7ea      	b.n	143dc <z_arm_irq_priority_set+0x20>
   14406:	bf00      	nop
   14408:	0002b827 	.word	0x0002b827
   1440c:	0002ab8c 	.word	0x0002ab8c
   14410:	e000ed14 	.word	0xe000ed14

00014414 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14414:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14416:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14418:	4b04      	ldr	r3, [pc, #16]	; (1442c <_arch_isr_direct_pm+0x18>)
   1441a:	699a      	ldr	r2, [r3, #24]
   1441c:	b11a      	cbz	r2, 14426 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   1441e:	2200      	movs	r2, #0
   14420:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   14422:	f015 fab8 	bl	29996 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14426:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14428:	bd08      	pop	{r3, pc}
   1442a:	bf00      	nop
   1442c:	20002780 	.word	0x20002780

00014430 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14430:	bf30      	wfi
    b z_SysNmiOnReset
   14432:	f7ff bffd 	b.w	14430 <z_SysNmiOnReset>
   14436:	bf00      	nop

00014438 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14438:	4a0b      	ldr	r2, [pc, #44]	; (14468 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1443a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1443c:	4b0b      	ldr	r3, [pc, #44]	; (1446c <z_arm_prep_c+0x34>)
   1443e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14442:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14444:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14448:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1444c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14450:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14458:	f00d fb52 	bl	21b00 <z_bss_zero>
	z_data_copy();
   1445c:	f00f ff3c 	bl	242d8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14460:	f000 fafe 	bl	14a60 <z_arm_interrupt_init>
	z_cstart();
   14464:	f00d fb90 	bl	21b88 <z_cstart>
   14468:	00000000 	.word	0x00000000
   1446c:	e000ed00 	.word	0xe000ed00

00014470 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14470:	4a09      	ldr	r2, [pc, #36]	; (14498 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14472:	490a      	ldr	r1, [pc, #40]	; (1449c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14474:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14476:	6809      	ldr	r1, [r1, #0]
   14478:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1447a:	4909      	ldr	r1, [pc, #36]	; (144a0 <arch_swap+0x30>)
	_current->arch.basepri = key;
   1447c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1447e:	684b      	ldr	r3, [r1, #4]
   14480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14484:	604b      	str	r3, [r1, #4]
   14486:	2300      	movs	r3, #0
   14488:	f383 8811 	msr	BASEPRI, r3
   1448c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14490:	6893      	ldr	r3, [r2, #8]
}
   14492:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14494:	4770      	bx	lr
   14496:	bf00      	nop
   14498:	20002780 	.word	0x20002780
   1449c:	0002a940 	.word	0x0002a940
   144a0:	e000ed00 	.word	0xe000ed00

000144a4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   144a4:	4912      	ldr	r1, [pc, #72]	; (144f0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   144a6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   144a8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   144ac:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   144ae:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   144b2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   144b6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   144b8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   144bc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   144c0:	4f0c      	ldr	r7, [pc, #48]	; (144f4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   144c2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   144c6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   144c8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   144ca:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   144cc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   144ce:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   144d0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   144d2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   144d6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   144d8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   144da:	f000 fb5d 	bl	14b98 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   144de:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   144e2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   144e6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   144ea:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   144ee:	4770      	bx	lr
    ldr r1, =_kernel
   144f0:	20002780 	.word	0x20002780
    ldr v4, =_SCS_ICSR
   144f4:	e000ed04 	.word	0xe000ed04

000144f8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   144f8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   144fc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   144fe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14502:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14506:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14508:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1450c:	2902      	cmp	r1, #2
    beq _oops
   1450e:	d0ff      	beq.n	14510 <_oops>

00014510 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14510:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   14512:	f012 fa4e 	bl	269b2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14516:	bd01      	pop	{r0, pc}

00014518 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14518:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1451c:	9b00      	ldr	r3, [sp, #0]
   1451e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   14522:	490a      	ldr	r1, [pc, #40]	; (1454c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   14524:	9b01      	ldr	r3, [sp, #4]
   14526:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1452a:	9b02      	ldr	r3, [sp, #8]
   1452c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14530:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14538:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   1453c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14540:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14542:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   14544:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   14546:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14548:	4770      	bx	lr
   1454a:	bf00      	nop
   1454c:	000258f1 	.word	0x000258f1

00014550 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14550:	4a09      	ldr	r2, [pc, #36]	; (14578 <z_check_thread_stack_fail+0x28>)
{
   14552:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   14554:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   14556:	b170      	cbz	r0, 14576 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14558:	f113 0f16 	cmn.w	r3, #22
   1455c:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1455e:	d005      	beq.n	1456c <z_check_thread_stack_fail+0x1c>
   14560:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   14564:	429a      	cmp	r2, r3
   14566:	d805      	bhi.n	14574 <z_check_thread_stack_fail+0x24>
   14568:	4283      	cmp	r3, r0
   1456a:	d203      	bcs.n	14574 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1456c:	4281      	cmp	r1, r0
   1456e:	bf28      	it	cs
   14570:	2000      	movcs	r0, #0
   14572:	4770      	bx	lr
   14574:	2000      	movs	r0, #0
}
   14576:	4770      	bx	lr
   14578:	20002780 	.word	0x20002780

0001457c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1457c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1457e:	4b09      	ldr	r3, [pc, #36]	; (145a4 <arch_switch_to_main_thread+0x28>)
   14580:	6098      	str	r0, [r3, #8]
{
   14582:	460d      	mov	r5, r1
   14584:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   14586:	f000 fb07 	bl	14b98 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1458a:	4620      	mov	r0, r4
   1458c:	f385 8809 	msr	PSP, r5
   14590:	2100      	movs	r1, #0
   14592:	b663      	cpsie	if
   14594:	f381 8811 	msr	BASEPRI, r1
   14598:	f3bf 8f6f 	isb	sy
   1459c:	2200      	movs	r2, #0
   1459e:	2300      	movs	r3, #0
   145a0:	f011 f9a6 	bl	258f0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   145a4:	20002780 	.word	0x20002780

000145a8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   145a8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   145aa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   145ac:	4a0b      	ldr	r2, [pc, #44]	; (145dc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   145ae:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   145b0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   145b2:	bf1e      	ittt	ne
	movne	r1, #0
   145b4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   145b6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   145b8:	f015 f9ed 	blne	29996 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   145bc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   145be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   145c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   145c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   145ca:	4905      	ldr	r1, [pc, #20]	; (145e0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   145cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   145ce:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   145d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   145d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   145d6:	4903      	ldr	r1, [pc, #12]	; (145e4 <_isr_wrapper+0x3c>)
	bx r1
   145d8:	4708      	bx	r1
   145da:	0000      	.short	0x0000
	ldr r2, =_kernel
   145dc:	20002780 	.word	0x20002780
	ldr r1, =_sw_isr_table
   145e0:	00029e78 	.word	0x00029e78
	ldr r1, =z_arm_int_exit
   145e4:	000145e9 	.word	0x000145e9

000145e8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   145e8:	4b04      	ldr	r3, [pc, #16]	; (145fc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   145ea:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   145ec:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   145ee:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   145f0:	d003      	beq.n	145fa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   145f2:	4903      	ldr	r1, [pc, #12]	; (14600 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   145f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   145f8:	600a      	str	r2, [r1, #0]

000145fa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   145fa:	4770      	bx	lr
	ldr r3, =_kernel
   145fc:	20002780 	.word	0x20002780
	ldr r1, =_SCS_ICSR
   14600:	e000ed04 	.word	0xe000ed04

00014604 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   14604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14608:	4c39      	ldr	r4, [pc, #228]	; (146f0 <mem_manage_fault+0xec>)
{
   1460a:	4680      	mov	r8, r0
   1460c:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1460e:	4839      	ldr	r0, [pc, #228]	; (146f4 <mem_manage_fault+0xf0>)
   14610:	2145      	movs	r1, #69	; 0x45
{
   14612:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   14614:	f011 fafd 	bl	25c12 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1461a:	06da      	lsls	r2, r3, #27
   1461c:	d503      	bpl.n	14626 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1461e:	4836      	ldr	r0, [pc, #216]	; (146f8 <mem_manage_fault+0xf4>)
   14620:	2145      	movs	r1, #69	; 0x45
   14622:	f011 faf6 	bl	25c12 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14628:	071b      	lsls	r3, r3, #28
   1462a:	d503      	bpl.n	14634 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
   1462c:	4833      	ldr	r0, [pc, #204]	; (146fc <mem_manage_fault+0xf8>)
   1462e:	2145      	movs	r1, #69	; 0x45
   14630:	f011 faef 	bl	25c12 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14634:	4c2e      	ldr	r4, [pc, #184]	; (146f0 <mem_manage_fault+0xec>)
   14636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14638:	079f      	lsls	r7, r3, #30
   1463a:	d429      	bmi.n	14690 <mem_manage_fault+0x8c>
	uint32_t mmfar = -EINVAL;
   1463c:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14640:	4c2b      	ldr	r4, [pc, #172]	; (146f0 <mem_manage_fault+0xec>)
   14642:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14644:	07d9      	lsls	r1, r3, #31
   14646:	d503      	bpl.n	14650 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
   14648:	482d      	ldr	r0, [pc, #180]	; (14700 <mem_manage_fault+0xfc>)
   1464a:	2145      	movs	r1, #69	; 0x45
   1464c:	f011 fae1 	bl	25c12 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14652:	069a      	lsls	r2, r3, #26
   14654:	d503      	bpl.n	1465e <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
   14656:	482b      	ldr	r0, [pc, #172]	; (14704 <mem_manage_fault+0x100>)
   14658:	2145      	movs	r1, #69	; 0x45
   1465a:	f011 fada 	bl	25c12 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1465e:	4d24      	ldr	r5, [pc, #144]	; (146f0 <mem_manage_fault+0xec>)
   14660:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14662:	06db      	lsls	r3, r3, #27
   14664:	d428      	bmi.n	146b8 <mem_manage_fault+0xb4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   14666:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14668:	079c      	lsls	r4, r3, #30
   1466a:	d425      	bmi.n	146b8 <mem_manage_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1466c:	2400      	movs	r4, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1466e:	4b20      	ldr	r3, [pc, #128]	; (146f0 <mem_manage_fault+0xec>)
   14670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14672:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   14674:	bf42      	ittt	mi
   14676:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   14678:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   1467c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1467e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14680:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   14684:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   14686:	2300      	movs	r3, #0
   14688:	7033      	strb	r3, [r6, #0]

	return reason;
}
   1468a:	4620      	mov	r0, r4
   1468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   14690:	481d      	ldr	r0, [pc, #116]	; (14708 <mem_manage_fault+0x104>)
   14692:	2145      	movs	r1, #69	; 0x45
   14694:	f011 fabd 	bl	25c12 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   14698:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1469a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1469c:	0618      	lsls	r0, r3, #24
   1469e:	d5cd      	bpl.n	1463c <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   146a0:	481a      	ldr	r0, [pc, #104]	; (1470c <mem_manage_fault+0x108>)
   146a2:	463a      	mov	r2, r7
   146a4:	2145      	movs	r1, #69	; 0x45
   146a6:	f011 fab4 	bl	25c12 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   146aa:	2d00      	cmp	r5, #0
   146ac:	d0c8      	beq.n	14640 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   146ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   146b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   146b4:	62a3      	str	r3, [r4, #40]	; 0x28
   146b6:	e7c3      	b.n	14640 <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   146b8:	686b      	ldr	r3, [r5, #4]
   146ba:	0518      	lsls	r0, r3, #20
   146bc:	d5d6      	bpl.n	1466c <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   146be:	4641      	mov	r1, r8
   146c0:	4638      	mov	r0, r7
   146c2:	f7ff ff45 	bl	14550 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   146c6:	4604      	mov	r4, r0
   146c8:	b118      	cbz	r0, 146d2 <mem_manage_fault+0xce>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   146ca:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   146ce:	2402      	movs	r4, #2
   146d0:	e7cd      	b.n	1466e <mem_manage_fault+0x6a>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   146d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   146d4:	06d9      	lsls	r1, r3, #27
   146d6:	d5c9      	bpl.n	1466c <mem_manage_fault+0x68>
   146d8:	490d      	ldr	r1, [pc, #52]	; (14710 <mem_manage_fault+0x10c>)
   146da:	480e      	ldr	r0, [pc, #56]	; (14714 <mem_manage_fault+0x110>)
   146dc:	f240 1253 	movw	r2, #339	; 0x153
   146e0:	f011 fa89 	bl	25bf6 <assert_print>
   146e4:	480a      	ldr	r0, [pc, #40]	; (14710 <mem_manage_fault+0x10c>)
   146e6:	f240 1153 	movw	r1, #339	; 0x153
   146ea:	f011 fa7d 	bl	25be8 <assert_post_action>
   146ee:	e7be      	b.n	1466e <mem_manage_fault+0x6a>
   146f0:	e000ed00 	.word	0xe000ed00
   146f4:	0002b85d 	.word	0x0002b85d
   146f8:	0002b878 	.word	0x0002b878
   146fc:	0002b8b0 	.word	0x0002b8b0
   14700:	0002b900 	.word	0x0002b900
   14704:	0002b924 	.word	0x0002b924
   14708:	0002b8c8 	.word	0x0002b8c8
   1470c:	0002b8e5 	.word	0x0002b8e5
   14710:	0002b958 	.word	0x0002b958
   14714:	0002ab8c 	.word	0x0002ab8c

00014718 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14718:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1471a:	4c1d      	ldr	r4, [pc, #116]	; (14790 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1471c:	481d      	ldr	r0, [pc, #116]	; (14794 <usage_fault.constprop.0+0x7c>)
   1471e:	2145      	movs	r1, #69	; 0x45
   14720:	f011 fa77 	bl	25c12 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14724:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14726:	019b      	lsls	r3, r3, #6
   14728:	d503      	bpl.n	14732 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   1472a:	481b      	ldr	r0, [pc, #108]	; (14798 <usage_fault.constprop.0+0x80>)
   1472c:	2145      	movs	r1, #69	; 0x45
   1472e:	f011 fa70 	bl	25c12 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14732:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14734:	01dc      	lsls	r4, r3, #7
   14736:	d503      	bpl.n	14740 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   14738:	4818      	ldr	r0, [pc, #96]	; (1479c <usage_fault.constprop.0+0x84>)
   1473a:	2145      	movs	r1, #69	; 0x45
   1473c:	f011 fa69 	bl	25c12 <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14740:	4c13      	ldr	r4, [pc, #76]	; (14790 <usage_fault.constprop.0+0x78>)
   14742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14744:	0318      	lsls	r0, r3, #12
   14746:	d503      	bpl.n	14750 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
   14748:	4815      	ldr	r0, [pc, #84]	; (147a0 <usage_fault.constprop.0+0x88>)
   1474a:	2145      	movs	r1, #69	; 0x45
   1474c:	f011 fa61 	bl	25c12 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14752:	0359      	lsls	r1, r3, #13
   14754:	d503      	bpl.n	1475e <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14756:	4813      	ldr	r0, [pc, #76]	; (147a4 <usage_fault.constprop.0+0x8c>)
   14758:	2145      	movs	r1, #69	; 0x45
   1475a:	f011 fa5a 	bl	25c12 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1475e:	4c0c      	ldr	r4, [pc, #48]	; (14790 <usage_fault.constprop.0+0x78>)
   14760:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14762:	039a      	lsls	r2, r3, #14
   14764:	d503      	bpl.n	1476e <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14766:	4810      	ldr	r0, [pc, #64]	; (147a8 <usage_fault.constprop.0+0x90>)
   14768:	2145      	movs	r1, #69	; 0x45
   1476a:	f011 fa52 	bl	25c12 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1476e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14770:	03db      	lsls	r3, r3, #15
   14772:	d503      	bpl.n	1477c <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14774:	480d      	ldr	r0, [pc, #52]	; (147ac <usage_fault.constprop.0+0x94>)
   14776:	2145      	movs	r1, #69	; 0x45
   14778:	f011 fa4b 	bl	25c12 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1477c:	4a04      	ldr	r2, [pc, #16]	; (14790 <usage_fault.constprop.0+0x78>)
   1477e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14780:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   14784:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   14788:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   1478a:	2000      	movs	r0, #0
   1478c:	bd10      	pop	{r4, pc}
   1478e:	bf00      	nop
   14790:	e000ed00 	.word	0xe000ed00
   14794:	0002b992 	.word	0x0002b992
   14798:	0002b9af 	.word	0x0002b9af
   1479c:	0002b9c7 	.word	0x0002b9c7
   147a0:	0002b9e6 	.word	0x0002b9e6
   147a4:	0002ba09 	.word	0x0002ba09
   147a8:	0002ba33 	.word	0x0002ba33
   147ac:	0002ba52 	.word	0x0002ba52

000147b0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   147b0:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   147b2:	4c23      	ldr	r4, [pc, #140]	; (14840 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   147b4:	4606      	mov	r6, r0
   147b6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   147b8:	4822      	ldr	r0, [pc, #136]	; (14844 <bus_fault.constprop.0+0x94>)
   147ba:	2145      	movs	r1, #69	; 0x45
   147bc:	f011 fa29 	bl	25c12 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   147c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   147c2:	04d9      	lsls	r1, r3, #19
   147c4:	d503      	bpl.n	147ce <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   147c6:	4820      	ldr	r0, [pc, #128]	; (14848 <bus_fault.constprop.0+0x98>)
   147c8:	2145      	movs	r1, #69	; 0x45
   147ca:	f011 fa22 	bl	25c12 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   147ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   147d0:	051a      	lsls	r2, r3, #20
   147d2:	d503      	bpl.n	147dc <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   147d4:	481d      	ldr	r0, [pc, #116]	; (1484c <bus_fault.constprop.0+0x9c>)
   147d6:	2145      	movs	r1, #69	; 0x45
   147d8:	f011 fa1b 	bl	25c12 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   147dc:	4c18      	ldr	r4, [pc, #96]	; (14840 <bus_fault.constprop.0+0x90>)
   147de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   147e0:	059b      	lsls	r3, r3, #22
   147e2:	d510      	bpl.n	14806 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   147e4:	481a      	ldr	r0, [pc, #104]	; (14850 <bus_fault.constprop.0+0xa0>)
   147e6:	2145      	movs	r1, #69	; 0x45
   147e8:	f011 fa13 	bl	25c12 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   147ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   147ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   147f0:	0418      	lsls	r0, r3, #16
   147f2:	d508      	bpl.n	14806 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   147f4:	4817      	ldr	r0, [pc, #92]	; (14854 <bus_fault.constprop.0+0xa4>)
   147f6:	2145      	movs	r1, #69	; 0x45
   147f8:	f011 fa0b 	bl	25c12 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   147fc:	b11e      	cbz	r6, 14806 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   147fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14800:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14804:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14806:	4c0e      	ldr	r4, [pc, #56]	; (14840 <bus_fault.constprop.0+0x90>)
   14808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1480a:	0559      	lsls	r1, r3, #21
   1480c:	d503      	bpl.n	14816 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   1480e:	4812      	ldr	r0, [pc, #72]	; (14858 <bus_fault.constprop.0+0xa8>)
   14810:	2145      	movs	r1, #69	; 0x45
   14812:	f011 f9fe 	bl	25c12 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14816:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14818:	05da      	lsls	r2, r3, #23
   1481a:	d50b      	bpl.n	14834 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   1481c:	480f      	ldr	r0, [pc, #60]	; (1485c <bus_fault.constprop.0+0xac>)
   1481e:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14820:	f011 f9f7 	bl	25c12 <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14824:	4a06      	ldr	r2, [pc, #24]	; (14840 <bus_fault.constprop.0+0x90>)
   14826:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14828:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1482a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1482e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14830:	7028      	strb	r0, [r5, #0]
}
   14832:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14834:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14836:	049b      	lsls	r3, r3, #18
   14838:	d5f4      	bpl.n	14824 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1483a:	4809      	ldr	r0, [pc, #36]	; (14860 <bus_fault.constprop.0+0xb0>)
   1483c:	2145      	movs	r1, #69	; 0x45
   1483e:	e7ef      	b.n	14820 <bus_fault.constprop.0+0x70>
   14840:	e000ed00 	.word	0xe000ed00
   14844:	0002ba82 	.word	0x0002ba82
   14848:	0002ba9d 	.word	0x0002ba9d
   1484c:	0002b8b0 	.word	0x0002b8b0
   14850:	0002bab3 	.word	0x0002bab3
   14854:	0002bad1 	.word	0x0002bad1
   14858:	0002baeb 	.word	0x0002baeb
   1485c:	0002bb0b 	.word	0x0002bb0b
   14860:	0002b924 	.word	0x0002b924

00014864 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14868:	4b67      	ldr	r3, [pc, #412]	; (14a08 <z_arm_fault+0x1a4>)
   1486a:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   1486e:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14870:	f3c8 0708 	ubfx	r7, r8, #0, #9
   14874:	2600      	movs	r6, #0
   14876:	f386 8811 	msr	BASEPRI, r6
   1487a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1487e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14882:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14886:	d107      	bne.n	14898 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   14888:	f002 030c 	and.w	r3, r2, #12
   1488c:	2b08      	cmp	r3, #8
   1488e:	d110      	bne.n	148b2 <z_arm_fault+0x4e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   14890:	485e      	ldr	r0, [pc, #376]	; (14a0c <z_arm_fault+0x1a8>)
   14892:	2145      	movs	r1, #69	; 0x45
   14894:	f011 f9bd 	bl	25c12 <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   14898:	495d      	ldr	r1, [pc, #372]	; (14a10 <z_arm_fault+0x1ac>)
   1489a:	485e      	ldr	r0, [pc, #376]	; (14a14 <z_arm_fault+0x1b0>)
   1489c:	f240 4205 	movw	r2, #1029	; 0x405
   148a0:	f011 f9a9 	bl	25bf6 <assert_print>
   148a4:	485a      	ldr	r0, [pc, #360]	; (14a10 <z_arm_fault+0x1ac>)
   148a6:	f240 4105 	movw	r1, #1029	; 0x405
   148aa:	f011 f99d 	bl	25be8 <assert_post_action>
   148ae:	2500      	movs	r5, #0
   148b0:	e006      	b.n	148c0 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   148b2:	0713      	lsls	r3, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   148b4:	bf4e      	itee	mi
   148b6:	460d      	movmi	r5, r1
			ptr_esf = (z_arch_esf_t *)msp;
   148b8:	4605      	movpl	r5, r0
			*nested_exc = true;
   148ba:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   148bc:	2d00      	cmp	r5, #0
   148be:	d0eb      	beq.n	14898 <z_arm_fault+0x34>
	*recoverable = false;
   148c0:	2400      	movs	r4, #0
	switch (fault) {
   148c2:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   148c4:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   148c8:	2b09      	cmp	r3, #9
   148ca:	f200 808b 	bhi.w	149e4 <z_arm_fault+0x180>
   148ce:	e8df f003 	tbb	[pc, r3]
   148d2:	7e05      	.short	0x7e05
   148d4:	89896682 	.word	0x89896682
   148d8:	86898989 	.word	0x86898989
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   148dc:	4f4a      	ldr	r7, [pc, #296]	; (14a08 <z_arm_fault+0x1a4>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   148de:	484e      	ldr	r0, [pc, #312]	; (14a18 <z_arm_fault+0x1b4>)
   148e0:	2145      	movs	r1, #69	; 0x45
   148e2:	f011 f996 	bl	25c12 <z_log_minimal_printk>
	*recoverable = false;
   148e6:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   148ea:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   148ec:	f014 0402 	ands.w	r4, r4, #2
   148f0:	d005      	beq.n	148fe <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
   148f2:	484a      	ldr	r0, [pc, #296]	; (14a1c <z_arm_fault+0x1b8>)
   148f4:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
   148f6:	f011 f98c 	bl	25c12 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   148fa:	2400      	movs	r4, #0
}
   148fc:	e006      	b.n	1490c <z_arm_fault+0xa8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   148fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14900:	2b00      	cmp	r3, #0
   14902:	da1d      	bge.n	14940 <z_arm_fault+0xdc>
		PR_EXC("  Debug event");
   14904:	4846      	ldr	r0, [pc, #280]	; (14a20 <z_arm_fault+0x1bc>)
   14906:	2145      	movs	r1, #69	; 0x45
   14908:	f011 f983 	bl	25c12 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1490c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14910:	b99b      	cbnz	r3, 1493a <z_arm_fault+0xd6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14912:	2220      	movs	r2, #32
   14914:	4629      	mov	r1, r5
   14916:	a802      	add	r0, sp, #8
   14918:	f012 f91b 	bl	26b52 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1491c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1491e:	2e00      	cmp	r6, #0
   14920:	d06d      	beq.n	149fe <z_arm_fault+0x19a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14922:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14926:	b922      	cbnz	r2, 14932 <z_arm_fault+0xce>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14928:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1492c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14930:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   14932:	a902      	add	r1, sp, #8
   14934:	4620      	mov	r0, r4
   14936:	f7ff fce1 	bl	142fc <z_arm_fatal_error>
}
   1493a:	b00a      	add	sp, #40	; 0x28
   1493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14940:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   14942:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   14946:	d039      	beq.n	149bc <z_arm_fault+0x158>
		PR_EXC("  Fault escalation (see below)");
   14948:	4836      	ldr	r0, [pc, #216]	; (14a24 <z_arm_fault+0x1c0>)
   1494a:	2145      	movs	r1, #69	; 0x45
   1494c:	f011 f961 	bl	25c12 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   14950:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   14952:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   14956:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1495a:	429a      	cmp	r2, r3
   1495c:	d106      	bne.n	1496c <z_arm_fault+0x108>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1495e:	682a      	ldr	r2, [r5, #0]
   14960:	4831      	ldr	r0, [pc, #196]	; (14a28 <z_arm_fault+0x1c4>)
   14962:	2145      	movs	r1, #69	; 0x45
   14964:	f011 f955 	bl	25c12 <z_log_minimal_printk>
			reason = esf->basic.r0;
   14968:	682c      	ldr	r4, [r5, #0]
   1496a:	e7cf      	b.n	1490c <z_arm_fault+0xa8>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1496e:	b2db      	uxtb	r3, r3
   14970:	b13b      	cbz	r3, 14982 <z_arm_fault+0x11e>
			reason = mem_manage_fault(esf, 1, recoverable);
   14972:	f10d 0207 	add.w	r2, sp, #7
   14976:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   14978:	4628      	mov	r0, r5
   1497a:	f7ff fe43 	bl	14604 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   1497e:	4604      	mov	r4, r0
		break;
   14980:	e7c4      	b.n	1490c <z_arm_fault+0xa8>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   14982:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14984:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   14988:	d005      	beq.n	14996 <z_arm_fault+0x132>
			reason = bus_fault(esf, 1, recoverable);
   1498a:	f10d 0107 	add.w	r1, sp, #7
   1498e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   14990:	f7ff ff0e 	bl	147b0 <bus_fault.constprop.0>
   14994:	e7f3      	b.n	1497e <z_arm_fault+0x11a>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   14996:	6abc      	ldr	r4, [r7, #40]	; 0x28
   14998:	0c24      	lsrs	r4, r4, #16
   1499a:	0424      	lsls	r4, r4, #16
   1499c:	b114      	cbz	r4, 149a4 <z_arm_fault+0x140>
		reason = usage_fault(esf);
   1499e:	f7ff febb 	bl	14718 <usage_fault.constprop.0>
   149a2:	e7ec      	b.n	1497e <z_arm_fault+0x11a>
			__ASSERT(0,
   149a4:	491a      	ldr	r1, [pc, #104]	; (14a10 <z_arm_fault+0x1ac>)
   149a6:	481b      	ldr	r0, [pc, #108]	; (14a14 <z_arm_fault+0x1b0>)
   149a8:	f240 22d7 	movw	r2, #727	; 0x2d7
   149ac:	f011 f923 	bl	25bf6 <assert_print>
   149b0:	f240 21d7 	movw	r1, #727	; 0x2d7
		__ASSERT(0,
   149b4:	4816      	ldr	r0, [pc, #88]	; (14a10 <z_arm_fault+0x1ac>)
   149b6:	f011 f917 	bl	25be8 <assert_post_action>
   149ba:	e7a7      	b.n	1490c <z_arm_fault+0xa8>
   149bc:	4914      	ldr	r1, [pc, #80]	; (14a10 <z_arm_fault+0x1ac>)
   149be:	4815      	ldr	r0, [pc, #84]	; (14a14 <z_arm_fault+0x1b0>)
   149c0:	f240 22db 	movw	r2, #731	; 0x2db
   149c4:	f011 f917 	bl	25bf6 <assert_print>
   149c8:	f240 21db 	movw	r1, #731	; 0x2db
   149cc:	e7f2      	b.n	149b4 <z_arm_fault+0x150>
		reason = mem_manage_fault(esf, 0, recoverable);
   149ce:	f10d 0207 	add.w	r2, sp, #7
   149d2:	2100      	movs	r1, #0
   149d4:	e7d0      	b.n	14978 <z_arm_fault+0x114>
		reason = bus_fault(esf, 0, recoverable);
   149d6:	f10d 0107 	add.w	r1, sp, #7
   149da:	2000      	movs	r0, #0
   149dc:	e7d8      	b.n	14990 <z_arm_fault+0x12c>
	PR_FAULT_INFO(
   149de:	4813      	ldr	r0, [pc, #76]	; (14a2c <z_arm_fault+0x1c8>)
   149e0:	2145      	movs	r1, #69	; 0x45
   149e2:	e788      	b.n	148f6 <z_arm_fault+0x92>
	PR_FAULT_INFO("***** %s %d) *****",
   149e4:	4912      	ldr	r1, [pc, #72]	; (14a30 <z_arm_fault+0x1cc>)
   149e6:	4a13      	ldr	r2, [pc, #76]	; (14a34 <z_arm_fault+0x1d0>)
   149e8:	4813      	ldr	r0, [pc, #76]	; (14a38 <z_arm_fault+0x1d4>)
   149ea:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   149ee:	bf08      	it	eq
   149f0:	460a      	moveq	r2, r1
   149f2:	f1a7 0310 	sub.w	r3, r7, #16
   149f6:	2145      	movs	r1, #69	; 0x45
   149f8:	f011 f90b 	bl	25c12 <z_log_minimal_printk>
   149fc:	e77d      	b.n	148fa <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   149fe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14a02:	f023 0301 	bic.w	r3, r3, #1
   14a06:	e793      	b.n	14930 <z_arm_fault+0xcc>
   14a08:	e000ed00 	.word	0xe000ed00
   14a0c:	0002bb56 	.word	0x0002bb56
   14a10:	0002b958 	.word	0x0002b958
   14a14:	0002ab8c 	.word	0x0002ab8c
   14a18:	0002bb86 	.word	0x0002bb86
   14a1c:	0002bba2 	.word	0x0002bba2
   14a20:	0002bbc8 	.word	0x0002bbc8
   14a24:	0002bbdb 	.word	0x0002bbdb
   14a28:	0002bbff 	.word	0x0002bbff
   14a2c:	0002bc20 	.word	0x0002bc20
   14a30:	0002bb28 	.word	0x0002bb28
   14a34:	0002bb3d 	.word	0x0002bb3d
   14a38:	0002bc49 	.word	0x0002bc49

00014a3c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14a3c:	4a02      	ldr	r2, [pc, #8]	; (14a48 <z_arm_fault_init+0xc>)
   14a3e:	6953      	ldr	r3, [r2, #20]
   14a40:	f043 0310 	orr.w	r3, r3, #16
   14a44:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   14a46:	4770      	bx	lr
   14a48:	e000ed00 	.word	0xe000ed00

00014a4c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   14a4c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14a50:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14a54:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   14a56:	4672      	mov	r2, lr
	bl z_arm_fault
   14a58:	f7ff ff04 	bl	14864 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   14a5c:	bd01      	pop	{r0, pc}
   14a5e:	bf00      	nop

00014a60 <z_arm_interrupt_init>:
   14a60:	4804      	ldr	r0, [pc, #16]	; (14a74 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14a62:	2300      	movs	r3, #0
   14a64:	2140      	movs	r1, #64	; 0x40
   14a66:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14a68:	3301      	adds	r3, #1
   14a6a:	2b27      	cmp	r3, #39	; 0x27
   14a6c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14a70:	d1f9      	bne.n	14a66 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14a72:	4770      	bx	lr
   14a74:	e000e100 	.word	0xe000e100

00014a78 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   14a78:	2000      	movs	r0, #0
    msr CONTROL, r0
   14a7a:	f380 8814 	msr	CONTROL, r0
    isb
   14a7e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   14a82:	f7fd ff5f 	bl	12944 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   14a86:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   14a88:	490d      	ldr	r1, [pc, #52]	; (14ac0 <__start+0x48>)
    str r0, [r1]
   14a8a:	6008      	str	r0, [r1, #0]
    dsb
   14a8c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14a90:	480c      	ldr	r0, [pc, #48]	; (14ac4 <__start+0x4c>)
    msr msp, r0
   14a92:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   14a96:	f000 f82b 	bl	14af0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14a9a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   14a9c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   14aa0:	4809      	ldr	r0, [pc, #36]	; (14ac8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   14aa2:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   14aa6:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14aa8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14aac:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   14ab0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   14ab2:	4308      	orrs	r0, r1
    msr CONTROL, r0
   14ab4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14ab8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14abc:	f7ff fcbc 	bl	14438 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   14ac0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14ac4:	20005500 	.word	0x20005500
    ldr r0, =z_interrupt_stacks
   14ac8:	200056c0 	.word	0x200056c0

00014acc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   14acc:	4907      	ldr	r1, [pc, #28]	; (14aec <z_arm_clear_arm_mpu_config+0x20>)
   14ace:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   14ad2:	2300      	movs	r3, #0
	int num_regions =
   14ad4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   14ad8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   14ada:	4293      	cmp	r3, r2
   14adc:	d100      	bne.n	14ae0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   14ade:	4770      	bx	lr
  MPU->RNR = rnr;
   14ae0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   14ae4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   14ae8:	3301      	adds	r3, #1
   14aea:	e7f6      	b.n	14ada <z_arm_clear_arm_mpu_config+0xe>
   14aec:	e000ed00 	.word	0xe000ed00

00014af0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   14af0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   14af2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   14af4:	2300      	movs	r3, #0
   14af6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   14afa:	f7ff ffe7 	bl	14acc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   14afe:	4b14      	ldr	r3, [pc, #80]	; (14b50 <z_arm_init_arch_hw_at_boot+0x60>)
   14b00:	f04f 32ff 	mov.w	r2, #4294967295
   14b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   14b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   14b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   14b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   14b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   14b18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   14b1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   14b20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   14b24:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   14b28:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14b2c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   14b30:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   14b34:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   14b38:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   14b3c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   14b40:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   14b44:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   14b46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14b4a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   14b4e:	bd08      	pop	{r3, pc}
   14b50:	e000e100 	.word	0xe000e100

00014b54 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   14b54:	4b08      	ldr	r3, [pc, #32]	; (14b78 <z_impl_k_thread_abort+0x24>)
   14b56:	689b      	ldr	r3, [r3, #8]
   14b58:	4283      	cmp	r3, r0
   14b5a:	d10b      	bne.n	14b74 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14b5c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14b60:	b143      	cbz	r3, 14b74 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14b62:	4b06      	ldr	r3, [pc, #24]	; (14b7c <z_impl_k_thread_abort+0x28>)
   14b64:	685a      	ldr	r2, [r3, #4]
   14b66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   14b6a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   14b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   14b6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   14b72:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   14b74:	f00f ba9e 	b.w	240b4 <z_thread_abort>
   14b78:	20002780 	.word	0x20002780
   14b7c:	e000ed00 	.word	0xe000ed00

00014b80 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14b80:	4b02      	ldr	r3, [pc, #8]	; (14b8c <z_arm_configure_static_mpu_regions+0xc>)
   14b82:	4a03      	ldr	r2, [pc, #12]	; (14b90 <z_arm_configure_static_mpu_regions+0x10>)
   14b84:	4803      	ldr	r0, [pc, #12]	; (14b94 <z_arm_configure_static_mpu_regions+0x14>)
   14b86:	2101      	movs	r1, #1
   14b88:	f000 b87c 	b.w	14c84 <arm_core_mpu_configure_static_mpu_regions>
   14b8c:	20010000 	.word	0x20010000
   14b90:	20000000 	.word	0x20000000
   14b94:	0002a39c 	.word	0x0002a39c

00014b98 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   14b98:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   14b9a:	4b05      	ldr	r3, [pc, #20]	; (14bb0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   14b9c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   14b9e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   14ba0:	4a04      	ldr	r2, [pc, #16]	; (14bb4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   14ba2:	2140      	movs	r1, #64	; 0x40
   14ba4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   14ba8:	4618      	mov	r0, r3
   14baa:	2101      	movs	r1, #1
   14bac:	f000 b888 	b.w	14cc0 <arm_core_mpu_configure_dynamic_mpu_regions>
   14bb0:	200022f0 	.word	0x200022f0
   14bb4:	150b0000 	.word	0x150b0000

00014bb8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   14bba:	4f24      	ldr	r7, [pc, #144]	; (14c4c <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;
   14bbc:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   14bbe:	2200      	movs	r2, #0
   14bc0:	428a      	cmp	r2, r1
   14bc2:	da0e      	bge.n	14be2 <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
   14bc4:	6844      	ldr	r4, [r0, #4]
   14bc6:	2c00      	cmp	r4, #0
   14bc8:	d03c      	beq.n	14c44 <mpu_configure_regions+0x8c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   14bca:	b193      	cbz	r3, 14bf2 <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   14bcc:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   14bd0:	ea14 0f0c 	tst.w	r4, ip
   14bd4:	d007      	beq.n	14be6 <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   14bd6:	481e      	ldr	r0, [pc, #120]	; (14c50 <mpu_configure_regions+0x98>)
   14bd8:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14bda:	f011 f81a 	bl	25c12 <z_log_minimal_printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14bde:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   14be2:	4628      	mov	r0, r5
   14be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   14be6:	2c1f      	cmp	r4, #31
   14be8:	d9f5      	bls.n	14bd6 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   14bea:	6806      	ldr	r6, [r0, #0]
		&&
   14bec:	ea1c 0f06 	tst.w	ip, r6
   14bf0:	d1f1      	bne.n	14bd6 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   14bf2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   14bf4:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14bf6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14bfa:	b2ed      	uxtb	r5, r5
	if (size <= 32U) {
   14bfc:	d910      	bls.n	14c20 <mpu_configure_regions+0x68>
	if (size > (1UL << 31)) {
   14bfe:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   14c02:	d80f      	bhi.n	14c24 <mpu_configure_regions+0x6c>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   14c04:	3c01      	subs	r4, #1
   14c06:	fab4 f484 	clz	r4, r4
   14c0a:	f1c4 041f 	rsb	r4, r4, #31
   14c0e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   14c10:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14c12:	ea4c 0404 	orr.w	r4, ip, r4
   14c16:	d907      	bls.n	14c28 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14c18:	480e      	ldr	r0, [pc, #56]	; (14c54 <mpu_configure_regions+0x9c>)
   14c1a:	462a      	mov	r2, r5
   14c1c:	2145      	movs	r1, #69	; 0x45
   14c1e:	e7dc      	b.n	14bda <mpu_configure_regions+0x22>
		return REGION_32B;
   14c20:	2408      	movs	r4, #8
   14c22:	e7f5      	b.n	14c10 <mpu_configure_regions+0x58>
		return REGION_4G;
   14c24:	243e      	movs	r4, #62	; 0x3e
   14c26:	e7f3      	b.n	14c10 <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14c28:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
   14c2c:	432e      	orrs	r6, r5
   14c2e:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14c32:	f044 0401 	orr.w	r4, r4, #1
   14c36:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14c3a:	f8c7 609c 	str.w	r6, [r7, #156]	; 0x9c
		reg_index++;
   14c3e:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14c40:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   14c44:	3201      	adds	r2, #1
   14c46:	300c      	adds	r0, #12
   14c48:	e7ba      	b.n	14bc0 <mpu_configure_regions+0x8>
   14c4a:	bf00      	nop
   14c4c:	e000ed00 	.word	0xe000ed00
   14c50:	0002bc65 	.word	0x0002bc65
   14c54:	0002bc8d 	.word	0x0002bc8d

00014c58 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14c58:	4b04      	ldr	r3, [pc, #16]	; (14c6c <arm_core_mpu_enable+0x14>)
   14c5a:	2205      	movs	r2, #5
   14c5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   14c60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14c64:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14c68:	4770      	bx	lr
   14c6a:	bf00      	nop
   14c6c:	e000ed00 	.word	0xe000ed00

00014c70 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14c70:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14c74:	4b02      	ldr	r3, [pc, #8]	; (14c80 <arm_core_mpu_disable+0x10>)
   14c76:	2200      	movs	r2, #0
   14c78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   14c7c:	4770      	bx	lr
   14c7e:	bf00      	nop
   14c80:	e000ed00 	.word	0xe000ed00

00014c84 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14c84:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14c86:	4c0b      	ldr	r4, [pc, #44]	; (14cb4 <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14c88:	2301      	movs	r3, #1
   14c8a:	7822      	ldrb	r2, [r4, #0]
   14c8c:	f7ff ff94 	bl	14bb8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14c90:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   14c92:	3016      	adds	r0, #22
   14c94:	d10c      	bne.n	14cb0 <arm_core_mpu_configure_static_mpu_regions+0x2c>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14c96:	4908      	ldr	r1, [pc, #32]	; (14cb8 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   14c98:	4808      	ldr	r0, [pc, #32]	; (14cbc <arm_core_mpu_configure_static_mpu_regions+0x38>)
   14c9a:	f44f 728b 	mov.w	r2, #278	; 0x116
   14c9e:	f010 ffaa 	bl	25bf6 <assert_print>
			regions_num);
	}
}
   14ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14ca6:	4804      	ldr	r0, [pc, #16]	; (14cb8 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   14ca8:	f44f 718b 	mov.w	r1, #278	; 0x116
   14cac:	f010 bf9c 	b.w	25be8 <assert_post_action>
}
   14cb0:	bd10      	pop	{r4, pc}
   14cb2:	bf00      	nop
   14cb4:	200027f5 	.word	0x200027f5
   14cb8:	0002bcb8 	.word	0x0002bcb8
   14cbc:	0002ab8c 	.word	0x0002ab8c

00014cc0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   14cc0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   14cc2:	4a10      	ldr	r2, [pc, #64]	; (14d04 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
   14cc4:	2300      	movs	r3, #0
   14cc6:	7812      	ldrb	r2, [r2, #0]
   14cc8:	f7ff ff76 	bl	14bb8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   14ccc:	f110 0f16 	cmn.w	r0, #22
   14cd0:	d00a      	beq.n	14ce8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>
  MPU->RNR = rnr;
   14cd2:	4b0d      	ldr	r3, [pc, #52]	; (14d08 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
  MPU->RASR = 0U;
   14cd4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   14cd6:	2807      	cmp	r0, #7
   14cd8:	dd00      	ble.n	14cdc <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   14cda:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   14cdc:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   14ce0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   14ce4:	3001      	adds	r0, #1
   14ce6:	e7f6      	b.n	14cd6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   14ce8:	4908      	ldr	r1, [pc, #32]	; (14d0c <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   14cea:	4809      	ldr	r0, [pc, #36]	; (14d10 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
   14cec:	f240 1235 	movw	r2, #309	; 0x135
   14cf0:	f010 ff81 	bl	25bf6 <assert_print>
}
   14cf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   14cf8:	4804      	ldr	r0, [pc, #16]	; (14d0c <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   14cfa:	f240 1135 	movw	r1, #309	; 0x135
   14cfe:	f010 bf73 	b.w	25be8 <assert_post_action>
   14d02:	bf00      	nop
   14d04:	200027f5 	.word	0x200027f5
   14d08:	e000ed00 	.word	0xe000ed00
   14d0c:	0002bcb8 	.word	0x0002bcb8
   14d10:	0002ab8c 	.word	0x0002ab8c

00014d14 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14d14:	4922      	ldr	r1, [pc, #136]	; (14da0 <z_arm_mpu_init+0x8c>)
{
   14d16:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   14d18:	680c      	ldr	r4, [r1, #0]
   14d1a:	2c08      	cmp	r4, #8
   14d1c:	d90d      	bls.n	14d3a <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   14d1e:	4921      	ldr	r1, [pc, #132]	; (14da4 <z_arm_mpu_init+0x90>)
   14d20:	4821      	ldr	r0, [pc, #132]	; (14da8 <z_arm_mpu_init+0x94>)
   14d22:	f240 124d 	movw	r2, #333	; 0x14d
   14d26:	f010 ff66 	bl	25bf6 <assert_print>
   14d2a:	481e      	ldr	r0, [pc, #120]	; (14da4 <z_arm_mpu_init+0x90>)
   14d2c:	f240 114d 	movw	r1, #333	; 0x14d
   14d30:	f010 ff5a 	bl	25be8 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   14d34:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   14d38:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   14d3a:	f7ff ff99 	bl	14c70 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14d3e:	6848      	ldr	r0, [r1, #4]
   14d40:	491a      	ldr	r1, [pc, #104]	; (14dac <z_arm_mpu_init+0x98>)
   14d42:	2200      	movs	r2, #0
   14d44:	4294      	cmp	r4, r2
   14d46:	f100 000c 	add.w	r0, r0, #12
   14d4a:	d116      	bne.n	14d7a <z_arm_mpu_init+0x66>
	static_regions_num = mpu_config.num_regions;
   14d4c:	4b18      	ldr	r3, [pc, #96]	; (14db0 <z_arm_mpu_init+0x9c>)
   14d4e:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   14d50:	f7ff ff82 	bl	14c58 <arm_core_mpu_enable>
	__ASSERT(
   14d54:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   14d58:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14d5c:	2b08      	cmp	r3, #8
   14d5e:	d00a      	beq.n	14d76 <z_arm_mpu_init+0x62>
   14d60:	4910      	ldr	r1, [pc, #64]	; (14da4 <z_arm_mpu_init+0x90>)
   14d62:	4811      	ldr	r0, [pc, #68]	; (14da8 <z_arm_mpu_init+0x94>)
   14d64:	f240 12ad 	movw	r2, #429	; 0x1ad
   14d68:	f010 ff45 	bl	25bf6 <assert_print>
   14d6c:	480d      	ldr	r0, [pc, #52]	; (14da4 <z_arm_mpu_init+0x90>)
   14d6e:	f240 11ad 	movw	r1, #429	; 0x1ad
   14d72:	f010 ff39 	bl	25be8 <assert_post_action>
	return 0;
   14d76:	2000      	movs	r0, #0
   14d78:	e7de      	b.n	14d38 <z_arm_mpu_init+0x24>
   14d7a:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14d7e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   14d82:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   14d86:	4313      	orrs	r3, r2
   14d88:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14d8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14d90:	f850 3c04 	ldr.w	r3, [r0, #-4]
   14d94:	f043 0301 	orr.w	r3, r3, #1
   14d98:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14d9c:	3201      	adds	r2, #1
   14d9e:	e7d1      	b.n	14d44 <z_arm_mpu_init+0x30>
   14da0:	0002a3a8 	.word	0x0002a3a8
   14da4:	0002bcb8 	.word	0x0002bcb8
   14da8:	0002ab8c 	.word	0x0002ab8c
   14dac:	e000ed00 	.word	0xe000ed00
   14db0:	200027f5 	.word	0x200027f5

00014db4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   14db4:	4b01      	ldr	r3, [pc, #4]	; (14dbc <__stdout_hook_install+0x8>)
   14db6:	6018      	str	r0, [r3, #0]
}
   14db8:	4770      	bx	lr
   14dba:	bf00      	nop
   14dbc:	20000578 	.word	0x20000578

00014dc0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   14dc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   14dc4:	f3ef 8211 	mrs	r2, BASEPRI
   14dc8:	f383 8812 	msr	BASEPRI_MAX, r3
   14dcc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14dd0:	4906      	ldr	r1, [pc, #24]	; (14dec <nordicsemi_nrf52_init+0x2c>)
   14dd2:	2301      	movs	r3, #1
   14dd4:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   14dd8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   14ddc:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   14de0:	f382 8811 	msr	BASEPRI, r2
   14de4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14de8:	2000      	movs	r0, #0
   14dea:	4770      	bx	lr
   14dec:	4001e000 	.word	0x4001e000

00014df0 <sys_arch_reboot>:
    *p_gpregret = val;
   14df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14df4:	b2c0      	uxtb	r0, r0
   14df6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   14dfa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14dfe:	4905      	ldr	r1, [pc, #20]	; (14e14 <sys_arch_reboot+0x24>)
   14e00:	4b05      	ldr	r3, [pc, #20]	; (14e18 <sys_arch_reboot+0x28>)
   14e02:	68ca      	ldr	r2, [r1, #12]
   14e04:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14e08:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14e0a:	60cb      	str	r3, [r1, #12]
   14e0c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14e10:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14e12:	e7fd      	b.n	14e10 <sys_arch_reboot+0x20>
   14e14:	e000ed00 	.word	0xe000ed00
   14e18:	05fa0004 	.word	0x05fa0004

00014e1c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14e1c:	b120      	cbz	r0, 14e28 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   14e1e:	4b03      	ldr	r3, [pc, #12]	; (14e2c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14e20:	0180      	lsls	r0, r0, #6
   14e22:	f043 0301 	orr.w	r3, r3, #1
   14e26:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   14e28:	4770      	bx	lr
   14e2a:	bf00      	nop
   14e2c:	0002a2e0 	.word	0x0002a2e0

00014e30 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   14e30:	4b0e      	ldr	r3, [pc, #56]	; (14e6c <bt_hex_real+0x3c>)
   14e32:	2940      	cmp	r1, #64	; 0x40
{
   14e34:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   14e36:	bf28      	it	cs
   14e38:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   14e3a:	4c0d      	ldr	r4, [pc, #52]	; (14e70 <bt_hex_real+0x40>)
   14e3c:	1846      	adds	r6, r0, r1
   14e3e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   14e40:	42b0      	cmp	r0, r6
   14e42:	f103 0302 	add.w	r3, r3, #2
   14e46:	d104      	bne.n	14e52 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   14e48:	2300      	movs	r3, #0
   14e4a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   14e4e:	4807      	ldr	r0, [pc, #28]	; (14e6c <bt_hex_real+0x3c>)
   14e50:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   14e52:	7802      	ldrb	r2, [r0, #0]
   14e54:	0912      	lsrs	r2, r2, #4
   14e56:	5ca2      	ldrb	r2, [r4, r2]
   14e58:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
   14e60:	f002 020f 	and.w	r2, r2, #15
   14e64:	5ca2      	ldrb	r2, [r4, r2]
   14e66:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   14e6a:	e7e9      	b.n	14e40 <bt_hex_real+0x10>
   14e6c:	20002814 	.word	0x20002814
   14e70:	0002bd02 	.word	0x0002bd02

00014e74 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   14e74:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   14e76:	7803      	ldrb	r3, [r0, #0]
   14e78:	b08b      	sub	sp, #44	; 0x2c
   14e7a:	4604      	mov	r4, r0
   14e7c:	ad07      	add	r5, sp, #28
   14e7e:	2b03      	cmp	r3, #3
   14e80:	d821      	bhi.n	14ec6 <bt_addr_le_str_real+0x52>
   14e82:	e8df f003 	tbb	[pc, r3]
   14e86:	1a02      	.short	0x1a02
   14e88:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   14e8a:	4912      	ldr	r1, [pc, #72]	; (14ed4 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   14e8c:	4628      	mov	r0, r5
   14e8e:	f011 fe18 	bl	26ac2 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   14e92:	7863      	ldrb	r3, [r4, #1]
   14e94:	9304      	str	r3, [sp, #16]
   14e96:	78a3      	ldrb	r3, [r4, #2]
   14e98:	9303      	str	r3, [sp, #12]
   14e9a:	78e3      	ldrb	r3, [r4, #3]
   14e9c:	9302      	str	r3, [sp, #8]
   14e9e:	7923      	ldrb	r3, [r4, #4]
   14ea0:	9301      	str	r3, [sp, #4]
   14ea2:	7963      	ldrb	r3, [r4, #5]
   14ea4:	9300      	str	r3, [sp, #0]
   14ea6:	4a0c      	ldr	r2, [pc, #48]	; (14ed8 <bt_addr_le_str_real+0x64>)
   14ea8:	79a3      	ldrb	r3, [r4, #6]
   14eaa:	9505      	str	r5, [sp, #20]
   14eac:	211e      	movs	r1, #30
   14eae:	480b      	ldr	r0, [pc, #44]	; (14edc <bt_addr_le_str_real+0x68>)
   14eb0:	f010 fcbd 	bl	2582e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   14eb4:	4809      	ldr	r0, [pc, #36]	; (14edc <bt_addr_le_str_real+0x68>)
   14eb6:	b00b      	add	sp, #44	; 0x2c
   14eb8:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   14eba:	4909      	ldr	r1, [pc, #36]	; (14ee0 <bt_addr_le_str_real+0x6c>)
   14ebc:	e7e6      	b.n	14e8c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   14ebe:	4909      	ldr	r1, [pc, #36]	; (14ee4 <bt_addr_le_str_real+0x70>)
   14ec0:	e7e4      	b.n	14e8c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   14ec2:	4909      	ldr	r1, [pc, #36]	; (14ee8 <bt_addr_le_str_real+0x74>)
   14ec4:	e7e2      	b.n	14e8c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   14ec6:	4a09      	ldr	r2, [pc, #36]	; (14eec <bt_addr_le_str_real+0x78>)
   14ec8:	210a      	movs	r1, #10
   14eca:	4628      	mov	r0, r5
   14ecc:	f010 fcaf 	bl	2582e <snprintk>
		break;
   14ed0:	e7df      	b.n	14e92 <bt_addr_le_str_real+0x1e>
   14ed2:	bf00      	nop
   14ed4:	0002ae13 	.word	0x0002ae13
   14ed8:	0002ae3c 	.word	0x0002ae3c
   14edc:	200027f6 	.word	0x200027f6
   14ee0:	0002ae1a 	.word	0x0002ae1a
   14ee4:	0002ae21 	.word	0x0002ae21
   14ee8:	0002ae2b 	.word	0x0002ae2b
   14eec:	0002ae35 	.word	0x0002ae35

00014ef0 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   14ef0:	b510      	push	{r4, lr}
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   14ef2:	4c10      	ldr	r4, [pc, #64]	; (14f34 <save_id+0x44>)
	BT_INFO("Saving ID");
   14ef4:	4810      	ldr	r0, [pc, #64]	; (14f38 <save_id+0x48>)
   14ef6:	2149      	movs	r1, #73	; 0x49
   14ef8:	f010 fe8b 	bl	25c12 <z_log_minimal_printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   14efc:	79e2      	ldrb	r2, [r4, #7]
   14efe:	480f      	ldr	r0, [pc, #60]	; (14f3c <save_id+0x4c>)
   14f00:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   14f04:	4621      	mov	r1, r4
   14f06:	f7fe f8c3 	bl	13090 <settings_save_one>
	if (err) {
   14f0a:	4602      	mov	r2, r0
   14f0c:	b118      	cbz	r0, 14f16 <save_id+0x26>
		BT_ERR("Failed to save ID (err %d)", err);
   14f0e:	480c      	ldr	r0, [pc, #48]	; (14f40 <save_id+0x50>)
   14f10:	2145      	movs	r1, #69	; 0x45
   14f12:	f010 fe7e 	bl	25c12 <z_log_minimal_printk>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   14f16:	79e2      	ldrb	r2, [r4, #7]
   14f18:	490a      	ldr	r1, [pc, #40]	; (14f44 <save_id+0x54>)
   14f1a:	480b      	ldr	r0, [pc, #44]	; (14f48 <save_id+0x58>)
   14f1c:	0112      	lsls	r2, r2, #4
   14f1e:	f7fe f8b7 	bl	13090 <settings_save_one>
	if (err) {
   14f22:	4602      	mov	r2, r0
   14f24:	b128      	cbz	r0, 14f32 <save_id+0x42>
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   14f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save IRK (err %d)", err);
   14f2a:	4808      	ldr	r0, [pc, #32]	; (14f4c <save_id+0x5c>)
   14f2c:	2145      	movs	r1, #69	; 0x45
   14f2e:	f010 be70 	b.w	25c12 <z_log_minimal_printk>
}
   14f32:	bd10      	pop	{r4, pc}
   14f34:	20000340 	.word	0x20000340
   14f38:	0002bd1a 	.word	0x0002bd1a
   14f3c:	0002bd29 	.word	0x0002bd29
   14f40:	0002bd2f 	.word	0x0002bd2f
   14f44:	200004a4 	.word	0x200004a4
   14f48:	0002bd4f 	.word	0x0002bd4f
   14f4c:	0002bd56 	.word	0x0002bd56

00014f50 <set>:
{
   14f50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14f54:	4d2f      	ldr	r5, [pc, #188]	; (15014 <set+0xc4>)
   14f56:	f3bf 8f5b 	dmb	ish
   14f5a:	682c      	ldr	r4, [r5, #0]
   14f5c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14f60:	f014 0401 	ands.w	r4, r4, #1
{
   14f64:	4606      	mov	r6, r0
   14f66:	4617      	mov	r7, r2
   14f68:	4698      	mov	r8, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14f6a:	d01d      	beq.n	14fa8 <set+0x58>
	if (!name) {
   14f6c:	b930      	cbnz	r0, 14f7c <set+0x2c>
		BT_ERR("Insufficient number of arguments");
   14f6e:	482a      	ldr	r0, [pc, #168]	; (15018 <set+0xc8>)
   14f70:	2145      	movs	r1, #69	; 0x45
   14f72:	f010 fe4e 	bl	25c12 <z_log_minimal_printk>
	return -ENOENT;
   14f76:	f06f 0401 	mvn.w	r4, #1
   14f7a:	e015      	b.n	14fa8 <set+0x58>
	len = settings_name_next(name, &next);
   14f7c:	a901      	add	r1, sp, #4
   14f7e:	f011 f8e8 	bl	26152 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   14f82:	4926      	ldr	r1, [pc, #152]	; (1501c <set+0xcc>)
   14f84:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
   14f86:	4681      	mov	r9, r0
	if (!strncmp(name, "id", len)) {
   14f88:	4630      	mov	r0, r6
   14f8a:	f011 fdc0 	bl	26b0e <strncmp>
   14f8e:	4604      	mov	r4, r0
   14f90:	bb28      	cbnz	r0, 14fde <set+0x8e>
   14f92:	f3bf 8f5b 	dmb	ish
   14f96:	682b      	ldr	r3, [r5, #0]
   14f98:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   14f9c:	071b      	lsls	r3, r3, #28
   14f9e:	d507      	bpl.n	14fb0 <set+0x60>
			BT_WARN("Ignoring identities stored in flash");
   14fa0:	481f      	ldr	r0, [pc, #124]	; (15020 <set+0xd0>)
   14fa2:	2157      	movs	r1, #87	; 0x57
   14fa4:	f010 fe35 	bl	25c12 <z_log_minimal_printk>
}
   14fa8:	4620      	mov	r0, r4
   14faa:	b003      	add	sp, #12
   14fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   14fb0:	3dcc      	subs	r5, #204	; 0xcc
   14fb2:	2207      	movs	r2, #7
   14fb4:	4629      	mov	r1, r5
   14fb6:	4640      	mov	r0, r8
   14fb8:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   14fba:	2806      	cmp	r0, #6
   14fbc:	d80a      	bhi.n	14fd4 <set+0x84>
				BT_ERR("Invalid length ID address in storage");
   14fbe:	4819      	ldr	r0, [pc, #100]	; (15024 <set+0xd4>)
   14fc0:	2145      	movs	r1, #69	; 0x45
   14fc2:	f010 fe26 	bl	25c12 <z_log_minimal_printk>
			(void)memset(bt_dev.id_addr, 0,
   14fc6:	2207      	movs	r2, #7
   14fc8:	4621      	mov	r1, r4
   14fca:	4628      	mov	r0, r5
   14fcc:	f011 fdcc 	bl	26b68 <memset>
			bt_dev.id_count = 0U;
   14fd0:	71ec      	strb	r4, [r5, #7]
   14fd2:	e7e9      	b.n	14fa8 <set+0x58>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   14fd4:	2307      	movs	r3, #7
   14fd6:	fbb0 f0f3 	udiv	r0, r0, r3
   14fda:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   14fdc:	e7e4      	b.n	14fa8 <set+0x58>
	if (!strncmp(name, "irk", len)) {
   14fde:	4912      	ldr	r1, [pc, #72]	; (15028 <set+0xd8>)
   14fe0:	464a      	mov	r2, r9
   14fe2:	4630      	mov	r0, r6
   14fe4:	f011 fd93 	bl	26b0e <strncmp>
   14fe8:	4604      	mov	r4, r0
   14fea:	2800      	cmp	r0, #0
   14fec:	d1c3      	bne.n	14f76 <set+0x26>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   14fee:	2210      	movs	r2, #16
   14ff0:	f105 0198 	add.w	r1, r5, #152	; 0x98
   14ff4:	4640      	mov	r0, r8
   14ff6:	47b8      	blx	r7
		if (len < sizeof(bt_dev.irk[0])) {
   14ff8:	280f      	cmp	r0, #15
   14ffa:	d8d5      	bhi.n	14fa8 <set+0x58>
				BT_ERR("Invalid length IRK in storage");
   14ffc:	480b      	ldr	r0, [pc, #44]	; (1502c <set+0xdc>)
   14ffe:	2145      	movs	r1, #69	; 0x45
   15000:	f010 fe07 	bl	25c12 <z_log_minimal_printk>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   15004:	2210      	movs	r2, #16
   15006:	4621      	mov	r1, r4
   15008:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1500c:	f011 fdac 	bl	26b68 <memset>
   15010:	e7ca      	b.n	14fa8 <set+0x58>
   15012:	bf00      	nop
   15014:	2000040c 	.word	0x2000040c
   15018:	0002bd77 	.word	0x0002bd77
   1501c:	0002ae28 	.word	0x0002ae28
   15020:	0002bd9d 	.word	0x0002bd9d
   15024:	0002bdc6 	.word	0x0002bdc6
   15028:	0002bd52 	.word	0x0002bd52
   1502c:	0002bdf0 	.word	0x0002bdf0

00015030 <bt_settings_encode_key>:
{
   15030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15034:	b088      	sub	sp, #32
		snprintk(path, path_size,
   15036:	799c      	ldrb	r4, [r3, #6]
{
   15038:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   1503c:	795d      	ldrb	r5, [r3, #5]
   1503e:	791e      	ldrb	r6, [r3, #4]
   15040:	78df      	ldrb	r7, [r3, #3]
   15042:	f893 c002 	ldrb.w	ip, [r3, #2]
   15046:	f893 e001 	ldrb.w	lr, [r3, #1]
   1504a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   1504c:	f1b8 0f00 	cmp.w	r8, #0
   15050:	d00e      	beq.n	15070 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   15052:	e9cd 3806 	strd	r3, r8, [sp, #24]
   15056:	e9cd ce04 	strd	ip, lr, [sp, #16]
   1505a:	4613      	mov	r3, r2
   1505c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   15060:	e9cd 4500 	strd	r4, r5, [sp]
   15064:	4a08      	ldr	r2, [pc, #32]	; (15088 <bt_settings_encode_key+0x58>)
   15066:	f010 fbe2 	bl	2582e <snprintk>
}
   1506a:	b008      	add	sp, #32
   1506c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   15070:	e9cd e305 	strd	lr, r3, [sp, #20]
   15074:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   15078:	4613      	mov	r3, r2
   1507a:	e9cd 5601 	strd	r5, r6, [sp, #4]
   1507e:	4a03      	ldr	r2, [pc, #12]	; (1508c <bt_settings_encode_key+0x5c>)
   15080:	9400      	str	r4, [sp, #0]
   15082:	f010 fbd4 	bl	2582e <snprintk>
}
   15086:	e7f0      	b.n	1506a <bt_settings_encode_key+0x3a>
   15088:	0002be13 	.word	0x0002be13
   1508c:	0002be37 	.word	0x0002be37

00015090 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   15090:	4801      	ldr	r0, [pc, #4]	; (15098 <bt_settings_save_id+0x8>)
   15092:	f00d bee3 	b.w	22e5c <k_work_submit>
   15096:	bf00      	nop
   15098:	2000057c 	.word	0x2000057c

0001509c <commit>:
}

static int commit(void)
{
   1509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1509e:	4d1e      	ldr	r5, [pc, #120]	; (15118 <commit+0x7c>)
   150a0:	f3bf 8f5b 	dmb	ish
   150a4:	682b      	ldr	r3, [r5, #0]
   150a6:	f3bf 8f5b 	dmb	ish
	int err;

	BT_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   150aa:	f013 0f01 	tst.w	r3, #1
   150ae:	462e      	mov	r6, r5
   150b0:	d101      	bne.n	150b6 <commit+0x1a>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
   150b2:	2400      	movs	r4, #0
   150b4:	e00c      	b.n	150d0 <commit+0x34>
	if (!bt_dev.id_count) {
   150b6:	f815 3cc5 	ldrb.w	r3, [r5, #-197]
   150ba:	f1a5 07cc 	sub.w	r7, r5, #204	; 0xcc
   150be:	b983      	cbnz	r3, 150e2 <commit+0x46>
		err = bt_setup_public_id_addr();
   150c0:	f001 ff00 	bl	16ec4 <bt_setup_public_id_addr>
		if (err) {
   150c4:	4604      	mov	r4, r0
   150c6:	b128      	cbz	r0, 150d4 <commit+0x38>
			BT_ERR("Unable to setup an identity address");
   150c8:	4814      	ldr	r0, [pc, #80]	; (1511c <commit+0x80>)
   150ca:	2145      	movs	r1, #69	; 0x45
   150cc:	f010 fda1 	bl	25c12 <z_log_minimal_printk>
}
   150d0:	4620      	mov	r0, r4
   150d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_dev.id_count) {
   150d4:	79fb      	ldrb	r3, [r7, #7]
   150d6:	b923      	cbnz	r3, 150e2 <commit+0x46>
		err = bt_setup_random_id_addr();
   150d8:	f001 ff76 	bl	16fc8 <bt_setup_random_id_addr>
		if (err) {
   150dc:	4604      	mov	r4, r0
   150de:	2800      	cmp	r0, #0
   150e0:	d1f2      	bne.n	150c8 <commit+0x2c>
   150e2:	f3bf 8f5b 	dmb	ish
   150e6:	682b      	ldr	r3, [r5, #0]
   150e8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   150ec:	075a      	lsls	r2, r3, #29
   150ee:	d401      	bmi.n	150f4 <commit+0x58>
		bt_finalize_init();
   150f0:	f001 fa48 	bl	16584 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   150f4:	f3bf 8f5b 	dmb	ish
   150f8:	e856 3f00 	ldrex	r3, [r6]
   150fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   15100:	e846 2100 	strex	r1, r2, [r6]
   15104:	2900      	cmp	r1, #0
   15106:	d1f7      	bne.n	150f8 <commit+0x5c>
   15108:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   1510c:	03db      	lsls	r3, r3, #15
   1510e:	d5d0      	bpl.n	150b2 <commit+0x16>
		bt_settings_save_id();
   15110:	f7ff ffbe 	bl	15090 <bt_settings_save_id>
   15114:	e7cd      	b.n	150b2 <commit+0x16>
   15116:	bf00      	nop
   15118:	2000040c 	.word	0x2000040c
   1511c:	0002be58 	.word	0x0002be58

00015120 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   15120:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   15122:	f7fe f925 	bl	13370 <settings_subsys_init>
	if (err) {
   15126:	4604      	mov	r4, r0
   15128:	b120      	cbz	r0, 15134 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
   1512a:	4602      	mov	r2, r0
   1512c:	2145      	movs	r1, #69	; 0x45
   1512e:	4802      	ldr	r0, [pc, #8]	; (15138 <bt_settings_init+0x18>)
   15130:	f010 fd6f 	bl	25c12 <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   15134:	4620      	mov	r0, r4
   15136:	bd10      	pop	{r4, pc}
   15138:	0002be81 	.word	0x0002be81

0001513c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   1513c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   1513e:	4d0a      	ldr	r5, [pc, #40]	; (15168 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15140:	4b0a      	ldr	r3, [pc, #40]	; (1516c <long_wq_init+0x30>)
{
   15142:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15144:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   15146:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15148:	9302      	str	r3, [sp, #8]
   1514a:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   1514c:	f00d fe8c 	bl	22e68 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   15150:	ab02      	add	r3, sp, #8
   15152:	9300      	str	r3, [sp, #0]
   15154:	4628      	mov	r0, r5
   15156:	4906      	ldr	r1, [pc, #24]	; (15170 <long_wq_init+0x34>)
   15158:	230a      	movs	r3, #10
   1515a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   1515e:	f00d fe9b 	bl	22e98 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   15162:	4620      	mov	r0, r4
   15164:	b005      	add	sp, #20
   15166:	bd30      	pop	{r4, r5, pc}
   15168:	20001878 	.word	0x20001878
   1516c:	0002beba 	.word	0x0002beba
   15170:	20003400 	.word	0x20003400

00015174 <bt_long_wq_schedule>:
{
   15174:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   15176:	4801      	ldr	r0, [pc, #4]	; (1517c <bt_long_wq_schedule+0x8>)
   15178:	f00d bf22 	b.w	22fc0 <k_work_schedule_for_queue>
   1517c:	20001878 	.word	0x20001878

00015180 <bt_long_wq_reschedule>:
{
   15180:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   15182:	4801      	ldr	r0, [pc, #4]	; (15188 <bt_long_wq_reschedule+0x8>)
   15184:	f00d bf86 	b.w	23094 <k_work_reschedule_for_queue>
   15188:	20001878 	.word	0x20001878

0001518c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   1518c:	b430      	push	{r4, r5}
   1518e:	4603      	mov	r3, r0
   15190:	4608      	mov	r0, r1
	switch (src->type) {
   15192:	781a      	ldrb	r2, [r3, #0]
   15194:	2a01      	cmp	r2, #1
   15196:	d013      	beq.n	151c0 <uuid_to_uuid128+0x34>
   15198:	2a02      	cmp	r2, #2
   1519a:	d026      	beq.n	151ea <uuid_to_uuid128+0x5e>
   1519c:	b972      	cbnz	r2, 151bc <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1519e:	4a15      	ldr	r2, [pc, #84]	; (151f4 <uuid_to_uuid128+0x68>)
   151a0:	f102 0410 	add.w	r4, r2, #16
   151a4:	f852 5b04 	ldr.w	r5, [r2], #4
   151a8:	f841 5b04 	str.w	r5, [r1], #4
   151ac:	42a2      	cmp	r2, r4
   151ae:	d1f9      	bne.n	151a4 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   151b0:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   151b2:	7812      	ldrb	r2, [r2, #0]
   151b4:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   151b6:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   151b8:	0a1b      	lsrs	r3, r3, #8
   151ba:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   151bc:	bc30      	pop	{r4, r5}
   151be:	4770      	bx	lr
		*dst = uuid128_base;
   151c0:	4a0c      	ldr	r2, [pc, #48]	; (151f4 <uuid_to_uuid128+0x68>)
   151c2:	f102 0410 	add.w	r4, r2, #16
   151c6:	f852 5b04 	ldr.w	r5, [r2], #4
   151ca:	f841 5b04 	str.w	r5, [r1], #4
   151ce:	42a2      	cmp	r2, r4
   151d0:	d1f9      	bne.n	151c6 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   151d2:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   151d4:	7812      	ldrb	r2, [r2, #0]
   151d6:	700a      	strb	r2, [r1, #0]
   151d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   151dc:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   151de:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   151e0:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   151e2:	0a1b      	lsrs	r3, r3, #8
   151e4:	7382      	strb	r2, [r0, #14]
   151e6:	7403      	strb	r3, [r0, #16]
}
   151e8:	e7e8      	b.n	151bc <uuid_to_uuid128+0x30>
}
   151ea:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   151ec:	2211      	movs	r2, #17
   151ee:	4619      	mov	r1, r3
   151f0:	f011 bcaf 	b.w	26b52 <memcpy>
   151f4:	0002bee5 	.word	0x0002bee5

000151f8 <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
   151f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
   151fa:	7805      	ldrb	r5, [r0, #0]
   151fc:	2d01      	cmp	r5, #1
{
   151fe:	b08b      	sub	sp, #44	; 0x2c
   15200:	4604      	mov	r4, r0
   15202:	460e      	mov	r6, r1
   15204:	4617      	mov	r7, r2
	switch (uuid->type) {
   15206:	d00c      	beq.n	15222 <bt_uuid_to_str+0x2a>
   15208:	2d02      	cmp	r5, #2
   1520a:	d00d      	beq.n	15228 <bt_uuid_to_str+0x30>
   1520c:	2d00      	cmp	r5, #0
   1520e:	d144      	bne.n	1529a <bt_uuid_to_str+0xa2>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
   15210:	8843      	ldrh	r3, [r0, #2]
   15212:	4a25      	ldr	r2, [pc, #148]	; (152a8 <bt_uuid_to_str+0xb0>)
		break;
	case BT_UUID_TYPE_32:
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   15214:	4639      	mov	r1, r7
   15216:	4630      	mov	r0, r6
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
   15218:	b00b      	add	sp, #44	; 0x2c
   1521a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   1521e:	f010 bb06 	b.w	2582e <snprintk>
   15222:	6843      	ldr	r3, [r0, #4]
   15224:	4a21      	ldr	r2, [pc, #132]	; (152ac <bt_uuid_to_str+0xb4>)
   15226:	e7f5      	b.n	15214 <bt_uuid_to_str+0x1c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
   15228:	462a      	mov	r2, r5
   1522a:	1c41      	adds	r1, r0, #1
   1522c:	a806      	add	r0, sp, #24
   1522e:	f011 fc90 	bl	26b52 <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
   15232:	1ce1      	adds	r1, r4, #3
   15234:	2204      	movs	r2, #4
   15236:	a808      	add	r0, sp, #32
   15238:	f011 fc8b 	bl	26b52 <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
   1523c:	462a      	mov	r2, r5
   1523e:	1de1      	adds	r1, r4, #7
   15240:	f10d 001a 	add.w	r0, sp, #26
   15244:	f011 fc85 	bl	26b52 <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
   15248:	462a      	mov	r2, r5
   1524a:	f104 0109 	add.w	r1, r4, #9
   1524e:	a807      	add	r0, sp, #28
   15250:	f011 fc7f 	bl	26b52 <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
   15254:	462a      	mov	r2, r5
   15256:	f104 010b 	add.w	r1, r4, #11
   1525a:	f10d 001e 	add.w	r0, sp, #30
   1525e:	f011 fc78 	bl	26b52 <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
   15262:	f104 010d 	add.w	r1, r4, #13
   15266:	2204      	movs	r2, #4
   15268:	a809      	add	r0, sp, #36	; 0x24
   1526a:	f011 fc72 	bl	26b52 <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   1526e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   15272:	9304      	str	r3, [sp, #16]
   15274:	9b08      	ldr	r3, [sp, #32]
   15276:	9303      	str	r3, [sp, #12]
   15278:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1527c:	9302      	str	r3, [sp, #8]
   1527e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   15282:	9301      	str	r3, [sp, #4]
   15284:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   15288:	9300      	str	r3, [sp, #0]
   1528a:	4a09      	ldr	r2, [pc, #36]	; (152b0 <bt_uuid_to_str+0xb8>)
   1528c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1528e:	4639      	mov	r1, r7
   15290:	4630      	mov	r0, r6
   15292:	f010 facc 	bl	2582e <snprintk>
}
   15296:	b00b      	add	sp, #44	; 0x2c
   15298:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)memset(str, 0, len);
   1529a:	2100      	movs	r1, #0
   1529c:	4630      	mov	r0, r6
}
   1529e:	b00b      	add	sp, #44	; 0x2c
   152a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		(void)memset(str, 0, len);
   152a4:	f011 bc60 	b.w	26b68 <memset>
   152a8:	0002bee0 	.word	0x0002bee0
   152ac:	0002bec3 	.word	0x0002bec3
   152b0:	0002bec8 	.word	0x0002bec8

000152b4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   152b4:	b570      	push	{r4, r5, r6, lr}
   152b6:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   152b8:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   152bc:	2b01      	cmp	r3, #1
{
   152be:	4605      	mov	r5, r0
   152c0:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   152c2:	d00a      	beq.n	152da <bt_buf_get_rx+0x26>
   152c4:	2805      	cmp	r0, #5
   152c6:	d008      	beq.n	152da <bt_buf_get_rx+0x26>
   152c8:	490b      	ldr	r1, [pc, #44]	; (152f8 <bt_buf_get_rx+0x44>)
   152ca:	480c      	ldr	r0, [pc, #48]	; (152fc <bt_buf_get_rx+0x48>)
   152cc:	2241      	movs	r2, #65	; 0x41
   152ce:	f010 fc92 	bl	25bf6 <assert_print>
   152d2:	4809      	ldr	r0, [pc, #36]	; (152f8 <bt_buf_get_rx+0x44>)
   152d4:	2141      	movs	r1, #65	; 0x41
   152d6:	f010 fc87 	bl	25be8 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   152da:	4623      	mov	r3, r4
   152dc:	4808      	ldr	r0, [pc, #32]	; (15300 <bt_buf_get_rx+0x4c>)
   152de:	4632      	mov	r2, r6
   152e0:	f013 fedb 	bl	2909a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   152e4:	4604      	mov	r4, r0
   152e6:	b120      	cbz	r0, 152f2 <bt_buf_get_rx+0x3e>
	net_buf_simple_reserve(&buf->b, reserve);
   152e8:	2100      	movs	r1, #0
   152ea:	3008      	adds	r0, #8
   152ec:	f008 fec6 	bl	1e07c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   152f0:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   152f2:	4620      	mov	r0, r4
   152f4:	bd70      	pop	{r4, r5, r6, pc}
   152f6:	bf00      	nop
   152f8:	0002bef6 	.word	0x0002bef6
   152fc:	0002ab8c 	.word	0x0002ab8c
   15300:	20000990 	.word	0x20000990

00015304 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15304:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   15306:	490b      	ldr	r1, [pc, #44]	; (15334 <bt_buf_get_cmd_complete+0x30>)
{
   15308:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   1530a:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   1530e:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   15310:	b920      	cbnz	r0, 1531c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15316:	2001      	movs	r0, #1
   15318:	f7ff bfcc 	b.w	152b4 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   1531c:	f009 f812 	bl	1e344 <net_buf_ref>
   15320:	2301      	movs	r3, #1
		buf->len = 0U;
   15322:	2100      	movs	r1, #0
   15324:	7503      	strb	r3, [r0, #20]
   15326:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   15328:	4604      	mov	r4, r0
   1532a:	3008      	adds	r0, #8
   1532c:	f008 fea6 	bl	1e07c <net_buf_simple_reserve>
}
   15330:	4620      	mov	r0, r4
   15332:	bd10      	pop	{r4, pc}
   15334:	20000340 	.word	0x20000340

00015338 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15338:	b570      	push	{r4, r5, r6, lr}
   1533a:	4604      	mov	r4, r0
	switch (evt) {
   1533c:	2c0f      	cmp	r4, #15
{
   1533e:	460d      	mov	r5, r1
   15340:	4610      	mov	r0, r2
   15342:	4619      	mov	r1, r3
	switch (evt) {
   15344:	d805      	bhi.n	15352 <bt_buf_get_evt+0x1a>
   15346:	2c0d      	cmp	r4, #13
   15348:	d912      	bls.n	15370 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1534a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1534e:	f7ff bfd9 	b.w	15304 <bt_buf_get_cmd_complete>
	switch (evt) {
   15352:	2c13      	cmp	r4, #19
   15354:	d10c      	bne.n	15370 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   15356:	480b      	ldr	r0, [pc, #44]	; (15384 <bt_buf_get_evt+0x4c>)
   15358:	f013 fe9f 	bl	2909a <net_buf_alloc_fixed>
			if (buf) {
   1535c:	4604      	mov	r4, r0
   1535e:	b128      	cbz	r0, 1536c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   15360:	2100      	movs	r1, #0
   15362:	3008      	adds	r0, #8
   15364:	f008 fe8a 	bl	1e07c <net_buf_simple_reserve>
   15368:	2301      	movs	r3, #1
   1536a:	7523      	strb	r3, [r4, #20]
}
   1536c:	4620      	mov	r0, r4
   1536e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   15370:	4602      	mov	r2, r0
   15372:	460b      	mov	r3, r1
		if (discardable) {
   15374:	b10d      	cbz	r5, 1537a <bt_buf_get_evt+0x42>
   15376:	4804      	ldr	r0, [pc, #16]	; (15388 <bt_buf_get_evt+0x50>)
   15378:	e7ee      	b.n	15358 <bt_buf_get_evt+0x20>
}
   1537a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1537e:	2001      	movs	r0, #1
   15380:	f7ff bf98 	b.w	152b4 <bt_buf_get_rx>
   15384:	200009c4 	.word	0x200009c4
   15388:	200008f4 	.word	0x200008f4

0001538c <ver_str>:
{
   1538c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   1538e:	4d0b      	ldr	r5, [pc, #44]	; (153bc <ver_str+0x30>)
{
   15390:	4606      	mov	r6, r0
	const char * const str[] = {
   15392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   15394:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   15396:	ac01      	add	r4, sp, #4
   15398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1539a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1539c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1539e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   153a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   153a2:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   153a4:	682b      	ldr	r3, [r5, #0]
   153a6:	6023      	str	r3, [r4, #0]
		return str[ver];
   153a8:	bf9b      	ittet	ls
   153aa:	ab0e      	addls	r3, sp, #56	; 0x38
   153ac:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   153b0:	4803      	ldrhi	r0, [pc, #12]	; (153c0 <ver_str+0x34>)
		return str[ver];
   153b2:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   153b6:	b00e      	add	sp, #56	; 0x38
   153b8:	bd70      	pop	{r4, r5, r6, pc}
   153ba:	bf00      	nop
   153bc:	0002a23c 	.word	0x0002a23c
   153c0:	0002c01b 	.word	0x0002c01b

000153c4 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   153c4:	6883      	ldr	r3, [r0, #8]
   153c6:	4802      	ldr	r0, [pc, #8]	; (153d0 <hci_data_buf_overflow+0xc>)
   153c8:	781a      	ldrb	r2, [r3, #0]
   153ca:	2157      	movs	r1, #87	; 0x57
   153cc:	f010 bc21 	b.w	25c12 <z_log_minimal_printk>
   153d0:	0002c023 	.word	0x0002c023

000153d4 <hci_disconn_complete_prio>:
{
   153d4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   153d6:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   153d8:	781a      	ldrb	r2, [r3, #0]
   153da:	b972      	cbnz	r2, 153fa <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   153dc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   153e0:	4620      	mov	r0, r4
   153e2:	f002 fccd 	bl	17d80 <bt_conn_lookup_handle>
	if (!conn) {
   153e6:	4605      	mov	r5, r0
   153e8:	b940      	cbnz	r0, 153fc <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   153ea:	4b08      	ldr	r3, [pc, #32]	; (1540c <hci_disconn_complete_prio+0x38>)
   153ec:	881a      	ldrh	r2, [r3, #0]
   153ee:	b922      	cbnz	r2, 153fa <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   153f0:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   153f4:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   153f8:	8018      	strh	r0, [r3, #0]
}
   153fa:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   153fc:	2101      	movs	r1, #1
   153fe:	f002 fcc7 	bl	17d90 <bt_conn_set_state>
	bt_conn_unref(conn);
   15402:	4628      	mov	r0, r5
}
   15404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   15408:	f002 bc98 	b.w	17d3c <bt_conn_unref>
   1540c:	200027d8 	.word	0x200027d8

00015410 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15410:	6883      	ldr	r3, [r0, #8]
{
   15412:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15414:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15418:	4620      	mov	r0, r4
   1541a:	f002 fcb1 	bl	17d80 <bt_conn_lookup_handle>
	if (!conn) {
   1541e:	b930      	cbnz	r0, 1542e <le_phy_update_complete+0x1e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15420:	4622      	mov	r2, r4
   15422:	4805      	ldr	r0, [pc, #20]	; (15438 <le_phy_update_complete+0x28>)
}
   15424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15428:	2145      	movs	r1, #69	; 0x45
   1542a:	f010 bbf2 	b.w	25c12 <z_log_minimal_printk>
}
   1542e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   15432:	f002 bc83 	b.w	17d3c <bt_conn_unref>
   15436:	bf00      	nop
   15438:	0002c050 	.word	0x0002c050

0001543c <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1543c:	6883      	ldr	r3, [r0, #8]
{
   1543e:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15440:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   15442:	4620      	mov	r0, r4
   15444:	f002 fc9c 	bl	17d80 <bt_conn_lookup_handle>
	if (!conn) {
   15448:	b930      	cbnz	r0, 15458 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1544a:	4622      	mov	r2, r4
   1544c:	4804      	ldr	r0, [pc, #16]	; (15460 <le_data_len_change+0x24>)
}
   1544e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15452:	2145      	movs	r1, #69	; 0x45
   15454:	f010 bbdd 	b.w	25c12 <z_log_minimal_printk>
}
   15458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1545c:	f002 bc6e 	b.w	17d3c <bt_conn_unref>
   15460:	0002c050 	.word	0x0002c050

00015464 <hci_hardware_error>:
{
   15464:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   15466:	2101      	movs	r1, #1
   15468:	3008      	adds	r0, #8
   1546a:	f009 f81f 	bl	1e4ac <net_buf_simple_pull_mem>
}
   1546e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   15472:	7802      	ldrb	r2, [r0, #0]
   15474:	4801      	ldr	r0, [pc, #4]	; (1547c <hci_hardware_error+0x18>)
   15476:	2145      	movs	r1, #69	; 0x45
   15478:	f010 bbcb 	b.w	25c12 <z_log_minimal_printk>
   1547c:	0002c079 	.word	0x0002c079

00015480 <rx_queue_put>:
{
   15480:	4601      	mov	r1, r0
   15482:	b508      	push	{r3, lr}
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   15484:	4807      	ldr	r0, [pc, #28]	; (154a4 <rx_queue_put+0x24>)
   15486:	f008 fe1d 	bl	1e0c4 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1548a:	4907      	ldr	r1, [pc, #28]	; (154a8 <rx_queue_put+0x28>)
   1548c:	4807      	ldr	r0, [pc, #28]	; (154ac <rx_queue_put+0x2c>)
   1548e:	f014 fb27 	bl	29ae0 <k_work_submit_to_queue>
	if (err < 0) {
   15492:	1e02      	subs	r2, r0, #0
   15494:	da05      	bge.n	154a2 <rx_queue_put+0x22>
}
   15496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Could not submit rx_work: %d", err);
   1549a:	4805      	ldr	r0, [pc, #20]	; (154b0 <rx_queue_put+0x30>)
   1549c:	2145      	movs	r1, #69	; 0x45
   1549e:	f010 bbb8 	b.w	25c12 <z_log_minimal_printk>
}
   154a2:	bd08      	pop	{r3, pc}
   154a4:	2000047c 	.word	0x2000047c
   154a8:	200005c8 	.word	0x200005c8
   154ac:	20001918 	.word	0x20001918
   154b0:	0002c0a0 	.word	0x0002c0a0

000154b4 <le_conn_update_complete>:
{
   154b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   154b6:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   154b8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   154bc:	4630      	mov	r0, r6
   154be:	f002 fc5f 	bl	17d80 <bt_conn_lookup_handle>
	if (!conn) {
   154c2:	4604      	mov	r4, r0
   154c4:	b938      	cbnz	r0, 154d6 <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   154c6:	4822      	ldr	r0, [pc, #136]	; (15550 <le_conn_update_complete+0x9c>)
   154c8:	4632      	mov	r2, r6
   154ca:	2145      	movs	r1, #69	; 0x45
}
   154cc:	b002      	add	sp, #8
   154ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   154d2:	f010 bb9e 	b.w	25c12 <z_log_minimal_printk>
	if (!evt->status) {
   154d6:	782b      	ldrb	r3, [r5, #0]
   154d8:	b9cb      	cbnz	r3, 1550e <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   154da:	792a      	ldrb	r2, [r5, #4]
   154dc:	78eb      	ldrb	r3, [r5, #3]
   154de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   154e2:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   154e6:	79aa      	ldrb	r2, [r5, #6]
   154e8:	796b      	ldrb	r3, [r5, #5]
   154ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   154ee:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   154f2:	79eb      	ldrb	r3, [r5, #7]
   154f4:	7a2a      	ldrb	r2, [r5, #8]
   154f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   154fa:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   154fe:	f002 fd8f 	bl	18020 <notify_le_param_updated>
	bt_conn_unref(conn);
   15502:	4620      	mov	r0, r4
}
   15504:	b002      	add	sp, #8
   15506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1550a:	f002 bc17 	b.w	17d3c <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1550e:	2b1a      	cmp	r3, #26
   15510:	d1f7      	bne.n	15502 <le_conn_update_complete+0x4e>
   15512:	78c3      	ldrb	r3, [r0, #3]
   15514:	2b01      	cmp	r3, #1
   15516:	d1f4      	bne.n	15502 <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15518:	f44f 7100 	mov.w	r1, #512	; 0x200
   1551c:	3004      	adds	r0, #4
   1551e:	f011 fc31 	bl	26d84 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   15522:	0583      	lsls	r3, r0, #22
   15524:	d4ed      	bmi.n	15502 <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
   15526:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   1552a:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   1552e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   15532:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   15536:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
   1553a:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1553e:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   15540:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
   15544:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   15548:	4620      	mov	r0, r4
   1554a:	f003 fb2f 	bl	18bac <bt_l2cap_update_conn_param>
   1554e:	e7d8      	b.n	15502 <le_conn_update_complete+0x4e>
   15550:	0002c050 	.word	0x0002c050

00015554 <handle_event>:
{
   15554:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15556:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1555a:	4605      	mov	r5, r0
   1555c:	4614      	mov	r4, r2
   1555e:	4608      	mov	r0, r1
		if (handler->event != event) {
   15560:	7822      	ldrb	r2, [r4, #0]
   15562:	42aa      	cmp	r2, r5
   15564:	d010      	beq.n	15588 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
   15566:	3408      	adds	r4, #8
   15568:	429c      	cmp	r4, r3
   1556a:	d1f9      	bne.n	15560 <handle_event+0xc>
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1556c:	8984      	ldrh	r4, [r0, #12]
   1556e:	6880      	ldr	r0, [r0, #8]
   15570:	4621      	mov	r1, r4
   15572:	f7ff fc5d 	bl	14e30 <bt_hex_real>
   15576:	4623      	mov	r3, r4
   15578:	9000      	str	r0, [sp, #0]
   1557a:	462a      	mov	r2, r5
   1557c:	480b      	ldr	r0, [pc, #44]	; (155ac <handle_event+0x58>)
   1557e:	2157      	movs	r1, #87	; 0x57
   15580:	f010 fb47 	bl	25c12 <z_log_minimal_printk>
}
   15584:	b003      	add	sp, #12
   15586:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
   15588:	8982      	ldrh	r2, [r0, #12]
   1558a:	7863      	ldrb	r3, [r4, #1]
   1558c:	4293      	cmp	r3, r2
   1558e:	d907      	bls.n	155a0 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   15590:	4807      	ldr	r0, [pc, #28]	; (155b0 <handle_event+0x5c>)
   15592:	462b      	mov	r3, r5
   15594:	2145      	movs	r1, #69	; 0x45
}
   15596:	b003      	add	sp, #12
   15598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1559c:	f010 bb39 	b.w	25c12 <z_log_minimal_printk>
		handler->handler(buf);
   155a0:	6863      	ldr	r3, [r4, #4]
}
   155a2:	b003      	add	sp, #12
   155a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   155a8:	4718      	bx	r3
   155aa:	bf00      	nop
   155ac:	0002c0e9 	.word	0x0002c0e9
   155b0:	0002c0c2 	.word	0x0002c0c2

000155b4 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   155b4:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   155b6:	4844      	ldr	r0, [pc, #272]	; (156c8 <rx_work_handler+0x114>)
   155b8:	f008 fde2 	bl	1e180 <net_buf_slist_get>
	if (!buf) {
   155bc:	4604      	mov	r4, r0
   155be:	2800      	cmp	r0, #0
   155c0:	f000 8081 	beq.w	156c6 <rx_work_handler+0x112>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   155c4:	7d02      	ldrb	r2, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   155c6:	2a01      	cmp	r2, #1
   155c8:	d04d      	beq.n	15666 <rx_work_handler+0xb2>
   155ca:	2a03      	cmp	r2, #3
   155cc:	d178      	bne.n	156c0 <rx_work_handler+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   155ce:	8983      	ldrh	r3, [r0, #12]
   155d0:	2b03      	cmp	r3, #3
   155d2:	d80b      	bhi.n	155ec <rx_work_handler+0x38>
   155d4:	493d      	ldr	r1, [pc, #244]	; (156cc <rx_work_handler+0x118>)
   155d6:	483e      	ldr	r0, [pc, #248]	; (156d0 <rx_work_handler+0x11c>)
   155d8:	f240 12eb 	movw	r2, #491	; 0x1eb
   155dc:	f010 fb0b 	bl	25bf6 <assert_print>
   155e0:	4040      	eors	r0, r0
   155e2:	f380 8811 	msr	BASEPRI, r0
   155e6:	f04f 0003 	mov.w	r0, #3
   155ea:	df02      	svc	2
   155ec:	2104      	movs	r1, #4
   155ee:	f104 0008 	add.w	r0, r4, #8
   155f2:	f008 ff5b 	bl	1e4ac <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   155f6:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   155f8:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   155fa:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   155fc:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   155fe:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   15600:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   15604:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   15606:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   15608:	d007      	beq.n	1561a <rx_work_handler+0x66>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1560a:	4832      	ldr	r0, [pc, #200]	; (156d4 <rx_work_handler+0x120>)
   1560c:	2145      	movs	r1, #69	; 0x45
   1560e:	f010 fb00 	bl	25c12 <z_log_minimal_printk>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   15612:	4620      	mov	r0, r4
   15614:	f008 fe52 	bl	1e2bc <net_buf_unref>
		break;
   15618:	e014      	b.n	15644 <rx_work_handler+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1561a:	f002 fbb1 	bl	17d80 <bt_conn_lookup_handle>
	if (!conn) {
   1561e:	4605      	mov	r5, r0
   15620:	b928      	cbnz	r0, 1562e <rx_work_handler+0x7a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   15622:	8ae2      	ldrh	r2, [r4, #22]
   15624:	482c      	ldr	r0, [pc, #176]	; (156d8 <rx_work_handler+0x124>)
   15626:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15628:	f010 faf3 	bl	25c12 <z_log_minimal_printk>
   1562c:	e7f1      	b.n	15612 <rx_work_handler+0x5e>
	acl(buf)->index = bt_conn_index(conn);
   1562e:	f002 fca9 	bl	17f84 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   15632:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   15634:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   15636:	4621      	mov	r1, r4
   15638:	4628      	mov	r0, r5
   1563a:	f002 fa87 	bl	17b4c <bt_conn_recv>
	bt_conn_unref(conn);
   1563e:	4628      	mov	r0, r5
   15640:	f002 fb7c 	bl	17d3c <bt_conn_unref>
	return list->head;
   15644:	4b25      	ldr	r3, [pc, #148]	; (156dc <rx_work_handler+0x128>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   15646:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1564a:	2b00      	cmp	r3, #0
   1564c:	d03b      	beq.n	156c6 <rx_work_handler+0x112>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1564e:	4924      	ldr	r1, [pc, #144]	; (156e0 <rx_work_handler+0x12c>)
   15650:	4824      	ldr	r0, [pc, #144]	; (156e4 <rx_work_handler+0x130>)
   15652:	f014 fa45 	bl	29ae0 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   15656:	1e02      	subs	r2, r0, #0
   15658:	da35      	bge.n	156c6 <rx_work_handler+0x112>
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   1565a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Could not submit rx_work: %d", err);
   1565e:	4822      	ldr	r0, [pc, #136]	; (156e8 <rx_work_handler+0x134>)
   15660:	2145      	movs	r1, #69	; 0x45
   15662:	f010 bad6 	b.w	25c12 <z_log_minimal_printk>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15666:	8983      	ldrh	r3, [r0, #12]
   15668:	2b01      	cmp	r3, #1
   1566a:	d80b      	bhi.n	15684 <rx_work_handler+0xd0>
   1566c:	4917      	ldr	r1, [pc, #92]	; (156cc <rx_work_handler+0x118>)
   1566e:	4818      	ldr	r0, [pc, #96]	; (156d0 <rx_work_handler+0x11c>)
   15670:	f640 1259 	movw	r2, #2393	; 0x959
   15674:	f010 fabf 	bl	25bf6 <assert_print>
   15678:	4040      	eors	r0, r0
   1567a:	f380 8811 	msr	BASEPRI, r0
   1567e:	f04f 0003 	mov.w	r0, #3
   15682:	df02      	svc	2
   15684:	2102      	movs	r1, #2
   15686:	f104 0008 	add.w	r0, r4, #8
   1568a:	f008 ff0f 	bl	1e4ac <net_buf_simple_pull_mem>
   1568e:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15690:	7800      	ldrb	r0, [r0, #0]
   15692:	f011 fb49 	bl	26d28 <bt_hci_evt_get_flags>
   15696:	0783      	lsls	r3, r0, #30
   15698:	d40b      	bmi.n	156b2 <rx_work_handler+0xfe>
   1569a:	490c      	ldr	r1, [pc, #48]	; (156cc <rx_work_handler+0x118>)
   1569c:	480c      	ldr	r0, [pc, #48]	; (156d0 <rx_work_handler+0x11c>)
   1569e:	f640 125d 	movw	r2, #2397	; 0x95d
   156a2:	f010 faa8 	bl	25bf6 <assert_print>
   156a6:	4040      	eors	r0, r0
   156a8:	f380 8811 	msr	BASEPRI, r0
   156ac:	f04f 0003 	mov.w	r0, #3
   156b0:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   156b2:	4a0e      	ldr	r2, [pc, #56]	; (156ec <rx_work_handler+0x138>)
   156b4:	7828      	ldrb	r0, [r5, #0]
   156b6:	2306      	movs	r3, #6
   156b8:	4621      	mov	r1, r4
   156ba:	f7ff ff4b 	bl	15554 <handle_event>
	net_buf_unref(buf);
   156be:	e7a8      	b.n	15612 <rx_work_handler+0x5e>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   156c0:	480b      	ldr	r0, [pc, #44]	; (156f0 <rx_work_handler+0x13c>)
   156c2:	2145      	movs	r1, #69	; 0x45
   156c4:	e7b0      	b.n	15628 <rx_work_handler+0x74>
}
   156c6:	bd70      	pop	{r4, r5, r6, pc}
   156c8:	2000047c 	.word	0x2000047c
   156cc:	0002c110 	.word	0x0002c110
   156d0:	0002ab8c 	.word	0x0002ab8c
   156d4:	0002c144 	.word	0x0002c144
   156d8:	0002c16d 	.word	0x0002c16d
   156dc:	20000340 	.word	0x20000340
   156e0:	200005c8 	.word	0x200005c8
   156e4:	20001918 	.word	0x20001918
   156e8:	0002c0a0 	.word	0x0002c0a0
   156ec:	0002a470 	.word	0x0002a470
   156f0:	0002c194 	.word	0x0002c194

000156f4 <hci_le_meta_event>:
{
   156f4:	b510      	push	{r4, lr}
   156f6:	2101      	movs	r1, #1
   156f8:	4604      	mov	r4, r0
   156fa:	3008      	adds	r0, #8
   156fc:	f008 fed6 	bl	1e4ac <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15700:	4621      	mov	r1, r4
   15702:	4a03      	ldr	r2, [pc, #12]	; (15710 <hci_le_meta_event+0x1c>)
   15704:	7800      	ldrb	r0, [r0, #0]
}
   15706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1570a:	230b      	movs	r3, #11
   1570c:	f7ff bf22 	b.w	15554 <handle_event>
   15710:	0002a3f8 	.word	0x0002a3f8

00015714 <le_remote_feat_complete>:
{
   15714:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   15716:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15718:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1571c:	4630      	mov	r0, r6
   1571e:	f002 fb2f 	bl	17d80 <bt_conn_lookup_handle>
	if (!conn) {
   15722:	4604      	mov	r4, r0
   15724:	b930      	cbnz	r0, 15734 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15726:	4632      	mov	r2, r6
   15728:	480b      	ldr	r0, [pc, #44]	; (15758 <le_remote_feat_complete+0x44>)
}
   1572a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1572e:	2145      	movs	r1, #69	; 0x45
   15730:	f010 ba6f 	b.w	25c12 <z_log_minimal_printk>
	if (!evt->status) {
   15734:	782b      	ldrb	r3, [r5, #0]
   15736:	b923      	cbnz	r3, 15742 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
   15738:	2208      	movs	r2, #8
   1573a:	1ce9      	adds	r1, r5, #3
   1573c:	30b4      	adds	r0, #180	; 0xb4
   1573e:	f011 fa08 	bl	26b52 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15742:	1d20      	adds	r0, r4, #4
   15744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   15748:	f011 fb1c 	bl	26d84 <atomic_or>
	bt_conn_unref(conn);
   1574c:	4620      	mov	r0, r4
}
   1574e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15752:	f002 baf3 	b.w	17d3c <bt_conn_unref>
   15756:	bf00      	nop
   15758:	0002c050 	.word	0x0002c050

0001575c <hci_cmd_done>:
{
   1575c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15760:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15762:	7990      	ldrb	r0, [r2, #6]
   15764:	4d39      	ldr	r5, [pc, #228]	; (1584c <hci_cmd_done+0xf0>)
{
   15766:	460f      	mov	r7, r1
   15768:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1576a:	f008 fb15 	bl	1dd98 <net_buf_pool_get>
   1576e:	4285      	cmp	r5, r0
   15770:	d00e      	beq.n	15790 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   15772:	79a4      	ldrb	r4, [r4, #6]
   15774:	4620      	mov	r0, r4
   15776:	f008 fb0f 	bl	1dd98 <net_buf_pool_get>
   1577a:	4623      	mov	r3, r4
   1577c:	e9cd 0500 	strd	r0, r5, [sp]
   15780:	4632      	mov	r2, r6
   15782:	4833      	ldr	r0, [pc, #204]	; (15850 <hci_cmd_done+0xf4>)
   15784:	2157      	movs	r1, #87	; 0x57
   15786:	f010 fa44 	bl	25c12 <z_log_minimal_printk>
}
   1578a:	b002      	add	sp, #8
   1578c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   15790:	4620      	mov	r0, r4
   15792:	f008 fb09 	bl	1dda8 <net_buf_id>
   15796:	4d2f      	ldr	r5, [pc, #188]	; (15854 <hci_cmd_done+0xf8>)
   15798:	f04f 080c 	mov.w	r8, #12
   1579c:	fb08 5000 	mla	r0, r8, r0, r5
   157a0:	8843      	ldrh	r3, [r0, #2]
   157a2:	42b3      	cmp	r3, r6
   157a4:	d00d      	beq.n	157c2 <hci_cmd_done+0x66>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   157a6:	4620      	mov	r0, r4
   157a8:	f008 fafe 	bl	1dda8 <net_buf_id>
   157ac:	fb08 5500 	mla	r5, r8, r0, r5
   157b0:	4829      	ldr	r0, [pc, #164]	; (15858 <hci_cmd_done+0xfc>)
   157b2:	886b      	ldrh	r3, [r5, #2]
   157b4:	4632      	mov	r2, r6
   157b6:	2157      	movs	r1, #87	; 0x57
}
   157b8:	b002      	add	sp, #8
   157ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   157be:	f010 ba28 	b.w	25c12 <z_log_minimal_printk>
	if (bt_dev.sent_cmd) {
   157c2:	4e26      	ldr	r6, [pc, #152]	; (1585c <hci_cmd_done+0x100>)
   157c4:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   157c8:	b120      	cbz	r0, 157d4 <hci_cmd_done+0x78>
		net_buf_unref(bt_dev.sent_cmd);
   157ca:	f008 fd77 	bl	1e2bc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   157ce:	2300      	movs	r3, #0
   157d0:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   157d4:	4620      	mov	r0, r4
   157d6:	f008 fae7 	bl	1dda8 <net_buf_id>
   157da:	260c      	movs	r6, #12
   157dc:	fb06 5000 	mla	r0, r6, r0, r5
   157e0:	6843      	ldr	r3, [r0, #4]
   157e2:	b19b      	cbz	r3, 1580c <hci_cmd_done+0xb0>
   157e4:	b997      	cbnz	r7, 1580c <hci_cmd_done+0xb0>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   157e6:	4620      	mov	r0, r4
   157e8:	f008 fade 	bl	1dda8 <net_buf_id>
   157ec:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   157f0:	2101      	movs	r1, #1
   157f2:	6842      	ldr	r2, [r0, #4]
   157f4:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   157f8:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   157fa:	f003 061f 	and.w	r6, r3, #31
   157fe:	40b1      	lsls	r1, r6
	if (val) {
   15800:	095b      	lsrs	r3, r3, #5
   15802:	b1e2      	cbz	r2, 1583e <hci_cmd_done+0xe2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15804:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15808:	f011 fabc 	bl	26d84 <atomic_or>
	if (cmd(buf)->sync) {
   1580c:	4620      	mov	r0, r4
   1580e:	f008 facb 	bl	1dda8 <net_buf_id>
   15812:	260c      	movs	r6, #12
   15814:	fb06 5000 	mla	r0, r6, r0, r5
   15818:	6883      	ldr	r3, [r0, #8]
   1581a:	2b00      	cmp	r3, #0
   1581c:	d0b5      	beq.n	1578a <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
   1581e:	4620      	mov	r0, r4
   15820:	f008 fac2 	bl	1dda8 <net_buf_id>
   15824:	4370      	muls	r0, r6
   15826:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   15828:	4620      	mov	r0, r4
   1582a:	f008 fabd 	bl	1dda8 <net_buf_id>
   1582e:	fb06 5500 	mla	r5, r6, r0, r5
   15832:	68a8      	ldr	r0, [r5, #8]
}
   15834:	b002      	add	sp, #8
   15836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   1583a:	f00c bfcd 	b.w	227d8 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1583e:	43c9      	mvns	r1, r1
   15840:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15844:	f011 faad 	bl	26da2 <atomic_and.isra.0>
   15848:	e7e0      	b.n	1580c <hci_cmd_done+0xb0>
   1584a:	bf00      	nop
   1584c:	2000095c 	.word	0x2000095c
   15850:	0002c1ad 	.word	0x0002c1ad
   15854:	200022fc 	.word	0x200022fc
   15858:	0002c1e7 	.word	0x0002c1e7
   1585c:	20000340 	.word	0x20000340

00015860 <hci_cmd_status>:
{
   15860:	b538      	push	{r3, r4, r5, lr}
   15862:	2104      	movs	r1, #4
   15864:	4604      	mov	r4, r0
   15866:	3008      	adds	r0, #8
   15868:	f008 fe20 	bl	1e4ac <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   1586c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1586e:	7801      	ldrb	r1, [r0, #0]
   15870:	8840      	ldrh	r0, [r0, #2]
   15872:	4622      	mov	r2, r4
   15874:	f7ff ff72 	bl	1575c <hci_cmd_done>
	if (ncmd) {
   15878:	b125      	cbz	r5, 15884 <hci_cmd_status+0x24>
   1587a:	4803      	ldr	r0, [pc, #12]	; (15888 <hci_cmd_status+0x28>)
}
   1587c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15880:	f00c bfaa 	b.w	227d8 <z_impl_k_sem_give>
   15884:	bd38      	pop	{r3, r4, r5, pc}
   15886:	bf00      	nop
   15888:	20000460 	.word	0x20000460

0001588c <hci_cmd_complete>:
{
   1588c:	b538      	push	{r3, r4, r5, lr}
   1588e:	2103      	movs	r1, #3
   15890:	4604      	mov	r4, r0
   15892:	3008      	adds	r0, #8
   15894:	f008 fe0a 	bl	1e4ac <net_buf_simple_pull_mem>
	status = buf->data[0];
   15898:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   1589a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   1589c:	7819      	ldrb	r1, [r3, #0]
   1589e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   158a2:	4622      	mov	r2, r4
   158a4:	f7ff ff5a 	bl	1575c <hci_cmd_done>
	if (ncmd) {
   158a8:	b125      	cbz	r5, 158b4 <hci_cmd_complete+0x28>
   158aa:	4803      	ldr	r0, [pc, #12]	; (158b8 <hci_cmd_complete+0x2c>)
}
   158ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   158b0:	f00c bf92 	b.w	227d8 <z_impl_k_sem_give>
   158b4:	bd38      	pop	{r3, r4, r5, pc}
   158b6:	bf00      	nop
   158b8:	20000460 	.word	0x20000460

000158bc <hci_num_completed_packets>:
{
   158bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   158c0:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   158c2:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
   158c4:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 15994 <hci_num_completed_packets+0xd8>
			tx->pending_no_cb = 0U;
   158c8:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   158ca:	783b      	ldrb	r3, [r7, #0]
   158cc:	429d      	cmp	r5, r3
   158ce:	db01      	blt.n	158d4 <hci_num_completed_packets+0x18>
}
   158d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   158d4:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   158d8:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   158dc:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   158e0:	4650      	mov	r0, sl
   158e2:	f002 fa4d 	bl	17d80 <bt_conn_lookup_handle>
		if (!conn) {
   158e6:	4604      	mov	r4, r0
   158e8:	b1d0      	cbz	r0, 15920 <hci_num_completed_packets+0x64>
			k_work_submit(&conn->tx_complete_work);
   158ea:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   158ee:	b37e      	cbz	r6, 15950 <hci_num_completed_packets+0x94>
	__asm__ volatile(
   158f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   158f4:	f3ef 8211 	mrs	r2, BASEPRI
   158f8:	f383 8812 	msr	BASEPRI_MAX, r3
   158fc:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   15900:	69e3      	ldr	r3, [r4, #28]
   15902:	b1a3      	cbz	r3, 1592e <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
   15904:	3b01      	subs	r3, #1
   15906:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15908:	f382 8811 	msr	BASEPRI, r2
   1590c:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   15910:	4620      	mov	r0, r4
   15912:	f002 f8a1 	bl	17a58 <bt_conn_get_pkts>
   15916:	3e01      	subs	r6, #1
   15918:	f00c ff5e 	bl	227d8 <z_impl_k_sem_give>
   1591c:	b2b6      	uxth	r6, r6
   1591e:	e7e6      	b.n	158ee <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
   15920:	481d      	ldr	r0, [pc, #116]	; (15998 <hci_num_completed_packets+0xdc>)
   15922:	4652      	mov	r2, sl
   15924:	2145      	movs	r1, #69	; 0x45
   15926:	f010 f974 	bl	25c12 <z_log_minimal_printk>
	for (i = 0; i < evt->num_handles; i++) {
   1592a:	3501      	adds	r5, #1
   1592c:	e7cd      	b.n	158ca <hci_num_completed_packets+0xe>
   1592e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   15930:	b12b      	cbz	r3, 1593e <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15932:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   15934:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   15936:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15938:	428b      	cmp	r3, r1
	list->tail = node;
   1593a:	bf08      	it	eq
   1593c:	61a0      	streq	r0, [r4, #24]
   1593e:	f382 8811 	msr	BASEPRI, r2
   15942:	f3bf 8f6f 	isb	sy
			if (!node) {
   15946:	b93b      	cbnz	r3, 15958 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
   15948:	2145      	movs	r1, #69	; 0x45
   1594a:	4648      	mov	r0, r9
   1594c:	f010 f961 	bl	25c12 <z_log_minimal_printk>
		bt_conn_unref(conn);
   15950:	4620      	mov	r0, r4
   15952:	f002 f9f3 	bl	17d3c <bt_conn_unref>
   15956:	e7e8      	b.n	1592a <hci_num_completed_packets+0x6e>
	__asm__ volatile(
   15958:	f04f 0240 	mov.w	r2, #64	; 0x40
   1595c:	f3ef 8111 	mrs	r1, BASEPRI
   15960:	f382 8812 	msr	BASEPRI_MAX, r2
   15964:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   15968:	68da      	ldr	r2, [r3, #12]
   1596a:	61e2      	str	r2, [r4, #28]
	return list->tail;
   1596c:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1596e:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   15972:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   15976:	b94a      	cbnz	r2, 1598c <hci_num_completed_packets+0xd0>
	list->head = node;
   15978:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1597c:	f381 8811 	msr	BASEPRI, r1
   15980:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   15984:	4650      	mov	r0, sl
   15986:	f00d fa69 	bl	22e5c <k_work_submit>
   1598a:	e7c1      	b.n	15910 <hci_num_completed_packets+0x54>
	parent->next = child;
   1598c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1598e:	6263      	str	r3, [r4, #36]	; 0x24
}
   15990:	e7f4      	b.n	1597c <hci_num_completed_packets+0xc0>
   15992:	bf00      	nop
   15994:	0002c240 	.word	0x0002c240
   15998:	0002c21f 	.word	0x0002c21f

0001599c <hci_disconn_complete>:
{
   1599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1599e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   159a0:	7835      	ldrb	r5, [r6, #0]
   159a2:	bb4d      	cbnz	r5, 159f8 <hci_disconn_complete+0x5c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   159a4:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   159a8:	4638      	mov	r0, r7
   159aa:	f002 f9e9 	bl	17d80 <bt_conn_lookup_handle>
	if (!conn) {
   159ae:	4604      	mov	r4, r0
   159b0:	b930      	cbnz	r0, 159c0 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
   159b2:	463a      	mov	r2, r7
   159b4:	4811      	ldr	r0, [pc, #68]	; (159fc <hci_disconn_complete+0x60>)
}
   159b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   159ba:	2145      	movs	r1, #69	; 0x45
   159bc:	f010 b929 	b.w	25c12 <z_log_minimal_printk>
	conn->err = evt->reason;
   159c0:	78f3      	ldrb	r3, [r6, #3]
   159c2:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   159c4:	4629      	mov	r1, r5
   159c6:	f002 f9e3 	bl	17d90 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   159ca:	78a3      	ldrb	r3, [r4, #2]
   159cc:	2b01      	cmp	r3, #1
   159ce:	d004      	beq.n	159da <hci_disconn_complete+0x3e>
	bt_conn_unref(conn);
   159d0:	4620      	mov	r0, r4
}
   159d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   159d6:	f002 b9b1 	b.w	17d3c <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   159da:	f3bf 8f5b 	dmb	ish
   159de:	6863      	ldr	r3, [r4, #4]
   159e0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   159e4:	07db      	lsls	r3, r3, #31
   159e6:	d5f3      	bpl.n	159d0 <hci_disconn_complete+0x34>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   159e8:	4620      	mov	r0, r4
   159ea:	2102      	movs	r1, #2
   159ec:	f002 f9d0 	bl	17d90 <bt_conn_set_state>
		bt_le_scan_update(false);
   159f0:	4628      	mov	r0, r5
   159f2:	f001 fc0b 	bl	1720c <bt_le_scan_update>
   159f6:	e7eb      	b.n	159d0 <hci_disconn_complete+0x34>
}
   159f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   159fa:	bf00      	nop
   159fc:	0002c25c 	.word	0x0002c25c

00015a00 <bt_hci_cmd_state_set_init>:
{
   15a00:	b510      	push	{r4, lr}
	state->bit = bit;
   15a02:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   15a06:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15a0a:	720b      	strb	r3, [r1, #8]
{
   15a0c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   15a0e:	f008 f9cb 	bl	1dda8 <net_buf_id>
   15a12:	4b03      	ldr	r3, [pc, #12]	; (15a20 <bt_hci_cmd_state_set_init+0x20>)
   15a14:	220c      	movs	r2, #12
   15a16:	fb02 3300 	mla	r3, r2, r0, r3
   15a1a:	605c      	str	r4, [r3, #4]
}
   15a1c:	bd10      	pop	{r4, pc}
   15a1e:	bf00      	nop
   15a20:	200022fc 	.word	0x200022fc

00015a24 <bt_hci_cmd_create>:
{
   15a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   15a28:	f04f 32ff 	mov.w	r2, #4294967295
   15a2c:	4606      	mov	r6, r0
   15a2e:	f04f 33ff 	mov.w	r3, #4294967295
   15a32:	481c      	ldr	r0, [pc, #112]	; (15aa4 <bt_hci_cmd_create+0x80>)
   15a34:	460f      	mov	r7, r1
   15a36:	f013 fb30 	bl	2909a <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   15a3a:	4604      	mov	r4, r0
   15a3c:	b940      	cbnz	r0, 15a50 <bt_hci_cmd_create+0x2c>
   15a3e:	491a      	ldr	r1, [pc, #104]	; (15aa8 <bt_hci_cmd_create+0x84>)
   15a40:	481a      	ldr	r0, [pc, #104]	; (15aac <bt_hci_cmd_create+0x88>)
   15a42:	22ff      	movs	r2, #255	; 0xff
   15a44:	f010 f8d7 	bl	25bf6 <assert_print>
   15a48:	4817      	ldr	r0, [pc, #92]	; (15aa8 <bt_hci_cmd_create+0x84>)
   15a4a:	21ff      	movs	r1, #255	; 0xff
   15a4c:	f010 f8cc 	bl	25be8 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   15a50:	f104 0a08 	add.w	sl, r4, #8
   15a54:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15a56:	f04f 0800 	mov.w	r8, #0
   15a5a:	4650      	mov	r0, sl
   15a5c:	f008 fb0e 	bl	1e07c <net_buf_simple_reserve>
   15a60:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   15a64:	4620      	mov	r0, r4
   15a66:	f008 f99f 	bl	1dda8 <net_buf_id>
   15a6a:	4d11      	ldr	r5, [pc, #68]	; (15ab0 <bt_hci_cmd_create+0x8c>)
   15a6c:	f04f 090c 	mov.w	r9, #12
   15a70:	fb09 5000 	mla	r0, r9, r0, r5
   15a74:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   15a76:	4620      	mov	r0, r4
   15a78:	f008 f996 	bl	1dda8 <net_buf_id>
   15a7c:	fb09 5000 	mla	r0, r9, r0, r5
   15a80:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   15a84:	4620      	mov	r0, r4
   15a86:	f008 f98f 	bl	1dda8 <net_buf_id>
   15a8a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   15a8e:	2103      	movs	r1, #3
   15a90:	f8c5 8004 	str.w	r8, [r5, #4]
   15a94:	4650      	mov	r0, sl
   15a96:	f008 fd27 	bl	1e4e8 <net_buf_simple_add>
	hdr->param_len = param_len;
   15a9a:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   15a9c:	8006      	strh	r6, [r0, #0]
}
   15a9e:	4620      	mov	r0, r4
   15aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15aa4:	2000095c 	.word	0x2000095c
   15aa8:	0002c110 	.word	0x0002c110
   15aac:	0002ab8c 	.word	0x0002ab8c
   15ab0:	200022fc 	.word	0x200022fc

00015ab4 <bt_hci_cmd_send_sync>:
{
   15ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ab6:	4607      	mov	r7, r0
   15ab8:	b087      	sub	sp, #28
   15aba:	4615      	mov	r5, r2
	if (!buf) {
   15abc:	460c      	mov	r4, r1
   15abe:	b921      	cbnz	r1, 15aca <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
   15ac0:	f7ff ffb0 	bl	15a24 <bt_hci_cmd_create>
		if (!buf) {
   15ac4:	4604      	mov	r4, r0
   15ac6:	2800      	cmp	r0, #0
   15ac8:	d048      	beq.n	15b5c <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   15aca:	2201      	movs	r2, #1
   15acc:	2100      	movs	r1, #0
   15ace:	4668      	mov	r0, sp
   15ad0:	f013 ffa5 	bl	29a1e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   15ad4:	4620      	mov	r0, r4
   15ad6:	f008 f967 	bl	1dda8 <net_buf_id>
   15ada:	4e22      	ldr	r6, [pc, #136]	; (15b64 <bt_hci_cmd_send_sync+0xb0>)
   15adc:	230c      	movs	r3, #12
   15ade:	fb03 6000 	mla	r0, r3, r0, r6
   15ae2:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   15ae6:	4620      	mov	r0, r4
   15ae8:	f008 fc2c 	bl	1e344 <net_buf_ref>
   15aec:	4601      	mov	r1, r0
   15aee:	481e      	ldr	r0, [pc, #120]	; (15b68 <bt_hci_cmd_send_sync+0xb4>)
   15af0:	f008 fbb6 	bl	1e260 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   15af4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   15af8:	2300      	movs	r3, #0
   15afa:	4668      	mov	r0, sp
   15afc:	f00c fea6 	bl	2284c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   15b00:	b158      	cbz	r0, 15b1a <bt_hci_cmd_send_sync+0x66>
   15b02:	491a      	ldr	r1, [pc, #104]	; (15b6c <bt_hci_cmd_send_sync+0xb8>)
   15b04:	481a      	ldr	r0, [pc, #104]	; (15b70 <bt_hci_cmd_send_sync+0xbc>)
   15b06:	f240 1247 	movw	r2, #327	; 0x147
   15b0a:	f010 f874 	bl	25bf6 <assert_print>
   15b0e:	4040      	eors	r0, r0
   15b10:	f380 8811 	msr	BASEPRI, r0
   15b14:	f04f 0003 	mov.w	r0, #3
   15b18:	df02      	svc	2
	status = cmd(buf)->status;
   15b1a:	4620      	mov	r0, r4
   15b1c:	f008 f944 	bl	1dda8 <net_buf_id>
   15b20:	230c      	movs	r3, #12
   15b22:	4358      	muls	r0, r3
   15b24:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   15b26:	b186      	cbz	r6, 15b4a <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   15b28:	4812      	ldr	r0, [pc, #72]	; (15b74 <bt_hci_cmd_send_sync+0xc0>)
   15b2a:	4633      	mov	r3, r6
   15b2c:	463a      	mov	r2, r7
   15b2e:	2157      	movs	r1, #87	; 0x57
   15b30:	f010 f86f 	bl	25c12 <z_log_minimal_printk>
		net_buf_unref(buf);
   15b34:	4620      	mov	r0, r4
   15b36:	f008 fbc1 	bl	1e2bc <net_buf_unref>
			return -EIO;
   15b3a:	2e09      	cmp	r6, #9
   15b3c:	bf0c      	ite	eq
   15b3e:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   15b42:	f06f 0004 	mvnne.w	r0, #4
}
   15b46:	b007      	add	sp, #28
   15b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   15b4a:	b115      	cbz	r5, 15b52 <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
   15b4c:	602c      	str	r4, [r5, #0]
	return 0;
   15b4e:	4630      	mov	r0, r6
   15b50:	e7f9      	b.n	15b46 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
   15b52:	4620      	mov	r0, r4
   15b54:	f008 fbb2 	bl	1e2bc <net_buf_unref>
	return 0;
   15b58:	4628      	mov	r0, r5
   15b5a:	e7f4      	b.n	15b46 <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
   15b5c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15b60:	e7f1      	b.n	15b46 <bt_hci_cmd_send_sync+0x92>
   15b62:	bf00      	nop
   15b64:	200022fc 	.word	0x200022fc
   15b68:	20000484 	.word	0x20000484
   15b6c:	0002c110 	.word	0x0002c110
   15b70:	0002ab8c 	.word	0x0002ab8c
   15b74:	0002c287 	.word	0x0002c287

00015b78 <hci_le_read_max_data_len>:
{
   15b78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15b7a:	4606      	mov	r6, r0
   15b7c:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   15b7e:	aa01      	add	r2, sp, #4
   15b80:	2100      	movs	r1, #0
   15b82:	f242 002f 	movw	r0, #8239	; 0x202f
   15b86:	f7ff ff95 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   15b8a:	4604      	mov	r4, r0
   15b8c:	b130      	cbz	r0, 15b9c <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
   15b8e:	4809      	ldr	r0, [pc, #36]	; (15bb4 <hci_le_read_max_data_len+0x3c>)
   15b90:	2145      	movs	r1, #69	; 0x45
   15b92:	f010 f83e 	bl	25c12 <z_log_minimal_printk>
}
   15b96:	4620      	mov	r0, r4
   15b98:	b002      	add	sp, #8
   15b9a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   15b9c:	9801      	ldr	r0, [sp, #4]
   15b9e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   15ba0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15ba4:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   15ba6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   15baa:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   15bac:	f008 fb86 	bl	1e2bc <net_buf_unref>
	return 0;
   15bb0:	e7f1      	b.n	15b96 <hci_le_read_max_data_len+0x1e>
   15bb2:	bf00      	nop
   15bb4:	0002c2a8 	.word	0x0002c2a8

00015bb8 <bt_hci_le_rand>:
{
   15bb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   15bba:	4b14      	ldr	r3, [pc, #80]	; (15c0c <bt_hci_le_rand+0x54>)
   15bbc:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   15bc0:	2b00      	cmp	r3, #0
{
   15bc2:	4605      	mov	r5, r0
   15bc4:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   15bc6:	da1d      	bge.n	15c04 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   15bc8:	b914      	cbnz	r4, 15bd0 <bt_hci_le_rand+0x18>
	return 0;
   15bca:	4620      	mov	r0, r4
}
   15bcc:	b002      	add	sp, #8
   15bce:	bd70      	pop	{r4, r5, r6, pc}
		count = MIN(len, sizeof(rp->rand));
   15bd0:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   15bd2:	aa01      	add	r2, sp, #4
   15bd4:	f04f 0100 	mov.w	r1, #0
   15bd8:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   15bdc:	4626      	mov	r6, r4
   15bde:	bf28      	it	cs
   15be0:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   15be2:	f7ff ff67 	bl	15ab4 <bt_hci_cmd_send_sync>
		if (err) {
   15be6:	2800      	cmp	r0, #0
   15be8:	d1f0      	bne.n	15bcc <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   15bea:	9b01      	ldr	r3, [sp, #4]
		memcpy(buffer, rp->rand, count);
   15bec:	6899      	ldr	r1, [r3, #8]
   15bee:	4632      	mov	r2, r6
   15bf0:	3101      	adds	r1, #1
   15bf2:	4628      	mov	r0, r5
   15bf4:	f010 ffad 	bl	26b52 <memcpy>
		net_buf_unref(rsp);
   15bf8:	9801      	ldr	r0, [sp, #4]
   15bfa:	f008 fb5f 	bl	1e2bc <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   15bfe:	4435      	add	r5, r6
		len -= count;
   15c00:	1ba4      	subs	r4, r4, r6
   15c02:	e7e1      	b.n	15bc8 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   15c04:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15c08:	e7e0      	b.n	15bcc <bt_hci_le_rand+0x14>
   15c0a:	bf00      	nop
   15c0c:	20000340 	.word	0x20000340

00015c10 <bt_le_create_conn>:
{
   15c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c14:	b086      	sub	sp, #24
   15c16:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   15c18:	f10d 010b 	add.w	r1, sp, #11
   15c1c:	2000      	movs	r0, #0
   15c1e:	f001 fa19 	bl	17054 <bt_id_set_create_conn_own_addr>
	if (err) {
   15c22:	4604      	mov	r4, r0
   15c24:	2800      	cmp	r0, #0
   15c26:	d14b      	bne.n	15cc0 <bt_le_create_conn+0xb0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   15c28:	2119      	movs	r1, #25
   15c2a:	f242 000d 	movw	r0, #8205	; 0x200d
   15c2e:	f7ff fef9 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   15c32:	4607      	mov	r7, r0
   15c34:	2800      	cmp	r0, #0
   15c36:	d047      	beq.n	15cc8 <bt_le_create_conn+0xb8>
   15c38:	2119      	movs	r1, #25
   15c3a:	3008      	adds	r0, #8
   15c3c:	f008 fc54 	bl	1e4e8 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
   15c40:	2219      	movs	r2, #25
   15c42:	4605      	mov	r5, r0
   15c44:	4621      	mov	r1, r4
   15c46:	f010 ff8f 	bl	26b68 <memset>
		if (bt_addr_le_cmp(&conn->le.resp_addr, BT_ADDR_LE_ANY)) {
   15c4a:	f106 089e 	add.w	r8, r6, #158	; 0x9e
	cp->own_addr_type = own_addr_type;
   15c4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15c52:	732b      	strb	r3, [r5, #12]
	return memcmp(a, b, sizeof(*a));
   15c54:	2207      	movs	r2, #7
   15c56:	a903      	add	r1, sp, #12
   15c58:	4640      	mov	r0, r8
		if (bt_addr_le_cmp(&conn->le.resp_addr, BT_ADDR_LE_ANY)) {
   15c5a:	9403      	str	r4, [sp, #12]
   15c5c:	f8cd 400f 	str.w	r4, [sp, #15]
   15c60:	f010 ff66 	bl	26b30 <memcmp>
   15c64:	b908      	cbnz	r0, 15c6a <bt_le_create_conn+0x5a>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   15c66:	f106 0890 	add.w	r8, r6, #144	; 0x90
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   15c6a:	4641      	mov	r1, r8
   15c6c:	1d68      	adds	r0, r5, #5
   15c6e:	f011 f886 	bl	26d7e <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   15c72:	2400      	movs	r4, #0
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   15c74:	4a16      	ldr	r2, [pc, #88]	; (15cd0 <bt_le_create_conn+0xc0>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   15c76:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   15c78:	8993      	ldrh	r3, [r2, #12]
   15c7a:	802b      	strh	r3, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   15c7c:	89d3      	ldrh	r3, [r2, #14]
   15c7e:	806b      	strh	r3, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   15c80:	f8b6 30a8 	ldrh.w	r3, [r6, #168]	; 0xa8
   15c84:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   15c88:	f8b6 30aa 	ldrh.w	r3, [r6, #170]	; 0xaa
   15c8c:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   15c90:	f8b6 30ac 	ldrh.w	r3, [r6, #172]	; 0xac
   15c94:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   15c98:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
   15c9c:	f8a5 3013 	strh.w	r3, [r5, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   15ca0:	2301      	movs	r3, #1
   15ca2:	9300      	str	r3, [sp, #0]
   15ca4:	230c      	movs	r3, #12
   15ca6:	eb0d 0103 	add.w	r1, sp, r3
   15caa:	32cc      	adds	r2, #204	; 0xcc
   15cac:	4638      	mov	r0, r7
   15cae:	f7ff fea7 	bl	15a00 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   15cb2:	4622      	mov	r2, r4
   15cb4:	4639      	mov	r1, r7
   15cb6:	f242 000d 	movw	r0, #8205	; 0x200d
   15cba:	f7ff fefb 	bl	15ab4 <bt_hci_cmd_send_sync>
   15cbe:	4604      	mov	r4, r0
}
   15cc0:	4620      	mov	r0, r4
   15cc2:	b006      	add	sp, #24
   15cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   15cc8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15ccc:	e7f8      	b.n	15cc0 <bt_le_create_conn+0xb0>
   15cce:	bf00      	nop
   15cd0:	20000340 	.word	0x20000340

00015cd4 <bt_le_create_conn_cancel>:
{
   15cd4:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   15cd6:	2100      	movs	r1, #0
{
   15cd8:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   15cda:	f242 000e 	movw	r0, #8206	; 0x200e
   15cde:	f7ff fea1 	bl	15a24 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   15ce2:	2500      	movs	r5, #0
   15ce4:	230c      	movs	r3, #12
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   15ce6:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   15ce8:	eb0d 0103 	add.w	r1, sp, r3
   15cec:	4a05      	ldr	r2, [pc, #20]	; (15d04 <bt_le_create_conn_cancel+0x30>)
   15cee:	9500      	str	r5, [sp, #0]
   15cf0:	f7ff fe86 	bl	15a00 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   15cf4:	462a      	mov	r2, r5
   15cf6:	4621      	mov	r1, r4
   15cf8:	f242 000e 	movw	r0, #8206	; 0x200e
   15cfc:	f7ff feda 	bl	15ab4 <bt_hci_cmd_send_sync>
}
   15d00:	b007      	add	sp, #28
   15d02:	bd30      	pop	{r4, r5, pc}
   15d04:	2000040c 	.word	0x2000040c

00015d08 <bt_hci_le_enh_conn_complete>:
{
   15d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15d0c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   15d10:	4a9a      	ldr	r2, [pc, #616]	; (15f7c <bt_hci_le_enh_conn_complete+0x274>)
	handle |= ~BT_ACL_HANDLE_MASK;
   15d12:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   15d16:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   15d18:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   15d1c:	b29b      	uxth	r3, r3
   15d1e:	4299      	cmp	r1, r3
{
   15d20:	4605      	mov	r5, r0
   15d22:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   15d26:	bf08      	it	eq
   15d28:	8016      	strheq	r6, [r2, #0]
{
   15d2a:	b08b      	sub	sp, #44	; 0x2c
			return true;
   15d2c:	bf08      	it	eq
   15d2e:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   15d30:	f000 fed6 	bl	16ae0 <bt_id_pending_keys_update>
	if (evt->status) {
   15d34:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15d36:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   15d3a:	b36c      	cbz	r4, 15d98 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15d3c:	2c02      	cmp	r4, #2
   15d3e:	d123      	bne.n	15d88 <bt_hci_le_enh_conn_complete+0x80>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   15d40:	2100      	movs	r1, #0
   15d42:	2206      	movs	r2, #6
   15d44:	4608      	mov	r0, r1
   15d46:	f002 fae7 	bl	18318 <bt_conn_lookup_state_le>
	if (!conn) {
   15d4a:	4605      	mov	r5, r0
   15d4c:	b948      	cbnz	r0, 15d62 <bt_hci_le_enh_conn_complete+0x5a>
		BT_ERR("No pending central connection");
   15d4e:	488c      	ldr	r0, [pc, #560]	; (15f80 <bt_hci_le_enh_conn_complete+0x278>)
   15d50:	2145      	movs	r1, #69	; 0x45
   15d52:	f00f ff5e 	bl	25c12 <z_log_minimal_printk>
			bt_le_scan_update(false);
   15d56:	2000      	movs	r0, #0
   15d58:	f001 fa58 	bl	1720c <bt_le_scan_update>
}
   15d5c:	b00b      	add	sp, #44	; 0x2c
   15d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   15d62:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15d64:	2100      	movs	r1, #0
   15d66:	f002 f813 	bl	17d90 <bt_conn_set_state>
   15d6a:	f3bf 8f5b 	dmb	ish
   15d6e:	686b      	ldr	r3, [r5, #4]
   15d70:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   15d74:	07de      	lsls	r6, r3, #31
   15d76:	d503      	bpl.n	15d80 <bt_hci_le_enh_conn_complete+0x78>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   15d78:	4621      	mov	r1, r4
   15d7a:	4628      	mov	r0, r5
   15d7c:	f002 f808 	bl	17d90 <bt_conn_set_state>
	bt_conn_unref(conn);
   15d80:	4628      	mov	r0, r5
   15d82:	f001 ffdb 	bl	17d3c <bt_conn_unref>
   15d86:	e7e6      	b.n	15d56 <bt_hci_le_enh_conn_complete+0x4e>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   15d88:	487e      	ldr	r0, [pc, #504]	; (15f84 <bt_hci_le_enh_conn_complete+0x27c>)
   15d8a:	4622      	mov	r2, r4
   15d8c:	2157      	movs	r1, #87	; 0x57
}
   15d8e:	b00b      	add	sp, #44	; 0x2c
   15d90:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   15d94:	f00f bf3d 	b.w	25c12 <z_log_minimal_printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   15d98:	792b      	ldrb	r3, [r5, #4]
   15d9a:	3b02      	subs	r3, #2
   15d9c:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   15d9e:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   15da2:	d82e      	bhi.n	15e02 <bt_hci_le_enh_conn_complete+0xfa>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   15da4:	4649      	mov	r1, r9
   15da6:	a808      	add	r0, sp, #32
   15da8:	f010 ffe9 	bl	26d7e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15dac:	f89d 3020 	ldrb.w	r3, [sp, #32]
	memcpy(dst, src, sizeof(*dst));
   15db0:	2206      	movs	r2, #6
   15db2:	3b02      	subs	r3, #2
   15db4:	f105 0111 	add.w	r1, r5, #17
   15db8:	f10d 0019 	add.w	r0, sp, #25
   15dbc:	f88d 3020 	strb.w	r3, [sp, #32]
   15dc0:	f010 fec7 	bl	26b52 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   15dc4:	2301      	movs	r3, #1
   15dc6:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   15dca:	78e8      	ldrb	r0, [r5, #3]
   15dcc:	b960      	cbnz	r0, 15de8 <bt_hci_le_enh_conn_complete+0xe0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   15dce:	2206      	movs	r2, #6
   15dd0:	a908      	add	r1, sp, #32
   15dd2:	f002 faa1 	bl	18318 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15dd6:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   15dd8:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15dda:	b923      	cbnz	r3, 15de6 <bt_hci_le_enh_conn_complete+0xde>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15ddc:	486a      	ldr	r0, [pc, #424]	; (15f88 <bt_hci_le_enh_conn_complete+0x280>)
   15dde:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   15de2:	f010 ffde 	bl	26da2 <atomic_and.isra.0>
	if (!conn) {
   15de6:	b9fc      	cbnz	r4, 15e28 <bt_hci_le_enh_conn_complete+0x120>
		BT_ERR("No pending conn for peer %s",
   15de8:	4648      	mov	r0, r9
   15dea:	f7ff f843 	bl	14e74 <bt_addr_le_str_real>
   15dee:	2145      	movs	r1, #69	; 0x45
   15df0:	4602      	mov	r2, r0
   15df2:	4866      	ldr	r0, [pc, #408]	; (15f8c <bt_hci_le_enh_conn_complete+0x284>)
   15df4:	f00f ff0d 	bl	25c12 <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   15df8:	211f      	movs	r1, #31
   15dfa:	4640      	mov	r0, r8
   15dfc:	f010 ffed 	bl	26dda <bt_hci_disconnect>
		return;
   15e00:	e7ac      	b.n	15d5c <bt_hci_le_enh_conn_complete+0x54>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   15e02:	78eb      	ldrb	r3, [r5, #3]
   15e04:	2b01      	cmp	r3, #1
   15e06:	bf04      	itt	eq
   15e08:	4b61      	ldreq	r3, [pc, #388]	; (15f90 <bt_hci_le_enh_conn_complete+0x288>)
   15e0a:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   15e0e:	4649      	mov	r1, r9
   15e10:	4620      	mov	r0, r4
   15e12:	f011 f897 	bl	26f44 <bt_lookup_id_addr>
   15e16:	4601      	mov	r1, r0
   15e18:	a808      	add	r0, sp, #32
   15e1a:	f010 ffb0 	bl	26d7e <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   15e1e:	4649      	mov	r1, r9
   15e20:	a806      	add	r0, sp, #24
   15e22:	f010 ffac 	bl	26d7e <bt_addr_le_copy>
   15e26:	e7d0      	b.n	15dca <bt_hci_le_enh_conn_complete+0xc2>
	conn->handle = handle;
   15e28:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15e2a:	a908      	add	r1, sp, #32
	conn->handle = handle;
   15e2c:	f820 7b90 	strh.w	r7, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15e30:	f010 ffa5 	bl	26d7e <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   15e34:	7e2a      	ldrb	r2, [r5, #24]
   15e36:	7deb      	ldrb	r3, [r5, #23]
   15e38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15e3c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   15e40:	7eaa      	ldrb	r2, [r5, #26]
   15e42:	7e6b      	ldrb	r3, [r5, #25]
   15e44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15e48:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15e4c:	7eeb      	ldrb	r3, [r5, #27]
   15e4e:	7f2a      	ldrb	r2, [r5, #28]
   15e50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15e54:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   15e58:	78ef      	ldrb	r7, [r5, #3]
   15e5a:	70e7      	strb	r7, [r4, #3]
	conn->err = 0U;
   15e5c:	2300      	movs	r3, #0
   15e5e:	7323      	strb	r3, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15e60:	b9cf      	cbnz	r7, 15e96 <bt_hci_le_enh_conn_complete+0x18e>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   15e62:	a906      	add	r1, sp, #24
   15e64:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   15e68:	f010 ff89 	bl	26d7e <bt_addr_le_copy>
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
   15e6c:	350b      	adds	r5, #11
			conn->le.init_addr.type = BT_ADDR_LE_RANDOM;
   15e6e:	2301      	movs	r3, #1
   15e70:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
	return memcmp(a, b, sizeof(*a));
   15e74:	2206      	movs	r2, #6
   15e76:	a904      	add	r1, sp, #16
   15e78:	4628      	mov	r0, r5
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
   15e7a:	9704      	str	r7, [sp, #16]
   15e7c:	f8ad 7014 	strh.w	r7, [sp, #20]
   15e80:	f010 fe56 	bl	26b30 <memcmp>
   15e84:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   15e86:	2206      	movs	r2, #6
				bt_addr_copy(&conn->le.init_addr.a,
   15e88:	f104 0098 	add.w	r0, r4, #152	; 0x98
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
   15e8c:	2b00      	cmp	r3, #0
   15e8e:	d06f      	beq.n	15f70 <bt_hci_le_enh_conn_complete+0x268>
   15e90:	4629      	mov	r1, r5
   15e92:	f010 fe5e 	bl	26b52 <memcpy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   15e96:	2107      	movs	r1, #7
   15e98:	4620      	mov	r0, r4
   15e9a:	f001 ff79 	bl	17d90 <bt_conn_set_state>
	if (is_disconnected) {
   15e9e:	b11e      	cbz	r6, 15ea8 <bt_hci_le_enh_conn_complete+0x1a0>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15ea0:	2101      	movs	r1, #1
   15ea2:	4620      	mov	r0, r4
   15ea4:	f001 ff74 	bl	17d90 <bt_conn_set_state>
	bt_conn_connected(conn);
   15ea8:	4620      	mov	r0, r4
   15eaa:	f011 f8ee 	bl	2708a <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   15eae:	7b63      	ldrb	r3, [r4, #13]
   15eb0:	2b07      	cmp	r3, #7
   15eb2:	d155      	bne.n	15f60 <bt_hci_le_enh_conn_complete+0x258>
   15eb4:	f3bf 8f5b 	dmb	ish
   15eb8:	6863      	ldr	r3, [r4, #4]
   15eba:	4e35      	ldr	r6, [pc, #212]	; (15f90 <bt_hci_le_enh_conn_complete+0x288>)
   15ebc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   15ec0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   15ec4:	d11f      	bne.n	15f06 <bt_hci_le_enh_conn_complete+0x1fe>
   15ec6:	78e3      	ldrb	r3, [r4, #3]
   15ec8:	b11b      	cbz	r3, 15ed2 <bt_hci_le_enh_conn_complete+0x1ca>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   15eca:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   15ece:	0718      	lsls	r0, r3, #28
   15ed0:	d519      	bpl.n	15f06 <bt_hci_le_enh_conn_complete+0x1fe>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   15ed2:	2102      	movs	r1, #2
   15ed4:	f242 0016 	movw	r0, #8214	; 0x2016
   15ed8:	f7ff fda4 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   15edc:	4605      	mov	r5, r0
   15ede:	2800      	cmp	r0, #0
   15ee0:	d048      	beq.n	15f74 <bt_hci_le_enh_conn_complete+0x26c>
   15ee2:	2102      	movs	r1, #2
   15ee4:	3008      	adds	r0, #8
   15ee6:	f008 faff 	bl	1e4e8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   15eea:	8823      	ldrh	r3, [r4, #0]
   15eec:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   15eee:	2200      	movs	r2, #0
   15ef0:	4629      	mov	r1, r5
   15ef2:	f242 0016 	movw	r0, #8214	; 0x2016
   15ef6:	f7ff fddd 	bl	15ab4 <bt_hci_cmd_send_sync>
		if (err) {
   15efa:	4602      	mov	r2, r0
   15efc:	b118      	cbz	r0, 15f06 <bt_hci_le_enh_conn_complete+0x1fe>
			BT_ERR("Failed read remote features (%d)", err);
   15efe:	4825      	ldr	r0, [pc, #148]	; (15f94 <bt_hci_le_enh_conn_complete+0x28c>)
   15f00:	2145      	movs	r1, #69	; 0x45
   15f02:	f00f fe86 	bl	25c12 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   15f06:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   15f0a:	07d9      	lsls	r1, r3, #31
   15f0c:	d50c      	bpl.n	15f28 <bt_hci_le_enh_conn_complete+0x220>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   15f0e:	2100      	movs	r1, #0
   15f10:	2302      	movs	r3, #2
   15f12:	461a      	mov	r2, r3
   15f14:	9100      	str	r1, [sp, #0]
   15f16:	4620      	mov	r0, r4
   15f18:	f010 ff98 	bl	26e4c <bt_le_set_phy>
		if (err) {
   15f1c:	4602      	mov	r2, r0
   15f1e:	b118      	cbz	r0, 15f28 <bt_hci_le_enh_conn_complete+0x220>
			BT_ERR("Failed LE Set PHY (%d)", err);
   15f20:	481d      	ldr	r0, [pc, #116]	; (15f98 <bt_hci_le_enh_conn_complete+0x290>)
   15f22:	2145      	movs	r1, #69	; 0x45
   15f24:	f00f fe75 	bl	25c12 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   15f28:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   15f2c:	069a      	lsls	r2, r3, #26
   15f2e:	d517      	bpl.n	15f60 <bt_hci_le_enh_conn_complete+0x258>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   15f30:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   15f34:	689b      	ldr	r3, [r3, #8]
   15f36:	079b      	lsls	r3, r3, #30
   15f38:	d512      	bpl.n	15f60 <bt_hci_le_enh_conn_complete+0x258>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15f3a:	a904      	add	r1, sp, #16
   15f3c:	f10d 000e 	add.w	r0, sp, #14
   15f40:	f7ff fe1a 	bl	15b78 <hci_le_read_max_data_len>
			if (!err) {
   15f44:	b960      	cbnz	r0, 15f60 <bt_hci_le_enh_conn_complete+0x258>
				err = bt_le_set_data_len(conn,
   15f46:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   15f4a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   15f4e:	4620      	mov	r0, r4
   15f50:	f010 ff5e 	bl	26e10 <bt_le_set_data_len>
				if (err) {
   15f54:	4602      	mov	r2, r0
   15f56:	b118      	cbz	r0, 15f60 <bt_hci_le_enh_conn_complete+0x258>
					BT_ERR("Failed to set data len (%d)", err);
   15f58:	4810      	ldr	r0, [pc, #64]	; (15f9c <bt_hci_le_enh_conn_complete+0x294>)
   15f5a:	2145      	movs	r1, #69	; 0x45
   15f5c:	f00f fe59 	bl	25c12 <z_log_minimal_printk>
	bt_conn_unref(conn);
   15f60:	4620      	mov	r0, r4
   15f62:	f001 feeb 	bl	17d3c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15f66:	78e3      	ldrb	r3, [r4, #3]
   15f68:	2b00      	cmp	r3, #0
   15f6a:	f47f aef7 	bne.w	15d5c <bt_hci_le_enh_conn_complete+0x54>
   15f6e:	e6f2      	b.n	15d56 <bt_hci_le_enh_conn_complete+0x4e>
   15f70:	490b      	ldr	r1, [pc, #44]	; (15fa0 <bt_hci_le_enh_conn_complete+0x298>)
   15f72:	e78e      	b.n	15e92 <bt_hci_le_enh_conn_complete+0x18a>
		return -ENOBUFS;
   15f74:	f06f 0268 	mvn.w	r2, #104	; 0x68
   15f78:	e7c1      	b.n	15efe <bt_hci_le_enh_conn_complete+0x1f6>
   15f7a:	bf00      	nop
   15f7c:	200027d8 	.word	0x200027d8
   15f80:	0002c2cd 	.word	0x0002c2cd
   15f84:	0002c2f0 	.word	0x0002c2f0
   15f88:	2000040c 	.word	0x2000040c
   15f8c:	0002c30e 	.word	0x0002c30e
   15f90:	20000340 	.word	0x20000340
   15f94:	0002c32f 	.word	0x0002c32f
   15f98:	0002c355 	.word	0x0002c355
   15f9c:	0002c371 	.word	0x0002c371
   15fa0:	200003a1 	.word	0x200003a1

00015fa4 <le_legacy_conn_complete>:
{
   15fa4:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   15fa6:	6881      	ldr	r1, [r0, #8]
{
   15fa8:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   15faa:	780b      	ldrb	r3, [r1, #0]
   15fac:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   15fb0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   15fb4:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   15fb8:	78cb      	ldrb	r3, [r1, #3]
   15fba:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   15fbe:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   15fc2:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   15fc6:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   15fca:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   15fce:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   15fd2:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   15fd6:	7c4b      	ldrb	r3, [r1, #17]
   15fd8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   15fdc:	a803      	add	r0, sp, #12
   15fde:	3104      	adds	r1, #4
   15fe0:	f010 fecd 	bl	26d7e <bt_addr_le_copy>
   15fe4:	490a      	ldr	r1, [pc, #40]	; (16010 <le_legacy_conn_complete+0x6c>)
   15fe6:	2206      	movs	r2, #6
   15fe8:	f10d 0013 	add.w	r0, sp, #19
   15fec:	f010 fdb1 	bl	26b52 <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   15ff0:	2300      	movs	r3, #0
   15ff2:	2206      	movs	r2, #6
   15ff4:	4669      	mov	r1, sp
   15ff6:	f10d 0019 	add.w	r0, sp, #25
   15ffa:	9300      	str	r3, [sp, #0]
   15ffc:	f8ad 3004 	strh.w	r3, [sp, #4]
   16000:	f010 fda7 	bl	26b52 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   16004:	a802      	add	r0, sp, #8
   16006:	f7ff fe7f 	bl	15d08 <bt_hci_le_enh_conn_complete>
}
   1600a:	b00b      	add	sp, #44	; 0x2c
   1600c:	f85d fb04 	ldr.w	pc, [sp], #4
   16010:	200003a1 	.word	0x200003a1

00016014 <bt_security_err_get>:
	switch (hci_err) {
   16014:	2829      	cmp	r0, #41	; 0x29
   16016:	bf9a      	itte	ls
   16018:	4b01      	ldrls	r3, [pc, #4]	; (16020 <bt_security_err_get+0xc>)
   1601a:	5c18      	ldrbls	r0, [r3, r0]
{
   1601c:	2009      	movhi	r0, #9
}
   1601e:	4770      	bx	lr
   16020:	0002c6f6 	.word	0x0002c6f6

00016024 <hci_encrypt_key_refresh_complete>:
{
   16024:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   16026:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16028:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   1602c:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1602e:	4630      	mov	r0, r6
   16030:	f001 fea6 	bl	17d80 <bt_conn_lookup_handle>
	if (!conn) {
   16034:	4604      	mov	r4, r0
   16036:	b930      	cbnz	r0, 16046 <hci_encrypt_key_refresh_complete+0x22>
		BT_ERR("Unable to look up conn with handle %u", handle);
   16038:	4632      	mov	r2, r6
   1603a:	4819      	ldr	r0, [pc, #100]	; (160a0 <hci_encrypt_key_refresh_complete+0x7c>)
}
   1603c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   16040:	2145      	movs	r1, #69	; 0x45
   16042:	f00f bde6 	b.w	25c12 <z_log_minimal_printk>
	if (status) {
   16046:	b165      	cbz	r5, 16062 <hci_encrypt_key_refresh_complete+0x3e>
		bt_conn_security_changed(conn, status,
   16048:	4628      	mov	r0, r5
   1604a:	f7ff ffe3 	bl	16014 <bt_security_err_get>
   1604e:	4629      	mov	r1, r5
   16050:	4602      	mov	r2, r0
   16052:	4620      	mov	r0, r4
   16054:	f002 f8c8 	bl	181e8 <bt_conn_security_changed>
	bt_conn_unref(conn);
   16058:	4620      	mov	r0, r4
}
   1605a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1605e:	f001 be6d 	b.w	17d3c <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   16062:	7883      	ldrb	r3, [r0, #2]
   16064:	2b01      	cmp	r3, #1
   16066:	d107      	bne.n	16078 <hci_encrypt_key_refresh_complete+0x54>
		bt_smp_update_keys(conn);
   16068:	f007 fc98 	bl	1d99c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1606c:	4620      	mov	r0, r4
   1606e:	f010 fe6d 	bl	26d4c <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   16072:	2800      	cmp	r0, #0
   16074:	bf08      	it	eq
   16076:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16078:	4628      	mov	r0, r5
   1607a:	f7ff ffcb 	bl	16014 <bt_security_err_get>
   1607e:	4629      	mov	r1, r5
   16080:	4602      	mov	r2, r0
   16082:	4620      	mov	r0, r4
   16084:	f002 f8b0 	bl	181e8 <bt_conn_security_changed>
	if (status) {
   16088:	2d00      	cmp	r5, #0
   1608a:	d0e5      	beq.n	16058 <hci_encrypt_key_refresh_complete+0x34>
		BT_ERR("Failed to set required security level");
   1608c:	4805      	ldr	r0, [pc, #20]	; (160a4 <hci_encrypt_key_refresh_complete+0x80>)
   1608e:	2145      	movs	r1, #69	; 0x45
   16090:	f00f fdbf 	bl	25c12 <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   16094:	4629      	mov	r1, r5
   16096:	4620      	mov	r0, r4
   16098:	f011 f88f 	bl	271ba <bt_conn_disconnect>
   1609c:	e7dc      	b.n	16058 <hci_encrypt_key_refresh_complete+0x34>
   1609e:	bf00      	nop
   160a0:	0002c25c 	.word	0x0002c25c
   160a4:	0002c392 	.word	0x0002c392

000160a8 <hci_encrypt_change>:
{
   160a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   160aa:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   160ac:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   160b0:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   160b2:	4638      	mov	r0, r7
   160b4:	f001 fe64 	bl	17d80 <bt_conn_lookup_handle>
	if (!conn) {
   160b8:	4604      	mov	r4, r0
   160ba:	b930      	cbnz	r0, 160ca <hci_encrypt_change+0x22>
		BT_ERR("Unable to look up conn with handle %u", handle);
   160bc:	463a      	mov	r2, r7
   160be:	481a      	ldr	r0, [pc, #104]	; (16128 <hci_encrypt_change+0x80>)
}
   160c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   160c4:	2145      	movs	r1, #69	; 0x45
   160c6:	f00f bda4 	b.w	25c12 <z_log_minimal_printk>
	if (status) {
   160ca:	b165      	cbz	r5, 160e6 <hci_encrypt_change+0x3e>
		bt_conn_security_changed(conn, status,
   160cc:	4628      	mov	r0, r5
   160ce:	f7ff ffa1 	bl	16014 <bt_security_err_get>
   160d2:	4629      	mov	r1, r5
   160d4:	4602      	mov	r2, r0
   160d6:	4620      	mov	r0, r4
   160d8:	f002 f886 	bl	181e8 <bt_conn_security_changed>
	bt_conn_unref(conn);
   160dc:	4620      	mov	r0, r4
}
   160de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   160e2:	f001 be2b 	b.w	17d3c <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   160e6:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   160e8:	78f3      	ldrb	r3, [r6, #3]
   160ea:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   160ec:	2a01      	cmp	r2, #1
   160ee:	d108      	bne.n	16102 <hci_encrypt_change+0x5a>
		if (conn->encrypt) {
   160f0:	b10b      	cbz	r3, 160f6 <hci_encrypt_change+0x4e>
			bt_smp_update_keys(conn);
   160f2:	f007 fc53 	bl	1d99c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   160f6:	4620      	mov	r0, r4
   160f8:	f010 fe28 	bl	26d4c <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   160fc:	2800      	cmp	r0, #0
   160fe:	bf08      	it	eq
   16100:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16102:	4628      	mov	r0, r5
   16104:	f7ff ff86 	bl	16014 <bt_security_err_get>
   16108:	4629      	mov	r1, r5
   1610a:	4602      	mov	r2, r0
   1610c:	4620      	mov	r0, r4
   1610e:	f002 f86b 	bl	181e8 <bt_conn_security_changed>
	if (status) {
   16112:	2d00      	cmp	r5, #0
   16114:	d0e2      	beq.n	160dc <hci_encrypt_change+0x34>
		BT_ERR("Failed to set required security level");
   16116:	4805      	ldr	r0, [pc, #20]	; (1612c <hci_encrypt_change+0x84>)
   16118:	2145      	movs	r1, #69	; 0x45
   1611a:	f00f fd7a 	bl	25c12 <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   1611e:	4629      	mov	r1, r5
   16120:	4620      	mov	r0, r4
   16122:	f011 f84a 	bl	271ba <bt_conn_disconnect>
   16126:	e7d9      	b.n	160dc <hci_encrypt_change+0x34>
   16128:	0002c25c 	.word	0x0002c25c
   1612c:	0002c392 	.word	0x0002c392

00016130 <bt_send>:
	return bt_dev.drv->send(buf);
   16130:	4b02      	ldr	r3, [pc, #8]	; (1613c <bt_send+0xc>)
   16132:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   16136:	695b      	ldr	r3, [r3, #20]
   16138:	4718      	bx	r3
   1613a:	bf00      	nop
   1613c:	20000340 	.word	0x20000340

00016140 <bt_hci_cmd_send>:
{
   16140:	b538      	push	{r3, r4, r5, lr}
   16142:	4605      	mov	r5, r0
	if (!buf) {
   16144:	460c      	mov	r4, r1
   16146:	b919      	cbnz	r1, 16150 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   16148:	f7ff fc6c 	bl	15a24 <bt_hci_cmd_create>
		if (!buf) {
   1614c:	4604      	mov	r4, r0
   1614e:	b1c0      	cbz	r0, 16182 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16150:	f640 4335 	movw	r3, #3125	; 0xc35
   16154:	429d      	cmp	r5, r3
   16156:	d10e      	bne.n	16176 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
   16158:	4620      	mov	r0, r4
   1615a:	f7ff ffe9 	bl	16130 <bt_send>
		if (err) {
   1615e:	4605      	mov	r5, r0
   16160:	b138      	cbz	r0, 16172 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
   16162:	4602      	mov	r2, r0
   16164:	2145      	movs	r1, #69	; 0x45
   16166:	4808      	ldr	r0, [pc, #32]	; (16188 <bt_hci_cmd_send+0x48>)
   16168:	f00f fd53 	bl	25c12 <z_log_minimal_printk>
			net_buf_unref(buf);
   1616c:	4620      	mov	r0, r4
   1616e:	f008 f8a5 	bl	1e2bc <net_buf_unref>
}
   16172:	4628      	mov	r0, r5
   16174:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16176:	4805      	ldr	r0, [pc, #20]	; (1618c <bt_hci_cmd_send+0x4c>)
   16178:	4621      	mov	r1, r4
   1617a:	f008 f871 	bl	1e260 <net_buf_put>
	return 0;
   1617e:	2500      	movs	r5, #0
   16180:	e7f7      	b.n	16172 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
   16182:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16186:	e7f4      	b.n	16172 <bt_hci_cmd_send+0x32>
   16188:	0002c3bd 	.word	0x0002c3bd
   1618c:	20000484 	.word	0x20000484

00016190 <le_ltk_request>:
{
   16190:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   16192:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16194:	8826      	ldrh	r6, [r4, #0]
   16196:	b2b7      	uxth	r7, r6
{
   16198:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   1619a:	4638      	mov	r0, r7
   1619c:	f001 fdf0 	bl	17d80 <bt_conn_lookup_handle>
	if (!conn) {
   161a0:	4605      	mov	r5, r0
   161a2:	b938      	cbnz	r0, 161b4 <le_ltk_request+0x24>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   161a4:	4821      	ldr	r0, [pc, #132]	; (1622c <le_ltk_request+0x9c>)
   161a6:	463a      	mov	r2, r7
   161a8:	2145      	movs	r1, #69	; 0x45
}
   161aa:	b007      	add	sp, #28
   161ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   161b0:	f00f bd2f 	b.w	25c12 <z_log_minimal_printk>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   161b4:	af02      	add	r7, sp, #8
   161b6:	f8d4 2002 	ldr.w	r2, [r4, #2]
   161ba:	f8d4 3006 	ldr.w	r3, [r4, #6]
   161be:	9701      	str	r7, [sp, #4]
   161c0:	8961      	ldrh	r1, [r4, #10]
   161c2:	9100      	str	r1, [sp, #0]
   161c4:	f012 fd65 	bl	28c92 <bt_smp_request_ltk>
   161c8:	b1f8      	cbz	r0, 1620a <le_ltk_request+0x7a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   161ca:	2112      	movs	r1, #18
   161cc:	f242 001a 	movw	r0, #8218	; 0x201a
   161d0:	f7ff fc28 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   161d4:	4604      	mov	r4, r0
   161d6:	b940      	cbnz	r0, 161ea <le_ltk_request+0x5a>
		BT_ERR("Out of command buffers");
   161d8:	4815      	ldr	r0, [pc, #84]	; (16230 <le_ltk_request+0xa0>)
   161da:	2145      	movs	r1, #69	; 0x45
   161dc:	f00f fd19 	bl	25c12 <z_log_minimal_printk>
	bt_conn_unref(conn);
   161e0:	4628      	mov	r0, r5
   161e2:	f001 fdab 	bl	17d3c <bt_conn_unref>
}
   161e6:	b007      	add	sp, #28
   161e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   161ea:	2112      	movs	r1, #18
   161ec:	3008      	adds	r0, #8
   161ee:	f008 f97b 	bl	1e4e8 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   161f2:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   161f4:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   161f8:	2210      	movs	r2, #16
   161fa:	f010 fcaa 	bl	26b52 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   161fe:	4621      	mov	r1, r4
   16200:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16204:	f7ff ff9c 	bl	16140 <bt_hci_cmd_send>
   16208:	e7ea      	b.n	161e0 <le_ltk_request+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1620a:	2102      	movs	r1, #2
   1620c:	f242 001b 	movw	r0, #8219	; 0x201b
   16210:	f7ff fc08 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   16214:	4604      	mov	r4, r0
   16216:	2800      	cmp	r0, #0
   16218:	d0de      	beq.n	161d8 <le_ltk_request+0x48>
   1621a:	2102      	movs	r1, #2
   1621c:	3008      	adds	r0, #8
   1621e:	f008 f963 	bl	1e4e8 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16222:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   16224:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16226:	f242 001b 	movw	r0, #8219	; 0x201b
   1622a:	e7eb      	b.n	16204 <le_ltk_request+0x74>
   1622c:	0002c050 	.word	0x0002c050
   16230:	0002c3e4 	.word	0x0002c3e4

00016234 <le_conn_param_neg_reply>:
{
   16234:	b570      	push	{r4, r5, r6, lr}
   16236:	4606      	mov	r6, r0
   16238:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1623a:	f242 0021 	movw	r0, #8225	; 0x2021
   1623e:	2103      	movs	r1, #3
   16240:	f7ff fbf0 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   16244:	4604      	mov	r4, r0
   16246:	b928      	cbnz	r0, 16254 <le_conn_param_neg_reply+0x20>
}
   16248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   1624c:	4808      	ldr	r0, [pc, #32]	; (16270 <le_conn_param_neg_reply+0x3c>)
   1624e:	2145      	movs	r1, #69	; 0x45
   16250:	f00f bcdf 	b.w	25c12 <z_log_minimal_printk>
   16254:	2103      	movs	r1, #3
   16256:	3008      	adds	r0, #8
   16258:	f008 f946 	bl	1e4e8 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1625c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1625e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16260:	4621      	mov	r1, r4
   16262:	f242 0021 	movw	r0, #8225	; 0x2021
}
   16266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1626a:	f7ff bf69 	b.w	16140 <bt_hci_cmd_send>
   1626e:	bf00      	nop
   16270:	0002c400 	.word	0x0002c400

00016274 <le_conn_param_req>:
{
   16274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   16276:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16278:	78d9      	ldrb	r1, [r3, #3]
   1627a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1627c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1627e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16282:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16286:	7959      	ldrb	r1, [r3, #5]
   16288:	791a      	ldrb	r2, [r3, #4]
   1628a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1628e:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   16292:	799a      	ldrb	r2, [r3, #6]
   16294:	79d9      	ldrb	r1, [r3, #7]
   16296:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1629a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1629e:	7a1a      	ldrb	r2, [r3, #8]
   162a0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   162a2:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   162a4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   162a8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   162aa:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   162ae:	f001 fd67 	bl	17d80 <bt_conn_lookup_handle>
	if (!conn) {
   162b2:	4606      	mov	r6, r0
   162b4:	b950      	cbnz	r0, 162cc <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   162b6:	481d      	ldr	r0, [pc, #116]	; (1632c <le_conn_param_req+0xb8>)
   162b8:	2145      	movs	r1, #69	; 0x45
   162ba:	4622      	mov	r2, r4
   162bc:	f00f fca9 	bl	25c12 <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   162c0:	2102      	movs	r1, #2
   162c2:	4620      	mov	r0, r4
   162c4:	f7ff ffb6 	bl	16234 <le_conn_param_neg_reply>
}
   162c8:	b003      	add	sp, #12
   162ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   162cc:	4669      	mov	r1, sp
   162ce:	f001 feff 	bl	180d0 <le_param_req>
   162d2:	b938      	cbnz	r0, 162e4 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   162d4:	211e      	movs	r1, #30
   162d6:	4620      	mov	r0, r4
   162d8:	f7ff ffac 	bl	16234 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   162dc:	4630      	mov	r0, r6
   162de:	f001 fd2d 	bl	17d3c <bt_conn_unref>
   162e2:	e7f1      	b.n	162c8 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   162e4:	210e      	movs	r1, #14
   162e6:	f242 0020 	movw	r0, #8224	; 0x2020
   162ea:	f7ff fb9b 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   162ee:	4605      	mov	r5, r0
   162f0:	2800      	cmp	r0, #0
   162f2:	d0f3      	beq.n	162dc <le_conn_param_req+0x68>
   162f4:	210e      	movs	r1, #14
   162f6:	3008      	adds	r0, #8
   162f8:	f008 f8f6 	bl	1e4e8 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   162fc:	220e      	movs	r2, #14
   162fe:	4604      	mov	r4, r0
   16300:	2100      	movs	r1, #0
   16302:	f010 fc31 	bl	26b68 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16306:	f8bd 3000 	ldrh.w	r3, [sp]
   1630a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1630c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   16310:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16312:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   16316:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16318:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1631c:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1631e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16320:	4629      	mov	r1, r5
   16322:	f242 0020 	movw	r0, #8224	; 0x2020
   16326:	f7ff ff0b 	bl	16140 <bt_hci_cmd_send>
   1632a:	e7d7      	b.n	162dc <le_conn_param_req+0x68>
   1632c:	0002c050 	.word	0x0002c050

00016330 <hci_tx_thread>:
{
   16330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   16334:	f8df 8118 	ldr.w	r8, [pc, #280]	; 16450 <hci_tx_thread+0x120>
		BT_ASSERT(err == 0);
   16338:	f8df 9118 	ldr.w	r9, [pc, #280]	; 16454 <hci_tx_thread+0x124>
			ev_count += bt_conn_prepare_events(&events[1]);
   1633c:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   16340:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16344:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   16346:	f36f 3352 	bfc	r3, #13, #6
   1634a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1634e:	f001 fcbf 	bl	17cd0 <bt_conn_prepare_events>
   16352:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   16354:	483e      	ldr	r0, [pc, #248]	; (16450 <hci_tx_thread+0x120>)
   16356:	f04f 32ff 	mov.w	r2, #4294967295
   1635a:	f04f 33ff 	mov.w	r3, #4294967295
   1635e:	4629      	mov	r1, r5
   16360:	f00e fc7a 	bl	24c58 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   16364:	b158      	cbz	r0, 1637e <hci_tx_thread+0x4e>
   16366:	483c      	ldr	r0, [pc, #240]	; (16458 <hci_tx_thread+0x128>)
   16368:	f640 12d3 	movw	r2, #2515	; 0x9d3
   1636c:	4649      	mov	r1, r9
   1636e:	f00f fc42 	bl	25bf6 <assert_print>
   16372:	4040      	eors	r0, r0
   16374:	f380 8811 	msr	BASEPRI, r0
   16378:	f04f 0003 	mov.w	r0, #3
   1637c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1637e:	4f37      	ldr	r7, [pc, #220]	; (1645c <hci_tx_thread+0x12c>)
{
   16380:	4e33      	ldr	r6, [pc, #204]	; (16450 <hci_tx_thread+0x120>)
   16382:	f507 7b90 	add.w	fp, r7, #288	; 0x120
	for (; count; ev++, count--) {
   16386:	b915      	cbnz	r5, 1638e <hci_tx_thread+0x5e>
	z_impl_k_yield();
   16388:	f00d fd50 	bl	23e2c <z_impl_k_yield>
	while (1) {
   1638c:	e7d8      	b.n	16340 <hci_tx_thread+0x10>
		switch (ev->state) {
   1638e:	68f2      	ldr	r2, [r6, #12]
   16390:	f3c2 3245 	ubfx	r2, r2, #13, #6
   16394:	2a01      	cmp	r2, #1
   16396:	d94c      	bls.n	16432 <hci_tx_thread+0x102>
   16398:	2a04      	cmp	r2, #4
   1639a:	d154      	bne.n	16446 <hci_tx_thread+0x116>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1639c:	7b33      	ldrb	r3, [r6, #12]
   1639e:	2b00      	cmp	r3, #0
   163a0:	d14a      	bne.n	16438 <hci_tx_thread+0x108>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   163a2:	482f      	ldr	r0, [pc, #188]	; (16460 <hci_tx_thread+0x130>)
   163a4:	2200      	movs	r2, #0
   163a6:	2300      	movs	r3, #0
   163a8:	f007 fe38 	bl	1e01c <net_buf_get>
	BT_ASSERT(buf);
   163ac:	4604      	mov	r4, r0
   163ae:	b958      	cbnz	r0, 163c8 <hci_tx_thread+0x98>
   163b0:	4829      	ldr	r0, [pc, #164]	; (16458 <hci_tx_thread+0x128>)
   163b2:	f640 126c 	movw	r2, #2412	; 0x96c
   163b6:	4649      	mov	r1, r9
   163b8:	f00f fc1d 	bl	25bf6 <assert_print>
   163bc:	4040      	eors	r0, r0
   163be:	f380 8811 	msr	BASEPRI, r0
   163c2:	f04f 0003 	mov.w	r0, #3
   163c6:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   163c8:	f04f 33ff 	mov.w	r3, #4294967295
   163cc:	f04f 32ff 	mov.w	r2, #4294967295
   163d0:	4658      	mov	r0, fp
   163d2:	f00c fa3b 	bl	2284c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   163d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   163da:	b153      	cbz	r3, 163f2 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
   163dc:	4821      	ldr	r0, [pc, #132]	; (16464 <hci_tx_thread+0x134>)
   163de:	2145      	movs	r1, #69	; 0x45
   163e0:	f00f fc17 	bl	25c12 <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   163e4:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   163e8:	f007 ff68 	bl	1e2bc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   163ec:	2300      	movs	r3, #0
   163ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   163f2:	4620      	mov	r0, r4
   163f4:	f007 ffa6 	bl	1e344 <net_buf_ref>
   163f8:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	err = bt_send(buf);
   163fc:	4620      	mov	r0, r4
   163fe:	f7ff fe97 	bl	16130 <bt_send>
	if (err) {
   16402:	4602      	mov	r2, r0
   16404:	b1a8      	cbz	r0, 16432 <hci_tx_thread+0x102>
		BT_ERR("Unable to send to driver (err %d)", err);
   16406:	4818      	ldr	r0, [pc, #96]	; (16468 <hci_tx_thread+0x138>)
   16408:	2145      	movs	r1, #69	; 0x45
   1640a:	f00f fc02 	bl	25c12 <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   1640e:	4817      	ldr	r0, [pc, #92]	; (1646c <hci_tx_thread+0x13c>)
   16410:	f00c f9e2 	bl	227d8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16414:	4620      	mov	r0, r4
   16416:	f007 fcc7 	bl	1dda8 <net_buf_id>
   1641a:	4b15      	ldr	r3, [pc, #84]	; (16470 <hci_tx_thread+0x140>)
   1641c:	220c      	movs	r2, #12
   1641e:	fb02 3000 	mla	r0, r2, r0, r3
   16422:	211f      	movs	r1, #31
   16424:	8840      	ldrh	r0, [r0, #2]
   16426:	4622      	mov	r2, r4
   16428:	f7ff f998 	bl	1575c <hci_cmd_done>
		net_buf_unref(buf);
   1642c:	4620      	mov	r0, r4
   1642e:	f007 ff45 	bl	1e2bc <net_buf_unref>
	for (; count; ev++, count--) {
   16432:	3614      	adds	r6, #20
   16434:	3d01      	subs	r5, #1
   16436:	e7a6      	b.n	16386 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   16438:	2b01      	cmp	r3, #1
   1643a:	d1fa      	bne.n	16432 <hci_tx_thread+0x102>
					conn = CONTAINER_OF(ev->fifo,
   1643c:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1643e:	3838      	subs	r0, #56	; 0x38
   16440:	f002 f996 	bl	18770 <bt_conn_process_tx>
   16444:	e7f5      	b.n	16432 <hci_tx_thread+0x102>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   16446:	480b      	ldr	r0, [pc, #44]	; (16474 <hci_tx_thread+0x144>)
   16448:	2157      	movs	r1, #87	; 0x57
   1644a:	f00f fbe2 	bl	25c12 <z_log_minimal_printk>
   1644e:	e7f0      	b.n	16432 <hci_tx_thread+0x102>
   16450:	2000058c 	.word	0x2000058c
   16454:	0002c110 	.word	0x0002c110
   16458:	0002ab8c 	.word	0x0002ab8c
   1645c:	20000340 	.word	0x20000340
   16460:	20000484 	.word	0x20000484
   16464:	0002c41f 	.word	0x0002c41f
   16468:	0002c3bd 	.word	0x0002c3bd
   1646c:	20000460 	.word	0x20000460
   16470:	200022fc 	.word	0x200022fc
   16474:	0002c43f 	.word	0x0002c43f

00016478 <hci_event_prio>:
{
   16478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1647c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1647e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   16482:	4630      	mov	r0, r6
   16484:	f012 fe24 	bl	290d0 <net_buf_simple_headroom>
	state->len = buf->len;
   16488:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1648c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   16490:	4605      	mov	r5, r0
   16492:	d80b      	bhi.n	164ac <hci_event_prio+0x34>
   16494:	491b      	ldr	r1, [pc, #108]	; (16504 <hci_event_prio+0x8c>)
   16496:	481c      	ldr	r0, [pc, #112]	; (16508 <hci_event_prio+0x90>)
   16498:	f640 526f 	movw	r2, #3439	; 0xd6f
   1649c:	f00f fbab 	bl	25bf6 <assert_print>
   164a0:	4040      	eors	r0, r0
   164a2:	f380 8811 	msr	BASEPRI, r0
   164a6:	f04f 0003 	mov.w	r0, #3
   164aa:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   164ac:	4630      	mov	r0, r6
   164ae:	2102      	movs	r1, #2
   164b0:	f007 fffc 	bl	1e4ac <net_buf_simple_pull_mem>
   164b4:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   164b6:	7800      	ldrb	r0, [r0, #0]
   164b8:	f010 fc36 	bl	26d28 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   164bc:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   164be:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   164c0:	d40b      	bmi.n	164da <hci_event_prio+0x62>
   164c2:	4910      	ldr	r1, [pc, #64]	; (16504 <hci_event_prio+0x8c>)
   164c4:	4810      	ldr	r0, [pc, #64]	; (16508 <hci_event_prio+0x90>)
   164c6:	f640 5273 	movw	r2, #3443	; 0xd73
   164ca:	f00f fb94 	bl	25bf6 <assert_print>
   164ce:	4040      	eors	r0, r0
   164d0:	f380 8811 	msr	BASEPRI, r0
   164d4:	f04f 0003 	mov.w	r0, #3
   164d8:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   164da:	2305      	movs	r3, #5
   164dc:	4a0b      	ldr	r2, [pc, #44]	; (1650c <hci_event_prio+0x94>)
   164de:	7838      	ldrb	r0, [r7, #0]
   164e0:	4621      	mov	r1, r4
   164e2:	f7ff f837 	bl	15554 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   164e6:	07b3      	lsls	r3, r6, #30
   164e8:	d507      	bpl.n	164fa <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   164ea:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   164ec:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   164f0:	fa10 f585 	uxtah	r5, r0, r5
   164f4:	60a5      	str	r5, [r4, #8]
}
   164f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   164fa:	4620      	mov	r0, r4
}
   164fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16500:	f007 bedc 	b.w	1e2bc <net_buf_unref>
   16504:	0002c110 	.word	0x0002c110
   16508:	0002ab8c 	.word	0x0002ab8c
   1650c:	0002a4b0 	.word	0x0002a4b0

00016510 <bt_recv>:
{
   16510:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16512:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   16514:	2a01      	cmp	r2, #1
{
   16516:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   16518:	d005      	beq.n	16526 <bt_recv+0x16>
   1651a:	2a03      	cmp	r2, #3
   1651c:	d112      	bne.n	16544 <bt_recv+0x34>
			rx_queue_put(buf);
   1651e:	f7fe ffaf 	bl	15480 <rx_queue_put>
		return 0;
   16522:	2000      	movs	r0, #0
}
   16524:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16526:	6883      	ldr	r3, [r0, #8]
   16528:	7818      	ldrb	r0, [r3, #0]
   1652a:	f010 fbfd 	bl	26d28 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1652e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16530:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16532:	d502      	bpl.n	1653a <bt_recv+0x2a>
			hci_event_prio(buf);
   16534:	4628      	mov	r0, r5
   16536:	f7ff ff9f 	bl	16478 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1653a:	f014 0002 	ands.w	r0, r4, #2
   1653e:	d0f1      	beq.n	16524 <bt_recv+0x14>
			rx_queue_put(buf);
   16540:	4628      	mov	r0, r5
   16542:	e7ec      	b.n	1651e <bt_recv+0xe>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16544:	4804      	ldr	r0, [pc, #16]	; (16558 <bt_recv+0x48>)
   16546:	2145      	movs	r1, #69	; 0x45
   16548:	f00f fb63 	bl	25c12 <z_log_minimal_printk>
		net_buf_unref(buf);
   1654c:	4628      	mov	r0, r5
   1654e:	f007 feb5 	bl	1e2bc <net_buf_unref>
		return -EINVAL;
   16552:	f06f 0015 	mvn.w	r0, #21
   16556:	e7e5      	b.n	16524 <bt_recv+0x14>
   16558:	0002c465 	.word	0x0002c465

0001655c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1655c:	4a08      	ldr	r2, [pc, #32]	; (16580 <bt_hci_driver_register+0x24>)
{
   1655e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   16560:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   16564:	b930      	cbnz	r0, 16574 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   16566:	68d9      	ldr	r1, [r3, #12]
   16568:	b139      	cbz	r1, 1657a <bt_hci_driver_register+0x1e>
   1656a:	6959      	ldr	r1, [r3, #20]
   1656c:	b129      	cbz	r1, 1657a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1656e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   16572:	4770      	bx	lr
		return -EALREADY;
   16574:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16578:	4770      	bx	lr
		return -EINVAL;
   1657a:	f06f 0015 	mvn.w	r0, #21
}
   1657e:	4770      	bx	lr
   16580:	20000340 	.word	0x20000340

00016584 <bt_finalize_init>:
{
   16584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16586:	4c26      	ldr	r4, [pc, #152]	; (16620 <bt_finalize_init+0x9c>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16588:	4d26      	ldr	r5, [pc, #152]	; (16624 <bt_finalize_init+0xa0>)
		BT_INFO("Identity[%d]: %s",
   1658a:	4f27      	ldr	r7, [pc, #156]	; (16628 <bt_finalize_init+0xa4>)
   1658c:	2104      	movs	r1, #4
   1658e:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   16592:	f010 fbf7 	bl	26d84 <atomic_or>
		bt_le_scan_update(false);
   16596:	2000      	movs	r0, #0
   16598:	f000 fe38 	bl	1720c <bt_le_scan_update>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1659c:	79e3      	ldrb	r3, [r4, #7]
   1659e:	4a23      	ldr	r2, [pc, #140]	; (1662c <bt_finalize_init+0xa8>)
   165a0:	4620      	mov	r0, r4
   165a2:	2b01      	cmp	r3, #1
   165a4:	bf98      	it	ls
   165a6:	4615      	movls	r5, r2
   165a8:	f7fe fc64 	bl	14e74 <bt_addr_le_str_real>
   165ac:	462a      	mov	r2, r5
   165ae:	4603      	mov	r3, r0
   165b0:	2149      	movs	r1, #73	; 0x49
   165b2:	481f      	ldr	r0, [pc, #124]	; (16630 <bt_finalize_init+0xac>)
   165b4:	f00f fb2d 	bl	25c12 <z_log_minimal_printk>
	for (i = 1; i < bt_dev.id_count; i++) {
   165b8:	4626      	mov	r6, r4
   165ba:	2501      	movs	r5, #1
   165bc:	79e3      	ldrb	r3, [r4, #7]
   165be:	429d      	cmp	r5, r3
   165c0:	f106 0607 	add.w	r6, r6, #7
   165c4:	db20      	blt.n	16608 <bt_finalize_init+0x84>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   165c6:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
   165ca:	4628      	mov	r0, r5
   165cc:	f7fe fede 	bl	1538c <ver_str>
   165d0:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   165d4:	9301      	str	r3, [sp, #4]
   165d6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   165da:	9300      	str	r3, [sp, #0]
   165dc:	4602      	mov	r2, r0
   165de:	462b      	mov	r3, r5
   165e0:	2149      	movs	r1, #73	; 0x49
   165e2:	4814      	ldr	r0, [pc, #80]	; (16634 <bt_finalize_init+0xb0>)
   165e4:	f00f fb15 	bl	25c12 <z_log_minimal_printk>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   165e8:	f894 5069 	ldrb.w	r5, [r4, #105]	; 0x69
   165ec:	4628      	mov	r0, r5
   165ee:	f7fe fecd 	bl	1538c <ver_str>
   165f2:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   165f6:	9300      	str	r3, [sp, #0]
   165f8:	4602      	mov	r2, r0
   165fa:	462b      	mov	r3, r5
   165fc:	480e      	ldr	r0, [pc, #56]	; (16638 <bt_finalize_init+0xb4>)
   165fe:	2149      	movs	r1, #73	; 0x49
   16600:	f00f fb07 	bl	25c12 <z_log_minimal_printk>
}
   16604:	b003      	add	sp, #12
   16606:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_INFO("Identity[%d]: %s",
   16608:	4630      	mov	r0, r6
   1660a:	f7fe fc33 	bl	14e74 <bt_addr_le_str_real>
   1660e:	462a      	mov	r2, r5
   16610:	4603      	mov	r3, r0
   16612:	2149      	movs	r1, #73	; 0x49
   16614:	4638      	mov	r0, r7
   16616:	f00f fafc 	bl	25c12 <z_log_minimal_printk>
	for (i = 1; i < bt_dev.id_count; i++) {
   1661a:	3501      	adds	r5, #1
   1661c:	e7ce      	b.n	165bc <bt_finalize_init+0x38>
   1661e:	bf00      	nop
   16620:	20000340 	.word	0x20000340
   16624:	0002c47e 	.word	0x0002c47e
   16628:	0002c496 	.word	0x0002c496
   1662c:	0002e265 	.word	0x0002e265
   16630:	0002c482 	.word	0x0002c482
   16634:	0002c4ac 	.word	0x0002c4ac
   16638:	0002c4ef 	.word	0x0002c4ef

0001663c <init_work>:
{
   1663c:	b510      	push	{r4, lr}
	err = bt_init();
   1663e:	f7fa fb1f 	bl	10c80 <bt_init>
	if (ready_cb) {
   16642:	4b03      	ldr	r3, [pc, #12]	; (16650 <init_work+0x14>)
   16644:	681b      	ldr	r3, [r3, #0]
   16646:	b113      	cbz	r3, 1664e <init_work+0x12>
}
   16648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1664c:	4718      	bx	r3
}
   1664e:	bd10      	pop	{r4, pc}
   16650:	20002314 	.word	0x20002314

00016654 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   16654:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   16656:	4d34      	ldr	r5, [pc, #208]	; (16728 <bt_enable+0xd4>)
   16658:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   1665c:	b088      	sub	sp, #32
   1665e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   16660:	b943      	cbnz	r3, 16674 <bt_enable+0x20>
		BT_ERR("No HCI driver registered");
   16662:	4832      	ldr	r0, [pc, #200]	; (1672c <bt_enable+0xd8>)
   16664:	2145      	movs	r1, #69	; 0x45
   16666:	f00f fad4 	bl	25c12 <z_log_minimal_printk>
		return -ENODEV;
   1666a:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1666e:	4620      	mov	r0, r4
   16670:	b008      	add	sp, #32
   16672:	bd70      	pop	{r4, r5, r6, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16674:	f06f 0102 	mvn.w	r1, #2
   16678:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   1667c:	f010 fb91 	bl	26da2 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16680:	2101      	movs	r1, #1
   16682:	f010 fb7f 	bl	26d84 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16686:	07c3      	lsls	r3, r0, #31
   16688:	d44a      	bmi.n	16720 <bt_enable+0xcc>
		err = bt_settings_init();
   1668a:	f7fe fd49 	bl	15120 <bt_settings_init>
		if (err) {
   1668e:	4604      	mov	r4, r0
   16690:	2800      	cmp	r0, #0
   16692:	d1ec      	bne.n	1666e <bt_enable+0x1a>
	ready_cb = cb;
   16694:	4b26      	ldr	r3, [pc, #152]	; (16730 <bt_enable+0xdc>)
   16696:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16698:	2201      	movs	r2, #1
   1669a:	4611      	mov	r1, r2
   1669c:	f505 7090 	add.w	r0, r5, #288	; 0x120
   166a0:	f013 f9bd 	bl	29a1e <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   166a4:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   166a8:	f013 f997 	bl	299da <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   166ac:	2200      	movs	r2, #0
   166ae:	2300      	movs	r3, #0
   166b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   166b4:	f06f 0308 	mvn.w	r3, #8
   166b8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   166bc:	e9cd 4400 	strd	r4, r4, [sp]
   166c0:	4b1c      	ldr	r3, [pc, #112]	; (16734 <bt_enable+0xe0>)
   166c2:	491d      	ldr	r1, [pc, #116]	; (16738 <bt_enable+0xe4>)
   166c4:	9404      	str	r4, [sp, #16]
   166c6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   166ca:	481c      	ldr	r0, [pc, #112]	; (1673c <bt_enable+0xe8>)
   166cc:	f00b fcec 	bl	220a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   166d0:	491b      	ldr	r1, [pc, #108]	; (16740 <bt_enable+0xec>)
   166d2:	481a      	ldr	r0, [pc, #104]	; (1673c <bt_enable+0xe8>)
   166d4:	f013 f958 	bl	29988 <z_impl_k_thread_name_set>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   166d8:	491a      	ldr	r1, [pc, #104]	; (16744 <bt_enable+0xf0>)
   166da:	481b      	ldr	r0, [pc, #108]	; (16748 <bt_enable+0xf4>)
   166dc:	9400      	str	r4, [sp, #0]
   166de:	f06f 0307 	mvn.w	r3, #7
   166e2:	f640 0298 	movw	r2, #2200	; 0x898
   166e6:	f00c fbd7 	bl	22e98 <k_work_queue_start>
   166ea:	4918      	ldr	r1, [pc, #96]	; (1674c <bt_enable+0xf8>)
   166ec:	4816      	ldr	r0, [pc, #88]	; (16748 <bt_enable+0xf4>)
   166ee:	f013 f94b 	bl	29988 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   166f2:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   166f6:	68db      	ldr	r3, [r3, #12]
   166f8:	4798      	blx	r3
	if (err) {
   166fa:	4604      	mov	r4, r0
   166fc:	b128      	cbz	r0, 1670a <bt_enable+0xb6>
		BT_ERR("HCI driver open failed (%d)", err);
   166fe:	4602      	mov	r2, r0
   16700:	2145      	movs	r1, #69	; 0x45
   16702:	4813      	ldr	r0, [pc, #76]	; (16750 <bt_enable+0xfc>)
   16704:	f00f fa85 	bl	25c12 <z_log_minimal_printk>
		return err;
   16708:	e7b1      	b.n	1666e <bt_enable+0x1a>
	if (!cb) {
   1670a:	b926      	cbnz	r6, 16716 <bt_enable+0xc2>
}
   1670c:	b008      	add	sp, #32
   1670e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   16712:	f7fa bab5 	b.w	10c80 <bt_init>
	k_work_submit(&bt_dev.init);
   16716:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1671a:	f00c fb9f 	bl	22e5c <k_work_submit>
	return 0;
   1671e:	e7a6      	b.n	1666e <bt_enable+0x1a>
		return -EALREADY;
   16720:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16724:	e7a3      	b.n	1666e <bt_enable+0x1a>
   16726:	bf00      	nop
   16728:	20000340 	.word	0x20000340
   1672c:	0002c690 	.word	0x0002c690
   16730:	20002314 	.word	0x20002314
   16734:	00016331 	.word	0x00016331
   16738:	20004280 	.word	0x20004280
   1673c:	200019b8 	.word	0x200019b8
   16740:	0002c6ae 	.word	0x0002c6ae
   16744:	20003980 	.word	0x20003980
   16748:	20001918 	.word	0x20001918
   1674c:	0002c6b4 	.word	0x0002c6b4
   16750:	0002c6ba 	.word	0x0002c6ba

00016754 <bt_is_ready>:
   16754:	4b04      	ldr	r3, [pc, #16]	; (16768 <bt_is_ready+0x14>)
   16756:	f3bf 8f5b 	dmb	ish
   1675a:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
   1675e:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   16762:	f3c0 0080 	ubfx	r0, r0, #2, #1
   16766:	4770      	bx	lr
   16768:	20000340 	.word	0x20000340

0001676c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1676c:	4800      	ldr	r0, [pc, #0]	; (16770 <bt_get_name+0x4>)
   1676e:	4770      	bx	lr
   16770:	0002c6db 	.word	0x0002c6db

00016774 <bt_data_parse>:
#endif

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   16774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16776:	4604      	mov	r4, r0
   16778:	460e      	mov	r6, r1
   1677a:	4617      	mov	r7, r2
	while (ad->len > 1) {
   1677c:	88a3      	ldrh	r3, [r4, #4]
   1677e:	2b01      	cmp	r3, #1
   16780:	d801      	bhi.n	16786 <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   16782:	b003      	add	sp, #12
   16784:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   16786:	4620      	mov	r0, r4
   16788:	f012 fc92 	bl	290b0 <net_buf_simple_pull_u8>
		if (len == 0U) {
   1678c:	4605      	mov	r5, r0
   1678e:	2800      	cmp	r0, #0
   16790:	d0f7      	beq.n	16782 <bt_data_parse+0xe>
		if (len > ad->len) {
   16792:	88a2      	ldrh	r2, [r4, #4]
   16794:	b283      	uxth	r3, r0
   16796:	429a      	cmp	r2, r3
   16798:	d206      	bcs.n	167a8 <bt_data_parse+0x34>
			BT_WARN("Malformed data");
   1679a:	480d      	ldr	r0, [pc, #52]	; (167d0 <bt_data_parse+0x5c>)
   1679c:	2157      	movs	r1, #87	; 0x57
}
   1679e:	b003      	add	sp, #12
   167a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
   167a4:	f00f ba35 	b.w	25c12 <z_log_minimal_printk>
		data.type = net_buf_simple_pull_u8(ad);
   167a8:	4620      	mov	r0, r4
   167aa:	f012 fc81 	bl	290b0 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   167ae:	3d01      	subs	r5, #1
		data.data = ad->data;
   167b0:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   167b2:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   167b6:	4639      	mov	r1, r7
   167b8:	4668      	mov	r0, sp
		data.data_len = len - 1;
   167ba:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   167be:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   167c0:	47b0      	blx	r6
   167c2:	2800      	cmp	r0, #0
   167c4:	d0dd      	beq.n	16782 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   167c6:	4629      	mov	r1, r5
   167c8:	4620      	mov	r0, r4
   167ca:	f007 fe53 	bl	1e474 <net_buf_simple_pull>
   167ce:	e7d5      	b.n	1677c <bt_data_parse+0x8>
   167d0:	0002c6e2 	.word	0x0002c6e2

000167d4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   167d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   167d6:	4f0b      	ldr	r7, [pc, #44]	; (16804 <id_find+0x30>)
{
   167d8:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   167da:	2500      	movs	r5, #0
   167dc:	79fb      	ldrb	r3, [r7, #7]
   167de:	b2ec      	uxtb	r4, r5
   167e0:	42a3      	cmp	r3, r4
   167e2:	d802      	bhi.n	167ea <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   167e4:	f06f 0401 	mvn.w	r4, #1
   167e8:	e009      	b.n	167fe <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   167ea:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   167ee:	2207      	movs	r2, #7
   167f0:	4439      	add	r1, r7
   167f2:	4630      	mov	r0, r6
   167f4:	f010 f99c 	bl	26b30 <memcmp>
   167f8:	3501      	adds	r5, #1
   167fa:	2800      	cmp	r0, #0
   167fc:	d1ee      	bne.n	167dc <id_find+0x8>
}
   167fe:	4620      	mov	r0, r4
   16800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16802:	bf00      	nop
   16804:	20000340 	.word	0x20000340

00016808 <hci_id_add>:
{
   16808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1680c:	4688      	mov	r8, r1
   1680e:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   16810:	4605      	mov	r5, r0
   16812:	bb08      	cbnz	r0, 16858 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   16814:	2127      	movs	r1, #39	; 0x27
   16816:	f242 0027 	movw	r0, #8231	; 0x2027
   1681a:	f7ff f903 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   1681e:	4604      	mov	r4, r0
   16820:	b1f0      	cbz	r0, 16860 <hci_id_add+0x58>
	return net_buf_simple_add(&buf->b, len);
   16822:	2127      	movs	r1, #39	; 0x27
   16824:	3008      	adds	r0, #8
   16826:	f007 fe5f 	bl	1e4e8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1682a:	4641      	mov	r1, r8
   1682c:	4606      	mov	r6, r0
   1682e:	f010 fb63 	bl	26ef8 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   16832:	4639      	mov	r1, r7
   16834:	2210      	movs	r2, #16
   16836:	1df0      	adds	r0, r6, #7
   16838:	f010 f98b 	bl	26b52 <memcpy>
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
   1683c:	490a      	ldr	r1, [pc, #40]	; (16868 <hci_id_add+0x60>)
   1683e:	2210      	movs	r2, #16
   16840:	f106 0017 	add.w	r0, r6, #23
   16844:	f010 f985 	bl	26b52 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   16848:	462a      	mov	r2, r5
   1684a:	4621      	mov	r1, r4
   1684c:	f242 0027 	movw	r0, #8231	; 0x2027
}
   16850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   16854:	f7ff b92e 	b.w	15ab4 <bt_hci_cmd_send_sync>
		return -EINVAL;
   16858:	f06f 0015 	mvn.w	r0, #21
}
   1685c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   16860:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16864:	e7fa      	b.n	1685c <hci_id_add+0x54>
   16866:	bf00      	nop
   16868:	200004a4 	.word	0x200004a4

0001686c <atomic_get.constprop.0>:
   1686c:	4b03      	ldr	r3, [pc, #12]	; (1687c <atomic_get.constprop.0+0x10>)
   1686e:	f3bf 8f5b 	dmb	ish
   16872:	6818      	ldr	r0, [r3, #0]
   16874:	f3bf 8f5b 	dmb	ish
}
   16878:	4770      	bx	lr
   1687a:	bf00      	nop
   1687c:	2000040c 	.word	0x2000040c

00016880 <atomic_or.constprop.0.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16880:	4b06      	ldr	r3, [pc, #24]	; (1689c <atomic_or.constprop.0.isra.0+0x1c>)
   16882:	f3bf 8f5b 	dmb	ish
   16886:	e853 2f00 	ldrex	r2, [r3]
   1688a:	4302      	orrs	r2, r0
   1688c:	e843 2100 	strex	r1, r2, [r3]
   16890:	2900      	cmp	r1, #0
   16892:	d1f8      	bne.n	16886 <atomic_or.constprop.0.isra.0+0x6>
   16894:	f3bf 8f5b 	dmb	ish
}
   16898:	4770      	bx	lr
   1689a:	bf00      	nop
   1689c:	2000040c 	.word	0x2000040c

000168a0 <set_random_address>:
{
   168a0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   168a2:	4914      	ldr	r1, [pc, #80]	; (168f4 <set_random_address+0x54>)
   168a4:	2206      	movs	r2, #6
   168a6:	4605      	mov	r5, r0
   168a8:	f010 f942 	bl	26b30 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   168ac:	4604      	mov	r4, r0
   168ae:	b1e0      	cbz	r0, 168ea <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   168b0:	2106      	movs	r1, #6
   168b2:	f242 0005 	movw	r0, #8197	; 0x2005
   168b6:	f7ff f8b5 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   168ba:	4604      	mov	r4, r0
   168bc:	b1b8      	cbz	r0, 168ee <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   168be:	2206      	movs	r2, #6
   168c0:	4629      	mov	r1, r5
   168c2:	3008      	adds	r0, #8
   168c4:	f012 fc10 	bl	290e8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   168c8:	4621      	mov	r1, r4
   168ca:	2200      	movs	r2, #0
   168cc:	f242 0005 	movw	r0, #8197	; 0x2005
   168d0:	f7ff f8f0 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   168d4:	4604      	mov	r4, r0
   168d6:	b940      	cbnz	r0, 168ea <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   168d8:	2206      	movs	r2, #6
   168da:	4806      	ldr	r0, [pc, #24]	; (168f4 <set_random_address+0x54>)
   168dc:	4629      	mov	r1, r5
   168de:	f010 f938 	bl	26b52 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   168e2:	4b05      	ldr	r3, [pc, #20]	; (168f8 <set_random_address+0x58>)
   168e4:	2201      	movs	r2, #1
   168e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   168ea:	4620      	mov	r0, r4
   168ec:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   168ee:	f06f 0468 	mvn.w	r4, #104	; 0x68
   168f2:	e7fa      	b.n	168ea <set_random_address+0x4a>
   168f4:	200003a1 	.word	0x200003a1
   168f8:	20000340 	.word	0x20000340

000168fc <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   168fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   168fe:	4605      	mov	r5, r0
   16900:	b087      	sub	sp, #28
   16902:	4614      	mov	r4, r2
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16904:	460e      	mov	r6, r1
   16906:	b379      	cbz	r1, 16968 <id_create+0x6c>
   16908:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1690a:	2207      	movs	r2, #7
   1690c:	4669      	mov	r1, sp
   1690e:	4630      	mov	r0, r6
   16910:	9300      	str	r3, [sp, #0]
   16912:	f8cd 3003 	str.w	r3, [sp, #3]
   16916:	f010 f90b 	bl	26b30 <memcmp>
   1691a:	b328      	cbz	r0, 16968 <id_create+0x6c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1691c:	4825      	ldr	r0, [pc, #148]	; (169b4 <id_create+0xb8>)
   1691e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   16922:	4631      	mov	r1, r6
   16924:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   16926:	f010 fae7 	bl	26ef8 <bt_addr_le_copy>
#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
   1692a:	4823      	ldr	r0, [pc, #140]	; (169b8 <id_create+0xbc>)
		uint8_t zero_irk[16] = { 0 };
   1692c:	2300      	movs	r3, #0
   1692e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   16932:	e9cd 3304 	strd	r3, r3, [sp, #16]
			memcpy(&bt_dev.irk[id], irk, 16);
   16936:	eb00 1505 	add.w	r5, r0, r5, lsl #4
		if (irk && memcmp(irk, zero_irk, 16)) {
   1693a:	b364      	cbz	r4, 16996 <id_create+0x9a>
   1693c:	2210      	movs	r2, #16
   1693e:	a902      	add	r1, sp, #8
   16940:	4620      	mov	r0, r4
   16942:	f010 f8f5 	bl	26b30 <memcmp>
   16946:	b330      	cbz	r0, 16996 <id_create+0x9a>
			memcpy(&bt_dev.irk[id], irk, 16);
   16948:	2210      	movs	r2, #16
   1694a:	4621      	mov	r1, r4
   1694c:	4628      	mov	r0, r5
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
   1694e:	f010 f900 	bl	26b52 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16952:	f7ff ff8b 	bl	1686c <atomic_get.constprop.0>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   16956:	0742      	lsls	r2, r0, #29
   16958:	f3c0 0380 	ubfx	r3, r0, #2, #1
   1695c:	d527      	bpl.n	169ae <id_create+0xb2>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   1695e:	f7fe fb97 	bl	15090 <bt_settings_save_id>
	}

	return 0;
   16962:	2000      	movs	r0, #0
}
   16964:	b007      	add	sp, #28
   16966:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_addr_le_create_static(&new_addr);
   16968:	a802      	add	r0, sp, #8
   1696a:	f010 f9cf 	bl	26d0c <bt_addr_le_create_static>
			if (err) {
   1696e:	2800      	cmp	r0, #0
   16970:	d1f8      	bne.n	16964 <id_create+0x68>
		} while (id_find(&new_addr) >= 0);
   16972:	a802      	add	r0, sp, #8
   16974:	f7ff ff2e 	bl	167d4 <id_find>
   16978:	2800      	cmp	r0, #0
   1697a:	daf5      	bge.n	16968 <id_create+0x6c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1697c:	480d      	ldr	r0, [pc, #52]	; (169b4 <id_create+0xb8>)
   1697e:	ebc5 07c5 	rsb	r7, r5, r5, lsl #3
   16982:	4407      	add	r7, r0
   16984:	a902      	add	r1, sp, #8
   16986:	4638      	mov	r0, r7
   16988:	f010 fab6 	bl	26ef8 <bt_addr_le_copy>
		if (addr) {
   1698c:	2e00      	cmp	r6, #0
   1698e:	d0cc      	beq.n	1692a <id_create+0x2e>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   16990:	4639      	mov	r1, r7
   16992:	4630      	mov	r0, r6
   16994:	e7c7      	b.n	16926 <id_create+0x2a>
			err = bt_rand(&bt_dev.irk[id], 16);
   16996:	2110      	movs	r1, #16
   16998:	4628      	mov	r0, r5
   1699a:	f009 fe03 	bl	205a4 <bt_rand>
			if (err) {
   1699e:	2800      	cmp	r0, #0
   169a0:	d1e0      	bne.n	16964 <id_create+0x68>
			if (irk) {
   169a2:	2c00      	cmp	r4, #0
   169a4:	d0d5      	beq.n	16952 <id_create+0x56>
				memcpy(irk, &bt_dev.irk[id], 16);
   169a6:	2210      	movs	r2, #16
   169a8:	4629      	mov	r1, r5
   169aa:	4620      	mov	r0, r4
   169ac:	e7cf      	b.n	1694e <id_create+0x52>
	return 0;
   169ae:	4618      	mov	r0, r3
   169b0:	e7d8      	b.n	16964 <id_create+0x68>
   169b2:	bf00      	nop
   169b4:	20000340 	.word	0x20000340
   169b8:	200004a4 	.word	0x200004a4

000169bc <bt_id_set_private_addr>:
{
   169bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   169be:	4602      	mov	r2, r0
   169c0:	f7ff ff54 	bl	1686c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   169c4:	0483      	lsls	r3, r0, #18
   169c6:	d42b      	bmi.n	16a20 <bt_id_set_private_addr+0x64>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   169c8:	0110      	lsls	r0, r2, #4
   169ca:	4d16      	ldr	r5, [pc, #88]	; (16a24 <bt_id_set_private_addr+0x68>)
   169cc:	f500 70b2 	add.w	r0, r0, #356	; 0x164
   169d0:	4669      	mov	r1, sp
   169d2:	4428      	add	r0, r5
   169d4:	f010 f916 	bl	26c04 <bt_rpa_create>
	if (!err) {
   169d8:	4604      	mov	r4, r0
   169da:	b940      	cbnz	r0, 169ee <bt_id_set_private_addr+0x32>
		err = set_random_address(&rpa);
   169dc:	4668      	mov	r0, sp
   169de:	f7ff ff5f 	bl	168a0 <set_random_address>
		if (!err) {
   169e2:	4604      	mov	r4, r0
   169e4:	b918      	cbnz	r0, 169ee <bt_id_set_private_addr+0x32>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   169e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   169ea:	f7ff ff49 	bl	16880 <atomic_or.constprop.0.isra.0>
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   169ee:	f8b5 51a8 	ldrh.w	r5, [r5, #424]	; 0x1a8
   169f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   169f6:	435d      	muls	r5, r3
			return ((t * to_hz + off) / from_hz);
   169f8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   169fc:	f240 30e7 	movw	r0, #999	; 0x3e7
   16a00:	2100      	movs	r1, #0
   16a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16a06:	2300      	movs	r3, #0
   16a08:	fbe5 0106 	umlal	r0, r1, r5, r6
   16a0c:	f7e9 fb68 	bl	e0 <__aeabi_uldivmod>
   16a10:	4602      	mov	r2, r0
   16a12:	460b      	mov	r3, r1
   16a14:	4804      	ldr	r0, [pc, #16]	; (16a28 <bt_id_set_private_addr+0x6c>)
   16a16:	f00c fb37 	bl	23088 <k_work_schedule>
}
   16a1a:	4620      	mov	r0, r4
   16a1c:	b002      	add	sp, #8
   16a1e:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   16a20:	2400      	movs	r4, #0
   16a22:	e7fa      	b.n	16a1a <bt_id_set_private_addr+0x5e>
   16a24:	20000340 	.word	0x20000340
   16a28:	200004b8 	.word	0x200004b8

00016a2c <le_update_private_addr>:
{
   16a2c:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16a2e:	4b14      	ldr	r3, [pc, #80]	; (16a80 <le_update_private_addr+0x54>)
   16a30:	f3bf 8f5b 	dmb	ish
   16a34:	e853 2f00 	ldrex	r2, [r3]
   16a38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   16a3c:	e843 2100 	strex	r1, r2, [r3]
   16a40:	2900      	cmp	r1, #0
   16a42:	d1f7      	bne.n	16a34 <le_update_private_addr+0x8>
   16a44:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16a48:	f7ff ff10 	bl	1686c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   16a4c:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16a4e:	f3c0 1480 	ubfx	r4, r0, #6, #1
   16a52:	d502      	bpl.n	16a5a <le_update_private_addr+0x2e>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   16a54:	2000      	movs	r0, #0
   16a56:	f010 fa9e 	bl	26f96 <bt_le_scan_set_enable>
	err = bt_id_set_private_addr(id);
   16a5a:	2000      	movs	r0, #0
   16a5c:	f7ff ffae 	bl	169bc <bt_id_set_private_addr>
	if (err) {
   16a60:	4602      	mov	r2, r0
   16a62:	b128      	cbz	r0, 16a70 <le_update_private_addr+0x44>
}
   16a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Failed to update RPA address (%d)", err);
   16a68:	4806      	ldr	r0, [pc, #24]	; (16a84 <le_update_private_addr+0x58>)
   16a6a:	2157      	movs	r1, #87	; 0x57
   16a6c:	f00f b8d1 	b.w	25c12 <z_log_minimal_printk>
	if (scan_enabled) {
   16a70:	b124      	cbz	r4, 16a7c <le_update_private_addr+0x50>
}
   16a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   16a76:	2001      	movs	r0, #1
   16a78:	f010 ba8d 	b.w	26f96 <bt_le_scan_set_enable>
}
   16a7c:	bd10      	pop	{r4, pc}
   16a7e:	bf00      	nop
   16a80:	2000040c 	.word	0x2000040c
   16a84:	0002c720 	.word	0x0002c720

00016a88 <rpa_timeout>:
			bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   16a88:	2100      	movs	r1, #0
{
   16a8a:	b508      	push	{r3, lr}
			bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   16a8c:	2202      	movs	r2, #2
   16a8e:	4608      	mov	r0, r1
   16a90:	f001 fc42 	bl	18318 <bt_conn_lookup_state_le>
		if (conn) {
   16a94:	b118      	cbz	r0, 16a9e <rpa_timeout+0x16>
			bt_conn_unref(conn);
   16a96:	f001 f951 	bl	17d3c <bt_conn_unref>
			bt_le_create_conn_cancel();
   16a9a:	f7ff f91b 	bl	15cd4 <bt_le_create_conn_cancel>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16a9e:	f7ff fee5 	bl	1686c <atomic_get.constprop.0>
	if (!(adv_enabled ||
   16aa2:	04c1      	lsls	r1, r0, #19
   16aa4:	d415      	bmi.n	16ad2 <rpa_timeout+0x4a>
   16aa6:	f7ff fee1 	bl	1686c <atomic_get.constprop.0>
   16aaa:	0642      	lsls	r2, r0, #25
   16aac:	d40d      	bmi.n	16aca <rpa_timeout+0x42>
   16aae:	f3bf 8f5b 	dmb	ish
   16ab2:	4b0a      	ldr	r3, [pc, #40]	; (16adc <rpa_timeout+0x54>)
   16ab4:	e853 2f00 	ldrex	r2, [r3]
   16ab8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   16abc:	e843 2100 	strex	r1, r2, [r3]
   16ac0:	2900      	cmp	r1, #0
   16ac2:	d1f7      	bne.n	16ab4 <rpa_timeout+0x2c>
   16ac4:	f3bf 8f5b 	dmb	ish
}
   16ac8:	bd08      	pop	{r3, pc}
   16aca:	f7ff fecf 	bl	1686c <atomic_get.constprop.0>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   16ace:	05c3      	lsls	r3, r0, #23
   16ad0:	d5ed      	bpl.n	16aae <rpa_timeout+0x26>
}
   16ad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	le_update_private_addr();
   16ad6:	f7ff bfa9 	b.w	16a2c <le_update_private_addr>
   16ada:	bf00      	nop
   16adc:	2000040c 	.word	0x2000040c

00016ae0 <bt_id_pending_keys_update>:
   16ae0:	4b0a      	ldr	r3, [pc, #40]	; (16b0c <bt_id_pending_keys_update+0x2c>)
   16ae2:	f3bf 8f5b 	dmb	ish
   16ae6:	e853 2f00 	ldrex	r2, [r3]
   16aea:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   16aee:	e843 1000 	strex	r0, r1, [r3]
   16af2:	2800      	cmp	r0, #0
   16af4:	d1f7      	bne.n	16ae6 <bt_id_pending_keys_update+0x6>
   16af6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   16afa:	0413      	lsls	r3, r2, #16
   16afc:	d504      	bpl.n	16b08 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_ALL, pending_id_update, NULL);
   16afe:	4904      	ldr	r1, [pc, #16]	; (16b10 <bt_id_pending_keys_update+0x30>)
   16b00:	2200      	movs	r2, #0
   16b02:	203f      	movs	r0, #63	; 0x3f
   16b04:	f007 b806 	b.w	1db14 <bt_keys_foreach>
}
   16b08:	4770      	bx	lr
   16b0a:	bf00      	nop
   16b0c:	2000040c 	.word	0x2000040c
   16b10:	00026f59 	.word	0x00026f59

00016b14 <bt_id_add>:
{
   16b14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16b18:	4d50      	ldr	r5, [pc, #320]	; (16c5c <bt_id_add+0x148>)
   16b1a:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   16b1e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
{
   16b22:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16b24:	b10a      	cbz	r2, 16b2a <bt_id_add+0x16>
   16b26:	429a      	cmp	r2, r3
   16b28:	d209      	bcs.n	16b3e <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   16b2a:	3301      	adds	r3, #1
   16b2c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   16b30:	7a23      	ldrb	r3, [r4, #8]
   16b32:	f043 0304 	orr.w	r3, r3, #4
   16b36:	7223      	strb	r3, [r4, #8]
}
   16b38:	b002      	add	sp, #8
   16b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16b3e:	2100      	movs	r1, #0
   16b40:	2206      	movs	r2, #6
   16b42:	4608      	mov	r0, r1
   16b44:	f001 fbe8 	bl	18318 <bt_conn_lookup_state_le>
	if (conn) {
   16b48:	4606      	mov	r6, r0
   16b4a:	b168      	cbz	r0, 16b68 <bt_id_add+0x54>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16b4c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   16b50:	f7ff fe96 	bl	16880 <atomic_or.constprop.0.isra.0>
	keys->state |= flag;
   16b54:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
   16b56:	4630      	mov	r0, r6
	keys->state |= flag;
   16b58:	f043 0301 	orr.w	r3, r3, #1
   16b5c:	7223      	strb	r3, [r4, #8]
}
   16b5e:	b002      	add	sp, #8
   16b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   16b64:	f001 b8ea 	b.w	17d3c <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16b68:	f7ff fe80 	bl	1686c <atomic_get.constprop.0>
	if (scan_enabled) {
   16b6c:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16b6e:	f3c0 1780 	ubfx	r7, r0, #6, #1
   16b72:	d502      	bpl.n	16b7a <bt_id_add+0x66>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   16b74:	4630      	mov	r0, r6
   16b76:	f010 fa0e 	bl	26f96 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   16b7a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   16b7e:	b143      	cbz	r3, 16b92 <bt_id_add+0x7e>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16b80:	2000      	movs	r0, #0
   16b82:	f010 f9c7 	bl	26f14 <addr_res_enable>
		if (err) {
   16b86:	b120      	cbz	r0, 16b92 <bt_id_add+0x7e>
			BT_WARN("Failed to disable address resolution");
   16b88:	4835      	ldr	r0, [pc, #212]	; (16c60 <bt_id_add+0x14c>)
   16b8a:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Set privacy mode command is not supported");
   16b8c:	f00f f841 	bl	25c12 <z_log_minimal_printk>
	if (err) {
   16b90:	e01c      	b.n	16bcc <bt_id_add+0xb8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   16b92:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   16b96:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   16b9a:	429a      	cmp	r2, r3
   16b9c:	d121      	bne.n	16be2 <bt_id_add+0xce>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   16b9e:	4831      	ldr	r0, [pc, #196]	; (16c64 <bt_id_add+0x150>)
   16ba0:	2157      	movs	r1, #87	; 0x57
   16ba2:	f00f f836 	bl	25c12 <z_log_minimal_printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   16ba6:	2200      	movs	r2, #0
   16ba8:	4611      	mov	r1, r2
   16baa:	f242 0029 	movw	r0, #8233	; 0x2029
   16bae:	f7fe ff81 	bl	15ab4 <bt_hci_cmd_send_sync>
		if (err) {
   16bb2:	b110      	cbz	r0, 16bba <bt_id_add+0xa6>
			BT_ERR("Failed to clear resolution list");
   16bb4:	482c      	ldr	r0, [pc, #176]	; (16c68 <bt_id_add+0x154>)
   16bb6:	2145      	movs	r1, #69	; 0x45
   16bb8:	e7e8      	b.n	16b8c <bt_id_add+0x78>
		bt_dev.le.rl_entries++;
   16bba:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   16bbe:	3301      	adds	r3, #1
   16bc0:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   16bc4:	7a23      	ldrb	r3, [r4, #8]
   16bc6:	f043 0304 	orr.w	r3, r3, #4
   16bca:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   16bcc:	2001      	movs	r0, #1
   16bce:	f010 f9a1 	bl	26f14 <addr_res_enable>
	if (scan_enabled) {
   16bd2:	2f00      	cmp	r7, #0
   16bd4:	d0b0      	beq.n	16b38 <bt_id_add+0x24>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   16bd6:	2001      	movs	r0, #1
}
   16bd8:	b002      	add	sp, #8
   16bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   16bde:	f010 b9da 	b.w	26f96 <bt_le_scan_set_enable>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   16be2:	4622      	mov	r2, r4
   16be4:	f104 0801 	add.w	r8, r4, #1
   16be8:	f812 0b2a 	ldrb.w	r0, [r2], #42
   16bec:	4641      	mov	r1, r8
   16bee:	f7ff fe0b 	bl	16808 <hci_id_add>
	if (err) {
   16bf2:	4606      	mov	r6, r0
   16bf4:	b110      	cbz	r0, 16bfc <bt_id_add+0xe8>
		BT_ERR("Failed to add IRK to controller");
   16bf6:	481d      	ldr	r0, [pc, #116]	; (16c6c <bt_id_add+0x158>)
   16bf8:	2145      	movs	r1, #69	; 0x45
   16bfa:	e7c7      	b.n	16b8c <bt_id_add+0x78>
	bt_dev.le.rl_entries++;
   16bfc:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   16c00:	3301      	adds	r3, #1
   16c02:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   16c06:	7a23      	ldrb	r3, [r4, #8]
   16c08:	f043 0304 	orr.w	r3, r3, #4
   16c0c:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   16c0e:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   16c12:	075b      	lsls	r3, r3, #29
   16c14:	d402      	bmi.n	16c1c <bt_id_add+0x108>
		BT_WARN("Set privacy mode command is not supported");
   16c16:	4816      	ldr	r0, [pc, #88]	; (16c70 <bt_id_add+0x15c>)
   16c18:	2157      	movs	r1, #87	; 0x57
   16c1a:	e7b7      	b.n	16b8c <bt_id_add+0x78>
	bt_addr_le_copy(&cp.id_addr, addr);
   16c1c:	4641      	mov	r1, r8
   16c1e:	4668      	mov	r0, sp
   16c20:	f010 f96a 	bl	26ef8 <bt_addr_le_copy>
	cp.mode = mode;
   16c24:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   16c26:	2108      	movs	r1, #8
   16c28:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   16c2c:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   16c30:	f7fe fef8 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   16c34:	4604      	mov	r4, r0
   16c36:	b910      	cbnz	r0, 16c3e <bt_id_add+0x12a>
		BT_ERR("Failed to set privacy mode");
   16c38:	480e      	ldr	r0, [pc, #56]	; (16c74 <bt_id_add+0x160>)
   16c3a:	2145      	movs	r1, #69	; 0x45
   16c3c:	e7a6      	b.n	16b8c <bt_id_add+0x78>
   16c3e:	2208      	movs	r2, #8
   16c40:	4669      	mov	r1, sp
   16c42:	4410      	add	r0, r2
   16c44:	f012 fa50 	bl	290e8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   16c48:	4632      	mov	r2, r6
   16c4a:	4621      	mov	r1, r4
   16c4c:	f242 004e 	movw	r0, #8270	; 0x204e
   16c50:	f7fe ff30 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   16c54:	2800      	cmp	r0, #0
   16c56:	d0b9      	beq.n	16bcc <bt_id_add+0xb8>
   16c58:	e7ee      	b.n	16c38 <bt_id_add+0x124>
   16c5a:	bf00      	nop
   16c5c:	20000340 	.word	0x20000340
   16c60:	0002c747 	.word	0x0002c747
   16c64:	0002c771 	.word	0x0002c771
   16c68:	0002c7a7 	.word	0x0002c7a7
   16c6c:	0002c7cc 	.word	0x0002c7cc
   16c70:	0002c7f1 	.word	0x0002c7f1
   16c74:	0002c820 	.word	0x0002c820

00016c78 <bt_id_del>:
{
   16c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
   16c7c:	4d40      	ldr	r5, [pc, #256]	; (16d80 <bt_id_del+0x108>)
   16c7e:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   16c82:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
{
   16c86:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
   16c88:	b112      	cbz	r2, 16c90 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   16c8a:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   16c8c:	4293      	cmp	r3, r2
   16c8e:	dd08      	ble.n	16ca2 <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   16c90:	3b01      	subs	r3, #1
   16c92:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   16c96:	7a23      	ldrb	r3, [r4, #8]
   16c98:	f023 0304 	bic.w	r3, r3, #4
   16c9c:	7223      	strb	r3, [r4, #8]
}
   16c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16ca2:	2100      	movs	r1, #0
   16ca4:	2206      	movs	r2, #6
   16ca6:	4608      	mov	r0, r1
   16ca8:	f001 fb36 	bl	18318 <bt_conn_lookup_state_le>
	if (conn) {
   16cac:	4606      	mov	r6, r0
   16cae:	b160      	cbz	r0, 16cca <bt_id_del+0x52>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16cb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   16cb4:	f7ff fde4 	bl	16880 <atomic_or.constprop.0.isra.0>
	keys->state |= flag;
   16cb8:	7a23      	ldrb	r3, [r4, #8]
   16cba:	f043 0302 	orr.w	r3, r3, #2
   16cbe:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   16cc0:	4630      	mov	r0, r6
}
   16cc2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   16cc6:	f001 b839 	b.w	17d3c <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16cca:	f7ff fdcf 	bl	1686c <atomic_get.constprop.0>
	if (scan_enabled) {
   16cce:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16cd0:	f3c0 1880 	ubfx	r8, r0, #6, #1
   16cd4:	d502      	bpl.n	16cdc <bt_id_del+0x64>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   16cd6:	4630      	mov	r0, r6
   16cd8:	f010 f95d 	bl	26f96 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16cdc:	2000      	movs	r0, #0
   16cde:	f010 f919 	bl	26f14 <addr_res_enable>
	if (err) {
   16ce2:	4606      	mov	r6, r0
   16ce4:	b190      	cbz	r0, 16d0c <bt_id_del+0x94>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   16ce6:	4602      	mov	r2, r0
   16ce8:	2145      	movs	r1, #69	; 0x45
   16cea:	4826      	ldr	r0, [pc, #152]	; (16d84 <bt_id_del+0x10c>)
   16cec:	f00e ff91 	bl	25c12 <z_log_minimal_printk>
	if (bt_dev.le.rl_entries) {
   16cf0:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   16cf4:	b113      	cbz	r3, 16cfc <bt_id_del+0x84>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   16cf6:	2001      	movs	r0, #1
   16cf8:	f010 f90c 	bl	26f14 <addr_res_enable>
	if (scan_enabled) {
   16cfc:	f1b8 0f00 	cmp.w	r8, #0
   16d00:	d0cd      	beq.n	16c9e <bt_id_del+0x26>
}
   16d02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   16d06:	2001      	movs	r0, #1
   16d08:	f010 b945 	b.w	26f96 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16d0c:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   16d10:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   16d14:	429a      	cmp	r2, r3
   16d16:	d20c      	bcs.n	16d32 <bt_id_del+0xba>
		bt_dev.le.rl_entries--;
   16d18:	3b01      	subs	r3, #1
   16d1a:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   16d1e:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_ALL, keys_add_id, NULL);
   16d20:	4919      	ldr	r1, [pc, #100]	; (16d88 <bt_id_del+0x110>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   16d22:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_ALL, keys_add_id, NULL);
   16d26:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   16d28:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_ALL, keys_add_id, NULL);
   16d2a:	203f      	movs	r0, #63	; 0x3f
   16d2c:	f006 fef2 	bl	1db14 <bt_keys_foreach>
		goto done;
   16d30:	e7de      	b.n	16cf0 <bt_id_del+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   16d32:	2107      	movs	r1, #7
   16d34:	f242 0028 	movw	r0, #8232	; 0x2028
   16d38:	f7fe fe74 	bl	15a24 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   16d3c:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   16d40:	4607      	mov	r7, r0
   16d42:	b920      	cbnz	r0, 16d4e <bt_id_del+0xd6>
		BT_ERR("Failed to remove IRK from controller");
   16d44:	4811      	ldr	r0, [pc, #68]	; (16d8c <bt_id_del+0x114>)
   16d46:	2145      	movs	r1, #69	; 0x45
   16d48:	f00e ff63 	bl	25c12 <z_log_minimal_printk>
		goto done;
   16d4c:	e7d0      	b.n	16cf0 <bt_id_del+0x78>
	return net_buf_simple_add(&buf->b, len);
   16d4e:	2107      	movs	r1, #7
   16d50:	3008      	adds	r0, #8
   16d52:	f007 fbc9 	bl	1e4e8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   16d56:	4649      	mov	r1, r9
   16d58:	f010 f8ce 	bl	26ef8 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   16d5c:	4632      	mov	r2, r6
   16d5e:	4639      	mov	r1, r7
   16d60:	f242 0028 	movw	r0, #8232	; 0x2028
   16d64:	f7fe fea6 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   16d68:	2800      	cmp	r0, #0
   16d6a:	d1eb      	bne.n	16d44 <bt_id_del+0xcc>
	bt_dev.le.rl_entries--;
   16d6c:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   16d70:	3b01      	subs	r3, #1
   16d72:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   16d76:	7a23      	ldrb	r3, [r4, #8]
   16d78:	f023 0304 	bic.w	r3, r3, #4
   16d7c:	7223      	strb	r3, [r4, #8]
   16d7e:	e7b7      	b.n	16cf0 <bt_id_del+0x78>
   16d80:	20000340 	.word	0x20000340
   16d84:	0002c840 	.word	0x0002c840
   16d88:	00026eff 	.word	0x00026eff
   16d8c:	0002c872 	.word	0x0002c872

00016d90 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   16d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d92:	460e      	mov	r6, r1
   16d94:	b087      	sub	sp, #28
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16d96:	4605      	mov	r5, r0
   16d98:	b930      	cbnz	r0, 16da8 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   16d9a:	4f29      	ldr	r7, [pc, #164]	; (16e40 <bt_id_create+0xb0>)
   16d9c:	79fb      	ldrb	r3, [r7, #7]
   16d9e:	2b01      	cmp	r3, #1
   16da0:	d124      	bne.n	16dec <bt_id_create+0x5c>
		return -ENOMEM;
   16da2:	f06f 000b 	mvn.w	r0, #11
   16da6:	e01f      	b.n	16de8 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16da8:	2300      	movs	r3, #0
   16daa:	2207      	movs	r2, #7
   16dac:	a902      	add	r1, sp, #8
   16dae:	9302      	str	r3, [sp, #8]
   16db0:	f8cd 300b 	str.w	r3, [sp, #11]
   16db4:	f00f febc 	bl	26b30 <memcmp>
   16db8:	2800      	cmp	r0, #0
   16dba:	d0ee      	beq.n	16d9a <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16dbc:	782b      	ldrb	r3, [r5, #0]
   16dbe:	2b01      	cmp	r3, #1
   16dc0:	d104      	bne.n	16dcc <bt_id_create+0x3c>
   16dc2:	79ab      	ldrb	r3, [r5, #6]
   16dc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16dc8:	2bc0      	cmp	r3, #192	; 0xc0
   16dca:	d006      	beq.n	16dda <bt_id_create+0x4a>
			BT_ERR("Only static random identity address supported");
   16dcc:	481d      	ldr	r0, [pc, #116]	; (16e44 <bt_id_create+0xb4>)
   16dce:	2145      	movs	r1, #69	; 0x45
   16dd0:	f00e ff1f 	bl	25c12 <z_log_minimal_printk>
			return -EINVAL;
   16dd4:	f06f 0015 	mvn.w	r0, #21
   16dd8:	e006      	b.n	16de8 <bt_id_create+0x58>
		if (id_find(addr) >= 0) {
   16dda:	4628      	mov	r0, r5
   16ddc:	f7ff fcfa 	bl	167d4 <id_find>
   16de0:	2800      	cmp	r0, #0
   16de2:	dbda      	blt.n	16d9a <bt_id_create+0xa>
			return -EALREADY;
   16de4:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   16de8:	b007      	add	sp, #28
   16dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16dec:	f7ff fd3e 	bl	1686c <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16df0:	f010 0001 	ands.w	r0, r0, #1
   16df4:	d118      	bne.n	16e28 <bt_id_create+0x98>
		uint8_t zero_irk[16] = { 0 };
   16df6:	e9cd 0002 	strd	r0, r0, [sp, #8]
   16dfa:	e9cd 0004 	strd	r0, r0, [sp, #16]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   16dfe:	2d00      	cmp	r5, #0
   16e00:	d0e8      	beq.n	16dd4 <bt_id_create+0x44>
   16e02:	9000      	str	r0, [sp, #0]
   16e04:	2207      	movs	r2, #7
   16e06:	f8cd 0003 	str.w	r0, [sp, #3]
   16e0a:	4669      	mov	r1, sp
   16e0c:	4628      	mov	r0, r5
   16e0e:	f00f fe8f 	bl	26b30 <memcmp>
   16e12:	2800      	cmp	r0, #0
   16e14:	d0de      	beq.n	16dd4 <bt_id_create+0x44>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   16e16:	2e00      	cmp	r6, #0
   16e18:	d0dc      	beq.n	16dd4 <bt_id_create+0x44>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   16e1a:	2210      	movs	r2, #16
   16e1c:	a902      	add	r1, sp, #8
   16e1e:	4630      	mov	r0, r6
   16e20:	f00f fe86 	bl	26b30 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   16e24:	2800      	cmp	r0, #0
   16e26:	d0d5      	beq.n	16dd4 <bt_id_create+0x44>
	new_id = bt_dev.id_count++;
   16e28:	79fc      	ldrb	r4, [r7, #7]
	err = id_create(new_id, addr, irk);
   16e2a:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
   16e2c:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   16e2e:	4629      	mov	r1, r5
   16e30:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   16e32:	71fb      	strb	r3, [r7, #7]
	err = id_create(new_id, addr, irk);
   16e34:	f7ff fd62 	bl	168fc <id_create>
	new_id = bt_dev.id_count++;
   16e38:	2800      	cmp	r0, #0
   16e3a:	bf08      	it	eq
   16e3c:	4620      	moveq	r0, r4
   16e3e:	e7d3      	b.n	16de8 <bt_id_create+0x58>
   16e40:	20000340 	.word	0x20000340
   16e44:	0002c89c 	.word	0x0002c89c

00016e48 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   16e48:	b570      	push	{r4, r5, r6, lr}
   16e4a:	b086      	sub	sp, #24
   16e4c:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   16e4e:	aa01      	add	r2, sp, #4
   16e50:	2100      	movs	r1, #0
   16e52:	f241 0009 	movw	r0, #4105	; 0x1009
   16e56:	f7fe fe2d 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   16e5a:	4604      	mov	r4, r0
   16e5c:	b130      	cbz	r0, 16e6c <bt_id_read_public_addr+0x24>
		BT_WARN("Failed to read public address");
   16e5e:	4817      	ldr	r0, [pc, #92]	; (16ebc <bt_id_read_public_addr+0x74>)
   16e60:	2157      	movs	r1, #87	; 0x57
   16e62:	f00e fed6 	bl	25c12 <z_log_minimal_printk>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   16e66:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   16e68:	b006      	add	sp, #24
   16e6a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   16e6c:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16e6e:	9002      	str	r0, [sp, #8]
   16e70:	689d      	ldr	r5, [r3, #8]
   16e72:	f8ad 000c 	strh.w	r0, [sp, #12]
   16e76:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   16e78:	2206      	movs	r2, #6
   16e7a:	a902      	add	r1, sp, #8
   16e7c:	4628      	mov	r0, r5
   16e7e:	f00f fe57 	bl	26b30 <memcmp>
   16e82:	b918      	cbnz	r0, 16e8c <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
   16e84:	9801      	ldr	r0, [sp, #4]
   16e86:	f007 fa19 	bl	1e2bc <net_buf_unref>
   16e8a:	e7ec      	b.n	16e66 <bt_id_read_public_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   16e8c:	4b0c      	ldr	r3, [pc, #48]	; (16ec0 <bt_id_read_public_addr+0x78>)
   16e8e:	6818      	ldr	r0, [r3, #0]
   16e90:	9004      	str	r0, [sp, #16]
   16e92:	889b      	ldrh	r3, [r3, #4]
   16e94:	f8ad 3014 	strh.w	r3, [sp, #20]
   16e98:	2206      	movs	r2, #6
   16e9a:	a904      	add	r1, sp, #16
   16e9c:	4628      	mov	r0, r5
   16e9e:	f00f fe47 	bl	26b30 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16ea2:	2800      	cmp	r0, #0
   16ea4:	d0ee      	beq.n	16e84 <bt_id_read_public_addr+0x3c>
	memcpy(dst, src, sizeof(*dst));
   16ea6:	2206      	movs	r2, #6
   16ea8:	4629      	mov	r1, r5
   16eaa:	1c70      	adds	r0, r6, #1
   16eac:	f00f fe51 	bl	26b52 <memcpy>
	net_buf_unref(rsp);
   16eb0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   16eb2:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   16eb4:	f007 fa02 	bl	1e2bc <net_buf_unref>
	return 1U;
   16eb8:	2001      	movs	r0, #1
   16eba:	e7d5      	b.n	16e68 <bt_id_read_public_addr+0x20>
   16ebc:	0002c8cf 	.word	0x0002c8cf
   16ec0:	0002a29e 	.word	0x0002a29e

00016ec4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   16ec4:	b510      	push	{r4, lr}
   16ec6:	b08a      	sub	sp, #40	; 0x28
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   16ec8:	4668      	mov	r0, sp
   16eca:	f7ff ffbd 	bl	16e48 <bt_id_read_public_addr>
   16ece:	4c1a      	ldr	r4, [pc, #104]	; (16f38 <bt_setup_public_id_addr+0x74>)
   16ed0:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   16ed2:	b308      	cbz	r0, 16f18 <bt_setup_public_id_addr+0x54>
	memset(ir, 0, 16);
   16ed4:	2210      	movs	r2, #16
   16ed6:	2100      	movs	r1, #0
   16ed8:	a806      	add	r0, sp, #24
   16eda:	f00f fe45 	bl	26b68 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   16ede:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   16ee2:	079b      	lsls	r3, r3, #30
   16ee4:	d50a      	bpl.n	16efc <bt_setup_public_id_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   16ee6:	aa02      	add	r2, sp, #8
   16ee8:	2100      	movs	r1, #0
   16eea:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   16eee:	f7fe fde1 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   16ef2:	b198      	cbz	r0, 16f1c <bt_setup_public_id_addr+0x58>
		BT_WARN("Failed to read identity root");
   16ef4:	4811      	ldr	r0, [pc, #68]	; (16f3c <bt_setup_public_id_addr+0x78>)
   16ef6:	2157      	movs	r1, #87	; 0x57
   16ef8:	f00e fe8b 	bl	25c12 <z_log_minimal_printk>
	uint8_t ir_irk[16];
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!bt_smp_irk_get(ir, ir_irk)) {
   16efc:	a902      	add	r1, sp, #8
   16efe:	a806      	add	r0, sp, #24
   16f00:	f011 ff69 	bl	28dd6 <bt_smp_irk_get>
   16f04:	b1a8      	cbz	r0, 16f32 <bt_setup_public_id_addr+0x6e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16f06:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   16f0a:	f7ff fcb9 	bl	16880 <atomic_or.constprop.0.isra.0>
	uint8_t *irk = NULL;
   16f0e:	2200      	movs	r2, #0
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   16f10:	4669      	mov	r1, sp
   16f12:	2000      	movs	r0, #0
   16f14:	f7ff fcf2 	bl	168fc <id_create>
}
   16f18:	b00a      	add	sp, #40	; 0x28
   16f1a:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
   16f1c:	9b02      	ldr	r3, [sp, #8]
	memcpy(ir, rp->ir, 16);
   16f1e:	6899      	ldr	r1, [r3, #8]
   16f20:	2210      	movs	r2, #16
   16f22:	3101      	adds	r1, #1
   16f24:	a806      	add	r0, sp, #24
   16f26:	f00f fe14 	bl	26b52 <memcpy>
	net_buf_unref(rsp);
   16f2a:	9802      	ldr	r0, [sp, #8]
   16f2c:	f007 f9c6 	bl	1e2bc <net_buf_unref>
   16f30:	e7e4      	b.n	16efc <bt_setup_public_id_addr+0x38>
		irk = ir_irk;
   16f32:	aa02      	add	r2, sp, #8
   16f34:	e7ec      	b.n	16f10 <bt_setup_public_id_addr+0x4c>
   16f36:	bf00      	nop
   16f38:	20000340 	.word	0x20000340
   16f3c:	0002c8f2 	.word	0x0002c8f2

00016f40 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   16f40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16f44:	4b1c      	ldr	r3, [pc, #112]	; (16fb8 <bt_read_static_addr+0x78>)
   16f46:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   16f4a:	f014 0401 	ands.w	r4, r4, #1
{
   16f4e:	4607      	mov	r7, r0
   16f50:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16f52:	d104      	bne.n	16f5e <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   16f54:	4819      	ldr	r0, [pc, #100]	; (16fbc <bt_read_static_addr+0x7c>)
   16f56:	2157      	movs	r1, #87	; 0x57
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   16f58:	f00e fe5b 	bl	25c12 <z_log_minimal_printk>
   16f5c:	e00c      	b.n	16f78 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   16f5e:	aa01      	add	r2, sp, #4
   16f60:	2100      	movs	r1, #0
   16f62:	f64f 4009 	movw	r0, #64521	; 0xfc09
   16f66:	f7fe fda5 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   16f6a:	4605      	mov	r5, r0
   16f6c:	b140      	cbz	r0, 16f80 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   16f6e:	4814      	ldr	r0, [pc, #80]	; (16fc0 <bt_read_static_addr+0x80>)
   16f70:	2157      	movs	r1, #87	; 0x57
   16f72:	f00e fe4e 	bl	25c12 <z_log_minimal_printk>
		return 0;
   16f76:	2400      	movs	r4, #0
	}

	return cnt;
}
   16f78:	4620      	mov	r0, r4
   16f7a:	b002      	add	sp, #8
   16f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   16f80:	9b01      	ldr	r3, [sp, #4]
   16f82:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   16f84:	785c      	ldrb	r4, [r3, #1]
   16f86:	42b4      	cmp	r4, r6
   16f88:	bf28      	it	cs
   16f8a:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   16f8c:	f04f 0816 	mov.w	r8, #22
   16f90:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   16f92:	42a5      	cmp	r5, r4
   16f94:	db07      	blt.n	16fa6 <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   16f96:	9801      	ldr	r0, [sp, #4]
   16f98:	f007 f990 	bl	1e2bc <net_buf_unref>
	if (!cnt) {
   16f9c:	2c00      	cmp	r4, #0
   16f9e:	d1eb      	bne.n	16f78 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   16fa0:	4808      	ldr	r0, [pc, #32]	; (16fc4 <bt_read_static_addr+0x84>)
   16fa2:	2157      	movs	r1, #87	; 0x57
   16fa4:	e7d8      	b.n	16f58 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   16fa6:	fb08 7005 	mla	r0, r8, r5, r7
   16faa:	2216      	movs	r2, #22
   16fac:	4631      	mov	r1, r6
   16fae:	f00f fdd0 	bl	26b52 <memcpy>
	for (i = 0; i < cnt; i++) {
   16fb2:	3501      	adds	r5, #1
   16fb4:	e7ed      	b.n	16f92 <bt_read_static_addr+0x52>
   16fb6:	bf00      	nop
   16fb8:	20000340 	.word	0x20000340
   16fbc:	0002c914 	.word	0x0002c914
   16fc0:	0002c945 	.word	0x0002c945
   16fc4:	0002c96a 	.word	0x0002c96a

00016fc8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   16fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   16fcc:	4d20      	ldr	r5, [pc, #128]	; (17050 <bt_setup_random_id_addr+0x88>)
   16fce:	79ec      	ldrb	r4, [r5, #7]
{
   16fd0:	b08d      	sub	sp, #52	; 0x34
	if (!bt_dev.id_count) {
   16fd2:	bb94      	cbnz	r4, 1703a <bt_setup_random_id_addr+0x72>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   16fd4:	2101      	movs	r1, #1
   16fd6:	a806      	add	r0, sp, #24
   16fd8:	f7ff ffb2 	bl	16f40 <bt_read_static_addr>
   16fdc:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   16fde:	b360      	cbz	r0, 1703a <bt_setup_random_id_addr+0x72>
   16fe0:	f04f 0916 	mov.w	r9, #22
   16fe4:	b2e6      	uxtb	r6, r4
				bt_addr_le_t addr;
				uint8_t *irk = NULL;
#if defined(CONFIG_BT_PRIVACY)
				uint8_t ir_irk[16];

				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   16fe6:	fb09 f806 	mul.w	r8, r9, r6
   16fea:	f108 0006 	add.w	r0, r8, #6
   16fee:	ab06      	add	r3, sp, #24
   16ff0:	a902      	add	r1, sp, #8
   16ff2:	4418      	add	r0, r3
   16ff4:	f011 feef 	bl	28dd6 <bt_smp_irk_get>
   16ff8:	b1e8      	cbz	r0, 17036 <bt_setup_random_id_addr+0x6e>
   16ffa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   16ffe:	f7ff fc3f 	bl	16880 <atomic_or.constprop.0.isra.0>
				uint8_t *irk = NULL;
   17002:	2700      	movs	r7, #0
   17004:	ab06      	add	r3, sp, #24
   17006:	eb03 0108 	add.w	r1, r3, r8
   1700a:	2206      	movs	r2, #6
   1700c:	f10d 0001 	add.w	r0, sp, #1
   17010:	f00f fd9f 	bl	26b52 <memcpy>
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
				addr.type = BT_ADDR_LE_RANDOM;
   17014:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   17016:	463a      	mov	r2, r7
   17018:	4669      	mov	r1, sp
   1701a:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   1701c:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   17020:	f7ff fc6c 	bl	168fc <id_create>
				if (err) {
   17024:	b920      	cbnz	r0, 17030 <bt_setup_random_id_addr+0x68>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   17026:	79ea      	ldrb	r2, [r5, #7]
   17028:	3401      	adds	r4, #1
   1702a:	b2e3      	uxtb	r3, r4
   1702c:	429a      	cmp	r2, r3
   1702e:	d8d9      	bhi.n	16fe4 <bt_setup_random_id_addr+0x1c>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   17030:	b00d      	add	sp, #52	; 0x34
   17032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					irk = ir_irk;
   17036:	af02      	add	r7, sp, #8
   17038:	e7e4      	b.n	17004 <bt_setup_random_id_addr+0x3c>
   1703a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1703e:	f7ff fc1f 	bl	16880 <atomic_or.constprop.0.isra.0>
	return bt_id_create(NULL, NULL);
   17042:	2100      	movs	r1, #0
   17044:	4608      	mov	r0, r1
}
   17046:	b00d      	add	sp, #52	; 0x34
   17048:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_id_create(NULL, NULL);
   1704c:	f7ff bea0 	b.w	16d90 <bt_id_create>
   17050:	20000340 	.word	0x20000340

00017054 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   17054:	b510      	push	{r4, lr}
   17056:	460c      	mov	r4, r1
   17058:	b08a      	sub	sp, #40	; 0x28
	int err;

	if (IS_ENABLED(CONFIG_BT_PRIVACY)) {
		if (use_filter || rpa_timeout_valid_check()) {
   1705a:	b128      	cbz	r0, 17068 <bt_id_set_create_conn_own_addr+0x14>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1705c:	2000      	movs	r0, #0
   1705e:	f7ff fcad 	bl	169bc <bt_id_set_private_addr>
			if (err) {
   17062:	b1c0      	cbz	r0, 17096 <bt_id_set_create_conn_own_addr+0x42>

		*own_addr_type = addr->type;
	}

	return 0;
}
   17064:	b00a      	add	sp, #40	; 0x28
   17066:	bd10      	pop	{r4, pc}
}

static inline k_ticks_t k_work_delayable_remaining_get(
	const struct k_work_delayable *dwork)
{
	return z_timeout_remaining(&dwork->timeout);
   17068:	4811      	ldr	r0, [pc, #68]	; (170b0 <bt_id_set_create_conn_own_addr+0x5c>)
   1706a:	f00d faa9 	bl	245c0 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1706e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17072:	fba0 3003 	umull	r3, r0, r0, r3
   17076:	0bdb      	lsrs	r3, r3, #15
   17078:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	return remaining_ms > (10 * bt_dev.create_param.timeout);
   1707c:	480d      	ldr	r0, [pc, #52]	; (170b4 <bt_id_set_create_conn_own_addr+0x60>)
   1707e:	8a82      	ldrh	r2, [r0, #20]
   17080:	210a      	movs	r1, #10
   17082:	434a      	muls	r2, r1
		if (use_filter || rpa_timeout_valid_check()) {
   17084:	429a      	cmp	r2, r3
   17086:	d3e9      	bcc.n	1705c <bt_id_set_create_conn_own_addr+0x8>
	k_work_cancel_delayable_sync(&bt_dev.rpa_update, &sync);
   17088:	4669      	mov	r1, sp
   1708a:	f500 70bc 	add.w	r0, r0, #376	; 0x178
   1708e:	f00c f8b1 	bl	231f4 <k_work_cancel_delayable_sync>
	le_update_private_addr();
   17092:	f7ff fccb 	bl	16a2c <le_update_private_addr>
		if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   17096:	4b07      	ldr	r3, [pc, #28]	; (170b4 <bt_id_set_create_conn_own_addr+0x60>)
   17098:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
   1709c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
   170a0:	bf17      	itett	ne
   170a2:	2303      	movne	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
   170a4:	2301      	moveq	r3, #1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
   170a6:	7023      	strbne	r3, [r4, #0]
	return 0;
   170a8:	2000      	movne	r0, #0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   170aa:	bf08      	it	eq
   170ac:	7023      	strbeq	r3, [r4, #0]
   170ae:	e7d9      	b.n	17064 <bt_id_set_create_conn_own_addr+0x10>
   170b0:	200004c8 	.word	0x200004c8
   170b4:	20000340 	.word	0x20000340

000170b8 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   170b8:	b510      	push	{r4, lr}
	int err;

	if (IS_ENABLED(CONFIG_BT_PRIVACY)) {
		err = bt_id_set_private_addr(BT_ID_DEFAULT);
   170ba:	2000      	movs	r0, #0
{
   170bc:	460c      	mov	r4, r1
		err = bt_id_set_private_addr(BT_ID_DEFAULT);
   170be:	f7ff fc7d 	bl	169bc <bt_id_set_private_addr>
		if (err) {
   170c2:	b938      	cbnz	r0, 170d4 <bt_id_set_scan_own_addr+0x1c>
			return err;
		}

		if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   170c4:	4b04      	ldr	r3, [pc, #16]	; (170d8 <bt_id_set_scan_own_addr+0x20>)
   170c6:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   170ca:	065b      	lsls	r3, r3, #25
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
   170cc:	bf4c      	ite	mi
   170ce:	2303      	movmi	r3, #3
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
   170d0:	2301      	movpl	r3, #1
   170d2:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   170d4:	bd10      	pop	{r4, pc}
   170d6:	bf00      	nop
   170d8:	20000340 	.word	0x20000340

000170dc <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   170dc:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   170de:	4903      	ldr	r1, [pc, #12]	; (170ec <bt_id_init+0x10>)
   170e0:	4803      	ldr	r0, [pc, #12]	; (170f0 <bt_id_init+0x14>)
   170e2:	f00b ff43 	bl	22f6c <k_work_init_delayable>
#endif

	return 0;
}
   170e6:	2000      	movs	r0, #0
   170e8:	bd08      	pop	{r3, pc}
   170ea:	bf00      	nop
   170ec:	00016a89 	.word	0x00016a89
   170f0:	200004b8 	.word	0x200004b8

000170f4 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   170f4:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   170f6:	2102      	movs	r1, #2
{
   170f8:	b087      	sub	sp, #28
   170fa:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   170fc:	f242 000c 	movw	r0, #8204	; 0x200c
   17100:	f7fe fc90 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   17104:	4605      	mov	r5, r0
   17106:	b318      	cbz	r0, 17150 <bt_le_scan_set_enable_legacy+0x5c>
   17108:	2102      	movs	r1, #2
   1710a:	3008      	adds	r0, #8
   1710c:	f007 f9ec 	bl	1e4e8 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   17110:	2c01      	cmp	r4, #1
   17112:	d11b      	bne.n	1714c <bt_le_scan_set_enable_legacy+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17114:	f3bf 8f5b 	dmb	ish
   17118:	4b0f      	ldr	r3, [pc, #60]	; (17158 <bt_le_scan_set_enable_legacy+0x64>)
   1711a:	681b      	ldr	r3, [r3, #0]
   1711c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17120:	f3c3 2340 	ubfx	r3, r3, #9, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   17124:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   17126:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   17128:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1712a:	425c      	negs	r4, r3
   1712c:	415c      	adcs	r4, r3
   1712e:	4a0a      	ldr	r2, [pc, #40]	; (17158 <bt_le_scan_set_enable_legacy+0x64>)
   17130:	9400      	str	r4, [sp, #0]
   17132:	a903      	add	r1, sp, #12
   17134:	4628      	mov	r0, r5
   17136:	2306      	movs	r3, #6
   17138:	f7fe fc62 	bl	15a00 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   1713c:	2200      	movs	r2, #0
   1713e:	4629      	mov	r1, r5
   17140:	f242 000c 	movw	r0, #8204	; 0x200c
   17144:	f7fe fcb6 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   17148:	b007      	add	sp, #28
   1714a:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   1714c:	2300      	movs	r3, #0
   1714e:	e7e9      	b.n	17124 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
   17150:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17154:	e7f8      	b.n	17148 <bt_le_scan_set_enable_legacy+0x54>
   17156:	bf00      	nop
   17158:	2000040c 	.word	0x2000040c

0001715c <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   1715c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1715e:	4605      	mov	r5, r0
   17160:	4614      	mov	r4, r2
   17162:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   17164:	2207      	movs	r2, #7
   17166:	2100      	movs	r1, #0
   17168:	4668      	mov	r0, sp
   1716a:	f00f fcfd 	bl	26b68 <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   1716e:	2300      	movs	r3, #0
   17170:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   17174:	1e6b      	subs	r3, r5, #1
   17176:	4258      	negs	r0, r3
   17178:	f10d 0105 	add.w	r1, sp, #5
   1717c:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   1717e:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   17182:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   17186:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1718a:	f7ff ff95 	bl	170b8 <bt_id_set_scan_own_addr>
	if (err) {
   1718e:	4604      	mov	r4, r0
   17190:	bb38      	cbnz	r0, 171e2 <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   17192:	2107      	movs	r1, #7
   17194:	f242 000b 	movw	r0, #8203	; 0x200b
   17198:	f7fe fc44 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   1719c:	4606      	mov	r6, r0
   1719e:	b348      	cbz	r0, 171f4 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   171a0:	2207      	movs	r2, #7
   171a2:	4669      	mov	r1, sp
   171a4:	3008      	adds	r0, #8
   171a6:	f011 ff9f 	bl	290e8 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   171aa:	4622      	mov	r2, r4
   171ac:	4631      	mov	r1, r6
   171ae:	f242 000b 	movw	r0, #8203	; 0x200b
   171b2:	f7fe fc7f 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   171b6:	4604      	mov	r4, r0
   171b8:	b998      	cbnz	r0, 171e2 <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   171ba:	2001      	movs	r0, #1
   171bc:	f7ff ff9a 	bl	170f4 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   171c0:	4604      	mov	r4, r0
   171c2:	b970      	cbnz	r0, 171e2 <start_le_scan_legacy+0x86>
	if (val) {
   171c4:	2d01      	cmp	r5, #1
   171c6:	d10f      	bne.n	171e8 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   171c8:	f3bf 8f5b 	dmb	ish
   171cc:	4b0b      	ldr	r3, [pc, #44]	; (171fc <start_le_scan_legacy+0xa0>)
   171ce:	e853 2f00 	ldrex	r2, [r3]
   171d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   171d6:	e843 2100 	strex	r1, r2, [r3]
   171da:	2900      	cmp	r1, #0
   171dc:	d1f7      	bne.n	171ce <start_le_scan_legacy+0x72>
   171de:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   171e2:	4620      	mov	r0, r4
   171e4:	b002      	add	sp, #8
   171e6:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   171e8:	f46f 7180 	mvn.w	r1, #256	; 0x100
   171ec:	4803      	ldr	r0, [pc, #12]	; (171fc <start_le_scan_legacy+0xa0>)
   171ee:	f00f fec3 	bl	26f78 <atomic_and>
   171f2:	e7f6      	b.n	171e2 <start_le_scan_legacy+0x86>
		return -ENOBUFS;
   171f4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   171f8:	e7f3      	b.n	171e2 <start_le_scan_legacy+0x86>
   171fa:	bf00      	nop
   171fc:	2000040c 	.word	0x2000040c

00017200 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   17200:	4b01      	ldr	r3, [pc, #4]	; (17208 <bt_scan_reset+0x8>)
   17202:	2200      	movs	r2, #0
   17204:	601a      	str	r2, [r3, #0]
}
   17206:	4770      	bx	lr
   17208:	20002320 	.word	0x20002320

0001720c <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   1720c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1720e:	4b23      	ldr	r3, [pc, #140]	; (1729c <bt_le_scan_update+0x90>)
   17210:	f3bf 8f5b 	dmb	ish
   17214:	681a      	ldr	r2, [r3, #0]
   17216:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1721a:	f012 0f80 	tst.w	r2, #128	; 0x80
{
   1721e:	4605      	mov	r5, r0
   17220:	461e      	mov	r6, r3
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17222:	f3c2 10c0 	ubfx	r0, r2, #7, #1
   17226:	d001      	beq.n	1722c <bt_le_scan_update+0x20>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECTING);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   17228:	2000      	movs	r0, #0
   1722a:	e032      	b.n	17292 <bt_le_scan_update+0x86>
   1722c:	f3bf 8f5b 	dmb	ish
   17230:	681b      	ldr	r3, [r3, #0]
   17232:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   17236:	065b      	lsls	r3, r3, #25
   17238:	d427      	bmi.n	1728a <bt_le_scan_update+0x7e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1723a:	2100      	movs	r1, #0
   1723c:	2206      	movs	r2, #6
   1723e:	4608      	mov	r0, r1
   17240:	f001 f86a 	bl	18318 <bt_conn_lookup_state_le>
		if (conn) {
   17244:	4604      	mov	r4, r0
   17246:	bb28      	cbnz	r0, 17294 <bt_le_scan_update+0x88>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   17248:	2202      	movs	r2, #2
   1724a:	4601      	mov	r1, r0
   1724c:	f001 f864 	bl	18318 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_SCAN);
		if (conn) {
   17250:	2800      	cmp	r0, #0
   17252:	d0e9      	beq.n	17228 <bt_le_scan_update+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17254:	f3bf 8f5b 	dmb	ish
   17258:	e856 3f00 	ldrex	r3, [r6]
   1725c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17260:	e846 3200 	strex	r2, r3, [r6]
   17264:	2a00      	cmp	r2, #0
   17266:	d1f7      	bne.n	17258 <bt_le_scan_update+0x4c>
   17268:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   1726c:	f000 fd66 	bl	17d3c <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   17270:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   17272:	4620      	mov	r0, r4
   17274:	bf18      	it	ne
   17276:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   17278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   1727c:	bf0a      	itet	eq
   1727e:	2212      	moveq	r2, #18
   17280:	2160      	movne	r1, #96	; 0x60
   17282:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   17286:	f7ff bf69 	b.w	1715c <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   1728a:	f7ff ff33 	bl	170f4 <bt_le_scan_set_enable_legacy>
		if (err) {
   1728e:	2800      	cmp	r0, #0
   17290:	d0d3      	beq.n	1723a <bt_le_scan_update+0x2e>
}
   17292:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
   17294:	f000 fd52 	bl	17d3c <bt_conn_unref>
   17298:	e7c6      	b.n	17228 <bt_le_scan_update+0x1c>
   1729a:	bf00      	nop
   1729c:	2000040c 	.word	0x2000040c

000172a0 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   172a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   172a4:	f100 0808 	add.w	r8, r0, #8
   172a8:	b08d      	sub	sp, #52	; 0x34
   172aa:	4604      	mov	r4, r0
   172ac:	4640      	mov	r0, r8
   172ae:	f011 feff 	bl	290b0 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   172b2:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 17470 <bt_hci_le_adv_report+0x1d0>
   172b6:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   172b8:	b916      	cbnz	r6, 172c0 <bt_hci_le_adv_report+0x20>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   172ba:	b00d      	add	sp, #52	; 0x34
   172bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   172c0:	89a3      	ldrh	r3, [r4, #12]
   172c2:	2b08      	cmp	r3, #8
   172c4:	d806      	bhi.n	172d4 <bt_hci_le_adv_report+0x34>
			BT_ERR("Unexpected end of buffer");
   172c6:	486b      	ldr	r0, [pc, #428]	; (17474 <bt_hci_le_adv_report+0x1d4>)
   172c8:	2145      	movs	r1, #69	; 0x45
}
   172ca:	b00d      	add	sp, #52	; 0x34
   172cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
   172d0:	f00e bc9f 	b.w	25c12 <z_log_minimal_printk>
	return net_buf_simple_pull_mem(&buf->b, len);
   172d4:	2109      	movs	r1, #9
   172d6:	4640      	mov	r0, r8
   172d8:	f007 f8e8 	bl	1e4ac <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   172dc:	7a01      	ldrb	r1, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   172de:	237f      	movs	r3, #127	; 0x7f
   172e0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   172e4:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   172e6:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   172e8:	7a5b      	ldrb	r3, [r3, #9]
   172ea:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   172ee:	23ff      	movs	r3, #255	; 0xff
   172f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   172f4:	2300      	movs	r3, #0
   172f6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   172fa:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   172fe:	7802      	ldrb	r2, [r0, #0]
   17300:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   17304:	2a04      	cmp	r2, #4
   17306:	bf9c      	itt	ls
   17308:	4b5b      	ldrls	r3, [pc, #364]	; (17478 <bt_hci_le_adv_report+0x1d8>)
   1730a:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   1730c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   17310:	b28b      	uxth	r3, r1
   17312:	9301      	str	r3, [sp, #4]
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   17314:	7843      	ldrb	r3, [r0, #1]
   17316:	1e9a      	subs	r2, r3, #2
   17318:	2a01      	cmp	r2, #1
   1731a:	4605      	mov	r5, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   1731c:	f100 0901 	add.w	r9, r0, #1
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   17320:	d848      	bhi.n	173b4 <bt_hci_le_adv_report+0x114>
	memcpy(dst, src, sizeof(*dst));
   17322:	2207      	movs	r2, #7
   17324:	4649      	mov	r1, r9
   17326:	a804      	add	r0, sp, #16
   17328:	f00f fc13 	bl	26b52 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1732c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   17330:	3b02      	subs	r3, #2
   17332:	f88d 3010 	strb.w	r3, [sp, #16]
	if (scan_dev_found_cb) {
   17336:	f8da 3000 	ldr.w	r3, [sl]
   1733a:	b1a3      	cbz	r3, 17366 <bt_hci_le_adv_report+0xc6>
	state->offset = net_buf_simple_headroom(buf);
   1733c:	4640      	mov	r0, r8
   1733e:	f011 fec7 	bl	290d0 <net_buf_simple_headroom>
		buf->len = len;
   17342:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
   17344:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   17346:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
   1734a:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1734c:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   1734e:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   17352:	f8da c000 	ldr.w	ip, [sl]
   17356:	a804      	add	r0, sp, #16
   17358:	4643      	mov	r3, r8
   1735a:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   1735c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1735e:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
   17360:	fa10 f08b 	uxtah	r0, r0, fp
   17364:	60a0      	str	r0, [r4, #8]
	info->addr = &id_addr;
   17366:	ab04      	add	r3, sp, #16
   17368:	9308      	str	r3, [sp, #32]
	return list->head;
   1736a:	4b44      	ldr	r3, [pc, #272]	; (1747c <bt_hci_le_adv_report+0x1dc>)
   1736c:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1736e:	2a00      	cmp	r2, #0
   17370:	d033      	beq.n	173da <bt_hci_le_adv_report+0x13a>
	return node->next;
   17372:	f852 7908 	ldr.w	r7, [r2], #-8
   17376:	b107      	cbz	r7, 1737a <bt_hci_le_adv_report+0xda>
   17378:	3f08      	subs	r7, #8
		if (listener->recv) {
   1737a:	6813      	ldr	r3, [r2, #0]
   1737c:	9203      	str	r2, [sp, #12]
   1737e:	b193      	cbz	r3, 173a6 <bt_hci_le_adv_report+0x106>
	state->offset = net_buf_simple_headroom(buf);
   17380:	4640      	mov	r0, r8
   17382:	f011 fea5 	bl	290d0 <net_buf_simple_headroom>
	state->len = buf->len;
   17386:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
   17388:	9a03      	ldr	r2, [sp, #12]
   1738a:	9302      	str	r3, [sp, #8]
			buf->len = len;
   1738c:	9b01      	ldr	r3, [sp, #4]
   1738e:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   17390:	4683      	mov	fp, r0
			listener->recv(info, buf);
   17392:	6812      	ldr	r2, [r2, #0]
   17394:	a808      	add	r0, sp, #32
   17396:	4641      	mov	r1, r8
   17398:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   1739a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1739c:	9b02      	ldr	r3, [sp, #8]
   1739e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   173a0:	fa10 f08b 	uxtah	r0, r0, fp
   173a4:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   173a6:	b1c7      	cbz	r7, 173da <bt_hci_le_adv_report+0x13a>
   173a8:	68bb      	ldr	r3, [r7, #8]
   173aa:	b103      	cbz	r3, 173ae <bt_hci_le_adv_report+0x10e>
   173ac:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   173ae:	463a      	mov	r2, r7
   173b0:	461f      	mov	r7, r3
   173b2:	e7e2      	b.n	1737a <bt_hci_le_adv_report+0xda>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   173b4:	2bff      	cmp	r3, #255	; 0xff
   173b6:	d109      	bne.n	173cc <bt_hci_le_adv_report+0x12c>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   173b8:	2300      	movs	r3, #0
   173ba:	9306      	str	r3, [sp, #24]
   173bc:	2207      	movs	r2, #7
   173be:	f8cd 301b 	str.w	r3, [sp, #27]
   173c2:	a906      	add	r1, sp, #24
   173c4:	a804      	add	r0, sp, #16
   173c6:	f00f fbc4 	bl	26b52 <memcpy>
}
   173ca:	e7b4      	b.n	17336 <bt_hci_le_adv_report+0x96>
		bt_addr_le_copy(&id_addr,
   173cc:	4649      	mov	r1, r9
   173ce:	2000      	movs	r0, #0
   173d0:	f00f fdb8 	bl	26f44 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   173d4:	2207      	movs	r2, #7
   173d6:	4601      	mov	r1, r0
   173d8:	e7f4      	b.n	173c4 <bt_hci_le_adv_report+0x124>
	info->addr = NULL;
   173da:	2300      	movs	r3, #0
   173dc:	9308      	str	r3, [sp, #32]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   173de:	4b28      	ldr	r3, [pc, #160]	; (17480 <bt_hci_le_adv_report+0x1e0>)
	check_pending_conn(&id_addr, addr, info->adv_props);
   173e0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   173e4:	f3bf 8f5b 	dmb	ish
   173e8:	681a      	ldr	r2, [r3, #0]
   173ea:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   173ee:	0610      	lsls	r0, r2, #24
   173f0:	f3c2 1bc0 	ubfx	fp, r2, #7, #1
   173f4:	d421      	bmi.n	1743a <bt_hci_le_adv_report+0x19a>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   173f6:	07ca      	lsls	r2, r1, #31
   173f8:	d51f      	bpl.n	1743a <bt_hci_le_adv_report+0x19a>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   173fa:	2202      	movs	r2, #2
   173fc:	a904      	add	r1, sp, #16
   173fe:	4658      	mov	r0, fp
   17400:	f000 ff8a 	bl	18318 <bt_conn_lookup_state_le>
	if (!conn) {
   17404:	4607      	mov	r7, r0
   17406:	b1c0      	cbz	r0, 1743a <bt_hci_le_adv_report+0x19a>
   17408:	f3bf 8f5b 	dmb	ish
   1740c:	4b1c      	ldr	r3, [pc, #112]	; (17480 <bt_hci_le_adv_report+0x1e0>)
   1740e:	681b      	ldr	r3, [r3, #0]
   17410:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   17414:	065b      	lsls	r3, r3, #25
   17416:	d418      	bmi.n	1744a <bt_hci_le_adv_report+0x1aa>
   17418:	2207      	movs	r2, #7
   1741a:	4649      	mov	r1, r9
   1741c:	f107 009e 	add.w	r0, r7, #158	; 0x9e
   17420:	f00f fb97 	bl	26b52 <memcpy>
	if (bt_le_create_conn(conn)) {
   17424:	4638      	mov	r0, r7
   17426:	f7fe fbf3 	bl	15c10 <bt_le_create_conn>
   1742a:	b998      	cbnz	r0, 17454 <bt_hci_le_adv_report+0x1b4>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   1742c:	4638      	mov	r0, r7
   1742e:	2106      	movs	r1, #6
   17430:	f000 fcae 	bl	17d90 <bt_conn_set_state>
	bt_conn_unref(conn);
   17434:	4638      	mov	r0, r7
   17436:	f000 fc81 	bl	17d3c <bt_conn_unref>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   1743a:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   1743c:	4640      	mov	r0, r8
   1743e:	3101      	adds	r1, #1
   17440:	3e01      	subs	r6, #1
   17442:	f007 f817 	bl	1e474 <net_buf_simple_pull>
   17446:	b2f6      	uxtb	r6, r6
   17448:	e736      	b.n	172b8 <bt_hci_le_adv_report+0x18>
	return bt_le_scan_set_enable_legacy(enable);
   1744a:	4658      	mov	r0, fp
   1744c:	f7ff fe52 	bl	170f4 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   17450:	2800      	cmp	r0, #0
   17452:	d0e1      	beq.n	17418 <bt_hci_le_adv_report+0x178>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   17454:	231f      	movs	r3, #31
   17456:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17458:	2100      	movs	r1, #0
   1745a:	4638      	mov	r0, r7
   1745c:	f000 fc98 	bl	17d90 <bt_conn_set_state>
	bt_conn_unref(conn);
   17460:	4638      	mov	r0, r7
   17462:	f000 fc6b 	bl	17d3c <bt_conn_unref>
	bt_le_scan_update(false);
   17466:	2000      	movs	r0, #0
   17468:	f7ff fed0 	bl	1720c <bt_le_scan_update>
   1746c:	e7e5      	b.n	1743a <bt_hci_le_adv_report+0x19a>
   1746e:	bf00      	nop
   17470:	20002320 	.word	0x20002320
   17474:	0002c99e 	.word	0x0002c99e
   17478:	0002c9bc 	.word	0x0002c9bc
   1747c:	20002318 	.word	0x20002318
   17480:	2000040c 	.word	0x2000040c

00017484 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   17484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17486:	4c3d      	ldr	r4, [pc, #244]	; (1757c <bt_le_scan_start+0xf8>)
   17488:	f3bf 8f5b 	dmb	ish
   1748c:	6823      	ldr	r3, [r4, #0]
   1748e:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17492:	f013 0f04 	tst.w	r3, #4
{
   17496:	4605      	mov	r5, r0
   17498:	460f      	mov	r7, r1
   1749a:	4626      	mov	r6, r4
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1749c:	d06b      	beq.n	17576 <bt_le_scan_start+0xf2>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   1749e:	7802      	ldrb	r2, [r0, #0]
   174a0:	2a01      	cmp	r2, #1
   174a2:	d903      	bls.n	174ac <bt_le_scan_start+0x28>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   174a4:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   174a8:	4620      	mov	r0, r4
   174aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   174ac:	6843      	ldr	r3, [r0, #4]
   174ae:	f033 030f 	bics.w	r3, r3, #15
   174b2:	d1f7      	bne.n	174a4 <bt_le_scan_start+0x20>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   174b4:	8900      	ldrh	r0, [r0, #8]
   174b6:	1f03      	subs	r3, r0, #4
   174b8:	b29b      	uxth	r3, r3
   174ba:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
   174be:	4563      	cmp	r3, ip
   174c0:	d8f0      	bhi.n	174a4 <bt_le_scan_start+0x20>
	if (param->window < 0x0004 || param->window > 0x4000) {
   174c2:	8969      	ldrh	r1, [r5, #10]
   174c4:	1f0b      	subs	r3, r1, #4
   174c6:	b29b      	uxth	r3, r3
   174c8:	4563      	cmp	r3, ip
   174ca:	d8eb      	bhi.n	174a4 <bt_le_scan_start+0x20>
	if (param->window > param->interval) {
   174cc:	4288      	cmp	r0, r1
   174ce:	d3e9      	bcc.n	174a4 <bt_le_scan_start+0x20>
	if (param->type && !bt_id_scan_random_addr_check()) {
   174d0:	b98a      	cbnz	r2, 174f6 <bt_le_scan_start+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   174d2:	f3bf 8f5b 	dmb	ish
   174d6:	e856 0f00 	ldrex	r0, [r6]
   174da:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   174de:	e846 3200 	strex	r2, r3, [r6]
   174e2:	2a00      	cmp	r2, #0
   174e4:	d1f7      	bne.n	174d6 <bt_le_scan_start+0x52>
   174e6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   174ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   174ee:	d007      	beq.n	17500 <bt_le_scan_start+0x7c>
		return -EALREADY;
   174f0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   174f4:	e7d8      	b.n	174a8 <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
   174f6:	f00f fd2d 	bl	26f54 <bt_id_scan_random_addr_check>
   174fa:	2800      	cmp	r0, #0
   174fc:	d1e9      	bne.n	174d2 <bt_le_scan_start+0x4e>
   174fe:	e7d1      	b.n	174a4 <bt_le_scan_start+0x20>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17500:	f3bf 8f5b 	dmb	ish
   17504:	6823      	ldr	r3, [r4, #0]
   17506:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1750a:	065a      	lsls	r2, r3, #25
   1750c:	d509      	bpl.n	17522 <bt_le_scan_start+0x9e>
	return bt_le_scan_set_enable_legacy(enable);
   1750e:	f7ff fdf1 	bl	170f4 <bt_le_scan_set_enable_legacy>
		if (err) {
   17512:	4604      	mov	r4, r0
   17514:	b128      	cbz	r0, 17522 <bt_le_scan_start+0x9e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17516:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1751a:	4818      	ldr	r0, [pc, #96]	; (1757c <bt_le_scan_start+0xf8>)
   1751c:	f00f fd2c 	bl	26f78 <atomic_and>
		return err;
   17520:	e7c2      	b.n	174a8 <bt_le_scan_start+0x24>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   17522:	686b      	ldr	r3, [r5, #4]
	if (val) {
   17524:	07db      	lsls	r3, r3, #31
   17526:	d515      	bpl.n	17554 <bt_le_scan_start+0xd0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17528:	f3bf 8f5b 	dmb	ish
   1752c:	e856 3f00 	ldrex	r3, [r6]
   17530:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17534:	e846 3200 	strex	r2, r3, [r6]
   17538:	2a00      	cmp	r2, #0
   1753a:	d1f7      	bne.n	1752c <bt_le_scan_start+0xa8>
   1753c:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   17540:	89ab      	ldrh	r3, [r5, #12]
   17542:	b16b      	cbz	r3, 17560 <bt_le_scan_start+0xdc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17544:	480d      	ldr	r0, [pc, #52]	; (1757c <bt_le_scan_start+0xf8>)
   17546:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1754a:	f00f fd15 	bl	26f78 <atomic_and>
			return -ENOTSUP;
   1754e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17552:	e7a9      	b.n	174a8 <bt_le_scan_start+0x24>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17554:	f46f 7100 	mvn.w	r1, #512	; 0x200
   17558:	4808      	ldr	r0, [pc, #32]	; (1757c <bt_le_scan_start+0xf8>)
   1755a:	f00f fd0d 	bl	26f78 <atomic_and>
   1755e:	e7ef      	b.n	17540 <bt_le_scan_start+0xbc>
		err = start_le_scan_legacy(param->type, param->interval,
   17560:	896a      	ldrh	r2, [r5, #10]
   17562:	8929      	ldrh	r1, [r5, #8]
   17564:	7828      	ldrb	r0, [r5, #0]
   17566:	f7ff fdf9 	bl	1715c <start_le_scan_legacy>
	if (err) {
   1756a:	4604      	mov	r4, r0
   1756c:	2800      	cmp	r0, #0
   1756e:	d1d2      	bne.n	17516 <bt_le_scan_start+0x92>
	scan_dev_found_cb = cb;
   17570:	4b03      	ldr	r3, [pc, #12]	; (17580 <bt_le_scan_start+0xfc>)
   17572:	601f      	str	r7, [r3, #0]
	return 0;
   17574:	e798      	b.n	174a8 <bt_le_scan_start+0x24>
		return -EAGAIN;
   17576:	f06f 040a 	mvn.w	r4, #10
   1757a:	e795      	b.n	174a8 <bt_le_scan_start+0x24>
   1757c:	2000040c 	.word	0x2000040c
   17580:	20002320 	.word	0x20002320

00017584 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   17584:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17586:	4808      	ldr	r0, [pc, #32]	; (175a8 <bt_le_scan_stop+0x24>)
   17588:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1758c:	f00f fcf4 	bl	26f78 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17590:	0603      	lsls	r3, r0, #24
   17592:	d506      	bpl.n	175a2 <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   17594:	4b05      	ldr	r3, [pc, #20]	; (175ac <bt_le_scan_stop+0x28>)
   17596:	2000      	movs	r0, #0
   17598:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   1759a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   1759e:	f7ff be35 	b.w	1720c <bt_le_scan_update>
}
   175a2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   175a6:	bd08      	pop	{r3, pc}
   175a8:	2000040c 	.word	0x2000040c
   175ac:	20002320 	.word	0x20002320

000175b0 <bt_le_scan_cb_register>:
	parent->next = child;
   175b0:	2300      	movs	r3, #0
   175b2:	6083      	str	r3, [r0, #8]
	return list->tail;
   175b4:	4b05      	ldr	r3, [pc, #20]	; (175cc <bt_le_scan_cb_register+0x1c>)
   175b6:	6859      	ldr	r1, [r3, #4]

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   175b8:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode)
   175bc:	b911      	cbnz	r1, 175c4 <bt_le_scan_cb_register+0x14>
	list->head = node;
   175be:	e9c3 2200 	strd	r2, r2, [r3]
}
   175c2:	4770      	bx	lr
	parent->next = child;
   175c4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   175c6:	605a      	str	r2, [r3, #4]
}
   175c8:	4770      	bx	lr
   175ca:	bf00      	nop
   175cc:	20002318 	.word	0x20002318

000175d0 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   175d0:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   175d2:	4904      	ldr	r1, [pc, #16]	; (175e4 <bt_pub_key_is_debug+0x14>)
   175d4:	2240      	movs	r2, #64	; 0x40
   175d6:	f00f faab 	bl	26b30 <memcmp>
}
   175da:	fab0 f080 	clz	r0, r0
   175de:	0940      	lsrs	r0, r0, #5
   175e0:	bd08      	pop	{r3, pc}
   175e2:	bf00      	nop
   175e4:	0002ca63 	.word	0x0002ca63

000175e8 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   175e8:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   175ea:	4b37      	ldr	r3, [pc, #220]	; (176c8 <bt_pub_key_gen+0xe0>)
   175ec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   175f0:	f003 0306 	and.w	r3, r3, #6
   175f4:	2b06      	cmp	r3, #6
   175f6:	d007      	beq.n	17608 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   175f8:	4834      	ldr	r0, [pc, #208]	; (176cc <bt_pub_key_gen+0xe4>)
   175fa:	2157      	movs	r1, #87	; 0x57
   175fc:	f00e fb09 	bl	25c12 <z_log_minimal_printk>
		return -ENOTSUP;
   17600:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   17604:	4628      	mov	r0, r5
   17606:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   17608:	2800      	cmp	r0, #0
   1760a:	d05a      	beq.n	176c2 <bt_pub_key_gen+0xda>
	return list->head;
   1760c:	4e30      	ldr	r6, [pc, #192]	; (176d0 <bt_pub_key_gen+0xe8>)
   1760e:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17610:	b16a      	cbz	r2, 1762e <bt_pub_key_gen+0x46>
   17612:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   17614:	4298      	cmp	r0, r3
   17616:	d106      	bne.n	17626 <bt_pub_key_gen+0x3e>
			BT_WARN("Callback already registered");
   17618:	482e      	ldr	r0, [pc, #184]	; (176d4 <bt_pub_key_gen+0xec>)
   1761a:	2157      	movs	r1, #87	; 0x57
   1761c:	f00e faf9 	bl	25c12 <z_log_minimal_printk>
			return -EALREADY;
   17620:	f06f 0577 	mvn.w	r5, #119	; 0x77
   17624:	e7ee      	b.n	17604 <bt_pub_key_gen+0x1c>
	return node->next;
   17626:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17628:	b10b      	cbz	r3, 1762e <bt_pub_key_gen+0x46>
   1762a:	3b04      	subs	r3, #4
   1762c:	e7f2      	b.n	17614 <bt_pub_key_gen+0x2c>
	parent->next = child;
   1762e:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   17630:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   17632:	1d03      	adds	r3, r0, #4
	list->head = node;
   17634:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   17636:	b902      	cbnz	r2, 1763a <bt_pub_key_gen+0x52>
	list->tail = node;
   17638:	6073      	str	r3, [r6, #4]
   1763a:	4c27      	ldr	r4, [pc, #156]	; (176d8 <bt_pub_key_gen+0xf0>)
   1763c:	f3bf 8f5b 	dmb	ish
   17640:	e854 2f00 	ldrex	r2, [r4]
   17644:	f042 0320 	orr.w	r3, r2, #32
   17648:	e844 3100 	strex	r1, r3, [r4]
   1764c:	2900      	cmp	r1, #0
   1764e:	d1f7      	bne.n	17640 <bt_pub_key_gen+0x58>
   17650:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17654:	f012 0220 	ands.w	r2, r2, #32
   17658:	d001      	beq.n	1765e <bt_pub_key_gen+0x76>
		return 0;
   1765a:	2500      	movs	r5, #0
   1765c:	e7d2      	b.n	17604 <bt_pub_key_gen+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1765e:	f3bf 8f5b 	dmb	ish
   17662:	e854 3f00 	ldrex	r3, [r4]
   17666:	f023 0310 	bic.w	r3, r3, #16
   1766a:	e844 3100 	strex	r1, r3, [r4]
   1766e:	2900      	cmp	r1, #0
   17670:	d1f7      	bne.n	17662 <bt_pub_key_gen+0x7a>
   17672:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   17676:	4611      	mov	r1, r2
   17678:	f242 0025 	movw	r0, #8229	; 0x2025
   1767c:	f7fe fa1a 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   17680:	4605      	mov	r5, r0
   17682:	2800      	cmp	r0, #0
   17684:	d0e9      	beq.n	1765a <bt_pub_key_gen+0x72>
		BT_ERR("Sending LE P256 Public Key command failed");
   17686:	4815      	ldr	r0, [pc, #84]	; (176dc <bt_pub_key_gen+0xf4>)
   17688:	2145      	movs	r1, #69	; 0x45
   1768a:	f00e fac2 	bl	25c12 <z_log_minimal_printk>
   1768e:	f3bf 8f5b 	dmb	ish
   17692:	e854 3f00 	ldrex	r3, [r4]
   17696:	f023 0320 	bic.w	r3, r3, #32
   1769a:	e844 3200 	strex	r2, r3, [r4]
   1769e:	2a00      	cmp	r2, #0
   176a0:	d1f7      	bne.n	17692 <bt_pub_key_gen+0xaa>
   176a2:	f3bf 8f5b 	dmb	ish
	return list->head;
   176a6:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   176a8:	b13c      	cbz	r4, 176ba <bt_pub_key_gen+0xd2>
			if (cb->func) {
   176aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   176ae:	3c04      	subs	r4, #4
			if (cb->func) {
   176b0:	b10b      	cbz	r3, 176b6 <bt_pub_key_gen+0xce>
				cb->func(NULL);
   176b2:	2000      	movs	r0, #0
   176b4:	4798      	blx	r3
	return node->next;
   176b6:	6864      	ldr	r4, [r4, #4]
   176b8:	e7f6      	b.n	176a8 <bt_pub_key_gen+0xc0>
	list->head = NULL;
   176ba:	2300      	movs	r3, #0
	list->tail = NULL;
   176bc:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   176c0:	e7a0      	b.n	17604 <bt_pub_key_gen+0x1c>
		return -EINVAL;
   176c2:	f06f 0515 	mvn.w	r5, #21
   176c6:	e79d      	b.n	17604 <bt_pub_key_gen+0x1c>
   176c8:	20000340 	.word	0x20000340
   176cc:	0002c9c1 	.word	0x0002c9c1
   176d0:	20002328 	.word	0x20002328
   176d4:	0002c9e5 	.word	0x0002c9e5
   176d8:	2000040c 	.word	0x2000040c
   176dc:	0002ca06 	.word	0x0002ca06

000176e0 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   176e0:	4b05      	ldr	r3, [pc, #20]	; (176f8 <bt_pub_key_get+0x18>)
   176e2:	f3bf 8f5b 	dmb	ish
   176e6:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   176e8:	4804      	ldr	r0, [pc, #16]	; (176fc <bt_pub_key_get+0x1c>)
   176ea:	f3bf 8f5b 	dmb	ish
		return pub_key;
   176ee:	f013 0f10 	tst.w	r3, #16
}
   176f2:	bf08      	it	eq
   176f4:	2000      	moveq	r0, #0
   176f6:	4770      	bx	lr
   176f8:	2000040c 	.word	0x2000040c
   176fc:	20002895 	.word	0x20002895

00017700 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   17700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   17702:	4d22      	ldr	r5, [pc, #136]	; (1778c <bt_dh_key_gen+0x8c>)
   17704:	682b      	ldr	r3, [r5, #0]
   17706:	428b      	cmp	r3, r1
{
   17708:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   1770a:	d039      	beq.n	17780 <bt_dh_key_gen+0x80>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1770c:	b11b      	cbz	r3, 17716 <bt_dh_key_gen+0x16>
		return -EBUSY;
   1770e:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   17712:	4620      	mov	r0, r4
   17714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17716:	4b1e      	ldr	r3, [pc, #120]	; (17790 <bt_dh_key_gen+0x90>)
   17718:	f3bf 8f5b 	dmb	ish
   1771c:	681a      	ldr	r2, [r3, #0]
   1771e:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17722:	f3c2 1740 	ubfx	r7, r2, #5, #1
   17726:	0692      	lsls	r2, r2, #26
   17728:	d4f1      	bmi.n	1770e <bt_dh_key_gen+0xe>
   1772a:	f3bf 8f5b 	dmb	ish
   1772e:	681b      	ldr	r3, [r3, #0]
   17730:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   17734:	06db      	lsls	r3, r3, #27
   17736:	d526      	bpl.n	17786 <bt_dh_key_gen+0x86>
	dh_key_cb = cb;
   17738:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   1773a:	f242 0026 	movw	r0, #8230	; 0x2026
   1773e:	2140      	movs	r1, #64	; 0x40
   17740:	f7fe f970 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   17744:	4604      	mov	r4, r0
   17746:	b1c0      	cbz	r0, 1777a <bt_dh_key_gen+0x7a>
	return net_buf_simple_add(&buf->b, len);
   17748:	2140      	movs	r1, #64	; 0x40
   1774a:	3008      	adds	r0, #8
   1774c:	f006 fecc 	bl	1e4e8 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   17750:	2240      	movs	r2, #64	; 0x40
   17752:	4631      	mov	r1, r6
   17754:	f00f f9fd 	bl	26b52 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   17758:	4621      	mov	r1, r4
   1775a:	463a      	mov	r2, r7
   1775c:	f242 0026 	movw	r0, #8230	; 0x2026
   17760:	f7fe f9a8 	bl	15ab4 <bt_hci_cmd_send_sync>
	if (err) {
   17764:	4604      	mov	r4, r0
   17766:	2800      	cmp	r0, #0
   17768:	d0d3      	beq.n	17712 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   1776a:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
   1776c:	4809      	ldr	r0, [pc, #36]	; (17794 <bt_dh_key_gen+0x94>)
		dh_key_cb = NULL;
   1776e:	602b      	str	r3, [r5, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   17770:	4622      	mov	r2, r4
   17772:	2157      	movs	r1, #87	; 0x57
   17774:	f00e fa4d 	bl	25c12 <z_log_minimal_printk>
		return err;
   17778:	e7cb      	b.n	17712 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   1777a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1777e:	e7f4      	b.n	1776a <bt_dh_key_gen+0x6a>
		return -EALREADY;
   17780:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17784:	e7c5      	b.n	17712 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   17786:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1778a:	e7c2      	b.n	17712 <bt_dh_key_gen+0x12>
   1778c:	20002324 	.word	0x20002324
   17790:	2000040c 	.word	0x2000040c
   17794:	0002ca35 	.word	0x0002ca35

00017798 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   17798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1779a:	4c1b      	ldr	r4, [pc, #108]	; (17808 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   1779c:	6886      	ldr	r6, [r0, #8]
   1779e:	f3bf 8f5b 	dmb	ish
   177a2:	e854 3f00 	ldrex	r3, [r4]
   177a6:	f023 0320 	bic.w	r3, r3, #32
   177aa:	e844 3200 	strex	r2, r3, [r4]
   177ae:	2a00      	cmp	r2, #0
   177b0:	d1f7      	bne.n	177a2 <bt_hci_evt_le_pkey_complete+0xa>
   177b2:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   177b6:	7833      	ldrb	r3, [r6, #0]
   177b8:	b983      	cbnz	r3, 177dc <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   177ba:	4814      	ldr	r0, [pc, #80]	; (1780c <bt_hci_evt_le_pkey_complete+0x74>)
   177bc:	2240      	movs	r2, #64	; 0x40
   177be:	1c71      	adds	r1, r6, #1
   177c0:	f00f f9c7 	bl	26b52 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   177c4:	f3bf 8f5b 	dmb	ish
   177c8:	e854 3f00 	ldrex	r3, [r4]
   177cc:	f043 0310 	orr.w	r3, r3, #16
   177d0:	e844 3200 	strex	r2, r3, [r4]
   177d4:	2a00      	cmp	r2, #0
   177d6:	d1f7      	bne.n	177c8 <bt_hci_evt_le_pkey_complete+0x30>
   177d8:	f3bf 8f5b 	dmb	ish
	return list->head;
   177dc:	4d0c      	ldr	r5, [pc, #48]	; (17810 <bt_hci_evt_le_pkey_complete+0x78>)
   177de:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   177e0:	b16c      	cbz	r4, 177fe <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   177e2:	4f0a      	ldr	r7, [pc, #40]	; (1780c <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   177e4:	3c04      	subs	r4, #4
		if (cb->func) {
   177e6:	6823      	ldr	r3, [r4, #0]
   177e8:	b12b      	cbz	r3, 177f6 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   177ea:	7832      	ldrb	r2, [r6, #0]
   177ec:	2a00      	cmp	r2, #0
   177ee:	bf0c      	ite	eq
   177f0:	4638      	moveq	r0, r7
   177f2:	2000      	movne	r0, #0
   177f4:	4798      	blx	r3
	return node->next;
   177f6:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   177f8:	b10c      	cbz	r4, 177fe <bt_hci_evt_le_pkey_complete+0x66>
   177fa:	3c04      	subs	r4, #4
   177fc:	e7f3      	b.n	177e6 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   177fe:	2300      	movs	r3, #0
	list->tail = NULL;
   17800:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   17804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17806:	bf00      	nop
   17808:	2000040c 	.word	0x2000040c
   1780c:	20002895 	.word	0x20002895
   17810:	20002328 	.word	0x20002328

00017814 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   17814:	4905      	ldr	r1, [pc, #20]	; (1782c <bt_hci_evt_le_dhkey_complete+0x18>)
   17816:	680b      	ldr	r3, [r1, #0]
   17818:	b133      	cbz	r3, 17828 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1781a:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   1781c:	2000      	movs	r0, #0
   1781e:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   17820:	7811      	ldrb	r1, [r2, #0]
   17822:	b901      	cbnz	r1, 17826 <bt_hci_evt_le_dhkey_complete+0x12>
   17824:	1c50      	adds	r0, r2, #1
   17826:	4718      	bx	r3
	}
}
   17828:	4770      	bx	lr
   1782a:	bf00      	nop
   1782c:	20002324 	.word	0x20002324

00017830 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   17830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   17832:	4b12      	ldr	r3, [pc, #72]	; (1787c <notify_connected+0x4c>)
   17834:	681d      	ldr	r5, [r3, #0]
{
   17836:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   17838:	b995      	cbnz	r5, 17860 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1783a:	4d11      	ldr	r5, [pc, #68]	; (17880 <notify_connected+0x50>)
   1783c:	4e11      	ldr	r6, [pc, #68]	; (17884 <notify_connected+0x54>)
   1783e:	4f12      	ldr	r7, [pc, #72]	; (17888 <notify_connected+0x58>)
   17840:	42b5      	cmp	r5, r6
   17842:	d90a      	bls.n	1785a <notify_connected+0x2a>
   17844:	4811      	ldr	r0, [pc, #68]	; (1788c <notify_connected+0x5c>)
   17846:	4639      	mov	r1, r7
   17848:	f240 5241 	movw	r2, #1345	; 0x541
   1784c:	f00e f9d3 	bl	25bf6 <assert_print>
   17850:	f240 5141 	movw	r1, #1345	; 0x541
   17854:	4638      	mov	r0, r7
   17856:	f00e f9c7 	bl	25be8 <assert_post_action>
   1785a:	42b5      	cmp	r5, r6
   1785c:	d307      	bcc.n	1786e <notify_connected+0x3e>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1785e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->connected) {
   17860:	682b      	ldr	r3, [r5, #0]
   17862:	b113      	cbz	r3, 1786a <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   17864:	7b21      	ldrb	r1, [r4, #12]
   17866:	4620      	mov	r0, r4
   17868:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1786a:	69ad      	ldr	r5, [r5, #24]
   1786c:	e7e4      	b.n	17838 <notify_connected+0x8>
		if (cb->connected) {
   1786e:	682b      	ldr	r3, [r5, #0]
   17870:	b113      	cbz	r3, 17878 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   17872:	7b21      	ldrb	r1, [r4, #12]
   17874:	4620      	mov	r0, r4
   17876:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17878:	351c      	adds	r5, #28
   1787a:	e7e1      	b.n	17840 <notify_connected+0x10>
   1787c:	2000233c 	.word	0x2000233c
   17880:	00029ff8 	.word	0x00029ff8
   17884:	0002a014 	.word	0x0002a014
   17888:	0002caa3 	.word	0x0002caa3
   1788c:	0002ab8c 	.word	0x0002ab8c

00017890 <tx_notify>:
{
   17890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   17894:	f8df 804c 	ldr.w	r8, [pc, #76]	; 178e4 <tx_notify+0x54>
{
   17898:	4604      	mov	r4, r0
	tx->cb = NULL;
   1789a:	2700      	movs	r7, #0
	__asm__ volatile(
   1789c:	f04f 0340 	mov.w	r3, #64	; 0x40
   178a0:	f3ef 8211 	mrs	r2, BASEPRI
   178a4:	f383 8812 	msr	BASEPRI_MAX, r3
   178a8:	f3bf 8f6f 	isb	sy
	return list->head;
   178ac:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   178ae:	b129      	cbz	r1, 178bc <tx_notify+0x2c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   178b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   178b2:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   178b4:	6223      	str	r3, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   178b6:	4281      	cmp	r1, r0
	list->tail = node;
   178b8:	bf08      	it	eq
   178ba:	6263      	streq	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   178bc:	f382 8811 	msr	BASEPRI, r2
   178c0:	f3bf 8f6f 	isb	sy
		if (!tx) {
   178c4:	b161      	cbz	r1, 178e0 <tx_notify+0x50>
		user_data = tx->user_data;
   178c6:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   178ca:	60cf      	str	r7, [r1, #12]
	tx->user_data = NULL;
   178cc:	e9c1 7701 	strd	r7, r7, [r1, #4]
	k_fifo_put(&free_tx, tx);
   178d0:	4640      	mov	r0, r8
   178d2:	f012 f88f 	bl	299f4 <k_queue_append>
		cb(conn, user_data, 0);
   178d6:	2200      	movs	r2, #0
   178d8:	4631      	mov	r1, r6
   178da:	4620      	mov	r0, r4
   178dc:	47a8      	blx	r5
	while (1) {
   178de:	e7dd      	b.n	1789c <tx_notify+0xc>
}
   178e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178e4:	200008a4 	.word	0x200008a4

000178e8 <conn_tx_destroy>:
{
   178e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178ec:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(tx);
   178ee:	460c      	mov	r4, r1
   178f0:	b941      	cbnz	r1, 17904 <conn_tx_destroy+0x1c>
   178f2:	490d      	ldr	r1, [pc, #52]	; (17928 <conn_tx_destroy+0x40>)
   178f4:	480d      	ldr	r0, [pc, #52]	; (1792c <conn_tx_destroy+0x44>)
   178f6:	2237      	movs	r2, #55	; 0x37
   178f8:	f00e f97d 	bl	25bf6 <assert_print>
   178fc:	480a      	ldr	r0, [pc, #40]	; (17928 <conn_tx_destroy+0x40>)
   178fe:	2137      	movs	r1, #55	; 0x37
   17900:	f00e f972 	bl	25be8 <assert_post_action>
	void *user_data = tx->user_data;
   17904:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
	tx->cb = NULL;
   17908:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1790a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	tx->pending_no_cb = 0U;
   1790e:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   17910:	4621      	mov	r1, r4
   17912:	4807      	ldr	r0, [pc, #28]	; (17930 <conn_tx_destroy+0x48>)
   17914:	f012 f86e 	bl	299f4 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   17918:	4639      	mov	r1, r7
   1791a:	4628      	mov	r0, r5
   1791c:	4633      	mov	r3, r6
   1791e:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   17922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	cb(conn, user_data, -ESHUTDOWN);
   17926:	4718      	bx	r3
   17928:	0002caa3 	.word	0x0002caa3
   1792c:	0002ab8c 	.word	0x0002ab8c
   17930:	200008a4 	.word	0x200008a4

00017934 <send_frag>:
{
   17934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   17938:	694d      	ldr	r5, [r1, #20]
{
   1793a:	4604      	mov	r4, r0
   1793c:	460e      	mov	r6, r1
   1793e:	4691      	mov	r9, r2
   17940:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   17942:	f04f 33ff 	mov.w	r3, #4294967295
   17946:	4840      	ldr	r0, [pc, #256]	; (17a48 <send_frag+0x114>)
   17948:	f04f 32ff 	mov.w	r2, #4294967295
   1794c:	f00a ff7e 	bl	2284c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   17950:	7b63      	ldrb	r3, [r4, #13]
   17952:	2b07      	cmp	r3, #7
   17954:	d141      	bne.n	179da <send_frag+0xa6>
	__asm__ volatile(
   17956:	f04f 0340 	mov.w	r3, #64	; 0x40
   1795a:	f3ef 8211 	mrs	r2, BASEPRI
   1795e:	f383 8812 	msr	BASEPRI_MAX, r3
   17962:	f3bf 8f6f 	isb	sy
	if (tx) {
   17966:	69a3      	ldr	r3, [r4, #24]
   17968:	2d00      	cmp	r5, #0
   1796a:	d04b      	beq.n	17a04 <send_frag+0xd0>
	parent->next = child;
   1796c:	2100      	movs	r1, #0
   1796e:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   17970:	2b00      	cmp	r3, #0
   17972:	d144      	bne.n	179fe <send_frag+0xca>
	list->head = node;
   17974:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   17978:	f382 8811 	msr	BASEPRI, r2
   1797c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   17980:	2104      	movs	r1, #4
   17982:	f106 0008 	add.w	r0, r6, #8
   17986:	f006 fd57 	bl	1e438 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1798a:	8823      	ldrh	r3, [r4, #0]
   1798c:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   17990:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17994:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   17996:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1799a:	3b04      	subs	r3, #4
   1799c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1799e:	2302      	movs	r3, #2
   179a0:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   179a2:	4630      	mov	r0, r6
   179a4:	f7fe fbc4 	bl	16130 <bt_send>
	if (err) {
   179a8:	4602      	mov	r2, r0
   179aa:	2800      	cmp	r0, #0
   179ac:	d04a      	beq.n	17a44 <send_frag+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
   179ae:	4827      	ldr	r0, [pc, #156]	; (17a4c <send_frag+0x118>)
   179b0:	2145      	movs	r1, #69	; 0x45
   179b2:	f00e f92e 	bl	25c12 <z_log_minimal_printk>
	__asm__ volatile(
   179b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   179ba:	f3ef 8911 	mrs	r9, BASEPRI
   179be:	f383 8812 	msr	BASEPRI_MAX, r3
   179c2:	f3bf 8f6f 	isb	sy
		if (tx) {
   179c6:	b34d      	cbz	r5, 17a1c <send_frag+0xe8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   179c8:	4629      	mov	r1, r5
   179ca:	f104 0014 	add.w	r0, r4, #20
   179ce:	f00f fae4 	bl	26f9a <sys_slist_find_and_remove>
	__asm__ volatile(
   179d2:	f389 8811 	msr	BASEPRI, r9
   179d6:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   179da:	481b      	ldr	r0, [pc, #108]	; (17a48 <send_frag+0x114>)
   179dc:	f00a fefc 	bl	227d8 <z_impl_k_sem_give>
	if (tx) {
   179e0:	b12d      	cbz	r5, 179ee <send_frag+0xba>
		tx_data(buf)->tx = NULL;
   179e2:	2300      	movs	r3, #0
   179e4:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   179e6:	4629      	mov	r1, r5
   179e8:	4620      	mov	r0, r4
   179ea:	f7ff ff7d 	bl	178e8 <conn_tx_destroy>
	if (always_consume) {
   179ee:	b11f      	cbz	r7, 179f8 <send_frag+0xc4>
		net_buf_unref(buf);
   179f0:	4630      	mov	r0, r6
   179f2:	f006 fc63 	bl	1e2bc <net_buf_unref>
	return false;
   179f6:	2700      	movs	r7, #0
}
   179f8:	4638      	mov	r0, r7
   179fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	parent->next = child;
   179fe:	601d      	str	r5, [r3, #0]
	list->tail = node;
   17a00:	61a5      	str	r5, [r4, #24]
}
   17a02:	e7b9      	b.n	17978 <send_frag+0x44>
		if (tail_tx) {
   17a04:	b133      	cbz	r3, 17a14 <send_frag+0xe0>
			pending_no_cb = &tail_tx->pending_no_cb;
   17a06:	f103 080c 	add.w	r8, r3, #12
   17a0a:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   17a0c:	3301      	adds	r3, #1
   17a0e:	f8c8 3000 	str.w	r3, [r8]
   17a12:	e7b1      	b.n	17978 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   17a14:	69e3      	ldr	r3, [r4, #28]
   17a16:	f104 081c 	add.w	r8, r4, #28
   17a1a:	e7f7      	b.n	17a0c <send_frag+0xd8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   17a1c:	f8d8 3000 	ldr.w	r3, [r8]
   17a20:	b953      	cbnz	r3, 17a38 <send_frag+0x104>
   17a22:	490b      	ldr	r1, [pc, #44]	; (17a50 <send_frag+0x11c>)
   17a24:	480b      	ldr	r0, [pc, #44]	; (17a54 <send_frag+0x120>)
   17a26:	f44f 720a 	mov.w	r2, #552	; 0x228
   17a2a:	f00e f8e4 	bl	25bf6 <assert_print>
   17a2e:	4808      	ldr	r0, [pc, #32]	; (17a50 <send_frag+0x11c>)
   17a30:	f44f 710a 	mov.w	r1, #552	; 0x228
   17a34:	f00e f8d8 	bl	25be8 <assert_post_action>
			(*pending_no_cb)--;
   17a38:	f8d8 3000 	ldr.w	r3, [r8]
   17a3c:	3b01      	subs	r3, #1
   17a3e:	f8c8 3000 	str.w	r3, [r8]
   17a42:	e7c6      	b.n	179d2 <send_frag+0x9e>
	return true;
   17a44:	2701      	movs	r7, #1
   17a46:	e7d7      	b.n	179f8 <send_frag+0xc4>
   17a48:	20000440 	.word	0x20000440
   17a4c:	0002c3bd 	.word	0x0002c3bd
   17a50:	0002caa3 	.word	0x0002caa3
   17a54:	0002ab8c 	.word	0x0002ab8c

00017a58 <bt_conn_get_pkts>:
}
   17a58:	4800      	ldr	r0, [pc, #0]	; (17a5c <bt_conn_get_pkts+0x4>)
   17a5a:	4770      	bx	lr
   17a5c:	20000440 	.word	0x20000440

00017a60 <bt_conn_new>:
{
   17a60:	b538      	push	{r3, r4, r5, lr}
   17a62:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   17a64:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17a66:	2501      	movs	r5, #1
   17a68:	428b      	cmp	r3, r1
   17a6a:	d102      	bne.n	17a72 <bt_conn_new+0x12>
		return NULL;
   17a6c:	2400      	movs	r4, #0
}
   17a6e:	4620      	mov	r0, r4
   17a70:	bd38      	pop	{r3, r4, r5, pc}
   17a72:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   17a76:	f3bf 8f5b 	dmb	ish
   17a7a:	e852 0f00 	ldrex	r0, [r2]
   17a7e:	2800      	cmp	r0, #0
   17a80:	d104      	bne.n	17a8c <bt_conn_new+0x2c>
   17a82:	e842 5c00 	strex	ip, r5, [r2]
   17a86:	f1bc 0f00 	cmp.w	ip, #0
   17a8a:	d1f6      	bne.n	17a7a <bt_conn_new+0x1a>
   17a8c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   17a90:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   17a94:	d002      	beq.n	17a9c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   17a96:	3301      	adds	r3, #1
   17a98:	4604      	mov	r4, r0
   17a9a:	e7e5      	b.n	17a68 <bt_conn_new+0x8>
	if (!conn) {
   17a9c:	2c00      	cmp	r4, #0
   17a9e:	d0e6      	beq.n	17a6e <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   17aa0:	22c0      	movs	r2, #192	; 0xc0
   17aa2:	2100      	movs	r1, #0
   17aa4:	4620      	mov	r0, r4
   17aa6:	f00f f85f 	bl	26b68 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   17aaa:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17aae:	4904      	ldr	r1, [pc, #16]	; (17ac0 <bt_conn_new+0x60>)
   17ab0:	f00b fa5c 	bl	22f6c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   17ab4:	4903      	ldr	r1, [pc, #12]	; (17ac4 <bt_conn_new+0x64>)
   17ab6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17aba:	f00b f92f 	bl	22d1c <k_work_init>
	return conn;
   17abe:	e7d6      	b.n	17a6e <bt_conn_new+0xe>
   17ac0:	00018605 	.word	0x00018605
   17ac4:	00026ff9 	.word	0x00026ff9

00017ac8 <conn_cleanup>:
{
   17ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17acc:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   17ace:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   17ad0:	f104 0638 	add.w	r6, r4, #56	; 0x38
   17ad4:	2300      	movs	r3, #0
   17ad6:	2200      	movs	r2, #0
   17ad8:	4630      	mov	r0, r6
   17ada:	f006 fa9f 	bl	1e01c <net_buf_get>
   17ade:	4603      	mov	r3, r0
   17ae0:	bb20      	cbnz	r0, 17b2c <conn_cleanup+0x64>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   17ae2:	6963      	ldr	r3, [r4, #20]
   17ae4:	b153      	cbz	r3, 17afc <conn_cleanup+0x34>
   17ae6:	4917      	ldr	r1, [pc, #92]	; (17b44 <conn_cleanup+0x7c>)
   17ae8:	4817      	ldr	r0, [pc, #92]	; (17b48 <conn_cleanup+0x80>)
   17aea:	f240 22b5 	movw	r2, #693	; 0x2b5
   17aee:	f00e f882 	bl	25bf6 <assert_print>
   17af2:	4814      	ldr	r0, [pc, #80]	; (17b44 <conn_cleanup+0x7c>)
   17af4:	f240 21b5 	movw	r1, #693	; 0x2b5
   17af8:	f00e f876 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   17afc:	69e3      	ldr	r3, [r4, #28]
   17afe:	b153      	cbz	r3, 17b16 <conn_cleanup+0x4e>
   17b00:	4910      	ldr	r1, [pc, #64]	; (17b44 <conn_cleanup+0x7c>)
   17b02:	4811      	ldr	r0, [pc, #68]	; (17b48 <conn_cleanup+0x80>)
   17b04:	f240 22b6 	movw	r2, #694	; 0x2b6
   17b08:	f00e f875 	bl	25bf6 <assert_print>
   17b0c:	480d      	ldr	r0, [pc, #52]	; (17b44 <conn_cleanup+0x7c>)
   17b0e:	f240 21b6 	movw	r1, #694	; 0x2b6
   17b12:	f00e f869 	bl	25be8 <assert_post_action>
	bt_conn_reset_rx_state(conn);
   17b16:	4620      	mov	r0, r4
   17b18:	f00f fa71 	bl	26ffe <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   17b1c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17b20:	2200      	movs	r2, #0
}
   17b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   17b26:	2300      	movs	r3, #0
   17b28:	f00b bb16 	b.w	23158 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   17b2c:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   17b2e:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   17b30:	f006 fbc4 	bl	1e2bc <net_buf_unref>
		if (tx) {
   17b34:	2d00      	cmp	r5, #0
   17b36:	d0cd      	beq.n	17ad4 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   17b38:	4629      	mov	r1, r5
   17b3a:	4620      	mov	r0, r4
   17b3c:	f7ff fed4 	bl	178e8 <conn_tx_destroy>
   17b40:	e7c6      	b.n	17ad0 <conn_cleanup+0x8>
   17b42:	bf00      	nop
   17b44:	0002caa3 	.word	0x0002caa3
   17b48:	0002ab8c 	.word	0x0002ab8c

00017b4c <bt_conn_recv>:
{
   17b4c:	b570      	push	{r4, r5, r6, lr}
   17b4e:	4616      	mov	r6, r2
   17b50:	4604      	mov	r4, r0
   17b52:	460d      	mov	r5, r1
	tx_notify(conn);
   17b54:	f7ff fe9c 	bl	17890 <tx_notify>
	switch (flags) {
   17b58:	2e01      	cmp	r6, #1
   17b5a:	d01f      	beq.n	17b9c <bt_conn_recv+0x50>
   17b5c:	2e02      	cmp	r6, #2
   17b5e:	d149      	bne.n	17bf4 <bt_conn_recv+0xa8>
		if (conn->rx) {
   17b60:	6923      	ldr	r3, [r4, #16]
   17b62:	b133      	cbz	r3, 17b72 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   17b64:	482b      	ldr	r0, [pc, #172]	; (17c14 <bt_conn_recv+0xc8>)
   17b66:	2145      	movs	r1, #69	; 0x45
   17b68:	f00e f853 	bl	25c12 <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   17b6c:	4620      	mov	r0, r4
   17b6e:	f00f fa46 	bl	26ffe <bt_conn_reset_rx_state>
		conn->rx = buf;
   17b72:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   17b74:	6921      	ldr	r1, [r4, #16]
   17b76:	898a      	ldrh	r2, [r1, #12]
   17b78:	2a01      	cmp	r2, #1
   17b7a:	d949      	bls.n	17c10 <bt_conn_recv+0xc4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   17b7c:	688b      	ldr	r3, [r1, #8]
   17b7e:	881b      	ldrh	r3, [r3, #0]
   17b80:	3304      	adds	r3, #4
   17b82:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   17b84:	429a      	cmp	r2, r3
   17b86:	d343      	bcc.n	17c10 <bt_conn_recv+0xc4>
	if (conn->rx->len > acl_total_len) {
   17b88:	d93a      	bls.n	17c00 <bt_conn_recv+0xb4>
		BT_ERR("ACL len mismatch (%u > %u)",
   17b8a:	4823      	ldr	r0, [pc, #140]	; (17c18 <bt_conn_recv+0xcc>)
   17b8c:	2145      	movs	r1, #69	; 0x45
   17b8e:	f00e f840 	bl	25c12 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   17b92:	4620      	mov	r0, r4
}
   17b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   17b98:	f00f ba31 	b.w	26ffe <bt_conn_reset_rx_state>
		if (!conn->rx) {
   17b9c:	6920      	ldr	r0, [r4, #16]
   17b9e:	b938      	cbnz	r0, 17bb0 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   17ba0:	481e      	ldr	r0, [pc, #120]	; (17c1c <bt_conn_recv+0xd0>)
   17ba2:	2145      	movs	r1, #69	; 0x45
   17ba4:	f00e f835 	bl	25c12 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   17ba8:	4620      	mov	r0, r4
   17baa:	f00f fa28 	bl	26ffe <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   17bae:	e001      	b.n	17bb4 <bt_conn_recv+0x68>
		if (!buf->len) {
   17bb0:	89ae      	ldrh	r6, [r5, #12]
   17bb2:	b926      	cbnz	r6, 17bbe <bt_conn_recv+0x72>
			net_buf_unref(buf);
   17bb4:	4628      	mov	r0, r5
}
   17bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   17bba:	f006 bb7f 	b.w	1e2bc <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   17bbe:	3008      	adds	r0, #8
   17bc0:	f011 fa8a 	bl	290d8 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   17bc4:	4286      	cmp	r6, r0
   17bc6:	d90b      	bls.n	17be0 <bt_conn_recv+0x94>
			BT_ERR("Not enough buffer space for L2CAP data");
   17bc8:	4815      	ldr	r0, [pc, #84]	; (17c20 <bt_conn_recv+0xd4>)
   17bca:	2145      	movs	r1, #69	; 0x45
   17bcc:	f00e f821 	bl	25c12 <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   17bd0:	6921      	ldr	r1, [r4, #16]
   17bd2:	2200      	movs	r2, #0
   17bd4:	4620      	mov	r0, r4
   17bd6:	f000 ffc1 	bl	18b5c <bt_l2cap_recv>
			conn->rx = NULL;
   17bda:	2300      	movs	r3, #0
   17bdc:	6123      	str	r3, [r4, #16]
   17bde:	e7e9      	b.n	17bb4 <bt_conn_recv+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17be0:	6920      	ldr	r0, [r4, #16]
   17be2:	89aa      	ldrh	r2, [r5, #12]
   17be4:	68a9      	ldr	r1, [r5, #8]
   17be6:	3008      	adds	r0, #8
   17be8:	f011 fa7e 	bl	290e8 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   17bec:	4628      	mov	r0, r5
   17bee:	f006 fb65 	bl	1e2bc <net_buf_unref>
		break;
   17bf2:	e7bf      	b.n	17b74 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   17bf4:	480b      	ldr	r0, [pc, #44]	; (17c24 <bt_conn_recv+0xd8>)
   17bf6:	4632      	mov	r2, r6
   17bf8:	2145      	movs	r1, #69	; 0x45
   17bfa:	f00e f80a 	bl	25c12 <z_log_minimal_printk>
   17bfe:	e7d3      	b.n	17ba8 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   17c00:	2300      	movs	r3, #0
   17c02:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   17c04:	4620      	mov	r0, r4
   17c06:	2201      	movs	r2, #1
}
   17c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   17c0c:	f000 bfa6 	b.w	18b5c <bt_l2cap_recv>
}
   17c10:	bd70      	pop	{r4, r5, r6, pc}
   17c12:	bf00      	nop
   17c14:	0002cad3 	.word	0x0002cad3
   17c18:	0002cb67 	.word	0x0002cb67
   17c1c:	0002caf5 	.word	0x0002caf5
   17c20:	0002cb18 	.word	0x0002cb18
   17c24:	0002cb44 	.word	0x0002cb44

00017c28 <bt_conn_send_cb>:
{
   17c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17c2c:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   17c2e:	7b43      	ldrb	r3, [r0, #13]
   17c30:	2b07      	cmp	r3, #7
{
   17c32:	4605      	mov	r5, r0
   17c34:	460e      	mov	r6, r1
   17c36:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   17c38:	d006      	beq.n	17c48 <bt_conn_send_cb+0x20>
		BT_ERR("not connected!");
   17c3a:	4820      	ldr	r0, [pc, #128]	; (17cbc <bt_conn_send_cb+0x94>)
   17c3c:	2145      	movs	r1, #69	; 0x45
   17c3e:	f00d ffe8 	bl	25c12 <z_log_minimal_printk>
			return -ENOTCONN;
   17c42:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   17c46:	e017      	b.n	17c78 <bt_conn_send_cb+0x50>
	if (cb) {
   17c48:	2a00      	cmp	r2, #0
   17c4a:	d035      	beq.n	17cb8 <bt_conn_send_cb+0x90>
	return z_impl_z_current_get();
   17c4c:	f00c fa2c 	bl	240a8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   17c50:	4b1b      	ldr	r3, [pc, #108]	; (17cc0 <bt_conn_send_cb+0x98>)
   17c52:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   17c54:	481b      	ldr	r0, [pc, #108]	; (17cc4 <bt_conn_send_cb+0x9c>)
   17c56:	bf07      	ittee	eq
   17c58:	2200      	moveq	r2, #0
   17c5a:	2300      	moveq	r3, #0
   17c5c:	f04f 32ff 	movne.w	r2, #4294967295
   17c60:	f04f 33ff 	movne.w	r3, #4294967295
   17c64:	f00a fd5e 	bl	22724 <z_impl_k_queue_get>
   17c68:	4604      	mov	r4, r0
		if (!tx) {
   17c6a:	b938      	cbnz	r0, 17c7c <bt_conn_send_cb+0x54>
			BT_ERR("Unable to allocate TX context");
   17c6c:	4816      	ldr	r0, [pc, #88]	; (17cc8 <bt_conn_send_cb+0xa0>)
   17c6e:	2145      	movs	r1, #69	; 0x45
   17c70:	f00d ffcf 	bl	25c12 <z_log_minimal_printk>
			return -ENOBUFS;
   17c74:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   17c7c:	7b6b      	ldrb	r3, [r5, #13]
   17c7e:	2b07      	cmp	r3, #7
   17c80:	f04f 0800 	mov.w	r8, #0
   17c84:	d00c      	beq.n	17ca0 <bt_conn_send_cb+0x78>
			BT_WARN("Disconnected while allocating context");
   17c86:	4811      	ldr	r0, [pc, #68]	; (17ccc <bt_conn_send_cb+0xa4>)
   17c88:	2157      	movs	r1, #87	; 0x57
   17c8a:	f00d ffc2 	bl	25c12 <z_log_minimal_printk>
	tx->user_data = NULL;
   17c8e:	e9c4 8801 	strd	r8, r8, [r4, #4]
	k_fifo_put(&free_tx, tx);
   17c92:	480c      	ldr	r0, [pc, #48]	; (17cc4 <bt_conn_send_cb+0x9c>)
	tx->pending_no_cb = 0U;
   17c94:	f8c4 800c 	str.w	r8, [r4, #12]
	k_fifo_put(&free_tx, tx);
   17c98:	4621      	mov	r1, r4
   17c9a:	f011 feab 	bl	299f4 <k_queue_append>
   17c9e:	e7d0      	b.n	17c42 <bt_conn_send_cb+0x1a>
		tx->user_data = user_data;
   17ca0:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   17ca4:	f8c0 800c 	str.w	r8, [r0, #12]
		tx_data(buf)->tx = tx;
   17ca8:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   17caa:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17cae:	4631      	mov	r1, r6
   17cb0:	f006 fad6 	bl	1e260 <net_buf_put>
	return 0;
   17cb4:	2000      	movs	r0, #0
   17cb6:	e7df      	b.n	17c78 <bt_conn_send_cb+0x50>
		tx_data(buf)->tx = NULL;
   17cb8:	614a      	str	r2, [r1, #20]
   17cba:	e7f6      	b.n	17caa <bt_conn_send_cb+0x82>
   17cbc:	0002cb87 	.word	0x0002cb87
   17cc0:	20002000 	.word	0x20002000
   17cc4:	200008a4 	.word	0x200008a4
   17cc8:	0002cb9b 	.word	0x0002cb9b
   17ccc:	0002cbbe 	.word	0x0002cbbe

00017cd0 <bt_conn_prepare_events>:
{
   17cd0:	b570      	push	{r4, r5, r6, lr}
   17cd2:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   17cd4:	4816      	ldr	r0, [pc, #88]	; (17d30 <bt_conn_prepare_events+0x60>)
	if (!atomic_get(&conn->ref)) {
   17cd6:	4d17      	ldr	r5, [pc, #92]	; (17d34 <bt_conn_prepare_events+0x64>)
   17cd8:	f012 f814 	bl	29d04 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   17cdc:	4620      	mov	r0, r4
   17cde:	4b14      	ldr	r3, [pc, #80]	; (17d30 <bt_conn_prepare_events+0x60>)
   17ce0:	2200      	movs	r2, #0
   17ce2:	2101      	movs	r1, #1
   17ce4:	f00c ff82 	bl	24bec <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   17ce8:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
		if (!conn_prepare_events(conn, &events[ev_count])) {
   17cec:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   17cf0:	f00f f97c 	bl	26fec <atomic_get>
   17cf4:	b908      	cbnz	r0, 17cfa <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   17cf6:	2001      	movs	r0, #1
}
   17cf8:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   17cfa:	7b6b      	ldrb	r3, [r5, #13]
   17cfc:	b953      	cbnz	r3, 17d14 <bt_conn_prepare_events+0x44>
   17cfe:	f06f 0140 	mvn.w	r1, #64	; 0x40
   17d02:	1d28      	adds	r0, r5, #4
   17d04:	f00f f963 	bl	26fce <atomic_and>
   17d08:	0643      	lsls	r3, r0, #25
   17d0a:	d503      	bpl.n	17d14 <bt_conn_prepare_events+0x44>
		conn_cleanup(conn);
   17d0c:	4628      	mov	r0, r5
   17d0e:	f7ff fedb 	bl	17ac8 <conn_cleanup>
   17d12:	e7f0      	b.n	17cf6 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   17d14:	7b6b      	ldrb	r3, [r5, #13]
   17d16:	2b07      	cmp	r3, #7
   17d18:	d1ed      	bne.n	17cf6 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   17d1a:	4b07      	ldr	r3, [pc, #28]	; (17d38 <bt_conn_prepare_events+0x68>)
   17d1c:	4630      	mov	r0, r6
   17d1e:	2200      	movs	r2, #0
   17d20:	2104      	movs	r1, #4
   17d22:	f00c ff63 	bl	24bec <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   17d26:	2301      	movs	r3, #1
   17d28:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   17d2c:	2002      	movs	r0, #2
	return ev_count;
   17d2e:	e7e3      	b.n	17cf8 <bt_conn_prepare_events+0x28>
   17d30:	200005d8 	.word	0x200005d8
   17d34:	20001a38 	.word	0x20001a38
   17d38:	20001a70 	.word	0x20001a70

00017d3c <bt_conn_unref>:
{
   17d3c:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   17d3e:	30c0      	adds	r0, #192	; 0xc0
   17d40:	f3bf 8f5b 	dmb	ish
   17d44:	e850 3f00 	ldrex	r3, [r0]
   17d48:	1e5a      	subs	r2, r3, #1
   17d4a:	e840 2100 	strex	r1, r2, [r0]
   17d4e:	2900      	cmp	r1, #0
   17d50:	d1f8      	bne.n	17d44 <bt_conn_unref+0x8>
   17d52:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   17d56:	2b00      	cmp	r3, #0
   17d58:	dc0c      	bgt.n	17d74 <bt_conn_unref+0x38>
   17d5a:	4907      	ldr	r1, [pc, #28]	; (17d78 <bt_conn_unref+0x3c>)
   17d5c:	4807      	ldr	r0, [pc, #28]	; (17d7c <bt_conn_unref+0x40>)
   17d5e:	f240 427e 	movw	r2, #1150	; 0x47e
   17d62:	f00d ff48 	bl	25bf6 <assert_print>
}
   17d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(old > 0, "Conn reference counter is 0");
   17d6a:	4803      	ldr	r0, [pc, #12]	; (17d78 <bt_conn_unref+0x3c>)
   17d6c:	f240 417e 	movw	r1, #1150	; 0x47e
   17d70:	f00d bf3a 	b.w	25be8 <assert_post_action>
}
   17d74:	bd08      	pop	{r3, pc}
   17d76:	bf00      	nop
   17d78:	0002caa3 	.word	0x0002caa3
   17d7c:	0002ab8c 	.word	0x0002ab8c

00017d80 <bt_conn_lookup_handle>:
{
   17d80:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   17d82:	2101      	movs	r1, #1
   17d84:	4801      	ldr	r0, [pc, #4]	; (17d8c <bt_conn_lookup_handle+0xc>)
   17d86:	f00f b95e 	b.w	27046 <conn_lookup_handle>
   17d8a:	bf00      	nop
   17d8c:	20001a38 	.word	0x20001a38

00017d90 <bt_conn_set_state>:
{
   17d90:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   17d92:	7b45      	ldrb	r5, [r0, #13]
   17d94:	428d      	cmp	r5, r1
{
   17d96:	4604      	mov	r4, r0
   17d98:	460e      	mov	r6, r1
	if (conn->state == state) {
   17d9a:	d10b      	bne.n	17db4 <bt_conn_set_state+0x24>
	switch (state) {
   17d9c:	2d08      	cmp	r5, #8
   17d9e:	bf96      	itet	ls
   17da0:	4b70      	ldrls	r3, [pc, #448]	; (17f64 <bt_conn_set_state+0x1d4>)
	if (conn->state == state) {
   17da2:	4a71      	ldrhi	r2, [pc, #452]	; (17f68 <bt_conn_set_state+0x1d8>)
   17da4:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   17da8:	4870      	ldr	r0, [pc, #448]	; (17f6c <bt_conn_set_state+0x1dc>)
   17daa:	2157      	movs	r1, #87	; 0x57
}
   17dac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   17db0:	f00d bf2f 	b.w	25c12 <z_log_minimal_printk>
	conn->state = state;
   17db4:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   17db6:	b165      	cbz	r5, 17dd2 <bt_conn_set_state+0x42>
   17db8:	2d06      	cmp	r5, #6
   17dba:	d010      	beq.n	17dde <bt_conn_set_state+0x4e>
	switch (conn->state) {
   17dbc:	7b63      	ldrb	r3, [r4, #13]
   17dbe:	2b08      	cmp	r3, #8
   17dc0:	f200 80cc 	bhi.w	17f5c <bt_conn_set_state+0x1cc>
   17dc4:	e8df f003 	tbb	[pc, r3]
   17dc8:	38381239 	.word	0x38381239
   17dcc:	2a873838 	.word	0x2a873838
   17dd0:	38          	.byte	0x38
   17dd1:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
   17dd2:	7883      	ldrb	r3, [r0, #2]
   17dd4:	2b08      	cmp	r3, #8
   17dd6:	d0f1      	beq.n	17dbc <bt_conn_set_state+0x2c>
			bt_conn_ref(conn);
   17dd8:	f00f f91a 	bl	27010 <bt_conn_ref>
   17ddc:	e7ee      	b.n	17dbc <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17dde:	7883      	ldrb	r3, [r0, #2]
   17de0:	2b01      	cmp	r3, #1
   17de2:	d1eb      	bne.n	17dbc <bt_conn_set_state+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   17de4:	3060      	adds	r0, #96	; 0x60
   17de6:	f00b f9bd 	bl	23164 <k_work_cancel_delayable>
   17dea:	e7e7      	b.n	17dbc <bt_conn_set_state+0x2c>
	z_impl_k_sem_give(sem);
   17dec:	4d60      	ldr	r5, [pc, #384]	; (17f70 <bt_conn_set_state+0x1e0>)
		tx->pending_no_cb = 0U;
   17dee:	2600      	movs	r6, #0
	__asm__ volatile(
   17df0:	f04f 0340 	mov.w	r3, #64	; 0x40
   17df4:	f3ef 8211 	mrs	r2, BASEPRI
   17df8:	f383 8812 	msr	BASEPRI_MAX, r3
   17dfc:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   17e00:	69e3      	ldr	r3, [r4, #28]
   17e02:	2b00      	cmp	r3, #0
   17e04:	f000 8089 	beq.w	17f1a <bt_conn_set_state+0x18a>
			conn->pending_no_cb--;
   17e08:	3b01      	subs	r3, #1
   17e0a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   17e0c:	f382 8811 	msr	BASEPRI, r2
   17e10:	f3bf 8f6f 	isb	sy
   17e14:	4628      	mov	r0, r5
   17e16:	f00a fcdf 	bl	227d8 <z_impl_k_sem_give>
}
   17e1a:	e7e9      	b.n	17df0 <bt_conn_set_state+0x60>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17e1c:	78a3      	ldrb	r3, [r4, #2]
   17e1e:	2b04      	cmp	r3, #4
   17e20:	d00a      	beq.n	17e38 <bt_conn_set_state+0xa8>
	z_impl_k_queue_init(queue);
   17e22:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17e26:	f011 fdd8 	bl	299da <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   17e2a:	4852      	ldr	r0, [pc, #328]	; (17f74 <bt_conn_set_state+0x1e4>)
   17e2c:	2100      	movs	r1, #0
   17e2e:	f00c ffe9 	bl	24e04 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   17e32:	2300      	movs	r3, #0
	list->tail = NULL;
   17e34:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   17e38:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   17e3a:	78a3      	ldrb	r3, [r4, #2]
   17e3c:	2b04      	cmp	r3, #4
   17e3e:	d104      	bne.n	17e4a <bt_conn_set_state+0xba>
			bt_conn_unref(conn);
   17e40:	4620      	mov	r0, r4
}
   17e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   17e46:	f7ff bf79 	b.w	17d3c <bt_conn_unref>
		switch (old_state) {
   17e4a:	2d08      	cmp	r5, #8
   17e4c:	d8f4      	bhi.n	17e38 <bt_conn_set_state+0xa8>
   17e4e:	a301      	add	r3, pc, #4	; (adr r3, 17e54 <bt_conn_set_state+0xc4>)
   17e50:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   17e54:	00017ecf 	.word	0x00017ecf
   17e58:	00017e79 	.word	0x00017e79
   17e5c:	00017ec1 	.word	0x00017ec1
   17e60:	00017e41 	.word	0x00017e41
   17e64:	00017e41 	.word	0x00017e41
   17e68:	00017ec1 	.word	0x00017ec1
   17e6c:	00017ec1 	.word	0x00017ec1
   17e70:	00017ecf 	.word	0x00017ecf
   17e74:	00017ecf 	.word	0x00017ecf
			tx_notify(conn);
   17e78:	4620      	mov	r0, r4
   17e7a:	f7ff fd09 	bl	17890 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   17e7e:	78a3      	ldrb	r3, [r4, #2]
   17e80:	2b01      	cmp	r3, #1
   17e82:	d10a      	bne.n	17e9a <bt_conn_set_state+0x10a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   17e84:	f104 0560 	add.w	r5, r4, #96	; 0x60
   17e88:	4628      	mov	r0, r5
   17e8a:	f011 fe3a 	bl	29b02 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   17e8e:	f010 0f0c 	tst.w	r0, #12
   17e92:	d002      	beq.n	17e9a <bt_conn_set_state+0x10a>
				k_work_cancel_delayable(&conn->deferred_work);
   17e94:	4628      	mov	r0, r5
   17e96:	f00b f965 	bl	23164 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17e9a:	f3bf 8f5b 	dmb	ish
   17e9e:	3404      	adds	r4, #4
   17ea0:	e854 3f00 	ldrex	r3, [r4]
   17ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17ea8:	e844 3200 	strex	r2, r3, [r4]
   17eac:	2a00      	cmp	r2, #0
   17eae:	d1f7      	bne.n	17ea0 <bt_conn_set_state+0x110>
   17eb0:	f3bf 8f5b 	dmb	ish
   17eb4:	482f      	ldr	r0, [pc, #188]	; (17f74 <bt_conn_set_state+0x1e4>)
}
   17eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17eba:	2100      	movs	r1, #0
   17ebc:	f00c bfa2 	b.w	24e04 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   17ec0:	7b23      	ldrb	r3, [r4, #12]
   17ec2:	2b00      	cmp	r3, #0
   17ec4:	d0bc      	beq.n	17e40 <bt_conn_set_state+0xb0>
				notify_connected(conn);
   17ec6:	4620      	mov	r0, r4
   17ec8:	f7ff fcb2 	bl	17830 <notify_connected>
   17ecc:	e7b8      	b.n	17e40 <bt_conn_set_state+0xb0>
			BT_WARN("Invalid (%u) old state", state);
   17ece:	482a      	ldr	r0, [pc, #168]	; (17f78 <bt_conn_set_state+0x1e8>)
   17ed0:	4632      	mov	r2, r6
   17ed2:	2157      	movs	r1, #87	; 0x57
   17ed4:	e76a      	b.n	17dac <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17ed6:	78a3      	ldrb	r3, [r4, #2]
   17ed8:	2b01      	cmp	r3, #1
   17eda:	d1ad      	bne.n	17e38 <bt_conn_set_state+0xa8>
					K_MSEC(10 * bt_dev.create_param.timeout));
   17edc:	4b27      	ldr	r3, [pc, #156]	; (17f7c <bt_conn_set_state+0x1ec>)
   17ede:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
   17ee0:	3460      	adds	r4, #96	; 0x60
					K_MSEC(10 * bt_dev.create_param.timeout));
   17ee2:	b1c0      	cbz	r0, 17f16 <bt_conn_set_state+0x186>
   17ee4:	230a      	movs	r3, #10
   17ee6:	4358      	muls	r0, r3
   17ee8:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
   17eea:	03c9      	lsls	r1, r1, #15
   17eec:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   17ef0:	f240 33e7 	movw	r3, #999	; 0x3e7
   17ef4:	03c0      	lsls	r0, r0, #15
   17ef6:	18c0      	adds	r0, r0, r3
   17ef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17efc:	f04f 0300 	mov.w	r3, #0
   17f00:	f141 0100 	adc.w	r1, r1, #0
   17f04:	f7e8 f8ec 	bl	e0 <__aeabi_uldivmod>
   17f08:	4602      	mov	r2, r0
   17f0a:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   17f0c:	4620      	mov	r0, r4
}
   17f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   17f12:	f00b b8b9 	b.w	23088 <k_work_schedule>
					K_MSEC(10 * bt_dev.create_param.timeout));
   17f16:	4601      	mov	r1, r0
   17f18:	e7e7      	b.n	17eea <bt_conn_set_state+0x15a>
	return list->head;
   17f1a:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   17f1c:	b129      	cbz	r1, 17f2a <bt_conn_set_state+0x19a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17f1e:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   17f20:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   17f22:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17f24:	4281      	cmp	r1, r0
	list->tail = node;
   17f26:	bf08      	it	eq
   17f28:	61a3      	streq	r3, [r4, #24]
   17f2a:	f382 8811 	msr	BASEPRI, r2
   17f2e:	f3bf 8f6f 	isb	sy
		if (!node) {
   17f32:	2900      	cmp	r1, #0
   17f34:	d080      	beq.n	17e38 <bt_conn_set_state+0xa8>
	__asm__ volatile(
   17f36:	f04f 0240 	mov.w	r2, #64	; 0x40
   17f3a:	f3ef 8311 	mrs	r3, BASEPRI
   17f3e:	f382 8812 	msr	BASEPRI_MAX, r2
   17f42:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   17f46:	68ca      	ldr	r2, [r1, #12]
   17f48:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   17f4a:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   17f4c:	f383 8811 	msr	BASEPRI, r3
   17f50:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   17f54:	4620      	mov	r0, r4
   17f56:	f7ff fcc7 	bl	178e8 <conn_tx_destroy>
   17f5a:	e75b      	b.n	17e14 <bt_conn_set_state+0x84>
		BT_WARN("no valid (%u) state was set", state);
   17f5c:	4808      	ldr	r0, [pc, #32]	; (17f80 <bt_conn_set_state+0x1f0>)
   17f5e:	4632      	mov	r2, r6
   17f60:	2157      	movs	r1, #87	; 0x57
   17f62:	e723      	b.n	17dac <bt_conn_set_state+0x1c>
   17f64:	0002a4e8 	.word	0x0002a4e8
   17f68:	0002cbe9 	.word	0x0002cbe9
   17f6c:	0002cbf3 	.word	0x0002cbf3
   17f70:	20000440 	.word	0x20000440
   17f74:	200005d8 	.word	0x200005d8
   17f78:	0002cc09 	.word	0x0002cc09
   17f7c:	20000340 	.word	0x20000340
   17f80:	0002cc25 	.word	0x0002cc25

00017f84 <bt_conn_index>:
		index = conn - acl_conns;
   17f84:	4b0a      	ldr	r3, [pc, #40]	; (17fb0 <bt_conn_index+0x2c>)
   17f86:	4a0b      	ldr	r2, [pc, #44]	; (17fb4 <bt_conn_index+0x30>)
{
   17f88:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   17f8a:	1ac4      	subs	r4, r0, r3
   17f8c:	10e4      	asrs	r4, r4, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   17f8e:	4298      	cmp	r0, r3
		index = conn - acl_conns;
   17f90:	fb02 f404 	mul.w	r4, r2, r4
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   17f94:	d00a      	beq.n	17fac <bt_conn_index+0x28>
   17f96:	4908      	ldr	r1, [pc, #32]	; (17fb8 <bt_conn_index+0x34>)
   17f98:	4808      	ldr	r0, [pc, #32]	; (17fbc <bt_conn_index+0x38>)
   17f9a:	f240 429c 	movw	r2, #1180	; 0x49c
   17f9e:	f00d fe2a 	bl	25bf6 <assert_print>
   17fa2:	4805      	ldr	r0, [pc, #20]	; (17fb8 <bt_conn_index+0x34>)
   17fa4:	f240 419c 	movw	r1, #1180	; 0x49c
   17fa8:	f00d fe1e 	bl	25be8 <assert_post_action>
}
   17fac:	b2e0      	uxtb	r0, r4
   17fae:	bd10      	pop	{r4, pc}
   17fb0:	20001a38 	.word	0x20001a38
   17fb4:	c28f5c29 	.word	0xc28f5c29
   17fb8:	0002caa3 	.word	0x0002caa3
   17fbc:	0002ab8c 	.word	0x0002ab8c

00017fc0 <bt_conn_create_pdu_timeout>:
{
   17fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17fc2:	4604      	mov	r4, r0
   17fc4:	460d      	mov	r5, r1
   17fc6:	4617      	mov	r7, r2
   17fc8:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   17fca:	f011 fcd7 	bl	2997c <k_is_in_isr>
   17fce:	b150      	cbz	r0, 17fe6 <bt_conn_create_pdu_timeout+0x26>
   17fd0:	490f      	ldr	r1, [pc, #60]	; (18010 <bt_conn_create_pdu_timeout+0x50>)
   17fd2:	4810      	ldr	r0, [pc, #64]	; (18014 <bt_conn_create_pdu_timeout+0x54>)
   17fd4:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
   17fd8:	f00d fe0d 	bl	25bf6 <assert_print>
   17fdc:	480c      	ldr	r0, [pc, #48]	; (18010 <bt_conn_create_pdu_timeout+0x50>)
   17fde:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
   17fe2:	f00d fe01 	bl	25be8 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   17fe6:	480c      	ldr	r0, [pc, #48]	; (18018 <bt_conn_create_pdu_timeout+0x58>)
   17fe8:	463a      	mov	r2, r7
   17fea:	2c00      	cmp	r4, #0
   17fec:	bf18      	it	ne
   17fee:	4620      	movne	r0, r4
   17ff0:	4633      	mov	r3, r6
   17ff2:	f011 f852 	bl	2909a <net_buf_alloc_fixed>
	if (!buf) {
   17ff6:	4604      	mov	r4, r0
   17ff8:	b928      	cbnz	r0, 18006 <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   17ffa:	4808      	ldr	r0, [pc, #32]	; (1801c <bt_conn_create_pdu_timeout+0x5c>)
   17ffc:	2157      	movs	r1, #87	; 0x57
   17ffe:	f00d fe08 	bl	25c12 <z_log_minimal_printk>
}
   18002:	4620      	mov	r0, r4
   18004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   18006:	1d29      	adds	r1, r5, #4
   18008:	3008      	adds	r0, #8
   1800a:	f006 f837 	bl	1e07c <net_buf_simple_reserve>
	return buf;
   1800e:	e7f8      	b.n	18002 <bt_conn_create_pdu_timeout+0x42>
   18010:	0002caa3 	.word	0x0002caa3
   18014:	0002ab8c 	.word	0x0002ab8c
   18018:	200008c0 	.word	0x200008c0
   1801c:	0002cc46 	.word	0x0002cc46

00018020 <notify_le_param_updated>:
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18020:	1d03      	adds	r3, r0, #4
{
   18022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18026:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18028:	4618      	mov	r0, r3
   1802a:	f00e ffdf 	bl	26fec <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1802e:	05c2      	lsls	r2, r0, #23
   18030:	d512      	bpl.n	18058 <notify_le_param_updated+0x38>
	    conn->le.interval >= conn->le.interval_min &&
   18032:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18036:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   1803a:	4291      	cmp	r1, r2
   1803c:	d80c      	bhi.n	18058 <notify_le_param_updated+0x38>
	    conn->le.interval >= conn->le.interval_min &&
   1803e:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   18042:	4291      	cmp	r1, r2
   18044:	d308      	bcc.n	18058 <notify_le_param_updated+0x38>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   18046:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   1804a:	4291      	cmp	r1, r2
   1804c:	d104      	bne.n	18058 <notify_le_param_updated+0x38>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1804e:	f46f 7180 	mvn.w	r1, #256	; 0x100
   18052:	4618      	mov	r0, r3
   18054:	f00e ffbb 	bl	26fce <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18058:	4b18      	ldr	r3, [pc, #96]	; (180bc <notify_le_param_updated+0x9c>)
   1805a:	681d      	ldr	r5, [r3, #0]
   1805c:	b99d      	cbnz	r5, 18086 <notify_le_param_updated+0x66>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1805e:	4d18      	ldr	r5, [pc, #96]	; (180c0 <notify_le_param_updated+0xa0>)
   18060:	4e18      	ldr	r6, [pc, #96]	; (180c4 <notify_le_param_updated+0xa4>)
   18062:	4f19      	ldr	r7, [pc, #100]	; (180c8 <notify_le_param_updated+0xa8>)
   18064:	42b5      	cmp	r5, r6
   18066:	d90a      	bls.n	1807e <notify_le_param_updated+0x5e>
   18068:	4818      	ldr	r0, [pc, #96]	; (180cc <notify_le_param_updated+0xac>)
   1806a:	4639      	mov	r1, r7
   1806c:	f240 528b 	movw	r2, #1419	; 0x58b
   18070:	f00d fdc1 	bl	25bf6 <assert_print>
   18074:	f240 518b 	movw	r1, #1419	; 0x58b
   18078:	4638      	mov	r0, r7
   1807a:	f00d fdb5 	bl	25be8 <assert_post_action>
   1807e:	42b5      	cmp	r5, r6
   18080:	d30d      	bcc.n	1809e <notify_le_param_updated+0x7e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   18082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->le_param_updated) {
   18086:	68ee      	ldr	r6, [r5, #12]
   18088:	b13e      	cbz	r6, 1809a <notify_le_param_updated+0x7a>
			cb->le_param_updated(conn, conn->le.interval,
   1808a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1808e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   18092:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   18096:	4620      	mov	r0, r4
   18098:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1809a:	69ad      	ldr	r5, [r5, #24]
   1809c:	e7de      	b.n	1805c <notify_le_param_updated+0x3c>
		if (cb->le_param_updated) {
   1809e:	f8d5 800c 	ldr.w	r8, [r5, #12]
   180a2:	f1b8 0f00 	cmp.w	r8, #0
   180a6:	d007      	beq.n	180b8 <notify_le_param_updated+0x98>
			cb->le_param_updated(conn, conn->le.interval,
   180a8:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   180ac:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   180b0:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   180b4:	4620      	mov	r0, r4
   180b6:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   180b8:	351c      	adds	r5, #28
   180ba:	e7d3      	b.n	18064 <notify_le_param_updated+0x44>
   180bc:	2000233c 	.word	0x2000233c
   180c0:	00029ff8 	.word	0x00029ff8
   180c4:	0002a014 	.word	0x0002a014
   180c8:	0002caa3 	.word	0x0002caa3
   180cc:	0002ab8c 	.word	0x0002ab8c

000180d0 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   180d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   180d4:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   180d6:	4608      	mov	r0, r1
{
   180d8:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   180da:	f00e fee1 	bl	26ea0 <bt_le_conn_params_valid>
   180de:	4605      	mov	r5, r0
   180e0:	b918      	cbnz	r0, 180ea <le_param_req+0x1a>
		return false;
   180e2:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   180e4:	4628      	mov	r0, r5
   180e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   180ea:	4b1a      	ldr	r3, [pc, #104]	; (18154 <le_param_req+0x84>)
   180ec:	681e      	ldr	r6, [r3, #0]
   180ee:	b9be      	cbnz	r6, 18120 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   180f0:	4e19      	ldr	r6, [pc, #100]	; (18158 <le_param_req+0x88>)
   180f2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1815c <le_param_req+0x8c>
   180f6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 18160 <le_param_req+0x90>
   180fa:	4546      	cmp	r6, r8
   180fc:	d90a      	bls.n	18114 <le_param_req+0x44>
   180fe:	4819      	ldr	r0, [pc, #100]	; (18164 <le_param_req+0x94>)
   18100:	4649      	mov	r1, r9
   18102:	f240 52d3 	movw	r2, #1491	; 0x5d3
   18106:	f00d fd76 	bl	25bf6 <assert_print>
   1810a:	f240 51d3 	movw	r1, #1491	; 0x5d3
   1810e:	4648      	mov	r0, r9
   18110:	f00d fd6a 	bl	25be8 <assert_post_action>
   18114:	4546      	cmp	r6, r8
   18116:	d2e5      	bcs.n	180e4 <le_param_req+0x14>
		if (!cb->le_param_req) {
   18118:	68b3      	ldr	r3, [r6, #8]
   1811a:	b983      	cbnz	r3, 1813e <le_param_req+0x6e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1811c:	361c      	adds	r6, #28
   1811e:	e7ec      	b.n	180fa <le_param_req+0x2a>
		if (!cb->le_param_req) {
   18120:	68b3      	ldr	r3, [r6, #8]
   18122:	b90b      	cbnz	r3, 18128 <le_param_req+0x58>
	for (cb = callback_list; cb; cb = cb->_next) {
   18124:	69b6      	ldr	r6, [r6, #24]
   18126:	e7e2      	b.n	180ee <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   18128:	4621      	mov	r1, r4
   1812a:	4638      	mov	r0, r7
   1812c:	4798      	blx	r3
   1812e:	2800      	cmp	r0, #0
   18130:	d0d7      	beq.n	180e2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   18132:	4620      	mov	r0, r4
   18134:	f00e feb4 	bl	26ea0 <bt_le_conn_params_valid>
   18138:	2800      	cmp	r0, #0
   1813a:	d1f3      	bne.n	18124 <le_param_req+0x54>
   1813c:	e7d1      	b.n	180e2 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1813e:	4621      	mov	r1, r4
   18140:	4638      	mov	r0, r7
   18142:	4798      	blx	r3
   18144:	2800      	cmp	r0, #0
   18146:	d0cc      	beq.n	180e2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   18148:	4620      	mov	r0, r4
   1814a:	f00e fea9 	bl	26ea0 <bt_le_conn_params_valid>
   1814e:	2800      	cmp	r0, #0
   18150:	d1e4      	bne.n	1811c <le_param_req+0x4c>
   18152:	e7c6      	b.n	180e2 <le_param_req+0x12>
   18154:	2000233c 	.word	0x2000233c
   18158:	00029ff8 	.word	0x00029ff8
   1815c:	0002a014 	.word	0x0002a014
   18160:	0002caa3 	.word	0x0002caa3
   18164:	0002ab8c 	.word	0x0002ab8c

00018168 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   18168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1816c:	78c3      	ldrb	r3, [r0, #3]
{
   1816e:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   18170:	b9db      	cbnz	r3, 181aa <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   18172:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18176:	4b17      	ldr	r3, [pc, #92]	; (181d4 <bt_conn_identity_resolved+0x6c>)
   18178:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1817a:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   1817e:	b9bd      	cbnz	r5, 181b0 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18180:	4d15      	ldr	r5, [pc, #84]	; (181d8 <bt_conn_identity_resolved+0x70>)
   18182:	4f16      	ldr	r7, [pc, #88]	; (181dc <bt_conn_identity_resolved+0x74>)
   18184:	f8df 8058 	ldr.w	r8, [pc, #88]	; 181e0 <bt_conn_identity_resolved+0x78>
   18188:	42bd      	cmp	r5, r7
   1818a:	d90a      	bls.n	181a2 <bt_conn_identity_resolved+0x3a>
   1818c:	4815      	ldr	r0, [pc, #84]	; (181e4 <bt_conn_identity_resolved+0x7c>)
   1818e:	4641      	mov	r1, r8
   18190:	f44f 62f2 	mov.w	r2, #1936	; 0x790
   18194:	f00d fd2f 	bl	25bf6 <assert_print>
   18198:	f44f 61f2 	mov.w	r1, #1936	; 0x790
   1819c:	4640      	mov	r0, r8
   1819e:	f00d fd23 	bl	25be8 <assert_post_action>
   181a2:	42bd      	cmp	r5, r7
   181a4:	d30c      	bcc.n	181c0 <bt_conn_identity_resolved+0x58>
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
		}
	}
}
   181a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   181aa:	f100 0697 	add.w	r6, r0, #151	; 0x97
   181ae:	e7e2      	b.n	18176 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   181b0:	692b      	ldr	r3, [r5, #16]
   181b2:	b11b      	cbz	r3, 181bc <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   181b4:	463a      	mov	r2, r7
   181b6:	4631      	mov	r1, r6
   181b8:	4620      	mov	r0, r4
   181ba:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   181bc:	69ad      	ldr	r5, [r5, #24]
   181be:	e7de      	b.n	1817e <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   181c0:	692b      	ldr	r3, [r5, #16]
   181c2:	b123      	cbz	r3, 181ce <bt_conn_identity_resolved+0x66>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   181c4:	f104 0290 	add.w	r2, r4, #144	; 0x90
   181c8:	4631      	mov	r1, r6
   181ca:	4620      	mov	r0, r4
   181cc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   181ce:	351c      	adds	r5, #28
   181d0:	e7da      	b.n	18188 <bt_conn_identity_resolved+0x20>
   181d2:	bf00      	nop
   181d4:	2000233c 	.word	0x2000233c
   181d8:	00029ff8 	.word	0x00029ff8
   181dc:	0002a014 	.word	0x0002a014
   181e0:	0002caa3 	.word	0x0002caa3
   181e4:	0002ab8c 	.word	0x0002ab8c

000181e8 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   181e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn->required_sec_level = conn->sec_level;
   181ec:	7a43      	ldrb	r3, [r0, #9]
   181ee:	7283      	strb	r3, [r0, #10]
{
   181f0:	4604      	mov	r4, r0
   181f2:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   181f4:	f00f f86a 	bl	272cc <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   181f8:	4b13      	ldr	r3, [pc, #76]	; (18248 <bt_conn_security_changed+0x60>)
   181fa:	681d      	ldr	r5, [r3, #0]
   181fc:	b9a5      	cbnz	r5, 18228 <bt_conn_security_changed+0x40>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   181fe:	4d13      	ldr	r5, [pc, #76]	; (1824c <bt_conn_security_changed+0x64>)
   18200:	4f13      	ldr	r7, [pc, #76]	; (18250 <bt_conn_security_changed+0x68>)
   18202:	f8df 8050 	ldr.w	r8, [pc, #80]	; 18254 <bt_conn_security_changed+0x6c>
   18206:	42bd      	cmp	r5, r7
   18208:	d90a      	bls.n	18220 <bt_conn_security_changed+0x38>
   1820a:	4813      	ldr	r0, [pc, #76]	; (18258 <bt_conn_security_changed+0x70>)
   1820c:	4641      	mov	r1, r8
   1820e:	f240 72fc 	movw	r2, #2044	; 0x7fc
   18212:	f00d fcf0 	bl	25bf6 <assert_print>
   18216:	f240 71fc 	movw	r1, #2044	; 0x7fc
   1821a:	4640      	mov	r0, r8
   1821c:	f00d fce4 	bl	25be8 <assert_post_action>
   18220:	42bd      	cmp	r5, r7
   18222:	d309      	bcc.n	18238 <bt_conn_security_changed+0x50>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   18224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->security_changed) {
   18228:	696b      	ldr	r3, [r5, #20]
   1822a:	b11b      	cbz	r3, 18234 <bt_conn_security_changed+0x4c>
			cb->security_changed(conn, conn->sec_level, err);
   1822c:	7a61      	ldrb	r1, [r4, #9]
   1822e:	4632      	mov	r2, r6
   18230:	4620      	mov	r0, r4
   18232:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18234:	69ad      	ldr	r5, [r5, #24]
   18236:	e7e1      	b.n	181fc <bt_conn_security_changed+0x14>
		if (cb->security_changed) {
   18238:	696b      	ldr	r3, [r5, #20]
   1823a:	b11b      	cbz	r3, 18244 <bt_conn_security_changed+0x5c>
			cb->security_changed(conn, conn->sec_level, err);
   1823c:	7a61      	ldrb	r1, [r4, #9]
   1823e:	4632      	mov	r2, r6
   18240:	4620      	mov	r0, r4
   18242:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18244:	351c      	adds	r5, #28
   18246:	e7de      	b.n	18206 <bt_conn_security_changed+0x1e>
   18248:	2000233c 	.word	0x2000233c
   1824c:	00029ff8 	.word	0x00029ff8
   18250:	0002a014 	.word	0x0002a014
   18254:	0002caa3 	.word	0x0002caa3
   18258:	0002ab8c 	.word	0x0002ab8c

0001825c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1825c:	4b02      	ldr	r3, [pc, #8]	; (18268 <bt_conn_cb_register+0xc>)
   1825e:	681a      	ldr	r2, [r3, #0]
   18260:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   18262:	6018      	str	r0, [r3, #0]
}
   18264:	4770      	bx	lr
   18266:	bf00      	nop
   18268:	2000233c 	.word	0x2000233c

0001826c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1826c:	b570      	push	{r4, r5, r6, lr}
   1826e:	4606      	mov	r6, r0
   18270:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   18272:	480a      	ldr	r0, [pc, #40]	; (1829c <bt_conn_add_le+0x30>)
   18274:	2101      	movs	r1, #1
   18276:	f7ff fbf3 	bl	17a60 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1827a:	4604      	mov	r4, r0
   1827c:	b160      	cbz	r0, 18298 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   1827e:	7206      	strb	r6, [r0, #8]
   18280:	2207      	movs	r2, #7
   18282:	4629      	mov	r1, r5
   18284:	3090      	adds	r0, #144	; 0x90
   18286:	f00e fc64 	bl	26b52 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1828a:	2301      	movs	r3, #1
   1828c:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   1828e:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   18290:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   18292:	4b03      	ldr	r3, [pc, #12]	; (182a0 <bt_conn_add_le+0x34>)
   18294:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   18298:	4620      	mov	r0, r4
   1829a:	bd70      	pop	{r4, r5, r6, pc}
   1829c:	20001a38 	.word	0x20001a38
   182a0:	00280018 	.word	0x00280018

000182a4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   182a4:	b570      	push	{r4, r5, r6, lr}
   182a6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   182a8:	480c      	ldr	r0, [pc, #48]	; (182dc <bt_conn_lookup_addr_le+0x38>)
{
   182aa:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   182ac:	f00e feb0 	bl	27010 <bt_conn_ref>

		if (!conn) {
   182b0:	4604      	mov	r4, r0
   182b2:	b128      	cbz	r0, 182c0 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   182b4:	7883      	ldrb	r3, [r0, #2]
   182b6:	2b01      	cmp	r3, #1
   182b8:	d004      	beq.n	182c4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   182ba:	f7ff fd3f 	bl	17d3c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   182be:	2400      	movs	r4, #0
}
   182c0:	4620      	mov	r0, r4
   182c2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   182c4:	4629      	mov	r1, r5
   182c6:	4632      	mov	r2, r6
   182c8:	f00e ff55 	bl	27176 <bt_conn_is_peer_addr_le>
   182cc:	4605      	mov	r5, r0
   182ce:	2800      	cmp	r0, #0
   182d0:	d1f6      	bne.n	182c0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   182d2:	4620      	mov	r0, r4
   182d4:	f7ff fd32 	bl	17d3c <bt_conn_unref>
	return NULL;
   182d8:	462c      	mov	r4, r5
			continue;
   182da:	e7f1      	b.n	182c0 <bt_conn_lookup_addr_le+0x1c>
   182dc:	20001a38 	.word	0x20001a38

000182e0 <bt_conn_exists_le>:
{
   182e0:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   182e2:	f7ff ffdf 	bl	182a4 <bt_conn_lookup_addr_le>
	if (conn) {
   182e6:	4604      	mov	r4, r0
   182e8:	b170      	cbz	r0, 18308 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   182ea:	7b43      	ldrb	r3, [r0, #13]
   182ec:	4807      	ldr	r0, [pc, #28]	; (1830c <bt_conn_exists_le+0x2c>)
   182ee:	2b08      	cmp	r3, #8
   182f0:	bf96      	itet	ls
   182f2:	4a07      	ldrls	r2, [pc, #28]	; (18310 <bt_conn_exists_le+0x30>)
   182f4:	4a07      	ldrhi	r2, [pc, #28]	; (18314 <bt_conn_exists_le+0x34>)
   182f6:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   182fa:	2157      	movs	r1, #87	; 0x57
   182fc:	f00d fc89 	bl	25c12 <z_log_minimal_printk>
		bt_conn_unref(conn);
   18300:	4620      	mov	r0, r4
   18302:	f7ff fd1b 	bl	17d3c <bt_conn_unref>
		return true;
   18306:	2001      	movs	r0, #1
}
   18308:	bd10      	pop	{r4, pc}
   1830a:	bf00      	nop
   1830c:	0002cc74 	.word	0x0002cc74
   18310:	0002a4e8 	.word	0x0002a4e8
   18314:	0002cbe9 	.word	0x0002cbe9

00018318 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   18318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1831a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1831c:	480e      	ldr	r0, [pc, #56]	; (18358 <bt_conn_lookup_state_le+0x40>)
{
   1831e:	460e      	mov	r6, r1
   18320:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18322:	f00e fe75 	bl	27010 <bt_conn_ref>

		if (!conn) {
   18326:	4604      	mov	r4, r0
   18328:	b1a0      	cbz	r0, 18354 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1832a:	7883      	ldrb	r3, [r0, #2]
   1832c:	2b01      	cmp	r3, #1
   1832e:	d003      	beq.n	18338 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   18330:	f7ff fd04 	bl	17d3c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18334:	2400      	movs	r4, #0
			continue;
   18336:	e00d      	b.n	18354 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   18338:	b136      	cbz	r6, 18348 <bt_conn_lookup_state_le+0x30>
   1833a:	4632      	mov	r2, r6
   1833c:	4629      	mov	r1, r5
   1833e:	f00e ff1a 	bl	27176 <bt_conn_is_peer_addr_le>
   18342:	b908      	cbnz	r0, 18348 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   18344:	4620      	mov	r0, r4
   18346:	e7f3      	b.n	18330 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   18348:	7b63      	ldrb	r3, [r4, #13]
   1834a:	42bb      	cmp	r3, r7
   1834c:	d1fa      	bne.n	18344 <bt_conn_lookup_state_le+0x2c>
   1834e:	7a23      	ldrb	r3, [r4, #8]
   18350:	42ab      	cmp	r3, r5
   18352:	d1f7      	bne.n	18344 <bt_conn_lookup_state_le+0x2c>
}
   18354:	4620      	mov	r0, r4
   18356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18358:	20001a38 	.word	0x20001a38

0001835c <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   1835c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18360:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18362:	4854      	ldr	r0, [pc, #336]	; (184b4 <bt_conn_le_create+0x158>)
   18364:	f00e fe42 	bl	26fec <atomic_get>
   18368:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1836a:	0741      	lsls	r1, r0, #29
{
   1836c:	4617      	mov	r7, r2
   1836e:	4698      	mov	r8, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18370:	d405      	bmi.n	1837e <bt_conn_le_create+0x22>
		return -EAGAIN;
   18372:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   18376:	4628      	mov	r0, r5
   18378:	b003      	add	sp, #12
   1837a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   1837e:	4610      	mov	r0, r2
   18380:	f00e fd8e 	bl	26ea0 <bt_le_conn_params_valid>
   18384:	b910      	cbnz	r0, 1838c <bt_conn_le_create+0x30>
		return -EINVAL;
   18386:	f06f 0515 	mvn.w	r5, #21
   1838a:	e7f4      	b.n	18376 <bt_conn_le_create+0x1a>
	const uint32_t timeout_max = (MSEC_PER_SEC / 10) * bt_dev.rpa_timeout;
   1838c:	4d4a      	ldr	r5, [pc, #296]	; (184b8 <bt_conn_le_create+0x15c>)
   1838e:	f8b5 31a8 	ldrh.w	r3, [r5, #424]	; 0x1a8
   18392:	2264      	movs	r2, #100	; 0x64
   18394:	4353      	muls	r3, r2
	if (param->timeout > timeout_max) {
   18396:	89b2      	ldrh	r2, [r6, #12]
   18398:	4293      	cmp	r3, r2
   1839a:	d3f4      	bcc.n	18386 <bt_conn_le_create+0x2a>
   1839c:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   183a0:	f00e fe24 	bl	26fec <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   183a4:	0602      	lsls	r2, r0, #24
   183a6:	d4e4      	bmi.n	18372 <bt_conn_le_create+0x16>
   183a8:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   183ac:	f00e fe1e 	bl	26fec <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   183b0:	04c3      	lsls	r3, r0, #19
   183b2:	f3c0 3900 	ubfx	r9, r0, #12, #1
   183b6:	d476      	bmi.n	184a6 <bt_conn_le_create+0x14a>
	if (!bt_id_scan_random_addr_check()) {
   183b8:	f00e fdcc 	bl	26f54 <bt_id_scan_random_addr_check>
   183bc:	2800      	cmp	r0, #0
   183be:	d0e2      	beq.n	18386 <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   183c0:	4621      	mov	r1, r4
   183c2:	4648      	mov	r0, r9
   183c4:	f7ff ff8c 	bl	182e0 <bt_conn_exists_le>
   183c8:	2800      	cmp	r0, #0
   183ca:	d1dc      	bne.n	18386 <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   183cc:	7823      	ldrb	r3, [r4, #0]
   183ce:	3b02      	subs	r3, #2
   183d0:	2b01      	cmp	r3, #1
   183d2:	d846      	bhi.n	18462 <bt_conn_le_create+0x106>
   183d4:	2207      	movs	r2, #7
   183d6:	4621      	mov	r1, r4
   183d8:	4668      	mov	r0, sp
   183da:	f00e fbba 	bl	26b52 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   183de:	f89d 3000 	ldrb.w	r3, [sp]
   183e2:	3b02      	subs	r3, #2
   183e4:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   183e8:	4669      	mov	r1, sp
   183ea:	2000      	movs	r0, #0
   183ec:	f7ff ff3e 	bl	1826c <bt_conn_add_le>
	if (!conn) {
   183f0:	4604      	mov	r4, r0
   183f2:	2800      	cmp	r0, #0
   183f4:	d05a      	beq.n	184ac <bt_conn_le_create+0x150>
	conn->le.interval_min = param->interval_min;
   183f6:	883b      	ldrh	r3, [r7, #0]
   183f8:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   183fc:	887b      	ldrh	r3, [r7, #2]
   183fe:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   18402:	88bb      	ldrh	r3, [r7, #4]
   18404:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   18408:	88fb      	ldrh	r3, [r7, #6]
   1840a:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
	bt_dev.create_param = *param;
   1840e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   18412:	4f2a      	ldr	r7, [pc, #168]	; (184bc <bt_conn_le_create+0x160>)
   18414:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   18418:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   1841a:	2b00      	cmp	r3, #0
   1841c:	bf08      	it	eq
   1841e:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   18422:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   18424:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   18426:	b903      	cbnz	r3, 1842a <bt_conn_le_create+0xce>
   18428:	89ab      	ldrh	r3, [r5, #12]
   1842a:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   1842c:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   1842e:	b903      	cbnz	r3, 18432 <bt_conn_le_create+0xd6>
   18430:	89eb      	ldrh	r3, [r5, #14]
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18432:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
	bt_dev.create_param.window_coded =
   18436:	826b      	strh	r3, [r5, #18]
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18438:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   1843c:	429a      	cmp	r2, r3
   1843e:	d919      	bls.n	18474 <bt_conn_le_create+0x118>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   18440:	2102      	movs	r1, #2
   18442:	4620      	mov	r0, r4
   18444:	f7ff fca4 	bl	17d90 <bt_conn_set_state>
		err = bt_le_scan_update(true);
   18448:	2001      	movs	r0, #1
   1844a:	f7fe fedf 	bl	1720c <bt_le_scan_update>
		if (err) {
   1844e:	4605      	mov	r5, r0
   18450:	b330      	cbz	r0, 184a0 <bt_conn_le_create+0x144>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18452:	4620      	mov	r0, r4
   18454:	2100      	movs	r1, #0
   18456:	f7ff fc9b 	bl	17d90 <bt_conn_set_state>
			bt_conn_unref(conn);
   1845a:	4620      	mov	r0, r4
   1845c:	f7ff fc6e 	bl	17d3c <bt_conn_unref>
			return err;
   18460:	e789      	b.n	18376 <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   18462:	4621      	mov	r1, r4
   18464:	f00e fd6e 	bl	26f44 <bt_lookup_id_addr>
   18468:	2207      	movs	r2, #7
   1846a:	4601      	mov	r1, r0
   1846c:	4668      	mov	r0, sp
   1846e:	f00e fb70 	bl	26b52 <memcpy>
}
   18472:	e7b9      	b.n	183e8 <bt_conn_le_create+0x8c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   18474:	2106      	movs	r1, #6
   18476:	4620      	mov	r0, r4
   18478:	f7ff fc8a 	bl	17d90 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   1847c:	4620      	mov	r0, r4
   1847e:	f7fd fbc7 	bl	15c10 <bt_le_create_conn>
	if (err) {
   18482:	4605      	mov	r5, r0
   18484:	b160      	cbz	r0, 184a0 <bt_conn_le_create+0x144>
		conn->err = 0;
   18486:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18488:	4631      	mov	r1, r6
   1848a:	4620      	mov	r0, r4
		conn->err = 0;
   1848c:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1848e:	f7ff fc7f 	bl	17d90 <bt_conn_set_state>
		bt_conn_unref(conn);
   18492:	4620      	mov	r0, r4
   18494:	f7ff fc52 	bl	17d3c <bt_conn_unref>
		bt_le_scan_update(false);
   18498:	4630      	mov	r0, r6
   1849a:	f7fe feb7 	bl	1720c <bt_le_scan_update>
		return err;
   1849e:	e76a      	b.n	18376 <bt_conn_le_create+0x1a>
	*ret_conn = conn;
   184a0:	f8c8 4000 	str.w	r4, [r8]
	return 0;
   184a4:	e767      	b.n	18376 <bt_conn_le_create+0x1a>
		return -EALREADY;
   184a6:	f06f 0577 	mvn.w	r5, #119	; 0x77
   184aa:	e764      	b.n	18376 <bt_conn_le_create+0x1a>
		return -ENOMEM;
   184ac:	f06f 050b 	mvn.w	r5, #11
   184b0:	e761      	b.n	18376 <bt_conn_le_create+0x1a>
   184b2:	bf00      	nop
   184b4:	2000040c 	.word	0x2000040c
   184b8:	20000340 	.word	0x20000340
   184bc:	20000348 	.word	0x20000348

000184c0 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   184c0:	b570      	push	{r4, r5, r6, lr}
   184c2:	4606      	mov	r6, r0
   184c4:	4834      	ldr	r0, [pc, #208]	; (18598 <bt_le_set_auto_conn+0xd8>)
   184c6:	f00e fd91 	bl	26fec <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   184ca:	0740      	lsls	r0, r0, #29
{
   184cc:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   184ce:	d55c      	bpl.n	1858a <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   184d0:	b929      	cbnz	r1, 184de <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   184d2:	f00e fd3f 	bl	26f54 <bt_id_scan_random_addr_check>
   184d6:	b940      	cbnz	r0, 184ea <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   184d8:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   184dc:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   184de:	4608      	mov	r0, r1
   184e0:	f00e fcde 	bl	26ea0 <bt_le_conn_params_valid>
   184e4:	2800      	cmp	r0, #0
   184e6:	d1f4      	bne.n	184d2 <bt_le_set_auto_conn+0x12>
   184e8:	e7f6      	b.n	184d8 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   184ea:	4631      	mov	r1, r6
   184ec:	2000      	movs	r0, #0
   184ee:	f7ff fed9 	bl	182a4 <bt_conn_lookup_addr_le>
	if (!conn) {
   184f2:	4604      	mov	r4, r0
   184f4:	b928      	cbnz	r0, 18502 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   184f6:	4631      	mov	r1, r6
   184f8:	f7ff feb8 	bl	1826c <bt_conn_add_le>
		if (!conn) {
   184fc:	4604      	mov	r4, r0
   184fe:	2800      	cmp	r0, #0
   18500:	d046      	beq.n	18590 <bt_le_set_auto_conn+0xd0>
		if (!atomic_test_and_set_bit(conn->flags,
   18502:	1d20      	adds	r0, r4, #4
	if (param) {
   18504:	b385      	cbz	r5, 18568 <bt_le_set_auto_conn+0xa8>
	conn->le.interval_min = param->interval_min;
   18506:	882b      	ldrh	r3, [r5, #0]
   18508:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   1850c:	886b      	ldrh	r3, [r5, #2]
   1850e:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
	conn->le.latency = param->latency;
   18512:	88ab      	ldrh	r3, [r5, #4]
   18514:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = param->timeout;
   18518:	88eb      	ldrh	r3, [r5, #6]
   1851a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
   1851e:	f3bf 8f5b 	dmb	ish
   18522:	e850 3f00 	ldrex	r3, [r0]
   18526:	f043 0201 	orr.w	r2, r3, #1
   1852a:	e840 2100 	strex	r1, r2, [r0]
   1852e:	2900      	cmp	r1, #0
   18530:	d1f7      	bne.n	18522 <bt_le_set_auto_conn+0x62>
   18532:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
   18536:	07d9      	lsls	r1, r3, #31
   18538:	d402      	bmi.n	18540 <bt_le_set_auto_conn+0x80>
			bt_conn_ref(conn);
   1853a:	4620      	mov	r0, r4
   1853c:	f00e fd68 	bl	27010 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   18540:	7b63      	ldrb	r3, [r4, #13]
   18542:	b963      	cbnz	r3, 1855e <bt_le_set_auto_conn+0x9e>
   18544:	4814      	ldr	r0, [pc, #80]	; (18598 <bt_le_set_auto_conn+0xd8>)
   18546:	f00e fd51 	bl	26fec <atomic_get>
   1854a:	0743      	lsls	r3, r0, #29
   1854c:	d507      	bpl.n	1855e <bt_le_set_auto_conn+0x9e>
		if (param) {
   1854e:	b11d      	cbz	r5, 18558 <bt_le_set_auto_conn+0x98>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   18550:	2102      	movs	r1, #2
   18552:	4620      	mov	r0, r4
   18554:	f7ff fc1c 	bl	17d90 <bt_conn_set_state>
		bt_le_scan_update(false);
   18558:	2000      	movs	r0, #0
   1855a:	f7fe fe57 	bl	1720c <bt_le_scan_update>
	bt_conn_unref(conn);
   1855e:	4620      	mov	r0, r4
   18560:	f7ff fbec 	bl	17d3c <bt_conn_unref>
	return 0;
   18564:	2000      	movs	r0, #0
   18566:	e7b9      	b.n	184dc <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18568:	f06f 0101 	mvn.w	r1, #1
   1856c:	f00e fd2f 	bl	26fce <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   18570:	07c2      	lsls	r2, r0, #31
   18572:	d5e5      	bpl.n	18540 <bt_le_set_auto_conn+0x80>
			bt_conn_unref(conn);
   18574:	4620      	mov	r0, r4
   18576:	f7ff fbe1 	bl	17d3c <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECTING_SCAN) {
   1857a:	7b63      	ldrb	r3, [r4, #13]
   1857c:	2b02      	cmp	r3, #2
   1857e:	d1df      	bne.n	18540 <bt_le_set_auto_conn+0x80>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18580:	4629      	mov	r1, r5
   18582:	4620      	mov	r0, r4
   18584:	f7ff fc04 	bl	17d90 <bt_conn_set_state>
   18588:	e7da      	b.n	18540 <bt_le_set_auto_conn+0x80>
		return -EAGAIN;
   1858a:	f06f 000a 	mvn.w	r0, #10
   1858e:	e7a5      	b.n	184dc <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   18590:	f06f 000b 	mvn.w	r0, #11
   18594:	e7a2      	b.n	184dc <bt_le_set_auto_conn+0x1c>
   18596:	bf00      	nop
   18598:	2000040c 	.word	0x2000040c

0001859c <send_conn_le_param_update>:
{
   1859c:	b538      	push	{r3, r4, r5, lr}
   1859e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   185a0:	4608      	mov	r0, r1
{
   185a2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   185a4:	f00e fc7c 	bl	26ea0 <bt_le_conn_params_valid>
   185a8:	b338      	cbz	r0, 185fa <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   185aa:	4b15      	ldr	r3, [pc, #84]	; (18600 <send_conn_le_param_update+0x64>)
   185ac:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   185b0:	0799      	lsls	r1, r3, #30
   185b2:	d407      	bmi.n	185c4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   185b4:	78e3      	ldrb	r3, [r4, #3]
   185b6:	b173      	cbz	r3, 185d6 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   185b8:	4629      	mov	r1, r5
   185ba:	4620      	mov	r0, r4
}
   185bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   185c0:	f000 baf4 	b.w	18bac <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   185c4:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   185c8:	079a      	lsls	r2, r3, #30
   185ca:	d5f3      	bpl.n	185b4 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   185cc:	1d20      	adds	r0, r4, #4
   185ce:	f00e fd0d 	bl	26fec <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   185d2:	0583      	lsls	r3, r0, #22
   185d4:	d4ee      	bmi.n	185b4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   185d6:	4629      	mov	r1, r5
   185d8:	4620      	mov	r0, r4
   185da:	f00e fe27 	bl	2722c <bt_conn_le_conn_update>
		if (rc == 0) {
   185de:	b958      	cbnz	r0, 185f8 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   185e0:	882b      	ldrh	r3, [r5, #0]
   185e2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   185e6:	886b      	ldrh	r3, [r5, #2]
   185e8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   185ec:	88ab      	ldrh	r3, [r5, #4]
   185ee:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   185f2:	88eb      	ldrh	r3, [r5, #6]
   185f4:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   185f8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   185fa:	f06f 0015 	mvn.w	r0, #21
   185fe:	e7fb      	b.n	185f8 <send_conn_le_param_update+0x5c>
   18600:	20000340 	.word	0x20000340

00018604 <deferred_work>:
{
   18604:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   18608:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   1860c:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1860e:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   18612:	bb73      	cbnz	r3, 18672 <deferred_work+0x6e>
		bt_l2cap_disconnected(conn);
   18614:	4628      	mov	r0, r5
   18616:	f00e fe48 	bl	272aa <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1861a:	4b32      	ldr	r3, [pc, #200]	; (186e4 <deferred_work+0xe0>)
   1861c:	681e      	ldr	r6, [r3, #0]
   1861e:	b9c6      	cbnz	r6, 18652 <deferred_work+0x4e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18620:	4e31      	ldr	r6, [pc, #196]	; (186e8 <deferred_work+0xe4>)
   18622:	4f32      	ldr	r7, [pc, #200]	; (186ec <deferred_work+0xe8>)
   18624:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 186f0 <deferred_work+0xec>
   18628:	42be      	cmp	r6, r7
   1862a:	d90a      	bls.n	18642 <deferred_work+0x3e>
   1862c:	4831      	ldr	r0, [pc, #196]	; (186f4 <deferred_work+0xf0>)
   1862e:	4641      	mov	r1, r8
   18630:	f240 5252 	movw	r2, #1362	; 0x552
   18634:	f00d fadf 	bl	25bf6 <assert_print>
   18638:	f240 5152 	movw	r1, #1362	; 0x552
   1863c:	4640      	mov	r0, r8
   1863e:	f00d fad3 	bl	25be8 <assert_post_action>
   18642:	42be      	cmp	r6, r7
   18644:	d30d      	bcc.n	18662 <deferred_work+0x5e>
		bt_conn_unref(conn);
   18646:	4628      	mov	r0, r5
}
   18648:	b002      	add	sp, #8
   1864a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   1864e:	f7ff bb75 	b.w	17d3c <bt_conn_unref>
		if (cb->disconnected) {
   18652:	6873      	ldr	r3, [r6, #4]
   18654:	b11b      	cbz	r3, 1865e <deferred_work+0x5a>
			cb->disconnected(conn, conn->err);
   18656:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   1865a:	4628      	mov	r0, r5
   1865c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1865e:	69b6      	ldr	r6, [r6, #24]
   18660:	e7dd      	b.n	1861e <deferred_work+0x1a>
		if (cb->disconnected) {
   18662:	6873      	ldr	r3, [r6, #4]
   18664:	b11b      	cbz	r3, 1866e <deferred_work+0x6a>
			cb->disconnected(conn, conn->err);
   18666:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   1866a:	4628      	mov	r0, r5
   1866c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1866e:	361c      	adds	r6, #28
   18670:	e7da      	b.n	18628 <deferred_work+0x24>
	if (conn->type != BT_CONN_TYPE_LE) {
   18672:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   18676:	2b01      	cmp	r3, #1
   18678:	d130      	bne.n	186dc <deferred_work+0xd8>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1867a:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   1867e:	b923      	cbnz	r3, 1868a <deferred_work+0x86>
}
   18680:	b002      	add	sp, #8
   18682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_create_conn_cancel();
   18686:	f7fd bb25 	b.w	15cd4 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   1868a:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1868e:	f46f 7180 	mvn.w	r1, #256	; 0x100
   18692:	4630      	mov	r0, r6
   18694:	f00e fc9b 	bl	26fce <atomic_and>
   18698:	05c3      	lsls	r3, r0, #23
   1869a:	d513      	bpl.n	186c4 <deferred_work+0xc0>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1869c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   186a0:	f8ad 3000 	strh.w	r3, [sp]
   186a4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   186a8:	f8ad 3002 	strh.w	r3, [sp, #2]
   186ac:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   186b0:	f8ad 3004 	strh.w	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   186b4:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   186b6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   186ba:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   186be:	4628      	mov	r0, r5
   186c0:	f7ff ff6c 	bl	1859c <send_conn_le_param_update>
   186c4:	f3bf 8f5b 	dmb	ish
   186c8:	e856 3f00 	ldrex	r3, [r6]
   186cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   186d0:	e846 3200 	strex	r2, r3, [r6]
   186d4:	2a00      	cmp	r2, #0
   186d6:	d1f7      	bne.n	186c8 <deferred_work+0xc4>
   186d8:	f3bf 8f5b 	dmb	ish
}
   186dc:	b002      	add	sp, #8
   186de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   186e2:	bf00      	nop
   186e4:	2000233c 	.word	0x2000233c
   186e8:	00029ff8 	.word	0x00029ff8
   186ec:	0002a014 	.word	0x0002a014
   186f0:	0002caa3 	.word	0x0002caa3
   186f4:	0002ab8c 	.word	0x0002ab8c

000186f8 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   186f8:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   186fa:	4801      	ldr	r0, [pc, #4]	; (18700 <bt_conn_create_frag_timeout+0x8>)
   186fc:	f7ff bc60 	b.w	17fc0 <bt_conn_create_pdu_timeout>
   18700:	20000928 	.word	0x20000928

00018704 <create_frag>:
{
   18704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18708:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1870a:	f04f 33ff 	mov.w	r3, #4294967295
   1870e:	f04f 32ff 	mov.w	r2, #4294967295
   18712:	2000      	movs	r0, #0
{
   18714:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   18716:	f7ff ffef 	bl	186f8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1871a:	7b73      	ldrb	r3, [r6, #13]
   1871c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   1871e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   18720:	f04f 0600 	mov.w	r6, #0
   18724:	d005      	beq.n	18732 <create_frag+0x2e>
		net_buf_unref(frag);
   18726:	f005 fdc9 	bl	1e2bc <net_buf_unref>
		return NULL;
   1872a:	4635      	mov	r5, r6
}
   1872c:	4628      	mov	r0, r5
   1872e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   18732:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   18734:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   18738:	4e0c      	ldr	r6, [pc, #48]	; (1876c <create_frag+0x68>)
   1873a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1873c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   18740:	f010 fcca 	bl	290d8 <net_buf_simple_tailroom>
   18744:	4580      	cmp	r8, r0
   18746:	d20c      	bcs.n	18762 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   18748:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1874c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   18750:	4632      	mov	r2, r6
   18752:	4638      	mov	r0, r7
   18754:	f010 fcc8 	bl	290e8 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   18758:	4631      	mov	r1, r6
   1875a:	4620      	mov	r0, r4
   1875c:	f005 fe8a 	bl	1e474 <net_buf_simple_pull>
   18760:	e7e4      	b.n	1872c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   18762:	4638      	mov	r0, r7
   18764:	f010 fcb8 	bl	290d8 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18768:	b286      	uxth	r6, r0
   1876a:	e7ef      	b.n	1874c <create_frag+0x48>
   1876c:	20000340 	.word	0x20000340

00018770 <bt_conn_process_tx>:
{
   18770:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   18772:	7b43      	ldrb	r3, [r0, #13]
{
   18774:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   18776:	b95b      	cbnz	r3, 18790 <bt_conn_process_tx+0x20>
   18778:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1877c:	3004      	adds	r0, #4
   1877e:	f00e fc26 	bl	26fce <atomic_and>
   18782:	0643      	lsls	r3, r0, #25
   18784:	d504      	bpl.n	18790 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   18786:	4620      	mov	r0, r4
}
   18788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1878c:	f7ff b99c 	b.w	17ac8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   18790:	2200      	movs	r2, #0
   18792:	2300      	movs	r3, #0
   18794:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18798:	f005 fc40 	bl	1e01c <net_buf_get>
	BT_ASSERT(buf);
   1879c:	4605      	mov	r5, r0
   1879e:	b958      	cbnz	r0, 187b8 <bt_conn_process_tx+0x48>
   187a0:	4923      	ldr	r1, [pc, #140]	; (18830 <bt_conn_process_tx+0xc0>)
   187a2:	4824      	ldr	r0, [pc, #144]	; (18834 <bt_conn_process_tx+0xc4>)
   187a4:	f240 320b 	movw	r2, #779	; 0x30b
   187a8:	f00d fa25 	bl	25bf6 <assert_print>
   187ac:	4040      	eors	r0, r0
   187ae:	f380 8811 	msr	BASEPRI, r0
   187b2:	f04f 0003 	mov.w	r0, #3
   187b6:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   187b8:	4e1f      	ldr	r6, [pc, #124]	; (18838 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   187ba:	89aa      	ldrh	r2, [r5, #12]
   187bc:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   187c0:	429a      	cmp	r2, r3
   187c2:	d807      	bhi.n	187d4 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   187c4:	2300      	movs	r3, #0
   187c6:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   187c8:	4629      	mov	r1, r5
   187ca:	4620      	mov	r0, r4
   187cc:	f7ff f8b2 	bl	17934 <send_frag>
	if (!send_buf(conn, buf)) {
   187d0:	b968      	cbnz	r0, 187ee <bt_conn_process_tx+0x7e>
   187d2:	e005      	b.n	187e0 <bt_conn_process_tx+0x70>
	frag = create_frag(conn, buf);
   187d4:	4629      	mov	r1, r5
   187d6:	4620      	mov	r0, r4
   187d8:	f7ff ff94 	bl	18704 <create_frag>
	if (!frag) {
   187dc:	4601      	mov	r1, r0
   187de:	b938      	cbnz	r0, 187f0 <bt_conn_process_tx+0x80>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   187e0:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   187e2:	2300      	movs	r3, #0
   187e4:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   187e6:	4628      	mov	r0, r5
   187e8:	f005 fd68 	bl	1e2bc <net_buf_unref>
		if (tx) {
   187ec:	b9ce      	cbnz	r6, 18822 <bt_conn_process_tx+0xb2>
}
   187ee:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   187f0:	2301      	movs	r3, #1
   187f2:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   187f4:	4620      	mov	r0, r4
   187f6:	f7ff f89d 	bl	17934 <send_frag>
   187fa:	2800      	cmp	r0, #0
   187fc:	d0f0      	beq.n	187e0 <bt_conn_process_tx+0x70>
	while (buf->len > conn_mtu(conn)) {
   187fe:	89aa      	ldrh	r2, [r5, #12]
   18800:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   18804:	429a      	cmp	r2, r3
   18806:	d802      	bhi.n	1880e <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   18808:	2300      	movs	r3, #0
   1880a:	2203      	movs	r2, #3
   1880c:	e7dc      	b.n	187c8 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
   1880e:	4629      	mov	r1, r5
   18810:	4620      	mov	r0, r4
   18812:	f7ff ff77 	bl	18704 <create_frag>
		if (!frag) {
   18816:	4601      	mov	r1, r0
   18818:	2800      	cmp	r0, #0
   1881a:	d0e1      	beq.n	187e0 <bt_conn_process_tx+0x70>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1881c:	2301      	movs	r3, #1
   1881e:	461a      	mov	r2, r3
   18820:	e7e8      	b.n	187f4 <bt_conn_process_tx+0x84>
			conn_tx_destroy(conn, tx);
   18822:	4631      	mov	r1, r6
   18824:	4620      	mov	r0, r4
}
   18826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   1882a:	f7ff b85d 	b.w	178e8 <conn_tx_destroy>
   1882e:	bf00      	nop
   18830:	0002caa3 	.word	0x0002caa3
   18834:	0002ab8c 	.word	0x0002ab8c
   18838:	20000340 	.word	0x20000340

0001883c <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   1883c:	4b0c      	ldr	r3, [pc, #48]	; (18870 <bt_conn_auth_cb_register+0x34>)
   1883e:	b908      	cbnz	r0, 18844 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   18840:	6018      	str	r0, [r3, #0]
		return 0;
   18842:	4770      	bx	lr
	}

	if (bt_auth) {
   18844:	681a      	ldr	r2, [r3, #0]
   18846:	b962      	cbnz	r2, 18862 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   18848:	6902      	ldr	r2, [r0, #16]
   1884a:	b93a      	cbnz	r2, 1885c <bt_conn_auth_cb_register+0x20>
   1884c:	6802      	ldr	r2, [r0, #0]
   1884e:	b95a      	cbnz	r2, 18868 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   18850:	6842      	ldr	r2, [r0, #4]
   18852:	b94a      	cbnz	r2, 18868 <bt_conn_auth_cb_register+0x2c>
   18854:	6882      	ldr	r2, [r0, #8]
   18856:	b93a      	cbnz	r2, 18868 <bt_conn_auth_cb_register+0x2c>
   18858:	6942      	ldr	r2, [r0, #20]
   1885a:	b92a      	cbnz	r2, 18868 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   1885c:	6018      	str	r0, [r3, #0]
	return 0;
   1885e:	2000      	movs	r0, #0
   18860:	4770      	bx	lr
		return -EALREADY;
   18862:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18866:	4770      	bx	lr
		return -EINVAL;
   18868:	f06f 0015 	mvn.w	r0, #21
}
   1886c:	4770      	bx	lr
   1886e:	bf00      	nop
   18870:	20002330 	.word	0x20002330

00018874 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   18874:	4603      	mov	r3, r0
   18876:	b168      	cbz	r0, 18894 <bt_conn_auth_info_cb_register+0x20>
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   18878:	f100 020c 	add.w	r2, r0, #12
	parent->next = child;
   1887c:	2000      	movs	r0, #0
   1887e:	60d8      	str	r0, [r3, #12]
	return list->tail;
   18880:	4b06      	ldr	r3, [pc, #24]	; (1889c <bt_conn_auth_info_cb_register+0x28>)
   18882:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   18884:	b919      	cbnz	r1, 1888e <bt_conn_auth_info_cb_register+0x1a>
	list->head = node;
   18886:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   1888a:	4608      	mov	r0, r1
}
   1888c:	4770      	bx	lr
	parent->next = child;
   1888e:	600a      	str	r2, [r1, #0]
	list->tail = node;
   18890:	605a      	str	r2, [r3, #4]
}
   18892:	4770      	bx	lr
		return -EINVAL;
   18894:	f06f 0015 	mvn.w	r0, #21
}
   18898:	4770      	bx	lr
   1889a:	bf00      	nop
   1889c:	20002334 	.word	0x20002334

000188a0 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   188a0:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   188a2:	4914      	ldr	r1, [pc, #80]	; (188f4 <bt_conn_init+0x54>)
   188a4:	4814      	ldr	r0, [pc, #80]	; (188f8 <bt_conn_init+0x58>)
   188a6:	f011 f8a5 	bl	299f4 <k_queue_append>
   188aa:	4914      	ldr	r1, [pc, #80]	; (188fc <bt_conn_init+0x5c>)
   188ac:	4812      	ldr	r0, [pc, #72]	; (188f8 <bt_conn_init+0x58>)
   188ae:	f011 f8a1 	bl	299f4 <k_queue_append>
   188b2:	4913      	ldr	r1, [pc, #76]	; (18900 <bt_conn_init+0x60>)
   188b4:	4810      	ldr	r0, [pc, #64]	; (188f8 <bt_conn_init+0x58>)
   188b6:	f011 f89d 	bl	299f4 <k_queue_append>
	}

	bt_att_init();
   188ba:	f001 f881 	bl	199c0 <bt_att_init>

	err = bt_smp_init();
   188be:	f005 f8eb 	bl	1da98 <bt_smp_init>
	if (err) {
   188c2:	4605      	mov	r5, r0
   188c4:	b998      	cbnz	r0, 188ee <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
   188c6:	f00e fd64 	bl	27392 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   188ca:	480e      	ldr	r0, [pc, #56]	; (18904 <bt_conn_init+0x64>)
   188cc:	f00e fba0 	bl	27010 <bt_conn_ref>

			if (!conn) {
   188d0:	4604      	mov	r4, r0
   188d2:	b160      	cbz	r0, 188ee <bt_conn_init+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   188d4:	3004      	adds	r0, #4
   188d6:	f00e fb89 	bl	26fec <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   188da:	07c3      	lsls	r3, r0, #31
   188dc:	d504      	bpl.n	188e8 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   188de:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn,
   188e0:	2102      	movs	r1, #2
   188e2:	4620      	mov	r0, r4
   188e4:	f7ff fa54 	bl	17d90 <bt_conn_set_state>
						  BT_CONN_CONNECTING_SCAN);
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   188e8:	4620      	mov	r0, r4
   188ea:	f7ff fa27 	bl	17d3c <bt_conn_unref>
		}
	}

	return 0;
}
   188ee:	4628      	mov	r0, r5
   188f0:	bd38      	pop	{r3, r4, r5, pc}
   188f2:	bf00      	nop
   188f4:	20002340 	.word	0x20002340
   188f8:	200008a4 	.word	0x200008a4
   188fc:	20002350 	.word	0x20002350
   18900:	20002360 	.word	0x20002360
   18904:	20001a38 	.word	0x20001a38

00018908 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   18908:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1890a:	4b07      	ldr	r3, [pc, #28]	; (18928 <l2cap_accept+0x20>)
{
   1890c:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
   1890e:	6818      	ldr	r0, [r3, #0]
   18910:	b918      	cbnz	r0, 1891a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   18912:	4a06      	ldr	r2, [pc, #24]	; (1892c <l2cap_accept+0x24>)
   18914:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   18916:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   18918:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
   1891a:	4805      	ldr	r0, [pc, #20]	; (18930 <l2cap_accept+0x28>)
   1891c:	2145      	movs	r1, #69	; 0x45
   1891e:	f00d f978 	bl	25c12 <z_log_minimal_printk>
   18922:	f06f 000b 	mvn.w	r0, #11
   18926:	e7f7      	b.n	18918 <l2cap_accept+0x10>
   18928:	20002370 	.word	0x20002370
   1892c:	0002a52c 	.word	0x0002a52c
   18930:	0002cd15 	.word	0x0002cd15

00018934 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   18934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18936:	4605      	mov	r5, r0
   18938:	460f      	mov	r7, r1
   1893a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1893c:	2300      	movs	r3, #0
   1893e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18942:	2104      	movs	r1, #4
   18944:	2000      	movs	r0, #0
   18946:	f7ff fb3b 	bl	17fc0 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1894a:	4604      	mov	r4, r0
   1894c:	b930      	cbnz	r0, 1895c <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1894e:	4807      	ldr	r0, [pc, #28]	; (1896c <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   18950:	462a      	mov	r2, r5
   18952:	2145      	movs	r1, #69	; 0x45
   18954:	f00d f95d 	bl	25c12 <z_log_minimal_printk>
}
   18958:	4620      	mov	r0, r4
   1895a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1895c:	2104      	movs	r1, #4
   1895e:	3008      	adds	r0, #8
   18960:	f005 fdc2 	bl	1e4e8 <net_buf_simple_add>
	hdr->code = code;
   18964:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   18966:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   18968:	8046      	strh	r6, [r0, #2]
	return buf;
   1896a:	e7f5      	b.n	18958 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   1896c:	0002cd41 	.word	0x0002cd41

00018970 <bt_l2cap_connected>:
{
   18970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18972:	4d2b      	ldr	r5, [pc, #172]	; (18a20 <bt_l2cap_connected+0xb0>)
   18974:	4e2b      	ldr	r6, [pc, #172]	; (18a24 <bt_l2cap_connected+0xb4>)
   18976:	4f2c      	ldr	r7, [pc, #176]	; (18a28 <bt_l2cap_connected+0xb8>)
{
   18978:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1897a:	42b5      	cmp	r5, r6
   1897c:	d90a      	bls.n	18994 <bt_l2cap_connected+0x24>
   1897e:	482b      	ldr	r0, [pc, #172]	; (18a2c <bt_l2cap_connected+0xbc>)
   18980:	4639      	mov	r1, r7
   18982:	f240 1281 	movw	r2, #385	; 0x181
   18986:	f00d f936 	bl	25bf6 <assert_print>
   1898a:	f240 1181 	movw	r1, #385	; 0x181
   1898e:	4638      	mov	r0, r7
   18990:	f00d f92a 	bl	25be8 <assert_post_action>
   18994:	42b5      	cmp	r5, r6
   18996:	d301      	bcc.n	1899c <bt_l2cap_connected+0x2c>
}
   18998:	b003      	add	sp, #12
   1899a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1899c:	686b      	ldr	r3, [r5, #4]
   1899e:	a901      	add	r1, sp, #4
   189a0:	4620      	mov	r0, r4
   189a2:	4798      	blx	r3
   189a4:	2800      	cmp	r0, #0
   189a6:	db35      	blt.n	18a14 <bt_l2cap_connected+0xa4>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   189a8:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   189aa:	882a      	ldrh	r2, [r5, #0]
   189ac:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   189ae:	849a      	strh	r2, [r3, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   189b0:	2100      	movs	r1, #0
   189b2:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   189b6:	68a8      	ldr	r0, [r5, #8]
   189b8:	f3bf 8f5b 	dmb	ish
   189bc:	e852 cf00 	ldrex	ip, [r2]
   189c0:	e842 1e00 	strex	lr, r1, [r2]
   189c4:	f1be 0f00 	cmp.w	lr, #0
   189c8:	d1f8      	bne.n	189bc <bt_l2cap_connected+0x4c>
   189ca:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   189ce:	6099      	str	r1, [r3, #8]
	return list->tail;
   189d0:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   189d2:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   189d6:	b9f9      	cbnz	r1, 18a18 <bt_l2cap_connected+0xa8>
	list->head = node;
   189d8:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->destroy = destroy;
   189dc:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   189de:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   189e0:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
   189e2:	6843      	ldr	r3, [r0, #4]
   189e4:	681b      	ldr	r3, [r3, #0]
   189e6:	b103      	cbz	r3, 189ea <bt_l2cap_connected+0x7a>
			chan->ops->connected(chan);
   189e8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   189ea:	9b01      	ldr	r3, [sp, #4]
   189ec:	f3bf 8f5b 	dmb	ish
   189f0:	3310      	adds	r3, #16
   189f2:	e853 2f00 	ldrex	r2, [r3]
   189f6:	f042 0201 	orr.w	r2, r2, #1
   189fa:	e843 2100 	strex	r1, r2, [r3]
   189fe:	2900      	cmp	r1, #0
   18a00:	d1f7      	bne.n	189f2 <bt_l2cap_connected+0x82>
   18a02:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   18a06:	9801      	ldr	r0, [sp, #4]
   18a08:	6843      	ldr	r3, [r0, #4]
   18a0a:	699b      	ldr	r3, [r3, #24]
   18a0c:	b113      	cbz	r3, 18a14 <bt_l2cap_connected+0xa4>
			chan->ops->status(chan, chan->status);
   18a0e:	f100 0110 	add.w	r1, r0, #16
   18a12:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18a14:	350c      	adds	r5, #12
   18a16:	e7b0      	b.n	1897a <bt_l2cap_connected+0xa>
	parent->next = child;
   18a18:	600a      	str	r2, [r1, #0]
	list->tail = node;
   18a1a:	65a2      	str	r2, [r4, #88]	; 0x58
}
   18a1c:	e7de      	b.n	189dc <bt_l2cap_connected+0x6c>
   18a1e:	bf00      	nop
   18a20:	00029fd4 	.word	0x00029fd4
   18a24:	00029ff8 	.word	0x00029ff8
   18a28:	0002cd6e 	.word	0x0002cd6e
   18a2c:	0002ab8c 	.word	0x0002ab8c

00018a30 <l2cap_recv>:
{
   18a30:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   18a32:	898b      	ldrh	r3, [r1, #12]
   18a34:	2b03      	cmp	r3, #3
{
   18a36:	b085      	sub	sp, #20
   18a38:	4606      	mov	r6, r0
   18a3a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   18a3c:	d804      	bhi.n	18a48 <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   18a3e:	4840      	ldr	r0, [pc, #256]	; (18b40 <l2cap_recv+0x110>)
   18a40:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
   18a42:	f00d f8e6 	bl	25c12 <z_log_minimal_printk>
		return 0;
   18a46:	e00d      	b.n	18a64 <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   18a48:	2104      	movs	r1, #4
   18a4a:	f105 0008 	add.w	r0, r5, #8
   18a4e:	f005 fd2d 	bl	1e4ac <net_buf_simple_pull_mem>
	if (buf->len != len) {
   18a52:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   18a54:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   18a56:	4293      	cmp	r3, r2
   18a58:	4604      	mov	r4, r0
   18a5a:	d006      	beq.n	18a6a <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   18a5c:	4839      	ldr	r0, [pc, #228]	; (18b44 <l2cap_recv+0x114>)
   18a5e:	2145      	movs	r1, #69	; 0x45
   18a60:	f00d f8d7 	bl	25c12 <z_log_minimal_printk>
}
   18a64:	2000      	movs	r0, #0
   18a66:	b005      	add	sp, #20
   18a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   18a6a:	7841      	ldrb	r1, [r0, #1]
   18a6c:	b911      	cbnz	r1, 18a74 <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   18a6e:	4836      	ldr	r0, [pc, #216]	; (18b48 <l2cap_recv+0x118>)
   18a70:	2145      	movs	r1, #69	; 0x45
   18a72:	e7e6      	b.n	18a42 <l2cap_recv+0x12>
	switch (hdr->code) {
   18a74:	7802      	ldrb	r2, [r0, #0]
   18a76:	2a12      	cmp	r2, #18
   18a78:	d00f      	beq.n	18a9a <l2cap_recv+0x6a>
   18a7a:	2a13      	cmp	r2, #19
   18a7c:	d008      	beq.n	18a90 <l2cap_recv+0x60>
   18a7e:	2a01      	cmp	r2, #1
   18a80:	d0f0      	beq.n	18a64 <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   18a82:	4832      	ldr	r0, [pc, #200]	; (18b4c <l2cap_recv+0x11c>)
   18a84:	2157      	movs	r1, #87	; 0x57
   18a86:	f00d f8c4 	bl	25c12 <z_log_minimal_printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   18a8a:	7861      	ldrb	r1, [r4, #1]
   18a8c:	6830      	ldr	r0, [r6, #0]
   18a8e:	e013      	b.n	18ab8 <l2cap_recv+0x88>
	if (buf->len < sizeof(*rsp)) {
   18a90:	2b01      	cmp	r3, #1
   18a92:	d8e7      	bhi.n	18a64 <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   18a94:	482e      	ldr	r0, [pc, #184]	; (18b50 <l2cap_recv+0x120>)
   18a96:	2145      	movs	r1, #69	; 0x45
   18a98:	e7d3      	b.n	18a42 <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   18a9a:	2b07      	cmp	r3, #7
   18a9c:	d802      	bhi.n	18aa4 <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   18a9e:	482d      	ldr	r0, [pc, #180]	; (18b54 <l2cap_recv+0x124>)
   18aa0:	2145      	movs	r1, #69	; 0x45
   18aa2:	e7ce      	b.n	18a42 <l2cap_recv+0x12>
   18aa4:	6834      	ldr	r4, [r6, #0]
	if (conn->state != BT_CONN_CONNECTED) {
   18aa6:	7b63      	ldrb	r3, [r4, #13]
   18aa8:	2b07      	cmp	r3, #7
   18aaa:	d002      	beq.n	18ab2 <l2cap_recv+0x82>
		BT_WARN("Not connected");
   18aac:	482a      	ldr	r0, [pc, #168]	; (18b58 <l2cap_recv+0x128>)
   18aae:	2157      	movs	r1, #87	; 0x57
   18ab0:	e7c7      	b.n	18a42 <l2cap_recv+0x12>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   18ab2:	78e7      	ldrb	r7, [r4, #3]
   18ab4:	b11f      	cbz	r7, 18abe <l2cap_recv+0x8e>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   18ab6:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   18ab8:	f00e fc39 	bl	2732e <l2cap_send_reject.constprop.0>
		break;
   18abc:	e7d2      	b.n	18a64 <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   18abe:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   18ac0:	7850      	ldrb	r0, [r2, #1]
   18ac2:	7813      	ldrb	r3, [r2, #0]
   18ac4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   18ac8:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   18acc:	78d0      	ldrb	r0, [r2, #3]
   18ace:	7893      	ldrb	r3, [r2, #2]
   18ad0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   18ad4:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   18ad8:	7950      	ldrb	r0, [r2, #5]
   18ada:	7913      	ldrb	r3, [r2, #4]
   18adc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   18ae0:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   18ae4:	7993      	ldrb	r3, [r2, #6]
   18ae6:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   18ae8:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   18aea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   18aee:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   18af0:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   18af4:	f7ff ff1e 	bl	18934 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18af8:	4605      	mov	r5, r0
   18afa:	2800      	cmp	r0, #0
   18afc:	d0b2      	beq.n	18a64 <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   18afe:	a902      	add	r1, sp, #8
   18b00:	4620      	mov	r0, r4
   18b02:	f7ff fae5 	bl	180d0 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   18b06:	2102      	movs	r1, #2
   18b08:	4606      	mov	r6, r0
   18b0a:	f105 0008 	add.w	r0, r5, #8
   18b0e:	f005 fceb 	bl	1e4e8 <net_buf_simple_add>
	if (accepted) {
   18b12:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   18b16:	b2db      	uxtb	r3, r3
   18b18:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   18b1a:	462a      	mov	r2, r5
   18b1c:	9700      	str	r7, [sp, #0]
   18b1e:	463b      	mov	r3, r7
   18b20:	2105      	movs	r1, #5
   18b22:	4620      	mov	r0, r4
   18b24:	f00e fbea 	bl	272fc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   18b28:	b110      	cbz	r0, 18b30 <l2cap_recv+0x100>
		net_buf_unref(buf);
   18b2a:	4628      	mov	r0, r5
   18b2c:	f005 fbc6 	bl	1e2bc <net_buf_unref>
	if (accepted) {
   18b30:	2e00      	cmp	r6, #0
   18b32:	d097      	beq.n	18a64 <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   18b34:	a902      	add	r1, sp, #8
   18b36:	4620      	mov	r0, r4
   18b38:	f00e fb78 	bl	2722c <bt_conn_le_conn_update>
   18b3c:	e792      	b.n	18a64 <l2cap_recv+0x34>
   18b3e:	bf00      	nop
   18b40:	0002cd9f 	.word	0x0002cd9f
   18b44:	0002cdc2 	.word	0x0002cdc2
   18b48:	0002cde8 	.word	0x0002cde8
   18b4c:	0002ce6a 	.word	0x0002ce6a
   18b50:	0002ce0e 	.word	0x0002ce0e
   18b54:	0002ce2f 	.word	0x0002ce2f
   18b58:	0002ce57 	.word	0x0002ce57

00018b5c <bt_l2cap_recv>:
{
   18b5c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   18b5e:	898b      	ldrh	r3, [r1, #12]
   18b60:	2b03      	cmp	r3, #3
{
   18b62:	4605      	mov	r5, r0
   18b64:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18b66:	d808      	bhi.n	18b7a <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   18b68:	480e      	ldr	r0, [pc, #56]	; (18ba4 <bt_l2cap_recv+0x48>)
   18b6a:	2145      	movs	r1, #69	; 0x45
   18b6c:	f00d f851 	bl	25c12 <z_log_minimal_printk>
	net_buf_unref(buf);
   18b70:	4620      	mov	r0, r4
}
   18b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   18b76:	f005 bba1 	b.w	1e2bc <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   18b7a:	2104      	movs	r1, #4
   18b7c:	f104 0008 	add.w	r0, r4, #8
   18b80:	f005 fc94 	bl	1e4ac <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   18b84:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   18b86:	4628      	mov	r0, r5
   18b88:	4611      	mov	r1, r2
   18b8a:	f00e fbf8 	bl	2737e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18b8e:	b920      	cbnz	r0, 18b9a <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   18b90:	4805      	ldr	r0, [pc, #20]	; (18ba8 <bt_l2cap_recv+0x4c>)
   18b92:	2157      	movs	r1, #87	; 0x57
   18b94:	f00d f83d 	bl	25c12 <z_log_minimal_printk>
		net_buf_unref(buf);
   18b98:	e7ea      	b.n	18b70 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   18b9a:	6843      	ldr	r3, [r0, #4]
   18b9c:	4621      	mov	r1, r4
   18b9e:	691b      	ldr	r3, [r3, #16]
   18ba0:	4798      	blx	r3
   18ba2:	e7e5      	b.n	18b70 <bt_l2cap_recv+0x14>
   18ba4:	0002ce8d 	.word	0x0002ce8d
   18ba8:	0002ceaf 	.word	0x0002ceaf

00018bac <bt_l2cap_update_conn_param>:
{
   18bac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18bae:	460d      	mov	r5, r1
	ident++;
   18bb0:	4916      	ldr	r1, [pc, #88]	; (18c0c <bt_l2cap_update_conn_param+0x60>)
   18bb2:	780b      	ldrb	r3, [r1, #0]
   18bb4:	3301      	adds	r3, #1
	if (!ident) {
   18bb6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   18bba:	bf08      	it	eq
   18bbc:	2301      	moveq	r3, #1
   18bbe:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18bc0:	7809      	ldrb	r1, [r1, #0]
{
   18bc2:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18bc4:	2208      	movs	r2, #8
   18bc6:	2012      	movs	r0, #18
   18bc8:	f7ff feb4 	bl	18934 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18bcc:	4604      	mov	r4, r0
   18bce:	b1d0      	cbz	r0, 18c06 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   18bd0:	2108      	movs	r1, #8
   18bd2:	4408      	add	r0, r1
   18bd4:	f005 fc88 	bl	1e4e8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   18bd8:	882b      	ldrh	r3, [r5, #0]
   18bda:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   18bdc:	886b      	ldrh	r3, [r5, #2]
   18bde:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   18be0:	88ab      	ldrh	r3, [r5, #4]
   18be2:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   18be4:	88eb      	ldrh	r3, [r5, #6]
   18be6:	80c3      	strh	r3, [r0, #6]
   18be8:	2300      	movs	r3, #0
   18bea:	9300      	str	r3, [sp, #0]
   18bec:	4622      	mov	r2, r4
   18bee:	2105      	movs	r1, #5
   18bf0:	4630      	mov	r0, r6
   18bf2:	f00e fb83 	bl	272fc <bt_l2cap_send_cb>
	if (err) {
   18bf6:	4605      	mov	r5, r0
   18bf8:	b110      	cbz	r0, 18c00 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   18bfa:	4620      	mov	r0, r4
   18bfc:	f005 fb5e 	bl	1e2bc <net_buf_unref>
}
   18c00:	4628      	mov	r0, r5
   18c02:	b002      	add	sp, #8
   18c04:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   18c06:	f06f 050b 	mvn.w	r5, #11
   18c0a:	e7f9      	b.n	18c00 <bt_l2cap_update_conn_param+0x54>
   18c0c:	200028d5 	.word	0x200028d5

00018c10 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   18c10:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   18c12:	7b43      	ldrb	r3, [r0, #13]
   18c14:	2b07      	cmp	r3, #7
   18c16:	d006      	beq.n	18c26 <att_get+0x16>
		BT_WARN("Not connected");
   18c18:	4811      	ldr	r0, [pc, #68]	; (18c60 <att_get+0x50>)
   18c1a:	2157      	movs	r1, #87	; 0x57
   18c1c:	f00c fff9 	bl	25c12 <z_log_minimal_printk>
		return NULL;
   18c20:	2400      	movs	r4, #0
	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
}
   18c22:	4620      	mov	r0, r4
   18c24:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   18c26:	2104      	movs	r1, #4
   18c28:	f00e fba9 	bl	2737e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18c2c:	4604      	mov	r4, r0
   18c2e:	b920      	cbnz	r0, 18c3a <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   18c30:	480c      	ldr	r0, [pc, #48]	; (18c64 <att_get+0x54>)
   18c32:	2145      	movs	r1, #69	; 0x45
   18c34:	f00c ffed 	bl	25c12 <z_log_minimal_printk>
		return NULL;
   18c38:	e7f3      	b.n	18c22 <att_get+0x12>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   18c3a:	2102      	movs	r1, #2
   18c3c:	3094      	adds	r0, #148	; 0x94
   18c3e:	f00e fc12 	bl	27466 <atomic_test_bit>
   18c42:	b950      	cbnz	r0, 18c5a <att_get+0x4a>
   18c44:	4908      	ldr	r1, [pc, #32]	; (18c68 <att_get+0x58>)
   18c46:	4809      	ldr	r0, [pc, #36]	; (18c6c <att_get+0x5c>)
   18c48:	f640 322d 	movw	r2, #2861	; 0xb2d
   18c4c:	f00c ffd3 	bl	25bf6 <assert_print>
   18c50:	4805      	ldr	r0, [pc, #20]	; (18c68 <att_get+0x58>)
   18c52:	f640 312d 	movw	r1, #2861	; 0xb2d
   18c56:	f00c ffc7 	bl	25be8 <assert_post_action>
	return att_chan->att;
   18c5a:	f854 4c04 	ldr.w	r4, [r4, #-4]
   18c5e:	e7e0      	b.n	18c22 <att_get+0x12>
   18c60:	0002ce57 	.word	0x0002ce57
   18c64:	0002cef0 	.word	0x0002cef0
   18c68:	0002cf10 	.word	0x0002cf10
   18c6c:	0002ab8c 	.word	0x0002ab8c

00018c70 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   18c70:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   18c72:	3804      	subs	r0, #4
   18c74:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   18c76:	a901      	add	r1, sp, #4
   18c78:	4802      	ldr	r0, [pc, #8]	; (18c84 <bt_att_released+0x14>)
   18c7a:	f009 f96b 	bl	21f54 <k_mem_slab_free>
}
   18c7e:	b003      	add	sp, #12
   18c80:	f85d fb04 	ldr.w	pc, [sp], #4
   18c84:	200007dc 	.word	0x200007dc

00018c88 <tx_meta_data_free>:
{
   18c88:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   18c8a:	4604      	mov	r4, r0
   18c8c:	b940      	cbnz	r0, 18ca0 <tx_meta_data_free+0x18>
   18c8e:	490a      	ldr	r1, [pc, #40]	; (18cb8 <tx_meta_data_free+0x30>)
   18c90:	480a      	ldr	r0, [pc, #40]	; (18cbc <tx_meta_data_free+0x34>)
   18c92:	22a4      	movs	r2, #164	; 0xa4
   18c94:	f00c ffaf 	bl	25bf6 <assert_print>
   18c98:	4807      	ldr	r0, [pc, #28]	; (18cb8 <tx_meta_data_free+0x30>)
   18c9a:	21a4      	movs	r1, #164	; 0xa4
   18c9c:	f00c ffa4 	bl	25be8 <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   18ca0:	2100      	movs	r1, #0
   18ca2:	4620      	mov	r0, r4
   18ca4:	2214      	movs	r2, #20
   18ca6:	f00d ff5f 	bl	26b68 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   18caa:	4621      	mov	r1, r4
   18cac:	4804      	ldr	r0, [pc, #16]	; (18cc0 <tx_meta_data_free+0x38>)
}
   18cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   18cb2:	f010 be9f 	b.w	299f4 <k_queue_append>
   18cb6:	bf00      	nop
   18cb8:	0002cf10 	.word	0x0002cf10
   18cbc:	0002ab8c 	.word	0x0002ab8c
   18cc0:	20000888 	.word	0x20000888

00018cc4 <find_type_cb>:
{
   18cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   18cc8:	f8d2 9000 	ldr.w	r9, [r2]
{
   18ccc:	b091      	sub	sp, #68	; 0x44
   18cce:	4607      	mov	r7, r0
   18cd0:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18cd2:	2500      	movs	r5, #0
   18cd4:	f642 0301 	movw	r3, #10241	; 0x2801
   18cd8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   18cda:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18cde:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18ce2:	a90b      	add	r1, sp, #44	; 0x2c
{
   18ce4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18ce6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18cea:	f00d ffc6 	bl	26c7a <bt_uuid_cmp>
   18cee:	2800      	cmp	r0, #0
   18cf0:	d060      	beq.n	18db4 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   18cf2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18cf6:	6838      	ldr	r0, [r7, #0]
   18cf8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18cfc:	a90b      	add	r1, sp, #44	; 0x2c
   18cfe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18d02:	f00d ffba 	bl	26c7a <bt_uuid_cmp>
   18d06:	b138      	cbz	r0, 18d18 <find_type_cb+0x54>
		if (data->group &&
   18d08:	68a3      	ldr	r3, [r4, #8]
   18d0a:	b11b      	cbz	r3, 18d14 <find_type_cb+0x50>
   18d0c:	885a      	ldrh	r2, [r3, #2]
   18d0e:	42b2      	cmp	r2, r6
   18d10:	d200      	bcs.n	18d14 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18d12:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   18d14:	2001      	movs	r0, #1
   18d16:	e009      	b.n	18d2c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   18d18:	6861      	ldr	r1, [r4, #4]
   18d1a:	4608      	mov	r0, r1
   18d1c:	f00e fb44 	bl	273a8 <net_buf_frags_len>
   18d20:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   18d24:	1a1b      	subs	r3, r3, r0
   18d26:	2b03      	cmp	r3, #3
   18d28:	d803      	bhi.n	18d32 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   18d2a:	2000      	movs	r0, #0
}
   18d2c:	b011      	add	sp, #68	; 0x44
   18d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   18d32:	4608      	mov	r0, r1
   18d34:	f005 fb1e 	bl	1e374 <net_buf_frag_last>
   18d38:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   18d3a:	6860      	ldr	r0, [r4, #4]
   18d3c:	f00e fb34 	bl	273a8 <net_buf_frags_len>
   18d40:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   18d44:	f105 0b08 	add.w	fp, r5, #8
   18d48:	ebaa 0a00 	sub.w	sl, sl, r0
   18d4c:	4658      	mov	r0, fp
   18d4e:	f010 f9c3 	bl	290d8 <net_buf_simple_tailroom>
   18d52:	4582      	cmp	sl, r0
   18d54:	d231      	bcs.n	18dba <find_type_cb+0xf6>
   18d56:	6860      	ldr	r0, [r4, #4]
   18d58:	f00e fb26 	bl	273a8 <net_buf_frags_len>
   18d5c:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   18d60:	1a18      	subs	r0, r3, r0
	if (!len) {
   18d62:	b970      	cbnz	r0, 18d82 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   18d64:	6863      	ldr	r3, [r4, #4]
   18d66:	7998      	ldrb	r0, [r3, #6]
   18d68:	f005 f816 	bl	1dd98 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18d6c:	2200      	movs	r2, #0
   18d6e:	2300      	movs	r3, #0
   18d70:	f010 f993 	bl	2909a <net_buf_alloc_fixed>
		if (!frag) {
   18d74:	4605      	mov	r5, r0
   18d76:	2800      	cmp	r0, #0
   18d78:	d0d7      	beq.n	18d2a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   18d7a:	4601      	mov	r1, r0
   18d7c:	6860      	ldr	r0, [r4, #4]
   18d7e:	f005 fb39 	bl	1e3f4 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   18d82:	2300      	movs	r3, #0
   18d84:	9300      	str	r3, [sp, #0]
   18d86:	f8d7 9004 	ldr.w	r9, [r7, #4]
   18d8a:	4639      	mov	r1, r7
   18d8c:	2310      	movs	r3, #16
   18d8e:	aa02      	add	r2, sp, #8
   18d90:	4640      	mov	r0, r8
   18d92:	47c8      	blx	r9
	if (read < 0) {
   18d94:	1e07      	subs	r7, r0, #0
   18d96:	db0d      	blt.n	18db4 <find_type_cb+0xf0>
	if (read != data->value_len) {
   18d98:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18d9a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   18d9c:	42ba      	cmp	r2, r7
   18d9e:	d02b      	beq.n	18df8 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18da0:	4601      	mov	r1, r0
   18da2:	a80b      	add	r0, sp, #44	; 0x2c
   18da4:	f00d ff97 	bl	26cd6 <bt_uuid_create>
   18da8:	b958      	cbnz	r0, 18dc2 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   18daa:	7c22      	ldrb	r2, [r4, #16]
   18dac:	4814      	ldr	r0, [pc, #80]	; (18e00 <find_type_cb+0x13c>)
   18dae:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
   18db0:	f00c ff2f 	bl	25c12 <z_log_minimal_printk>
	data->group = NULL;
   18db4:	2300      	movs	r3, #0
   18db6:	60a3      	str	r3, [r4, #8]
   18db8:	e7ac      	b.n	18d14 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   18dba:	4658      	mov	r0, fp
   18dbc:	f010 f98c 	bl	290d8 <net_buf_simple_tailroom>
   18dc0:	e7cf      	b.n	18d62 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18dc2:	b2fa      	uxtb	r2, r7
   18dc4:	a902      	add	r1, sp, #8
   18dc6:	a806      	add	r0, sp, #24
   18dc8:	f00d ff85 	bl	26cd6 <bt_uuid_create>
   18dcc:	b918      	cbnz	r0, 18dd6 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   18dce:	480d      	ldr	r0, [pc, #52]	; (18e04 <find_type_cb+0x140>)
   18dd0:	463a      	mov	r2, r7
   18dd2:	2157      	movs	r1, #87	; 0x57
   18dd4:	e7ec      	b.n	18db0 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18dd6:	a906      	add	r1, sp, #24
   18dd8:	a80b      	add	r0, sp, #44	; 0x2c
   18dda:	f00d ff4e 	bl	26c7a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   18dde:	2800      	cmp	r0, #0
   18de0:	d1e8      	bne.n	18db4 <find_type_cb+0xf0>
	data->err = 0x00;
   18de2:	2300      	movs	r3, #0
   18de4:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   18de6:	2104      	movs	r1, #4
   18de8:	f105 0008 	add.w	r0, r5, #8
   18dec:	f005 fb7c 	bl	1e4e8 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   18df0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18df2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18df4:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   18df6:	e78d      	b.n	18d14 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   18df8:	a902      	add	r1, sp, #8
   18dfa:	f00d fe99 	bl	26b30 <memcmp>
   18dfe:	e7ee      	b.n	18dde <find_type_cb+0x11a>
   18e00:	0002cf3f 	.word	0x0002cf3f
   18e04:	0002cf63 	.word	0x0002cf63

00018e08 <read_group_cb>:
{
   18e08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18e0c:	4605      	mov	r5, r0
   18e0e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18e10:	f04f 0800 	mov.w	r8, #0
   18e14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18e18:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   18e1a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18e1c:	f88d 8008 	strb.w	r8, [sp, #8]
   18e20:	a902      	add	r1, sp, #8
{
   18e22:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18e24:	f8ad 300a 	strh.w	r3, [sp, #10]
   18e28:	f00d ff27 	bl	26c7a <bt_uuid_cmp>
   18e2c:	b1a0      	cbz	r0, 18e58 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18e2e:	f642 0301 	movw	r3, #10241	; 0x2801
   18e32:	6828      	ldr	r0, [r5, #0]
   18e34:	f88d 800c 	strb.w	r8, [sp, #12]
   18e38:	a903      	add	r1, sp, #12
   18e3a:	f8ad 300e 	strh.w	r3, [sp, #14]
   18e3e:	f00d ff1c 	bl	26c7a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18e42:	b148      	cbz	r0, 18e58 <read_group_cb+0x50>
		if (data->group &&
   18e44:	6923      	ldr	r3, [r4, #16]
   18e46:	b11b      	cbz	r3, 18e50 <read_group_cb+0x48>
   18e48:	885a      	ldrh	r2, [r3, #2]
   18e4a:	42b2      	cmp	r2, r6
   18e4c:	d200      	bcs.n	18e50 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18e4e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   18e50:	2001      	movs	r0, #1
}
   18e52:	b004      	add	sp, #16
   18e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18e58:	6861      	ldr	r1, [r4, #4]
   18e5a:	6828      	ldr	r0, [r5, #0]
   18e5c:	f00d ff0d 	bl	26c7a <bt_uuid_cmp>
   18e60:	b110      	cbz	r0, 18e68 <read_group_cb+0x60>
		data->group = NULL;
   18e62:	2300      	movs	r3, #0
   18e64:	6123      	str	r3, [r4, #16]
   18e66:	e7f3      	b.n	18e50 <read_group_cb+0x48>
	if (data->rsp->len &&
   18e68:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18e6a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   18e6c:	781a      	ldrb	r2, [r3, #0]
   18e6e:	b132      	cbz	r2, 18e7e <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18e70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   18e72:	8981      	ldrh	r1, [r0, #12]
   18e74:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   18e76:	4293      	cmp	r3, r2
   18e78:	da01      	bge.n	18e7e <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   18e7a:	2000      	movs	r0, #0
   18e7c:	e7e9      	b.n	18e52 <read_group_cb+0x4a>
   18e7e:	2104      	movs	r1, #4
   18e80:	3008      	adds	r0, #8
   18e82:	f005 fb31 	bl	1e4e8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18e86:	4b09      	ldr	r3, [pc, #36]	; (18eac <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   18e88:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18e8a:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18e8c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18e8e:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18e90:	4629      	mov	r1, r5
   18e92:	9300      	str	r3, [sp, #0]
   18e94:	9401      	str	r4, [sp, #4]
   18e96:	2300      	movs	r3, #0
   18e98:	4638      	mov	r0, r7
   18e9a:	f00e fbce 	bl	2763a <att_chan_read>
	if (read < 0) {
   18e9e:	2800      	cmp	r0, #0
   18ea0:	dbeb      	blt.n	18e7a <read_group_cb+0x72>
	if (!data->group) {
   18ea2:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   18ea4:	3800      	subs	r0, #0
   18ea6:	bf18      	it	ne
   18ea8:	2001      	movne	r0, #1
   18eaa:	e7d2      	b.n	18e52 <read_group_cb+0x4a>
   18eac:	000275b5 	.word	0x000275b5

00018eb0 <chan_send>:
{
   18eb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   18eb4:	688b      	ldr	r3, [r1, #8]
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   18eb6:	f8d1 8014 	ldr.w	r8, [r1, #20]
{
   18eba:	4606      	mov	r6, r0
   18ebc:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   18ebe:	3098      	adds	r0, #152	; 0x98
   18ec0:	2102      	movs	r1, #2
   18ec2:	f00e fad0 	bl	27466 <atomic_test_bit>
   18ec6:	2800      	cmp	r0, #0
   18ec8:	d049      	beq.n	18f5e <chan_send+0xae>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18eca:	781b      	ldrb	r3, [r3, #0]
   18ecc:	2bd2      	cmp	r3, #210	; 0xd2
   18ece:	d114      	bne.n	18efa <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
   18ed0:	6833      	ldr	r3, [r6, #0]
   18ed2:	4621      	mov	r1, r4
   18ed4:	6818      	ldr	r0, [r3, #0]
   18ed6:	f00f ff7b 	bl	28dd0 <bt_smp_sign>
		if (err) {
   18eda:	4605      	mov	r5, r0
   18edc:	b168      	cbz	r0, 18efa <chan_send+0x4a>
			BT_ERR("Error signing data");
   18ede:	4821      	ldr	r0, [pc, #132]	; (18f64 <chan_send+0xb4>)
   18ee0:	2145      	movs	r1, #69	; 0x45
   18ee2:	f00c fe96 	bl	25c12 <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   18ee6:	6960      	ldr	r0, [r4, #20]
   18ee8:	f7ff fece 	bl	18c88 <tx_meta_data_free>
			net_buf_unref(buf);
   18eec:	4620      	mov	r0, r4
   18eee:	f005 f9e5 	bl	1e2bc <net_buf_unref>
}
   18ef2:	4628      	mov	r0, r5
   18ef4:	b003      	add	sp, #12
   18ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   18efa:	f104 0008 	add.w	r0, r4, #8
   18efe:	f010 f8e7 	bl	290d0 <net_buf_simple_headroom>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18f02:	6833      	ldr	r3, [r6, #0]
	state->len = buf->len;
   18f04:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   18f08:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   18f0a:	68a3      	ldr	r3, [r4, #8]
	data->att_chan = chan;
   18f0c:	f8c8 6000 	str.w	r6, [r8]
	state->offset = net_buf_simple_headroom(buf);
   18f10:	4607      	mov	r7, r0
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   18f12:	7818      	ldrb	r0, [r3, #0]
   18f14:	f00e fa62 	bl	273dc <att_op_get_type>
	switch (op_type) {
   18f18:	2805      	cmp	r0, #5
   18f1a:	d813      	bhi.n	18f44 <chan_send+0x94>
   18f1c:	4b12      	ldr	r3, [pc, #72]	; (18f68 <chan_send+0xb8>)
   18f1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18f22:	f8cd 8000 	str.w	r8, [sp]
   18f26:	4628      	mov	r0, r5
   18f28:	4622      	mov	r2, r4
   18f2a:	2104      	movs	r1, #4
   18f2c:	f00e f9e6 	bl	272fc <bt_l2cap_send_cb>
	if (err) {
   18f30:	4605      	mov	r5, r0
   18f32:	2800      	cmp	r0, #0
   18f34:	d0dd      	beq.n	18ef2 <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
   18f36:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   18f38:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   18f3c:	fa10 f787 	uxtah	r7, r0, r7
   18f40:	60a7      	str	r7, [r4, #8]
}
   18f42:	e7d6      	b.n	18ef2 <chan_send+0x42>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   18f44:	4909      	ldr	r1, [pc, #36]	; (18f6c <chan_send+0xbc>)
   18f46:	480a      	ldr	r0, [pc, #40]	; (18f70 <chan_send+0xc0>)
   18f48:	f240 2256 	movw	r2, #598	; 0x256
   18f4c:	f00c fe53 	bl	25bf6 <assert_print>
   18f50:	4806      	ldr	r0, [pc, #24]	; (18f6c <chan_send+0xbc>)
   18f52:	f240 2156 	movw	r1, #598	; 0x256
   18f56:	f00c fe47 	bl	25be8 <assert_post_action>
	return att_unknown;
   18f5a:	4b06      	ldr	r3, [pc, #24]	; (18f74 <chan_send+0xc4>)
   18f5c:	e7e1      	b.n	18f22 <chan_send+0x72>
		return -EINVAL;
   18f5e:	f06f 0515 	mvn.w	r5, #21
   18f62:	e7c6      	b.n	18ef2 <chan_send+0x42>
   18f64:	0002cf87 	.word	0x0002cf87
   18f68:	0002a550 	.word	0x0002a550
   18f6c:	0002cf10 	.word	0x0002cf10
   18f70:	0002ab8c 	.word	0x0002ab8c
   18f74:	00027a2f 	.word	0x00027a2f

00018f78 <bt_att_chan_req_send>:
{
   18f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f7a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   18f7c:	4604      	mov	r4, r0
   18f7e:	b950      	cbnz	r0, 18f96 <bt_att_chan_req_send+0x1e>
   18f80:	4924      	ldr	r1, [pc, #144]	; (19014 <bt_att_chan_req_send+0x9c>)
   18f82:	4825      	ldr	r0, [pc, #148]	; (19018 <bt_att_chan_req_send+0xa0>)
   18f84:	f240 3217 	movw	r2, #791	; 0x317
   18f88:	f00c fe35 	bl	25bf6 <assert_print>
   18f8c:	4821      	ldr	r0, [pc, #132]	; (19014 <bt_att_chan_req_send+0x9c>)
   18f8e:	f240 3117 	movw	r1, #791	; 0x317
   18f92:	f00c fe29 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(req);
   18f96:	b955      	cbnz	r5, 18fae <bt_att_chan_req_send+0x36>
   18f98:	491e      	ldr	r1, [pc, #120]	; (19014 <bt_att_chan_req_send+0x9c>)
   18f9a:	481f      	ldr	r0, [pc, #124]	; (19018 <bt_att_chan_req_send+0xa0>)
   18f9c:	f44f 7246 	mov.w	r2, #792	; 0x318
   18fa0:	f00c fe29 	bl	25bf6 <assert_print>
   18fa4:	481b      	ldr	r0, [pc, #108]	; (19014 <bt_att_chan_req_send+0x9c>)
   18fa6:	f44f 7146 	mov.w	r1, #792	; 0x318
   18faa:	f00c fe1d 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   18fae:	686b      	ldr	r3, [r5, #4]
   18fb0:	b953      	cbnz	r3, 18fc8 <bt_att_chan_req_send+0x50>
   18fb2:	4918      	ldr	r1, [pc, #96]	; (19014 <bt_att_chan_req_send+0x9c>)
   18fb4:	4818      	ldr	r0, [pc, #96]	; (19018 <bt_att_chan_req_send+0xa0>)
   18fb6:	f240 3219 	movw	r2, #793	; 0x319
   18fba:	f00c fe1c 	bl	25bf6 <assert_print>
   18fbe:	4815      	ldr	r0, [pc, #84]	; (19014 <bt_att_chan_req_send+0x9c>)
   18fc0:	f240 3119 	movw	r1, #793	; 0x319
   18fc4:	f00c fe10 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   18fc8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   18fcc:	b153      	cbz	r3, 18fe4 <bt_att_chan_req_send+0x6c>
   18fce:	4911      	ldr	r1, [pc, #68]	; (19014 <bt_att_chan_req_send+0x9c>)
   18fd0:	4811      	ldr	r0, [pc, #68]	; (19018 <bt_att_chan_req_send+0xa0>)
   18fd2:	f240 321a 	movw	r2, #794	; 0x31a
   18fd6:	f00c fe0e 	bl	25bf6 <assert_print>
   18fda:	480e      	ldr	r0, [pc, #56]	; (19014 <bt_att_chan_req_send+0x9c>)
   18fdc:	f240 311a 	movw	r1, #794	; 0x31a
   18fe0:	f00c fe02 	bl	25be8 <assert_post_action>
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   18fe4:	68ae      	ldr	r6, [r5, #8]
   18fe6:	4630      	mov	r0, r6
   18fe8:	f00e f9de 	bl	273a8 <net_buf_frags_len>
   18fec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   18fee:	4283      	cmp	r3, r0
   18ff0:	d30c      	bcc.n	1900c <bt_att_chan_req_send+0x94>
	req->buf = NULL;
   18ff2:	2700      	movs	r7, #0
	chan->req = req;
   18ff4:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
	return chan_send(chan, buf);
   18ff8:	4631      	mov	r1, r6
	req->buf = NULL;
   18ffa:	60af      	str	r7, [r5, #8]
	return chan_send(chan, buf);
   18ffc:	4620      	mov	r0, r4
   18ffe:	f7ff ff57 	bl	18eb0 <chan_send>
	if (err) {
   19002:	b110      	cbz	r0, 1900a <bt_att_chan_req_send+0x92>
		req->buf = buf;
   19004:	60ae      	str	r6, [r5, #8]
		chan->req = NULL;
   19006:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
}
   1900a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1900c:	f06f 0079 	mvn.w	r0, #121	; 0x79
	return chan_req_send(chan, req);
   19010:	e7fb      	b.n	1900a <bt_att_chan_req_send+0x92>
   19012:	bf00      	nop
   19014:	0002cf10 	.word	0x0002cf10
   19018:	0002ab8c 	.word	0x0002ab8c

0001901c <bt_att_connected>:
{
   1901c:	b510      	push	{r4, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1901e:	1f02      	subs	r2, r0, #4
{
   19020:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   19022:	3094      	adds	r0, #148	; 0x94
   19024:	f3bf 8f5b 	dmb	ish
   19028:	e850 3f00 	ldrex	r3, [r0]
   1902c:	f043 0304 	orr.w	r3, r3, #4
   19030:	e840 3100 	strex	r1, r3, [r0]
   19034:	2900      	cmp	r1, #0
   19036:	d1f7      	bne.n	19028 <bt_att_connected+0xc>
   19038:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1903c:	2103      	movs	r1, #3
   1903e:	f00e fa12 	bl	27466 <atomic_test_bit>
   19042:	b910      	cbnz	r0, 1904a <bt_att_connected+0x2e>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19044:	2317      	movs	r3, #23
   19046:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19048:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1904a:	4610      	mov	r0, r2
   1904c:	f00e fa2d 	bl	274aa <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   19050:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   19054:	4903      	ldr	r1, [pc, #12]	; (19064 <bt_att_connected+0x48>)
   19056:	f009 ff89 	bl	22f6c <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1905a:	6820      	ldr	r0, [r4, #0]
}
   1905c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   19060:	f002 bf8a 	b.w	1bf78 <bt_gatt_connected>
   19064:	00019c09 	.word	0x00019c09

00019068 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   19068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1906a:	2300      	movs	r3, #0
{
   1906c:	4607      	mov	r7, r0
   1906e:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   19070:	482d      	ldr	r0, [pc, #180]	; (19128 <bt_att_accept+0xc0>)
   19072:	2200      	movs	r2, #0
   19074:	4669      	mov	r1, sp
   19076:	f008 ff13 	bl	21ea0 <k_mem_slab_alloc>
   1907a:	4605      	mov	r5, r0
   1907c:	b138      	cbz	r0, 1908e <bt_att_accept+0x26>
		BT_ERR("No available ATT context for conn %p", conn);
   1907e:	482b      	ldr	r0, [pc, #172]	; (1912c <bt_att_accept+0xc4>)
   19080:	463a      	mov	r2, r7
   19082:	2145      	movs	r1, #69	; 0x45
		BT_WARN("No available ATT channel for conn %p", att->conn);
   19084:	f00c fdc5 	bl	25c12 <z_log_minimal_printk>
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   19088:	f06f 050b 	mvn.w	r5, #11
   1908c:	e048      	b.n	19120 <bt_att_accept+0xb8>
	return z_impl_z_current_get();
   1908e:	f00b f80b 	bl	240a8 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   19092:	4b27      	ldr	r3, [pc, #156]	; (19130 <bt_att_accept+0xc8>)
	(void)memset(att, 0, sizeof(*att));
   19094:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   19096:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   19098:	2230      	movs	r2, #48	; 0x30
   1909a:	9800      	ldr	r0, [sp, #0]
   1909c:	f00d fd64 	bl	26b68 <memset>
	att->conn = conn;
   190a0:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   190a2:	4824      	ldr	r0, [pc, #144]	; (19134 <bt_att_accept+0xcc>)
	list->tail = NULL;
   190a4:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   190a6:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
   190aa:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   190ae:	2200      	movs	r2, #0
   190b0:	2300      	movs	r3, #0
   190b2:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   190b4:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   190b6:	f008 fef3 	bl	21ea0 <k_mem_slab_alloc>
   190ba:	4605      	mov	r5, r0
   190bc:	b118      	cbz	r0, 190c6 <bt_att_accept+0x5e>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   190be:	6822      	ldr	r2, [r4, #0]
   190c0:	481d      	ldr	r0, [pc, #116]	; (19138 <bt_att_accept+0xd0>)
   190c2:	2157      	movs	r1, #87	; 0x57
   190c4:	e7de      	b.n	19084 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   190c6:	4601      	mov	r1, r0
   190c8:	22f8      	movs	r2, #248	; 0xf8
   190ca:	9801      	ldr	r0, [sp, #4]
   190cc:	f00d fd4c 	bl	26b68 <memset>
	chan->chan.chan.ops = &ops;
   190d0:	9801      	ldr	r0, [sp, #4]
   190d2:	4b1a      	ldr	r3, [pc, #104]	; (1913c <bt_att_accept+0xd4>)
   190d4:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   190d6:	30a0      	adds	r0, #160	; 0xa0
   190d8:	f010 fc7f 	bl	299da <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   190dc:	9b01      	ldr	r3, [sp, #4]
   190de:	f3bf 8f5b 	dmb	ish
   190e2:	3398      	adds	r3, #152	; 0x98
   190e4:	e853 2f00 	ldrex	r2, [r3]
   190e8:	e843 5100 	strex	r1, r5, [r3]
   190ec:	2900      	cmp	r1, #0
   190ee:	d1f9      	bne.n	190e4 <bt_att_accept+0x7c>
   190f0:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   190f4:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   190f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	chan->att = att;
   190f8:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
   190fa:	b91b      	cbnz	r3, 19104 <bt_att_accept+0x9c>
   190fc:	f104 000c 	add.w	r0, r4, #12
   19100:	f010 fc6b 	bl	299da <z_impl_k_queue_init>
	parent->next = child;
   19104:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   19106:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   1910a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   1910c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	list->head = node;
   19110:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   19112:	b902      	cbnz	r2, 19116 <bt_att_accept+0xae>
	list->tail = node;
   19114:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   19116:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   19118:	2b00      	cmp	r3, #0
   1911a:	d0b5      	beq.n	19088 <bt_att_accept+0x20>
	}

	*ch = &chan->chan.chan;
   1911c:	3304      	adds	r3, #4
   1911e:	6033      	str	r3, [r6, #0]

	return 0;
}
   19120:	4628      	mov	r0, r5
   19122:	b003      	add	sp, #12
   19124:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19126:	bf00      	nop
   19128:	200007bc 	.word	0x200007bc
   1912c:	0002cf9f 	.word	0x0002cf9f
   19130:	20002404 	.word	0x20002404
   19134:	200007dc 	.word	0x200007dc
   19138:	0002cfc9 	.word	0x0002cfc9
   1913c:	200005e8 	.word	0x200005e8

00019140 <read_type_cb>:
{
   19140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   19144:	f8d2 8000 	ldr.w	r8, [r2]
{
   19148:	4606      	mov	r6, r0
   1914a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1914c:	6800      	ldr	r0, [r0, #0]
   1914e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   19150:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
   19154:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19156:	f00d fd90 	bl	26c7a <bt_uuid_cmp>
   1915a:	4607      	mov	r7, r0
   1915c:	2800      	cmp	r0, #0
   1915e:	d13e      	bne.n	191de <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   19160:	4628      	mov	r0, r5
   19162:	2295      	movs	r2, #149	; 0x95
   19164:	4631      	mov	r1, r6
   19166:	f00f fa36 	bl	285d6 <bt_gatt_check_perm>
   1916a:	4605      	mov	r5, r0
   1916c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1916e:	b148      	cbz	r0, 19184 <read_type_cb+0x44>
		if (data->rsp->len) {
   19170:	68e3      	ldr	r3, [r4, #12]
   19172:	781b      	ldrb	r3, [r3, #0]
   19174:	b923      	cbnz	r3, 19180 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   19176:	2500      	movs	r5, #0
}
   19178:	4628      	mov	r0, r5
   1917a:	b003      	add	sp, #12
   1917c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   19180:	7527      	strb	r7, [r4, #20]
   19182:	e7f8      	b.n	19176 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   19184:	68a0      	ldr	r0, [r4, #8]
   19186:	f005 f8f5 	bl	1e374 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   1918a:	2102      	movs	r1, #2
   1918c:	3008      	adds	r0, #8
   1918e:	f005 f9ab 	bl	1e4e8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19192:	4b14      	ldr	r3, [pc, #80]	; (191e4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   19194:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19196:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   19198:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1919c:	4631      	mov	r1, r6
   1919e:	9300      	str	r3, [sp, #0]
   191a0:	9401      	str	r4, [sp, #4]
   191a2:	462b      	mov	r3, r5
   191a4:	4640      	mov	r0, r8
   191a6:	f00e fa48 	bl	2763a <att_chan_read>
	if (read < 0) {
   191aa:	2800      	cmp	r0, #0
   191ac:	da07      	bge.n	191be <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   191ae:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   191b2:	bf26      	itte	cs
   191b4:	4240      	negcs	r0, r0
   191b6:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   191b8:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   191ba:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   191bc:	e7dc      	b.n	19178 <read_type_cb+0x38>
	if (!data->item) {
   191be:	6923      	ldr	r3, [r4, #16]
   191c0:	2b00      	cmp	r3, #0
   191c2:	d0d8      	beq.n	19176 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   191c4:	68a0      	ldr	r0, [r4, #8]
   191c6:	f00e f8ef 	bl	273a8 <net_buf_frags_len>
   191ca:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   191ce:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   191d0:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   191d2:	7818      	ldrb	r0, [r3, #0]
   191d4:	4285      	cmp	r5, r0
   191d6:	bf94      	ite	ls
   191d8:	2500      	movls	r5, #0
   191da:	2501      	movhi	r5, #1
   191dc:	e7cc      	b.n	19178 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   191de:	2501      	movs	r5, #1
   191e0:	e7ca      	b.n	19178 <read_type_cb+0x38>
   191e2:	bf00      	nop
   191e4:	000273b9 	.word	0x000273b9

000191e8 <bt_att_chan_create_pdu>:
{
   191e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   191ea:	1c53      	adds	r3, r2, #1
   191ec:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   191ee:	4293      	cmp	r3, r2
{
   191f0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   191f2:	d906      	bls.n	19202 <bt_att_chan_create_pdu+0x1a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   191f4:	481c      	ldr	r0, [pc, #112]	; (19268 <bt_att_chan_create_pdu+0x80>)
   191f6:	2157      	movs	r1, #87	; 0x57
   191f8:	f00c fd0b 	bl	25c12 <z_log_minimal_printk>
		return NULL;
   191fc:	2400      	movs	r4, #0
}
   191fe:	4620      	mov	r0, r4
   19200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   19202:	4608      	mov	r0, r1
   19204:	f00e f8ea 	bl	273dc <att_op_get_type>
   19208:	2802      	cmp	r0, #2
   1920a:	d001      	beq.n	19210 <bt_att_chan_create_pdu+0x28>
   1920c:	2804      	cmp	r0, #4
   1920e:	d110      	bne.n	19232 <bt_att_chan_create_pdu+0x4a>
   19210:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   19214:	2700      	movs	r7, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   19216:	2100      	movs	r1, #0
   19218:	4632      	mov	r2, r6
   1921a:	463b      	mov	r3, r7
   1921c:	4608      	mov	r0, r1
   1921e:	f00e f86a 	bl	272f6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   19222:	4604      	mov	r4, r0
   19224:	b950      	cbnz	r0, 1923c <bt_att_chan_create_pdu+0x54>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   19226:	4811      	ldr	r0, [pc, #68]	; (1926c <bt_att_chan_create_pdu+0x84>)
   19228:	462a      	mov	r2, r5
   1922a:	2145      	movs	r1, #69	; 0x45
   1922c:	f00c fcf1 	bl	25c12 <z_log_minimal_printk>
		return NULL;
   19230:	e7e5      	b.n	191fe <bt_att_chan_create_pdu+0x16>
		timeout = K_FOREVER;
   19232:	f04f 36ff 	mov.w	r6, #4294967295
   19236:	f04f 37ff 	mov.w	r7, #4294967295
   1923a:	e7ec      	b.n	19216 <bt_att_chan_create_pdu+0x2e>
	return z_impl_k_queue_get(queue, timeout);
   1923c:	480c      	ldr	r0, [pc, #48]	; (19270 <bt_att_chan_create_pdu+0x88>)
   1923e:	4632      	mov	r2, r6
   19240:	463b      	mov	r3, r7
   19242:	f009 fa6f 	bl	22724 <z_impl_k_queue_get>
	if (!data) {
   19246:	b938      	cbnz	r0, 19258 <bt_att_chan_create_pdu+0x70>
		BT_WARN("Unable to allocate ATT TX meta");
   19248:	480a      	ldr	r0, [pc, #40]	; (19274 <bt_att_chan_create_pdu+0x8c>)
   1924a:	2157      	movs	r1, #87	; 0x57
   1924c:	f00c fce1 	bl	25c12 <z_log_minimal_printk>
		net_buf_unref(buf);
   19250:	4620      	mov	r0, r4
   19252:	f005 f833 	bl	1e2bc <net_buf_unref>
		return NULL;
   19256:	e7d1      	b.n	191fc <bt_att_chan_create_pdu+0x14>
	bt_att_tx_meta_data(buf) = data;
   19258:	6160      	str	r0, [r4, #20]
   1925a:	2101      	movs	r1, #1
   1925c:	f104 0008 	add.w	r0, r4, #8
   19260:	f005 f942 	bl	1e4e8 <net_buf_simple_add>
	hdr->code = op;
   19264:	7005      	strb	r5, [r0, #0]
	return buf;
   19266:	e7ca      	b.n	191fe <bt_att_chan_create_pdu+0x16>
   19268:	0002cff3 	.word	0x0002cff3
   1926c:	0002cd41 	.word	0x0002cd41
   19270:	20000888 	.word	0x20000888
   19274:	0002d01d 	.word	0x0002d01d

00019278 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   19278:	898b      	ldrh	r3, [r1, #12]
{
   1927a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1927e:	4607      	mov	r7, r0
   19280:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   19282:	b933      	cbnz	r3, 19292 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   19284:	4835      	ldr	r0, [pc, #212]	; (1935c <bt_att_recv+0xe4>)
   19286:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected indication");
   19288:	f00c fcc3 	bl	25c12 <z_log_minimal_printk>
}
   1928c:	2000      	movs	r0, #0
   1928e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19292:	2101      	movs	r1, #1
   19294:	f105 0008 	add.w	r0, r5, #8
   19298:	f005 f908 	bl	1e4ac <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1929c:	f857 3c04 	ldr.w	r3, [r7, #-4]
   192a0:	4604      	mov	r4, r0
   192a2:	2b00      	cmp	r3, #0
   192a4:	d0f2      	beq.n	1928c <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
   192a6:	7802      	ldrb	r2, [r0, #0]
   192a8:	4e2d      	ldr	r6, [pc, #180]	; (19360 <bt_att_recv+0xe8>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   192aa:	f1a7 0804 	sub.w	r8, r7, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   192ae:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   192b0:	f816 1033 	ldrb.w	r1, [r6, r3, lsl #3]
   192b4:	4291      	cmp	r1, r2
   192b6:	d111      	bne.n	192dc <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   192b8:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   192bc:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   192c0:	f893 a002 	ldrb.w	sl, [r3, #2]
   192c4:	f1ba 0f01 	cmp.w	sl, #1
   192c8:	d11f      	bne.n	1930a <bt_att_recv+0x92>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   192ca:	2100      	movs	r1, #0
   192cc:	f107 0094 	add.w	r0, r7, #148	; 0x94
   192d0:	f00e fa7f 	bl	277d2 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   192d4:	b328      	cbz	r0, 19322 <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected request");
   192d6:	4823      	ldr	r0, [pc, #140]	; (19364 <bt_att_recv+0xec>)
   192d8:	2157      	movs	r1, #87	; 0x57
   192da:	e7d5      	b.n	19288 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   192dc:	3301      	adds	r3, #1
   192de:	2b1e      	cmp	r3, #30
   192e0:	d1e6      	bne.n	192b0 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   192e2:	4821      	ldr	r0, [pc, #132]	; (19368 <bt_att_recv+0xf0>)
   192e4:	2157      	movs	r1, #87	; 0x57
   192e6:	f00c fc94 	bl	25c12 <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   192ea:	7821      	ldrb	r1, [r4, #0]
   192ec:	4608      	mov	r0, r1
   192ee:	f00e f875 	bl	273dc <att_op_get_type>
   192f2:	2800      	cmp	r0, #0
   192f4:	d0ca      	beq.n	1928c <bt_att_recv+0x14>
   192f6:	2805      	cmp	r0, #5
   192f8:	d0c8      	beq.n	1928c <bt_att_recv+0x14>
	if (!req) {
   192fa:	2900      	cmp	r1, #0
   192fc:	d0c6      	beq.n	1928c <bt_att_recv+0x14>
   192fe:	2306      	movs	r3, #6
   19300:	2200      	movs	r2, #0
   19302:	4640      	mov	r0, r8
   19304:	f00e fc17 	bl	27b36 <send_err_rsp.part.0>
   19308:	e7c0      	b.n	1928c <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   1930a:	f1ba 0f05 	cmp.w	sl, #5
   1930e:	d108      	bne.n	19322 <bt_att_recv+0xaa>
			   atomic_test_and_set_bit(att_chan->flags,
   19310:	2101      	movs	r1, #1
   19312:	f107 0094 	add.w	r0, r7, #148	; 0x94
   19316:	f00e fa5c 	bl	277d2 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1931a:	b110      	cbz	r0, 19322 <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected indication");
   1931c:	4813      	ldr	r0, [pc, #76]	; (1936c <bt_att_recv+0xf4>)
   1931e:	2157      	movs	r1, #87	; 0x57
   19320:	e7b2      	b.n	19288 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   19322:	444e      	add	r6, r9
   19324:	89aa      	ldrh	r2, [r5, #12]
   19326:	7873      	ldrb	r3, [r6, #1]
   19328:	4293      	cmp	r3, r2
   1932a:	d909      	bls.n	19340 <bt_att_recv+0xc8>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1932c:	7823      	ldrb	r3, [r4, #0]
   1932e:	4810      	ldr	r0, [pc, #64]	; (19370 <bt_att_recv+0xf8>)
   19330:	2145      	movs	r1, #69	; 0x45
   19332:	f00c fc6e 	bl	25c12 <z_log_minimal_printk>
	if (handler->type == ATT_REQUEST && err) {
   19336:	f1ba 0f01 	cmp.w	sl, #1
   1933a:	d1a7      	bne.n	1928c <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   1933c:	2304      	movs	r3, #4
   1933e:	e009      	b.n	19354 <bt_att_recv+0xdc>
		err = handler->func(att_chan, buf);
   19340:	6873      	ldr	r3, [r6, #4]
   19342:	4629      	mov	r1, r5
   19344:	4640      	mov	r0, r8
   19346:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   19348:	f1ba 0f01 	cmp.w	sl, #1
		err = handler->func(att_chan, buf);
   1934c:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1934e:	d19d      	bne.n	1928c <bt_att_recv+0x14>
   19350:	2800      	cmp	r0, #0
   19352:	d09b      	beq.n	1928c <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   19354:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   19356:	2900      	cmp	r1, #0
   19358:	d098      	beq.n	1928c <bt_att_recv+0x14>
   1935a:	e7d1      	b.n	19300 <bt_att_recv+0x88>
   1935c:	0002d041 	.word	0x0002d041
   19360:	0002a568 	.word	0x0002a568
   19364:	0002d061 	.word	0x0002d061
   19368:	0002d0ca 	.word	0x0002d0ca
   1936c:	0002d082 	.word	0x0002d082
   19370:	0002d0a6 	.word	0x0002d0a6

00019374 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   19374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19378:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1937a:	6803      	ldr	r3, [r0, #0]
   1937c:	460e      	mov	r6, r1
   1937e:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   19380:	b087      	sub	sp, #28
   19382:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19384:	bf18      	it	ne
   19386:	2101      	movne	r1, #1
   19388:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1938a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1938c:	f00f fa0a 	bl	287a4 <bt_gatt_change_aware>
   19390:	b958      	cbnz	r0, 193aa <att_write_rsp.constprop.0+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19392:	2105      	movs	r1, #5
   19394:	f104 0098 	add.w	r0, r4, #152	; 0x98
   19398:	f00e fa1b 	bl	277d2 <atomic_test_and_set_bit>
   1939c:	2800      	cmp	r0, #0
   1939e:	d04e      	beq.n	1943e <att_write_rsp.constprop.0+0xca>
			return 0;
   193a0:	2500      	movs	r5, #0
}
   193a2:	4628      	mov	r0, r5
   193a4:	b007      	add	sp, #28
   193a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!handle) {
   193aa:	2f00      	cmp	r7, #0
   193ac:	d049      	beq.n	19442 <att_write_rsp.constprop.0+0xce>
	(void)memset(&data, 0, sizeof(data));
   193ae:	2218      	movs	r2, #24
   193b0:	2100      	movs	r1, #0
   193b2:	4668      	mov	r0, sp
   193b4:	f00d fbd8 	bl	26b68 <memset>
	if (rsp) {
   193b8:	f1b8 0f00 	cmp.w	r8, #0
   193bc:	d12e      	bne.n	1941c <att_write_rsp.constprop.0+0xa8>
	data.conn = chan->att->conn;
   193be:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   193c0:	4a21      	ldr	r2, [pc, #132]	; (19448 <att_write_rsp.constprop.0+0xd4>)
	data.conn = chan->att->conn;
   193c2:	681b      	ldr	r3, [r3, #0]
   193c4:	9300      	str	r3, [sp, #0]
	data.value = value;
   193c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   193c8:	9303      	str	r3, [sp, #12]
	data.len = len;
   193ca:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   193ce:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   193d2:	2301      	movs	r3, #1
   193d4:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   193d8:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   193dc:	466b      	mov	r3, sp
   193de:	4639      	mov	r1, r7
   193e0:	4638      	mov	r0, r7
	data.req = req;
   193e2:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   193e6:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   193ea:	f00e f88e 	bl	2750a <bt_gatt_foreach_attr>
	if (data.err) {
   193ee:	f89d 5014 	ldrb.w	r5, [sp, #20]
   193f2:	b1ed      	cbz	r5, 19430 <att_write_rsp.constprop.0+0xbc>
		if (rsp) {
   193f4:	f1b8 0f00 	cmp.w	r8, #0
   193f8:	d0d2      	beq.n	193a0 <att_write_rsp.constprop.0+0x2c>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   193fa:	9b01      	ldr	r3, [sp, #4]
   193fc:	6958      	ldr	r0, [r3, #20]
   193fe:	f7ff fc43 	bl	18c88 <tx_meta_data_free>
			net_buf_unref(data.buf);
   19402:	9801      	ldr	r0, [sp, #4]
   19404:	f004 ff5a 	bl	1e2bc <net_buf_unref>
	if (!req) {
   19408:	2e00      	cmp	r6, #0
   1940a:	d0c9      	beq.n	193a0 <att_write_rsp.constprop.0+0x2c>
   1940c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   19410:	463a      	mov	r2, r7
   19412:	4631      	mov	r1, r6
   19414:	4620      	mov	r0, r4
   19416:	f00e fb8e 	bl	27b36 <send_err_rsp.part.0>
   1941a:	e7c1      	b.n	193a0 <att_write_rsp.constprop.0+0x2c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1941c:	2200      	movs	r2, #0
   1941e:	4641      	mov	r1, r8
   19420:	4620      	mov	r0, r4
   19422:	f7ff fee1 	bl	191e8 <bt_att_chan_create_pdu>
   19426:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   19428:	2800      	cmp	r0, #0
   1942a:	d1c8      	bne.n	193be <att_write_rsp.constprop.0+0x4a>
			return BT_ATT_ERR_UNLIKELY;
   1942c:	250e      	movs	r5, #14
   1942e:	e7b8      	b.n	193a2 <att_write_rsp.constprop.0+0x2e>
	if (data.buf) {
   19430:	9901      	ldr	r1, [sp, #4]
   19432:	2900      	cmp	r1, #0
   19434:	d0b4      	beq.n	193a0 <att_write_rsp.constprop.0+0x2c>
		bt_att_chan_send_rsp(chan, data.buf);
   19436:	4620      	mov	r0, r4
   19438:	f00e f9a3 	bl	27782 <bt_att_chan_send_rsp>
   1943c:	e7b1      	b.n	193a2 <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1943e:	2512      	movs	r5, #18
   19440:	e7af      	b.n	193a2 <att_write_rsp.constprop.0+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
   19442:	2501      	movs	r5, #1
   19444:	e7ad      	b.n	193a2 <att_write_rsp.constprop.0+0x2e>
   19446:	bf00      	nop
   19448:	000275d5 	.word	0x000275d5

0001944c <bt_att_create_pdu>:
{
   1944c:	b570      	push	{r4, r5, r6, lr}
   1944e:	460e      	mov	r6, r1
   19450:	4615      	mov	r5, r2
	att = att_get(conn);
   19452:	f7ff fbdd 	bl	18c10 <att_get>
	if (!att) {
   19456:	b170      	cbz	r0, 19476 <bt_att_create_pdu+0x2a>
	return list->head;
   19458:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1945a:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1945c:	b138      	cbz	r0, 1946e <bt_att_create_pdu+0x22>
	return node->next;
   1945e:	f850 39f0 	ldr.w	r3, [r0], #-240
   19462:	b103      	cbz	r3, 19466 <bt_att_create_pdu+0x1a>
   19464:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19466:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   19468:	428a      	cmp	r2, r1
   1946a:	d906      	bls.n	1947a <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1946c:	b95b      	cbnz	r3, 19486 <bt_att_create_pdu+0x3a>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1946e:	4809      	ldr	r0, [pc, #36]	; (19494 <bt_att_create_pdu+0x48>)
   19470:	2157      	movs	r1, #87	; 0x57
   19472:	f00c fbce 	bl	25c12 <z_log_minimal_printk>
}
   19476:	2000      	movs	r0, #0
   19478:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1947a:	462a      	mov	r2, r5
   1947c:	4631      	mov	r1, r6
}
   1947e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   19482:	f7ff beb1 	b.w	191e8 <bt_att_chan_create_pdu>
   19486:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1948a:	b104      	cbz	r4, 1948e <bt_att_create_pdu+0x42>
   1948c:	3cf0      	subs	r4, #240	; 0xf0
{
   1948e:	4618      	mov	r0, r3
   19490:	4623      	mov	r3, r4
   19492:	e7e8      	b.n	19466 <bt_att_create_pdu+0x1a>
   19494:	0002d0e9 	.word	0x0002d0e9

00019498 <att_read_group_req>:
{
   19498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1949c:	898c      	ldrh	r4, [r1, #12]
   1949e:	3c04      	subs	r4, #4
   194a0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   194a2:	2c02      	cmp	r4, #2
{
   194a4:	4605      	mov	r5, r0
   194a6:	b08c      	sub	sp, #48	; 0x30
   194a8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   194aa:	d001      	beq.n	194b0 <att_read_group_req+0x18>
   194ac:	2c10      	cmp	r4, #16
   194ae:	d172      	bne.n	19596 <att_read_group_req+0xfe>
   194b0:	2104      	movs	r1, #4
   194b2:	3008      	adds	r0, #8
   194b4:	f004 fffa 	bl	1e4ac <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   194b8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   194bc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   194be:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   194c0:	1d01      	adds	r1, r0, #4
   194c2:	4622      	mov	r2, r4
   194c4:	4640      	mov	r0, r8
   194c6:	f00d fc06 	bl	26cd6 <bt_uuid_create>
   194ca:	2800      	cmp	r0, #0
   194cc:	d065      	beq.n	1959a <att_read_group_req+0x102>
	if (!start || !end) {
   194ce:	2e00      	cmp	r6, #0
   194d0:	d03e      	beq.n	19550 <att_read_group_req+0xb8>
   194d2:	2400      	movs	r4, #0
   194d4:	2f00      	cmp	r7, #0
   194d6:	d03a      	beq.n	1954e <att_read_group_req+0xb6>
	if (start > end) {
   194d8:	42b7      	cmp	r7, r6
   194da:	d339      	bcc.n	19550 <att_read_group_req+0xb8>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   194dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   194e0:	a901      	add	r1, sp, #4
   194e2:	4640      	mov	r0, r8
   194e4:	f88d 4004 	strb.w	r4, [sp, #4]
   194e8:	f8ad 3006 	strh.w	r3, [sp, #6]
   194ec:	f00d fbc5 	bl	26c7a <bt_uuid_cmp>
   194f0:	2800      	cmp	r0, #0
   194f2:	d138      	bne.n	19566 <att_read_group_req+0xce>
	struct bt_conn *conn = chan->chan.chan.conn;
   194f4:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   194f6:	2214      	movs	r2, #20
   194f8:	2100      	movs	r1, #0
   194fa:	a807      	add	r0, sp, #28
   194fc:	f00d fb34 	bl	26b68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   19500:	2201      	movs	r2, #1
   19502:	2111      	movs	r1, #17
   19504:	4620      	mov	r0, r4
   19506:	f7ff ffa1 	bl	1944c <bt_att_create_pdu>
   1950a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1950c:	2800      	cmp	r0, #0
   1950e:	d044      	beq.n	1959a <att_read_group_req+0x102>
	return net_buf_simple_add(&buf->b, len);
   19510:	2101      	movs	r1, #1
   19512:	3008      	adds	r0, #8
	data.uuid = uuid;
   19514:	e9cd 5807 	strd	r5, r8, [sp, #28]
   19518:	f004 ffe6 	bl	1e4e8 <net_buf_simple_add>
	data.rsp->len = 0U;
   1951c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19520:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19522:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   19524:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19528:	4a1d      	ldr	r2, [pc, #116]	; (195a0 <att_read_group_req+0x108>)
	data.group = NULL;
   1952a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1952e:	4639      	mov	r1, r7
   19530:	4630      	mov	r0, r6
   19532:	f00d ffea 	bl	2750a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   19536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19538:	781c      	ldrb	r4, [r3, #0]
   1953a:	bb3c      	cbnz	r4, 1958c <att_read_group_req+0xf4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1953c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1953e:	6958      	ldr	r0, [r3, #20]
   19540:	f7ff fba2 	bl	18c88 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19544:	9809      	ldr	r0, [sp, #36]	; 0x24
   19546:	f004 feb9 	bl	1e2bc <net_buf_unref>
	if (!req) {
   1954a:	230a      	movs	r3, #10
   1954c:	e018      	b.n	19580 <att_read_group_req+0xe8>
			*err = 0U;
   1954e:	463e      	mov	r6, r7
	if (!req) {
   19550:	2301      	movs	r3, #1
   19552:	4632      	mov	r2, r6
   19554:	2110      	movs	r1, #16
   19556:	4628      	mov	r0, r5
   19558:	f00e faed 	bl	27b36 <send_err_rsp.part.0>
		return 0;
   1955c:	2400      	movs	r4, #0
}
   1955e:	4620      	mov	r0, r4
   19560:	b00c      	add	sp, #48	; 0x30
   19562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   19566:	f642 0301 	movw	r3, #10241	; 0x2801
   1956a:	a907      	add	r1, sp, #28
   1956c:	4640      	mov	r0, r8
   1956e:	f88d 401c 	strb.w	r4, [sp, #28]
   19572:	f8ad 301e 	strh.w	r3, [sp, #30]
   19576:	f00d fb80 	bl	26c7a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1957a:	2800      	cmp	r0, #0
   1957c:	d0ba      	beq.n	194f4 <att_read_group_req+0x5c>
	if (!req) {
   1957e:	2310      	movs	r3, #16
   19580:	4632      	mov	r2, r6
   19582:	2110      	movs	r1, #16
   19584:	4628      	mov	r0, r5
   19586:	f00e fad6 	bl	27b36 <send_err_rsp.part.0>
		return 0;
   1958a:	e7e8      	b.n	1955e <att_read_group_req+0xc6>
	bt_att_chan_send_rsp(chan, data.buf);
   1958c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1958e:	4628      	mov	r0, r5
   19590:	f00e f8f7 	bl	27782 <bt_att_chan_send_rsp>
	return 0;
   19594:	e7e2      	b.n	1955c <att_read_group_req+0xc4>
		return BT_ATT_ERR_INVALID_PDU;
   19596:	2404      	movs	r4, #4
   19598:	e7e1      	b.n	1955e <att_read_group_req+0xc6>
		return BT_ATT_ERR_UNLIKELY;
   1959a:	240e      	movs	r4, #14
   1959c:	e7df      	b.n	1955e <att_read_group_req+0xc6>
   1959e:	bf00      	nop
   195a0:	00018e09 	.word	0x00018e09

000195a4 <att_read_mult_vl_req>:
{
   195a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   195a8:	6846      	ldr	r6, [r0, #4]
{
   195aa:	b085      	sub	sp, #20
   195ac:	4604      	mov	r4, r0
   195ae:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   195b0:	4630      	mov	r0, r6
   195b2:	2101      	movs	r1, #1
   195b4:	f00f f8f6 	bl	287a4 <bt_gatt_change_aware>
   195b8:	b958      	cbnz	r0, 195d2 <att_read_mult_vl_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   195ba:	2105      	movs	r1, #5
   195bc:	f104 0098 	add.w	r0, r4, #152	; 0x98
   195c0:	f00e f907 	bl	277d2 <atomic_test_and_set_bit>
			return 0;
   195c4:	2800      	cmp	r0, #0
   195c6:	bf0c      	ite	eq
   195c8:	2012      	moveq	r0, #18
   195ca:	2000      	movne	r0, #0
}
   195cc:	b005      	add	sp, #20
   195ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   195d2:	2210      	movs	r2, #16
   195d4:	2100      	movs	r1, #0
   195d6:	4668      	mov	r0, sp
   195d8:	f00d fac6 	bl	26b68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   195dc:	2200      	movs	r2, #0
   195de:	2121      	movs	r1, #33	; 0x21
   195e0:	4630      	mov	r0, r6
   195e2:	f7ff ff33 	bl	1944c <bt_att_create_pdu>
   195e6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   195e8:	b368      	cbz	r0, 19646 <att_read_mult_vl_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   195ea:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1964c <att_read_mult_vl_req+0xa8>
	data.chan = chan;
   195ee:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   195f0:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   195f4:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   195f8:	89ab      	ldrh	r3, [r5, #12]
   195fa:	2b01      	cmp	r3, #1
   195fc:	d804      	bhi.n	19608 <att_read_mult_vl_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   195fe:	9902      	ldr	r1, [sp, #8]
   19600:	4620      	mov	r0, r4
   19602:	f00e f8be 	bl	27782 <bt_att_chan_send_rsp>
   19606:	e01c      	b.n	19642 <att_read_mult_vl_req+0x9e>
   19608:	4638      	mov	r0, r7
   1960a:	f00f fd59 	bl	290c0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1960e:	466b      	mov	r3, sp
   19610:	464a      	mov	r2, r9
   19612:	4601      	mov	r1, r0
   19614:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19616:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1961a:	f00d ff76 	bl	2750a <bt_gatt_foreach_attr>
		if (data.err) {
   1961e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19622:	2b00      	cmp	r3, #0
   19624:	d0e8      	beq.n	195f8 <att_read_mult_vl_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19626:	9b02      	ldr	r3, [sp, #8]
   19628:	6958      	ldr	r0, [r3, #20]
   1962a:	f7ff fb2d 	bl	18c88 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1962e:	9802      	ldr	r0, [sp, #8]
   19630:	f004 fe44 	bl	1e2bc <net_buf_unref>
	if (!req) {
   19634:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19638:	4632      	mov	r2, r6
   1963a:	2120      	movs	r1, #32
   1963c:	4620      	mov	r0, r4
   1963e:	f00e fa7a 	bl	27b36 <send_err_rsp.part.0>
	return 0;
   19642:	2000      	movs	r0, #0
   19644:	e7c2      	b.n	195cc <att_read_mult_vl_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   19646:	200e      	movs	r0, #14
   19648:	e7c0      	b.n	195cc <att_read_mult_vl_req+0x28>
   1964a:	bf00      	nop
   1964c:	00027851 	.word	0x00027851

00019650 <att_read_mult_req>:
{
   19650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19654:	6846      	ldr	r6, [r0, #4]
{
   19656:	b085      	sub	sp, #20
   19658:	4604      	mov	r4, r0
   1965a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1965c:	4630      	mov	r0, r6
   1965e:	2101      	movs	r1, #1
   19660:	f00f f8a0 	bl	287a4 <bt_gatt_change_aware>
   19664:	b958      	cbnz	r0, 1967e <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19666:	2105      	movs	r1, #5
   19668:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1966c:	f00e f8b1 	bl	277d2 <atomic_test_and_set_bit>
			return 0;
   19670:	2800      	cmp	r0, #0
   19672:	bf0c      	ite	eq
   19674:	2012      	moveq	r0, #18
   19676:	2000      	movne	r0, #0
}
   19678:	b005      	add	sp, #20
   1967a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1967e:	2210      	movs	r2, #16
   19680:	2100      	movs	r1, #0
   19682:	4668      	mov	r0, sp
   19684:	f00d fa70 	bl	26b68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   19688:	2200      	movs	r2, #0
   1968a:	210f      	movs	r1, #15
   1968c:	4630      	mov	r0, r6
   1968e:	f7ff fedd 	bl	1944c <bt_att_create_pdu>
   19692:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19694:	b368      	cbz	r0, 196f2 <att_read_mult_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19696:	f8df 9060 	ldr.w	r9, [pc, #96]	; 196f8 <att_read_mult_req+0xa8>
	data.chan = chan;
   1969a:	9400      	str	r4, [sp, #0]
   1969c:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   196a0:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   196a4:	89ab      	ldrh	r3, [r5, #12]
   196a6:	2b01      	cmp	r3, #1
   196a8:	d804      	bhi.n	196b4 <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   196aa:	9902      	ldr	r1, [sp, #8]
   196ac:	4620      	mov	r0, r4
   196ae:	f00e f868 	bl	27782 <bt_att_chan_send_rsp>
   196b2:	e01c      	b.n	196ee <att_read_mult_req+0x9e>
   196b4:	4638      	mov	r0, r7
   196b6:	f00f fd03 	bl	290c0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   196ba:	466b      	mov	r3, sp
   196bc:	464a      	mov	r2, r9
   196be:	4601      	mov	r1, r0
   196c0:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   196c2:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   196c6:	f00d ff20 	bl	2750a <bt_gatt_foreach_attr>
		if (data.err) {
   196ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
   196ce:	2b00      	cmp	r3, #0
   196d0:	d0e8      	beq.n	196a4 <att_read_mult_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   196d2:	9b02      	ldr	r3, [sp, #8]
   196d4:	6958      	ldr	r0, [r3, #20]
   196d6:	f7ff fad7 	bl	18c88 <tx_meta_data_free>
			net_buf_unref(data.buf);
   196da:	9802      	ldr	r0, [sp, #8]
   196dc:	f004 fdee 	bl	1e2bc <net_buf_unref>
	if (!req) {
   196e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   196e4:	4632      	mov	r2, r6
   196e6:	210e      	movs	r1, #14
   196e8:	4620      	mov	r0, r4
   196ea:	f00e fa24 	bl	27b36 <send_err_rsp.part.0>
	return 0;
   196ee:	2000      	movs	r0, #0
   196f0:	e7c2      	b.n	19678 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   196f2:	200e      	movs	r0, #14
   196f4:	e7c0      	b.n	19678 <att_read_mult_req+0x28>
   196f6:	bf00      	nop
   196f8:	000277fd 	.word	0x000277fd

000196fc <att_read_rsp>:
{
   196fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19700:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   19704:	4604      	mov	r4, r0
   19706:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19708:	4640      	mov	r0, r8
   1970a:	2101      	movs	r1, #1
{
   1970c:	4615      	mov	r5, r2
   1970e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   19710:	f00f f848 	bl	287a4 <bt_gatt_change_aware>
   19714:	b960      	cbnz	r0, 19730 <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19716:	2105      	movs	r1, #5
   19718:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1971c:	f00e f859 	bl	277d2 <atomic_test_and_set_bit>
			return 0;
   19720:	2800      	cmp	r0, #0
   19722:	bf0c      	ite	eq
   19724:	2512      	moveq	r5, #18
   19726:	2500      	movne	r5, #0
}
   19728:	4628      	mov	r0, r5
   1972a:	b004      	add	sp, #16
   1972c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   19730:	b38e      	cbz	r6, 19796 <att_read_rsp+0x9a>
	(void)memset(&data, 0, sizeof(data));
   19732:	2210      	movs	r2, #16
   19734:	2100      	movs	r1, #0
   19736:	4668      	mov	r0, sp
   19738:	f00d fa16 	bl	26b68 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1973c:	2200      	movs	r2, #0
   1973e:	4629      	mov	r1, r5
   19740:	4640      	mov	r0, r8
   19742:	f7ff fe83 	bl	1944c <bt_att_create_pdu>
   19746:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19748:	b338      	cbz	r0, 1979a <att_read_rsp+0x9e>
	data.offset = offset;
   1974a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1974e:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19752:	2301      	movs	r3, #1
   19754:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19758:	4a11      	ldr	r2, [pc, #68]	; (197a0 <att_read_rsp+0xa4>)
	data.chan = chan;
   1975a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1975c:	466b      	mov	r3, sp
   1975e:	4631      	mov	r1, r6
   19760:	4630      	mov	r0, r6
   19762:	f00d fed2 	bl	2750a <bt_gatt_foreach_attr>
	if (data.err) {
   19766:	f89d 500c 	ldrb.w	r5, [sp, #12]
   1976a:	b17d      	cbz	r5, 1978c <att_read_rsp+0x90>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1976c:	9b02      	ldr	r3, [sp, #8]
   1976e:	6958      	ldr	r0, [r3, #20]
   19770:	f7ff fa8a 	bl	18c88 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19774:	9802      	ldr	r0, [sp, #8]
   19776:	f004 fda1 	bl	1e2bc <net_buf_unref>
	if (!req) {
   1977a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1977e:	4632      	mov	r2, r6
   19780:	4639      	mov	r1, r7
   19782:	4620      	mov	r0, r4
   19784:	f00e f9d7 	bl	27b36 <send_err_rsp.part.0>
		return 0;
   19788:	2500      	movs	r5, #0
   1978a:	e7cd      	b.n	19728 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf);
   1978c:	9902      	ldr	r1, [sp, #8]
   1978e:	4620      	mov	r0, r4
   19790:	f00d fff7 	bl	27782 <bt_att_chan_send_rsp>
	return 0;
   19794:	e7c8      	b.n	19728 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19796:	2501      	movs	r5, #1
   19798:	e7c6      	b.n	19728 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
   1979a:	250e      	movs	r5, #14
   1979c:	e7c4      	b.n	19728 <att_read_rsp+0x2c>
   1979e:	bf00      	nop
   197a0:	000277fd 	.word	0x000277fd

000197a4 <att_read_type_req>:
{
   197a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   197a8:	898c      	ldrh	r4, [r1, #12]
   197aa:	3c04      	subs	r4, #4
   197ac:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   197ae:	2c02      	cmp	r4, #2
{
   197b0:	4605      	mov	r5, r0
   197b2:	b08c      	sub	sp, #48	; 0x30
   197b4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   197b6:	d001      	beq.n	197bc <att_read_type_req+0x18>
   197b8:	2c10      	cmp	r4, #16
   197ba:	d153      	bne.n	19864 <att_read_type_req+0xc0>
	return net_buf_simple_pull_mem(&buf->b, len);
   197bc:	2104      	movs	r1, #4
   197be:	3008      	adds	r0, #8
   197c0:	f004 fe74 	bl	1e4ac <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   197c4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   197c8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   197ca:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   197cc:	1d01      	adds	r1, r0, #4
   197ce:	4622      	mov	r2, r4
   197d0:	4640      	mov	r0, r8
   197d2:	f00d fa80 	bl	26cd6 <bt_uuid_create>
   197d6:	b188      	cbz	r0, 197fc <att_read_type_req+0x58>
	if (!start || !end) {
   197d8:	b19e      	cbz	r6, 19802 <att_read_type_req+0x5e>
   197da:	b18f      	cbz	r7, 19800 <att_read_type_req+0x5c>
	if (start > end) {
   197dc:	42b7      	cmp	r7, r6
   197de:	d310      	bcc.n	19802 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   197e0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   197e2:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   197e4:	2100      	movs	r1, #0
   197e6:	eb0d 0002 	add.w	r0, sp, r2
   197ea:	f00d f9bd 	bl	26b68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   197ee:	2201      	movs	r2, #1
   197f0:	2109      	movs	r1, #9
   197f2:	4620      	mov	r0, r4
   197f4:	f7ff fe2a 	bl	1944c <bt_att_create_pdu>
   197f8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   197fa:	b968      	cbnz	r0, 19818 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   197fc:	240e      	movs	r4, #14
   197fe:	e007      	b.n	19810 <att_read_type_req+0x6c>
			*err = 0U;
   19800:	463e      	mov	r6, r7
	if (!req) {
   19802:	2301      	movs	r3, #1
   19804:	4632      	mov	r2, r6
   19806:	2108      	movs	r1, #8
   19808:	4628      	mov	r0, r5
   1980a:	f00e f994 	bl	27b36 <send_err_rsp.part.0>
		return 0;
   1980e:	2400      	movs	r4, #0
}
   19810:	4620      	mov	r0, r4
   19812:	b00c      	add	sp, #48	; 0x30
   19814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   19818:	2101      	movs	r1, #1
   1981a:	3008      	adds	r0, #8
	data.uuid = uuid;
   1981c:	e9cd 5806 	strd	r5, r8, [sp, #24]
   19820:	f004 fe62 	bl	1e4e8 <net_buf_simple_add>
	data.rsp->len = 0U;
   19824:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19828:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1982a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1982c:	4a0e      	ldr	r2, [pc, #56]	; (19868 <att_read_type_req+0xc4>)
	data.rsp->len = 0U;
   1982e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19832:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19834:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19838:	4630      	mov	r0, r6
   1983a:	ab06      	add	r3, sp, #24
   1983c:	f00d fe65 	bl	2750a <bt_gatt_foreach_attr>
	if (data.err) {
   19840:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   19844:	b14c      	cbz	r4, 1985a <att_read_type_req+0xb6>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19846:	9b08      	ldr	r3, [sp, #32]
   19848:	6958      	ldr	r0, [r3, #20]
   1984a:	f7ff fa1d 	bl	18c88 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1984e:	9808      	ldr	r0, [sp, #32]
   19850:	f004 fd34 	bl	1e2bc <net_buf_unref>
	if (!req) {
   19854:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   19858:	e7d4      	b.n	19804 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1985a:	9908      	ldr	r1, [sp, #32]
   1985c:	4628      	mov	r0, r5
   1985e:	f00d ff90 	bl	27782 <bt_att_chan_send_rsp>
	return 0;
   19862:	e7d5      	b.n	19810 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   19864:	2404      	movs	r4, #4
   19866:	e7d3      	b.n	19810 <att_read_type_req+0x6c>
   19868:	00019141 	.word	0x00019141

0001986c <att_find_type_req>:
{
   1986c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19870:	4688      	mov	r8, r1
   19872:	b086      	sub	sp, #24
   19874:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   19876:	2106      	movs	r1, #6
   19878:	f108 0008 	add.w	r0, r8, #8
   1987c:	f004 fe16 	bl	1e4ac <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   19880:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   19882:	b317      	cbz	r7, 198ca <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19884:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   19888:	f1b9 0f00 	cmp.w	r9, #0
   1988c:	d01c      	beq.n	198c8 <att_find_type_req+0x5c>
	if (start > end) {
   1988e:	454f      	cmp	r7, r9
   19890:	d81b      	bhi.n	198ca <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   19892:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19894:	f8ad 3002 	strh.w	r3, [sp, #2]
   19898:	2400      	movs	r4, #0
   1989a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1989e:	a901      	add	r1, sp, #4
   198a0:	4668      	mov	r0, sp
	value = buf->data;
   198a2:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   198a6:	f88d 4000 	strb.w	r4, [sp]
   198aa:	f88d 4004 	strb.w	r4, [sp, #4]
   198ae:	f8ad 3006 	strh.w	r3, [sp, #6]
   198b2:	f00d f9e2 	bl	26c7a <bt_uuid_cmp>
   198b6:	4606      	mov	r6, r0
   198b8:	b190      	cbz	r0, 198e0 <att_find_type_req+0x74>
	if (!req) {
   198ba:	230a      	movs	r3, #10
   198bc:	463a      	mov	r2, r7
   198be:	2106      	movs	r1, #6
   198c0:	4628      	mov	r0, r5
   198c2:	f00e f938 	bl	27b36 <send_err_rsp.part.0>
		return 0;
   198c6:	e007      	b.n	198d8 <att_find_type_req+0x6c>
			*err = 0U;
   198c8:	464f      	mov	r7, r9
	if (!req) {
   198ca:	2301      	movs	r3, #1
   198cc:	463a      	mov	r2, r7
   198ce:	2106      	movs	r1, #6
   198d0:	4628      	mov	r0, r5
   198d2:	f00e f930 	bl	27b36 <send_err_rsp.part.0>
		return 0;
   198d6:	2400      	movs	r4, #0
}
   198d8:	4620      	mov	r0, r4
   198da:	b006      	add	sp, #24
   198dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   198e0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   198e4:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   198e8:	4601      	mov	r1, r0
   198ea:	2214      	movs	r2, #20
   198ec:	a801      	add	r0, sp, #4
   198ee:	f00d f93b 	bl	26b68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   198f2:	4632      	mov	r2, r6
   198f4:	2107      	movs	r1, #7
   198f6:	4640      	mov	r0, r8
   198f8:	f7ff fda8 	bl	1944c <bt_att_create_pdu>
   198fc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   198fe:	b1f8      	cbz	r0, 19940 <att_find_type_req+0xd4>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19900:	230a      	movs	r3, #10
   19902:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19906:	4a0f      	ldr	r2, [pc, #60]	; (19944 <att_find_type_req+0xd8>)
	data.value_len = value_len;
   19908:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1990c:	ab01      	add	r3, sp, #4
   1990e:	4649      	mov	r1, r9
   19910:	4638      	mov	r0, r7
	data.value = value;
   19912:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   19916:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19918:	f00d fdf7 	bl	2750a <bt_gatt_foreach_attr>
	if (data.err) {
   1991c:	f89d 4015 	ldrb.w	r4, [sp, #21]
   19920:	b14c      	cbz	r4, 19936 <att_find_type_req+0xca>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19922:	9b02      	ldr	r3, [sp, #8]
   19924:	6958      	ldr	r0, [r3, #20]
   19926:	f7ff f9af 	bl	18c88 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1992a:	9802      	ldr	r0, [sp, #8]
   1992c:	f004 fcc6 	bl	1e2bc <net_buf_unref>
	if (!req) {
   19930:	f89d 3015 	ldrb.w	r3, [sp, #21]
   19934:	e7ca      	b.n	198cc <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   19936:	9902      	ldr	r1, [sp, #8]
   19938:	4628      	mov	r0, r5
   1993a:	f00d ff22 	bl	27782 <bt_att_chan_send_rsp>
	return 0;
   1993e:	e7cb      	b.n	198d8 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   19940:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19942:	e7c9      	b.n	198d8 <att_find_type_req+0x6c>
   19944:	00018cc5 	.word	0x00018cc5

00019948 <att_find_info_req>:
{
   19948:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1994a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1994c:	881e      	ldrh	r6, [r3, #0]
{
   1994e:	b085      	sub	sp, #20
   19950:	4605      	mov	r5, r0
	if (!start || !end) {
   19952:	b19e      	cbz	r6, 1997c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19954:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   19956:	b184      	cbz	r4, 1997a <att_find_info_req+0x32>
	if (start > end) {
   19958:	42a6      	cmp	r6, r4
   1995a:	d80f      	bhi.n	1997c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1995c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1995e:	2210      	movs	r2, #16
   19960:	2100      	movs	r1, #0
   19962:	4668      	mov	r0, sp
   19964:	f00d f900 	bl	26b68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   19968:	2200      	movs	r2, #0
   1996a:	2105      	movs	r1, #5
   1996c:	4638      	mov	r0, r7
   1996e:	f7ff fd6d 	bl	1944c <bt_att_create_pdu>
   19972:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   19974:	b958      	cbnz	r0, 1998e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   19976:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   19978:	e007      	b.n	1998a <att_find_info_req+0x42>
			*err = 0U;
   1997a:	4626      	mov	r6, r4
	if (!req) {
   1997c:	2301      	movs	r3, #1
   1997e:	4632      	mov	r2, r6
   19980:	2104      	movs	r1, #4
   19982:	4628      	mov	r0, r5
   19984:	f00e f8d7 	bl	27b36 <send_err_rsp.part.0>
	return 0;
   19988:	2000      	movs	r0, #0
}
   1998a:	b005      	add	sp, #20
   1998c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1998e:	4621      	mov	r1, r4
   19990:	4a0a      	ldr	r2, [pc, #40]	; (199bc <att_find_info_req+0x74>)
	data.chan = chan;
   19992:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19994:	466b      	mov	r3, sp
   19996:	4630      	mov	r0, r6
   19998:	f00d fdb7 	bl	2750a <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1999c:	9c02      	ldr	r4, [sp, #8]
   1999e:	b944      	cbnz	r4, 199b2 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   199a0:	9b01      	ldr	r3, [sp, #4]
   199a2:	6958      	ldr	r0, [r3, #20]
   199a4:	f7ff f970 	bl	18c88 <tx_meta_data_free>
		net_buf_unref(data.buf);
   199a8:	9801      	ldr	r0, [sp, #4]
   199aa:	f004 fc87 	bl	1e2bc <net_buf_unref>
	if (!req) {
   199ae:	230a      	movs	r3, #10
   199b0:	e7e5      	b.n	1997e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   199b2:	9901      	ldr	r1, [sp, #4]
   199b4:	4628      	mov	r0, r5
   199b6:	f00d fee4 	bl	27782 <bt_att_chan_send_rsp>
   199ba:	e7e5      	b.n	19988 <att_find_info_req+0x40>
   199bc:	00027521 	.word	0x00027521

000199c0 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   199c0:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   199c2:	4d0a      	ldr	r5, [pc, #40]	; (199ec <bt_att_init+0x2c>)
   199c4:	4c0a      	ldr	r4, [pc, #40]	; (199f0 <bt_att_init+0x30>)
   199c6:	4629      	mov	r1, r5
   199c8:	4620      	mov	r0, r4
   199ca:	f010 f813 	bl	299f4 <k_queue_append>
   199ce:	f105 0114 	add.w	r1, r5, #20
   199d2:	4620      	mov	r0, r4
   199d4:	f010 f80e 	bl	299f4 <k_queue_append>
   199d8:	f105 0128 	add.w	r1, r5, #40	; 0x28
   199dc:	4620      	mov	r0, r4
   199de:	f010 f809 	bl	299f4 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   199e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   199e6:	f000 bec3 	b.w	1a770 <bt_gatt_init>
   199ea:	bf00      	nop
   199ec:	20002424 	.word	0x20002424
   199f0:	20000888 	.word	0x20000888

000199f4 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   199f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   199f6:	2300      	movs	r3, #0
{
   199f8:	4605      	mov	r5, r0
   199fa:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   199fc:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   199fe:	f00a fb53 	bl	240a8 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   19a02:	4b0b      	ldr	r3, [pc, #44]	; (19a30 <bt_att_req_alloc+0x3c>)
   19a04:	681b      	ldr	r3, [r3, #0]
   19a06:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   19a08:	bf04      	itt	eq
   19a0a:	2500      	moveq	r5, #0
   19a0c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19a0e:	a901      	add	r1, sp, #4
   19a10:	4808      	ldr	r0, [pc, #32]	; (19a34 <bt_att_req_alloc+0x40>)
   19a12:	462a      	mov	r2, r5
   19a14:	4623      	mov	r3, r4
   19a16:	f008 fa43 	bl	21ea0 <k_mem_slab_alloc>
   19a1a:	4601      	mov	r1, r0
   19a1c:	b930      	cbnz	r0, 19a2c <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   19a1e:	9801      	ldr	r0, [sp, #4]
   19a20:	221c      	movs	r2, #28
   19a22:	f00d f8a1 	bl	26b68 <memset>

	return req;
   19a26:	9801      	ldr	r0, [sp, #4]
}
   19a28:	b003      	add	sp, #12
   19a2a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   19a2c:	2000      	movs	r0, #0
   19a2e:	e7fb      	b.n	19a28 <bt_att_req_alloc+0x34>
   19a30:	20002404 	.word	0x20002404
   19a34:	200007fc 	.word	0x200007fc

00019a38 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   19a38:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   19a3a:	6883      	ldr	r3, [r0, #8]
{
   19a3c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   19a3e:	b14b      	cbz	r3, 19a54 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   19a40:	6958      	ldr	r0, [r3, #20]
   19a42:	f7ff f921 	bl	18c88 <tx_meta_data_free>
		net_buf_unref(req->buf);
   19a46:	9b01      	ldr	r3, [sp, #4]
   19a48:	6898      	ldr	r0, [r3, #8]
   19a4a:	f004 fc37 	bl	1e2bc <net_buf_unref>
		req->buf = NULL;
   19a4e:	9b01      	ldr	r3, [sp, #4]
   19a50:	2200      	movs	r2, #0
   19a52:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   19a54:	4803      	ldr	r0, [pc, #12]	; (19a64 <bt_att_req_free+0x2c>)
   19a56:	a901      	add	r1, sp, #4
   19a58:	f008 fa7c 	bl	21f54 <k_mem_slab_free>
}
   19a5c:	b003      	add	sp, #12
   19a5e:	f85d fb04 	ldr.w	pc, [sp], #4
   19a62:	bf00      	nop
   19a64:	200007fc 	.word	0x200007fc

00019a68 <att_handle_rsp>:
{
   19a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a6c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   19a6e:	30c0      	adds	r0, #192	; 0xc0
{
   19a70:	4689      	mov	r9, r1
   19a72:	4692      	mov	sl, r2
   19a74:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
   19a76:	f009 fb75 	bl	23164 <k_work_cancel_delayable>
	if (!chan->req) {
   19a7a:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
   19a7e:	2700      	movs	r7, #0
   19a80:	b9a5      	cbnz	r5, 19aac <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   19a82:	4813      	ldr	r0, [pc, #76]	; (19ad0 <att_handle_rsp+0x68>)
   19a84:	2157      	movs	r1, #87	; 0x57
   19a86:	f00c f8c4 	bl	25c12 <z_log_minimal_printk>
	bt_att_func_t func = NULL;
   19a8a:	462e      	mov	r6, r5
	att_req_send_process(chan->att);
   19a8c:	6820      	ldr	r0, [r4, #0]
   19a8e:	f00d ff62 	bl	27956 <att_req_send_process>
	if (func) {
   19a92:	b13e      	cbz	r6, 19aa4 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   19a94:	6820      	ldr	r0, [r4, #0]
   19a96:	f8cd b000 	str.w	fp, [sp]
   19a9a:	6800      	ldr	r0, [r0, #0]
   19a9c:	4653      	mov	r3, sl
   19a9e:	464a      	mov	r2, r9
   19aa0:	4641      	mov	r1, r8
   19aa2:	47b0      	blx	r6
}
   19aa4:	2000      	movs	r0, #0
   19aa6:	b003      	add	sp, #12
   19aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   19aac:	4b09      	ldr	r3, [pc, #36]	; (19ad4 <att_handle_rsp+0x6c>)
   19aae:	429d      	cmp	r5, r3
   19ab0:	d103      	bne.n	19aba <att_handle_rsp+0x52>
		chan->req = NULL;
   19ab2:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
	bt_att_func_t func = NULL;
   19ab6:	463e      	mov	r6, r7
		goto process;
   19ab8:	e7e8      	b.n	19a8c <att_handle_rsp+0x24>
	func = chan->req->func;
   19aba:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
   19abc:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
   19abe:	4628      	mov	r0, r5
	params = chan->req->user_data;
   19ac0:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
   19ac4:	f7ff ffb8 	bl	19a38 <bt_att_req_free>
	chan->req = NULL;
   19ac8:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
   19acc:	e7de      	b.n	19a8c <att_handle_rsp+0x24>
   19ace:	bf00      	nop
   19ad0:	0002d109 	.word	0x0002d109
   19ad4:	20002408 	.word	0x20002408

00019ad8 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   19ad8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
{
   19adc:	b570      	push	{r4, r5, r6, lr}
   19ade:	4605      	mov	r5, r0
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   19ae0:	b31b      	cbz	r3, 19b2a <att_error_rsp+0x52>
   19ae2:	4a16      	ldr	r2, [pc, #88]	; (19b3c <att_error_rsp+0x64>)
   19ae4:	4293      	cmp	r3, r2
   19ae6:	d020      	beq.n	19b2a <att_error_rsp+0x52>
   19ae8:	688b      	ldr	r3, [r1, #8]
   19aea:	78dc      	ldrb	r4, [r3, #3]
   19aec:	b1ec      	cbz	r4, 19b2a <att_error_rsp+0x52>
	switch (err) {
   19aee:	2c05      	cmp	r4, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
   19af0:	6840      	ldr	r0, [r0, #4]
	switch (err) {
   19af2:	d006      	beq.n	19b02 <att_error_rsp+0x2a>
   19af4:	2c0f      	cmp	r4, #15
   19af6:	d119      	bne.n	19b2c <att_error_rsp+0x54>
		if (conn->sec_level >= BT_SECURITY_L2)
   19af8:	7a43      	ldrb	r3, [r0, #9]
   19afa:	2b01      	cmp	r3, #1
   19afc:	d816      	bhi.n	19b2c <att_error_rsp+0x54>
		sec = BT_SECURITY_L2;
   19afe:	2102      	movs	r1, #2
   19b00:	e007      	b.n	19b12 <att_error_rsp+0x3a>
		if (conn->sec_level < BT_SECURITY_L2) {
   19b02:	7a43      	ldrb	r3, [r0, #9]
   19b04:	2b01      	cmp	r3, #1
   19b06:	d9fa      	bls.n	19afe <att_error_rsp+0x26>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   19b08:	2b02      	cmp	r3, #2
   19b0a:	d00c      	beq.n	19b26 <att_error_rsp+0x4e>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   19b0c:	2b03      	cmp	r3, #3
   19b0e:	d10d      	bne.n	19b2c <att_error_rsp+0x54>
			sec = BT_SECURITY_L4;
   19b10:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   19b12:	f00d fafe 	bl	27112 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   19b16:	b948      	cbnz	r0, 19b2c <att_error_rsp+0x54>
		chan->req->retrying = true;
   19b18:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   19b1c:	7c13      	ldrb	r3, [r2, #16]
   19b1e:	f043 0301 	orr.w	r3, r3, #1
   19b22:	7413      	strb	r3, [r2, #16]
}
   19b24:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   19b26:	2103      	movs	r1, #3
   19b28:	e7f3      	b.n	19b12 <att_error_rsp+0x3a>
		err = BT_ATT_ERR_UNLIKELY;
   19b2a:	240e      	movs	r4, #14
	return att_handle_rsp(chan, NULL, 0, err);
   19b2c:	2200      	movs	r2, #0
   19b2e:	4623      	mov	r3, r4
   19b30:	4628      	mov	r0, r5
   19b32:	4611      	mov	r1, r2
}
   19b34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   19b38:	f7ff bf96 	b.w	19a68 <att_handle_rsp>
   19b3c:	20002408 	.word	0x20002408

00019b40 <bt_att_disconnected>:
{
   19b40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   19b44:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   19b48:	4604      	mov	r4, r0
	if (!att_chan->att) {
   19b4a:	2e00      	cmp	r6, #0
   19b4c:	d056      	beq.n	19bfc <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   19b4e:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   19b52:	f106 0028 	add.w	r0, r6, #40	; 0x28
   19b56:	f00d fe22 	bl	2779e <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   19b5a:	1f27      	subs	r7, r4, #4
   19b5c:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   19b60:	2200      	movs	r2, #0
   19b62:	2300      	movs	r3, #0
   19b64:	4640      	mov	r0, r8
   19b66:	f004 fa59 	bl	1e01c <net_buf_get>
   19b6a:	4605      	mov	r5, r0
   19b6c:	bb28      	cbnz	r0, 19bba <bt_att_disconnected+0x7a>
	if (chan->req) {
   19b6e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   19b72:	b12b      	cbz	r3, 19b80 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   19b74:	4602      	mov	r2, r0
   19b76:	4601      	mov	r1, r0
   19b78:	230e      	movs	r3, #14
   19b7a:	4638      	mov	r0, r7
   19b7c:	f7ff ff74 	bl	19a68 <att_handle_rsp>
	chan->att = NULL;
   19b80:	2300      	movs	r3, #0
   19b82:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   19b86:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   19b88:	2b00      	cmp	r3, #0
   19b8a:	d137      	bne.n	19bfc <bt_att_disconnected+0xbc>
	att_reset(att);
   19b8c:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   19b8e:	9803      	ldr	r0, [sp, #12]
   19b90:	2200      	movs	r2, #0
   19b92:	2300      	movs	r3, #0
   19b94:	300c      	adds	r0, #12
   19b96:	f004 fa41 	bl	1e01c <net_buf_get>
   19b9a:	4605      	mov	r5, r0
   19b9c:	b9a0      	cbnz	r0, 19bc8 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   19b9e:	9803      	ldr	r0, [sp, #12]
	return list->head;
   19ba0:	6845      	ldr	r5, [r0, #4]
   19ba2:	b9c5      	cbnz	r5, 19bd6 <bt_att_disconnected+0x96>
	att->conn = NULL;
   19ba4:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   19ba6:	a903      	add	r1, sp, #12
   19ba8:	4816      	ldr	r0, [pc, #88]	; (19c04 <bt_att_disconnected+0xc4>)
   19baa:	f008 f9d3 	bl	21f54 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   19bae:	6820      	ldr	r0, [r4, #0]
}
   19bb0:	b004      	add	sp, #16
   19bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   19bb6:	f002 bab3 	b.w	1c120 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19bba:	6968      	ldr	r0, [r5, #20]
   19bbc:	f7ff f864 	bl	18c88 <tx_meta_data_free>
		net_buf_unref(buf);
   19bc0:	4628      	mov	r0, r5
   19bc2:	f004 fb7b 	bl	1e2bc <net_buf_unref>
   19bc6:	e7cb      	b.n	19b60 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19bc8:	6968      	ldr	r0, [r5, #20]
   19bca:	f7ff f85d 	bl	18c88 <tx_meta_data_free>
		net_buf_unref(buf);
   19bce:	4628      	mov	r0, r5
   19bd0:	f004 fb74 	bl	1e2bc <net_buf_unref>
   19bd4:	e7db      	b.n	19b8e <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19bd6:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   19bd8:	686e      	ldr	r6, [r5, #4]
	return node->next;
   19bda:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   19bdc:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19bde:	4295      	cmp	r5, r2
	list->tail = node;
   19be0:	bf08      	it	eq
   19be2:	6083      	streq	r3, [r0, #8]
   19be4:	b136      	cbz	r6, 19bf4 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   19be6:	69ab      	ldr	r3, [r5, #24]
   19be8:	9300      	str	r3, [sp, #0]
   19bea:	2300      	movs	r3, #0
   19bec:	6800      	ldr	r0, [r0, #0]
   19bee:	461a      	mov	r2, r3
   19bf0:	210e      	movs	r1, #14
   19bf2:	47b0      	blx	r6
		bt_att_req_free(req);
   19bf4:	4628      	mov	r0, r5
   19bf6:	f7ff ff1f 	bl	19a38 <bt_att_req_free>
   19bfa:	e7d0      	b.n	19b9e <bt_att_disconnected+0x5e>
}
   19bfc:	b004      	add	sp, #16
   19bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c02:	bf00      	nop
   19c04:	200007bc 	.word	0x200007bc

00019c08 <att_timeout>:
{
   19c08:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
   19c0a:	2145      	movs	r1, #69	; 0x45
{
   19c0c:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   19c0e:	4804      	ldr	r0, [pc, #16]	; (19c20 <att_timeout+0x18>)
   19c10:	f00b ffff 	bl	25c12 <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   19c14:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   19c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   19c1c:	f7ff bf90 	b.w	19b40 <bt_att_disconnected>
   19c20:	0002d125 	.word	0x0002d125

00019c24 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   19c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c26:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   19c28:	4605      	mov	r5, r0
   19c2a:	b950      	cbnz	r0, 19c42 <bt_att_send+0x1e>
   19c2c:	492c      	ldr	r1, [pc, #176]	; (19ce0 <bt_att_send+0xbc>)
   19c2e:	482d      	ldr	r0, [pc, #180]	; (19ce4 <bt_att_send+0xc0>)
   19c30:	f640 6288 	movw	r2, #3720	; 0xe88
   19c34:	f00b ffdf 	bl	25bf6 <assert_print>
   19c38:	4829      	ldr	r0, [pc, #164]	; (19ce0 <bt_att_send+0xbc>)
   19c3a:	f640 6188 	movw	r1, #3720	; 0xe88
   19c3e:	f00b ffd3 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   19c42:	b954      	cbnz	r4, 19c5a <bt_att_send+0x36>
   19c44:	4926      	ldr	r1, [pc, #152]	; (19ce0 <bt_att_send+0xbc>)
   19c46:	4827      	ldr	r0, [pc, #156]	; (19ce4 <bt_att_send+0xc0>)
   19c48:	f640 6289 	movw	r2, #3721	; 0xe89
   19c4c:	f00b ffd3 	bl	25bf6 <assert_print>
   19c50:	4823      	ldr	r0, [pc, #140]	; (19ce0 <bt_att_send+0xbc>)
   19c52:	f640 6189 	movw	r1, #3721	; 0xe89
   19c56:	f00b ffc7 	bl	25be8 <assert_post_action>

	att = att_get(conn);
   19c5a:	4628      	mov	r0, r5
   19c5c:	f7fe ffd8 	bl	18c10 <att_get>
	if (!att) {
   19c60:	4605      	mov	r5, r0
   19c62:	b940      	cbnz	r0, 19c76 <bt_att_send+0x52>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19c64:	6960      	ldr	r0, [r4, #20]
   19c66:	f7ff f80f 	bl	18c88 <tx_meta_data_free>
		net_buf_unref(buf);
   19c6a:	4620      	mov	r0, r4
   19c6c:	f004 fb26 	bl	1e2bc <net_buf_unref>
		return -ENOTCONN;
   19c70:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   19c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   19c76:	f100 060c 	add.w	r6, r0, #12
   19c7a:	4621      	mov	r1, r4
   19c7c:	4630      	mov	r0, r6
   19c7e:	f004 faef 	bl	1e260 <net_buf_put>
	return list->head;
   19c82:	6aac      	ldr	r4, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19c84:	4625      	mov	r5, r4
   19c86:	b11c      	cbz	r4, 19c90 <bt_att_send+0x6c>
	return node->next;
   19c88:	f855 49f0 	ldr.w	r4, [r5], #-240
   19c8c:	b104      	cbz	r4, 19c90 <bt_att_send+0x6c>
   19c8e:	3cf0      	subs	r4, #240	; 0xf0
   19c90:	2300      	movs	r3, #0
   19c92:	461f      	mov	r7, r3
   19c94:	b13d      	cbz	r5, 19ca6 <bt_att_send+0x82>
		if (err == -ENOENT && prev &&
   19c96:	1c9a      	adds	r2, r3, #2
   19c98:	d007      	beq.n	19caa <bt_att_send+0x86>
		err = process_queue(chan, &att->tx_queue);
   19c9a:	4631      	mov	r1, r6
   19c9c:	4628      	mov	r0, r5
   19c9e:	f00d fd57 	bl	27750 <process_queue>
		if (!err) {
   19ca2:	4603      	mov	r3, r0
   19ca4:	b980      	cbnz	r0, 19cc8 <bt_att_send+0xa4>
	return 0;
   19ca6:	2000      	movs	r0, #0
   19ca8:	e7e4      	b.n	19c74 <bt_att_send+0x50>
		if (err == -ENOENT && prev &&
   19caa:	2f00      	cmp	r7, #0
   19cac:	d0f5      	beq.n	19c9a <bt_att_send+0x76>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   19cae:	2103      	movs	r1, #3
   19cb0:	f105 0098 	add.w	r0, r5, #152	; 0x98
   19cb4:	f00d fbd7 	bl	27466 <atomic_test_bit>
   19cb8:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   19cba:	f107 0098 	add.w	r0, r7, #152	; 0x98
   19cbe:	f00d fbd2 	bl	27466 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   19cc2:	4282      	cmp	r2, r0
   19cc4:	d1e9      	bne.n	19c9a <bt_att_send+0x76>
   19cc6:	463d      	mov	r5, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19cc8:	b13c      	cbz	r4, 19cda <bt_att_send+0xb6>
   19cca:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   19cce:	b102      	cbz	r2, 19cd2 <bt_att_send+0xae>
   19cd0:	3af0      	subs	r2, #240	; 0xf0
   19cd2:	462f      	mov	r7, r5
   19cd4:	4625      	mov	r5, r4
   19cd6:	4614      	mov	r4, r2
   19cd8:	e7dc      	b.n	19c94 <bt_att_send+0x70>
   19cda:	4622      	mov	r2, r4
   19cdc:	e7f9      	b.n	19cd2 <bt_att_send+0xae>
   19cde:	bf00      	nop
   19ce0:	0002cf10 	.word	0x0002cf10
   19ce4:	0002ab8c 	.word	0x0002ab8c

00019ce8 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   19ce8:	b538      	push	{r3, r4, r5, lr}
   19cea:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   19cec:	4605      	mov	r5, r0
   19cee:	b950      	cbnz	r0, 19d06 <bt_att_req_send+0x1e>
   19cf0:	4915      	ldr	r1, [pc, #84]	; (19d48 <bt_att_req_send+0x60>)
   19cf2:	4816      	ldr	r0, [pc, #88]	; (19d4c <bt_att_req_send+0x64>)
   19cf4:	f640 629e 	movw	r2, #3742	; 0xe9e
   19cf8:	f00b ff7d 	bl	25bf6 <assert_print>
   19cfc:	4812      	ldr	r0, [pc, #72]	; (19d48 <bt_att_req_send+0x60>)
   19cfe:	f640 619e 	movw	r1, #3742	; 0xe9e
   19d02:	f00b ff71 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(req);
   19d06:	b954      	cbnz	r4, 19d1e <bt_att_req_send+0x36>
   19d08:	490f      	ldr	r1, [pc, #60]	; (19d48 <bt_att_req_send+0x60>)
   19d0a:	4810      	ldr	r0, [pc, #64]	; (19d4c <bt_att_req_send+0x64>)
   19d0c:	f640 629f 	movw	r2, #3743	; 0xe9f
   19d10:	f00b ff71 	bl	25bf6 <assert_print>
   19d14:	480c      	ldr	r0, [pc, #48]	; (19d48 <bt_att_req_send+0x60>)
   19d16:	f640 619f 	movw	r1, #3743	; 0xe9f
   19d1a:	f00b ff65 	bl	25be8 <assert_post_action>

	att = att_get(conn);
   19d1e:	4628      	mov	r0, r5
   19d20:	f7fe ff76 	bl	18c10 <att_get>
	if (!att) {
   19d24:	b160      	cbz	r0, 19d40 <bt_att_req_send+0x58>
	parent->next = child;
   19d26:	2300      	movs	r3, #0
   19d28:	6023      	str	r3, [r4, #0]
	return list->tail;
   19d2a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   19d2c:	b92b      	cbnz	r3, 19d3a <bt_att_req_send+0x52>
	list->head = node;
   19d2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   19d32:	f00d fe10 	bl	27956 <att_req_send_process>

	return 0;
   19d36:	2000      	movs	r0, #0
}
   19d38:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   19d3a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19d3c:	6084      	str	r4, [r0, #8]
}
   19d3e:	e7f8      	b.n	19d32 <bt_att_req_send+0x4a>
		return -ENOTCONN;
   19d40:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19d44:	e7f8      	b.n	19d38 <bt_att_req_send+0x50>
   19d46:	bf00      	nop
   19d48:	0002cf10 	.word	0x0002cf10
   19d4c:	0002ab8c 	.word	0x0002ab8c

00019d50 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   19d50:	b510      	push	{r4, lr}
   19d52:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   19d54:	b318      	cbz	r0, 19d9e <bt_att_req_cancel+0x4e>
   19d56:	b311      	cbz	r1, 19d9e <bt_att_req_cancel+0x4e>
		return;
	}

	att = att_get(conn);
   19d58:	f7fe ff5a 	bl	18c10 <att_get>
	if (!att) {
   19d5c:	b1f8      	cbz	r0, 19d9e <bt_att_req_cancel+0x4e>
	return list->head;
   19d5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19d60:	b143      	cbz	r3, 19d74 <bt_att_req_cancel+0x24>
	return node->next;
   19d62:	f853 29f0 	ldr.w	r2, [r3], #-240
   19d66:	b102      	cbz	r2, 19d6a <bt_att_req_cancel+0x1a>
   19d68:	3af0      	subs	r2, #240	; 0xf0
	if (chan->req != req) {
   19d6a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
   19d6e:	428c      	cmp	r4, r1
   19d70:	d006      	beq.n	19d80 <bt_att_req_cancel+0x30>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19d72:	b96a      	cbnz	r2, 19d90 <bt_att_req_cancel+0x40>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   19d74:	3004      	adds	r0, #4
   19d76:	4621      	mov	r1, r4
   19d78:	f00d fd11 	bl	2779e <sys_slist_find_and_remove.isra.0>

	bt_att_req_free(req);
   19d7c:	4620      	mov	r0, r4
   19d7e:	e003      	b.n	19d88 <bt_att_req_cancel+0x38>
	chan->req = &cancel;
   19d80:	4a07      	ldr	r2, [pc, #28]	; (19da0 <bt_att_req_cancel+0x50>)
   19d82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	bt_att_req_free(req);
   19d86:	4620      	mov	r0, r4
}
   19d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   19d8c:	f7ff be54 	b.w	19a38 <bt_att_req_free>
   19d90:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19d94:	b101      	cbz	r1, 19d98 <bt_att_req_cancel+0x48>
   19d96:	39f0      	subs	r1, #240	; 0xf0
{
   19d98:	4613      	mov	r3, r2
   19d9a:	460a      	mov	r2, r1
   19d9c:	e7e5      	b.n	19d6a <bt_att_req_cancel+0x1a>
}
   19d9e:	bd10      	pop	{r4, pc}
   19da0:	20002408 	.word	0x20002408

00019da4 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   19da4:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   19da6:	4908      	ldr	r1, [pc, #32]	; (19dc8 <db_hash_set+0x24>)
{
   19da8:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   19daa:	4618      	mov	r0, r3
   19dac:	2210      	movs	r2, #16
   19dae:	47a0      	blx	r4
	if (len < 0) {
   19db0:	1e04      	subs	r4, r0, #0
   19db2:	da06      	bge.n	19dc2 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   19db4:	4805      	ldr	r0, [pc, #20]	; (19dcc <db_hash_set+0x28>)
   19db6:	4622      	mov	r2, r4
   19db8:	2145      	movs	r1, #69	; 0x45
   19dba:	f00b ff2a 	bl	25c12 <z_log_minimal_printk>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   19dbe:	4620      	mov	r0, r4
   19dc0:	bd10      	pop	{r4, pc}
	return 0;
   19dc2:	2400      	movs	r4, #0
   19dc4:	e7fb      	b.n	19dbe <db_hash_set+0x1a>
   19dc6:	bf00      	nop
   19dc8:	20001b10 	.word	0x20001b10
   19dcc:	0002d13d 	.word	0x0002d13d

00019dd0 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   19dd0:	2210      	movs	r2, #16
{
   19dd2:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   19dd4:	4906      	ldr	r1, [pc, #24]	; (19df0 <db_hash_store+0x20>)
   19dd6:	4807      	ldr	r0, [pc, #28]	; (19df4 <db_hash_store+0x24>)
   19dd8:	f7f9 f95a 	bl	13090 <settings_save_one>
	if (err) {
   19ddc:	4602      	mov	r2, r0
   19dde:	b128      	cbz	r0, 19dec <db_hash_store+0x1c>
}
   19de0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   19de4:	4804      	ldr	r0, [pc, #16]	; (19df8 <db_hash_store+0x28>)
   19de6:	2145      	movs	r1, #69	; 0x45
   19de8:	f00b bf13 	b.w	25c12 <z_log_minimal_printk>
}
   19dec:	bd08      	pop	{r3, pc}
   19dee:	bf00      	nop
   19df0:	20001b00 	.word	0x20001b00
   19df4:	0002d163 	.word	0x0002d163
   19df8:	0002d16b 	.word	0x0002d16b

00019dfc <find_cf_cfg>:
{
   19dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19dfe:	4c15      	ldr	r4, [pc, #84]	; (19e54 <find_cf_cfg+0x58>)
		if (!conn) {
   19e00:	4605      	mov	r5, r0
   19e02:	b140      	cbz	r0, 19e16 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19e04:	4622      	mov	r2, r4
   19e06:	f812 1b01 	ldrb.w	r1, [r2], #1
   19e0a:	f00d f9b4 	bl	27176 <bt_conn_is_peer_addr_le>
   19e0e:	b1b0      	cbz	r0, 19e3e <find_cf_cfg+0x42>
}
   19e10:	4620      	mov	r0, r4
   19e12:	b003      	add	sp, #12
   19e14:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   19e16:	9000      	str	r0, [sp, #0]
   19e18:	4669      	mov	r1, sp
   19e1a:	f8cd 0003 	str.w	r0, [sp, #3]
   19e1e:	1c60      	adds	r0, r4, #1
   19e20:	f00e f876 	bl	27f10 <bt_addr_le_cmp>
   19e24:	2800      	cmp	r0, #0
   19e26:	d0f3      	beq.n	19e10 <find_cf_cfg+0x14>
   19e28:	4669      	mov	r1, sp
   19e2a:	f104 0011 	add.w	r0, r4, #17
   19e2e:	9500      	str	r5, [sp, #0]
   19e30:	f8cd 5003 	str.w	r5, [sp, #3]
   19e34:	f00e f86c 	bl	27f10 <bt_addr_le_cmp>
   19e38:	b948      	cbnz	r0, 19e4e <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19e3a:	3410      	adds	r4, #16
   19e3c:	e7e8      	b.n	19e10 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19e3e:	7c21      	ldrb	r1, [r4, #16]
   19e40:	f104 0211 	add.w	r2, r4, #17
   19e44:	4628      	mov	r0, r5
   19e46:	f00d f996 	bl	27176 <bt_conn_is_peer_addr_le>
   19e4a:	2800      	cmp	r0, #0
   19e4c:	d1f5      	bne.n	19e3a <find_cf_cfg+0x3e>
	return NULL;
   19e4e:	2400      	movs	r4, #0
   19e50:	e7de      	b.n	19e10 <find_cf_cfg+0x14>
   19e52:	bf00      	nop
   19e54:	20002468 	.word	0x20002468

00019e58 <find_sc_cfg>:
{
   19e58:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   19e5a:	4c0d      	ldr	r4, [pc, #52]	; (19e90 <find_sc_cfg+0x38>)
   19e5c:	7823      	ldrb	r3, [r4, #0]
   19e5e:	4283      	cmp	r3, r0
{
   19e60:	4605      	mov	r5, r0
   19e62:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   19e64:	d009      	beq.n	19e7a <find_sc_cfg+0x22>
   19e66:	7b23      	ldrb	r3, [r4, #12]
   19e68:	42ab      	cmp	r3, r5
   19e6a:	d10f      	bne.n	19e8c <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   19e6c:	4809      	ldr	r0, [pc, #36]	; (19e94 <find_sc_cfg+0x3c>)
   19e6e:	4631      	mov	r1, r6
   19e70:	f00e f84e 	bl	27f10 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   19e74:	b950      	cbnz	r0, 19e8c <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19e76:	2001      	movs	r0, #1
   19e78:	e004      	b.n	19e84 <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   19e7a:	1c60      	adds	r0, r4, #1
   19e7c:	f00e f848 	bl	27f10 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   19e80:	2800      	cmp	r0, #0
   19e82:	d1f0      	bne.n	19e66 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   19e84:	230c      	movs	r3, #12
   19e86:	fb03 4000 	mla	r0, r3, r0, r4
   19e8a:	e000      	b.n	19e8e <find_sc_cfg+0x36>
	return NULL;
   19e8c:	2000      	movs	r0, #0
}
   19e8e:	bd70      	pop	{r4, r5, r6, pc}
   19e90:	200027dc 	.word	0x200027dc
   19e94:	200027e9 	.word	0x200027e9

00019e98 <gatt_sub_find>:
{
   19e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19e9a:	4c15      	ldr	r4, [pc, #84]	; (19ef0 <gatt_sub_find+0x58>)
		if (!conn) {
   19e9c:	4605      	mov	r5, r0
   19e9e:	b140      	cbz	r0, 19eb2 <gatt_sub_find+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   19ea0:	4622      	mov	r2, r4
   19ea2:	f812 1b01 	ldrb.w	r1, [r2], #1
   19ea6:	f00d f966 	bl	27176 <bt_conn_is_peer_addr_le>
   19eaa:	b1b0      	cbz	r0, 19eda <gatt_sub_find+0x42>
}
   19eac:	4620      	mov	r0, r4
   19eae:	b003      	add	sp, #12
   19eb0:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   19eb2:	9000      	str	r0, [sp, #0]
   19eb4:	4669      	mov	r1, sp
   19eb6:	f8cd 0003 	str.w	r0, [sp, #3]
   19eba:	1c60      	adds	r0, r4, #1
   19ebc:	f00e f828 	bl	27f10 <bt_addr_le_cmp>
   19ec0:	2800      	cmp	r0, #0
   19ec2:	d0f3      	beq.n	19eac <gatt_sub_find+0x14>
   19ec4:	4669      	mov	r1, sp
   19ec6:	f104 0011 	add.w	r0, r4, #17
   19eca:	9500      	str	r5, [sp, #0]
   19ecc:	f8cd 5003 	str.w	r5, [sp, #3]
   19ed0:	f00e f81e 	bl	27f10 <bt_addr_le_cmp>
   19ed4:	b948      	cbnz	r0, 19eea <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
   19ed6:	3410      	adds	r4, #16
   19ed8:	e7e8      	b.n	19eac <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   19eda:	7c21      	ldrb	r1, [r4, #16]
   19edc:	f104 0211 	add.w	r2, r4, #17
   19ee0:	4628      	mov	r0, r5
   19ee2:	f00d f948 	bl	27176 <bt_conn_is_peer_addr_le>
   19ee6:	2800      	cmp	r0, #0
   19ee8:	d1f5      	bne.n	19ed6 <gatt_sub_find+0x3e>
	return NULL;
   19eea:	2400      	movs	r4, #0
   19eec:	e7de      	b.n	19eac <gatt_sub_find+0x14>
   19eee:	bf00      	nop
   19ef0:	200024a8 	.word	0x200024a8

00019ef4 <find_cf_cfg_by_addr>:
{
   19ef4:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   19ef6:	4c0d      	ldr	r4, [pc, #52]	; (19f2c <find_cf_cfg_by_addr+0x38>)
   19ef8:	7823      	ldrb	r3, [r4, #0]
   19efa:	4283      	cmp	r3, r0
{
   19efc:	4606      	mov	r6, r0
   19efe:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   19f00:	d009      	beq.n	19f16 <find_cf_cfg_by_addr+0x22>
   19f02:	7c23      	ldrb	r3, [r4, #16]
   19f04:	42b3      	cmp	r3, r6
   19f06:	d10f      	bne.n	19f28 <find_cf_cfg_by_addr+0x34>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   19f08:	4909      	ldr	r1, [pc, #36]	; (19f30 <find_cf_cfg_by_addr+0x3c>)
   19f0a:	4628      	mov	r0, r5
   19f0c:	f00e f800 	bl	27f10 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   19f10:	b950      	cbnz	r0, 19f28 <find_cf_cfg_by_addr+0x34>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   19f12:	2001      	movs	r0, #1
   19f14:	e005      	b.n	19f22 <find_cf_cfg_by_addr+0x2e>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   19f16:	1c61      	adds	r1, r4, #1
   19f18:	4628      	mov	r0, r5
   19f1a:	f00d fff9 	bl	27f10 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   19f1e:	2800      	cmp	r0, #0
   19f20:	d1ef      	bne.n	19f02 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   19f22:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   19f26:	e000      	b.n	19f2a <find_cf_cfg_by_addr+0x36>
	return NULL;
   19f28:	2000      	movs	r0, #0
}
   19f2a:	bd70      	pop	{r4, r5, r6, pc}
   19f2c:	20002468 	.word	0x20002468
   19f30:	20002479 	.word	0x20002479

00019f34 <cf_write>:
{
   19f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f38:	4698      	mov	r8, r3
   19f3a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   19f3e:	2b01      	cmp	r3, #1
{
   19f40:	4606      	mov	r6, r0
   19f42:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   19f44:	d837      	bhi.n	19fb6 <cf_write+0x82>
	if (offset + len > sizeof(cfg->data)) {
   19f46:	4443      	add	r3, r8
   19f48:	2b01      	cmp	r3, #1
   19f4a:	4645      	mov	r5, r8
   19f4c:	dc36      	bgt.n	19fbc <cf_write+0x88>
	cfg = find_cf_cfg(conn);
   19f4e:	f7ff ff55 	bl	19dfc <find_cf_cfg>
	if (!cfg) {
   19f52:	4604      	mov	r4, r0
   19f54:	b918      	cbnz	r0, 19f5e <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   19f56:	f7ff ff51 	bl	19dfc <find_cf_cfg>
	if (!cfg) {
   19f5a:	4604      	mov	r4, r0
   19f5c:	b180      	cbz	r0, 19f80 <cf_write+0x4c>
{
   19f5e:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19f60:	f1b8 0f00 	cmp.w	r8, #0
   19f64:	d115      	bne.n	19f92 <cf_write+0x5e>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19f66:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19f6a:	1c60      	adds	r0, r4, #1
   19f6c:	f00e f80e 	bl	27f8c <bt_addr_le_copy>
	cfg->id = conn->id;
   19f70:	4620      	mov	r0, r4
   19f72:	7a33      	ldrb	r3, [r6, #8]
   19f74:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19f78:	2101      	movs	r1, #1
   19f7a:	f00d fff8 	bl	27f6e <atomic_or>
}
   19f7e:	e005      	b.n	19f8c <cf_write+0x58>
		BT_WARN("No space to store Client Supported Features");
   19f80:	4811      	ldr	r0, [pc, #68]	; (19fc8 <cf_write+0x94>)
   19f82:	2157      	movs	r1, #87	; 0x57
   19f84:	f00b fe45 	bl	25c12 <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19f88:	f06f 0510 	mvn.w	r5, #16
}
   19f8c:	4628      	mov	r0, r5
   19f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19f92:	7a20      	ldrb	r0, [r4, #8]
   19f94:	fa20 f301 	lsr.w	r3, r0, r1
   19f98:	07da      	lsls	r2, r3, #31
   19f9a:	d503      	bpl.n	19fa4 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   19f9c:	783b      	ldrb	r3, [r7, #0]
   19f9e:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19fa0:	07db      	lsls	r3, r3, #31
   19fa2:	d50e      	bpl.n	19fc2 <cf_write+0x8e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19fa4:	3101      	adds	r1, #1
   19fa6:	2903      	cmp	r1, #3
   19fa8:	d1da      	bne.n	19f60 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   19faa:	783b      	ldrb	r3, [r7, #0]
   19fac:	f003 0307 	and.w	r3, r3, #7
   19fb0:	4318      	orrs	r0, r3
   19fb2:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   19fb4:	e7d7      	b.n	19f66 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19fb6:	f06f 0506 	mvn.w	r5, #6
   19fba:	e7e7      	b.n	19f8c <cf_write+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19fbc:	f06f 050c 	mvn.w	r5, #12
   19fc0:	e7e4      	b.n	19f8c <cf_write+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   19fc2:	f06f 0512 	mvn.w	r5, #18
   19fc6:	e7e1      	b.n	19f8c <cf_write+0x58>
   19fc8:	0002d196 	.word	0x0002d196

00019fcc <sc_store>:
{
   19fcc:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   19fce:	4605      	mov	r5, r0
{
   19fd0:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   19fd2:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   19fd6:	4604      	mov	r4, r0
	if (cfg->id) {
   19fd8:	b1ca      	cbz	r2, 1a00e <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   19fda:	ae02      	add	r6, sp, #8
   19fdc:	2104      	movs	r1, #4
   19fde:	4630      	mov	r0, r6
   19fe0:	f00b fb7e 	bl	256e0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   19fe4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   19fe6:	4a0b      	ldr	r2, [pc, #44]	; (1a014 <sc_store+0x48>)
   19fe8:	462b      	mov	r3, r5
   19fea:	2124      	movs	r1, #36	; 0x24
   19fec:	a803      	add	r0, sp, #12
   19fee:	f7fb f81f 	bl	15030 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   19ff2:	2204      	movs	r2, #4
   19ff4:	f104 0108 	add.w	r1, r4, #8
   19ff8:	a803      	add	r0, sp, #12
   19ffa:	f7f9 f849 	bl	13090 <settings_save_one>
	if (err) {
   19ffe:	4602      	mov	r2, r0
   1a000:	b118      	cbz	r0, 1a00a <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   1a002:	4805      	ldr	r0, [pc, #20]	; (1a018 <sc_store+0x4c>)
   1a004:	2145      	movs	r1, #69	; 0x45
   1a006:	f00b fe04 	bl	25c12 <z_log_minimal_printk>
}
   1a00a:	b00c      	add	sp, #48	; 0x30
   1a00c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a00e:	9200      	str	r2, [sp, #0]
   1a010:	e7e9      	b.n	19fe6 <sc_store+0x1a>
   1a012:	bf00      	nop
   1a014:	0002d5f7 	.word	0x0002d5f7
   1a018:	0002d1c7 	.word	0x0002d1c7

0001a01c <sc_save>:
{
   1a01c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a020:	4680      	mov	r8, r0
   1a022:	460f      	mov	r7, r1
   1a024:	4616      	mov	r6, r2
   1a026:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1a028:	f7ff ff16 	bl	19e58 <find_sc_cfg>
	if (!cfg) {
   1a02c:	4604      	mov	r4, r0
   1a02e:	b998      	cbnz	r0, 1a058 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a030:	4669      	mov	r1, sp
   1a032:	9000      	str	r0, [sp, #0]
   1a034:	f8cd 0003 	str.w	r0, [sp, #3]
   1a038:	f7ff ff0e 	bl	19e58 <find_sc_cfg>
		if (!cfg) {
   1a03c:	4604      	mov	r4, r0
   1a03e:	b930      	cbnz	r0, 1a04e <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   1a040:	4813      	ldr	r0, [pc, #76]	; (1a090 <sc_save+0x74>)
   1a042:	2145      	movs	r1, #69	; 0x45
   1a044:	f00b fde5 	bl	25c12 <z_log_minimal_printk>
}
   1a048:	b002      	add	sp, #8
   1a04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1a04e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1a052:	4639      	mov	r1, r7
   1a054:	f00d ff9a 	bl	27f8c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1a058:	8922      	ldrh	r2, [r4, #8]
   1a05a:	8963      	ldrh	r3, [r4, #10]
   1a05c:	b97a      	cbnz	r2, 1a07e <sc_save+0x62>
   1a05e:	b983      	cbnz	r3, 1a082 <sc_save+0x66>
		cfg->data.start = start;
   1a060:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1a062:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1a064:	4621      	mov	r1, r4
   1a066:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a06a:	f00c ff3c 	bl	26ee6 <bt_addr_le_is_bonded>
   1a06e:	2800      	cmp	r0, #0
   1a070:	d0ea      	beq.n	1a048 <sc_save+0x2c>
		sc_store(cfg);
   1a072:	4620      	mov	r0, r4
}
   1a074:	b002      	add	sp, #8
   1a076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1a07a:	f7ff bfa7 	b.w	19fcc <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1a07e:	4296      	cmp	r6, r2
   1a080:	d302      	bcc.n	1a088 <sc_save+0x6c>
   1a082:	429d      	cmp	r5, r3
   1a084:	d8ed      	bhi.n	1a062 <sc_save+0x46>
   1a086:	e7df      	b.n	1a048 <sc_save+0x2c>
	if (*end < new_end) {
   1a088:	429d      	cmp	r5, r3
		*start = new_start;
   1a08a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1a08c:	d9ea      	bls.n	1a064 <sc_save+0x48>
   1a08e:	e7e8      	b.n	1a062 <sc_save+0x46>
   1a090:	0002d1e8 	.word	0x0002d1e8

0001a094 <gatt_sub_free>:
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   1a094:	6883      	ldr	r3, [r0, #8]
{
   1a096:	b513      	push	{r0, r1, r4, lr}
   1a098:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   1a09a:	b153      	cbz	r3, 1a0b2 <gatt_sub_free+0x1e>
   1a09c:	490a      	ldr	r1, [pc, #40]	; (1a0c8 <gatt_sub_free+0x34>)
   1a09e:	480b      	ldr	r0, [pc, #44]	; (1a0cc <gatt_sub_free+0x38>)
   1a0a0:	f640 428e 	movw	r2, #3214	; 0xc8e
   1a0a4:	f00b fda7 	bl	25bf6 <assert_print>
   1a0a8:	4807      	ldr	r0, [pc, #28]	; (1a0c8 <gatt_sub_free+0x34>)
   1a0aa:	f640 418e 	movw	r1, #3214	; 0xc8e
   1a0ae:	f00b fd9b 	bl	25be8 <assert_post_action>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1a0b2:	2300      	movs	r3, #0
   1a0b4:	4669      	mov	r1, sp
   1a0b6:	1c60      	adds	r0, r4, #1
   1a0b8:	9300      	str	r3, [sp, #0]
   1a0ba:	f8cd 3003 	str.w	r3, [sp, #3]
   1a0be:	f00d ff65 	bl	27f8c <bt_addr_le_copy>
}
   1a0c2:	b002      	add	sp, #8
   1a0c4:	bd10      	pop	{r4, pc}
   1a0c6:	bf00      	nop
   1a0c8:	0002d20c 	.word	0x0002d20c
   1a0cc:	0002ab8c 	.word	0x0002ab8c

0001a0d0 <gatt_write_ccc_rsp>:
{
   1a0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0d4:	9c06      	ldr	r4, [sp, #24]
   1a0d6:	460e      	mov	r6, r1
   1a0d8:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a0da:	f06f 0104 	mvn.w	r1, #4
   1a0de:	f104 0014 	add.w	r0, r4, #20
   1a0e2:	f00d ff83 	bl	27fec <atomic_and>
	if (err) {
   1a0e6:	b1ee      	cbz	r6, 1a124 <gatt_write_ccc_rsp+0x54>
		sub = gatt_sub_find(conn);
   1a0e8:	4628      	mov	r0, r5
   1a0ea:	f7ff fed5 	bl	19e98 <gatt_sub_find>
		if (!sub) {
   1a0ee:	4601      	mov	r1, r0
   1a0f0:	b368      	cbz	r0, 1a14e <gatt_write_ccc_rsp+0x7e>
	return list->head;
   1a0f2:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a0f4:	b143      	cbz	r3, 1a108 <gatt_write_ccc_rsp+0x38>
	return node->next;
   1a0f6:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1a0f8:	f104 0018 	add.w	r0, r4, #24
   1a0fc:	4283      	cmp	r3, r0
   1a0fe:	d10c      	bne.n	1a11a <gatt_write_ccc_rsp+0x4a>
				gatt_sub_remove(conn, sub, tmp, params);
   1a100:	4623      	mov	r3, r4
   1a102:	4628      	mov	r0, r5
   1a104:	f00d ff53 	bl	27fae <gatt_sub_remove>
	if (params->subscribe) {
   1a108:	6867      	ldr	r7, [r4, #4]
   1a10a:	b1af      	cbz	r7, 1a138 <gatt_write_ccc_rsp+0x68>
		params->subscribe(conn, err, params);
   1a10c:	4622      	mov	r2, r4
   1a10e:	4631      	mov	r1, r6
   1a110:	4628      	mov	r0, r5
   1a112:	463b      	mov	r3, r7
}
   1a114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1a118:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a11a:	2a00      	cmp	r2, #0
   1a11c:	d0f4      	beq.n	1a108 <gatt_write_ccc_rsp+0x38>
	return node->next;
   1a11e:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a120:	6812      	ldr	r2, [r2, #0]
   1a122:	e7eb      	b.n	1a0fc <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   1a124:	8a23      	ldrh	r3, [r4, #16]
   1a126:	2b00      	cmp	r3, #0
   1a128:	d1ee      	bne.n	1a108 <gatt_write_ccc_rsp+0x38>
		params->notify(conn, params, NULL, 0);
   1a12a:	6827      	ldr	r7, [r4, #0]
   1a12c:	4633      	mov	r3, r6
   1a12e:	4632      	mov	r2, r6
   1a130:	4621      	mov	r1, r4
   1a132:	4628      	mov	r0, r5
   1a134:	47b8      	blx	r7
   1a136:	e7e7      	b.n	1a108 <gatt_write_ccc_rsp+0x38>
	} else if (params->write) {
   1a138:	68a3      	ldr	r3, [r4, #8]
   1a13a:	b143      	cbz	r3, 1a14e <gatt_write_ccc_rsp+0x7e>
		BT_WARN("write callback is deprecated, use subscribe cb instead");
   1a13c:	4805      	ldr	r0, [pc, #20]	; (1a154 <gatt_write_ccc_rsp+0x84>)
   1a13e:	2157      	movs	r1, #87	; 0x57
   1a140:	f00b fd67 	bl	25c12 <z_log_minimal_printk>
		params->write(conn, err, NULL);
   1a144:	68a3      	ldr	r3, [r4, #8]
   1a146:	463a      	mov	r2, r7
   1a148:	4631      	mov	r1, r6
   1a14a:	4628      	mov	r0, r5
   1a14c:	e7e2      	b.n	1a114 <gatt_write_ccc_rsp+0x44>
}
   1a14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a152:	bf00      	nop
   1a154:	0002d23c 	.word	0x0002d23c

0001a158 <bt_gatt_attr_write_ccc>:
{
   1a158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a15c:	4698      	mov	r8, r3
   1a15e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1a162:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   1a166:	4606      	mov	r6, r0
   1a168:	4689      	mov	r9, r1
	if (offset) {
   1a16a:	2b00      	cmp	r3, #0
   1a16c:	d164      	bne.n	1a238 <bt_gatt_attr_write_ccc+0xe0>
	if (!len || len > sizeof(uint16_t)) {
   1a16e:	f108 33ff 	add.w	r3, r8, #4294967295
   1a172:	2b01      	cmp	r3, #1
   1a174:	d863      	bhi.n	1a23e <bt_gatt_attr_write_ccc+0xe6>
		value = *(uint8_t *)buf;
   1a176:	7817      	ldrb	r7, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1a178:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   1a17c:	4651      	mov	r1, sl
   1a17e:	bf14      	ite	ne
   1a180:	8817      	ldrhne	r7, [r2, #0]
		value = *(uint8_t *)buf;
   1a182:	b2bf      	uxtheq	r7, r7
	cfg = find_ccc_cfg(conn, ccc);
   1a184:	f00d fec7 	bl	27f16 <find_ccc_cfg>
	if (!cfg) {
   1a188:	4605      	mov	r5, r0
   1a18a:	b9b0      	cbnz	r0, 1a1ba <bt_gatt_attr_write_ccc+0x62>
		if (!value) {
   1a18c:	b917      	cbnz	r7, 1a194 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   1a18e:	4640      	mov	r0, r8
}
   1a190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1a194:	4651      	mov	r1, sl
   1a196:	f00d febe 	bl	27f16 <find_ccc_cfg>
		if (!cfg) {
   1a19a:	4605      	mov	r5, r0
   1a19c:	b930      	cbnz	r0, 1a1ac <bt_gatt_attr_write_ccc+0x54>
			BT_WARN("No space to store CCC cfg");
   1a19e:	4829      	ldr	r0, [pc, #164]	; (1a244 <bt_gatt_attr_write_ccc+0xec>)
   1a1a0:	2157      	movs	r1, #87	; 0x57
   1a1a2:	f00b fd36 	bl	25c12 <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a1a6:	f06f 0010 	mvn.w	r0, #16
   1a1aa:	e7f1      	b.n	1a190 <bt_gatt_attr_write_ccc+0x38>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a1ac:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1a1b0:	3001      	adds	r0, #1
   1a1b2:	f00d feeb 	bl	27f8c <bt_addr_le_copy>
		cfg->id = conn->id;
   1a1b6:	7a33      	ldrb	r3, [r6, #8]
   1a1b8:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1a1ba:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a1be:	bb7b      	cbnz	r3, 1a220 <bt_gatt_attr_write_ccc+0xc8>
	if (cfg->value != ccc->value) {
   1a1c0:	f8ba 300a 	ldrh.w	r3, [sl, #10]
	value_changed = cfg->value != value;
   1a1c4:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   1a1c6:	812f      	strh	r7, [r5, #8]
	if (cfg->value != ccc->value) {
   1a1c8:	42bb      	cmp	r3, r7
   1a1ca:	d003      	beq.n	1a1d4 <bt_gatt_attr_write_ccc+0x7c>
		gatt_ccc_changed(attr, ccc);
   1a1cc:	4651      	mov	r1, sl
   1a1ce:	4648      	mov	r0, r9
   1a1d0:	f00d fe26 	bl	27e20 <gatt_ccc_changed>
	if (value_changed) {
   1a1d4:	42bc      	cmp	r4, r7
   1a1d6:	d01d      	beq.n	1a214 <bt_gatt_attr_write_ccc+0xbc>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   1a1d8:	4630      	mov	r0, r6
   1a1da:	f7fd fed3 	bl	17f84 <bt_conn_index>
   1a1de:	4c1a      	ldr	r4, [pc, #104]	; (1a248 <bt_gatt_attr_write_ccc+0xf0>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1a1e0:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   1a1e4:	429e      	cmp	r6, r3
   1a1e6:	d015      	beq.n	1a214 <bt_gatt_attr_write_ccc+0xbc>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a1e8:	7a30      	ldrb	r0, [r6, #8]
   1a1ea:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1a1ee:	f00c fe7a 	bl	26ee6 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1a1f2:	b178      	cbz	r0, 1a214 <bt_gatt_attr_write_ccc+0xbc>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1a1f4:	4630      	mov	r0, r6
   1a1f6:	f7fd fec5 	bl	17f84 <bt_conn_index>
   1a1fa:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   1a1fc:	4630      	mov	r0, r6
   1a1fe:	f00c ff07 	bl	27010 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1a202:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1a206:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1a20a:	2300      	movs	r3, #0
   1a20c:	f104 0008 	add.w	r0, r4, #8
   1a210:	f008 ffa2 	bl	23158 <k_work_reschedule>
	if (!value) {
   1a214:	2f00      	cmp	r7, #0
   1a216:	d1ba      	bne.n	1a18e <bt_gatt_attr_write_ccc+0x36>
		clear_ccc_cfg(cfg);
   1a218:	4628      	mov	r0, r5
   1a21a:	f00d feba 	bl	27f92 <clear_ccc_cfg>
   1a21e:	e7b6      	b.n	1a18e <bt_gatt_attr_write_ccc+0x36>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1a220:	463a      	mov	r2, r7
   1a222:	4649      	mov	r1, r9
   1a224:	4630      	mov	r0, r6
   1a226:	4798      	blx	r3
		if (write < 0) {
   1a228:	2800      	cmp	r0, #0
   1a22a:	dbb1      	blt.n	1a190 <bt_gatt_attr_write_ccc+0x38>
		if (write != sizeof(value) && write != 1) {
   1a22c:	1e44      	subs	r4, r0, #1
   1a22e:	2c01      	cmp	r4, #1
   1a230:	d9c6      	bls.n	1a1c0 <bt_gatt_attr_write_ccc+0x68>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1a232:	f06f 000d 	mvn.w	r0, #13
   1a236:	e7ab      	b.n	1a190 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a238:	f06f 0006 	mvn.w	r0, #6
   1a23c:	e7a8      	b.n	1a190 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a23e:	f06f 000c 	mvn.w	r0, #12
   1a242:	e7a5      	b.n	1a190 <bt_gatt_attr_write_ccc+0x38>
   1a244:	0002d278 	.word	0x0002d278
   1a248:	20001b78 	.word	0x20001b78

0001a24c <sc_set>:
{
   1a24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a250:	460e      	mov	r6, r1
   1a252:	b086      	sub	sp, #24
   1a254:	4617      	mov	r7, r2
   1a256:	4698      	mov	r8, r3
	if (!name) {
   1a258:	4605      	mov	r5, r0
   1a25a:	b948      	cbnz	r0, 1a270 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   1a25c:	482a      	ldr	r0, [pc, #168]	; (1a308 <sc_set+0xbc>)
   1a25e:	2145      	movs	r1, #69	; 0x45
   1a260:	f00b fcd7 	bl	25c12 <z_log_minimal_printk>
		return -EINVAL;
   1a264:	f06f 0415 	mvn.w	r4, #21
}
   1a268:	4620      	mov	r0, r4
   1a26a:	b006      	add	sp, #24
   1a26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   1a270:	a902      	add	r1, sp, #8
   1a272:	f00c fcde 	bl	26c32 <bt_settings_decode_key>
	if (err) {
   1a276:	4604      	mov	r4, r0
   1a278:	b128      	cbz	r0, 1a286 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", name);
   1a27a:	4824      	ldr	r0, [pc, #144]	; (1a30c <sc_set+0xc0>)
   1a27c:	462a      	mov	r2, r5
   1a27e:	2145      	movs	r1, #69	; 0x45
   1a280:	f00b fcc7 	bl	25c12 <z_log_minimal_printk>
   1a284:	e7ee      	b.n	1a264 <sc_set+0x18>
	settings_name_next(name, &next);
   1a286:	a901      	add	r1, sp, #4
   1a288:	4628      	mov	r0, r5
   1a28a:	f00b ff62 	bl	26152 <settings_name_next>
	if (!next) {
   1a28e:	9801      	ldr	r0, [sp, #4]
   1a290:	b140      	cbz	r0, 1a2a4 <sc_set+0x58>
		unsigned long next_id = strtoul(next, NULL, 10);
   1a292:	220a      	movs	r2, #10
   1a294:	4621      	mov	r1, r4
   1a296:	f00c fb9b 	bl	269d0 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1a29a:	4602      	mov	r2, r0
   1a29c:	b110      	cbz	r0, 1a2a4 <sc_set+0x58>
			BT_ERR("Invalid local identity %lu", next_id);
   1a29e:	481c      	ldr	r0, [pc, #112]	; (1a310 <sc_set+0xc4>)
   1a2a0:	2145      	movs	r1, #69	; 0x45
   1a2a2:	e7ed      	b.n	1a280 <sc_set+0x34>
	cfg = find_sc_cfg(id, &addr);
   1a2a4:	a902      	add	r1, sp, #8
   1a2a6:	2000      	movs	r0, #0
   1a2a8:	f7ff fdd6 	bl	19e58 <find_sc_cfg>
	if (!cfg && len_rd) {
   1a2ac:	4605      	mov	r5, r0
   1a2ae:	bb20      	cbnz	r0, 1a2fa <sc_set+0xae>
   1a2b0:	2e00      	cmp	r6, #0
   1a2b2:	d0d9      	beq.n	1a268 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a2b4:	a904      	add	r1, sp, #16
   1a2b6:	9004      	str	r0, [sp, #16]
   1a2b8:	4606      	mov	r6, r0
   1a2ba:	f8cd 0013 	str.w	r0, [sp, #19]
   1a2be:	f7ff fdcb 	bl	19e58 <find_sc_cfg>
		if (!cfg) {
   1a2c2:	4605      	mov	r5, r0
   1a2c4:	b930      	cbnz	r0, 1a2d4 <sc_set+0x88>
			BT_ERR("Unable to restore SC: no cfg left");
   1a2c6:	4813      	ldr	r0, [pc, #76]	; (1a314 <sc_set+0xc8>)
   1a2c8:	2145      	movs	r1, #69	; 0x45
   1a2ca:	f00b fca2 	bl	25c12 <z_log_minimal_printk>
			return -ENOMEM;
   1a2ce:	f06f 040b 	mvn.w	r4, #11
   1a2d2:	e7c9      	b.n	1a268 <sc_set+0x1c>
		cfg->id = id;
   1a2d4:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1a2d8:	a902      	add	r1, sp, #8
   1a2da:	f00d fe57 	bl	27f8c <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1a2de:	f105 0108 	add.w	r1, r5, #8
   1a2e2:	2204      	movs	r2, #4
   1a2e4:	4640      	mov	r0, r8
   1a2e6:	47b8      	blx	r7
		if (len < 0) {
   1a2e8:	1e05      	subs	r5, r0, #0
   1a2ea:	dabd      	bge.n	1a268 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   1a2ec:	480a      	ldr	r0, [pc, #40]	; (1a318 <sc_set+0xcc>)
   1a2ee:	462a      	mov	r2, r5
   1a2f0:	2145      	movs	r1, #69	; 0x45
   1a2f2:	f00b fc8e 	bl	25c12 <z_log_minimal_printk>
			return len;
   1a2f6:	462c      	mov	r4, r5
   1a2f8:	e7b6      	b.n	1a268 <sc_set+0x1c>
	if (len_rd) {
   1a2fa:	2e00      	cmp	r6, #0
   1a2fc:	d1ef      	bne.n	1a2de <sc_set+0x92>
		memset(cfg, 0, sizeof(*cfg));
   1a2fe:	220c      	movs	r2, #12
   1a300:	4631      	mov	r1, r6
   1a302:	f00c fc31 	bl	26b68 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1a306:	e7af      	b.n	1a268 <sc_set+0x1c>
   1a308:	0002bd77 	.word	0x0002bd77
   1a30c:	0002d297 	.word	0x0002d297
   1a310:	0002d2b8 	.word	0x0002d2b8
   1a314:	0002d2d8 	.word	0x0002d2d8
   1a318:	0002d13d 	.word	0x0002d13d

0001a31c <db_hash_commit>:

static int db_hash_commit(void)
{
   1a31c:	b510      	push	{r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a31e:	2108      	movs	r1, #8
   1a320:	4809      	ldr	r0, [pc, #36]	; (1a348 <db_hash_commit+0x2c>)
   1a322:	f00d fe24 	bl	27f6e <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1a326:	4809      	ldr	r0, [pc, #36]	; (1a34c <db_hash_commit+0x30>)
   1a328:	2200      	movs	r2, #0
   1a32a:	2300      	movs	r3, #0
   1a32c:	f7fa ff28 	bl	15180 <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   1a330:	1e04      	subs	r4, r0, #0
   1a332:	da06      	bge.n	1a342 <db_hash_commit+0x26>
		BT_ERR("Unable to reschedule database hash process (err %d)", err);
   1a334:	4806      	ldr	r0, [pc, #24]	; (1a350 <db_hash_commit+0x34>)
   1a336:	4622      	mov	r2, r4
   1a338:	2145      	movs	r1, #69	; 0x45
   1a33a:	f00b fc6a 	bl	25c12 <z_log_minimal_printk>
	}

	return err;
}
   1a33e:	4620      	mov	r0, r4
   1a340:	bd10      	pop	{r4, pc}
	if (err) {
   1a342:	2400      	movs	r4, #0
	return err;
   1a344:	e7fb      	b.n	1a33e <db_hash_commit+0x22>
   1a346:	bf00      	nop
   1a348:	20001c00 	.word	0x20001c00
   1a34c:	20001b20 	.word	0x20001b20
   1a350:	0002d2ff 	.word	0x0002d2ff

0001a354 <cf_set>:
{
   1a354:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a358:	4688      	mov	r8, r1
   1a35a:	4616      	mov	r6, r2
   1a35c:	461f      	mov	r7, r3
	if (!name) {
   1a35e:	4605      	mov	r5, r0
   1a360:	b948      	cbnz	r0, 1a376 <cf_set+0x22>
		BT_ERR("Insufficient number of arguments");
   1a362:	4828      	ldr	r0, [pc, #160]	; (1a404 <cf_set+0xb0>)
   1a364:	2145      	movs	r1, #69	; 0x45
   1a366:	f00b fc54 	bl	25c12 <z_log_minimal_printk>
		return -EINVAL;
   1a36a:	f06f 0415 	mvn.w	r4, #21
}
   1a36e:	4620      	mov	r0, r4
   1a370:	b004      	add	sp, #16
   1a372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   1a376:	a902      	add	r1, sp, #8
   1a378:	f00c fc5b 	bl	26c32 <bt_settings_decode_key>
	if (err) {
   1a37c:	4604      	mov	r4, r0
   1a37e:	b128      	cbz	r0, 1a38c <cf_set+0x38>
		BT_ERR("Unable to decode address %s", name);
   1a380:	4821      	ldr	r0, [pc, #132]	; (1a408 <cf_set+0xb4>)
   1a382:	462a      	mov	r2, r5
   1a384:	2145      	movs	r1, #69	; 0x45
   1a386:	f00b fc44 	bl	25c12 <z_log_minimal_printk>
   1a38a:	e7ee      	b.n	1a36a <cf_set+0x16>
	settings_name_next(name, &next);
   1a38c:	a901      	add	r1, sp, #4
   1a38e:	4628      	mov	r0, r5
   1a390:	f00b fedf 	bl	26152 <settings_name_next>
	if (!next) {
   1a394:	9801      	ldr	r0, [sp, #4]
   1a396:	b140      	cbz	r0, 1a3aa <cf_set+0x56>
		unsigned long next_id = strtoul(next, NULL, 10);
   1a398:	220a      	movs	r2, #10
   1a39a:	4621      	mov	r1, r4
   1a39c:	f00c fb18 	bl	269d0 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1a3a0:	4602      	mov	r2, r0
   1a3a2:	b110      	cbz	r0, 1a3aa <cf_set+0x56>
			BT_ERR("Invalid local identity %lu", next_id);
   1a3a4:	4819      	ldr	r0, [pc, #100]	; (1a40c <cf_set+0xb8>)
   1a3a6:	2145      	movs	r1, #69	; 0x45
   1a3a8:	e7ed      	b.n	1a386 <cf_set+0x32>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1a3aa:	a902      	add	r1, sp, #8
   1a3ac:	2000      	movs	r0, #0
   1a3ae:	f7ff fda1 	bl	19ef4 <find_cf_cfg_by_addr>
	if (!cfg) {
   1a3b2:	4605      	mov	r5, r0
   1a3b4:	b980      	cbnz	r0, 1a3d8 <cf_set+0x84>
		cfg = find_cf_cfg(NULL);
   1a3b6:	f7ff fd21 	bl	19dfc <find_cf_cfg>
		if (!cfg) {
   1a3ba:	4605      	mov	r5, r0
   1a3bc:	b930      	cbnz	r0, 1a3cc <cf_set+0x78>
			BT_ERR("Unable to restore CF: no cfg left");
   1a3be:	4814      	ldr	r0, [pc, #80]	; (1a410 <cf_set+0xbc>)
   1a3c0:	2145      	movs	r1, #69	; 0x45
   1a3c2:	f00b fc26 	bl	25c12 <z_log_minimal_printk>
			return -ENOMEM;
   1a3c6:	f06f 040b 	mvn.w	r4, #11
   1a3ca:	e7d0      	b.n	1a36e <cf_set+0x1a>
		cfg->id = id;
   1a3cc:	2300      	movs	r3, #0
   1a3ce:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1a3d2:	a902      	add	r1, sp, #8
   1a3d4:	f00d fdda 	bl	27f8c <bt_addr_le_copy>
	if (len_rd) {
   1a3d8:	f1b8 0f00 	cmp.w	r8, #0
   1a3dc:	d00d      	beq.n	1a3fa <cf_set+0xa6>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1a3de:	f105 0108 	add.w	r1, r5, #8
   1a3e2:	2201      	movs	r2, #1
   1a3e4:	4638      	mov	r0, r7
   1a3e6:	47b0      	blx	r6
		if (len < 0) {
   1a3e8:	1e05      	subs	r5, r0, #0
   1a3ea:	dac0      	bge.n	1a36e <cf_set+0x1a>
			BT_ERR("Failed to decode value (err %zd)", len);
   1a3ec:	4809      	ldr	r0, [pc, #36]	; (1a414 <cf_set+0xc0>)
   1a3ee:	462a      	mov	r2, r5
   1a3f0:	2145      	movs	r1, #69	; 0x45
   1a3f2:	f00b fc0e 	bl	25c12 <z_log_minimal_printk>
			return len;
   1a3f6:	462c      	mov	r4, r5
   1a3f8:	e7b9      	b.n	1a36e <cf_set+0x1a>
		clear_cf_cfg(cfg);
   1a3fa:	4628      	mov	r0, r5
   1a3fc:	f00d fed2 	bl	281a4 <clear_cf_cfg>
   1a400:	e7b5      	b.n	1a36e <cf_set+0x1a>
   1a402:	bf00      	nop
   1a404:	0002bd77 	.word	0x0002bd77
   1a408:	0002d297 	.word	0x0002d297
   1a40c:	0002d2b8 	.word	0x0002d2b8
   1a410:	0002d338 	.word	0x0002d338
   1a414:	0002d13d 	.word	0x0002d13d

0001a418 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1a418:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a41a:	6881      	ldr	r1, [r0, #8]
{
   1a41c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a41e:	4a07      	ldr	r2, [pc, #28]	; (1a43c <remove_peer_from_attr+0x24>)
   1a420:	4291      	cmp	r1, r2
   1a422:	d109      	bne.n	1a438 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1a424:	791a      	ldrb	r2, [r3, #4]
   1a426:	6819      	ldr	r1, [r3, #0]
   1a428:	68c0      	ldr	r0, [r0, #12]
   1a42a:	f00d fd8c 	bl	27f46 <ccc_find_cfg>
	if (cfg) {
   1a42e:	b118      	cbz	r0, 1a438 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1a430:	220a      	movs	r2, #10
   1a432:	2100      	movs	r1, #0
   1a434:	f00c fb98 	bl	26b68 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1a438:	2001      	movs	r0, #1
   1a43a:	bd08      	pop	{r3, pc}
   1a43c:	0001a159 	.word	0x0001a159

0001a440 <ccc_load>:
{
   1a440:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a442:	4b21      	ldr	r3, [pc, #132]	; (1a4c8 <ccc_load+0x88>)
{
   1a444:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a446:	6882      	ldr	r2, [r0, #8]
   1a448:	429a      	cmp	r2, r3
   1a44a:	d002      	beq.n	1a452 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   1a44c:	2001      	movs	r0, #1
}
   1a44e:	b002      	add	sp, #8
   1a450:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   1a452:	68a3      	ldr	r3, [r4, #8]
   1a454:	68c6      	ldr	r6, [r0, #12]
   1a456:	b94b      	cbnz	r3, 1a46c <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   1a458:	7922      	ldrb	r2, [r4, #4]
   1a45a:	6821      	ldr	r1, [r4, #0]
   1a45c:	4630      	mov	r0, r6
   1a45e:	f00d fd72 	bl	27f46 <ccc_find_cfg>
	if (!cfg) {
   1a462:	2800      	cmp	r0, #0
   1a464:	d0f2      	beq.n	1a44c <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1a466:	f00d fd94 	bl	27f92 <clear_ccc_cfg>
   1a46a:	e7ef      	b.n	1a44c <ccc_load+0xc>
	} else if (!load->count) {
   1a46c:	68e0      	ldr	r0, [r4, #12]
   1a46e:	2800      	cmp	r0, #0
   1a470:	d0ed      	beq.n	1a44e <ccc_load+0xe>
	if (load->entry->handle != handle) {
   1a472:	881b      	ldrh	r3, [r3, #0]
   1a474:	4299      	cmp	r1, r3
   1a476:	d00a      	beq.n	1a48e <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   1a478:	d9e8      	bls.n	1a44c <ccc_load+0xc>
	load->count--;
   1a47a:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1a47c:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1a47e:	3801      	subs	r0, #1
	load->entry++;
   1a480:	3304      	adds	r3, #4
	load->count--;
   1a482:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a484:	3800      	subs	r0, #0
	load->entry++;
   1a486:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a488:	bf18      	it	ne
   1a48a:	2001      	movne	r0, #1
   1a48c:	e7df      	b.n	1a44e <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1a48e:	7922      	ldrb	r2, [r4, #4]
   1a490:	6821      	ldr	r1, [r4, #0]
   1a492:	4630      	mov	r0, r6
   1a494:	f00d fd57 	bl	27f46 <ccc_find_cfg>
	if (!cfg) {
   1a498:	4605      	mov	r5, r0
   1a49a:	b980      	cbnz	r0, 1a4be <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1a49c:	9000      	str	r0, [sp, #0]
   1a49e:	4602      	mov	r2, r0
   1a4a0:	f8cd 0003 	str.w	r0, [sp, #3]
   1a4a4:	4669      	mov	r1, sp
   1a4a6:	4630      	mov	r0, r6
   1a4a8:	f00d fd4d 	bl	27f46 <ccc_find_cfg>
		if (!cfg) {
   1a4ac:	4605      	mov	r5, r0
   1a4ae:	2800      	cmp	r0, #0
   1a4b0:	d0e3      	beq.n	1a47a <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1a4b2:	6821      	ldr	r1, [r4, #0]
   1a4b4:	3001      	adds	r0, #1
   1a4b6:	f00d fd69 	bl	27f8c <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1a4ba:	7923      	ldrb	r3, [r4, #4]
   1a4bc:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1a4be:	68a3      	ldr	r3, [r4, #8]
   1a4c0:	885b      	ldrh	r3, [r3, #2]
   1a4c2:	812b      	strh	r3, [r5, #8]
   1a4c4:	e7d9      	b.n	1a47a <ccc_load+0x3a>
   1a4c6:	bf00      	nop
   1a4c8:	0001a159 	.word	0x0001a159

0001a4cc <convert_to_id_on_match>:
{
   1a4cc:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a4ce:	4b09      	ldr	r3, [pc, #36]	; (1a4f4 <convert_to_id_on_match+0x28>)
{
   1a4d0:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a4d2:	6882      	ldr	r2, [r0, #8]
   1a4d4:	429a      	cmp	r2, r3
   1a4d6:	d10a      	bne.n	1a4ee <convert_to_id_on_match+0x22>
		if (bt_addr_le_cmp(&ccc->cfg[i].peer, match->private_addr) == 0) {
   1a4d8:	68c4      	ldr	r4, [r0, #12]
   1a4da:	6829      	ldr	r1, [r5, #0]
   1a4dc:	3401      	adds	r4, #1
   1a4de:	4620      	mov	r0, r4
   1a4e0:	f00d fd16 	bl	27f10 <bt_addr_le_cmp>
   1a4e4:	b918      	cbnz	r0, 1a4ee <convert_to_id_on_match+0x22>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   1a4e6:	6869      	ldr	r1, [r5, #4]
   1a4e8:	4620      	mov	r0, r4
   1a4ea:	f00d fd4f 	bl	27f8c <bt_addr_le_copy>
}
   1a4ee:	2001      	movs	r0, #1
   1a4f0:	bd38      	pop	{r3, r4, r5, pc}
   1a4f2:	bf00      	nop
   1a4f4:	0001a159 	.word	0x0001a159

0001a4f8 <ccc_save>:
{
   1a4f8:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a4fa:	4b0c      	ldr	r3, [pc, #48]	; (1a52c <ccc_save+0x34>)
{
   1a4fc:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a4fe:	6882      	ldr	r2, [r0, #8]
   1a500:	429a      	cmp	r2, r3
{
   1a502:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a504:	d10f      	bne.n	1a526 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1a506:	7922      	ldrb	r2, [r4, #4]
   1a508:	6821      	ldr	r1, [r4, #0]
   1a50a:	68c0      	ldr	r0, [r0, #12]
   1a50c:	f00d fd1b 	bl	27f46 <ccc_find_cfg>
	if (!cfg) {
   1a510:	b148      	cbz	r0, 1a526 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1a512:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   1a516:	8901      	ldrh	r1, [r0, #8]
   1a518:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1a51c:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1a51e:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1a520:	8151      	strh	r1, [r2, #10]
	save->count++;
   1a522:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1a526:	2001      	movs	r0, #1
   1a528:	bd38      	pop	{r3, r4, r5, pc}
   1a52a:	bf00      	nop
   1a52c:	0001a159 	.word	0x0001a159

0001a530 <bt_gatt_store_cf.isra.0>:
static int bt_gatt_store_cf(struct bt_conn *conn)
   1a530:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a532:	b08d      	sub	sp, #52	; 0x34
   1a534:	4605      	mov	r5, r0
	cfg = find_cf_cfg(conn);
   1a536:	f7ff fc61 	bl	19dfc <find_cf_cfg>
					       &conn->le.dst, id_str);
   1a53a:	f105 0690 	add.w	r6, r5, #144	; 0x90
	if (!cfg) {
   1a53e:	4604      	mov	r4, r0
   1a540:	b330      	cbz	r0, 1a590 <bt_gatt_store_cf.isra.0+0x60>
		if (conn->id) {
   1a542:	7a2a      	ldrb	r2, [r5, #8]
		str = (char *)cfg->data;
   1a544:	3408      	adds	r4, #8
		if (conn->id) {
   1a546:	b32a      	cbz	r2, 1a594 <bt_gatt_store_cf.isra.0+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1a548:	af02      	add	r7, sp, #8
   1a54a:	2104      	movs	r1, #4
   1a54c:	4638      	mov	r0, r7
   1a54e:	f00b f8c7 	bl	256e0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1a552:	4633      	mov	r3, r6
   1a554:	4a10      	ldr	r2, [pc, #64]	; (1a598 <bt_gatt_store_cf.isra.0+0x68>)
   1a556:	9700      	str	r7, [sp, #0]
   1a558:	2124      	movs	r1, #36	; 0x24
   1a55a:	a803      	add	r0, sp, #12
   1a55c:	f7fa fd68 	bl	15030 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1a560:	7a2b      	ldrb	r3, [r5, #8]
   1a562:	2501      	movs	r5, #1
   1a564:	b93b      	cbnz	r3, 1a576 <bt_gatt_store_cf.isra.0+0x46>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1a566:	2300      	movs	r3, #0
   1a568:	9300      	str	r3, [sp, #0]
   1a56a:	4a0b      	ldr	r2, [pc, #44]	; (1a598 <bt_gatt_store_cf.isra.0+0x68>)
   1a56c:	4633      	mov	r3, r6
   1a56e:	2124      	movs	r1, #36	; 0x24
   1a570:	a803      	add	r0, sp, #12
   1a572:	f7fa fd5d 	bl	15030 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1a576:	462a      	mov	r2, r5
   1a578:	4621      	mov	r1, r4
   1a57a:	a803      	add	r0, sp, #12
   1a57c:	f7f8 fd88 	bl	13090 <settings_save_one>
	if (err) {
   1a580:	4602      	mov	r2, r0
   1a582:	b118      	cbz	r0, 1a58c <bt_gatt_store_cf.isra.0+0x5c>
		BT_ERR("Failed to store Client Features (err %d)", err);
   1a584:	4805      	ldr	r0, [pc, #20]	; (1a59c <bt_gatt_store_cf.isra.0+0x6c>)
   1a586:	2145      	movs	r1, #69	; 0x45
   1a588:	f00b fb43 	bl	25c12 <z_log_minimal_printk>
}
   1a58c:	b00d      	add	sp, #52	; 0x34
   1a58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   1a590:	4605      	mov	r5, r0
   1a592:	e7e8      	b.n	1a566 <bt_gatt_store_cf.isra.0+0x36>
   1a594:	2501      	movs	r5, #1
   1a596:	e7e6      	b.n	1a566 <bt_gatt_store_cf.isra.0+0x36>
   1a598:	0002d5f1 	.word	0x0002d5f1
   1a59c:	0002d35f 	.word	0x0002d35f

0001a5a0 <bt_gatt_clear_sc>:
{
   1a5a0:	b570      	push	{r4, r5, r6, lr}
   1a5a2:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1a5a4:	f7ff fc58 	bl	19e58 <find_sc_cfg>
	if (!cfg) {
   1a5a8:	4604      	mov	r4, r0
   1a5aa:	b1e8      	cbz	r0, 1a5e8 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   1a5ac:	4605      	mov	r5, r0
   1a5ae:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a5b2:	b1e2      	cbz	r2, 1a5ee <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1a5b4:	ae02      	add	r6, sp, #8
   1a5b6:	2104      	movs	r1, #4
   1a5b8:	4630      	mov	r0, r6
   1a5ba:	f00b f891 	bl	256e0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a5be:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a5c0:	4a0c      	ldr	r2, [pc, #48]	; (1a5f4 <bt_gatt_clear_sc+0x54>)
   1a5c2:	462b      	mov	r3, r5
   1a5c4:	2124      	movs	r1, #36	; 0x24
   1a5c6:	a803      	add	r0, sp, #12
   1a5c8:	f7fa fd32 	bl	15030 <bt_settings_encode_key>
		err = settings_delete(key);
   1a5cc:	a803      	add	r0, sp, #12
   1a5ce:	f00b fd99 	bl	26104 <settings_delete>
		if (err) {
   1a5d2:	4602      	mov	r2, r0
   1a5d4:	b118      	cbz	r0, 1a5de <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   1a5d6:	4808      	ldr	r0, [pc, #32]	; (1a5f8 <bt_gatt_clear_sc+0x58>)
   1a5d8:	2145      	movs	r1, #69	; 0x45
   1a5da:	f00b fb1a 	bl	25c12 <z_log_minimal_printk>
	memset(cfg, 0, sizeof(*cfg));
   1a5de:	220c      	movs	r2, #12
   1a5e0:	2100      	movs	r1, #0
   1a5e2:	4620      	mov	r0, r4
   1a5e4:	f00c fac0 	bl	26b68 <memset>
}
   1a5e8:	2000      	movs	r0, #0
   1a5ea:	b00c      	add	sp, #48	; 0x30
   1a5ec:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a5ee:	9200      	str	r2, [sp, #0]
   1a5f0:	e7e6      	b.n	1a5c0 <bt_gatt_clear_sc+0x20>
   1a5f2:	bf00      	nop
   1a5f4:	0002d5f7 	.word	0x0002d5f7
   1a5f8:	0002d38d 	.word	0x0002d38d

0001a5fc <sc_clear>:
{
   1a5fc:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a5fe:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1a602:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a604:	4631      	mov	r1, r6
   1a606:	7a00      	ldrb	r0, [r0, #8]
   1a608:	f00c fc6d 	bl	26ee6 <bt_addr_le_is_bonded>
   1a60c:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1a60e:	4631      	mov	r1, r6
   1a610:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a612:	b14d      	cbz	r5, 1a628 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1a614:	f7ff ffc4 	bl	1a5a0 <bt_gatt_clear_sc>
		if (err) {
   1a618:	4602      	mov	r2, r0
   1a61a:	b170      	cbz	r0, 1a63a <sc_clear+0x3e>
}
   1a61c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   1a620:	4806      	ldr	r0, [pc, #24]	; (1a63c <sc_clear+0x40>)
   1a622:	2145      	movs	r1, #69	; 0x45
   1a624:	f00b baf5 	b.w	25c12 <z_log_minimal_printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a628:	f7ff fc16 	bl	19e58 <find_sc_cfg>
		if (cfg) {
   1a62c:	b128      	cbz	r0, 1a63a <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   1a62e:	4629      	mov	r1, r5
   1a630:	220c      	movs	r2, #12
}
   1a632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1a636:	f00c ba97 	b.w	26b68 <memset>
}
   1a63a:	bd70      	pop	{r4, r5, r6, pc}
   1a63c:	0002d3af 	.word	0x0002d3af

0001a640 <disconnected_cb>:
{
   1a640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a644:	4b1f      	ldr	r3, [pc, #124]	; (1a6c4 <disconnected_cb+0x84>)
{
   1a646:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a648:	6882      	ldr	r2, [r0, #8]
   1a64a:	429a      	cmp	r2, r3
{
   1a64c:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a64e:	d102      	bne.n	1a656 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1a650:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1a652:	8963      	ldrh	r3, [r4, #10]
   1a654:	b9c3      	cbnz	r3, 1a688 <disconnected_cb+0x48>
}
   1a656:	2001      	movs	r0, #1
   1a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a65c:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1a660:	7a28      	ldrb	r0, [r5, #8]
   1a662:	4641      	mov	r1, r8
   1a664:	f00c fc3f 	bl	26ee6 <bt_addr_le_is_bonded>
   1a668:	b948      	cbnz	r0, 1a67e <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   1a66a:	4b17      	ldr	r3, [pc, #92]	; (1a6c8 <disconnected_cb+0x88>)
   1a66c:	429c      	cmp	r4, r3
   1a66e:	d102      	bne.n	1a676 <disconnected_cb+0x36>
					sc_clear(conn);
   1a670:	4628      	mov	r0, r5
   1a672:	f7ff ffc3 	bl	1a5fc <sc_clear>
				clear_ccc_cfg(cfg);
   1a676:	4620      	mov	r0, r4
   1a678:	f00d fc8b 	bl	27f92 <clear_ccc_cfg>
	if (!value_used) {
   1a67c:	e019      	b.n	1a6b2 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a67e:	4641      	mov	r1, r8
   1a680:	4638      	mov	r0, r7
   1a682:	f00d fc83 	bl	27f8c <bt_addr_le_copy>
	if (!value_used) {
   1a686:	e014      	b.n	1a6b2 <disconnected_cb+0x72>
		if (!cfg->value) {
   1a688:	8923      	ldrh	r3, [r4, #8]
   1a68a:	b193      	cbz	r3, 1a6b2 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a68c:	4627      	mov	r7, r4
   1a68e:	4628      	mov	r0, r5
   1a690:	f817 1b01 	ldrb.w	r1, [r7], #1
   1a694:	463a      	mov	r2, r7
   1a696:	f00c fd6e 	bl	27176 <bt_conn_is_peer_addr_le>
   1a69a:	2800      	cmp	r0, #0
   1a69c:	d1de      	bne.n	1a65c <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a69e:	7820      	ldrb	r0, [r4, #0]
   1a6a0:	4639      	mov	r1, r7
   1a6a2:	f7fd fdff 	bl	182a4 <bt_conn_lookup_addr_le>
			if (tmp) {
   1a6a6:	b120      	cbz	r0, 1a6b2 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   1a6a8:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   1a6aa:	f7fd fb47 	bl	17d3c <bt_conn_unref>
	if (!value_used) {
   1a6ae:	2d07      	cmp	r5, #7
   1a6b0:	d0d1      	beq.n	1a656 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1a6b2:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1a6b4:	2100      	movs	r1, #0
   1a6b6:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1a6b8:	2b00      	cmp	r3, #0
   1a6ba:	d0cc      	beq.n	1a656 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1a6bc:	4630      	mov	r0, r6
   1a6be:	4798      	blx	r3
   1a6c0:	e7c9      	b.n	1a656 <disconnected_cb+0x16>
   1a6c2:	bf00      	nop
   1a6c4:	0001a159 	.word	0x0001a159
   1a6c8:	20000658 	.word	0x20000658

0001a6cc <gatt_write_ccc>:
{
   1a6cc:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1a6ce:	2312      	movs	r3, #18
{
   1a6d0:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1a6d2:	2104      	movs	r1, #4
   1a6d4:	e9cd 3100 	strd	r3, r1, [sp]
   1a6d8:	4b03      	ldr	r3, [pc, #12]	; (1a6e8 <gatt_write_ccc+0x1c>)
   1a6da:	4904      	ldr	r1, [pc, #16]	; (1a6ec <gatt_write_ccc+0x20>)
   1a6dc:	f00d fe91 	bl	28402 <gatt_req_send.constprop.0>
}
   1a6e0:	b003      	add	sp, #12
   1a6e2:	f85d fb04 	ldr.w	pc, [sp], #4
   1a6e6:	bf00      	nop
   1a6e8:	00028485 	.word	0x00028485
   1a6ec:	0001a0d1 	.word	0x0001a0d1

0001a6f0 <sc_commit>:
{
   1a6f0:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a6f2:	4809      	ldr	r0, [pc, #36]	; (1a718 <sc_commit+0x28>)
   1a6f4:	f06f 0102 	mvn.w	r1, #2
   1a6f8:	f00d fc78 	bl	27fec <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a6fc:	4806      	ldr	r0, [pc, #24]	; (1a718 <sc_commit+0x28>)
   1a6fe:	f00d fc30 	bl	27f62 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a702:	07c3      	lsls	r3, r0, #31
   1a704:	d505      	bpl.n	1a712 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a706:	4805      	ldr	r0, [pc, #20]	; (1a71c <sc_commit+0x2c>)
   1a708:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a70c:	2300      	movs	r3, #0
   1a70e:	f008 fd23 	bl	23158 <k_work_reschedule>
}
   1a712:	2000      	movs	r0, #0
   1a714:	bd08      	pop	{r3, pc}
   1a716:	bf00      	nop
   1a718:	20001c00 	.word	0x20001c00
   1a71c:	20001bd0 	.word	0x20001bd0

0001a720 <sc_indicate_rsp>:
{
   1a720:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a722:	f06f 0102 	mvn.w	r1, #2
   1a726:	4604      	mov	r4, r0
   1a728:	480f      	ldr	r0, [pc, #60]	; (1a768 <sc_indicate_rsp+0x48>)
   1a72a:	f00d fc5f 	bl	27fec <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a72e:	480e      	ldr	r0, [pc, #56]	; (1a768 <sc_indicate_rsp+0x48>)
   1a730:	f00d fc17 	bl	27f62 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a734:	07c2      	lsls	r2, r0, #31
   1a736:	d504      	bpl.n	1a742 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a738:	480c      	ldr	r0, [pc, #48]	; (1a76c <sc_indicate_rsp+0x4c>)
   1a73a:	2200      	movs	r2, #0
   1a73c:	2300      	movs	r3, #0
   1a73e:	f008 fd0b 	bl	23158 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1a742:	4620      	mov	r0, r4
   1a744:	f00d fb3b 	bl	27dbe <bt_att_fixed_chan_only>
   1a748:	b160      	cbz	r0, 1a764 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   1a74a:	4620      	mov	r0, r4
   1a74c:	f7ff fb56 	bl	19dfc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1a750:	b140      	cbz	r0, 1a764 <sc_indicate_rsp+0x44>
   1a752:	7a03      	ldrb	r3, [r0, #8]
   1a754:	07db      	lsls	r3, r3, #31
   1a756:	d505      	bpl.n	1a764 <sc_indicate_rsp+0x44>
}
   1a758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a75c:	2101      	movs	r1, #1
   1a75e:	300c      	adds	r0, #12
   1a760:	f00d bc05 	b.w	27f6e <atomic_or>
   1a764:	bd10      	pop	{r4, pc}
   1a766:	bf00      	nop
   1a768:	20001c00 	.word	0x20001c00
   1a76c:	20001bd0 	.word	0x20001bd0

0001a770 <bt_gatt_init>:
{
   1a770:	b570      	push	{r4, r5, r6, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a772:	4b2b      	ldr	r3, [pc, #172]	; (1a820 <bt_gatt_init+0xb0>)
   1a774:	f3bf 8f5b 	dmb	ish
   1a778:	2201      	movs	r2, #1
   1a77a:	e853 1f00 	ldrex	r1, [r3]
   1a77e:	2900      	cmp	r1, #0
   1a780:	d103      	bne.n	1a78a <bt_gatt_init+0x1a>
   1a782:	e843 2000 	strex	r0, r2, [r3]
   1a786:	2800      	cmp	r0, #0
   1a788:	d1f7      	bne.n	1a77a <bt_gatt_init+0xa>
   1a78a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1a78e:	d146      	bne.n	1a81e <bt_gatt_init+0xae>
   1a790:	f3bf 8f5b 	dmb	ish
   1a794:	4b23      	ldr	r3, [pc, #140]	; (1a824 <bt_gatt_init+0xb4>)
   1a796:	e853 1f00 	ldrex	r1, [r3]
   1a79a:	2900      	cmp	r1, #0
   1a79c:	d103      	bne.n	1a7a6 <bt_gatt_init+0x36>
   1a79e:	e843 2000 	strex	r0, r2, [r3]
   1a7a2:	2800      	cmp	r0, #0
   1a7a4:	d1f7      	bne.n	1a796 <bt_gatt_init+0x26>
   1a7a6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1a7aa:	d034      	beq.n	1a816 <bt_gatt_init+0xa6>
	list->head = NULL;
   1a7ac:	4b1e      	ldr	r3, [pc, #120]	; (1a828 <bt_gatt_init+0xb8>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1a7ae:	491f      	ldr	r1, [pc, #124]	; (1a82c <bt_gatt_init+0xbc>)
   1a7b0:	481f      	ldr	r0, [pc, #124]	; (1a830 <bt_gatt_init+0xc0>)
   1a7b2:	2200      	movs	r2, #0
	list->tail = NULL;
   1a7b4:	e9c3 2200 	strd	r2, r2, [r3]
   1a7b8:	f008 fbd8 	bl	22f6c <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1a7bc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a7c0:	2300      	movs	r3, #0
   1a7c2:	481b      	ldr	r0, [pc, #108]	; (1a830 <bt_gatt_init+0xc0>)
   1a7c4:	f7fa fcd6 	bl	15174 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1a7c8:	491a      	ldr	r1, [pc, #104]	; (1a834 <bt_gatt_init+0xc4>)
   1a7ca:	481b      	ldr	r0, [pc, #108]	; (1a838 <bt_gatt_init+0xc8>)
   1a7cc:	f008 fbce 	bl	22f6c <k_work_init_delayable>
   1a7d0:	2102      	movs	r1, #2
   1a7d2:	481a      	ldr	r0, [pc, #104]	; (1a83c <bt_gatt_init+0xcc>)
   1a7d4:	f00d fbcb 	bl	27f6e <atomic_or>
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1a7d8:	4819      	ldr	r0, [pc, #100]	; (1a840 <bt_gatt_init+0xd0>)
   1a7da:	491a      	ldr	r1, [pc, #104]	; (1a844 <bt_gatt_init+0xd4>)
   1a7dc:	f008 fbc6 	bl	22f6c <k_work_init_delayable>
}
   1a7e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   1a7e4:	4818      	ldr	r0, [pc, #96]	; (1a848 <bt_gatt_init+0xd8>)
   1a7e6:	f7fd bd39 	b.w	1825c <bt_conn_cb_register>
		last_static_handle += svc->attr_count;
   1a7ea:	4a18      	ldr	r2, [pc, #96]	; (1a84c <bt_gatt_init+0xdc>)
   1a7ec:	6863      	ldr	r3, [r4, #4]
   1a7ee:	8811      	ldrh	r1, [r2, #0]
   1a7f0:	440b      	add	r3, r1
   1a7f2:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a7f4:	3408      	adds	r4, #8
   1a7f6:	42ac      	cmp	r4, r5
   1a7f8:	d90a      	bls.n	1a810 <bt_gatt_init+0xa0>
   1a7fa:	4815      	ldr	r0, [pc, #84]	; (1a850 <bt_gatt_init+0xe0>)
   1a7fc:	4631      	mov	r1, r6
   1a7fe:	f240 520e 	movw	r2, #1294	; 0x50e
   1a802:	f00b f9f8 	bl	25bf6 <assert_print>
   1a806:	f240 510e 	movw	r1, #1294	; 0x50e
   1a80a:	4630      	mov	r0, r6
   1a80c:	f00b f9ec 	bl	25be8 <assert_post_action>
   1a810:	42ac      	cmp	r4, r5
   1a812:	d3ea      	bcc.n	1a7ea <bt_gatt_init+0x7a>
   1a814:	e7ca      	b.n	1a7ac <bt_gatt_init+0x3c>
   1a816:	4c0f      	ldr	r4, [pc, #60]	; (1a854 <bt_gatt_init+0xe4>)
   1a818:	4d0f      	ldr	r5, [pc, #60]	; (1a858 <bt_gatt_init+0xe8>)
   1a81a:	4e10      	ldr	r6, [pc, #64]	; (1a85c <bt_gatt_init+0xec>)
   1a81c:	e7eb      	b.n	1a7f6 <bt_gatt_init+0x86>
}
   1a81e:	bd70      	pop	{r4, r5, r6, pc}
   1a820:	20002488 	.word	0x20002488
   1a824:	200024a4 	.word	0x200024a4
   1a828:	20002460 	.word	0x20002460
   1a82c:	0001aac5 	.word	0x0001aac5
   1a830:	20001b20 	.word	0x20001b20
   1a834:	0001affd 	.word	0x0001affd
   1a838:	20001bd0 	.word	0x20001bd0
   1a83c:	20001c00 	.word	0x20001c00
   1a840:	20001b80 	.word	0x20001b80
   1a844:	00028813 	.word	0x00028813
   1a848:	2000063c 	.word	0x2000063c
   1a84c:	200027da 	.word	0x200027da
   1a850:	0002ab8c 	.word	0x0002ab8c
   1a854:	0002a014 	.word	0x0002a014
   1a858:	0002a02c 	.word	0x0002a02c
   1a85c:	0002d20c 	.word	0x0002d20c

0001a860 <bt_gatt_attr_get_handle>:
{
   1a860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1a864:	4604      	mov	r4, r0
   1a866:	b910      	cbnz	r0, 1a86e <bt_gatt_attr_get_handle+0xe>
		return 0;
   1a868:	2000      	movs	r0, #0
}
   1a86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   1a86e:	8a00      	ldrh	r0, [r0, #16]
   1a870:	2800      	cmp	r0, #0
   1a872:	d1fa      	bne.n	1a86a <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a874:	4d18      	ldr	r5, [pc, #96]	; (1a8d8 <bt_gatt_attr_get_handle+0x78>)
   1a876:	4e19      	ldr	r6, [pc, #100]	; (1a8dc <bt_gatt_attr_get_handle+0x7c>)
   1a878:	4f19      	ldr	r7, [pc, #100]	; (1a8e0 <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
   1a87a:	f04f 0801 	mov.w	r8, #1
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a87e:	42b5      	cmp	r5, r6
   1a880:	d90a      	bls.n	1a898 <bt_gatt_attr_get_handle+0x38>
   1a882:	4818      	ldr	r0, [pc, #96]	; (1a8e4 <bt_gatt_attr_get_handle+0x84>)
   1a884:	4639      	mov	r1, r7
   1a886:	f240 6265 	movw	r2, #1637	; 0x665
   1a88a:	f00b f9b4 	bl	25bf6 <assert_print>
   1a88e:	f240 6165 	movw	r1, #1637	; 0x665
   1a892:	4638      	mov	r0, r7
   1a894:	f00b f9a8 	bl	25be8 <assert_post_action>
   1a898:	42b5      	cmp	r5, r6
   1a89a:	d2e5      	bcs.n	1a868 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a89c:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   1a8a0:	4564      	cmp	r4, ip
   1a8a2:	d306      	bcc.n	1a8b2 <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a8a4:	f04f 0e14 	mov.w	lr, #20
   1a8a8:	fb0e c301 	mla	r3, lr, r1, ip
   1a8ac:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1a8ae:	429c      	cmp	r4, r3
   1a8b0:	d910      	bls.n	1a8d4 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   1a8b2:	eb08 0001 	add.w	r0, r8, r1
   1a8b6:	b280      	uxth	r0, r0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a8b8:	3508      	adds	r5, #8
   1a8ba:	4680      	mov	r8, r0
   1a8bc:	e7df      	b.n	1a87e <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   1a8be:	fb0e c302 	mla	r3, lr, r2, ip
   1a8c2:	429c      	cmp	r4, r3
   1a8c4:	d0d1      	beq.n	1a86a <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1a8c6:	3201      	adds	r2, #1
   1a8c8:	eb08 0302 	add.w	r3, r8, r2
   1a8cc:	4291      	cmp	r1, r2
   1a8ce:	b298      	uxth	r0, r3
   1a8d0:	d1f5      	bne.n	1a8be <bt_gatt_attr_get_handle+0x5e>
   1a8d2:	e7f1      	b.n	1a8b8 <bt_gatt_attr_get_handle+0x58>
   1a8d4:	2200      	movs	r2, #0
   1a8d6:	e7f7      	b.n	1a8c8 <bt_gatt_attr_get_handle+0x68>
   1a8d8:	0002a014 	.word	0x0002a014
   1a8dc:	0002a02c 	.word	0x0002a02c
   1a8e0:	0002d20c 	.word	0x0002d20c
   1a8e4:	0002ab8c 	.word	0x0002ab8c

0001a8e8 <bt_gatt_foreach_attr_type>:
{
   1a8e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8ec:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1a8f0:	9100      	str	r1, [sp, #0]
   1a8f2:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1a8f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a8f8:	2d00      	cmp	r5, #0
   1a8fa:	bf08      	it	eq
   1a8fc:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1a8fe:	4b2b      	ldr	r3, [pc, #172]	; (1a9ac <bt_gatt_foreach_attr_type+0xc4>)
   1a900:	881b      	ldrh	r3, [r3, #0]
   1a902:	4283      	cmp	r3, r0
{
   1a904:	4607      	mov	r7, r0
   1a906:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1a908:	d24b      	bcs.n	1a9a2 <bt_gatt_foreach_attr_type+0xba>
}
   1a90a:	b003      	add	sp, #12
   1a90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1a910:	6873      	ldr	r3, [r6, #4]
   1a912:	4423      	add	r3, r4
   1a914:	42bb      	cmp	r3, r7
   1a916:	d241      	bcs.n	1a99c <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   1a918:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a91a:	3608      	adds	r6, #8
   1a91c:	4b24      	ldr	r3, [pc, #144]	; (1a9b0 <bt_gatt_foreach_attr_type+0xc8>)
   1a91e:	429e      	cmp	r6, r3
   1a920:	d90a      	bls.n	1a938 <bt_gatt_foreach_attr_type+0x50>
   1a922:	4824      	ldr	r0, [pc, #144]	; (1a9b4 <bt_gatt_foreach_attr_type+0xcc>)
   1a924:	4659      	mov	r1, fp
   1a926:	f240 7229 	movw	r2, #1833	; 0x729
   1a92a:	f00b f964 	bl	25bf6 <assert_print>
   1a92e:	f240 7129 	movw	r1, #1833	; 0x729
   1a932:	4658      	mov	r0, fp
   1a934:	f00b f958 	bl	25be8 <assert_post_action>
   1a938:	4b1d      	ldr	r3, [pc, #116]	; (1a9b0 <bt_gatt_foreach_attr_type+0xc8>)
   1a93a:	429e      	cmp	r6, r3
   1a93c:	d3e8      	bcc.n	1a910 <bt_gatt_foreach_attr_type+0x28>
   1a93e:	e7e4      	b.n	1a90a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a940:	5889      	ldr	r1, [r1, r2]
   1a942:	9301      	str	r3, [sp, #4]
   1a944:	4640      	mov	r0, r8
   1a946:	f00c f998 	bl	26c7a <bt_uuid_cmp>
   1a94a:	9b01      	ldr	r3, [sp, #4]
   1a94c:	b198      	cbz	r0, 1a976 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a94e:	3401      	adds	r4, #1
   1a950:	f10a 0a01 	add.w	sl, sl, #1
   1a954:	b2a4      	uxth	r4, r4
   1a956:	6873      	ldr	r3, [r6, #4]
   1a958:	4553      	cmp	r3, sl
   1a95a:	d9de      	bls.n	1a91a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1a95c:	9b00      	ldr	r3, [sp, #0]
   1a95e:	429c      	cmp	r4, r3
   1a960:	d8d3      	bhi.n	1a90a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1a962:	42bc      	cmp	r4, r7
   1a964:	d3f3      	bcc.n	1a94e <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a966:	2314      	movs	r3, #20
   1a968:	6831      	ldr	r1, [r6, #0]
   1a96a:	fb03 f20a 	mul.w	r2, r3, sl
   1a96e:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a970:	f1b8 0f00 	cmp.w	r8, #0
   1a974:	d1e4      	bne.n	1a940 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   1a976:	f1b9 0f00 	cmp.w	r9, #0
   1a97a:	d10b      	bne.n	1a994 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   1a97c:	3d01      	subs	r5, #1
   1a97e:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1a980:	4618      	mov	r0, r3
   1a982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a986:	4621      	mov	r1, r4
   1a988:	4798      	blx	r3
	if (!*num_matches) {
   1a98a:	2d00      	cmp	r5, #0
   1a98c:	d0bd      	beq.n	1a90a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a98e:	2800      	cmp	r0, #0
   1a990:	d1dd      	bne.n	1a94e <bt_gatt_foreach_attr_type+0x66>
   1a992:	e7ba      	b.n	1a90a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1a994:	68da      	ldr	r2, [r3, #12]
   1a996:	4591      	cmp	r9, r2
   1a998:	d1d9      	bne.n	1a94e <bt_gatt_foreach_attr_type+0x66>
   1a99a:	e7ef      	b.n	1a97c <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a99c:	f04f 0a00 	mov.w	sl, #0
   1a9a0:	e7d9      	b.n	1a956 <bt_gatt_foreach_attr_type+0x6e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a9a2:	4e05      	ldr	r6, [pc, #20]	; (1a9b8 <bt_gatt_foreach_attr_type+0xd0>)
   1a9a4:	f8df b014 	ldr.w	fp, [pc, #20]	; 1a9bc <bt_gatt_foreach_attr_type+0xd4>
		uint16_t handle = 1;
   1a9a8:	2401      	movs	r4, #1
   1a9aa:	e7b7      	b.n	1a91c <bt_gatt_foreach_attr_type+0x34>
   1a9ac:	200027da 	.word	0x200027da
   1a9b0:	0002a02c 	.word	0x0002a02c
   1a9b4:	0002ab8c 	.word	0x0002ab8c
   1a9b8:	0002a014 	.word	0x0002a014
   1a9bc:	0002d20c 	.word	0x0002d20c

0001a9c0 <db_hash_gen>:
{
   1a9c0:	b530      	push	{r4, r5, lr}
   1a9c2:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   1a9c4:	2300      	movs	r3, #0
{
   1a9c6:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a9c8:	aa1c      	add	r2, sp, #112	; 0x70
   1a9ca:	4669      	mov	r1, sp
   1a9cc:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1a9ce:	e9cd 3300 	strd	r3, r3, [sp]
   1a9d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a9d6:	f00b ff21 	bl	2681c <tc_cmac_setup>
   1a9da:	b928      	cbnz	r0, 1a9e8 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   1a9dc:	4814      	ldr	r0, [pc, #80]	; (1aa30 <db_hash_gen+0x70>)
   1a9de:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
   1a9e0:	f00b f917 	bl	25c12 <z_log_minimal_printk>
}
   1a9e4:	b049      	add	sp, #292	; 0x124
   1a9e6:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1a9e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a9ec:	2001      	movs	r0, #1
   1a9ee:	4a11      	ldr	r2, [pc, #68]	; (1aa34 <db_hash_gen+0x74>)
   1a9f0:	ab04      	add	r3, sp, #16
   1a9f2:	f00d fde5 	bl	285c0 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a9f6:	4810      	ldr	r0, [pc, #64]	; (1aa38 <db_hash_gen+0x78>)
   1a9f8:	a904      	add	r1, sp, #16
   1a9fa:	f00b ffa5 	bl	26948 <tc_cmac_final>
   1a9fe:	b910      	cbnz	r0, 1aa06 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   1aa00:	480e      	ldr	r0, [pc, #56]	; (1aa3c <db_hash_gen+0x7c>)
   1aa02:	2145      	movs	r1, #69	; 0x45
   1aa04:	e7ec      	b.n	1a9e0 <db_hash_gen+0x20>
   1aa06:	4b0c      	ldr	r3, [pc, #48]	; (1aa38 <db_hash_gen+0x78>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1aa08:	2208      	movs	r2, #8
   1aa0a:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1aa0e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1aa10:	780d      	ldrb	r5, [r1, #0]
   1aa12:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1aa16:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1aa18:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1aa1c:	d1f7      	bne.n	1aa0e <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1aa1e:	b10c      	cbz	r4, 1aa24 <db_hash_gen+0x64>
		db_hash_store();
   1aa20:	f7ff f9d6 	bl	19dd0 <db_hash_store>
   1aa24:	2104      	movs	r1, #4
   1aa26:	4806      	ldr	r0, [pc, #24]	; (1aa40 <db_hash_gen+0x80>)
   1aa28:	f00d faa1 	bl	27f6e <atomic_or>
   1aa2c:	e7da      	b.n	1a9e4 <db_hash_gen+0x24>
   1aa2e:	bf00      	nop
   1aa30:	0002d3ca 	.word	0x0002d3ca
   1aa34:	00027e67 	.word	0x00027e67
   1aa38:	20001b00 	.word	0x20001b00
   1aa3c:	0002d3e8 	.word	0x0002d3e8
   1aa40:	20001c00 	.word	0x20001c00

0001aa44 <db_hash_read>:
{
   1aa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1aa48:	491b      	ldr	r1, [pc, #108]	; (1aab8 <db_hash_read+0x74>)
{
   1aa4a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1aa4e:	4680      	mov	r8, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1aa50:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1aa54:	4615      	mov	r5, r2
   1aa56:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1aa58:	f008 fbcc 	bl	231f4 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1aa5c:	4817      	ldr	r0, [pc, #92]	; (1aabc <db_hash_read+0x78>)
   1aa5e:	f00d fa80 	bl	27f62 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1aa62:	0741      	lsls	r1, r0, #29
   1aa64:	d402      	bmi.n	1aa6c <db_hash_read+0x28>
		db_hash_gen(true);
   1aa66:	2001      	movs	r0, #1
   1aa68:	f7ff ffaa 	bl	1a9c0 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1aa6c:	4640      	mov	r0, r8
   1aa6e:	f7ff f9c5 	bl	19dfc <find_cf_cfg>
	if (cfg &&
   1aa72:	b168      	cbz	r0, 1aa90 <db_hash_read+0x4c>
   1aa74:	7a03      	ldrb	r3, [r0, #8]
   1aa76:	07da      	lsls	r2, r3, #31
   1aa78:	d50a      	bpl.n	1aa90 <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1aa7a:	f100 040c 	add.w	r4, r0, #12
   1aa7e:	4620      	mov	r0, r4
   1aa80:	f00d fa6f 	bl	27f62 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1aa84:	07c3      	lsls	r3, r0, #31
   1aa86:	d403      	bmi.n	1aa90 <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1aa88:	2102      	movs	r1, #2
   1aa8a:	4620      	mov	r0, r4
   1aa8c:	f00d fa6f 	bl	27f6e <atomic_or>
	if (offset > value_len) {
   1aa90:	2e10      	cmp	r6, #16
   1aa92:	d80d      	bhi.n	1aab0 <db_hash_read+0x6c>
	len = MIN(buf_len, value_len - offset);
   1aa94:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1aa98:	4909      	ldr	r1, [pc, #36]	; (1aac0 <db_hash_read+0x7c>)
	len = MIN(buf_len, value_len - offset);
   1aa9a:	42bc      	cmp	r4, r7
   1aa9c:	bfa8      	it	ge
   1aa9e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1aaa0:	4622      	mov	r2, r4
   1aaa2:	4431      	add	r1, r6
   1aaa4:	4628      	mov	r0, r5
   1aaa6:	f00c f854 	bl	26b52 <memcpy>
}
   1aaaa:	4620      	mov	r0, r4
   1aaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1aab0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1aab4:	e7f9      	b.n	1aaaa <db_hash_read+0x66>
   1aab6:	bf00      	nop
   1aab8:	20001b50 	.word	0x20001b50
   1aabc:	20001c00 	.word	0x20001c00
   1aac0:	20001b00 	.word	0x20001b00

0001aac4 <db_hash_process>:
{
   1aac4:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1aac6:	4827      	ldr	r0, [pc, #156]	; (1ab64 <db_hash_process+0xa0>)
   1aac8:	f06f 0108 	mvn.w	r1, #8
   1aacc:	f00d fa8e 	bl	27fec <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1aad0:	0700      	lsls	r0, r0, #28
   1aad2:	d542      	bpl.n	1ab5a <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1aad4:	4823      	ldr	r0, [pc, #140]	; (1ab64 <db_hash_process+0xa0>)
   1aad6:	f00d fa44 	bl	27f62 <atomic_get>
   1aada:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1aadc:	0759      	lsls	r1, r3, #29
   1aade:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1aae2:	d401      	bmi.n	1aae8 <db_hash_process+0x24>
			db_hash_gen(false);
   1aae4:	f7ff ff6c 	bl	1a9c0 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1aae8:	491f      	ldr	r1, [pc, #124]	; (1ab68 <db_hash_process+0xa4>)
   1aaea:	2210      	movs	r2, #16
   1aaec:	1888      	adds	r0, r1, r2
   1aaee:	f00c f81f 	bl	26b30 <memcmp>
   1aaf2:	b948      	cbnz	r0, 1ab08 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   1aaf4:	481d      	ldr	r0, [pc, #116]	; (1ab6c <db_hash_process+0xa8>)
   1aaf6:	f008 fb35 	bl	23164 <k_work_cancel_delayable>
}
   1aafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1aafe:	4819      	ldr	r0, [pc, #100]	; (1ab64 <db_hash_process+0xa0>)
   1ab00:	f06f 0101 	mvn.w	r1, #1
   1ab04:	f00d ba72 	b.w	27fec <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ab08:	4c19      	ldr	r4, [pc, #100]	; (1ab70 <db_hash_process+0xac>)
   1ab0a:	2101      	movs	r1, #1
   1ab0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1ab10:	f00d fa2d 	bl	27f6e <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1ab14:	07c2      	lsls	r2, r0, #31
   1ab16:	d410      	bmi.n	1ab3a <db_hash_process+0x76>
		gatt_sc.start = start;
   1ab18:	4b16      	ldr	r3, [pc, #88]	; (1ab74 <db_hash_process+0xb0>)
   1ab1a:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ab1c:	4811      	ldr	r0, [pc, #68]	; (1ab64 <db_hash_process+0xa0>)
   1ab1e:	f00d fa20 	bl	27f62 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1ab22:	0783      	lsls	r3, r0, #30
   1ab24:	d405      	bmi.n	1ab32 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   1ab26:	4811      	ldr	r0, [pc, #68]	; (1ab6c <db_hash_process+0xa8>)
   1ab28:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1ab2c:	2300      	movs	r3, #0
   1ab2e:	f008 fb13 	bl	23158 <k_work_reschedule>
}
   1ab32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1ab36:	f7ff b94b 	b.w	19dd0 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1ab3a:	8b23      	ldrh	r3, [r4, #24]
   1ab3c:	8b62      	ldrh	r2, [r4, #26]
   1ab3e:	2b01      	cmp	r3, #1
   1ab40:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ab44:	d805      	bhi.n	1ab52 <db_hash_process+0x8e>
   1ab46:	429a      	cmp	r2, r3
   1ab48:	d0f3      	beq.n	1ab32 <db_hash_process+0x6e>
		*end = new_end;
   1ab4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ab4e:	8363      	strh	r3, [r4, #26]
   1ab50:	e7e4      	b.n	1ab1c <db_hash_process+0x58>
	if (*end < new_end) {
   1ab52:	429a      	cmp	r2, r3
		*start = new_start;
   1ab54:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   1ab56:	d0e1      	beq.n	1ab1c <db_hash_process+0x58>
   1ab58:	e7f7      	b.n	1ab4a <db_hash_process+0x86>
}
   1ab5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   1ab5e:	2001      	movs	r0, #1
   1ab60:	f7ff bf2e 	b.w	1a9c0 <db_hash_gen>
   1ab64:	20001c00 	.word	0x20001c00
   1ab68:	20001b00 	.word	0x20001b00
   1ab6c:	20001bd0 	.word	0x20001bd0
   1ab70:	20001bb0 	.word	0x20001bb0
   1ab74:	ffff0001 	.word	0xffff0001

0001ab78 <ccc_set_direct>:
{
   1ab78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ab7c:	b0b9      	sub	sp, #228	; 0xe4
   1ab7e:	4688      	mov	r8, r1
   1ab80:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1ab82:	492f      	ldr	r1, [pc, #188]	; (1ac40 <ccc_set_direct+0xc8>)
   1ab84:	9840      	ldr	r0, [sp, #256]	; 0x100
   1ab86:	466a      	mov	r2, sp
{
   1ab88:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1ab8a:	f00b fabf 	bl	2610c <settings_name_steq>
   1ab8e:	b948      	cbnz	r0, 1aba4 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   1ab90:	482c      	ldr	r0, [pc, #176]	; (1ac44 <ccc_set_direct+0xcc>)
   1ab92:	2145      	movs	r1, #69	; 0x45
   1ab94:	f00b f83d 	bl	25c12 <z_log_minimal_printk>
   1ab98:	f06f 0515 	mvn.w	r5, #21
}
   1ab9c:	4628      	mov	r0, r5
   1ab9e:	b039      	add	sp, #228	; 0xe4
   1aba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1aba4:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   1aba6:	a901      	add	r1, sp, #4
   1aba8:	4620      	mov	r0, r4
   1abaa:	f00b fad2 	bl	26152 <settings_name_next>
		if (!name) {
   1abae:	b93c      	cbnz	r4, 1abc0 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   1abb0:	4825      	ldr	r0, [pc, #148]	; (1ac48 <ccc_set_direct+0xd0>)
   1abb2:	2145      	movs	r1, #69	; 0x45
   1abb4:	f00b f82d 	bl	25c12 <z_log_minimal_printk>
			return -EINVAL;
   1abb8:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   1abbc:	4625      	mov	r5, r4
   1abbe:	e7ed      	b.n	1ab9c <ccc_set_direct+0x24>
		} else if (!next) {
   1abc0:	9801      	ldr	r0, [sp, #4]
   1abc2:	b970      	cbnz	r0, 1abe2 <ccc_set_direct+0x6a>
		err = bt_settings_decode_key(name, &addr);
   1abc4:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1abc8:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1abca:	4649      	mov	r1, r9
   1abcc:	4620      	mov	r0, r4
			load.addr_with_id.id = BT_ID_DEFAULT;
   1abce:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   1abd2:	f00c f82e 	bl	26c32 <bt_settings_decode_key>
		if (err) {
   1abd6:	4605      	mov	r5, r0
   1abd8:	b178      	cbz	r0, 1abfa <ccc_set_direct+0x82>
			BT_ERR("Unable to decode address %s", name);
   1abda:	481c      	ldr	r0, [pc, #112]	; (1ac4c <ccc_set_direct+0xd4>)
   1abdc:	4622      	mov	r2, r4
   1abde:	2145      	movs	r1, #69	; 0x45
   1abe0:	e008      	b.n	1abf4 <ccc_set_direct+0x7c>
			unsigned long next_id = strtoul(next, NULL, 10);
   1abe2:	220a      	movs	r2, #10
   1abe4:	2100      	movs	r1, #0
   1abe6:	f00b fef3 	bl	269d0 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1abea:	4602      	mov	r2, r0
   1abec:	2800      	cmp	r0, #0
   1abee:	d0e9      	beq.n	1abc4 <ccc_set_direct+0x4c>
				BT_ERR("Invalid local identity %lu", next_id);
   1abf0:	4817      	ldr	r0, [pc, #92]	; (1ac50 <ccc_set_direct+0xd8>)
   1abf2:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to decode address %s", name);
   1abf4:	f00b f80d 	bl	25c12 <z_log_minimal_printk>
   1abf8:	e7de      	b.n	1abb8 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   1abfa:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   1abfe:	f1b8 0f00 	cmp.w	r8, #0
   1ac02:	d019      	beq.n	1ac38 <ccc_set_direct+0xc0>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1ac04:	f10d 0820 	add.w	r8, sp, #32
   1ac08:	22c0      	movs	r2, #192	; 0xc0
   1ac0a:	4641      	mov	r1, r8
   1ac0c:	4638      	mov	r0, r7
   1ac0e:	47b0      	blx	r6
			if (len < 0) {
   1ac10:	1e04      	subs	r4, r0, #0
   1ac12:	da05      	bge.n	1ac20 <ccc_set_direct+0xa8>
				BT_ERR("Failed to decode value (err %zd)", len);
   1ac14:	480f      	ldr	r0, [pc, #60]	; (1ac54 <ccc_set_direct+0xdc>)
   1ac16:	4622      	mov	r2, r4
   1ac18:	2145      	movs	r1, #69	; 0x45
   1ac1a:	f00a fffa 	bl	25c12 <z_log_minimal_printk>
				return len;
   1ac1e:	e7cd      	b.n	1abbc <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   1ac20:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1ac22:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   1ac26:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1ac28:	4a0b      	ldr	r2, [pc, #44]	; (1ac58 <ccc_set_direct+0xe0>)
   1ac2a:	ab04      	add	r3, sp, #16
   1ac2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ac30:	2001      	movs	r0, #1
   1ac32:	f00d fcc5 	bl	285c0 <bt_gatt_foreach_attr>
	return 0;
   1ac36:	e7b1      	b.n	1ab9c <ccc_set_direct+0x24>
			load.count = 0;
   1ac38:	e9cd 0006 	strd	r0, r0, [sp, #24]
   1ac3c:	e7f4      	b.n	1ac28 <ccc_set_direct+0xb0>
   1ac3e:	bf00      	nop
   1ac40:	0002d406 	.word	0x0002d406
   1ac44:	0002d40d 	.word	0x0002d40d
   1ac48:	0002bd77 	.word	0x0002bd77
   1ac4c:	0002d297 	.word	0x0002d297
   1ac50:	0002d2b8 	.word	0x0002d2b8
   1ac54:	0002d13d 	.word	0x0002d13d
   1ac58:	0001a441 	.word	0x0001a441

0001ac5c <bt_gatt_attr_next>:
{
   1ac5c:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1ac5e:	2300      	movs	r3, #0
   1ac60:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1ac62:	f7ff fdfd 	bl	1a860 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1ac66:	1c41      	adds	r1, r0, #1
   1ac68:	b289      	uxth	r1, r1
   1ac6a:	4608      	mov	r0, r1
   1ac6c:	4a03      	ldr	r2, [pc, #12]	; (1ac7c <bt_gatt_attr_next+0x20>)
   1ac6e:	ab01      	add	r3, sp, #4
   1ac70:	f00d fca6 	bl	285c0 <bt_gatt_foreach_attr>
}
   1ac74:	9801      	ldr	r0, [sp, #4]
   1ac76:	b003      	add	sp, #12
   1ac78:	f85d fb04 	ldr.w	pc, [sp], #4
   1ac7c:	00027e1b 	.word	0x00027e1b

0001ac80 <bt_gatt_is_subscribed>:
{
   1ac80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1ac84:	460c      	mov	r4, r1
   1ac86:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   1ac88:	4606      	mov	r6, r0
   1ac8a:	b950      	cbnz	r0, 1aca2 <bt_gatt_is_subscribed+0x22>
   1ac8c:	4957      	ldr	r1, [pc, #348]	; (1adec <bt_gatt_is_subscribed+0x16c>)
   1ac8e:	4858      	ldr	r0, [pc, #352]	; (1adf0 <bt_gatt_is_subscribed+0x170>)
   1ac90:	f640 424b 	movw	r2, #3147	; 0xc4b
   1ac94:	f00a ffaf 	bl	25bf6 <assert_print>
   1ac98:	4854      	ldr	r0, [pc, #336]	; (1adec <bt_gatt_is_subscribed+0x16c>)
   1ac9a:	f640 414b 	movw	r1, #3147	; 0xc4b
   1ac9e:	f00a ffa3 	bl	25be8 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   1aca2:	b954      	cbnz	r4, 1acba <bt_gatt_is_subscribed+0x3a>
   1aca4:	4951      	ldr	r1, [pc, #324]	; (1adec <bt_gatt_is_subscribed+0x16c>)
   1aca6:	4852      	ldr	r0, [pc, #328]	; (1adf0 <bt_gatt_is_subscribed+0x170>)
   1aca8:	f640 424c 	movw	r2, #3148	; 0xc4c
   1acac:	f00a ffa3 	bl	25bf6 <assert_print>
   1acb0:	484e      	ldr	r0, [pc, #312]	; (1adec <bt_gatt_is_subscribed+0x16c>)
   1acb2:	f640 414c 	movw	r1, #3148	; 0xc4c
   1acb6:	f00a ff97 	bl	25be8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1acba:	7b73      	ldrb	r3, [r6, #13]
   1acbc:	2b07      	cmp	r3, #7
   1acbe:	d003      	beq.n	1acc8 <bt_gatt_is_subscribed+0x48>
		return false;
   1acc0:	2000      	movs	r0, #0
}
   1acc2:	b004      	add	sp, #16
   1acc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1acc8:	2300      	movs	r3, #0
   1acca:	f88d 300c 	strb.w	r3, [sp, #12]
   1acce:	6820      	ldr	r0, [r4, #0]
   1acd0:	f642 0303 	movw	r3, #10243	; 0x2803
   1acd4:	a903      	add	r1, sp, #12
   1acd6:	f8ad 300e 	strh.w	r3, [sp, #14]
   1acda:	f00b ffce 	bl	26c7a <bt_uuid_cmp>
   1acde:	b9b0      	cbnz	r0, 1ad0e <bt_gatt_is_subscribed+0x8e>
		if (!(chrc->properties &
   1ace0:	68e3      	ldr	r3, [r4, #12]
   1ace2:	7999      	ldrb	r1, [r3, #6]
   1ace4:	f011 0030 	ands.w	r0, r1, #48	; 0x30
   1ace8:	d0eb      	beq.n	1acc2 <bt_gatt_is_subscribed+0x42>
		attr = bt_gatt_attr_next(attr);
   1acea:	4620      	mov	r0, r4
   1acec:	f7ff ffb6 	bl	1ac5c <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1acf0:	4604      	mov	r4, r0
   1acf2:	b960      	cbnz	r0, 1ad0e <bt_gatt_is_subscribed+0x8e>
   1acf4:	f640 425d 	movw	r2, #3165	; 0xc5d
   1acf8:	493c      	ldr	r1, [pc, #240]	; (1adec <bt_gatt_is_subscribed+0x16c>)
   1acfa:	483d      	ldr	r0, [pc, #244]	; (1adf0 <bt_gatt_is_subscribed+0x170>)
   1acfc:	f00a ff7b 	bl	25bf6 <assert_print>
   1ad00:	483a      	ldr	r0, [pc, #232]	; (1adec <bt_gatt_is_subscribed+0x16c>)
   1ad02:	f640 415d 	movw	r1, #3165	; 0xc5d
   1ad06:	f00a ff6f 	bl	25be8 <assert_post_action>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1ad0a:	6823      	ldr	r3, [r4, #0]
   1ad0c:	deff      	udf	#255	; 0xff
   1ad0e:	2300      	movs	r3, #0
   1ad10:	6820      	ldr	r0, [r4, #0]
   1ad12:	f88d 300c 	strb.w	r3, [sp, #12]
   1ad16:	a903      	add	r1, sp, #12
   1ad18:	f642 1302 	movw	r3, #10498	; 0x2902
   1ad1c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1ad20:	f00b ffab 	bl	26c7a <bt_uuid_cmp>
   1ad24:	b178      	cbz	r0, 1ad46 <bt_gatt_is_subscribed+0xc6>
		attr = bt_gatt_attr_next(attr);
   1ad26:	4620      	mov	r0, r4
   1ad28:	f7ff ff98 	bl	1ac5c <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1ad2c:	4604      	mov	r4, r0
   1ad2e:	b950      	cbnz	r0, 1ad46 <bt_gatt_is_subscribed+0xc6>
   1ad30:	492e      	ldr	r1, [pc, #184]	; (1adec <bt_gatt_is_subscribed+0x16c>)
   1ad32:	482f      	ldr	r0, [pc, #188]	; (1adf0 <bt_gatt_is_subscribed+0x170>)
   1ad34:	f640 4263 	movw	r2, #3171	; 0xc63
   1ad38:	f00a ff5d 	bl	25bf6 <assert_print>
   1ad3c:	482b      	ldr	r0, [pc, #172]	; (1adec <bt_gatt_is_subscribed+0x16c>)
   1ad3e:	f640 4163 	movw	r1, #3171	; 0xc63
   1ad42:	f00a ff51 	bl	25be8 <assert_post_action>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1ad46:	2500      	movs	r5, #0
   1ad48:	f642 1802 	movw	r8, #10498	; 0x2902
   1ad4c:	6820      	ldr	r0, [r4, #0]
   1ad4e:	f88d 5000 	strb.w	r5, [sp]
   1ad52:	4669      	mov	r1, sp
   1ad54:	f8ad 8002 	strh.w	r8, [sp, #2]
   1ad58:	f00b ff8f 	bl	26c7a <bt_uuid_cmp>
   1ad5c:	b9d8      	cbnz	r0, 1ad96 <bt_gatt_is_subscribed+0x116>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1ad5e:	6820      	ldr	r0, [r4, #0]
   1ad60:	2500      	movs	r5, #0
   1ad62:	f642 1302 	movw	r3, #10498	; 0x2902
   1ad66:	a903      	add	r1, sp, #12
   1ad68:	f88d 500c 	strb.w	r5, [sp, #12]
   1ad6c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1ad70:	f00b ff83 	bl	26c7a <bt_uuid_cmp>
   1ad74:	2800      	cmp	r0, #0
   1ad76:	d1a3      	bne.n	1acc0 <bt_gatt_is_subscribed+0x40>
	ccc = attr->user_data;
   1ad78:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1ad7a:	4622      	mov	r2, r4
   1ad7c:	4630      	mov	r0, r6
   1ad7e:	f812 1b01 	ldrb.w	r1, [r2], #1
   1ad82:	f00c f9f8 	bl	27176 <bt_conn_is_peer_addr_le>
   1ad86:	2800      	cmp	r0, #0
   1ad88:	d09a      	beq.n	1acc0 <bt_gatt_is_subscribed+0x40>
   1ad8a:	8923      	ldrh	r3, [r4, #8]
   1ad8c:	421f      	tst	r7, r3
   1ad8e:	bf14      	ite	ne
   1ad90:	2001      	movne	r0, #1
   1ad92:	2000      	moveq	r0, #0
   1ad94:	e795      	b.n	1acc2 <bt_gatt_is_subscribed+0x42>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1ad96:	6820      	ldr	r0, [r4, #0]
   1ad98:	f88d 5004 	strb.w	r5, [sp, #4]
   1ad9c:	f642 0303 	movw	r3, #10243	; 0x2803
   1ada0:	a901      	add	r1, sp, #4
   1ada2:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ada6:	f00b ff68 	bl	26c7a <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1adaa:	2800      	cmp	r0, #0
   1adac:	d0d7      	beq.n	1ad5e <bt_gatt_is_subscribed+0xde>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1adae:	6820      	ldr	r0, [r4, #0]
   1adb0:	f88d 5008 	strb.w	r5, [sp, #8]
   1adb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1adb8:	a902      	add	r1, sp, #8
   1adba:	f8ad 300a 	strh.w	r3, [sp, #10]
   1adbe:	f00b ff5c 	bl	26c7a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1adc2:	2800      	cmp	r0, #0
   1adc4:	d0cb      	beq.n	1ad5e <bt_gatt_is_subscribed+0xde>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1adc6:	6820      	ldr	r0, [r4, #0]
   1adc8:	f88d 500c 	strb.w	r5, [sp, #12]
   1adcc:	f642 0301 	movw	r3, #10241	; 0x2801
   1add0:	a903      	add	r1, sp, #12
   1add2:	f8ad 300e 	strh.w	r3, [sp, #14]
   1add6:	f00b ff50 	bl	26c7a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1adda:	2800      	cmp	r0, #0
   1addc:	d0bf      	beq.n	1ad5e <bt_gatt_is_subscribed+0xde>
		attr = bt_gatt_attr_next(attr);
   1adde:	4620      	mov	r0, r4
   1ade0:	f7ff ff3c 	bl	1ac5c <bt_gatt_attr_next>
		if (!attr) {
   1ade4:	4604      	mov	r4, r0
   1ade6:	2800      	cmp	r0, #0
   1ade8:	d1b0      	bne.n	1ad4c <bt_gatt_is_subscribed+0xcc>
   1adea:	e769      	b.n	1acc0 <bt_gatt_is_subscribed+0x40>
   1adec:	0002d20c 	.word	0x0002d20c
   1adf0:	0002ab8c 	.word	0x0002ab8c

0001adf4 <gatt_indicate>:
{
   1adf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1adf8:	4615      	mov	r5, r2
   1adfa:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1adfc:	2294      	movs	r2, #148	; 0x94
   1adfe:	6869      	ldr	r1, [r5, #4]
{
   1ae00:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1ae02:	f00d fbe8 	bl	285d6 <bt_gatt_check_perm>
   1ae06:	4680      	mov	r8, r0
   1ae08:	b140      	cbz	r0, 1ae1c <gatt_indicate+0x28>
		BT_WARN("Link is not encrypted");
   1ae0a:	482d      	ldr	r0, [pc, #180]	; (1aec0 <gatt_indicate+0xcc>)
   1ae0c:	2157      	movs	r1, #87	; 0x57
   1ae0e:	f00a ff00 	bl	25c12 <z_log_minimal_printk>
		return -EPERM;
   1ae12:	f04f 35ff 	mov.w	r5, #4294967295
}
   1ae16:	4628      	mov	r0, r5
   1ae18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1ae1c:	6869      	ldr	r1, [r5, #4]
   1ae1e:	2202      	movs	r2, #2
   1ae20:	4630      	mov	r0, r6
   1ae22:	f7ff ff2d 	bl	1ac80 <bt_gatt_is_subscribed>
   1ae26:	b930      	cbnz	r0, 1ae36 <gatt_indicate+0x42>
			BT_WARN("Device is not subscribed to characteristic");
   1ae28:	4826      	ldr	r0, [pc, #152]	; (1aec4 <gatt_indicate+0xd0>)
   1ae2a:	2157      	movs	r1, #87	; 0x57
   1ae2c:	f00a fef1 	bl	25c12 <z_log_minimal_printk>
			return -EINVAL;
   1ae30:	f06f 0515 	mvn.w	r5, #21
   1ae34:	e7ef      	b.n	1ae16 <gatt_indicate+0x22>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1ae36:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1ae3a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1ae3c:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1ae3e:	f7fe fdd9 	bl	199f4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1ae42:	3702      	adds	r7, #2
	if (!req) {
   1ae44:	4604      	mov	r4, r0
   1ae46:	b910      	cbnz	r0, 1ae4e <gatt_indicate+0x5a>
		return -ENOMEM;
   1ae48:	f06f 050b 	mvn.w	r5, #11
   1ae4c:	e7e3      	b.n	1ae16 <gatt_indicate+0x22>
	req->func = func;
   1ae4e:	4b1e      	ldr	r3, [pc, #120]	; (1aec8 <gatt_indicate+0xd4>)
	req->len = len;
   1ae50:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   1ae52:	211d      	movs	r1, #29
   1ae54:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1ae56:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1ae5a:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1ae5c:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1ae5e:	463a      	mov	r2, r7
   1ae60:	4630      	mov	r0, r6
   1ae62:	f7fe faf3 	bl	1944c <bt_att_create_pdu>
	if (!buf) {
   1ae66:	4607      	mov	r7, r0
   1ae68:	b938      	cbnz	r0, 1ae7a <gatt_indicate+0x86>
		BT_WARN("No buffer available to send indication");
   1ae6a:	4818      	ldr	r0, [pc, #96]	; (1aecc <gatt_indicate+0xd8>)
   1ae6c:	2157      	movs	r1, #87	; 0x57
   1ae6e:	f00a fed0 	bl	25c12 <z_log_minimal_printk>
		bt_att_req_free(req);
   1ae72:	4620      	mov	r0, r4
   1ae74:	f7fe fde0 	bl	19a38 <bt_att_req_free>
   1ae78:	e7e6      	b.n	1ae48 <gatt_indicate+0x54>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1ae7a:	2301      	movs	r3, #1
   1ae7c:	4642      	mov	r2, r8
   1ae7e:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1ae80:	f107 0a08 	add.w	sl, r7, #8
   1ae84:	f00c ffc2 	bl	27e0c <bt_att_set_tx_meta_data>
   1ae88:	2102      	movs	r1, #2
   1ae8a:	4650      	mov	r0, sl
   1ae8c:	f003 fb2c 	bl	1e4e8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1ae90:	4680      	mov	r8, r0
   1ae92:	8aa9      	ldrh	r1, [r5, #20]
   1ae94:	f828 9b02 	strh.w	r9, [r8], #2
   1ae98:	4650      	mov	r0, sl
   1ae9a:	f003 fb25 	bl	1e4e8 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1ae9e:	8aaa      	ldrh	r2, [r5, #20]
   1aea0:	6929      	ldr	r1, [r5, #16]
   1aea2:	4640      	mov	r0, r8
   1aea4:	f00b fe55 	bl	26b52 <memcpy>
	req->buf = buf;
   1aea8:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1aeaa:	4621      	mov	r1, r4
   1aeac:	4630      	mov	r0, r6
   1aeae:	f7fe ff1b 	bl	19ce8 <bt_att_req_send>
	if (err) {
   1aeb2:	4605      	mov	r5, r0
   1aeb4:	2800      	cmp	r0, #0
   1aeb6:	d0ae      	beq.n	1ae16 <gatt_indicate+0x22>
		bt_att_req_free(req);
   1aeb8:	4620      	mov	r0, r4
   1aeba:	f7fe fdbd 	bl	19a38 <bt_att_req_free>
   1aebe:	e7aa      	b.n	1ae16 <gatt_indicate+0x22>
   1aec0:	0002d41e 	.word	0x0002d41e
   1aec4:	0002d439 	.word	0x0002d439
   1aec8:	00027e35 	.word	0x00027e35
   1aecc:	0002d469 	.word	0x0002d469

0001aed0 <bt_gatt_indicate>:
{
   1aed0:	b530      	push	{r4, r5, lr}
   1aed2:	4605      	mov	r5, r0
   1aed4:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1aed6:	460c      	mov	r4, r1
   1aed8:	b951      	cbnz	r1, 1aef0 <bt_gatt_indicate+0x20>
   1aeda:	4943      	ldr	r1, [pc, #268]	; (1afe8 <bt_gatt_indicate+0x118>)
   1aedc:	4843      	ldr	r0, [pc, #268]	; (1afec <bt_gatt_indicate+0x11c>)
   1aede:	f640 320b 	movw	r2, #2827	; 0xb0b
   1aee2:	f00a fe88 	bl	25bf6 <assert_print>
   1aee6:	4840      	ldr	r0, [pc, #256]	; (1afe8 <bt_gatt_indicate+0x118>)
   1aee8:	f640 310b 	movw	r1, #2827	; 0xb0b
   1aeec:	f00a fe7c 	bl	25be8 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1aef0:	6863      	ldr	r3, [r4, #4]
   1aef2:	b963      	cbnz	r3, 1af0e <bt_gatt_indicate+0x3e>
   1aef4:	6823      	ldr	r3, [r4, #0]
   1aef6:	b953      	cbnz	r3, 1af0e <bt_gatt_indicate+0x3e>
   1aef8:	493b      	ldr	r1, [pc, #236]	; (1afe8 <bt_gatt_indicate+0x118>)
   1aefa:	483c      	ldr	r0, [pc, #240]	; (1afec <bt_gatt_indicate+0x11c>)
   1aefc:	f640 320c 	movw	r2, #2828	; 0xb0c
   1af00:	f00a fe79 	bl	25bf6 <assert_print>
   1af04:	4838      	ldr	r0, [pc, #224]	; (1afe8 <bt_gatt_indicate+0x118>)
   1af06:	f640 310c 	movw	r1, #2828	; 0xb0c
   1af0a:	f00a fe6d 	bl	25be8 <assert_post_action>
   1af0e:	4838      	ldr	r0, [pc, #224]	; (1aff0 <bt_gatt_indicate+0x120>)
   1af10:	f00d f827 	bl	27f62 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1af14:	0742      	lsls	r2, r0, #29
   1af16:	d561      	bpl.n	1afdc <bt_gatt_indicate+0x10c>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1af18:	b115      	cbz	r5, 1af20 <bt_gatt_indicate+0x50>
   1af1a:	7b6b      	ldrb	r3, [r5, #13]
   1af1c:	2b07      	cmp	r3, #7
   1af1e:	d160      	bne.n	1afe2 <bt_gatt_indicate+0x112>
	data.attr = params->attr;
   1af20:	6860      	ldr	r0, [r4, #4]
   1af22:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1af24:	f7ff fc9c 	bl	1a860 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1af28:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1af2a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1af2e:	b33a      	cbz	r2, 1af80 <bt_gatt_indicate+0xb0>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1af30:	a905      	add	r1, sp, #20
   1af32:	9102      	str	r1, [sp, #8]
   1af34:	492f      	ldr	r1, [pc, #188]	; (1aff4 <bt_gatt_indicate+0x124>)
   1af36:	9101      	str	r1, [sp, #4]
   1af38:	2101      	movs	r1, #1
	found->attr = NULL;
   1af3a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1af3c:	9100      	str	r1, [sp, #0]
   1af3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1af42:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1af44:	f7ff fcd0 	bl	1a8e8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1af48:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1af4a:	b91b      	cbnz	r3, 1af54 <bt_gatt_indicate+0x84>
			return -ENOENT;
   1af4c:	f06f 0001 	mvn.w	r0, #1
}
   1af50:	b00b      	add	sp, #44	; 0x2c
   1af52:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1af54:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1af56:	9b05      	ldr	r3, [sp, #20]
   1af58:	6818      	ldr	r0, [r3, #0]
   1af5a:	2300      	movs	r3, #0
   1af5c:	f88d 3010 	strb.w	r3, [sp, #16]
   1af60:	a904      	add	r1, sp, #16
   1af62:	f642 0303 	movw	r3, #10243	; 0x2803
   1af66:	f8ad 3012 	strh.w	r3, [sp, #18]
   1af6a:	f00b fe86 	bl	26c7a <bt_uuid_cmp>
   1af6e:	b970      	cbnz	r0, 1af8e <bt_gatt_indicate+0xbe>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1af70:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1af72:	68c3      	ldr	r3, [r0, #12]
   1af74:	799b      	ldrb	r3, [r3, #6]
   1af76:	069b      	lsls	r3, r3, #26
   1af78:	d405      	bmi.n	1af86 <bt_gatt_indicate+0xb6>
			return -EINVAL;
   1af7a:	f06f 0015 	mvn.w	r0, #21
   1af7e:	e7e7      	b.n	1af50 <bt_gatt_indicate+0x80>
		if (!data.handle) {
   1af80:	2800      	cmp	r0, #0
   1af82:	d1e8      	bne.n	1af56 <bt_gatt_indicate+0x86>
   1af84:	e7e2      	b.n	1af4c <bt_gatt_indicate+0x7c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1af86:	f00d facd 	bl	28524 <bt_gatt_attr_value_handle>
   1af8a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1af8e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1af92:	b13d      	cbz	r5, 1afa4 <bt_gatt_indicate+0xd4>
		params->_ref = 1;
   1af94:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1af96:	4601      	mov	r1, r0
		params->_ref = 1;
   1af98:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1af9a:	4622      	mov	r2, r4
   1af9c:	4628      	mov	r0, r5
   1af9e:	f7ff ff29 	bl	1adf4 <gatt_indicate>
   1afa2:	e7d5      	b.n	1af50 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1afa4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1afa8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1afaa:	2302      	movs	r3, #2
   1afac:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1afb0:	f642 1302 	movw	r3, #10498	; 0x2902
   1afb4:	f8ad 3012 	strh.w	r3, [sp, #18]
   1afb8:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1afba:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1afbc:	9302      	str	r3, [sp, #8]
   1afbe:	4b0e      	ldr	r3, [pc, #56]	; (1aff8 <bt_gatt_indicate+0x128>)
   1afc0:	9301      	str	r3, [sp, #4]
   1afc2:	2301      	movs	r3, #1
   1afc4:	9300      	str	r3, [sp, #0]
   1afc6:	aa04      	add	r2, sp, #16
   1afc8:	462b      	mov	r3, r5
   1afca:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1afce:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1afd0:	f88d 5010 	strb.w	r5, [sp, #16]
   1afd4:	f7ff fc88 	bl	1a8e8 <bt_gatt_foreach_attr_type>
	return data.err;
   1afd8:	9807      	ldr	r0, [sp, #28]
   1afda:	e7b9      	b.n	1af50 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   1afdc:	f06f 000a 	mvn.w	r0, #10
   1afe0:	e7b6      	b.n	1af50 <bt_gatt_indicate+0x80>
		return -ENOTCONN;
   1afe2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1afe6:	e7b3      	b.n	1af50 <bt_gatt_indicate+0x80>
   1afe8:	0002d20c 	.word	0x0002d20c
   1afec:	0002ab8c 	.word	0x0002ab8c
   1aff0:	2000040c 	.word	0x2000040c
   1aff4:	00027e5b 	.word	0x00027e5b
   1aff8:	0001b221 	.word	0x0001b221

0001affc <sc_process>:
{
   1affc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1affe:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1b002:	4604      	mov	r4, r0
   1b004:	4628      	mov	r0, r5
   1b006:	f00c ffac 	bl	27f62 <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b00a:	0783      	lsls	r3, r0, #30
   1b00c:	d50a      	bpl.n	1b024 <sc_process+0x28>
   1b00e:	491a      	ldr	r1, [pc, #104]	; (1b078 <sc_process+0x7c>)
   1b010:	481a      	ldr	r0, [pc, #104]	; (1b07c <sc_process+0x80>)
   1b012:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
   1b016:	f00a fdee 	bl	25bf6 <assert_print>
   1b01a:	4817      	ldr	r0, [pc, #92]	; (1b078 <sc_process+0x7c>)
   1b01c:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   1b020:	f00a fde2 	bl	25be8 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1b024:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   1b028:	f8ad 3004 	strh.w	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b02c:	f06f 0101 	mvn.w	r1, #1
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1b030:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   1b034:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b038:	4628      	mov	r0, r5
   1b03a:	f00c ffd7 	bl	27fec <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1b03e:	4b10      	ldr	r3, [pc, #64]	; (1b080 <sc_process+0x84>)
   1b040:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1b044:	4b0f      	ldr	r3, [pc, #60]	; (1b084 <sc_process+0x88>)
   1b046:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1b04a:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1b04c:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1b04e:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1b052:	2304      	movs	r3, #4
	sc->start = 0U;
   1b054:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1b058:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1b05c:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1b060:	f1a4 0120 	sub.w	r1, r4, #32
   1b064:	f7ff ff34 	bl	1aed0 <bt_gatt_indicate>
   1b068:	b918      	cbnz	r0, 1b072 <sc_process+0x76>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b06a:	2102      	movs	r1, #2
   1b06c:	4628      	mov	r0, r5
   1b06e:	f00c ff7e 	bl	27f6e <atomic_or>
}
   1b072:	b003      	add	sp, #12
   1b074:	bd30      	pop	{r4, r5, pc}
   1b076:	bf00      	nop
   1b078:	0002d20c 	.word	0x0002d20c
   1b07c:	0002ab8c 	.word	0x0002ab8c
   1b080:	0002a680 	.word	0x0002a680
   1b084:	0001a721 	.word	0x0001a721

0001b088 <update_ccc>:
{
   1b088:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b08c:	4b34      	ldr	r3, [pc, #208]	; (1b160 <update_ccc+0xd8>)
	struct bt_conn *conn = data->conn;
   1b08e:	6814      	ldr	r4, [r2, #0]
{
   1b090:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b092:	6882      	ldr	r2, [r0, #8]
   1b094:	429a      	cmp	r2, r3
{
   1b096:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b098:	d117      	bne.n	1b0ca <update_ccc+0x42>
	ccc = attr->user_data;
   1b09a:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   1b09c:	893b      	ldrh	r3, [r7, #8]
   1b09e:	b1a3      	cbz	r3, 1b0ca <update_ccc+0x42>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b0a0:	463a      	mov	r2, r7
   1b0a2:	4620      	mov	r0, r4
   1b0a4:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b0a8:	f00c f865 	bl	27176 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1b0ac:	b168      	cbz	r0, 1b0ca <update_ccc+0x42>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1b0ae:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1b0b2:	4629      	mov	r1, r5
   1b0b4:	4620      	mov	r0, r4
   1b0b6:	f00d fa8e 	bl	285d6 <bt_gatt_check_perm>
		if (err) {
   1b0ba:	b1d8      	cbz	r0, 1b0f4 <update_ccc+0x6c>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1b0bc:	2803      	cmp	r0, #3
   1b0be:	d108      	bne.n	1b0d2 <update_ccc+0x4a>
				BT_WARN("CCC %p not writable", attr);
   1b0c0:	4828      	ldr	r0, [pc, #160]	; (1b164 <update_ccc+0xdc>)
   1b0c2:	462a      	mov	r2, r5
   1b0c4:	2157      	movs	r1, #87	; 0x57
   1b0c6:	f00a fda4 	bl	25c12 <z_log_minimal_printk>
}
   1b0ca:	2001      	movs	r0, #1
   1b0cc:	b002      	add	sp, #8
   1b0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
   1b0d2:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1b0d4:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   1b0d6:	bf14      	ite	ne
   1b0d8:	f04f 0802 	movne.w	r8, #2
   1b0dc:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   1b0e0:	f00c f847 	bl	27172 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b0e4:	4580      	cmp	r8, r0
   1b0e6:	d905      	bls.n	1b0f4 <update_ccc+0x6c>
				if (data->sec < sec) {
   1b0e8:	7933      	ldrb	r3, [r6, #4]
   1b0ea:	4543      	cmp	r3, r8
   1b0ec:	d2ed      	bcs.n	1b0ca <update_ccc+0x42>
					data->sec = sec;
   1b0ee:	f886 8004 	strb.w	r8, [r6, #4]
   1b0f2:	e7ea      	b.n	1b0ca <update_ccc+0x42>
		gatt_ccc_changed(attr, ccc);
   1b0f4:	4639      	mov	r1, r7
   1b0f6:	4628      	mov	r0, r5
   1b0f8:	f00c fe92 	bl	27e20 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1b0fc:	4b1a      	ldr	r3, [pc, #104]	; (1b168 <update_ccc+0xe0>)
   1b0fe:	429f      	cmp	r7, r3
   1b100:	d1e3      	bne.n	1b0ca <update_ccc+0x42>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b102:	7a20      	ldrb	r0, [r4, #8]
   1b104:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1b108:	f7fe fea6 	bl	19e58 <find_sc_cfg>
	if (!cfg) {
   1b10c:	2800      	cmp	r0, #0
   1b10e:	d0dc      	beq.n	1b0ca <update_ccc+0x42>
	if (!(cfg->data.start || cfg->data.end)) {
   1b110:	8902      	ldrh	r2, [r0, #8]
   1b112:	8943      	ldrh	r3, [r0, #10]
   1b114:	ea52 0103 	orrs.w	r1, r2, r3
   1b118:	d0d7      	beq.n	1b0ca <update_ccc+0x42>
	index = bt_conn_index(conn);
   1b11a:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1b11c:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1b120:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1b124:	f7fc ff2e 	bl	17f84 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b128:	4910      	ldr	r1, [pc, #64]	; (1b16c <update_ccc+0xe4>)
   1b12a:	4a11      	ldr	r2, [pc, #68]	; (1b170 <update_ccc+0xe8>)
   1b12c:	2318      	movs	r3, #24
   1b12e:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b132:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b134:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1b136:	4a0f      	ldr	r2, [pc, #60]	; (1b174 <update_ccc+0xec>)
   1b138:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1b13a:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b13c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1b140:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1b142:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b144:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1b148:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b14a:	4620      	mov	r0, r4
   1b14c:	f7ff fec0 	bl	1aed0 <bt_gatt_indicate>
   1b150:	2800      	cmp	r0, #0
   1b152:	d0ba      	beq.n	1b0ca <update_ccc+0x42>
		BT_ERR("SC restore indication failed");
   1b154:	4808      	ldr	r0, [pc, #32]	; (1b178 <update_ccc+0xf0>)
   1b156:	2145      	movs	r1, #69	; 0x45
   1b158:	f00a fd5b 	bl	25c12 <z_log_minimal_printk>
   1b15c:	e7b5      	b.n	1b0ca <update_ccc+0x42>
   1b15e:	bf00      	nop
   1b160:	0001a159 	.word	0x0001a159
   1b164:	0002d495 	.word	0x0002d495
   1b168:	20000658 	.word	0x20000658
   1b16c:	2000248c 	.word	0x2000248c
   1b170:	0002a680 	.word	0x0002a680
   1b174:	000284af 	.word	0x000284af
   1b178:	0002d4ae 	.word	0x0002d4ae

0001b17c <gatt_notify>:
{
   1b17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b180:	4614      	mov	r4, r2
   1b182:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b184:	2294      	movs	r2, #148	; 0x94
   1b186:	6861      	ldr	r1, [r4, #4]
{
   1b188:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b18a:	f00d fa24 	bl	285d6 <bt_gatt_check_perm>
   1b18e:	b138      	cbz	r0, 1b1a0 <gatt_notify+0x24>
		BT_WARN("Link is not encrypted");
   1b190:	4820      	ldr	r0, [pc, #128]	; (1b214 <gatt_notify+0x98>)
   1b192:	2157      	movs	r1, #87	; 0x57
   1b194:	f00a fd3d 	bl	25c12 <z_log_minimal_printk>
		return -EPERM;
   1b198:	f04f 30ff 	mov.w	r0, #4294967295
}
   1b19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1b1a0:	6861      	ldr	r1, [r4, #4]
   1b1a2:	2201      	movs	r2, #1
   1b1a4:	4630      	mov	r0, r6
   1b1a6:	f7ff fd6b 	bl	1ac80 <bt_gatt_is_subscribed>
   1b1aa:	b930      	cbnz	r0, 1b1ba <gatt_notify+0x3e>
			BT_WARN("Device is not subscribed to characteristic");
   1b1ac:	481a      	ldr	r0, [pc, #104]	; (1b218 <gatt_notify+0x9c>)
   1b1ae:	2157      	movs	r1, #87	; 0x57
   1b1b0:	f00a fd2f 	bl	25c12 <z_log_minimal_printk>
			return -EINVAL;
   1b1b4:	f06f 0015 	mvn.w	r0, #21
   1b1b8:	e7f0      	b.n	1b19c <gatt_notify+0x20>
				sizeof(*nfy) + params->len);
   1b1ba:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1b1bc:	211b      	movs	r1, #27
   1b1be:	3202      	adds	r2, #2
   1b1c0:	4630      	mov	r0, r6
   1b1c2:	f7fe f943 	bl	1944c <bt_att_create_pdu>
	if (!buf) {
   1b1c6:	4605      	mov	r5, r0
   1b1c8:	b930      	cbnz	r0, 1b1d8 <gatt_notify+0x5c>
		BT_WARN("No buffer available to send notification");
   1b1ca:	4814      	ldr	r0, [pc, #80]	; (1b21c <gatt_notify+0xa0>)
   1b1cc:	2157      	movs	r1, #87	; 0x57
   1b1ce:	f00a fd20 	bl	25c12 <z_log_minimal_printk>
		return -ENOMEM;
   1b1d2:	f06f 000b 	mvn.w	r0, #11
   1b1d6:	e7e1      	b.n	1b19c <gatt_notify+0x20>
   1b1d8:	f100 0908 	add.w	r9, r0, #8
   1b1dc:	2102      	movs	r1, #2
   1b1de:	4648      	mov	r0, r9
   1b1e0:	f003 f982 	bl	1e4e8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1b1e4:	4607      	mov	r7, r0
   1b1e6:	89a1      	ldrh	r1, [r4, #12]
   1b1e8:	f827 8b02 	strh.w	r8, [r7], #2
   1b1ec:	4648      	mov	r0, r9
   1b1ee:	f003 f97b 	bl	1e4e8 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1b1f2:	89a2      	ldrh	r2, [r4, #12]
   1b1f4:	68a1      	ldr	r1, [r4, #8]
   1b1f6:	4638      	mov	r0, r7
   1b1f8:	f00b fcab 	bl	26b52 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1b1fc:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1b200:	4628      	mov	r0, r5
   1b202:	2301      	movs	r3, #1
   1b204:	f00c fe02 	bl	27e0c <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1b208:	4629      	mov	r1, r5
   1b20a:	4630      	mov	r0, r6
}
   1b20c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1b210:	f7fe bd08 	b.w	19c24 <bt_att_send>
   1b214:	0002d41e 	.word	0x0002d41e
   1b218:	0002d439 	.word	0x0002d439
   1b21c:	0002d4d0 	.word	0x0002d4d0

0001b220 <notify_cb>:
{
   1b220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b224:	4b40      	ldr	r3, [pc, #256]	; (1b328 <notify_cb+0x108>)
{
   1b226:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b228:	6882      	ldr	r2, [r0, #8]
   1b22a:	429a      	cmp	r2, r3
{
   1b22c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b22e:	d12e      	bne.n	1b28e <notify_cb+0x6e>
	ccc = attr->user_data;
   1b230:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1b234:	4b3d      	ldr	r3, [pc, #244]	; (1b32c <notify_cb+0x10c>)
   1b236:	4598      	cmp	r8, r3
   1b238:	d11d      	bne.n	1b276 <notify_cb+0x56>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b23a:	2600      	movs	r6, #0
   1b23c:	4d3c      	ldr	r5, [pc, #240]	; (1b330 <notify_cb+0x110>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b23e:	46b1      	mov	r9, r6
   1b240:	4669      	mov	r1, sp
   1b242:	4628      	mov	r0, r5
   1b244:	f8cd 9000 	str.w	r9, [sp]
   1b248:	f8cd 9003 	str.w	r9, [sp, #3]
   1b24c:	f00c fe60 	bl	27f10 <bt_addr_le_cmp>
   1b250:	b178      	cbz	r0, 1b272 <notify_cb+0x52>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1b252:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1b256:	2207      	movs	r2, #7
   1b258:	4629      	mov	r1, r5
   1b25a:	f7fd f85d 	bl	18318 <bt_conn_lookup_state_le>
			if (!conn) {
   1b25e:	b9e8      	cbnz	r0, 1b29c <notify_cb+0x7c>
				sc = (struct sc_data *)data->ind_params->data;
   1b260:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1b262:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1b266:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1b268:	4629      	mov	r1, r5
   1b26a:	8853      	ldrh	r3, [r2, #2]
   1b26c:	8812      	ldrh	r2, [r2, #0]
   1b26e:	f7fe fed5 	bl	1a01c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b272:	350c      	adds	r5, #12
   1b274:	b186      	cbz	r6, 1b298 <notify_cb+0x78>
		if (cfg->value != data->type) {
   1b276:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   1b27a:	89a3      	ldrh	r3, [r4, #12]
   1b27c:	429a      	cmp	r2, r3
   1b27e:	d106      	bne.n	1b28e <notify_cb+0x6e>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1b280:	4641      	mov	r1, r8
   1b282:	f811 0b01 	ldrb.w	r0, [r1], #1
   1b286:	f7fd f80d 	bl	182a4 <bt_conn_lookup_addr_le>
		if (!conn) {
   1b28a:	4606      	mov	r6, r0
   1b28c:	b948      	cbnz	r0, 1b2a2 <notify_cb+0x82>
	return BT_GATT_ITER_CONTINUE;
   1b28e:	2701      	movs	r7, #1
}
   1b290:	4638      	mov	r0, r7
   1b292:	b003      	add	sp, #12
   1b294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b298:	2601      	movs	r6, #1
   1b29a:	e7d1      	b.n	1b240 <notify_cb+0x20>
			bt_conn_unref(conn);
   1b29c:	f7fc fd4e 	bl	17d3c <bt_conn_unref>
   1b2a0:	e7e7      	b.n	1b272 <notify_cb+0x52>
		if (conn->state != BT_CONN_CONNECTED) {
   1b2a2:	7b43      	ldrb	r3, [r0, #13]
   1b2a4:	2b07      	cmp	r3, #7
   1b2a6:	d002      	beq.n	1b2ae <notify_cb+0x8e>
			bt_conn_unref(conn);
   1b2a8:	f7fc fd48 	bl	17d3c <bt_conn_unref>
			continue;
   1b2ac:	e7ef      	b.n	1b28e <notify_cb+0x6e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1b2ae:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1b2b2:	b123      	cbz	r3, 1b2be <notify_cb+0x9e>
   1b2b4:	4639      	mov	r1, r7
   1b2b6:	4798      	blx	r3
   1b2b8:	b908      	cbnz	r0, 1b2be <notify_cb+0x9e>
			bt_conn_unref(conn);
   1b2ba:	4630      	mov	r0, r6
   1b2bc:	e7f4      	b.n	1b2a8 <notify_cb+0x88>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b2be:	4639      	mov	r1, r7
   1b2c0:	2294      	movs	r2, #148	; 0x94
   1b2c2:	4630      	mov	r0, r6
   1b2c4:	f00d f987 	bl	285d6 <bt_gatt_check_perm>
   1b2c8:	4607      	mov	r7, r0
   1b2ca:	b120      	cbz	r0, 1b2d6 <notify_cb+0xb6>
			BT_WARN("Link is not encrypted");
   1b2cc:	4819      	ldr	r0, [pc, #100]	; (1b334 <notify_cb+0x114>)
   1b2ce:	2157      	movs	r1, #87	; 0x57
   1b2d0:	f00a fc9f 	bl	25c12 <z_log_minimal_printk>
   1b2d4:	e7f1      	b.n	1b2ba <notify_cb+0x9a>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1b2d6:	89a3      	ldrh	r3, [r4, #12]
   1b2d8:	2b02      	cmp	r3, #2
   1b2da:	d116      	bne.n	1b30a <notify_cb+0xea>
   1b2dc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1b2e0:	079a      	lsls	r2, r3, #30
   1b2e2:	d51f      	bpl.n	1b324 <notify_cb+0x104>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1b2e4:	6922      	ldr	r2, [r4, #16]
   1b2e6:	88a1      	ldrh	r1, [r4, #4]
   1b2e8:	4630      	mov	r0, r6
   1b2ea:	f7ff fd83 	bl	1adf4 <gatt_indicate>
			if (err == 0) {
   1b2ee:	4605      	mov	r5, r0
   1b2f0:	b918      	cbnz	r0, 1b2fa <notify_cb+0xda>
				data->ind_params->_ref++;
   1b2f2:	6922      	ldr	r2, [r4, #16]
   1b2f4:	7d93      	ldrb	r3, [r2, #22]
   1b2f6:	3301      	adds	r3, #1
   1b2f8:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1b2fa:	4630      	mov	r0, r6
   1b2fc:	f7fc fd1e 	bl	17d3c <bt_conn_unref>
		if (err < 0) {
   1b300:	2d00      	cmp	r5, #0
   1b302:	dbc5      	blt.n	1b290 <notify_cb+0x70>
		data->err = 0;
   1b304:	2300      	movs	r3, #0
   1b306:	60a3      	str	r3, [r4, #8]
   1b308:	e7c1      	b.n	1b28e <notify_cb+0x6e>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1b30a:	2b01      	cmp	r3, #1
   1b30c:	d10a      	bne.n	1b324 <notify_cb+0x104>
   1b30e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1b312:	07db      	lsls	r3, r3, #31
   1b314:	d506      	bpl.n	1b324 <notify_cb+0x104>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1b316:	6922      	ldr	r2, [r4, #16]
   1b318:	88a1      	ldrh	r1, [r4, #4]
   1b31a:	4630      	mov	r0, r6
   1b31c:	f7ff ff2e 	bl	1b17c <gatt_notify>
   1b320:	4605      	mov	r5, r0
   1b322:	e7ea      	b.n	1b2fa <notify_cb+0xda>
			err = 0;
   1b324:	463d      	mov	r5, r7
   1b326:	e7e8      	b.n	1b2fa <notify_cb+0xda>
   1b328:	0001a159 	.word	0x0001a159
   1b32c:	20000658 	.word	0x20000658
   1b330:	200027dd 	.word	0x200027dd
   1b334:	0002d41e 	.word	0x0002d41e

0001b338 <bt_gatt_discover>:
{
   1b338:	b570      	push	{r4, r5, r6, lr}
   1b33a:	460c      	mov	r4, r1
   1b33c:	b086      	sub	sp, #24
	__ASSERT(conn, "invalid parameters\n");
   1b33e:	4605      	mov	r5, r0
   1b340:	b950      	cbnz	r0, 1b358 <bt_gatt_discover+0x20>
   1b342:	4970      	ldr	r1, [pc, #448]	; (1b504 <bt_gatt_discover+0x1cc>)
   1b344:	4870      	ldr	r0, [pc, #448]	; (1b508 <bt_gatt_discover+0x1d0>)
   1b346:	f241 02c4 	movw	r2, #4292	; 0x10c4
   1b34a:	f00a fc54 	bl	25bf6 <assert_print>
   1b34e:	486d      	ldr	r0, [pc, #436]	; (1b504 <bt_gatt_discover+0x1cc>)
   1b350:	f241 01c4 	movw	r1, #4292	; 0x10c4
   1b354:	f00a fc48 	bl	25be8 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1b358:	b10c      	cbz	r4, 1b35e <bt_gatt_discover+0x26>
   1b35a:	6863      	ldr	r3, [r4, #4]
   1b35c:	b953      	cbnz	r3, 1b374 <bt_gatt_discover+0x3c>
   1b35e:	4969      	ldr	r1, [pc, #420]	; (1b504 <bt_gatt_discover+0x1cc>)
   1b360:	4869      	ldr	r0, [pc, #420]	; (1b508 <bt_gatt_discover+0x1d0>)
   1b362:	f241 02c5 	movw	r2, #4293	; 0x10c5
   1b366:	f00a fc46 	bl	25bf6 <assert_print>
   1b36a:	4866      	ldr	r0, [pc, #408]	; (1b504 <bt_gatt_discover+0x1cc>)
   1b36c:	f241 01c5 	movw	r1, #4293	; 0x10c5
   1b370:	f00a fc3a 	bl	25be8 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   1b374:	8923      	ldrh	r3, [r4, #8]
   1b376:	b10b      	cbz	r3, 1b37c <bt_gatt_discover+0x44>
   1b378:	89e3      	ldrh	r3, [r4, #14]
   1b37a:	b953      	cbnz	r3, 1b392 <bt_gatt_discover+0x5a>
   1b37c:	4961      	ldr	r1, [pc, #388]	; (1b504 <bt_gatt_discover+0x1cc>)
   1b37e:	4862      	ldr	r0, [pc, #392]	; (1b508 <bt_gatt_discover+0x1d0>)
   1b380:	f241 02c6 	movw	r2, #4294	; 0x10c6
   1b384:	f00a fc37 	bl	25bf6 <assert_print>
   1b388:	485e      	ldr	r0, [pc, #376]	; (1b504 <bt_gatt_discover+0x1cc>)
   1b38a:	f241 01c6 	movw	r1, #4294	; 0x10c6
   1b38e:	f00a fc2b 	bl	25be8 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   1b392:	8922      	ldrh	r2, [r4, #8]
   1b394:	89e3      	ldrh	r3, [r4, #14]
   1b396:	429a      	cmp	r2, r3
   1b398:	d90a      	bls.n	1b3b0 <bt_gatt_discover+0x78>
   1b39a:	495a      	ldr	r1, [pc, #360]	; (1b504 <bt_gatt_discover+0x1cc>)
   1b39c:	485a      	ldr	r0, [pc, #360]	; (1b508 <bt_gatt_discover+0x1d0>)
   1b39e:	f241 02c8 	movw	r2, #4296	; 0x10c8
   1b3a2:	f00a fc28 	bl	25bf6 <assert_print>
   1b3a6:	4857      	ldr	r0, [pc, #348]	; (1b504 <bt_gatt_discover+0x1cc>)
   1b3a8:	f241 01c8 	movw	r1, #4296	; 0x10c8
   1b3ac:	f00a fc1c 	bl	25be8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1b3b0:	7b6b      	ldrb	r3, [r5, #13]
   1b3b2:	2b07      	cmp	r3, #7
   1b3b4:	f040 80a3 	bne.w	1b4fe <bt_gatt_discover+0x1c6>
	switch (params->type) {
   1b3b8:	7c22      	ldrb	r2, [r4, #16]
   1b3ba:	2a06      	cmp	r2, #6
   1b3bc:	f200 809c 	bhi.w	1b4f8 <bt_gatt_discover+0x1c0>
   1b3c0:	e8df f002 	tbb	[pc, r2]
   1b3c4:	59590404 	.word	0x59590404
   1b3c8:	9361      	.short	0x9361
   1b3ca:	25          	.byte	0x25
   1b3cb:	00          	.byte	0x00
		if (params->uuid) {
   1b3cc:	6823      	ldr	r3, [r4, #0]
   1b3ce:	b1b3      	cbz	r3, 1b3fe <bt_gatt_discover+0xc6>
	switch (params->uuid->type) {
   1b3d0:	781a      	ldrb	r2, [r3, #0]
   1b3d2:	b132      	cbz	r2, 1b3e2 <bt_gatt_discover+0xaa>
   1b3d4:	2a02      	cmp	r2, #2
   1b3d6:	d010      	beq.n	1b3fa <bt_gatt_discover+0xc2>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   1b3d8:	484c      	ldr	r0, [pc, #304]	; (1b50c <bt_gatt_discover+0x1d4>)
   1b3da:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid discovery type: %u", params->type);
   1b3dc:	f00a fc19 	bl	25c12 <z_log_minimal_printk>
   1b3e0:	e017      	b.n	1b412 <bt_gatt_discover+0xda>
		len += BT_UUID_SIZE_16;
   1b3e2:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   1b3e4:	9301      	str	r3, [sp, #4]
   1b3e6:	2306      	movs	r3, #6
   1b3e8:	9300      	str	r3, [sp, #0]
   1b3ea:	4949      	ldr	r1, [pc, #292]	; (1b510 <bt_gatt_discover+0x1d8>)
   1b3ec:	4b49      	ldr	r3, [pc, #292]	; (1b514 <bt_gatt_discover+0x1dc>)
   1b3ee:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1b3f0:	4628      	mov	r0, r5
   1b3f2:	f00d f806 	bl	28402 <gatt_req_send.constprop.0>
}
   1b3f6:	b006      	add	sp, #24
   1b3f8:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->uuid->type) {
   1b3fa:	2316      	movs	r3, #22
   1b3fc:	e7f2      	b.n	1b3e4 <bt_gatt_discover+0xac>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   1b3fe:	2310      	movs	r3, #16
   1b400:	2104      	movs	r1, #4
   1b402:	e9cd 3100 	strd	r3, r1, [sp]
   1b406:	4622      	mov	r2, r4
   1b408:	4b43      	ldr	r3, [pc, #268]	; (1b518 <bt_gatt_discover+0x1e0>)
   1b40a:	4944      	ldr	r1, [pc, #272]	; (1b51c <bt_gatt_discover+0x1e4>)
   1b40c:	e7f0      	b.n	1b3f0 <bt_gatt_discover+0xb8>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1b40e:	6820      	ldr	r0, [r4, #0]
   1b410:	b910      	cbnz	r0, 1b418 <bt_gatt_discover+0xe0>
	return -EINVAL;
   1b412:	f06f 0015 	mvn.w	r0, #21
   1b416:	e7ee      	b.n	1b3f6 <bt_gatt_discover+0xbe>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1b418:	7806      	ldrb	r6, [r0, #0]
   1b41a:	2e00      	cmp	r6, #0
   1b41c:	d1f9      	bne.n	1b412 <bt_gatt_discover+0xda>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1b41e:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   1b422:	a902      	add	r1, sp, #8
   1b424:	f88d 6008 	strb.w	r6, [sp, #8]
   1b428:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b42c:	f00b fc25 	bl	26c7a <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1b430:	b308      	cbz	r0, 1b476 <bt_gatt_discover+0x13e>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1b432:	f642 1302 	movw	r3, #10498	; 0x2902
   1b436:	6820      	ldr	r0, [r4, #0]
   1b438:	f88d 600c 	strb.w	r6, [sp, #12]
   1b43c:	a903      	add	r1, sp, #12
   1b43e:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b442:	f00b fc1a 	bl	26c7a <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1b446:	b1b0      	cbz	r0, 1b476 <bt_gatt_discover+0x13e>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1b448:	f642 1303 	movw	r3, #10499	; 0x2903
   1b44c:	6820      	ldr	r0, [r4, #0]
   1b44e:	f88d 6010 	strb.w	r6, [sp, #16]
   1b452:	a904      	add	r1, sp, #16
   1b454:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b458:	f00b fc0f 	bl	26c7a <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1b45c:	b158      	cbz	r0, 1b476 <bt_gatt_discover+0x13e>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   1b45e:	f642 1304 	movw	r3, #10500	; 0x2904
   1b462:	6820      	ldr	r0, [r4, #0]
   1b464:	f88d 6014 	strb.w	r6, [sp, #20]
   1b468:	a905      	add	r1, sp, #20
   1b46a:	f8ad 3016 	strh.w	r3, [sp, #22]
   1b46e:	f00b fc04 	bl	26c7a <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1b472:	2800      	cmp	r0, #0
   1b474:	d1cd      	bne.n	1b412 <bt_gatt_discover+0xda>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   1b476:	2308      	movs	r3, #8
   1b478:	2204      	movs	r2, #4
   1b47a:	e9cd 3200 	strd	r3, r2, [sp]
   1b47e:	4928      	ldr	r1, [pc, #160]	; (1b520 <bt_gatt_discover+0x1e8>)
   1b480:	4b28      	ldr	r3, [pc, #160]	; (1b524 <bt_gatt_discover+0x1ec>)
   1b482:	4622      	mov	r2, r4
   1b484:	e7b4      	b.n	1b3f0 <bt_gatt_discover+0xb8>
		if (params->uuid &&
   1b486:	6820      	ldr	r0, [r4, #0]
   1b488:	b378      	cbz	r0, 1b4ea <bt_gatt_discover+0x1b2>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1b48a:	2600      	movs	r6, #0
   1b48c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b490:	a902      	add	r1, sp, #8
   1b492:	f88d 6008 	strb.w	r6, [sp, #8]
   1b496:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b49a:	f00b fbee 	bl	26c7a <bt_uuid_cmp>
		if (params->uuid &&
   1b49e:	2800      	cmp	r0, #0
   1b4a0:	d0b7      	beq.n	1b412 <bt_gatt_discover+0xda>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1b4a2:	f642 0301 	movw	r3, #10241	; 0x2801
   1b4a6:	6820      	ldr	r0, [r4, #0]
   1b4a8:	f88d 600c 	strb.w	r6, [sp, #12]
   1b4ac:	a903      	add	r1, sp, #12
   1b4ae:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b4b2:	f00b fbe2 	bl	26c7a <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1b4b6:	2800      	cmp	r0, #0
   1b4b8:	d0ab      	beq.n	1b412 <bt_gatt_discover+0xda>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1b4ba:	f642 0302 	movw	r3, #10242	; 0x2802
   1b4be:	6820      	ldr	r0, [r4, #0]
   1b4c0:	f88d 6010 	strb.w	r6, [sp, #16]
   1b4c4:	a904      	add	r1, sp, #16
   1b4c6:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b4ca:	f00b fbd6 	bl	26c7a <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1b4ce:	2800      	cmp	r0, #0
   1b4d0:	d09f      	beq.n	1b412 <bt_gatt_discover+0xda>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   1b4d2:	f642 0303 	movw	r3, #10243	; 0x2803
   1b4d6:	6820      	ldr	r0, [r4, #0]
   1b4d8:	f88d 6014 	strb.w	r6, [sp, #20]
   1b4dc:	a905      	add	r1, sp, #20
   1b4de:	f8ad 3016 	strh.w	r3, [sp, #22]
   1b4e2:	f00b fbca 	bl	26c7a <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1b4e6:	2800      	cmp	r0, #0
   1b4e8:	d093      	beq.n	1b412 <bt_gatt_discover+0xda>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1b4ea:	2304      	movs	r3, #4
   1b4ec:	e9cd 3300 	strd	r3, r3, [sp]
   1b4f0:	490d      	ldr	r1, [pc, #52]	; (1b528 <bt_gatt_discover+0x1f0>)
   1b4f2:	4b0e      	ldr	r3, [pc, #56]	; (1b52c <bt_gatt_discover+0x1f4>)
   1b4f4:	4622      	mov	r2, r4
   1b4f6:	e77b      	b.n	1b3f0 <bt_gatt_discover+0xb8>
		BT_ERR("Invalid discovery type: %u", params->type);
   1b4f8:	480d      	ldr	r0, [pc, #52]	; (1b530 <bt_gatt_discover+0x1f8>)
   1b4fa:	2145      	movs	r1, #69	; 0x45
   1b4fc:	e76e      	b.n	1b3dc <bt_gatt_discover+0xa4>
		return -ENOTCONN;
   1b4fe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b502:	e778      	b.n	1b3f6 <bt_gatt_discover+0xbe>
   1b504:	0002d20c 	.word	0x0002d20c
   1b508:	0002ab8c 	.word	0x0002ab8c
   1b50c:	0002d4fe 	.word	0x0002d4fe
   1b510:	00028677 	.word	0x00028677
   1b514:	000281df 	.word	0x000281df
   1b518:	00028063 	.word	0x00028063
   1b51c:	0001b535 	.word	0x0001b535
   1b520:	0001b63d 	.word	0x0001b63d
   1b524:	00028093 	.word	0x00028093
   1b528:	0001b99d 	.word	0x0001b99d
   1b52c:	0002801f 	.word	0x0002801f
   1b530:	0002d518 	.word	0x0002d518

0001b534 <gatt_read_group_rsp>:
{
   1b534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b538:	b08f      	sub	sp, #60	; 0x3c
   1b53a:	4681      	mov	r9, r0
   1b53c:	9d18      	ldr	r5, [sp, #96]	; 0x60
   1b53e:	4617      	mov	r7, r2
	if (err) {
   1b540:	b131      	cbz	r1, 1b550 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   1b542:	686b      	ldr	r3, [r5, #4]
   1b544:	462a      	mov	r2, r5
   1b546:	2100      	movs	r1, #0
}
   1b548:	b00f      	add	sp, #60	; 0x3c
   1b54a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   1b54e:	4718      	bx	r3
	switch (rsp->len) {
   1b550:	7812      	ldrb	r2, [r2, #0]
   1b552:	2a06      	cmp	r2, #6
   1b554:	d00d      	beq.n	1b572 <gatt_read_group_rsp+0x3e>
   1b556:	2a14      	cmp	r2, #20
   1b558:	d021      	beq.n	1b59e <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   1b55a:	4837      	ldr	r0, [pc, #220]	; (1b638 <gatt_read_group_rsp+0x104>)
   1b55c:	2145      	movs	r1, #69	; 0x45
   1b55e:	f00a fb58 	bl	25c12 <z_log_minimal_printk>
	params->func(conn, NULL, params);
   1b562:	686b      	ldr	r3, [r5, #4]
   1b564:	462a      	mov	r2, r5
   1b566:	2100      	movs	r1, #0
   1b568:	4648      	mov	r0, r9
   1b56a:	4798      	blx	r3
}
   1b56c:	b00f      	add	sp, #60	; 0x3c
   1b56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   1b572:	f88d 1010 	strb.w	r1, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1b576:	3b01      	subs	r3, #1
   1b578:	b29c      	uxth	r4, r3
   1b57a:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
   1b57e:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1b580:	783b      	ldrb	r3, [r7, #0]
   1b582:	42a3      	cmp	r3, r4
   1b584:	d90f      	bls.n	1b5a6 <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   1b586:	2c00      	cmp	r4, #0
   1b588:	d1eb      	bne.n	1b562 <gatt_read_group_rsp+0x2e>
   1b58a:	2e00      	cmp	r6, #0
   1b58c:	d0e9      	beq.n	1b562 <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   1b58e:	462a      	mov	r2, r5
   1b590:	4631      	mov	r1, r6
   1b592:	4648      	mov	r0, r9
}
   1b594:	b00f      	add	sp, #60	; 0x3c
   1b596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   1b59a:	f00d b84f 	b.w	2863c <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   1b59e:	2202      	movs	r2, #2
   1b5a0:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   1b5a4:	e7e7      	b.n	1b576 <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   1b5a6:	2214      	movs	r2, #20
   1b5a8:	2100      	movs	r1, #0
   1b5aa:	a809      	add	r0, sp, #36	; 0x24
   1b5ac:	f00b fadc 	bl	26b68 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   1b5b0:	f8b8 a000 	ldrh.w	sl, [r8]
   1b5b4:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   1b5b8:	2b00      	cmp	r3, #0
   1b5ba:	d0d2      	beq.n	1b562 <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   1b5bc:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   1b5c0:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   1b5c4:	2e00      	cmp	r6, #0
   1b5c6:	d0cc      	beq.n	1b562 <gatt_read_group_rsp+0x2e>
   1b5c8:	42b3      	cmp	r3, r6
   1b5ca:	d8ca      	bhi.n	1b562 <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   1b5cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1b5d0:	b323      	cbz	r3, 1b61c <gatt_read_group_rsp+0xe8>
   1b5d2:	2b02      	cmp	r3, #2
   1b5d4:	d02a      	beq.n	1b62c <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1b5d6:	f04f 0300 	mov.w	r3, #0
   1b5da:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1b5de:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   1b5e0:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1b5e4:	2b00      	cmp	r3, #0
   1b5e6:	f642 0301 	movw	r3, #10241	; 0x2801
   1b5ea:	bf08      	it	eq
   1b5ec:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1b5f0:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   1b5f4:	ab04      	add	r3, sp, #16
   1b5f6:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   1b5f8:	ab01      	add	r3, sp, #4
   1b5fa:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   1b5fc:	ab02      	add	r3, sp, #8
   1b5fe:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
   1b600:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b604:	686b      	ldr	r3, [r5, #4]
   1b606:	462a      	mov	r2, r5
   1b608:	a909      	add	r1, sp, #36	; 0x24
   1b60a:	4648      	mov	r0, r9
   1b60c:	4798      	blx	r3
   1b60e:	2800      	cmp	r0, #0
   1b610:	d0ac      	beq.n	1b56c <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1b612:	783a      	ldrb	r2, [r7, #0]
   1b614:	1aa4      	subs	r4, r4, r2
   1b616:	b2a4      	uxth	r4, r4
   1b618:	4490      	add	r8, r2
   1b61a:	e7b1      	b.n	1b580 <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   1b61c:	2202      	movs	r2, #2
   1b61e:	f108 0104 	add.w	r1, r8, #4
   1b622:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1b626:	f00b fa94 	bl	26b52 <memcpy>
			break;
   1b62a:	e7d4      	b.n	1b5d6 <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1b62c:	2210      	movs	r2, #16
   1b62e:	f108 0104 	add.w	r1, r8, #4
   1b632:	f10d 0011 	add.w	r0, sp, #17
   1b636:	e7f6      	b.n	1b626 <gatt_read_group_rsp+0xf2>
   1b638:	0002d538 	.word	0x0002d538

0001b63c <gatt_read_type_rsp>:
{
   1b63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b640:	b093      	sub	sp, #76	; 0x4c
   1b642:	4680      	mov	r8, r0
   1b644:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   1b646:	4617      	mov	r7, r2
	if (err) {
   1b648:	b131      	cbz	r1, 1b658 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   1b64a:	686b      	ldr	r3, [r5, #4]
   1b64c:	462a      	mov	r2, r5
   1b64e:	2100      	movs	r1, #0
}
   1b650:	b013      	add	sp, #76	; 0x4c
   1b652:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   1b656:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1b658:	7c28      	ldrb	r0, [r5, #16]
   1b65a:	2802      	cmp	r0, #2
   1b65c:	d177      	bne.n	1b74e <gatt_read_type_rsp+0x112>
	switch (rsp->len) {
   1b65e:	7812      	ldrb	r2, [r2, #0]
   1b660:	2a06      	cmp	r2, #6
   1b662:	d019      	beq.n	1b698 <gatt_read_type_rsp+0x5c>
   1b664:	2a08      	cmp	r2, #8
   1b666:	d179      	bne.n	1b75c <gatt_read_type_rsp+0x120>
		u.uuid.type = BT_UUID_TYPE_16;
   1b668:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1b66c:	1e5c      	subs	r4, r3, #1
   1b66e:	b2a4      	uxth	r4, r4
   1b670:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   1b674:	2600      	movs	r6, #0
			value.uuid = &u.uuid;
   1b676:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
   1b67a:	783b      	ldrb	r3, [r7, #0]
   1b67c:	42a3      	cmp	r3, r4
   1b67e:	d90e      	bls.n	1b69e <gatt_read_type_rsp+0x62>
	if (length == 0U && handle) {
   1b680:	2c00      	cmp	r4, #0
   1b682:	d16f      	bne.n	1b764 <gatt_read_type_rsp+0x128>
   1b684:	2e00      	cmp	r6, #0
   1b686:	d06d      	beq.n	1b764 <gatt_read_type_rsp+0x128>
	gatt_discover_next(conn, handle, params);
   1b688:	462a      	mov	r2, r5
   1b68a:	4631      	mov	r1, r6
   1b68c:	4640      	mov	r0, r8
}
   1b68e:	b013      	add	sp, #76	; 0x4c
   1b690:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   1b694:	f00c bfd2 	b.w	2863c <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   1b698:	f88d 0020 	strb.w	r0, [sp, #32]
		break;
   1b69c:	e7e6      	b.n	1b66c <gatt_read_type_rsp+0x30>
		handle = sys_le16_to_cpu(data->handle);
   1b69e:	f8b9 b000 	ldrh.w	fp, [r9]
   1b6a2:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   1b6a6:	2e00      	cmp	r6, #0
   1b6a8:	d05c      	beq.n	1b764 <gatt_read_type_rsp+0x128>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   1b6aa:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   1b6ae:	f8ad 301c 	strh.w	r3, [sp, #28]
   1b6b2:	b299      	uxth	r1, r3
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   1b6b4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1b6b8:	f8ad 301e 	strh.w	r3, [sp, #30]
   1b6bc:	b29a      	uxth	r2, r3
		switch (u.uuid.type) {
   1b6be:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1b6c2:	b163      	cbz	r3, 1b6de <gatt_read_type_rsp+0xa2>
   1b6c4:	2b02      	cmp	r3, #2
   1b6c6:	d015      	beq.n	1b6f4 <gatt_read_type_rsp+0xb8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1b6c8:	6829      	ldr	r1, [r5, #0]
   1b6ca:	b329      	cbz	r1, 1b718 <gatt_read_type_rsp+0xdc>
   1b6cc:	4650      	mov	r0, sl
   1b6ce:	f00b fad4 	bl	26c7a <bt_uuid_cmp>
   1b6d2:	b308      	cbz	r0, 1b718 <gatt_read_type_rsp+0xdc>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1b6d4:	783a      	ldrb	r2, [r7, #0]
   1b6d6:	1aa4      	subs	r4, r4, r2
   1b6d8:	b2a4      	uxth	r4, r4
   1b6da:	4491      	add	r9, r2
   1b6dc:	e7cd      	b.n	1b67a <gatt_read_type_rsp+0x3e>
			value.uuid = &u.uuid;
   1b6de:	f8cd a018 	str.w	sl, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   1b6e2:	f899 3006 	ldrb.w	r3, [r9, #6]
   1b6e6:	f899 2007 	ldrb.w	r2, [r9, #7]
   1b6ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b6ee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   1b6f2:	e7e9      	b.n	1b6c8 <gatt_read_type_rsp+0x8c>
			params->_included.attr_handle = handle;
   1b6f4:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
   1b6f6:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
   1b6f8:	81aa      	strh	r2, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1b6fa:	9301      	str	r3, [sp, #4]
   1b6fc:	230a      	movs	r3, #10
   1b6fe:	9300      	str	r3, [sp, #0]
   1b700:	497d      	ldr	r1, [pc, #500]	; (1b8f8 <gatt_read_type_rsp+0x2bc>)
   1b702:	4b7e      	ldr	r3, [pc, #504]	; (1b8fc <gatt_read_type_rsp+0x2c0>)
   1b704:	462a      	mov	r2, r5
   1b706:	4640      	mov	r0, r8
   1b708:	f00c fe7b 	bl	28402 <gatt_req_send.constprop.0>
			return read_included_uuid(conn, params);
   1b70c:	b286      	uxth	r6, r0
	if (!handle) {
   1b70e:	2e00      	cmp	r6, #0
   1b710:	d1ba      	bne.n	1b688 <gatt_read_type_rsp+0x4c>
}
   1b712:	b013      	add	sp, #76	; 0x4c
   1b714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			.uuid = BT_UUID_GATT_INCLUDE,
   1b718:	f04f 0300 	mov.w	r3, #0
   1b71c:	f88d 3014 	strb.w	r3, [sp, #20]
		attr = (struct bt_gatt_attr) {
   1b720:	2210      	movs	r2, #16
			.uuid = BT_UUID_GATT_INCLUDE,
   1b722:	f642 0302 	movw	r3, #10242	; 0x2802
		attr = (struct bt_gatt_attr) {
   1b726:	2100      	movs	r1, #0
   1b728:	a80e      	add	r0, sp, #56	; 0x38
			.uuid = BT_UUID_GATT_INCLUDE,
   1b72a:	f8ad 3016 	strh.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr) {
   1b72e:	f00b fa1b 	bl	26b68 <memset>
   1b732:	ab05      	add	r3, sp, #20
   1b734:	930d      	str	r3, [sp, #52]	; 0x34
   1b736:	ab06      	add	r3, sp, #24
   1b738:	9310      	str	r3, [sp, #64]	; 0x40
   1b73a:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b73e:	686b      	ldr	r3, [r5, #4]
   1b740:	462a      	mov	r2, r5
   1b742:	a90d      	add	r1, sp, #52	; 0x34
   1b744:	4640      	mov	r0, r8
   1b746:	4798      	blx	r3
   1b748:	2800      	cmp	r0, #0
   1b74a:	d1c3      	bne.n	1b6d4 <gatt_read_type_rsp+0x98>
   1b74c:	e7e1      	b.n	1b712 <gatt_read_type_rsp+0xd6>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   1b74e:	2803      	cmp	r0, #3
   1b750:	d169      	bne.n	1b826 <gatt_read_type_rsp+0x1ea>
	switch (rsp->len) {
   1b752:	7812      	ldrb	r2, [r2, #0]
   1b754:	2a07      	cmp	r2, #7
   1b756:	d00b      	beq.n	1b770 <gatt_read_type_rsp+0x134>
   1b758:	2a15      	cmp	r2, #21
   1b75a:	d02c      	beq.n	1b7b6 <gatt_read_type_rsp+0x17a>
		BT_ERR("Invalid data len %u", rsp->len);
   1b75c:	4868      	ldr	r0, [pc, #416]	; (1b900 <gatt_read_type_rsp+0x2c4>)
   1b75e:	2145      	movs	r1, #69	; 0x45
   1b760:	f00a fa57 	bl	25c12 <z_log_minimal_printk>
	params->func(conn, NULL, params);
   1b764:	686b      	ldr	r3, [r5, #4]
   1b766:	462a      	mov	r2, r5
   1b768:	2100      	movs	r1, #0
   1b76a:	4640      	mov	r0, r8
   1b76c:	4798      	blx	r3
	if (!handle) {
   1b76e:	e7d0      	b.n	1b712 <gatt_read_type_rsp+0xd6>
		u.uuid.type = BT_UUID_TYPE_16;
   1b770:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1b774:	1e5c      	subs	r4, r3, #1
   1b776:	b2a4      	uxth	r4, r4
   1b778:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   1b77c:	2600      	movs	r6, #0
   1b77e:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
   1b782:	783b      	ldrb	r3, [r7, #0]
   1b784:	42a3      	cmp	r3, r4
   1b786:	f63f af7b 	bhi.w	1b680 <gatt_read_type_rsp+0x44>
		handle = sys_le16_to_cpu(data->handle);
   1b78a:	f8b9 b000 	ldrh.w	fp, [r9]
   1b78e:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   1b792:	2e00      	cmp	r6, #0
   1b794:	d0e6      	beq.n	1b764 <gatt_read_type_rsp+0x128>
		switch (u.uuid.type) {
   1b796:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1b79a:	b183      	cbz	r3, 1b7be <gatt_read_type_rsp+0x182>
   1b79c:	2b02      	cmp	r3, #2
   1b79e:	d017      	beq.n	1b7d0 <gatt_read_type_rsp+0x194>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1b7a0:	6829      	ldr	r1, [r5, #0]
   1b7a2:	b1e9      	cbz	r1, 1b7e0 <gatt_read_type_rsp+0x1a4>
   1b7a4:	4650      	mov	r0, sl
   1b7a6:	f00b fa68 	bl	26c7a <bt_uuid_cmp>
   1b7aa:	b1c8      	cbz	r0, 1b7e0 <gatt_read_type_rsp+0x1a4>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1b7ac:	783a      	ldrb	r2, [r7, #0]
   1b7ae:	1aa4      	subs	r4, r4, r2
   1b7b0:	b2a4      	uxth	r4, r4
   1b7b2:	4491      	add	r9, r2
   1b7b4:	e7e5      	b.n	1b782 <gatt_read_type_rsp+0x146>
		u.uuid.type = BT_UUID_TYPE_128;
   1b7b6:	2202      	movs	r2, #2
   1b7b8:	f88d 2020 	strb.w	r2, [sp, #32]
		break;
   1b7bc:	e7da      	b.n	1b774 <gatt_read_type_rsp+0x138>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   1b7be:	f899 3005 	ldrb.w	r3, [r9, #5]
   1b7c2:	f899 2006 	ldrb.w	r2, [r9, #6]
   1b7c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b7ca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   1b7ce:	e7e7      	b.n	1b7a0 <gatt_read_type_rsp+0x164>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   1b7d0:	2210      	movs	r2, #16
   1b7d2:	f109 0105 	add.w	r1, r9, #5
   1b7d6:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   1b7da:	f00b f9ba 	bl	26b52 <memcpy>
			break;
   1b7de:	e7df      	b.n	1b7a0 <gatt_read_type_rsp+0x164>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1b7e0:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   1b7e4:	f899 3002 	ldrb.w	r3, [r9, #2]
   1b7e8:	f8ad 201c 	strh.w	r2, [sp, #28]
			.uuid = BT_UUID_GATT_CHRC,
   1b7ec:	2100      	movs	r1, #0
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1b7ee:	f88d 301e 	strb.w	r3, [sp, #30]
		attr = (struct bt_gatt_attr) {
   1b7f2:	2210      	movs	r2, #16
			.uuid = BT_UUID_GATT_CHRC,
   1b7f4:	f642 0303 	movw	r3, #10243	; 0x2803
		attr = (struct bt_gatt_attr) {
   1b7f8:	a80e      	add	r0, sp, #56	; 0x38
			.uuid = BT_UUID_GATT_CHRC,
   1b7fa:	f88d 1014 	strb.w	r1, [sp, #20]
   1b7fe:	f8ad 3016 	strh.w	r3, [sp, #22]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1b802:	f8cd a018 	str.w	sl, [sp, #24]
		attr = (struct bt_gatt_attr) {
   1b806:	f00b f9af 	bl	26b68 <memset>
   1b80a:	ab05      	add	r3, sp, #20
   1b80c:	930d      	str	r3, [sp, #52]	; 0x34
   1b80e:	ab06      	add	r3, sp, #24
   1b810:	9310      	str	r3, [sp, #64]	; 0x40
   1b812:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b816:	686b      	ldr	r3, [r5, #4]
   1b818:	462a      	mov	r2, r5
   1b81a:	a90d      	add	r1, sp, #52	; 0x34
   1b81c:	4640      	mov	r0, r8
   1b81e:	4798      	blx	r3
   1b820:	2800      	cmp	r0, #0
   1b822:	d1c3      	bne.n	1b7ac <gatt_read_type_rsp+0x170>
   1b824:	e775      	b.n	1b712 <gatt_read_type_rsp+0xd6>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   1b826:	682a      	ldr	r2, [r5, #0]
   1b828:	7816      	ldrb	r6, [r2, #0]
   1b82a:	b976      	cbnz	r6, 1b84a <gatt_read_type_rsp+0x20e>
	uuid_val = BT_UUID_16(params->uuid)->val;
   1b82c:	f8b2 a002 	ldrh.w	sl, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1b830:	1e5c      	subs	r4, r3, #1
   1b832:	b2a4      	uxth	r4, r4
   1b834:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
   1b838:	f5aa 5a24 	sub.w	sl, sl, #10496	; 0x2900
	for (length--, pdu = rsp->data; length >= rsp->len;
   1b83c:	783b      	ldrb	r3, [r7, #0]
   1b83e:	42a3      	cmp	r3, r4
   1b840:	d908      	bls.n	1b854 <gatt_read_type_rsp+0x218>
	if (length == 0U && handle) {
   1b842:	b914      	cbnz	r4, 1b84a <gatt_read_type_rsp+0x20e>
   1b844:	2e00      	cmp	r6, #0
   1b846:	f47f af1f 	bne.w	1b688 <gatt_read_type_rsp+0x4c>
	params->func(conn, NULL, params);
   1b84a:	686b      	ldr	r3, [r5, #4]
   1b84c:	462a      	mov	r2, r5
   1b84e:	2100      	movs	r1, #0
   1b850:	4640      	mov	r0, r8
   1b852:	e6fd      	b.n	1b650 <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
   1b854:	f8b9 b000 	ldrh.w	fp, [r9]
   1b858:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   1b85c:	2e00      	cmp	r6, #0
   1b85e:	d0f4      	beq.n	1b84a <gatt_read_type_rsp+0x20e>
		switch (uuid_val) {
   1b860:	f1ba 0f04 	cmp.w	sl, #4
   1b864:	d8f1      	bhi.n	1b84a <gatt_read_type_rsp+0x20e>
   1b866:	a301      	add	r3, pc, #4	; (adr r3, 1b86c <gatt_read_type_rsp+0x230>)
   1b868:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
   1b86c:	0001b881 	.word	0x0001b881
   1b870:	0001b84b 	.word	0x0001b84b
   1b874:	0001b881 	.word	0x0001b881
   1b878:	0001b881 	.word	0x0001b881
   1b87c:	0001b8bd 	.word	0x0001b8bd
			value.scc.flags = sys_get_le16(data->value);
   1b880:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   1b884:	f8ad 3020 	strh.w	r3, [sp, #32]
			.uuid = params->uuid,
   1b888:	682b      	ldr	r3, [r5, #0]
   1b88a:	9303      	str	r3, [sp, #12]
		attr = (struct bt_gatt_attr) {
   1b88c:	2210      	movs	r2, #16
   1b88e:	2100      	movs	r1, #0
   1b890:	a80e      	add	r0, sp, #56	; 0x38
   1b892:	f00b f969 	bl	26b68 <memset>
   1b896:	9b03      	ldr	r3, [sp, #12]
   1b898:	930d      	str	r3, [sp, #52]	; 0x34
   1b89a:	ab08      	add	r3, sp, #32
   1b89c:	9310      	str	r3, [sp, #64]	; 0x40
   1b89e:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b8a2:	686b      	ldr	r3, [r5, #4]
   1b8a4:	462a      	mov	r2, r5
   1b8a6:	a90d      	add	r1, sp, #52	; 0x34
   1b8a8:	4640      	mov	r0, r8
   1b8aa:	4798      	blx	r3
   1b8ac:	2800      	cmp	r0, #0
   1b8ae:	f43f af30 	beq.w	1b712 <gatt_read_type_rsp+0xd6>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1b8b2:	783a      	ldrb	r2, [r7, #0]
   1b8b4:	1aa4      	subs	r4, r4, r2
   1b8b6:	b2a4      	uxth	r4, r4
   1b8b8:	4491      	add	r9, r2
   1b8ba:	e7bf      	b.n	1b83c <gatt_read_type_rsp+0x200>
			value.cpf.format = cpf->format;
   1b8bc:	f899 3002 	ldrb.w	r3, [r9, #2]
   1b8c0:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   1b8c4:	f899 3003 	ldrb.w	r3, [r9, #3]
   1b8c8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   1b8cc:	f899 2005 	ldrb.w	r2, [r9, #5]
   1b8d0:	f899 3004 	ldrb.w	r3, [r9, #4]
   1b8d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b8d8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   1b8dc:	f899 3006 	ldrb.w	r3, [r9, #6]
   1b8e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   1b8e4:	f899 3007 	ldrb.w	r3, [r9, #7]
   1b8e8:	f899 2008 	ldrb.w	r2, [r9, #8]
   1b8ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b8f0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   1b8f4:	e7c8      	b.n	1b888 <gatt_read_type_rsp+0x24c>
   1b8f6:	bf00      	nop
   1b8f8:	0001b905 	.word	0x0001b905
   1b8fc:	0002800b 	.word	0x0002800b
   1b900:	0002d538 	.word	0x0002d538

0001b904 <read_included_uuid_cb>:
{
   1b904:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b906:	b08f      	sub	sp, #60	; 0x3c
	if (length != 16U) {
   1b908:	2b10      	cmp	r3, #16
{
   1b90a:	4611      	mov	r1, r2
   1b90c:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1b90e:	4605      	mov	r5, r0
   1b910:	461a      	mov	r2, r3
	if (length != 16U) {
   1b912:	d00b      	beq.n	1b92c <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   1b914:	4820      	ldr	r0, [pc, #128]	; (1b998 <read_included_uuid_cb+0x94>)
   1b916:	2145      	movs	r1, #69	; 0x45
   1b918:	f00a f97b 	bl	25c12 <z_log_minimal_printk>
		params->func(conn, NULL, params);
   1b91c:	6863      	ldr	r3, [r4, #4]
   1b91e:	4622      	mov	r2, r4
   1b920:	2100      	movs	r1, #0
   1b922:	4628      	mov	r0, r5
}
   1b924:	b00f      	add	sp, #60	; 0x3c
   1b926:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		params->func(conn, NULL, params);
   1b92a:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   1b92c:	8963      	ldrh	r3, [r4, #10]
   1b92e:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   1b932:	89a3      	ldrh	r3, [r4, #12]
   1b934:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
   1b938:	ae04      	add	r6, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
   1b93a:	2302      	movs	r3, #2
	memcpy(u.u128.val, pdu, length);
   1b93c:	f10d 0011 	add.w	r0, sp, #17
	handle = params->_included.attr_handle;
   1b940:	8927      	ldrh	r7, [r4, #8]
	value.uuid = &u.uuid;
   1b942:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   1b944:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   1b948:	f00b f903 	bl	26b52 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1b94c:	6821      	ldr	r1, [r4, #0]
   1b94e:	b9c1      	cbnz	r1, 1b982 <read_included_uuid_cb+0x7e>
		.uuid = BT_UUID_GATT_INCLUDE,
   1b950:	2100      	movs	r1, #0
   1b952:	f642 0302 	movw	r3, #10242	; 0x2802
	attr = (struct bt_gatt_attr) {
   1b956:	2210      	movs	r2, #16
   1b958:	a80a      	add	r0, sp, #40	; 0x28
		.uuid = BT_UUID_GATT_INCLUDE,
   1b95a:	f88d 1004 	strb.w	r1, [sp, #4]
   1b95e:	f8ad 3006 	strh.w	r3, [sp, #6]
	attr = (struct bt_gatt_attr) {
   1b962:	f00b f901 	bl	26b68 <memset>
   1b966:	ab01      	add	r3, sp, #4
   1b968:	9309      	str	r3, [sp, #36]	; 0x24
   1b96a:	ab02      	add	r3, sp, #8
   1b96c:	930c      	str	r3, [sp, #48]	; 0x30
   1b96e:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b972:	6863      	ldr	r3, [r4, #4]
   1b974:	4622      	mov	r2, r4
   1b976:	a909      	add	r1, sp, #36	; 0x24
   1b978:	4628      	mov	r0, r5
   1b97a:	4798      	blx	r3
   1b97c:	b930      	cbnz	r0, 1b98c <read_included_uuid_cb+0x88>
}
   1b97e:	b00f      	add	sp, #60	; 0x3c
   1b980:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1b982:	4630      	mov	r0, r6
   1b984:	f00b f979 	bl	26c7a <bt_uuid_cmp>
   1b988:	2800      	cmp	r0, #0
   1b98a:	d0e1      	beq.n	1b950 <read_included_uuid_cb+0x4c>
	gatt_discover_next(conn, params->start_handle, params);
   1b98c:	8921      	ldrh	r1, [r4, #8]
   1b98e:	4622      	mov	r2, r4
   1b990:	4628      	mov	r0, r5
   1b992:	f00c fe53 	bl	2863c <gatt_discover_next>
	return;
   1b996:	e7f2      	b.n	1b97e <read_included_uuid_cb+0x7a>
   1b998:	0002d538 	.word	0x0002d538

0001b99c <gatt_find_info_rsp>:
{
   1b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9a0:	b08f      	sub	sp, #60	; 0x3c
   1b9a2:	4607      	mov	r7, r0
   1b9a4:	9d18      	ldr	r5, [sp, #96]	; 0x60
   1b9a6:	4614      	mov	r4, r2
	if (err) {
   1b9a8:	b941      	cbnz	r1, 1b9bc <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   1b9aa:	7812      	ldrb	r2, [r2, #0]
   1b9ac:	2a01      	cmp	r2, #1
   1b9ae:	d00b      	beq.n	1b9c8 <gatt_find_info_rsp+0x2c>
   1b9b0:	2a02      	cmp	r2, #2
   1b9b2:	d022      	beq.n	1b9fa <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   1b9b4:	484b      	ldr	r0, [pc, #300]	; (1bae4 <gatt_find_info_rsp+0x148>)
   1b9b6:	2145      	movs	r1, #69	; 0x45
   1b9b8:	f00a f92b 	bl	25c12 <z_log_minimal_printk>
	params->func(conn, NULL, params);
   1b9bc:	686b      	ldr	r3, [r5, #4]
   1b9be:	462a      	mov	r2, r5
   1b9c0:	2100      	movs	r1, #0
   1b9c2:	4638      	mov	r0, r7
   1b9c4:	4798      	blx	r3
   1b9c6:	e08a      	b.n	1bade <gatt_find_info_rsp+0x142>
		u.uuid.type = BT_UUID_TYPE_16;
   1b9c8:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i16);
   1b9cc:	f04f 0904 	mov.w	r9, #4
	length--;
   1b9d0:	3b01      	subs	r3, #1
   1b9d2:	b29b      	uxth	r3, r3
	if (length < len) {
   1b9d4:	454b      	cmp	r3, r9
   1b9d6:	d3f1      	bcc.n	1b9bc <gatt_find_info_rsp+0x20>
	for (i = length / len, pdu = rsp->info; i != 0;
   1b9d8:	fbb3 f3f9 	udiv	r3, r3, r9
	bool skip = false;
   1b9dc:	f04f 0800 	mov.w	r8, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   1b9e0:	9300      	str	r3, [sp, #0]
   1b9e2:	3401      	adds	r4, #1
	uint16_t handle = 0U;
   1b9e4:	46c3      	mov	fp, r8
			skip = false;
   1b9e6:	46c2      	mov	sl, r8
   1b9e8:	ae04      	add	r6, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   1b9ea:	9b00      	ldr	r3, [sp, #0]
   1b9ec:	b953      	cbnz	r3, 1ba04 <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   1b9ee:	462a      	mov	r2, r5
   1b9f0:	4659      	mov	r1, fp
   1b9f2:	4638      	mov	r0, r7
   1b9f4:	f00c fe22 	bl	2863c <gatt_discover_next>
	return;
   1b9f8:	e071      	b.n	1bade <gatt_find_info_rsp+0x142>
		u.uuid.type = BT_UUID_TYPE_128;
   1b9fa:	f88d 2010 	strb.w	r2, [sp, #16]
		len = sizeof(*info.i128);
   1b9fe:	f04f 0912 	mov.w	r9, #18
		break;
   1ba02:	e7e5      	b.n	1b9d0 <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   1ba04:	8823      	ldrh	r3, [r4, #0]
   1ba06:	9301      	str	r3, [sp, #4]
   1ba08:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   1ba0c:	f1b8 0f00 	cmp.w	r8, #0
   1ba10:	d151      	bne.n	1bab6 <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   1ba12:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1ba16:	2b00      	cmp	r3, #0
   1ba18:	d03a      	beq.n	1ba90 <gatt_find_info_rsp+0xf4>
   1ba1a:	2b02      	cmp	r3, #2
   1ba1c:	d03f      	beq.n	1ba9e <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1ba1e:	6829      	ldr	r1, [r5, #0]
   1ba20:	2900      	cmp	r1, #0
   1ba22:	d143      	bne.n	1baac <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   1ba24:	7c2b      	ldrb	r3, [r5, #16]
   1ba26:	2b04      	cmp	r3, #4
   1ba28:	d148      	bne.n	1babc <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1ba2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ba2e:	a902      	add	r1, sp, #8
   1ba30:	4630      	mov	r0, r6
   1ba32:	f88d a008 	strb.w	sl, [sp, #8]
   1ba36:	f8ad 300a 	strh.w	r3, [sp, #10]
   1ba3a:	f00b f91e 	bl	26c7a <bt_uuid_cmp>
   1ba3e:	b310      	cbz	r0, 1ba86 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1ba40:	f642 0301 	movw	r3, #10241	; 0x2801
   1ba44:	a903      	add	r1, sp, #12
   1ba46:	4630      	mov	r0, r6
   1ba48:	f88d a00c 	strb.w	sl, [sp, #12]
   1ba4c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1ba50:	f00b f913 	bl	26c7a <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1ba54:	b1b8      	cbz	r0, 1ba86 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   1ba56:	f642 0302 	movw	r3, #10242	; 0x2802
   1ba5a:	a909      	add	r1, sp, #36	; 0x24
   1ba5c:	4630      	mov	r0, r6
   1ba5e:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1ba62:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1ba66:	f00b f908 	bl	26c7a <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1ba6a:	b160      	cbz	r0, 1ba86 <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   1ba6c:	f642 0303 	movw	r3, #10243	; 0x2803
   1ba70:	a909      	add	r1, sp, #36	; 0x24
   1ba72:	4630      	mov	r0, r6
   1ba74:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1ba78:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1ba7c:	f00b f8fd 	bl	26c7a <bt_uuid_cmp>
   1ba80:	b9e0      	cbnz	r0, 1babc <gatt_find_info_rsp+0x120>
				skip = true;
   1ba82:	f04f 0801 	mov.w	r8, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   1ba86:	9b00      	ldr	r3, [sp, #0]
   1ba88:	3b01      	subs	r3, #1
   1ba8a:	9300      	str	r3, [sp, #0]
   1ba8c:	444c      	add	r4, r9
   1ba8e:	e7ac      	b.n	1b9ea <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   1ba90:	78a3      	ldrb	r3, [r4, #2]
   1ba92:	78e2      	ldrb	r2, [r4, #3]
   1ba94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1ba98:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   1ba9c:	e7bf      	b.n	1ba1e <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   1ba9e:	2210      	movs	r2, #16
   1baa0:	1ca1      	adds	r1, r4, #2
   1baa2:	f10d 0011 	add.w	r0, sp, #17
   1baa6:	f00b f854 	bl	26b52 <memcpy>
			break;
   1baaa:	e7b8      	b.n	1ba1e <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1baac:	4630      	mov	r0, r6
   1baae:	f00b f8e4 	bl	26c7a <bt_uuid_cmp>
   1bab2:	2800      	cmp	r0, #0
   1bab4:	d0b6      	beq.n	1ba24 <gatt_find_info_rsp+0x88>
			skip = false;
   1bab6:	f04f 0800 	mov.w	r8, #0
   1baba:	e7e4      	b.n	1ba86 <gatt_find_info_rsp+0xea>
		attr = (struct bt_gatt_attr) {
   1babc:	2210      	movs	r2, #16
   1babe:	2100      	movs	r1, #0
   1bac0:	a80a      	add	r0, sp, #40	; 0x28
   1bac2:	f00b f851 	bl	26b68 <memset>
   1bac6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1baca:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   1bace:	9609      	str	r6, [sp, #36]	; 0x24
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1bad0:	686b      	ldr	r3, [r5, #4]
   1bad2:	462a      	mov	r2, r5
   1bad4:	a909      	add	r1, sp, #36	; 0x24
   1bad6:	4638      	mov	r0, r7
   1bad8:	4798      	blx	r3
   1bada:	2800      	cmp	r0, #0
   1badc:	d1d3      	bne.n	1ba86 <gatt_find_info_rsp+0xea>
}
   1bade:	b00f      	add	sp, #60	; 0x3c
   1bae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bae4:	0002d551 	.word	0x0002d551

0001bae8 <bt_gatt_read>:
{
   1bae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1baea:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1baec:	4605      	mov	r5, r0
   1baee:	b950      	cbnz	r0, 1bb06 <bt_gatt_read+0x1e>
   1baf0:	4926      	ldr	r1, [pc, #152]	; (1bb8c <bt_gatt_read+0xa4>)
   1baf2:	4827      	ldr	r0, [pc, #156]	; (1bb90 <bt_gatt_read+0xa8>)
   1baf4:	f241 2216 	movw	r2, #4630	; 0x1216
   1baf8:	f00a f87d 	bl	25bf6 <assert_print>
   1bafc:	4823      	ldr	r0, [pc, #140]	; (1bb8c <bt_gatt_read+0xa4>)
   1bafe:	f241 2116 	movw	r1, #4630	; 0x1216
   1bb02:	f00a f871 	bl	25be8 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1bb06:	b10c      	cbz	r4, 1bb0c <bt_gatt_read+0x24>
   1bb08:	6823      	ldr	r3, [r4, #0]
   1bb0a:	b953      	cbnz	r3, 1bb22 <bt_gatt_read+0x3a>
   1bb0c:	491f      	ldr	r1, [pc, #124]	; (1bb8c <bt_gatt_read+0xa4>)
   1bb0e:	4820      	ldr	r0, [pc, #128]	; (1bb90 <bt_gatt_read+0xa8>)
   1bb10:	f241 2217 	movw	r2, #4631	; 0x1217
   1bb14:	f00a f86f 	bl	25bf6 <assert_print>
   1bb18:	481c      	ldr	r0, [pc, #112]	; (1bb8c <bt_gatt_read+0xa4>)
   1bb1a:	f241 2117 	movw	r1, #4631	; 0x1217
   1bb1e:	f00a f863 	bl	25be8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1bb22:	7b6b      	ldrb	r3, [r5, #13]
   1bb24:	2b07      	cmp	r3, #7
   1bb26:	d12d      	bne.n	1bb84 <bt_gatt_read+0x9c>
	if (params->handle_count == 0) {
   1bb28:	6863      	ldr	r3, [r4, #4]
   1bb2a:	b93b      	cbnz	r3, 1bb3c <bt_gatt_read+0x54>
	return gatt_req_send(conn, gatt_read_rsp, params,
   1bb2c:	2308      	movs	r3, #8
   1bb2e:	2004      	movs	r0, #4
   1bb30:	e9cd 3000 	strd	r3, r0, [sp]
   1bb34:	4b17      	ldr	r3, [pc, #92]	; (1bb94 <bt_gatt_read+0xac>)
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1bb36:	4918      	ldr	r1, [pc, #96]	; (1bb98 <bt_gatt_read+0xb0>)
   1bb38:	4622      	mov	r2, r4
   1bb3a:	e00a      	b.n	1bb52 <bt_gatt_read+0x6a>
	if (params->handle_count > 1) {
   1bb3c:	2b01      	cmp	r3, #1
   1bb3e:	d013      	beq.n	1bb68 <bt_gatt_read+0x80>
		if (params->multiple.variable) {
   1bb40:	7b22      	ldrb	r2, [r4, #12]
	return gatt_req_send(conn, gatt_read_mult_vl_rsp, params,
   1bb42:	005b      	lsls	r3, r3, #1
   1bb44:	9301      	str	r3, [sp, #4]
		if (params->multiple.variable) {
   1bb46:	b14a      	cbz	r2, 1bb5c <bt_gatt_read+0x74>
	return gatt_req_send(conn, gatt_read_mult_vl_rsp, params,
   1bb48:	2320      	movs	r3, #32
   1bb4a:	9300      	str	r3, [sp, #0]
   1bb4c:	4913      	ldr	r1, [pc, #76]	; (1bb9c <bt_gatt_read+0xb4>)
   1bb4e:	4b14      	ldr	r3, [pc, #80]	; (1bba0 <bt_gatt_read+0xb8>)
   1bb50:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1bb52:	4628      	mov	r0, r5
   1bb54:	f00c fc55 	bl	28402 <gatt_req_send.constprop.0>
}
   1bb58:	b003      	add	sp, #12
   1bb5a:	bd30      	pop	{r4, r5, pc}
	return gatt_req_send(conn, gatt_read_mult_rsp, params,
   1bb5c:	230e      	movs	r3, #14
   1bb5e:	9300      	str	r3, [sp, #0]
   1bb60:	4910      	ldr	r1, [pc, #64]	; (1bba4 <bt_gatt_read+0xbc>)
   1bb62:	4b11      	ldr	r3, [pc, #68]	; (1bba8 <bt_gatt_read+0xc0>)
   1bb64:	4622      	mov	r2, r4
   1bb66:	e7f4      	b.n	1bb52 <bt_gatt_read+0x6a>
	if (params->single.offset) {
   1bb68:	8963      	ldrh	r3, [r4, #10]
   1bb6a:	b12b      	cbz	r3, 1bb78 <bt_gatt_read+0x90>
	return gatt_req_send(conn, gatt_read_rsp, params,
   1bb6c:	230c      	movs	r3, #12
   1bb6e:	2104      	movs	r1, #4
   1bb70:	e9cd 3100 	strd	r3, r1, [sp]
   1bb74:	4b0d      	ldr	r3, [pc, #52]	; (1bbac <bt_gatt_read+0xc4>)
   1bb76:	e7de      	b.n	1bb36 <bt_gatt_read+0x4e>
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1bb78:	230a      	movs	r3, #10
   1bb7a:	2202      	movs	r2, #2
   1bb7c:	e9cd 3200 	strd	r3, r2, [sp]
   1bb80:	4b0b      	ldr	r3, [pc, #44]	; (1bbb0 <bt_gatt_read+0xc8>)
   1bb82:	e7d8      	b.n	1bb36 <bt_gatt_read+0x4e>
		return -ENOTCONN;
   1bb84:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1bb88:	e7e6      	b.n	1bb58 <bt_gatt_read+0x70>
   1bb8a:	bf00      	nop
   1bb8c:	0002d20c 	.word	0x0002d20c
   1bb90:	0002ab8c 	.word	0x0002ab8c
   1bb94:	0002822b 	.word	0x0002822b
   1bb98:	0001bbb5 	.word	0x0001bbb5
   1bb9c:	00028131 	.word	0x00028131
   1bba0:	000280f7 	.word	0x000280f7
   1bba4:	000280fb 	.word	0x000280fb
   1bba8:	000280cf 	.word	0x000280cf
   1bbac:	0002804b 	.word	0x0002804b
   1bbb0:	00028037 	.word	0x00028037

0001bbb4 <gatt_read_rsp>:
{
   1bbb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1bbb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1bbba:	4606      	mov	r6, r0
   1bbbc:	4690      	mov	r8, r2
   1bbbe:	461d      	mov	r5, r3
	if (err || !length) {
   1bbc0:	460f      	mov	r7, r1
   1bbc2:	b901      	cbnz	r1, 1bbc6 <gatt_read_rsp+0x12>
   1bbc4:	b953      	cbnz	r3, 1bbdc <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
   1bbc6:	2300      	movs	r3, #0
   1bbc8:	930a      	str	r3, [sp, #40]	; 0x28
   1bbca:	6825      	ldr	r5, [r4, #0]
   1bbcc:	4622      	mov	r2, r4
   1bbce:	4639      	mov	r1, r7
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1bbd0:	4630      	mov	r0, r6
   1bbd2:	46ac      	mov	ip, r5
}
   1bbd4:	b003      	add	sp, #12
   1bbd6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1bbda:	4760      	bx	ip
	if (!params->handle_count) {
   1bbdc:	6863      	ldr	r3, [r4, #4]
   1bbde:	2b00      	cmp	r3, #0
   1bbe0:	d141      	bne.n	1bc66 <gatt_read_rsp+0xb2>
	for (length--, pdu = rsp->data; length;
   1bbe2:	3d01      	subs	r5, #1
   1bbe4:	b2ad      	uxth	r5, r5
   1bbe6:	f102 0901 	add.w	r9, r2, #1
   1bbea:	b305      	cbz	r5, 1bc2e <gatt_read_rsp+0x7a>
		handle = sys_le16_to_cpu(data->handle);
   1bbec:	f8b9 3000 	ldrh.w	r3, [r9]
   1bbf0:	b29a      	uxth	r2, r3
		if (!handle) {
   1bbf2:	b932      	cbnz	r2, 1bc02 <gatt_read_rsp+0x4e>
			BT_ERR("Invalid handle");
   1bbf4:	482c      	ldr	r0, [pc, #176]	; (1bca8 <gatt_read_rsp+0xf4>)
   1bbf6:	2145      	movs	r1, #69	; 0x45
}
   1bbf8:	b003      	add	sp, #12
   1bbfa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
   1bbfe:	f00a b808 	b.w	25c12 <z_log_minimal_printk>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   1bc02:	f898 1000 	ldrb.w	r1, [r8]
		params->by_uuid.start_handle = handle;
   1bc06:	8123      	strh	r3, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   1bc08:	42a9      	cmp	r1, r5
   1bc0a:	bf8c      	ite	hi
   1bc0c:	1ea9      	subhi	r1, r5, #2
   1bc0e:	3902      	subls	r1, #2
   1bc10:	b289      	uxth	r1, r1
		if (params->func(conn, 0, params, data->value, len) ==
   1bc12:	9100      	str	r1, [sp, #0]
   1bc14:	6827      	ldr	r7, [r4, #0]
   1bc16:	f109 0302 	add.w	r3, r9, #2
   1bc1a:	4622      	mov	r2, r4
   1bc1c:	2100      	movs	r1, #0
   1bc1e:	4630      	mov	r0, r6
   1bc20:	47b8      	blx	r7
   1bc22:	2800      	cmp	r0, #0
   1bc24:	d03d      	beq.n	1bca2 <gatt_read_rsp+0xee>
		if (rsp->len > length) {
   1bc26:	f898 1000 	ldrb.w	r1, [r8]
   1bc2a:	428d      	cmp	r5, r1
   1bc2c:	d20b      	bcs.n	1bc46 <gatt_read_rsp+0x92>
	if (bt_gatt_read(conn, params) < 0) {
   1bc2e:	4621      	mov	r1, r4
   1bc30:	4630      	mov	r0, r6
   1bc32:	f7ff ff59 	bl	1bae8 <bt_gatt_read>
   1bc36:	2800      	cmp	r0, #0
   1bc38:	da33      	bge.n	1bca2 <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1bc3a:	2300      	movs	r3, #0
   1bc3c:	930a      	str	r3, [sp, #40]	; 0x28
   1bc3e:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1bc40:	4622      	mov	r2, r4
   1bc42:	210e      	movs	r1, #14
   1bc44:	e7c4      	b.n	1bbd0 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   1bc46:	8922      	ldrh	r2, [r4, #8]
   1bc48:	8960      	ldrh	r0, [r4, #10]
   1bc4a:	4290      	cmp	r0, r2
   1bc4c:	d105      	bne.n	1bc5a <gatt_read_rsp+0xa6>
			params->func(conn, 0, params, NULL, 0);
   1bc4e:	2300      	movs	r3, #0
   1bc50:	930a      	str	r3, [sp, #40]	; 0x28
   1bc52:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
   1bc54:	4622      	mov	r2, r4
   1bc56:	4619      	mov	r1, r3
   1bc58:	e7ba      	b.n	1bbd0 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
   1bc5a:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1bc5c:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
   1bc5e:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1bc60:	b2ad      	uxth	r5, r5
   1bc62:	4489      	add	r9, r1
   1bc64:	e7c1      	b.n	1bbea <gatt_read_rsp+0x36>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   1bc66:	9500      	str	r5, [sp, #0]
   1bc68:	4613      	mov	r3, r2
   1bc6a:	f8d4 c000 	ldr.w	ip, [r4]
   1bc6e:	4622      	mov	r2, r4
   1bc70:	47e0      	blx	ip
   1bc72:	b1b0      	cbz	r0, 1bca2 <gatt_read_rsp+0xee>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   1bc74:	4630      	mov	r0, r6
   1bc76:	f00b fff8 	bl	27c6a <bt_att_get_mtu>
   1bc7a:	3801      	subs	r0, #1
   1bc7c:	4285      	cmp	r5, r0
   1bc7e:	da03      	bge.n	1bc88 <gatt_read_rsp+0xd4>
		params->func(conn, 0, params, NULL, 0);
   1bc80:	970a      	str	r7, [sp, #40]	; 0x28
   1bc82:	6825      	ldr	r5, [r4, #0]
   1bc84:	463b      	mov	r3, r7
   1bc86:	e7e5      	b.n	1bc54 <gatt_read_rsp+0xa0>
	params->single.offset += length;
   1bc88:	8963      	ldrh	r3, [r4, #10]
   1bc8a:	441d      	add	r5, r3
   1bc8c:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   1bc8e:	4621      	mov	r1, r4
   1bc90:	4630      	mov	r0, r6
   1bc92:	f7ff ff29 	bl	1bae8 <bt_gatt_read>
   1bc96:	2800      	cmp	r0, #0
   1bc98:	da03      	bge.n	1bca2 <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1bc9a:	970a      	str	r7, [sp, #40]	; 0x28
   1bc9c:	6825      	ldr	r5, [r4, #0]
   1bc9e:	463b      	mov	r3, r7
   1bca0:	e7ce      	b.n	1bc40 <gatt_read_rsp+0x8c>
}
   1bca2:	b003      	add	sp, #12
   1bca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bca8:	0002d568 	.word	0x0002d568

0001bcac <bt_gatt_subscribe>:
{
   1bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcae:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   1bcb0:	4605      	mov	r5, r0
   1bcb2:	b950      	cbnz	r0, 1bcca <bt_gatt_subscribe+0x1e>
   1bcb4:	4942      	ldr	r1, [pc, #264]	; (1bdc0 <bt_gatt_subscribe+0x114>)
   1bcb6:	4843      	ldr	r0, [pc, #268]	; (1bdc4 <bt_gatt_subscribe+0x118>)
   1bcb8:	f241 32b0 	movw	r2, #5040	; 0x13b0
   1bcbc:	f009 ff9b 	bl	25bf6 <assert_print>
   1bcc0:	483f      	ldr	r0, [pc, #252]	; (1bdc0 <bt_gatt_subscribe+0x114>)
   1bcc2:	f241 31b0 	movw	r1, #5040	; 0x13b0
   1bcc6:	f009 ff8f 	bl	25be8 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   1bcca:	b10e      	cbz	r6, 1bcd0 <bt_gatt_subscribe+0x24>
   1bccc:	6833      	ldr	r3, [r6, #0]
   1bcce:	b953      	cbnz	r3, 1bce6 <bt_gatt_subscribe+0x3a>
   1bcd0:	493b      	ldr	r1, [pc, #236]	; (1bdc0 <bt_gatt_subscribe+0x114>)
   1bcd2:	483c      	ldr	r0, [pc, #240]	; (1bdc4 <bt_gatt_subscribe+0x118>)
   1bcd4:	f241 32b1 	movw	r2, #5041	; 0x13b1
   1bcd8:	f009 ff8d 	bl	25bf6 <assert_print>
   1bcdc:	4838      	ldr	r0, [pc, #224]	; (1bdc0 <bt_gatt_subscribe+0x114>)
   1bcde:	f241 31b1 	movw	r1, #5041	; 0x13b1
   1bce2:	f009 ff81 	bl	25be8 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   1bce6:	8a33      	ldrh	r3, [r6, #16]
   1bce8:	b953      	cbnz	r3, 1bd00 <bt_gatt_subscribe+0x54>
   1bcea:	4935      	ldr	r1, [pc, #212]	; (1bdc0 <bt_gatt_subscribe+0x114>)
   1bcec:	4835      	ldr	r0, [pc, #212]	; (1bdc4 <bt_gatt_subscribe+0x118>)
   1bcee:	f241 32b2 	movw	r2, #5042	; 0x13b2
   1bcf2:	f009 ff80 	bl	25bf6 <assert_print>
   1bcf6:	4832      	ldr	r0, [pc, #200]	; (1bdc0 <bt_gatt_subscribe+0x114>)
   1bcf8:	f241 31b2 	movw	r1, #5042	; 0x13b2
   1bcfc:	f009 ff74 	bl	25be8 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   1bd00:	89f3      	ldrh	r3, [r6, #14]
   1bd02:	b953      	cbnz	r3, 1bd1a <bt_gatt_subscribe+0x6e>
   1bd04:	492e      	ldr	r1, [pc, #184]	; (1bdc0 <bt_gatt_subscribe+0x114>)
   1bd06:	482f      	ldr	r0, [pc, #188]	; (1bdc4 <bt_gatt_subscribe+0x118>)
   1bd08:	f241 32b8 	movw	r2, #5048	; 0x13b8
   1bd0c:	f009 ff73 	bl	25bf6 <assert_print>
   1bd10:	482b      	ldr	r0, [pc, #172]	; (1bdc0 <bt_gatt_subscribe+0x114>)
   1bd12:	f241 31b8 	movw	r1, #5048	; 0x13b8
   1bd16:	f009 ff67 	bl	25be8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1bd1a:	7b6b      	ldrb	r3, [r5, #13]
   1bd1c:	2b07      	cmp	r3, #7
   1bd1e:	d146      	bne.n	1bdae <bt_gatt_subscribe+0x102>
	sub = gatt_sub_find(conn);
   1bd20:	4628      	mov	r0, r5
   1bd22:	f7fe f8b9 	bl	19e98 <gatt_sub_find>
	if (!sub) {
   1bd26:	4604      	mov	r4, r0
   1bd28:	b958      	cbnz	r0, 1bd42 <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   1bd2a:	f7fe f8b5 	bl	19e98 <gatt_sub_find>
		if (sub) {
   1bd2e:	4604      	mov	r4, r0
   1bd30:	2800      	cmp	r0, #0
   1bd32:	d03f      	beq.n	1bdb4 <bt_gatt_subscribe+0x108>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1bd34:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1bd38:	3001      	adds	r0, #1
   1bd3a:	f00c f927 	bl	27f8c <bt_addr_le_copy>
			sub->id = conn->id;
   1bd3e:	7a2b      	ldrb	r3, [r5, #8]
   1bd40:	7023      	strb	r3, [r4, #0]
	return list->head;
   1bd42:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1bd44:	b90a      	cbnz	r2, 1bd4a <bt_gatt_subscribe+0x9e>
   1bd46:	4613      	mov	r3, r2
   1bd48:	e001      	b.n	1bd4e <bt_gatt_subscribe+0xa2>
   1bd4a:	f1a2 0318 	sub.w	r3, r2, #24
			has_subscription = true;
   1bd4e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1bd50:	b96b      	cbnz	r3, 1bd6e <bt_gatt_subscribe+0xc2>
	if (!has_subscription) {
   1bd52:	bb19      	cbnz	r1, 1bd9c <bt_gatt_subscribe+0xf0>
		err = gatt_write_ccc(conn, params);
   1bd54:	4628      	mov	r0, r5
   1bd56:	4631      	mov	r1, r6
   1bd58:	f7fe fcb8 	bl	1a6cc <gatt_write_ccc>
		if (err) {
   1bd5c:	4605      	mov	r5, r0
   1bd5e:	b1e8      	cbz	r0, 1bd9c <bt_gatt_subscribe+0xf0>
	if (gatt_sub_is_empty(sub)) {
   1bd60:	68a3      	ldr	r3, [r4, #8]
   1bd62:	b913      	cbnz	r3, 1bd6a <bt_gatt_subscribe+0xbe>
		gatt_sub_free(sub);
   1bd64:	4620      	mov	r0, r4
   1bd66:	f7fe f995 	bl	1a094 <gatt_sub_free>
}
   1bd6a:	4628      	mov	r0, r5
   1bd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   1bd6e:	42b3      	cmp	r3, r6
   1bd70:	d106      	bne.n	1bd80 <bt_gatt_subscribe+0xd4>
	if (gatt_sub_is_empty(sub)) {
   1bd72:	b912      	cbnz	r2, 1bd7a <bt_gatt_subscribe+0xce>
		gatt_sub_free(sub);
   1bd74:	4620      	mov	r0, r4
   1bd76:	f7fe f98d 	bl	1a094 <gatt_sub_free>
			return -EALREADY;
   1bd7a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1bd7e:	e7f4      	b.n	1bd6a <bt_gatt_subscribe+0xbe>
		if (tmp->value_handle == params->value_handle &&
   1bd80:	899f      	ldrh	r7, [r3, #12]
   1bd82:	89b0      	ldrh	r0, [r6, #12]
   1bd84:	4287      	cmp	r7, r0
   1bd86:	d104      	bne.n	1bd92 <bt_gatt_subscribe+0xe6>
   1bd88:	8a1f      	ldrh	r7, [r3, #16]
   1bd8a:	8a30      	ldrh	r0, [r6, #16]
			has_subscription = true;
   1bd8c:	4287      	cmp	r7, r0
   1bd8e:	bf28      	it	cs
   1bd90:	2101      	movcs	r1, #1
	return node->next;
   1bd92:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1bd94:	2b00      	cmp	r3, #0
   1bd96:	d0dc      	beq.n	1bd52 <bt_gatt_subscribe+0xa6>
   1bd98:	3b18      	subs	r3, #24
   1bd9a:	e7d9      	b.n	1bd50 <bt_gatt_subscribe+0xa4>
Z_GENLIST_PREPEND(slist, snode)
   1bd9c:	68e5      	ldr	r5, [r4, #12]
	parent->next = child;
   1bd9e:	68a2      	ldr	r2, [r4, #8]
   1bda0:	61b2      	str	r2, [r6, #24]
	sys_slist_prepend(&sub->list, &params->node);
   1bda2:	f106 0318 	add.w	r3, r6, #24
	list->head = node;
   1bda6:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1bda8:	b93d      	cbnz	r5, 1bdba <bt_gatt_subscribe+0x10e>
	list->tail = node;
   1bdaa:	60e3      	str	r3, [r4, #12]
}
   1bdac:	e7dd      	b.n	1bd6a <bt_gatt_subscribe+0xbe>
		return -ENOTCONN;
   1bdae:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   1bdb2:	e7da      	b.n	1bd6a <bt_gatt_subscribe+0xbe>
		return -ENOMEM;
   1bdb4:	f06f 050b 	mvn.w	r5, #11
   1bdb8:	e7d7      	b.n	1bd6a <bt_gatt_subscribe+0xbe>
	return 0;
   1bdba:	2500      	movs	r5, #0
   1bdbc:	e7d5      	b.n	1bd6a <bt_gatt_subscribe+0xbe>
   1bdbe:	bf00      	nop
   1bdc0:	0002d20c 	.word	0x0002d20c
   1bdc4:	0002ab8c 	.word	0x0002ab8c

0001bdc8 <bt_gatt_unsubscribe>:
{
   1bdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdcc:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   1bdce:	4607      	mov	r7, r0
   1bdd0:	b950      	cbnz	r0, 1bde8 <bt_gatt_unsubscribe+0x20>
   1bdd2:	493e      	ldr	r1, [pc, #248]	; (1becc <bt_gatt_unsubscribe+0x104>)
   1bdd4:	483e      	ldr	r0, [pc, #248]	; (1bed0 <bt_gatt_unsubscribe+0x108>)
   1bdd6:	f241 420f 	movw	r2, #5135	; 0x140f
   1bdda:	f009 ff0c 	bl	25bf6 <assert_print>
   1bdde:	483b      	ldr	r0, [pc, #236]	; (1becc <bt_gatt_unsubscribe+0x104>)
   1bde0:	f241 410f 	movw	r1, #5135	; 0x140f
   1bde4:	f009 ff00 	bl	25be8 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   1bde8:	b955      	cbnz	r5, 1be00 <bt_gatt_unsubscribe+0x38>
   1bdea:	4938      	ldr	r1, [pc, #224]	; (1becc <bt_gatt_unsubscribe+0x104>)
   1bdec:	4838      	ldr	r0, [pc, #224]	; (1bed0 <bt_gatt_unsubscribe+0x108>)
   1bdee:	f241 4210 	movw	r2, #5136	; 0x1410
   1bdf2:	f009 ff00 	bl	25bf6 <assert_print>
   1bdf6:	4835      	ldr	r0, [pc, #212]	; (1becc <bt_gatt_unsubscribe+0x104>)
   1bdf8:	f241 4110 	movw	r1, #5136	; 0x1410
   1bdfc:	f009 fef4 	bl	25be8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1be00:	7b7b      	ldrb	r3, [r7, #13]
   1be02:	2b07      	cmp	r3, #7
   1be04:	d15a      	bne.n	1bebc <bt_gatt_unsubscribe+0xf4>
	sub = gatt_sub_find(conn);
   1be06:	4638      	mov	r0, r7
   1be08:	f7fe f846 	bl	19e98 <gatt_sub_find>
	if (!sub) {
   1be0c:	4606      	mov	r6, r0
   1be0e:	2800      	cmp	r0, #0
   1be10:	d057      	beq.n	1bec2 <bt_gatt_unsubscribe+0xfa>
	return list->head;
   1be12:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1be14:	b104      	cbz	r4, 1be18 <bt_gatt_unsubscribe+0x50>
   1be16:	3c18      	subs	r4, #24
			has_subscription = true;
   1be18:	2300      	movs	r3, #0
   1be1a:	4698      	mov	r8, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1be1c:	bb6c      	cbnz	r4, 1be7a <bt_gatt_unsubscribe+0xb2>
	if (!found) {
   1be1e:	2b00      	cmp	r3, #0
   1be20:	d04f      	beq.n	1bec2 <bt_gatt_unsubscribe+0xfa>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1be22:	f105 0014 	add.w	r0, r5, #20
   1be26:	f00c f89c 	bl	27f62 <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   1be2a:	0743      	lsls	r3, r0, #29
   1be2c:	d503      	bpl.n	1be36 <bt_gatt_unsubscribe+0x6e>
		bt_gatt_cancel(conn, params);
   1be2e:	4629      	mov	r1, r5
   1be30:	4638      	mov	r0, r7
   1be32:	f00c fc6d 	bl	28710 <bt_gatt_cancel>
	if (!has_subscription) {
   1be36:	f1b8 0f00 	cmp.w	r8, #0
   1be3a:	d02d      	beq.n	1be98 <bt_gatt_unsubscribe+0xd0>
   1be3c:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   1be3e:	f105 0218 	add.w	r2, r5, #24
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1be42:	b153      	cbz	r3, 1be5a <bt_gatt_unsubscribe+0x92>
   1be44:	429a      	cmp	r2, r3
   1be46:	d136      	bne.n	1beb6 <bt_gatt_unsubscribe+0xee>
	return node->next;
   1be48:	69ab      	ldr	r3, [r5, #24]
	return list->tail;
   1be4a:	68f1      	ldr	r1, [r6, #12]
Z_GENLIST_REMOVE(slist, snode)
   1be4c:	bb74      	cbnz	r4, 1beac <bt_gatt_unsubscribe+0xe4>
   1be4e:	428a      	cmp	r2, r1
	list->head = node;
   1be50:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   1be52:	d100      	bne.n	1be56 <bt_gatt_unsubscribe+0x8e>
	list->tail = node;
   1be54:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   1be56:	2300      	movs	r3, #0
   1be58:	61ab      	str	r3, [r5, #24]
	if (gatt_sub_is_empty(sub)) {
   1be5a:	68b3      	ldr	r3, [r6, #8]
   1be5c:	b913      	cbnz	r3, 1be64 <bt_gatt_unsubscribe+0x9c>
		gatt_sub_free(sub);
   1be5e:	4630      	mov	r0, r6
   1be60:	f7fe f918 	bl	1a094 <gatt_sub_free>
	if (has_subscription) {
   1be64:	f1b8 0f00 	cmp.w	r8, #0
   1be68:	d02e      	beq.n	1bec8 <bt_gatt_unsubscribe+0x100>
		params->notify(conn, params, NULL, 0);
   1be6a:	2300      	movs	r3, #0
   1be6c:	682c      	ldr	r4, [r5, #0]
   1be6e:	461a      	mov	r2, r3
   1be70:	4629      	mov	r1, r5
   1be72:	4638      	mov	r0, r7
   1be74:	47a0      	blx	r4
	return 0;
   1be76:	2000      	movs	r0, #0
   1be78:	e016      	b.n	1bea8 <bt_gatt_unsubscribe+0xe0>
		if (params == tmp) {
   1be7a:	42ac      	cmp	r4, r5
   1be7c:	d00a      	beq.n	1be94 <bt_gatt_unsubscribe+0xcc>
		if (tmp->value_handle == params->value_handle) {
   1be7e:	89a1      	ldrh	r1, [r4, #12]
   1be80:	89aa      	ldrh	r2, [r5, #12]
			has_subscription = true;
   1be82:	4291      	cmp	r1, r2
   1be84:	bf08      	it	eq
   1be86:	f04f 0801 	moveq.w	r8, #1
	return node->next;
   1be8a:	69a4      	ldr	r4, [r4, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1be8c:	2c00      	cmp	r4, #0
   1be8e:	d0c6      	beq.n	1be1e <bt_gatt_unsubscribe+0x56>
   1be90:	3c18      	subs	r4, #24
   1be92:	e7c3      	b.n	1be1c <bt_gatt_unsubscribe+0x54>
			found = true;
   1be94:	2301      	movs	r3, #1
   1be96:	e7f8      	b.n	1be8a <bt_gatt_unsubscribe+0xc2>
		params->value = 0x0000;
   1be98:	f8a5 8010 	strh.w	r8, [r5, #16]
		err = gatt_write_ccc(conn, params);
   1be9c:	4629      	mov	r1, r5
   1be9e:	4638      	mov	r0, r7
   1bea0:	f7fe fc14 	bl	1a6cc <gatt_write_ccc>
		if (err) {
   1bea4:	2800      	cmp	r0, #0
   1bea6:	d0c9      	beq.n	1be3c <bt_gatt_unsubscribe+0x74>
}
   1bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_REMOVE(slist, snode)
   1beac:	428a      	cmp	r2, r1
	parent->next = child;
   1beae:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1beb0:	bf08      	it	eq
   1beb2:	60f4      	streq	r4, [r6, #12]
}
   1beb4:	e7cf      	b.n	1be56 <bt_gatt_unsubscribe+0x8e>
	return node->next;
   1beb6:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1beb8:	681b      	ldr	r3, [r3, #0]
   1beba:	e7c2      	b.n	1be42 <bt_gatt_unsubscribe+0x7a>
		return -ENOTCONN;
   1bebc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1bec0:	e7f2      	b.n	1bea8 <bt_gatt_unsubscribe+0xe0>
		return -EINVAL;
   1bec2:	f06f 0015 	mvn.w	r0, #21
   1bec6:	e7ef      	b.n	1bea8 <bt_gatt_unsubscribe+0xe0>
	return 0;
   1bec8:	4640      	mov	r0, r8
   1beca:	e7ed      	b.n	1bea8 <bt_gatt_unsubscribe+0xe0>
   1becc:	0002d20c 	.word	0x0002d20c
   1bed0:	0002ab8c 	.word	0x0002ab8c

0001bed4 <bt_gatt_mult_notification>:
{
   1bed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bed8:	b085      	sub	sp, #20
   1beda:	4606      	mov	r6, r0
   1bedc:	460c      	mov	r4, r1
   1bede:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   1bee0:	f7fd ffda 	bl	19e98 <gatt_sub_find>
	if (!sub) {
   1bee4:	4607      	mov	r7, r0
   1bee6:	b1d0      	cbz	r0, 1bf1e <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1bee8:	464a      	mov	r2, r9
   1beea:	4621      	mov	r1, r4
   1beec:	a801      	add	r0, sp, #4
   1beee:	f00d f8d9 	bl	290a4 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1bef2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1bef6:	2b04      	cmp	r3, #4
   1bef8:	d911      	bls.n	1bf1e <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1befa:	2104      	movs	r1, #4
   1befc:	eb0d 0001 	add.w	r0, sp, r1
   1bf00:	f002 fad4 	bl	1e4ac <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1bf04:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   1bf08:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		if (len > buf.len) {
   1bf0c:	4553      	cmp	r3, sl
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1bf0e:	4602      	mov	r2, r0
		if (len > buf.len) {
   1bf10:	d208      	bcs.n	1bf24 <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   1bf12:	4818      	ldr	r0, [pc, #96]	; (1bf74 <bt_gatt_mult_notification+0xa0>)
   1bf14:	464b      	mov	r3, r9
   1bf16:	4652      	mov	r2, sl
   1bf18:	2145      	movs	r1, #69	; 0x45
   1bf1a:	f009 fe7a 	bl	25c12 <z_log_minimal_printk>
}
   1bf1e:	b005      	add	sp, #20
   1bf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1bf24:	68bc      	ldr	r4, [r7, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1bf26:	b304      	cbz	r4, 1bf6a <bt_gatt_mult_notification+0x96>
	return node->next;
   1bf28:	f854 5918 	ldr.w	r5, [r4], #-24
   1bf2c:	b105      	cbz	r5, 1bf30 <bt_gatt_mult_notification+0x5c>
   1bf2e:	3d18      	subs	r5, #24
		handle = sys_cpu_to_le16(nfy->handle);
   1bf30:	4690      	mov	r8, r2
   1bf32:	f838 bb04 	ldrh.w	fp, [r8], #4
			if (handle != params->value_handle) {
   1bf36:	89a3      	ldrh	r3, [r4, #12]
   1bf38:	455b      	cmp	r3, fp
   1bf3a:	d10f      	bne.n	1bf5c <bt_gatt_mult_notification+0x88>
			if (check_subscribe_security_level(conn, params)) {
   1bf3c:	7a71      	ldrb	r1, [r6, #9]
   1bf3e:	7ca3      	ldrb	r3, [r4, #18]
   1bf40:	4299      	cmp	r1, r3
   1bf42:	d30b      	bcc.n	1bf5c <bt_gatt_mult_notification+0x88>
				if (params->notify(conn, params, nfy->value, len) ==
   1bf44:	f8d4 c000 	ldr.w	ip, [r4]
   1bf48:	4653      	mov	r3, sl
   1bf4a:	4642      	mov	r2, r8
   1bf4c:	4621      	mov	r1, r4
   1bf4e:	4630      	mov	r0, r6
   1bf50:	47e0      	blx	ip
   1bf52:	b918      	cbnz	r0, 1bf5c <bt_gatt_mult_notification+0x88>
					bt_gatt_unsubscribe(conn, params);
   1bf54:	4621      	mov	r1, r4
   1bf56:	4630      	mov	r0, r6
   1bf58:	f7ff ff36 	bl	1bdc8 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1bf5c:	b12d      	cbz	r5, 1bf6a <bt_gatt_mult_notification+0x96>
   1bf5e:	69ab      	ldr	r3, [r5, #24]
   1bf60:	b103      	cbz	r3, 1bf64 <bt_gatt_mult_notification+0x90>
   1bf62:	3b18      	subs	r3, #24
{
   1bf64:	462c      	mov	r4, r5
   1bf66:	461d      	mov	r5, r3
   1bf68:	e7e5      	b.n	1bf36 <bt_gatt_mult_notification+0x62>
		net_buf_simple_pull_mem(&buf, len);
   1bf6a:	4651      	mov	r1, sl
   1bf6c:	a801      	add	r0, sp, #4
   1bf6e:	f002 fa9d 	bl	1e4ac <net_buf_simple_pull_mem>
   1bf72:	e7be      	b.n	1bef2 <bt_gatt_mult_notification+0x1e>
   1bf74:	0002d57c 	.word	0x0002d57c

0001bf78 <bt_gatt_connected>:
{
   1bf78:	b570      	push	{r4, r5, r6, lr}
   1bf7a:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bf7c:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1bf80:	4604      	mov	r4, r0
	data.conn = conn;
   1bf82:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   1bf84:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bf86:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1bf88:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bf8c:	4631      	mov	r1, r6
   1bf8e:	f00a ffaa 	bl	26ee6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1bf92:	b198      	cbz	r0, 1bfbc <bt_gatt_connected+0x44>
		if (conn->id) {
   1bf94:	7a22      	ldrb	r2, [r4, #8]
   1bf96:	2a00      	cmp	r2, #0
   1bf98:	d03f      	beq.n	1c01a <bt_gatt_connected+0xa2>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1bf9a:	ad02      	add	r5, sp, #8
   1bf9c:	2104      	movs	r1, #4
   1bf9e:	4628      	mov	r0, r5
   1bfa0:	f009 fb9e 	bl	256e0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1bfa4:	9500      	str	r5, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1bfa6:	4a1f      	ldr	r2, [pc, #124]	; (1c024 <bt_gatt_connected+0xac>)
   1bfa8:	2124      	movs	r1, #36	; 0x24
   1bfaa:	a805      	add	r0, sp, #20
   1bfac:	4633      	mov	r3, r6
   1bfae:	f7f9 f83f 	bl	15030 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1bfb2:	aa05      	add	r2, sp, #20
   1bfb4:	491c      	ldr	r1, [pc, #112]	; (1c028 <bt_gatt_connected+0xb0>)
   1bfb6:	4610      	mov	r0, r2
   1bfb8:	f7f7 f8ca 	bl	13150 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bfbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1bfc0:	4a1a      	ldr	r2, [pc, #104]	; (1c02c <bt_gatt_connected+0xb4>)
   1bfc2:	ab03      	add	r3, sp, #12
   1bfc4:	2001      	movs	r0, #1
   1bfc6:	f00c fafb 	bl	285c0 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1bfca:	4620      	mov	r0, r4
   1bfcc:	f00b f8d1 	bl	27172 <bt_conn_get_security>
   1bfd0:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1bfd4:	4288      	cmp	r0, r1
   1bfd6:	d208      	bcs.n	1bfea <bt_gatt_connected+0x72>
		int err = bt_conn_set_security(conn, data.sec);
   1bfd8:	4620      	mov	r0, r4
   1bfda:	f00b f89a 	bl	27112 <bt_conn_set_security>
		if (err) {
   1bfde:	4602      	mov	r2, r0
   1bfe0:	b118      	cbz	r0, 1bfea <bt_gatt_connected+0x72>
			BT_WARN("Failed to set security for bonded peer (%d)",
   1bfe2:	4813      	ldr	r0, [pc, #76]	; (1c030 <bt_gatt_connected+0xb8>)
   1bfe4:	2157      	movs	r1, #87	; 0x57
   1bfe6:	f009 fe14 	bl	25c12 <z_log_minimal_printk>
	sub = gatt_sub_find(conn);
   1bfea:	4620      	mov	r0, r4
   1bfec:	f7fd ff54 	bl	19e98 <gatt_sub_find>
	if (!sub) {
   1bff0:	b1a8      	cbz	r0, 1c01e <bt_gatt_connected+0xa6>
	return list->head;
   1bff2:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1bff4:	b19d      	cbz	r5, 1c01e <bt_gatt_connected+0xa6>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1bff6:	7a20      	ldrb	r0, [r4, #8]
   1bff8:	4631      	mov	r1, r6
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1bffa:	3d18      	subs	r5, #24
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1bffc:	f00a ff73 	bl	26ee6 <bt_addr_le_is_bonded>
   1c000:	b148      	cbz	r0, 1c016 <bt_gatt_connected+0x9e>
   1c002:	f105 0014 	add.w	r0, r5, #20
   1c006:	f00b ffac 	bl	27f62 <atomic_get>
   1c00a:	0783      	lsls	r3, r0, #30
   1c00c:	d403      	bmi.n	1c016 <bt_gatt_connected+0x9e>
			gatt_write_ccc(conn, params);
   1c00e:	4629      	mov	r1, r5
   1c010:	4620      	mov	r0, r4
   1c012:	f7fe fb5b 	bl	1a6cc <gatt_write_ccc>
	return node->next;
   1c016:	69ad      	ldr	r5, [r5, #24]
   1c018:	e7ec      	b.n	1bff4 <bt_gatt_connected+0x7c>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1c01a:	9200      	str	r2, [sp, #0]
   1c01c:	e7c3      	b.n	1bfa6 <bt_gatt_connected+0x2e>
}
   1c01e:	b00e      	add	sp, #56	; 0x38
   1c020:	bd70      	pop	{r4, r5, r6, pc}
   1c022:	bf00      	nop
   1c024:	0002d409 	.word	0x0002d409
   1c028:	0001ab79 	.word	0x0001ab79
   1c02c:	0001b089 	.word	0x0001b089
   1c030:	0002d59a 	.word	0x0002d59a

0001c034 <bt_gatt_att_max_mtu_changed>:
{
   1c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1c036:	4b08      	ldr	r3, [pc, #32]	; (1c058 <bt_gatt_att_max_mtu_changed+0x24>)
   1c038:	681c      	ldr	r4, [r3, #0]
   1c03a:	4605      	mov	r5, r0
   1c03c:	460e      	mov	r6, r1
   1c03e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1c040:	b14c      	cbz	r4, 1c056 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1c042:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1c046:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1c048:	b11b      	cbz	r3, 1c052 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1c04a:	463a      	mov	r2, r7
   1c04c:	4631      	mov	r1, r6
   1c04e:	4628      	mov	r0, r5
   1c050:	4798      	blx	r3
	return node->next;
   1c052:	6864      	ldr	r4, [r4, #4]
   1c054:	e7f4      	b.n	1c040 <bt_gatt_att_max_mtu_changed+0xc>
}
   1c056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c058:	20002460 	.word	0x20002460

0001c05c <bt_gatt_encrypt_change>:
{
   1c05c:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1c05e:	4a06      	ldr	r2, [pc, #24]	; (1c078 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1c060:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1c062:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1c064:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1c066:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1c06a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1c06e:	f00c faa7 	bl	285c0 <bt_gatt_foreach_attr>
}
   1c072:	b003      	add	sp, #12
   1c074:	f85d fb04 	ldr.w	pc, [sp], #4
   1c078:	0001b089 	.word	0x0001b089

0001c07c <bt_gatt_store_ccc>:
{
   1c07c:	b570      	push	{r4, r5, r6, lr}
   1c07e:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   1c080:	2300      	movs	r3, #0
{
   1c082:	4604      	mov	r4, r0
   1c084:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1c086:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   1c088:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1c08c:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1c08e:	4a15      	ldr	r2, [pc, #84]	; (1c0e4 <bt_gatt_store_ccc+0x68>)
   1c090:	ab0d      	add	r3, sp, #52	; 0x34
   1c092:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c096:	2001      	movs	r0, #1
   1c098:	f00c fa92 	bl	285c0 <bt_gatt_foreach_attr>
	if (id) {
   1c09c:	b1ec      	cbz	r4, 1c0da <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1c09e:	ae03      	add	r6, sp, #12
   1c0a0:	4622      	mov	r2, r4
   1c0a2:	2104      	movs	r1, #4
   1c0a4:	4630      	mov	r0, r6
   1c0a6:	f009 fb1b 	bl	256e0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1c0aa:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1c0ac:	4a0e      	ldr	r2, [pc, #56]	; (1c0e8 <bt_gatt_store_ccc+0x6c>)
   1c0ae:	462b      	mov	r3, r5
   1c0b0:	2124      	movs	r1, #36	; 0x24
   1c0b2:	a804      	add	r0, sp, #16
   1c0b4:	f7f8 ffbc 	bl	15030 <bt_settings_encode_key>
	if (save.count) {
   1c0b8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1c0ba:	b182      	cbz	r2, 1c0de <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   1c0bc:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1c0be:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1c0c0:	a804      	add	r0, sp, #16
   1c0c2:	f7f6 ffe5 	bl	13090 <settings_save_one>
	if (err) {
   1c0c6:	4604      	mov	r4, r0
   1c0c8:	b120      	cbz	r0, 1c0d4 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1c0ca:	4602      	mov	r2, r0
   1c0cc:	2145      	movs	r1, #69	; 0x45
   1c0ce:	4807      	ldr	r0, [pc, #28]	; (1c0ec <bt_gatt_store_ccc+0x70>)
   1c0d0:	f009 fd9f 	bl	25c12 <z_log_minimal_printk>
}
   1c0d4:	4620      	mov	r0, r4
   1c0d6:	b040      	add	sp, #256	; 0x100
   1c0d8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1c0da:	9400      	str	r4, [sp, #0]
   1c0dc:	e7e6      	b.n	1c0ac <bt_gatt_store_ccc+0x30>
		str = NULL;
   1c0de:	4611      	mov	r1, r2
   1c0e0:	e7ee      	b.n	1c0c0 <bt_gatt_store_ccc+0x44>
   1c0e2:	bf00      	nop
   1c0e4:	0001a4f9 	.word	0x0001a4f9
   1c0e8:	0002d409 	.word	0x0002d409
   1c0ec:	0002d5cb 	.word	0x0002d5cb

0001c0f0 <bt_gatt_identity_resolved>:
{
   1c0f0:	b513      	push	{r0, r1, r4, lr}
   1c0f2:	4604      	mov	r4, r0
	struct addr_match user_data = {
   1c0f4:	e9cd 1200 	strd	r1, r2, [sp]
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   1c0f8:	466b      	mov	r3, sp
   1c0fa:	4a08      	ldr	r2, [pc, #32]	; (1c11c <bt_gatt_identity_resolved+0x2c>)
   1c0fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c100:	2001      	movs	r0, #1
   1c102:	f00c fa5d 	bl	285c0 <bt_gatt_foreach_attr>
	bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   1c106:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1c10a:	7a20      	ldrb	r0, [r4, #8]
   1c10c:	f7ff ffb6 	bl	1c07c <bt_gatt_store_ccc>
	bt_gatt_store_cf(conn);
   1c110:	4620      	mov	r0, r4
   1c112:	f7fe fa0d 	bl	1a530 <bt_gatt_store_cf.isra.0>
}
   1c116:	b002      	add	sp, #8
   1c118:	bd10      	pop	{r4, pc}
   1c11a:	bf00      	nop
   1c11c:	0001a4cd 	.word	0x0001a4cd

0001c120 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1c120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1c124:	4603      	mov	r3, r0
   1c126:	4a41      	ldr	r2, [pc, #260]	; (1c22c <bt_gatt_disconnected+0x10c>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1c128:	4e41      	ldr	r6, [pc, #260]	; (1c230 <bt_gatt_disconnected+0x110>)
{
   1c12a:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1c12c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c130:	2001      	movs	r0, #1
   1c132:	f00c fa45 	bl	285c0 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   1c136:	4620      	mov	r0, r4
   1c138:	f7fb ff24 	bl	17f84 <bt_conn_index>
   1c13c:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1c13e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1c142:	b120      	cbz	r0, 1c14e <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1c144:	f7fb fdfa 	bl	17d3c <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1c148:	2300      	movs	r3, #0
   1c14a:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1c14e:	4839      	ldr	r0, [pc, #228]	; (1c234 <bt_gatt_disconnected+0x114>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c150:	f104 0690 	add.w	r6, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1c154:	f007 f806 	bl	23164 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c158:	7a20      	ldrb	r0, [r4, #8]
   1c15a:	4631      	mov	r1, r6
   1c15c:	f00a fec3 	bl	26ee6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1c160:	b130      	cbz	r0, 1c170 <bt_gatt_disconnected+0x50>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1c162:	7a20      	ldrb	r0, [r4, #8]
   1c164:	4631      	mov	r1, r6
   1c166:	f7ff ff89 	bl	1c07c <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   1c16a:	4620      	mov	r0, r4
   1c16c:	f7fe f9e0 	bl	1a530 <bt_gatt_store_cf.isra.0>
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c170:	7a20      	ldrb	r0, [r4, #8]
   1c172:	4631      	mov	r1, r6
   1c174:	f00a feb7 	bl	26ee6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1c178:	b150      	cbz	r0, 1c190 <bt_gatt_disconnected+0x70>
		struct addr_with_id addr_with_id = {
   1c17a:	7a23      	ldrb	r3, [r4, #8]
   1c17c:	f88d 3004 	strb.w	r3, [sp, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1c180:	4a2d      	ldr	r2, [pc, #180]	; (1c238 <bt_gatt_disconnected+0x118>)
		struct addr_with_id addr_with_id = {
   1c182:	9600      	str	r6, [sp, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1c184:	466b      	mov	r3, sp
   1c186:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c18a:	2001      	movs	r0, #1
   1c18c:	f00c fa18 	bl	285c0 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1c190:	4620      	mov	r0, r4
   1c192:	f7fd fe81 	bl	19e98 <gatt_sub_find>
	if (!sub) {
   1c196:	4680      	mov	r8, r0
   1c198:	b370      	cbz	r0, 1c1f8 <bt_gatt_disconnected+0xd8>
	return list->head;
   1c19a:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c19c:	b365      	cbz	r5, 1c1f8 <bt_gatt_disconnected+0xd8>
	return node->next;
   1c19e:	f855 7918 	ldr.w	r7, [r5], #-24
   1c1a2:	b107      	cbz	r7, 1c1a6 <bt_gatt_disconnected+0x86>
   1c1a4:	3f18      	subs	r7, #24
{
   1c1a6:	f04f 0900 	mov.w	r9, #0
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1c1aa:	f108 0a01 	add.w	sl, r8, #1
			params->value = 0U;
   1c1ae:	46cb      	mov	fp, r9
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1c1b0:	7a20      	ldrb	r0, [r4, #8]
   1c1b2:	4631      	mov	r1, r6
   1c1b4:	f00a fe97 	bl	26ee6 <bt_addr_le_is_bonded>
   1c1b8:	b970      	cbnz	r0, 1c1d8 <bt_gatt_disconnected+0xb8>
			params->value = 0U;
   1c1ba:	f8a5 b010 	strh.w	fp, [r5, #16]
			gatt_sub_remove(conn, sub, prev, params);
   1c1be:	462b      	mov	r3, r5
   1c1c0:	464a      	mov	r2, r9
   1c1c2:	4641      	mov	r1, r8
   1c1c4:	4620      	mov	r0, r4
   1c1c6:	f00b fef2 	bl	27fae <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c1ca:	b1af      	cbz	r7, 1c1f8 <bt_gatt_disconnected+0xd8>
   1c1cc:	69bb      	ldr	r3, [r7, #24]
   1c1ce:	b103      	cbz	r3, 1c1d2 <bt_gatt_disconnected+0xb2>
   1c1d0:	3b18      	subs	r3, #24
{
   1c1d2:	463d      	mov	r5, r7
   1c1d4:	461f      	mov	r7, r3
   1c1d6:	e7eb      	b.n	1c1b0 <bt_gatt_disconnected+0x90>
   1c1d8:	f105 0014 	add.w	r0, r5, #20
   1c1dc:	f00b fec1 	bl	27f62 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1c1e0:	07c3      	lsls	r3, r0, #31
   1c1e2:	d4ea      	bmi.n	1c1ba <bt_gatt_disconnected+0x9a>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1c1e4:	f898 3001 	ldrb.w	r3, [r8, #1]
   1c1e8:	b11b      	cbz	r3, 1c1f2 <bt_gatt_disconnected+0xd2>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1c1ea:	4631      	mov	r1, r6
   1c1ec:	4650      	mov	r0, sl
   1c1ee:	f00b fecd 	bl	27f8c <bt_addr_le_copy>
			prev = &params->node;
   1c1f2:	f105 0918 	add.w	r9, r5, #24
   1c1f6:	e7e8      	b.n	1c1ca <bt_gatt_disconnected+0xaa>
	cfg = find_cf_cfg(conn);
   1c1f8:	4620      	mov	r0, r4
   1c1fa:	f7fd fdff 	bl	19dfc <find_cf_cfg>
	if (!cfg) {
   1c1fe:	4605      	mov	r5, r0
   1c200:	b188      	cbz	r0, 1c226 <bt_gatt_disconnected+0x106>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c202:	7a20      	ldrb	r0, [r4, #8]
   1c204:	4631      	mov	r1, r6
   1c206:	f00a fe6e 	bl	26ee6 <bt_addr_le_is_bonded>
   1c20a:	b928      	cbnz	r0, 1c218 <bt_gatt_disconnected+0xf8>
		clear_cf_cfg(cfg);
   1c20c:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1c20e:	b003      	add	sp, #12
   1c210:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   1c214:	f00b bfc6 	b.w	281a4 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c218:	4631      	mov	r1, r6
   1c21a:	1c68      	adds	r0, r5, #1
}
   1c21c:	b003      	add	sp, #12
   1c21e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c222:	f00b beb3 	b.w	27f8c <bt_addr_le_copy>
}
   1c226:	b003      	add	sp, #12
   1c228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c22c:	0001a641 	.word	0x0001a641
   1c230:	20001b78 	.word	0x20001b78
   1c234:	20001b80 	.word	0x20001b80
   1c238:	0001a419 	.word	0x0001a419

0001c23c <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1c23c:	4601      	mov	r1, r0
   1c23e:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1c240:	4803      	ldr	r0, [pc, #12]	; (1c250 <smp_find+0x14>)
   1c242:	f00c fb01 	bl	28848 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1c246:	2800      	cmp	r0, #0
}
   1c248:	4802      	ldr	r0, [pc, #8]	; (1c254 <smp_find+0x18>)
   1c24a:	bf08      	it	eq
   1c24c:	2000      	moveq	r0, #0
   1c24e:	bd08      	pop	{r3, pc}
   1c250:	20001c0c 	.word	0x20001c0c
   1c254:	20001c08 	.word	0x20001c08

0001c258 <latch_auth_cb>:
{
   1c258:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1c25a:	4a0c      	ldr	r2, [pc, #48]	; (1c28c <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c25c:	6811      	ldr	r1, [r2, #0]
   1c25e:	4a0c      	ldr	r2, [pc, #48]	; (1c290 <latch_auth_cb+0x38>)
   1c260:	f3bf 8f5b 	dmb	ish
   1c264:	f500 73d8 	add.w	r3, r0, #432	; 0x1b0
   1c268:	e853 4f00 	ldrex	r4, [r3]
   1c26c:	4294      	cmp	r4, r2
   1c26e:	d104      	bne.n	1c27a <latch_auth_cb+0x22>
   1c270:	e843 1c00 	strex	ip, r1, [r3]
   1c274:	f1bc 0f00 	cmp.w	ip, #0
   1c278:	d1f6      	bne.n	1c268 <latch_auth_cb+0x10>
   1c27a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c27e:	f3bf 8f5b 	dmb	ish
   1c282:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
   1c286:	f3bf 8f5b 	dmb	ish
}
   1c28a:	bd10      	pop	{r4, pc}
   1c28c:	20002330 	.word	0x20002330
   1c290:	20001c08 	.word	0x20001c08

0001c294 <get_io_capa>:
{
   1c294:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c296:	f7ff ffdf 	bl	1c258 <latch_auth_cb>
	if (!smp_auth_cb) {
   1c29a:	b1b8      	cbz	r0, 1c2cc <get_io_capa+0x38>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1c29c:	6803      	ldr	r3, [r0, #0]
   1c29e:	b143      	cbz	r3, 1c2b2 <get_io_capa+0x1e>
   1c2a0:	6842      	ldr	r2, [r0, #4]
   1c2a2:	b132      	cbz	r2, 1c2b2 <get_io_capa+0x1e>
   1c2a4:	6882      	ldr	r2, [r0, #8]
   1c2a6:	b912      	cbnz	r2, 1c2ae <get_io_capa+0x1a>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1c2a8:	4a0b      	ldr	r2, [pc, #44]	; (1c2d8 <get_io_capa+0x44>)
   1c2aa:	7812      	ldrb	r2, [r2, #0]
   1c2ac:	b93a      	cbnz	r2, 1c2be <get_io_capa+0x2a>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1c2ae:	2004      	movs	r0, #4
   1c2b0:	e00b      	b.n	1c2ca <get_io_capa+0x36>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1c2b2:	4a09      	ldr	r2, [pc, #36]	; (1c2d8 <get_io_capa+0x44>)
   1c2b4:	7812      	ldrb	r2, [r2, #0]
   1c2b6:	b112      	cbz	r2, 1c2be <get_io_capa+0x2a>
   1c2b8:	b10b      	cbz	r3, 1c2be <get_io_capa+0x2a>
   1c2ba:	6882      	ldr	r2, [r0, #8]
   1c2bc:	b942      	cbnz	r2, 1c2d0 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_entry) {
   1c2be:	6842      	ldr	r2, [r0, #4]
   1c2c0:	b942      	cbnz	r2, 1c2d4 <get_io_capa+0x40>
		return BT_SMP_IO_DISPLAY_ONLY;
   1c2c2:	2b00      	cmp	r3, #0
   1c2c4:	bf0c      	ite	eq
   1c2c6:	2003      	moveq	r0, #3
   1c2c8:	2000      	movne	r0, #0
}
   1c2ca:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1c2cc:	2003      	movs	r0, #3
   1c2ce:	e7fc      	b.n	1c2ca <get_io_capa+0x36>
		return BT_SMP_IO_DISPLAY_YESNO;
   1c2d0:	2001      	movs	r0, #1
   1c2d2:	e7fa      	b.n	1c2ca <get_io_capa+0x36>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1c2d4:	2002      	movs	r0, #2
   1c2d6:	e7f8      	b.n	1c2ca <get_io_capa+0x36>
   1c2d8:	200028d7 	.word	0x200028d7

0001c2dc <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1c2dc:	4288      	cmp	r0, r1
{
   1c2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c2e0:	4604      	mov	r4, r0
   1c2e2:	460d      	mov	r5, r1
   1c2e4:	4616      	mov	r6, r2
   1c2e6:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1c2ea:	d916      	bls.n	1c31a <sys_memcpy_swap+0x3e>
   1c2ec:	188b      	adds	r3, r1, r2
   1c2ee:	4298      	cmp	r0, r3
   1c2f0:	d20a      	bcs.n	1c308 <sys_memcpy_swap+0x2c>
   1c2f2:	490b      	ldr	r1, [pc, #44]	; (1c320 <sys_memcpy_swap+0x44>)
   1c2f4:	480b      	ldr	r0, [pc, #44]	; (1c324 <sys_memcpy_swap+0x48>)
   1c2f6:	f240 2217 	movw	r2, #535	; 0x217
   1c2fa:	f009 fc7c 	bl	25bf6 <assert_print>
   1c2fe:	4808      	ldr	r0, [pc, #32]	; (1c320 <sys_memcpy_swap+0x44>)
   1c300:	f240 2117 	movw	r1, #535	; 0x217
   1c304:	f009 fc70 	bl	25be8 <assert_post_action>
	psrc += length - 1;
   1c308:	3e01      	subs	r6, #1
   1c30a:	4435      	add	r5, r6
		*pdst++ = *psrc--;
   1c30c:	f815 3901 	ldrb.w	r3, [r5], #-1
   1c310:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
   1c314:	42bc      	cmp	r4, r7
   1c316:	d1f9      	bne.n	1c30c <sys_memcpy_swap+0x30>
}
   1c318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1c31a:	d0ea      	beq.n	1c2f2 <sys_memcpy_swap+0x16>
   1c31c:	42b9      	cmp	r1, r7
   1c31e:	e7e7      	b.n	1c2f0 <sys_memcpy_swap+0x14>
   1c320:	0002d602 	.word	0x0002d602
   1c324:	0002ab8c 	.word	0x0002ab8c

0001c328 <smp_chan_get>:
{
   1c328:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1c32a:	2106      	movs	r1, #6
   1c32c:	f00b f827 	bl	2737e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1c330:	4604      	mov	r4, r0
   1c332:	b928      	cbnz	r0, 1c340 <smp_chan_get+0x18>
		BT_ERR("Unable to find SMP channel");
   1c334:	4804      	ldr	r0, [pc, #16]	; (1c348 <smp_chan_get+0x20>)
   1c336:	2145      	movs	r1, #69	; 0x45
   1c338:	f009 fc6b 	bl	25c12 <z_log_minimal_printk>
}
   1c33c:	4620      	mov	r0, r4
   1c33e:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1c340:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   1c344:	e7fa      	b.n	1c33c <smp_chan_get+0x14>
   1c346:	bf00      	nop
   1c348:	0002d634 	.word	0x0002d634

0001c34c <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1c34c:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1c34e:	4b09      	ldr	r3, [pc, #36]	; (1c374 <bt_smp_accept+0x28>)
{
   1c350:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1c352:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1c356:	b928      	cbnz	r0, 1c364 <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1c358:	4a07      	ldr	r2, [pc, #28]	; (1c378 <bt_smp_accept+0x2c>)
   1c35a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

		*chan = &smp->chan.chan;
   1c35e:	33ec      	adds	r3, #236	; 0xec
   1c360:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1c362:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
   1c364:	4805      	ldr	r0, [pc, #20]	; (1c37c <bt_smp_accept+0x30>)
   1c366:	2145      	movs	r1, #69	; 0x45
   1c368:	f009 fc53 	bl	25c12 <z_log_minimal_printk>
   1c36c:	f06f 000b 	mvn.w	r0, #11
   1c370:	e7f7      	b.n	1c362 <bt_smp_accept+0x16>
   1c372:	bf00      	nop
   1c374:	20001c08 	.word	0x20001c08
   1c378:	0002a7fc 	.word	0x0002a7fc
   1c37c:	0002d654 	.word	0x0002d654

0001c380 <smp_dhkey_check>:
{
   1c380:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1c382:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   1c386:	78dd      	ldrb	r5, [r3, #3]
{
   1c388:	b091      	sub	sp, #68	; 0x44
   1c38a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1c38c:	2d00      	cmp	r5, #0
   1c38e:	d165      	bne.n	1c45c <smp_dhkey_check+0xdc>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1c390:	688f      	ldr	r7, [r1, #8]
		(void)memset(r, 0, sizeof(r));
   1c392:	2210      	movs	r2, #16
   1c394:	4629      	mov	r1, r5
   1c396:	a80c      	add	r0, sp, #48	; 0x30
   1c398:	f00a fbe6 	bl	26b68 <memset>
		switch (smp->method) {
   1c39c:	7a22      	ldrb	r2, [r4, #8]
   1c39e:	2a05      	cmp	r2, #5
   1c3a0:	d84d      	bhi.n	1c43e <smp_dhkey_check+0xbe>
   1c3a2:	e8df f002 	tbb	[pc, r2]
   1c3a6:	0309      	.short	0x0309
   1c3a8:	464c0903 	.word	0x464c0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1c3ac:	2204      	movs	r2, #4
   1c3ae:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1c3b2:	a80c      	add	r0, sp, #48	; 0x30
   1c3b4:	f00a fbcd 	bl	26b52 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   1c3b8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			   &smp->chan.chan.conn->le.init_addr, e)) {
   1c3bc:	f103 0297 	add.w	r2, r3, #151	; 0x97
			   &smp->chan.chan.conn->le.resp_addr,
   1c3c0:	339e      	adds	r3, #158	; 0x9e
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   1c3c2:	ae08      	add	r6, sp, #32
   1c3c4:	9301      	str	r3, [sp, #4]
   1c3c6:	f104 0311 	add.w	r3, r4, #17
   1c3ca:	9202      	str	r2, [sp, #8]
   1c3cc:	9300      	str	r3, [sp, #0]
   1c3ce:	9603      	str	r6, [sp, #12]
   1c3d0:	ab0c      	add	r3, sp, #48	; 0x30
   1c3d2:	f104 0227 	add.w	r2, r4, #39	; 0x27
   1c3d6:	f104 0137 	add.w	r1, r4, #55	; 0x37
   1c3da:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   1c3de:	f00c fab3 	bl	28948 <smp_f6>
   1c3e2:	bb80      	cbnz	r0, 1c446 <smp_dhkey_check+0xc6>
		if (memcmp(e, req->e, 16)) {
   1c3e4:	4630      	mov	r0, r6
   1c3e6:	2210      	movs	r2, #16
   1c3e8:	4639      	mov	r1, r7
   1c3ea:	f00a fba1 	bl	26b30 <memcmp>
   1c3ee:	4606      	mov	r6, r0
   1c3f0:	bb90      	cbnz	r0, 1c458 <smp_dhkey_check+0xd8>
	return MIN(req->max_key_size, rsp->max_key_size);
   1c3f2:	7d23      	ldrb	r3, [r4, #20]
   1c3f4:	7b67      	ldrb	r7, [r4, #13]
		(void)memset(ediv, 0, sizeof(ediv));
   1c3f6:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   1c3f8:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   1c3fa:	f04f 0202 	mov.w	r2, #2
   1c3fe:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   1c400:	bf28      	it	cs
   1c402:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   1c404:	f00a fbb0 	bl	26b68 <memset>
		(void)memset(rand, 0, sizeof(rand));
   1c408:	2208      	movs	r2, #8
   1c40a:	4631      	mov	r1, r6
   1c40c:	a806      	add	r0, sp, #24
   1c40e:	f00a fbab 	bl	26b68 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   1c412:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1c416:	9700      	str	r7, [sp, #0]
   1c418:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1c41c:	aa05      	add	r2, sp, #20
   1c41e:	a906      	add	r1, sp, #24
   1c420:	f00a fe3c 	bl	2709c <bt_conn_le_start_encryption>
   1c424:	2800      	cmp	r0, #0
   1c426:	da10      	bge.n	1c44a <smp_dhkey_check+0xca>
			BT_ERR("Failed to start encryption");
   1c428:	480d      	ldr	r0, [pc, #52]	; (1c460 <smp_dhkey_check+0xe0>)
   1c42a:	2145      	movs	r1, #69	; 0x45
   1c42c:	f009 fbf1 	bl	25c12 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1c430:	e009      	b.n	1c446 <smp_dhkey_check+0xc6>
			if (smp->oobd_local) {
   1c432:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1c436:	2900      	cmp	r1, #0
   1c438:	d0be      	beq.n	1c3b8 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1c43a:	2210      	movs	r2, #16
   1c43c:	e7b9      	b.n	1c3b2 <smp_dhkey_check+0x32>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1c43e:	4809      	ldr	r0, [pc, #36]	; (1c464 <smp_dhkey_check+0xe4>)
   1c440:	2145      	movs	r1, #69	; 0x45
   1c442:	f009 fbe6 	bl	25c12 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1c446:	2508      	movs	r5, #8
   1c448:	e003      	b.n	1c452 <smp_dhkey_check+0xd2>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c44a:	2101      	movs	r1, #1
   1c44c:	1d20      	adds	r0, r4, #4
   1c44e:	f00c fb06 	bl	28a5e <atomic_set_bit>
}
   1c452:	4628      	mov	r0, r5
   1c454:	b011      	add	sp, #68	; 0x44
   1c456:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1c458:	250b      	movs	r5, #11
   1c45a:	e7fa      	b.n	1c452 <smp_dhkey_check+0xd2>
	return 0;
   1c45c:	2500      	movs	r5, #0
   1c45e:	e7f8      	b.n	1c452 <smp_dhkey_check+0xd2>
   1c460:	0002d69f 	.word	0x0002d69f
   1c464:	0002d67e 	.word	0x0002d67e

0001c468 <smp_dhkey_generate>:
{
   1c468:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1c46a:	1d05      	adds	r5, r0, #4
{
   1c46c:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1c46e:	2108      	movs	r1, #8
   1c470:	4628      	mov	r0, r5
   1c472:	f00c faf4 	bl	28a5e <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1c476:	4908      	ldr	r1, [pc, #32]	; (1c498 <smp_dhkey_generate+0x30>)
   1c478:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1c47c:	f7fb f940 	bl	17700 <bt_dh_key_gen>
	if (err) {
   1c480:	b140      	cbz	r0, 1c494 <smp_dhkey_generate+0x2c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1c482:	2108      	movs	r1, #8
   1c484:	4628      	mov	r0, r5
   1c486:	f00c fa09 	bl	2889c <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   1c48a:	4804      	ldr	r0, [pc, #16]	; (1c49c <smp_dhkey_generate+0x34>)
   1c48c:	2145      	movs	r1, #69	; 0x45
   1c48e:	f009 fbc0 	bl	25c12 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1c492:	2008      	movs	r0, #8
}
   1c494:	bd38      	pop	{r3, r4, r5, pc}
   1c496:	bf00      	nop
   1c498:	00028f5f 	.word	0x00028f5f
   1c49c:	0002d6bf 	.word	0x0002d6bf

0001c4a0 <smp_ident_info>:
{
   1c4a0:	b570      	push	{r4, r5, r6, lr}
   1c4a2:	460b      	mov	r3, r1
   1c4a4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c4a6:	210d      	movs	r1, #13
   1c4a8:	3004      	adds	r0, #4
   1c4aa:	f00c f9cd 	bl	28848 <atomic_test_bit>
   1c4ae:	b1c8      	cbz	r0, 1c4e4 <smp_ident_info+0x44>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1c4b0:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1c4b2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1c4b6:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1c4ba:	7a19      	ldrb	r1, [r3, #8]
   1c4bc:	462a      	mov	r2, r5
   1c4be:	2002      	movs	r0, #2
   1c4c0:	f00c fdd6 	bl	29070 <bt_keys_get_type>
		if (!keys) {
   1c4c4:	b948      	cbnz	r0, 1c4da <smp_ident_info+0x3a>
			BT_ERR("Unable to get keys for %s",
   1c4c6:	4628      	mov	r0, r5
   1c4c8:	f7f8 fcd4 	bl	14e74 <bt_addr_le_str_real>
   1c4cc:	2145      	movs	r1, #69	; 0x45
   1c4ce:	4602      	mov	r2, r0
   1c4d0:	4807      	ldr	r0, [pc, #28]	; (1c4f0 <smp_ident_info+0x50>)
   1c4d2:	f009 fb9e 	bl	25c12 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1c4d6:	2008      	movs	r0, #8
}
   1c4d8:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1c4da:	2210      	movs	r2, #16
   1c4dc:	4631      	mov	r1, r6
   1c4de:	302a      	adds	r0, #42	; 0x2a
   1c4e0:	f00a fb37 	bl	26b52 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1c4e4:	4620      	mov	r0, r4
   1c4e6:	2109      	movs	r1, #9
   1c4e8:	f00c fab9 	bl	28a5e <atomic_set_bit>
	return 0;
   1c4ec:	2000      	movs	r0, #0
   1c4ee:	e7f3      	b.n	1c4d8 <smp_ident_info+0x38>
   1c4f0:	0002d6dd 	.word	0x0002d6dd

0001c4f4 <smp_encrypt_info>:
{
   1c4f4:	b570      	push	{r4, r5, r6, lr}
   1c4f6:	460b      	mov	r3, r1
   1c4f8:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c4fa:	210d      	movs	r1, #13
   1c4fc:	3004      	adds	r0, #4
   1c4fe:	f00c f9a3 	bl	28848 <atomic_test_bit>
   1c502:	b1c8      	cbz	r0, 1c538 <smp_encrypt_info+0x44>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1c504:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1c506:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c50a:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1c50e:	7a19      	ldrb	r1, [r3, #8]
   1c510:	462a      	mov	r2, r5
   1c512:	2004      	movs	r0, #4
   1c514:	f00c fdac 	bl	29070 <bt_keys_get_type>
		if (!keys) {
   1c518:	b948      	cbnz	r0, 1c52e <smp_encrypt_info+0x3a>
			BT_ERR("Unable to get keys for %s",
   1c51a:	4628      	mov	r0, r5
   1c51c:	f7f8 fcaa 	bl	14e74 <bt_addr_le_str_real>
   1c520:	2145      	movs	r1, #69	; 0x45
   1c522:	4602      	mov	r2, r0
   1c524:	4807      	ldr	r0, [pc, #28]	; (1c544 <smp_encrypt_info+0x50>)
   1c526:	f009 fb74 	bl	25c12 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1c52a:	2008      	movs	r0, #8
}
   1c52c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1c52e:	2210      	movs	r2, #16
   1c530:	4631      	mov	r1, r6
   1c532:	301a      	adds	r0, #26
   1c534:	f00a fb0d 	bl	26b52 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1c538:	4620      	mov	r0, r4
   1c53a:	2107      	movs	r1, #7
   1c53c:	f00c fa8f 	bl	28a5e <atomic_set_bit>
	return 0;
   1c540:	2000      	movs	r0, #0
   1c542:	e7f3      	b.n	1c52c <smp_encrypt_info+0x38>
   1c544:	0002d6dd 	.word	0x0002d6dd

0001c548 <bt_smp_distribute_keys>:
{
   1c548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1c54c:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (!keys) {
   1c550:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
{
   1c554:	b088      	sub	sp, #32
   1c556:	4604      	mov	r4, r0
	if (!keys) {
   1c558:	b963      	cbnz	r3, 1c574 <bt_smp_distribute_keys+0x2c>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1c55a:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1c55e:	f7f8 fc89 	bl	14e74 <bt_addr_le_str_real>
   1c562:	2145      	movs	r1, #69	; 0x45
   1c564:	4602      	mov	r2, r0
   1c566:	485c      	ldr	r0, [pc, #368]	; (1c6d8 <bt_smp_distribute_keys+0x190>)
   1c568:	f009 fb53 	bl	25c12 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1c56c:	2008      	movs	r0, #8
}
   1c56e:	b008      	add	sp, #32
   1c570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c574:	f100 0804 	add.w	r8, r0, #4
   1c578:	2105      	movs	r1, #5
   1c57a:	4640      	mov	r0, r8
   1c57c:	f00c f964 	bl	28848 <atomic_test_bit>
   1c580:	b988      	cbnz	r0, 1c5a6 <bt_smp_distribute_keys+0x5e>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1c582:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1c586:	07db      	lsls	r3, r3, #31
   1c588:	d50d      	bpl.n	1c5a6 <bt_smp_distribute_keys+0x5e>
	struct bt_keys *keys = conn->le.keys;
   1c58a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1c58e:	211a      	movs	r1, #26
   1c590:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1c592:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1c596:	f004 f805 	bl	205a4 <bt_rand>
   1c59a:	4681      	mov	r9, r0
   1c59c:	b1a0      	cbz	r0, 1c5c8 <bt_smp_distribute_keys+0x80>
			BT_ERR("Unable to get random bytes");
   1c59e:	484f      	ldr	r0, [pc, #316]	; (1c6dc <bt_smp_distribute_keys+0x194>)
   1c5a0:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1c5a2:	f009 fb36 	bl	25c12 <z_log_minimal_printk>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   1c5a6:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
   1c5aa:	f010 0002 	ands.w	r0, r0, #2
   1c5ae:	d0de      	beq.n	1c56e <bt_smp_distribute_keys+0x26>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1c5b0:	2108      	movs	r1, #8
   1c5b2:	4620      	mov	r0, r4
   1c5b4:	f00c fa67 	bl	28a86 <smp_create_pdu.constprop.0>
		if (!buf) {
   1c5b8:	4605      	mov	r5, r0
   1c5ba:	2800      	cmp	r0, #0
   1c5bc:	d15e      	bne.n	1c67c <bt_smp_distribute_keys+0x134>
			BT_ERR("Unable to allocate Ident Info buffer");
   1c5be:	4848      	ldr	r0, [pc, #288]	; (1c6e0 <bt_smp_distribute_keys+0x198>)
   1c5c0:	2145      	movs	r1, #69	; 0x45
   1c5c2:	f009 fb26 	bl	25c12 <z_log_minimal_printk>
   1c5c6:	e7d1      	b.n	1c56c <bt_smp_distribute_keys+0x24>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1c5c8:	2106      	movs	r1, #6
   1c5ca:	4620      	mov	r0, r4
   1c5cc:	f00c fa5b 	bl	28a86 <smp_create_pdu.constprop.0>
		if (!buf) {
   1c5d0:	4607      	mov	r7, r0
   1c5d2:	b910      	cbnz	r0, 1c5da <bt_smp_distribute_keys+0x92>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1c5d4:	4843      	ldr	r0, [pc, #268]	; (1c6e4 <bt_smp_distribute_keys+0x19c>)
   1c5d6:	2145      	movs	r1, #69	; 0x45
   1c5d8:	e7e3      	b.n	1c5a2 <bt_smp_distribute_keys+0x5a>
   1c5da:	2110      	movs	r1, #16
   1c5dc:	3008      	adds	r0, #8
   1c5de:	f001 ff83 	bl	1e4e8 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1c5e2:	7b2a      	ldrb	r2, [r5, #12]
   1c5e4:	a901      	add	r1, sp, #4
   1c5e6:	4682      	mov	sl, r0
   1c5e8:	f00a fab3 	bl	26b52 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1c5ec:	7b28      	ldrb	r0, [r5, #12]
   1c5ee:	280f      	cmp	r0, #15
   1c5f0:	d805      	bhi.n	1c5fe <bt_smp_distribute_keys+0xb6>
			(void)memset(info->ltk + keys->enc_size, 0,
   1c5f2:	f1c0 0210 	rsb	r2, r0, #16
   1c5f6:	4649      	mov	r1, r9
   1c5f8:	4450      	add	r0, sl
   1c5fa:	f00a fab5 	bl	26b68 <memset>
		smp_send(smp, buf, NULL, NULL);
   1c5fe:	4639      	mov	r1, r7
   1c600:	2200      	movs	r2, #0
   1c602:	4620      	mov	r0, r4
   1c604:	f00c f975 	bl	288f2 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1c608:	2107      	movs	r1, #7
   1c60a:	4620      	mov	r0, r4
   1c60c:	f00c fa3b 	bl	28a86 <smp_create_pdu.constprop.0>
		if (!buf) {
   1c610:	4607      	mov	r7, r0
   1c612:	b910      	cbnz	r0, 1c61a <bt_smp_distribute_keys+0xd2>
			BT_ERR("Unable to allocate Central Ident buffer");
   1c614:	4834      	ldr	r0, [pc, #208]	; (1c6e8 <bt_smp_distribute_keys+0x1a0>)
   1c616:	2145      	movs	r1, #69	; 0x45
   1c618:	e7c3      	b.n	1c5a2 <bt_smp_distribute_keys+0x5a>
   1c61a:	210a      	movs	r1, #10
   1c61c:	3008      	adds	r0, #8
   1c61e:	f001 ff63 	bl	1e4e8 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1c622:	2208      	movs	r2, #8
   1c624:	4681      	mov	r9, r0
   1c626:	a905      	add	r1, sp, #20
   1c628:	3002      	adds	r0, #2
   1c62a:	f00a fa92 	bl	26b52 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1c62e:	2202      	movs	r2, #2
   1c630:	a907      	add	r1, sp, #28
   1c632:	4648      	mov	r0, r9
   1c634:	f00a fa8d 	bl	26b52 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1c638:	4639      	mov	r1, r7
   1c63a:	4620      	mov	r0, r4
   1c63c:	4a2b      	ldr	r2, [pc, #172]	; (1c6ec <bt_smp_distribute_keys+0x1a4>)
   1c63e:	f00c f958 	bl	288f2 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c642:	210d      	movs	r1, #13
   1c644:	4640      	mov	r0, r8
   1c646:	f00c f8ff 	bl	28848 <atomic_test_bit>
   1c64a:	2800      	cmp	r0, #0
   1c64c:	d0ab      	beq.n	1c5a6 <bt_smp_distribute_keys+0x5e>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1c64e:	4628      	mov	r0, r5
   1c650:	2101      	movs	r1, #1
   1c652:	f00c fd1d 	bl	29090 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1c656:	a901      	add	r1, sp, #4
   1c658:	2210      	movs	r2, #16
   1c65a:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   1c65e:	f00a fa78 	bl	26b52 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1c662:	a905      	add	r1, sp, #20
   1c664:	2208      	movs	r2, #8
   1c666:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1c66a:	f00a fa72 	bl	26b52 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1c66e:	2202      	movs	r2, #2
   1c670:	a907      	add	r1, sp, #28
   1c672:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1c676:	f00a fa6c 	bl	26b52 <memcpy>
   1c67a:	e794      	b.n	1c5a6 <bt_smp_distribute_keys+0x5e>
   1c67c:	2110      	movs	r1, #16
   1c67e:	3008      	adds	r0, #8
   1c680:	f001 ff32 	bl	1e4e8 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1c684:	7a31      	ldrb	r1, [r6, #8]
   1c686:	4f1a      	ldr	r7, [pc, #104]	; (1c6f0 <bt_smp_distribute_keys+0x1a8>)
   1c688:	0109      	lsls	r1, r1, #4
   1c68a:	f501 71b2 	add.w	r1, r1, #356	; 0x164
   1c68e:	2210      	movs	r2, #16
   1c690:	4439      	add	r1, r7
   1c692:	f00a fa5e 	bl	26b52 <memcpy>
		smp_send(smp, buf, NULL, NULL);
   1c696:	4629      	mov	r1, r5
   1c698:	2200      	movs	r2, #0
   1c69a:	4620      	mov	r0, r4
   1c69c:	f00c f929 	bl	288f2 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   1c6a0:	2109      	movs	r1, #9
   1c6a2:	4620      	mov	r0, r4
   1c6a4:	f00c f9ef 	bl	28a86 <smp_create_pdu.constprop.0>
		if (!buf) {
   1c6a8:	4605      	mov	r5, r0
   1c6aa:	b910      	cbnz	r0, 1c6b2 <bt_smp_distribute_keys+0x16a>
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   1c6ac:	4811      	ldr	r0, [pc, #68]	; (1c6f4 <bt_smp_distribute_keys+0x1ac>)
   1c6ae:	2145      	movs	r1, #69	; 0x45
   1c6b0:	e787      	b.n	1c5c2 <bt_smp_distribute_keys+0x7a>
   1c6b2:	2107      	movs	r1, #7
   1c6b4:	3008      	adds	r0, #8
   1c6b6:	f001 ff17 	bl	1e4e8 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1c6ba:	7a31      	ldrb	r1, [r6, #8]
   1c6bc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	memcpy(dst, src, sizeof(*dst));
   1c6c0:	2207      	movs	r2, #7
   1c6c2:	4439      	add	r1, r7
   1c6c4:	f00a fa45 	bl	26b52 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1c6c8:	4620      	mov	r0, r4
   1c6ca:	4a0b      	ldr	r2, [pc, #44]	; (1c6f8 <bt_smp_distribute_keys+0x1b0>)
   1c6cc:	4629      	mov	r1, r5
   1c6ce:	f00c f910 	bl	288f2 <smp_send.constprop.0>
	return 0;
   1c6d2:	2000      	movs	r0, #0
   1c6d4:	e74b      	b.n	1c56e <bt_smp_distribute_keys+0x26>
   1c6d6:	bf00      	nop
   1c6d8:	0002d6fc 	.word	0x0002d6fc
   1c6dc:	0002d716 	.word	0x0002d716
   1c6e0:	0002d78f 	.word	0x0002d78f
   1c6e4:	0002d736 	.word	0x0002d736
   1c6e8:	0002d762 	.word	0x0002d762
   1c6ec:	00028feb 	.word	0x00028feb
   1c6f0:	20000340 	.word	0x20000340
   1c6f4:	0002d7b9 	.word	0x0002d7b9
   1c6f8:	00028ff9 	.word	0x00028ff9

0001c6fc <smp_send_pairing_req>:
{
   1c6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c700:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
   1c702:	f7ff fe11 	bl	1c328 <smp_chan_get>
	if (!smp) {
   1c706:	4605      	mov	r5, r0
   1c708:	2800      	cmp	r0, #0
   1c70a:	f000 80c4 	beq.w	1c896 <smp_send_pairing_req+0x19a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c70e:	1d07      	adds	r7, r0, #4
   1c710:	2104      	movs	r1, #4
   1c712:	4638      	mov	r0, r7
   1c714:	f00c f898 	bl	28848 <atomic_test_bit>
   1c718:	4604      	mov	r4, r0
   1c71a:	2800      	cmp	r0, #0
   1c71c:	f040 80be 	bne.w	1c89c <smp_send_pairing_req+0x1a0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c720:	2102      	movs	r1, #2
   1c722:	4638      	mov	r0, r7
   1c724:	f00c f890 	bl	28848 <atomic_test_bit>
   1c728:	b930      	cbnz	r0, 1c738 <smp_send_pairing_req+0x3c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c72a:	2103      	movs	r1, #3
   1c72c:	4638      	mov	r0, r7
   1c72e:	f00c f88b 	bl	28848 <atomic_test_bit>
   1c732:	b120      	cbz	r0, 1c73e <smp_send_pairing_req+0x42>
		return -EBUSY;
   1c734:	f06f 040f 	mvn.w	r4, #15
}
   1c738:	4620      	mov	r0, r4
   1c73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c73e:	2101      	movs	r1, #1
   1c740:	4638      	mov	r0, r7
   1c742:	f00c f881 	bl	28848 <atomic_test_bit>
   1c746:	2800      	cmp	r0, #0
   1c748:	d1f4      	bne.n	1c734 <smp_send_pairing_req+0x38>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c74a:	4628      	mov	r0, r5
   1c74c:	f7ff fd84 	bl	1c258 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1c750:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1c754:	7a9b      	ldrb	r3, [r3, #10]
   1c756:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c758:	4604      	mov	r4, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1c75a:	d015      	beq.n	1c788 <smp_send_pairing_req+0x8c>
   1c75c:	d805      	bhi.n	1c76a <smp_send_pairing_req+0x6e>
   1c75e:	3b01      	subs	r3, #1
   1c760:	2b01      	cmp	r3, #1
   1c762:	d91d      	bls.n	1c7a0 <smp_send_pairing_req+0xa4>
		return -EINVAL;
   1c764:	f06f 0415 	mvn.w	r4, #21
   1c768:	e7e6      	b.n	1c738 <smp_send_pairing_req+0x3c>
	switch (smp->chan.chan.conn->required_sec_level) {
   1c76a:	2b04      	cmp	r3, #4
   1c76c:	d1fa      	bne.n	1c764 <smp_send_pairing_req+0x68>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c76e:	4628      	mov	r0, r5
   1c770:	f7ff fd90 	bl	1c294 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1c774:	2803      	cmp	r0, #3
   1c776:	d102      	bne.n	1c77e <smp_send_pairing_req+0x82>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c778:	b334      	cbz	r4, 1c7c8 <smp_send_pairing_req+0xcc>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1c77a:	68e4      	ldr	r4, [r4, #12]
   1c77c:	b10c      	cbz	r4, 1c782 <smp_send_pairing_req+0x86>
   1c77e:	4b49      	ldr	r3, [pc, #292]	; (1c8a4 <smp_send_pairing_req+0x1a8>)
   1c780:	781c      	ldrb	r4, [r3, #0]
   1c782:	f004 0401 	and.w	r4, r4, #1
   1c786:	e009      	b.n	1c79c <smp_send_pairing_req+0xa0>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c788:	4628      	mov	r0, r5
   1c78a:	f7ff fd83 	bl	1c294 <get_io_capa>
   1c78e:	2803      	cmp	r0, #3
   1c790:	d118      	bne.n	1c7c4 <smp_send_pairing_req+0xc8>
   1c792:	b11c      	cbz	r4, 1c79c <smp_send_pairing_req+0xa0>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1c794:	68e4      	ldr	r4, [r4, #12]
   1c796:	3c00      	subs	r4, #0
   1c798:	bf18      	it	ne
   1c79a:	2401      	movne	r4, #1
	if (!sec_level_reachable(smp)) {
   1c79c:	2c00      	cmp	r4, #0
   1c79e:	d0e1      	beq.n	1c764 <smp_send_pairing_req+0x68>
	if (!conn->le.keys) {
   1c7a0:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1c7a4:	b193      	cbz	r3, 1c7cc <smp_send_pairing_req+0xd0>
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1c7a6:	22ec      	movs	r2, #236	; 0xec
   1c7a8:	2100      	movs	r1, #0
   1c7aa:	4628      	mov	r0, r5
   1c7ac:	f00a f9dc 	bl	26b68 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1c7b0:	2110      	movs	r1, #16
   1c7b2:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1c7b6:	f003 fef5 	bl	205a4 <bt_rand>
   1c7ba:	4604      	mov	r4, r0
   1c7bc:	b190      	cbz	r0, 1c7e4 <smp_send_pairing_req+0xe8>
		return -ENOBUFS;
   1c7be:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1c7c2:	e7b9      	b.n	1c738 <smp_send_pairing_req+0x3c>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c7c4:	2401      	movs	r4, #1
   1c7c6:	e7e9      	b.n	1c79c <smp_send_pairing_req+0xa0>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1c7c8:	2400      	movs	r4, #0
   1c7ca:	e7da      	b.n	1c782 <smp_send_pairing_req+0x86>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c7cc:	7a30      	ldrb	r0, [r6, #8]
   1c7ce:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1c7d2:	f001 f977 	bl	1dac4 <bt_keys_get_addr>
   1c7d6:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
		if (!conn->le.keys) {
   1c7da:	2800      	cmp	r0, #0
   1c7dc:	d1e3      	bne.n	1c7a6 <smp_send_pairing_req+0xaa>
			return -ENOMEM;
   1c7de:	f06f 040b 	mvn.w	r4, #11
   1c7e2:	e7a9      	b.n	1c738 <smp_send_pairing_req+0x3c>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1c7e4:	2105      	movs	r1, #5
   1c7e6:	4628      	mov	r0, r5
   1c7e8:	f00c f939 	bl	28a5e <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1c7ec:	f7fa ff78 	bl	176e0 <bt_pub_key_get>
   1c7f0:	4b2d      	ldr	r3, [pc, #180]	; (1c8a8 <smp_send_pairing_req+0x1ac>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1c7f2:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
   1c7f4:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1c7f6:	4628      	mov	r0, r5
   1c7f8:	f00c f945 	bl	28a86 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1c7fc:	4681      	mov	r9, r0
   1c7fe:	2800      	cmp	r0, #0
   1c800:	d0dd      	beq.n	1c7be <smp_send_pairing_req+0xc2>
   1c802:	2106      	movs	r1, #6
   1c804:	3008      	adds	r0, #8
   1c806:	f001 fe6f 	bl	1e4e8 <net_buf_simple_add>
	if (sc_supported) {
   1c80a:	4b26      	ldr	r3, [pc, #152]	; (1c8a4 <smp_send_pairing_req+0x1a8>)
   1c80c:	781b      	ldrb	r3, [r3, #0]
   1c80e:	4606      	mov	r6, r0
		auth &= BT_SMP_AUTH_MASK;
   1c810:	2b00      	cmp	r3, #0
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1c812:	4628      	mov	r0, r5
		auth &= BT_SMP_AUTH_MASK;
   1c814:	bf14      	ite	ne
   1c816:	f04f 0809 	movne.w	r8, #9
   1c81a:	f04f 0801 	moveq.w	r8, #1
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1c81e:	f7ff fd39 	bl	1c294 <get_io_capa>
	if (bondable) {
   1c822:	4b22      	ldr	r3, [pc, #136]	; (1c8ac <smp_send_pairing_req+0x1b0>)
   1c824:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1c826:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
   1c828:	bf18      	it	ne
   1c82a:	f048 0804 	orrne.w	r8, r8, #4
	if (bondable) {
   1c82e:	b37b      	cbz	r3, 1c890 <smp_send_pairing_req+0x194>
		auth |= BT_SMP_AUTH_BONDING;
   1c830:	f048 0801 	orr.w	r8, r8, #1
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1c834:	f886 8002 	strb.w	r8, [r6, #2]
	req->io_capability = get_io_capa(smp);
   1c838:	4628      	mov	r0, r5
   1c83a:	f7ff fd2b 	bl	1c294 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1c83e:	4b1c      	ldr	r3, [pc, #112]	; (1c8b0 <smp_send_pairing_req+0x1b4>)
	req->io_capability = get_io_capa(smp);
   1c840:	7030      	strb	r0, [r6, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1c842:	781b      	ldrb	r3, [r3, #0]
   1c844:	7073      	strb	r3, [r6, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1c846:	2310      	movs	r3, #16
   1c848:	70f3      	strb	r3, [r6, #3]
	req->init_key_dist = SEND_KEYS;
   1c84a:	f04f 0803 	mov.w	r8, #3
	smp->local_dist = SEND_KEYS;
   1c84e:	f240 3303 	movw	r3, #771	; 0x303
	req->init_key_dist = SEND_KEYS;
   1c852:	f886 8004 	strb.w	r8, [r6, #4]
	req->resp_key_dist = RECV_KEYS;
   1c856:	f886 8005 	strb.w	r8, [r6, #5]
	smp->local_dist = SEND_KEYS;
   1c85a:	f8a5 30e8 	strh.w	r3, [r5, #232]	; 0xe8
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1c85e:	2301      	movs	r3, #1
   1c860:	726b      	strb	r3, [r5, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1c862:	4631      	mov	r1, r6
   1c864:	2206      	movs	r2, #6
   1c866:	f105 000a 	add.w	r0, r5, #10
   1c86a:	f00a f972 	bl	26b52 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1c86e:	2200      	movs	r2, #0
   1c870:	4649      	mov	r1, r9
   1c872:	4628      	mov	r0, r5
   1c874:	f00c f83d 	bl	288f2 <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   1c878:	4628      	mov	r0, r5
   1c87a:	2102      	movs	r1, #2
   1c87c:	f00c f8ef 	bl	28a5e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1c880:	210b      	movs	r1, #11
   1c882:	f00c f8ec 	bl	28a5e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1c886:	4641      	mov	r1, r8
   1c888:	4638      	mov	r0, r7
   1c88a:	f00c f8e8 	bl	28a5e <atomic_set_bit>
	return 0;
   1c88e:	e753      	b.n	1c738 <smp_send_pairing_req+0x3c>
		auth &= ~BT_SMP_AUTH_BONDING;
   1c890:	f008 080c 	and.w	r8, r8, #12
   1c894:	e7ce      	b.n	1c834 <smp_send_pairing_req+0x138>
		return -ENOTCONN;
   1c896:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1c89a:	e74d      	b.n	1c738 <smp_send_pairing_req+0x3c>
		return -EIO;
   1c89c:	f06f 0404 	mvn.w	r4, #4
   1c8a0:	e74a      	b.n	1c738 <smp_send_pairing_req+0x3c>
   1c8a2:	bf00      	nop
   1c8a4:	200028d7 	.word	0x200028d7
   1c8a8:	200024c8 	.word	0x200024c8
   1c8ac:	200007a3 	.word	0x200007a3
   1c8b0:	200028d6 	.word	0x200028d6

0001c8b4 <smp_security_request>:
{
   1c8b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c8b8:	1d06      	adds	r6, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   1c8ba:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	struct bt_smp_security_request *req = (void *)buf->data;
   1c8be:	688b      	ldr	r3, [r1, #8]
{
   1c8c0:	4607      	mov	r7, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c8c2:	2102      	movs	r1, #2
   1c8c4:	4630      	mov	r0, r6
   1c8c6:	f00b ffbf 	bl	28848 <atomic_test_bit>
   1c8ca:	b118      	cbz	r0, 1c8d4 <smp_security_request+0x20>
	return 0;
   1c8cc:	2000      	movs	r0, #0
}
   1c8ce:	b002      	add	sp, #8
   1c8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c8d4:	2103      	movs	r1, #3
   1c8d6:	4630      	mov	r0, r6
   1c8d8:	f00b ffb6 	bl	28848 <atomic_test_bit>
   1c8dc:	2800      	cmp	r0, #0
   1c8de:	d1f5      	bne.n	1c8cc <smp_security_request+0x18>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c8e0:	2101      	movs	r1, #1
   1c8e2:	4630      	mov	r0, r6
   1c8e4:	f00b ffb0 	bl	28848 <atomic_test_bit>
   1c8e8:	2800      	cmp	r0, #0
   1c8ea:	d1ef      	bne.n	1c8cc <smp_security_request+0x18>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   1c8ec:	781d      	ldrb	r5, [r3, #0]
	if (sc_supported) {
   1c8ee:	4b2e      	ldr	r3, [pc, #184]	; (1c9a8 <smp_security_request+0xf4>)
   1c8f0:	781b      	ldrb	r3, [r3, #0]
   1c8f2:	b17b      	cbz	r3, 1c914 <smp_security_request+0x60>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   1c8f4:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
   1c8f8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1c8fc:	b16b      	cbz	r3, 1c91a <smp_security_request+0x66>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1c8fe:	89db      	ldrh	r3, [r3, #14]
   1c900:	f003 0324 	and.w	r3, r3, #36	; 0x24
   1c904:	b9d3      	cbnz	r3, 1c93c <smp_security_request+0x88>
	if (smp_send_pairing_req(conn) < 0) {
   1c906:	4620      	mov	r0, r4
   1c908:	f7ff fef8 	bl	1c6fc <smp_send_pairing_req>
   1c90c:	2800      	cmp	r0, #0
   1c90e:	db43      	blt.n	1c998 <smp_security_request+0xe4>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1c910:	210f      	movs	r1, #15
   1c912:	e044      	b.n	1c99e <smp_security_request+0xea>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   1c914:	f005 0507 	and.w	r5, r5, #7
   1c918:	e7ee      	b.n	1c8f8 <smp_security_request+0x44>
					     &conn->le.dst);
   1c91a:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1c91e:	7a21      	ldrb	r1, [r4, #8]
   1c920:	4642      	mov	r2, r8
   1c922:	2020      	movs	r0, #32
   1c924:	f001 f90e 	bl	1db44 <bt_keys_find>
   1c928:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   1c92c:	b930      	cbnz	r0, 1c93c <smp_security_request+0x88>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   1c92e:	7a21      	ldrb	r1, [r4, #8]
   1c930:	4642      	mov	r2, r8
   1c932:	2004      	movs	r0, #4
   1c934:	f001 f906 	bl	1db44 <bt_keys_find>
   1c938:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1c93c:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   1c940:	2900      	cmp	r1, #0
   1c942:	d0e0      	beq.n	1c906 <smp_security_request+0x52>
	if ((auth & BT_SMP_AUTH_MITM) &&
   1c944:	076b      	lsls	r3, r5, #29
   1c946:	d510      	bpl.n	1c96a <smp_security_request+0xb6>
   1c948:	7b4b      	ldrb	r3, [r1, #13]
   1c94a:	07d8      	lsls	r0, r3, #31
   1c94c:	d40d      	bmi.n	1c96a <smp_security_request+0xb6>
		if (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1c94e:	4638      	mov	r0, r7
   1c950:	f7ff fca0 	bl	1c294 <get_io_capa>
   1c954:	2803      	cmp	r0, #3
			BT_INFO("New auth requirements: 0x%x, repairing",
   1c956:	462a      	mov	r2, r5
		if (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1c958:	d002      	beq.n	1c960 <smp_security_request+0xac>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   1c95a:	4814      	ldr	r0, [pc, #80]	; (1c9ac <smp_security_request+0xf8>)
   1c95c:	2149      	movs	r1, #73	; 0x49
   1c95e:	e001      	b.n	1c964 <smp_security_request+0xb0>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
   1c960:	4813      	ldr	r0, [pc, #76]	; (1c9b0 <smp_security_request+0xfc>)
   1c962:	2157      	movs	r1, #87	; 0x57
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   1c964:	f009 f955 	bl	25c12 <z_log_minimal_printk>
		goto pair;
   1c968:	e7cd      	b.n	1c906 <smp_security_request+0x52>
	if ((auth & BT_SMP_AUTH_SC) &&
   1c96a:	072a      	lsls	r2, r5, #28
   1c96c:	d504      	bpl.n	1c978 <smp_security_request+0xc4>
   1c96e:	89cb      	ldrh	r3, [r1, #14]
   1c970:	069b      	lsls	r3, r3, #26
   1c972:	d401      	bmi.n	1c978 <smp_security_request+0xc4>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   1c974:	462a      	mov	r2, r5
   1c976:	e7f0      	b.n	1c95a <smp_security_request+0xa6>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   1c978:	7b0b      	ldrb	r3, [r1, #12]
   1c97a:	9300      	str	r3, [sp, #0]
   1c97c:	f101 0218 	add.w	r2, r1, #24
   1c980:	f101 031a 	add.w	r3, r1, #26
   1c984:	4620      	mov	r0, r4
   1c986:	3110      	adds	r1, #16
   1c988:	f00a fb88 	bl	2709c <bt_conn_le_start_encryption>
   1c98c:	2800      	cmp	r0, #0
   1c98e:	da05      	bge.n	1c99c <smp_security_request+0xe8>
		BT_ERR("Failed to start encryption");
   1c990:	4808      	ldr	r0, [pc, #32]	; (1c9b4 <smp_security_request+0x100>)
   1c992:	2145      	movs	r1, #69	; 0x45
   1c994:	f009 f93d 	bl	25c12 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1c998:	2008      	movs	r0, #8
   1c99a:	e798      	b.n	1c8ce <smp_security_request+0x1a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c99c:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1c99e:	4630      	mov	r0, r6
   1c9a0:	f00c f85d 	bl	28a5e <atomic_set_bit>
   1c9a4:	e792      	b.n	1c8cc <smp_security_request+0x18>
   1c9a6:	bf00      	nop
   1c9a8:	200028d7 	.word	0x200028d7
   1c9ac:	0002d7e8 	.word	0x0002d7e8
   1c9b0:	0002d814 	.word	0x0002d814
   1c9b4:	0002d69f 	.word	0x0002d69f

0001c9b8 <smp_send_pairing_confirm>:
{
   1c9b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1c9ba:	7a04      	ldrb	r4, [r0, #8]
   1c9bc:	2c02      	cmp	r4, #2
{
   1c9be:	4605      	mov	r5, r0
	switch (smp->method) {
   1c9c0:	d823      	bhi.n	1ca0a <smp_send_pairing_confirm+0x52>
   1c9c2:	b144      	cbz	r4, 1c9d6 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c9c4:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   1c9c8:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1c9cc:	40d4      	lsrs	r4, r2
   1c9ce:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1c9d2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1c9d6:	2103      	movs	r1, #3
   1c9d8:	4628      	mov	r0, r5
   1c9da:	f00c f854 	bl	28a86 <smp_create_pdu.constprop.0>
	if (!buf) {
   1c9de:	4606      	mov	r6, r0
   1c9e0:	b1d0      	cbz	r0, 1ca18 <smp_send_pairing_confirm+0x60>
   1c9e2:	2110      	movs	r1, #16
   1c9e4:	3008      	adds	r0, #8
   1c9e6:	f001 fd7f 	bl	1e4e8 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1c9ea:	9000      	str	r0, [sp, #0]
   1c9ec:	4812      	ldr	r0, [pc, #72]	; (1ca38 <smp_send_pairing_confirm+0x80>)
   1c9ee:	4623      	mov	r3, r4
   1c9f0:	6800      	ldr	r0, [r0, #0]
   1c9f2:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1c9f6:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1c9fa:	f00b fff1 	bl	289e0 <smp_f4>
   1c9fe:	4604      	mov	r4, r0
   1ca00:	b170      	cbz	r0, 1ca20 <smp_send_pairing_confirm+0x68>
		net_buf_unref(buf);
   1ca02:	4630      	mov	r0, r6
   1ca04:	f001 fc5a 	bl	1e2bc <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1ca08:	e006      	b.n	1ca18 <smp_send_pairing_confirm+0x60>
	switch (smp->method) {
   1ca0a:	2c03      	cmp	r4, #3
   1ca0c:	d006      	beq.n	1ca1c <smp_send_pairing_confirm+0x64>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1ca0e:	480b      	ldr	r0, [pc, #44]	; (1ca3c <smp_send_pairing_confirm+0x84>)
   1ca10:	4622      	mov	r2, r4
   1ca12:	2145      	movs	r1, #69	; 0x45
   1ca14:	f009 f8fd 	bl	25c12 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1ca18:	2008      	movs	r0, #8
   1ca1a:	e00b      	b.n	1ca34 <smp_send_pairing_confirm+0x7c>
	switch (smp->method) {
   1ca1c:	2400      	movs	r4, #0
   1ca1e:	e7da      	b.n	1c9d6 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   1ca20:	4602      	mov	r2, r0
   1ca22:	4631      	mov	r1, r6
   1ca24:	4628      	mov	r0, r5
   1ca26:	f00b ff64 	bl	288f2 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1ca2a:	1d28      	adds	r0, r5, #4
   1ca2c:	4621      	mov	r1, r4
   1ca2e:	f00b ff35 	bl	2889c <atomic_clear_bit>
	return 0;
   1ca32:	4620      	mov	r0, r4
}
   1ca34:	b002      	add	sp, #8
   1ca36:	bd70      	pop	{r4, r5, r6, pc}
   1ca38:	200024c8 	.word	0x200024c8
   1ca3c:	0002d67e 	.word	0x0002d67e

0001ca40 <smp_public_key>:
{
   1ca40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ca42:	460e      	mov	r6, r1
   1ca44:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ca46:	f7ff fc07 	bl	1c258 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1ca4a:	68b6      	ldr	r6, [r6, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1ca4c:	f104 0757 	add.w	r7, r4, #87	; 0x57
   1ca50:	2220      	movs	r2, #32
   1ca52:	4631      	mov	r1, r6
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ca54:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1ca56:	4638      	mov	r0, r7
   1ca58:	f00a f87b 	bl	26b52 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1ca5c:	2220      	movs	r2, #32
   1ca5e:	18b1      	adds	r1, r6, r2
   1ca60:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1ca64:	f00a f875 	bl	26b52 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1ca68:	4638      	mov	r0, r7
   1ca6a:	f7fa fdb1 	bl	175d0 <bt_pub_key_is_debug>
   1ca6e:	b9b8      	cbnz	r0, 1caa0 <smp_public_key+0x60>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1ca70:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1ca74:	78db      	ldrb	r3, [r3, #3]
   1ca76:	2b00      	cmp	r3, #0
   1ca78:	d135      	bne.n	1cae6 <smp_public_key+0xa6>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ca7a:	1d26      	adds	r6, r4, #4
   1ca7c:	210e      	movs	r1, #14
   1ca7e:	4630      	mov	r0, r6
   1ca80:	f00b fee2 	bl	28848 <atomic_test_bit>
   1ca84:	bb88      	cbnz	r0, 1caea <smp_public_key+0xaa>
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1ca86:	4b60      	ldr	r3, [pc, #384]	; (1cc08 <smp_public_key+0x1c8>)
   1ca88:	2220      	movs	r2, #32
   1ca8a:	6819      	ldr	r1, [r3, #0]
   1ca8c:	4638      	mov	r0, r7
   1ca8e:	f00a f84f 	bl	26b30 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ca92:	bb50      	cbnz	r0, 1caea <smp_public_key+0xaa>
			BT_WARN("Remote public key rejected");
   1ca94:	485d      	ldr	r0, [pc, #372]	; (1cc0c <smp_public_key+0x1cc>)
   1ca96:	2157      	movs	r1, #87	; 0x57
   1ca98:	f009 f8bb 	bl	25c12 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1ca9c:	2008      	movs	r0, #8
   1ca9e:	e020      	b.n	1cae2 <smp_public_key+0xa2>
		BT_INFO("Remote is using Debug Public key");
   1caa0:	485b      	ldr	r0, [pc, #364]	; (1cc10 <smp_public_key+0x1d0>)
   1caa2:	2149      	movs	r1, #73	; 0x49
   1caa4:	f009 f8b5 	bl	25c12 <z_log_minimal_printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1caa8:	210e      	movs	r1, #14
   1caaa:	1d20      	adds	r0, r4, #4
   1caac:	f00b ffd7 	bl	28a5e <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1cab0:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1cab4:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1cab8:	b933      	cbnz	r3, 1cac8 <smp_public_key+0x88>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1caba:	7a30      	ldrb	r0, [r6, #8]
   1cabc:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1cac0:	f001 f800 	bl	1dac4 <bt_keys_get_addr>
   1cac4:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
	if (!conn->le.keys ||
   1cac8:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1cacc:	2b00      	cmp	r3, #0
   1cace:	d0cf      	beq.n	1ca70 <smp_public_key+0x30>
   1cad0:	89da      	ldrh	r2, [r3, #14]
   1cad2:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1cad6:	2a00      	cmp	r2, #0
   1cad8:	d0ca      	beq.n	1ca70 <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1cada:	7b5b      	ldrb	r3, [r3, #13]
   1cadc:	0799      	lsls	r1, r3, #30
   1cade:	d4c7      	bmi.n	1ca70 <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1cae0:	2003      	movs	r0, #3
}
   1cae2:	b003      	add	sp, #12
   1cae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   1cae6:	2000      	movs	r0, #0
   1cae8:	e7fb      	b.n	1cae2 <smp_public_key+0xa2>
		switch (smp->method) {
   1caea:	7a22      	ldrb	r2, [r4, #8]
   1caec:	2a05      	cmp	r2, #5
   1caee:	d87e      	bhi.n	1cbee <smp_public_key+0x1ae>
   1caf0:	e8df f002 	tbb	[pc, r2]
   1caf4:	03084603 	.word	0x03084603
   1caf8:	507d      	.short	0x507d
			atomic_set_bit(smp->allowed_cmds,
   1cafa:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   1cafc:	4620      	mov	r0, r4
   1cafe:	f00b ffae 	bl	28a5e <atomic_set_bit>
			break;
   1cb02:	e02e      	b.n	1cb62 <smp_public_key+0x122>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cb04:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1cb06:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cb0a:	f7ff fba5 	bl	1c258 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1cb0e:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cb10:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1cb12:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1cb16:	f003 fd45 	bl	205a4 <bt_rand>
   1cb1a:	2800      	cmp	r0, #0
   1cb1c:	d1be      	bne.n	1ca9c <smp_public_key+0x5c>
		smp->passkey %= 1000000;
   1cb1e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1cb22:	4a3c      	ldr	r2, [pc, #240]	; (1cc14 <smp_public_key+0x1d4>)
   1cb24:	fbb3 f1f2 	udiv	r1, r3, r2
   1cb28:	fb02 3311 	mls	r3, r2, r1, r3
   1cb2c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1cb30:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1cb34:	b155      	cbz	r5, 1cb4c <smp_public_key+0x10c>
   1cb36:	682b      	ldr	r3, [r5, #0]
   1cb38:	b143      	cbz	r3, 1cb4c <smp_public_key+0x10c>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1cb3a:	210b      	movs	r1, #11
   1cb3c:	4630      	mov	r0, r6
   1cb3e:	f00b ff8e 	bl	28a5e <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1cb42:	682b      	ldr	r3, [r5, #0]
   1cb44:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1cb48:	4638      	mov	r0, r7
   1cb4a:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1cb4c:	2103      	movs	r1, #3
   1cb4e:	4620      	mov	r0, r4
   1cb50:	f00b ff85 	bl	28a5e <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   1cb54:	210e      	movs	r1, #14
   1cb56:	f00b ff82 	bl	28a5e <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   1cb5a:	f7ff ff2d 	bl	1c9b8 <smp_send_pairing_confirm>
			if (err) {
   1cb5e:	2800      	cmp	r0, #0
   1cb60:	d1bf      	bne.n	1cae2 <smp_public_key+0xa2>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1cb62:	4630      	mov	r0, r6
   1cb64:	2107      	movs	r1, #7
   1cb66:	f00b ff7a 	bl	28a5e <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1cb6a:	2008      	movs	r0, #8
   1cb6c:	f7ff fb66 	bl	1c23c <smp_find>
   1cb70:	2800      	cmp	r0, #0
   1cb72:	d1b8      	bne.n	1cae6 <smp_public_key+0xa6>
		return smp_dhkey_generate(smp);
   1cb74:	4620      	mov	r0, r4
}
   1cb76:	b003      	add	sp, #12
   1cb78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   1cb7c:	f7ff bc74 	b.w	1c468 <smp_dhkey_generate>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1cb80:	210a      	movs	r1, #10
   1cb82:	4630      	mov	r0, r6
   1cb84:	f00b ff6b 	bl	28a5e <atomic_set_bit>
			smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1cb88:	686b      	ldr	r3, [r5, #4]
   1cb8a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1cb8e:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1cb90:	210e      	movs	r1, #14
   1cb92:	e7b3      	b.n	1cafc <smp_public_key+0xbc>
			if (bt_rand(smp->prnd, 16)) {
   1cb94:	2110      	movs	r1, #16
   1cb96:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1cb9a:	f003 fd03 	bl	205a4 <bt_rand>
   1cb9e:	2800      	cmp	r0, #0
   1cba0:	f47f af7c 	bne.w	1ca9c <smp_public_key+0x5c>
			if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1cba4:	b345      	cbz	r5, 1cbf8 <smp_public_key+0x1b8>
   1cba6:	68eb      	ldr	r3, [r5, #12]
   1cba8:	b333      	cbz	r3, 1cbf8 <smp_public_key+0x1b8>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1cbaa:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
				struct bt_conn_oob_info info = {
   1cbae:	4b1a      	ldr	r3, [pc, #104]	; (1cc18 <smp_public_key+0x1d8>)
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1cbb0:	78c9      	ldrb	r1, [r1, #3]
				struct bt_conn_oob_info info = {
   1cbb2:	881b      	ldrh	r3, [r3, #0]
   1cbb4:	f8ad 3004 	strh.w	r3, [sp, #4]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1cbb8:	7ae2      	ldrb	r2, [r4, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1cbba:	7ca3      	ldrb	r3, [r4, #18]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1cbbc:	b939      	cbnz	r1, 1cbce <smp_public_key+0x18e>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1cbbe:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1cbc0:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1cbc4:	d41a      	bmi.n	1cbfc <smp_public_key+0x1bc>
	int oob_config = BT_CONN_OOB_NO_DATA;
   1cbc6:	2b00      	cmp	r3, #0
   1cbc8:	bf08      	it	eq
   1cbca:	2003      	moveq	r0, #3
   1cbcc:	e000      	b.n	1cbd0 <smp_public_key+0x190>
   1cbce:	2003      	movs	r0, #3
				smp->oobd_local = NULL;
   1cbd0:	2300      	movs	r3, #0
				smp->oobd_remote = NULL;
   1cbd2:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	info->lesc.oob_config = oob_config;
   1cbd6:	f88d 0005 	strb.w	r0, [sp, #5]
				atomic_set_bit(smp->flags,
   1cbda:	210c      	movs	r1, #12
   1cbdc:	4630      	mov	r0, r6
   1cbde:	f00b ff3e 	bl	28a5e <atomic_set_bit>
				smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1cbe2:	68eb      	ldr	r3, [r5, #12]
   1cbe4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1cbe8:	a901      	add	r1, sp, #4
   1cbea:	4798      	blx	r3
			break;
   1cbec:	e7b9      	b.n	1cb62 <smp_public_key+0x122>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1cbee:	480b      	ldr	r0, [pc, #44]	; (1cc1c <smp_public_key+0x1dc>)
   1cbf0:	2145      	movs	r1, #69	; 0x45
   1cbf2:	f009 f80e 	bl	25c12 <z_log_minimal_printk>
   1cbf6:	e751      	b.n	1ca9c <smp_public_key+0x5c>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   1cbf8:	2002      	movs	r0, #2
   1cbfa:	e772      	b.n	1cae2 <smp_public_key+0xa2>
				     BT_CONN_OOB_BOTH_PEERS :
   1cbfc:	2b00      	cmp	r3, #0
   1cbfe:	bf0c      	ite	eq
   1cc00:	2001      	moveq	r0, #1
   1cc02:	2002      	movne	r0, #2
   1cc04:	e7e4      	b.n	1cbd0 <smp_public_key+0x190>
   1cc06:	bf00      	nop
   1cc08:	200024c8 	.word	0x200024c8
   1cc0c:	0002d86e 	.word	0x0002d86e
   1cc10:	0002d848 	.word	0x0002d848
   1cc14:	000f4240 	.word	0x000f4240
   1cc18:	0002a2a4 	.word	0x0002a2a4
   1cc1c:	0002d67e 	.word	0x0002d67e

0001cc20 <sc_send_public_key>:
{
   1cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1cc22:	210c      	movs	r1, #12
{
   1cc24:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1cc26:	f00b ff2e 	bl	28a86 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1cc2a:	4604      	mov	r4, r0
   1cc2c:	b1b0      	cbz	r0, 1cc5c <sc_send_public_key+0x3c>
   1cc2e:	2140      	movs	r1, #64	; 0x40
   1cc30:	3008      	adds	r0, #8
   1cc32:	f001 fc59 	bl	1e4e8 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1cc36:	4f0a      	ldr	r7, [pc, #40]	; (1cc60 <sc_send_public_key+0x40>)
   1cc38:	2220      	movs	r2, #32
   1cc3a:	6839      	ldr	r1, [r7, #0]
   1cc3c:	4606      	mov	r6, r0
   1cc3e:	f009 ff88 	bl	26b52 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1cc42:	6839      	ldr	r1, [r7, #0]
   1cc44:	2220      	movs	r2, #32
   1cc46:	4411      	add	r1, r2
   1cc48:	18b0      	adds	r0, r6, r2
   1cc4a:	f009 ff82 	bl	26b52 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1cc4e:	4628      	mov	r0, r5
   1cc50:	2200      	movs	r2, #0
   1cc52:	4621      	mov	r1, r4
   1cc54:	f00b fe4d 	bl	288f2 <smp_send.constprop.0>
	return 0;
   1cc58:	2000      	movs	r0, #0
}
   1cc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1cc5c:	2008      	movs	r0, #8
   1cc5e:	e7fc      	b.n	1cc5a <sc_send_public_key+0x3a>
   1cc60:	200024c8 	.word	0x200024c8

0001cc64 <compute_and_send_central_dhcheck>:
{
   1cc64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memset(r, 0, sizeof(r));
   1cc68:	2210      	movs	r2, #16
{
   1cc6a:	b0a2      	sub	sp, #136	; 0x88
   1cc6c:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1cc6e:	2100      	movs	r1, #0
   1cc70:	eb0d 0002 	add.w	r0, sp, r2
   1cc74:	f009 ff78 	bl	26b68 <memset>
	switch (smp->method) {
   1cc78:	7a22      	ldrb	r2, [r4, #8]
   1cc7a:	2a05      	cmp	r2, #5
   1cc7c:	f200 8091 	bhi.w	1cda2 <compute_and_send_central_dhcheck+0x13e>
   1cc80:	e8df f002 	tbb	[pc, r2]
   1cc84:	09030309 	.word	0x09030309
   1cc88:	868f      	.short	0x868f
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1cc8a:	2204      	movs	r2, #4
   1cc8c:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1cc90:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1cc92:	f009 ff5e 	bl	26b52 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1cc96:	4b55      	ldr	r3, [pc, #340]	; (1cdec <compute_and_send_central_dhcheck+0x188>)
		   &smp->chan.chan.conn->le.init_addr,
   1cc98:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   1cc9c:	aa14      	add	r2, sp, #80	; 0x50
   1cc9e:	f103 0730 	add.w	r7, r3, #48	; 0x30
   1cca2:	6818      	ldr	r0, [r3, #0]
   1cca4:	6859      	ldr	r1, [r3, #4]
   1cca6:	4616      	mov	r6, r2
   1cca8:	c603      	stmia	r6!, {r0, r1}
   1ccaa:	3308      	adds	r3, #8
   1ccac:	42bb      	cmp	r3, r7
   1ccae:	4632      	mov	r2, r6
   1ccb0:	d1f7      	bne.n	1cca2 <compute_and_send_central_dhcheck+0x3e>
   1ccb2:	6818      	ldr	r0, [r3, #0]
   1ccb4:	791b      	ldrb	r3, [r3, #4]
   1ccb6:	6030      	str	r0, [r6, #0]
   1ccb8:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
   1ccba:	2220      	movs	r2, #32
   1ccbc:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1ccc0:	a80c      	add	r0, sp, #48	; 0x30
   1ccc2:	f7ff fb0b 	bl	1c2dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1ccc6:	484a      	ldr	r0, [pc, #296]	; (1cdf0 <compute_and_send_central_dhcheck+0x18c>)
   1ccc8:	ab08      	add	r3, sp, #32
   1ccca:	2220      	movs	r2, #32
   1cccc:	a90c      	add	r1, sp, #48	; 0x30
   1ccce:	f00b fdf4 	bl	288ba <bt_smp_aes_cmac>
	if (err) {
   1ccd2:	2800      	cmp	r0, #0
   1ccd4:	f040 8086 	bne.w	1cde4 <compute_and_send_central_dhcheck+0x180>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   1ccd8:	f104 0727 	add.w	r7, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1ccdc:	2210      	movs	r2, #16
   1ccde:	4639      	mov	r1, r7
   1cce0:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   1cce4:	f104 0837 	add.w	r8, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1cce8:	f7ff faf8 	bl	1c2dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1ccec:	2210      	movs	r2, #16
   1ccee:	4641      	mov	r1, r8
   1ccf0:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1ccf4:	f7ff faf2 	bl	1c2dc <sys_memcpy_swap>
	m[37] = a1->type;
   1ccf8:	f895 3097 	ldrb.w	r3, [r5, #151]	; 0x97
   1ccfc:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1cd00:	2206      	movs	r2, #6
   1cd02:	f105 0198 	add.w	r1, r5, #152	; 0x98
   1cd06:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1cd0a:	f7ff fae7 	bl	1c2dc <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1cd0e:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1cd12:	f895 309e 	ldrb.w	r3, [r5, #158]	; 0x9e
   1cd16:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1cd1a:	2206      	movs	r2, #6
   1cd1c:	f105 019f 	add.w	r1, r5, #159	; 0x9f
   1cd20:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1cd24:	f7ff fada 	bl	1c2dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1cd28:	4633      	mov	r3, r6
   1cd2a:	2235      	movs	r2, #53	; 0x35
   1cd2c:	a914      	add	r1, sp, #80	; 0x50
   1cd2e:	a808      	add	r0, sp, #32
   1cd30:	f00b fdc3 	bl	288ba <bt_smp_aes_cmac>
	if (err) {
   1cd34:	2800      	cmp	r0, #0
   1cd36:	d155      	bne.n	1cde4 <compute_and_send_central_dhcheck+0x180>
	sys_mem_swap(mackey, 16);
   1cd38:	4630      	mov	r0, r6
   1cd3a:	f00b fdf7 	bl	2892c <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1cd3e:	f104 0547 	add.w	r5, r4, #71	; 0x47
	m[0] = 0x01;
   1cd42:	2301      	movs	r3, #1
   1cd44:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1cd48:	2235      	movs	r2, #53	; 0x35
   1cd4a:	462b      	mov	r3, r5
   1cd4c:	a914      	add	r1, sp, #80	; 0x50
   1cd4e:	a808      	add	r0, sp, #32
   1cd50:	f00b fdb3 	bl	288ba <bt_smp_aes_cmac>
	if (err) {
   1cd54:	2800      	cmp	r0, #0
   1cd56:	d145      	bne.n	1cde4 <compute_and_send_central_dhcheck+0x180>
	sys_mem_swap(ltk, 16);
   1cd58:	4628      	mov	r0, r5
   1cd5a:	f00b fde7 	bl	2892c <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.init_addr,
   1cd5e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1cd62:	aa14      	add	r2, sp, #80	; 0x50
   1cd64:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   1cd66:	f103 029e 	add.w	r2, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr,
   1cd6a:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1cd6c:	9301      	str	r3, [sp, #4]
   1cd6e:	f104 030a 	add.w	r3, r4, #10
   1cd72:	9202      	str	r2, [sp, #8]
   1cd74:	9300      	str	r3, [sp, #0]
   1cd76:	4642      	mov	r2, r8
   1cd78:	ab04      	add	r3, sp, #16
   1cd7a:	4639      	mov	r1, r7
   1cd7c:	4630      	mov	r0, r6
   1cd7e:	f00b fde3 	bl	28948 <smp_f6>
   1cd82:	4605      	mov	r5, r0
   1cd84:	b198      	cbz	r0, 1cdae <compute_and_send_central_dhcheck+0x14a>
		BT_ERR("Calculate local DHKey check failed");
   1cd86:	481b      	ldr	r0, [pc, #108]	; (1cdf4 <compute_and_send_central_dhcheck+0x190>)
   1cd88:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Calculate LTK failed");
   1cd8a:	f008 ff42 	bl	25c12 <z_log_minimal_printk>
   1cd8e:	e00c      	b.n	1cdaa <compute_and_send_central_dhcheck+0x146>
		if (smp->oobd_remote) {
   1cd90:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1cd94:	2900      	cmp	r1, #0
   1cd96:	f43f af7e 	beq.w	1cc96 <compute_and_send_central_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1cd9a:	2210      	movs	r2, #16
   1cd9c:	eb0d 0002 	add.w	r0, sp, r2
   1cda0:	e777      	b.n	1cc92 <compute_and_send_central_dhcheck+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1cda2:	4815      	ldr	r0, [pc, #84]	; (1cdf8 <compute_and_send_central_dhcheck+0x194>)
   1cda4:	2145      	movs	r1, #69	; 0x45
   1cda6:	f008 ff34 	bl	25c12 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1cdaa:	2008      	movs	r0, #8
   1cdac:	e017      	b.n	1cdde <compute_and_send_central_dhcheck+0x17a>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1cdae:	210d      	movs	r1, #13
   1cdb0:	4620      	mov	r0, r4
   1cdb2:	f00b fe54 	bl	28a5e <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1cdb6:	210d      	movs	r1, #13
   1cdb8:	f00b fe65 	bl	28a86 <smp_create_pdu.constprop.0>
	if (!buf) {
   1cdbc:	4606      	mov	r6, r0
   1cdbe:	2800      	cmp	r0, #0
   1cdc0:	d0f3      	beq.n	1cdaa <compute_and_send_central_dhcheck+0x146>
   1cdc2:	2110      	movs	r1, #16
   1cdc4:	3008      	adds	r0, #8
   1cdc6:	f001 fb8f 	bl	1e4e8 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1cdca:	2210      	movs	r2, #16
   1cdcc:	a914      	add	r1, sp, #80	; 0x50
   1cdce:	f009 fec0 	bl	26b52 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1cdd2:	4620      	mov	r0, r4
   1cdd4:	462a      	mov	r2, r5
   1cdd6:	4631      	mov	r1, r6
   1cdd8:	f00b fd8b 	bl	288f2 <smp_send.constprop.0>
	return 0;
   1cddc:	4628      	mov	r0, r5
}
   1cdde:	b022      	add	sp, #136	; 0x88
   1cde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Calculate LTK failed");
   1cde4:	4805      	ldr	r0, [pc, #20]	; (1cdfc <compute_and_send_central_dhcheck+0x198>)
   1cde6:	2145      	movs	r1, #69	; 0x45
   1cde8:	e7cf      	b.n	1cd8a <compute_and_send_central_dhcheck+0x126>
   1cdea:	bf00      	nop
   1cdec:	0002a2a6 	.word	0x0002a2a6
   1cdf0:	0002daca 	.word	0x0002daca
   1cdf4:	0002d88e 	.word	0x0002d88e
   1cdf8:	0002d67e 	.word	0x0002d67e
   1cdfc:	0002d8b6 	.word	0x0002d8b6

0001ce00 <bt_smp_connected>:
{
   1ce00:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1ce02:	490b      	ldr	r1, [pc, #44]	; (1ce30 <bt_smp_connected+0x30>)
{
   1ce04:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1ce06:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1ce0a:	3094      	adds	r0, #148	; 0x94
   1ce0c:	f006 f8ae 	bl	22f6c <k_work_init_delayable>
	smp_reset(smp);
   1ce10:	4628      	mov	r0, r5
   1ce12:	f00b fe8b 	bl	28b2c <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ce16:	f3bf 8f5b 	dmb	ish
   1ce1a:	4b06      	ldr	r3, [pc, #24]	; (1ce34 <bt_smp_connected+0x34>)
   1ce1c:	34c4      	adds	r4, #196	; 0xc4
   1ce1e:	e854 2f00 	ldrex	r2, [r4]
   1ce22:	e844 3100 	strex	r1, r3, [r4]
   1ce26:	2900      	cmp	r1, #0
   1ce28:	d1f9      	bne.n	1ce1e <bt_smp_connected+0x1e>
   1ce2a:	f3bf 8f5b 	dmb	ish
}
   1ce2e:	bd38      	pop	{r3, r4, r5, pc}
   1ce30:	0001d975 	.word	0x0001d975
   1ce34:	20001c08 	.word	0x20001c08

0001ce38 <smp_pairing_rsp>:
{
   1ce38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ce3c:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1ce3e:	f8d0 70ec 	ldr.w	r7, [r0, #236]	; 0xec
{
   1ce42:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ce44:	f7ff fa08 	bl	1c258 <latch_auth_cb>
	struct bt_smp_pairing *rsp = (void *)buf->data;
   1ce48:	f8d5 8008 	ldr.w	r8, [r5, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1ce4c:	f898 3003 	ldrb.w	r3, [r8, #3]
   1ce50:	3b07      	subs	r3, #7
   1ce52:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ce54:	4606      	mov	r6, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1ce56:	d905      	bls.n	1ce64 <smp_pairing_rsp+0x2c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1ce58:	f04f 0806 	mov.w	r8, #6
}
   1ce5c:	4640      	mov	r0, r8
   1ce5e:	b002      	add	sp, #8
   1ce60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
   1ce64:	f898 2004 	ldrb.w	r2, [r8, #4]
   1ce68:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1ce6c:	4013      	ands	r3, r2
   1ce6e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   1ce72:	f898 2005 	ldrb.w	r2, [r8, #5]
   1ce76:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1ce7a:	4013      	ands	r3, r2
   1ce7c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1ce80:	2302      	movs	r3, #2
   1ce82:	7423      	strb	r3, [r4, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   1ce84:	2206      	movs	r2, #6
   1ce86:	4641      	mov	r1, r8
   1ce88:	f104 0011 	add.w	r0, r4, #17
   1ce8c:	f009 fe61 	bl	26b52 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1ce90:	f898 3002 	ldrb.w	r3, [r8, #2]
   1ce94:	071b      	lsls	r3, r3, #28
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1ce96:	f104 0504 	add.w	r5, r4, #4
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1ce9a:	d506      	bpl.n	1ceaa <smp_pairing_rsp+0x72>
   1ce9c:	7b23      	ldrb	r3, [r4, #12]
   1ce9e:	0718      	lsls	r0, r3, #28
   1cea0:	d503      	bpl.n	1ceaa <smp_pairing_rsp+0x72>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1cea2:	2105      	movs	r1, #5
   1cea4:	4628      	mov	r0, r5
   1cea6:	f00b fdda 	bl	28a5e <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1ceaa:	f898 3002 	ldrb.w	r3, [r8, #2]
   1ceae:	0699      	lsls	r1, r3, #26
   1ceb0:	d506      	bpl.n	1cec0 <smp_pairing_rsp+0x88>
   1ceb2:	7b23      	ldrb	r3, [r4, #12]
   1ceb4:	069a      	lsls	r2, r3, #26
   1ceb6:	d503      	bpl.n	1cec0 <smp_pairing_rsp+0x88>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1ceb8:	2114      	movs	r1, #20
   1ceba:	4628      	mov	r0, r5
   1cebc:	f00b fdcf 	bl	28a5e <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1cec0:	f898 3002 	ldrb.w	r3, [r8, #2]
   1cec4:	07db      	lsls	r3, r3, #31
   1cec6:	d506      	bpl.n	1ced6 <smp_pairing_rsp+0x9e>
   1cec8:	7b23      	ldrb	r3, [r4, #12]
   1ceca:	07d8      	lsls	r0, r3, #31
   1cecc:	d503      	bpl.n	1ced6 <smp_pairing_rsp+0x9e>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1cece:	210d      	movs	r1, #13
   1ced0:	4628      	mov	r0, r5
   1ced2:	f00b fdc4 	bl	28a5e <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ced6:	2105      	movs	r1, #5
   1ced8:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
   1ceda:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cede:	f00b fcb3 	bl	28848 <atomic_test_bit>
   1cee2:	bb48      	cbnz	r0, 1cf38 <smp_pairing_rsp+0x100>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1cee4:	f1b8 0f04 	cmp.w	r8, #4
   1cee8:	d847      	bhi.n	1cf7a <smp_pairing_rsp+0x142>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1ceea:	7ae3      	ldrb	r3, [r4, #11]
   1ceec:	7ca2      	ldrb	r2, [r4, #18]
   1ceee:	4013      	ands	r3, r2
   1cef0:	07d9      	lsls	r1, r3, #31
   1cef2:	d440      	bmi.n	1cf76 <smp_pairing_rsp+0x13e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1cef4:	7b21      	ldrb	r1, [r4, #12]
   1cef6:	7ce0      	ldrb	r0, [r4, #19]
   1cef8:	4301      	orrs	r1, r0
   1cefa:	f011 0104 	ands.w	r1, r1, #4
   1cefe:	d011      	beq.n	1cf24 <smp_pairing_rsp+0xec>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1cf00:	4620      	mov	r0, r4
   1cf02:	f7ff f9c7 	bl	1c294 <get_io_capa>
   1cf06:	4b95      	ldr	r3, [pc, #596]	; (1d15c <smp_pairing_rsp+0x324>)
   1cf08:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1cf0c:	4498      	add	r8, r3
   1cf0e:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   1cf12:	2904      	cmp	r1, #4
   1cf14:	d106      	bne.n	1cf24 <smp_pairing_rsp+0xec>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1cf16:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1cf1a:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1cf1c:	2b00      	cmp	r3, #0
   1cf1e:	bf0c      	ite	eq
   1cf20:	2102      	moveq	r1, #2
   1cf22:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, rsp->io_capability);
   1cf24:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1cf26:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
   1cf2a:	4620      	mov	r0, r4
   1cf2c:	f00b fc95 	bl	2885a <update_keys_check>
   1cf30:	bb28      	cbnz	r0, 1cf7e <smp_pairing_rsp+0x146>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1cf32:	f04f 0803 	mov.w	r8, #3
   1cf36:	e791      	b.n	1ce5c <smp_pairing_rsp+0x24>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1cf38:	7b23      	ldrb	r3, [r4, #12]
   1cf3a:	7ce0      	ldrb	r0, [r4, #19]
   1cf3c:	ea03 0200 	and.w	r2, r3, r0
   1cf40:	0712      	lsls	r2, r2, #28
   1cf42:	d506      	bpl.n	1cf52 <smp_pairing_rsp+0x11a>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1cf44:	7ae2      	ldrb	r2, [r4, #11]
   1cf46:	f894 c012 	ldrb.w	ip, [r4, #18]
   1cf4a:	ea42 020c 	orr.w	r2, r2, ip
   1cf4e:	07d2      	lsls	r2, r2, #31
   1cf50:	d4e8      	bmi.n	1cf24 <smp_pairing_rsp+0xec>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1cf52:	f1b8 0f04 	cmp.w	r8, #4
   1cf56:	d810      	bhi.n	1cf7a <smp_pairing_rsp+0x142>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1cf58:	ea43 0100 	orr.w	r1, r3, r0
   1cf5c:	f011 0104 	ands.w	r1, r1, #4
   1cf60:	d0e0      	beq.n	1cf24 <smp_pairing_rsp+0xec>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1cf62:	4620      	mov	r0, r4
   1cf64:	f7ff f996 	bl	1c294 <get_io_capa>
   1cf68:	4b7d      	ldr	r3, [pc, #500]	; (1d160 <smp_pairing_rsp+0x328>)
   1cf6a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1cf6e:	4498      	add	r8, r3
   1cf70:	f818 1000 	ldrb.w	r1, [r8, r0]
   1cf74:	e7d6      	b.n	1cf24 <smp_pairing_rsp+0xec>
		return LEGACY_OOB;
   1cf76:	2106      	movs	r1, #6
   1cf78:	e7d4      	b.n	1cf24 <smp_pairing_rsp+0xec>
		return JUST_WORKS;
   1cf7a:	2100      	movs	r1, #0
   1cf7c:	e7d2      	b.n	1cf24 <smp_pairing_rsp+0xec>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1cf7e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1cf82:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1cf84:	2b03      	cmp	r3, #3
   1cf86:	d016      	beq.n	1cfb6 <smp_pairing_rsp+0x17e>
   1cf88:	d805      	bhi.n	1cf96 <smp_pairing_rsp+0x15e>
   1cf8a:	3b01      	subs	r3, #1
   1cf8c:	2b01      	cmp	r3, #1
   1cf8e:	d915      	bls.n	1cfbc <smp_pairing_rsp+0x184>
   1cf90:	f04f 0808 	mov.w	r8, #8
   1cf94:	e762      	b.n	1ce5c <smp_pairing_rsp+0x24>
   1cf96:	2b04      	cmp	r3, #4
   1cf98:	d1fa      	bne.n	1cf90 <smp_pairing_rsp+0x158>
	return MIN(req->max_key_size, rsp->max_key_size);
   1cf9a:	7d23      	ldrb	r3, [r4, #20]
   1cf9c:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1cf9e:	4293      	cmp	r3, r2
   1cfa0:	bf28      	it	cs
   1cfa2:	4613      	movcs	r3, r2
   1cfa4:	2b10      	cmp	r3, #16
   1cfa6:	f47f af57 	bne.w	1ce58 <smp_pairing_rsp+0x20>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cfaa:	2105      	movs	r1, #5
   1cfac:	4628      	mov	r0, r5
   1cfae:	f00b fc4b 	bl	28848 <atomic_test_bit>
   1cfb2:	2800      	cmp	r0, #0
   1cfb4:	d0bd      	beq.n	1cf32 <smp_pairing_rsp+0xfa>
		if (smp->method == JUST_WORKS) {
   1cfb6:	7a23      	ldrb	r3, [r4, #8]
   1cfb8:	2b00      	cmp	r3, #0
   1cfba:	d0ba      	beq.n	1cf32 <smp_pairing_rsp+0xfa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cfbc:	2105      	movs	r1, #5
   1cfbe:	4628      	mov	r0, r5
   1cfc0:	f00b fc42 	bl	28848 <atomic_test_bit>
   1cfc4:	2800      	cmp	r0, #0
   1cfc6:	f040 809a 	bne.w	1d0fe <smp_pairing_rsp+0x2c6>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cfca:	4620      	mov	r0, r4
   1cfcc:	f7ff f944 	bl	1c258 <latch_auth_cb>
   1cfd0:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cfd2:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1cfd4:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cfd8:	f7ff f93e 	bl	1c258 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1cfdc:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cfe0:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1cfe2:	f898 0008 	ldrb.w	r0, [r8, #8]
   1cfe6:	f000 fdfb 	bl	1dbe0 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1cfea:	7a22      	ldrb	r2, [r4, #8]
   1cfec:	b140      	cbz	r0, 1d000 <smp_pairing_rsp+0x1c8>
   1cfee:	7b43      	ldrb	r3, [r0, #13]
   1cff0:	07db      	lsls	r3, r3, #31
   1cff2:	d505      	bpl.n	1d000 <smp_pairing_rsp+0x1c8>
   1cff4:	b922      	cbnz	r2, 1d000 <smp_pairing_rsp+0x1c8>
		BT_ERR("JustWorks failed, authenticated keys present");
   1cff6:	485b      	ldr	r0, [pc, #364]	; (1d164 <smp_pairing_rsp+0x32c>)
   1cff8:	2145      	movs	r1, #69	; 0x45
   1cffa:	f008 fe0a 	bl	25c12 <z_log_minimal_printk>
	if (ret) {
   1cffe:	e7c7      	b.n	1cf90 <smp_pairing_rsp+0x158>
	switch (smp->method) {
   1d000:	2a06      	cmp	r2, #6
   1d002:	d85e      	bhi.n	1d0c2 <smp_pairing_rsp+0x28a>
   1d004:	e8df f002 	tbb	[pc, r2]
   1d008:	5d2e5518 	.word	0x5d2e5518
   1d00c:	5d5d      	.short	0x5d5d
   1d00e:	04          	.byte	0x04
   1d00f:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1d010:	2e00      	cmp	r6, #0
   1d012:	d05b      	beq.n	1d0cc <smp_pairing_rsp+0x294>
   1d014:	68f3      	ldr	r3, [r6, #12]
   1d016:	2b00      	cmp	r3, #0
   1d018:	d058      	beq.n	1d0cc <smp_pairing_rsp+0x294>
			struct bt_conn_oob_info info = {
   1d01a:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d01c:	210a      	movs	r1, #10
   1d01e:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1d020:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d024:	f00b fd1b 	bl	28a5e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1d028:	68f3      	ldr	r3, [r6, #12]
   1d02a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d02e:	a901      	add	r1, sp, #4
   1d030:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d032:	7a23      	ldrb	r3, [r4, #8]
   1d034:	2b00      	cmp	r3, #0
   1d036:	d14c      	bne.n	1d0d2 <smp_pairing_rsp+0x29a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d038:	210f      	movs	r1, #15
   1d03a:	4628      	mov	r0, r5
   1d03c:	f00b fc04 	bl	28848 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d040:	2800      	cmp	r0, #0
   1d042:	d046      	beq.n	1d0d2 <smp_pairing_rsp+0x29a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d044:	2f00      	cmp	r7, #0
   1d046:	d044      	beq.n	1d0d2 <smp_pairing_rsp+0x29a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1d048:	697b      	ldr	r3, [r7, #20]
   1d04a:	2b00      	cmp	r3, #0
   1d04c:	d041      	beq.n	1d0d2 <smp_pairing_rsp+0x29a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d04e:	4628      	mov	r0, r5
   1d050:	210a      	movs	r1, #10
   1d052:	f00b fd04 	bl	28a5e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1d056:	697b      	ldr	r3, [r7, #20]
   1d058:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d05c:	4798      	blx	r3
	return 0;
   1d05e:	f04f 0800 	mov.w	r8, #0
   1d062:	e6fb      	b.n	1ce5c <smp_pairing_rsp+0x24>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1d064:	2104      	movs	r1, #4
   1d066:	eb0d 0001 	add.w	r0, sp, r1
   1d06a:	f003 fa9b 	bl	205a4 <bt_rand>
   1d06e:	2800      	cmp	r0, #0
   1d070:	d18e      	bne.n	1cf90 <smp_pairing_rsp+0x158>
			passkey %= 1000000;
   1d072:	9b01      	ldr	r3, [sp, #4]
   1d074:	4a3c      	ldr	r2, [pc, #240]	; (1d168 <smp_pairing_rsp+0x330>)
   1d076:	fbb3 f1f2 	udiv	r1, r3, r2
   1d07a:	fb02 3311 	mls	r3, r2, r1, r3
   1d07e:	9301      	str	r3, [sp, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1d080:	b14e      	cbz	r6, 1d096 <smp_pairing_rsp+0x25e>
   1d082:	6833      	ldr	r3, [r6, #0]
   1d084:	b13b      	cbz	r3, 1d096 <smp_pairing_rsp+0x25e>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d086:	210b      	movs	r1, #11
   1d088:	4628      	mov	r0, r5
   1d08a:	f00b fce8 	bl	28a5e <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1d08e:	6833      	ldr	r3, [r6, #0]
   1d090:	9901      	ldr	r1, [sp, #4]
   1d092:	4640      	mov	r0, r8
   1d094:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1d096:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1d098:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1d09c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1d0a0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1d0a2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1d0a6:	0a1b      	lsrs	r3, r3, #8
   1d0a8:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1d0ac:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1d0b0:	e7bf      	b.n	1d032 <smp_pairing_rsp+0x1fa>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d0b2:	4628      	mov	r0, r5
   1d0b4:	210a      	movs	r1, #10
   1d0b6:	f00b fcd2 	bl	28a5e <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1d0ba:	6873      	ldr	r3, [r6, #4]
   1d0bc:	4640      	mov	r0, r8
   1d0be:	4798      	blx	r3
	if (ret) {
   1d0c0:	e7b7      	b.n	1d032 <smp_pairing_rsp+0x1fa>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1d0c2:	482a      	ldr	r0, [pc, #168]	; (1d16c <smp_pairing_rsp+0x334>)
   1d0c4:	2145      	movs	r1, #69	; 0x45
   1d0c6:	f008 fda4 	bl	25c12 <z_log_minimal_printk>
	if (ret) {
   1d0ca:	e761      	b.n	1cf90 <smp_pairing_rsp+0x158>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1d0cc:	f04f 0802 	mov.w	r8, #2
   1d0d0:	e6c4      	b.n	1ce5c <smp_pairing_rsp+0x24>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1d0d2:	210a      	movs	r1, #10
   1d0d4:	4628      	mov	r0, r5
   1d0d6:	f00b fbb7 	bl	28848 <atomic_test_bit>
   1d0da:	b958      	cbnz	r0, 1d0f4 <smp_pairing_rsp+0x2bc>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1d0dc:	4620      	mov	r0, r4
   1d0de:	2103      	movs	r1, #3
   1d0e0:	f00b fcbd 	bl	28a5e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1d0e4:	210e      	movs	r1, #14
   1d0e6:	f00b fcba 	bl	28a5e <atomic_set_bit>
}
   1d0ea:	b002      	add	sp, #8
   1d0ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return legacy_send_pairing_confirm(smp);
   1d0f0:	f00b bd9f 	b.w	28c32 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d0f4:	2100      	movs	r1, #0
   1d0f6:	4628      	mov	r0, r5
   1d0f8:	f00b fcb1 	bl	28a5e <atomic_set_bit>
   1d0fc:	e7af      	b.n	1d05e <smp_pairing_rsp+0x226>
	smp->local_dist &= SEND_KEYS_SC;
   1d0fe:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d102:	f894 8008 	ldrb.w	r8, [r4, #8]
	smp->local_dist &= SEND_KEYS_SC;
   1d106:	f423 437d 	bic.w	r3, r3, #64768	; 0xfd00
   1d10a:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1d10e:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1d112:	f1b8 0f00 	cmp.w	r8, #0
   1d116:	d10f      	bne.n	1d138 <smp_pairing_rsp+0x300>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d118:	210f      	movs	r1, #15
   1d11a:	4628      	mov	r0, r5
   1d11c:	f00b fb94 	bl	28848 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d120:	b150      	cbz	r0, 1d138 <smp_pairing_rsp+0x300>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d122:	b14e      	cbz	r6, 1d138 <smp_pairing_rsp+0x300>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1d124:	6973      	ldr	r3, [r6, #20]
   1d126:	b13b      	cbz	r3, 1d138 <smp_pairing_rsp+0x300>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d128:	4628      	mov	r0, r5
   1d12a:	210a      	movs	r1, #10
   1d12c:	f00b fc97 	bl	28a5e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1d130:	6973      	ldr	r3, [r6, #20]
   1d132:	4638      	mov	r0, r7
   1d134:	4798      	blx	r3
		return 0;
   1d136:	e691      	b.n	1ce5c <smp_pairing_rsp+0x24>
	if (!sc_public_key) {
   1d138:	4b0d      	ldr	r3, [pc, #52]	; (1d170 <smp_pairing_rsp+0x338>)
   1d13a:	681e      	ldr	r6, [r3, #0]
   1d13c:	b90e      	cbnz	r6, 1d142 <smp_pairing_rsp+0x30a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1d13e:	2106      	movs	r1, #6
   1d140:	e7d9      	b.n	1d0f6 <smp_pairing_rsp+0x2be>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1d142:	4620      	mov	r0, r4
   1d144:	210c      	movs	r1, #12
   1d146:	f00b fc8a 	bl	28a5e <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1d14a:	210b      	movs	r1, #11
   1d14c:	f00b fba6 	bl	2889c <atomic_clear_bit>
}
   1d150:	b002      	add	sp, #8
   1d152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   1d156:	f7ff bd63 	b.w	1cc20 <sc_send_public_key>
   1d15a:	bf00      	nop
   1d15c:	0002da98 	.word	0x0002da98
   1d160:	0002dab1 	.word	0x0002dab1
   1d164:	0002d8d0 	.word	0x0002d8d0
   1d168:	000f4240 	.word	0x000f4240
   1d16c:	0002d67e 	.word	0x0002d67e
   1d170:	200024c8 	.word	0x200024c8

0001d174 <smp_pairing_random>:
{
   1d174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d178:	b09e      	sub	sp, #120	; 0x78
   1d17a:	4604      	mov	r4, r0
   1d17c:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d17e:	f7ff f86b 	bl	1c258 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1d182:	f104 0737 	add.w	r7, r4, #55	; 0x37
   1d186:	68a9      	ldr	r1, [r5, #8]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d188:	4680      	mov	r8, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1d18a:	2210      	movs	r2, #16
   1d18c:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d18e:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1d190:	f009 fcdf 	bl	26b52 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d194:	2105      	movs	r1, #5
   1d196:	4630      	mov	r0, r6
   1d198:	f00b fb56 	bl	28848 <atomic_test_bit>
   1d19c:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
   1d1a0:	2800      	cmp	r0, #0
   1d1a2:	d158      	bne.n	1d256 <smp_pairing_random+0xe2>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1d1a4:	f109 039e 	add.w	r3, r9, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1d1a8:	f104 0a47 	add.w	sl, r4, #71	; 0x47
   1d1ac:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   1d1b0:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1d1b2:	f109 0397 	add.w	r3, r9, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1d1b6:	9300      	str	r3, [sp, #0]
   1d1b8:	f8cd 8008 	str.w	r8, [sp, #8]
   1d1bc:	f104 0310 	add.w	r3, r4, #16
   1d1c0:	f104 0209 	add.w	r2, r4, #9
   1d1c4:	4639      	mov	r1, r7
   1d1c6:	4650      	mov	r0, sl
   1d1c8:	f00b fcd8 	bl	28b7c <smp_c1>
	if (err) {
   1d1cc:	2800      	cmp	r0, #0
   1d1ce:	d136      	bne.n	1d23e <smp_pairing_random+0xca>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1d1d0:	2210      	movs	r2, #16
   1d1d2:	4641      	mov	r1, r8
   1d1d4:	f104 0017 	add.w	r0, r4, #23
   1d1d8:	f009 fcaa 	bl	26b30 <memcmp>
   1d1dc:	2800      	cmp	r0, #0
   1d1de:	d169      	bne.n	1d2b4 <smp_pairing_random+0x140>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   1d1e0:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d1e4:	bb95      	cbnz	r5, 1d24c <smp_pairing_random+0xd8>
	memcpy(out, r2, 8);
   1d1e6:	2208      	movs	r2, #8
   1d1e8:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1d1ec:	4640      	mov	r0, r8
   1d1ee:	f009 fcb0 	bl	26b52 <memcpy>
	memcpy(out + 8, r1, 8);
   1d1f2:	2208      	movs	r2, #8
   1d1f4:	4639      	mov	r1, r7
   1d1f6:	a80c      	add	r0, sp, #48	; 0x30
   1d1f8:	f009 fcab 	bl	26b52 <memcpy>
	return bt_encrypt_le(k, out, out);
   1d1fc:	4642      	mov	r2, r8
   1d1fe:	4641      	mov	r1, r8
   1d200:	4650      	mov	r0, sl
   1d202:	f00c fa42 	bl	2968a <bt_encrypt_le>
		if (err) {
   1d206:	b9d0      	cbnz	r0, 1d23e <smp_pairing_random+0xca>
		(void)memset(ediv, 0, sizeof(ediv));
   1d208:	2202      	movs	r2, #2
   1d20a:	4629      	mov	r1, r5
   1d20c:	a805      	add	r0, sp, #20
   1d20e:	f009 fcab 	bl	26b68 <memset>
		(void)memset(rand, 0, sizeof(rand));
   1d212:	2208      	movs	r2, #8
   1d214:	4629      	mov	r1, r5
   1d216:	a806      	add	r0, sp, #24
   1d218:	f009 fca6 	bl	26b68 <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   1d21c:	7d22      	ldrb	r2, [r4, #20]
   1d21e:	7b63      	ldrb	r3, [r4, #13]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   1d220:	429a      	cmp	r2, r3
   1d222:	bf94      	ite	ls
   1d224:	9200      	strls	r2, [sp, #0]
   1d226:	9300      	strhi	r3, [sp, #0]
   1d228:	a906      	add	r1, sp, #24
   1d22a:	4643      	mov	r3, r8
   1d22c:	aa05      	add	r2, sp, #20
   1d22e:	4648      	mov	r0, r9
   1d230:	f009 ff34 	bl	2709c <bt_conn_le_start_encryption>
   1d234:	b128      	cbz	r0, 1d242 <smp_pairing_random+0xce>
			BT_ERR("Failed to start encryption");
   1d236:	4858      	ldr	r0, [pc, #352]	; (1d398 <smp_pairing_random+0x224>)
   1d238:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Calculate confirm failed");
   1d23a:	f008 fcea 	bl	25c12 <z_log_minimal_printk>
				return BT_SMP_ERR_UNSPECIFIED;
   1d23e:	2508      	movs	r5, #8
   1d240:	e005      	b.n	1d24e <smp_pairing_random+0xda>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1d242:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1d244:	4630      	mov	r0, r6
   1d246:	f00b fc0a 	bl	28a5e <atomic_set_bit>
			return 0;
   1d24a:	e000      	b.n	1d24e <smp_pairing_random+0xda>
	return 0;
   1d24c:	4605      	mov	r5, r0
}
   1d24e:	4628      	mov	r0, r5
   1d250:	b01e      	add	sp, #120	; 0x78
   1d252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1d256:	f899 5003 	ldrb.w	r5, [r9, #3]
   1d25a:	2d00      	cmp	r5, #0
   1d25c:	f040 8099 	bne.w	1d392 <smp_pairing_random+0x21e>
	switch (smp->method) {
   1d260:	7a22      	ldrb	r2, [r4, #8]
   1d262:	2a05      	cmp	r2, #5
   1d264:	f200 8083 	bhi.w	1d36e <smp_pairing_random+0x1fa>
   1d268:	e8df f002 	tbb	[pc, r2]
   1d26c:	1b03031b 	.word	0x1b03031b
   1d270:	2681      	.short	0x2681
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1d272:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1d276:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1d27a:	40d3      	lsrs	r3, r2
   1d27c:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1d280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1d284:	4945      	ldr	r1, [pc, #276]	; (1d39c <smp_pairing_random+0x228>)
   1d286:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   1d28a:	f8cd 9000 	str.w	r9, [sp]
   1d28e:	6809      	ldr	r1, [r1, #0]
   1d290:	463a      	mov	r2, r7
   1d292:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1d296:	f00b fba3 	bl	289e0 <smp_f4>
   1d29a:	b120      	cbz	r0, 1d2a6 <smp_pairing_random+0x132>
		BT_ERR("Calculate confirm failed");
   1d29c:	4840      	ldr	r0, [pc, #256]	; (1d3a0 <smp_pairing_random+0x22c>)
   1d29e:	2145      	movs	r1, #69	; 0x45
   1d2a0:	e7cb      	b.n	1d23a <smp_pairing_random+0xc6>
	switch (smp->method) {
   1d2a2:	2300      	movs	r3, #0
   1d2a4:	e7ee      	b.n	1d284 <smp_pairing_random+0x110>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1d2a6:	2210      	movs	r2, #16
   1d2a8:	4649      	mov	r1, r9
   1d2aa:	f104 0017 	add.w	r0, r4, #23
   1d2ae:	f009 fc3f 	bl	26b30 <memcmp>
   1d2b2:	b108      	cbz	r0, 1d2b8 <smp_pairing_random+0x144>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1d2b4:	2504      	movs	r5, #4
   1d2b6:	e7ca      	b.n	1d24e <smp_pairing_random+0xda>
		switch (smp->method) {
   1d2b8:	7a22      	ldrb	r2, [r4, #8]
   1d2ba:	2a05      	cmp	r2, #5
   1d2bc:	d857      	bhi.n	1d36e <smp_pairing_random+0x1fa>
   1d2be:	e8df f002 	tbb	[pc, r2]
   1d2c2:	3d5b      	.short	0x3d5b
   1d2c4:	5b56033d 	.word	0x5b56033d
	sys_memcpy_swap(m, u, 32);
   1d2c8:	4b34      	ldr	r3, [pc, #208]	; (1d39c <smp_pairing_random+0x228>)
   1d2ca:	2220      	movs	r2, #32
   1d2cc:	6819      	ldr	r1, [r3, #0]
   1d2ce:	a80a      	add	r0, sp, #40	; 0x28
   1d2d0:	f7ff f804 	bl	1c2dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1d2d4:	2220      	movs	r2, #32
   1d2d6:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1d2da:	a812      	add	r0, sp, #72	; 0x48
   1d2dc:	f7fe fffe 	bl	1c2dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1d2e0:	2210      	movs	r2, #16
   1d2e2:	4639      	mov	r1, r7
   1d2e4:	a81a      	add	r0, sp, #104	; 0x68
   1d2e6:	f7fe fff9 	bl	1c2dc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1d2ea:	2210      	movs	r2, #16
   1d2ec:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1d2f0:	a806      	add	r0, sp, #24
   1d2f2:	f7fe fff3 	bl	1c2dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1d2f6:	ab06      	add	r3, sp, #24
   1d2f8:	2250      	movs	r2, #80	; 0x50
   1d2fa:	a90a      	add	r1, sp, #40	; 0x28
   1d2fc:	4618      	mov	r0, r3
   1d2fe:	f00b fadc 	bl	288ba <bt_smp_aes_cmac>
	if (err) {
   1d302:	2800      	cmp	r0, #0
   1d304:	d19b      	bne.n	1d23e <smp_pairing_random+0xca>
	memcpy(passkey, xs + 12, 4);
   1d306:	a909      	add	r1, sp, #36	; 0x24
   1d308:	2204      	movs	r2, #4
   1d30a:	a805      	add	r0, sp, #20
   1d30c:	f009 fc21 	bl	26b52 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1d310:	9b05      	ldr	r3, [sp, #20]
   1d312:	4a24      	ldr	r2, [pc, #144]	; (1d3a4 <smp_pairing_random+0x230>)
   1d314:	ba1b      	rev	r3, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d316:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1d318:	fbb3 f1f2 	udiv	r1, r3, r2
   1d31c:	fb02 3311 	mls	r3, r2, r1, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d320:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1d322:	9305      	str	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d324:	f00b fb9b 	bl	28a5e <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1d328:	2109      	movs	r1, #9
   1d32a:	f00b fb98 	bl	28a5e <atomic_set_bit>
			smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1d32e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d332:	9905      	ldr	r1, [sp, #20]
   1d334:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d338:	4798      	blx	r3
			return 0;
   1d33a:	e788      	b.n	1d24e <smp_pairing_random+0xda>
			smp->passkey_round++;
   1d33c:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1d340:	3301      	adds	r3, #1
   1d342:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   1d344:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   1d346:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   1d34a:	d015      	beq.n	1d378 <smp_pairing_random+0x204>
			if (bt_rand(smp->prnd, 16)) {
   1d34c:	2110      	movs	r1, #16
   1d34e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1d352:	f003 f927 	bl	205a4 <bt_rand>
   1d356:	2800      	cmp	r0, #0
   1d358:	f47f af71 	bne.w	1d23e <smp_pairing_random+0xca>
			atomic_set_bit(smp->allowed_cmds,
   1d35c:	2103      	movs	r1, #3
   1d35e:	4620      	mov	r0, r4
   1d360:	f00b fb7d 	bl	28a5e <atomic_set_bit>
}
   1d364:	b01e      	add	sp, #120	; 0x78
   1d366:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return smp_send_pairing_confirm(smp);
   1d36a:	f7ff bb25 	b.w	1c9b8 <smp_send_pairing_confirm>
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1d36e:	480e      	ldr	r0, [pc, #56]	; (1d3a8 <smp_pairing_random+0x234>)
   1d370:	2145      	movs	r1, #69	; 0x45
   1d372:	f008 fc4e 	bl	25c12 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1d376:	e762      	b.n	1d23e <smp_pairing_random+0xca>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1d378:	2107      	movs	r1, #7
   1d37a:	4630      	mov	r0, r6
   1d37c:	f00b fa64 	bl	28848 <atomic_test_bit>
   1d380:	b108      	cbz	r0, 1d386 <smp_pairing_random+0x212>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1d382:	2109      	movs	r1, #9
   1d384:	e75e      	b.n	1d244 <smp_pairing_random+0xd0>
		return compute_and_send_central_dhcheck(smp);
   1d386:	4620      	mov	r0, r4
}
   1d388:	b01e      	add	sp, #120	; 0x78
   1d38a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return compute_and_send_central_dhcheck(smp);
   1d38e:	f7ff bc69 	b.w	1cc64 <compute_and_send_central_dhcheck>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
   1d392:	460d      	mov	r5, r1
   1d394:	e75b      	b.n	1d24e <smp_pairing_random+0xda>
   1d396:	bf00      	nop
   1d398:	0002d69f 	.word	0x0002d69f
   1d39c:	200024c8 	.word	0x200024c8
   1d3a0:	0002d902 	.word	0x0002d902
   1d3a4:	000f4240 	.word	0x000f4240
   1d3a8:	0002d67e 	.word	0x0002d67e

0001d3ac <smp_pairing_complete>:
{
   1d3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1d3ae:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   1d3b2:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1d3b4:	1d05      	adds	r5, r0, #4
	if (!status) {
   1d3b6:	b9f1      	cbnz	r1, 1d3f6 <smp_pairing_complete+0x4a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1d3b8:	210d      	movs	r1, #13
   1d3ba:	4628      	mov	r0, r5
   1d3bc:	f00b fa44 	bl	28848 <atomic_test_bit>
		if (bond_flag) {
   1d3c0:	4607      	mov	r7, r0
   1d3c2:	b118      	cbz	r0, 1d3cc <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1d3c4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1d3c8:	f000 fcbc 	bl	1dd44 <bt_keys_store>
	return list->head;
   1d3cc:	4b31      	ldr	r3, [pc, #196]	; (1d494 <smp_pairing_complete+0xe8>)
   1d3ce:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1d3d0:	2b00      	cmp	r3, #0
   1d3d2:	d051      	beq.n	1d478 <smp_pairing_complete+0xcc>
	return node->next;
   1d3d4:	f853 590c 	ldr.w	r5, [r3], #-12
   1d3d8:	b105      	cbz	r5, 1d3dc <smp_pairing_complete+0x30>
   1d3da:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1d3dc:	681b      	ldr	r3, [r3, #0]
   1d3de:	b113      	cbz	r3, 1d3e6 <smp_pairing_complete+0x3a>
				listener->pairing_complete(conn, bond_flag);
   1d3e0:	4639      	mov	r1, r7
   1d3e2:	4620      	mov	r0, r4
   1d3e4:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1d3e6:	2d00      	cmp	r5, #0
   1d3e8:	d046      	beq.n	1d478 <smp_pairing_complete+0xcc>
   1d3ea:	68ea      	ldr	r2, [r5, #12]
   1d3ec:	b102      	cbz	r2, 1d3f0 <smp_pairing_complete+0x44>
   1d3ee:	3a0c      	subs	r2, #12
{
   1d3f0:	462b      	mov	r3, r5
   1d3f2:	4615      	mov	r5, r2
   1d3f4:	e7f2      	b.n	1d3dc <smp_pairing_complete+0x30>
	switch (smp_err) {
   1d3f6:	3901      	subs	r1, #1
   1d3f8:	b2c9      	uxtb	r1, r1
   1d3fa:	290e      	cmp	r1, #14
   1d3fc:	bf9c      	itt	ls
   1d3fe:	4b26      	ldrls	r3, [pc, #152]	; (1d498 <smp_pairing_complete+0xec>)
   1d400:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1d402:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (!status) {
   1d406:	bf88      	it	hi
   1d408:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1d40a:	b143      	cbz	r3, 1d41e <smp_pairing_complete+0x72>
   1d40c:	7b1b      	ldrb	r3, [r3, #12]
   1d40e:	bb63      	cbnz	r3, 1d46a <smp_pairing_complete+0xbe>
			bt_keys_clear(conn->le.keys);
   1d410:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1d414:	f000 fbf4 	bl	1dc00 <bt_keys_clear>
			conn->le.keys = NULL;
   1d418:	2300      	movs	r3, #0
   1d41a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1d41e:	2102      	movs	r1, #2
   1d420:	4628      	mov	r0, r5
   1d422:	f00b fa11 	bl	28848 <atomic_test_bit>
   1d426:	b940      	cbnz	r0, 1d43a <smp_pairing_complete+0x8e>
	switch (err) {
   1d428:	2f07      	cmp	r7, #7
   1d42a:	bf96      	itet	ls
   1d42c:	4b1b      	ldrls	r3, [pc, #108]	; (1d49c <smp_pairing_complete+0xf0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1d42e:	211f      	movhi	r1, #31
   1d430:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1d432:	463a      	mov	r2, r7
   1d434:	4620      	mov	r0, r4
   1d436:	f7fa fed7 	bl	181e8 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d43a:	2103      	movs	r1, #3
   1d43c:	4628      	mov	r0, r5
   1d43e:	f00b fa03 	bl	28848 <atomic_test_bit>
   1d442:	b1c8      	cbz	r0, 1d478 <smp_pairing_complete+0xcc>
	return list->head;
   1d444:	4b13      	ldr	r3, [pc, #76]	; (1d494 <smp_pairing_complete+0xe8>)
   1d446:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1d448:	b1b3      	cbz	r3, 1d478 <smp_pairing_complete+0xcc>
	return node->next;
   1d44a:	f853 590c 	ldr.w	r5, [r3], #-12
   1d44e:	b105      	cbz	r5, 1d452 <smp_pairing_complete+0xa6>
   1d450:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1d452:	685b      	ldr	r3, [r3, #4]
   1d454:	b113      	cbz	r3, 1d45c <smp_pairing_complete+0xb0>
					listener->pairing_failed(conn, security_err);
   1d456:	4639      	mov	r1, r7
   1d458:	4620      	mov	r0, r4
   1d45a:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1d45c:	b165      	cbz	r5, 1d478 <smp_pairing_complete+0xcc>
   1d45e:	68ea      	ldr	r2, [r5, #12]
   1d460:	b102      	cbz	r2, 1d464 <smp_pairing_complete+0xb8>
   1d462:	3a0c      	subs	r2, #12
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1d464:	462b      	mov	r3, r5
   1d466:	4615      	mov	r5, r2
   1d468:	e7f3      	b.n	1d452 <smp_pairing_complete+0xa6>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1d46a:	2102      	movs	r1, #2
   1d46c:	4628      	mov	r0, r5
   1d46e:	f00b f9eb 	bl	28848 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1d472:	2800      	cmp	r0, #0
   1d474:	d1cc      	bne.n	1d410 <smp_pairing_complete+0x64>
   1d476:	e7d2      	b.n	1d41e <smp_pairing_complete+0x72>
	smp_reset(smp);
   1d478:	4630      	mov	r0, r6
   1d47a:	f00b fb57 	bl	28b2c <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1d47e:	7a62      	ldrb	r2, [r4, #9]
   1d480:	7aa3      	ldrb	r3, [r4, #10]
   1d482:	429a      	cmp	r2, r3
   1d484:	d004      	beq.n	1d490 <smp_pairing_complete+0xe4>
		bt_smp_start_security(conn);
   1d486:	4620      	mov	r0, r4
}
   1d488:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1d48c:	f00b bcc4 	b.w	28e18 <bt_smp_start_security>
}
   1d490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d492:	bf00      	nop
   1d494:	20002334 	.word	0x20002334
   1d498:	0002da78 	.word	0x0002da78
   1d49c:	0002da90 	.word	0x0002da90

0001d4a0 <bt_smp_recv>:
{
   1d4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1d4a2:	898b      	ldrh	r3, [r1, #12]
{
   1d4a4:	4607      	mov	r7, r0
   1d4a6:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1d4a8:	b92b      	cbnz	r3, 1d4b6 <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
   1d4aa:	4828      	ldr	r0, [pc, #160]	; (1d54c <bt_smp_recv+0xac>)
   1d4ac:	2145      	movs	r1, #69	; 0x45
   1d4ae:	f008 fbb0 	bl	25c12 <z_log_minimal_printk>
}
   1d4b2:	2000      	movs	r0, #0
   1d4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1d4b6:	2101      	movs	r1, #1
   1d4b8:	f105 0008 	add.w	r0, r5, #8
   1d4bc:	f000 fff6 	bl	1e4ac <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1d4c0:	2104      	movs	r1, #4
   1d4c2:	4606      	mov	r6, r0
   1d4c4:	f1a7 00e8 	sub.w	r0, r7, #232	; 0xe8
   1d4c8:	f00b f9be 	bl	28848 <atomic_test_bit>
   1d4cc:	f1a7 04ec 	sub.w	r4, r7, #236	; 0xec
   1d4d0:	7832      	ldrb	r2, [r6, #0]
   1d4d2:	b120      	cbz	r0, 1d4de <bt_smp_recv+0x3e>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1d4d4:	481e      	ldr	r0, [pc, #120]	; (1d550 <bt_smp_recv+0xb0>)
   1d4d6:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1d4d8:	f008 fb9b 	bl	25c12 <z_log_minimal_printk>
		return 0;
   1d4dc:	e7e9      	b.n	1d4b2 <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1d4de:	2a0e      	cmp	r2, #14
   1d4e0:	d902      	bls.n	1d4e8 <bt_smp_recv+0x48>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1d4e2:	481c      	ldr	r0, [pc, #112]	; (1d554 <bt_smp_recv+0xb4>)
   1d4e4:	2157      	movs	r1, #87	; 0x57
   1d4e6:	e7f7      	b.n	1d4d8 <bt_smp_recv+0x38>
	if (!handlers[hdr->code].func) {
   1d4e8:	4f1b      	ldr	r7, [pc, #108]	; (1d558 <bt_smp_recv+0xb8>)
   1d4ea:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   1d4ee:	b943      	cbnz	r3, 1d502 <bt_smp_recv+0x62>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1d4f0:	2157      	movs	r1, #87	; 0x57
   1d4f2:	481a      	ldr	r0, [pc, #104]	; (1d55c <bt_smp_recv+0xbc>)
   1d4f4:	f008 fb8d 	bl	25c12 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1d4f8:	2107      	movs	r1, #7
		smp_error(smp, err);
   1d4fa:	4620      	mov	r0, r4
   1d4fc:	f00b fcf7 	bl	28eee <smp_error>
   1d500:	e7d7      	b.n	1d4b2 <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1d502:	4611      	mov	r1, r2
   1d504:	4620      	mov	r0, r4
   1d506:	f00b fa92 	bl	28a2e <atomic_test_and_clear_bit>
   1d50a:	7833      	ldrb	r3, [r6, #0]
   1d50c:	b948      	cbnz	r0, 1d522 <bt_smp_recv+0x82>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1d50e:	461a      	mov	r2, r3
   1d510:	4813      	ldr	r0, [pc, #76]	; (1d560 <bt_smp_recv+0xc0>)
   1d512:	2157      	movs	r1, #87	; 0x57
   1d514:	f008 fb7d 	bl	25c12 <z_log_minimal_printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1d518:	7833      	ldrb	r3, [r6, #0]
   1d51a:	2b05      	cmp	r3, #5
   1d51c:	d0c9      	beq.n	1d4b2 <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d51e:	2108      	movs	r1, #8
   1d520:	e7eb      	b.n	1d4fa <bt_smp_recv+0x5a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1d522:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1d526:	89aa      	ldrh	r2, [r5, #12]
   1d528:	7909      	ldrb	r1, [r1, #4]
   1d52a:	4291      	cmp	r1, r2
   1d52c:	d005      	beq.n	1d53a <bt_smp_recv+0x9a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1d52e:	2145      	movs	r1, #69	; 0x45
   1d530:	480c      	ldr	r0, [pc, #48]	; (1d564 <bt_smp_recv+0xc4>)
   1d532:	f008 fb6e 	bl	25c12 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1d536:	210a      	movs	r1, #10
   1d538:	e7df      	b.n	1d4fa <bt_smp_recv+0x5a>
	err = handlers[hdr->code].func(smp, buf);
   1d53a:	4629      	mov	r1, r5
   1d53c:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   1d540:	4620      	mov	r0, r4
   1d542:	4798      	blx	r3
	if (err) {
   1d544:	4601      	mov	r1, r0
   1d546:	2800      	cmp	r0, #0
   1d548:	d0b3      	beq.n	1d4b2 <bt_smp_recv+0x12>
   1d54a:	e7d6      	b.n	1d4fa <bt_smp_recv+0x5a>
   1d54c:	0002d920 	.word	0x0002d920
   1d550:	0002d940 	.word	0x0002d940
   1d554:	0002d976 	.word	0x0002d976
   1d558:	0002a784 	.word	0x0002a784
   1d55c:	0002d99d 	.word	0x0002d99d
   1d560:	0002d9bc 	.word	0x0002d9bc
   1d564:	0002d0a6 	.word	0x0002d0a6

0001d568 <bt_smp_pkey_ready>:
{
   1d568:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   1d56a:	4b17      	ldr	r3, [pc, #92]	; (1d5c8 <bt_smp_pkey_ready+0x60>)
   1d56c:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1d56e:	b928      	cbnz	r0, 1d57c <bt_smp_pkey_ready+0x14>
}
   1d570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Public key not available");
   1d574:	4815      	ldr	r0, [pc, #84]	; (1d5cc <bt_smp_pkey_ready+0x64>)
   1d576:	2157      	movs	r1, #87	; 0x57
   1d578:	f008 bb4b 	b.w	25c12 <z_log_minimal_printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d57c:	4c14      	ldr	r4, [pc, #80]	; (1d5d0 <bt_smp_pkey_ready+0x68>)
	z_impl_k_sem_give(sem);
   1d57e:	4815      	ldr	r0, [pc, #84]	; (1d5d4 <bt_smp_pkey_ready+0x6c>)
   1d580:	f005 f92a 	bl	227d8 <z_impl_k_sem_give>
   1d584:	f3bf 8f5b 	dmb	ish
   1d588:	6863      	ldr	r3, [r4, #4]
   1d58a:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1d58e:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d592:	4625      	mov	r5, r4
   1d594:	d017      	beq.n	1d5c6 <bt_smp_pkey_ready+0x5e>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1d596:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d59a:	78db      	ldrb	r3, [r3, #3]
   1d59c:	b99b      	cbnz	r3, 1d5c6 <bt_smp_pkey_ready+0x5e>
			err = sc_send_public_key(smp);
   1d59e:	4620      	mov	r0, r4
   1d5a0:	f7ff fb3e 	bl	1cc20 <sc_send_public_key>
			if (err) {
   1d5a4:	4601      	mov	r1, r0
   1d5a6:	b110      	cbz	r0, 1d5ae <bt_smp_pkey_ready+0x46>
				smp_error(smp, err);
   1d5a8:	4620      	mov	r0, r4
   1d5aa:	f00b fca0 	bl	28eee <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d5ae:	f3bf 8f5b 	dmb	ish
   1d5b2:	e855 3f00 	ldrex	r3, [r5]
   1d5b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1d5ba:	e845 3200 	strex	r2, r3, [r5]
   1d5be:	2a00      	cmp	r2, #0
   1d5c0:	d1f7      	bne.n	1d5b2 <bt_smp_pkey_ready+0x4a>
   1d5c2:	f3bf 8f5b 	dmb	ish
}
   1d5c6:	bd38      	pop	{r3, r4, r5, pc}
   1d5c8:	200024c8 	.word	0x200024c8
   1d5cc:	0002d9dc 	.word	0x0002d9dc
   1d5d0:	20001c08 	.word	0x20001c08
   1d5d4:	20000870 	.word	0x20000870

0001d5d8 <smp_ident_addr_info>:
{
   1d5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1d5dc:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1d5de:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1d5e2:	7833      	ldrb	r3, [r6, #0]
{
   1d5e4:	4605      	mov	r5, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1d5e6:	f104 0890 	add.w	r8, r4, #144	; 0x90
   1d5ea:	b1bb      	cbz	r3, 1d61c <smp_ident_addr_info+0x44>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1d5ec:	79b3      	ldrb	r3, [r6, #6]
   1d5ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d5f2:	2bc0      	cmp	r3, #192	; 0xc0
   1d5f4:	d012      	beq.n	1d61c <smp_ident_addr_info+0x44>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1d5f6:	4630      	mov	r0, r6
   1d5f8:	f7f7 fc3c 	bl	14e74 <bt_addr_le_str_real>
   1d5fc:	2145      	movs	r1, #69	; 0x45
   1d5fe:	4602      	mov	r2, r0
   1d600:	4844      	ldr	r0, [pc, #272]	; (1d714 <smp_ident_addr_info+0x13c>)
   1d602:	f008 fb06 	bl	25c12 <z_log_minimal_printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1d606:	4640      	mov	r0, r8
   1d608:	f7f7 fc34 	bl	14e74 <bt_addr_le_str_real>
   1d60c:	2145      	movs	r1, #69	; 0x45
   1d60e:	4602      	mov	r2, r0
   1d610:	4841      	ldr	r0, [pc, #260]	; (1d718 <smp_ident_addr_info+0x140>)
   1d612:	f008 fafe 	bl	25c12 <z_log_minimal_printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1d616:	200a      	movs	r0, #10
}
   1d618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1d61c:	2207      	movs	r2, #7
   1d61e:	4631      	mov	r1, r6
   1d620:	4640      	mov	r0, r8
   1d622:	f009 fa85 	bl	26b30 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1d626:	b168      	cbz	r0, 1d644 <smp_ident_addr_info+0x6c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1d628:	7a20      	ldrb	r0, [r4, #8]
   1d62a:	4631      	mov	r1, r6
   1d62c:	f000 fad8 	bl	1dbe0 <bt_keys_find_addr>
		if (keys) {
   1d630:	4607      	mov	r7, r0
   1d632:	b138      	cbz	r0, 1d644 <smp_ident_addr_info+0x6c>
			if (!update_keys_check(smp, keys)) {
   1d634:	4601      	mov	r1, r0
   1d636:	4628      	mov	r0, r5
   1d638:	f00b f90f 	bl	2885a <update_keys_check>
   1d63c:	b1b8      	cbz	r0, 1d66e <smp_ident_addr_info+0x96>
			bt_keys_clear(keys);
   1d63e:	4638      	mov	r0, r7
   1d640:	f000 fade 	bl	1dc00 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d644:	210d      	movs	r1, #13
   1d646:	1d28      	adds	r0, r5, #4
   1d648:	f00b f8fe 	bl	28848 <atomic_test_bit>
   1d64c:	2800      	cmp	r0, #0
   1d64e:	d03b      	beq.n	1d6c8 <smp_ident_addr_info+0xf0>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1d650:	7a21      	ldrb	r1, [r4, #8]
   1d652:	4642      	mov	r2, r8
   1d654:	2002      	movs	r0, #2
   1d656:	f00b fd0b 	bl	29070 <bt_keys_get_type>
		if (!keys) {
   1d65a:	4607      	mov	r7, r0
   1d65c:	b948      	cbnz	r0, 1d672 <smp_ident_addr_info+0x9a>
			BT_ERR("Unable to get keys for %s",
   1d65e:	4640      	mov	r0, r8
   1d660:	f7f7 fc08 	bl	14e74 <bt_addr_le_str_real>
   1d664:	2145      	movs	r1, #69	; 0x45
   1d666:	4602      	mov	r2, r0
   1d668:	482c      	ldr	r0, [pc, #176]	; (1d71c <smp_ident_addr_info+0x144>)
   1d66a:	f008 fad2 	bl	25c12 <z_log_minimal_printk>
				return BT_SMP_ERR_UNSPECIFIED;
   1d66e:	2008      	movs	r0, #8
   1d670:	e7d2      	b.n	1d618 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1d672:	78e3      	ldrb	r3, [r4, #3]
   1d674:	bbdb      	cbnz	r3, 1d6ee <smp_ident_addr_info+0x116>
			dst = &conn->le.resp_addr;
   1d676:	f104 019e 	add.w	r1, r4, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1d67a:	780b      	ldrb	r3, [r1, #0]
   1d67c:	2b01      	cmp	r3, #1
   1d67e:	d120      	bne.n	1d6c2 <smp_ident_addr_info+0xea>
		if (bt_addr_le_is_rpa(dst)) {
   1d680:	798b      	ldrb	r3, [r1, #6]
   1d682:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d686:	2b40      	cmp	r3, #64	; 0x40
   1d688:	d11b      	bne.n	1d6c2 <smp_ident_addr_info+0xea>
	memcpy(dst, src, sizeof(*dst));
   1d68a:	2206      	movs	r2, #6
   1d68c:	3101      	adds	r1, #1
   1d68e:	f107 003a 	add.w	r0, r7, #58	; 0x3a
   1d692:	f009 fa5e 	bl	26b52 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1d696:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1d69a:	b193      	cbz	r3, 1d6c2 <smp_ident_addr_info+0xea>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1d69c:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
   1d6a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d6a4:	2bc0      	cmp	r3, #192	; 0xc0
   1d6a6:	d00c      	beq.n	1d6c2 <smp_ident_addr_info+0xea>
	memcpy(dst, src, sizeof(*dst));
   1d6a8:	2207      	movs	r2, #7
   1d6aa:	4631      	mov	r1, r6
   1d6ac:	1c78      	adds	r0, r7, #1
   1d6ae:	f009 fa50 	bl	26b52 <memcpy>
   1d6b2:	2207      	movs	r2, #7
   1d6b4:	4631      	mov	r1, r6
   1d6b6:	4640      	mov	r0, r8
   1d6b8:	f009 fa4b 	bl	26b52 <memcpy>
				bt_conn_identity_resolved(conn);
   1d6bc:	4620      	mov	r0, r4
   1d6be:	f7fa fd53 	bl	18168 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1d6c2:	4638      	mov	r0, r7
   1d6c4:	f7f9 fa26 	bl	16b14 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1d6c8:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1d6cc:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d6d0:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1d6d2:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d6d6:	d503      	bpl.n	1d6e0 <smp_ident_addr_info+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d6d8:	210a      	movs	r1, #10
   1d6da:	4628      	mov	r0, r5
   1d6dc:	f00b f9bf 	bl	28a5e <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d6e0:	78e3      	ldrb	r3, [r4, #3]
   1d6e2:	b13b      	cbz	r3, 1d6f4 <smp_ident_addr_info+0x11c>
	if (!smp->local_dist && !smp->remote_dist) {
   1d6e4:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   1d6e8:	b174      	cbz	r4, 1d708 <smp_ident_addr_info+0x130>
	return 0;
   1d6ea:	2000      	movs	r0, #0
   1d6ec:	e794      	b.n	1d618 <smp_ident_addr_info+0x40>
			dst = &conn->le.init_addr;
   1d6ee:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1d6f2:	e7c2      	b.n	1d67a <smp_ident_addr_info+0xa2>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   1d6f4:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1d6f8:	2b00      	cmp	r3, #0
   1d6fa:	d1f3      	bne.n	1d6e4 <smp_ident_addr_info+0x10c>
		err = bt_smp_distribute_keys(smp);
   1d6fc:	4628      	mov	r0, r5
   1d6fe:	f7fe ff23 	bl	1c548 <bt_smp_distribute_keys>
		if (err) {
   1d702:	2800      	cmp	r0, #0
   1d704:	d0ee      	beq.n	1d6e4 <smp_ident_addr_info+0x10c>
   1d706:	e787      	b.n	1d618 <smp_ident_addr_info+0x40>
		smp_pairing_complete(smp, 0);
   1d708:	4621      	mov	r1, r4
   1d70a:	4628      	mov	r0, r5
   1d70c:	f7ff fe4e 	bl	1d3ac <smp_pairing_complete>
   1d710:	e7eb      	b.n	1d6ea <smp_ident_addr_info+0x112>
   1d712:	bf00      	nop
   1d714:	0002d9fa 	.word	0x0002d9fa
   1d718:	0002da13 	.word	0x0002da13
   1d71c:	0002d6dd 	.word	0x0002d6dd

0001d720 <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, uint8_t dist_complete)
   1d720:	b538      	push	{r3, r4, r5, lr}
   1d722:	460d      	mov	r5, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1d724:	2106      	movs	r1, #6
   1d726:	f009 fe20 	bl	2736a <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1d72a:	4604      	mov	r4, r0
   1d72c:	b950      	cbnz	r0, 1d744 <smp_check_complete.part.0+0x24>
   1d72e:	490d      	ldr	r1, [pc, #52]	; (1d764 <smp_check_complete.part.0+0x44>)
   1d730:	480d      	ldr	r0, [pc, #52]	; (1d768 <smp_check_complete.part.0+0x48>)
   1d732:	f44f 7250 	mov.w	r2, #832	; 0x340
   1d736:	f008 fa5e 	bl	25bf6 <assert_print>
   1d73a:	480a      	ldr	r0, [pc, #40]	; (1d764 <smp_check_complete.part.0+0x44>)
   1d73c:	f44f 7150 	mov.w	r1, #832	; 0x340
   1d740:	f008 fa52 	bl	25be8 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1d744:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1d748:	ea23 0105 	bic.w	r1, r3, r5
   1d74c:	f804 1c04 	strb.w	r1, [r4, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1d750:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1d754:	b929      	cbnz	r1, 1d762 <smp_check_complete.part.0+0x42>
			smp_pairing_complete(smp, 0);
   1d756:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
}
   1d75a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			smp_pairing_complete(smp, 0);
   1d75e:	f7ff be25 	b.w	1d3ac <smp_pairing_complete>
}
   1d762:	bd38      	pop	{r3, r4, r5, pc}
   1d764:	0002da20 	.word	0x0002da20
   1d768:	0002ab8c 	.word	0x0002ab8c

0001d76c <smp_central_ident>:
{
   1d76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d770:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1d772:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1d776:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d778:	210d      	movs	r1, #13
   1d77a:	3004      	adds	r0, #4
   1d77c:	f00b f864 	bl	28848 <atomic_test_bit>
   1d780:	b1f8      	cbz	r0, 1d7c2 <smp_central_ident+0x56>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1d782:	f106 0890 	add.w	r8, r6, #144	; 0x90
   1d786:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1d788:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1d78a:	4642      	mov	r2, r8
   1d78c:	2004      	movs	r0, #4
   1d78e:	f00b fc6f 	bl	29070 <bt_keys_get_type>
		if (!keys) {
   1d792:	4605      	mov	r5, r0
   1d794:	b950      	cbnz	r0, 1d7ac <smp_central_ident+0x40>
			BT_ERR("Unable to get keys for %s",
   1d796:	4640      	mov	r0, r8
   1d798:	f7f7 fb6c 	bl	14e74 <bt_addr_le_str_real>
   1d79c:	2145      	movs	r1, #69	; 0x45
   1d79e:	4602      	mov	r2, r0
   1d7a0:	481b      	ldr	r0, [pc, #108]	; (1d810 <smp_central_ident+0xa4>)
   1d7a2:	f008 fa36 	bl	25c12 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1d7a6:	2008      	movs	r0, #8
}
   1d7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1d7ac:	2202      	movs	r2, #2
   1d7ae:	4639      	mov	r1, r7
   1d7b0:	3018      	adds	r0, #24
   1d7b2:	f009 f9ce 	bl	26b52 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1d7b6:	2208      	movs	r2, #8
   1d7b8:	1cb9      	adds	r1, r7, #2
   1d7ba:	f105 0010 	add.w	r0, r5, #16
   1d7be:	f009 f9c8 	bl	26b52 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1d7c2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1d7c6:	f023 0201 	bic.w	r2, r3, #1
   1d7ca:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1d7ce:	079a      	lsls	r2, r3, #30
   1d7d0:	d50a      	bpl.n	1d7e8 <smp_central_ident+0x7c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1d7d2:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d7d4:	4620      	mov	r0, r4
   1d7d6:	f00b f942 	bl	28a5e <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d7da:	78f3      	ldrb	r3, [r6, #3]
   1d7dc:	b143      	cbz	r3, 1d7f0 <smp_central_ident+0x84>
	if (!smp->local_dist && !smp->remote_dist) {
   1d7de:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1d7e2:	b17d      	cbz	r5, 1d804 <smp_central_ident+0x98>
	return 0;
   1d7e4:	2000      	movs	r0, #0
   1d7e6:	e7df      	b.n	1d7a8 <smp_central_ident+0x3c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d7e8:	075b      	lsls	r3, r3, #29
   1d7ea:	d5f6      	bpl.n	1d7da <smp_central_ident+0x6e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d7ec:	210a      	movs	r1, #10
   1d7ee:	e7f1      	b.n	1d7d4 <smp_central_ident+0x68>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   1d7f0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1d7f4:	2b00      	cmp	r3, #0
   1d7f6:	d1f2      	bne.n	1d7de <smp_central_ident+0x72>
		err = bt_smp_distribute_keys(smp);
   1d7f8:	4620      	mov	r0, r4
   1d7fa:	f7fe fea5 	bl	1c548 <bt_smp_distribute_keys>
		if (err) {
   1d7fe:	2800      	cmp	r0, #0
   1d800:	d0ed      	beq.n	1d7de <smp_central_ident+0x72>
   1d802:	e7d1      	b.n	1d7a8 <smp_central_ident+0x3c>
		smp_pairing_complete(smp, 0);
   1d804:	4620      	mov	r0, r4
   1d806:	4629      	mov	r1, r5
   1d808:	f7ff fdd0 	bl	1d3ac <smp_pairing_complete>
	return 0;
   1d80c:	4628      	mov	r0, r5
   1d80e:	e7cb      	b.n	1d7a8 <smp_central_ident+0x3c>
   1d810:	0002d6dd 	.word	0x0002d6dd

0001d814 <smp_pairing_failed>:
{
   1d814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d818:	460e      	mov	r6, r1
   1d81a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1d81c:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d820:	f7fe fd1a 	bl	1c258 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1d824:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("reason 0x%x", req->reason);
   1d826:	2145      	movs	r1, #69	; 0x45
   1d828:	7832      	ldrb	r2, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d82a:	4605      	mov	r5, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1d82c:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   1d82e:	480e      	ldr	r0, [pc, #56]	; (1d868 <smp_pairing_failed+0x54>)
   1d830:	f008 f9ef 	bl	25c12 <z_log_minimal_printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1d834:	210a      	movs	r1, #10
   1d836:	4638      	mov	r0, r7
   1d838:	f00b f8f9 	bl	28a2e <atomic_test_and_clear_bit>
   1d83c:	b138      	cbz	r0, 1d84e <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1d83e:	b96d      	cbnz	r5, 1d85c <smp_pairing_failed+0x48>
	smp_pairing_complete(smp, req->reason);
   1d840:	4620      	mov	r0, r4
   1d842:	7831      	ldrb	r1, [r6, #0]
   1d844:	f7ff fdb2 	bl	1d3ac <smp_pairing_complete>
}
   1d848:	2000      	movs	r0, #0
   1d84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1d84e:	210b      	movs	r1, #11
   1d850:	4638      	mov	r0, r7
   1d852:	f00b f8ec 	bl	28a2e <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1d856:	2800      	cmp	r0, #0
   1d858:	d1f1      	bne.n	1d83e <smp_pairing_failed+0x2a>
   1d85a:	e7f1      	b.n	1d840 <smp_pairing_failed+0x2c>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1d85c:	692b      	ldr	r3, [r5, #16]
   1d85e:	2b00      	cmp	r3, #0
   1d860:	d0ee      	beq.n	1d840 <smp_pairing_failed+0x2c>
			smp_auth_cb->cancel(conn);
   1d862:	4640      	mov	r0, r8
   1d864:	4798      	blx	r3
   1d866:	e7eb      	b.n	1d840 <smp_pairing_failed+0x2c>
   1d868:	0002da4f 	.word	0x0002da4f

0001d86c <bt_smp_encrypt_change>:
{
   1d86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   1d870:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d872:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1d876:	4604      	mov	r4, r0
   1d878:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d87a:	4630      	mov	r0, r6
   1d87c:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1d87e:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d882:	f00b f8d4 	bl	28a2e <atomic_test_and_clear_bit>
   1d886:	2800      	cmp	r0, #0
   1d888:	d06e      	beq.n	1d968 <bt_smp_encrypt_change+0xfc>
	if (hci_status) {
   1d88a:	b1cf      	cbz	r7, 1d8c0 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d88c:	2103      	movs	r1, #3
   1d88e:	4630      	mov	r0, r6
   1d890:	f00a ffda 	bl	28848 <atomic_test_bit>
   1d894:	2800      	cmp	r0, #0
   1d896:	d067      	beq.n	1d968 <bt_smp_encrypt_change+0xfc>
			uint8_t smp_err = smp_err_get(
   1d898:	4638      	mov	r0, r7
   1d89a:	f7f8 fbbb 	bl	16014 <bt_security_err_get>
	switch (auth_err) {
   1d89e:	3801      	subs	r0, #1
   1d8a0:	b2c0      	uxtb	r0, r0
   1d8a2:	2808      	cmp	r0, #8
   1d8a4:	bf9a      	itte	ls
   1d8a6:	4b32      	ldrls	r3, [pc, #200]	; (1d970 <bt_smp_encrypt_change+0x104>)
   1d8a8:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1d8aa:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1d8ac:	2102      	movs	r1, #2
   1d8ae:	4630      	mov	r0, r6
   1d8b0:	f00b f8d5 	bl	28a5e <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1d8b4:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1d8b6:	4628      	mov	r0, r5
}
   1d8b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   1d8bc:	f7ff bd76 	b.w	1d3ac <smp_pairing_complete>
	if (!conn->encrypt) {
   1d8c0:	f898 300b 	ldrb.w	r3, [r8, #11]
   1d8c4:	2b00      	cmp	r3, #0
   1d8c6:	d04f      	beq.n	1d968 <bt_smp_encrypt_change+0xfc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d8c8:	2103      	movs	r1, #3
   1d8ca:	4630      	mov	r0, r6
   1d8cc:	f00a ffbc 	bl	28848 <atomic_test_bit>
   1d8d0:	b920      	cbnz	r0, 1d8dc <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   1d8d2:	4628      	mov	r0, r5
}
   1d8d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   1d8d8:	f00b b928 	b.w	28b2c <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d8dc:	2105      	movs	r1, #5
   1d8de:	4630      	mov	r0, r6
   1d8e0:	f00a ffb2 	bl	28848 <atomic_test_bit>
   1d8e4:	b1b8      	cbz	r0, 1d916 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1d8e6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1d8ea:	071b      	lsls	r3, r3, #28
   1d8ec:	d507      	bpl.n	1d8fe <bt_smp_encrypt_change+0x92>
   1d8ee:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1d8f2:	071f      	lsls	r7, r3, #28
   1d8f4:	d503      	bpl.n	1d8fe <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1d8f6:	2111      	movs	r1, #17
   1d8f8:	4630      	mov	r0, r6
   1d8fa:	f00b f8b0 	bl	28a5e <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1d8fe:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1d902:	f023 0308 	bic.w	r3, r3, #8
   1d906:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1d90a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1d90e:	f023 0308 	bic.w	r3, r3, #8
   1d912:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1d916:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1d91a:	07d8      	lsls	r0, r3, #31
   1d91c:	d508      	bpl.n	1d930 <bt_smp_encrypt_change+0xc4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1d91e:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d920:	4628      	mov	r0, r5
   1d922:	f00b f89c 	bl	28a5e <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d926:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1d92a:	079b      	lsls	r3, r3, #30
   1d92c:	d506      	bpl.n	1d93c <bt_smp_encrypt_change+0xd0>
   1d92e:	e009      	b.n	1d944 <bt_smp_encrypt_change+0xd8>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1d930:	0799      	lsls	r1, r3, #30
   1d932:	d501      	bpl.n	1d938 <bt_smp_encrypt_change+0xcc>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1d934:	2108      	movs	r1, #8
   1d936:	e7f3      	b.n	1d920 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d938:	075a      	lsls	r2, r3, #29
   1d93a:	d417      	bmi.n	1d96c <bt_smp_encrypt_change+0x100>
		bt_id_add(conn->le.keys);
   1d93c:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
   1d940:	f7f9 f8e8 	bl	16b14 <bt_id_add>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1d944:	2102      	movs	r1, #2
   1d946:	4630      	mov	r0, r6
   1d948:	f00b f889 	bl	28a5e <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d94c:	f898 3003 	ldrb.w	r3, [r8, #3]
   1d950:	b913      	cbnz	r3, 1d958 <bt_smp_encrypt_change+0xec>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   1d952:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1d956:	b93b      	cbnz	r3, 1d968 <bt_smp_encrypt_change+0xfc>
	if (bt_smp_distribute_keys(smp)) {
   1d958:	4628      	mov	r0, r5
   1d95a:	f7fe fdf5 	bl	1c548 <bt_smp_distribute_keys>
   1d95e:	b918      	cbnz	r0, 1d968 <bt_smp_encrypt_change+0xfc>
	if (!smp->local_dist && !smp->remote_dist) {
   1d960:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1d964:	2900      	cmp	r1, #0
   1d966:	d0a6      	beq.n	1d8b6 <bt_smp_encrypt_change+0x4a>
}
   1d968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d96c:	210a      	movs	r1, #10
   1d96e:	e7d7      	b.n	1d920 <bt_smp_encrypt_change+0xb4>
   1d970:	0002da87 	.word	0x0002da87

0001d974 <smp_timeout>:
{
   1d974:	b510      	push	{r4, lr}
	BT_ERR("SMP Timeout");
   1d976:	2145      	movs	r1, #69	; 0x45
{
   1d978:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1d97a:	4807      	ldr	r0, [pc, #28]	; (1d998 <smp_timeout+0x24>)
   1d97c:	f008 f949 	bl	25c12 <z_log_minimal_printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1d980:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1d984:	2108      	movs	r1, #8
   1d986:	f7ff fd11 	bl	1d3ac <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d98a:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
   1d98e:	2104      	movs	r1, #4
}
   1d990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d994:	f00b b863 	b.w	28a5e <atomic_set_bit>
   1d998:	0002da60 	.word	0x0002da60

0001d99c <bt_smp_update_keys>:
{
   1d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d99e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1d9a0:	f7fe fcc2 	bl	1c328 <smp_chan_get>
	if (!smp) {
   1d9a4:	4605      	mov	r5, r0
   1d9a6:	2800      	cmp	r0, #0
   1d9a8:	d073      	beq.n	1da92 <bt_smp_update_keys+0xf6>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d9aa:	1d06      	adds	r6, r0, #4
   1d9ac:	2103      	movs	r1, #3
   1d9ae:	4630      	mov	r0, r6
   1d9b0:	f00a ff4a 	bl	28848 <atomic_test_bit>
   1d9b4:	2800      	cmp	r0, #0
   1d9b6:	d06c      	beq.n	1da92 <bt_smp_update_keys+0xf6>
	if (conn->le.keys) {
   1d9b8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1d9bc:	b108      	cbz	r0, 1d9c2 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1d9be:	f000 f91f 	bl	1dc00 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d9c2:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1d9c6:	7a20      	ldrb	r0, [r4, #8]
   1d9c8:	4639      	mov	r1, r7
   1d9ca:	f000 f87b 	bl	1dac4 <bt_keys_get_addr>
   1d9ce:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1d9d2:	b968      	cbnz	r0, 1d9f0 <bt_smp_update_keys+0x54>
		BT_ERR("Unable to get keys for %s",
   1d9d4:	4638      	mov	r0, r7
   1d9d6:	f7f7 fa4d 	bl	14e74 <bt_addr_le_str_real>
   1d9da:	2145      	movs	r1, #69	; 0x45
   1d9dc:	4602      	mov	r2, r0
   1d9de:	482d      	ldr	r0, [pc, #180]	; (1da94 <bt_smp_update_keys+0xf8>)
   1d9e0:	f008 f917 	bl	25c12 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d9e4:	4628      	mov	r0, r5
   1d9e6:	2108      	movs	r1, #8
}
   1d9e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d9ec:	f00b ba7f 	b.w	28eee <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1d9f0:	210e      	movs	r1, #14
   1d9f2:	4630      	mov	r0, r6
   1d9f4:	f00a ff28 	bl	28848 <atomic_test_bit>
   1d9f8:	b128      	cbz	r0, 1da06 <bt_smp_update_keys+0x6a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1d9fa:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1d9fe:	7b53      	ldrb	r3, [r2, #13]
   1da00:	f043 0302 	orr.w	r3, r3, #2
   1da04:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1da06:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1da08:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	switch (smp->method) {
   1da0c:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1da0e:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1da10:	d836      	bhi.n	1da80 <bt_smp_update_keys+0xe4>
   1da12:	b3c2      	cbz	r2, 1da86 <bt_smp_update_keys+0xea>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1da14:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1da18:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1da1a:	7b6b      	ldrb	r3, [r5, #13]
   1da1c:	7d2a      	ldrb	r2, [r5, #20]
   1da1e:	4293      	cmp	r3, r2
   1da20:	bf28      	it	cs
   1da22:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1da24:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1da26:	4630      	mov	r0, r6
   1da28:	2105      	movs	r1, #5
   1da2a:	f00a ff0d 	bl	28848 <atomic_test_bit>
   1da2e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1da32:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1da34:	b350      	cbz	r0, 1da8c <bt_smp_update_keys+0xf0>
		conn->le.keys->flags |= BT_KEYS_SC;
   1da36:	f042 0210 	orr.w	r2, r2, #16
   1da3a:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1da3c:	210d      	movs	r1, #13
   1da3e:	4630      	mov	r0, r6
   1da40:	f00a ff02 	bl	28848 <atomic_test_bit>
   1da44:	b328      	cbz	r0, 1da92 <bt_smp_update_keys+0xf6>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1da46:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1da4a:	2120      	movs	r1, #32
   1da4c:	f00b fb20 	bl	29090 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1da50:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1da54:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1da58:	2210      	movs	r2, #16
   1da5a:	301a      	adds	r0, #26
   1da5c:	f009 f879 	bl	26b52 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1da60:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1da64:	2208      	movs	r2, #8
   1da66:	2100      	movs	r1, #0
   1da68:	3010      	adds	r0, #16
   1da6a:	f009 f87d 	bl	26b68 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1da6e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1da72:	2202      	movs	r2, #2
}
   1da74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1da78:	2100      	movs	r1, #0
   1da7a:	3018      	adds	r0, #24
   1da7c:	f009 b874 	b.w	26b68 <memset>
	switch (smp->method) {
   1da80:	3a05      	subs	r2, #5
   1da82:	2a01      	cmp	r2, #1
   1da84:	d9c6      	bls.n	1da14 <bt_smp_update_keys+0x78>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1da86:	f023 0301 	bic.w	r3, r3, #1
   1da8a:	e7c5      	b.n	1da18 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1da8c:	f022 0210 	bic.w	r2, r2, #16
   1da90:	735a      	strb	r2, [r3, #13]
}
   1da92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1da94:	0002d6dd 	.word	0x0002d6dd

0001da98 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1da98:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1da9a:	4b07      	ldr	r3, [pc, #28]	; (1dab8 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1da9c:	4807      	ldr	r0, [pc, #28]	; (1dabc <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1da9e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1daa2:	f003 0306 	and.w	r3, r3, #6
   1daa6:	1f9a      	subs	r2, r3, #6
   1daa8:	4253      	negs	r3, r2
   1daaa:	4153      	adcs	r3, r2
   1daac:	4a04      	ldr	r2, [pc, #16]	; (1dac0 <bt_smp_init+0x28>)
   1daae:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1dab0:	f7f9 fd9a 	bl	175e8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1dab4:	2000      	movs	r0, #0
   1dab6:	bd08      	pop	{r3, pc}
   1dab8:	20000340 	.word	0x20000340
   1dabc:	20000670 	.word	0x20000670
   1dac0:	200028d7 	.word	0x200028d7

0001dac4 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1dac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1dac6:	4d11      	ldr	r5, [pc, #68]	; (1db0c <bt_keys_get_addr+0x48>)
   1dac8:	782b      	ldrb	r3, [r5, #0]
   1daca:	4283      	cmp	r3, r0
{
   1dacc:	4606      	mov	r6, r0
   1dace:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1dad0:	d00b      	beq.n	1daea <bt_keys_get_addr+0x26>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1dad2:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1dad4:	480e      	ldr	r0, [pc, #56]	; (1db10 <bt_keys_get_addr+0x4c>)
   1dad6:	9400      	str	r4, [sp, #0]
   1dad8:	2207      	movs	r2, #7
   1dada:	4669      	mov	r1, sp
   1dadc:	f8cd 4003 	str.w	r4, [sp, #3]
   1dae0:	f009 f826 	bl	26b30 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1dae4:	b150      	cbz	r0, 1dafc <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1dae6:	4620      	mov	r0, r4
   1dae8:	e006      	b.n	1daf8 <bt_keys_get_addr+0x34>
   1daea:	2207      	movs	r2, #7
   1daec:	1c68      	adds	r0, r5, #1
   1daee:	f009 f81f 	bl	26b30 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1daf2:	2800      	cmp	r0, #0
   1daf4:	d1ed      	bne.n	1dad2 <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
   1daf6:	4628      	mov	r0, r5
}
   1daf8:	b003      	add	sp, #12
   1dafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
   1dafc:	4804      	ldr	r0, [pc, #16]	; (1db10 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   1dafe:	702e      	strb	r6, [r5, #0]
   1db00:	2207      	movs	r2, #7
   1db02:	4639      	mov	r1, r7
   1db04:	f009 f825 	bl	26b52 <memcpy>
		return keys;
   1db08:	4800      	ldr	r0, [pc, #0]	; (1db0c <bt_keys_get_addr+0x48>)
}
   1db0a:	e7f5      	b.n	1daf8 <bt_keys_get_addr+0x34>
   1db0c:	200024cc 	.word	0x200024cc
   1db10:	200024cd 	.word	0x200024cd

0001db14 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1db14:	460b      	mov	r3, r1
   1db16:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1db18:	4a04      	ldr	r2, [pc, #16]	; (1db2c <bt_keys_foreach+0x18>)
{
   1db1a:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1db1c:	89d4      	ldrh	r4, [r2, #14]
   1db1e:	4204      	tst	r4, r0
   1db20:	d002      	beq.n	1db28 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1db22:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1db24:	4610      	mov	r0, r2
   1db26:	4718      	bx	r3
}
   1db28:	bc10      	pop	{r4}
   1db2a:	4770      	bx	lr
   1db2c:	200024cc 	.word	0x200024cc

0001db30 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1db30:	b508      	push	{r3, lr}
	/* We do this in commit() rather than add() since add() may get
	 * called multiple times for the same address, especially if
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
   1db32:	4903      	ldr	r1, [pc, #12]	; (1db40 <keys_commit+0x10>)
   1db34:	2200      	movs	r2, #0
   1db36:	203f      	movs	r0, #63	; 0x3f
   1db38:	f7ff ffec 	bl	1db14 <bt_keys_foreach>
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
	}

	return 0;
}
   1db3c:	2000      	movs	r0, #0
   1db3e:	bd08      	pop	{r3, pc}
   1db40:	0002906d 	.word	0x0002906d

0001db44 <bt_keys_find>:
{
   1db44:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1db46:	4c09      	ldr	r4, [pc, #36]	; (1db6c <bt_keys_find+0x28>)
{
   1db48:	460b      	mov	r3, r1
   1db4a:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1db4c:	89e2      	ldrh	r2, [r4, #14]
   1db4e:	4202      	tst	r2, r0
   1db50:	d007      	beq.n	1db62 <bt_keys_find+0x1e>
   1db52:	7822      	ldrb	r2, [r4, #0]
   1db54:	429a      	cmp	r2, r3
   1db56:	d104      	bne.n	1db62 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1db58:	2207      	movs	r2, #7
   1db5a:	1c60      	adds	r0, r4, #1
   1db5c:	f008 ffe8 	bl	26b30 <memcmp>
   1db60:	b108      	cbz	r0, 1db66 <bt_keys_find+0x22>
	return NULL;
   1db62:	2000      	movs	r0, #0
}
   1db64:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1db66:	4620      	mov	r0, r4
   1db68:	e7fc      	b.n	1db64 <bt_keys_find+0x20>
   1db6a:	bf00      	nop
   1db6c:	200024cc 	.word	0x200024cc

0001db70 <bt_keys_find_irk>:
{
   1db70:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1db72:	780b      	ldrb	r3, [r1, #0]
   1db74:	2b01      	cmp	r3, #1
   1db76:	4606      	mov	r6, r0
   1db78:	460d      	mov	r5, r1
   1db7a:	d001      	beq.n	1db80 <bt_keys_find_irk+0x10>
		return NULL;
   1db7c:	2000      	movs	r0, #0
}
   1db7e:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1db80:	798b      	ldrb	r3, [r1, #6]
   1db82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1db86:	2b40      	cmp	r3, #64	; 0x40
   1db88:	d1f8      	bne.n	1db7c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1db8a:	4c12      	ldr	r4, [pc, #72]	; (1dbd4 <bt_keys_find_irk+0x64>)
   1db8c:	89e3      	ldrh	r3, [r4, #14]
   1db8e:	079b      	lsls	r3, r3, #30
   1db90:	d5f4      	bpl.n	1db7c <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1db92:	7823      	ldrb	r3, [r4, #0]
   1db94:	42b3      	cmp	r3, r6
   1db96:	d10b      	bne.n	1dbb0 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   1db98:	2206      	movs	r2, #6
   1db9a:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   1db9e:	1c68      	adds	r0, r5, #1
   1dba0:	f008 ffc6 	bl	26b30 <memcmp>
   1dba4:	b908      	cbnz	r0, 1dbaa <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   1dba6:	4620      	mov	r0, r4
   1dba8:	e7e9      	b.n	1db7e <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1dbaa:	89e3      	ldrh	r3, [r4, #14]
   1dbac:	079a      	lsls	r2, r3, #30
   1dbae:	d5e5      	bpl.n	1db7c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1dbb0:	7823      	ldrb	r3, [r4, #0]
   1dbb2:	42b3      	cmp	r3, r6
   1dbb4:	d1e2      	bne.n	1db7c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1dbb6:	3501      	adds	r5, #1
   1dbb8:	4807      	ldr	r0, [pc, #28]	; (1dbd8 <bt_keys_find_irk+0x68>)
   1dbba:	4629      	mov	r1, r5
   1dbbc:	f009 f80f 	bl	26bde <bt_rpa_irk_matches>
   1dbc0:	2800      	cmp	r0, #0
   1dbc2:	d0db      	beq.n	1db7c <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1dbc4:	4805      	ldr	r0, [pc, #20]	; (1dbdc <bt_keys_find_irk+0x6c>)
   1dbc6:	2206      	movs	r2, #6
   1dbc8:	4629      	mov	r1, r5
   1dbca:	f008 ffc2 	bl	26b52 <memcpy>
			return &key_pool[i];
   1dbce:	4801      	ldr	r0, [pc, #4]	; (1dbd4 <bt_keys_find_irk+0x64>)
}
   1dbd0:	e7d5      	b.n	1db7e <bt_keys_find_irk+0xe>
   1dbd2:	bf00      	nop
   1dbd4:	200024cc 	.word	0x200024cc
   1dbd8:	200024f6 	.word	0x200024f6
   1dbdc:	20002506 	.word	0x20002506

0001dbe0 <bt_keys_find_addr>:
{
   1dbe0:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1dbe2:	4c06      	ldr	r4, [pc, #24]	; (1dbfc <bt_keys_find_addr+0x1c>)
   1dbe4:	7823      	ldrb	r3, [r4, #0]
   1dbe6:	4283      	cmp	r3, r0
   1dbe8:	d104      	bne.n	1dbf4 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1dbea:	2207      	movs	r2, #7
   1dbec:	1c60      	adds	r0, r4, #1
   1dbee:	f008 ff9f 	bl	26b30 <memcmp>
   1dbf2:	b108      	cbz	r0, 1dbf8 <bt_keys_find_addr+0x18>
	return NULL;
   1dbf4:	2000      	movs	r0, #0
}
   1dbf6:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1dbf8:	4620      	mov	r0, r4
   1dbfa:	e7fc      	b.n	1dbf6 <bt_keys_find_addr+0x16>
   1dbfc:	200024cc 	.word	0x200024cc

0001dc00 <bt_keys_clear>:
{
   1dc00:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1dc02:	7a03      	ldrb	r3, [r0, #8]
   1dc04:	075b      	lsls	r3, r3, #29
{
   1dc06:	b08c      	sub	sp, #48	; 0x30
   1dc08:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1dc0a:	d501      	bpl.n	1dc10 <bt_keys_clear+0x10>
		bt_id_del(keys);
   1dc0c:	f7f9 f834 	bl	16c78 <bt_id_del>
		if (keys->id) {
   1dc10:	4625      	mov	r5, r4
   1dc12:	f815 2b01 	ldrb.w	r2, [r5], #1
   1dc16:	b1b2      	cbz	r2, 1dc46 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   1dc18:	ae02      	add	r6, sp, #8
   1dc1a:	2104      	movs	r1, #4
   1dc1c:	4630      	mov	r0, r6
   1dc1e:	f007 fd5f 	bl	256e0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1dc22:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1dc24:	4a09      	ldr	r2, [pc, #36]	; (1dc4c <bt_keys_clear+0x4c>)
   1dc26:	462b      	mov	r3, r5
   1dc28:	2124      	movs	r1, #36	; 0x24
   1dc2a:	a803      	add	r0, sp, #12
   1dc2c:	f7f7 fa00 	bl	15030 <bt_settings_encode_key>
		settings_delete(key);
   1dc30:	a803      	add	r0, sp, #12
   1dc32:	f008 fa67 	bl	26104 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1dc36:	225c      	movs	r2, #92	; 0x5c
   1dc38:	2100      	movs	r1, #0
   1dc3a:	4620      	mov	r0, r4
}
   1dc3c:	b00c      	add	sp, #48	; 0x30
   1dc3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1dc42:	f008 bf91 	b.w	26b68 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1dc46:	9200      	str	r2, [sp, #0]
   1dc48:	e7ec      	b.n	1dc24 <bt_keys_clear+0x24>
   1dc4a:	bf00      	nop
   1dc4c:	0002db92 	.word	0x0002db92

0001dc50 <keys_set>:
{
   1dc50:	b570      	push	{r4, r5, r6, lr}
   1dc52:	4605      	mov	r5, r0
   1dc54:	b098      	sub	sp, #96	; 0x60
   1dc56:	4614      	mov	r4, r2
   1dc58:	4618      	mov	r0, r3
	if (!name) {
   1dc5a:	b945      	cbnz	r5, 1dc6e <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
   1dc5c:	4832      	ldr	r0, [pc, #200]	; (1dd28 <keys_set+0xd8>)
   1dc5e:	2145      	movs	r1, #69	; 0x45
   1dc60:	f007 ffd7 	bl	25c12 <z_log_minimal_printk>
		return -EINVAL;
   1dc64:	f06f 0415 	mvn.w	r4, #21
}
   1dc68:	4620      	mov	r0, r4
   1dc6a:	b018      	add	sp, #96	; 0x60
   1dc6c:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1dc6e:	2250      	movs	r2, #80	; 0x50
   1dc70:	a904      	add	r1, sp, #16
   1dc72:	47a0      	blx	r4
	if (len < 0) {
   1dc74:	1e04      	subs	r4, r0, #0
   1dc76:	da05      	bge.n	1dc84 <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
   1dc78:	482c      	ldr	r0, [pc, #176]	; (1dd2c <keys_set+0xdc>)
   1dc7a:	4622      	mov	r2, r4
   1dc7c:	2145      	movs	r1, #69	; 0x45
   1dc7e:	f007 ffc8 	bl	25c12 <z_log_minimal_printk>
   1dc82:	e7ef      	b.n	1dc64 <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
   1dc84:	a902      	add	r1, sp, #8
   1dc86:	4628      	mov	r0, r5
   1dc88:	f008 ffd3 	bl	26c32 <bt_settings_decode_key>
	if (err) {
   1dc8c:	4606      	mov	r6, r0
   1dc8e:	b118      	cbz	r0, 1dc98 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
   1dc90:	4827      	ldr	r0, [pc, #156]	; (1dd30 <keys_set+0xe0>)
   1dc92:	462a      	mov	r2, r5
   1dc94:	2145      	movs	r1, #69	; 0x45
   1dc96:	e7f2      	b.n	1dc7e <keys_set+0x2e>
	settings_name_next(name, &next);
   1dc98:	a901      	add	r1, sp, #4
   1dc9a:	4628      	mov	r0, r5
   1dc9c:	f008 fa59 	bl	26152 <settings_name_next>
	if (!next) {
   1dca0:	9801      	ldr	r0, [sp, #4]
   1dca2:	b140      	cbz	r0, 1dcb6 <keys_set+0x66>
		unsigned long next_id = strtoul(next, NULL, 10);
   1dca4:	220a      	movs	r2, #10
   1dca6:	4631      	mov	r1, r6
   1dca8:	f008 fe92 	bl	269d0 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1dcac:	4602      	mov	r2, r0
   1dcae:	b110      	cbz	r0, 1dcb6 <keys_set+0x66>
			BT_ERR("Invalid local identity %lu", next_id);
   1dcb0:	4820      	ldr	r0, [pc, #128]	; (1dd34 <keys_set+0xe4>)
   1dcb2:	2145      	movs	r1, #69	; 0x45
   1dcb4:	e7e3      	b.n	1dc7e <keys_set+0x2e>
	if (!len) {
   1dcb6:	b99c      	cbnz	r4, 1dce0 <keys_set+0x90>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1dcb8:	aa02      	add	r2, sp, #8
   1dcba:	4621      	mov	r1, r4
   1dcbc:	203f      	movs	r0, #63	; 0x3f
   1dcbe:	f7ff ff41 	bl	1db44 <bt_keys_find>
		if (keys) {
   1dcc2:	b120      	cbz	r0, 1dcce <keys_set+0x7e>
			(void)memset(keys, 0, sizeof(*keys));
   1dcc4:	225c      	movs	r2, #92	; 0x5c
   1dcc6:	4621      	mov	r1, r4
   1dcc8:	f008 ff4e 	bl	26b68 <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1dccc:	e7cc      	b.n	1dc68 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
   1dcce:	a802      	add	r0, sp, #8
   1dcd0:	f7f7 f8d0 	bl	14e74 <bt_addr_le_str_real>
   1dcd4:	2157      	movs	r1, #87	; 0x57
   1dcd6:	4602      	mov	r2, r0
   1dcd8:	4817      	ldr	r0, [pc, #92]	; (1dd38 <keys_set+0xe8>)
   1dcda:	f007 ff9a 	bl	25c12 <z_log_minimal_printk>
   1dcde:	e7c3      	b.n	1dc68 <keys_set+0x18>
	keys = bt_keys_get_addr(id, &addr);
   1dce0:	a902      	add	r1, sp, #8
   1dce2:	2000      	movs	r0, #0
   1dce4:	f7ff feee 	bl	1dac4 <bt_keys_get_addr>
	if (!keys) {
   1dce8:	4605      	mov	r5, r0
   1dcea:	b950      	cbnz	r0, 1dd02 <keys_set+0xb2>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1dcec:	a802      	add	r0, sp, #8
   1dcee:	f7f7 f8c1 	bl	14e74 <bt_addr_le_str_real>
   1dcf2:	2145      	movs	r1, #69	; 0x45
   1dcf4:	4602      	mov	r2, r0
   1dcf6:	4811      	ldr	r0, [pc, #68]	; (1dd3c <keys_set+0xec>)
   1dcf8:	f007 ff8b 	bl	25c12 <z_log_minimal_printk>
		return -ENOMEM;
   1dcfc:	f06f 040b 	mvn.w	r4, #11
   1dd00:	e7b2      	b.n	1dc68 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
   1dd02:	2c50      	cmp	r4, #80	; 0x50
   1dd04:	d009      	beq.n	1dd1a <keys_set+0xca>
			BT_ERR("Invalid key length %zd != %zu", len,
   1dd06:	480e      	ldr	r0, [pc, #56]	; (1dd40 <keys_set+0xf0>)
   1dd08:	2350      	movs	r3, #80	; 0x50
   1dd0a:	4622      	mov	r2, r4
   1dd0c:	2145      	movs	r1, #69	; 0x45
   1dd0e:	f007 ff80 	bl	25c12 <z_log_minimal_printk>
			bt_keys_clear(keys);
   1dd12:	4628      	mov	r0, r5
   1dd14:	f7ff ff74 	bl	1dc00 <bt_keys_clear>
			return -EINVAL;
   1dd18:	e7a4      	b.n	1dc64 <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
   1dd1a:	4622      	mov	r2, r4
   1dd1c:	a904      	add	r1, sp, #16
   1dd1e:	300c      	adds	r0, #12
   1dd20:	f008 ff17 	bl	26b52 <memcpy>
	return 0;
   1dd24:	2400      	movs	r4, #0
   1dd26:	e79f      	b.n	1dc68 <keys_set+0x18>
   1dd28:	0002bd77 	.word	0x0002bd77
   1dd2c:	0002dada 	.word	0x0002dada
   1dd30:	0002d297 	.word	0x0002d297
   1dd34:	0002d2b8 	.word	0x0002d2b8
   1dd38:	0002dafe 	.word	0x0002dafe
   1dd3c:	0002db26 	.word	0x0002db26
   1dd40:	0002db4a 	.word	0x0002db4a

0001dd44 <bt_keys_store>:
{
   1dd44:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1dd46:	4605      	mov	r5, r0
{
   1dd48:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1dd4a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1dd4e:	4604      	mov	r4, r0
	if (keys->id) {
   1dd50:	b1da      	cbz	r2, 1dd8a <bt_keys_store+0x46>
		u8_to_dec(id, sizeof(id), keys->id);
   1dd52:	ae02      	add	r6, sp, #8
   1dd54:	2104      	movs	r1, #4
   1dd56:	4630      	mov	r0, r6
   1dd58:	f007 fcc2 	bl	256e0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1dd5c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1dd5e:	4a0c      	ldr	r2, [pc, #48]	; (1dd90 <bt_keys_store+0x4c>)
   1dd60:	462b      	mov	r3, r5
   1dd62:	2124      	movs	r1, #36	; 0x24
   1dd64:	a803      	add	r0, sp, #12
   1dd66:	f7f7 f963 	bl	15030 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1dd6a:	f104 010c 	add.w	r1, r4, #12
   1dd6e:	2250      	movs	r2, #80	; 0x50
   1dd70:	a803      	add	r0, sp, #12
   1dd72:	f7f5 f98d 	bl	13090 <settings_save_one>
	if (err) {
   1dd76:	4604      	mov	r4, r0
   1dd78:	b120      	cbz	r0, 1dd84 <bt_keys_store+0x40>
		BT_ERR("Failed to save keys (err %d)", err);
   1dd7a:	4602      	mov	r2, r0
   1dd7c:	2145      	movs	r1, #69	; 0x45
   1dd7e:	4805      	ldr	r0, [pc, #20]	; (1dd94 <bt_keys_store+0x50>)
   1dd80:	f007 ff47 	bl	25c12 <z_log_minimal_printk>
}
   1dd84:	4620      	mov	r0, r4
   1dd86:	b00c      	add	sp, #48	; 0x30
   1dd88:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1dd8a:	9200      	str	r2, [sp, #0]
   1dd8c:	e7e7      	b.n	1dd5e <bt_keys_store+0x1a>
   1dd8e:	bf00      	nop
   1dd90:	0002db92 	.word	0x0002db92
   1dd94:	0002db6d 	.word	0x0002db6d

0001dd98 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1dd98:	4b02      	ldr	r3, [pc, #8]	; (1dda4 <net_buf_pool_get+0xc>)
   1dd9a:	2234      	movs	r2, #52	; 0x34
   1dd9c:	fb02 3000 	mla	r0, r2, r0, r3
   1dda0:	4770      	bx	lr
   1dda2:	bf00      	nop
   1dda4:	200008c0 	.word	0x200008c0

0001dda8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1dda8:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ddaa:	4b07      	ldr	r3, [pc, #28]	; (1ddc8 <net_buf_id+0x20>)
   1ddac:	2134      	movs	r1, #52	; 0x34
   1ddae:	fb01 3302 	mla	r3, r1, r2, r3
   1ddb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ddb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1ddb8:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ddba:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ddbc:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1ddc0:	fbb0 f0f3 	udiv	r0, r0, r3
   1ddc4:	4770      	bx	lr
   1ddc6:	bf00      	nop
   1ddc8:	200008c0 	.word	0x200008c0

0001ddcc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1ddcc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ddce:	4b0a      	ldr	r3, [pc, #40]	; (1ddf8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ddd0:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ddd2:	2434      	movs	r4, #52	; 0x34
   1ddd4:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1ddd8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ddda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dddc:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1ddde:	6823      	ldr	r3, [r4, #0]
   1dde0:	429a      	cmp	r2, r3
   1dde2:	bf94      	ite	ls
   1dde4:	600a      	strls	r2, [r1, #0]
   1dde6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1dde8:	f7ff ffde 	bl	1dda8 <net_buf_id>
   1ddec:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1ddf0:	fb02 3000 	mla	r0, r2, r0, r3
   1ddf4:	bd10      	pop	{r4, pc}
   1ddf6:	bf00      	nop
   1ddf8:	200008c0 	.word	0x200008c0

0001ddfc <net_buf_reset>:
{
   1ddfc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1ddfe:	7943      	ldrb	r3, [r0, #5]
{
   1de00:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1de02:	b143      	cbz	r3, 1de16 <net_buf_reset+0x1a>
   1de04:	490c      	ldr	r1, [pc, #48]	; (1de38 <net_buf_reset+0x3c>)
   1de06:	480d      	ldr	r0, [pc, #52]	; (1de3c <net_buf_reset+0x40>)
   1de08:	2256      	movs	r2, #86	; 0x56
   1de0a:	f007 fef4 	bl	25bf6 <assert_print>
   1de0e:	480a      	ldr	r0, [pc, #40]	; (1de38 <net_buf_reset+0x3c>)
   1de10:	2156      	movs	r1, #86	; 0x56
   1de12:	f007 fee9 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1de16:	6823      	ldr	r3, [r4, #0]
   1de18:	b143      	cbz	r3, 1de2c <net_buf_reset+0x30>
   1de1a:	4907      	ldr	r1, [pc, #28]	; (1de38 <net_buf_reset+0x3c>)
   1de1c:	4807      	ldr	r0, [pc, #28]	; (1de3c <net_buf_reset+0x40>)
   1de1e:	2257      	movs	r2, #87	; 0x57
   1de20:	f007 fee9 	bl	25bf6 <assert_print>
   1de24:	4804      	ldr	r0, [pc, #16]	; (1de38 <net_buf_reset+0x3c>)
   1de26:	2157      	movs	r1, #87	; 0x57
   1de28:	f007 fede 	bl	25be8 <assert_post_action>
	buf->len  = 0U;
   1de2c:	2300      	movs	r3, #0
   1de2e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1de30:	6923      	ldr	r3, [r4, #16]
   1de32:	60a3      	str	r3, [r4, #8]
}
   1de34:	bd10      	pop	{r4, pc}
   1de36:	bf00      	nop
   1de38:	0002db9f 	.word	0x0002db9f
   1de3c:	0002ab8c 	.word	0x0002ab8c

0001de40 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1de40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de44:	b085      	sub	sp, #20
   1de46:	4605      	mov	r5, r0
   1de48:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1de4a:	4610      	mov	r0, r2
   1de4c:	4619      	mov	r1, r3
{
   1de4e:	4691      	mov	r9, r2
   1de50:	4698      	mov	r8, r3
   1de52:	4617      	mov	r7, r2
   1de54:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1de56:	f00b fe93 	bl	29b80 <sys_clock_timeout_end_calc>
   1de5a:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1de5e:	b945      	cbnz	r5, 1de72 <net_buf_alloc_len+0x32>
   1de60:	4969      	ldr	r1, [pc, #420]	; (1e008 <net_buf_alloc_len+0x1c8>)
   1de62:	486a      	ldr	r0, [pc, #424]	; (1e00c <net_buf_alloc_len+0x1cc>)
   1de64:	22f4      	movs	r2, #244	; 0xf4
   1de66:	f007 fec6 	bl	25bf6 <assert_print>
   1de6a:	4867      	ldr	r0, [pc, #412]	; (1e008 <net_buf_alloc_len+0x1c8>)
   1de6c:	21f4      	movs	r1, #244	; 0xf4
   1de6e:	f007 febb 	bl	25be8 <assert_post_action>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1de72:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   1de76:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de7a:	f3ef 8b11 	mrs	fp, BASEPRI
   1de7e:	f383 8812 	msr	BASEPRI_MAX, r3
   1de82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1de86:	4650      	mov	r0, sl
   1de88:	f004 f9d2 	bl	22230 <z_spin_lock_valid>
   1de8c:	b940      	cbnz	r0, 1dea0 <net_buf_alloc_len+0x60>
   1de8e:	4960      	ldr	r1, [pc, #384]	; (1e010 <net_buf_alloc_len+0x1d0>)
   1de90:	485e      	ldr	r0, [pc, #376]	; (1e00c <net_buf_alloc_len+0x1cc>)
   1de92:	228e      	movs	r2, #142	; 0x8e
   1de94:	f007 feaf 	bl	25bf6 <assert_print>
   1de98:	485d      	ldr	r0, [pc, #372]	; (1e010 <net_buf_alloc_len+0x1d0>)
   1de9a:	218e      	movs	r1, #142	; 0x8e
   1de9c:	f007 fea4 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1dea0:	4650      	mov	r0, sl
   1dea2:	f004 f9e3 	bl	2226c <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1dea6:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1dea8:	2b00      	cmp	r3, #0
   1deaa:	d076      	beq.n	1df9a <net_buf_alloc_len+0x15a>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1deac:	8c2a      	ldrh	r2, [r5, #32]
   1deae:	429a      	cmp	r2, r3
   1deb0:	d94c      	bls.n	1df4c <net_buf_alloc_len+0x10c>
	return z_impl_k_queue_get(queue, timeout);
   1deb2:	2200      	movs	r2, #0
   1deb4:	2300      	movs	r3, #0
   1deb6:	4628      	mov	r0, r5
   1deb8:	f004 fc34 	bl	22724 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1debc:	4604      	mov	r4, r0
   1debe:	2800      	cmp	r0, #0
   1dec0:	d044      	beq.n	1df4c <net_buf_alloc_len+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dec2:	4650      	mov	r0, sl
   1dec4:	f004 f9c2 	bl	2224c <z_spin_unlock_valid>
   1dec8:	b940      	cbnz	r0, 1dedc <net_buf_alloc_len+0x9c>
   1deca:	4951      	ldr	r1, [pc, #324]	; (1e010 <net_buf_alloc_len+0x1d0>)
   1decc:	484f      	ldr	r0, [pc, #316]	; (1e00c <net_buf_alloc_len+0x1cc>)
   1dece:	22b9      	movs	r2, #185	; 0xb9
   1ded0:	f007 fe91 	bl	25bf6 <assert_print>
   1ded4:	484e      	ldr	r0, [pc, #312]	; (1e010 <net_buf_alloc_len+0x1d0>)
   1ded6:	21b9      	movs	r1, #185	; 0xb9
   1ded8:	f007 fe86 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   1dedc:	f38b 8811 	msr	BASEPRI, fp
   1dee0:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1dee4:	9d03      	ldr	r5, [sp, #12]
   1dee6:	2d00      	cmp	r5, #0
   1dee8:	f000 808c 	beq.w	1e004 <net_buf_alloc_len+0x1c4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1deec:	ea58 0309 	orrs.w	r3, r8, r9
   1def0:	d010      	beq.n	1df14 <net_buf_alloc_len+0xd4>
   1def2:	f1b8 3fff 	cmp.w	r8, #4294967295
   1def6:	bf08      	it	eq
   1def8:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1defc:	d00a      	beq.n	1df14 <net_buf_alloc_len+0xd4>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1defe:	f006 fcb1 	bl	24864 <sys_clock_tick_get>
   1df02:	9b01      	ldr	r3, [sp, #4]
   1df04:	1a1f      	subs	r7, r3, r0
   1df06:	9b02      	ldr	r3, [sp, #8]
   1df08:	eb63 0601 	sbc.w	r6, r3, r1
   1df0c:	2e00      	cmp	r6, #0
   1df0e:	bfbc      	itt	lt
   1df10:	2700      	movlt	r7, #0
   1df12:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1df14:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1df16:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1e014 <net_buf_alloc_len+0x1d4>
   1df1a:	f04f 0934 	mov.w	r9, #52	; 0x34
   1df1e:	fb09 8303 	mla	r3, r9, r3, r8
   1df22:	463a      	mov	r2, r7
   1df24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1df26:	681b      	ldr	r3, [r3, #0]
   1df28:	a903      	add	r1, sp, #12
   1df2a:	f8d3 a000 	ldr.w	sl, [r3]
   1df2e:	4620      	mov	r0, r4
   1df30:	4633      	mov	r3, r6
   1df32:	47d0      	blx	sl
   1df34:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1df36:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1df38:	2800      	cmp	r0, #0
   1df3a:	d14b      	bne.n	1dfd4 <net_buf_alloc_len+0x194>
	k_lifo_put(&pool->free, buf);
   1df3c:	79a0      	ldrb	r0, [r4, #6]
   1df3e:	4621      	mov	r1, r4
   1df40:	fb00 8009 	mla	r0, r0, r9, r8
   1df44:	f00b fd61 	bl	29a0a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1df48:	4634      	mov	r4, r6
}
   1df4a:	e03f      	b.n	1dfcc <net_buf_alloc_len+0x18c>
		uninit_count = pool->uninit_count--;
   1df4c:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1df4e:	1e63      	subs	r3, r4, #1
   1df50:	846b      	strh	r3, [r5, #34]	; 0x22
   1df52:	4650      	mov	r0, sl
   1df54:	f004 f97a 	bl	2224c <z_spin_unlock_valid>
   1df58:	b940      	cbnz	r0, 1df6c <net_buf_alloc_len+0x12c>
   1df5a:	492d      	ldr	r1, [pc, #180]	; (1e010 <net_buf_alloc_len+0x1d0>)
   1df5c:	482b      	ldr	r0, [pc, #172]	; (1e00c <net_buf_alloc_len+0x1cc>)
   1df5e:	22b9      	movs	r2, #185	; 0xb9
   1df60:	f007 fe49 	bl	25bf6 <assert_print>
   1df64:	482a      	ldr	r0, [pc, #168]	; (1e010 <net_buf_alloc_len+0x1d0>)
   1df66:	21b9      	movs	r1, #185	; 0xb9
   1df68:	f007 fe3e 	bl	25be8 <assert_post_action>
   1df6c:	f38b 8811 	msr	BASEPRI, fp
   1df70:	f3bf 8f6f 	isb	sy
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1df74:	8c28      	ldrh	r0, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1df76:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1df7a:	1b04      	subs	r4, r0, r4
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1df7c:	f102 0317 	add.w	r3, r2, #23
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1df80:	6b28      	ldr	r0, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1df82:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1df86:	fb04 0403 	mla	r4, r4, r3, r0
	return pool - _net_buf_pool_list;
   1df8a:	4822      	ldr	r0, [pc, #136]	; (1e014 <net_buf_alloc_len+0x1d4>)
   1df8c:	4b22      	ldr	r3, [pc, #136]	; (1e018 <net_buf_alloc_len+0x1d8>)
	buf->user_data_size = pool->user_data_size;
   1df8e:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1df90:	1a2d      	subs	r5, r5, r0
   1df92:	10ad      	asrs	r5, r5, #2
   1df94:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1df96:	71a5      	strb	r5, [r4, #6]
		goto success;
   1df98:	e7a4      	b.n	1dee4 <net_buf_alloc_len+0xa4>
   1df9a:	4650      	mov	r0, sl
   1df9c:	f004 f956 	bl	2224c <z_spin_unlock_valid>
   1dfa0:	b940      	cbnz	r0, 1dfb4 <net_buf_alloc_len+0x174>
   1dfa2:	491b      	ldr	r1, [pc, #108]	; (1e010 <net_buf_alloc_len+0x1d0>)
   1dfa4:	4819      	ldr	r0, [pc, #100]	; (1e00c <net_buf_alloc_len+0x1cc>)
   1dfa6:	22b9      	movs	r2, #185	; 0xb9
   1dfa8:	f007 fe25 	bl	25bf6 <assert_print>
   1dfac:	4818      	ldr	r0, [pc, #96]	; (1e010 <net_buf_alloc_len+0x1d0>)
   1dfae:	21b9      	movs	r1, #185	; 0xb9
   1dfb0:	f007 fe1a 	bl	25be8 <assert_post_action>
   1dfb4:	f38b 8811 	msr	BASEPRI, fp
   1dfb8:	f3bf 8f6f 	isb	sy
   1dfbc:	464a      	mov	r2, r9
   1dfbe:	4643      	mov	r3, r8
   1dfc0:	4628      	mov	r0, r5
   1dfc2:	f004 fbaf 	bl	22724 <z_impl_k_queue_get>
	if (!buf) {
   1dfc6:	4604      	mov	r4, r0
   1dfc8:	2800      	cmp	r0, #0
   1dfca:	d18b      	bne.n	1dee4 <net_buf_alloc_len+0xa4>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1dfcc:	4620      	mov	r0, r4
   1dfce:	b005      	add	sp, #20
   1dfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1dfd4:	9b03      	ldr	r3, [sp, #12]
   1dfd6:	429d      	cmp	r5, r3
   1dfd8:	d90a      	bls.n	1dff0 <net_buf_alloc_len+0x1b0>
   1dfda:	490b      	ldr	r1, [pc, #44]	; (1e008 <net_buf_alloc_len+0x1c8>)
   1dfdc:	480b      	ldr	r0, [pc, #44]	; (1e00c <net_buf_alloc_len+0x1cc>)
   1dfde:	f240 1255 	movw	r2, #341	; 0x155
   1dfe2:	f007 fe08 	bl	25bf6 <assert_print>
   1dfe6:	4808      	ldr	r0, [pc, #32]	; (1e008 <net_buf_alloc_len+0x1c8>)
   1dfe8:	f240 1155 	movw	r1, #341	; 0x155
   1dfec:	f007 fdfc 	bl	25be8 <assert_post_action>
	buf->frags = NULL;
   1dff0:	2300      	movs	r3, #0
   1dff2:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1dff4:	2301      	movs	r3, #1
   1dff6:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1dff8:	9b03      	ldr	r3, [sp, #12]
   1dffa:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1dffc:	4620      	mov	r0, r4
   1dffe:	f7ff fefd 	bl	1ddfc <net_buf_reset>
	return buf;
   1e002:	e7e3      	b.n	1dfcc <net_buf_alloc_len+0x18c>
		buf->__buf = NULL;
   1e004:	6125      	str	r5, [r4, #16]
   1e006:	e7f3      	b.n	1dff0 <net_buf_alloc_len+0x1b0>
   1e008:	0002db9f 	.word	0x0002db9f
   1e00c:	0002ab8c 	.word	0x0002ab8c
   1e010:	0002b1aa 	.word	0x0002b1aa
   1e014:	200008c0 	.word	0x200008c0
   1e018:	c4ec4ec5 	.word	0xc4ec4ec5

0001e01c <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1e01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e020:	4606      	mov	r6, r0
   1e022:	f004 fb7f 	bl	22724 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1e026:	4605      	mov	r5, r0
   1e028:	b140      	cbz	r0, 1e03c <net_buf_get+0x20>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1e02a:	4f12      	ldr	r7, [pc, #72]	; (1e074 <net_buf_get+0x58>)
   1e02c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1e078 <net_buf_get+0x5c>
   1e030:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1e032:	7963      	ldrb	r3, [r4, #5]
   1e034:	f013 0301 	ands.w	r3, r3, #1
   1e038:	d103      	bne.n	1e042 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1e03a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1e03c:	4628      	mov	r0, r5
   1e03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e042:	2200      	movs	r2, #0
   1e044:	2300      	movs	r3, #0
   1e046:	4630      	mov	r0, r6
   1e048:	f004 fb6c 	bl	22724 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1e04c:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1e04e:	b950      	cbnz	r0, 1e066 <net_buf_get+0x4a>
   1e050:	4639      	mov	r1, r7
   1e052:	4640      	mov	r0, r8
   1e054:	f240 12ad 	movw	r2, #429	; 0x1ad
   1e058:	f007 fdcd 	bl	25bf6 <assert_print>
   1e05c:	f240 11ad 	movw	r1, #429	; 0x1ad
   1e060:	4638      	mov	r0, r7
   1e062:	f007 fdc1 	bl	25be8 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1e066:	7963      	ldrb	r3, [r4, #5]
   1e068:	f023 0301 	bic.w	r3, r3, #1
   1e06c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1e06e:	6824      	ldr	r4, [r4, #0]
   1e070:	e7df      	b.n	1e032 <net_buf_get+0x16>
   1e072:	bf00      	nop
   1e074:	0002db9f 	.word	0x0002db9f
   1e078:	0002ab8c 	.word	0x0002ab8c

0001e07c <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1e07c:	b538      	push	{r3, r4, r5, lr}
   1e07e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1e080:	4604      	mov	r4, r0
   1e082:	b950      	cbnz	r0, 1e09a <net_buf_simple_reserve+0x1e>
   1e084:	490d      	ldr	r1, [pc, #52]	; (1e0bc <net_buf_simple_reserve+0x40>)
   1e086:	480e      	ldr	r0, [pc, #56]	; (1e0c0 <net_buf_simple_reserve+0x44>)
   1e088:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   1e08c:	f007 fdb3 	bl	25bf6 <assert_print>
   1e090:	480a      	ldr	r0, [pc, #40]	; (1e0bc <net_buf_simple_reserve+0x40>)
   1e092:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1e096:	f007 fda7 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1e09a:	88a3      	ldrh	r3, [r4, #4]
   1e09c:	b153      	cbz	r3, 1e0b4 <net_buf_simple_reserve+0x38>
   1e09e:	4907      	ldr	r1, [pc, #28]	; (1e0bc <net_buf_simple_reserve+0x40>)
   1e0a0:	4807      	ldr	r0, [pc, #28]	; (1e0c0 <net_buf_simple_reserve+0x44>)
   1e0a2:	f240 12c5 	movw	r2, #453	; 0x1c5
   1e0a6:	f007 fda6 	bl	25bf6 <assert_print>
   1e0aa:	4804      	ldr	r0, [pc, #16]	; (1e0bc <net_buf_simple_reserve+0x40>)
   1e0ac:	f240 11c5 	movw	r1, #453	; 0x1c5
   1e0b0:	f007 fd9a 	bl	25be8 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1e0b4:	68a3      	ldr	r3, [r4, #8]
   1e0b6:	442b      	add	r3, r5
   1e0b8:	6023      	str	r3, [r4, #0]
}
   1e0ba:	bd38      	pop	{r3, r4, r5, pc}
   1e0bc:	0002db9f 	.word	0x0002db9f
   1e0c0:	0002ab8c 	.word	0x0002ab8c

0001e0c4 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1e0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e0c6:	460c      	mov	r4, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1e0c8:	4605      	mov	r5, r0
   1e0ca:	b950      	cbnz	r0, 1e0e2 <net_buf_slist_put+0x1e>
   1e0cc:	4928      	ldr	r1, [pc, #160]	; (1e170 <net_buf_slist_put+0xac>)
   1e0ce:	4829      	ldr	r0, [pc, #164]	; (1e174 <net_buf_slist_put+0xb0>)
   1e0d0:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1e0d4:	f007 fd8f 	bl	25bf6 <assert_print>
   1e0d8:	4825      	ldr	r0, [pc, #148]	; (1e170 <net_buf_slist_put+0xac>)
   1e0da:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1e0de:	f007 fd83 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1e0e2:	b954      	cbnz	r4, 1e0fa <net_buf_slist_put+0x36>
   1e0e4:	4922      	ldr	r1, [pc, #136]	; (1e170 <net_buf_slist_put+0xac>)
   1e0e6:	4823      	ldr	r0, [pc, #140]	; (1e174 <net_buf_slist_put+0xb0>)
   1e0e8:	f240 12d3 	movw	r2, #467	; 0x1d3
   1e0ec:	f007 fd83 	bl	25bf6 <assert_print>
   1e0f0:	481f      	ldr	r0, [pc, #124]	; (1e170 <net_buf_slist_put+0xac>)
   1e0f2:	f240 11d3 	movw	r1, #467	; 0x1d3
   1e0f6:	f007 fd77 	bl	25be8 <assert_post_action>
{
   1e0fa:	4626      	mov	r6, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1e0fc:	6832      	ldr	r2, [r6, #0]
   1e0fe:	bb72      	cbnz	r2, 1e15e <net_buf_slist_put+0x9a>
	__asm__ volatile(
   1e100:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e104:	f3ef 8711 	mrs	r7, BASEPRI
   1e108:	f383 8812 	msr	BASEPRI_MAX, r3
   1e10c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e110:	4819      	ldr	r0, [pc, #100]	; (1e178 <net_buf_slist_put+0xb4>)
   1e112:	f004 f88d 	bl	22230 <z_spin_lock_valid>
   1e116:	b940      	cbnz	r0, 1e12a <net_buf_slist_put+0x66>
   1e118:	4918      	ldr	r1, [pc, #96]	; (1e17c <net_buf_slist_put+0xb8>)
   1e11a:	4816      	ldr	r0, [pc, #88]	; (1e174 <net_buf_slist_put+0xb0>)
   1e11c:	228e      	movs	r2, #142	; 0x8e
   1e11e:	f007 fd6a 	bl	25bf6 <assert_print>
   1e122:	4816      	ldr	r0, [pc, #88]	; (1e17c <net_buf_slist_put+0xb8>)
   1e124:	218e      	movs	r1, #142	; 0x8e
   1e126:	f007 fd5f 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e12a:	4813      	ldr	r0, [pc, #76]	; (1e178 <net_buf_slist_put+0xb4>)
   1e12c:	f004 f89e 	bl	2226c <z_spin_lock_set_owner>
Z_GENLIST_APPEND_LIST(slist, snode)
   1e130:	b11c      	cbz	r4, 1e13a <net_buf_slist_put+0x76>
	return list->tail;
   1e132:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1e134:	b9cb      	cbnz	r3, 1e16a <net_buf_slist_put+0xa6>
	list->head = node;
   1e136:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1e138:	606e      	str	r6, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e13a:	480f      	ldr	r0, [pc, #60]	; (1e178 <net_buf_slist_put+0xb4>)
   1e13c:	f004 f886 	bl	2224c <z_spin_unlock_valid>
   1e140:	b940      	cbnz	r0, 1e154 <net_buf_slist_put+0x90>
   1e142:	490e      	ldr	r1, [pc, #56]	; (1e17c <net_buf_slist_put+0xb8>)
   1e144:	480b      	ldr	r0, [pc, #44]	; (1e174 <net_buf_slist_put+0xb0>)
   1e146:	22b9      	movs	r2, #185	; 0xb9
   1e148:	f007 fd55 	bl	25bf6 <assert_print>
   1e14c:	480b      	ldr	r0, [pc, #44]	; (1e17c <net_buf_slist_put+0xb8>)
   1e14e:	21b9      	movs	r1, #185	; 0xb9
   1e150:	f007 fd4a 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   1e154:	f387 8811 	msr	BASEPRI, r7
   1e158:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1e15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tail->flags |= NET_BUF_FRAGS;
   1e15e:	7973      	ldrb	r3, [r6, #5]
   1e160:	f043 0301 	orr.w	r3, r3, #1
   1e164:	7173      	strb	r3, [r6, #5]
   1e166:	4616      	mov	r6, r2
   1e168:	e7c8      	b.n	1e0fc <net_buf_slist_put+0x38>
	parent->next = child;
   1e16a:	601c      	str	r4, [r3, #0]
}
   1e16c:	e7e4      	b.n	1e138 <net_buf_slist_put+0x74>
   1e16e:	bf00      	nop
   1e170:	0002db9f 	.word	0x0002db9f
   1e174:	0002ab8c 	.word	0x0002ab8c
   1e178:	20002528 	.word	0x20002528
   1e17c:	0002b1aa 	.word	0x0002b1aa

0001e180 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1e180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1e184:	4604      	mov	r4, r0
   1e186:	b950      	cbnz	r0, 1e19e <net_buf_slist_get+0x1e>
   1e188:	4931      	ldr	r1, [pc, #196]	; (1e250 <net_buf_slist_get+0xd0>)
   1e18a:	4832      	ldr	r0, [pc, #200]	; (1e254 <net_buf_slist_get+0xd4>)
   1e18c:	f240 12e3 	movw	r2, #483	; 0x1e3
   1e190:	f007 fd31 	bl	25bf6 <assert_print>
   1e194:	482e      	ldr	r0, [pc, #184]	; (1e250 <net_buf_slist_get+0xd0>)
   1e196:	f240 11e3 	movw	r1, #483	; 0x1e3
   1e19a:	f007 fd25 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   1e19e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1a2:	f3ef 8811 	mrs	r8, BASEPRI
   1e1a6:	f383 8812 	msr	BASEPRI_MAX, r3
   1e1aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e1ae:	482a      	ldr	r0, [pc, #168]	; (1e258 <net_buf_slist_get+0xd8>)
   1e1b0:	f004 f83e 	bl	22230 <z_spin_lock_valid>
   1e1b4:	b940      	cbnz	r0, 1e1c8 <net_buf_slist_get+0x48>
   1e1b6:	4929      	ldr	r1, [pc, #164]	; (1e25c <net_buf_slist_get+0xdc>)
   1e1b8:	4826      	ldr	r0, [pc, #152]	; (1e254 <net_buf_slist_get+0xd4>)
   1e1ba:	228e      	movs	r2, #142	; 0x8e
   1e1bc:	f007 fd1b 	bl	25bf6 <assert_print>
   1e1c0:	4826      	ldr	r0, [pc, #152]	; (1e25c <net_buf_slist_get+0xdc>)
   1e1c2:	218e      	movs	r1, #142	; 0x8e
   1e1c4:	f007 fd10 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e1c8:	4823      	ldr	r0, [pc, #140]	; (1e258 <net_buf_slist_get+0xd8>)
   1e1ca:	f004 f84f 	bl	2226c <z_spin_lock_set_owner>
	return list->head;
   1e1ce:	6826      	ldr	r6, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1e1d0:	b176      	cbz	r6, 1e1f0 <net_buf_slist_get+0x70>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e1d2:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1e1d4:	6833      	ldr	r3, [r6, #0]

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   1e1d6:	4f1e      	ldr	r7, [pc, #120]	; (1e250 <net_buf_slist_get+0xd0>)
   1e1d8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1e254 <net_buf_slist_get+0xd4>
	list->head = node;
   1e1dc:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e1de:	4296      	cmp	r6, r2
	list->tail = node;
   1e1e0:	bf08      	it	eq
   1e1e2:	6063      	streq	r3, [r4, #4]
{
   1e1e4:	4635      	mov	r5, r6
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1e1e6:	796b      	ldrb	r3, [r5, #5]
   1e1e8:	f013 0301 	ands.w	r3, r3, #1
   1e1ec:	d114      	bne.n	1e218 <net_buf_slist_get+0x98>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   1e1ee:	602b      	str	r3, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e1f0:	4819      	ldr	r0, [pc, #100]	; (1e258 <net_buf_slist_get+0xd8>)
   1e1f2:	f004 f82b 	bl	2224c <z_spin_unlock_valid>
   1e1f6:	b940      	cbnz	r0, 1e20a <net_buf_slist_get+0x8a>
   1e1f8:	4918      	ldr	r1, [pc, #96]	; (1e25c <net_buf_slist_get+0xdc>)
   1e1fa:	4816      	ldr	r0, [pc, #88]	; (1e254 <net_buf_slist_get+0xd4>)
   1e1fc:	22b9      	movs	r2, #185	; 0xb9
   1e1fe:	f007 fcfa 	bl	25bf6 <assert_print>
   1e202:	4816      	ldr	r0, [pc, #88]	; (1e25c <net_buf_slist_get+0xdc>)
   1e204:	21b9      	movs	r1, #185	; 0xb9
   1e206:	f007 fcef 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   1e20a:	f388 8811 	msr	BASEPRI, r8
   1e20e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1e212:	4630      	mov	r0, r6
   1e214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return list->head;
   1e218:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1e21a:	b98b      	cbnz	r3, 1e240 <net_buf_slist_get+0xc0>
			__ASSERT_NO_MSG(frag->frags);
   1e21c:	4639      	mov	r1, r7
   1e21e:	4648      	mov	r0, r9
			frag->frags = (void *)sys_slist_get(list);
   1e220:	602b      	str	r3, [r5, #0]
			__ASSERT_NO_MSG(frag->frags);
   1e222:	f240 12ed 	movw	r2, #493	; 0x1ed
   1e226:	f007 fce6 	bl	25bf6 <assert_print>
   1e22a:	f240 11ed 	movw	r1, #493	; 0x1ed
   1e22e:	4638      	mov	r0, r7
   1e230:	f007 fcda 	bl	25be8 <assert_post_action>
			frag->flags &= ~NET_BUF_FRAGS;
   1e234:	796b      	ldrb	r3, [r5, #5]
   1e236:	f023 0301 	bic.w	r3, r3, #1
   1e23a:	716b      	strb	r3, [r5, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1e23c:	682d      	ldr	r5, [r5, #0]
   1e23e:	e7d2      	b.n	1e1e6 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e240:	6861      	ldr	r1, [r4, #4]
	return node->next;
   1e242:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1e244:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e246:	428b      	cmp	r3, r1
	list->tail = node;
   1e248:	bf08      	it	eq
   1e24a:	6062      	streq	r2, [r4, #4]
			frag->frags = (void *)sys_slist_get(list);
   1e24c:	602b      	str	r3, [r5, #0]
			__ASSERT_NO_MSG(frag->frags);
   1e24e:	e7f1      	b.n	1e234 <net_buf_slist_get+0xb4>
   1e250:	0002db9f 	.word	0x0002db9f
   1e254:	0002ab8c 	.word	0x0002ab8c
   1e258:	20002528 	.word	0x20002528
   1e25c:	0002b1aa 	.word	0x0002b1aa

0001e260 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1e260:	b538      	push	{r3, r4, r5, lr}
   1e262:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1e264:	4605      	mov	r5, r0
   1e266:	b950      	cbnz	r0, 1e27e <net_buf_put+0x1e>
   1e268:	4912      	ldr	r1, [pc, #72]	; (1e2b4 <net_buf_put+0x54>)
   1e26a:	4813      	ldr	r0, [pc, #76]	; (1e2b8 <net_buf_put+0x58>)
   1e26c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e270:	f007 fcc1 	bl	25bf6 <assert_print>
   1e274:	480f      	ldr	r0, [pc, #60]	; (1e2b4 <net_buf_put+0x54>)
   1e276:	f44f 7100 	mov.w	r1, #512	; 0x200
   1e27a:	f007 fcb5 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1e27e:	b954      	cbnz	r4, 1e296 <net_buf_put+0x36>
   1e280:	490c      	ldr	r1, [pc, #48]	; (1e2b4 <net_buf_put+0x54>)
   1e282:	480d      	ldr	r0, [pc, #52]	; (1e2b8 <net_buf_put+0x58>)
   1e284:	f240 2201 	movw	r2, #513	; 0x201
   1e288:	f007 fcb5 	bl	25bf6 <assert_print>
   1e28c:	4809      	ldr	r0, [pc, #36]	; (1e2b4 <net_buf_put+0x54>)
   1e28e:	f240 2101 	movw	r1, #513	; 0x201
   1e292:	f007 fca9 	bl	25be8 <assert_post_action>
{
   1e296:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1e298:	6811      	ldr	r1, [r2, #0]
   1e29a:	b929      	cbnz	r1, 1e2a8 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1e29c:	4621      	mov	r1, r4
   1e29e:	4628      	mov	r0, r5
}
   1e2a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1e2a4:	f004 b9ea 	b.w	2267c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1e2a8:	7953      	ldrb	r3, [r2, #5]
   1e2aa:	f043 0301 	orr.w	r3, r3, #1
   1e2ae:	7153      	strb	r3, [r2, #5]
   1e2b0:	460a      	mov	r2, r1
   1e2b2:	e7f1      	b.n	1e298 <net_buf_put+0x38>
   1e2b4:	0002db9f 	.word	0x0002db9f
   1e2b8:	0002ab8c 	.word	0x0002ab8c

0001e2bc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1e2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1e2c0:	4605      	mov	r5, r0
   1e2c2:	b328      	cbz	r0, 1e310 <net_buf_unref+0x54>
   1e2c4:	4e1c      	ldr	r6, [pc, #112]	; (1e338 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1e2c6:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1e2c8:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1e2cc:	462c      	mov	r4, r5
   1e2ce:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1e2d0:	7923      	ldrb	r3, [r4, #4]
   1e2d2:	3b01      	subs	r3, #1
   1e2d4:	b2db      	uxtb	r3, r3
   1e2d6:	7123      	strb	r3, [r4, #4]
   1e2d8:	b9c3      	cbnz	r3, 1e30c <net_buf_unref+0x50>
		if (buf->__buf) {
   1e2da:	6921      	ldr	r1, [r4, #16]
   1e2dc:	b159      	cbz	r1, 1e2f6 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1e2de:	7963      	ldrb	r3, [r4, #5]
   1e2e0:	079b      	lsls	r3, r3, #30
   1e2e2:	d407      	bmi.n	1e2f4 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1e2e4:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1e2e6:	fb08 6303 	mla	r3, r8, r3, r6
   1e2ea:	4620      	mov	r0, r4
   1e2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e2ee:	681b      	ldr	r3, [r3, #0]
   1e2f0:	689b      	ldr	r3, [r3, #8]
   1e2f2:	4798      	blx	r3
			buf->__buf = NULL;
   1e2f4:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1e2f6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1e2f8:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1e2fa:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1e2fe:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1e300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e302:	b193      	cbz	r3, 1e32a <net_buf_unref+0x6e>
			pool->destroy(buf);
   1e304:	4620      	mov	r0, r4
   1e306:	4798      	blx	r3
	while (buf) {
   1e308:	2d00      	cmp	r5, #0
   1e30a:	d1df      	bne.n	1e2cc <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1e30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1e310:	490a      	ldr	r1, [pc, #40]	; (1e33c <net_buf_unref+0x80>)
   1e312:	480b      	ldr	r0, [pc, #44]	; (1e340 <net_buf_unref+0x84>)
   1e314:	f44f 7204 	mov.w	r2, #528	; 0x210
   1e318:	f007 fc6d 	bl	25bf6 <assert_print>
}
   1e31c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1e320:	4806      	ldr	r0, [pc, #24]	; (1e33c <net_buf_unref+0x80>)
   1e322:	f44f 7104 	mov.w	r1, #528	; 0x210
   1e326:	f007 bc5f 	b.w	25be8 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1e32a:	4621      	mov	r1, r4
   1e32c:	fb00 6008 	mla	r0, r0, r8, r6
   1e330:	f00b fb6b 	bl	29a0a <k_queue_prepend>
}
   1e334:	e7e8      	b.n	1e308 <net_buf_unref+0x4c>
   1e336:	bf00      	nop
   1e338:	200008c0 	.word	0x200008c0
   1e33c:	0002db9f 	.word	0x0002db9f
   1e340:	0002ab8c 	.word	0x0002ab8c

0001e344 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1e344:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1e346:	4604      	mov	r4, r0
   1e348:	b950      	cbnz	r0, 1e360 <net_buf_ref+0x1c>
   1e34a:	4908      	ldr	r1, [pc, #32]	; (1e36c <net_buf_ref+0x28>)
   1e34c:	4808      	ldr	r0, [pc, #32]	; (1e370 <net_buf_ref+0x2c>)
   1e34e:	f240 223f 	movw	r2, #575	; 0x23f
   1e352:	f007 fc50 	bl	25bf6 <assert_print>
   1e356:	4805      	ldr	r0, [pc, #20]	; (1e36c <net_buf_ref+0x28>)
   1e358:	f240 213f 	movw	r1, #575	; 0x23f
   1e35c:	f007 fc44 	bl	25be8 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1e360:	7923      	ldrb	r3, [r4, #4]
   1e362:	3301      	adds	r3, #1
   1e364:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1e366:	4620      	mov	r0, r4
   1e368:	bd10      	pop	{r4, pc}
   1e36a:	bf00      	nop
   1e36c:	0002db9f 	.word	0x0002db9f
   1e370:	0002ab8c 	.word	0x0002ab8c

0001e374 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1e374:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1e376:	4604      	mov	r4, r0
   1e378:	b950      	cbnz	r0, 1e390 <net_buf_frag_last+0x1c>
   1e37a:	4908      	ldr	r1, [pc, #32]	; (1e39c <net_buf_frag_last+0x28>)
   1e37c:	4808      	ldr	r0, [pc, #32]	; (1e3a0 <net_buf_frag_last+0x2c>)
   1e37e:	f44f 721f 	mov.w	r2, #636	; 0x27c
   1e382:	f007 fc38 	bl	25bf6 <assert_print>
   1e386:	4805      	ldr	r0, [pc, #20]	; (1e39c <net_buf_frag_last+0x28>)
   1e388:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1e38c:	f007 fc2c 	bl	25be8 <assert_post_action>

	while (buf->frags) {
   1e390:	4620      	mov	r0, r4
   1e392:	6824      	ldr	r4, [r4, #0]
   1e394:	2c00      	cmp	r4, #0
   1e396:	d1fb      	bne.n	1e390 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   1e398:	bd10      	pop	{r4, pc}
   1e39a:	bf00      	nop
   1e39c:	0002db9f 	.word	0x0002db9f
   1e3a0:	0002ab8c 	.word	0x0002ab8c

0001e3a4 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1e3a4:	b538      	push	{r3, r4, r5, lr}
   1e3a6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1e3a8:	4604      	mov	r4, r0
   1e3aa:	b950      	cbnz	r0, 1e3c2 <net_buf_frag_insert+0x1e>
   1e3ac:	490f      	ldr	r1, [pc, #60]	; (1e3ec <net_buf_frag_insert+0x48>)
   1e3ae:	4810      	ldr	r0, [pc, #64]	; (1e3f0 <net_buf_frag_insert+0x4c>)
   1e3b0:	f240 2287 	movw	r2, #647	; 0x287
   1e3b4:	f007 fc1f 	bl	25bf6 <assert_print>
   1e3b8:	480c      	ldr	r0, [pc, #48]	; (1e3ec <net_buf_frag_insert+0x48>)
   1e3ba:	f240 2187 	movw	r1, #647	; 0x287
   1e3be:	f007 fc13 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1e3c2:	b955      	cbnz	r5, 1e3da <net_buf_frag_insert+0x36>
   1e3c4:	4909      	ldr	r1, [pc, #36]	; (1e3ec <net_buf_frag_insert+0x48>)
   1e3c6:	480a      	ldr	r0, [pc, #40]	; (1e3f0 <net_buf_frag_insert+0x4c>)
   1e3c8:	f44f 7222 	mov.w	r2, #648	; 0x288
   1e3cc:	f007 fc13 	bl	25bf6 <assert_print>
   1e3d0:	4806      	ldr	r0, [pc, #24]	; (1e3ec <net_buf_frag_insert+0x48>)
   1e3d2:	f44f 7122 	mov.w	r1, #648	; 0x288
   1e3d6:	f007 fc07 	bl	25be8 <assert_post_action>

	if (parent->frags) {
   1e3da:	6823      	ldr	r3, [r4, #0]
   1e3dc:	b123      	cbz	r3, 1e3e8 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1e3de:	4628      	mov	r0, r5
   1e3e0:	f7ff ffc8 	bl	1e374 <net_buf_frag_last>
   1e3e4:	6823      	ldr	r3, [r4, #0]
   1e3e6:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1e3e8:	6025      	str	r5, [r4, #0]
}
   1e3ea:	bd38      	pop	{r3, r4, r5, pc}
   1e3ec:	0002db9f 	.word	0x0002db9f
   1e3f0:	0002ab8c 	.word	0x0002ab8c

0001e3f4 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1e3f4:	b538      	push	{r3, r4, r5, lr}
   1e3f6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1e3f8:	460d      	mov	r5, r1
   1e3fa:	b951      	cbnz	r1, 1e412 <net_buf_frag_add+0x1e>
   1e3fc:	490c      	ldr	r1, [pc, #48]	; (1e430 <net_buf_frag_add+0x3c>)
   1e3fe:	480d      	ldr	r0, [pc, #52]	; (1e434 <net_buf_frag_add+0x40>)
   1e400:	f240 2293 	movw	r2, #659	; 0x293
   1e404:	f007 fbf7 	bl	25bf6 <assert_print>
   1e408:	4809      	ldr	r0, [pc, #36]	; (1e430 <net_buf_frag_add+0x3c>)
   1e40a:	f240 2193 	movw	r1, #659	; 0x293
   1e40e:	f007 fbeb 	bl	25be8 <assert_post_action>

	if (!head) {
   1e412:	b924      	cbnz	r4, 1e41e <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   1e414:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1e416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1e41a:	f7ff bf93 	b.w	1e344 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1e41e:	4620      	mov	r0, r4
   1e420:	f7ff ffa8 	bl	1e374 <net_buf_frag_last>
   1e424:	4629      	mov	r1, r5
   1e426:	f7ff ffbd 	bl	1e3a4 <net_buf_frag_insert>
}
   1e42a:	4620      	mov	r0, r4
   1e42c:	bd38      	pop	{r3, r4, r5, pc}
   1e42e:	bf00      	nop
   1e430:	0002db9f 	.word	0x0002db9f
   1e434:	0002ab8c 	.word	0x0002ab8c

0001e438 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1e438:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1e43a:	6882      	ldr	r2, [r0, #8]
   1e43c:	6803      	ldr	r3, [r0, #0]
   1e43e:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1e440:	4299      	cmp	r1, r3
{
   1e442:	4604      	mov	r4, r0
   1e444:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1e446:	d90a      	bls.n	1e45e <net_buf_simple_push+0x26>
   1e448:	4908      	ldr	r1, [pc, #32]	; (1e46c <net_buf_simple_push+0x34>)
   1e44a:	4809      	ldr	r0, [pc, #36]	; (1e470 <net_buf_simple_push+0x38>)
   1e44c:	f240 4217 	movw	r2, #1047	; 0x417
   1e450:	f007 fbd1 	bl	25bf6 <assert_print>
   1e454:	4805      	ldr	r0, [pc, #20]	; (1e46c <net_buf_simple_push+0x34>)
   1e456:	f240 4117 	movw	r1, #1047	; 0x417
   1e45a:	f007 fbc5 	bl	25be8 <assert_post_action>
	buf->data -= len;
   1e45e:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1e460:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1e462:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1e464:	440d      	add	r5, r1
	buf->data -= len;
   1e466:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1e468:	80a5      	strh	r5, [r4, #4]
}
   1e46a:	bd38      	pop	{r3, r4, r5, pc}
   1e46c:	0002db9f 	.word	0x0002db9f
   1e470:	0002ab8c 	.word	0x0002ab8c

0001e474 <net_buf_simple_pull>:
{
   1e474:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1e476:	8883      	ldrh	r3, [r0, #4]
   1e478:	428b      	cmp	r3, r1
{
   1e47a:	4604      	mov	r4, r0
   1e47c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1e47e:	d20a      	bcs.n	1e496 <net_buf_simple_pull+0x22>
   1e480:	4908      	ldr	r1, [pc, #32]	; (1e4a4 <net_buf_simple_pull+0x30>)
   1e482:	4809      	ldr	r0, [pc, #36]	; (1e4a8 <net_buf_simple_pull+0x34>)
   1e484:	f240 4277 	movw	r2, #1143	; 0x477
   1e488:	f007 fbb5 	bl	25bf6 <assert_print>
   1e48c:	4805      	ldr	r0, [pc, #20]	; (1e4a4 <net_buf_simple_pull+0x30>)
   1e48e:	f240 4177 	movw	r1, #1143	; 0x477
   1e492:	f007 fba9 	bl	25be8 <assert_post_action>
	buf->len -= len;
   1e496:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1e498:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1e49a:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1e49c:	4428      	add	r0, r5
	buf->len -= len;
   1e49e:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1e4a0:	6020      	str	r0, [r4, #0]
}
   1e4a2:	bd38      	pop	{r3, r4, r5, pc}
   1e4a4:	0002db9f 	.word	0x0002db9f
   1e4a8:	0002ab8c 	.word	0x0002ab8c

0001e4ac <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1e4ac:	8883      	ldrh	r3, [r0, #4]
   1e4ae:	428b      	cmp	r3, r1
{
   1e4b0:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   1e4b2:	6806      	ldr	r6, [r0, #0]
{
   1e4b4:	4604      	mov	r4, r0
   1e4b6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1e4b8:	d20a      	bcs.n	1e4d0 <net_buf_simple_pull_mem+0x24>
   1e4ba:	4909      	ldr	r1, [pc, #36]	; (1e4e0 <net_buf_simple_pull_mem+0x34>)
   1e4bc:	4809      	ldr	r0, [pc, #36]	; (1e4e4 <net_buf_simple_pull_mem+0x38>)
   1e4be:	f240 4283 	movw	r2, #1155	; 0x483
   1e4c2:	f007 fb98 	bl	25bf6 <assert_print>
   1e4c6:	4806      	ldr	r0, [pc, #24]	; (1e4e0 <net_buf_simple_pull_mem+0x34>)
   1e4c8:	f240 4183 	movw	r1, #1155	; 0x483
   1e4cc:	f007 fb8c 	bl	25be8 <assert_post_action>
	buf->len -= len;
   1e4d0:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1e4d2:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1e4d4:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1e4d6:	4429      	add	r1, r5
	buf->len -= len;
   1e4d8:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1e4da:	6021      	str	r1, [r4, #0]
}
   1e4dc:	4630      	mov	r0, r6
   1e4de:	bd70      	pop	{r4, r5, r6, pc}
   1e4e0:	0002db9f 	.word	0x0002db9f
   1e4e4:	0002ab8c 	.word	0x0002ab8c

0001e4e8 <net_buf_simple_add>:
{
   1e4e8:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1e4ea:	6803      	ldr	r3, [r0, #0]
   1e4ec:	8886      	ldrh	r6, [r0, #4]
   1e4ee:	4604      	mov	r4, r0
   1e4f0:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1e4f2:	f00a fdf1 	bl	290d8 <net_buf_simple_tailroom>
   1e4f6:	4288      	cmp	r0, r1
{
   1e4f8:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1e4fa:	d20a      	bcs.n	1e512 <net_buf_simple_add+0x2a>
   1e4fc:	4907      	ldr	r1, [pc, #28]	; (1e51c <net_buf_simple_add+0x34>)
   1e4fe:	4808      	ldr	r0, [pc, #32]	; (1e520 <net_buf_simple_add+0x38>)
   1e500:	f44f 724a 	mov.w	r2, #808	; 0x328
   1e504:	f007 fb77 	bl	25bf6 <assert_print>
   1e508:	4804      	ldr	r0, [pc, #16]	; (1e51c <net_buf_simple_add+0x34>)
   1e50a:	f44f 714a 	mov.w	r1, #808	; 0x328
   1e50e:	f007 fb6b 	bl	25be8 <assert_post_action>
	buf->len += len;
   1e512:	88a1      	ldrh	r1, [r4, #4]
   1e514:	440d      	add	r5, r1
   1e516:	80a5      	strh	r5, [r4, #4]
}
   1e518:	4630      	mov	r0, r6
   1e51a:	bd70      	pop	{r4, r5, r6, pc}
   1e51c:	0002db9f 	.word	0x0002db9f
   1e520:	0002ab8c 	.word	0x0002ab8c

0001e524 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1e524:	b508      	push	{r3, lr}
	entropy_driver = DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));
   1e526:	4b05      	ldr	r3, [pc, #20]	; (1e53c <xoshiro128_initialize+0x18>)
   1e528:	4805      	ldr	r0, [pc, #20]	; (1e540 <xoshiro128_initialize+0x1c>)
   1e52a:	6018      	str	r0, [r3, #0]
   1e52c:	f00b fa10 	bl	29950 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
   1e530:	2800      	cmp	r0, #0
	}
	return 0;
}
   1e532:	bf0c      	ite	eq
   1e534:	f06f 0012 	mvneq.w	r0, #18
   1e538:	2000      	movne	r0, #0
   1e53a:	bd08      	pop	{r3, pc}
   1e53c:	2000252c 	.word	0x2000252c
   1e540:	00029e18 	.word	0x00029e18

0001e544 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1e544:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e546:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1e548:	490a      	ldr	r1, [pc, #40]	; (1e574 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1e54a:	4a0b      	ldr	r2, [pc, #44]	; (1e578 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1e54c:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1e54e:	2340      	movs	r3, #64	; 0x40
   1e550:	9300      	str	r3, [sp, #0]
   1e552:	1149      	asrs	r1, r1, #5
{
   1e554:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1e556:	4623      	mov	r3, r4
   1e558:	4808      	ldr	r0, [pc, #32]	; (1e57c <onoff_start+0x38>)
   1e55a:	f00a fdf4 	bl	29146 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1e55e:	1e01      	subs	r1, r0, #0
   1e560:	da05      	bge.n	1e56e <onoff_start+0x2a>
		notify(mgr, err);
   1e562:	4628      	mov	r0, r5
   1e564:	4623      	mov	r3, r4
	}
}
   1e566:	b003      	add	sp, #12
   1e568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1e56c:	4718      	bx	r3
}
   1e56e:	b003      	add	sp, #12
   1e570:	bd30      	pop	{r4, r5, pc}
   1e572:	bf00      	nop
   1e574:	20002540 	.word	0x20002540
   1e578:	000291b5 	.word	0x000291b5
   1e57c:	00029de8 	.word	0x00029de8

0001e580 <get_status>:
{
   1e580:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1e582:	b2cc      	uxtb	r4, r1
   1e584:	2c01      	cmp	r4, #1
{
   1e586:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1e588:	d908      	bls.n	1e59c <get_status+0x1c>
   1e58a:	4908      	ldr	r1, [pc, #32]	; (1e5ac <get_status+0x2c>)
   1e58c:	4808      	ldr	r0, [pc, #32]	; (1e5b0 <get_status+0x30>)
   1e58e:	2279      	movs	r2, #121	; 0x79
   1e590:	f007 fb31 	bl	25bf6 <assert_print>
   1e594:	4805      	ldr	r0, [pc, #20]	; (1e5ac <get_status+0x2c>)
   1e596:	2179      	movs	r1, #121	; 0x79
   1e598:	f007 fb26 	bl	25be8 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1e59c:	6929      	ldr	r1, [r5, #16]
   1e59e:	230c      	movs	r3, #12
   1e5a0:	fb04 1403 	mla	r4, r4, r3, r1
   1e5a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   1e5a6:	f000 0007 	and.w	r0, r0, #7
   1e5aa:	bd38      	pop	{r3, r4, r5, pc}
   1e5ac:	0002dbcb 	.word	0x0002dbcb
   1e5b0:	0002ab8c 	.word	0x0002ab8c

0001e5b4 <stop>:
{
   1e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e5b6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1e5b8:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
   1e5ba:	6906      	ldr	r6, [r0, #16]
{
   1e5bc:	4605      	mov	r5, r0
   1e5be:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1e5c0:	d90a      	bls.n	1e5d8 <stop+0x24>
   1e5c2:	4918      	ldr	r1, [pc, #96]	; (1e624 <stop+0x70>)
   1e5c4:	4818      	ldr	r0, [pc, #96]	; (1e628 <stop+0x74>)
   1e5c6:	f240 124d 	movw	r2, #333	; 0x14d
   1e5ca:	f007 fb14 	bl	25bf6 <assert_print>
   1e5ce:	4815      	ldr	r0, [pc, #84]	; (1e624 <stop+0x70>)
   1e5d0:	f240 114d 	movw	r1, #333	; 0x14d
   1e5d4:	f007 fb08 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   1e5d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e5dc:	f3ef 8111 	mrs	r1, BASEPRI
   1e5e0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e5e4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1e5e8:	220c      	movs	r2, #12
   1e5ea:	fb02 6304 	mla	r3, r2, r4, r6
   1e5ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1e5f0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1e5f4:	d001      	beq.n	1e5fa <stop+0x46>
   1e5f6:	429f      	cmp	r7, r3
   1e5f8:	d111      	bne.n	1e61e <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1e5fa:	fb02 6604 	mla	r6, r2, r4, r6
   1e5fe:	2301      	movs	r3, #1
   1e600:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
   1e602:	2000      	movs	r0, #0
	__asm__ volatile(
   1e604:	f381 8811 	msr	BASEPRI, r1
   1e608:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1e60c:	b930      	cbnz	r0, 1e61c <stop+0x68>
	get_sub_config(dev, type)->stop();
   1e60e:	6869      	ldr	r1, [r5, #4]
   1e610:	230c      	movs	r3, #12
   1e612:	fb03 1404 	mla	r4, r3, r4, r1
   1e616:	6863      	ldr	r3, [r4, #4]
   1e618:	4798      	blx	r3
	return 0;
   1e61a:	2000      	movs	r0, #0
}
   1e61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   1e61e:	f04f 30ff 	mov.w	r0, #4294967295
   1e622:	e7ef      	b.n	1e604 <stop+0x50>
   1e624:	0002dbcb 	.word	0x0002dbcb
   1e628:	0002ab8c 	.word	0x0002ab8c

0001e62c <onoff_stop>:
{
   1e62c:	b570      	push	{r4, r5, r6, lr}
   1e62e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1e630:	4906      	ldr	r1, [pc, #24]	; (1e64c <onoff_stop+0x20>)
   1e632:	1a41      	subs	r1, r0, r1
{
   1e634:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1e636:	1149      	asrs	r1, r1, #5
   1e638:	4805      	ldr	r0, [pc, #20]	; (1e650 <onoff_stop+0x24>)
   1e63a:	2240      	movs	r2, #64	; 0x40
   1e63c:	f7ff ffba 	bl	1e5b4 <stop>
	notify(mgr, res);
   1e640:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1e642:	4601      	mov	r1, r0
	notify(mgr, res);
   1e644:	4620      	mov	r0, r4
}
   1e646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1e64a:	4718      	bx	r3
   1e64c:	20002540 	.word	0x20002540
   1e650:	00029de8 	.word	0x00029de8

0001e654 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1e654:	2200      	movs	r2, #0
{
   1e656:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1e658:	2101      	movs	r1, #1
{
   1e65a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1e65c:	4610      	mov	r0, r2
   1e65e:	f7f5 fead 	bl	143bc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1e662:	480f      	ldr	r0, [pc, #60]	; (1e6a0 <clk_init+0x4c>)
   1e664:	f002 fa0c 	bl	20a80 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1e668:	4b0e      	ldr	r3, [pc, #56]	; (1e6a4 <clk_init+0x50>)
   1e66a:	4298      	cmp	r0, r3
   1e66c:	d115      	bne.n	1e69a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1e66e:	f00b f866 	bl	2973e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1e672:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1e674:	490c      	ldr	r1, [pc, #48]	; (1e6a8 <clk_init+0x54>)
   1e676:	4630      	mov	r0, r6
   1e678:	f007 f927 	bl	258ca <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1e67c:	2800      	cmp	r0, #0
   1e67e:	db0b      	blt.n	1e698 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   1e680:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1e682:	4909      	ldr	r1, [pc, #36]	; (1e6a8 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1e684:	2501      	movs	r5, #1
   1e686:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1e688:	f104 0020 	add.w	r0, r4, #32
   1e68c:	f007 f91d 	bl	258ca <onoff_manager_init>
		if (err < 0) {
   1e690:	2800      	cmp	r0, #0
   1e692:	db01      	blt.n	1e698 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1e694:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1e696:	2000      	movs	r0, #0
}
   1e698:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1e69a:	f06f 0004 	mvn.w	r0, #4
   1e69e:	e7fb      	b.n	1e698 <clk_init+0x44>
   1e6a0:	0001e6e1 	.word	0x0001e6e1
   1e6a4:	0bad0000 	.word	0x0bad0000
   1e6a8:	0002a860 	.word	0x0002a860

0001e6ac <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1e6ac:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1e6ae:	230c      	movs	r3, #12
   1e6b0:	4809      	ldr	r0, [pc, #36]	; (1e6d8 <clkstarted_handle.constprop.0+0x2c>)
   1e6b2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1e6b4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1e6b6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1e6b8:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1e6bc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1e6be:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1e6c0:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1e6c2:	4418      	add	r0, r3
   1e6c4:	f00a fd2c 	bl	29120 <set_on_state>
	if (callback) {
   1e6c8:	b12d      	cbz	r5, 1e6d6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1e6ca:	4632      	mov	r2, r6
   1e6cc:	462b      	mov	r3, r5
   1e6ce:	4803      	ldr	r0, [pc, #12]	; (1e6dc <clkstarted_handle.constprop.0+0x30>)
}
   1e6d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1e6d4:	4718      	bx	r3
}
   1e6d6:	bd70      	pop	{r4, r5, r6, pc}
   1e6d8:	20002540 	.word	0x20002540
   1e6dc:	00029de8 	.word	0x00029de8

0001e6e0 <clock_event_handler>:
	switch (event) {
   1e6e0:	2801      	cmp	r0, #1
{
   1e6e2:	b508      	push	{r3, lr}
	switch (event) {
   1e6e4:	d006      	beq.n	1e6f4 <clock_event_handler+0x14>
   1e6e6:	2803      	cmp	r0, #3
   1e6e8:	d008      	beq.n	1e6fc <clock_event_handler+0x1c>
   1e6ea:	b9a0      	cbnz	r0, 1e716 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1e6ec:	4b0f      	ldr	r3, [pc, #60]	; (1e72c <clock_event_handler+0x4c>)
   1e6ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e6f0:	075b      	lsls	r3, r3, #29
   1e6f2:	d119      	bne.n	1e728 <clock_event_handler+0x48>
}
   1e6f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1e6f8:	f7ff bfd8 	b.w	1e6ac <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1e6fc:	490c      	ldr	r1, [pc, #48]	; (1e730 <clock_event_handler+0x50>)
   1e6fe:	480d      	ldr	r0, [pc, #52]	; (1e734 <clock_event_handler+0x54>)
   1e700:	f240 225e 	movw	r2, #606	; 0x25e
   1e704:	f007 fa77 	bl	25bf6 <assert_print>
   1e708:	f240 215e 	movw	r1, #606	; 0x25e
}
   1e70c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1e710:	4807      	ldr	r0, [pc, #28]	; (1e730 <clock_event_handler+0x50>)
   1e712:	f007 ba69 	b.w	25be8 <assert_post_action>
   1e716:	4906      	ldr	r1, [pc, #24]	; (1e730 <clock_event_handler+0x50>)
   1e718:	4806      	ldr	r0, [pc, #24]	; (1e734 <clock_event_handler+0x54>)
   1e71a:	f240 2262 	movw	r2, #610	; 0x262
   1e71e:	f007 fa6a 	bl	25bf6 <assert_print>
   1e722:	f240 2162 	movw	r1, #610	; 0x262
   1e726:	e7f1      	b.n	1e70c <clock_event_handler+0x2c>
}
   1e728:	bd08      	pop	{r3, pc}
   1e72a:	bf00      	nop
   1e72c:	20002540 	.word	0x20002540
   1e730:	0002dbcb 	.word	0x0002dbcb
   1e734:	0002ab8c 	.word	0x0002ab8c

0001e738 <generic_hfclk_start>:
{
   1e738:	b508      	push	{r3, lr}
	__asm__ volatile(
   1e73a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e73e:	f3ef 8111 	mrs	r1, BASEPRI
   1e742:	f383 8812 	msr	BASEPRI_MAX, r3
   1e746:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1e74a:	4a12      	ldr	r2, [pc, #72]	; (1e794 <generic_hfclk_start+0x5c>)
   1e74c:	6813      	ldr	r3, [r2, #0]
   1e74e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1e752:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1e756:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1e758:	d00c      	beq.n	1e774 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1e75a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e75e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1e762:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1e766:	f013 0301 	ands.w	r3, r3, #1
   1e76a:	d003      	beq.n	1e774 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1e76c:	480a      	ldr	r0, [pc, #40]	; (1e798 <generic_hfclk_start+0x60>)
   1e76e:	f00a fcd7 	bl	29120 <set_on_state>
			already_started = true;
   1e772:	2301      	movs	r3, #1
	__asm__ volatile(
   1e774:	f381 8811 	msr	BASEPRI, r1
   1e778:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1e77c:	b123      	cbz	r3, 1e788 <generic_hfclk_start+0x50>
}
   1e77e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1e782:	2000      	movs	r0, #0
   1e784:	f7ff bf92 	b.w	1e6ac <clkstarted_handle.constprop.0>
}
   1e788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1e78c:	2001      	movs	r0, #1
   1e78e:	f002 b93d 	b.w	20a0c <nrfx_clock_start>
   1e792:	bf00      	nop
   1e794:	20002598 	.word	0x20002598
   1e798:	20002588 	.word	0x20002588

0001e79c <api_blocking_start>:
{
   1e79c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1e79e:	2200      	movs	r2, #0
   1e7a0:	2301      	movs	r3, #1
   1e7a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e7a6:	ab04      	add	r3, sp, #16
   1e7a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1e7ac:	4a09      	ldr	r2, [pc, #36]	; (1e7d4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1e7ae:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1e7b2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1e7b4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1e7b8:	f00a fcf5 	bl	291a6 <api_start>
	if (err < 0) {
   1e7bc:	2800      	cmp	r0, #0
   1e7be:	db05      	blt.n	1e7cc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1e7c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1e7c4:	2300      	movs	r3, #0
   1e7c6:	4668      	mov	r0, sp
   1e7c8:	f004 f840 	bl	2284c <z_impl_k_sem_take>
}
   1e7cc:	b007      	add	sp, #28
   1e7ce:	f85d fb04 	ldr.w	pc, [sp], #4
   1e7d2:	bf00      	nop
   1e7d4:	000291cd 	.word	0x000291cd

0001e7d8 <lfclk_start>:
{
   1e7d8:	b510      	push	{r4, lr}
	if (!once) {
   1e7da:	4c07      	ldr	r4, [pc, #28]	; (1e7f8 <lfclk_start+0x20>)
   1e7dc:	7823      	ldrb	r3, [r4, #0]
   1e7de:	b92b      	cbnz	r3, 1e7ec <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   1e7e0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1e7e4:	f00b f9c8 	bl	29b78 <z_impl_k_busy_wait>
		once = true;
   1e7e8:	2301      	movs	r3, #1
   1e7ea:	7023      	strb	r3, [r4, #0]
}
   1e7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1e7f0:	2000      	movs	r0, #0
   1e7f2:	f002 b90b 	b.w	20a0c <nrfx_clock_start>
   1e7f6:	bf00      	nop
   1e7f8:	200028d8 	.word	0x200028d8

0001e7fc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e7fc:	4b09      	ldr	r3, [pc, #36]	; (1e824 <generic_hfclk_stop+0x28>)
   1e7fe:	f3bf 8f5b 	dmb	ish
   1e802:	e853 2f00 	ldrex	r2, [r3]
   1e806:	f022 0102 	bic.w	r1, r2, #2
   1e80a:	e843 1000 	strex	r0, r1, [r3]
   1e80e:	2800      	cmp	r0, #0
   1e810:	d1f7      	bne.n	1e802 <generic_hfclk_stop+0x6>
   1e812:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1e816:	07d3      	lsls	r3, r2, #31
   1e818:	d402      	bmi.n	1e820 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1e81a:	2001      	movs	r0, #1
   1e81c:	f002 b918 	b.w	20a50 <nrfx_clock_stop>
}
   1e820:	4770      	bx	lr
   1e822:	bf00      	nop
   1e824:	20002598 	.word	0x20002598

0001e828 <z_nrf_clock_control_lf_on>:
{
   1e828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e82c:	4946      	ldr	r1, [pc, #280]	; (1e948 <z_nrf_clock_control_lf_on+0x120>)
   1e82e:	f3bf 8f5b 	dmb	ish
   1e832:	4606      	mov	r6, r0
   1e834:	2201      	movs	r2, #1
   1e836:	e851 3f00 	ldrex	r3, [r1]
   1e83a:	e841 2000 	strex	r0, r2, [r1]
   1e83e:	2800      	cmp	r0, #0
   1e840:	d1f9      	bne.n	1e836 <z_nrf_clock_control_lf_on+0xe>
   1e842:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1e846:	b99b      	cbnz	r3, 1e870 <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1e848:	4940      	ldr	r1, [pc, #256]	; (1e94c <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   1e84a:	4841      	ldr	r0, [pc, #260]	; (1e950 <z_nrf_clock_control_lf_on+0x128>)
   1e84c:	604b      	str	r3, [r1, #4]
   1e84e:	60cb      	str	r3, [r1, #12]
   1e850:	608a      	str	r2, [r1, #8]
   1e852:	f7f3 faff 	bl	11e54 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1e856:	2800      	cmp	r0, #0
   1e858:	da0a      	bge.n	1e870 <z_nrf_clock_control_lf_on+0x48>
   1e85a:	493e      	ldr	r1, [pc, #248]	; (1e954 <z_nrf_clock_control_lf_on+0x12c>)
   1e85c:	483e      	ldr	r0, [pc, #248]	; (1e958 <z_nrf_clock_control_lf_on+0x130>)
   1e85e:	f44f 7208 	mov.w	r2, #544	; 0x220
   1e862:	f007 f9c8 	bl	25bf6 <assert_print>
   1e866:	483b      	ldr	r0, [pc, #236]	; (1e954 <z_nrf_clock_control_lf_on+0x12c>)
   1e868:	f44f 7108 	mov.w	r1, #544	; 0x220
   1e86c:	f007 f9bc 	bl	25be8 <assert_post_action>
	switch (start_mode) {
   1e870:	b396      	cbz	r6, 1e8d8 <z_nrf_clock_control_lf_on+0xb0>
   1e872:	1e73      	subs	r3, r6, #1
   1e874:	2b01      	cmp	r3, #1
   1e876:	d853      	bhi.n	1e920 <z_nrf_clock_control_lf_on+0xf8>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1e878:	2e01      	cmp	r6, #1
   1e87a:	d107      	bne.n	1e88c <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1e87c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e880:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1e884:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1e888:	2b01      	cmp	r3, #1
   1e88a:	d025      	beq.n	1e8d8 <z_nrf_clock_control_lf_on+0xb0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e88c:	f00b f876 	bl	2997c <k_is_in_isr>
   1e890:	4604      	mov	r4, r0
   1e892:	b918      	cbnz	r0, 1e89c <z_nrf_clock_control_lf_on+0x74>
	return !z_sys_post_kernel;
   1e894:	4b31      	ldr	r3, [pc, #196]	; (1e95c <z_nrf_clock_control_lf_on+0x134>)
	int key = isr_mode ? irq_lock() : 0;
   1e896:	781b      	ldrb	r3, [r3, #0]
   1e898:	2b00      	cmp	r3, #0
   1e89a:	d14e      	bne.n	1e93a <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   1e89c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e8a0:	f3ef 8711 	mrs	r7, BASEPRI
   1e8a4:	f383 8812 	msr	BASEPRI_MAX, r3
   1e8a8:	f3bf 8f6f 	isb	sy
   1e8ac:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e8ae:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1e960 <z_nrf_clock_control_lf_on+0x138>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e8b2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1e8b6:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e8ba:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1e8be:	03d2      	lsls	r2, r2, #15
   1e8c0:	d50c      	bpl.n	1e8dc <z_nrf_clock_control_lf_on+0xb4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1e8c2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1e8c6:	2b01      	cmp	r3, #1
   1e8c8:	d001      	beq.n	1e8ce <z_nrf_clock_control_lf_on+0xa6>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1e8ca:	2e01      	cmp	r6, #1
   1e8cc:	d106      	bne.n	1e8dc <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1e8ce:	b30c      	cbz	r4, 1e914 <z_nrf_clock_control_lf_on+0xec>
	__asm__ volatile(
   1e8d0:	f387 8811 	msr	BASEPRI, r7
   1e8d4:	f3bf 8f6f 	isb	sy
}
   1e8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1e8dc:	b1ac      	cbz	r4, 1e90a <z_nrf_clock_control_lf_on+0xe2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1e8de:	4638      	mov	r0, r7
   1e8e0:	f7f5 fd02 	bl	142e8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1e8e4:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1e8e8:	2b00      	cmp	r3, #0
   1e8ea:	d1e4      	bne.n	1e8b6 <z_nrf_clock_control_lf_on+0x8e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e8ec:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1e8f0:	2a00      	cmp	r2, #0
   1e8f2:	d0e0      	beq.n	1e8b6 <z_nrf_clock_control_lf_on+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e8f4:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1e8f8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e8fc:	2301      	movs	r3, #1
   1e8fe:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   1e902:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e906:	60ab      	str	r3, [r5, #8]
}
   1e908:	e7d5      	b.n	1e8b6 <z_nrf_clock_control_lf_on+0x8e>
	return z_impl_k_sleep(timeout);
   1e90a:	2100      	movs	r1, #0
   1e90c:	2021      	movs	r0, #33	; 0x21
   1e90e:	f005 fb9b 	bl	24048 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e912:	e7e7      	b.n	1e8e4 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1e914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e918:	2202      	movs	r2, #2
   1e91a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1e91e:	e7db      	b.n	1e8d8 <z_nrf_clock_control_lf_on+0xb0>
		__ASSERT_NO_MSG(false);
   1e920:	490c      	ldr	r1, [pc, #48]	; (1e954 <z_nrf_clock_control_lf_on+0x12c>)
   1e922:	480d      	ldr	r0, [pc, #52]	; (1e958 <z_nrf_clock_control_lf_on+0x130>)
   1e924:	f240 2232 	movw	r2, #562	; 0x232
   1e928:	f007 f965 	bl	25bf6 <assert_print>
}
   1e92c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
   1e930:	4808      	ldr	r0, [pc, #32]	; (1e954 <z_nrf_clock_control_lf_on+0x12c>)
   1e932:	f240 2132 	movw	r1, #562	; 0x232
   1e936:	f007 b957 	b.w	25be8 <assert_post_action>
    p_reg->INTENCLR = mask;
   1e93a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e93e:	2202      	movs	r2, #2
   1e940:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1e944:	4607      	mov	r7, r0
}
   1e946:	e7b2      	b.n	1e8ae <z_nrf_clock_control_lf_on+0x86>
   1e948:	2000259c 	.word	0x2000259c
   1e94c:	20002530 	.word	0x20002530
   1e950:	20002560 	.word	0x20002560
   1e954:	0002dbcb 	.word	0x0002dbcb
   1e958:	0002ab8c 	.word	0x0002ab8c
   1e95c:	200033c7 	.word	0x200033c7
   1e960:	e000e100 	.word	0xe000e100

0001e964 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1e964:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1e966:	4c04      	ldr	r4, [pc, #16]	; (1e978 <rtt_console_init+0x14>)
   1e968:	4620      	mov	r0, r4
   1e96a:	f7f3 f869 	bl	11a40 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   1e96e:	4620      	mov	r0, r4
   1e970:	f7f6 fa20 	bl	14db4 <__stdout_hook_install>

	return 0;
}
   1e974:	2000      	movs	r0, #0
   1e976:	bd10      	pop	{r4, pc}
   1e978:	0001e97d 	.word	0x0001e97d

0001e97c <rtt_console_out>:
{
   1e97c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e97e:	4e14      	ldr	r6, [pc, #80]	; (1e9d0 <rtt_console_out+0x54>)
	char c = (char)character;
   1e980:	f88d 0007 	strb.w	r0, [sp, #7]
{
   1e984:	4604      	mov	r4, r0
	char c = (char)character;
   1e986:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   1e988:	f3ef 8711 	mrs	r7, BASEPRI
   1e98c:	f04f 0120 	mov.w	r1, #32
   1e990:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   1e994:	2201      	movs	r2, #1
   1e996:	f10d 0107 	add.w	r1, sp, #7
   1e99a:	2000      	movs	r0, #0
   1e99c:	f002 ffe4 	bl	21968 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
   1e9a0:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
   1e9a4:	b120      	cbz	r0, 1e9b0 <rtt_console_out+0x34>
			host_present = true;
   1e9a6:	2301      	movs	r3, #1
   1e9a8:	7033      	strb	r3, [r6, #0]
}
   1e9aa:	4620      	mov	r0, r4
   1e9ac:	b003      	add	sp, #12
   1e9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   1e9b0:	7833      	ldrb	r3, [r6, #0]
   1e9b2:	2b00      	cmp	r3, #0
   1e9b4:	d0f9      	beq.n	1e9aa <rtt_console_out+0x2e>
			if (max_cnt) {
   1e9b6:	3d01      	subs	r5, #1
   1e9b8:	d008      	beq.n	1e9cc <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1e9ba:	f00a ffdf 	bl	2997c <k_is_in_isr>
   1e9be:	2800      	cmp	r0, #0
   1e9c0:	d1e2      	bne.n	1e988 <rtt_console_out+0xc>
   1e9c2:	2100      	movs	r1, #0
   1e9c4:	2042      	movs	r0, #66	; 0x42
   1e9c6:	f005 fb3f 	bl	24048 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   1e9ca:	e7dd      	b.n	1e988 <rtt_console_out+0xc>
				host_present = false;
   1e9cc:	7035      	strb	r5, [r6, #0]
   1e9ce:	e7ec      	b.n	1e9aa <rtt_console_out+0x2e>
   1e9d0:	200028d9 	.word	0x200028d9

0001e9d4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1e9d4:	b570      	push	{r4, r5, r6, lr}
	return port->data;
   1e9d6:	6905      	ldr	r5, [r0, #16]
{
   1e9d8:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1e9da:	460c      	mov	r4, r1
   1e9dc:	b941      	cbnz	r1, 1e9f0 <gpio_nrfx_manage_callback+0x1c>
   1e9de:	491e      	ldr	r1, [pc, #120]	; (1ea58 <gpio_nrfx_manage_callback+0x84>)
   1e9e0:	481e      	ldr	r0, [pc, #120]	; (1ea5c <gpio_nrfx_manage_callback+0x88>)
   1e9e2:	2224      	movs	r2, #36	; 0x24
   1e9e4:	f007 f907 	bl	25bf6 <assert_print>
   1e9e8:	481b      	ldr	r0, [pc, #108]	; (1ea58 <gpio_nrfx_manage_callback+0x84>)
   1e9ea:	2124      	movs	r1, #36	; 0x24
   1e9ec:	f007 f8fc 	bl	25be8 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1e9f0:	6863      	ldr	r3, [r4, #4]
   1e9f2:	b943      	cbnz	r3, 1ea06 <gpio_nrfx_manage_callback+0x32>
   1e9f4:	4918      	ldr	r1, [pc, #96]	; (1ea58 <gpio_nrfx_manage_callback+0x84>)
   1e9f6:	4819      	ldr	r0, [pc, #100]	; (1ea5c <gpio_nrfx_manage_callback+0x88>)
   1e9f8:	2225      	movs	r2, #37	; 0x25
   1e9fa:	f007 f8fc 	bl	25bf6 <assert_print>
   1e9fe:	4816      	ldr	r0, [pc, #88]	; (1ea58 <gpio_nrfx_manage_callback+0x84>)
   1ea00:	2125      	movs	r1, #37	; 0x25
   1ea02:	f007 f8f1 	bl	25be8 <assert_post_action>
	return list->head;
   1ea06:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1ea08:	b15b      	cbz	r3, 1ea22 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ea0a:	2200      	movs	r2, #0
   1ea0c:	429c      	cmp	r4, r3
   1ea0e:	d112      	bne.n	1ea36 <gpio_nrfx_manage_callback+0x62>
	return node->next;
   1ea10:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1ea12:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   1ea14:	b952      	cbnz	r2, 1ea2c <gpio_nrfx_manage_callback+0x58>
   1ea16:	42a1      	cmp	r1, r4
	list->head = node;
   1ea18:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1ea1a:	d100      	bne.n	1ea1e <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1ea1c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1ea1e:	2300      	movs	r3, #0
   1ea20:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1ea22:	b96e      	cbnz	r6, 1ea40 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1ea24:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   1ea26:	bd70      	pop	{r4, r5, r6, pc}
   1ea28:	460b      	mov	r3, r1
   1ea2a:	e7ef      	b.n	1ea0c <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   1ea2c:	42a1      	cmp	r1, r4
	parent->next = child;
   1ea2e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1ea30:	bf08      	it	eq
   1ea32:	60aa      	streq	r2, [r5, #8]
}
   1ea34:	e7f3      	b.n	1ea1e <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   1ea36:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ea38:	461a      	mov	r2, r3
   1ea3a:	2900      	cmp	r1, #0
   1ea3c:	d1f4      	bne.n	1ea28 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1ea3e:	b13e      	cbz	r6, 1ea50 <gpio_nrfx_manage_callback+0x7c>
Z_GENLIST_PREPEND(slist, snode)
   1ea40:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   1ea42:	686b      	ldr	r3, [r5, #4]
   1ea44:	6023      	str	r3, [r4, #0]
	list->head = node;
   1ea46:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ea48:	2800      	cmp	r0, #0
   1ea4a:	d1eb      	bne.n	1ea24 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1ea4c:	60ac      	str	r4, [r5, #8]
}
   1ea4e:	e7ea      	b.n	1ea26 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   1ea50:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ea54:	e7e7      	b.n	1ea26 <gpio_nrfx_manage_callback+0x52>
   1ea56:	bf00      	nop
   1ea58:	0002dc31 	.word	0x0002dc31
   1ea5c:	0002ab8c 	.word	0x0002ab8c

0001ea60 <gpio_nrfx_pin_interrupt_configure>:
{
   1ea60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
   1ea62:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1ea64:	7b05      	ldrb	r5, [r0, #12]
   1ea66:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1ea6a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1ea6e:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1ea72:	f04f 0500 	mov.w	r5, #0
   1ea76:	d105      	bne.n	1ea84 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   1ea78:	4620      	mov	r0, r4
   1ea7a:	f002 fdb9 	bl	215f0 <nrfx_gpiote_trigger_disable>
	return 0;
   1ea7e:	2000      	movs	r0, #0
}
   1ea80:	b004      	add	sp, #16
   1ea82:	bd70      	pop	{r4, r5, r6, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
   1ea84:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ea88:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1ea8c:	d14f      	bne.n	1eb2e <gpio_nrfx_pin_interrupt_configure+0xce>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1ea8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1ea92:	bf0c      	ite	eq
   1ea94:	2304      	moveq	r3, #4
   1ea96:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ea98:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1ea9c:	6883      	ldr	r3, [r0, #8]
   1ea9e:	fa23 f101 	lsr.w	r1, r3, r1
   1eaa2:	07c9      	lsls	r1, r1, #31
   1eaa4:	d435      	bmi.n	1eb12 <gpio_nrfx_pin_interrupt_configure+0xb2>
   1eaa6:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1eaaa:	d132      	bne.n	1eb12 <gpio_nrfx_pin_interrupt_configure+0xb2>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1eaac:	0966      	lsrs	r6, r4, #5
   1eaae:	bf0c      	ite	eq
   1eab0:	f04f 33ff 	moveq.w	r3, #4294967295
   1eab4:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1eab6:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1eaba:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1eabc:	07da      	lsls	r2, r3, #31
   1eabe:	d40a      	bmi.n	1ead6 <gpio_nrfx_pin_interrupt_configure+0x76>
   1eac0:	4926      	ldr	r1, [pc, #152]	; (1eb5c <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1eac2:	4827      	ldr	r0, [pc, #156]	; (1eb60 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1eac4:	f240 2247 	movw	r2, #583	; 0x247
   1eac8:	f007 f895 	bl	25bf6 <assert_print>
   1eacc:	4823      	ldr	r0, [pc, #140]	; (1eb5c <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1eace:	f240 2147 	movw	r1, #583	; 0x247
   1ead2:	f007 f889 	bl	25be8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ead6:	b156      	cbz	r6, 1eaee <gpio_nrfx_pin_interrupt_configure+0x8e>
            NRFX_ASSERT(0);
   1ead8:	4920      	ldr	r1, [pc, #128]	; (1eb5c <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1eada:	4821      	ldr	r0, [pc, #132]	; (1eb60 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1eadc:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1eae0:	f007 f889 	bl	25bf6 <assert_print>
   1eae4:	481d      	ldr	r0, [pc, #116]	; (1eb5c <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1eae6:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1eaea:	f007 f87d 	bl	25be8 <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1eaee:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1eaf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1eaf6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1eafa:	07db      	lsls	r3, r3, #31
   1eafc:	d409      	bmi.n	1eb12 <gpio_nrfx_pin_interrupt_configure+0xb2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1eafe:	f10d 0507 	add.w	r5, sp, #7
   1eb02:	4629      	mov	r1, r5
   1eb04:	4620      	mov	r0, r4
   1eb06:	f002 fc9f 	bl	21448 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1eb0a:	4b16      	ldr	r3, [pc, #88]	; (1eb64 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1eb0c:	4298      	cmp	r0, r3
   1eb0e:	d019      	beq.n	1eb44 <gpio_nrfx_pin_interrupt_configure+0xe4>
		trigger_config.p_in_channel = &ch;
   1eb10:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1eb12:	2300      	movs	r3, #0
   1eb14:	4619      	mov	r1, r3
   1eb16:	aa02      	add	r2, sp, #8
   1eb18:	4620      	mov	r0, r4
   1eb1a:	f002 fb6d 	bl	211f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1eb1e:	4b12      	ldr	r3, [pc, #72]	; (1eb68 <gpio_nrfx_pin_interrupt_configure+0x108>)
   1eb20:	4298      	cmp	r0, r3
   1eb22:	d118      	bne.n	1eb56 <gpio_nrfx_pin_interrupt_configure+0xf6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1eb24:	2101      	movs	r1, #1
   1eb26:	4620      	mov	r0, r4
   1eb28:	f002 fcf4 	bl	21514 <nrfx_gpiote_trigger_enable>
   1eb2c:	e7a7      	b.n	1ea7e <gpio_nrfx_pin_interrupt_configure+0x1e>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1eb2e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1eb32:	d005      	beq.n	1eb40 <gpio_nrfx_pin_interrupt_configure+0xe0>
   1eb34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1eb38:	bf0c      	ite	eq
   1eb3a:	2302      	moveq	r3, #2
   1eb3c:	2301      	movne	r3, #1
   1eb3e:	e7ab      	b.n	1ea98 <gpio_nrfx_pin_interrupt_configure+0x38>
   1eb40:	2303      	movs	r3, #3
   1eb42:	e7a9      	b.n	1ea98 <gpio_nrfx_pin_interrupt_configure+0x38>
			err = nrfx_gpiote_channel_alloc(&ch);
   1eb44:	4628      	mov	r0, r5
   1eb46:	f002 fcdf 	bl	21508 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1eb4a:	4b07      	ldr	r3, [pc, #28]	; (1eb68 <gpio_nrfx_pin_interrupt_configure+0x108>)
   1eb4c:	4298      	cmp	r0, r3
   1eb4e:	d0df      	beq.n	1eb10 <gpio_nrfx_pin_interrupt_configure+0xb0>
				return -ENOMEM;
   1eb50:	f06f 000b 	mvn.w	r0, #11
   1eb54:	e794      	b.n	1ea80 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EINVAL;
   1eb56:	f06f 0015 	mvn.w	r0, #21
   1eb5a:	e791      	b.n	1ea80 <gpio_nrfx_pin_interrupt_configure+0x20>
   1eb5c:	0002dc5e 	.word	0x0002dc5e
   1eb60:	0002ab8c 	.word	0x0002ab8c
   1eb64:	0bad0004 	.word	0x0bad0004
   1eb68:	0bad0000 	.word	0x0bad0000

0001eb6c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1eb6c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1eb6e:	f002 fcbb 	bl	214e8 <nrfx_gpiote_is_init>
   1eb72:	4604      	mov	r4, r0
   1eb74:	b968      	cbnz	r0, 1eb92 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1eb76:	f002 fc8f 	bl	21498 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1eb7a:	4b08      	ldr	r3, [pc, #32]	; (1eb9c <gpio_nrfx_init+0x30>)
   1eb7c:	4298      	cmp	r0, r3
   1eb7e:	d10a      	bne.n	1eb96 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1eb80:	4807      	ldr	r0, [pc, #28]	; (1eba0 <gpio_nrfx_init+0x34>)
   1eb82:	4621      	mov	r1, r4
   1eb84:	f002 fc5a 	bl	2143c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1eb88:	4622      	mov	r2, r4
   1eb8a:	2105      	movs	r1, #5
   1eb8c:	2006      	movs	r0, #6
   1eb8e:	f7f5 fc15 	bl	143bc <z_arm_irq_priority_set>
		return 0;
   1eb92:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1eb94:	bd10      	pop	{r4, pc}
		return -EIO;
   1eb96:	f06f 0004 	mvn.w	r0, #4
   1eb9a:	e7fb      	b.n	1eb94 <gpio_nrfx_init+0x28>
   1eb9c:	0bad0000 	.word	0x0bad0000
   1eba0:	0001eba5 	.word	0x0001eba5

0001eba4 <nrfx_gpio_handler>:
{
   1eba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1eba8:	0943      	lsrs	r3, r0, #5
   1ebaa:	d122      	bne.n	1ebf2 <nrfx_gpio_handler+0x4e>
	return list->head;
   1ebac:	4b12      	ldr	r3, [pc, #72]	; (1ebf8 <nrfx_gpio_handler+0x54>)
   1ebae:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ebb0:	b1fc      	cbz	r4, 1ebf2 <nrfx_gpio_handler+0x4e>
	gpio_fire_callbacks(list, port, BIT(pin));
   1ebb2:	2601      	movs	r6, #1
	return node->next;
   1ebb4:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1ebb6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1ebfc <nrfx_gpio_handler+0x58>
			__ASSERT(cb->handler, "No callback handler!");
   1ebba:	4f11      	ldr	r7, [pc, #68]	; (1ec00 <nrfx_gpio_handler+0x5c>)
   1ebbc:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1ec04 <nrfx_gpio_handler+0x60>
   1ebc0:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
   1ebc2:	68a3      	ldr	r3, [r4, #8]
   1ebc4:	421e      	tst	r6, r3
   1ebc6:	d010      	beq.n	1ebea <nrfx_gpio_handler+0x46>
			__ASSERT(cb->handler, "No callback handler!");
   1ebc8:	6863      	ldr	r3, [r4, #4]
   1ebca:	b943      	cbnz	r3, 1ebde <nrfx_gpio_handler+0x3a>
   1ebcc:	4639      	mov	r1, r7
   1ebce:	4648      	mov	r0, r9
   1ebd0:	2245      	movs	r2, #69	; 0x45
   1ebd2:	f007 f810 	bl	25bf6 <assert_print>
   1ebd6:	2145      	movs	r1, #69	; 0x45
   1ebd8:	4638      	mov	r0, r7
   1ebda:	f007 f805 	bl	25be8 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1ebde:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1ebe2:	4621      	mov	r1, r4
   1ebe4:	4032      	ands	r2, r6
   1ebe6:	4640      	mov	r0, r8
   1ebe8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ebea:	b115      	cbz	r5, 1ebf2 <nrfx_gpio_handler+0x4e>
   1ebec:	462c      	mov	r4, r5
   1ebee:	682d      	ldr	r5, [r5, #0]
   1ebf0:	e7e7      	b.n	1ebc2 <nrfx_gpio_handler+0x1e>
}
   1ebf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ebf6:	bf00      	nop
   1ebf8:	200025a0 	.word	0x200025a0
   1ebfc:	00029e00 	.word	0x00029e00
   1ec00:	0002dc31 	.word	0x0002dc31
   1ec04:	0002ab8c 	.word	0x0002ab8c

0001ec08 <gpio_nrfx_pin_configure>:
{
   1ec08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1ec0c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ec10:	f899 300c 	ldrb.w	r3, [r9, #12]
   1ec14:	f001 061f 	and.w	r6, r1, #31
{
   1ec18:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ec1a:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
   1ec1e:	4688      	mov	r8, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ec20:	4630      	mov	r0, r6
   1ec22:	f10d 0103 	add.w	r1, sp, #3
{
   1ec26:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ec28:	f002 fc0e 	bl	21448 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1ec2c:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ec30:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1ec32:	d116      	bne.n	1ec62 <gpio_nrfx_pin_configure+0x5a>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1ec34:	4630      	mov	r0, r6
   1ec36:	f002 fd05 	bl	21644 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1ec3a:	4b4e      	ldr	r3, [pc, #312]	; (1ed74 <gpio_nrfx_pin_configure+0x16c>)
   1ec3c:	429f      	cmp	r7, r3
   1ec3e:	d10e      	bne.n	1ec5e <gpio_nrfx_pin_configure+0x56>
			err = nrfx_gpiote_channel_free(ch);
   1ec40:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1ec44:	f002 fc5a 	bl	214fc <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1ec48:	42b8      	cmp	r0, r7
   1ec4a:	d008      	beq.n	1ec5e <gpio_nrfx_pin_configure+0x56>
   1ec4c:	494a      	ldr	r1, [pc, #296]	; (1ed78 <gpio_nrfx_pin_configure+0x170>)
   1ec4e:	484b      	ldr	r0, [pc, #300]	; (1ed7c <gpio_nrfx_pin_configure+0x174>)
   1ec50:	2268      	movs	r2, #104	; 0x68
   1ec52:	f006 ffd0 	bl	25bf6 <assert_print>
   1ec56:	4848      	ldr	r0, [pc, #288]	; (1ed78 <gpio_nrfx_pin_configure+0x170>)
   1ec58:	2168      	movs	r1, #104	; 0x68
   1ec5a:	f006 ffc5 	bl	25be8 <assert_post_action>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1ec5e:	2000      	movs	r0, #0
   1ec60:	e062      	b.n	1ed28 <gpio_nrfx_pin_configure+0x120>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ec62:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ec64:	4619      	mov	r1, r3
   1ec66:	aa02      	add	r2, sp, #8
   1ec68:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ec6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ec6e:	f002 fac3 	bl	211f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1ec72:	4b40      	ldr	r3, [pc, #256]	; (1ed74 <gpio_nrfx_pin_configure+0x16c>)
   1ec74:	4298      	cmp	r0, r3
   1ec76:	d002      	beq.n	1ec7e <gpio_nrfx_pin_configure+0x76>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1ec78:	f06f 0015 	mvn.w	r0, #21
   1ec7c:	e054      	b.n	1ed28 <gpio_nrfx_pin_configure+0x120>
	if (free_ch) {
   1ec7e:	4287      	cmp	r7, r0
   1ec80:	d10e      	bne.n	1eca0 <gpio_nrfx_pin_configure+0x98>
		err = nrfx_gpiote_channel_free(ch);
   1ec82:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1ec86:	f002 fc39 	bl	214fc <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1ec8a:	42b8      	cmp	r0, r7
   1ec8c:	d008      	beq.n	1eca0 <gpio_nrfx_pin_configure+0x98>
   1ec8e:	493a      	ldr	r1, [pc, #232]	; (1ed78 <gpio_nrfx_pin_configure+0x170>)
   1ec90:	483a      	ldr	r0, [pc, #232]	; (1ed7c <gpio_nrfx_pin_configure+0x174>)
   1ec92:	227a      	movs	r2, #122	; 0x7a
   1ec94:	f006 ffaf 	bl	25bf6 <assert_print>
   1ec98:	4837      	ldr	r0, [pc, #220]	; (1ed78 <gpio_nrfx_pin_configure+0x170>)
   1ec9a:	217a      	movs	r1, #122	; 0x7a
   1ec9c:	f006 ffa4 	bl	25be8 <assert_post_action>
	if (flags & GPIO_OUTPUT) {
   1eca0:	03a5      	lsls	r5, r4, #14
   1eca2:	d554      	bpl.n	1ed4e <gpio_nrfx_pin_configure+0x146>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1eca4:	f240 3306 	movw	r3, #774	; 0x306
   1eca8:	4023      	ands	r3, r4
   1ecaa:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1ecae:	d03e      	beq.n	1ed2e <gpio_nrfx_pin_configure+0x126>
   1ecb0:	d80c      	bhi.n	1eccc <gpio_nrfx_pin_configure+0xc4>
   1ecb2:	2b06      	cmp	r3, #6
   1ecb4:	d015      	beq.n	1ece2 <gpio_nrfx_pin_configure+0xda>
   1ecb6:	d804      	bhi.n	1ecc2 <gpio_nrfx_pin_configure+0xba>
   1ecb8:	b19b      	cbz	r3, 1ece2 <gpio_nrfx_pin_configure+0xda>
   1ecba:	2b02      	cmp	r3, #2
   1ecbc:	d1dc      	bne.n	1ec78 <gpio_nrfx_pin_configure+0x70>
   1ecbe:	2304      	movs	r3, #4
   1ecc0:	e00f      	b.n	1ece2 <gpio_nrfx_pin_configure+0xda>
   1ecc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1ecc6:	d1d7      	bne.n	1ec78 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_H0S1;
   1ecc8:	2301      	movs	r3, #1
   1ecca:	e00a      	b.n	1ece2 <gpio_nrfx_pin_configure+0xda>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1eccc:	f240 2202 	movw	r2, #514	; 0x202
   1ecd0:	4293      	cmp	r3, r2
   1ecd2:	d02e      	beq.n	1ed32 <gpio_nrfx_pin_configure+0x12a>
   1ecd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1ecd8:	d02d      	beq.n	1ed36 <gpio_nrfx_pin_configure+0x12e>
   1ecda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1ecde:	d1cb      	bne.n	1ec78 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_S0H1;
   1ece0:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1ece2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1ece6:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1ecea:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1ecee:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1ecf0:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1ecf4:	bf54      	ite	pl
   1ecf6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1ecfa:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1ecfc:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1ecfe:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1ed02:	d51a      	bpl.n	1ed3a <gpio_nrfx_pin_configure+0x132>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1ed04:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1ed08:	2101      	movs	r1, #1
   1ed0a:	fa01 f108 	lsl.w	r1, r1, r8
    p_reg->OUTSET = set_mask;
   1ed0e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1ed12:	2200      	movs	r2, #0
   1ed14:	a901      	add	r1, sp, #4
   1ed16:	4630      	mov	r0, r6
   1ed18:	f002 fb1c 	bl	21354 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1ed1c:	4b15      	ldr	r3, [pc, #84]	; (1ed74 <gpio_nrfx_pin_configure+0x16c>)
   1ed1e:	4298      	cmp	r0, r3
   1ed20:	bf14      	ite	ne
   1ed22:	f06f 0015 	mvnne.w	r0, #21
   1ed26:	2000      	moveq	r0, #0
}
   1ed28:	b005      	add	sp, #20
   1ed2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
   1ed2e:	2307      	movs	r3, #7
   1ed30:	e7d7      	b.n	1ece2 <gpio_nrfx_pin_configure+0xda>
		*drive = NRF_GPIO_PIN_D0H1;
   1ed32:	2305      	movs	r3, #5
   1ed34:	e7d5      	b.n	1ece2 <gpio_nrfx_pin_configure+0xda>
		*drive = NRF_GPIO_PIN_H0H1;
   1ed36:	2303      	movs	r3, #3
   1ed38:	e7d3      	b.n	1ece2 <gpio_nrfx_pin_configure+0xda>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1ed3a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1ed3c:	bf41      	itttt	mi
   1ed3e:	2101      	movmi	r1, #1
   1ed40:	f8d9 3004 	ldrmi.w	r3, [r9, #4]
   1ed44:	fa01 f108 	lslmi.w	r1, r1, r8
    p_reg->OUTCLR = clr_mask;
   1ed48:	f8c3 150c 	strmi.w	r1, [r3, #1292]	; 0x50c
}
   1ed4c:	e7e1      	b.n	1ed12 <gpio_nrfx_pin_configure+0x10a>
	if (flags & GPIO_PULL_UP) {
   1ed4e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1ed50:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1ed54:	bf54      	ite	pl
   1ed56:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1ed5a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1ed5c:	461a      	mov	r2, r3
   1ed5e:	a901      	add	r1, sp, #4
   1ed60:	4630      	mov	r0, r6
	nrfx_gpiote_input_config_t input_config = {
   1ed62:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1ed66:	f002 fa47 	bl	211f8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1ed6a:	4b02      	ldr	r3, [pc, #8]	; (1ed74 <gpio_nrfx_pin_configure+0x16c>)
   1ed6c:	4298      	cmp	r0, r3
   1ed6e:	f43f af76 	beq.w	1ec5e <gpio_nrfx_pin_configure+0x56>
   1ed72:	e781      	b.n	1ec78 <gpio_nrfx_pin_configure+0x70>
   1ed74:	0bad0000 	.word	0x0bad0000
   1ed78:	0002dc91 	.word	0x0002dc91
   1ed7c:	0002ab8c 	.word	0x0002ab8c

0001ed80 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1ed80:	4b02      	ldr	r3, [pc, #8]	; (1ed8c <flash_nrf_pages_layout+0xc>)
   1ed82:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1ed84:	2301      	movs	r3, #1
   1ed86:	6013      	str	r3, [r2, #0]
}
   1ed88:	4770      	bx	lr
   1ed8a:	bf00      	nop
   1ed8c:	200025ac 	.word	0x200025ac

0001ed90 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1ed90:	4800      	ldr	r0, [pc, #0]	; (1ed94 <flash_nrf_get_parameters+0x4>)
   1ed92:	4770      	bx	lr
   1ed94:	0002a8b4 	.word	0x0002a8b4

0001ed98 <flash_nrf_read>:
{
   1ed98:	b570      	push	{r4, r5, r6, lr}
   1ed9a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1ed9c:	4628      	mov	r0, r5
   1ed9e:	4619      	mov	r1, r3
{
   1eda0:	4616      	mov	r6, r2
   1eda2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1eda4:	f00a fa65 	bl	29272 <is_regular_addr_valid>
   1eda8:	b940      	cbnz	r0, 1edbc <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1edaa:	4809      	ldr	r0, [pc, #36]	; (1edd0 <flash_nrf_read+0x38>)
   1edac:	4623      	mov	r3, r4
   1edae:	462a      	mov	r2, r5
   1edb0:	2145      	movs	r1, #69	; 0x45
   1edb2:	f006 ff2e 	bl	25c12 <z_log_minimal_printk>
   1edb6:	f06f 0015 	mvn.w	r0, #21
}
   1edba:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1edbc:	b134      	cbz	r4, 1edcc <flash_nrf_read+0x34>
	memcpy(data, (void *)addr, len);
   1edbe:	4622      	mov	r2, r4
   1edc0:	4629      	mov	r1, r5
   1edc2:	4630      	mov	r0, r6
   1edc4:	f007 fec5 	bl	26b52 <memcpy>
	return 0;
   1edc8:	2000      	movs	r0, #0
   1edca:	e7f6      	b.n	1edba <flash_nrf_read+0x22>
		return 0;
   1edcc:	4620      	mov	r0, r4
   1edce:	e7f4      	b.n	1edba <flash_nrf_read+0x22>
   1edd0:	0002dccb 	.word	0x0002dccb

0001edd4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1edd4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1edd6:	2201      	movs	r2, #1
   1edd8:	4611      	mov	r1, r2
   1edda:	4807      	ldr	r0, [pc, #28]	; (1edf8 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1eddc:	4c07      	ldr	r4, [pc, #28]	; (1edfc <nrf_flash_init+0x28>)
   1edde:	f00a fe1e 	bl	29a1e <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1ede2:	f001 fec9 	bl	20b78 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1ede6:	f00a fd54 	bl	29892 <nrfx_nvmc_flash_page_count_get>
   1edea:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1edec:	f00a fd4d 	bl	2988a <nrfx_nvmc_flash_page_size_get>
   1edf0:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1edf2:	2000      	movs	r0, #0
   1edf4:	bd10      	pop	{r4, pc}
   1edf6:	bf00      	nop
   1edf8:	200025b4 	.word	0x200025b4
   1edfc:	200025ac 	.word	0x200025ac

0001ee00 <flash_nrf_erase>:
{
   1ee00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee02:	b087      	sub	sp, #28
   1ee04:	460e      	mov	r6, r1
   1ee06:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1ee08:	f00a fd3f 	bl	2988a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1ee0c:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1ee0e:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1ee10:	4630      	mov	r0, r6
   1ee12:	f00a fa2e 	bl	29272 <is_regular_addr_valid>
   1ee16:	b358      	cbz	r0, 1ee70 <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1ee18:	fbb6 f3f7 	udiv	r3, r6, r7
   1ee1c:	fb07 6313 	mls	r3, r7, r3, r6
   1ee20:	b923      	cbnz	r3, 1ee2c <flash_nrf_erase+0x2c>
   1ee22:	fbb5 f4f7 	udiv	r4, r5, r7
   1ee26:	fb07 5414 	mls	r4, r7, r4, r5
   1ee2a:	b154      	cbz	r4, 1ee42 <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1ee2c:	481f      	ldr	r0, [pc, #124]	; (1eeac <flash_nrf_erase+0xac>)
   1ee2e:	462b      	mov	r3, r5
   1ee30:	4632      	mov	r2, r6
   1ee32:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ee34:	f006 feed 	bl	25c12 <z_log_minimal_printk>
		return -EINVAL;
   1ee38:	f06f 0415 	mvn.w	r4, #21
}
   1ee3c:	4620      	mov	r0, r4
   1ee3e:	b007      	add	sp, #28
   1ee40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1ee42:	42bd      	cmp	r5, r7
   1ee44:	d3fa      	bcc.n	1ee3c <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1ee46:	f04f 33ff 	mov.w	r3, #4294967295
   1ee4a:	f04f 32ff 	mov.w	r2, #4294967295
   1ee4e:	4818      	ldr	r0, [pc, #96]	; (1eeb0 <flash_nrf_erase+0xb0>)
   1ee50:	f003 fcfc 	bl	2284c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1ee54:	f00a fc76 	bl	29744 <nrf_flash_sync_is_required>
   1ee58:	ab02      	add	r3, sp, #8
   1ee5a:	4601      	mov	r1, r0
   1ee5c:	b968      	cbnz	r0, 1ee7a <flash_nrf_erase+0x7a>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1ee5e:	2210      	movs	r2, #16
   1ee60:	4618      	mov	r0, r3
   1ee62:	f007 fe81 	bl	26b68 <memset>
   1ee66:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1ee6a:	f00a f9de 	bl	2922a <erase_op>
   1ee6e:	e017      	b.n	1eea0 <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ee70:	4810      	ldr	r0, [pc, #64]	; (1eeb4 <flash_nrf_erase+0xb4>)
   1ee72:	462b      	mov	r3, r5
   1ee74:	4632      	mov	r2, r6
   1ee76:	2145      	movs	r1, #69	; 0x45
   1ee78:	e7dc      	b.n	1ee34 <flash_nrf_erase+0x34>
	struct flash_context context = {
   1ee7a:	2210      	movs	r2, #16
   1ee7c:	4621      	mov	r1, r4
   1ee7e:	4618      	mov	r0, r3
   1ee80:	f007 fe72 	bl	26b68 <memset>
   1ee84:	2201      	movs	r2, #1
   1ee86:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1ee8a:	4a0b      	ldr	r2, [pc, #44]	; (1eeb8 <flash_nrf_erase+0xb8>)
   1ee8c:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1ee90:	480a      	ldr	r0, [pc, #40]	; (1eebc <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   1ee92:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1ee96:	f001 fe77 	bl	20b88 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1ee9a:	4668      	mov	r0, sp
   1ee9c:	f001 fe7a 	bl	20b94 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1eea0:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1eea2:	4803      	ldr	r0, [pc, #12]	; (1eeb0 <flash_nrf_erase+0xb0>)
   1eea4:	f003 fc98 	bl	227d8 <z_impl_k_sem_give>
}
   1eea8:	e7c8      	b.n	1ee3c <flash_nrf_erase+0x3c>
   1eeaa:	bf00      	nop
   1eeac:	0002dced 	.word	0x0002dced
   1eeb0:	200025b4 	.word	0x200025b4
   1eeb4:	0002dccb 	.word	0x0002dccb
   1eeb8:	0002922b 	.word	0x0002922b
   1eebc:	00015e64 	.word	0x00015e64

0001eec0 <write_op>:
{
   1eec0:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1eec2:	7b03      	ldrb	r3, [r0, #12]
{
   1eec4:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1eec6:	b10b      	cbz	r3, 1eecc <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1eec8:	f00a fc3e 	bl	29748 <nrf_flash_sync_get_timestamp_begin>
{
   1eecc:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1eece:	68a3      	ldr	r3, [r4, #8]
   1eed0:	2b03      	cmp	r3, #3
   1eed2:	d806      	bhi.n	1eee2 <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1eed4:	4a12      	ldr	r2, [pc, #72]	; (1ef20 <write_op+0x60>)
   1eed6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1eeda:	07db      	lsls	r3, r3, #31
   1eedc:	d5fb      	bpl.n	1eed6 <write_op+0x16>
	return FLASH_OP_DONE;
   1eede:	2000      	movs	r0, #0
}
   1eee0:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1eee2:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1eee4:	6860      	ldr	r0, [r4, #4]
   1eee6:	6819      	ldr	r1, [r3, #0]
   1eee8:	f002 fcd0 	bl	2188c <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1eeec:	6863      	ldr	r3, [r4, #4]
   1eeee:	3304      	adds	r3, #4
   1eef0:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1eef2:	6823      	ldr	r3, [r4, #0]
   1eef4:	3304      	adds	r3, #4
   1eef6:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1eef8:	68a3      	ldr	r3, [r4, #8]
   1eefa:	3b04      	subs	r3, #4
   1eefc:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1eefe:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1ef00:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1ef02:	2b00      	cmp	r3, #0
   1ef04:	d0e3      	beq.n	1eece <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1ef06:	4628      	mov	r0, r5
   1ef08:	f001 fef8 	bl	20cfc <nrf_flash_sync_check_time_limit>
   1ef0c:	2800      	cmp	r0, #0
   1ef0e:	d0de      	beq.n	1eece <write_op+0xe>
   1ef10:	4a03      	ldr	r2, [pc, #12]	; (1ef20 <write_op+0x60>)
   1ef12:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1ef16:	07d9      	lsls	r1, r3, #31
   1ef18:	d5fb      	bpl.n	1ef12 <write_op+0x52>
				return FLASH_OP_ONGOING;
   1ef1a:	2001      	movs	r0, #1
   1ef1c:	e7e0      	b.n	1eee0 <write_op+0x20>
   1ef1e:	bf00      	nop
   1ef20:	4001e000 	.word	0x4001e000

0001ef24 <flash_nrf_write>:
{
   1ef24:	b570      	push	{r4, r5, r6, lr}
   1ef26:	460d      	mov	r5, r1
   1ef28:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1ef2a:	4619      	mov	r1, r3
   1ef2c:	4628      	mov	r0, r5
{
   1ef2e:	4616      	mov	r6, r2
   1ef30:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1ef32:	f00a f99e 	bl	29272 <is_regular_addr_valid>
   1ef36:	b950      	cbnz	r0, 1ef4e <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ef38:	481d      	ldr	r0, [pc, #116]	; (1efb0 <flash_nrf_write+0x8c>)
   1ef3a:	4623      	mov	r3, r4
   1ef3c:	462a      	mov	r2, r5
   1ef3e:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1ef40:	f006 fe67 	bl	25c12 <z_log_minimal_printk>
		return -EINVAL;
   1ef44:	f06f 0415 	mvn.w	r4, #21
}
   1ef48:	4620      	mov	r0, r4
   1ef4a:	b006      	add	sp, #24
   1ef4c:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1ef4e:	ea45 0304 	orr.w	r3, r5, r4
   1ef52:	079b      	lsls	r3, r3, #30
   1ef54:	d004      	beq.n	1ef60 <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1ef56:	4817      	ldr	r0, [pc, #92]	; (1efb4 <flash_nrf_write+0x90>)
   1ef58:	4623      	mov	r3, r4
   1ef5a:	462a      	mov	r2, r5
   1ef5c:	2145      	movs	r1, #69	; 0x45
   1ef5e:	e7ef      	b.n	1ef40 <flash_nrf_write+0x1c>
	if (!len) {
   1ef60:	2c00      	cmp	r4, #0
   1ef62:	d0f1      	beq.n	1ef48 <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   1ef64:	f04f 33ff 	mov.w	r3, #4294967295
   1ef68:	f04f 32ff 	mov.w	r2, #4294967295
   1ef6c:	4812      	ldr	r0, [pc, #72]	; (1efb8 <flash_nrf_write+0x94>)
   1ef6e:	f003 fc6d 	bl	2284c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1ef72:	f00a fbe7 	bl	29744 <nrf_flash_sync_is_required>
   1ef76:	4603      	mov	r3, r0
	struct flash_context context = {
   1ef78:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1ef7c:	a802      	add	r0, sp, #8
   1ef7e:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1ef80:	b18b      	cbz	r3, 1efa6 <flash_nrf_write+0x82>
	struct flash_context context = {
   1ef82:	2301      	movs	r3, #1
   1ef84:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1ef88:	4b0c      	ldr	r3, [pc, #48]	; (1efbc <flash_nrf_write+0x98>)
   1ef8a:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1ef8e:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1ef92:	f001 fdf9 	bl	20b88 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1ef96:	4668      	mov	r0, sp
   1ef98:	f001 fdfc 	bl	20b94 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1ef9c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1ef9e:	4806      	ldr	r0, [pc, #24]	; (1efb8 <flash_nrf_write+0x94>)
   1efa0:	f003 fc1a 	bl	227d8 <z_impl_k_sem_give>
}
   1efa4:	e7d0      	b.n	1ef48 <flash_nrf_write+0x24>
	struct flash_context context = {
   1efa6:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1efaa:	f7ff ff89 	bl	1eec0 <write_op>
   1efae:	e7f5      	b.n	1ef9c <flash_nrf_write+0x78>
   1efb0:	0002dccb 	.word	0x0002dccb
   1efb4:	0002dd11 	.word	0x0002dd11
   1efb8:	200025b4 	.word	0x200025b4
   1efbc:	0001eec1 	.word	0x0001eec1

0001efc0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1efc0:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1efc2:	794b      	ldrb	r3, [r1, #5]
   1efc4:	2b01      	cmp	r3, #1
   1efc6:	d120      	bne.n	1f00a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1efc8:	798b      	ldrb	r3, [r1, #6]
   1efca:	2b03      	cmp	r3, #3
   1efcc:	d11d      	bne.n	1f00a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1efce:	79cc      	ldrb	r4, [r1, #7]
   1efd0:	b10c      	cbz	r4, 1efd6 <uarte_nrfx_configure+0x16>
   1efd2:	2c01      	cmp	r4, #1
   1efd4:	d119      	bne.n	1f00a <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1efd6:	790a      	ldrb	r2, [r1, #4]
   1efd8:	b112      	cbz	r2, 1efe0 <uarte_nrfx_configure+0x20>
   1efda:	2a02      	cmp	r2, #2
   1efdc:	d115      	bne.n	1f00a <uarte_nrfx_configure+0x4a>
   1efde:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1efe0:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1efe2:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1efe4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1efe8:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1efea:	d062      	beq.n	1f0b2 <uarte_nrfx_configure+0xf2>
   1efec:	d82b      	bhi.n	1f046 <uarte_nrfx_configure+0x86>
   1efee:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1eff2:	d061      	beq.n	1f0b8 <uarte_nrfx_configure+0xf8>
   1eff4:	d814      	bhi.n	1f020 <uarte_nrfx_configure+0x60>
   1eff6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1effa:	d05f      	beq.n	1f0bc <uarte_nrfx_configure+0xfc>
   1effc:	d808      	bhi.n	1f010 <uarte_nrfx_configure+0x50>
   1effe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1f002:	d05e      	beq.n	1f0c2 <uarte_nrfx_configure+0x102>
   1f004:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1f008:	d05e      	beq.n	1f0c8 <uarte_nrfx_configure+0x108>
   1f00a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f00e:	e04f      	b.n	1f0b0 <uarte_nrfx_configure+0xf0>
   1f010:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1f014:	d05b      	beq.n	1f0ce <uarte_nrfx_configure+0x10e>
   1f016:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1f01a:	d1f6      	bne.n	1f00a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1f01c:	4b36      	ldr	r3, [pc, #216]	; (1f0f8 <uarte_nrfx_configure+0x138>)
   1f01e:	e03c      	b.n	1f09a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1f020:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1f024:	d056      	beq.n	1f0d4 <uarte_nrfx_configure+0x114>
   1f026:	d807      	bhi.n	1f038 <uarte_nrfx_configure+0x78>
   1f028:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1f02c:	d054      	beq.n	1f0d8 <uarte_nrfx_configure+0x118>
   1f02e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1f032:	d1ea      	bne.n	1f00a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1f034:	4b31      	ldr	r3, [pc, #196]	; (1f0fc <uarte_nrfx_configure+0x13c>)
   1f036:	e030      	b.n	1f09a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1f038:	f647 2612 	movw	r6, #31250	; 0x7a12
   1f03c:	42b3      	cmp	r3, r6
   1f03e:	d1e4      	bne.n	1f00a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1f040:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1f044:	e029      	b.n	1f09a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1f046:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1f04a:	d047      	beq.n	1f0dc <uarte_nrfx_configure+0x11c>
   1f04c:	d813      	bhi.n	1f076 <uarte_nrfx_configure+0xb6>
   1f04e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1f052:	d046      	beq.n	1f0e2 <uarte_nrfx_configure+0x122>
   1f054:	d809      	bhi.n	1f06a <uarte_nrfx_configure+0xaa>
   1f056:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   1f05a:	42b3      	cmp	r3, r6
   1f05c:	d043      	beq.n	1f0e6 <uarte_nrfx_configure+0x126>
   1f05e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1f062:	d1d2      	bne.n	1f00a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1f064:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1f068:	e017      	b.n	1f09a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1f06a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1f06e:	d1cc      	bne.n	1f00a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1f070:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1f074:	e011      	b.n	1f09a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1f076:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1f07a:	d037      	beq.n	1f0ec <uarte_nrfx_configure+0x12c>
   1f07c:	d808      	bhi.n	1f090 <uarte_nrfx_configure+0xd0>
   1f07e:	4e20      	ldr	r6, [pc, #128]	; (1f100 <uarte_nrfx_configure+0x140>)
   1f080:	42b3      	cmp	r3, r6
   1f082:	d036      	beq.n	1f0f2 <uarte_nrfx_configure+0x132>
   1f084:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1f088:	d1bf      	bne.n	1f00a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1f08a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1f08e:	e004      	b.n	1f09a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1f090:	4e1c      	ldr	r6, [pc, #112]	; (1f104 <uarte_nrfx_configure+0x144>)
   1f092:	42b3      	cmp	r3, r6
   1f094:	d1b9      	bne.n	1f00a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1f096:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1f09a:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1f09c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1f0a0:	1d03      	adds	r3, r0, #4
   1f0a2:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1f0a4:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1f0a6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1f0aa:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1f0ae:	2000      	movs	r0, #0
}
   1f0b0:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1f0b2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1f0b6:	e7f0      	b.n	1f09a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1f0b8:	4b13      	ldr	r3, [pc, #76]	; (1f108 <uarte_nrfx_configure+0x148>)
   1f0ba:	e7ee      	b.n	1f09a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1f0bc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1f0c0:	e7eb      	b.n	1f09a <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1f0c2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1f0c6:	e7e8      	b.n	1f09a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1f0c8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1f0cc:	e7e5      	b.n	1f09a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1f0ce:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1f0d2:	e7e2      	b.n	1f09a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1f0d4:	4b0d      	ldr	r3, [pc, #52]	; (1f10c <uarte_nrfx_configure+0x14c>)
   1f0d6:	e7e0      	b.n	1f09a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1f0d8:	4b0d      	ldr	r3, [pc, #52]	; (1f110 <uarte_nrfx_configure+0x150>)
   1f0da:	e7de      	b.n	1f09a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1f0dc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1f0e0:	e7db      	b.n	1f09a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1f0e2:	4b0c      	ldr	r3, [pc, #48]	; (1f114 <uarte_nrfx_configure+0x154>)
   1f0e4:	e7d9      	b.n	1f09a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1f0e6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1f0ea:	e7d6      	b.n	1f09a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1f0ec:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1f0f0:	e7d3      	b.n	1f09a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1f0f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1f0f6:	e7d0      	b.n	1f09a <uarte_nrfx_configure+0xda>
   1f0f8:	0013b000 	.word	0x0013b000
   1f0fc:	004ea000 	.word	0x004ea000
   1f100:	0003d090 	.word	0x0003d090
   1f104:	000f4240 	.word	0x000f4240
   1f108:	00275000 	.word	0x00275000
   1f10c:	0075c000 	.word	0x0075c000
   1f110:	003af000 	.word	0x003af000
   1f114:	013a9000 	.word	0x013a9000

0001f118 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1f118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f11c:	4607      	mov	r7, r0
   1f11e:	2200      	movs	r2, #0
   1f120:	2101      	movs	r1, #1
   1f122:	2002      	movs	r0, #2
   1f124:	f7f5 f94a 	bl	143bc <z_arm_irq_priority_set>
   1f128:	2002      	movs	r0, #2
   1f12a:	f7f5 f915 	bl	14358 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1f12e:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1f132:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   1f134:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1f138:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1f13c:	2100      	movs	r1, #0
   1f13e:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1f142:	aa01      	add	r2, sp, #4
	data->dev = dev;
   1f144:	6037      	str	r7, [r6, #0]
   1f146:	4648      	mov	r0, r9
   1f148:	f00a f98a 	bl	29460 <pinctrl_lookup_state>
	if (ret < 0) {
   1f14c:	1e05      	subs	r5, r0, #0
   1f14e:	db1f      	blt.n	1f190 <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1f150:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1f152:	f8d9 2000 	ldr.w	r2, [r9]
   1f156:	7919      	ldrb	r1, [r3, #4]
   1f158:	6818      	ldr	r0, [r3, #0]
   1f15a:	f00a f9d8 	bl	2950e <pinctrl_configure_pins>
	if (err < 0) {
   1f15e:	1e05      	subs	r5, r0, #0
   1f160:	db16      	blt.n	1f190 <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1f162:	1d31      	adds	r1, r6, #4
   1f164:	4638      	mov	r0, r7
   1f166:	f7ff ff2b 	bl	1efc0 <uarte_nrfx_configure>
	if (err) {
   1f16a:	4605      	mov	r5, r0
   1f16c:	b980      	cbnz	r0, 1f190 <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1f16e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1f172:	0799      	lsls	r1, r3, #30
   1f174:	d523      	bpl.n	1f1be <uarte_0_init+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1f176:	f106 0018 	add.w	r0, r6, #24
   1f17a:	f002 fbb9 	bl	218f0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1f17e:	4b24      	ldr	r3, [pc, #144]	; (1f210 <uarte_0_init+0xf8>)
   1f180:	4298      	cmp	r0, r3
   1f182:	d009      	beq.n	1f198 <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   1f184:	4823      	ldr	r0, [pc, #140]	; (1f214 <uarte_0_init+0xfc>)
   1f186:	2145      	movs	r1, #69	; 0x45
   1f188:	f006 fd43 	bl	25c12 <z_log_minimal_printk>
		return -EIO;
   1f18c:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   1f190:	4628      	mov	r0, r5
   1f192:	b003      	add	sp, #12
   1f194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1f198:	7e30      	ldrb	r0, [r6, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1f19a:	00c3      	lsls	r3, r0, #3
   1f19c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f1a0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1f1a4:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1f1a8:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f1ac:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f1b0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1f1b4:	4a18      	ldr	r2, [pc, #96]	; (1f218 <uarte_0_init+0x100>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1f1b6:	2301      	movs	r3, #1
   1f1b8:	4083      	lsls	r3, r0
   1f1ba:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1f1be:	2308      	movs	r3, #8
   1f1c0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1f1c4:	f898 3008 	ldrb.w	r3, [r8, #8]
   1f1c8:	b953      	cbnz	r3, 1f1e0 <uarte_0_init+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f1ca:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1f1ce:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1f1d2:	6973      	ldr	r3, [r6, #20]
   1f1d4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1f1d8:	2301      	movs	r3, #1
   1f1da:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f1de:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1f1e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1f1e4:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1f1e6:	bf5c      	itt	pl
   1f1e8:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1f1ec:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1f1f0:	06db      	lsls	r3, r3, #27
   1f1f2:	bf44      	itt	mi
   1f1f4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1f1f8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1f1fc:	6933      	ldr	r3, [r6, #16]
   1f1fe:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1f202:	2300      	movs	r3, #0
   1f204:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f208:	2301      	movs	r3, #1
   1f20a:	60a3      	str	r3, [r4, #8]
   1f20c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1f20e:	e7bf      	b.n	1f190 <uarte_0_init+0x78>
   1f210:	0bad0000 	.word	0x0bad0000
   1f214:	0002dd58 	.word	0x0002dd58
   1f218:	4001f000 	.word	0x4001f000

0001f21c <uarte_nrfx_poll_out>:
{
   1f21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1f21e:	6907      	ldr	r7, [r0, #16]
{
   1f220:	4604      	mov	r4, r0
   1f222:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1f224:	f00a fbaa 	bl	2997c <k_is_in_isr>
   1f228:	b910      	cbnz	r0, 1f230 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1f22a:	4b2d      	ldr	r3, [pc, #180]	; (1f2e0 <uarte_nrfx_poll_out+0xc4>)
	if (isr_mode) {
   1f22c:	781b      	ldrb	r3, [r3, #0]
   1f22e:	b98b      	cbnz	r3, 1f254 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
   1f230:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f234:	f3ef 8611 	mrs	r6, BASEPRI
   1f238:	f383 8812 	msr	BASEPRI_MAX, r3
   1f23c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1f240:	6860      	ldr	r0, [r4, #4]
   1f242:	4631      	mov	r1, r6
   1f244:	f00a f8b1 	bl	293aa <is_tx_ready.isra.0>
   1f248:	bb30      	cbnz	r0, 1f298 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1f24a:	f386 8811 	msr	BASEPRI, r6
   1f24e:	f3bf 8f6f 	isb	sy
}
   1f252:	e7ed      	b.n	1f230 <uarte_nrfx_poll_out+0x14>
{
   1f254:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1f256:	6860      	ldr	r0, [r4, #4]
   1f258:	f00a f8a7 	bl	293aa <is_tx_ready.isra.0>
   1f25c:	b970      	cbnz	r0, 1f27c <uarte_nrfx_poll_out+0x60>
   1f25e:	2001      	movs	r0, #1
   1f260:	f00a fa82 	bl	29768 <nrfx_busy_wait>
   1f264:	3e01      	subs	r6, #1
   1f266:	d1f6      	bne.n	1f256 <uarte_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   1f268:	2100      	movs	r1, #0
   1f26a:	2021      	movs	r0, #33	; 0x21
   1f26c:	f004 feec 	bl	24048 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1f270:	e7f0      	b.n	1f254 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
   1f272:	f386 8811 	msr	BASEPRI, r6
   1f276:	f3bf 8f6f 	isb	sy
}
   1f27a:	e7f5      	b.n	1f268 <uarte_nrfx_poll_out+0x4c>
	__asm__ volatile(
   1f27c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f280:	f3ef 8611 	mrs	r6, BASEPRI
   1f284:	f383 8812 	msr	BASEPRI_MAX, r3
   1f288:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1f28c:	6860      	ldr	r0, [r4, #4]
   1f28e:	4631      	mov	r1, r6
   1f290:	f00a f88b 	bl	293aa <is_tx_ready.isra.0>
   1f294:	2800      	cmp	r0, #0
   1f296:	d0ec      	beq.n	1f272 <uarte_nrfx_poll_out+0x56>
	*data->char_out = c;
   1f298:	693b      	ldr	r3, [r7, #16]
   1f29a:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1f29c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1f29e:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1f2a0:	6813      	ldr	r3, [r2, #0]
   1f2a2:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1f2a6:	2001      	movs	r0, #1
   1f2a8:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f2ac:	2000      	movs	r0, #0
   1f2ae:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1f2b2:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
   1f2b6:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1f2ba:	6852      	ldr	r2, [r2, #4]
   1f2bc:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1f2c0:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1f2c2:	bf41      	itttt	mi
   1f2c4:	2208      	movmi	r2, #8
   1f2c6:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1f2ca:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1f2ce:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f2d2:	2201      	movs	r2, #1
   1f2d4:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1f2d6:	f381 8811 	msr	BASEPRI, r1
   1f2da:	f3bf 8f6f 	isb	sy
}
   1f2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f2e0:	200033c7 	.word	0x200033c7

0001f2e4 <random_byte_get>:
	__asm__ volatile(
   1f2e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f2e8:	f3ef 8211 	mrs	r2, BASEPRI
   1f2ec:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2f0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f2f4:	4b09      	ldr	r3, [pc, #36]	; (1f31c <random_byte_get+0x38>)
   1f2f6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1f2fa:	b161      	cbz	r1, 1f316 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f2fc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1f2fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f302:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1f306:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1f30a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1f30c:	f382 8811 	msr	BASEPRI, r2
   1f310:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1f314:	4770      	bx	lr
	int retval = -EAGAIN;
   1f316:	f06f 000a 	mvn.w	r0, #10
   1f31a:	e7f7      	b.n	1f30c <random_byte_get+0x28>
   1f31c:	4000d000 	.word	0x4000d000

0001f320 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1f320:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f322:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1f324:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1f326:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1f328:	f04f 0040 	mov.w	r0, #64	; 0x40
   1f32c:	f3ef 8e11 	mrs	lr, BASEPRI
   1f330:	f380 8812 	msr	BASEPRI_MAX, r0
   1f334:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1f338:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1f33a:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1f33e:	1ba4      	subs	r4, r4, r6
   1f340:	403c      	ands	r4, r7
	if (available < len) {
   1f342:	42a2      	cmp	r2, r4
		len = available;
   1f344:	bf88      	it	hi
   1f346:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1f348:	18b0      	adds	r0, r6, r2
   1f34a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1f34c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1f34e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1f350:	f38e 8811 	msr	BASEPRI, lr
   1f354:	f3bf 8f6f 	isb	sy
   1f358:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1f35a:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1f35c:	4290      	cmp	r0, r2
   1f35e:	d119      	bne.n	1f394 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1f360:	4566      	cmp	r6, ip
   1f362:	d10d      	bne.n	1f380 <rng_pool_get+0x60>
	__asm__ volatile(
   1f364:	f04f 0540 	mov.w	r5, #64	; 0x40
   1f368:	f3ef 8011 	mrs	r0, BASEPRI
   1f36c:	f385 8812 	msr	BASEPRI_MAX, r5
   1f370:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1f374:	781d      	ldrb	r5, [r3, #0]
   1f376:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1f378:	f380 8811 	msr	BASEPRI, r0
   1f37c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1f380:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1f382:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1f384:	b290      	uxth	r0, r2
	available = available - len;
   1f386:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1f388:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f38a:	bf22      	ittt	cs
   1f38c:	4b06      	ldrcs	r3, [pc, #24]	; (1f3a8 <rng_pool_get+0x88>)
   1f38e:	2201      	movcs	r2, #1
   1f390:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1f392:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1f394:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1f398:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1f39a:	f89e e005 	ldrb.w	lr, [lr, #5]
   1f39e:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1f3a2:	403d      	ands	r5, r7
   1f3a4:	e7da      	b.n	1f35c <rng_pool_get+0x3c>
   1f3a6:	bf00      	nop
   1f3a8:	4000d000 	.word	0x4000d000

0001f3ac <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1f3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f3b0:	4614      	mov	r4, r2
   1f3b2:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1f3b4:	6902      	ldr	r2, [r0, #16]
   1f3b6:	4b2c      	ldr	r3, [pc, #176]	; (1f468 <entropy_nrf5_get_entropy_isr+0xbc>)
   1f3b8:	429a      	cmp	r2, r3
{
   1f3ba:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1f3bc:	d00a      	beq.n	1f3d4 <entropy_nrf5_get_entropy_isr+0x28>
   1f3be:	492b      	ldr	r1, [pc, #172]	; (1f46c <entropy_nrf5_get_entropy_isr+0xc0>)
   1f3c0:	482b      	ldr	r0, [pc, #172]	; (1f470 <entropy_nrf5_get_entropy_isr+0xc4>)
   1f3c2:	f240 1205 	movw	r2, #261	; 0x105
   1f3c6:	f006 fc16 	bl	25bf6 <assert_print>
   1f3ca:	4828      	ldr	r0, [pc, #160]	; (1f46c <entropy_nrf5_get_entropy_isr+0xc0>)
   1f3cc:	f240 1105 	movw	r1, #261	; 0x105
   1f3d0:	f006 fc0a 	bl	25be8 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1f3d4:	43eb      	mvns	r3, r5
   1f3d6:	f013 0501 	ands.w	r5, r3, #1
   1f3da:	d006      	beq.n	1f3ea <entropy_nrf5_get_entropy_isr+0x3e>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1f3dc:	4825      	ldr	r0, [pc, #148]	; (1f474 <entropy_nrf5_get_entropy_isr+0xc8>)
   1f3de:	4622      	mov	r2, r4
   1f3e0:	4631      	mov	r1, r6
   1f3e2:	f7ff ff9d 	bl	1f320 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1f3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1f3ea:	b3a4      	cbz	r4, 1f456 <entropy_nrf5_get_entropy_isr+0xaa>
	__asm__ volatile(
   1f3ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f3f0:	f3ef 8811 	mrs	r8, BASEPRI
   1f3f4:	f383 8812 	msr	BASEPRI_MAX, r3
   1f3f8:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1f3fc:	200d      	movs	r0, #13
   1f3fe:	f7f4 ffcf 	bl	143a0 <arch_irq_is_enabled>
   1f402:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1f404:	200d      	movs	r0, #13
   1f406:	f7f4 ffb7 	bl	14378 <arch_irq_disable>
	__asm__ volatile(
   1f40a:	f388 8811 	msr	BASEPRI, r8
   1f40e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f412:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1f478 <entropy_nrf5_get_entropy_isr+0xcc>
   1f416:	f8df 9064 	ldr.w	r9, [pc, #100]	; 1f47c <entropy_nrf5_get_entropy_isr+0xd0>
   1f41a:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1f41e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1f422:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f426:	2301      	movs	r3, #1
   1f428:	f8c8 3000 	str.w	r3, [r8]
   1f42c:	4625      	mov	r5, r4
   1f42e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f432:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1f436:	b183      	cbz	r3, 1f45a <entropy_nrf5_get_entropy_isr+0xae>
			byte = random_byte_get();
   1f438:	f7ff ff54 	bl	1f2e4 <random_byte_get>
			if (byte < 0) {
   1f43c:	1e03      	subs	r3, r0, #0
   1f43e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1f442:	dbf6      	blt.n	1f432 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   1f444:	3d01      	subs	r5, #1
   1f446:	b2ad      	uxth	r5, r5
   1f448:	5573      	strb	r3, [r6, r5]
		} while (len);
   1f44a:	2d00      	cmp	r5, #0
   1f44c:	d1f1      	bne.n	1f432 <entropy_nrf5_get_entropy_isr+0x86>
		if (irq_enabled) {
   1f44e:	b117      	cbz	r7, 1f456 <entropy_nrf5_get_entropy_isr+0xaa>
			irq_enable(IRQN);
   1f450:	200d      	movs	r0, #13
   1f452:	f7f4 ff81 	bl	14358 <arch_irq_enable>
	return cnt;
   1f456:	4620      	mov	r0, r4
   1f458:	e7c5      	b.n	1f3e6 <entropy_nrf5_get_entropy_isr+0x3a>
   1f45a:	f3bf 8f4f 	dsb	sy
				__WFE();
   1f45e:	bf20      	wfe
				__SEV();
   1f460:	bf40      	sev
				__WFE();
   1f462:	bf20      	wfe
   1f464:	e7e5      	b.n	1f432 <entropy_nrf5_get_entropy_isr+0x86>
   1f466:	bf00      	nop
   1f468:	200025cc 	.word	0x200025cc
   1f46c:	0002dd9a 	.word	0x0002dd9a
   1f470:	0002ab8c 	.word	0x0002ab8c
   1f474:	200025fc 	.word	0x200025fc
   1f478:	4000d000 	.word	0x4000d000
   1f47c:	e000e100 	.word	0xe000e100

0001f480 <entropy_nrf5_get_entropy>:
{
   1f480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1f484:	4b1a      	ldr	r3, [pc, #104]	; (1f4f0 <entropy_nrf5_get_entropy+0x70>)
{
   1f486:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1f488:	6902      	ldr	r2, [r0, #16]
   1f48a:	429a      	cmp	r2, r3
{
   1f48c:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1f48e:	d008      	beq.n	1f4a2 <entropy_nrf5_get_entropy+0x22>
   1f490:	4918      	ldr	r1, [pc, #96]	; (1f4f4 <entropy_nrf5_get_entropy+0x74>)
   1f492:	4819      	ldr	r0, [pc, #100]	; (1f4f8 <entropy_nrf5_get_entropy+0x78>)
   1f494:	22e7      	movs	r2, #231	; 0xe7
   1f496:	f006 fbae 	bl	25bf6 <assert_print>
   1f49a:	4816      	ldr	r0, [pc, #88]	; (1f4f4 <entropy_nrf5_get_entropy+0x74>)
   1f49c:	21e7      	movs	r1, #231	; 0xe7
   1f49e:	f006 fba3 	bl	25be8 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1f4a2:	4e13      	ldr	r6, [pc, #76]	; (1f4f0 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1f4a4:	f106 0745 	add.w	r7, r6, #69	; 0x45
   1f4a8:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   1f4ac:	b914      	cbnz	r4, 1f4b4 <entropy_nrf5_get_entropy+0x34>
}
   1f4ae:	4620      	mov	r0, r4
   1f4b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f4b4:	f04f 33ff 	mov.w	r3, #4294967295
   1f4b8:	f04f 32ff 	mov.w	r2, #4294967295
   1f4bc:	4630      	mov	r0, r6
   1f4be:	f003 f9c5 	bl	2284c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1f4c2:	4622      	mov	r2, r4
   1f4c4:	4649      	mov	r1, r9
   1f4c6:	4638      	mov	r0, r7
   1f4c8:	f7ff ff2a 	bl	1f320 <rng_pool_get>
   1f4cc:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1f4ce:	4630      	mov	r0, r6
   1f4d0:	f003 f982 	bl	227d8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1f4d4:	b93d      	cbnz	r5, 1f4e6 <entropy_nrf5_get_entropy+0x66>
	return z_impl_k_sem_take(sem, timeout);
   1f4d6:	f04f 32ff 	mov.w	r2, #4294967295
   1f4da:	f04f 33ff 	mov.w	r3, #4294967295
   1f4de:	4640      	mov	r0, r8
   1f4e0:	f003 f9b4 	bl	2284c <z_impl_k_sem_take>
			continue;
   1f4e4:	e7e2      	b.n	1f4ac <entropy_nrf5_get_entropy+0x2c>
		len -= bytes;
   1f4e6:	1b64      	subs	r4, r4, r5
   1f4e8:	b2a4      	uxth	r4, r4
		buf += bytes;
   1f4ea:	44a9      	add	r9, r5
   1f4ec:	e7de      	b.n	1f4ac <entropy_nrf5_get_entropy+0x2c>
   1f4ee:	bf00      	nop
   1f4f0:	200025cc 	.word	0x200025cc
   1f4f4:	0002dd9a 	.word	0x0002dd9a
   1f4f8:	0002ab8c 	.word	0x0002ab8c

0001f4fc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1f4fc:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1f4fe:	4c20      	ldr	r4, [pc, #128]	; (1f580 <entropy_nrf5_init+0x84>)
   1f500:	6903      	ldr	r3, [r0, #16]
   1f502:	42a3      	cmp	r3, r4
   1f504:	d00a      	beq.n	1f51c <entropy_nrf5_init+0x20>
   1f506:	491f      	ldr	r1, [pc, #124]	; (1f584 <entropy_nrf5_init+0x88>)
   1f508:	481f      	ldr	r0, [pc, #124]	; (1f588 <entropy_nrf5_init+0x8c>)
   1f50a:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1f50e:	f006 fb72 	bl	25bf6 <assert_print>
   1f512:	481c      	ldr	r0, [pc, #112]	; (1f584 <entropy_nrf5_init+0x88>)
   1f514:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1f518:	f006 fb66 	bl	25be8 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f51c:	2201      	movs	r2, #1
   1f51e:	4611      	mov	r1, r2
   1f520:	4817      	ldr	r0, [pc, #92]	; (1f580 <entropy_nrf5_init+0x84>)
   1f522:	f00a fa7c 	bl	29a1e <z_impl_k_sem_init>
   1f526:	2201      	movs	r2, #1
   1f528:	2100      	movs	r1, #0
   1f52a:	4818      	ldr	r0, [pc, #96]	; (1f58c <entropy_nrf5_init+0x90>)
   1f52c:	f00a fa77 	bl	29a1e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1f530:	f240 4307 	movw	r3, #1031	; 0x407
   1f534:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1f538:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1f53c:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1f53e:	230c      	movs	r3, #12
   1f540:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1f544:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1f546:	4b12      	ldr	r3, [pc, #72]	; (1f590 <entropy_nrf5_init+0x94>)
   1f548:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1f54c:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1f550:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1f554:	f022 0201 	bic.w	r2, r2, #1
   1f558:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1f55c:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f55e:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1f562:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1f566:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1f56a:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f56c:	6019      	str	r1, [r3, #0]
   1f56e:	200d      	movs	r0, #13
   1f570:	f7f4 ff24 	bl	143bc <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1f574:	200d      	movs	r0, #13
   1f576:	f7f4 feef 	bl	14358 <arch_irq_enable>

	return 0;
}
   1f57a:	4628      	mov	r0, r5
   1f57c:	bd38      	pop	{r3, r4, r5, pc}
   1f57e:	bf00      	nop
   1f580:	200025cc 	.word	0x200025cc
   1f584:	0002dd9a 	.word	0x0002dd9a
   1f588:	0002ab8c 	.word	0x0002ab8c
   1f58c:	200025e4 	.word	0x200025e4
   1f590:	4000d000 	.word	0x4000d000

0001f594 <isr>:
{
   1f594:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1f596:	f7ff fea5 	bl	1f2e4 <random_byte_get>
	if (byte < 0) {
   1f59a:	2800      	cmp	r0, #0
   1f59c:	db20      	blt.n	1f5e0 <isr+0x4c>
	uint8_t last  = rngp->last;
   1f59e:	4b17      	ldr	r3, [pc, #92]	; (1f5fc <isr+0x68>)
   1f5a0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1f5a4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1f5a8:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1f5ac:	1a51      	subs	r1, r2, r1
   1f5ae:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1f5b2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1f5b4:	d10d      	bne.n	1f5d2 <isr+0x3e>
	uint8_t last  = rngp->last;
   1f5b6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1f5ba:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1f5be:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1f5c2:	1a51      	subs	r1, r2, r1
   1f5c4:	ea34 0101 	bics.w	r1, r4, r1
   1f5c8:	d10b      	bne.n	1f5e2 <isr+0x4e>
   1f5ca:	4b0d      	ldr	r3, [pc, #52]	; (1f600 <isr+0x6c>)
   1f5cc:	2201      	movs	r2, #1
   1f5ce:	605a      	str	r2, [r3, #4]
}
   1f5d0:	e00e      	b.n	1f5f0 <isr+0x5c>
	rngp->buffer[last] = byte;
   1f5d2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1f5d4:	3201      	adds	r2, #1
   1f5d6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1f5d8:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1f5dc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1f5e0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1f5e2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1f5e4:	3201      	adds	r2, #1
   1f5e6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1f5e8:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1f5ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1f5f0:	4804      	ldr	r0, [pc, #16]	; (1f604 <isr+0x70>)
}
   1f5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f5f6:	f003 b8ef 	b.w	227d8 <z_impl_k_sem_give>
   1f5fa:	bf00      	nop
   1f5fc:	200025cc 	.word	0x200025cc
   1f600:	4000d000 	.word	0x4000d000
   1f604:	200025e4 	.word	0x200025e4

0001f608 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1f608:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1f60a:	2301      	movs	r3, #1
   1f60c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f60e:	4a11      	ldr	r2, [pc, #68]	; (1f654 <compare_int_lock+0x4c>)
   1f610:	f3bf 8f5b 	dmb	ish
   1f614:	43dc      	mvns	r4, r3
   1f616:	e852 1f00 	ldrex	r1, [r2]
   1f61a:	ea01 0c04 	and.w	ip, r1, r4
   1f61e:	e842 ce00 	strex	lr, ip, [r2]
   1f622:	f1be 0f00 	cmp.w	lr, #0
   1f626:	d1f6      	bne.n	1f616 <compare_int_lock+0xe>
   1f628:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f62c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f630:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1f634:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f638:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1f63c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1f640:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1f644:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1f648:	420b      	tst	r3, r1
}
   1f64a:	bf14      	ite	ne
   1f64c:	2001      	movne	r0, #1
   1f64e:	2000      	moveq	r0, #0
   1f650:	bd10      	pop	{r4, pc}
   1f652:	bf00      	nop
   1f654:	20002624 	.word	0x20002624

0001f658 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1f658:	4919      	ldr	r1, [pc, #100]	; (1f6c0 <sys_clock_timeout_handler+0x68>)
{
   1f65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f65c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1f65e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1f662:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1f664:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1f668:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1f66c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1f66e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1f672:	d222      	bcs.n	1f6ba <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1f674:	4b13      	ldr	r3, [pc, #76]	; (1f6c4 <sys_clock_timeout_handler+0x6c>)
   1f676:	681b      	ldr	r3, [r3, #0]
   1f678:	0a1a      	lsrs	r2, r3, #8
   1f67a:	061b      	lsls	r3, r3, #24
   1f67c:	195e      	adds	r6, r3, r5
   1f67e:	4b12      	ldr	r3, [pc, #72]	; (1f6c8 <sys_clock_timeout_handler+0x70>)
   1f680:	f142 0700 	adc.w	r7, r2, #0
   1f684:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1f688:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1f68a:	f005 f847 	bl	2471c <sys_clock_announce>
    return p_reg->CC[ch];
   1f68e:	00a3      	lsls	r3, r4, #2
   1f690:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f694:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1f698:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1f69c:	42aa      	cmp	r2, r5
   1f69e:	d10b      	bne.n	1f6b8 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1f6a0:	b91e      	cbnz	r6, 1f6aa <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1f6a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1f6a6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1f6aa:	4b08      	ldr	r3, [pc, #32]	; (1f6cc <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f6ac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1f6b0:	fa00 f404 	lsl.w	r4, r0, r4
   1f6b4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1f6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1f6ba:	2600      	movs	r6, #0
   1f6bc:	e7e5      	b.n	1f68a <sys_clock_timeout_handler+0x32>
   1f6be:	bf00      	nop
   1f6c0:	20001dd8 	.word	0x20001dd8
   1f6c4:	20002628 	.word	0x20002628
   1f6c8:	20001dc0 	.word	0x20001dc0
   1f6cc:	40011000 	.word	0x40011000

0001f6d0 <compare_int_unlock>:
	if (key) {
   1f6d0:	b319      	cbz	r1, 1f71a <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f6d2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1f6d6:	2301      	movs	r3, #1
   1f6d8:	4a10      	ldr	r2, [pc, #64]	; (1f71c <compare_int_unlock+0x4c>)
   1f6da:	4083      	lsls	r3, r0
   1f6dc:	e852 1f00 	ldrex	r1, [r2]
   1f6e0:	4319      	orrs	r1, r3
   1f6e2:	e842 1c00 	strex	ip, r1, [r2]
   1f6e6:	f1bc 0f00 	cmp.w	ip, #0
   1f6ea:	d1f7      	bne.n	1f6dc <compare_int_unlock+0xc>
   1f6ec:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1f6f0:	4a0b      	ldr	r2, [pc, #44]	; (1f720 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f6f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f6f6:	4083      	lsls	r3, r0
   1f6f8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f6fc:	4b09      	ldr	r3, [pc, #36]	; (1f724 <compare_int_unlock+0x54>)
   1f6fe:	f3bf 8f5b 	dmb	ish
   1f702:	681b      	ldr	r3, [r3, #0]
   1f704:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1f708:	fa23 f000 	lsr.w	r0, r3, r0
   1f70c:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f70e:	bf42      	ittt	mi
   1f710:	4b05      	ldrmi	r3, [pc, #20]	; (1f728 <compare_int_unlock+0x58>)
   1f712:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1f716:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1f71a:	4770      	bx	lr
   1f71c:	20002624 	.word	0x20002624
   1f720:	40011000 	.word	0x40011000
   1f724:	20002620 	.word	0x20002620
   1f728:	e000e100 	.word	0xe000e100

0001f72c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1f72c:	4b0d      	ldr	r3, [pc, #52]	; (1f764 <z_nrf_rtc_timer_read+0x38>)
   1f72e:	6818      	ldr	r0, [r3, #0]
   1f730:	0a01      	lsrs	r1, r0, #8
   1f732:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1f734:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1f738:	4b0b      	ldr	r3, [pc, #44]	; (1f768 <z_nrf_rtc_timer_read+0x3c>)
   1f73a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1f73e:	1818      	adds	r0, r3, r0
   1f740:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1f744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1f748:	d20a      	bcs.n	1f760 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1f74a:	4b08      	ldr	r3, [pc, #32]	; (1f76c <z_nrf_rtc_timer_read+0x40>)
   1f74c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f750:	4290      	cmp	r0, r2
   1f752:	eb71 0303 	sbcs.w	r3, r1, r3
   1f756:	d203      	bcs.n	1f760 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1f758:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1f75c:	f141 0100 	adc.w	r1, r1, #0
}
   1f760:	4770      	bx	lr
   1f762:	bf00      	nop
   1f764:	20002628 	.word	0x20002628
   1f768:	40011000 	.word	0x40011000
   1f76c:	20001dc0 	.word	0x20001dc0

0001f770 <compare_set>:
{
   1f770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f774:	b085      	sub	sp, #20
   1f776:	4616      	mov	r6, r2
   1f778:	4698      	mov	r8, r3
   1f77a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1f77c:	f7ff ff44 	bl	1f608 <compare_int_lock>
   1f780:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1f782:	f7ff ffd3 	bl	1f72c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1f786:	42b0      	cmp	r0, r6
   1f788:	eb71 0308 	sbcs.w	r3, r1, r8
   1f78c:	d278      	bcs.n	1f880 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   1f78e:	4b46      	ldr	r3, [pc, #280]	; (1f8a8 <compare_set+0x138>)
   1f790:	1a30      	subs	r0, r6, r0
   1f792:	eb68 0101 	sbc.w	r1, r8, r1
   1f796:	4298      	cmp	r0, r3
   1f798:	f171 0300 	sbcs.w	r3, r1, #0
   1f79c:	f080 8081 	bcs.w	1f8a2 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   1f7a0:	4b42      	ldr	r3, [pc, #264]	; (1f8ac <compare_set+0x13c>)
   1f7a2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1f7a6:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1f7aa:	45d8      	cmp	r8, fp
   1f7ac:	bf08      	it	eq
   1f7ae:	4556      	cmpeq	r6, sl
   1f7b0:	d051      	beq.n	1f856 <compare_set+0xe6>
   1f7b2:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1f7b6:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1f7ba:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1f7be:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1f7c2:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f7c4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1f7c8:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f7cc:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1f7ce:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1f7d2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f7d6:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1f7d8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1f7dc:	4b34      	ldr	r3, [pc, #208]	; (1f8b0 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f7de:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1f7e2:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   1f7e4:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1f7e8:	1a40      	subs	r0, r0, r1
   1f7ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1f7ee:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1f7f2:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1f7f4:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1f7f8:	d107      	bne.n	1f80a <compare_set+0x9a>
   1f7fa:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1f7fe:	2013      	movs	r0, #19
   1f800:	f00a f9ba 	bl	29b78 <z_impl_k_busy_wait>
   1f804:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1f808:	4b29      	ldr	r3, [pc, #164]	; (1f8b0 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1f80a:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1f80e:	eba4 000c 	sub.w	r0, r4, ip
   1f812:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1f816:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f81a:	bf88      	it	hi
   1f81c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f81e:	2000      	movs	r0, #0
   1f820:	6038      	str	r0, [r7, #0]
   1f822:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1f824:	9801      	ldr	r0, [sp, #4]
   1f826:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1f82a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1f82e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1f832:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1f836:	4281      	cmp	r1, r0
   1f838:	d006      	beq.n	1f848 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1f83a:	1a20      	subs	r0, r4, r0
   1f83c:	3802      	subs	r0, #2
   1f83e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1f842:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f846:	d819      	bhi.n	1f87c <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   1f848:	1aa4      	subs	r4, r4, r2
   1f84a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1f84e:	eb14 0a06 	adds.w	sl, r4, r6
   1f852:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1f856:	4915      	ldr	r1, [pc, #84]	; (1f8ac <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   1f858:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1f85a:	012b      	lsls	r3, r5, #4
   1f85c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   1f860:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   1f864:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1f866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f868:	6053      	str	r3, [r2, #4]
	return ret;
   1f86a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   1f86c:	4628      	mov	r0, r5
   1f86e:	9900      	ldr	r1, [sp, #0]
   1f870:	f7ff ff2e 	bl	1f6d0 <compare_int_unlock>
}
   1f874:	4620      	mov	r0, r4
   1f876:	b005      	add	sp, #20
   1f878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f87c:	4620      	mov	r0, r4
   1f87e:	e7b1      	b.n	1f7e4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1f880:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f882:	4a0c      	ldr	r2, [pc, #48]	; (1f8b4 <compare_set+0x144>)
   1f884:	f3bf 8f5b 	dmb	ish
   1f888:	40ab      	lsls	r3, r5
   1f88a:	e852 1f00 	ldrex	r1, [r2]
   1f88e:	4319      	orrs	r1, r3
   1f890:	e842 1000 	strex	r0, r1, [r2]
   1f894:	2800      	cmp	r0, #0
   1f896:	d1f8      	bne.n	1f88a <compare_set+0x11a>
   1f898:	f3bf 8f5b 	dmb	ish
   1f89c:	46b2      	mov	sl, r6
   1f89e:	46c3      	mov	fp, r8
   1f8a0:	e7d9      	b.n	1f856 <compare_set+0xe6>
			return -EINVAL;
   1f8a2:	f06f 0415 	mvn.w	r4, #21
   1f8a6:	e7e1      	b.n	1f86c <compare_set+0xfc>
   1f8a8:	01000001 	.word	0x01000001
   1f8ac:	20001dc8 	.word	0x20001dc8
   1f8b0:	40011000 	.word	0x40011000
   1f8b4:	20002620 	.word	0x20002620

0001f8b8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1f8b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f8ba:	4b19      	ldr	r3, [pc, #100]	; (1f920 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1f8bc:	4d19      	ldr	r5, [pc, #100]	; (1f924 <sys_clock_driver_init+0x6c>)
   1f8be:	2400      	movs	r4, #0
   1f8c0:	f04f 30ff 	mov.w	r0, #4294967295
   1f8c4:	f04f 31ff 	mov.w	r1, #4294967295
   1f8c8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1f8cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1f8d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f8d4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f8d8:	4b13      	ldr	r3, [pc, #76]	; (1f928 <sys_clock_driver_init+0x70>)
   1f8da:	2602      	movs	r6, #2
   1f8dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1f8e0:	2101      	movs	r1, #1
   1f8e2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1f8e6:	2011      	movs	r0, #17
   1f8e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1f8ec:	4622      	mov	r2, r4
   1f8ee:	f7f4 fd65 	bl	143bc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1f8f2:	2011      	movs	r0, #17
   1f8f4:	f7f4 fd30 	bl	14358 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1f8f8:	4a0c      	ldr	r2, [pc, #48]	; (1f92c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1f8fa:	2301      	movs	r3, #1
   1f8fc:	60ab      	str	r3, [r5, #8]
   1f8fe:	602b      	str	r3, [r5, #0]
   1f900:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1f902:	4b0b      	ldr	r3, [pc, #44]	; (1f930 <sys_clock_driver_init+0x78>)
   1f904:	4a0b      	ldr	r2, [pc, #44]	; (1f934 <sys_clock_driver_init+0x7c>)
   1f906:	9300      	str	r3, [sp, #0]
   1f908:	9401      	str	r4, [sp, #4]
   1f90a:	2300      	movs	r3, #0
   1f90c:	4620      	mov	r0, r4
   1f90e:	f7ff ff2f 	bl	1f770 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1f912:	4630      	mov	r0, r6
   1f914:	f7fe ff88 	bl	1e828 <z_nrf_clock_control_lf_on>

	return 0;
}
   1f918:	4620      	mov	r0, r4
   1f91a:	b002      	add	sp, #8
   1f91c:	bd70      	pop	{r4, r5, r6, pc}
   1f91e:	bf00      	nop
   1f920:	20001dc8 	.word	0x20001dc8
   1f924:	40011000 	.word	0x40011000
   1f928:	e000e100 	.word	0xe000e100
   1f92c:	20002624 	.word	0x20002624
   1f930:	0001f659 	.word	0x0001f659
   1f934:	007fffff 	.word	0x007fffff

0001f938 <rtc_nrf_isr>:
{
   1f938:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1f93c:	4c2c      	ldr	r4, [pc, #176]	; (1f9f0 <rtc_nrf_isr+0xb8>)
   1f93e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1f942:	0799      	lsls	r1, r3, #30
   1f944:	d50b      	bpl.n	1f95e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f946:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1f94a:	b143      	cbz	r3, 1f95e <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1f94c:	4a29      	ldr	r2, [pc, #164]	; (1f9f4 <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f94e:	2300      	movs	r3, #0
   1f950:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1f954:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1f958:	6813      	ldr	r3, [r2, #0]
   1f95a:	3301      	adds	r3, #1
   1f95c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1f95e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1f962:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1f964:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1f968:	03d2      	lsls	r2, r2, #15
   1f96a:	d52d      	bpl.n	1f9c8 <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f96c:	f3bf 8f5b 	dmb	ish
   1f970:	4a21      	ldr	r2, [pc, #132]	; (1f9f8 <rtc_nrf_isr+0xc0>)
   1f972:	e852 1f00 	ldrex	r1, [r2]
   1f976:	f021 0001 	bic.w	r0, r1, #1
   1f97a:	e842 0500 	strex	r5, r0, [r2]
   1f97e:	2d00      	cmp	r5, #0
   1f980:	d1f7      	bne.n	1f972 <rtc_nrf_isr+0x3a>
   1f982:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1f986:	b911      	cbnz	r1, 1f98e <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f988:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   1f98c:	b1e2      	cbz	r2, 1f9c8 <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f98e:	2500      	movs	r5, #0
   1f990:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1f994:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1f998:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1f99c:	f7ff fec6 	bl	1f72c <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1f9a0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1f9a4:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1f9a6:	4b15      	ldr	r3, [pc, #84]	; (1f9fc <rtc_nrf_isr+0xc4>)
   1f9a8:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1f9ac:	42b0      	cmp	r0, r6
   1f9ae:	41b9      	sbcs	r1, r7
   1f9b0:	d20f      	bcs.n	1f9d2 <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1f9b2:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1f9b4:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1f9b8:	b141      	cbz	r1, 1f9cc <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   1f9ba:	f8cd 8000 	str.w	r8, [sp]
   1f9be:	4632      	mov	r2, r6
   1f9c0:	463b      	mov	r3, r7
   1f9c2:	2000      	movs	r0, #0
   1f9c4:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f9c6:	e001      	b.n	1f9cc <rtc_nrf_isr+0x94>
   1f9c8:	f383 8810 	msr	PRIMASK, r3
}
   1f9cc:	b002      	add	sp, #8
   1f9ce:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f9d2:	f04f 3aff 	mov.w	sl, #4294967295
   1f9d6:	f04f 3bff 	mov.w	fp, #4294967295
			user_context = cc_data[chan].user_context;
   1f9da:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f9de:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   1f9e2:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1f9e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f9e8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1f9ec:	e7e2      	b.n	1f9b4 <rtc_nrf_isr+0x7c>
   1f9ee:	bf00      	nop
   1f9f0:	40011000 	.word	0x40011000
   1f9f4:	20002628 	.word	0x20002628
   1f9f8:	20002620 	.word	0x20002620
   1f9fc:	20001dc8 	.word	0x20001dc8

0001fa00 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1fa00:	1c43      	adds	r3, r0, #1
{
   1fa02:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1fa04:	d021      	beq.n	1fa4a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1fa06:	2801      	cmp	r0, #1
   1fa08:	dd21      	ble.n	1fa4e <sys_clock_set_timeout+0x4e>
   1fa0a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1fa0e:	da20      	bge.n	1fa52 <sys_clock_set_timeout+0x52>
   1fa10:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1fa12:	f7ff fe8b 	bl	1f72c <z_nrf_rtc_timer_read>
   1fa16:	4b10      	ldr	r3, [pc, #64]	; (1fa58 <sys_clock_set_timeout+0x58>)
   1fa18:	e9d3 1300 	ldrd	r1, r3, [r3]
   1fa1c:	1a40      	subs	r0, r0, r1
		ticks = 0;
   1fa1e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1fa22:	bf28      	it	cs
   1fa24:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1fa26:	3001      	adds	r0, #1
   1fa28:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   1fa2a:	480c      	ldr	r0, [pc, #48]	; (1fa5c <sys_clock_set_timeout+0x5c>)
   1fa2c:	4282      	cmp	r2, r0
   1fa2e:	bf28      	it	cs
   1fa30:	4602      	movcs	r2, r0
   1fa32:	1852      	adds	r2, r2, r1
   1fa34:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1fa38:	4909      	ldr	r1, [pc, #36]	; (1fa60 <sys_clock_set_timeout+0x60>)
   1fa3a:	9001      	str	r0, [sp, #4]
   1fa3c:	9100      	str	r1, [sp, #0]
   1fa3e:	f143 0300 	adc.w	r3, r3, #0
   1fa42:	f7ff fe95 	bl	1f770 <compare_set>
}
   1fa46:	b002      	add	sp, #8
   1fa48:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1fa4a:	4804      	ldr	r0, [pc, #16]	; (1fa5c <sys_clock_set_timeout+0x5c>)
   1fa4c:	e7e0      	b.n	1fa10 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1fa4e:	2400      	movs	r4, #0
   1fa50:	e7df      	b.n	1fa12 <sys_clock_set_timeout+0x12>
   1fa52:	4c02      	ldr	r4, [pc, #8]	; (1fa5c <sys_clock_set_timeout+0x5c>)
   1fa54:	e7dd      	b.n	1fa12 <sys_clock_set_timeout+0x12>
   1fa56:	bf00      	nop
   1fa58:	20001dd8 	.word	0x20001dd8
   1fa5c:	007fffff 	.word	0x007fffff
   1fa60:	0001f659 	.word	0x0001f659

0001fa64 <sys_clock_elapsed>:
{
   1fa64:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1fa66:	f7ff fe61 	bl	1f72c <z_nrf_rtc_timer_read>
   1fa6a:	4b02      	ldr	r3, [pc, #8]	; (1fa74 <sys_clock_elapsed+0x10>)
   1fa6c:	681b      	ldr	r3, [r3, #0]
}
   1fa6e:	1ac0      	subs	r0, r0, r3
   1fa70:	bd08      	pop	{r3, pc}
   1fa72:	bf00      	nop
   1fa74:	20001dd8 	.word	0x20001dd8

0001fa78 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fa78:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1fa7a:	095a      	lsrs	r2, r3, #5
   1fa7c:	bf0c      	ite	eq
   1fa7e:	f04f 32ff 	moveq.w	r2, #4294967295
   1fa82:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   1fa84:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1fa88:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fa8c:	07db      	lsls	r3, r3, #31
{
   1fa8e:	b510      	push	{r4, lr}
   1fa90:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fa92:	d40a      	bmi.n	1faaa <nrf_gpio_pin_port_decode+0x32>
   1fa94:	490f      	ldr	r1, [pc, #60]	; (1fad4 <nrf_gpio_pin_port_decode+0x5c>)
   1fa96:	4810      	ldr	r0, [pc, #64]	; (1fad8 <nrf_gpio_pin_port_decode+0x60>)
   1fa98:	f240 2247 	movw	r2, #583	; 0x247
   1fa9c:	f006 f8ab 	bl	25bf6 <assert_print>
   1faa0:	480c      	ldr	r0, [pc, #48]	; (1fad4 <nrf_gpio_pin_port_decode+0x5c>)
   1faa2:	f240 2147 	movw	r1, #583	; 0x247
   1faa6:	f006 f89f 	bl	25be8 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   1faaa:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1faac:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1fab0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1fab2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1fab4:	d00a      	beq.n	1facc <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   1fab6:	4907      	ldr	r1, [pc, #28]	; (1fad4 <nrf_gpio_pin_port_decode+0x5c>)
   1fab8:	4807      	ldr	r0, [pc, #28]	; (1fad8 <nrf_gpio_pin_port_decode+0x60>)
   1faba:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1fabe:	f006 f89a 	bl	25bf6 <assert_print>
   1fac2:	4804      	ldr	r0, [pc, #16]	; (1fad4 <nrf_gpio_pin_port_decode+0x5c>)
   1fac4:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1fac8:	f006 f88e 	bl	25be8 <assert_post_action>
}
   1facc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1fad0:	bd10      	pop	{r4, pc}
   1fad2:	bf00      	nop
   1fad4:	0002dc5e 	.word	0x0002dc5e
   1fad8:	0002ab8c 	.word	0x0002ab8c

0001fadc <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1fadc:	4602      	mov	r2, r0
   1fade:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1fae0:	4801      	ldr	r0, [pc, #4]	; (1fae8 <multithreading_lock_acquire+0xc>)
   1fae2:	f002 bbf9 	b.w	222d8 <z_impl_k_mutex_lock>
   1fae6:	bf00      	nop
   1fae8:	20000834 	.word	0x20000834

0001faec <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1faec:	4801      	ldr	r0, [pc, #4]	; (1faf4 <multithreading_lock_release+0x8>)
   1faee:	f002 bcc5 	b.w	2247c <z_impl_k_mutex_unlock>
   1faf2:	bf00      	nop
   1faf4:	20000834 	.word	0x20000834

0001faf8 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1faf8:	4803      	ldr	r0, [pc, #12]	; (1fb08 <k_sys_fatal_error_handler+0x10>)
{
   1fafa:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   1fafc:	2145      	movs	r1, #69	; 0x45
   1fafe:	f006 f888 	bl	25c12 <z_log_minimal_printk>
		sys_arch_reboot(0);
   1fb02:	2000      	movs	r0, #0
   1fb04:	f7f5 f974 	bl	14df0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1fb08:	0002ddff 	.word	0x0002ddff

0001fb0c <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1fb0c:	b508      	push	{r3, lr}
   1fb0e:	4602      	mov	r2, r0
   1fb10:	460b      	mov	r3, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1fb12:	4805      	ldr	r0, [pc, #20]	; (1fb28 <sdc_assertion_handler+0x1c>)
   1fb14:	2145      	movs	r1, #69	; 0x45
   1fb16:	f006 f87c 	bl	25c12 <z_log_minimal_printk>
	k_oops();
   1fb1a:	4040      	eors	r0, r0
   1fb1c:	f380 8811 	msr	BASEPRI, r0
   1fb20:	f04f 0003 	mov.w	r0, #3
   1fb24:	df02      	svc	2
}
   1fb26:	bd08      	pop	{r3, pc}
   1fb28:	0002de21 	.word	0x0002de21

0001fb2c <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1fb2c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1fb2e:	4804      	ldr	r0, [pc, #16]	; (1fb40 <hci_driver_init+0x14>)
   1fb30:	f7f6 fd14 	bl	1655c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1fb34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1fb38:	4802      	ldr	r0, [pc, #8]	; (1fb44 <hci_driver_init+0x18>)
   1fb3a:	f7e4 bcf3 	b.w	4524 <sdc_init>
   1fb3e:	bf00      	nop
   1fb40:	0002a914 	.word	0x0002a914
   1fb44:	0001fb0d 	.word	0x0001fb0d

0001fb48 <rand_prio_low_vector_get_blocking>:
{
   1fb48:	b570      	push	{r4, r5, r6, lr}
   1fb4a:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1fb4c:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1fb4e:	4b10      	ldr	r3, [pc, #64]	; (1fb90 <rand_prio_low_vector_get_blocking+0x48>)
   1fb50:	689e      	ldr	r6, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1fb52:	6833      	ldr	r3, [r6, #0]
   1fb54:	b943      	cbnz	r3, 1fb68 <rand_prio_low_vector_get_blocking+0x20>
   1fb56:	490f      	ldr	r1, [pc, #60]	; (1fb94 <rand_prio_low_vector_get_blocking+0x4c>)
   1fb58:	480f      	ldr	r0, [pc, #60]	; (1fb98 <rand_prio_low_vector_get_blocking+0x50>)
   1fb5a:	224b      	movs	r2, #75	; 0x4b
   1fb5c:	f006 f84b 	bl	25bf6 <assert_print>
   1fb60:	480c      	ldr	r0, [pc, #48]	; (1fb94 <rand_prio_low_vector_get_blocking+0x4c>)
   1fb62:	214b      	movs	r1, #75	; 0x4b
   1fb64:	f006 f840 	bl	25be8 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1fb68:	6833      	ldr	r3, [r6, #0]
   1fb6a:	4809      	ldr	r0, [pc, #36]	; (1fb90 <rand_prio_low_vector_get_blocking+0x48>)
   1fb6c:	462a      	mov	r2, r5
   1fb6e:	4621      	mov	r1, r4
   1fb70:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1fb72:	b160      	cbz	r0, 1fb8e <rand_prio_low_vector_get_blocking+0x46>
   1fb74:	4909      	ldr	r1, [pc, #36]	; (1fb9c <rand_prio_low_vector_get_blocking+0x54>)
   1fb76:	4808      	ldr	r0, [pc, #32]	; (1fb98 <rand_prio_low_vector_get_blocking+0x50>)
   1fb78:	f240 12d9 	movw	r2, #473	; 0x1d9
   1fb7c:	f006 f83b 	bl	25bf6 <assert_print>
}
   1fb80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1fb84:	4805      	ldr	r0, [pc, #20]	; (1fb9c <rand_prio_low_vector_get_blocking+0x54>)
   1fb86:	f240 11d9 	movw	r1, #473	; 0x1d9
   1fb8a:	f006 b82d 	b.w	25be8 <assert_post_action>
}
   1fb8e:	bd70      	pop	{r4, r5, r6, pc}
   1fb90:	00029e18 	.word	0x00029e18
   1fb94:	0002de4b 	.word	0x0002de4b
   1fb98:	0002ab8c 	.word	0x0002ab8c
   1fb9c:	0002de7f 	.word	0x0002de7f

0001fba0 <hci_driver_open>:
{
   1fba0:	b530      	push	{r4, r5, lr}
   1fba2:	b089      	sub	sp, #36	; 0x24
		hci_ecdh_init();
   1fba4:	f000 fe2e 	bl	20804 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1fba8:	a803      	add	r0, sp, #12
   1fbaa:	f7e4 fc1d 	bl	43e8 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1fbae:	4a4d      	ldr	r2, [pc, #308]	; (1fce4 <hci_driver_open+0x144>)
   1fbb0:	484d      	ldr	r0, [pc, #308]	; (1fce8 <hci_driver_open+0x148>)
   1fbb2:	2149      	movs	r1, #73	; 0x49
   1fbb4:	f006 f82d 	bl	25c12 <z_log_minimal_printk>
   1fbb8:	2214      	movs	r2, #20
   1fbba:	a903      	add	r1, sp, #12
   1fbbc:	2003      	movs	r0, #3
   1fbbe:	f7f2 fec3 	bl	12948 <z_log_minimal_hexdump_print>
			err = sdc_support_central();
   1fbc2:	f7e4 fd2d 	bl	4620 <sdc_support_central>
			if (err) {
   1fbc6:	b118      	cbz	r0, 1fbd0 <hci_driver_open+0x30>
				return -ENOTSUP;
   1fbc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1fbcc:	b009      	add	sp, #36	; 0x24
   1fbce:	bd30      	pop	{r4, r5, pc}
			err = sdc_support_dle_central();
   1fbd0:	f7e4 fd38 	bl	4644 <sdc_support_dle_central>
			if (err) {
   1fbd4:	2800      	cmp	r0, #0
   1fbd6:	d1f7      	bne.n	1fbc8 <hci_driver_open+0x28>
		err = sdc_support_le_2m_phy();
   1fbd8:	f7e4 fd44 	bl	4664 <sdc_support_le_2m_phy>
		if (err) {
   1fbdc:	2800      	cmp	r0, #0
   1fbde:	d1f3      	bne.n	1fbc8 <hci_driver_open+0x28>
			err = sdc_support_phy_update_central();
   1fbe0:	f7e4 fd52 	bl	4688 <sdc_support_phy_update_central>
			if (err) {
   1fbe4:	4605      	mov	r5, r0
   1fbe6:	2800      	cmp	r0, #0
   1fbe8:	d1ee      	bne.n	1fbc8 <hci_driver_open+0x28>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fbea:	466c      	mov	r4, sp
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1fbec:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fbee:	4622      	mov	r2, r4
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1fbf0:	f88d 1000 	strb.w	r1, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fbf4:	f7e4 fc06 	bl	4404 <sdc_cfg_set>
	if (required_memory < 0) {
   1fbf8:	2800      	cmp	r0, #0
   1fbfa:	dbe7      	blt.n	1fbcc <hci_driver_open+0x2c>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fbfc:	4622      	mov	r2, r4
   1fbfe:	2102      	movs	r1, #2
   1fc00:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1fc02:	f88d 5000 	strb.w	r5, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fc06:	f7e4 fbfd 	bl	4404 <sdc_cfg_set>
	if (required_memory < 0) {
   1fc0a:	2800      	cmp	r0, #0
   1fc0c:	dbde      	blt.n	1fbcc <hci_driver_open+0x2c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1fc0e:	4b37      	ldr	r3, [pc, #220]	; (1fcec <hci_driver_open+0x14c>)
   1fc10:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fc12:	4622      	mov	r2, r4
   1fc14:	2103      	movs	r1, #3
   1fc16:	4628      	mov	r0, r5
   1fc18:	f7e4 fbf4 	bl	4404 <sdc_cfg_set>
	if (required_memory < 0) {
   1fc1c:	2800      	cmp	r0, #0
   1fc1e:	dbd5      	blt.n	1fbcc <hci_driver_open+0x2c>
	cfg.event_length.event_length_us =
   1fc20:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fc24:	4622      	mov	r2, r4
   1fc26:	2104      	movs	r1, #4
   1fc28:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   1fc2a:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fc2c:	f7e4 fbea 	bl	4404 <sdc_cfg_set>
	if (required_memory < 0) {
   1fc30:	2800      	cmp	r0, #0
   1fc32:	dbcb      	blt.n	1fbcc <hci_driver_open+0x2c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fc34:	4622      	mov	r2, r4
   1fc36:	2105      	movs	r1, #5
   1fc38:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1fc3a:	f88d 5000 	strb.w	r5, [sp]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fc3e:	f7e4 fbe1 	bl	4404 <sdc_cfg_set>
	if (required_memory < 0) {
   1fc42:	2800      	cmp	r0, #0
   1fc44:	dbc2      	blt.n	1fbcc <hci_driver_open+0x2c>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1fc46:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fc48:	4622      	mov	r2, r4
   1fc4a:	2106      	movs	r1, #6
   1fc4c:	4628      	mov	r0, r5
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1fc4e:	f88d 3000 	strb.w	r3, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fc52:	f7e4 fbd7 	bl	4404 <sdc_cfg_set>
		if (required_memory < 0) {
   1fc56:	2800      	cmp	r0, #0
   1fc58:	dbb8      	blt.n	1fbcc <hci_driver_open+0x2c>
	if (required_memory > sizeof(sdc_mempool)) {
   1fc5a:	f240 52eb 	movw	r2, #1515	; 0x5eb
   1fc5e:	4290      	cmp	r0, r2
   1fc60:	dd0d      	ble.n	1fc7e <hci_driver_open+0xde>
		BT_ERR("Allocated memory too low: %u < %u",
   1fc62:	4603      	mov	r3, r0
   1fc64:	2145      	movs	r1, #69	; 0x45
   1fc66:	4822      	ldr	r0, [pc, #136]	; (1fcf0 <hci_driver_open+0x150>)
   1fc68:	f005 ffd3 	bl	25c12 <z_log_minimal_printk>
		k_panic();
   1fc6c:	4040      	eors	r0, r0
   1fc6e:	f380 8811 	msr	BASEPRI, r0
   1fc72:	f04f 0004 	mov.w	r0, #4
   1fc76:	df02      	svc	2
		return -ENOMEM;
   1fc78:	f06f 000b 	mvn.w	r0, #11
   1fc7c:	e7a6      	b.n	1fbcc <hci_driver_open+0x2c>
   1fc7e:	481d      	ldr	r0, [pc, #116]	; (1fcf4 <hci_driver_open+0x154>)
   1fc80:	f009 fe66 	bl	29950 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1fc84:	b930      	cbnz	r0, 1fc94 <hci_driver_open+0xf4>
		BT_ERR("Entropy source device not ready");
   1fc86:	481c      	ldr	r0, [pc, #112]	; (1fcf8 <hci_driver_open+0x158>)
   1fc88:	2145      	movs	r1, #69	; 0x45
   1fc8a:	f005 ffc2 	bl	25c12 <z_log_minimal_printk>
		return -ENODEV;
   1fc8e:	f06f 0012 	mvn.w	r0, #18
   1fc92:	e79b      	b.n	1fbcc <hci_driver_open+0x2c>
	sdc_rand_source_t rand_functions = {
   1fc94:	4b19      	ldr	r3, [pc, #100]	; (1fcfc <hci_driver_open+0x15c>)
   1fc96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1fc9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1fc9e:	4620      	mov	r0, r4
   1fca0:	f7e4 fd52 	bl	4748 <sdc_rand_source_register>
	if (err) {
   1fca4:	4602      	mov	r2, r0
   1fca6:	b130      	cbz	r0, 1fcb6 <hci_driver_open+0x116>
		BT_ERR("Failed to register rand source (%d)", err);
   1fca8:	4815      	ldr	r0, [pc, #84]	; (1fd00 <hci_driver_open+0x160>)
   1fcaa:	2145      	movs	r1, #69	; 0x45
   1fcac:	f005 ffb1 	bl	25c12 <z_log_minimal_printk>
		return -EINVAL;
   1fcb0:	f06f 0015 	mvn.w	r0, #21
   1fcb4:	e78a      	b.n	1fbcc <hci_driver_open+0x2c>
	k_work_init(&receive_work, receive_work_handler);
   1fcb6:	4913      	ldr	r1, [pc, #76]	; (1fd04 <hci_driver_open+0x164>)
   1fcb8:	4813      	ldr	r0, [pc, #76]	; (1fd08 <hci_driver_open+0x168>)
   1fcba:	f003 f82f 	bl	22d1c <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1fcbe:	f04f 30ff 	mov.w	r0, #4294967295
   1fcc2:	f04f 31ff 	mov.w	r1, #4294967295
   1fcc6:	f7ff ff09 	bl	1fadc <multithreading_lock_acquire>
	if (!err) {
   1fcca:	4604      	mov	r4, r0
   1fccc:	b930      	cbnz	r0, 1fcdc <hci_driver_open+0x13c>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   1fcce:	490f      	ldr	r1, [pc, #60]	; (1fd0c <hci_driver_open+0x16c>)
   1fcd0:	480f      	ldr	r0, [pc, #60]	; (1fd10 <hci_driver_open+0x170>)
   1fcd2:	f7e4 fbff 	bl	44d4 <sdc_enable>
   1fcd6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1fcd8:	f7ff ff08 	bl	1faec <multithreading_lock_release>
	if (err < 0) {
   1fcdc:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1fce0:	e774      	b.n	1fbcc <hci_driver_open+0x2c>
   1fce2:	bf00      	nop
   1fce4:	0002deb8 	.word	0x0002deb8
   1fce8:	0002dedf 	.word	0x0002dedf
   1fcec:	02031b1b 	.word	0x02031b1b
   1fcf0:	0002dee7 	.word	0x0002dee7
   1fcf4:	00029e18 	.word	0x00029e18
   1fcf8:	0002df0e 	.word	0x0002df0e
   1fcfc:	0002a270 	.word	0x0002a270
   1fd00:	0002df33 	.word	0x0002df33
   1fd04:	00029687 	.word	0x00029687
   1fd08:	2000262c 	.word	0x2000262c
   1fd0c:	20002925 	.word	0x20002925
   1fd10:	0001fe11 	.word	0x0001fe11

0001fd14 <rand_prio_low_vector_get>:
{
   1fd14:	b538      	push	{r3, r4, r5, lr}
   1fd16:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1fd18:	480d      	ldr	r0, [pc, #52]	; (1fd50 <rand_prio_low_vector_get+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1fd1a:	6883      	ldr	r3, [r0, #8]
   1fd1c:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1fd1e:	460a      	mov	r2, r1
   1fd20:	b19d      	cbz	r5, 1fd4a <rand_prio_low_vector_get+0x36>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1fd22:	4621      	mov	r1, r4
   1fd24:	2300      	movs	r3, #0
   1fd26:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1fd28:	1e04      	subs	r4, r0, #0
   1fd2a:	da0a      	bge.n	1fd42 <rand_prio_low_vector_get+0x2e>
   1fd2c:	4909      	ldr	r1, [pc, #36]	; (1fd54 <rand_prio_low_vector_get+0x40>)
   1fd2e:	480a      	ldr	r0, [pc, #40]	; (1fd58 <rand_prio_low_vector_get+0x44>)
   1fd30:	f240 12c9 	movw	r2, #457	; 0x1c9
   1fd34:	f005 ff5f 	bl	25bf6 <assert_print>
   1fd38:	4806      	ldr	r0, [pc, #24]	; (1fd54 <rand_prio_low_vector_get+0x40>)
   1fd3a:	f240 11c9 	movw	r1, #457	; 0x1c9
   1fd3e:	f005 ff53 	bl	25be8 <assert_post_action>
	return ret >= 0 ? ret : 0;
   1fd42:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1fd46:	b2c0      	uxtb	r0, r0
   1fd48:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1fd4a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1fd4e:	e7ed      	b.n	1fd2c <rand_prio_low_vector_get+0x18>
   1fd50:	00029e18 	.word	0x00029e18
   1fd54:	0002de7f 	.word	0x0002de7f
   1fd58:	0002ab8c 	.word	0x0002ab8c

0001fd5c <event_packet_process.constprop.0>:
static void event_packet_process(uint8_t *hci_buf)
   1fd5c:	b570      	push	{r4, r5, r6, lr}
	switch (hdr->evt) {
   1fd5e:	4e16      	ldr	r6, [pc, #88]	; (1fdb8 <event_packet_process.constprop.0+0x5c>)
   1fd60:	7830      	ldrb	r0, [r6, #0]
   1fd62:	283e      	cmp	r0, #62	; 0x3e
   1fd64:	d012      	beq.n	1fd8c <event_packet_process.constprop.0+0x30>
   1fd66:	28ff      	cmp	r0, #255	; 0xff
   1fd68:	d017      	beq.n	1fd9a <event_packet_process.constprop.0+0x3e>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1fd6a:	f04f 32ff 	mov.w	r2, #4294967295
   1fd6e:	f04f 33ff 	mov.w	r3, #4294967295
		switch (subevent) {
   1fd72:	2400      	movs	r4, #0
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1fd74:	4621      	mov	r1, r4
   1fd76:	f7f5 fadf 	bl	15338 <bt_buf_get_evt>
	if (!evt_buf) {
   1fd7a:	4605      	mov	r5, r0
   1fd7c:	b980      	cbnz	r0, 1fda0 <event_packet_process.constprop.0+0x44>
		if (discardable) {
   1fd7e:	b9d4      	cbnz	r4, 1fdb6 <event_packet_process.constprop.0+0x5a>
}
   1fd80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("No event buffer available");
   1fd84:	480d      	ldr	r0, [pc, #52]	; (1fdbc <event_packet_process.constprop.0+0x60>)
   1fd86:	2145      	movs	r1, #69	; 0x45
   1fd88:	f005 bf43 	b.w	25c12 <z_log_minimal_printk>
		switch (me->subevent) {
   1fd8c:	78b3      	ldrb	r3, [r6, #2]
   1fd8e:	2b02      	cmp	r3, #2
		switch (subevent) {
   1fd90:	d1eb      	bne.n	1fd6a <event_packet_process.constprop.0+0xe>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1fd92:	2200      	movs	r2, #0
   1fd94:	2300      	movs	r3, #0
		switch (subevent) {
   1fd96:	2401      	movs	r4, #1
   1fd98:	e7ec      	b.n	1fd74 <event_packet_process.constprop.0+0x18>
   1fd9a:	78b3      	ldrb	r3, [r6, #2]
   1fd9c:	2b80      	cmp	r3, #128	; 0x80
   1fd9e:	e7f7      	b.n	1fd90 <event_packet_process.constprop.0+0x34>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1fda0:	7872      	ldrb	r2, [r6, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1fda2:	4905      	ldr	r1, [pc, #20]	; (1fdb8 <event_packet_process.constprop.0+0x5c>)
   1fda4:	3202      	adds	r2, #2
   1fda6:	3008      	adds	r0, #8
   1fda8:	f009 f99e 	bl	290e8 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1fdac:	4628      	mov	r0, r5
}
   1fdae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_recv(evt_buf);
   1fdb2:	f7f6 bbad 	b.w	16510 <bt_recv>
}
   1fdb6:	bd70      	pop	{r4, r5, r6, pc}
   1fdb8:	200028dc 	.word	0x200028dc
   1fdbc:	0002df5c 	.word	0x0002df5c

0001fdc0 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1fdc0:	4901      	ldr	r1, [pc, #4]	; (1fdc8 <receive_signal_raise+0x8>)
   1fdc2:	4802      	ldr	r0, [pc, #8]	; (1fdcc <receive_signal_raise+0xc>)
   1fdc4:	f009 be8c 	b.w	29ae0 <k_work_submit_to_queue>
   1fdc8:	2000262c 	.word	0x2000262c
   1fdcc:	20001e60 	.word	0x20001e60

0001fdd0 <data_packet_process.constprop.0>:
static void data_packet_process(uint8_t *hci_buf)
   1fdd0:	b510      	push	{r4, lr}
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1fdd2:	f04f 32ff 	mov.w	r2, #4294967295
   1fdd6:	f04f 33ff 	mov.w	r3, #4294967295
   1fdda:	2003      	movs	r0, #3
   1fddc:	f7f5 fa6a 	bl	152b4 <bt_buf_get_rx>
	if (!data_buf) {
   1fde0:	4604      	mov	r4, r0
   1fde2:	b928      	cbnz	r0, 1fdf0 <data_packet_process.constprop.0+0x20>
}
   1fde4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("No data buffer available");
   1fde8:	4807      	ldr	r0, [pc, #28]	; (1fe08 <data_packet_process.constprop.0+0x38>)
   1fdea:	2145      	movs	r1, #69	; 0x45
   1fdec:	f005 bf11 	b.w	25c12 <z_log_minimal_printk>
	len = sys_le16_to_cpu(hdr->len);
   1fdf0:	4906      	ldr	r1, [pc, #24]	; (1fe0c <data_packet_process.constprop.0+0x3c>)
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1fdf2:	884a      	ldrh	r2, [r1, #2]
   1fdf4:	3008      	adds	r0, #8
   1fdf6:	3204      	adds	r2, #4
   1fdf8:	f009 f976 	bl	290e8 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1fdfc:	4620      	mov	r0, r4
}
   1fdfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_recv(data_buf);
   1fe02:	f7f6 bb85 	b.w	16510 <bt_recv>
   1fe06:	bf00      	nop
   1fe08:	0002df7b 	.word	0x0002df7b
   1fe0c:	200028dc 	.word	0x200028dc

0001fe10 <hci_driver_receive_process>:
{
   1fe10:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fe12:	f04f 30ff 	mov.w	r0, #4294967295
   1fe16:	f04f 31ff 	mov.w	r1, #4294967295
   1fe1a:	f7ff fe5f 	bl	1fadc <multithreading_lock_acquire>
	if (!errcode) {
   1fe1e:	b1c8      	cbz	r0, 1fe54 <hci_driver_receive_process+0x44>
		return false;
   1fe20:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fe22:	f04f 30ff 	mov.w	r0, #4294967295
   1fe26:	f04f 31ff 	mov.w	r1, #4294967295
   1fe2a:	f7ff fe57 	bl	1fadc <multithreading_lock_acquire>
	if (!errcode) {
   1fe2e:	b1e8      	cbz	r0, 1fe6c <hci_driver_receive_process+0x5c>
		return false;
   1fe30:	2500      	movs	r5, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1fe32:	f04f 30ff 	mov.w	r0, #4294967295
   1fe36:	f04f 31ff 	mov.w	r1, #4294967295
   1fe3a:	f7ff fe4f 	bl	1fadc <multithreading_lock_acquire>
	if (!errcode) {
   1fe3e:	b308      	cbz	r0, 1fe84 <hci_driver_receive_process+0x74>
		return false;
   1fe40:	2400      	movs	r4, #0
	if (received_evt || received_data || received_msg) {
   1fe42:	b916      	cbnz	r6, 1fe4a <hci_driver_receive_process+0x3a>
   1fe44:	b90d      	cbnz	r5, 1fe4a <hci_driver_receive_process+0x3a>
   1fe46:	2c00      	cmp	r4, #0
   1fe48:	d03f      	beq.n	1feca <hci_driver_receive_process+0xba>
}
   1fe4a:	b002      	add	sp, #8
   1fe4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   1fe50:	f7ff bfb6 	b.w	1fdc0 <receive_signal_raise>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1fe54:	481e      	ldr	r0, [pc, #120]	; (1fed0 <hci_driver_receive_process+0xc0>)
   1fe56:	f000 fb57 	bl	20508 <hci_internal_evt_get>
   1fe5a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1fe5c:	f7ff fe46 	bl	1faec <multithreading_lock_release>
	if (errcode) {
   1fe60:	2c00      	cmp	r4, #0
   1fe62:	d1dd      	bne.n	1fe20 <hci_driver_receive_process+0x10>
	event_packet_process(p_hci_buffer);
   1fe64:	f7ff ff7a 	bl	1fd5c <event_packet_process.constprop.0>
	return true;
   1fe68:	2601      	movs	r6, #1
   1fe6a:	e7da      	b.n	1fe22 <hci_driver_receive_process+0x12>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1fe6c:	4818      	ldr	r0, [pc, #96]	; (1fed0 <hci_driver_receive_process+0xc0>)
   1fe6e:	f7ee f80f 	bl	de90 <sdc_hci_data_get>
   1fe72:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1fe74:	f7ff fe3a 	bl	1faec <multithreading_lock_release>
	if (errcode) {
   1fe78:	2c00      	cmp	r4, #0
   1fe7a:	d1d9      	bne.n	1fe30 <hci_driver_receive_process+0x20>
	data_packet_process(p_hci_buffer);
   1fe7c:	f7ff ffa8 	bl	1fdd0 <data_packet_process.constprop.0>
	return true;
   1fe80:	2501      	movs	r5, #1
   1fe82:	e7d6      	b.n	1fe32 <hci_driver_receive_process+0x22>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1fe84:	4812      	ldr	r0, [pc, #72]	; (1fed0 <hci_driver_receive_process+0xc0>)
   1fe86:	f10d 0107 	add.w	r1, sp, #7
   1fe8a:	f000 fb4f 	bl	2052c <hci_internal_msg_get>
   1fe8e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1fe90:	f7ff fe2c 	bl	1faec <multithreading_lock_release>
	if (errcode) {
   1fe94:	2c00      	cmp	r4, #0
   1fe96:	d1d3      	bne.n	1fe40 <hci_driver_receive_process+0x30>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1fe98:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1fe9c:	2b04      	cmp	r3, #4
   1fe9e:	d103      	bne.n	1fea8 <hci_driver_receive_process+0x98>
		event_packet_process(p_hci_buffer);
   1fea0:	f7ff ff5c 	bl	1fd5c <event_packet_process.constprop.0>
	return true;
   1fea4:	2401      	movs	r4, #1
   1fea6:	e7cc      	b.n	1fe42 <hci_driver_receive_process+0x32>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1fea8:	2b02      	cmp	r3, #2
   1feaa:	d102      	bne.n	1feb2 <hci_driver_receive_process+0xa2>
		data_packet_process(p_hci_buffer);
   1feac:	f7ff ff90 	bl	1fdd0 <data_packet_process.constprop.0>
   1feb0:	e7f8      	b.n	1fea4 <hci_driver_receive_process+0x94>
		__ASSERT(false, "sdc_hci_msg_type_t has changed. This if-else needs a new branch");
   1feb2:	4908      	ldr	r1, [pc, #32]	; (1fed4 <hci_driver_receive_process+0xc4>)
   1feb4:	4808      	ldr	r0, [pc, #32]	; (1fed8 <hci_driver_receive_process+0xc8>)
   1feb6:	f44f 72cd 	mov.w	r2, #410	; 0x19a
   1feba:	f005 fe9c 	bl	25bf6 <assert_print>
   1febe:	4805      	ldr	r0, [pc, #20]	; (1fed4 <hci_driver_receive_process+0xc4>)
   1fec0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
   1fec4:	f005 fe90 	bl	25be8 <assert_post_action>
		return false;
   1fec8:	e7bb      	b.n	1fe42 <hci_driver_receive_process+0x32>
}
   1feca:	b002      	add	sp, #8
   1fecc:	bd70      	pop	{r4, r5, r6, pc}
   1fece:	bf00      	nop
   1fed0:	200028dc 	.word	0x200028dc
   1fed4:	0002de7f 	.word	0x0002de7f
   1fed8:	0002ab8c 	.word	0x0002ab8c

0001fedc <rand_prio_high_vector_get>:
{
   1fedc:	b538      	push	{r3, r4, r5, lr}
   1fede:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   1fee0:	480d      	ldr	r0, [pc, #52]	; (1ff18 <rand_prio_high_vector_get+0x3c>)
	if (unlikely(!api->get_entropy_isr)) {
   1fee2:	6883      	ldr	r3, [r0, #8]
   1fee4:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1fee6:	460a      	mov	r2, r1
   1fee8:	b19d      	cbz	r5, 1ff12 <rand_prio_high_vector_get+0x36>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1feea:	4621      	mov	r1, r4
   1feec:	2300      	movs	r3, #0
   1feee:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1fef0:	1e04      	subs	r4, r0, #0
   1fef2:	da0a      	bge.n	1ff0a <rand_prio_high_vector_get+0x2e>
   1fef4:	4909      	ldr	r1, [pc, #36]	; (1ff1c <rand_prio_high_vector_get+0x40>)
   1fef6:	480a      	ldr	r0, [pc, #40]	; (1ff20 <rand_prio_high_vector_get+0x44>)
   1fef8:	f240 12d1 	movw	r2, #465	; 0x1d1
   1fefc:	f005 fe7b 	bl	25bf6 <assert_print>
   1ff00:	4806      	ldr	r0, [pc, #24]	; (1ff1c <rand_prio_high_vector_get+0x40>)
   1ff02:	f240 11d1 	movw	r1, #465	; 0x1d1
   1ff06:	f005 fe6f 	bl	25be8 <assert_post_action>
	return ret >= 0 ? ret : 0;
   1ff0a:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1ff0e:	b2c0      	uxtb	r0, r0
   1ff10:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1ff12:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1ff16:	e7ed      	b.n	1fef4 <rand_prio_high_vector_get+0x18>
   1ff18:	00029e18 	.word	0x00029e18
   1ff1c:	0002de7f 	.word	0x0002de7f
   1ff20:	0002ab8c 	.word	0x0002ab8c

0001ff24 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1ff24:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1ff26:	4c8a      	ldr	r4, [pc, #552]	; (20150 <hci_internal_cmd_put+0x22c>)
   1ff28:	7823      	ldrb	r3, [r4, #0]
   1ff2a:	2b00      	cmp	r3, #0
   1ff2c:	f040 82e7 	bne.w	204fe <hci_internal_cmd_put+0x5da>
	return ((uint16_t)src[1] << 8) | src[0];
   1ff30:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   1ff32:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1ff36:	b22b      	sxth	r3, r5
   1ff38:	ea4f 2295 	mov.w	r2, r5, lsr #10
   1ff3c:	d20d      	bcs.n	1ff5a <hci_internal_cmd_put+0x36>
   1ff3e:	b17a      	cbz	r2, 1ff60 <hci_internal_cmd_put+0x3c>
   1ff40:	3a01      	subs	r2, #1
   1ff42:	2a07      	cmp	r2, #7
   1ff44:	d80c      	bhi.n	1ff60 <hci_internal_cmd_put+0x3c>
   1ff46:	e8df f012 	tbh	[pc, r2, lsl #1]
   1ff4a:	000d      	.short	0x000d
   1ff4c:	0029000b 	.word	0x0029000b
   1ff50:	000b005d 	.word	0x000b005d
   1ff54:	000b000b 	.word	0x000b000b
   1ff58:	0107      	.short	0x0107
   1ff5a:	2a3f      	cmp	r2, #63	; 0x3f
   1ff5c:	f000 8259 	beq.w	20412 <hci_internal_cmd_put+0x4ee>
	switch (opcode)	{
   1ff60:	2001      	movs	r0, #1
   1ff62:	e00e      	b.n	1ff82 <hci_internal_cmd_put+0x5e>
	switch (opcode)	{
   1ff64:	f240 4206 	movw	r2, #1030	; 0x406
   1ff68:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1ff6a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1ff6e:	d006      	beq.n	1ff7e <hci_internal_cmd_put+0x5a>
   1ff70:	f240 421d 	movw	r2, #1053	; 0x41d
   1ff74:	4293      	cmp	r3, r2
   1ff76:	d1f3      	bne.n	1ff60 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1ff78:	f7ee f8eb 	bl	e152 <sdc_hci_cmd_lc_read_remote_version_information>
   1ff7c:	e001      	b.n	1ff82 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1ff7e:	f7ee f8e6 	bl	e14e <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ff82:	230f      	movs	r3, #15
   1ff84:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1ff86:	2304      	movs	r3, #4
   1ff88:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1ff8a:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1ff8c:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1ff8e:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1ff90:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1ff94:	2301      	movs	r3, #1
   1ff96:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1ff98:	2000      	movs	r0, #0
}
   1ff9a:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   1ff9c:	f640 4263 	movw	r2, #3171	; 0xc63
   1ffa0:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1ffa2:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1ffa6:	d025      	beq.n	1fff4 <hci_internal_cmd_put+0xd0>
   1ffa8:	dc0f      	bgt.n	1ffca <hci_internal_cmd_put+0xa6>
   1ffaa:	f640 4203 	movw	r2, #3075	; 0xc03
   1ffae:	4293      	cmp	r3, r2
   1ffb0:	d018      	beq.n	1ffe4 <hci_internal_cmd_put+0xc0>
   1ffb2:	f640 422d 	movw	r2, #3117	; 0xc2d
   1ffb6:	4293      	cmp	r3, r2
   1ffb8:	d017      	beq.n	1ffea <hci_internal_cmd_put+0xc6>
   1ffba:	f640 4201 	movw	r2, #3073	; 0xc01
   1ffbe:	4293      	cmp	r3, r2
   1ffc0:	d1ce      	bne.n	1ff60 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1ffc2:	f7ed ff96 	bl	def2 <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1ffc6:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1ffc8:	e0bd      	b.n	20146 <hci_internal_cmd_put+0x222>
	switch (opcode)	{
   1ffca:	f640 427b 	movw	r2, #3195	; 0xc7b
   1ffce:	4293      	cmp	r3, r2
   1ffd0:	d013      	beq.n	1fffa <hci_internal_cmd_put+0xd6>
   1ffd2:	f640 427c 	movw	r2, #3196	; 0xc7c
   1ffd6:	4293      	cmp	r3, r2
   1ffd8:	d1c2      	bne.n	1ff60 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1ffda:	495e      	ldr	r1, [pc, #376]	; (20154 <hci_internal_cmd_put+0x230>)
   1ffdc:	f7ed ff93 	bl	df06 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1ffe0:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1ffe2:	e0b0      	b.n	20146 <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_cb_reset();
   1ffe4:	f7e4 fc88 	bl	48f8 <sdc_hci_cmd_cb_reset>
   1ffe8:	e7ed      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1ffea:	495a      	ldr	r1, [pc, #360]	; (20154 <hci_internal_cmd_put+0x230>)
   1ffec:	f7ed ff7f 	bl	deee <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1fff0:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1fff2:	e0a8      	b.n	20146 <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1fff4:	f7ed ff82 	bl	defc <sdc_hci_cmd_cb_set_event_mask_page_2>
   1fff8:	e7e5      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1fffa:	4956      	ldr	r1, [pc, #344]	; (20154 <hci_internal_cmd_put+0x230>)
   1fffc:	f7ed ff75 	bl	deea <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   20000:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   20002:	e0a0      	b.n	20146 <hci_internal_cmd_put+0x222>
	switch (opcode)	{
   20004:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   20008:	3b01      	subs	r3, #1
   2000a:	2b08      	cmp	r3, #8
   2000c:	d8a8      	bhi.n	1ff60 <hci_internal_cmd_put+0x3c>
   2000e:	a201      	add	r2, pc, #4	; (adr r2, 20014 <hci_internal_cmd_put+0xf0>)
   20010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20014:	00020039 	.word	0x00020039
   20018:	00020043 	.word	0x00020043
   2001c:	00020127 	.word	0x00020127
   20020:	0001ff61 	.word	0x0001ff61
   20024:	0001ff61 	.word	0x0001ff61
   20028:	0001ff61 	.word	0x0001ff61
   2002c:	0001ff61 	.word	0x0001ff61
   20030:	0001ff61 	.word	0x0001ff61
   20034:	0002013f 	.word	0x0002013f
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   20038:	4846      	ldr	r0, [pc, #280]	; (20154 <hci_internal_cmd_put+0x230>)
   2003a:	f7ee f841 	bl	e0c0 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2003e:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   20040:	e081      	b.n	20146 <hci_internal_cmd_put+0x222>
	memset(cmds, 0, sizeof(*cmds));
   20042:	4844      	ldr	r0, [pc, #272]	; (20154 <hci_internal_cmd_put+0x230>)
   20044:	222f      	movs	r2, #47	; 0x2f
   20046:	2100      	movs	r1, #0
   20048:	f006 fd8e 	bl	26b68 <memset>
	cmds->hci_disconnect = 1;
   2004c:	79e3      	ldrb	r3, [r4, #7]
   2004e:	f043 0320 	orr.w	r3, r3, #32
   20052:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   20054:	7a63      	ldrb	r3, [r4, #9]
   20056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2005a:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   2005c:	7b23      	ldrb	r3, [r4, #12]
   2005e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20062:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   20064:	7c63      	ldrb	r3, [r4, #17]
   20066:	f043 0304 	orr.w	r3, r3, #4
   2006a:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   2006c:	7d63      	ldrb	r3, [r4, #21]
   2006e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   20072:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   20076:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   20078:	7da3      	ldrb	r3, [r4, #22]
   2007a:	f043 0302 	orr.w	r3, r3, #2
   2007e:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   20080:	7f63      	ldrb	r3, [r4, #29]
   20082:	f043 0304 	orr.w	r3, r3, #4
   20086:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   20088:	f894 3020 	ldrb.w	r3, [r4, #32]
   2008c:	f023 0317 	bic.w	r3, r3, #23
   20090:	f043 0317 	orr.w	r3, r3, #23
   20094:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   20098:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2009c:	f063 0303 	orn	r3, r3, #3
   200a0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   200a4:	23ff      	movs	r3, #255	; 0xff
   200a6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   200aa:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   200ae:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   200b2:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   200b6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   200ba:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   200be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   200c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   200c6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   200ca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   200ce:	f063 033f 	orn	r3, r3, #63	; 0x3f
   200d2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   200d6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   200da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   200de:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   200e2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   200e6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   200ea:	f063 0301 	orn	r3, r3, #1
   200ee:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   200f2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   200f6:	f043 0301 	orr.w	r3, r3, #1
   200fa:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   200fe:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   20102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   20106:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   2010a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2010e:	f043 0304 	orr.w	r3, r3, #4
   20112:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   20116:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2011a:	f043 0304 	orr.w	r3, r3, #4
   2011e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   20122:	2344      	movs	r3, #68	; 0x44
   20124:	e0f5      	b.n	20312 <hci_internal_cmd_put+0x3ee>
	memset(features, 0, sizeof(*features));
   20126:	480b      	ldr	r0, [pc, #44]	; (20154 <hci_internal_cmd_put+0x230>)
   20128:	2208      	movs	r2, #8
   2012a:	2100      	movs	r1, #0
   2012c:	f006 fd1c 	bl	26b68 <memset>
	features->bdedr_not_supported = 1;
   20130:	7ae3      	ldrb	r3, [r4, #11]
   20132:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   20136:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   2013a:	72e3      	strb	r3, [r4, #11]
   2013c:	e0e8      	b.n	20310 <hci_internal_cmd_put+0x3ec>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2013e:	4805      	ldr	r0, [pc, #20]	; (20154 <hci_internal_cmd_put+0x230>)
   20140:	f7ed ffbc 	bl	e0bc <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   20144:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   20146:	2801      	cmp	r0, #1
   20148:	f040 80e4 	bne.w	20314 <hci_internal_cmd_put+0x3f0>
   2014c:	e719      	b.n	1ff82 <hci_internal_cmd_put+0x5e>
   2014e:	bf00      	nop
   20150:	20002f10 	.word	0x20002f10
   20154:	20002f17 	.word	0x20002f17
	switch (opcode)	{
   20158:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   2015c:	3b01      	subs	r3, #1
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2015e:	3003      	adds	r0, #3
	switch (opcode)	{
   20160:	2b5d      	cmp	r3, #93	; 0x5d
   20162:	f63f aefd 	bhi.w	1ff60 <hci_internal_cmd_put+0x3c>
   20166:	a201      	add	r2, pc, #4	; (adr r2, 2016c <hci_internal_cmd_put+0x248>)
   20168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2016c:	000202e5 	.word	0x000202e5
   20170:	000202eb 	.word	0x000202eb
   20174:	000202f3 	.word	0x000202f3
   20178:	0001ff61 	.word	0x0001ff61
   2017c:	00020325 	.word	0x00020325
   20180:	0001ff61 	.word	0x0001ff61
   20184:	0001ff61 	.word	0x0001ff61
   20188:	0001ff61 	.word	0x0001ff61
   2018c:	0001ff61 	.word	0x0001ff61
   20190:	0001ff61 	.word	0x0001ff61
   20194:	0002032b 	.word	0x0002032b
   20198:	00020331 	.word	0x00020331
   2019c:	00020337 	.word	0x00020337
   201a0:	0002033d 	.word	0x0002033d
   201a4:	00020343 	.word	0x00020343
   201a8:	0002034d 	.word	0x0002034d
   201ac:	00020353 	.word	0x00020353
   201b0:	00020359 	.word	0x00020359
   201b4:	0002035f 	.word	0x0002035f
   201b8:	00020365 	.word	0x00020365
   201bc:	0002036b 	.word	0x0002036b
   201c0:	00020375 	.word	0x00020375
   201c4:	0002037b 	.word	0x0002037b
   201c8:	00020385 	.word	0x00020385
   201cc:	0002038d 	.word	0x0002038d
   201d0:	0001ff61 	.word	0x0001ff61
   201d4:	0001ff61 	.word	0x0001ff61
   201d8:	00020393 	.word	0x00020393
   201dc:	0001ff61 	.word	0x0001ff61
   201e0:	0001ff61 	.word	0x0001ff61
   201e4:	0001ff61 	.word	0x0001ff61
   201e8:	0001ff61 	.word	0x0001ff61
   201ec:	0001ff61 	.word	0x0001ff61
   201f0:	0002039b 	.word	0x0002039b
   201f4:	000203a3 	.word	0x000203a3
   201f8:	000203ab 	.word	0x000203ab
   201fc:	000203b1 	.word	0x000203b1
   20200:	000203b7 	.word	0x000203b7
   20204:	000203c3 	.word	0x000203c3
   20208:	000203c9 	.word	0x000203c9
   2020c:	000203cf 	.word	0x000203cf
   20210:	000203d5 	.word	0x000203d5
   20214:	0001ff61 	.word	0x0001ff61
   20218:	0001ff61 	.word	0x0001ff61
   2021c:	000203dd 	.word	0x000203dd
   20220:	000203e3 	.word	0x000203e3
   20224:	000203e9 	.word	0x000203e9
   20228:	000203f1 	.word	0x000203f1
   2022c:	000203f9 	.word	0x000203f9
   20230:	000203ff 	.word	0x000203ff
   20234:	0001ff61 	.word	0x0001ff61
   20238:	0001ff61 	.word	0x0001ff61
   2023c:	0001ff61 	.word	0x0001ff61
   20240:	0001ff61 	.word	0x0001ff61
   20244:	0001ff61 	.word	0x0001ff61
   20248:	0001ff61 	.word	0x0001ff61
   2024c:	0001ff61 	.word	0x0001ff61
   20250:	0001ff61 	.word	0x0001ff61
   20254:	0001ff61 	.word	0x0001ff61
   20258:	0001ff61 	.word	0x0001ff61
   2025c:	0001ff61 	.word	0x0001ff61
   20260:	0001ff61 	.word	0x0001ff61
   20264:	0001ff61 	.word	0x0001ff61
   20268:	0001ff61 	.word	0x0001ff61
   2026c:	0001ff61 	.word	0x0001ff61
   20270:	0001ff61 	.word	0x0001ff61
   20274:	0001ff61 	.word	0x0001ff61
   20278:	0001ff61 	.word	0x0001ff61
   2027c:	0001ff61 	.word	0x0001ff61
   20280:	0001ff61 	.word	0x0001ff61
   20284:	0001ff61 	.word	0x0001ff61
   20288:	0001ff61 	.word	0x0001ff61
   2028c:	0001ff61 	.word	0x0001ff61
   20290:	0001ff61 	.word	0x0001ff61
   20294:	00020405 	.word	0x00020405
   20298:	0001ff61 	.word	0x0001ff61
   2029c:	0001ff61 	.word	0x0001ff61
   202a0:	0002040d 	.word	0x0002040d
   202a4:	0001ff61 	.word	0x0001ff61
   202a8:	0001ff61 	.word	0x0001ff61
   202ac:	0001ff61 	.word	0x0001ff61
   202b0:	0001ff61 	.word	0x0001ff61
   202b4:	0001ff61 	.word	0x0001ff61
   202b8:	0001ff61 	.word	0x0001ff61
   202bc:	0001ff61 	.word	0x0001ff61
   202c0:	0001ff61 	.word	0x0001ff61
   202c4:	0001ff61 	.word	0x0001ff61
   202c8:	0001ff61 	.word	0x0001ff61
   202cc:	0001ff61 	.word	0x0001ff61
   202d0:	0001ff61 	.word	0x0001ff61
   202d4:	0001ff61 	.word	0x0001ff61
   202d8:	0001ff61 	.word	0x0001ff61
   202dc:	0001ff61 	.word	0x0001ff61
   202e0:	000203bd 	.word	0x000203bd
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   202e4:	f7ed ff1e 	bl	e124 <sdc_hci_cmd_le_set_event_mask>
   202e8:	e66d      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   202ea:	4886      	ldr	r0, [pc, #536]	; (20504 <hci_internal_cmd_put+0x5e0>)
   202ec:	f7ed fefe 	bl	e0ec <sdc_hci_cmd_le_read_buffer_size>
   202f0:	e67e      	b.n	1fff0 <hci_internal_cmd_put+0xcc>
	memset(features, 0, sizeof(*features));
   202f2:	4884      	ldr	r0, [pc, #528]	; (20504 <hci_internal_cmd_put+0x5e0>)
   202f4:	2205      	movs	r2, #5
   202f6:	2100      	movs	r1, #0
   202f8:	f006 fc36 	bl	26b68 <memset>
	features->le_encryption = 1;
   202fc:	79e3      	ldrb	r3, [r4, #7]
   202fe:	f063 0302 	orn	r3, r3, #2
   20302:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   20304:	7a23      	ldrb	r3, [r4, #8]
   20306:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   2030a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   2030e:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   20310:	230c      	movs	r3, #12
		return 0;
   20312:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   20314:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   20316:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   20318:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2031a:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   2031c:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   2031e:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   20320:	71a0      	strb	r0, [r4, #6]
}
   20322:	e637      	b.n	1ff94 <hci_internal_cmd_put+0x70>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   20324:	f7ed ff09 	bl	e13a <sdc_hci_cmd_le_set_random_address>
   20328:	e64d      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   2032a:	f7ed ff0c 	bl	e146 <sdc_hci_cmd_le_set_scan_params>
   2032e:	e64a      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   20330:	f7ed ff07 	bl	e142 <sdc_hci_cmd_le_set_scan_enable>
   20334:	e647      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   20336:	f7ed fecf 	bl	e0d8 <sdc_hci_cmd_le_create_conn>
   2033a:	e622      	b.n	1ff82 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_create_conn_cancel();
   2033c:	f7ed fece 	bl	e0dc <sdc_hci_cmd_le_create_conn_cancel>
   20340:	e641      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   20342:	4870      	ldr	r0, [pc, #448]	; (20504 <hci_internal_cmd_put+0x5e0>)
   20344:	f7ed fed6 	bl	e0f4 <sdc_hci_cmd_le_read_filter_accept_list_size>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   20348:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   2034a:	e6fc      	b.n	20146 <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   2034c:	f7ed febe 	bl	e0cc <sdc_hci_cmd_le_clear_filter_accept_list>
   20350:	e639      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   20352:	f7ed feb7 	bl	e0c4 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   20356:	e636      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   20358:	f7ed feda 	bl	e110 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   2035c:	e633      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   2035e:	f7ed feb9 	bl	e0d4 <sdc_hci_cmd_le_conn_update>
   20362:	e60e      	b.n	1ff82 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   20364:	f7ed fee3 	bl	e12e <sdc_hci_cmd_le_set_host_channel_classification>
   20368:	e62d      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2036a:	4966      	ldr	r1, [pc, #408]	; (20504 <hci_internal_cmd_put+0x5e0>)
   2036c:	f7ed fec0 	bl	e0f0 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   20370:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   20372:	e6e8      	b.n	20146 <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   20374:	f7ed fec4 	bl	e100 <sdc_hci_cmd_le_read_remote_features>
   20378:	e603      	b.n	1ff82 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2037a:	4962      	ldr	r1, [pc, #392]	; (20504 <hci_internal_cmd_put+0x5e0>)
   2037c:	f7ed feb2 	bl	e0e4 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   20380:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   20382:	e6e0      	b.n	20146 <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   20384:	485f      	ldr	r0, [pc, #380]	; (20504 <hci_internal_cmd_put+0x5e0>)
   20386:	f7ed feaf 	bl	e0e8 <sdc_hci_cmd_le_rand>
   2038a:	e658      	b.n	2003e <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   2038c:	f7ed fea8 	bl	e0e0 <sdc_hci_cmd_le_enable_encryption>
   20390:	e5f7      	b.n	1ff82 <hci_internal_cmd_put+0x5e>
	*buf = states1;
   20392:	2370      	movs	r3, #112	; 0x70
   20394:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   20396:	2340      	movs	r3, #64	; 0x40
   20398:	e6cf      	b.n	2013a <hci_internal_cmd_put+0x216>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2039a:	495a      	ldr	r1, [pc, #360]	; (20504 <hci_internal_cmd_put+0x5e0>)
   2039c:	f7ed febe 	bl	e11c <sdc_hci_cmd_le_set_data_length>
   203a0:	e61e      	b.n	1ffe0 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   203a2:	4858      	ldr	r0, [pc, #352]	; (20504 <hci_internal_cmd_put+0x5e0>)
   203a4:	f7ed feb0 	bl	e108 <sdc_hci_cmd_le_read_suggested_default_data_length>
   203a8:	e62a      	b.n	20000 <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   203aa:	f7ed fece 	bl	e14a <sdc_hci_cmd_le_write_suggested_default_data_length>
   203ae:	e60a      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return hci_cmd_le_read_local_p256_public_key();
   203b0:	f000 fa52 	bl	20858 <hci_cmd_le_read_local_p256_public_key>
   203b4:	e5e5      	b.n	1ff82 <hci_internal_cmd_put+0x5e>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   203b6:	f009 f98c 	bl	296d2 <hci_cmd_le_generate_dhkey>
   203ba:	e5e2      	b.n	1ff82 <hci_internal_cmd_put+0x5e>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   203bc:	f009 f98c 	bl	296d8 <hci_cmd_le_generate_dhkey_v2>
   203c0:	e601      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   203c2:	f7ed fe81 	bl	e0c8 <sdc_hci_cmd_le_add_device_to_resolving_list>
   203c6:	e5fe      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   203c8:	f7ed fea4 	bl	e114 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   203cc:	e5fb      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_clear_resolving_list();
   203ce:	f7ed fe7f 	bl	e0d0 <sdc_hci_cmd_le_clear_resolving_list>
   203d2:	e5f8      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   203d4:	484b      	ldr	r0, [pc, #300]	; (20504 <hci_internal_cmd_put+0x5e0>)
   203d6:	f7ed fe95 	bl	e104 <sdc_hci_cmd_le_read_resolving_list_size>
   203da:	e7b5      	b.n	20348 <hci_internal_cmd_put+0x424>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   203dc:	f7ed fe9c 	bl	e118 <sdc_hci_cmd_le_set_address_resolution_enable>
   203e0:	e5f1      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   203e2:	f7ed feac 	bl	e13e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   203e6:	e5ee      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   203e8:	4846      	ldr	r0, [pc, #280]	; (20504 <hci_internal_cmd_put+0x5e0>)
   203ea:	f7ed fe85 	bl	e0f8 <sdc_hci_cmd_le_read_max_data_length>
   203ee:	e626      	b.n	2003e <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   203f0:	4944      	ldr	r1, [pc, #272]	; (20504 <hci_internal_cmd_put+0x5e0>)
   203f2:	f7ed fe83 	bl	e0fc <sdc_hci_cmd_le_read_phy>
   203f6:	e603      	b.n	20000 <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   203f8:	f7ed fe92 	bl	e120 <sdc_hci_cmd_le_set_default_phy>
   203fc:	e5e3      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   203fe:	f7ed fe98 	bl	e132 <sdc_hci_cmd_le_set_phy>
   20402:	e5be      	b.n	1ff82 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   20404:	483f      	ldr	r0, [pc, #252]	; (20504 <hci_internal_cmd_put+0x5e0>)
   20406:	f7ed fe81 	bl	e10c <sdc_hci_cmd_le_read_transmit_power>
   2040a:	e5e9      	b.n	1ffe0 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   2040c:	f7ed fe93 	bl	e136 <sdc_hci_cmd_le_set_privacy_mode>
   20410:	e5d9      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   20412:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   20416:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   20418:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   2041c:	d820      	bhi.n	20460 <hci_internal_cmd_put+0x53c>
   2041e:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   20422:	f43f ad9d 	beq.w	1ff60 <hci_internal_cmd_put+0x3c>
   20426:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   2042a:	3b01      	subs	r3, #1
   2042c:	2b09      	cmp	r3, #9
   2042e:	f63f ad97 	bhi.w	1ff60 <hci_internal_cmd_put+0x3c>
   20432:	a201      	add	r2, pc, #4	; (adr r2, 20438 <hci_internal_cmd_put+0x514>)
   20434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20438:	00020481 	.word	0x00020481
   2043c:	0002048b 	.word	0x0002048b
   20440:	0001ff61 	.word	0x0001ff61
   20444:	0001ff61 	.word	0x0001ff61
   20448:	0001ff61 	.word	0x0001ff61
   2044c:	000204c3 	.word	0x000204c3
   20450:	0001ff61 	.word	0x0001ff61
   20454:	0001ff61 	.word	0x0001ff61
   20458:	000204af 	.word	0x000204af
   2045c:	000204b9 	.word	0x000204b9
   20460:	f505 7340 	add.w	r3, r5, #768	; 0x300
   20464:	b29b      	uxth	r3, r3
   20466:	2b05      	cmp	r3, #5
   20468:	f63f ad7a 	bhi.w	1ff60 <hci_internal_cmd_put+0x3c>
   2046c:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   20470:	2b05      	cmp	r3, #5
   20472:	f63f ad75 	bhi.w	1ff60 <hci_internal_cmd_put+0x3c>
   20476:	e8df f003 	tbb	[pc, r3]
   2047a:	3327      	.short	0x3327
   2047c:	3f3c3936 	.word	0x3f3c3936
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   20480:	4820      	ldr	r0, [pc, #128]	; (20504 <hci_internal_cmd_put+0x5e0>)
   20482:	f7e4 fa4d 	bl	4920 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   20486:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   20488:	e65d      	b.n	20146 <hci_internal_cmd_put+0x222>
	memset(cmds, 0, sizeof(*cmds));
   2048a:	481e      	ldr	r0, [pc, #120]	; (20504 <hci_internal_cmd_put+0x5e0>)
   2048c:	2202      	movs	r2, #2
   2048e:	2100      	movs	r1, #0
   20490:	f006 fb6a 	bl	26b68 <memset>
	cmds->read_version_info = 1;
   20494:	79e3      	ldrb	r3, [r4, #7]
   20496:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   2049a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   2049e:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   204a0:	7a23      	ldrb	r3, [r4, #8]
   204a2:	f023 0307 	bic.w	r3, r3, #7
   204a6:	f043 0307 	orr.w	r3, r3, #7
   204aa:	7223      	strb	r3, [r4, #8]
}
   204ac:	e639      	b.n	20122 <hci_internal_cmd_put+0x1fe>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   204ae:	4815      	ldr	r0, [pc, #84]	; (20504 <hci_internal_cmd_put+0x5e0>)
   204b0:	f7ed fdb3 	bl	e01a <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   204b4:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   204b6:	e646      	b.n	20146 <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   204b8:	4812      	ldr	r0, [pc, #72]	; (20504 <hci_internal_cmd_put+0x5e0>)
   204ba:	f7ed fd61 	bl	df80 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   204be:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   204c0:	e641      	b.n	20146 <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   204c2:	f7ed fdf9 	bl	e0b8 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   204c6:	e57e      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
	memset(cmds, 0, sizeof(*cmds));
   204c8:	480e      	ldr	r0, [pc, #56]	; (20504 <hci_internal_cmd_put+0x5e0>)
   204ca:	2202      	movs	r2, #2
   204cc:	2100      	movs	r1, #0
   204ce:	f006 fb4b 	bl	26b68 <memset>
	cmds->read_supported_vs_commands = 1;
   204d2:	79e3      	ldrb	r3, [r4, #7]
   204d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   204d8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   204dc:	71e3      	strb	r3, [r4, #7]
}
   204de:	e620      	b.n	20122 <hci_internal_cmd_put+0x1fe>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   204e0:	f7ed fd47 	bl	df72 <sdc_hci_cmd_vs_llpm_mode_set>
   204e4:	e56f      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   204e6:	f7ed fd18 	bl	df1a <sdc_hci_cmd_vs_conn_update>
   204ea:	e56c      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   204ec:	f7ed fd0d 	bl	df0a <sdc_hci_cmd_vs_conn_event_extend>
   204f0:	e569      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   204f2:	f7ed fd40 	bl	df76 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   204f6:	e566      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   204f8:	f7ed fd39 	bl	df6e <sdc_hci_cmd_vs_event_length_set>
   204fc:	e563      	b.n	1ffc6 <hci_internal_cmd_put+0xa2>
		return -NRF_EPERM;
   204fe:	f04f 30ff 	mov.w	r0, #4294967295
   20502:	e54a      	b.n	1ff9a <hci_internal_cmd_put+0x76>
   20504:	20002f17 	.word	0x20002f17

00020508 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   20508:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   2050a:	4c07      	ldr	r4, [pc, #28]	; (20528 <hci_internal_evt_get+0x20>)
   2050c:	7823      	ldrb	r3, [r4, #0]
   2050e:	b91b      	cbnz	r3, 20518 <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   20510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   20514:	f7ed bcd4 	b.w	dec0 <sdc_hci_evt_get>
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   20518:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   2051a:	1c61      	adds	r1, r4, #1
   2051c:	3202      	adds	r2, #2
   2051e:	f006 fb18 	bl	26b52 <memcpy>
		cmd_complete_or_status.occurred = false;
   20522:	2000      	movs	r0, #0
   20524:	7020      	strb	r0, [r4, #0]
}
   20526:	bd10      	pop	{r4, pc}
   20528:	20002f10 	.word	0x20002f10

0002052c <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   2052c:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   2052e:	4c09      	ldr	r4, [pc, #36]	; (20554 <hci_internal_msg_get+0x28>)
   20530:	7823      	ldrb	r3, [r4, #0]
{
   20532:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   20534:	b91b      	cbnz	r3, 2053e <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   20536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   2053a:	f7ed bcce 	b.w	deda <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   2053e:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   20540:	1c61      	adds	r1, r4, #1
   20542:	3202      	adds	r2, #2
   20544:	f006 fb05 	bl	26b52 <memcpy>
		cmd_complete_or_status.occurred = false;
   20548:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   2054a:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   2054c:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   2054e:	702b      	strb	r3, [r5, #0]
}
   20550:	bd38      	pop	{r3, r4, r5, pc}
   20552:	bf00      	nop
   20554:	20002f10 	.word	0x20002f10

00020558 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   20558:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   2055a:	b570      	push	{r4, r5, r6, lr}
   2055c:	4604      	mov	r4, r0
   2055e:	460d      	mov	r5, r1
   20560:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   20564:	d915      	bls.n	20592 <sys_memcpy_swap.constprop.0+0x3a>
   20566:	42b0      	cmp	r0, r6
   20568:	d20a      	bcs.n	20580 <sys_memcpy_swap.constprop.0+0x28>
   2056a:	490c      	ldr	r1, [pc, #48]	; (2059c <sys_memcpy_swap.constprop.0+0x44>)
   2056c:	480c      	ldr	r0, [pc, #48]	; (205a0 <sys_memcpy_swap.constprop.0+0x48>)
   2056e:	f240 2217 	movw	r2, #535	; 0x217
   20572:	f005 fb40 	bl	25bf6 <assert_print>
   20576:	4809      	ldr	r0, [pc, #36]	; (2059c <sys_memcpy_swap.constprop.0+0x44>)
   20578:	f240 2117 	movw	r1, #535	; 0x217
   2057c:	f005 fb34 	bl	25be8 <assert_post_action>
	for (; length > 0; length--) {
   20580:	4633      	mov	r3, r6
   20582:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   20584:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20588:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   2058c:	42ab      	cmp	r3, r5
   2058e:	d1f9      	bne.n	20584 <sys_memcpy_swap.constprop.0+0x2c>
}
   20590:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   20592:	d0ea      	beq.n	2056a <sys_memcpy_swap.constprop.0+0x12>
   20594:	f100 0310 	add.w	r3, r0, #16
   20598:	4299      	cmp	r1, r3
   2059a:	e7e5      	b.n	20568 <sys_memcpy_swap.constprop.0+0x10>
   2059c:	0002d602 	.word	0x0002d602
   205a0:	0002ab8c 	.word	0x0002ab8c

000205a4 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   205a4:	b570      	push	{r4, r5, r6, lr}
   205a6:	4605      	mov	r5, r0
   205a8:	460c      	mov	r4, r1
   205aa:	4e0e      	ldr	r6, [pc, #56]	; (205e4 <bt_rand+0x40>)
   205ac:	4630      	mov	r0, r6
   205ae:	f009 f9cf 	bl	29950 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   205b2:	b198      	cbz	r0, 205dc <bt_rand+0x38>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   205b4:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   205b6:	68b6      	ldr	r6, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   205b8:	6833      	ldr	r3, [r6, #0]
   205ba:	b943      	cbnz	r3, 205ce <bt_rand+0x2a>
   205bc:	490a      	ldr	r1, [pc, #40]	; (205e8 <bt_rand+0x44>)
   205be:	480b      	ldr	r0, [pc, #44]	; (205ec <bt_rand+0x48>)
   205c0:	224b      	movs	r2, #75	; 0x4b
   205c2:	f005 fb18 	bl	25bf6 <assert_print>
   205c6:	4808      	ldr	r0, [pc, #32]	; (205e8 <bt_rand+0x44>)
   205c8:	214b      	movs	r1, #75	; 0x4b
   205ca:	f005 fb0d 	bl	25be8 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   205ce:	6833      	ldr	r3, [r6, #0]
   205d0:	4804      	ldr	r0, [pc, #16]	; (205e4 <bt_rand+0x40>)
   205d2:	4622      	mov	r2, r4
   205d4:	4629      	mov	r1, r5
}
   205d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   205da:	4718      	bx	r3
   205dc:	f06f 0012 	mvn.w	r0, #18
   205e0:	bd70      	pop	{r4, r5, r6, pc}
   205e2:	bf00      	nop
   205e4:	00029e18 	.word	0x00029e18
   205e8:	0002de4b 	.word	0x0002de4b
   205ec:	0002ab8c 	.word	0x0002ab8c

000205f0 <sys_memcpy_swap.constprop.0>:
   205f0:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   205f2:	b570      	push	{r4, r5, r6, lr}
   205f4:	4604      	mov	r4, r0
   205f6:	460d      	mov	r5, r1
   205f8:	f101 0620 	add.w	r6, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   205fc:	d915      	bls.n	2062a <sys_memcpy_swap.constprop.0+0x3a>
   205fe:	42b0      	cmp	r0, r6
   20600:	d20a      	bcs.n	20618 <sys_memcpy_swap.constprop.0+0x28>
   20602:	490c      	ldr	r1, [pc, #48]	; (20634 <sys_memcpy_swap.constprop.0+0x44>)
   20604:	480c      	ldr	r0, [pc, #48]	; (20638 <sys_memcpy_swap.constprop.0+0x48>)
   20606:	f240 2217 	movw	r2, #535	; 0x217
   2060a:	f005 faf4 	bl	25bf6 <assert_print>
   2060e:	4809      	ldr	r0, [pc, #36]	; (20634 <sys_memcpy_swap.constprop.0+0x44>)
   20610:	f240 2117 	movw	r1, #535	; 0x217
   20614:	f005 fae8 	bl	25be8 <assert_post_action>
	for (; length > 0; length--) {
   20618:	4633      	mov	r3, r6
   2061a:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   2061c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20620:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   20624:	42ab      	cmp	r3, r5
   20626:	d1f9      	bne.n	2061c <sys_memcpy_swap.constprop.0+0x2c>
}
   20628:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   2062a:	d0ea      	beq.n	20602 <sys_memcpy_swap.constprop.0+0x12>
   2062c:	f100 0320 	add.w	r3, r0, #32
   20630:	4299      	cmp	r1, r3
   20632:	e7e5      	b.n	20600 <sys_memcpy_swap.constprop.0+0x10>
   20634:	0002d602 	.word	0x0002d602
   20638:	0002ab8c 	.word	0x0002ab8c

0002063c <ecdh_p256_common_secret>:

static uint8_t common_secret(bool use_debug)
{
	int err;

	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   2063c:	4b1e      	ldr	r3, [pc, #120]	; (206b8 <ecdh_p256_common_secret+0x7c>)
   2063e:	491f      	ldr	r1, [pc, #124]	; (206bc <ecdh_p256_common_secret+0x80>)
   20640:	f103 0220 	add.w	r2, r3, #32
   20644:	2800      	cmp	r0, #0
   20646:	bf08      	it	eq
   20648:	4619      	moveq	r1, r3

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   2064a:	b570      	push	{r4, r5, r6, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   2064c:	4610      	mov	r0, r2
   2064e:	f004 fcb7 	bl	24fc0 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   20652:	4602      	mov	r2, r0
   20654:	b348      	cbz	r0, 206aa <ecdh_p256_common_secret+0x6e>
		BT_ERR("public key is not valid (err %d)", err);
   20656:	481a      	ldr	r0, [pc, #104]	; (206c0 <ecdh_p256_common_secret+0x84>)
   20658:	2145      	movs	r1, #69	; 0x45
   2065a:	f005 fada 	bl	25c12 <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   2065e:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   20660:	f04f 32ff 	mov.w	r2, #4294967295
   20664:	f04f 33ff 	mov.w	r3, #4294967295
   20668:	2001      	movs	r0, #1
   2066a:	f7f4 fe23 	bl	152b4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   2066e:	f100 0608 	add.w	r6, r0, #8
   20672:	2102      	movs	r1, #2
   20674:	4605      	mov	r5, r0
   20676:	4630      	mov	r0, r6
   20678:	f7fd ff36 	bl	1e4e8 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2067c:	233e      	movs	r3, #62	; 0x3e
   2067e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   20680:	2322      	movs	r3, #34	; 0x22
   20682:	7043      	strb	r3, [r0, #1]
   20684:	2101      	movs	r1, #1
   20686:	4630      	mov	r0, r6
   20688:	f7fd ff2e 	bl	1e4e8 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2068c:	2309      	movs	r3, #9
   2068e:	7003      	strb	r3, [r0, #0]
   20690:	2121      	movs	r1, #33	; 0x21
   20692:	4630      	mov	r0, r6
   20694:	f7fd ff28 	bl	1e4e8 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   20698:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   2069c:	b13c      	cbz	r4, 206ae <ecdh_p256_common_secret+0x72>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2069e:	2220      	movs	r2, #32
   206a0:	21ff      	movs	r1, #255	; 0xff
   206a2:	f006 fa61 	bl	26b68 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   206a6:	4628      	mov	r0, r5
   206a8:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   206aa:	4604      	mov	r4, r0
   206ac:	e7d8      	b.n	20660 <ecdh_p256_common_secret+0x24>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   206ae:	4905      	ldr	r1, [pc, #20]	; (206c4 <ecdh_p256_common_secret+0x88>)
   206b0:	f7ff ff9e 	bl	205f0 <sys_memcpy_swap.constprop.0>
   206b4:	e7f7      	b.n	206a6 <ecdh_p256_common_secret+0x6a>
   206b6:	bf00      	nop
   206b8:	20002f57 	.word	0x20002f57
   206bc:	0002e02a 	.word	0x0002e02a
   206c0:	0002dfda 	.word	0x0002dfda
   206c4:	20002f77 	.word	0x20002f77

000206c8 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   206c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   206ca:	4e38      	ldr	r6, [pc, #224]	; (207ac <ecdh_cmd_process+0xe4>)
   206cc:	f3bf 8f5b 	dmb	ish
   206d0:	6833      	ldr	r3, [r6, #0]
   206d2:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   206d6:	2b02      	cmp	r3, #2
   206d8:	d059      	beq.n	2078e <ecdh_cmd_process+0xc6>
   206da:	2b04      	cmp	r3, #4
   206dc:	d05c      	beq.n	20798 <ecdh_cmd_process+0xd0>
   206de:	2b01      	cmp	r3, #1
   206e0:	d15c      	bne.n	2079c <ecdh_cmd_process+0xd4>
		err = bt_rand(ecdh.private_key_be, 32);
   206e2:	4c33      	ldr	r4, [pc, #204]	; (207b0 <ecdh_cmd_process+0xe8>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   206e4:	4f33      	ldr	r7, [pc, #204]	; (207b4 <ecdh_cmd_process+0xec>)
		err = bt_rand(ecdh.private_key_be, 32);
   206e6:	2120      	movs	r1, #32
   206e8:	4620      	mov	r0, r4
   206ea:	f7ff ff5b 	bl	205a4 <bt_rand>
		if (err) {
   206ee:	2800      	cmp	r0, #0
   206f0:	d142      	bne.n	20778 <ecdh_cmd_process+0xb0>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   206f2:	2220      	movs	r2, #32
   206f4:	4639      	mov	r1, r7
   206f6:	4620      	mov	r0, r4
   206f8:	f006 fa1a 	bl	26b30 <memcmp>
   206fc:	2800      	cmp	r0, #0
   206fe:	d0f2      	beq.n	206e6 <ecdh_cmd_process+0x1e>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   20700:	482d      	ldr	r0, [pc, #180]	; (207b8 <ecdh_cmd_process+0xf0>)
   20702:	4621      	mov	r1, r4
   20704:	f004 fc48 	bl	24f98 <ocrypto_ecdh_p256_public_key>
	} while (err);
   20708:	4605      	mov	r5, r0
   2070a:	2800      	cmp	r0, #0
   2070c:	d1eb      	bne.n	206e6 <ecdh_cmd_process+0x1e>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2070e:	f04f 32ff 	mov.w	r2, #4294967295
   20712:	f04f 33ff 	mov.w	r3, #4294967295
   20716:	2001      	movs	r0, #1
   20718:	f7f4 fdcc 	bl	152b4 <bt_buf_get_rx>
   2071c:	f100 0708 	add.w	r7, r0, #8
   20720:	2102      	movs	r1, #2
   20722:	4604      	mov	r4, r0
   20724:	4638      	mov	r0, r7
   20726:	f7fd fedf 	bl	1e4e8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2072a:	233e      	movs	r3, #62	; 0x3e
   2072c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2072e:	2342      	movs	r3, #66	; 0x42
   20730:	7043      	strb	r3, [r0, #1]
   20732:	2101      	movs	r1, #1
   20734:	4638      	mov	r0, r7
   20736:	f7fd fed7 	bl	1e4e8 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   2073a:	2308      	movs	r3, #8
   2073c:	7003      	strb	r3, [r0, #0]
   2073e:	2141      	movs	r1, #65	; 0x41
   20740:	4638      	mov	r0, r7
   20742:	f7fd fed1 	bl	1e4e8 <net_buf_simple_add>
   20746:	4607      	mov	r7, r0
	evt->status = status;
   20748:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   2074c:	b1b5      	cbz	r5, 2077c <ecdh_cmd_process+0xb4>
		(void)memset(evt->key, 0, sizeof(evt->key));
   2074e:	2240      	movs	r2, #64	; 0x40
   20750:	2100      	movs	r1, #0
   20752:	f006 fa09 	bl	26b68 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20756:	f3bf 8f5b 	dmb	ish
   2075a:	2300      	movs	r3, #0
   2075c:	e856 2f00 	ldrex	r2, [r6]
   20760:	e846 3100 	strex	r1, r3, [r6]
   20764:	2900      	cmp	r1, #0
   20766:	d1f9      	bne.n	2075c <ecdh_cmd_process+0x94>
   20768:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   2076c:	b1e4      	cbz	r4, 207a8 <ecdh_cmd_process+0xe0>
		bt_recv(buf);
   2076e:	4620      	mov	r0, r4
	}
}
   20770:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   20774:	f7f5 becc 	b.w	16510 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   20778:	251f      	movs	r5, #31
   2077a:	e7c8      	b.n	2070e <ecdh_cmd_process+0x46>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   2077c:	490e      	ldr	r1, [pc, #56]	; (207b8 <ecdh_cmd_process+0xf0>)
   2077e:	f7ff ff37 	bl	205f0 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   20782:	490e      	ldr	r1, [pc, #56]	; (207bc <ecdh_cmd_process+0xf4>)
   20784:	f107 0021 	add.w	r0, r7, #33	; 0x21
   20788:	f7ff ff32 	bl	205f0 <sys_memcpy_swap.constprop.0>
		break;
   2078c:	e7e3      	b.n	20756 <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(false);
   2078e:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   20790:	f7ff ff54 	bl	2063c <ecdh_p256_common_secret>
   20794:	4604      	mov	r4, r0
		break;
   20796:	e7de      	b.n	20756 <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(true);
   20798:	2001      	movs	r0, #1
   2079a:	e7f9      	b.n	20790 <ecdh_cmd_process+0xc8>
		BT_WARN("Unknown command");
   2079c:	4808      	ldr	r0, [pc, #32]	; (207c0 <ecdh_cmd_process+0xf8>)
   2079e:	2157      	movs	r1, #87	; 0x57
   207a0:	f005 fa37 	bl	25c12 <z_log_minimal_printk>
		buf = NULL;
   207a4:	2400      	movs	r4, #0
		break;
   207a6:	e7d6      	b.n	20756 <ecdh_cmd_process+0x8e>
}
   207a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   207aa:	bf00      	nop
   207ac:	2000263c 	.word	0x2000263c
   207b0:	20002f57 	.word	0x20002f57
   207b4:	0002e02a 	.word	0x0002e02a
   207b8:	20002f77 	.word	0x20002f77
   207bc:	20002f97 	.word	0x20002f97
   207c0:	0002e000 	.word	0x0002e000

000207c4 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   207c4:	b510      	push	{r4, lr}
   207c6:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   207c8:	2210      	movs	r2, #16
   207ca:	2100      	movs	r1, #0
   207cc:	a801      	add	r0, sp, #4
   207ce:	f006 f9cb 	bl	26b68 <memset>
   207d2:	4c0b      	ldr	r4, [pc, #44]	; (20800 <ecdh_thread+0x3c>)
   207d4:	9405      	str	r4, [sp, #20]
   207d6:	2301      	movs	r3, #1
   207d8:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   207dc:	f04f 32ff 	mov.w	r2, #4294967295
   207e0:	f04f 33ff 	mov.w	r3, #4294967295
   207e4:	2101      	movs	r1, #1
   207e6:	a801      	add	r0, sp, #4
   207e8:	f004 fa36 	bl	24c58 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   207ec:	4620      	mov	r0, r4
   207ee:	f009 fa8e 	bl	29d0e <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   207f2:	9b04      	ldr	r3, [sp, #16]
   207f4:	f36f 3352 	bfc	r3, #13, #6
   207f8:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   207fa:	f7ff ff65 	bl	206c8 <ecdh_cmd_process>
	while (true) {
   207fe:	e7ed      	b.n	207dc <ecdh_thread+0x18>
   20800:	20002640 	.word	0x20002640

00020804 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   20804:	b510      	push	{r4, lr}
   20806:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   20808:	480e      	ldr	r0, [pc, #56]	; (20844 <hci_ecdh_init+0x40>)
   2080a:	f009 fa7b 	bl	29d04 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2080e:	4c0e      	ldr	r4, [pc, #56]	; (20848 <hci_ecdh_init+0x44>)
   20810:	490e      	ldr	r1, [pc, #56]	; (2084c <hci_ecdh_init+0x48>)
   20812:	2200      	movs	r2, #0
   20814:	2300      	movs	r3, #0
   20816:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2081a:	2300      	movs	r3, #0
   2081c:	220a      	movs	r2, #10
   2081e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   20822:	e9cd 3301 	strd	r3, r3, [sp, #4]
   20826:	9300      	str	r3, [sp, #0]
   20828:	f44f 7262 	mov.w	r2, #904	; 0x388
   2082c:	4b08      	ldr	r3, [pc, #32]	; (20850 <hci_ecdh_init+0x4c>)
   2082e:	4620      	mov	r0, r4
   20830:	f001 fc3a 	bl	220a8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   20834:	4907      	ldr	r1, [pc, #28]	; (20854 <hci_ecdh_init+0x50>)
   20836:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   20838:	b008      	add	sp, #32
   2083a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2083e:	f009 b8a3 	b.w	29988 <z_impl_k_thread_name_set>
   20842:	bf00      	nop
   20844:	20002640 	.word	0x20002640
   20848:	20001de0 	.word	0x20001de0
   2084c:	200048c0 	.word	0x200048c0
   20850:	000207c5 	.word	0x000207c5
   20854:	0002e015 	.word	0x0002e015

00020858 <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   20858:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2085a:	4b0b      	ldr	r3, [pc, #44]	; (20888 <hci_cmd_le_read_local_p256_public_key+0x30>)
   2085c:	f3bf 8f5b 	dmb	ish
   20860:	2201      	movs	r2, #1
   20862:	e853 1f00 	ldrex	r1, [r3]
   20866:	2900      	cmp	r1, #0
   20868:	d103      	bne.n	20872 <hci_cmd_le_read_local_p256_public_key+0x1a>
   2086a:	e843 2000 	strex	r0, r2, [r3]
   2086e:	2800      	cmp	r0, #0
   20870:	d1f7      	bne.n	20862 <hci_cmd_le_read_local_p256_public_key+0xa>
   20872:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   20876:	d105      	bne.n	20884 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   20878:	4804      	ldr	r0, [pc, #16]	; (2088c <hci_cmd_le_read_local_p256_public_key+0x34>)
   2087a:	2100      	movs	r1, #0
   2087c:	f004 fac2 	bl	24e04 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   20880:	2000      	movs	r0, #0
}
   20882:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   20884:	200c      	movs	r0, #12
   20886:	e7fc      	b.n	20882 <hci_cmd_le_read_local_p256_public_key+0x2a>
   20888:	2000263c 	.word	0x2000263c
   2088c:	20002640 	.word	0x20002640

00020890 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   20890:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   20892:	2900      	cmp	r1, #0
   20894:	4b11      	ldr	r3, [pc, #68]	; (208dc <cmd_le_generate_dhkey+0x4c>)
   20896:	f3bf 8f5b 	dmb	ish
{
   2089a:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   2089c:	bf14      	ite	ne
   2089e:	2204      	movne	r2, #4
   208a0:	2202      	moveq	r2, #2
   208a2:	e853 1f00 	ldrex	r1, [r3]
   208a6:	2900      	cmp	r1, #0
   208a8:	d103      	bne.n	208b2 <cmd_le_generate_dhkey+0x22>
   208aa:	e843 2000 	strex	r0, r2, [r3]
   208ae:	2800      	cmp	r0, #0
   208b0:	d1f7      	bne.n	208a2 <cmd_le_generate_dhkey+0x12>
   208b2:	f3bf 8f5b 	dmb	ish
   208b6:	d10e      	bne.n	208d6 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   208b8:	4621      	mov	r1, r4
   208ba:	4809      	ldr	r0, [pc, #36]	; (208e0 <cmd_le_generate_dhkey+0x50>)
   208bc:	f7ff fe98 	bl	205f0 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   208c0:	4808      	ldr	r0, [pc, #32]	; (208e4 <cmd_le_generate_dhkey+0x54>)
   208c2:	f104 0120 	add.w	r1, r4, #32
   208c6:	f7ff fe93 	bl	205f0 <sys_memcpy_swap.constprop.0>
   208ca:	4807      	ldr	r0, [pc, #28]	; (208e8 <cmd_le_generate_dhkey+0x58>)
   208cc:	2100      	movs	r1, #0
   208ce:	f004 fa99 	bl	24e04 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   208d2:	2000      	movs	r0, #0
}
   208d4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   208d6:	200c      	movs	r0, #12
   208d8:	e7fc      	b.n	208d4 <cmd_le_generate_dhkey+0x44>
   208da:	bf00      	nop
   208dc:	2000263c 	.word	0x2000263c
   208e0:	20002f77 	.word	0x20002f77
   208e4:	20002f97 	.word	0x20002f97
   208e8:	20002640 	.word	0x20002640

000208ec <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   208ec:	b508      	push	{r3, lr}
   208ee:	4602      	mov	r2, r0
   208f0:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   208f2:	4805      	ldr	r0, [pc, #20]	; (20908 <m_assert_handler+0x1c>)
   208f4:	2145      	movs	r1, #69	; 0x45
   208f6:	f005 f98c 	bl	25c12 <z_log_minimal_printk>
	k_oops();
   208fa:	4040      	eors	r0, r0
   208fc:	f380 8811 	msr	BASEPRI, r0
   20900:	f04f 0003 	mov.w	r0, #3
   20904:	df02      	svc	2
}
   20906:	bd08      	pop	{r3, pc}
   20908:	0002e04a 	.word	0x0002e04a

0002090c <mpsl_low_prio_work_handler>:
{
   2090c:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2090e:	f04f 30ff 	mov.w	r0, #4294967295
   20912:	f04f 31ff 	mov.w	r1, #4294967295
   20916:	f7ff f8e1 	bl	1fadc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2091a:	b140      	cbz	r0, 2092e <mpsl_low_prio_work_handler+0x22>
   2091c:	4907      	ldr	r1, [pc, #28]	; (2093c <mpsl_low_prio_work_handler+0x30>)
   2091e:	4808      	ldr	r0, [pc, #32]	; (20940 <mpsl_low_prio_work_handler+0x34>)
   20920:	2247      	movs	r2, #71	; 0x47
   20922:	f005 f968 	bl	25bf6 <assert_print>
   20926:	4805      	ldr	r0, [pc, #20]	; (2093c <mpsl_low_prio_work_handler+0x30>)
   20928:	2147      	movs	r1, #71	; 0x47
   2092a:	f005 f95d 	bl	25be8 <assert_post_action>
	mpsl_low_priority_process();
   2092e:	f7ec fdfb 	bl	d528 <mpsl_low_priority_process>
}
   20932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   20936:	f7ff b8d9 	b.w	1faec <multithreading_lock_release>
   2093a:	bf00      	nop
   2093c:	0002e063 	.word	0x0002e063
   20940:	0002ab8c 	.word	0x0002ab8c

00020944 <mpsl_low_prio_irq_handler>:
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   20944:	4901      	ldr	r1, [pc, #4]	; (2094c <mpsl_low_prio_irq_handler+0x8>)
   20946:	4802      	ldr	r0, [pc, #8]	; (20950 <mpsl_low_prio_irq_handler+0xc>)
   20948:	f009 b8ca 	b.w	29ae0 <k_work_submit_to_queue>
   2094c:	20002650 	.word	0x20002650
   20950:	20001e60 	.word	0x20001e60

00020954 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   20954:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   20956:	2332      	movs	r3, #50	; 0x32
   20958:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2095c:	4a13      	ldr	r2, [pc, #76]	; (209ac <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   2095e:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   20960:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   20962:	2119      	movs	r1, #25
   20964:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   20966:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   2096a:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   2096e:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   20972:	f7e3 fb27 	bl	3fc4 <mpsl_init>
	if (err) {
   20976:	4604      	mov	r4, r0
   20978:	b9a0      	cbnz	r0, 209a4 <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   2097a:	480d      	ldr	r0, [pc, #52]	; (209b0 <mpsl_lib_init+0x5c>)
   2097c:	4629      	mov	r1, r5
   2097e:	f7ec fcbf 	bl	d300 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   20982:	4604      	mov	r4, r0
   20984:	b970      	cbnz	r0, 209a4 <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   20986:	4601      	mov	r1, r0
   20988:	462a      	mov	r2, r5
   2098a:	2008      	movs	r0, #8
   2098c:	f7f3 fd16 	bl	143bc <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   20990:	462a      	mov	r2, r5
   20992:	4621      	mov	r1, r4
   20994:	200b      	movs	r0, #11
   20996:	f7f3 fd11 	bl	143bc <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2099a:	462a      	mov	r2, r5
   2099c:	4621      	mov	r1, r4
   2099e:	4628      	mov	r0, r5
   209a0:	f7f3 fd0c 	bl	143bc <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   209a4:	4620      	mov	r0, r4
   209a6:	b003      	add	sp, #12
   209a8:	bd30      	pop	{r4, r5, pc}
   209aa:	bf00      	nop
   209ac:	000208ed 	.word	0x000208ed
   209b0:	20002660 	.word	0x20002660

000209b4 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   209b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   209b6:	4d0d      	ldr	r5, [pc, #52]	; (209ec <mpsl_low_prio_init+0x38>)
   209b8:	490d      	ldr	r1, [pc, #52]	; (209f0 <mpsl_low_prio_init+0x3c>)
   209ba:	2400      	movs	r4, #0
   209bc:	9400      	str	r4, [sp, #0]
   209be:	f06f 0309 	mvn.w	r3, #9
   209c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   209c6:	4628      	mov	r0, r5
   209c8:	f002 fa66 	bl	22e98 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   209cc:	4909      	ldr	r1, [pc, #36]	; (209f4 <mpsl_low_prio_init+0x40>)
   209ce:	4628      	mov	r0, r5
   209d0:	f008 ffda 	bl	29988 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   209d4:	4908      	ldr	r1, [pc, #32]	; (209f8 <mpsl_low_prio_init+0x44>)
   209d6:	4809      	ldr	r0, [pc, #36]	; (209fc <mpsl_low_prio_init+0x48>)
   209d8:	f002 f9a0 	bl	22d1c <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   209dc:	4622      	mov	r2, r4
   209de:	2104      	movs	r1, #4
   209e0:	2019      	movs	r0, #25
   209e2:	f7f3 fceb 	bl	143bc <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   209e6:	4620      	mov	r0, r4
   209e8:	b003      	add	sp, #12
   209ea:	bd30      	pop	{r4, r5, pc}
   209ec:	20001e60 	.word	0x20001e60
   209f0:	20004cc0 	.word	0x20004cc0
   209f4:	0002e090 	.word	0x0002e090
   209f8:	0002090d 	.word	0x0002090d
   209fc:	20002650 	.word	0x20002650

00020a00 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   20a00:	4b01      	ldr	r3, [pc, #4]	; (20a08 <mpsl_hfclk_callback+0x8>)
   20a02:	2000      	movs	r0, #0
   20a04:	681b      	ldr	r3, [r3, #0]
   20a06:	4718      	bx	r3
   20a08:	20002690 	.word	0x20002690

00020a0c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   20a0c:	b510      	push	{r4, lr}
	switch (domain) {
   20a0e:	b130      	cbz	r0, 20a1e <nrfx_clock_start+0x12>
   20a10:	2801      	cmp	r0, #1
   20a12:	d10a      	bne.n	20a2a <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   20a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   20a18:	4809      	ldr	r0, [pc, #36]	; (20a40 <nrfx_clock_start+0x34>)
   20a1a:	f7e3 b967 	b.w	3cec <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   20a1e:	4b09      	ldr	r3, [pc, #36]	; (20a44 <nrfx_clock_start+0x38>)
}
   20a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   20a24:	681b      	ldr	r3, [r3, #0]
   20a26:	2001      	movs	r0, #1
   20a28:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   20a2a:	4907      	ldr	r1, [pc, #28]	; (20a48 <nrfx_clock_start+0x3c>)
   20a2c:	4807      	ldr	r0, [pc, #28]	; (20a4c <nrfx_clock_start+0x40>)
   20a2e:	221c      	movs	r2, #28
   20a30:	f005 f8e1 	bl	25bf6 <assert_print>
}
   20a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   20a38:	4803      	ldr	r0, [pc, #12]	; (20a48 <nrfx_clock_start+0x3c>)
   20a3a:	211c      	movs	r1, #28
   20a3c:	f005 b8d4 	b.w	25be8 <assert_post_action>
   20a40:	00020a01 	.word	0x00020a01
   20a44:	20002690 	.word	0x20002690
   20a48:	0002e0a4 	.word	0x0002e0a4
   20a4c:	0002ab8c 	.word	0x0002ab8c

00020a50 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   20a50:	b508      	push	{r3, lr}
	switch (domain) {
   20a52:	b180      	cbz	r0, 20a76 <nrfx_clock_stop+0x26>
   20a54:	2801      	cmp	r0, #1
   20a56:	d103      	bne.n	20a60 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   20a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   20a5c:	f7e3 b938 	b.w	3cd0 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   20a60:	4905      	ldr	r1, [pc, #20]	; (20a78 <nrfx_clock_stop+0x28>)
   20a62:	4806      	ldr	r0, [pc, #24]	; (20a7c <nrfx_clock_stop+0x2c>)
   20a64:	222a      	movs	r2, #42	; 0x2a
   20a66:	f005 f8c6 	bl	25bf6 <assert_print>
}
   20a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   20a6e:	4802      	ldr	r0, [pc, #8]	; (20a78 <nrfx_clock_stop+0x28>)
   20a70:	212a      	movs	r1, #42	; 0x2a
   20a72:	f005 b8b9 	b.w	25be8 <assert_post_action>
}
   20a76:	bd08      	pop	{r3, pc}
   20a78:	0002e0a4 	.word	0x0002e0a4
   20a7c:	0002ab8c 	.word	0x0002ab8c

00020a80 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   20a80:	4b01      	ldr	r3, [pc, #4]	; (20a88 <nrfx_clock_init+0x8>)
   20a82:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   20a84:	4801      	ldr	r0, [pc, #4]	; (20a8c <nrfx_clock_init+0xc>)
   20a86:	4770      	bx	lr
   20a88:	20002690 	.word	0x20002690
   20a8c:	0bad0000 	.word	0x0bad0000

00020a90 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   20a90:	b538      	push	{r3, r4, r5, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   20a92:	4d33      	ldr	r5, [pc, #204]	; (20b60 <timeslot_callback+0xd0>)
   20a94:	7e2b      	ldrb	r3, [r5, #24]
   20a96:	4283      	cmp	r3, r0
{
   20a98:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(session_id == _context.session_id);
   20a9a:	d008      	beq.n	20aae <timeslot_callback+0x1e>
   20a9c:	4931      	ldr	r1, [pc, #196]	; (20b64 <timeslot_callback+0xd4>)
   20a9e:	4832      	ldr	r0, [pc, #200]	; (20b68 <timeslot_callback+0xd8>)
   20aa0:	2250      	movs	r2, #80	; 0x50
   20aa2:	f005 f8a8 	bl	25bf6 <assert_print>
   20aa6:	482f      	ldr	r0, [pc, #188]	; (20b64 <timeslot_callback+0xd4>)
   20aa8:	2150      	movs	r1, #80	; 0x50
   20aaa:	f005 f89d 	bl	25be8 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20aae:	f3bf 8f5b 	dmb	ish
   20ab2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   20ab4:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   20ab8:	b10b      	cbz	r3, 20abe <timeslot_callback+0x2e>
		return NULL;
	}

	switch (signal) {
   20aba:	2000      	movs	r0, #0
   20abc:	e023      	b.n	20b06 <timeslot_callback+0x76>
   20abe:	2c09      	cmp	r4, #9
   20ac0:	d847      	bhi.n	20b52 <timeslot_callback+0xc2>
   20ac2:	a301      	add	r3, pc, #4	; (adr r3, 20ac8 <timeslot_callback+0x38>)
   20ac4:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   20ac8:	00020af1 	.word	0x00020af1
   20acc:	00020b53 	.word	0x00020b53
   20ad0:	00020b53 	.word	0x00020b53
   20ad4:	00020b53 	.word	0x00020b53
   20ad8:	00020b53 	.word	0x00020b53
   20adc:	00020b29 	.word	0x00020b29
   20ae0:	00020b29 	.word	0x00020b29
   20ae4:	00020b21 	.word	0x00020b21
   20ae8:	00020b53 	.word	0x00020b53
   20aec:	00020abb 	.word	0x00020abb
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   20af0:	6a2b      	ldr	r3, [r5, #32]
   20af2:	e9d3 2000 	ldrd	r2, r0, [r3]
   20af6:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   20af8:	2801      	cmp	r0, #1
   20afa:	d005      	beq.n	20b08 <timeslot_callback+0x78>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   20afc:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   20afe:	2302      	movs	r3, #2
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   20b00:	481a      	ldr	r0, [pc, #104]	; (20b6c <timeslot_callback+0xdc>)
			_context.return_param.callback_action =
   20b02:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
   20b06:	bd38      	pop	{r3, r4, r5, pc}
			_context.timeslot_request.params.earliest.timeout_us =
   20b08:	f247 5330 	movw	r3, #30000	; 0x7530
			_context.timeslot_request.params.earliest.priority =
   20b0c:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   20b10:	4817      	ldr	r0, [pc, #92]	; (20b70 <timeslot_callback+0xe0>)
			_context.timeslot_request.params.earliest.timeout_us =
   20b12:	632b      	str	r3, [r5, #48]	; 0x30
			_context.return_param.callback_action =
   20b14:	2303      	movs	r3, #3
			_context.return_param.params.request.p_next =
   20b16:	63a8      	str	r0, [r5, #56]	; 0x38
			_context.return_param.callback_action =
   20b18:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	return &_context.return_param;
   20b1c:	3010      	adds	r0, #16
   20b1e:	e7f2      	b.n	20b06 <timeslot_callback+0x76>
	z_impl_k_sem_give(sem);
   20b20:	480f      	ldr	r0, [pc, #60]	; (20b60 <timeslot_callback+0xd0>)
   20b22:	f001 fe59 	bl	227d8 <z_impl_k_sem_give>
   20b26:	e7c8      	b.n	20aba <timeslot_callback+0x2a>
	_context.timeslot_request.params.earliest.timeout_us =
   20b28:	4b12      	ldr	r3, [pc, #72]	; (20b74 <timeslot_callback+0xe4>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   20b2a:	4911      	ldr	r1, [pc, #68]	; (20b70 <timeslot_callback+0xe0>)
   20b2c:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.timeout_us =
   20b2e:	632b      	str	r3, [r5, #48]	; 0x30
	_context.timeslot_request.params.earliest.priority =
   20b30:	2400      	movs	r4, #0
   20b32:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   20b36:	f7ec fb87 	bl	d248 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   20b3a:	2800      	cmp	r0, #0
   20b3c:	d0bd      	beq.n	20aba <timeslot_callback+0x2a>
   20b3e:	4909      	ldr	r1, [pc, #36]	; (20b64 <timeslot_callback+0xd4>)
   20b40:	4809      	ldr	r0, [pc, #36]	; (20b68 <timeslot_callback+0xd8>)
   20b42:	2248      	movs	r2, #72	; 0x48
   20b44:	f005 f857 	bl	25bf6 <assert_print>
   20b48:	2148      	movs	r1, #72	; 0x48
		__ASSERT(false, "unexpected signal: %u", signal);
   20b4a:	4806      	ldr	r0, [pc, #24]	; (20b64 <timeslot_callback+0xd4>)
   20b4c:	f005 f84c 	bl	25be8 <assert_post_action>
		return NULL;
   20b50:	e7b3      	b.n	20aba <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
   20b52:	4904      	ldr	r1, [pc, #16]	; (20b64 <timeslot_callback+0xd4>)
   20b54:	4804      	ldr	r0, [pc, #16]	; (20b68 <timeslot_callback+0xd8>)
   20b56:	227c      	movs	r2, #124	; 0x7c
   20b58:	f005 f84d 	bl	25bf6 <assert_print>
   20b5c:	217c      	movs	r1, #124	; 0x7c
   20b5e:	e7f4      	b.n	20b4a <timeslot_callback+0xba>
   20b60:	20002694 	.word	0x20002694
   20b64:	0002e0e1 	.word	0x0002e0e1
   20b68:	0002ab8c 	.word	0x0002ab8c
   20b6c:	200026c8 	.word	0x200026c8
   20b70:	200026b8 	.word	0x200026b8
   20b74:	0f423fff 	.word	0x0f423fff

00020b78 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   20b78:	4802      	ldr	r0, [pc, #8]	; (20b84 <nrf_flash_sync_init+0xc>)
   20b7a:	2201      	movs	r2, #1
   20b7c:	2100      	movs	r1, #0
   20b7e:	f008 bf4e 	b.w	29a1e <z_impl_k_sem_init>
   20b82:	bf00      	nop
   20b84:	20002694 	.word	0x20002694

00020b88 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   20b88:	4b01      	ldr	r3, [pc, #4]	; (20b90 <nrf_flash_sync_set_context+0x8>)
   20b8a:	61d8      	str	r0, [r3, #28]
}
   20b8c:	4770      	bx	lr
   20b8e:	bf00      	nop
   20b90:	20002694 	.word	0x20002694

00020b94 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   20b94:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20b96:	f04f 31ff 	mov.w	r1, #4294967295
{
   20b9a:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20b9c:	f04f 30ff 	mov.w	r0, #4294967295
   20ba0:	f7fe ff9c 	bl	1fadc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   20ba4:	b140      	cbz	r0, 20bb8 <nrf_flash_sync_exe+0x24>
   20ba6:	494d      	ldr	r1, [pc, #308]	; (20cdc <nrf_flash_sync_exe+0x148>)
   20ba8:	484d      	ldr	r0, [pc, #308]	; (20ce0 <nrf_flash_sync_exe+0x14c>)
   20baa:	2299      	movs	r2, #153	; 0x99
   20bac:	f005 f823 	bl	25bf6 <assert_print>
   20bb0:	484a      	ldr	r0, [pc, #296]	; (20cdc <nrf_flash_sync_exe+0x148>)
   20bb2:	2199      	movs	r1, #153	; 0x99
   20bb4:	f005 f818 	bl	25be8 <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   20bb8:	4c4a      	ldr	r4, [pc, #296]	; (20ce4 <nrf_flash_sync_exe+0x150>)
   20bba:	484b      	ldr	r0, [pc, #300]	; (20ce8 <nrf_flash_sync_exe+0x154>)
   20bbc:	f104 0118 	add.w	r1, r4, #24
   20bc0:	f7df fe8c 	bl	8dc <mpsl_timeslot_session_open>
   20bc4:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   20bc6:	f7fe ff91 	bl	1faec <multithreading_lock_release>

	if (ret < 0) {
   20bca:	2d00      	cmp	r5, #0
   20bcc:	da07      	bge.n	20bde <nrf_flash_sync_exe+0x4a>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   20bce:	4847      	ldr	r0, [pc, #284]	; (20cec <nrf_flash_sync_exe+0x158>)
   20bd0:	462a      	mov	r2, r5
   20bd2:	2145      	movs	r1, #69	; 0x45
   20bd4:	f005 f81d 	bl	25c12 <z_log_minimal_printk>
		return -ENOMEM;
   20bd8:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   20bdc:	bd70      	pop	{r4, r5, r6, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   20bde:	f240 1301 	movw	r3, #257	; 0x101
   20be2:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   20be4:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   20be6:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   20be8:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   20bea:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   20bec:	f247 5330 	movw	r3, #30000	; 0x7530
   20bf0:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   20bf2:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   20bf4:	f06f 0373 	mvn.w	r3, #115	; 0x73
   20bf8:	63e3      	str	r3, [r4, #60]	; 0x3c
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   20bfa:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20bfe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20c02:	f3bf 8f5b 	dmb	ish
   20c06:	e853 1f00 	ldrex	r1, [r3]
   20c0a:	e843 2000 	strex	r0, r2, [r3]
   20c0e:	2800      	cmp	r0, #0
   20c10:	d1f9      	bne.n	20c06 <nrf_flash_sync_exe+0x72>
   20c12:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   20c16:	68a2      	ldr	r2, [r4, #8]
   20c18:	461d      	mov	r5, r3
   20c1a:	b142      	cbz	r2, 20c2e <nrf_flash_sync_exe+0x9a>
   20c1c:	492f      	ldr	r1, [pc, #188]	; (20cdc <nrf_flash_sync_exe+0x148>)
   20c1e:	4830      	ldr	r0, [pc, #192]	; (20ce0 <nrf_flash_sync_exe+0x14c>)
   20c20:	22af      	movs	r2, #175	; 0xaf
   20c22:	f004 ffe8 	bl	25bf6 <assert_print>
   20c26:	482d      	ldr	r0, [pc, #180]	; (20cdc <nrf_flash_sync_exe+0x148>)
   20c28:	21af      	movs	r1, #175	; 0xaf
   20c2a:	f004 ffdd 	bl	25be8 <assert_post_action>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20c2e:	f04f 30ff 	mov.w	r0, #4294967295
   20c32:	f04f 31ff 	mov.w	r1, #4294967295
   20c36:	f7fe ff51 	bl	1fadc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   20c3a:	b140      	cbz	r0, 20c4e <nrf_flash_sync_exe+0xba>
   20c3c:	4927      	ldr	r1, [pc, #156]	; (20cdc <nrf_flash_sync_exe+0x148>)
   20c3e:	4828      	ldr	r0, [pc, #160]	; (20ce0 <nrf_flash_sync_exe+0x14c>)
   20c40:	22b2      	movs	r2, #178	; 0xb2
   20c42:	f004 ffd8 	bl	25bf6 <assert_print>
   20c46:	4825      	ldr	r0, [pc, #148]	; (20cdc <nrf_flash_sync_exe+0x148>)
   20c48:	21b2      	movs	r1, #178	; 0xb2
   20c4a:	f004 ffcd 	bl	25be8 <assert_post_action>
	ret = mpsl_timeslot_request(_context.session_id, req);
   20c4e:	4928      	ldr	r1, [pc, #160]	; (20cf0 <nrf_flash_sync_exe+0x15c>)
   20c50:	7e20      	ldrb	r0, [r4, #24]
   20c52:	f7ec faf9 	bl	d248 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   20c56:	b140      	cbz	r0, 20c6a <nrf_flash_sync_exe+0xd6>
   20c58:	4920      	ldr	r1, [pc, #128]	; (20cdc <nrf_flash_sync_exe+0x148>)
   20c5a:	4821      	ldr	r0, [pc, #132]	; (20ce0 <nrf_flash_sync_exe+0x14c>)
   20c5c:	22b4      	movs	r2, #180	; 0xb4
   20c5e:	f004 ffca 	bl	25bf6 <assert_print>
   20c62:	481e      	ldr	r0, [pc, #120]	; (20cdc <nrf_flash_sync_exe+0x148>)
   20c64:	21b4      	movs	r1, #180	; 0xb4
   20c66:	f004 ffbf 	bl	25be8 <assert_post_action>
	MULTITHREADING_LOCK_RELEASE();
   20c6a:	f7fe ff3f 	bl	1faec <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   20c6e:	4a21      	ldr	r2, [pc, #132]	; (20cf4 <nrf_flash_sync_exe+0x160>)
   20c70:	481c      	ldr	r0, [pc, #112]	; (20ce4 <nrf_flash_sync_exe+0x150>)
   20c72:	2300      	movs	r3, #0
   20c74:	f001 fdea 	bl	2284c <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   20c78:	2800      	cmp	r0, #0
   20c7a:	da0e      	bge.n	20c9a <nrf_flash_sync_exe+0x106>
		LOG_ERR("timeout");
   20c7c:	481e      	ldr	r0, [pc, #120]	; (20cf8 <nrf_flash_sync_exe+0x164>)
   20c7e:	2145      	movs	r1, #69	; 0x45
   20c80:	f004 ffc7 	bl	25c12 <z_log_minimal_printk>
   20c84:	f3bf 8f5b 	dmb	ish
   20c88:	2301      	movs	r3, #1
   20c8a:	e855 2f00 	ldrex	r2, [r5]
   20c8e:	e845 3100 	strex	r1, r3, [r5]
   20c92:	2900      	cmp	r1, #0
   20c94:	d1f9      	bne.n	20c8a <nrf_flash_sync_exe+0xf6>
   20c96:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20c9a:	f04f 30ff 	mov.w	r0, #4294967295
   20c9e:	f04f 31ff 	mov.w	r1, #4294967295
   20ca2:	f7fe ff1b 	bl	1fadc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   20ca6:	b140      	cbz	r0, 20cba <nrf_flash_sync_exe+0x126>
   20ca8:	490c      	ldr	r1, [pc, #48]	; (20cdc <nrf_flash_sync_exe+0x148>)
   20caa:	480d      	ldr	r0, [pc, #52]	; (20ce0 <nrf_flash_sync_exe+0x14c>)
   20cac:	22bf      	movs	r2, #191	; 0xbf
   20cae:	f004 ffa2 	bl	25bf6 <assert_print>
   20cb2:	480a      	ldr	r0, [pc, #40]	; (20cdc <nrf_flash_sync_exe+0x148>)
   20cb4:	21bf      	movs	r1, #191	; 0xbf
   20cb6:	f004 ff97 	bl	25be8 <assert_post_action>
	mpsl_timeslot_session_close(_context.session_id);
   20cba:	7e20      	ldrb	r0, [r4, #24]
   20cbc:	f7ec faff 	bl	d2be <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   20cc0:	f7fe ff14 	bl	1faec <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20cc4:	f3bf 8f5b 	dmb	ish
   20cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   20cca:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   20cce:	b113      	cbz	r3, 20cd6 <nrf_flash_sync_exe+0x142>
	z_impl_k_sem_reset(sem);
   20cd0:	4804      	ldr	r0, [pc, #16]	; (20ce4 <nrf_flash_sync_exe+0x150>)
   20cd2:	f001 fe25 	bl	22920 <z_impl_k_sem_reset>
	return _context.status;
   20cd6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   20cd8:	e780      	b.n	20bdc <nrf_flash_sync_exe+0x48>
   20cda:	bf00      	nop
   20cdc:	0002e0e1 	.word	0x0002e0e1
   20ce0:	0002ab8c 	.word	0x0002ab8c
   20ce4:	20002694 	.word	0x20002694
   20ce8:	00020a91 	.word	0x00020a91
   20cec:	0002e11b 	.word	0x0002e11b
   20cf0:	200026b8 	.word	0x200026b8
   20cf4:	000b7b44 	.word	0x000b7b44
   20cf8:	0002e146 	.word	0x0002e146

00020cfc <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20cfc:	4b07      	ldr	r3, [pc, #28]	; (20d1c <nrf_flash_sync_check_time_limit+0x20>)
   20cfe:	2201      	movs	r2, #1
   20d00:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   20d02:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   20d06:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   20d0a:	4418      	add	r0, r3
   20d0c:	4b04      	ldr	r3, [pc, #16]	; (20d20 <nrf_flash_sync_check_time_limit+0x24>)
   20d0e:	69db      	ldr	r3, [r3, #28]
}
   20d10:	4298      	cmp	r0, r3
   20d12:	bf34      	ite	cc
   20d14:	2000      	movcc	r0, #0
   20d16:	2001      	movcs	r0, #1
   20d18:	4770      	bx	lr
   20d1a:	bf00      	nop
   20d1c:	40008000 	.word	0x40008000
   20d20:	20002694 	.word	0x20002694

00020d24 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   20d24:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   20d28:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   20d2c:	2a06      	cmp	r2, #6
   20d2e:	d109      	bne.n	20d44 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   20d30:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   20d34:	f3c3 1303 	ubfx	r3, r3, #4, #4
   20d38:	3b03      	subs	r3, #3
   20d3a:	2b04      	cmp	r3, #4
   20d3c:	d802      	bhi.n	20d44 <nrf52_errata_16+0x20>
   20d3e:	4a02      	ldr	r2, [pc, #8]	; (20d48 <nrf52_errata_16+0x24>)
   20d40:	5cd0      	ldrb	r0, [r2, r3]
   20d42:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   20d44:	2000      	movs	r0, #0
    #endif
}
   20d46:	4770      	bx	lr
   20d48:	0002e172 	.word	0x0002e172

00020d4c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   20d4c:	4a02      	ldr	r2, [pc, #8]	; (20d58 <nvmc_wait+0xc>)
   20d4e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   20d52:	2b00      	cmp	r3, #0
   20d54:	d0fb      	beq.n	20d4e <nvmc_wait+0x2>
}
   20d56:	4770      	bx	lr
   20d58:	4001e000 	.word	0x4001e000

00020d5c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   20d5c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   20d5e:	f008 fcf4 	bl	2974a <nrf52_errata_108>
   20d62:	b140      	cbz	r0, 20d76 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   20d64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20d68:	4a90      	ldr	r2, [pc, #576]	; (20fac <SystemInit+0x250>)
   20d6a:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   20d6e:	f3c3 2304 	ubfx	r3, r3, #8, #5
   20d72:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   20d76:	f7ff ffd5 	bl	20d24 <nrf52_errata_16>
   20d7a:	b110      	cbz	r0, 20d82 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   20d7c:	4b8c      	ldr	r3, [pc, #560]	; (20fb0 <SystemInit+0x254>)
   20d7e:	4a8d      	ldr	r2, [pc, #564]	; (20fb4 <SystemInit+0x258>)
   20d80:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   20d82:	f008 fce2 	bl	2974a <nrf52_errata_108>
   20d86:	b148      	cbz	r0, 20d9c <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   20d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20d8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   20d90:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   20d94:	f3c3 3342 	ubfx	r3, r3, #13, #3
   20d98:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   20d9c:	f7ff ffc2 	bl	20d24 <nrf52_errata_16>
   20da0:	b130      	cbz	r0, 20db0 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   20da2:	4a85      	ldr	r2, [pc, #532]	; (20fb8 <SystemInit+0x25c>)
   20da4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   20da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   20dac:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   20db0:	f008 fccb 	bl	2974a <nrf52_errata_108>
   20db4:	b140      	cbz	r0, 20dc8 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   20db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20dba:	2200      	movs	r2, #0
   20dbc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   20dc0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   20dc4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   20dc8:	f7ff ffac 	bl	20d24 <nrf52_errata_16>
   20dcc:	b120      	cbz	r0, 20dd8 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   20dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20dd2:	2203      	movs	r2, #3
   20dd4:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   20dd8:	f7ff ffa4 	bl	20d24 <nrf52_errata_16>
   20ddc:	b160      	cbz	r0, 20df8 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   20dde:	4b77      	ldr	r3, [pc, #476]	; (20fbc <SystemInit+0x260>)
   20de0:	2205      	movs	r2, #5
   20de2:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   20de6:	2201      	movs	r2, #1
   20de8:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   20dec:	2200      	movs	r2, #0
   20dee:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   20df2:	223f      	movs	r2, #63	; 0x3f
   20df4:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   20df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20dfc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   20e00:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   20e02:	bf09      	itett	eq
   20e04:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   20e08:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   20e0c:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   20e10:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   20e14:	bf08      	it	eq
   20e16:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   20e1a:	2a06      	cmp	r2, #6
   20e1c:	d14d      	bne.n	20eba <SystemInit+0x15e>
            {
                switch(var2)
   20e1e:	3b03      	subs	r3, #3
   20e20:	2b04      	cmp	r3, #4
   20e22:	d803      	bhi.n	20e2c <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   20e24:	4a66      	ldr	r2, [pc, #408]	; (20fc0 <SystemInit+0x264>)
   20e26:	5cd3      	ldrb	r3, [r2, r3]
   20e28:	2b00      	cmp	r3, #0
   20e2a:	d046      	beq.n	20eba <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   20e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20e30:	4b64      	ldr	r3, [pc, #400]	; (20fc4 <SystemInit+0x268>)
   20e32:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   20e36:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   20e3a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   20e3e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   20e42:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   20e46:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   20e4a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   20e4e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   20e52:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   20e56:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   20e5a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20e5e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   20e62:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   20e66:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   20e6a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   20e6e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   20e72:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   20e76:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   20e7a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   20e7e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   20e82:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   20e86:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   20e8a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   20e8e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   20e92:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   20e96:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   20e9a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   20e9e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   20ea2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   20ea6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   20eaa:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   20eae:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   20eb2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   20eb6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   20eba:	f008 fc46 	bl	2974a <nrf52_errata_108>
   20ebe:	b148      	cbz	r0, 20ed4 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   20ec0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20ec4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   20ec8:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   20ecc:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   20ed0:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   20ed4:	f008 fc39 	bl	2974a <nrf52_errata_108>
   20ed8:	b148      	cbz	r0, 20eee <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   20eda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20ede:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   20ee2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   20ee4:	bf44      	itt	mi
   20ee6:	f06f 0201 	mvnmi.w	r2, #1
   20eea:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20eee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   20ef2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   20ef6:	2a06      	cmp	r2, #6
   20ef8:	d126      	bne.n	20f48 <SystemInit+0x1ec>
            {
                switch(var2)
   20efa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   20efe:	3b03      	subs	r3, #3
   20f00:	2b04      	cmp	r3, #4
   20f02:	d802      	bhi.n	20f0a <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   20f04:	4a30      	ldr	r2, [pc, #192]	; (20fc8 <SystemInit+0x26c>)
   20f06:	5cd3      	ldrb	r3, [r2, r3]
   20f08:	b163      	cbz	r3, 20f24 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   20f0a:	4a30      	ldr	r2, [pc, #192]	; (20fcc <SystemInit+0x270>)
   20f0c:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   20f10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   20f14:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20f18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   20f1c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   20f20:	2b06      	cmp	r3, #6
   20f22:	d111      	bne.n	20f48 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20f28:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   20f2c:	3b03      	subs	r3, #3
   20f2e:	2b04      	cmp	r3, #4
   20f30:	d802      	bhi.n	20f38 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   20f32:	4a27      	ldr	r2, [pc, #156]	; (20fd0 <SystemInit+0x274>)
   20f34:	5cd3      	ldrb	r3, [r2, r3]
   20f36:	b13b      	cbz	r3, 20f48 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   20f38:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20f3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   20f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20f44:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20f48:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20f4c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   20f50:	2a00      	cmp	r2, #0
   20f52:	db03      	blt.n	20f5c <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   20f54:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20f58:	2b00      	cmp	r3, #0
   20f5a:	da22      	bge.n	20fa2 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20f5c:	491d      	ldr	r1, [pc, #116]	; (20fd4 <SystemInit+0x278>)
   20f5e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   20f60:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20f64:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   20f68:	2415      	movs	r4, #21
    nvmc_wait();
   20f6a:	f7ff feef 	bl	20d4c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   20f6e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   20f72:	f7ff feeb 	bl	20d4c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   20f76:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   20f7a:	f7ff fee7 	bl	20d4c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20f7e:	2300      	movs	r3, #0
   20f80:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   20f84:	f7ff fee2 	bl	20d4c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   20f88:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   20f8c:	490a      	ldr	r1, [pc, #40]	; (20fb8 <SystemInit+0x25c>)
   20f8e:	4b12      	ldr	r3, [pc, #72]	; (20fd8 <SystemInit+0x27c>)
   20f90:	68ca      	ldr	r2, [r1, #12]
   20f92:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20f96:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   20f98:	60cb      	str	r3, [r1, #12]
   20f9a:	f3bf 8f4f 	dsb	sy
    __NOP();
   20f9e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   20fa0:	e7fd      	b.n	20f9e <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   20fa2:	4b0e      	ldr	r3, [pc, #56]	; (20fdc <SystemInit+0x280>)
   20fa4:	4a0e      	ldr	r2, [pc, #56]	; (20fe0 <SystemInit+0x284>)
   20fa6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   20fa8:	bd10      	pop	{r4, pc}
   20faa:	bf00      	nop
   20fac:	40013000 	.word	0x40013000
   20fb0:	4007c000 	.word	0x4007c000
   20fb4:	baadf00d 	.word	0xbaadf00d
   20fb8:	e000ed00 	.word	0xe000ed00
   20fbc:	40005000 	.word	0x40005000
   20fc0:	0002e163 	.word	0x0002e163
   20fc4:	4000c000 	.word	0x4000c000
   20fc8:	0002e168 	.word	0x0002e168
   20fcc:	40001000 	.word	0x40001000
   20fd0:	0002e16d 	.word	0x0002e16d
   20fd4:	4001e000 	.word	0x4001e000
   20fd8:	05fa0004 	.word	0x05fa0004
   20fdc:	20000694 	.word	0x20000694
   20fe0:	03d09000 	.word	0x03d09000

00020fe4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   20fe4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   20fe6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   20fe8:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   20fea:	fab2 f382 	clz	r3, r2
   20fee:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   20ff2:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   20ff4:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   20ff6:	d014      	beq.n	21022 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20ff8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   20ffc:	fa05 f303 	lsl.w	r3, r5, r3
   21000:	ea22 0303 	bic.w	r3, r2, r3
   21004:	e850 6f00 	ldrex	r6, [r0]
   21008:	4296      	cmp	r6, r2
   2100a:	d104      	bne.n	21016 <nrfx_flag32_alloc+0x32>
   2100c:	e840 3c00 	strex	ip, r3, [r0]
   21010:	f1bc 0f00 	cmp.w	ip, #0
   21014:	d1f6      	bne.n	21004 <nrfx_flag32_alloc+0x20>
   21016:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2101a:	d1e5      	bne.n	20fe8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   2101c:	4802      	ldr	r0, [pc, #8]	; (21028 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   2101e:	700c      	strb	r4, [r1, #0]
}
   21020:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   21022:	4802      	ldr	r0, [pc, #8]	; (2102c <nrfx_flag32_alloc+0x48>)
   21024:	e7fc      	b.n	21020 <nrfx_flag32_alloc+0x3c>
   21026:	bf00      	nop
   21028:	0bad0000 	.word	0x0bad0000
   2102c:	0bad0002 	.word	0x0bad0002

00021030 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   21030:	6803      	ldr	r3, [r0, #0]
   21032:	40cb      	lsrs	r3, r1
   21034:	07db      	lsls	r3, r3, #31
{
   21036:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   21038:	d415      	bmi.n	21066 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2103a:	2301      	movs	r3, #1
   2103c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   21040:	6803      	ldr	r3, [r0, #0]
   21042:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   21046:	ea41 0203 	orr.w	r2, r1, r3
   2104a:	e850 4f00 	ldrex	r4, [r0]
   2104e:	429c      	cmp	r4, r3
   21050:	d104      	bne.n	2105c <nrfx_flag32_free+0x2c>
   21052:	e840 2c00 	strex	ip, r2, [r0]
   21056:	f1bc 0f00 	cmp.w	ip, #0
   2105a:	d1f6      	bne.n	2104a <nrfx_flag32_free+0x1a>
   2105c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   21060:	d1ee      	bne.n	21040 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   21062:	4802      	ldr	r0, [pc, #8]	; (2106c <nrfx_flag32_free+0x3c>)
}
   21064:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21066:	4802      	ldr	r0, [pc, #8]	; (21070 <nrfx_flag32_free+0x40>)
   21068:	e7fc      	b.n	21064 <nrfx_flag32_free+0x34>
   2106a:	bf00      	nop
   2106c:	0bad0000 	.word	0x0bad0000
   21070:	0bad0004 	.word	0x0bad0004

00021074 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   21074:	4b03      	ldr	r3, [pc, #12]	; (21084 <pin_in_use_by_te+0x10>)
   21076:	3008      	adds	r0, #8
   21078:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2107c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   21080:	4770      	bx	lr
   21082:	bf00      	nop
   21084:	20000698 	.word	0x20000698

00021088 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   21088:	4b04      	ldr	r3, [pc, #16]	; (2109c <pin_has_trigger+0x14>)
   2108a:	3008      	adds	r0, #8
   2108c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   21090:	f010 001c 	ands.w	r0, r0, #28
   21094:	bf18      	it	ne
   21096:	2001      	movne	r0, #1
   21098:	4770      	bx	lr
   2109a:	bf00      	nop
   2109c:	20000698 	.word	0x20000698

000210a0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   210a0:	4b03      	ldr	r3, [pc, #12]	; (210b0 <pin_is_output+0x10>)
   210a2:	3008      	adds	r0, #8
   210a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   210a8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   210ac:	4770      	bx	lr
   210ae:	bf00      	nop
   210b0:	20000698 	.word	0x20000698

000210b4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   210b4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   210b6:	f100 0308 	add.w	r3, r0, #8
   210ba:	4c0c      	ldr	r4, [pc, #48]	; (210ec <call_handler+0x38>)
   210bc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   210c0:	05da      	lsls	r2, r3, #23
{
   210c2:	4605      	mov	r5, r0
   210c4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   210c6:	d507      	bpl.n	210d8 <call_handler+0x24>
   210c8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   210cc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   210d0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   210d4:	6852      	ldr	r2, [r2, #4]
   210d6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   210d8:	68a3      	ldr	r3, [r4, #8]
   210da:	b12b      	cbz	r3, 210e8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   210dc:	68e2      	ldr	r2, [r4, #12]
   210de:	4631      	mov	r1, r6
   210e0:	4628      	mov	r0, r5
    }
}
   210e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   210e6:	4718      	bx	r3
}
   210e8:	bd70      	pop	{r4, r5, r6, pc}
   210ea:	bf00      	nop
   210ec:	20000698 	.word	0x20000698

000210f0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   210f0:	4a19      	ldr	r2, [pc, #100]	; (21158 <release_handler+0x68>)
   210f2:	3008      	adds	r0, #8
{
   210f4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   210f6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   210fa:	05d9      	lsls	r1, r3, #23
   210fc:	d51d      	bpl.n	2113a <release_handler+0x4a>
   210fe:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   21102:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   21106:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2110a:	f102 0410 	add.w	r4, r2, #16
   2110e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   21110:	f834 3b02 	ldrh.w	r3, [r4], #2
   21114:	f413 7f80 	tst.w	r3, #256	; 0x100
   21118:	d003      	beq.n	21122 <release_handler+0x32>
   2111a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2111e:	4299      	cmp	r1, r3
   21120:	d00b      	beq.n	2113a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   21122:	3001      	adds	r0, #1
   21124:	2820      	cmp	r0, #32
   21126:	d1f3      	bne.n	21110 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   21128:	2300      	movs	r3, #0
   2112a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2112e:	480b      	ldr	r0, [pc, #44]	; (2115c <release_handler+0x6c>)
   21130:	f7ff ff7e 	bl	21030 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   21134:	4b0a      	ldr	r3, [pc, #40]	; (21160 <release_handler+0x70>)
   21136:	4298      	cmp	r0, r3
   21138:	d100      	bne.n	2113c <release_handler+0x4c>
}
   2113a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2113c:	4909      	ldr	r1, [pc, #36]	; (21164 <release_handler+0x74>)
   2113e:	480a      	ldr	r0, [pc, #40]	; (21168 <release_handler+0x78>)
   21140:	f44f 7299 	mov.w	r2, #306	; 0x132
   21144:	f004 fd57 	bl	25bf6 <assert_print>
}
   21148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2114c:	4805      	ldr	r0, [pc, #20]	; (21164 <release_handler+0x74>)
   2114e:	f44f 7199 	mov.w	r1, #306	; 0x132
   21152:	f004 bd49 	b.w	25be8 <assert_post_action>
   21156:	bf00      	nop
   21158:	20000698 	.word	0x20000698
   2115c:	200006ec 	.word	0x200006ec
   21160:	0bad0000 	.word	0x0bad0000
   21164:	0002e177 	.word	0x0002e177
   21168:	0002ab8c 	.word	0x0002ab8c

0002116c <pin_handler_trigger_uninit>:
{
   2116c:	b538      	push	{r3, r4, r5, lr}
   2116e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   21170:	f7ff ff80 	bl	21074 <pin_in_use_by_te>
   21174:	4c09      	ldr	r4, [pc, #36]	; (2119c <pin_handler_trigger_uninit+0x30>)
   21176:	f102 0508 	add.w	r5, r2, #8
   2117a:	b140      	cbz	r0, 2118e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2117c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   21180:	4907      	ldr	r1, [pc, #28]	; (211a0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   21182:	0b5b      	lsrs	r3, r3, #13
   21184:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   21188:	2000      	movs	r0, #0
   2118a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   2118e:	4610      	mov	r0, r2
   21190:	f7ff ffae 	bl	210f0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   21194:	2300      	movs	r3, #0
   21196:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   2119a:	bd38      	pop	{r3, r4, r5, pc}
   2119c:	20000698 	.word	0x20000698
   211a0:	40006000 	.word	0x40006000

000211a4 <nrf_gpio_pin_port_decode>:
{
   211a4:	b510      	push	{r4, lr}
   211a6:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   211a8:	6800      	ldr	r0, [r0, #0]
   211aa:	f008 fadf 	bl	2976c <nrf_gpio_pin_present_check>
   211ae:	b950      	cbnz	r0, 211c6 <nrf_gpio_pin_port_decode+0x22>
   211b0:	490f      	ldr	r1, [pc, #60]	; (211f0 <nrf_gpio_pin_port_decode+0x4c>)
   211b2:	4810      	ldr	r0, [pc, #64]	; (211f4 <nrf_gpio_pin_port_decode+0x50>)
   211b4:	f240 2247 	movw	r2, #583	; 0x247
   211b8:	f004 fd1d 	bl	25bf6 <assert_print>
   211bc:	480c      	ldr	r0, [pc, #48]	; (211f0 <nrf_gpio_pin_port_decode+0x4c>)
   211be:	f240 2147 	movw	r1, #583	; 0x247
   211c2:	f004 fd11 	bl	25be8 <assert_post_action>
    uint32_t pin_number = *p_pin;
   211c6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   211c8:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   211cc:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   211ce:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   211d0:	d00a      	beq.n	211e8 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   211d2:	4907      	ldr	r1, [pc, #28]	; (211f0 <nrf_gpio_pin_port_decode+0x4c>)
   211d4:	4807      	ldr	r0, [pc, #28]	; (211f4 <nrf_gpio_pin_port_decode+0x50>)
   211d6:	f44f 7213 	mov.w	r2, #588	; 0x24c
   211da:	f004 fd0c 	bl	25bf6 <assert_print>
   211de:	4804      	ldr	r0, [pc, #16]	; (211f0 <nrf_gpio_pin_port_decode+0x4c>)
   211e0:	f44f 7113 	mov.w	r1, #588	; 0x24c
   211e4:	f004 fd00 	bl	25be8 <assert_post_action>
}
   211e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   211ec:	bd10      	pop	{r4, pc}
   211ee:	bf00      	nop
   211f0:	0002dc5e 	.word	0x0002dc5e
   211f4:	0002ab8c 	.word	0x0002ab8c

000211f8 <nrfx_gpiote_input_configure>:
{
   211f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   211fa:	4604      	mov	r4, r0
   211fc:	b085      	sub	sp, #20
   211fe:	4617      	mov	r7, r2
   21200:	461d      	mov	r5, r3
    if (p_input_config)
   21202:	b1f1      	cbz	r1, 21242 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   21204:	f008 fabe 	bl	29784 <pin_is_task_output>
   21208:	b110      	cbz	r0, 21210 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   2120a:	484d      	ldr	r0, [pc, #308]	; (21340 <nrfx_gpiote_input_configure+0x148>)
}
   2120c:	b005      	add	sp, #20
   2120e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   21210:	460b      	mov	r3, r1
   21212:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   21216:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2121a:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2121e:	f10d 020f 	add.w	r2, sp, #15
   21222:	f10d 010e 	add.w	r1, sp, #14
   21226:	4620      	mov	r0, r4
   21228:	f008 fabb 	bl	297a2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2122c:	4a45      	ldr	r2, [pc, #276]	; (21344 <nrfx_gpiote_input_configure+0x14c>)
   2122e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   21232:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   21236:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2123a:	f043 0301 	orr.w	r3, r3, #1
   2123e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   21242:	b197      	cbz	r7, 2126a <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
   21244:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   21246:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   21248:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   2124a:	f7ff ff29 	bl	210a0 <pin_is_output>
   2124e:	b180      	cbz	r0, 21272 <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
   21250:	2a00      	cmp	r2, #0
   21252:	d1da      	bne.n	2120a <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   21254:	4a3b      	ldr	r2, [pc, #236]	; (21344 <nrfx_gpiote_input_configure+0x14c>)
   21256:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2125a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2125e:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   21262:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   21266:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   2126a:	2d00      	cmp	r5, #0
   2126c:	d13d      	bne.n	212ea <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
   2126e:	4836      	ldr	r0, [pc, #216]	; (21348 <nrfx_gpiote_input_configure+0x150>)
   21270:	e7cc      	b.n	2120c <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   21272:	4f34      	ldr	r7, [pc, #208]	; (21344 <nrfx_gpiote_input_configure+0x14c>)
   21274:	f104 0c08 	add.w	ip, r4, #8
   21278:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
   2127c:	f021 0120 	bic.w	r1, r1, #32
   21280:	04c9      	lsls	r1, r1, #19
   21282:	0cc9      	lsrs	r1, r1, #19
   21284:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
   21288:	2a00      	cmp	r2, #0
   2128a:	d0e3      	beq.n	21254 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
   2128c:	2e03      	cmp	r6, #3
   2128e:	d8bc      	bhi.n	2120a <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   21290:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   21292:	b92e      	cbnz	r6, 212a0 <nrfx_gpiote_input_configure+0xa8>
   21294:	4a2d      	ldr	r2, [pc, #180]	; (2134c <nrfx_gpiote_input_configure+0x154>)
   21296:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   2129a:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   2129e:	e7d9      	b.n	21254 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   212a0:	009a      	lsls	r2, r3, #2
   212a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   212a6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   212aa:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
   212ae:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   212b2:	f020 0003 	bic.w	r0, r0, #3
   212b6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   212ba:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   212be:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   212c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   212c6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   212ca:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   212ce:	0220      	lsls	r0, r4, #8
   212d0:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   212d4:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   212d8:	ea40 000e 	orr.w	r0, r0, lr
   212dc:	f041 0120 	orr.w	r1, r1, #32
   212e0:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
   212e4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   212e8:	e7b4      	b.n	21254 <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   212ea:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   212ee:	4620      	mov	r0, r4
   212f0:	f7ff fefe 	bl	210f0 <release_handler>
    if (!handler)
   212f4:	2e00      	cmp	r6, #0
   212f6:	d0ba      	beq.n	2126e <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   212f8:	4d12      	ldr	r5, [pc, #72]	; (21344 <nrfx_gpiote_input_configure+0x14c>)
   212fa:	682b      	ldr	r3, [r5, #0]
   212fc:	429e      	cmp	r6, r3
   212fe:	d104      	bne.n	2130a <nrfx_gpiote_input_configure+0x112>
   21300:	686b      	ldr	r3, [r5, #4]
   21302:	429f      	cmp	r7, r3
   21304:	d101      	bne.n	2130a <nrfx_gpiote_input_configure+0x112>
   21306:	2200      	movs	r2, #0
   21308:	e00a      	b.n	21320 <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   2130a:	4811      	ldr	r0, [pc, #68]	; (21350 <nrfx_gpiote_input_configure+0x158>)
   2130c:	f10d 010f 	add.w	r1, sp, #15
   21310:	f7ff fe68 	bl	20fe4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   21314:	4b0c      	ldr	r3, [pc, #48]	; (21348 <nrfx_gpiote_input_configure+0x150>)
   21316:	4298      	cmp	r0, r3
   21318:	f47f af78 	bne.w	2120c <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   2131c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   21320:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   21324:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21328:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   2132a:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2132c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   21330:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   21334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   21338:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   2133c:	e797      	b.n	2126e <nrfx_gpiote_input_configure+0x76>
   2133e:	bf00      	nop
   21340:	0bad0004 	.word	0x0bad0004
   21344:	20000698 	.word	0x20000698
   21348:	0bad0000 	.word	0x0bad0000
   2134c:	40006000 	.word	0x40006000
   21350:	200006ec 	.word	0x200006ec

00021354 <nrfx_gpiote_output_configure>:
{
   21354:	b5f0      	push	{r4, r5, r6, r7, lr}
   21356:	4604      	mov	r4, r0
   21358:	b085      	sub	sp, #20
   2135a:	4615      	mov	r5, r2
    if (p_config)
   2135c:	b321      	cbz	r1, 213a8 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   2135e:	f7ff fe9f 	bl	210a0 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   21362:	b920      	cbnz	r0, 2136e <nrfx_gpiote_output_configure+0x1a>
   21364:	4620      	mov	r0, r4
   21366:	f7ff fe85 	bl	21074 <pin_in_use_by_te>
   2136a:	2800      	cmp	r0, #0
   2136c:	d15e      	bne.n	2142c <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2136e:	4620      	mov	r0, r4
   21370:	f7ff fe8a 	bl	21088 <pin_has_trigger>
   21374:	b110      	cbz	r0, 2137c <nrfx_gpiote_output_configure+0x28>
   21376:	784b      	ldrb	r3, [r1, #1]
   21378:	2b01      	cmp	r3, #1
   2137a:	d057      	beq.n	2142c <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2137c:	2301      	movs	r3, #1
   2137e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   21382:	2300      	movs	r3, #0
   21384:	e9cd 1300 	strd	r1, r3, [sp]
   21388:	1c4a      	adds	r2, r1, #1
   2138a:	1c8b      	adds	r3, r1, #2
   2138c:	4620      	mov	r0, r4
   2138e:	f10d 010f 	add.w	r1, sp, #15
   21392:	f008 fa06 	bl	297a2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   21396:	4a26      	ldr	r2, [pc, #152]	; (21430 <nrfx_gpiote_output_configure+0xdc>)
   21398:	f104 0108 	add.w	r1, r4, #8
   2139c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   213a0:	f043 0303 	orr.w	r3, r3, #3
   213a4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   213a8:	b915      	cbnz	r5, 213b0 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   213aa:	4822      	ldr	r0, [pc, #136]	; (21434 <nrfx_gpiote_output_configure+0xe0>)
}
   213ac:	b005      	add	sp, #20
   213ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   213b0:	4620      	mov	r0, r4
   213b2:	f7ff fe75 	bl	210a0 <pin_is_output>
        if (pin_is_input(pin))
   213b6:	b3c8      	cbz	r0, 2142c <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   213b8:	4e1d      	ldr	r6, [pc, #116]	; (21430 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   213ba:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   213be:	f104 0708 	add.w	r7, r4, #8
   213c2:	4661      	mov	r1, ip
   213c4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   213c8:	0089      	lsls	r1, r1, #2
   213ca:	f020 0020 	bic.w	r0, r0, #32
   213ce:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   213d2:	04c0      	lsls	r0, r0, #19
   213d4:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   213d8:	0cc0      	lsrs	r0, r0, #19
   213da:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   213de:	2300      	movs	r3, #0
   213e0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   213e4:	786a      	ldrb	r2, [r5, #1]
   213e6:	2a00      	cmp	r2, #0
   213e8:	d0df      	beq.n	213aa <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   213ea:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   213ee:	78ad      	ldrb	r5, [r5, #2]
   213f0:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   213f4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   213f8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   213fc:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   21400:	0223      	lsls	r3, r4, #8
   21402:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   21406:	0412      	lsls	r2, r2, #16
   21408:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2140c:	ea43 030e 	orr.w	r3, r3, lr
   21410:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   21412:	052a      	lsls	r2, r5, #20
   21414:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   21418:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2141c:	4313      	orrs	r3, r2
   2141e:	f040 0020 	orr.w	r0, r0, #32
   21422:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   21426:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2142a:	e7be      	b.n	213aa <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
   2142c:	4802      	ldr	r0, [pc, #8]	; (21438 <nrfx_gpiote_output_configure+0xe4>)
   2142e:	e7bd      	b.n	213ac <nrfx_gpiote_output_configure+0x58>
   21430:	20000698 	.word	0x20000698
   21434:	0bad0000 	.word	0x0bad0000
   21438:	0bad0004 	.word	0x0bad0004

0002143c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2143c:	4b01      	ldr	r3, [pc, #4]	; (21444 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   2143e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   21442:	4770      	bx	lr
   21444:	20000698 	.word	0x20000698

00021448 <nrfx_gpiote_channel_get>:
{
   21448:	b538      	push	{r3, r4, r5, lr}
   2144a:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   2144c:	460d      	mov	r5, r1
   2144e:	b951      	cbnz	r1, 21466 <nrfx_gpiote_channel_get+0x1e>
   21450:	490c      	ldr	r1, [pc, #48]	; (21484 <nrfx_gpiote_channel_get+0x3c>)
   21452:	480d      	ldr	r0, [pc, #52]	; (21488 <nrfx_gpiote_channel_get+0x40>)
   21454:	f240 2235 	movw	r2, #565	; 0x235
   21458:	f004 fbcd 	bl	25bf6 <assert_print>
   2145c:	4809      	ldr	r0, [pc, #36]	; (21484 <nrfx_gpiote_channel_get+0x3c>)
   2145e:	f240 2135 	movw	r1, #565	; 0x235
   21462:	f004 fbc1 	bl	25be8 <assert_post_action>
    if (pin_in_use_by_te(pin))
   21466:	4620      	mov	r0, r4
   21468:	f7ff fe04 	bl	21074 <pin_in_use_by_te>
   2146c:	b138      	cbz	r0, 2147e <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2146e:	4b07      	ldr	r3, [pc, #28]	; (2148c <nrfx_gpiote_channel_get+0x44>)
        return NRFX_SUCCESS;
   21470:	4807      	ldr	r0, [pc, #28]	; (21490 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21472:	3408      	adds	r4, #8
   21474:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   21478:	0b5b      	lsrs	r3, r3, #13
   2147a:	702b      	strb	r3, [r5, #0]
}
   2147c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2147e:	4805      	ldr	r0, [pc, #20]	; (21494 <nrfx_gpiote_channel_get+0x4c>)
   21480:	e7fc      	b.n	2147c <nrfx_gpiote_channel_get+0x34>
   21482:	bf00      	nop
   21484:	0002e177 	.word	0x0002e177
   21488:	0002ab8c 	.word	0x0002ab8c
   2148c:	20000698 	.word	0x20000698
   21490:	0bad0000 	.word	0x0bad0000
   21494:	0bad0004 	.word	0x0bad0004

00021498 <nrfx_gpiote_init>:
{
   21498:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2149a:	4c0f      	ldr	r4, [pc, #60]	; (214d8 <nrfx_gpiote_init+0x40>)
   2149c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   214a0:	b9bd      	cbnz	r5, 214d2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   214a2:	2240      	movs	r2, #64	; 0x40
   214a4:	4629      	mov	r1, r5
   214a6:	f104 0010 	add.w	r0, r4, #16
   214aa:	f005 fb5d 	bl	26b68 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   214ae:	2006      	movs	r0, #6
   214b0:	f7f2 ff52 	bl	14358 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   214b4:	4b09      	ldr	r3, [pc, #36]	; (214dc <nrfx_gpiote_init+0x44>)
    return err_code;
   214b6:	480a      	ldr	r0, [pc, #40]	; (214e0 <nrfx_gpiote_init+0x48>)
   214b8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   214bc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   214c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   214c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   214c8:	2301      	movs	r3, #1
   214ca:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   214ce:	6563      	str	r3, [r4, #84]	; 0x54
}
   214d0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   214d2:	4804      	ldr	r0, [pc, #16]	; (214e4 <nrfx_gpiote_init+0x4c>)
   214d4:	e7fc      	b.n	214d0 <nrfx_gpiote_init+0x38>
   214d6:	bf00      	nop
   214d8:	20000698 	.word	0x20000698
   214dc:	40006000 	.word	0x40006000
   214e0:	0bad0000 	.word	0x0bad0000
   214e4:	0bad0005 	.word	0x0bad0005

000214e8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   214e8:	4b03      	ldr	r3, [pc, #12]	; (214f8 <nrfx_gpiote_is_init+0x10>)
   214ea:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   214ee:	3800      	subs	r0, #0
   214f0:	bf18      	it	ne
   214f2:	2001      	movne	r0, #1
   214f4:	4770      	bx	lr
   214f6:	bf00      	nop
   214f8:	20000698 	.word	0x20000698

000214fc <nrfx_gpiote_channel_free>:
{
   214fc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   214fe:	4801      	ldr	r0, [pc, #4]	; (21504 <nrfx_gpiote_channel_free+0x8>)
   21500:	f7ff bd96 	b.w	21030 <nrfx_flag32_free>
   21504:	200006e8 	.word	0x200006e8

00021508 <nrfx_gpiote_channel_alloc>:
{
   21508:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2150a:	4801      	ldr	r0, [pc, #4]	; (21510 <nrfx_gpiote_channel_alloc+0x8>)
   2150c:	f7ff bd6a 	b.w	20fe4 <nrfx_flag32_alloc>
   21510:	200006e8 	.word	0x200006e8

00021514 <nrfx_gpiote_trigger_enable>:
{
   21514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21516:	4604      	mov	r4, r0
   21518:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   2151a:	f7ff fdb5 	bl	21088 <pin_has_trigger>
   2151e:	b950      	cbnz	r0, 21536 <nrfx_gpiote_trigger_enable+0x22>
   21520:	492f      	ldr	r1, [pc, #188]	; (215e0 <nrfx_gpiote_trigger_enable+0xcc>)
   21522:	4830      	ldr	r0, [pc, #192]	; (215e4 <nrfx_gpiote_trigger_enable+0xd0>)
   21524:	f240 32df 	movw	r2, #991	; 0x3df
   21528:	f004 fb65 	bl	25bf6 <assert_print>
   2152c:	482c      	ldr	r0, [pc, #176]	; (215e0 <nrfx_gpiote_trigger_enable+0xcc>)
   2152e:	f240 31df 	movw	r1, #991	; 0x3df
   21532:	f004 fb59 	bl	25be8 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21536:	4620      	mov	r0, r4
   21538:	f7ff fd9c 	bl	21074 <pin_in_use_by_te>
   2153c:	4e2a      	ldr	r6, [pc, #168]	; (215e8 <nrfx_gpiote_trigger_enable+0xd4>)
   2153e:	f104 0708 	add.w	r7, r4, #8
   21542:	b318      	cbz	r0, 2158c <nrfx_gpiote_trigger_enable+0x78>
    return !pin_is_output(pin);
   21544:	4620      	mov	r0, r4
   21546:	f7ff fdab 	bl	210a0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2154a:	4602      	mov	r2, r0
   2154c:	b9f0      	cbnz	r0, 2158c <nrfx_gpiote_trigger_enable+0x78>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2154e:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   21552:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   21554:	4608      	mov	r0, r1
   21556:	f008 f920 	bl	2979a <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   2155a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2155e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21562:	601a      	str	r2, [r3, #0]
   21564:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   21566:	008b      	lsls	r3, r1, #2
   21568:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2156c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   21570:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21574:	f042 0201 	orr.w	r2, r2, #1
   21578:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   2157c:	b125      	cbz	r5, 21588 <nrfx_gpiote_trigger_enable+0x74>
    p_reg->INTENSET = mask;
   2157e:	4a1b      	ldr	r2, [pc, #108]	; (215ec <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   21580:	2301      	movs	r3, #1
   21582:	408b      	lsls	r3, r1
   21584:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21588:	b003      	add	sp, #12
   2158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   2158c:	b955      	cbnz	r5, 215a4 <nrfx_gpiote_trigger_enable+0x90>
   2158e:	4914      	ldr	r1, [pc, #80]	; (215e0 <nrfx_gpiote_trigger_enable+0xcc>)
   21590:	4814      	ldr	r0, [pc, #80]	; (215e4 <nrfx_gpiote_trigger_enable+0xd0>)
   21592:	f240 32ee 	movw	r2, #1006	; 0x3ee
   21596:	f004 fb2e 	bl	25bf6 <assert_print>
   2159a:	4811      	ldr	r0, [pc, #68]	; (215e0 <nrfx_gpiote_trigger_enable+0xcc>)
   2159c:	f240 31ee 	movw	r1, #1006	; 0x3ee
   215a0:	f004 fb22 	bl	25be8 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   215a4:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   215a8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   215ac:	2b04      	cmp	r3, #4
   215ae:	d012      	beq.n	215d6 <nrfx_gpiote_trigger_enable+0xc2>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   215b0:	2b05      	cmp	r3, #5
   215b2:	d012      	beq.n	215da <nrfx_gpiote_trigger_enable+0xc6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   215b4:	a801      	add	r0, sp, #4
   215b6:	9401      	str	r4, [sp, #4]
   215b8:	f7ff fdf4 	bl	211a4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   215bc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   215be:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   215c2:	40d9      	lsrs	r1, r3
   215c4:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   215c8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   215ca:	4620      	mov	r0, r4
}
   215cc:	b003      	add	sp, #12
   215ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   215d2:	f008 b931 	b.w	29838 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   215d6:	2103      	movs	r1, #3
   215d8:	e7f7      	b.n	215ca <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   215da:	2102      	movs	r1, #2
   215dc:	e7f5      	b.n	215ca <nrfx_gpiote_trigger_enable+0xb6>
   215de:	bf00      	nop
   215e0:	0002e177 	.word	0x0002e177
   215e4:	0002ab8c 	.word	0x0002ab8c
   215e8:	20000698 	.word	0x20000698
   215ec:	40006000 	.word	0x40006000

000215f0 <nrfx_gpiote_trigger_disable>:
{
   215f0:	b508      	push	{r3, lr}
   215f2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   215f4:	f7ff fd3e 	bl	21074 <pin_in_use_by_te>
   215f8:	b1c8      	cbz	r0, 2162e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   215fa:	4610      	mov	r0, r2
   215fc:	f7ff fd50 	bl	210a0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21600:	b9a8      	cbnz	r0, 2162e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21602:	3208      	adds	r2, #8
   21604:	4b0d      	ldr	r3, [pc, #52]	; (2163c <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   21606:	490e      	ldr	r1, [pc, #56]	; (21640 <nrfx_gpiote_trigger_disable+0x50>)
   21608:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2160c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2160e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21610:	409a      	lsls	r2, r3
   21612:	009b      	lsls	r3, r3, #2
   21614:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21618:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2161c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21620:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21624:	f022 0203 	bic.w	r2, r2, #3
   21628:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2162c:	bd08      	pop	{r3, pc}
   2162e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21632:	2100      	movs	r1, #0
   21634:	4610      	mov	r0, r2
   21636:	f008 b8ff 	b.w	29838 <nrf_gpio_cfg_sense_set>
   2163a:	bf00      	nop
   2163c:	20000698 	.word	0x20000698
   21640:	40006000 	.word	0x40006000

00021644 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   21644:	4b0e      	ldr	r3, [pc, #56]	; (21680 <nrfx_gpiote_pin_uninit+0x3c>)
   21646:	f100 0208 	add.w	r2, r0, #8
{
   2164a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2164c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   21650:	07db      	lsls	r3, r3, #31
{
   21652:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   21654:	d511      	bpl.n	2167a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   21656:	f7ff ffcb 	bl	215f0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2165a:	4620      	mov	r0, r4
   2165c:	f7ff fd86 	bl	2116c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21660:	a801      	add	r0, sp, #4
   21662:	9401      	str	r4, [sp, #4]
   21664:	f7ff fd9e 	bl	211a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21668:	9b01      	ldr	r3, [sp, #4]
   2166a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2166e:	2202      	movs	r2, #2
   21670:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   21674:	4803      	ldr	r0, [pc, #12]	; (21684 <nrfx_gpiote_pin_uninit+0x40>)
}
   21676:	b002      	add	sp, #8
   21678:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2167a:	4803      	ldr	r0, [pc, #12]	; (21688 <nrfx_gpiote_pin_uninit+0x44>)
   2167c:	e7fb      	b.n	21676 <nrfx_gpiote_pin_uninit+0x32>
   2167e:	bf00      	nop
   21680:	20000698 	.word	0x20000698
   21684:	0bad0000 	.word	0x0bad0000
   21688:	0bad0004 	.word	0x0bad0004

0002168c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   2168c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21690:	4b58      	ldr	r3, [pc, #352]	; (217f4 <nrfx_gpiote_irq_handler+0x168>)
    return p_reg->INTENSET & mask;
   21692:	4859      	ldr	r0, [pc, #356]	; (217f8 <nrfx_gpiote_irq_handler+0x16c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21694:	4959      	ldr	r1, [pc, #356]	; (217fc <nrfx_gpiote_irq_handler+0x170>)
    uint32_t status = 0;
   21696:	2600      	movs	r6, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   21698:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2169a:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2169c:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   2169e:	b135      	cbz	r5, 216ae <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   216a0:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   216a4:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   216a6:	bf1e      	ittt	ne
   216a8:	601c      	strne	r4, [r3, #0]
   216aa:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   216ac:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   216ae:	3304      	adds	r3, #4
   216b0:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   216b2:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   216b6:	d1f1      	bne.n	2169c <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   216b8:	4f4f      	ldr	r7, [pc, #316]	; (217f8 <nrfx_gpiote_irq_handler+0x16c>)
   216ba:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   216be:	b1bb      	cbz	r3, 216f0 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   216c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   216c4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   216c8:	9200      	str	r2, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   216ca:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   216ce:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   216d2:	9c00      	ldr	r4, [sp, #0]
   216d4:	b974      	cbnz	r4, 216f4 <nrfx_gpiote_irq_handler+0x68>
        *p_masks = gpio_regs[i]->LATCH;
   216d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   216da:	f8c7 417c 	str.w	r4, [r7, #380]	; 0x17c
   216de:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   216e2:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   216e6:	9300      	str	r3, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   216e8:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        if (latch[port_idx])
   216ec:	2b00      	cmp	r3, #0
   216ee:	d1ee      	bne.n	216ce <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   216f0:	2401      	movs	r4, #1
   216f2:	e07a      	b.n	217ea <nrfx_gpiote_irq_handler+0x15e>
                uint32_t pin = NRF_CTZ(latch[i]);
   216f4:	fa94 f4a4 	rbit	r4, r4
   216f8:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   216fc:	4a40      	ldr	r2, [pc, #256]	; (21800 <nrfx_gpiote_irq_handler+0x174>)
   216fe:	9401      	str	r4, [sp, #4]
   21700:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   21704:	08e0      	lsrs	r0, r4, #3
   21706:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   2170a:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2170e:	fa08 f103 	lsl.w	r1, r8, r3
   21712:	f81d 3000 	ldrb.w	r3, [sp, r0]
   21716:	ea23 0301 	bic.w	r3, r3, r1
   2171a:	f80d 3000 	strb.w	r3, [sp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2171e:	a801      	add	r0, sp, #4
   21720:	f7ff fd40 	bl	211a4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21724:	9b01      	ldr	r3, [sp, #4]
   21726:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2172a:	ea4f 099b 	mov.w	r9, fp, lsr #2
   2172e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
   21732:	f3cb 0a82 	ubfx	sl, fp, #2, #3
    if (is_level(trigger))
   21736:	f019 0f04 	tst.w	r9, #4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2173a:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2173c:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   21740:	d023      	beq.n	2178a <nrfx_gpiote_irq_handler+0xfe>
        call_handler(pin, trigger);
   21742:	4651      	mov	r1, sl
   21744:	4620      	mov	r0, r4
   21746:	f7ff fcb5 	bl	210b4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2174a:	a801      	add	r0, sp, #4
   2174c:	9401      	str	r4, [sp, #4]
   2174e:	f7ff fd29 	bl	211a4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21752:	9b01      	ldr	r3, [sp, #4]
   21754:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21758:	b2ed      	uxtb	r5, r5
   2175a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   2175e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   21762:	429d      	cmp	r5, r3
   21764:	d107      	bne.n	21776 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21766:	2100      	movs	r1, #0
   21768:	4620      	mov	r0, r4
   2176a:	f008 f865 	bl	29838 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   2176e:	4629      	mov	r1, r5
   21770:	4620      	mov	r0, r4
   21772:	f008 f861 	bl	29838 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21776:	a801      	add	r0, sp, #4
   21778:	9401      	str	r4, [sp, #4]
   2177a:	f7ff fd13 	bl	211a4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2177e:	9b01      	ldr	r3, [sp, #4]
   21780:	fa08 f303 	lsl.w	r3, r8, r3
   21784:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   21788:	e7a3      	b.n	216d2 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2178a:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2178c:	bf0c      	ite	eq
   2178e:	2103      	moveq	r1, #3
   21790:	2102      	movne	r1, #2
   21792:	4620      	mov	r0, r4
   21794:	f008 f850 	bl	29838 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   21798:	f1ba 0f03 	cmp.w	sl, #3
   2179c:	d004      	beq.n	217a8 <nrfx_gpiote_irq_handler+0x11c>
   2179e:	2d02      	cmp	r5, #2
   217a0:	d107      	bne.n	217b2 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   217a2:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   217a6:	d1e6      	bne.n	21776 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   217a8:	4659      	mov	r1, fp
   217aa:	4620      	mov	r0, r4
   217ac:	f7ff fc82 	bl	210b4 <call_handler>
   217b0:	e7e1      	b.n	21776 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   217b2:	2d03      	cmp	r5, #3
   217b4:	d1df      	bne.n	21776 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   217b6:	f1ba 0f02 	cmp.w	sl, #2
   217ba:	e7f4      	b.n	217a6 <nrfx_gpiote_irq_handler+0x11a>
        uint32_t ch = NRF_CTZ(mask);
   217bc:	fa96 f3a6 	rbit	r3, r6
   217c0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   217c4:	fa04 f203 	lsl.w	r2, r4, r3
   217c8:	009b      	lsls	r3, r3, #2
   217ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   217ce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   217d2:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   217d6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   217da:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   217de:	f3c0 2004 	ubfx	r0, r0, #8, #5
   217e2:	f3c1 4101 	ubfx	r1, r1, #16, #2
   217e6:	f7ff fc65 	bl	210b4 <call_handler>
    while (mask)
   217ea:	2e00      	cmp	r6, #0
   217ec:	d1e6      	bne.n	217bc <nrfx_gpiote_irq_handler+0x130>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   217ee:	b003      	add	sp, #12
   217f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217f4:	40006100 	.word	0x40006100
   217f8:	40006000 	.word	0x40006000
   217fc:	40006120 	.word	0x40006120
   21800:	20000698 	.word	0x20000698

00021804 <nvmc_word_write>:
   21804:	4a04      	ldr	r2, [pc, #16]	; (21818 <nvmc_word_write+0x14>)
   21806:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2180a:	07db      	lsls	r3, r3, #31
   2180c:	d5fb      	bpl.n	21806 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   2180e:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   21810:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   21814:	4770      	bx	lr
   21816:	bf00      	nop
   21818:	4001e000 	.word	0x4001e000

0002181c <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   2181c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   21820:	b510      	push	{r4, lr}
   21822:	6913      	ldr	r3, [r2, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   21824:	6952      	ldr	r2, [r2, #20]
    return flash_page_size_get() * flash_page_count_get();
   21826:	4353      	muls	r3, r2
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   21828:	4298      	cmp	r0, r3
{
   2182a:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2182c:	d30a      	bcc.n	21844 <nrfx_nvmc_page_erase+0x28>
    NRFX_ASSERT(is_valid_address(addr, false));
   2182e:	4912      	ldr	r1, [pc, #72]	; (21878 <nrfx_nvmc_page_erase+0x5c>)
   21830:	4812      	ldr	r0, [pc, #72]	; (2187c <nrfx_nvmc_page_erase+0x60>)
   21832:	f44f 7283 	mov.w	r2, #262	; 0x106
   21836:	f004 f9de 	bl	25bf6 <assert_print>
   2183a:	480f      	ldr	r0, [pc, #60]	; (21878 <nrfx_nvmc_page_erase+0x5c>)
   2183c:	f44f 7183 	mov.w	r1, #262	; 0x106
   21840:	f004 f9d2 	bl	25be8 <assert_post_action>
    return p_reg->CODEPAGESIZE;
   21844:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21848:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   2184a:	fbb4 f3f2 	udiv	r3, r4, r2
   2184e:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   21852:	b973      	cbnz	r3, 21872 <nrfx_nvmc_page_erase+0x56>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   21854:	4b0a      	ldr	r3, [pc, #40]	; (21880 <nrfx_nvmc_page_erase+0x64>)
   21856:	2202      	movs	r2, #2
   21858:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   2185c:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   21860:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   21864:	07d2      	lsls	r2, r2, #31
   21866:	d5fb      	bpl.n	21860 <nrfx_nvmc_page_erase+0x44>
    p_reg->CONFIG = (uint32_t)mode;
   21868:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   2186a:	4806      	ldr	r0, [pc, #24]	; (21884 <nrfx_nvmc_page_erase+0x68>)
   2186c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   21870:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   21872:	4805      	ldr	r0, [pc, #20]	; (21888 <nrfx_nvmc_page_erase+0x6c>)
   21874:	e7fc      	b.n	21870 <nrfx_nvmc_page_erase+0x54>
   21876:	bf00      	nop
   21878:	0002e1b5 	.word	0x0002e1b5
   2187c:	0002ab8c 	.word	0x0002ab8c
   21880:	4001e000 	.word	0x4001e000
   21884:	0bad0000 	.word	0x0bad0000
   21888:	0bad000a 	.word	0x0bad000a

0002188c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   2188c:	b570      	push	{r4, r5, r6, lr}
   2188e:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   21890:	2101      	movs	r1, #1
{
   21892:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   21894:	f007 ffdf 	bl	29856 <is_valid_address>
   21898:	b950      	cbnz	r0, 218b0 <nrfx_nvmc_word_write+0x24>
   2189a:	4912      	ldr	r1, [pc, #72]	; (218e4 <nrfx_nvmc_word_write+0x58>)
   2189c:	4812      	ldr	r0, [pc, #72]	; (218e8 <nrfx_nvmc_word_write+0x5c>)
   2189e:	f44f 72ca 	mov.w	r2, #404	; 0x194
   218a2:	f004 f9a8 	bl	25bf6 <assert_print>
   218a6:	480f      	ldr	r0, [pc, #60]	; (218e4 <nrfx_nvmc_word_write+0x58>)
   218a8:	f44f 71ca 	mov.w	r1, #404	; 0x194
   218ac:	f004 f99c 	bl	25be8 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   218b0:	07a3      	lsls	r3, r4, #30
   218b2:	d00a      	beq.n	218ca <nrfx_nvmc_word_write+0x3e>
   218b4:	490b      	ldr	r1, [pc, #44]	; (218e4 <nrfx_nvmc_word_write+0x58>)
   218b6:	480c      	ldr	r0, [pc, #48]	; (218e8 <nrfx_nvmc_word_write+0x5c>)
   218b8:	f240 1295 	movw	r2, #405	; 0x195
   218bc:	f004 f99b 	bl	25bf6 <assert_print>
   218c0:	4808      	ldr	r0, [pc, #32]	; (218e4 <nrfx_nvmc_word_write+0x58>)
   218c2:	f240 1195 	movw	r1, #405	; 0x195
   218c6:	f004 f98f 	bl	25be8 <assert_post_action>
   218ca:	4e08      	ldr	r6, [pc, #32]	; (218ec <nrfx_nvmc_word_write+0x60>)
   218cc:	2301      	movs	r3, #1
   218ce:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   218d2:	4629      	mov	r1, r5
   218d4:	4620      	mov	r0, r4
   218d6:	f7ff ff95 	bl	21804 <nvmc_word_write>
   218da:	2300      	movs	r3, #0
   218dc:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   218e0:	bd70      	pop	{r4, r5, r6, pc}
   218e2:	bf00      	nop
   218e4:	0002e1b5 	.word	0x0002e1b5
   218e8:	0002ab8c 	.word	0x0002ab8c
   218ec:	4001e000 	.word	0x4001e000

000218f0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   218f0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   218f2:	4801      	ldr	r0, [pc, #4]	; (218f8 <nrfx_ppi_channel_alloc+0x8>)
   218f4:	f7ff bb76 	b.w	20fe4 <nrfx_flag32_alloc>
   218f8:	200006f4 	.word	0x200006f4

000218fc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   218fc:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   218fe:	4c14      	ldr	r4, [pc, #80]	; (21950 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   21900:	4a14      	ldr	r2, [pc, #80]	; (21954 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   21902:	4915      	ldr	r1, [pc, #84]	; (21958 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   21904:	2303      	movs	r3, #3
   21906:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   21908:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2190a:	4b14      	ldr	r3, [pc, #80]	; (2195c <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   2190c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2190e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   21910:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21914:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   21916:	2300      	movs	r3, #0
   21918:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   2191a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2191c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   2191e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   21920:	4a0f      	ldr	r2, [pc, #60]	; (21960 <_DoInit+0x64>)
   21922:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   21924:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   21926:	2210      	movs	r2, #16
   21928:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   2192a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   2192c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2192e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   21930:	f005 f8c7 	bl	26ac2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   21934:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   21938:	490a      	ldr	r1, [pc, #40]	; (21964 <_DoInit+0x68>)
   2193a:	4620      	mov	r0, r4
   2193c:	f005 f8c1 	bl	26ac2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   21940:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   21944:	2320      	movs	r3, #32
   21946:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   21948:	f3bf 8f5f 	dmb	sy
}
   2194c:	bd10      	pop	{r4, pc}
   2194e:	bf00      	nop
   21950:	200026d8 	.word	0x200026d8
   21954:	0002e1f1 	.word	0x0002e1f1
   21958:	0002e1fa 	.word	0x0002e1fa
   2195c:	20002fc7 	.word	0x20002fc7
   21960:	20002fb7 	.word	0x20002fb7
   21964:	0002e1fe 	.word	0x0002e1fe

00021968 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21968:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   2196a:	4b16      	ldr	r3, [pc, #88]	; (219c4 <SEGGER_RTT_WriteNoLock+0x5c>)
   2196c:	2418      	movs	r4, #24
   2196e:	fb00 4504 	mla	r5, r0, r4, r4
   21972:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   21974:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21978:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   2197a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2197c:	2c01      	cmp	r4, #1
   2197e:	d00e      	beq.n	2199e <SEGGER_RTT_WriteNoLock+0x36>
   21980:	2c02      	cmp	r4, #2
   21982:	d018      	beq.n	219b6 <SEGGER_RTT_WriteNoLock+0x4e>
   21984:	b9e4      	cbnz	r4, 219c0 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   21986:	4628      	mov	r0, r5
   21988:	f007 ff87 	bl	2989a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   2198c:	4286      	cmp	r6, r0
   2198e:	d804      	bhi.n	2199a <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   21990:	4632      	mov	r2, r6
   21992:	4628      	mov	r0, r5
   21994:	f007 ff8a 	bl	298ac <_WriteNoCheck>
   21998:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   2199a:	4620      	mov	r0, r4
   2199c:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   2199e:	4628      	mov	r0, r5
   219a0:	f007 ff7b 	bl	2989a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   219a4:	4286      	cmp	r6, r0
   219a6:	4634      	mov	r4, r6
   219a8:	bf28      	it	cs
   219aa:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   219ac:	4622      	mov	r2, r4
   219ae:	4628      	mov	r0, r5
   219b0:	f007 ff7c 	bl	298ac <_WriteNoCheck>
    break;
   219b4:	e7f1      	b.n	2199a <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   219b6:	4628      	mov	r0, r5
}
   219b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   219bc:	f007 bf94 	b.w	298e8 <_WriteBlocking>
  switch (pRing->Flags) {
   219c0:	2400      	movs	r4, #0
  return Status;
   219c2:	e7ea      	b.n	2199a <SEGGER_RTT_WriteNoLock+0x32>
   219c4:	200026d8 	.word	0x200026d8

000219c8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   219c8:	4b0e      	ldr	r3, [pc, #56]	; (21a04 <z_sys_init_run_level+0x3c>)
{
   219ca:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   219cc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   219d0:	3001      	adds	r0, #1
   219d2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   219d6:	42a6      	cmp	r6, r4
   219d8:	d800      	bhi.n	219dc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   219da:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   219dc:	e9d4 3500 	ldrd	r3, r5, [r4]
   219e0:	4628      	mov	r0, r5
   219e2:	4798      	blx	r3
		if (dev != NULL) {
   219e4:	b165      	cbz	r5, 21a00 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   219e6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   219e8:	b130      	cbz	r0, 219f8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   219ea:	2800      	cmp	r0, #0
   219ec:	bfb8      	it	lt
   219ee:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   219f0:	28ff      	cmp	r0, #255	; 0xff
   219f2:	bfa8      	it	ge
   219f4:	20ff      	movge	r0, #255	; 0xff
   219f6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   219f8:	785a      	ldrb	r2, [r3, #1]
   219fa:	f042 0201 	orr.w	r2, r2, #1
   219fe:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21a00:	3408      	adds	r4, #8
   21a02:	e7e8      	b.n	219d6 <z_sys_init_run_level+0xe>
   21a04:	0002a92c 	.word	0x0002a92c

00021a08 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   21a08:	4b01      	ldr	r3, [pc, #4]	; (21a10 <z_impl_z_errno+0x8>)
   21a0a:	6898      	ldr	r0, [r3, #8]
}
   21a0c:	3064      	adds	r0, #100	; 0x64
   21a0e:	4770      	bx	lr
   21a10:	20002780 	.word	0x20002780

00021a14 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21a16:	4604      	mov	r4, r0
   21a18:	460e      	mov	r6, r1
	__asm__ volatile(
   21a1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a1e:	f3ef 8711 	mrs	r7, BASEPRI
   21a22:	f383 8812 	msr	BASEPRI_MAX, r3
   21a26:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   21a2a:	f002 fb3d 	bl	240a8 <z_impl_z_current_get>
   21a2e:	2c04      	cmp	r4, #4
   21a30:	bf96      	itet	ls
   21a32:	4b1e      	ldrls	r3, [pc, #120]	; (21aac <z_fatal_error+0x98>)
   21a34:	4b1e      	ldrhi	r3, [pc, #120]	; (21ab0 <z_fatal_error+0x9c>)
   21a36:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   21a3a:	2200      	movs	r2, #0
   21a3c:	4605      	mov	r5, r0
   21a3e:	9200      	str	r2, [sp, #0]
   21a40:	481c      	ldr	r0, [pc, #112]	; (21ab4 <z_fatal_error+0xa0>)
   21a42:	4622      	mov	r2, r4
   21a44:	2145      	movs	r1, #69	; 0x45
   21a46:	f004 f8e4 	bl	25c12 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   21a4a:	b13e      	cbz	r6, 21a5c <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   21a4c:	69f3      	ldr	r3, [r6, #28]
   21a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   21a52:	b11b      	cbz	r3, 21a5c <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   21a54:	4818      	ldr	r0, [pc, #96]	; (21ab8 <z_fatal_error+0xa4>)
   21a56:	2145      	movs	r1, #69	; 0x45
   21a58:	f004 f8db 	bl	25c12 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   21a5c:	b135      	cbz	r5, 21a6c <z_fatal_error+0x58>
   21a5e:	4628      	mov	r0, r5
   21a60:	f007 ff95 	bl	2998e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   21a64:	4603      	mov	r3, r0
   21a66:	b108      	cbz	r0, 21a6c <z_fatal_error+0x58>
   21a68:	7802      	ldrb	r2, [r0, #0]
   21a6a:	b902      	cbnz	r2, 21a6e <z_fatal_error+0x5a>
		thread_name = "unknown";
   21a6c:	4b13      	ldr	r3, [pc, #76]	; (21abc <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   21a6e:	4814      	ldr	r0, [pc, #80]	; (21ac0 <z_fatal_error+0xac>)
   21a70:	462a      	mov	r2, r5
   21a72:	2145      	movs	r1, #69	; 0x45
   21a74:	f004 f8cd 	bl	25c12 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   21a78:	4631      	mov	r1, r6
   21a7a:	4620      	mov	r0, r4
   21a7c:	f7fe f83c 	bl	1faf8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   21a80:	2c04      	cmp	r4, #4
   21a82:	d108      	bne.n	21a96 <z_fatal_error+0x82>
   21a84:	490f      	ldr	r1, [pc, #60]	; (21ac4 <z_fatal_error+0xb0>)
   21a86:	4810      	ldr	r0, [pc, #64]	; (21ac8 <z_fatal_error+0xb4>)
   21a88:	2293      	movs	r2, #147	; 0x93
   21a8a:	f004 f8b4 	bl	25bf6 <assert_print>
   21a8e:	480d      	ldr	r0, [pc, #52]	; (21ac4 <z_fatal_error+0xb0>)
   21a90:	2193      	movs	r1, #147	; 0x93
   21a92:	f004 f8a9 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   21a96:	f387 8811 	msr	BASEPRI, r7
   21a9a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   21a9e:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   21aa0:	b003      	add	sp, #12
   21aa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21aa6:	f7f3 b855 	b.w	14b54 <z_impl_k_thread_abort>
   21aaa:	bf00      	nop
   21aac:	0002a944 	.word	0x0002a944
   21ab0:	0002e205 	.word	0x0002e205
   21ab4:	0002e213 	.word	0x0002e213
   21ab8:	0002e240 	.word	0x0002e240
   21abc:	0002c01b 	.word	0x0002c01b
   21ac0:	0002e266 	.word	0x0002e266
   21ac4:	0002e283 	.word	0x0002e283
   21ac8:	0002ab8c 	.word	0x0002ab8c

00021acc <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   21acc:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   21ace:	4b0a      	ldr	r3, [pc, #40]	; (21af8 <bg_thread_main+0x2c>)
   21ad0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21ad2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   21ad4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21ad6:	f7ff ff77 	bl	219c8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   21ada:	f003 fa51 	bl	24f80 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   21ade:	2003      	movs	r0, #3
   21ae0:	f7ff ff72 	bl	219c8 <z_sys_init_run_level>

	z_init_static_threads();
   21ae4:	f000 fb28 	bl	22138 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   21ae8:	f7ef fee0 	bl	118ac <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   21aec:	4a03      	ldr	r2, [pc, #12]	; (21afc <bg_thread_main+0x30>)
   21aee:	7b13      	ldrb	r3, [r2, #12]
   21af0:	f023 0301 	bic.w	r3, r3, #1
   21af4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   21af6:	bd08      	pop	{r3, pc}
   21af8:	200033c7 	.word	0x200033c7
   21afc:	20001f80 	.word	0x20001f80

00021b00 <z_bss_zero>:
{
   21b00:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   21b02:	4803      	ldr	r0, [pc, #12]	; (21b10 <z_bss_zero+0x10>)
   21b04:	4a03      	ldr	r2, [pc, #12]	; (21b14 <z_bss_zero+0x14>)
   21b06:	2100      	movs	r1, #0
   21b08:	1a12      	subs	r2, r2, r0
   21b0a:	f007 ff2b 	bl	29964 <z_early_memset>
}
   21b0e:	bd08      	pop	{r3, pc}
   21b10:	200009f8 	.word	0x200009f8
   21b14:	200033c8 	.word	0x200033c8

00021b18 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   21b18:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   21b1a:	2300      	movs	r3, #0
{
   21b1c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   21b1e:	2201      	movs	r2, #1
   21b20:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   21b24:	4e13      	ldr	r6, [pc, #76]	; (21b74 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21b26:	4d14      	ldr	r5, [pc, #80]	; (21b78 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   21b28:	9301      	str	r3, [sp, #4]
   21b2a:	220f      	movs	r2, #15
   21b2c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   21b30:	4912      	ldr	r1, [pc, #72]	; (21b7c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21b32:	2318      	movs	r3, #24
   21b34:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   21b38:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   21b3c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   21b3e:	f44f 70c0 	mov.w	r0, #384	; 0x180
   21b42:	fb00 1104 	mla	r1, r0, r4, r1
   21b46:	4b0e      	ldr	r3, [pc, #56]	; (21b80 <z_init_cpu+0x68>)
   21b48:	9500      	str	r5, [sp, #0]
   21b4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21b4e:	4630      	mov	r0, r6
   21b50:	f000 fa52 	bl	21ff8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21b54:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   21b56:	480b      	ldr	r0, [pc, #44]	; (21b84 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   21b58:	752c      	strb	r4, [r5, #20]
   21b5a:	f023 0304 	bic.w	r3, r3, #4
   21b5e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   21b60:	f44f 6304 	mov.w	r3, #2112	; 0x840
   21b64:	fb03 0404 	mla	r4, r3, r4, r0
   21b68:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   21b6a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   21b6c:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   21b6e:	b006      	add	sp, #24
   21b70:	bd70      	pop	{r4, r5, r6, pc}
   21b72:	bf00      	nop
   21b74:	20001f00 	.word	0x20001f00
   21b78:	20002780 	.word	0x20002780
   21b7c:	20005540 	.word	0x20005540
   21b80:	0002227d 	.word	0x0002227d
   21b84:	200056c0 	.word	0x200056c0

00021b88 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   21b88:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   21b8a:	4b2f      	ldr	r3, [pc, #188]	; (21c48 <z_cstart+0xc0>)
   21b8c:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   21b8e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   21b92:	4d2e      	ldr	r5, [pc, #184]	; (21c4c <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   21b94:	4e2e      	ldr	r6, [pc, #184]	; (21c50 <z_cstart+0xc8>)
   21b96:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21b98:	4f2e      	ldr	r7, [pc, #184]	; (21c54 <z_cstart+0xcc>)
   21b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   21b9e:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21ba0:	23e0      	movs	r3, #224	; 0xe0
   21ba2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   21ba6:	2400      	movs	r4, #0
   21ba8:	2320      	movs	r3, #32
   21baa:	77eb      	strb	r3, [r5, #31]
   21bac:	762c      	strb	r4, [r5, #24]
   21bae:	766c      	strb	r4, [r5, #25]
   21bb0:	76ac      	strb	r4, [r5, #26]
   21bb2:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21bb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21bb8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21bbc:	626b      	str	r3, [r5, #36]	; 0x24
   21bbe:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   21bc2:	f7f2 ff3b 	bl	14a3c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21bc6:	f7f2 fb7b 	bl	142c0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21bca:	f04f 33ff 	mov.w	r3, #4294967295
   21bce:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   21bd0:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   21bd2:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   21bd4:	f7f3 f89e 	bl	14d14 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   21bd8:	f7f2 ffd2 	bl	14b80 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   21bdc:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   21be0:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   21be2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   21be6:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   21bea:	f003 f9ab 	bl	24f44 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   21bee:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   21bf0:	f007 fead 	bl	2994e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21bf4:	4620      	mov	r0, r4
   21bf6:	f7ff fee7 	bl	219c8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21bfa:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   21bfc:	4d16      	ldr	r5, [pc, #88]	; (21c58 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21bfe:	f7ff fee3 	bl	219c8 <z_sys_init_run_level>
	z_sched_init();
   21c02:	f002 f907 	bl	23e14 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21c06:	4b15      	ldr	r3, [pc, #84]	; (21c5c <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   21c08:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21c0a:	9305      	str	r3, [sp, #20]
   21c0c:	2301      	movs	r3, #1
   21c0e:	4914      	ldr	r1, [pc, #80]	; (21c60 <z_cstart+0xd8>)
   21c10:	9400      	str	r4, [sp, #0]
   21c12:	e9cd 4303 	strd	r4, r3, [sp, #12]
   21c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21c1a:	463b      	mov	r3, r7
   21c1c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   21c20:	4628      	mov	r0, r5
   21c22:	f000 f9e9 	bl	21ff8 <z_setup_new_thread>
   21c26:	7b6a      	ldrb	r2, [r5, #13]
   21c28:	4606      	mov	r6, r0
   21c2a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   21c2e:	4628      	mov	r0, r5
   21c30:	736a      	strb	r2, [r5, #13]
   21c32:	f001 fdf1 	bl	23818 <z_ready_thread>
	z_init_cpu(0);
   21c36:	4620      	mov	r0, r4
   21c38:	f7ff ff6e 	bl	21b18 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   21c3c:	463a      	mov	r2, r7
   21c3e:	4631      	mov	r1, r6
   21c40:	4628      	mov	r0, r5
   21c42:	f7f2 fc9b 	bl	1457c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   21c46:	bf00      	nop
   21c48:	20005f00 	.word	0x20005f00
   21c4c:	e000ed00 	.word	0xe000ed00
   21c50:	20002780 	.word	0x20002780
   21c54:	00021acd 	.word	0x00021acd
   21c58:	20001f80 	.word	0x20001f80
   21c5c:	0002e2ef 	.word	0x0002e2ef
   21c60:	20005100 	.word	0x20005100

00021c64 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   21c64:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21c66:	4c0c      	ldr	r4, [pc, #48]	; (21c98 <statics_init+0x34>)
   21c68:	4d0c      	ldr	r5, [pc, #48]	; (21c9c <statics_init+0x38>)
   21c6a:	4e0d      	ldr	r6, [pc, #52]	; (21ca0 <statics_init+0x3c>)
   21c6c:	42ac      	cmp	r4, r5
   21c6e:	d908      	bls.n	21c82 <statics_init+0x1e>
   21c70:	480c      	ldr	r0, [pc, #48]	; (21ca4 <statics_init+0x40>)
   21c72:	4631      	mov	r1, r6
   21c74:	2218      	movs	r2, #24
   21c76:	f003 ffbe 	bl	25bf6 <assert_print>
   21c7a:	2118      	movs	r1, #24
   21c7c:	4630      	mov	r0, r6
   21c7e:	f003 ffb3 	bl	25be8 <assert_post_action>
   21c82:	42ac      	cmp	r4, r5
   21c84:	d301      	bcc.n	21c8a <statics_init+0x26>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   21c86:	2000      	movs	r0, #0
   21c88:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   21c8a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   21c8e:	4620      	mov	r0, r4
   21c90:	f007 fe6c 	bl	2996c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21c94:	3418      	adds	r4, #24
   21c96:	e7e9      	b.n	21c6c <statics_init+0x8>
   21c98:	2000081c 	.word	0x2000081c
   21c9c:	20000834 	.word	0x20000834
   21ca0:	0002e2f7 	.word	0x0002e2f7
   21ca4:	0002ab8c 	.word	0x0002ab8c

00021ca8 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   21ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cac:	b085      	sub	sp, #20
   21cae:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   21cb2:	4606      	mov	r6, r0
   21cb4:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21cb6:	4648      	mov	r0, r9
   21cb8:	4639      	mov	r1, r7
{
   21cba:	4690      	mov	r8, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21cbc:	f007 ff60 	bl	29b80 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21cc0:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
	__asm__ volatile(
   21cc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ccc:	f3ef 8411 	mrs	r4, BASEPRI
   21cd0:	f383 8812 	msr	BASEPRI_MAX, r3
   21cd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21cd8:	4628      	mov	r0, r5
   21cda:	f000 faa9 	bl	22230 <z_spin_lock_valid>
   21cde:	b940      	cbnz	r0, 21cf2 <k_heap_aligned_alloc+0x4a>
   21ce0:	4932      	ldr	r1, [pc, #200]	; (21dac <k_heap_aligned_alloc+0x104>)
   21ce2:	4833      	ldr	r0, [pc, #204]	; (21db0 <k_heap_aligned_alloc+0x108>)
   21ce4:	228e      	movs	r2, #142	; 0x8e
   21ce6:	f003 ff86 	bl	25bf6 <assert_print>
   21cea:	4830      	ldr	r0, [pc, #192]	; (21dac <k_heap_aligned_alloc+0x104>)
   21cec:	218e      	movs	r1, #142	; 0x8e
   21cee:	f003 ff7b 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   21cf2:	4628      	mov	r0, r5
   21cf4:	f000 faba 	bl	2226c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21cf8:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   21cfc:	b15b      	cbz	r3, 21d16 <k_heap_aligned_alloc+0x6e>
   21cfe:	ea59 0307 	orrs.w	r3, r9, r7
   21d02:	d008      	beq.n	21d16 <k_heap_aligned_alloc+0x6e>
   21d04:	492b      	ldr	r1, [pc, #172]	; (21db4 <k_heap_aligned_alloc+0x10c>)
   21d06:	482a      	ldr	r0, [pc, #168]	; (21db0 <k_heap_aligned_alloc+0x108>)
   21d08:	2249      	movs	r2, #73	; 0x49
   21d0a:	f003 ff74 	bl	25bf6 <assert_print>
   21d0e:	4829      	ldr	r0, [pc, #164]	; (21db4 <k_heap_aligned_alloc+0x10c>)
   21d10:	2149      	movs	r1, #73	; 0x49
   21d12:	f003 ff69 	bl	25be8 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d16:	f8df 9094 	ldr.w	r9, [pc, #148]	; 21dac <k_heap_aligned_alloc+0x104>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21d1a:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   21d1e:	4642      	mov	r2, r8
   21d20:	4659      	mov	r1, fp
   21d22:	4630      	mov	r0, r6
   21d24:	f7f0 f952 	bl	11fcc <sys_heap_aligned_alloc>
   21d28:	4607      	mov	r7, r0
		now = sys_clock_tick_get();
   21d2a:	f002 fd9b 	bl	24864 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   21d2e:	b1a7      	cbz	r7, 21d5a <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d30:	4628      	mov	r0, r5
   21d32:	f000 fa8b 	bl	2224c <z_spin_unlock_valid>
   21d36:	b940      	cbnz	r0, 21d4a <k_heap_aligned_alloc+0xa2>
   21d38:	491c      	ldr	r1, [pc, #112]	; (21dac <k_heap_aligned_alloc+0x104>)
   21d3a:	481d      	ldr	r0, [pc, #116]	; (21db0 <k_heap_aligned_alloc+0x108>)
   21d3c:	22b9      	movs	r2, #185	; 0xb9
   21d3e:	f003 ff5a 	bl	25bf6 <assert_print>
   21d42:	481a      	ldr	r0, [pc, #104]	; (21dac <k_heap_aligned_alloc+0x104>)
   21d44:	21b9      	movs	r1, #185	; 0xb9
   21d46:	f003 ff4f 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   21d4a:	f384 8811 	msr	BASEPRI, r4
   21d4e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   21d52:	4638      	mov	r0, r7
   21d54:	b005      	add	sp, #20
   21d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   21d5a:	9b02      	ldr	r3, [sp, #8]
   21d5c:	1a18      	subs	r0, r3, r0
   21d5e:	9b03      	ldr	r3, [sp, #12]
   21d60:	eb63 0101 	sbc.w	r1, r3, r1
   21d64:	2801      	cmp	r0, #1
   21d66:	f171 0300 	sbcs.w	r3, r1, #0
   21d6a:	dbe1      	blt.n	21d30 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21d6c:	e9cd 0100 	strd	r0, r1, [sp]
   21d70:	4652      	mov	r2, sl
   21d72:	4621      	mov	r1, r4
   21d74:	4628      	mov	r0, r5
   21d76:	f001 feb3 	bl	23ae0 <z_pend_curr>
	__asm__ volatile(
   21d7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d7e:	f3ef 8411 	mrs	r4, BASEPRI
   21d82:	f383 8812 	msr	BASEPRI_MAX, r3
   21d86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d8a:	4628      	mov	r0, r5
   21d8c:	f000 fa50 	bl	22230 <z_spin_lock_valid>
   21d90:	b940      	cbnz	r0, 21da4 <k_heap_aligned_alloc+0xfc>
   21d92:	4807      	ldr	r0, [pc, #28]	; (21db0 <k_heap_aligned_alloc+0x108>)
   21d94:	4649      	mov	r1, r9
   21d96:	228e      	movs	r2, #142	; 0x8e
   21d98:	f003 ff2d 	bl	25bf6 <assert_print>
   21d9c:	218e      	movs	r1, #142	; 0x8e
   21d9e:	4648      	mov	r0, r9
   21da0:	f003 ff22 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   21da4:	4628      	mov	r0, r5
   21da6:	f000 fa61 	bl	2226c <z_spin_lock_set_owner>
	return k;
   21daa:	e7b8      	b.n	21d1e <k_heap_aligned_alloc+0x76>
   21dac:	0002b1aa 	.word	0x0002b1aa
   21db0:	0002ab8c 	.word	0x0002ab8c
   21db4:	0002e2f7 	.word	0x0002e2f7

00021db8 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   21db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21dba:	4604      	mov	r4, r0
   21dbc:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21dbe:	f100 0514 	add.w	r5, r0, #20
   21dc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   21dc6:	f3ef 8711 	mrs	r7, BASEPRI
   21dca:	f383 8812 	msr	BASEPRI_MAX, r3
   21dce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21dd2:	4628      	mov	r0, r5
   21dd4:	f000 fa2c 	bl	22230 <z_spin_lock_valid>
   21dd8:	b940      	cbnz	r0, 21dec <k_heap_free+0x34>
   21dda:	4916      	ldr	r1, [pc, #88]	; (21e34 <k_heap_free+0x7c>)
   21ddc:	4816      	ldr	r0, [pc, #88]	; (21e38 <k_heap_free+0x80>)
   21dde:	228e      	movs	r2, #142	; 0x8e
   21de0:	f003 ff09 	bl	25bf6 <assert_print>
   21de4:	4813      	ldr	r0, [pc, #76]	; (21e34 <k_heap_free+0x7c>)
   21de6:	218e      	movs	r1, #142	; 0x8e
   21de8:	f003 fefe 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   21dec:	4628      	mov	r0, r5
   21dee:	f000 fa3d 	bl	2226c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   21df2:	4620      	mov	r0, r4
   21df4:	4631      	mov	r1, r6
   21df6:	f7f0 f8b1 	bl	11f5c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   21dfa:	f104 000c 	add.w	r0, r4, #12
   21dfe:	f007 fea7 	bl	29b50 <z_unpend_all>
   21e02:	b128      	cbz	r0, 21e10 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   21e04:	4639      	mov	r1, r7
   21e06:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   21e08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   21e0c:	f001 bad4 	b.w	233b8 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e10:	4628      	mov	r0, r5
   21e12:	f000 fa1b 	bl	2224c <z_spin_unlock_valid>
   21e16:	b940      	cbnz	r0, 21e2a <k_heap_free+0x72>
   21e18:	4906      	ldr	r1, [pc, #24]	; (21e34 <k_heap_free+0x7c>)
   21e1a:	4807      	ldr	r0, [pc, #28]	; (21e38 <k_heap_free+0x80>)
   21e1c:	22b9      	movs	r2, #185	; 0xb9
   21e1e:	f003 feea 	bl	25bf6 <assert_print>
   21e22:	4804      	ldr	r0, [pc, #16]	; (21e34 <k_heap_free+0x7c>)
   21e24:	21b9      	movs	r1, #185	; 0xb9
   21e26:	f003 fedf 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   21e2a:	f387 8811 	msr	BASEPRI, r7
   21e2e:	f3bf 8f6f 	isb	sy
}
   21e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21e34:	0002b1aa 	.word	0x0002b1aa
   21e38:	0002ab8c 	.word	0x0002ab8c

00021e3c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   21e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21e3e:	4c14      	ldr	r4, [pc, #80]	; (21e90 <init_mem_slab_module+0x54>)
   21e40:	4d14      	ldr	r5, [pc, #80]	; (21e94 <init_mem_slab_module+0x58>)
   21e42:	4e15      	ldr	r6, [pc, #84]	; (21e98 <init_mem_slab_module+0x5c>)
   21e44:	42ac      	cmp	r4, r5
   21e46:	d908      	bls.n	21e5a <init_mem_slab_module+0x1e>
   21e48:	4814      	ldr	r0, [pc, #80]	; (21e9c <init_mem_slab_module+0x60>)
   21e4a:	4631      	mov	r1, r6
   21e4c:	223d      	movs	r2, #61	; 0x3d
   21e4e:	f003 fed2 	bl	25bf6 <assert_print>
   21e52:	213d      	movs	r1, #61	; 0x3d
   21e54:	4630      	mov	r0, r6
   21e56:	f003 fec7 	bl	25be8 <assert_post_action>
   21e5a:	42ac      	cmp	r4, r5
   21e5c:	d301      	bcc.n	21e62 <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   21e5e:	2000      	movs	r0, #0
	return rc;
}
   21e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   21e62:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   21e66:	ea42 0301 	orr.w	r3, r2, r1
   21e6a:	f013 0303 	ands.w	r3, r3, #3
   21e6e:	d10b      	bne.n	21e88 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   21e70:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   21e72:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   21e74:	4283      	cmp	r3, r0
   21e76:	d101      	bne.n	21e7c <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21e78:	3420      	adds	r4, #32
   21e7a:	e7e3      	b.n	21e44 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   21e7c:	69a7      	ldr	r7, [r4, #24]
   21e7e:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   21e80:	3301      	adds	r3, #1
		slab->free_list = p;
   21e82:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   21e84:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   21e86:	e7f5      	b.n	21e74 <init_mem_slab_module+0x38>
	return rc;
   21e88:	f06f 0015 	mvn.w	r0, #21
   21e8c:	e7e8      	b.n	21e60 <init_mem_slab_module+0x24>
   21e8e:	bf00      	nop
   21e90:	200007bc 	.word	0x200007bc
   21e94:	2000081c 	.word	0x2000081c
   21e98:	0002e319 	.word	0x0002e319
   21e9c:	0002ab8c 	.word	0x0002ab8c

00021ea0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   21ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21ea4:	4604      	mov	r4, r0
   21ea6:	460d      	mov	r5, r1
   21ea8:	4690      	mov	r8, r2
   21eaa:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   21eac:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   21eb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   21eb4:	f3ef 8911 	mrs	r9, BASEPRI
   21eb8:	f383 8812 	msr	BASEPRI_MAX, r3
   21ebc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ec0:	4630      	mov	r0, r6
   21ec2:	f000 f9b5 	bl	22230 <z_spin_lock_valid>
   21ec6:	b940      	cbnz	r0, 21eda <k_mem_slab_alloc+0x3a>
   21ec8:	491f      	ldr	r1, [pc, #124]	; (21f48 <k_mem_slab_alloc+0xa8>)
   21eca:	4820      	ldr	r0, [pc, #128]	; (21f4c <k_mem_slab_alloc+0xac>)
   21ecc:	228e      	movs	r2, #142	; 0x8e
   21ece:	f003 fe92 	bl	25bf6 <assert_print>
   21ed2:	481d      	ldr	r0, [pc, #116]	; (21f48 <k_mem_slab_alloc+0xa8>)
   21ed4:	218e      	movs	r1, #142	; 0x8e
   21ed6:	f003 fe87 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   21eda:	4630      	mov	r0, r6
   21edc:	f000 f9c6 	bl	2226c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   21ee0:	69a3      	ldr	r3, [r4, #24]
   21ee2:	b1c3      	cbz	r3, 21f16 <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   21ee4:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   21ee6:	681b      	ldr	r3, [r3, #0]
   21ee8:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   21eea:	69e3      	ldr	r3, [r4, #28]
   21eec:	3301      	adds	r3, #1
   21eee:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   21ef0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ef2:	4630      	mov	r0, r6
   21ef4:	f000 f9aa 	bl	2224c <z_spin_unlock_valid>
   21ef8:	b940      	cbnz	r0, 21f0c <k_mem_slab_alloc+0x6c>
   21efa:	4913      	ldr	r1, [pc, #76]	; (21f48 <k_mem_slab_alloc+0xa8>)
   21efc:	4813      	ldr	r0, [pc, #76]	; (21f4c <k_mem_slab_alloc+0xac>)
   21efe:	22b9      	movs	r2, #185	; 0xb9
   21f00:	f003 fe79 	bl	25bf6 <assert_print>
   21f04:	4810      	ldr	r0, [pc, #64]	; (21f48 <k_mem_slab_alloc+0xa8>)
   21f06:	21b9      	movs	r1, #185	; 0xb9
   21f08:	f003 fe6e 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   21f0c:	f389 8811 	msr	BASEPRI, r9
   21f10:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   21f14:	e013      	b.n	21f3e <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   21f16:	ea58 0207 	orrs.w	r2, r8, r7
   21f1a:	d103      	bne.n	21f24 <k_mem_slab_alloc+0x84>
		*mem = NULL;
   21f1c:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   21f1e:	f06f 040b 	mvn.w	r4, #11
   21f22:	e7e6      	b.n	21ef2 <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   21f24:	4622      	mov	r2, r4
   21f26:	e9cd 8700 	strd	r8, r7, [sp]
   21f2a:	4649      	mov	r1, r9
   21f2c:	4630      	mov	r0, r6
   21f2e:	f001 fdd7 	bl	23ae0 <z_pend_curr>
		if (result == 0) {
   21f32:	4604      	mov	r4, r0
   21f34:	b918      	cbnz	r0, 21f3e <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   21f36:	4b06      	ldr	r3, [pc, #24]	; (21f50 <k_mem_slab_alloc+0xb0>)
   21f38:	689b      	ldr	r3, [r3, #8]
   21f3a:	695b      	ldr	r3, [r3, #20]
   21f3c:	602b      	str	r3, [r5, #0]
}
   21f3e:	4620      	mov	r0, r4
   21f40:	b003      	add	sp, #12
   21f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21f46:	bf00      	nop
   21f48:	0002b1aa 	.word	0x0002b1aa
   21f4c:	0002ab8c 	.word	0x0002ab8c
   21f50:	20002780 	.word	0x20002780

00021f54 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   21f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f58:	4604      	mov	r4, r0
   21f5a:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   21f5c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   21f60:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f64:	f3ef 8711 	mrs	r7, BASEPRI
   21f68:	f383 8812 	msr	BASEPRI_MAX, r3
   21f6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f70:	4630      	mov	r0, r6
   21f72:	f000 f95d 	bl	22230 <z_spin_lock_valid>
   21f76:	b940      	cbnz	r0, 21f8a <k_mem_slab_free+0x36>
   21f78:	491d      	ldr	r1, [pc, #116]	; (21ff0 <k_mem_slab_free+0x9c>)
   21f7a:	481e      	ldr	r0, [pc, #120]	; (21ff4 <k_mem_slab_free+0xa0>)
   21f7c:	228e      	movs	r2, #142	; 0x8e
   21f7e:	f003 fe3a 	bl	25bf6 <assert_print>
   21f82:	481b      	ldr	r0, [pc, #108]	; (21ff0 <k_mem_slab_free+0x9c>)
   21f84:	218e      	movs	r1, #142	; 0x8e
   21f86:	f003 fe2f 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   21f8a:	4630      	mov	r0, r6
   21f8c:	f000 f96e 	bl	2226c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   21f90:	f8d4 8018 	ldr.w	r8, [r4, #24]
   21f94:	f1b8 0f00 	cmp.w	r8, #0
   21f98:	d10f      	bne.n	21fba <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   21f9a:	4620      	mov	r0, r4
   21f9c:	f001 fefc 	bl	23d98 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   21fa0:	b158      	cbz	r0, 21fba <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   21fa2:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   21fa4:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   21fa6:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   21faa:	f001 fc35 	bl	23818 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   21fae:	4639      	mov	r1, r7
   21fb0:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   21fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   21fb6:	f001 b9ff 	b.w	233b8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   21fba:	682b      	ldr	r3, [r5, #0]
   21fbc:	69a2      	ldr	r2, [r4, #24]
   21fbe:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   21fc0:	682b      	ldr	r3, [r5, #0]
   21fc2:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   21fc4:	69e3      	ldr	r3, [r4, #28]
   21fc6:	3b01      	subs	r3, #1
   21fc8:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21fca:	4630      	mov	r0, r6
   21fcc:	f000 f93e 	bl	2224c <z_spin_unlock_valid>
   21fd0:	b940      	cbnz	r0, 21fe4 <k_mem_slab_free+0x90>
   21fd2:	4907      	ldr	r1, [pc, #28]	; (21ff0 <k_mem_slab_free+0x9c>)
   21fd4:	4807      	ldr	r0, [pc, #28]	; (21ff4 <k_mem_slab_free+0xa0>)
   21fd6:	22b9      	movs	r2, #185	; 0xb9
   21fd8:	f003 fe0d 	bl	25bf6 <assert_print>
   21fdc:	4804      	ldr	r0, [pc, #16]	; (21ff0 <k_mem_slab_free+0x9c>)
   21fde:	21b9      	movs	r1, #185	; 0xb9
   21fe0:	f003 fe02 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   21fe4:	f387 8811 	msr	BASEPRI, r7
   21fe8:	f3bf 8f6f 	isb	sy
}
   21fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21ff0:	0002b1aa 	.word	0x0002b1aa
   21ff4:	0002ab8c 	.word	0x0002ab8c

00021ff8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   21ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21ffc:	b085      	sub	sp, #20
   21ffe:	4604      	mov	r4, r0
   22000:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   22004:	f1b8 0f0f 	cmp.w	r8, #15
{
   22008:	460f      	mov	r7, r1
   2200a:	4615      	mov	r5, r2
   2200c:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   2200e:	d132      	bne.n	22076 <z_setup_new_thread+0x7e>
   22010:	4b21      	ldr	r3, [pc, #132]	; (22098 <z_setup_new_thread+0xa0>)
   22012:	4599      	cmp	r9, r3
   22014:	d133      	bne.n	2207e <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   22016:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   2201a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2201e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22020:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22022:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   22024:	2304      	movs	r3, #4
   22026:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22028:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2202c:	f107 0340 	add.w	r3, r7, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   22030:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22034:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   22036:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2203a:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2203c:	f105 0840 	add.w	r8, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22042:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   22044:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22048:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   2204a:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2204c:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2204e:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   22052:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   22054:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   22056:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22058:	4642      	mov	r2, r8
   2205a:	4639      	mov	r1, r7
   2205c:	4620      	mov	r0, r4
   2205e:	f7f2 fa5b 	bl	14518 <arch_new_thread>
	if (!_current) {
   22062:	4b0e      	ldr	r3, [pc, #56]	; (2209c <z_setup_new_thread+0xa4>)
	new_thread->init_data = NULL;
   22064:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   22066:	689b      	ldr	r3, [r3, #8]
   22068:	b103      	cbz	r3, 2206c <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   2206a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   2206c:	6763      	str	r3, [r4, #116]	; 0x74
}
   2206e:	4640      	mov	r0, r8
   22070:	b005      	add	sp, #20
   22072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   22076:	f108 0310 	add.w	r3, r8, #16
   2207a:	2b1e      	cmp	r3, #30
   2207c:	d9cb      	bls.n	22016 <z_setup_new_thread+0x1e>
   2207e:	4908      	ldr	r1, [pc, #32]	; (220a0 <z_setup_new_thread+0xa8>)
   22080:	4808      	ldr	r0, [pc, #32]	; (220a4 <z_setup_new_thread+0xac>)
   22082:	f44f 7206 	mov.w	r2, #536	; 0x218
   22086:	f003 fdb6 	bl	25bf6 <assert_print>
   2208a:	4805      	ldr	r0, [pc, #20]	; (220a0 <z_setup_new_thread+0xa8>)
   2208c:	f44f 7106 	mov.w	r1, #536	; 0x218
   22090:	f003 fdaa 	bl	25be8 <assert_post_action>
   22094:	e7bf      	b.n	22016 <z_setup_new_thread+0x1e>
   22096:	bf00      	nop
   22098:	0002227d 	.word	0x0002227d
   2209c:	20002780 	.word	0x20002780
   220a0:	0002e33e 	.word	0x0002e33e
   220a4:	0002ab8c 	.word	0x0002ab8c

000220a8 <z_impl_k_thread_create>:
{
   220a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   220ac:	b087      	sub	sp, #28
   220ae:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   220b2:	4604      	mov	r4, r0
   220b4:	460f      	mov	r7, r1
   220b6:	4690      	mov	r8, r2
   220b8:	4699      	mov	r9, r3
   220ba:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   220be:	b153      	cbz	r3, 220d6 <z_impl_k_thread_create+0x2e>
   220c0:	491a      	ldr	r1, [pc, #104]	; (2212c <z_impl_k_thread_create+0x84>)
   220c2:	481b      	ldr	r0, [pc, #108]	; (22130 <z_impl_k_thread_create+0x88>)
   220c4:	f240 2287 	movw	r2, #647	; 0x287
   220c8:	f003 fd95 	bl	25bf6 <assert_print>
   220cc:	4817      	ldr	r0, [pc, #92]	; (2212c <z_impl_k_thread_create+0x84>)
   220ce:	f240 2187 	movw	r1, #647	; 0x287
   220d2:	f003 fd89 	bl	25be8 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   220d6:	2300      	movs	r3, #0
   220d8:	9305      	str	r3, [sp, #20]
   220da:	9b12      	ldr	r3, [sp, #72]	; 0x48
   220dc:	9304      	str	r3, [sp, #16]
   220de:	9b11      	ldr	r3, [sp, #68]	; 0x44
   220e0:	9303      	str	r3, [sp, #12]
   220e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   220e4:	9302      	str	r3, [sp, #8]
   220e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   220e8:	9301      	str	r3, [sp, #4]
   220ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   220ec:	9300      	str	r3, [sp, #0]
   220ee:	4642      	mov	r2, r8
   220f0:	464b      	mov	r3, r9
   220f2:	4639      	mov	r1, r7
   220f4:	4620      	mov	r0, r4
   220f6:	f7ff ff7f 	bl	21ff8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   220fa:	f1b5 3fff 	cmp.w	r5, #4294967295
   220fe:	bf08      	it	eq
   22100:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   22104:	d005      	beq.n	22112 <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22106:	ea55 0306 	orrs.w	r3, r5, r6
   2210a:	d106      	bne.n	2211a <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   2210c:	4620      	mov	r0, r4
   2210e:	f001 fbb9 	bl	23884 <z_sched_start>
}
   22112:	4620      	mov	r0, r4
   22114:	b007      	add	sp, #28
   22116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2211a:	4906      	ldr	r1, [pc, #24]	; (22134 <z_impl_k_thread_create+0x8c>)
   2211c:	4632      	mov	r2, r6
   2211e:	462b      	mov	r3, r5
   22120:	f104 0018 	add.w	r0, r4, #24
   22124:	f002 f962 	bl	243ec <z_add_timeout>
   22128:	e7f3      	b.n	22112 <z_impl_k_thread_create+0x6a>
   2212a:	bf00      	nop
   2212c:	0002e33e 	.word	0x0002e33e
   22130:	0002ab8c 	.word	0x0002ab8c
   22134:	00023909 	.word	0x00023909

00022138 <z_init_static_threads>:
{
   22138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2213c:	4c37      	ldr	r4, [pc, #220]	; (2221c <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2213e:	4d38      	ldr	r5, [pc, #224]	; (22220 <z_init_static_threads+0xe8>)
   22140:	4f38      	ldr	r7, [pc, #224]	; (22224 <z_init_static_threads+0xec>)
{
   22142:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   22144:	42ac      	cmp	r4, r5
   22146:	4626      	mov	r6, r4
   22148:	d90a      	bls.n	22160 <z_init_static_threads+0x28>
   2214a:	4837      	ldr	r0, [pc, #220]	; (22228 <z_init_static_threads+0xf0>)
   2214c:	4639      	mov	r1, r7
   2214e:	f240 22ee 	movw	r2, #750	; 0x2ee
   22152:	f003 fd50 	bl	25bf6 <assert_print>
   22156:	f240 21ee 	movw	r1, #750	; 0x2ee
   2215a:	4638      	mov	r0, r7
   2215c:	f003 fd44 	bl	25be8 <assert_post_action>
   22160:	42ae      	cmp	r6, r5
   22162:	f104 0430 	add.w	r4, r4, #48	; 0x30
   22166:	d31b      	bcc.n	221a0 <z_init_static_threads+0x68>
	k_sched_lock();
   22168:	f001 f95c 	bl	23424 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2216c:	4c2b      	ldr	r4, [pc, #172]	; (2221c <z_init_static_threads+0xe4>)
   2216e:	4e2d      	ldr	r6, [pc, #180]	; (22224 <z_init_static_threads+0xec>)
   22170:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 22228 <z_init_static_threads+0xf0>
   22174:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2222c <z_init_static_threads+0xf4>
   22178:	42ac      	cmp	r4, r5
   2217a:	d90a      	bls.n	22192 <z_init_static_threads+0x5a>
   2217c:	4631      	mov	r1, r6
   2217e:	4640      	mov	r0, r8
   22180:	f240 320d 	movw	r2, #781	; 0x30d
   22184:	f003 fd37 	bl	25bf6 <assert_print>
   22188:	f240 310d 	movw	r1, #781	; 0x30d
   2218c:	4630      	mov	r0, r6
   2218e:	f003 fd2b 	bl	25be8 <assert_post_action>
   22192:	42ac      	cmp	r4, r5
   22194:	d320      	bcc.n	221d8 <z_init_static_threads+0xa0>
}
   22196:	b007      	add	sp, #28
   22198:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2219c:	f001 bda0 	b.w	23ce0 <k_sched_unlock>
		z_setup_new_thread(
   221a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   221a4:	9305      	str	r3, [sp, #20]
   221a6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   221aa:	9304      	str	r3, [sp, #16]
   221ac:	f854 3c14 	ldr.w	r3, [r4, #-20]
   221b0:	9303      	str	r3, [sp, #12]
   221b2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   221b6:	9302      	str	r3, [sp, #8]
   221b8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   221bc:	9301      	str	r3, [sp, #4]
   221be:	f854 3c20 	ldr.w	r3, [r4, #-32]
   221c2:	9300      	str	r3, [sp, #0]
   221c4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   221c8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   221cc:	f7ff ff14 	bl	21ff8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   221d0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   221d4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   221d6:	e7b5      	b.n	22144 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   221d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   221da:	1c5a      	adds	r2, r3, #1
   221dc:	d00f      	beq.n	221fe <z_init_static_threads+0xc6>
					    K_MSEC(thread_data->init_delay));
   221de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   221e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   221e6:	f240 30e7 	movw	r0, #999	; 0x3e7
   221ea:	2100      	movs	r1, #0
   221ec:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   221f0:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   221f4:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   221f6:	d104      	bne.n	22202 <z_init_static_threads+0xca>
	z_sched_start(thread);
   221f8:	4638      	mov	r0, r7
   221fa:	f001 fb43 	bl	23884 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   221fe:	3430      	adds	r4, #48	; 0x30
   22200:	e7ba      	b.n	22178 <z_init_static_threads+0x40>
   22202:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22206:	2300      	movs	r3, #0
   22208:	f7dd ff6a 	bl	e0 <__aeabi_uldivmod>
   2220c:	4602      	mov	r2, r0
   2220e:	460b      	mov	r3, r1
   22210:	f107 0018 	add.w	r0, r7, #24
   22214:	4649      	mov	r1, r9
   22216:	f002 f8e9 	bl	243ec <z_add_timeout>
   2221a:	e7f0      	b.n	221fe <z_init_static_threads+0xc6>
   2221c:	200007bc 	.word	0x200007bc
   22220:	200007bc 	.word	0x200007bc
   22224:	0002e33e 	.word	0x0002e33e
   22228:	0002ab8c 	.word	0x0002ab8c
   2222c:	00023909 	.word	0x00023909

00022230 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   22230:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   22232:	b138      	cbz	r0, 22244 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   22234:	4b04      	ldr	r3, [pc, #16]	; (22248 <z_spin_lock_valid+0x18>)
   22236:	7d1b      	ldrb	r3, [r3, #20]
   22238:	f000 0003 	and.w	r0, r0, #3
   2223c:	1ac0      	subs	r0, r0, r3
   2223e:	bf18      	it	ne
   22240:	2001      	movne	r0, #1
   22242:	4770      	bx	lr
			return false;
		}
	}
	return true;
   22244:	2001      	movs	r0, #1
}
   22246:	4770      	bx	lr
   22248:	20002780 	.word	0x20002780

0002224c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2224c:	4906      	ldr	r1, [pc, #24]	; (22268 <z_spin_unlock_valid+0x1c>)
{
   2224e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   22250:	688a      	ldr	r2, [r1, #8]
   22252:	7d08      	ldrb	r0, [r1, #20]
   22254:	6819      	ldr	r1, [r3, #0]
   22256:	4302      	orrs	r2, r0
   22258:	4291      	cmp	r1, r2
   2225a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   2225e:	bf04      	itt	eq
   22260:	6018      	streq	r0, [r3, #0]
	return true;
   22262:	2001      	moveq	r0, #1
}
   22264:	4770      	bx	lr
   22266:	bf00      	nop
   22268:	20002780 	.word	0x20002780

0002226c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   2226c:	4a02      	ldr	r2, [pc, #8]	; (22278 <z_spin_lock_set_owner+0xc>)
   2226e:	7d11      	ldrb	r1, [r2, #20]
   22270:	6893      	ldr	r3, [r2, #8]
   22272:	430b      	orrs	r3, r1
   22274:	6003      	str	r3, [r0, #0]
}
   22276:	4770      	bx	lr
   22278:	20002780 	.word	0x20002780

0002227c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   2227c:	4c12      	ldr	r4, [pc, #72]	; (222c8 <idle+0x4c>)
{
   2227e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   22280:	68a3      	ldr	r3, [r4, #8]
   22282:	f993 300e 	ldrsb.w	r3, [r3, #14]
   22286:	2b00      	cmp	r3, #0
   22288:	da08      	bge.n	2229c <idle+0x20>
   2228a:	4910      	ldr	r1, [pc, #64]	; (222cc <idle+0x50>)
   2228c:	4810      	ldr	r0, [pc, #64]	; (222d0 <idle+0x54>)
   2228e:	2227      	movs	r2, #39	; 0x27
   22290:	f003 fcb1 	bl	25bf6 <assert_print>
   22294:	480d      	ldr	r0, [pc, #52]	; (222cc <idle+0x50>)
   22296:	2127      	movs	r1, #39	; 0x27
   22298:	f003 fca6 	bl	25be8 <assert_post_action>
	return !z_sys_post_kernel;
   2229c:	4d0d      	ldr	r5, [pc, #52]	; (222d4 <idle+0x58>)
	__asm__ volatile(
   2229e:	f04f 0240 	mov.w	r2, #64	; 0x40
   222a2:	f3ef 8311 	mrs	r3, BASEPRI
   222a6:	f382 8812 	msr	BASEPRI_MAX, r2
   222aa:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   222ae:	f002 f9c1 	bl	24634 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   222b2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   222b4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   222b6:	b913      	cbnz	r3, 222be <idle+0x42>
	arch_cpu_idle();
   222b8:	f7f2 f808 	bl	142cc <arch_cpu_idle>
}
   222bc:	e7ef      	b.n	2229e <idle+0x22>
   222be:	f7f1 f99f 	bl	13600 <pm_system_suspend>
   222c2:	2800      	cmp	r0, #0
   222c4:	d1eb      	bne.n	2229e <idle+0x22>
   222c6:	e7f7      	b.n	222b8 <idle+0x3c>
   222c8:	20002780 	.word	0x20002780
   222cc:	0002e361 	.word	0x0002e361
   222d0:	0002ab8c 	.word	0x0002ab8c
   222d4:	200033c7 	.word	0x200033c7

000222d8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   222d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   222dc:	4604      	mov	r4, r0
   222de:	4617      	mov	r7, r2
   222e0:	461e      	mov	r6, r3
   222e2:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   222e6:	b143      	cbz	r3, 222fa <z_impl_k_mutex_lock+0x22>
   222e8:	495f      	ldr	r1, [pc, #380]	; (22468 <z_impl_k_mutex_lock+0x190>)
   222ea:	4860      	ldr	r0, [pc, #384]	; (2246c <z_impl_k_mutex_lock+0x194>)
   222ec:	2265      	movs	r2, #101	; 0x65
   222ee:	f003 fc82 	bl	25bf6 <assert_print>
   222f2:	485d      	ldr	r0, [pc, #372]	; (22468 <z_impl_k_mutex_lock+0x190>)
   222f4:	2165      	movs	r1, #101	; 0x65
   222f6:	f003 fc77 	bl	25be8 <assert_post_action>
   222fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   222fe:	f3ef 8811 	mrs	r8, BASEPRI
   22302:	f383 8812 	msr	BASEPRI_MAX, r3
   22306:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2230a:	4859      	ldr	r0, [pc, #356]	; (22470 <z_impl_k_mutex_lock+0x198>)
   2230c:	f7ff ff90 	bl	22230 <z_spin_lock_valid>
   22310:	b940      	cbnz	r0, 22324 <z_impl_k_mutex_lock+0x4c>
   22312:	4958      	ldr	r1, [pc, #352]	; (22474 <z_impl_k_mutex_lock+0x19c>)
   22314:	4855      	ldr	r0, [pc, #340]	; (2246c <z_impl_k_mutex_lock+0x194>)
   22316:	228e      	movs	r2, #142	; 0x8e
   22318:	f003 fc6d 	bl	25bf6 <assert_print>
   2231c:	4855      	ldr	r0, [pc, #340]	; (22474 <z_impl_k_mutex_lock+0x19c>)
   2231e:	218e      	movs	r1, #142	; 0x8e
   22320:	f003 fc62 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   22324:	4852      	ldr	r0, [pc, #328]	; (22470 <z_impl_k_mutex_lock+0x198>)
   22326:	f7ff ffa1 	bl	2226c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2232a:	68e3      	ldr	r3, [r4, #12]
   2232c:	4a52      	ldr	r2, [pc, #328]	; (22478 <z_impl_k_mutex_lock+0x1a0>)
   2232e:	b1d3      	cbz	r3, 22366 <z_impl_k_mutex_lock+0x8e>
   22330:	68a0      	ldr	r0, [r4, #8]
   22332:	6891      	ldr	r1, [r2, #8]
   22334:	4288      	cmp	r0, r1
   22336:	d033      	beq.n	223a0 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   22338:	ea57 0306 	orrs.w	r3, r7, r6
   2233c:	d132      	bne.n	223a4 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2233e:	484c      	ldr	r0, [pc, #304]	; (22470 <z_impl_k_mutex_lock+0x198>)
   22340:	f7ff ff84 	bl	2224c <z_spin_unlock_valid>
   22344:	b940      	cbnz	r0, 22358 <z_impl_k_mutex_lock+0x80>
   22346:	494b      	ldr	r1, [pc, #300]	; (22474 <z_impl_k_mutex_lock+0x19c>)
   22348:	4848      	ldr	r0, [pc, #288]	; (2246c <z_impl_k_mutex_lock+0x194>)
   2234a:	22b9      	movs	r2, #185	; 0xb9
   2234c:	f003 fc53 	bl	25bf6 <assert_print>
   22350:	4848      	ldr	r0, [pc, #288]	; (22474 <z_impl_k_mutex_lock+0x19c>)
   22352:	21b9      	movs	r1, #185	; 0xb9
   22354:	f003 fc48 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   22358:	f388 8811 	msr	BASEPRI, r8
   2235c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   22360:	f06f 000f 	mvn.w	r0, #15
   22364:	e019      	b.n	2239a <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   22366:	6891      	ldr	r1, [r2, #8]
   22368:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2236c:	4840      	ldr	r0, [pc, #256]	; (22470 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2236e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   22370:	3301      	adds	r3, #1
   22372:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   22374:	6893      	ldr	r3, [r2, #8]
   22376:	60a3      	str	r3, [r4, #8]
   22378:	f7ff ff68 	bl	2224c <z_spin_unlock_valid>
   2237c:	b940      	cbnz	r0, 22390 <z_impl_k_mutex_lock+0xb8>
   2237e:	493d      	ldr	r1, [pc, #244]	; (22474 <z_impl_k_mutex_lock+0x19c>)
   22380:	483a      	ldr	r0, [pc, #232]	; (2246c <z_impl_k_mutex_lock+0x194>)
   22382:	22b9      	movs	r2, #185	; 0xb9
   22384:	f003 fc37 	bl	25bf6 <assert_print>
   22388:	483a      	ldr	r0, [pc, #232]	; (22474 <z_impl_k_mutex_lock+0x19c>)
   2238a:	21b9      	movs	r1, #185	; 0xb9
   2238c:	f003 fc2c 	bl	25be8 <assert_post_action>
   22390:	f388 8811 	msr	BASEPRI, r8
   22394:	f3bf 8f6f 	isb	sy
		return 0;
   22398:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2239a:	b002      	add	sp, #8
   2239c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   223a0:	6921      	ldr	r1, [r4, #16]
   223a2:	e7e3      	b.n	2236c <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   223a4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   223a8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   223ac:	4299      	cmp	r1, r3
   223ae:	bfa8      	it	ge
   223b0:	4619      	movge	r1, r3
   223b2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   223b6:	4291      	cmp	r1, r2
   223b8:	bfb8      	it	lt
   223ba:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   223bc:	428b      	cmp	r3, r1
   223be:	dd3e      	ble.n	2243e <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   223c0:	f007 faf0 	bl	299a4 <adjust_owner_prio.isra.0>
   223c4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   223c6:	e9cd 7600 	strd	r7, r6, [sp]
   223ca:	4829      	ldr	r0, [pc, #164]	; (22470 <z_impl_k_mutex_lock+0x198>)
   223cc:	4622      	mov	r2, r4
   223ce:	4641      	mov	r1, r8
   223d0:	f001 fb86 	bl	23ae0 <z_pend_curr>
	if (got_mutex == 0) {
   223d4:	2800      	cmp	r0, #0
   223d6:	d0e0      	beq.n	2239a <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   223d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   223dc:	f3ef 8611 	mrs	r6, BASEPRI
   223e0:	f383 8812 	msr	BASEPRI_MAX, r3
   223e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   223e8:	4821      	ldr	r0, [pc, #132]	; (22470 <z_impl_k_mutex_lock+0x198>)
   223ea:	f7ff ff21 	bl	22230 <z_spin_lock_valid>
   223ee:	b940      	cbnz	r0, 22402 <z_impl_k_mutex_lock+0x12a>
   223f0:	4920      	ldr	r1, [pc, #128]	; (22474 <z_impl_k_mutex_lock+0x19c>)
   223f2:	481e      	ldr	r0, [pc, #120]	; (2246c <z_impl_k_mutex_lock+0x194>)
   223f4:	228e      	movs	r2, #142	; 0x8e
   223f6:	f003 fbfe 	bl	25bf6 <assert_print>
   223fa:	481e      	ldr	r0, [pc, #120]	; (22474 <z_impl_k_mutex_lock+0x19c>)
   223fc:	218e      	movs	r1, #142	; 0x8e
   223fe:	f003 fbf3 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   22402:	481b      	ldr	r0, [pc, #108]	; (22470 <z_impl_k_mutex_lock+0x198>)
   22404:	f7ff ff32 	bl	2226c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   22408:	6823      	ldr	r3, [r4, #0]
   2240a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2240c:	429c      	cmp	r4, r3
   2240e:	d00a      	beq.n	22426 <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   22410:	b14b      	cbz	r3, 22426 <z_impl_k_mutex_lock+0x14e>
   22412:	f993 300e 	ldrsb.w	r3, [r3, #14]
   22416:	4299      	cmp	r1, r3
   22418:	bfa8      	it	ge
   2241a:	4619      	movge	r1, r3
   2241c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   22420:	4299      	cmp	r1, r3
   22422:	bfb8      	it	lt
   22424:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   22426:	68a0      	ldr	r0, [r4, #8]
   22428:	f007 fabc 	bl	299a4 <adjust_owner_prio.isra.0>
   2242c:	b900      	cbnz	r0, 22430 <z_impl_k_mutex_lock+0x158>
	if (resched) {
   2242e:	b145      	cbz	r5, 22442 <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   22430:	480f      	ldr	r0, [pc, #60]	; (22470 <z_impl_k_mutex_lock+0x198>)
   22432:	4631      	mov	r1, r6
   22434:	f000 ffc0 	bl	233b8 <z_reschedule>
	return -EAGAIN;
   22438:	f06f 000a 	mvn.w	r0, #10
   2243c:	e7ad      	b.n	2239a <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   2243e:	2500      	movs	r5, #0
   22440:	e7c1      	b.n	223c6 <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22442:	480b      	ldr	r0, [pc, #44]	; (22470 <z_impl_k_mutex_lock+0x198>)
   22444:	f7ff ff02 	bl	2224c <z_spin_unlock_valid>
   22448:	b940      	cbnz	r0, 2245c <z_impl_k_mutex_lock+0x184>
   2244a:	490a      	ldr	r1, [pc, #40]	; (22474 <z_impl_k_mutex_lock+0x19c>)
   2244c:	4807      	ldr	r0, [pc, #28]	; (2246c <z_impl_k_mutex_lock+0x194>)
   2244e:	22b9      	movs	r2, #185	; 0xb9
   22450:	f003 fbd1 	bl	25bf6 <assert_print>
   22454:	4807      	ldr	r0, [pc, #28]	; (22474 <z_impl_k_mutex_lock+0x19c>)
   22456:	21b9      	movs	r1, #185	; 0xb9
   22458:	f003 fbc6 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   2245c:	f386 8811 	msr	BASEPRI, r6
   22460:	f3bf 8f6f 	isb	sy
   22464:	e7e8      	b.n	22438 <z_impl_k_mutex_lock+0x160>
   22466:	bf00      	nop
   22468:	0002e382 	.word	0x0002e382
   2246c:	0002ab8c 	.word	0x0002ab8c
   22470:	200027a8 	.word	0x200027a8
   22474:	0002b1aa 	.word	0x0002b1aa
   22478:	20002780 	.word	0x20002780

0002247c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2247c:	b538      	push	{r3, r4, r5, lr}
   2247e:	4604      	mov	r4, r0
   22480:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   22484:	b143      	cbz	r3, 22498 <z_impl_k_mutex_unlock+0x1c>
   22486:	4934      	ldr	r1, [pc, #208]	; (22558 <z_impl_k_mutex_unlock+0xdc>)
   22488:	4834      	ldr	r0, [pc, #208]	; (2255c <z_impl_k_mutex_unlock+0xe0>)
   2248a:	22c7      	movs	r2, #199	; 0xc7
   2248c:	f003 fbb3 	bl	25bf6 <assert_print>
   22490:	4831      	ldr	r0, [pc, #196]	; (22558 <z_impl_k_mutex_unlock+0xdc>)
   22492:	21c7      	movs	r1, #199	; 0xc7
   22494:	f003 fba8 	bl	25be8 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   22498:	68a3      	ldr	r3, [r4, #8]
   2249a:	2b00      	cmp	r3, #0
   2249c:	d055      	beq.n	2254a <z_impl_k_mutex_unlock+0xce>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2249e:	4a30      	ldr	r2, [pc, #192]	; (22560 <z_impl_k_mutex_unlock+0xe4>)
   224a0:	6892      	ldr	r2, [r2, #8]
   224a2:	4293      	cmp	r3, r2
   224a4:	d154      	bne.n	22550 <z_impl_k_mutex_unlock+0xd4>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   224a6:	68e3      	ldr	r3, [r4, #12]
   224a8:	b943      	cbnz	r3, 224bc <z_impl_k_mutex_unlock+0x40>
   224aa:	492b      	ldr	r1, [pc, #172]	; (22558 <z_impl_k_mutex_unlock+0xdc>)
   224ac:	482b      	ldr	r0, [pc, #172]	; (2255c <z_impl_k_mutex_unlock+0xe0>)
   224ae:	22df      	movs	r2, #223	; 0xdf
   224b0:	f003 fba1 	bl	25bf6 <assert_print>
   224b4:	4828      	ldr	r0, [pc, #160]	; (22558 <z_impl_k_mutex_unlock+0xdc>)
   224b6:	21df      	movs	r1, #223	; 0xdf
   224b8:	f003 fb96 	bl	25be8 <assert_post_action>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   224bc:	68e3      	ldr	r3, [r4, #12]
   224be:	2b01      	cmp	r3, #1
   224c0:	d903      	bls.n	224ca <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count--;
   224c2:	3b01      	subs	r3, #1
   224c4:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   224c6:	2000      	movs	r0, #0
}
   224c8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   224ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   224ce:	f3ef 8511 	mrs	r5, BASEPRI
   224d2:	f383 8812 	msr	BASEPRI_MAX, r3
   224d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   224da:	4822      	ldr	r0, [pc, #136]	; (22564 <z_impl_k_mutex_unlock+0xe8>)
   224dc:	f7ff fea8 	bl	22230 <z_spin_lock_valid>
   224e0:	b940      	cbnz	r0, 224f4 <z_impl_k_mutex_unlock+0x78>
   224e2:	4921      	ldr	r1, [pc, #132]	; (22568 <z_impl_k_mutex_unlock+0xec>)
   224e4:	481d      	ldr	r0, [pc, #116]	; (2255c <z_impl_k_mutex_unlock+0xe0>)
   224e6:	228e      	movs	r2, #142	; 0x8e
   224e8:	f003 fb85 	bl	25bf6 <assert_print>
   224ec:	481e      	ldr	r0, [pc, #120]	; (22568 <z_impl_k_mutex_unlock+0xec>)
   224ee:	218e      	movs	r1, #142	; 0x8e
   224f0:	f003 fb7a 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   224f4:	481b      	ldr	r0, [pc, #108]	; (22564 <z_impl_k_mutex_unlock+0xe8>)
   224f6:	f7ff feb9 	bl	2226c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   224fa:	6921      	ldr	r1, [r4, #16]
   224fc:	68a0      	ldr	r0, [r4, #8]
   224fe:	f007 fa51 	bl	299a4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   22502:	4620      	mov	r0, r4
   22504:	f001 fc48 	bl	23d98 <z_unpend_first_thread>
	mutex->owner = new_owner;
   22508:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2250a:	b158      	cbz	r0, 22524 <z_impl_k_mutex_unlock+0xa8>
		mutex->owner_orig_prio = new_owner->base.prio;
   2250c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   22510:	6122      	str	r2, [r4, #16]
   22512:	2400      	movs	r4, #0
   22514:	67c4      	str	r4, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   22516:	f001 f97f 	bl	23818 <z_ready_thread>
		z_reschedule(&lock, key);
   2251a:	4812      	ldr	r0, [pc, #72]	; (22564 <z_impl_k_mutex_unlock+0xe8>)
   2251c:	4629      	mov	r1, r5
   2251e:	f000 ff4b 	bl	233b8 <z_reschedule>
   22522:	e7d0      	b.n	224c6 <z_impl_k_mutex_unlock+0x4a>
		mutex->lock_count = 0U;
   22524:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22526:	480f      	ldr	r0, [pc, #60]	; (22564 <z_impl_k_mutex_unlock+0xe8>)
   22528:	f7ff fe90 	bl	2224c <z_spin_unlock_valid>
   2252c:	b940      	cbnz	r0, 22540 <z_impl_k_mutex_unlock+0xc4>
   2252e:	490e      	ldr	r1, [pc, #56]	; (22568 <z_impl_k_mutex_unlock+0xec>)
   22530:	480a      	ldr	r0, [pc, #40]	; (2255c <z_impl_k_mutex_unlock+0xe0>)
   22532:	22b9      	movs	r2, #185	; 0xb9
   22534:	f003 fb5f 	bl	25bf6 <assert_print>
   22538:	480b      	ldr	r0, [pc, #44]	; (22568 <z_impl_k_mutex_unlock+0xec>)
   2253a:	21b9      	movs	r1, #185	; 0xb9
   2253c:	f003 fb54 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   22540:	f385 8811 	msr	BASEPRI, r5
   22544:	f3bf 8f6f 	isb	sy
   22548:	e7bd      	b.n	224c6 <z_impl_k_mutex_unlock+0x4a>
		return -EINVAL;
   2254a:	f06f 0015 	mvn.w	r0, #21
   2254e:	e7bb      	b.n	224c8 <z_impl_k_mutex_unlock+0x4c>
		return -EPERM;
   22550:	f04f 30ff 	mov.w	r0, #4294967295
   22554:	e7b8      	b.n	224c8 <z_impl_k_mutex_unlock+0x4c>
   22556:	bf00      	nop
   22558:	0002e382 	.word	0x0002e382
   2255c:	0002ab8c 	.word	0x0002ab8c
   22560:	20002780 	.word	0x20002780
   22564:	200027a8 	.word	0x200027a8
   22568:	0002b1aa 	.word	0x0002b1aa

0002256c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   2256c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22570:	4604      	mov	r4, r0
   22572:	f89d a020 	ldrb.w	sl, [sp, #32]
   22576:	460d      	mov	r5, r1
   22578:	4690      	mov	r8, r2
   2257a:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2257c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   22580:	f04f 0340 	mov.w	r3, #64	; 0x40
   22584:	f3ef 8711 	mrs	r7, BASEPRI
   22588:	f383 8812 	msr	BASEPRI_MAX, r3
   2258c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22590:	4630      	mov	r0, r6
   22592:	f7ff fe4d 	bl	22230 <z_spin_lock_valid>
   22596:	b940      	cbnz	r0, 225aa <queue_insert+0x3e>
   22598:	4936      	ldr	r1, [pc, #216]	; (22674 <queue_insert+0x108>)
   2259a:	4837      	ldr	r0, [pc, #220]	; (22678 <queue_insert+0x10c>)
   2259c:	228e      	movs	r2, #142	; 0x8e
   2259e:	f003 fb2a 	bl	25bf6 <assert_print>
   225a2:	4834      	ldr	r0, [pc, #208]	; (22674 <queue_insert+0x108>)
   225a4:	218e      	movs	r1, #142	; 0x8e
   225a6:	f003 fb1f 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   225aa:	4630      	mov	r0, r6
   225ac:	f7ff fe5e 	bl	2226c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   225b0:	f1ba 0f00 	cmp.w	sl, #0
   225b4:	d000      	beq.n	225b8 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   225b6:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   225b8:	f104 000c 	add.w	r0, r4, #12
   225bc:	f001 fbec 	bl	23d98 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   225c0:	b158      	cbz	r0, 225da <queue_insert+0x6e>
   225c2:	2400      	movs	r4, #0
   225c4:	67c4      	str	r4, [r0, #124]	; 0x7c
   225c6:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   225ca:	f001 f925 	bl	23818 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   225ce:	4630      	mov	r0, r6
   225d0:	4639      	mov	r1, r7
   225d2:	f000 fef1 	bl	233b8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   225d6:	2000      	movs	r0, #0
   225d8:	e019      	b.n	2260e <queue_insert+0xa2>
	if (alloc) {
   225da:	f1b9 0f00 	cmp.w	r9, #0
   225de:	d028      	beq.n	22632 <queue_insert+0xc6>
	return z_thread_aligned_alloc(0, size);
   225e0:	2108      	movs	r1, #8
   225e2:	f002 fcb5 	bl	24f50 <z_thread_aligned_alloc>
		if (anode == NULL) {
   225e6:	b9a0      	cbnz	r0, 22612 <queue_insert+0xa6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   225e8:	4630      	mov	r0, r6
   225ea:	f7ff fe2f 	bl	2224c <z_spin_unlock_valid>
   225ee:	b940      	cbnz	r0, 22602 <queue_insert+0x96>
   225f0:	4920      	ldr	r1, [pc, #128]	; (22674 <queue_insert+0x108>)
   225f2:	4821      	ldr	r0, [pc, #132]	; (22678 <queue_insert+0x10c>)
   225f4:	22b9      	movs	r2, #185	; 0xb9
   225f6:	f003 fafe 	bl	25bf6 <assert_print>
   225fa:	481e      	ldr	r0, [pc, #120]	; (22674 <queue_insert+0x108>)
   225fc:	21b9      	movs	r1, #185	; 0xb9
   225fe:	f003 faf3 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   22602:	f387 8811 	msr	BASEPRI, r7
   22606:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2260a:	f06f 000b 	mvn.w	r0, #11
}
   2260e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   22612:	2301      	movs	r3, #1
		anode->data = data;
   22614:	f8c0 8004 	str.w	r8, [r0, #4]
   22618:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2261a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2261c:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   22620:	b95d      	cbnz	r5, 2263a <queue_insert+0xce>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22622:	6823      	ldr	r3, [r4, #0]
   22624:	4313      	orrs	r3, r2
   22626:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22628:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2262a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2262c:	b973      	cbnz	r3, 2264c <queue_insert+0xe0>
	list->tail = node;
   2262e:	6060      	str	r0, [r4, #4]
}
   22630:	e00c      	b.n	2264c <queue_insert+0xe0>
	node->next_and_flags = flags;
   22632:	f8c8 9000 	str.w	r9, [r8]
}
   22636:	4640      	mov	r0, r8
   22638:	e7ef      	b.n	2261a <queue_insert+0xae>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2263a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2263c:	f033 0303 	bics.w	r3, r3, #3
   22640:	d110      	bne.n	22664 <queue_insert+0xf8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22642:	6002      	str	r2, [r0, #0]
	return list->tail;
   22644:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   22646:	b93a      	cbnz	r2, 22658 <queue_insert+0xec>
	list->head = node;
   22648:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2264c:	2104      	movs	r1, #4
   2264e:	f104 0014 	add.w	r0, r4, #20
   22652:	f007 fb49 	bl	29ce8 <z_handle_obj_poll_events>
   22656:	e7ba      	b.n	225ce <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22658:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2265a:	f003 0303 	and.w	r3, r3, #3
   2265e:	4303      	orrs	r3, r0
   22660:	6013      	str	r3, [r2, #0]
   22662:	e7e4      	b.n	2262e <queue_insert+0xc2>
   22664:	4313      	orrs	r3, r2
   22666:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22668:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2266a:	f003 0303 	and.w	r3, r3, #3
   2266e:	4303      	orrs	r3, r0
   22670:	602b      	str	r3, [r5, #0]
}
   22672:	e7eb      	b.n	2264c <queue_insert+0xe0>
   22674:	0002b1aa 	.word	0x0002b1aa
   22678:	0002ab8c 	.word	0x0002ab8c

0002267c <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   2267c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22680:	4605      	mov	r5, r0
   22682:	4616      	mov	r6, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   22684:	460c      	mov	r4, r1
   22686:	2900      	cmp	r1, #0
   22688:	d045      	beq.n	22716 <k_queue_append_list+0x9a>
   2268a:	2a00      	cmp	r2, #0
   2268c:	d043      	beq.n	22716 <k_queue_append_list+0x9a>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2268e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   22692:	f04f 0340 	mov.w	r3, #64	; 0x40
   22696:	f3ef 8911 	mrs	r9, BASEPRI
   2269a:	f383 8812 	msr	BASEPRI_MAX, r3
   2269e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226a2:	4638      	mov	r0, r7
   226a4:	f7ff fdc4 	bl	22230 <z_spin_lock_valid>
   226a8:	b940      	cbnz	r0, 226bc <k_queue_append_list+0x40>
   226aa:	491c      	ldr	r1, [pc, #112]	; (2271c <k_queue_append_list+0xa0>)
   226ac:	481c      	ldr	r0, [pc, #112]	; (22720 <k_queue_append_list+0xa4>)
   226ae:	228e      	movs	r2, #142	; 0x8e
   226b0:	f003 faa1 	bl	25bf6 <assert_print>
   226b4:	4819      	ldr	r0, [pc, #100]	; (2271c <k_queue_append_list+0xa0>)
   226b6:	218e      	movs	r1, #142	; 0x8e
   226b8:	f003 fa96 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   226bc:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   226be:	f105 080c 	add.w	r8, r5, #12
   226c2:	f7ff fdd3 	bl	2226c <z_spin_lock_set_owner>
   226c6:	4640      	mov	r0, r8
   226c8:	f001 fb66 	bl	23d98 <z_unpend_first_thread>
   226cc:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   226d0:	b920      	cbnz	r0, 226dc <k_queue_append_list+0x60>
	return list->tail;
   226d2:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   226d4:	b9ca      	cbnz	r2, 2270a <k_queue_append_list+0x8e>
	list->head = node;
   226d6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   226d8:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   226da:	e00a      	b.n	226f2 <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   226dc:	6144      	str	r4, [r0, #20]
   226de:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   226e2:	f001 f899 	bl	23818 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   226e6:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   226e8:	4640      	mov	r0, r8
   226ea:	f001 fb55 	bl	23d98 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   226ee:	2c00      	cmp	r4, #0
   226f0:	d1ee      	bne.n	226d0 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   226f2:	2104      	movs	r1, #4
   226f4:	f105 0014 	add.w	r0, r5, #20
   226f8:	f007 faf6 	bl	29ce8 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   226fc:	4638      	mov	r0, r7
   226fe:	4649      	mov	r1, r9
   22700:	f000 fe5a 	bl	233b8 <z_reschedule>
	return 0;
   22704:	2000      	movs	r0, #0
}
   22706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2270a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2270c:	f003 0303 	and.w	r3, r3, #3
   22710:	431c      	orrs	r4, r3
   22712:	6014      	str	r4, [r2, #0]
}
   22714:	e7e0      	b.n	226d8 <k_queue_append_list+0x5c>
		return -EINVAL;
   22716:	f06f 0015 	mvn.w	r0, #21
   2271a:	e7f4      	b.n	22706 <k_queue_append_list+0x8a>
   2271c:	0002b1aa 	.word	0x0002b1aa
   22720:	0002ab8c 	.word	0x0002ab8c

00022724 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   22724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22728:	4605      	mov	r5, r0
   2272a:	4690      	mov	r8, r2
   2272c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2272e:	f100 0608 	add.w	r6, r0, #8
   22732:	f04f 0340 	mov.w	r3, #64	; 0x40
   22736:	f3ef 8911 	mrs	r9, BASEPRI
   2273a:	f383 8812 	msr	BASEPRI_MAX, r3
   2273e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22742:	4630      	mov	r0, r6
   22744:	f7ff fd74 	bl	22230 <z_spin_lock_valid>
   22748:	b940      	cbnz	r0, 2275c <z_impl_k_queue_get+0x38>
   2274a:	4920      	ldr	r1, [pc, #128]	; (227cc <z_impl_k_queue_get+0xa8>)
   2274c:	4820      	ldr	r0, [pc, #128]	; (227d0 <z_impl_k_queue_get+0xac>)
   2274e:	228e      	movs	r2, #142	; 0x8e
   22750:	f003 fa51 	bl	25bf6 <assert_print>
   22754:	481d      	ldr	r0, [pc, #116]	; (227cc <z_impl_k_queue_get+0xa8>)
   22756:	218e      	movs	r1, #142	; 0x8e
   22758:	f003 fa46 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   2275c:	4630      	mov	r0, r6
   2275e:	f7ff fd85 	bl	2226c <z_spin_lock_set_owner>
	return list->head;
   22762:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   22764:	b30c      	cbz	r4, 227aa <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22766:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   22768:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2276a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2276e:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   22770:	4620      	mov	r0, r4
	list->head = node;
   22772:	602b      	str	r3, [r5, #0]
	list->tail = node;
   22774:	bf08      	it	eq
   22776:	606b      	streq	r3, [r5, #4]
   22778:	2101      	movs	r1, #1
   2277a:	f007 f922 	bl	299c2 <z_queue_node_peek>
   2277e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22780:	4630      	mov	r0, r6
   22782:	f7ff fd63 	bl	2224c <z_spin_unlock_valid>
   22786:	b940      	cbnz	r0, 2279a <z_impl_k_queue_get+0x76>
   22788:	4910      	ldr	r1, [pc, #64]	; (227cc <z_impl_k_queue_get+0xa8>)
   2278a:	4811      	ldr	r0, [pc, #68]	; (227d0 <z_impl_k_queue_get+0xac>)
   2278c:	22b9      	movs	r2, #185	; 0xb9
   2278e:	f003 fa32 	bl	25bf6 <assert_print>
   22792:	480e      	ldr	r0, [pc, #56]	; (227cc <z_impl_k_queue_get+0xa8>)
   22794:	21b9      	movs	r1, #185	; 0xb9
   22796:	f003 fa27 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   2279a:	f389 8811 	msr	BASEPRI, r9
   2279e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   227a2:	4620      	mov	r0, r4
   227a4:	b003      	add	sp, #12
   227a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   227aa:	ea58 0307 	orrs.w	r3, r8, r7
   227ae:	d0e7      	beq.n	22780 <z_impl_k_queue_get+0x5c>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   227b0:	e9cd 8700 	strd	r8, r7, [sp]
   227b4:	f105 020c 	add.w	r2, r5, #12
   227b8:	4649      	mov	r1, r9
   227ba:	4630      	mov	r0, r6
   227bc:	f001 f990 	bl	23ae0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   227c0:	2800      	cmp	r0, #0
   227c2:	d1ee      	bne.n	227a2 <z_impl_k_queue_get+0x7e>
   227c4:	4b03      	ldr	r3, [pc, #12]	; (227d4 <z_impl_k_queue_get+0xb0>)
   227c6:	689b      	ldr	r3, [r3, #8]
   227c8:	695c      	ldr	r4, [r3, #20]
   227ca:	e7ea      	b.n	227a2 <z_impl_k_queue_get+0x7e>
   227cc:	0002b1aa 	.word	0x0002b1aa
   227d0:	0002ab8c 	.word	0x0002ab8c
   227d4:	20002780 	.word	0x20002780

000227d8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   227d8:	b538      	push	{r3, r4, r5, lr}
   227da:	4604      	mov	r4, r0
	__asm__ volatile(
   227dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   227e0:	f3ef 8511 	mrs	r5, BASEPRI
   227e4:	f383 8812 	msr	BASEPRI_MAX, r3
   227e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227ec:	4814      	ldr	r0, [pc, #80]	; (22840 <z_impl_k_sem_give+0x68>)
   227ee:	f7ff fd1f 	bl	22230 <z_spin_lock_valid>
   227f2:	b940      	cbnz	r0, 22806 <z_impl_k_sem_give+0x2e>
   227f4:	4913      	ldr	r1, [pc, #76]	; (22844 <z_impl_k_sem_give+0x6c>)
   227f6:	4814      	ldr	r0, [pc, #80]	; (22848 <z_impl_k_sem_give+0x70>)
   227f8:	228e      	movs	r2, #142	; 0x8e
   227fa:	f003 f9fc 	bl	25bf6 <assert_print>
   227fe:	4811      	ldr	r0, [pc, #68]	; (22844 <z_impl_k_sem_give+0x6c>)
   22800:	218e      	movs	r1, #142	; 0x8e
   22802:	f003 f9f1 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   22806:	480e      	ldr	r0, [pc, #56]	; (22840 <z_impl_k_sem_give+0x68>)
   22808:	f7ff fd30 	bl	2226c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2280c:	4620      	mov	r0, r4
   2280e:	f001 fac3 	bl	23d98 <z_unpend_first_thread>

	if (thread != NULL) {
   22812:	b148      	cbz	r0, 22828 <z_impl_k_sem_give+0x50>
   22814:	2200      	movs	r2, #0
   22816:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   22818:	f000 fffe 	bl	23818 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2281c:	4629      	mov	r1, r5
   2281e:	4808      	ldr	r0, [pc, #32]	; (22840 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   22820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   22824:	f000 bdc8 	b.w	233b8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22828:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2282c:	429a      	cmp	r2, r3
   2282e:	bf18      	it	ne
   22830:	3301      	addne	r3, #1
   22832:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22834:	2102      	movs	r1, #2
   22836:	f104 0010 	add.w	r0, r4, #16
   2283a:	f007 fa55 	bl	29ce8 <z_handle_obj_poll_events>
}
   2283e:	e7ed      	b.n	2281c <z_impl_k_sem_give+0x44>
   22840:	200027ac 	.word	0x200027ac
   22844:	0002b1aa 	.word	0x0002b1aa
   22848:	0002ab8c 	.word	0x0002ab8c

0002284c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2284c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2284e:	4604      	mov	r4, r0
   22850:	4616      	mov	r6, r2
   22852:	461d      	mov	r5, r3
   22854:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   22858:	b15b      	cbz	r3, 22872 <z_impl_k_sem_take+0x26>
   2285a:	ea52 0305 	orrs.w	r3, r2, r5
   2285e:	d008      	beq.n	22872 <z_impl_k_sem_take+0x26>
   22860:	492b      	ldr	r1, [pc, #172]	; (22910 <z_impl_k_sem_take+0xc4>)
   22862:	482c      	ldr	r0, [pc, #176]	; (22914 <z_impl_k_sem_take+0xc8>)
   22864:	2279      	movs	r2, #121	; 0x79
   22866:	f003 f9c6 	bl	25bf6 <assert_print>
   2286a:	4829      	ldr	r0, [pc, #164]	; (22910 <z_impl_k_sem_take+0xc4>)
   2286c:	2179      	movs	r1, #121	; 0x79
   2286e:	f003 f9bb 	bl	25be8 <assert_post_action>
   22872:	f04f 0340 	mov.w	r3, #64	; 0x40
   22876:	f3ef 8711 	mrs	r7, BASEPRI
   2287a:	f383 8812 	msr	BASEPRI_MAX, r3
   2287e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22882:	4825      	ldr	r0, [pc, #148]	; (22918 <z_impl_k_sem_take+0xcc>)
   22884:	f7ff fcd4 	bl	22230 <z_spin_lock_valid>
   22888:	b940      	cbnz	r0, 2289c <z_impl_k_sem_take+0x50>
   2288a:	4924      	ldr	r1, [pc, #144]	; (2291c <z_impl_k_sem_take+0xd0>)
   2288c:	4821      	ldr	r0, [pc, #132]	; (22914 <z_impl_k_sem_take+0xc8>)
   2288e:	228e      	movs	r2, #142	; 0x8e
   22890:	f003 f9b1 	bl	25bf6 <assert_print>
   22894:	4821      	ldr	r0, [pc, #132]	; (2291c <z_impl_k_sem_take+0xd0>)
   22896:	218e      	movs	r1, #142	; 0x8e
   22898:	f003 f9a6 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   2289c:	481e      	ldr	r0, [pc, #120]	; (22918 <z_impl_k_sem_take+0xcc>)
   2289e:	f7ff fce5 	bl	2226c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   228a2:	68a3      	ldr	r3, [r4, #8]
   228a4:	b1ab      	cbz	r3, 228d2 <z_impl_k_sem_take+0x86>
		sem->count--;
   228a6:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228a8:	481b      	ldr	r0, [pc, #108]	; (22918 <z_impl_k_sem_take+0xcc>)
   228aa:	60a3      	str	r3, [r4, #8]
   228ac:	f7ff fcce 	bl	2224c <z_spin_unlock_valid>
   228b0:	b940      	cbnz	r0, 228c4 <z_impl_k_sem_take+0x78>
   228b2:	491a      	ldr	r1, [pc, #104]	; (2291c <z_impl_k_sem_take+0xd0>)
   228b4:	4817      	ldr	r0, [pc, #92]	; (22914 <z_impl_k_sem_take+0xc8>)
   228b6:	22b9      	movs	r2, #185	; 0xb9
   228b8:	f003 f99d 	bl	25bf6 <assert_print>
   228bc:	4817      	ldr	r0, [pc, #92]	; (2291c <z_impl_k_sem_take+0xd0>)
   228be:	21b9      	movs	r1, #185	; 0xb9
   228c0:	f003 f992 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   228c4:	f387 8811 	msr	BASEPRI, r7
   228c8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   228cc:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   228ce:	b003      	add	sp, #12
   228d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   228d2:	ea56 0305 	orrs.w	r3, r6, r5
   228d6:	d113      	bne.n	22900 <z_impl_k_sem_take+0xb4>
   228d8:	480f      	ldr	r0, [pc, #60]	; (22918 <z_impl_k_sem_take+0xcc>)
   228da:	f7ff fcb7 	bl	2224c <z_spin_unlock_valid>
   228de:	b940      	cbnz	r0, 228f2 <z_impl_k_sem_take+0xa6>
   228e0:	490e      	ldr	r1, [pc, #56]	; (2291c <z_impl_k_sem_take+0xd0>)
   228e2:	480c      	ldr	r0, [pc, #48]	; (22914 <z_impl_k_sem_take+0xc8>)
   228e4:	22b9      	movs	r2, #185	; 0xb9
   228e6:	f003 f986 	bl	25bf6 <assert_print>
   228ea:	480c      	ldr	r0, [pc, #48]	; (2291c <z_impl_k_sem_take+0xd0>)
   228ec:	21b9      	movs	r1, #185	; 0xb9
   228ee:	f003 f97b 	bl	25be8 <assert_post_action>
   228f2:	f387 8811 	msr	BASEPRI, r7
   228f6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   228fa:	f06f 000f 	mvn.w	r0, #15
   228fe:	e7e6      	b.n	228ce <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   22900:	e9cd 6500 	strd	r6, r5, [sp]
   22904:	4622      	mov	r2, r4
   22906:	4639      	mov	r1, r7
   22908:	4803      	ldr	r0, [pc, #12]	; (22918 <z_impl_k_sem_take+0xcc>)
   2290a:	f001 f8e9 	bl	23ae0 <z_pend_curr>
	return ret;
   2290e:	e7de      	b.n	228ce <z_impl_k_sem_take+0x82>
   22910:	0002e3a4 	.word	0x0002e3a4
   22914:	0002ab8c 	.word	0x0002ab8c
   22918:	200027ac 	.word	0x200027ac
   2291c:	0002b1aa 	.word	0x0002b1aa

00022920 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   22920:	b570      	push	{r4, r5, r6, lr}
   22922:	4604      	mov	r4, r0
	__asm__ volatile(
   22924:	f04f 0340 	mov.w	r3, #64	; 0x40
   22928:	f3ef 8511 	mrs	r5, BASEPRI
   2292c:	f383 8812 	msr	BASEPRI_MAX, r3
   22930:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22934:	4812      	ldr	r0, [pc, #72]	; (22980 <z_impl_k_sem_reset+0x60>)
   22936:	f7ff fc7b 	bl	22230 <z_spin_lock_valid>
   2293a:	b940      	cbnz	r0, 2294e <z_impl_k_sem_reset+0x2e>
   2293c:	4911      	ldr	r1, [pc, #68]	; (22984 <z_impl_k_sem_reset+0x64>)
   2293e:	4812      	ldr	r0, [pc, #72]	; (22988 <z_impl_k_sem_reset+0x68>)
   22940:	228e      	movs	r2, #142	; 0x8e
   22942:	f003 f958 	bl	25bf6 <assert_print>
   22946:	480f      	ldr	r0, [pc, #60]	; (22984 <z_impl_k_sem_reset+0x64>)
   22948:	218e      	movs	r1, #142	; 0x8e
   2294a:	f003 f94d 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   2294e:	480c      	ldr	r0, [pc, #48]	; (22980 <z_impl_k_sem_reset+0x60>)
   22950:	f7ff fc8c 	bl	2226c <z_spin_lock_set_owner>
   22954:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   22958:	4620      	mov	r0, r4
   2295a:	f001 fa1d 	bl	23d98 <z_unpend_first_thread>
		if (thread == NULL) {
   2295e:	b118      	cbz	r0, 22968 <z_impl_k_sem_reset+0x48>
   22960:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   22962:	f000 ff59 	bl	23818 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   22966:	e7f7      	b.n	22958 <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   22968:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2296a:	2102      	movs	r1, #2
   2296c:	f104 0010 	add.w	r0, r4, #16
   22970:	f007 f9ba 	bl	29ce8 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   22974:	4629      	mov	r1, r5
   22976:	4802      	ldr	r0, [pc, #8]	; (22980 <z_impl_k_sem_reset+0x60>)
}
   22978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   2297c:	f000 bd1c 	b.w	233b8 <z_reschedule>
   22980:	200027ac 	.word	0x200027ac
   22984:	0002b1aa 	.word	0x0002b1aa
   22988:	0002ab8c 	.word	0x0002ab8c

0002298c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   2298c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   2298e:	4b09      	ldr	r3, [pc, #36]	; (229b4 <k_sys_work_q_init+0x28>)
   22990:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   22992:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   22994:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   22996:	9300      	str	r3, [sp, #0]
   22998:	4907      	ldr	r1, [pc, #28]	; (229b8 <k_sys_work_q_init+0x2c>)
   2299a:	4808      	ldr	r0, [pc, #32]	; (229bc <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2299c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   229a0:	f04f 33ff 	mov.w	r3, #4294967295
   229a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   229a8:	f000 fa76 	bl	22e98 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   229ac:	4620      	mov	r0, r4
   229ae:	b004      	add	sp, #16
   229b0:	bd10      	pop	{r4, pc}
   229b2:	bf00      	nop
   229b4:	0002e3c4 	.word	0x0002e3c4
   229b8:	20005f00 	.word	0x20005f00
   229bc:	20002000 	.word	0x20002000

000229c0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   229c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   229c4:	4e70      	ldr	r6, [pc, #448]	; (22b88 <work_queue_main+0x1c8>)
	return list->head;
   229c6:	4f71      	ldr	r7, [pc, #452]	; (22b8c <work_queue_main+0x1cc>)
   229c8:	b085      	sub	sp, #20
   229ca:	4604      	mov	r4, r0
   229cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   229d0:	f3ef 8811 	mrs	r8, BASEPRI
   229d4:	f383 8812 	msr	BASEPRI_MAX, r3
   229d8:	f3bf 8f6f 	isb	sy
   229dc:	4630      	mov	r0, r6
   229de:	f7ff fc27 	bl	22230 <z_spin_lock_valid>
   229e2:	b940      	cbnz	r0, 229f6 <work_queue_main+0x36>
   229e4:	496a      	ldr	r1, [pc, #424]	; (22b90 <work_queue_main+0x1d0>)
   229e6:	486b      	ldr	r0, [pc, #428]	; (22b94 <work_queue_main+0x1d4>)
   229e8:	228e      	movs	r2, #142	; 0x8e
   229ea:	f003 f904 	bl	25bf6 <assert_print>
   229ee:	4868      	ldr	r0, [pc, #416]	; (22b90 <work_queue_main+0x1d0>)
   229f0:	218e      	movs	r1, #142	; 0x8e
   229f2:	f003 f8f9 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   229f6:	4630      	mov	r0, r6
   229f8:	f7ff fc38 	bl	2226c <z_spin_lock_set_owner>
   229fc:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   22a00:	b9b5      	cbnz	r5, 22a30 <work_queue_main+0x70>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   22a02:	2102      	movs	r1, #2
   22a04:	f104 0098 	add.w	r0, r4, #152	; 0x98
   22a08:	f007 f819 	bl	29a3e <flag_test_and_clear>
   22a0c:	2800      	cmp	r0, #0
   22a0e:	f040 8084 	bne.w	22b1a <work_queue_main+0x15a>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   22a12:	2300      	movs	r3, #0
   22a14:	9302      	str	r3, [sp, #8]
   22a16:	f04f 32ff 	mov.w	r2, #4294967295
   22a1a:	f04f 33ff 	mov.w	r3, #4294967295
   22a1e:	e9cd 2300 	strd	r2, r3, [sp]
   22a22:	4641      	mov	r1, r8
   22a24:	f104 0288 	add.w	r2, r4, #136	; 0x88
   22a28:	4630      	mov	r0, r6
   22a2a:	f001 fc43 	bl	242b4 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   22a2e:	e7cd      	b.n	229cc <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22a30:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   22a34:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   22a36:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22a3a:	4295      	cmp	r5, r2
   22a3c:	d101      	bne.n	22a42 <work_queue_main+0x82>
	list->tail = node;
   22a3e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   22a42:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
			handler = work->handler;
   22a46:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp |= BIT(bit);
   22a4a:	f043 0302 	orr.w	r3, r3, #2
   22a4e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   22a52:	68eb      	ldr	r3, [r5, #12]
   22a54:	f023 0304 	bic.w	r3, r3, #4
   22a58:	f043 0301 	orr.w	r3, r3, #1
   22a5c:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a5e:	4630      	mov	r0, r6
   22a60:	f7ff fbf4 	bl	2224c <z_spin_unlock_valid>
   22a64:	b940      	cbnz	r0, 22a78 <work_queue_main+0xb8>
   22a66:	494a      	ldr	r1, [pc, #296]	; (22b90 <work_queue_main+0x1d0>)
   22a68:	484a      	ldr	r0, [pc, #296]	; (22b94 <work_queue_main+0x1d4>)
   22a6a:	22b9      	movs	r2, #185	; 0xb9
   22a6c:	f003 f8c3 	bl	25bf6 <assert_print>
   22a70:	4847      	ldr	r0, [pc, #284]	; (22b90 <work_queue_main+0x1d0>)
   22a72:	21b9      	movs	r1, #185	; 0xb9
   22a74:	f003 f8b8 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   22a78:	f388 8811 	msr	BASEPRI, r8
   22a7c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   22a80:	f1b9 0f00 	cmp.w	r9, #0
   22a84:	d10a      	bne.n	22a9c <work_queue_main+0xdc>
   22a86:	4944      	ldr	r1, [pc, #272]	; (22b98 <work_queue_main+0x1d8>)
   22a88:	4842      	ldr	r0, [pc, #264]	; (22b94 <work_queue_main+0x1d4>)
   22a8a:	f240 229b 	movw	r2, #667	; 0x29b
   22a8e:	f003 f8b2 	bl	25bf6 <assert_print>
   22a92:	4841      	ldr	r0, [pc, #260]	; (22b98 <work_queue_main+0x1d8>)
   22a94:	f240 219b 	movw	r1, #667	; 0x29b
   22a98:	f003 f8a6 	bl	25be8 <assert_post_action>
		handler(work);
   22a9c:	4628      	mov	r0, r5
   22a9e:	47c8      	blx	r9
	__asm__ volatile(
   22aa0:	f04f 0340 	mov.w	r3, #64	; 0x40
   22aa4:	f3ef 8a11 	mrs	sl, BASEPRI
   22aa8:	f383 8812 	msr	BASEPRI_MAX, r3
   22aac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ab0:	4630      	mov	r0, r6
   22ab2:	f7ff fbbd 	bl	22230 <z_spin_lock_valid>
   22ab6:	b940      	cbnz	r0, 22aca <work_queue_main+0x10a>
   22ab8:	4935      	ldr	r1, [pc, #212]	; (22b90 <work_queue_main+0x1d0>)
   22aba:	4836      	ldr	r0, [pc, #216]	; (22b94 <work_queue_main+0x1d4>)
   22abc:	228e      	movs	r2, #142	; 0x8e
   22abe:	f003 f89a 	bl	25bf6 <assert_print>
   22ac2:	4833      	ldr	r0, [pc, #204]	; (22b90 <work_queue_main+0x1d0>)
   22ac4:	218e      	movs	r1, #142	; 0x8e
   22ac6:	f003 f88f 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   22aca:	4630      	mov	r0, r6
   22acc:	f7ff fbce 	bl	2226c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   22ad0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22ad2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   22ad4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22ad8:	d429      	bmi.n	22b2e <work_queue_main+0x16e>
	*flagp &= ~BIT(bit);
   22ada:	60ea      	str	r2, [r5, #12]
   22adc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   22ae0:	f023 0302 	bic.w	r3, r3, #2
   22ae4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ae8:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   22aea:	f3c3 2500 	ubfx	r5, r3, #8, #1
   22aee:	f7ff fbad 	bl	2224c <z_spin_unlock_valid>
   22af2:	b940      	cbnz	r0, 22b06 <work_queue_main+0x146>
   22af4:	4926      	ldr	r1, [pc, #152]	; (22b90 <work_queue_main+0x1d0>)
   22af6:	4827      	ldr	r0, [pc, #156]	; (22b94 <work_queue_main+0x1d4>)
   22af8:	22b9      	movs	r2, #185	; 0xb9
   22afa:	f003 f87c 	bl	25bf6 <assert_print>
   22afe:	4824      	ldr	r0, [pc, #144]	; (22b90 <work_queue_main+0x1d0>)
   22b00:	21b9      	movs	r1, #185	; 0xb9
   22b02:	f003 f871 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   22b06:	f38a 8811 	msr	BASEPRI, sl
   22b0a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   22b0e:	2d00      	cmp	r5, #0
   22b10:	f47f af5c 	bne.w	229cc <work_queue_main+0xc>
	z_impl_k_yield();
   22b14:	f001 f98a 	bl	23e2c <z_impl_k_yield>
}
   22b18:	e758      	b.n	229cc <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   22b1a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   22b1e:	2200      	movs	r2, #0
   22b20:	2101      	movs	r1, #1
   22b22:	4628      	mov	r0, r5
   22b24:	f001 fb80 	bl	24228 <z_sched_wake>
   22b28:	2800      	cmp	r0, #0
   22b2a:	d1f8      	bne.n	22b1e <work_queue_main+0x15e>
   22b2c:	e771      	b.n	22a12 <work_queue_main+0x52>
	return list->head;
   22b2e:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   22b30:	f023 0303 	bic.w	r3, r3, #3
   22b34:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22b36:	2800      	cmp	r0, #0
   22b38:	d0d0      	beq.n	22adc <work_queue_main+0x11c>
	return node->next;
   22b3a:	f04f 0800 	mov.w	r8, #0
   22b3e:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   22b42:	46c3      	mov	fp, r8
		if (wc->work == work) {
   22b44:	6843      	ldr	r3, [r0, #4]
   22b46:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   22b48:	4602      	mov	r2, r0
		if (wc->work == work) {
   22b4a:	d10d      	bne.n	22b68 <work_queue_main+0x1a8>
	return node->next;
   22b4c:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   22b4e:	f1b8 0f00 	cmp.w	r8, #0
   22b52:	d111      	bne.n	22b78 <work_queue_main+0x1b8>
   22b54:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   22b56:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   22b58:	4283      	cmp	r3, r0
   22b5a:	d100      	bne.n	22b5e <work_queue_main+0x19e>
	list->tail = node;
   22b5c:	607a      	str	r2, [r7, #4]
	parent->next = child;
   22b5e:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   22b62:	f7ff fe39 	bl	227d8 <z_impl_k_sem_give>
}
   22b66:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22b68:	f1b9 0f00 	cmp.w	r9, #0
   22b6c:	d0b6      	beq.n	22adc <work_queue_main+0x11c>
	return node->next;
   22b6e:	4648      	mov	r0, r9
   22b70:	4690      	mov	r8, r2
   22b72:	f8d9 9000 	ldr.w	r9, [r9]
   22b76:	e7e5      	b.n	22b44 <work_queue_main+0x184>
	return list->tail;
   22b78:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   22b7a:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   22b7e:	4298      	cmp	r0, r3
	list->tail = node;
   22b80:	bf08      	it	eq
   22b82:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   22b86:	e7ea      	b.n	22b5e <work_queue_main+0x19e>
   22b88:	200027b0 	.word	0x200027b0
   22b8c:	200027b4 	.word	0x200027b4
   22b90:	0002b1aa 	.word	0x0002b1aa
   22b94:	0002ab8c 	.word	0x0002ab8c
   22b98:	0002e3cd 	.word	0x0002e3cd

00022b9c <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   22b9c:	68c3      	ldr	r3, [r0, #12]
{
   22b9e:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   22ba0:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   22ba4:	079b      	lsls	r3, r3, #30
{
   22ba6:	4605      	mov	r5, r0
   22ba8:	460c      	mov	r4, r1
	if (ret) {
   22baa:	d50d      	bpl.n	22bc8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   22bac:	2201      	movs	r2, #1
   22bae:	2100      	movs	r1, #0
   22bb0:	f104 0008 	add.w	r0, r4, #8
   22bb4:	f006 ff33 	bl	29a1e <z_impl_k_sem_init>
	parent->next = child;
   22bb8:	2300      	movs	r3, #0
   22bba:	6023      	str	r3, [r4, #0]
	return list->tail;
   22bbc:	4b05      	ldr	r3, [pc, #20]	; (22bd4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   22bbe:	6065      	str	r5, [r4, #4]
   22bc0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   22bc2:	b91a      	cbnz	r2, 22bcc <cancel_sync_locked+0x30>
	list->head = node;
   22bc4:	e9c3 4400 	strd	r4, r4, [r3]
}
   22bc8:	4630      	mov	r0, r6
   22bca:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   22bcc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22bce:	605c      	str	r4, [r3, #4]
}
   22bd0:	e7fa      	b.n	22bc8 <cancel_sync_locked+0x2c>
   22bd2:	bf00      	nop
   22bd4:	200027b4 	.word	0x200027b4

00022bd8 <submit_to_queue_locked>:
{
   22bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   22bda:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22bdc:	079a      	lsls	r2, r3, #30
{
   22bde:	4604      	mov	r4, r0
   22be0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22be2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   22be6:	d42a      	bmi.n	22c3e <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   22be8:	075f      	lsls	r7, r3, #29
   22bea:	d42a      	bmi.n	22c42 <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
   22bec:	680a      	ldr	r2, [r1, #0]
   22bee:	b90a      	cbnz	r2, 22bf4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   22bf0:	6882      	ldr	r2, [r0, #8]
   22bf2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   22bf4:	07d8      	lsls	r0, r3, #31
   22bf6:	d527      	bpl.n	22c48 <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
   22bf8:	68a3      	ldr	r3, [r4, #8]
   22bfa:	b953      	cbnz	r3, 22c12 <submit_to_queue_locked+0x3a>
   22bfc:	4923      	ldr	r1, [pc, #140]	; (22c8c <submit_to_queue_locked+0xb4>)
   22bfe:	4824      	ldr	r0, [pc, #144]	; (22c90 <submit_to_queue_locked+0xb8>)
   22c00:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   22c04:	f002 fff7 	bl	25bf6 <assert_print>
   22c08:	4820      	ldr	r0, [pc, #128]	; (22c8c <submit_to_queue_locked+0xb4>)
   22c0a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   22c0e:	f002 ffeb 	bl	25be8 <assert_post_action>
			*queuep = work->queue;
   22c12:	68a3      	ldr	r3, [r4, #8]
   22c14:	6033      	str	r3, [r6, #0]
			ret = 2;
   22c16:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   22c18:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   22c1a:	b38f      	cbz	r7, 22c80 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   22c1c:	4b1d      	ldr	r3, [pc, #116]	; (22c94 <submit_to_queue_locked+0xbc>)
   22c1e:	689b      	ldr	r3, [r3, #8]
   22c20:	42bb      	cmp	r3, r7
   22c22:	d113      	bne.n	22c4c <submit_to_queue_locked+0x74>
   22c24:	f006 feaa 	bl	2997c <k_is_in_isr>
   22c28:	f080 0001 	eor.w	r0, r0, #1
   22c2c:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   22c2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   22c32:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   22c34:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   22c38:	d525      	bpl.n	22c86 <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
   22c3a:	b14a      	cbz	r2, 22c50 <submit_to_queue_locked+0x78>
   22c3c:	b950      	cbnz	r0, 22c54 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   22c3e:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   22c42:	2300      	movs	r3, #0
   22c44:	6033      	str	r3, [r6, #0]
	return ret;
   22c46:	e015      	b.n	22c74 <submit_to_queue_locked+0x9c>
		ret = 1;
   22c48:	2501      	movs	r5, #1
   22c4a:	e7e5      	b.n	22c18 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   22c4c:	2000      	movs	r0, #0
   22c4e:	e7ee      	b.n	22c2e <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
   22c50:	071b      	lsls	r3, r3, #28
   22c52:	d4f4      	bmi.n	22c3e <submit_to_queue_locked+0x66>
	parent->next = child;
   22c54:	2300      	movs	r3, #0
   22c56:	6023      	str	r3, [r4, #0]
	return list->tail;
   22c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   22c5c:	b963      	cbnz	r3, 22c78 <submit_to_queue_locked+0xa0>
	list->head = node;
   22c5e:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   22c62:	4638      	mov	r0, r7
   22c64:	f006 ff04 	bl	29a70 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   22c68:	68e3      	ldr	r3, [r4, #12]
   22c6a:	f043 0304 	orr.w	r3, r3, #4
   22c6e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   22c70:	6833      	ldr	r3, [r6, #0]
   22c72:	60a3      	str	r3, [r4, #8]
}
   22c74:	4628      	mov	r0, r5
   22c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   22c78:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22c7a:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   22c7e:	e7f0      	b.n	22c62 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   22c80:	f06f 0515 	mvn.w	r5, #21
   22c84:	e7dd      	b.n	22c42 <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
   22c86:	f06f 0512 	mvn.w	r5, #18
   22c8a:	e7da      	b.n	22c42 <submit_to_queue_locked+0x6a>
   22c8c:	0002e3cd 	.word	0x0002e3cd
   22c90:	0002ab8c 	.word	0x0002ab8c
   22c94:	20002780 	.word	0x20002780

00022c98 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   22c98:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22c9a:	4604      	mov	r4, r0
	__asm__ volatile(
   22c9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ca0:	f3ef 8511 	mrs	r5, BASEPRI
   22ca4:	f383 8812 	msr	BASEPRI_MAX, r3
   22ca8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22cac:	4818      	ldr	r0, [pc, #96]	; (22d10 <work_timeout+0x78>)
   22cae:	f7ff fabf 	bl	22230 <z_spin_lock_valid>
   22cb2:	b940      	cbnz	r0, 22cc6 <work_timeout+0x2e>
   22cb4:	4917      	ldr	r1, [pc, #92]	; (22d14 <work_timeout+0x7c>)
   22cb6:	4818      	ldr	r0, [pc, #96]	; (22d18 <work_timeout+0x80>)
   22cb8:	228e      	movs	r2, #142	; 0x8e
   22cba:	f002 ff9c 	bl	25bf6 <assert_print>
   22cbe:	4815      	ldr	r0, [pc, #84]	; (22d14 <work_timeout+0x7c>)
   22cc0:	218e      	movs	r1, #142	; 0x8e
   22cc2:	f002 ff91 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   22cc6:	4812      	ldr	r0, [pc, #72]	; (22d10 <work_timeout+0x78>)
   22cc8:	f7ff fad0 	bl	2226c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   22ccc:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22cce:	2103      	movs	r1, #3
   22cd0:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   22cd2:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22cd4:	f1a4 0610 	sub.w	r6, r4, #16
   22cd8:	f006 feb1 	bl	29a3e <flag_test_and_clear>
   22cdc:	b128      	cbz	r0, 22cea <work_timeout+0x52>
		queue = dw->queue;
   22cde:	69a3      	ldr	r3, [r4, #24]
   22ce0:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   22ce2:	a901      	add	r1, sp, #4
   22ce4:	4630      	mov	r0, r6
   22ce6:	f7ff ff77 	bl	22bd8 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cea:	4809      	ldr	r0, [pc, #36]	; (22d10 <work_timeout+0x78>)
   22cec:	f7ff faae 	bl	2224c <z_spin_unlock_valid>
   22cf0:	b940      	cbnz	r0, 22d04 <work_timeout+0x6c>
   22cf2:	4908      	ldr	r1, [pc, #32]	; (22d14 <work_timeout+0x7c>)
   22cf4:	4808      	ldr	r0, [pc, #32]	; (22d18 <work_timeout+0x80>)
   22cf6:	22b9      	movs	r2, #185	; 0xb9
   22cf8:	f002 ff7d 	bl	25bf6 <assert_print>
   22cfc:	4805      	ldr	r0, [pc, #20]	; (22d14 <work_timeout+0x7c>)
   22cfe:	21b9      	movs	r1, #185	; 0xb9
   22d00:	f002 ff72 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   22d04:	f385 8811 	msr	BASEPRI, r5
   22d08:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   22d0c:	b002      	add	sp, #8
   22d0e:	bd70      	pop	{r4, r5, r6, pc}
   22d10:	200027b0 	.word	0x200027b0
   22d14:	0002b1aa 	.word	0x0002b1aa
   22d18:	0002ab8c 	.word	0x0002ab8c

00022d1c <k_work_init>:
{
   22d1c:	b538      	push	{r3, r4, r5, lr}
   22d1e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   22d20:	4604      	mov	r4, r0
   22d22:	b940      	cbnz	r0, 22d36 <k_work_init+0x1a>
   22d24:	490c      	ldr	r1, [pc, #48]	; (22d58 <k_work_init+0x3c>)
   22d26:	480d      	ldr	r0, [pc, #52]	; (22d5c <k_work_init+0x40>)
   22d28:	2289      	movs	r2, #137	; 0x89
   22d2a:	f002 ff64 	bl	25bf6 <assert_print>
   22d2e:	480a      	ldr	r0, [pc, #40]	; (22d58 <k_work_init+0x3c>)
   22d30:	2189      	movs	r1, #137	; 0x89
   22d32:	f002 ff59 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   22d36:	b945      	cbnz	r5, 22d4a <k_work_init+0x2e>
   22d38:	4907      	ldr	r1, [pc, #28]	; (22d58 <k_work_init+0x3c>)
   22d3a:	4808      	ldr	r0, [pc, #32]	; (22d5c <k_work_init+0x40>)
   22d3c:	228a      	movs	r2, #138	; 0x8a
   22d3e:	f002 ff5a 	bl	25bf6 <assert_print>
   22d42:	4805      	ldr	r0, [pc, #20]	; (22d58 <k_work_init+0x3c>)
   22d44:	218a      	movs	r1, #138	; 0x8a
   22d46:	f002 ff4f 	bl	25be8 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22d4a:	2210      	movs	r2, #16
   22d4c:	2100      	movs	r1, #0
   22d4e:	4620      	mov	r0, r4
   22d50:	f003 ff0a 	bl	26b68 <memset>
   22d54:	6065      	str	r5, [r4, #4]
}
   22d56:	bd38      	pop	{r3, r4, r5, pc}
   22d58:	0002e3cd 	.word	0x0002e3cd
   22d5c:	0002ab8c 	.word	0x0002ab8c

00022d60 <k_work_busy_get>:
{
   22d60:	b538      	push	{r3, r4, r5, lr}
   22d62:	4604      	mov	r4, r0
	__asm__ volatile(
   22d64:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d68:	f3ef 8511 	mrs	r5, BASEPRI
   22d6c:	f383 8812 	msr	BASEPRI_MAX, r3
   22d70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d74:	4812      	ldr	r0, [pc, #72]	; (22dc0 <k_work_busy_get+0x60>)
   22d76:	f7ff fa5b 	bl	22230 <z_spin_lock_valid>
   22d7a:	b940      	cbnz	r0, 22d8e <k_work_busy_get+0x2e>
   22d7c:	4911      	ldr	r1, [pc, #68]	; (22dc4 <k_work_busy_get+0x64>)
   22d7e:	4812      	ldr	r0, [pc, #72]	; (22dc8 <k_work_busy_get+0x68>)
   22d80:	228e      	movs	r2, #142	; 0x8e
   22d82:	f002 ff38 	bl	25bf6 <assert_print>
   22d86:	480f      	ldr	r0, [pc, #60]	; (22dc4 <k_work_busy_get+0x64>)
   22d88:	218e      	movs	r1, #142	; 0x8e
   22d8a:	f002 ff2d 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   22d8e:	480c      	ldr	r0, [pc, #48]	; (22dc0 <k_work_busy_get+0x60>)
   22d90:	f7ff fa6c 	bl	2226c <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   22d94:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d96:	480a      	ldr	r0, [pc, #40]	; (22dc0 <k_work_busy_get+0x60>)
   22d98:	f004 040f 	and.w	r4, r4, #15
   22d9c:	f7ff fa56 	bl	2224c <z_spin_unlock_valid>
   22da0:	b940      	cbnz	r0, 22db4 <k_work_busy_get+0x54>
   22da2:	4908      	ldr	r1, [pc, #32]	; (22dc4 <k_work_busy_get+0x64>)
   22da4:	4808      	ldr	r0, [pc, #32]	; (22dc8 <k_work_busy_get+0x68>)
   22da6:	22b9      	movs	r2, #185	; 0xb9
   22da8:	f002 ff25 	bl	25bf6 <assert_print>
   22dac:	4805      	ldr	r0, [pc, #20]	; (22dc4 <k_work_busy_get+0x64>)
   22dae:	21b9      	movs	r1, #185	; 0xb9
   22db0:	f002 ff1a 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   22db4:	f385 8811 	msr	BASEPRI, r5
   22db8:	f3bf 8f6f 	isb	sy
}
   22dbc:	4620      	mov	r0, r4
   22dbe:	bd38      	pop	{r3, r4, r5, pc}
   22dc0:	200027b0 	.word	0x200027b0
   22dc4:	0002b1aa 	.word	0x0002b1aa
   22dc8:	0002ab8c 	.word	0x0002ab8c

00022dcc <z_work_submit_to_queue>:
{
   22dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   22dce:	460c      	mov	r4, r1
{
   22dd0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   22dd2:	b951      	cbnz	r1, 22dea <z_work_submit_to_queue+0x1e>
   22dd4:	491d      	ldr	r1, [pc, #116]	; (22e4c <z_work_submit_to_queue+0x80>)
   22dd6:	481e      	ldr	r0, [pc, #120]	; (22e50 <z_work_submit_to_queue+0x84>)
   22dd8:	f44f 72ba 	mov.w	r2, #372	; 0x174
   22ddc:	f002 ff0b 	bl	25bf6 <assert_print>
   22de0:	481a      	ldr	r0, [pc, #104]	; (22e4c <z_work_submit_to_queue+0x80>)
   22de2:	f44f 71ba 	mov.w	r1, #372	; 0x174
   22de6:	f002 feff 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   22dea:	f04f 0340 	mov.w	r3, #64	; 0x40
   22dee:	f3ef 8511 	mrs	r5, BASEPRI
   22df2:	f383 8812 	msr	BASEPRI_MAX, r3
   22df6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22dfa:	4816      	ldr	r0, [pc, #88]	; (22e54 <z_work_submit_to_queue+0x88>)
   22dfc:	f7ff fa18 	bl	22230 <z_spin_lock_valid>
   22e00:	b940      	cbnz	r0, 22e14 <z_work_submit_to_queue+0x48>
   22e02:	4915      	ldr	r1, [pc, #84]	; (22e58 <z_work_submit_to_queue+0x8c>)
   22e04:	4812      	ldr	r0, [pc, #72]	; (22e50 <z_work_submit_to_queue+0x84>)
   22e06:	228e      	movs	r2, #142	; 0x8e
   22e08:	f002 fef5 	bl	25bf6 <assert_print>
   22e0c:	4812      	ldr	r0, [pc, #72]	; (22e58 <z_work_submit_to_queue+0x8c>)
   22e0e:	218e      	movs	r1, #142	; 0x8e
   22e10:	f002 feea 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   22e14:	480f      	ldr	r0, [pc, #60]	; (22e54 <z_work_submit_to_queue+0x88>)
   22e16:	f7ff fa29 	bl	2226c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   22e1a:	4620      	mov	r0, r4
   22e1c:	a901      	add	r1, sp, #4
   22e1e:	f7ff fedb 	bl	22bd8 <submit_to_queue_locked>
   22e22:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e24:	480b      	ldr	r0, [pc, #44]	; (22e54 <z_work_submit_to_queue+0x88>)
   22e26:	f7ff fa11 	bl	2224c <z_spin_unlock_valid>
   22e2a:	b940      	cbnz	r0, 22e3e <z_work_submit_to_queue+0x72>
   22e2c:	490a      	ldr	r1, [pc, #40]	; (22e58 <z_work_submit_to_queue+0x8c>)
   22e2e:	4808      	ldr	r0, [pc, #32]	; (22e50 <z_work_submit_to_queue+0x84>)
   22e30:	22b9      	movs	r2, #185	; 0xb9
   22e32:	f002 fee0 	bl	25bf6 <assert_print>
   22e36:	4808      	ldr	r0, [pc, #32]	; (22e58 <z_work_submit_to_queue+0x8c>)
   22e38:	21b9      	movs	r1, #185	; 0xb9
   22e3a:	f002 fed5 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   22e3e:	f385 8811 	msr	BASEPRI, r5
   22e42:	f3bf 8f6f 	isb	sy
}
   22e46:	4620      	mov	r0, r4
   22e48:	b003      	add	sp, #12
   22e4a:	bd30      	pop	{r4, r5, pc}
   22e4c:	0002e3cd 	.word	0x0002e3cd
   22e50:	0002ab8c 	.word	0x0002ab8c
   22e54:	200027b0 	.word	0x200027b0
   22e58:	0002b1aa 	.word	0x0002b1aa

00022e5c <k_work_submit>:
{
   22e5c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   22e5e:	4801      	ldr	r0, [pc, #4]	; (22e64 <k_work_submit+0x8>)
   22e60:	f006 be3e 	b.w	29ae0 <k_work_submit_to_queue>
   22e64:	20002000 	.word	0x20002000

00022e68 <k_work_queue_init>:
{
   22e68:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(queue != NULL);
   22e6a:	4604      	mov	r4, r0
   22e6c:	b950      	cbnz	r0, 22e84 <k_work_queue_init+0x1c>
   22e6e:	4908      	ldr	r1, [pc, #32]	; (22e90 <k_work_queue_init+0x28>)
   22e70:	4808      	ldr	r0, [pc, #32]	; (22e94 <k_work_queue_init+0x2c>)
   22e72:	f240 22b9 	movw	r2, #697	; 0x2b9
   22e76:	f002 febe 	bl	25bf6 <assert_print>
   22e7a:	4805      	ldr	r0, [pc, #20]	; (22e90 <k_work_queue_init+0x28>)
   22e7c:	f240 21b9 	movw	r1, #697	; 0x2b9
   22e80:	f002 feb2 	bl	25be8 <assert_post_action>
	*queue = (struct k_work_q) {
   22e84:	22a0      	movs	r2, #160	; 0xa0
   22e86:	2100      	movs	r1, #0
   22e88:	4620      	mov	r0, r4
   22e8a:	f003 fe6d 	bl	26b68 <memset>
}
   22e8e:	bd10      	pop	{r4, pc}
   22e90:	0002e3cd 	.word	0x0002e3cd
   22e94:	0002ab8c 	.word	0x0002ab8c

00022e98 <k_work_queue_start>:
{
   22e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e9c:	b088      	sub	sp, #32
   22e9e:	460e      	mov	r6, r1
   22ea0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   22ea2:	4617      	mov	r7, r2
   22ea4:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   22ea6:	4604      	mov	r4, r0
   22ea8:	b950      	cbnz	r0, 22ec0 <k_work_queue_start+0x28>
   22eaa:	492d      	ldr	r1, [pc, #180]	; (22f60 <k_work_queue_start+0xc8>)
   22eac:	482d      	ldr	r0, [pc, #180]	; (22f64 <k_work_queue_start+0xcc>)
   22eae:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   22eb2:	f002 fea0 	bl	25bf6 <assert_print>
   22eb6:	482a      	ldr	r0, [pc, #168]	; (22f60 <k_work_queue_start+0xc8>)
   22eb8:	f44f 7132 	mov.w	r1, #712	; 0x2c8
   22ebc:	f002 fe94 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   22ec0:	b956      	cbnz	r6, 22ed8 <k_work_queue_start+0x40>
   22ec2:	4927      	ldr	r1, [pc, #156]	; (22f60 <k_work_queue_start+0xc8>)
   22ec4:	4827      	ldr	r0, [pc, #156]	; (22f64 <k_work_queue_start+0xcc>)
   22ec6:	f240 22c9 	movw	r2, #713	; 0x2c9
   22eca:	f002 fe94 	bl	25bf6 <assert_print>
   22ece:	4824      	ldr	r0, [pc, #144]	; (22f60 <k_work_queue_start+0xc8>)
   22ed0:	f240 21c9 	movw	r1, #713	; 0x2c9
   22ed4:	f002 fe88 	bl	25be8 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   22ed8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   22edc:	07db      	lsls	r3, r3, #31
   22ede:	d50a      	bpl.n	22ef6 <k_work_queue_start+0x5e>
   22ee0:	491f      	ldr	r1, [pc, #124]	; (22f60 <k_work_queue_start+0xc8>)
   22ee2:	4820      	ldr	r0, [pc, #128]	; (22f64 <k_work_queue_start+0xcc>)
   22ee4:	f240 22ca 	movw	r2, #714	; 0x2ca
   22ee8:	f002 fe85 	bl	25bf6 <assert_print>
   22eec:	481c      	ldr	r0, [pc, #112]	; (22f60 <k_work_queue_start+0xc8>)
   22eee:	f240 21ca 	movw	r1, #714	; 0x2ca
   22ef2:	f002 fe79 	bl	25be8 <assert_post_action>
	list->head = NULL;
   22ef6:	2300      	movs	r3, #0
	list->tail = NULL;
   22ef8:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   22efc:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   22f00:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   22f04:	f104 0390 	add.w	r3, r4, #144	; 0x90
   22f08:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   22f0c:	b32d      	cbz	r5, 22f5a <k_work_queue_start+0xc2>
   22f0e:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   22f10:	2b00      	cmp	r3, #0
   22f12:	f240 1101 	movw	r1, #257	; 0x101
   22f16:	bf08      	it	eq
   22f18:	2101      	moveq	r1, #1
	*flagp = flags;
   22f1a:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22f1e:	f04f 32ff 	mov.w	r2, #4294967295
   22f22:	f04f 33ff 	mov.w	r3, #4294967295
   22f26:	e9cd 2306 	strd	r2, r3, [sp, #24]
   22f2a:	2200      	movs	r2, #0
   22f2c:	e9cd 8203 	strd	r8, r2, [sp, #12]
   22f30:	e9cd 2201 	strd	r2, r2, [sp, #4]
   22f34:	4b0c      	ldr	r3, [pc, #48]	; (22f68 <k_work_queue_start+0xd0>)
   22f36:	9400      	str	r4, [sp, #0]
   22f38:	463a      	mov	r2, r7
   22f3a:	4631      	mov	r1, r6
   22f3c:	4620      	mov	r0, r4
   22f3e:	f7ff f8b3 	bl	220a8 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   22f42:	b125      	cbz	r5, 22f4e <k_work_queue_start+0xb6>
   22f44:	6829      	ldr	r1, [r5, #0]
   22f46:	b111      	cbz	r1, 22f4e <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
   22f48:	4620      	mov	r0, r4
   22f4a:	f006 fd1d 	bl	29988 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   22f4e:	4620      	mov	r0, r4
}
   22f50:	b008      	add	sp, #32
   22f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22f56:	f006 bd1c 	b.w	29992 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22f5a:	2101      	movs	r1, #1
   22f5c:	e7dd      	b.n	22f1a <k_work_queue_start+0x82>
   22f5e:	bf00      	nop
   22f60:	0002e3cd 	.word	0x0002e3cd
   22f64:	0002ab8c 	.word	0x0002ab8c
   22f68:	000229c1 	.word	0x000229c1

00022f6c <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   22f6c:	b538      	push	{r3, r4, r5, lr}
   22f6e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   22f70:	4604      	mov	r4, r0
   22f72:	b950      	cbnz	r0, 22f8a <k_work_init_delayable+0x1e>
   22f74:	4910      	ldr	r1, [pc, #64]	; (22fb8 <k_work_init_delayable+0x4c>)
   22f76:	4811      	ldr	r0, [pc, #68]	; (22fbc <k_work_init_delayable+0x50>)
   22f78:	f44f 7250 	mov.w	r2, #832	; 0x340
   22f7c:	f002 fe3b 	bl	25bf6 <assert_print>
   22f80:	480d      	ldr	r0, [pc, #52]	; (22fb8 <k_work_init_delayable+0x4c>)
   22f82:	f44f 7150 	mov.w	r1, #832	; 0x340
   22f86:	f002 fe2f 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   22f8a:	b955      	cbnz	r5, 22fa2 <k_work_init_delayable+0x36>
   22f8c:	490a      	ldr	r1, [pc, #40]	; (22fb8 <k_work_init_delayable+0x4c>)
   22f8e:	480b      	ldr	r0, [pc, #44]	; (22fbc <k_work_init_delayable+0x50>)
   22f90:	f240 3241 	movw	r2, #833	; 0x341
   22f94:	f002 fe2f 	bl	25bf6 <assert_print>
   22f98:	4807      	ldr	r0, [pc, #28]	; (22fb8 <k_work_init_delayable+0x4c>)
   22f9a:	f240 3141 	movw	r1, #833	; 0x341
   22f9e:	f002 fe23 	bl	25be8 <assert_post_action>

	*dwork = (struct k_work_delayable){
   22fa2:	2230      	movs	r2, #48	; 0x30
   22fa4:	2100      	movs	r1, #0
   22fa6:	4620      	mov	r0, r4
   22fa8:	f003 fdde 	bl	26b68 <memset>
   22fac:	f44f 7380 	mov.w	r3, #256	; 0x100
   22fb0:	6065      	str	r5, [r4, #4]
   22fb2:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   22fb4:	bd38      	pop	{r3, r4, r5, pc}
   22fb6:	bf00      	nop
   22fb8:	0002e3cd 	.word	0x0002e3cd
   22fbc:	0002ab8c 	.word	0x0002ab8c

00022fc0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   22fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22fc2:	4616      	mov	r6, r2
   22fc4:	9001      	str	r0, [sp, #4]
   22fc6:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   22fc8:	460c      	mov	r4, r1
   22fca:	b951      	cbnz	r1, 22fe2 <k_work_schedule_for_queue+0x22>
   22fcc:	4929      	ldr	r1, [pc, #164]	; (23074 <k_work_schedule_for_queue+0xb4>)
   22fce:	482a      	ldr	r0, [pc, #168]	; (23078 <k_work_schedule_for_queue+0xb8>)
   22fd0:	f240 32b7 	movw	r2, #951	; 0x3b7
   22fd4:	f002 fe0f 	bl	25bf6 <assert_print>
   22fd8:	4826      	ldr	r0, [pc, #152]	; (23074 <k_work_schedule_for_queue+0xb4>)
   22fda:	f240 31b7 	movw	r1, #951	; 0x3b7
   22fde:	f002 fe03 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   22fe2:	f04f 0340 	mov.w	r3, #64	; 0x40
   22fe6:	f3ef 8711 	mrs	r7, BASEPRI
   22fea:	f383 8812 	msr	BASEPRI_MAX, r3
   22fee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ff2:	4822      	ldr	r0, [pc, #136]	; (2307c <k_work_schedule_for_queue+0xbc>)
   22ff4:	f7ff f91c 	bl	22230 <z_spin_lock_valid>
   22ff8:	b940      	cbnz	r0, 2300c <k_work_schedule_for_queue+0x4c>
   22ffa:	4921      	ldr	r1, [pc, #132]	; (23080 <k_work_schedule_for_queue+0xc0>)
   22ffc:	481e      	ldr	r0, [pc, #120]	; (23078 <k_work_schedule_for_queue+0xb8>)
   22ffe:	228e      	movs	r2, #142	; 0x8e
   23000:	f002 fdf9 	bl	25bf6 <assert_print>
   23004:	481e      	ldr	r0, [pc, #120]	; (23080 <k_work_schedule_for_queue+0xc0>)
   23006:	218e      	movs	r1, #142	; 0x8e
   23008:	f002 fdee 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   2300c:	481b      	ldr	r0, [pc, #108]	; (2307c <k_work_schedule_for_queue+0xbc>)
   2300e:	f7ff f92d 	bl	2226c <z_spin_lock_set_owner>
	return *flagp;
   23012:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   23014:	f013 0f0e 	tst.w	r3, #14
   23018:	d129      	bne.n	2306e <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2301a:	ea55 0206 	orrs.w	r2, r5, r6
   2301e:	d118      	bne.n	23052 <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   23020:	4620      	mov	r0, r4
   23022:	a901      	add	r1, sp, #4
   23024:	f7ff fdd8 	bl	22bd8 <submit_to_queue_locked>
   23028:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2302a:	4814      	ldr	r0, [pc, #80]	; (2307c <k_work_schedule_for_queue+0xbc>)
   2302c:	f7ff f90e 	bl	2224c <z_spin_unlock_valid>
   23030:	b940      	cbnz	r0, 23044 <k_work_schedule_for_queue+0x84>
   23032:	4913      	ldr	r1, [pc, #76]	; (23080 <k_work_schedule_for_queue+0xc0>)
   23034:	4810      	ldr	r0, [pc, #64]	; (23078 <k_work_schedule_for_queue+0xb8>)
   23036:	22b9      	movs	r2, #185	; 0xb9
   23038:	f002 fddd 	bl	25bf6 <assert_print>
   2303c:	4810      	ldr	r0, [pc, #64]	; (23080 <k_work_schedule_for_queue+0xc0>)
   2303e:	21b9      	movs	r1, #185	; 0xb9
   23040:	f002 fdd2 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23044:	f387 8811 	msr	BASEPRI, r7
   23048:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2304c:	4620      	mov	r0, r4
   2304e:	b003      	add	sp, #12
   23050:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   23052:	f043 0308 	orr.w	r3, r3, #8
   23056:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   23058:	9b01      	ldr	r3, [sp, #4]
   2305a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2305c:	f104 0010 	add.w	r0, r4, #16
   23060:	4908      	ldr	r1, [pc, #32]	; (23084 <k_work_schedule_for_queue+0xc4>)
   23062:	4632      	mov	r2, r6
   23064:	462b      	mov	r3, r5
   23066:	f001 f9c1 	bl	243ec <z_add_timeout>
	return ret;
   2306a:	2401      	movs	r4, #1
   2306c:	e7dd      	b.n	2302a <k_work_schedule_for_queue+0x6a>
	int ret = 0;
   2306e:	2400      	movs	r4, #0
   23070:	e7db      	b.n	2302a <k_work_schedule_for_queue+0x6a>
   23072:	bf00      	nop
   23074:	0002e3cd 	.word	0x0002e3cd
   23078:	0002ab8c 	.word	0x0002ab8c
   2307c:	200027b0 	.word	0x200027b0
   23080:	0002b1aa 	.word	0x0002b1aa
   23084:	00022c99 	.word	0x00022c99

00023088 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   23088:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2308a:	4801      	ldr	r0, [pc, #4]	; (23090 <k_work_schedule+0x8>)
   2308c:	f7ff bf98 	b.w	22fc0 <k_work_schedule_for_queue>
   23090:	20002000 	.word	0x20002000

00023094 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   23094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23096:	4616      	mov	r6, r2
   23098:	9001      	str	r0, [sp, #4]
   2309a:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2309c:	460c      	mov	r4, r1
   2309e:	b951      	cbnz	r1, 230b6 <k_work_reschedule_for_queue+0x22>
   230a0:	4928      	ldr	r1, [pc, #160]	; (23144 <k_work_reschedule_for_queue+0xb0>)
   230a2:	4829      	ldr	r0, [pc, #164]	; (23148 <k_work_reschedule_for_queue+0xb4>)
   230a4:	f240 32db 	movw	r2, #987	; 0x3db
   230a8:	f002 fda5 	bl	25bf6 <assert_print>
   230ac:	4825      	ldr	r0, [pc, #148]	; (23144 <k_work_reschedule_for_queue+0xb0>)
   230ae:	f240 31db 	movw	r1, #987	; 0x3db
   230b2:	f002 fd99 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   230b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   230ba:	f3ef 8711 	mrs	r7, BASEPRI
   230be:	f383 8812 	msr	BASEPRI_MAX, r3
   230c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   230c6:	4821      	ldr	r0, [pc, #132]	; (2314c <k_work_reschedule_for_queue+0xb8>)
   230c8:	f7ff f8b2 	bl	22230 <z_spin_lock_valid>
   230cc:	b940      	cbnz	r0, 230e0 <k_work_reschedule_for_queue+0x4c>
   230ce:	4920      	ldr	r1, [pc, #128]	; (23150 <k_work_reschedule_for_queue+0xbc>)
   230d0:	481d      	ldr	r0, [pc, #116]	; (23148 <k_work_reschedule_for_queue+0xb4>)
   230d2:	228e      	movs	r2, #142	; 0x8e
   230d4:	f002 fd8f 	bl	25bf6 <assert_print>
   230d8:	481d      	ldr	r0, [pc, #116]	; (23150 <k_work_reschedule_for_queue+0xbc>)
   230da:	218e      	movs	r1, #142	; 0x8e
   230dc:	f002 fd84 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   230e0:	481a      	ldr	r0, [pc, #104]	; (2314c <k_work_reschedule_for_queue+0xb8>)
   230e2:	f7ff f8c3 	bl	2226c <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   230e6:	4620      	mov	r0, r4
   230e8:	f006 fcb4 	bl	29a54 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   230ec:	ea55 0306 	orrs.w	r3, r5, r6
   230f0:	d118      	bne.n	23124 <k_work_reschedule_for_queue+0x90>
		return submit_to_queue_locked(work, queuep);
   230f2:	4620      	mov	r0, r4
   230f4:	a901      	add	r1, sp, #4
   230f6:	f7ff fd6f 	bl	22bd8 <submit_to_queue_locked>
   230fa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230fc:	4813      	ldr	r0, [pc, #76]	; (2314c <k_work_reschedule_for_queue+0xb8>)
   230fe:	f7ff f8a5 	bl	2224c <z_spin_unlock_valid>
   23102:	b940      	cbnz	r0, 23116 <k_work_reschedule_for_queue+0x82>
   23104:	4912      	ldr	r1, [pc, #72]	; (23150 <k_work_reschedule_for_queue+0xbc>)
   23106:	4810      	ldr	r0, [pc, #64]	; (23148 <k_work_reschedule_for_queue+0xb4>)
   23108:	22b9      	movs	r2, #185	; 0xb9
   2310a:	f002 fd74 	bl	25bf6 <assert_print>
   2310e:	4810      	ldr	r0, [pc, #64]	; (23150 <k_work_reschedule_for_queue+0xbc>)
   23110:	21b9      	movs	r1, #185	; 0xb9
   23112:	f002 fd69 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23116:	f387 8811 	msr	BASEPRI, r7
   2311a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2311e:	4620      	mov	r0, r4
   23120:	b003      	add	sp, #12
   23122:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   23124:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23126:	490b      	ldr	r1, [pc, #44]	; (23154 <k_work_reschedule_for_queue+0xc0>)
	*flagp |= BIT(bit);
   23128:	f043 0308 	orr.w	r3, r3, #8
   2312c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2312e:	9b01      	ldr	r3, [sp, #4]
   23130:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23132:	f104 0010 	add.w	r0, r4, #16
   23136:	4632      	mov	r2, r6
   23138:	462b      	mov	r3, r5
   2313a:	f001 f957 	bl	243ec <z_add_timeout>
	return ret;
   2313e:	2401      	movs	r4, #1
   23140:	e7dc      	b.n	230fc <k_work_reschedule_for_queue+0x68>
   23142:	bf00      	nop
   23144:	0002e3cd 	.word	0x0002e3cd
   23148:	0002ab8c 	.word	0x0002ab8c
   2314c:	200027b0 	.word	0x200027b0
   23150:	0002b1aa 	.word	0x0002b1aa
   23154:	00022c99 	.word	0x00022c99

00023158 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   23158:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2315a:	4801      	ldr	r0, [pc, #4]	; (23160 <k_work_reschedule+0x8>)
   2315c:	f7ff bf9a 	b.w	23094 <k_work_reschedule_for_queue>
   23160:	20002000 	.word	0x20002000

00023164 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   23164:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   23166:	4604      	mov	r4, r0
   23168:	b950      	cbnz	r0, 23180 <k_work_cancel_delayable+0x1c>
   2316a:	491e      	ldr	r1, [pc, #120]	; (231e4 <k_work_cancel_delayable+0x80>)
   2316c:	481e      	ldr	r0, [pc, #120]	; (231e8 <k_work_cancel_delayable+0x84>)
   2316e:	f240 32fd 	movw	r2, #1021	; 0x3fd
   23172:	f002 fd40 	bl	25bf6 <assert_print>
   23176:	481b      	ldr	r0, [pc, #108]	; (231e4 <k_work_cancel_delayable+0x80>)
   23178:	f240 31fd 	movw	r1, #1021	; 0x3fd
   2317c:	f002 fd34 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23180:	f04f 0340 	mov.w	r3, #64	; 0x40
   23184:	f3ef 8511 	mrs	r5, BASEPRI
   23188:	f383 8812 	msr	BASEPRI_MAX, r3
   2318c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23190:	4816      	ldr	r0, [pc, #88]	; (231ec <k_work_cancel_delayable+0x88>)
   23192:	f7ff f84d 	bl	22230 <z_spin_lock_valid>
   23196:	b940      	cbnz	r0, 231aa <k_work_cancel_delayable+0x46>
   23198:	4915      	ldr	r1, [pc, #84]	; (231f0 <k_work_cancel_delayable+0x8c>)
   2319a:	4813      	ldr	r0, [pc, #76]	; (231e8 <k_work_cancel_delayable+0x84>)
   2319c:	228e      	movs	r2, #142	; 0x8e
   2319e:	f002 fd2a 	bl	25bf6 <assert_print>
   231a2:	4813      	ldr	r0, [pc, #76]	; (231f0 <k_work_cancel_delayable+0x8c>)
   231a4:	218e      	movs	r1, #142	; 0x8e
   231a6:	f002 fd1f 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   231aa:	4810      	ldr	r0, [pc, #64]	; (231ec <k_work_cancel_delayable+0x88>)
   231ac:	f7ff f85e 	bl	2226c <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   231b0:	4620      	mov	r0, r4
   231b2:	f006 fc4f 	bl	29a54 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   231b6:	4620      	mov	r0, r4
   231b8:	f006 fc61 	bl	29a7e <cancel_async_locked>
   231bc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   231be:	480b      	ldr	r0, [pc, #44]	; (231ec <k_work_cancel_delayable+0x88>)
   231c0:	f7ff f844 	bl	2224c <z_spin_unlock_valid>
   231c4:	b940      	cbnz	r0, 231d8 <k_work_cancel_delayable+0x74>
   231c6:	490a      	ldr	r1, [pc, #40]	; (231f0 <k_work_cancel_delayable+0x8c>)
   231c8:	4807      	ldr	r0, [pc, #28]	; (231e8 <k_work_cancel_delayable+0x84>)
   231ca:	22b9      	movs	r2, #185	; 0xb9
   231cc:	f002 fd13 	bl	25bf6 <assert_print>
   231d0:	4807      	ldr	r0, [pc, #28]	; (231f0 <k_work_cancel_delayable+0x8c>)
   231d2:	21b9      	movs	r1, #185	; 0xb9
   231d4:	f002 fd08 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   231d8:	f385 8811 	msr	BASEPRI, r5
   231dc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   231e0:	4620      	mov	r0, r4
   231e2:	bd38      	pop	{r3, r4, r5, pc}
   231e4:	0002e3cd 	.word	0x0002e3cd
   231e8:	0002ab8c 	.word	0x0002ab8c
   231ec:	200027b0 	.word	0x200027b0
   231f0:	0002b1aa 	.word	0x0002b1aa

000231f4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   231f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   231f8:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   231fa:	4605      	mov	r5, r0
   231fc:	b950      	cbnz	r0, 23214 <k_work_cancel_delayable_sync+0x20>
   231fe:	4936      	ldr	r1, [pc, #216]	; (232d8 <k_work_cancel_delayable_sync+0xe4>)
   23200:	4836      	ldr	r0, [pc, #216]	; (232dc <k_work_cancel_delayable_sync+0xe8>)
   23202:	f240 420e 	movw	r2, #1038	; 0x40e
   23206:	f002 fcf6 	bl	25bf6 <assert_print>
   2320a:	4833      	ldr	r0, [pc, #204]	; (232d8 <k_work_cancel_delayable_sync+0xe4>)
   2320c:	f240 410e 	movw	r1, #1038	; 0x40e
   23210:	f002 fcea 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   23214:	b956      	cbnz	r6, 2322c <k_work_cancel_delayable_sync+0x38>
   23216:	4930      	ldr	r1, [pc, #192]	; (232d8 <k_work_cancel_delayable_sync+0xe4>)
   23218:	4830      	ldr	r0, [pc, #192]	; (232dc <k_work_cancel_delayable_sync+0xe8>)
   2321a:	f240 420f 	movw	r2, #1039	; 0x40f
   2321e:	f002 fcea 	bl	25bf6 <assert_print>
   23222:	482d      	ldr	r0, [pc, #180]	; (232d8 <k_work_cancel_delayable_sync+0xe4>)
   23224:	f240 410f 	movw	r1, #1039	; 0x40f
   23228:	f002 fcde 	bl	25be8 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   2322c:	f006 fba6 	bl	2997c <k_is_in_isr>
   23230:	b150      	cbz	r0, 23248 <k_work_cancel_delayable_sync+0x54>
   23232:	4929      	ldr	r1, [pc, #164]	; (232d8 <k_work_cancel_delayable_sync+0xe4>)
   23234:	4829      	ldr	r0, [pc, #164]	; (232dc <k_work_cancel_delayable_sync+0xe8>)
   23236:	f44f 6282 	mov.w	r2, #1040	; 0x410
   2323a:	f002 fcdc 	bl	25bf6 <assert_print>
   2323e:	4826      	ldr	r0, [pc, #152]	; (232d8 <k_work_cancel_delayable_sync+0xe4>)
   23240:	f44f 6182 	mov.w	r1, #1040	; 0x410
   23244:	f002 fcd0 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23248:	f04f 0340 	mov.w	r3, #64	; 0x40
   2324c:	f3ef 8811 	mrs	r8, BASEPRI
   23250:	f383 8812 	msr	BASEPRI_MAX, r3
   23254:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23258:	4821      	ldr	r0, [pc, #132]	; (232e0 <k_work_cancel_delayable_sync+0xec>)
   2325a:	f7fe ffe9 	bl	22230 <z_spin_lock_valid>
   2325e:	b940      	cbnz	r0, 23272 <k_work_cancel_delayable_sync+0x7e>
   23260:	4920      	ldr	r1, [pc, #128]	; (232e4 <k_work_cancel_delayable_sync+0xf0>)
   23262:	481e      	ldr	r0, [pc, #120]	; (232dc <k_work_cancel_delayable_sync+0xe8>)
   23264:	228e      	movs	r2, #142	; 0x8e
   23266:	f002 fcc6 	bl	25bf6 <assert_print>
   2326a:	481e      	ldr	r0, [pc, #120]	; (232e4 <k_work_cancel_delayable_sync+0xf0>)
   2326c:	218e      	movs	r1, #142	; 0x8e
   2326e:	f002 fcbb 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   23272:	481b      	ldr	r0, [pc, #108]	; (232e0 <k_work_cancel_delayable_sync+0xec>)
   23274:	f7fe fffa 	bl	2226c <z_spin_lock_set_owner>
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   23278:	68ec      	ldr	r4, [r5, #12]
   2327a:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2327e:	2c00      	cmp	r4, #0
   23280:	bf14      	ite	ne
   23282:	2701      	movne	r7, #1
   23284:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   23286:	d00a      	beq.n	2329e <k_work_cancel_delayable_sync+0xaa>
	(void)unschedule_locked(dwork);
   23288:	4628      	mov	r0, r5
   2328a:	f006 fbe3 	bl	29a54 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2328e:	4628      	mov	r0, r5
   23290:	f006 fbf5 	bl	29a7e <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   23294:	4631      	mov	r1, r6
   23296:	4628      	mov	r0, r5
   23298:	f7ff fc80 	bl	22b9c <cancel_sync_locked>
   2329c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2329e:	4810      	ldr	r0, [pc, #64]	; (232e0 <k_work_cancel_delayable_sync+0xec>)
   232a0:	f7fe ffd4 	bl	2224c <z_spin_unlock_valid>
   232a4:	b940      	cbnz	r0, 232b8 <k_work_cancel_delayable_sync+0xc4>
   232a6:	490f      	ldr	r1, [pc, #60]	; (232e4 <k_work_cancel_delayable_sync+0xf0>)
   232a8:	480c      	ldr	r0, [pc, #48]	; (232dc <k_work_cancel_delayable_sync+0xe8>)
   232aa:	22b9      	movs	r2, #185	; 0xb9
   232ac:	f002 fca3 	bl	25bf6 <assert_print>
   232b0:	480c      	ldr	r0, [pc, #48]	; (232e4 <k_work_cancel_delayable_sync+0xf0>)
   232b2:	21b9      	movs	r1, #185	; 0xb9
   232b4:	f002 fc98 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   232b8:	f388 8811 	msr	BASEPRI, r8
   232bc:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   232c0:	b13c      	cbz	r4, 232d2 <k_work_cancel_delayable_sync+0xde>
	return z_impl_k_sem_take(sem, timeout);
   232c2:	f04f 32ff 	mov.w	r2, #4294967295
   232c6:	f04f 33ff 	mov.w	r3, #4294967295
   232ca:	f106 0008 	add.w	r0, r6, #8
   232ce:	f7ff fabd 	bl	2284c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   232d2:	4638      	mov	r0, r7
   232d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   232d8:	0002e3cd 	.word	0x0002e3cd
   232dc:	0002ab8c 	.word	0x0002ab8c
   232e0:	200027b0 	.word	0x200027b0
   232e4:	0002b1aa 	.word	0x0002b1aa

000232e8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   232e8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   232ea:	4d07      	ldr	r5, [pc, #28]	; (23308 <z_reset_time_slice+0x20>)
   232ec:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   232ee:	b154      	cbz	r4, 23306 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   232f0:	f7fc fbb8 	bl	1fa64 <sys_clock_elapsed>
   232f4:	4b05      	ldr	r3, [pc, #20]	; (2330c <z_reset_time_slice+0x24>)
   232f6:	4404      	add	r4, r0
   232f8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   232fa:	6828      	ldr	r0, [r5, #0]
   232fc:	2100      	movs	r1, #0
	}
}
   232fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   23302:	f001 b9cd 	b.w	246a0 <z_set_timeout_expiry>
}
   23306:	bd38      	pop	{r3, r4, r5, pc}
   23308:	200027c8 	.word	0x200027c8
   2330c:	20002780 	.word	0x20002780

00023310 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   23310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23312:	4604      	mov	r4, r0
   23314:	460d      	mov	r5, r1
	__asm__ volatile(
   23316:	f04f 0340 	mov.w	r3, #64	; 0x40
   2331a:	f3ef 8711 	mrs	r7, BASEPRI
   2331e:	f383 8812 	msr	BASEPRI_MAX, r3
   23322:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23326:	481e      	ldr	r0, [pc, #120]	; (233a0 <k_sched_time_slice_set+0x90>)
   23328:	f7fe ff82 	bl	22230 <z_spin_lock_valid>
   2332c:	b940      	cbnz	r0, 23340 <k_sched_time_slice_set+0x30>
   2332e:	491d      	ldr	r1, [pc, #116]	; (233a4 <k_sched_time_slice_set+0x94>)
   23330:	481d      	ldr	r0, [pc, #116]	; (233a8 <k_sched_time_slice_set+0x98>)
   23332:	228e      	movs	r2, #142	; 0x8e
   23334:	f002 fc5f 	bl	25bf6 <assert_print>
   23338:	481a      	ldr	r0, [pc, #104]	; (233a4 <k_sched_time_slice_set+0x94>)
   2333a:	218e      	movs	r1, #142	; 0x8e
   2333c:	f002 fc54 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   23340:	4817      	ldr	r0, [pc, #92]	; (233a0 <k_sched_time_slice_set+0x90>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   23342:	4e1a      	ldr	r6, [pc, #104]	; (233ac <k_sched_time_slice_set+0x9c>)
   23344:	f7fe ff92 	bl	2226c <z_spin_lock_set_owner>
   23348:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   2334a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   2334e:	f240 30e7 	movw	r0, #999	; 0x3e7
   23352:	6131      	str	r1, [r6, #16]
   23354:	2300      	movs	r3, #0
   23356:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2335a:	fbe4 010c 	umlal	r0, r1, r4, ip
   2335e:	f7dc febf 	bl	e0 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   23362:	2c00      	cmp	r4, #0
   23364:	4b12      	ldr	r3, [pc, #72]	; (233b0 <k_sched_time_slice_set+0xa0>)
   23366:	dc17      	bgt.n	23398 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   23368:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   2336a:	4b12      	ldr	r3, [pc, #72]	; (233b4 <k_sched_time_slice_set+0xa4>)
		z_reset_time_slice(_current);
   2336c:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   2336e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   23370:	f7ff ffba 	bl	232e8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23374:	480a      	ldr	r0, [pc, #40]	; (233a0 <k_sched_time_slice_set+0x90>)
   23376:	f7fe ff69 	bl	2224c <z_spin_unlock_valid>
   2337a:	b940      	cbnz	r0, 2338e <k_sched_time_slice_set+0x7e>
   2337c:	4909      	ldr	r1, [pc, #36]	; (233a4 <k_sched_time_slice_set+0x94>)
   2337e:	480a      	ldr	r0, [pc, #40]	; (233a8 <k_sched_time_slice_set+0x98>)
   23380:	22b9      	movs	r2, #185	; 0xb9
   23382:	f002 fc38 	bl	25bf6 <assert_print>
   23386:	4807      	ldr	r0, [pc, #28]	; (233a4 <k_sched_time_slice_set+0x94>)
   23388:	21b9      	movs	r1, #185	; 0xb9
   2338a:	f002 fc2d 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   2338e:	f387 8811 	msr	BASEPRI, r7
   23392:	f3bf 8f6f 	isb	sy
	}
}
   23396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   23398:	2802      	cmp	r0, #2
   2339a:	bfb8      	it	lt
   2339c:	2002      	movlt	r0, #2
   2339e:	e7e3      	b.n	23368 <k_sched_time_slice_set+0x58>
   233a0:	200027c0 	.word	0x200027c0
   233a4:	0002b1aa 	.word	0x0002b1aa
   233a8:	0002ab8c 	.word	0x0002ab8c
   233ac:	20002780 	.word	0x20002780
   233b0:	200027c8 	.word	0x200027c8
   233b4:	200027c4 	.word	0x200027c4

000233b8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   233b8:	b510      	push	{r4, lr}
   233ba:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   233bc:	460c      	mov	r4, r1
   233be:	b9c1      	cbnz	r1, 233f2 <z_reschedule+0x3a>
   233c0:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   233c4:	b9aa      	cbnz	r2, 233f2 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   233c6:	4a14      	ldr	r2, [pc, #80]	; (23418 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   233c8:	69d1      	ldr	r1, [r2, #28]
   233ca:	6892      	ldr	r2, [r2, #8]
   233cc:	4291      	cmp	r1, r2
   233ce:	d010      	beq.n	233f2 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233d0:	f7fe ff3c 	bl	2224c <z_spin_unlock_valid>
   233d4:	b940      	cbnz	r0, 233e8 <z_reschedule+0x30>
   233d6:	4911      	ldr	r1, [pc, #68]	; (2341c <z_reschedule+0x64>)
   233d8:	4811      	ldr	r0, [pc, #68]	; (23420 <z_reschedule+0x68>)
   233da:	22d0      	movs	r2, #208	; 0xd0
   233dc:	f002 fc0b 	bl	25bf6 <assert_print>
   233e0:	480e      	ldr	r0, [pc, #56]	; (2341c <z_reschedule+0x64>)
   233e2:	21d0      	movs	r1, #208	; 0xd0
   233e4:	f002 fc00 	bl	25be8 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   233e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   233ec:	2000      	movs	r0, #0
   233ee:	f7f1 b83f 	b.w	14470 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233f2:	4618      	mov	r0, r3
   233f4:	f7fe ff2a 	bl	2224c <z_spin_unlock_valid>
   233f8:	b940      	cbnz	r0, 2340c <z_reschedule+0x54>
   233fa:	4908      	ldr	r1, [pc, #32]	; (2341c <z_reschedule+0x64>)
   233fc:	4808      	ldr	r0, [pc, #32]	; (23420 <z_reschedule+0x68>)
   233fe:	22b9      	movs	r2, #185	; 0xb9
   23400:	f002 fbf9 	bl	25bf6 <assert_print>
   23404:	4805      	ldr	r0, [pc, #20]	; (2341c <z_reschedule+0x64>)
   23406:	21b9      	movs	r1, #185	; 0xb9
   23408:	f002 fbee 	bl	25be8 <assert_post_action>
   2340c:	f384 8811 	msr	BASEPRI, r4
   23410:	f3bf 8f6f 	isb	sy
   23414:	bd10      	pop	{r4, pc}
   23416:	bf00      	nop
   23418:	20002780 	.word	0x20002780
   2341c:	0002b1aa 	.word	0x0002b1aa
   23420:	0002ab8c 	.word	0x0002ab8c

00023424 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   23424:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23426:	f04f 0340 	mov.w	r3, #64	; 0x40
   2342a:	f3ef 8511 	mrs	r5, BASEPRI
   2342e:	f383 8812 	msr	BASEPRI_MAX, r3
   23432:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23436:	4820      	ldr	r0, [pc, #128]	; (234b8 <k_sched_lock+0x94>)
   23438:	f7fe fefa 	bl	22230 <z_spin_lock_valid>
   2343c:	b940      	cbnz	r0, 23450 <k_sched_lock+0x2c>
   2343e:	491f      	ldr	r1, [pc, #124]	; (234bc <k_sched_lock+0x98>)
   23440:	481f      	ldr	r0, [pc, #124]	; (234c0 <k_sched_lock+0x9c>)
   23442:	228e      	movs	r2, #142	; 0x8e
   23444:	f002 fbd7 	bl	25bf6 <assert_print>
   23448:	481c      	ldr	r0, [pc, #112]	; (234bc <k_sched_lock+0x98>)
   2344a:	218e      	movs	r1, #142	; 0x8e
   2344c:	f002 fbcc 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   23450:	4819      	ldr	r0, [pc, #100]	; (234b8 <k_sched_lock+0x94>)
   23452:	f7fe ff0b 	bl	2226c <z_spin_lock_set_owner>
   23456:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2345a:	b143      	cbz	r3, 2346e <k_sched_lock+0x4a>
   2345c:	4919      	ldr	r1, [pc, #100]	; (234c4 <k_sched_lock+0xa0>)
   2345e:	4818      	ldr	r0, [pc, #96]	; (234c0 <k_sched_lock+0x9c>)
   23460:	22fd      	movs	r2, #253	; 0xfd
   23462:	f002 fbc8 	bl	25bf6 <assert_print>
   23466:	4817      	ldr	r0, [pc, #92]	; (234c4 <k_sched_lock+0xa0>)
   23468:	21fd      	movs	r1, #253	; 0xfd
   2346a:	f002 fbbd 	bl	25be8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2346e:	4c16      	ldr	r4, [pc, #88]	; (234c8 <k_sched_lock+0xa4>)
   23470:	68a3      	ldr	r3, [r4, #8]
   23472:	7bdb      	ldrb	r3, [r3, #15]
   23474:	2b01      	cmp	r3, #1
   23476:	d108      	bne.n	2348a <k_sched_lock+0x66>
   23478:	4912      	ldr	r1, [pc, #72]	; (234c4 <k_sched_lock+0xa0>)
   2347a:	4811      	ldr	r0, [pc, #68]	; (234c0 <k_sched_lock+0x9c>)
   2347c:	22fe      	movs	r2, #254	; 0xfe
   2347e:	f002 fbba 	bl	25bf6 <assert_print>
   23482:	4810      	ldr	r0, [pc, #64]	; (234c4 <k_sched_lock+0xa0>)
   23484:	21fe      	movs	r1, #254	; 0xfe
   23486:	f002 fbaf 	bl	25be8 <assert_post_action>
	--_current->base.sched_locked;
   2348a:	68a2      	ldr	r2, [r4, #8]
   2348c:	7bd3      	ldrb	r3, [r2, #15]
   2348e:	3b01      	subs	r3, #1
   23490:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23492:	4809      	ldr	r0, [pc, #36]	; (234b8 <k_sched_lock+0x94>)
   23494:	f7fe feda 	bl	2224c <z_spin_unlock_valid>
   23498:	b940      	cbnz	r0, 234ac <k_sched_lock+0x88>
   2349a:	4908      	ldr	r1, [pc, #32]	; (234bc <k_sched_lock+0x98>)
   2349c:	4808      	ldr	r0, [pc, #32]	; (234c0 <k_sched_lock+0x9c>)
   2349e:	22b9      	movs	r2, #185	; 0xb9
   234a0:	f002 fba9 	bl	25bf6 <assert_print>
   234a4:	4805      	ldr	r0, [pc, #20]	; (234bc <k_sched_lock+0x98>)
   234a6:	21b9      	movs	r1, #185	; 0xb9
   234a8:	f002 fb9e 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   234ac:	f385 8811 	msr	BASEPRI, r5
   234b0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   234b4:	bd38      	pop	{r3, r4, r5, pc}
   234b6:	bf00      	nop
   234b8:	200027c0 	.word	0x200027c0
   234bc:	0002b1aa 	.word	0x0002b1aa
   234c0:	0002ab8c 	.word	0x0002ab8c
   234c4:	0002e3ee 	.word	0x0002e3ee
   234c8:	20002780 	.word	0x20002780

000234cc <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   234cc:	4b0b      	ldr	r3, [pc, #44]	; (234fc <z_priq_dumb_remove+0x30>)
   234ce:	4299      	cmp	r1, r3
{
   234d0:	b510      	push	{r4, lr}
   234d2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   234d4:	d10a      	bne.n	234ec <z_priq_dumb_remove+0x20>
   234d6:	490a      	ldr	r1, [pc, #40]	; (23500 <z_priq_dumb_remove+0x34>)
   234d8:	480a      	ldr	r0, [pc, #40]	; (23504 <z_priq_dumb_remove+0x38>)
   234da:	f240 4262 	movw	r2, #1122	; 0x462
   234de:	f002 fb8a 	bl	25bf6 <assert_print>
   234e2:	4807      	ldr	r0, [pc, #28]	; (23500 <z_priq_dumb_remove+0x34>)
   234e4:	f240 4162 	movw	r1, #1122	; 0x462
   234e8:	f002 fb7e 	bl	25be8 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   234ec:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   234f0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   234f2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   234f4:	2300      	movs	r3, #0
	node->prev = NULL;
   234f6:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   234fa:	bd10      	pop	{r4, pc}
   234fc:	20001f00 	.word	0x20001f00
   23500:	0002e419 	.word	0x0002e419
   23504:	0002ab8c 	.word	0x0002ab8c

00023508 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   23508:	6883      	ldr	r3, [r0, #8]
{
   2350a:	b510      	push	{r4, lr}
   2350c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2350e:	b953      	cbnz	r3, 23526 <unpend_thread_no_timeout+0x1e>
   23510:	490a      	ldr	r1, [pc, #40]	; (2353c <unpend_thread_no_timeout+0x34>)
   23512:	480b      	ldr	r0, [pc, #44]	; (23540 <unpend_thread_no_timeout+0x38>)
   23514:	f44f 7235 	mov.w	r2, #724	; 0x2d4
   23518:	f002 fb6d 	bl	25bf6 <assert_print>
   2351c:	4807      	ldr	r0, [pc, #28]	; (2353c <unpend_thread_no_timeout+0x34>)
   2351e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   23522:	f002 fb61 	bl	25be8 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   23526:	68a0      	ldr	r0, [r4, #8]
   23528:	4621      	mov	r1, r4
   2352a:	f7ff ffcf 	bl	234cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2352e:	7b63      	ldrb	r3, [r4, #13]
   23530:	f023 0302 	bic.w	r3, r3, #2
   23534:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   23536:	2300      	movs	r3, #0
   23538:	60a3      	str	r3, [r4, #8]
}
   2353a:	bd10      	pop	{r4, pc}
   2353c:	0002e419 	.word	0x0002e419
   23540:	0002ab8c 	.word	0x0002ab8c

00023544 <z_unpend_thread>:
{
   23544:	b538      	push	{r3, r4, r5, lr}
   23546:	4604      	mov	r4, r0
	__asm__ volatile(
   23548:	f04f 0340 	mov.w	r3, #64	; 0x40
   2354c:	f3ef 8511 	mrs	r5, BASEPRI
   23550:	f383 8812 	msr	BASEPRI_MAX, r3
   23554:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23558:	4814      	ldr	r0, [pc, #80]	; (235ac <z_unpend_thread+0x68>)
   2355a:	f7fe fe69 	bl	22230 <z_spin_lock_valid>
   2355e:	b940      	cbnz	r0, 23572 <z_unpend_thread+0x2e>
   23560:	4913      	ldr	r1, [pc, #76]	; (235b0 <z_unpend_thread+0x6c>)
   23562:	4814      	ldr	r0, [pc, #80]	; (235b4 <z_unpend_thread+0x70>)
   23564:	228e      	movs	r2, #142	; 0x8e
   23566:	f002 fb46 	bl	25bf6 <assert_print>
   2356a:	4811      	ldr	r0, [pc, #68]	; (235b0 <z_unpend_thread+0x6c>)
   2356c:	218e      	movs	r1, #142	; 0x8e
   2356e:	f002 fb3b 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   23572:	480e      	ldr	r0, [pc, #56]	; (235ac <z_unpend_thread+0x68>)
   23574:	f7fe fe7a 	bl	2226c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   23578:	4620      	mov	r0, r4
   2357a:	f7ff ffc5 	bl	23508 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2357e:	480b      	ldr	r0, [pc, #44]	; (235ac <z_unpend_thread+0x68>)
   23580:	f7fe fe64 	bl	2224c <z_spin_unlock_valid>
   23584:	b940      	cbnz	r0, 23598 <z_unpend_thread+0x54>
   23586:	490a      	ldr	r1, [pc, #40]	; (235b0 <z_unpend_thread+0x6c>)
   23588:	480a      	ldr	r0, [pc, #40]	; (235b4 <z_unpend_thread+0x70>)
   2358a:	22b9      	movs	r2, #185	; 0xb9
   2358c:	f002 fb33 	bl	25bf6 <assert_print>
   23590:	4807      	ldr	r0, [pc, #28]	; (235b0 <z_unpend_thread+0x6c>)
   23592:	21b9      	movs	r1, #185	; 0xb9
   23594:	f002 fb28 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23598:	f385 8811 	msr	BASEPRI, r5
   2359c:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   235a0:	f104 0018 	add.w	r0, r4, #24
}
   235a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   235a8:	f000 bfce 	b.w	24548 <z_abort_timeout>
   235ac:	200027c0 	.word	0x200027c0
   235b0:	0002b1aa 	.word	0x0002b1aa
   235b4:	0002ab8c 	.word	0x0002ab8c

000235b8 <update_cache>:
{
   235b8:	b538      	push	{r3, r4, r5, lr}
   235ba:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   235bc:	4812      	ldr	r0, [pc, #72]	; (23608 <update_cache+0x50>)
   235be:	4d13      	ldr	r5, [pc, #76]	; (2360c <update_cache+0x54>)
   235c0:	f006 fac0 	bl	29b44 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   235c4:	4604      	mov	r4, r0
   235c6:	b900      	cbnz	r0, 235ca <update_cache+0x12>
   235c8:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   235ca:	b9aa      	cbnz	r2, 235f8 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   235cc:	68ab      	ldr	r3, [r5, #8]
   235ce:	b943      	cbnz	r3, 235e2 <update_cache+0x2a>
   235d0:	490f      	ldr	r1, [pc, #60]	; (23610 <update_cache+0x58>)
   235d2:	4810      	ldr	r0, [pc, #64]	; (23614 <update_cache+0x5c>)
   235d4:	2289      	movs	r2, #137	; 0x89
   235d6:	f002 fb0e 	bl	25bf6 <assert_print>
   235da:	480d      	ldr	r0, [pc, #52]	; (23610 <update_cache+0x58>)
   235dc:	2189      	movs	r1, #137	; 0x89
   235de:	f002 fb03 	bl	25be8 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   235e2:	68ab      	ldr	r3, [r5, #8]
   235e4:	7b5a      	ldrb	r2, [r3, #13]
   235e6:	06d2      	lsls	r2, r2, #27
   235e8:	d106      	bne.n	235f8 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   235ea:	69a2      	ldr	r2, [r4, #24]
   235ec:	b922      	cbnz	r2, 235f8 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   235ee:	89da      	ldrh	r2, [r3, #14]
   235f0:	2a7f      	cmp	r2, #127	; 0x7f
   235f2:	d901      	bls.n	235f8 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   235f4:	61eb      	str	r3, [r5, #28]
}
   235f6:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   235f8:	68ab      	ldr	r3, [r5, #8]
   235fa:	42a3      	cmp	r3, r4
   235fc:	d002      	beq.n	23604 <update_cache+0x4c>
			z_reset_time_slice(thread);
   235fe:	4620      	mov	r0, r4
   23600:	f7ff fe72 	bl	232e8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   23604:	61ec      	str	r4, [r5, #28]
}
   23606:	e7f6      	b.n	235f6 <update_cache+0x3e>
   23608:	200027a0 	.word	0x200027a0
   2360c:	20002780 	.word	0x20002780
   23610:	0002e419 	.word	0x0002e419
   23614:	0002ab8c 	.word	0x0002ab8c

00023618 <move_thread_to_end_of_prio_q>:
{
   23618:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2361a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2361e:	7b43      	ldrb	r3, [r0, #13]
   23620:	2a00      	cmp	r2, #0
{
   23622:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   23624:	da06      	bge.n	23634 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2362a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2362c:	4601      	mov	r1, r0
   2362e:	481d      	ldr	r0, [pc, #116]	; (236a4 <move_thread_to_end_of_prio_q+0x8c>)
   23630:	f7ff ff4c 	bl	234cc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23634:	7b63      	ldrb	r3, [r4, #13]
   23636:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2363a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2363c:	4b1a      	ldr	r3, [pc, #104]	; (236a8 <move_thread_to_end_of_prio_q+0x90>)
   2363e:	429c      	cmp	r4, r3
   23640:	d108      	bne.n	23654 <move_thread_to_end_of_prio_q+0x3c>
   23642:	491a      	ldr	r1, [pc, #104]	; (236ac <move_thread_to_end_of_prio_q+0x94>)
   23644:	481a      	ldr	r0, [pc, #104]	; (236b0 <move_thread_to_end_of_prio_q+0x98>)
   23646:	22ba      	movs	r2, #186	; 0xba
   23648:	f002 fad5 	bl	25bf6 <assert_print>
   2364c:	4817      	ldr	r0, [pc, #92]	; (236ac <move_thread_to_end_of_prio_q+0x94>)
   2364e:	21ba      	movs	r1, #186	; 0xba
   23650:	f002 faca 	bl	25be8 <assert_post_action>
	return list->head == list;
   23654:	4a17      	ldr	r2, [pc, #92]	; (236b4 <move_thread_to_end_of_prio_q+0x9c>)
	return (node == list->tail) ? NULL : node->next;
   23656:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2365a:	f102 0520 	add.w	r5, r2, #32
   2365e:	42ab      	cmp	r3, r5
   23660:	d01b      	beq.n	2369a <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23662:	b1d3      	cbz	r3, 2369a <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
   23664:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23668:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2366c:	428e      	cmp	r6, r1
   2366e:	d00f      	beq.n	23690 <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
   23670:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   23672:	2900      	cmp	r1, #0
   23674:	dd0c      	ble.n	23690 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
   23676:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   23678:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   2367c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2367e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   23680:	6890      	ldr	r0, [r2, #8]
   23682:	1b03      	subs	r3, r0, r4
   23684:	4258      	negs	r0, r3
}
   23686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2368a:	4158      	adcs	r0, r3
   2368c:	f7ff bf94 	b.w	235b8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23690:	4283      	cmp	r3, r0
   23692:	d002      	beq.n	2369a <move_thread_to_end_of_prio_q+0x82>
   23694:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23696:	2b00      	cmp	r3, #0
   23698:	d1e6      	bne.n	23668 <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
   2369a:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   2369e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   236a0:	6254      	str	r4, [r2, #36]	; 0x24
}
   236a2:	e7ed      	b.n	23680 <move_thread_to_end_of_prio_q+0x68>
   236a4:	200027a0 	.word	0x200027a0
   236a8:	20001f00 	.word	0x20001f00
   236ac:	0002e419 	.word	0x0002e419
   236b0:	0002ab8c 	.word	0x0002ab8c
   236b4:	20002780 	.word	0x20002780

000236b8 <z_time_slice>:
{
   236b8:	b570      	push	{r4, r5, r6, lr}
   236ba:	4605      	mov	r5, r0
	__asm__ volatile(
   236bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   236c0:	f3ef 8611 	mrs	r6, BASEPRI
   236c4:	f383 8812 	msr	BASEPRI_MAX, r3
   236c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   236cc:	4825      	ldr	r0, [pc, #148]	; (23764 <z_time_slice+0xac>)
   236ce:	f7fe fdaf 	bl	22230 <z_spin_lock_valid>
   236d2:	b940      	cbnz	r0, 236e6 <z_time_slice+0x2e>
   236d4:	4924      	ldr	r1, [pc, #144]	; (23768 <z_time_slice+0xb0>)
   236d6:	4825      	ldr	r0, [pc, #148]	; (2376c <z_time_slice+0xb4>)
   236d8:	228e      	movs	r2, #142	; 0x8e
   236da:	f002 fa8c 	bl	25bf6 <assert_print>
   236de:	4822      	ldr	r0, [pc, #136]	; (23768 <z_time_slice+0xb0>)
   236e0:	218e      	movs	r1, #142	; 0x8e
   236e2:	f002 fa81 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   236e6:	481f      	ldr	r0, [pc, #124]	; (23764 <z_time_slice+0xac>)
   236e8:	f7fe fdc0 	bl	2226c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   236ec:	4b20      	ldr	r3, [pc, #128]	; (23770 <z_time_slice+0xb8>)
   236ee:	4a21      	ldr	r2, [pc, #132]	; (23774 <z_time_slice+0xbc>)
   236f0:	689c      	ldr	r4, [r3, #8]
   236f2:	6811      	ldr	r1, [r2, #0]
   236f4:	428c      	cmp	r4, r1
   236f6:	d114      	bne.n	23722 <z_time_slice+0x6a>
	z_reset_time_slice(curr);
   236f8:	4620      	mov	r0, r4
   236fa:	f7ff fdf5 	bl	232e8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   236fe:	4819      	ldr	r0, [pc, #100]	; (23764 <z_time_slice+0xac>)
   23700:	f7fe fda4 	bl	2224c <z_spin_unlock_valid>
   23704:	b940      	cbnz	r0, 23718 <z_time_slice+0x60>
   23706:	4918      	ldr	r1, [pc, #96]	; (23768 <z_time_slice+0xb0>)
   23708:	4818      	ldr	r0, [pc, #96]	; (2376c <z_time_slice+0xb4>)
   2370a:	22b9      	movs	r2, #185	; 0xb9
   2370c:	f002 fa73 	bl	25bf6 <assert_print>
   23710:	4815      	ldr	r0, [pc, #84]	; (23768 <z_time_slice+0xb0>)
   23712:	21b9      	movs	r1, #185	; 0xb9
   23714:	f002 fa68 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23718:	f386 8811 	msr	BASEPRI, r6
   2371c:	f3bf 8f6f 	isb	sy
}
   23720:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   23722:	2100      	movs	r1, #0
   23724:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   23726:	4a14      	ldr	r2, [pc, #80]	; (23778 <z_time_slice+0xc0>)
	if (slice_time(_current) && sliceable(_current)) {
   23728:	6812      	ldr	r2, [r2, #0]
   2372a:	b1c2      	cbz	r2, 2375e <z_time_slice+0xa6>
		&& !z_is_idle_thread_object(thread);
   2372c:	89e2      	ldrh	r2, [r4, #14]
   2372e:	2a7f      	cmp	r2, #127	; 0x7f
   23730:	d815      	bhi.n	2375e <z_time_slice+0xa6>
		&& !z_is_thread_prevented_from_running(thread)
   23732:	7b62      	ldrb	r2, [r4, #13]
   23734:	06d2      	lsls	r2, r2, #27
   23736:	d112      	bne.n	2375e <z_time_slice+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   23738:	4a10      	ldr	r2, [pc, #64]	; (2377c <z_time_slice+0xc4>)
   2373a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2373e:	6812      	ldr	r2, [r2, #0]
   23740:	4291      	cmp	r1, r2
   23742:	db0c      	blt.n	2375e <z_time_slice+0xa6>
	if (slice_time(_current) && sliceable(_current)) {
   23744:	4a0e      	ldr	r2, [pc, #56]	; (23780 <z_time_slice+0xc8>)
   23746:	4294      	cmp	r4, r2
   23748:	d009      	beq.n	2375e <z_time_slice+0xa6>
		if (ticks >= _current_cpu->slice_ticks) {
   2374a:	691a      	ldr	r2, [r3, #16]
   2374c:	42aa      	cmp	r2, r5
   2374e:	dc03      	bgt.n	23758 <z_time_slice+0xa0>
		move_thread_to_end_of_prio_q(curr);
   23750:	4620      	mov	r0, r4
   23752:	f7ff ff61 	bl	23618 <move_thread_to_end_of_prio_q>
   23756:	e7cf      	b.n	236f8 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   23758:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   2375a:	611a      	str	r2, [r3, #16]
   2375c:	e7cf      	b.n	236fe <z_time_slice+0x46>
   2375e:	2200      	movs	r2, #0
   23760:	e7fb      	b.n	2375a <z_time_slice+0xa2>
   23762:	bf00      	nop
   23764:	200027c0 	.word	0x200027c0
   23768:	0002b1aa 	.word	0x0002b1aa
   2376c:	0002ab8c 	.word	0x0002ab8c
   23770:	20002780 	.word	0x20002780
   23774:	200027bc 	.word	0x200027bc
   23778:	200027c8 	.word	0x200027c8
   2377c:	200027c4 	.word	0x200027c4
   23780:	20001f00 	.word	0x20001f00

00023784 <ready_thread>:
{
   23784:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   23786:	f990 200d 	ldrsb.w	r2, [r0, #13]
   2378a:	7b43      	ldrb	r3, [r0, #13]
   2378c:	2a00      	cmp	r2, #0
{
   2378e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   23790:	db38      	blt.n	23804 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23792:	06da      	lsls	r2, r3, #27
   23794:	d136      	bne.n	23804 <ready_thread+0x80>
   23796:	6982      	ldr	r2, [r0, #24]
   23798:	2a00      	cmp	r2, #0
   2379a:	d133      	bne.n	23804 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   2379c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   237a0:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   237a2:	4b19      	ldr	r3, [pc, #100]	; (23808 <ready_thread+0x84>)
   237a4:	4298      	cmp	r0, r3
   237a6:	d108      	bne.n	237ba <ready_thread+0x36>
   237a8:	4918      	ldr	r1, [pc, #96]	; (2380c <ready_thread+0x88>)
   237aa:	4819      	ldr	r0, [pc, #100]	; (23810 <ready_thread+0x8c>)
   237ac:	22ba      	movs	r2, #186	; 0xba
   237ae:	f002 fa22 	bl	25bf6 <assert_print>
   237b2:	4816      	ldr	r0, [pc, #88]	; (2380c <ready_thread+0x88>)
   237b4:	21ba      	movs	r1, #186	; 0xba
   237b6:	f002 fa17 	bl	25be8 <assert_post_action>
	return list->head == list;
   237ba:	4a16      	ldr	r2, [pc, #88]	; (23814 <ready_thread+0x90>)
	return (node == list->tail) ? NULL : node->next;
   237bc:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   237c0:	f102 0520 	add.w	r5, r2, #32
   237c4:	42ab      	cmp	r3, r5
   237c6:	d018      	beq.n	237fa <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   237c8:	b1bb      	cbz	r3, 237fa <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
   237ca:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   237ce:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   237d2:	428e      	cmp	r6, r1
   237d4:	d00c      	beq.n	237f0 <ready_thread+0x6c>
		return b2 - b1;
   237d6:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   237d8:	2900      	cmp	r1, #0
   237da:	dd09      	ble.n	237f0 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
   237dc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   237de:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   237e2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   237e4:	605c      	str	r4, [r3, #4]
}
   237e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   237ea:	2000      	movs	r0, #0
   237ec:	f7ff bee4 	b.w	235b8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   237f0:	4298      	cmp	r0, r3
   237f2:	d002      	beq.n	237fa <ready_thread+0x76>
   237f4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   237f6:	2b00      	cmp	r3, #0
   237f8:	d1e9      	bne.n	237ce <ready_thread+0x4a>
	node->prev = tail;
   237fa:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   237fe:	6004      	str	r4, [r0, #0]
	list->tail = node;
   23800:	6254      	str	r4, [r2, #36]	; 0x24
}
   23802:	e7f0      	b.n	237e6 <ready_thread+0x62>
}
   23804:	bd70      	pop	{r4, r5, r6, pc}
   23806:	bf00      	nop
   23808:	20001f00 	.word	0x20001f00
   2380c:	0002e419 	.word	0x0002e419
   23810:	0002ab8c 	.word	0x0002ab8c
   23814:	20002780 	.word	0x20002780

00023818 <z_ready_thread>:
{
   23818:	b538      	push	{r3, r4, r5, lr}
   2381a:	4604      	mov	r4, r0
	__asm__ volatile(
   2381c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23820:	f3ef 8511 	mrs	r5, BASEPRI
   23824:	f383 8812 	msr	BASEPRI_MAX, r3
   23828:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2382c:	4812      	ldr	r0, [pc, #72]	; (23878 <z_ready_thread+0x60>)
   2382e:	f7fe fcff 	bl	22230 <z_spin_lock_valid>
   23832:	b940      	cbnz	r0, 23846 <z_ready_thread+0x2e>
   23834:	4911      	ldr	r1, [pc, #68]	; (2387c <z_ready_thread+0x64>)
   23836:	4812      	ldr	r0, [pc, #72]	; (23880 <z_ready_thread+0x68>)
   23838:	228e      	movs	r2, #142	; 0x8e
   2383a:	f002 f9dc 	bl	25bf6 <assert_print>
   2383e:	480f      	ldr	r0, [pc, #60]	; (2387c <z_ready_thread+0x64>)
   23840:	218e      	movs	r1, #142	; 0x8e
   23842:	f002 f9d1 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   23846:	480c      	ldr	r0, [pc, #48]	; (23878 <z_ready_thread+0x60>)
   23848:	f7fe fd10 	bl	2226c <z_spin_lock_set_owner>
			ready_thread(thread);
   2384c:	4620      	mov	r0, r4
   2384e:	f7ff ff99 	bl	23784 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23852:	4809      	ldr	r0, [pc, #36]	; (23878 <z_ready_thread+0x60>)
   23854:	f7fe fcfa 	bl	2224c <z_spin_unlock_valid>
   23858:	b940      	cbnz	r0, 2386c <z_ready_thread+0x54>
   2385a:	4908      	ldr	r1, [pc, #32]	; (2387c <z_ready_thread+0x64>)
   2385c:	4808      	ldr	r0, [pc, #32]	; (23880 <z_ready_thread+0x68>)
   2385e:	22b9      	movs	r2, #185	; 0xb9
   23860:	f002 f9c9 	bl	25bf6 <assert_print>
   23864:	4805      	ldr	r0, [pc, #20]	; (2387c <z_ready_thread+0x64>)
   23866:	21b9      	movs	r1, #185	; 0xb9
   23868:	f002 f9be 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   2386c:	f385 8811 	msr	BASEPRI, r5
   23870:	f3bf 8f6f 	isb	sy
}
   23874:	bd38      	pop	{r3, r4, r5, pc}
   23876:	bf00      	nop
   23878:	200027c0 	.word	0x200027c0
   2387c:	0002b1aa 	.word	0x0002b1aa
   23880:	0002ab8c 	.word	0x0002ab8c

00023884 <z_sched_start>:
{
   23884:	b538      	push	{r3, r4, r5, lr}
   23886:	4604      	mov	r4, r0
	__asm__ volatile(
   23888:	f04f 0340 	mov.w	r3, #64	; 0x40
   2388c:	f3ef 8511 	mrs	r5, BASEPRI
   23890:	f383 8812 	msr	BASEPRI_MAX, r3
   23894:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23898:	4818      	ldr	r0, [pc, #96]	; (238fc <z_sched_start+0x78>)
   2389a:	f7fe fcc9 	bl	22230 <z_spin_lock_valid>
   2389e:	b940      	cbnz	r0, 238b2 <z_sched_start+0x2e>
   238a0:	4917      	ldr	r1, [pc, #92]	; (23900 <z_sched_start+0x7c>)
   238a2:	4818      	ldr	r0, [pc, #96]	; (23904 <z_sched_start+0x80>)
   238a4:	228e      	movs	r2, #142	; 0x8e
   238a6:	f002 f9a6 	bl	25bf6 <assert_print>
   238aa:	4815      	ldr	r0, [pc, #84]	; (23900 <z_sched_start+0x7c>)
   238ac:	218e      	movs	r1, #142	; 0x8e
   238ae:	f002 f99b 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   238b2:	4812      	ldr	r0, [pc, #72]	; (238fc <z_sched_start+0x78>)
   238b4:	f7fe fcda 	bl	2226c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   238b8:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   238ba:	075a      	lsls	r2, r3, #29
   238bc:	d411      	bmi.n	238e2 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   238be:	480f      	ldr	r0, [pc, #60]	; (238fc <z_sched_start+0x78>)
   238c0:	f7fe fcc4 	bl	2224c <z_spin_unlock_valid>
   238c4:	b940      	cbnz	r0, 238d8 <z_sched_start+0x54>
   238c6:	490e      	ldr	r1, [pc, #56]	; (23900 <z_sched_start+0x7c>)
   238c8:	480e      	ldr	r0, [pc, #56]	; (23904 <z_sched_start+0x80>)
   238ca:	22b9      	movs	r2, #185	; 0xb9
   238cc:	f002 f993 	bl	25bf6 <assert_print>
   238d0:	480b      	ldr	r0, [pc, #44]	; (23900 <z_sched_start+0x7c>)
   238d2:	21b9      	movs	r1, #185	; 0xb9
   238d4:	f002 f988 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   238d8:	f385 8811 	msr	BASEPRI, r5
   238dc:	f3bf 8f6f 	isb	sy
}
   238e0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   238e2:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   238e6:	4620      	mov	r0, r4
   238e8:	7363      	strb	r3, [r4, #13]
   238ea:	f7ff ff4b 	bl	23784 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   238ee:	4629      	mov	r1, r5
   238f0:	4802      	ldr	r0, [pc, #8]	; (238fc <z_sched_start+0x78>)
}
   238f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   238f6:	f7ff bd5f 	b.w	233b8 <z_reschedule>
   238fa:	bf00      	nop
   238fc:	200027c0 	.word	0x200027c0
   23900:	0002b1aa 	.word	0x0002b1aa
   23904:	0002ab8c 	.word	0x0002ab8c

00023908 <z_thread_timeout>:
{
   23908:	b570      	push	{r4, r5, r6, lr}
   2390a:	4604      	mov	r4, r0
	__asm__ volatile(
   2390c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23910:	f3ef 8611 	mrs	r6, BASEPRI
   23914:	f383 8812 	msr	BASEPRI_MAX, r3
   23918:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2391c:	481b      	ldr	r0, [pc, #108]	; (2398c <z_thread_timeout+0x84>)
   2391e:	f7fe fc87 	bl	22230 <z_spin_lock_valid>
   23922:	b940      	cbnz	r0, 23936 <z_thread_timeout+0x2e>
   23924:	491a      	ldr	r1, [pc, #104]	; (23990 <z_thread_timeout+0x88>)
   23926:	481b      	ldr	r0, [pc, #108]	; (23994 <z_thread_timeout+0x8c>)
   23928:	228e      	movs	r2, #142	; 0x8e
   2392a:	f002 f964 	bl	25bf6 <assert_print>
   2392e:	4818      	ldr	r0, [pc, #96]	; (23990 <z_thread_timeout+0x88>)
   23930:	218e      	movs	r1, #142	; 0x8e
   23932:	f002 f959 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   23936:	4815      	ldr	r0, [pc, #84]	; (2398c <z_thread_timeout+0x84>)
   23938:	f7fe fc98 	bl	2226c <z_spin_lock_set_owner>
		if (!killed) {
   2393c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   23940:	f013 0f28 	tst.w	r3, #40	; 0x28
   23944:	d110      	bne.n	23968 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   23946:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2394a:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   2394e:	b113      	cbz	r3, 23956 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   23950:	4628      	mov	r0, r5
   23952:	f7ff fdd9 	bl	23508 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   23956:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2395a:	f023 0314 	bic.w	r3, r3, #20
   2395e:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   23962:	4628      	mov	r0, r5
   23964:	f7ff ff0e 	bl	23784 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23968:	4808      	ldr	r0, [pc, #32]	; (2398c <z_thread_timeout+0x84>)
   2396a:	f7fe fc6f 	bl	2224c <z_spin_unlock_valid>
   2396e:	b940      	cbnz	r0, 23982 <z_thread_timeout+0x7a>
   23970:	4907      	ldr	r1, [pc, #28]	; (23990 <z_thread_timeout+0x88>)
   23972:	4808      	ldr	r0, [pc, #32]	; (23994 <z_thread_timeout+0x8c>)
   23974:	22b9      	movs	r2, #185	; 0xb9
   23976:	f002 f93e 	bl	25bf6 <assert_print>
   2397a:	4805      	ldr	r0, [pc, #20]	; (23990 <z_thread_timeout+0x88>)
   2397c:	21b9      	movs	r1, #185	; 0xb9
   2397e:	f002 f933 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23982:	f386 8811 	msr	BASEPRI, r6
   23986:	f3bf 8f6f 	isb	sy
}
   2398a:	bd70      	pop	{r4, r5, r6, pc}
   2398c:	200027c0 	.word	0x200027c0
   23990:	0002b1aa 	.word	0x0002b1aa
   23994:	0002ab8c 	.word	0x0002ab8c

00023998 <unready_thread>:
{
   23998:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2399a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2399e:	7b43      	ldrb	r3, [r0, #13]
   239a0:	2a00      	cmp	r2, #0
{
   239a2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   239a4:	da06      	bge.n	239b4 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   239a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   239aa:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   239ac:	4601      	mov	r1, r0
   239ae:	4806      	ldr	r0, [pc, #24]	; (239c8 <unready_thread+0x30>)
   239b0:	f7ff fd8c 	bl	234cc <z_priq_dumb_remove>
	update_cache(thread == _current);
   239b4:	4b05      	ldr	r3, [pc, #20]	; (239cc <unready_thread+0x34>)
   239b6:	6898      	ldr	r0, [r3, #8]
   239b8:	1b03      	subs	r3, r0, r4
   239ba:	4258      	negs	r0, r3
}
   239bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   239c0:	4158      	adcs	r0, r3
   239c2:	f7ff bdf9 	b.w	235b8 <update_cache>
   239c6:	bf00      	nop
   239c8:	200027a0 	.word	0x200027a0
   239cc:	20002780 	.word	0x20002780

000239d0 <add_to_waitq_locked>:
{
   239d0:	b538      	push	{r3, r4, r5, lr}
   239d2:	4604      	mov	r4, r0
   239d4:	460d      	mov	r5, r1
	unready_thread(thread);
   239d6:	f7ff ffdf 	bl	23998 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   239da:	7b63      	ldrb	r3, [r4, #13]
   239dc:	f043 0302 	orr.w	r3, r3, #2
   239e0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   239e2:	b1f5      	cbz	r5, 23a22 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   239e4:	4b15      	ldr	r3, [pc, #84]	; (23a3c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   239e6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   239e8:	429c      	cmp	r4, r3
   239ea:	d108      	bne.n	239fe <add_to_waitq_locked+0x2e>
   239ec:	4914      	ldr	r1, [pc, #80]	; (23a40 <add_to_waitq_locked+0x70>)
   239ee:	4815      	ldr	r0, [pc, #84]	; (23a44 <add_to_waitq_locked+0x74>)
   239f0:	22ba      	movs	r2, #186	; 0xba
   239f2:	f002 f900 	bl	25bf6 <assert_print>
   239f6:	4812      	ldr	r0, [pc, #72]	; (23a40 <add_to_waitq_locked+0x70>)
   239f8:	21ba      	movs	r1, #186	; 0xba
   239fa:	f002 f8f5 	bl	25be8 <assert_post_action>
	return list->head == list;
   239fe:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23a00:	429d      	cmp	r5, r3
   23a02:	d015      	beq.n	23a30 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23a04:	b1a3      	cbz	r3, 23a30 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
   23a06:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23a0a:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   23a0e:	4291      	cmp	r1, r2
   23a10:	d008      	beq.n	23a24 <add_to_waitq_locked+0x54>
		return b2 - b1;
   23a12:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   23a14:	2a00      	cmp	r2, #0
   23a16:	dd05      	ble.n	23a24 <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
   23a18:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23a1a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23a1e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23a20:	605c      	str	r4, [r3, #4]
}
   23a22:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   23a24:	686a      	ldr	r2, [r5, #4]
   23a26:	4293      	cmp	r3, r2
   23a28:	d002      	beq.n	23a30 <add_to_waitq_locked+0x60>
   23a2a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23a2c:	2b00      	cmp	r3, #0
   23a2e:	d1ec      	bne.n	23a0a <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
   23a30:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   23a32:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   23a36:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23a38:	606c      	str	r4, [r5, #4]
}
   23a3a:	e7f2      	b.n	23a22 <add_to_waitq_locked+0x52>
   23a3c:	20001f00 	.word	0x20001f00
   23a40:	0002e419 	.word	0x0002e419
   23a44:	0002ab8c 	.word	0x0002ab8c

00023a48 <pend>:
{
   23a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a4c:	4604      	mov	r4, r0
   23a4e:	4688      	mov	r8, r1
   23a50:	4616      	mov	r6, r2
   23a52:	461d      	mov	r5, r3
	__asm__ volatile(
   23a54:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a58:	f3ef 8711 	mrs	r7, BASEPRI
   23a5c:	f383 8812 	msr	BASEPRI_MAX, r3
   23a60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a64:	481a      	ldr	r0, [pc, #104]	; (23ad0 <pend+0x88>)
   23a66:	f7fe fbe3 	bl	22230 <z_spin_lock_valid>
   23a6a:	b940      	cbnz	r0, 23a7e <pend+0x36>
   23a6c:	4919      	ldr	r1, [pc, #100]	; (23ad4 <pend+0x8c>)
   23a6e:	481a      	ldr	r0, [pc, #104]	; (23ad8 <pend+0x90>)
   23a70:	228e      	movs	r2, #142	; 0x8e
   23a72:	f002 f8c0 	bl	25bf6 <assert_print>
   23a76:	4817      	ldr	r0, [pc, #92]	; (23ad4 <pend+0x8c>)
   23a78:	218e      	movs	r1, #142	; 0x8e
   23a7a:	f002 f8b5 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   23a7e:	4814      	ldr	r0, [pc, #80]	; (23ad0 <pend+0x88>)
   23a80:	f7fe fbf4 	bl	2226c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   23a84:	4620      	mov	r0, r4
   23a86:	4641      	mov	r1, r8
   23a88:	f7ff ffa2 	bl	239d0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23a8c:	4810      	ldr	r0, [pc, #64]	; (23ad0 <pend+0x88>)
   23a8e:	f7fe fbdd 	bl	2224c <z_spin_unlock_valid>
   23a92:	b940      	cbnz	r0, 23aa6 <pend+0x5e>
   23a94:	490f      	ldr	r1, [pc, #60]	; (23ad4 <pend+0x8c>)
   23a96:	4810      	ldr	r0, [pc, #64]	; (23ad8 <pend+0x90>)
   23a98:	22b9      	movs	r2, #185	; 0xb9
   23a9a:	f002 f8ac 	bl	25bf6 <assert_print>
   23a9e:	480d      	ldr	r0, [pc, #52]	; (23ad4 <pend+0x8c>)
   23aa0:	21b9      	movs	r1, #185	; 0xb9
   23aa2:	f002 f8a1 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23aa6:	f387 8811 	msr	BASEPRI, r7
   23aaa:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23aae:	f1b5 3fff 	cmp.w	r5, #4294967295
   23ab2:	bf08      	it	eq
   23ab4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   23ab8:	d008      	beq.n	23acc <pend+0x84>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23aba:	4632      	mov	r2, r6
   23abc:	462b      	mov	r3, r5
   23abe:	f104 0018 	add.w	r0, r4, #24
   23ac2:	4906      	ldr	r1, [pc, #24]	; (23adc <pend+0x94>)
}
   23ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23ac8:	f000 bc90 	b.w	243ec <z_add_timeout>
   23acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23ad0:	200027c0 	.word	0x200027c0
   23ad4:	0002b1aa 	.word	0x0002b1aa
   23ad8:	0002ab8c 	.word	0x0002ab8c
   23adc:	00023909 	.word	0x00023909

00023ae0 <z_pend_curr>:
{
   23ae0:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   23ae2:	4b0e      	ldr	r3, [pc, #56]	; (23b1c <z_pend_curr+0x3c>)
{
   23ae4:	4605      	mov	r5, r0
	pending_current = _current;
   23ae6:	6898      	ldr	r0, [r3, #8]
   23ae8:	4b0d      	ldr	r3, [pc, #52]	; (23b20 <z_pend_curr+0x40>)
{
   23aea:	460c      	mov	r4, r1
	pending_current = _current;
   23aec:	6018      	str	r0, [r3, #0]
{
   23aee:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   23af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23af4:	f7ff ffa8 	bl	23a48 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23af8:	4628      	mov	r0, r5
   23afa:	f7fe fba7 	bl	2224c <z_spin_unlock_valid>
   23afe:	b940      	cbnz	r0, 23b12 <z_pend_curr+0x32>
   23b00:	4908      	ldr	r1, [pc, #32]	; (23b24 <z_pend_curr+0x44>)
   23b02:	4809      	ldr	r0, [pc, #36]	; (23b28 <z_pend_curr+0x48>)
   23b04:	22d0      	movs	r2, #208	; 0xd0
   23b06:	f002 f876 	bl	25bf6 <assert_print>
   23b0a:	4806      	ldr	r0, [pc, #24]	; (23b24 <z_pend_curr+0x44>)
   23b0c:	21d0      	movs	r1, #208	; 0xd0
   23b0e:	f002 f86b 	bl	25be8 <assert_post_action>
   23b12:	4620      	mov	r0, r4
}
   23b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23b18:	f7f0 bcaa 	b.w	14470 <arch_swap>
   23b1c:	20002780 	.word	0x20002780
   23b20:	200027bc 	.word	0x200027bc
   23b24:	0002b1aa 	.word	0x0002b1aa
   23b28:	0002ab8c 	.word	0x0002ab8c

00023b2c <z_set_prio>:
{
   23b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23b2e:	4604      	mov	r4, r0
   23b30:	460d      	mov	r5, r1
	__asm__ volatile(
   23b32:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b36:	f3ef 8611 	mrs	r6, BASEPRI
   23b3a:	f383 8812 	msr	BASEPRI_MAX, r3
   23b3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b42:	4834      	ldr	r0, [pc, #208]	; (23c14 <z_set_prio+0xe8>)
   23b44:	f7fe fb74 	bl	22230 <z_spin_lock_valid>
   23b48:	b940      	cbnz	r0, 23b5c <z_set_prio+0x30>
   23b4a:	4933      	ldr	r1, [pc, #204]	; (23c18 <z_set_prio+0xec>)
   23b4c:	4833      	ldr	r0, [pc, #204]	; (23c1c <z_set_prio+0xf0>)
   23b4e:	228e      	movs	r2, #142	; 0x8e
   23b50:	f002 f851 	bl	25bf6 <assert_print>
   23b54:	4830      	ldr	r0, [pc, #192]	; (23c18 <z_set_prio+0xec>)
   23b56:	218e      	movs	r1, #142	; 0x8e
   23b58:	f002 f846 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   23b5c:	482d      	ldr	r0, [pc, #180]	; (23c14 <z_set_prio+0xe8>)
   23b5e:	f7fe fb85 	bl	2226c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   23b62:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23b64:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   23b66:	b26d      	sxtb	r5, r5
   23b68:	d151      	bne.n	23c0e <z_set_prio+0xe2>
		if (need_sched) {
   23b6a:	69a2      	ldr	r2, [r4, #24]
   23b6c:	2a00      	cmp	r2, #0
   23b6e:	d14e      	bne.n	23c0e <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23b74:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23b76:	482a      	ldr	r0, [pc, #168]	; (23c20 <z_set_prio+0xf4>)
   23b78:	4621      	mov	r1, r4
   23b7a:	f7ff fca7 	bl	234cc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23b7e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   23b80:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   23b82:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23b86:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23b88:	4b26      	ldr	r3, [pc, #152]	; (23c24 <z_set_prio+0xf8>)
   23b8a:	429c      	cmp	r4, r3
   23b8c:	d108      	bne.n	23ba0 <z_set_prio+0x74>
   23b8e:	4926      	ldr	r1, [pc, #152]	; (23c28 <z_set_prio+0xfc>)
   23b90:	4822      	ldr	r0, [pc, #136]	; (23c1c <z_set_prio+0xf0>)
   23b92:	22ba      	movs	r2, #186	; 0xba
   23b94:	f002 f82f 	bl	25bf6 <assert_print>
   23b98:	4823      	ldr	r0, [pc, #140]	; (23c28 <z_set_prio+0xfc>)
   23b9a:	21ba      	movs	r1, #186	; 0xba
   23b9c:	f002 f824 	bl	25be8 <assert_post_action>
	return list->head == list;
   23ba0:	4a22      	ldr	r2, [pc, #136]	; (23c2c <z_set_prio+0x100>)
	return (node == list->tail) ? NULL : node->next;
   23ba2:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23ba6:	f102 0520 	add.w	r5, r2, #32
   23baa:	42ab      	cmp	r3, r5
   23bac:	d02a      	beq.n	23c04 <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23bae:	b34b      	cbz	r3, 23c04 <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
   23bb0:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23bb4:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   23bb8:	428f      	cmp	r7, r1
   23bba:	d01e      	beq.n	23bfa <z_set_prio+0xce>
		return b2 - b1;
   23bbc:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   23bbe:	2900      	cmp	r1, #0
   23bc0:	dd1b      	ble.n	23bfa <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   23bc2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23bc4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23bc8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23bca:	605c      	str	r4, [r3, #4]
			update_cache(1);
   23bcc:	2001      	movs	r0, #1
   23bce:	f7ff fcf3 	bl	235b8 <update_cache>
   23bd2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23bd4:	480f      	ldr	r0, [pc, #60]	; (23c14 <z_set_prio+0xe8>)
   23bd6:	f7fe fb39 	bl	2224c <z_spin_unlock_valid>
   23bda:	b940      	cbnz	r0, 23bee <z_set_prio+0xc2>
   23bdc:	490e      	ldr	r1, [pc, #56]	; (23c18 <z_set_prio+0xec>)
   23bde:	480f      	ldr	r0, [pc, #60]	; (23c1c <z_set_prio+0xf0>)
   23be0:	22b9      	movs	r2, #185	; 0xb9
   23be2:	f002 f808 	bl	25bf6 <assert_print>
   23be6:	480c      	ldr	r0, [pc, #48]	; (23c18 <z_set_prio+0xec>)
   23be8:	21b9      	movs	r1, #185	; 0xb9
   23bea:	f001 fffd 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23bee:	f386 8811 	msr	BASEPRI, r6
   23bf2:	f3bf 8f6f 	isb	sy
}
   23bf6:	4620      	mov	r0, r4
   23bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   23bfa:	4283      	cmp	r3, r0
   23bfc:	d002      	beq.n	23c04 <z_set_prio+0xd8>
   23bfe:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23c00:	2b00      	cmp	r3, #0
   23c02:	d1d7      	bne.n	23bb4 <z_set_prio+0x88>
	node->prev = tail;
   23c04:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   23c08:	6004      	str	r4, [r0, #0]
	list->tail = node;
   23c0a:	6254      	str	r4, [r2, #36]	; 0x24
}
   23c0c:	e7de      	b.n	23bcc <z_set_prio+0xa0>
			thread->base.prio = prio;
   23c0e:	73a5      	strb	r5, [r4, #14]
   23c10:	2400      	movs	r4, #0
   23c12:	e7df      	b.n	23bd4 <z_set_prio+0xa8>
   23c14:	200027c0 	.word	0x200027c0
   23c18:	0002b1aa 	.word	0x0002b1aa
   23c1c:	0002ab8c 	.word	0x0002ab8c
   23c20:	200027a0 	.word	0x200027a0
   23c24:	20001f00 	.word	0x20001f00
   23c28:	0002e419 	.word	0x0002e419
   23c2c:	20002780 	.word	0x20002780

00023c30 <z_impl_k_thread_suspend>:
{
   23c30:	b570      	push	{r4, r5, r6, lr}
   23c32:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   23c34:	3018      	adds	r0, #24
   23c36:	f000 fc87 	bl	24548 <z_abort_timeout>
	__asm__ volatile(
   23c3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c3e:	f3ef 8611 	mrs	r6, BASEPRI
   23c42:	f383 8812 	msr	BASEPRI_MAX, r3
   23c46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c4a:	4820      	ldr	r0, [pc, #128]	; (23ccc <z_impl_k_thread_suspend+0x9c>)
   23c4c:	f7fe faf0 	bl	22230 <z_spin_lock_valid>
   23c50:	b940      	cbnz	r0, 23c64 <z_impl_k_thread_suspend+0x34>
   23c52:	491f      	ldr	r1, [pc, #124]	; (23cd0 <z_impl_k_thread_suspend+0xa0>)
   23c54:	481f      	ldr	r0, [pc, #124]	; (23cd4 <z_impl_k_thread_suspend+0xa4>)
   23c56:	228e      	movs	r2, #142	; 0x8e
   23c58:	f001 ffcd 	bl	25bf6 <assert_print>
   23c5c:	481c      	ldr	r0, [pc, #112]	; (23cd0 <z_impl_k_thread_suspend+0xa0>)
   23c5e:	218e      	movs	r1, #142	; 0x8e
   23c60:	f001 ffc2 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   23c64:	4819      	ldr	r0, [pc, #100]	; (23ccc <z_impl_k_thread_suspend+0x9c>)
   23c66:	f7fe fb01 	bl	2226c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   23c6a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   23c6e:	7b63      	ldrb	r3, [r4, #13]
   23c70:	2a00      	cmp	r2, #0
   23c72:	da06      	bge.n	23c82 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   23c78:	4817      	ldr	r0, [pc, #92]	; (23cd8 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23c7a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23c7c:	4621      	mov	r1, r4
   23c7e:	f7ff fc25 	bl	234cc <z_priq_dumb_remove>
		update_cache(thread == _current);
   23c82:	4d16      	ldr	r5, [pc, #88]	; (23cdc <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23c84:	7b63      	ldrb	r3, [r4, #13]
   23c86:	68a8      	ldr	r0, [r5, #8]
   23c88:	f043 0310 	orr.w	r3, r3, #16
   23c8c:	7363      	strb	r3, [r4, #13]
   23c8e:	1b03      	subs	r3, r0, r4
   23c90:	4258      	negs	r0, r3
   23c92:	4158      	adcs	r0, r3
   23c94:	f7ff fc90 	bl	235b8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c98:	480c      	ldr	r0, [pc, #48]	; (23ccc <z_impl_k_thread_suspend+0x9c>)
   23c9a:	f7fe fad7 	bl	2224c <z_spin_unlock_valid>
   23c9e:	b940      	cbnz	r0, 23cb2 <z_impl_k_thread_suspend+0x82>
   23ca0:	490b      	ldr	r1, [pc, #44]	; (23cd0 <z_impl_k_thread_suspend+0xa0>)
   23ca2:	480c      	ldr	r0, [pc, #48]	; (23cd4 <z_impl_k_thread_suspend+0xa4>)
   23ca4:	22b9      	movs	r2, #185	; 0xb9
   23ca6:	f001 ffa6 	bl	25bf6 <assert_print>
   23caa:	4809      	ldr	r0, [pc, #36]	; (23cd0 <z_impl_k_thread_suspend+0xa0>)
   23cac:	21b9      	movs	r1, #185	; 0xb9
   23cae:	f001 ff9b 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23cb2:	f386 8811 	msr	BASEPRI, r6
   23cb6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   23cba:	68ab      	ldr	r3, [r5, #8]
   23cbc:	42a3      	cmp	r3, r4
   23cbe:	d103      	bne.n	23cc8 <z_impl_k_thread_suspend+0x98>
}
   23cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   23cc4:	f005 bf34 	b.w	29b30 <z_reschedule_unlocked>
}
   23cc8:	bd70      	pop	{r4, r5, r6, pc}
   23cca:	bf00      	nop
   23ccc:	200027c0 	.word	0x200027c0
   23cd0:	0002b1aa 	.word	0x0002b1aa
   23cd4:	0002ab8c 	.word	0x0002ab8c
   23cd8:	200027a0 	.word	0x200027a0
   23cdc:	20002780 	.word	0x20002780

00023ce0 <k_sched_unlock>:
{
   23ce0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23ce2:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ce6:	f3ef 8511 	mrs	r5, BASEPRI
   23cea:	f383 8812 	msr	BASEPRI_MAX, r3
   23cee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23cf2:	4824      	ldr	r0, [pc, #144]	; (23d84 <k_sched_unlock+0xa4>)
   23cf4:	f7fe fa9c 	bl	22230 <z_spin_lock_valid>
   23cf8:	b940      	cbnz	r0, 23d0c <k_sched_unlock+0x2c>
   23cfa:	4923      	ldr	r1, [pc, #140]	; (23d88 <k_sched_unlock+0xa8>)
   23cfc:	4823      	ldr	r0, [pc, #140]	; (23d8c <k_sched_unlock+0xac>)
   23cfe:	228e      	movs	r2, #142	; 0x8e
   23d00:	f001 ff79 	bl	25bf6 <assert_print>
   23d04:	4820      	ldr	r0, [pc, #128]	; (23d88 <k_sched_unlock+0xa8>)
   23d06:	218e      	movs	r1, #142	; 0x8e
   23d08:	f001 ff6e 	bl	25be8 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   23d0c:	4c20      	ldr	r4, [pc, #128]	; (23d90 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   23d0e:	481d      	ldr	r0, [pc, #116]	; (23d84 <k_sched_unlock+0xa4>)
   23d10:	f7fe faac 	bl	2226c <z_spin_lock_set_owner>
   23d14:	68a3      	ldr	r3, [r4, #8]
   23d16:	7bdb      	ldrb	r3, [r3, #15]
   23d18:	b953      	cbnz	r3, 23d30 <k_sched_unlock+0x50>
   23d1a:	491e      	ldr	r1, [pc, #120]	; (23d94 <k_sched_unlock+0xb4>)
   23d1c:	481b      	ldr	r0, [pc, #108]	; (23d8c <k_sched_unlock+0xac>)
   23d1e:	f240 32d6 	movw	r2, #982	; 0x3d6
   23d22:	f001 ff68 	bl	25bf6 <assert_print>
   23d26:	481b      	ldr	r0, [pc, #108]	; (23d94 <k_sched_unlock+0xb4>)
   23d28:	f240 31d6 	movw	r1, #982	; 0x3d6
   23d2c:	f001 ff5c 	bl	25be8 <assert_post_action>
   23d30:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   23d34:	b153      	cbz	r3, 23d4c <k_sched_unlock+0x6c>
   23d36:	4917      	ldr	r1, [pc, #92]	; (23d94 <k_sched_unlock+0xb4>)
   23d38:	4814      	ldr	r0, [pc, #80]	; (23d8c <k_sched_unlock+0xac>)
   23d3a:	f240 32d7 	movw	r2, #983	; 0x3d7
   23d3e:	f001 ff5a 	bl	25bf6 <assert_print>
   23d42:	4814      	ldr	r0, [pc, #80]	; (23d94 <k_sched_unlock+0xb4>)
   23d44:	f240 31d7 	movw	r1, #983	; 0x3d7
   23d48:	f001 ff4e 	bl	25be8 <assert_post_action>
		++_current->base.sched_locked;
   23d4c:	68a2      	ldr	r2, [r4, #8]
   23d4e:	7bd3      	ldrb	r3, [r2, #15]
   23d50:	3301      	adds	r3, #1
		update_cache(0);
   23d52:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   23d54:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   23d56:	f7ff fc2f 	bl	235b8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d5a:	480a      	ldr	r0, [pc, #40]	; (23d84 <k_sched_unlock+0xa4>)
   23d5c:	f7fe fa76 	bl	2224c <z_spin_unlock_valid>
   23d60:	b940      	cbnz	r0, 23d74 <k_sched_unlock+0x94>
   23d62:	4909      	ldr	r1, [pc, #36]	; (23d88 <k_sched_unlock+0xa8>)
   23d64:	4809      	ldr	r0, [pc, #36]	; (23d8c <k_sched_unlock+0xac>)
   23d66:	22b9      	movs	r2, #185	; 0xb9
   23d68:	f001 ff45 	bl	25bf6 <assert_print>
   23d6c:	4806      	ldr	r0, [pc, #24]	; (23d88 <k_sched_unlock+0xa8>)
   23d6e:	21b9      	movs	r1, #185	; 0xb9
   23d70:	f001 ff3a 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23d74:	f385 8811 	msr	BASEPRI, r5
   23d78:	f3bf 8f6f 	isb	sy
}
   23d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   23d80:	f005 bed6 	b.w	29b30 <z_reschedule_unlocked>
   23d84:	200027c0 	.word	0x200027c0
   23d88:	0002b1aa 	.word	0x0002b1aa
   23d8c:	0002ab8c 	.word	0x0002ab8c
   23d90:	20002780 	.word	0x20002780
   23d94:	0002e419 	.word	0x0002e419

00023d98 <z_unpend_first_thread>:
{
   23d98:	b538      	push	{r3, r4, r5, lr}
   23d9a:	4604      	mov	r4, r0
	__asm__ volatile(
   23d9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23da0:	f3ef 8511 	mrs	r5, BASEPRI
   23da4:	f383 8812 	msr	BASEPRI_MAX, r3
   23da8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23dac:	4816      	ldr	r0, [pc, #88]	; (23e08 <z_unpend_first_thread+0x70>)
   23dae:	f7fe fa3f 	bl	22230 <z_spin_lock_valid>
   23db2:	b940      	cbnz	r0, 23dc6 <z_unpend_first_thread+0x2e>
   23db4:	4915      	ldr	r1, [pc, #84]	; (23e0c <z_unpend_first_thread+0x74>)
   23db6:	4816      	ldr	r0, [pc, #88]	; (23e10 <z_unpend_first_thread+0x78>)
   23db8:	228e      	movs	r2, #142	; 0x8e
   23dba:	f001 ff1c 	bl	25bf6 <assert_print>
   23dbe:	4813      	ldr	r0, [pc, #76]	; (23e0c <z_unpend_first_thread+0x74>)
   23dc0:	218e      	movs	r1, #142	; 0x8e
   23dc2:	f001 ff11 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   23dc6:	4810      	ldr	r0, [pc, #64]	; (23e08 <z_unpend_first_thread+0x70>)
   23dc8:	f7fe fa50 	bl	2226c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   23dcc:	4620      	mov	r0, r4
   23dce:	f005 feb9 	bl	29b44 <z_priq_dumb_best>
		if (thread != NULL) {
   23dd2:	4604      	mov	r4, r0
   23dd4:	b128      	cbz	r0, 23de2 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   23dd6:	f7ff fb97 	bl	23508 <unpend_thread_no_timeout>
   23dda:	f104 0018 	add.w	r0, r4, #24
   23dde:	f000 fbb3 	bl	24548 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23de2:	4809      	ldr	r0, [pc, #36]	; (23e08 <z_unpend_first_thread+0x70>)
   23de4:	f7fe fa32 	bl	2224c <z_spin_unlock_valid>
   23de8:	b940      	cbnz	r0, 23dfc <z_unpend_first_thread+0x64>
   23dea:	4908      	ldr	r1, [pc, #32]	; (23e0c <z_unpend_first_thread+0x74>)
   23dec:	4808      	ldr	r0, [pc, #32]	; (23e10 <z_unpend_first_thread+0x78>)
   23dee:	22b9      	movs	r2, #185	; 0xb9
   23df0:	f001 ff01 	bl	25bf6 <assert_print>
   23df4:	4805      	ldr	r0, [pc, #20]	; (23e0c <z_unpend_first_thread+0x74>)
   23df6:	21b9      	movs	r1, #185	; 0xb9
   23df8:	f001 fef6 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23dfc:	f385 8811 	msr	BASEPRI, r5
   23e00:	f3bf 8f6f 	isb	sy
}
   23e04:	4620      	mov	r0, r4
   23e06:	bd38      	pop	{r3, r4, r5, pc}
   23e08:	200027c0 	.word	0x200027c0
   23e0c:	0002b1aa 	.word	0x0002b1aa
   23e10:	0002ab8c 	.word	0x0002ab8c

00023e14 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   23e14:	4b04      	ldr	r3, [pc, #16]	; (23e28 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   23e16:	2100      	movs	r1, #0
   23e18:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   23e1c:	e9c3 2208 	strd	r2, r2, [r3, #32]
   23e20:	4608      	mov	r0, r1
   23e22:	f7ff ba75 	b.w	23310 <k_sched_time_slice_set>
   23e26:	bf00      	nop
   23e28:	20002780 	.word	0x20002780

00023e2c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   23e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23e2e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   23e32:	b153      	cbz	r3, 23e4a <z_impl_k_yield+0x1e>
   23e34:	4938      	ldr	r1, [pc, #224]	; (23f18 <z_impl_k_yield+0xec>)
   23e36:	4839      	ldr	r0, [pc, #228]	; (23f1c <z_impl_k_yield+0xf0>)
   23e38:	f240 525d 	movw	r2, #1373	; 0x55d
   23e3c:	f001 fedb 	bl	25bf6 <assert_print>
   23e40:	4835      	ldr	r0, [pc, #212]	; (23f18 <z_impl_k_yield+0xec>)
   23e42:	f240 515d 	movw	r1, #1373	; 0x55d
   23e46:	f001 fecf 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   23e4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e4e:	f3ef 8611 	mrs	r6, BASEPRI
   23e52:	f383 8812 	msr	BASEPRI_MAX, r3
   23e56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e5a:	4831      	ldr	r0, [pc, #196]	; (23f20 <z_impl_k_yield+0xf4>)
   23e5c:	f7fe f9e8 	bl	22230 <z_spin_lock_valid>
   23e60:	b940      	cbnz	r0, 23e74 <z_impl_k_yield+0x48>
   23e62:	4930      	ldr	r1, [pc, #192]	; (23f24 <z_impl_k_yield+0xf8>)
   23e64:	482d      	ldr	r0, [pc, #180]	; (23f1c <z_impl_k_yield+0xf0>)
   23e66:	228e      	movs	r2, #142	; 0x8e
   23e68:	f001 fec5 	bl	25bf6 <assert_print>
   23e6c:	482d      	ldr	r0, [pc, #180]	; (23f24 <z_impl_k_yield+0xf8>)
   23e6e:	218e      	movs	r1, #142	; 0x8e
   23e70:	f001 feba 	bl	25be8 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   23e74:	4d2c      	ldr	r5, [pc, #176]	; (23f28 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   23e76:	482a      	ldr	r0, [pc, #168]	; (23f20 <z_impl_k_yield+0xf4>)
   23e78:	f7fe f9f8 	bl	2226c <z_spin_lock_set_owner>
   23e7c:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23e7e:	7b4b      	ldrb	r3, [r1, #13]
   23e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23e84:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23e86:	f105 0020 	add.w	r0, r5, #32
   23e8a:	f7ff fb1f 	bl	234cc <z_priq_dumb_remove>
	}
	queue_thread(_current);
   23e8e:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   23e90:	7b63      	ldrb	r3, [r4, #13]
   23e92:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23e96:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23e98:	4b24      	ldr	r3, [pc, #144]	; (23f2c <z_impl_k_yield+0x100>)
   23e9a:	429c      	cmp	r4, r3
   23e9c:	d108      	bne.n	23eb0 <z_impl_k_yield+0x84>
   23e9e:	491e      	ldr	r1, [pc, #120]	; (23f18 <z_impl_k_yield+0xec>)
   23ea0:	481e      	ldr	r0, [pc, #120]	; (23f1c <z_impl_k_yield+0xf0>)
   23ea2:	22ba      	movs	r2, #186	; 0xba
   23ea4:	f001 fea7 	bl	25bf6 <assert_print>
   23ea8:	481b      	ldr	r0, [pc, #108]	; (23f18 <z_impl_k_yield+0xec>)
   23eaa:	21ba      	movs	r1, #186	; 0xba
   23eac:	f001 fe9c 	bl	25be8 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   23eb0:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23eb4:	481e      	ldr	r0, [pc, #120]	; (23f30 <z_impl_k_yield+0x104>)
   23eb6:	4283      	cmp	r3, r0
   23eb8:	d028      	beq.n	23f0c <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23eba:	b33b      	cbz	r3, 23f0c <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
   23ebc:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23ec0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   23ec4:	4297      	cmp	r7, r2
   23ec6:	d01c      	beq.n	23f02 <z_impl_k_yield+0xd6>
		return b2 - b1;
   23ec8:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   23eca:	2a00      	cmp	r2, #0
   23ecc:	dd19      	ble.n	23f02 <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
   23ece:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23ed0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23ed4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23ed6:	605c      	str	r4, [r3, #4]
	update_cache(1);
   23ed8:	2001      	movs	r0, #1
   23eda:	f7ff fb6d 	bl	235b8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ede:	4810      	ldr	r0, [pc, #64]	; (23f20 <z_impl_k_yield+0xf4>)
   23ee0:	f7fe f9b4 	bl	2224c <z_spin_unlock_valid>
   23ee4:	b940      	cbnz	r0, 23ef8 <z_impl_k_yield+0xcc>
   23ee6:	490f      	ldr	r1, [pc, #60]	; (23f24 <z_impl_k_yield+0xf8>)
   23ee8:	480c      	ldr	r0, [pc, #48]	; (23f1c <z_impl_k_yield+0xf0>)
   23eea:	22d0      	movs	r2, #208	; 0xd0
   23eec:	f001 fe83 	bl	25bf6 <assert_print>
   23ef0:	480c      	ldr	r0, [pc, #48]	; (23f24 <z_impl_k_yield+0xf8>)
   23ef2:	21d0      	movs	r1, #208	; 0xd0
   23ef4:	f001 fe78 	bl	25be8 <assert_post_action>
   23ef8:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   23efa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23efe:	f7f0 bab7 	b.w	14470 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   23f02:	428b      	cmp	r3, r1
   23f04:	d002      	beq.n	23f0c <z_impl_k_yield+0xe0>
   23f06:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23f08:	2b00      	cmp	r3, #0
   23f0a:	d1d9      	bne.n	23ec0 <z_impl_k_yield+0x94>
	node->prev = tail;
   23f0c:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   23f10:	600c      	str	r4, [r1, #0]
	list->tail = node;
   23f12:	626c      	str	r4, [r5, #36]	; 0x24
}
   23f14:	e7e0      	b.n	23ed8 <z_impl_k_yield+0xac>
   23f16:	bf00      	nop
   23f18:	0002e419 	.word	0x0002e419
   23f1c:	0002ab8c 	.word	0x0002ab8c
   23f20:	200027c0 	.word	0x200027c0
   23f24:	0002b1aa 	.word	0x0002b1aa
   23f28:	20002780 	.word	0x20002780
   23f2c:	20001f00 	.word	0x20001f00
   23f30:	200027a0 	.word	0x200027a0

00023f34 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   23f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f38:	4605      	mov	r5, r0
   23f3a:	460e      	mov	r6, r1
   23f3c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   23f40:	b153      	cbz	r3, 23f58 <z_tick_sleep+0x24>
   23f42:	493a      	ldr	r1, [pc, #232]	; (2402c <z_tick_sleep+0xf8>)
   23f44:	483a      	ldr	r0, [pc, #232]	; (24030 <z_tick_sleep+0xfc>)
   23f46:	f240 5279 	movw	r2, #1401	; 0x579
   23f4a:	f001 fe54 	bl	25bf6 <assert_print>
   23f4e:	4837      	ldr	r0, [pc, #220]	; (2402c <z_tick_sleep+0xf8>)
   23f50:	f240 5179 	movw	r1, #1401	; 0x579
   23f54:	f001 fe48 	bl	25be8 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   23f58:	ea55 0306 	orrs.w	r3, r5, r6
   23f5c:	d103      	bne.n	23f66 <z_tick_sleep+0x32>
	z_impl_k_yield();
   23f5e:	f7ff ff65 	bl	23e2c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   23f62:	2000      	movs	r0, #0
   23f64:	e05f      	b.n	24026 <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
   23f66:	f06f 0401 	mvn.w	r4, #1
   23f6a:	1b64      	subs	r4, r4, r5
   23f6c:	f04f 33ff 	mov.w	r3, #4294967295
   23f70:	eb63 0306 	sbc.w	r3, r3, r6
   23f74:	2c01      	cmp	r4, #1
   23f76:	f173 0300 	sbcs.w	r3, r3, #0
   23f7a:	da02      	bge.n	23f82 <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   23f7c:	f005 fdf8 	bl	29b70 <sys_clock_tick_get_32>
   23f80:	1944      	adds	r4, r0, r5
   23f82:	f04f 0340 	mov.w	r3, #64	; 0x40
   23f86:	f3ef 8811 	mrs	r8, BASEPRI
   23f8a:	f383 8812 	msr	BASEPRI_MAX, r3
   23f8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23f92:	4828      	ldr	r0, [pc, #160]	; (24034 <z_tick_sleep+0x100>)
   23f94:	f7fe f94c 	bl	22230 <z_spin_lock_valid>
   23f98:	b940      	cbnz	r0, 23fac <z_tick_sleep+0x78>
   23f9a:	4927      	ldr	r1, [pc, #156]	; (24038 <z_tick_sleep+0x104>)
   23f9c:	4824      	ldr	r0, [pc, #144]	; (24030 <z_tick_sleep+0xfc>)
   23f9e:	228e      	movs	r2, #142	; 0x8e
   23fa0:	f001 fe29 	bl	25bf6 <assert_print>
   23fa4:	4824      	ldr	r0, [pc, #144]	; (24038 <z_tick_sleep+0x104>)
   23fa6:	218e      	movs	r1, #142	; 0x8e
   23fa8:	f001 fe1e 	bl	25be8 <assert_post_action>
	pending_current = _current;
   23fac:	4f23      	ldr	r7, [pc, #140]	; (2403c <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   23fae:	4821      	ldr	r0, [pc, #132]	; (24034 <z_tick_sleep+0x100>)
   23fb0:	f7fe f95c 	bl	2226c <z_spin_lock_set_owner>
   23fb4:	4b22      	ldr	r3, [pc, #136]	; (24040 <z_tick_sleep+0x10c>)
   23fb6:	68b8      	ldr	r0, [r7, #8]
   23fb8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   23fba:	f7ff fced 	bl	23998 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   23fbe:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23fc0:	4920      	ldr	r1, [pc, #128]	; (24044 <z_tick_sleep+0x110>)
   23fc2:	462a      	mov	r2, r5
   23fc4:	4633      	mov	r3, r6
   23fc6:	3018      	adds	r0, #24
   23fc8:	f000 fa10 	bl	243ec <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   23fcc:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23fce:	4819      	ldr	r0, [pc, #100]	; (24034 <z_tick_sleep+0x100>)
   23fd0:	7b53      	ldrb	r3, [r2, #13]
   23fd2:	f043 0310 	orr.w	r3, r3, #16
   23fd6:	7353      	strb	r3, [r2, #13]
   23fd8:	f7fe f938 	bl	2224c <z_spin_unlock_valid>
   23fdc:	b940      	cbnz	r0, 23ff0 <z_tick_sleep+0xbc>
   23fde:	4916      	ldr	r1, [pc, #88]	; (24038 <z_tick_sleep+0x104>)
   23fe0:	4813      	ldr	r0, [pc, #76]	; (24030 <z_tick_sleep+0xfc>)
   23fe2:	22d0      	movs	r2, #208	; 0xd0
   23fe4:	f001 fe07 	bl	25bf6 <assert_print>
   23fe8:	4813      	ldr	r0, [pc, #76]	; (24038 <z_tick_sleep+0x104>)
   23fea:	21d0      	movs	r1, #208	; 0xd0
   23fec:	f001 fdfc 	bl	25be8 <assert_post_action>
   23ff0:	4640      	mov	r0, r8
   23ff2:	f7f0 fa3d 	bl	14470 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   23ff6:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   23ff8:	7b5b      	ldrb	r3, [r3, #13]
   23ffa:	06db      	lsls	r3, r3, #27
   23ffc:	d50a      	bpl.n	24014 <z_tick_sleep+0xe0>
   23ffe:	490b      	ldr	r1, [pc, #44]	; (2402c <z_tick_sleep+0xf8>)
   24000:	480b      	ldr	r0, [pc, #44]	; (24030 <z_tick_sleep+0xfc>)
   24002:	f240 529a 	movw	r2, #1434	; 0x59a
   24006:	f001 fdf6 	bl	25bf6 <assert_print>
   2400a:	4808      	ldr	r0, [pc, #32]	; (2402c <z_tick_sleep+0xf8>)
   2400c:	f240 519a 	movw	r1, #1434	; 0x59a
   24010:	f001 fdea 	bl	25be8 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   24014:	f005 fdac 	bl	29b70 <sys_clock_tick_get_32>
   24018:	1a20      	subs	r0, r4, r0
   2401a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2401e:	2801      	cmp	r0, #1
   24020:	f173 0300 	sbcs.w	r3, r3, #0
   24024:	db9d      	blt.n	23f62 <z_tick_sleep+0x2e>
}
   24026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2402a:	bf00      	nop
   2402c:	0002e419 	.word	0x0002e419
   24030:	0002ab8c 	.word	0x0002ab8c
   24034:	200027c0 	.word	0x200027c0
   24038:	0002b1aa 	.word	0x0002b1aa
   2403c:	20002780 	.word	0x20002780
   24040:	200027bc 	.word	0x200027bc
   24044:	00023909 	.word	0x00023909

00024048 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   24048:	b538      	push	{r3, r4, r5, lr}
   2404a:	4605      	mov	r5, r0
   2404c:	460c      	mov	r4, r1
   2404e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   24052:	b153      	cbz	r3, 2406a <z_impl_k_sleep+0x22>
   24054:	4911      	ldr	r1, [pc, #68]	; (2409c <z_impl_k_sleep+0x54>)
   24056:	4812      	ldr	r0, [pc, #72]	; (240a0 <z_impl_k_sleep+0x58>)
   24058:	f240 52a9 	movw	r2, #1449	; 0x5a9
   2405c:	f001 fdcb 	bl	25bf6 <assert_print>
   24060:	480e      	ldr	r0, [pc, #56]	; (2409c <z_impl_k_sleep+0x54>)
   24062:	f240 51a9 	movw	r1, #1449	; 0x5a9
   24066:	f001 fdbf 	bl	25be8 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2406a:	f1b4 3fff 	cmp.w	r4, #4294967295
   2406e:	bf08      	it	eq
   24070:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   24074:	d106      	bne.n	24084 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   24076:	4b0b      	ldr	r3, [pc, #44]	; (240a4 <z_impl_k_sleep+0x5c>)
   24078:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2407a:	f7ff fdd9 	bl	23c30 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2407e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   24082:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   24084:	4628      	mov	r0, r5
   24086:	4621      	mov	r1, r4
   24088:	f7ff ff54 	bl	23f34 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   2408c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24090:	fb80 0303 	smull	r0, r3, r0, r3
   24094:	0bc0      	lsrs	r0, r0, #15
   24096:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2409a:	e7f2      	b.n	24082 <z_impl_k_sleep+0x3a>
   2409c:	0002e419 	.word	0x0002e419
   240a0:	0002ab8c 	.word	0x0002ab8c
   240a4:	20002780 	.word	0x20002780

000240a8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   240a8:	4b01      	ldr	r3, [pc, #4]	; (240b0 <z_impl_z_current_get+0x8>)
   240aa:	6898      	ldr	r0, [r3, #8]
   240ac:	4770      	bx	lr
   240ae:	bf00      	nop
   240b0:	20002780 	.word	0x20002780

000240b4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   240b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   240b8:	4604      	mov	r4, r0
   240ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   240be:	f3ef 8611 	mrs	r6, BASEPRI
   240c2:	f383 8812 	msr	BASEPRI_MAX, r3
   240c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   240ca:	4851      	ldr	r0, [pc, #324]	; (24210 <z_thread_abort+0x15c>)
   240cc:	f7fe f8b0 	bl	22230 <z_spin_lock_valid>
   240d0:	b940      	cbnz	r0, 240e4 <z_thread_abort+0x30>
   240d2:	4950      	ldr	r1, [pc, #320]	; (24214 <z_thread_abort+0x160>)
   240d4:	4850      	ldr	r0, [pc, #320]	; (24218 <z_thread_abort+0x164>)
   240d6:	228e      	movs	r2, #142	; 0x8e
   240d8:	f001 fd8d 	bl	25bf6 <assert_print>
   240dc:	484d      	ldr	r0, [pc, #308]	; (24214 <z_thread_abort+0x160>)
   240de:	218e      	movs	r1, #142	; 0x8e
   240e0:	f001 fd82 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   240e4:	484a      	ldr	r0, [pc, #296]	; (24210 <z_thread_abort+0x15c>)
   240e6:	f7fe f8c1 	bl	2226c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   240ea:	7b23      	ldrb	r3, [r4, #12]
   240ec:	07d9      	lsls	r1, r3, #31
   240ee:	d523      	bpl.n	24138 <z_thread_abort+0x84>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   240f0:	4847      	ldr	r0, [pc, #284]	; (24210 <z_thread_abort+0x15c>)
   240f2:	f7fe f8ab 	bl	2224c <z_spin_unlock_valid>
   240f6:	b940      	cbnz	r0, 2410a <z_thread_abort+0x56>
   240f8:	4946      	ldr	r1, [pc, #280]	; (24214 <z_thread_abort+0x160>)
   240fa:	4847      	ldr	r0, [pc, #284]	; (24218 <z_thread_abort+0x164>)
   240fc:	22b9      	movs	r2, #185	; 0xb9
   240fe:	f001 fd7a 	bl	25bf6 <assert_print>
   24102:	4844      	ldr	r0, [pc, #272]	; (24214 <z_thread_abort+0x160>)
   24104:	21b9      	movs	r1, #185	; 0xb9
   24106:	f001 fd6f 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   2410a:	f386 8811 	msr	BASEPRI, r6
   2410e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   24112:	f240 62b5 	movw	r2, #1717	; 0x6b5
   24116:	4941      	ldr	r1, [pc, #260]	; (2421c <z_thread_abort+0x168>)
   24118:	483f      	ldr	r0, [pc, #252]	; (24218 <z_thread_abort+0x164>)
   2411a:	f001 fd6c 	bl	25bf6 <assert_print>
   2411e:	483f      	ldr	r0, [pc, #252]	; (2421c <z_thread_abort+0x168>)
   24120:	f240 61b5 	movw	r1, #1717	; 0x6b5
   24124:	f001 fd60 	bl	25be8 <assert_post_action>
		k_panic();
   24128:	4040      	eors	r0, r0
   2412a:	f380 8811 	msr	BASEPRI, r0
   2412e:	f04f 0004 	mov.w	r0, #4
   24132:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   24134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   24138:	7b63      	ldrb	r3, [r4, #13]
   2413a:	071a      	lsls	r2, r3, #28
   2413c:	d511      	bpl.n	24162 <z_thread_abort+0xae>
   2413e:	4834      	ldr	r0, [pc, #208]	; (24210 <z_thread_abort+0x15c>)
   24140:	f7fe f884 	bl	2224c <z_spin_unlock_valid>
   24144:	b940      	cbnz	r0, 24158 <z_thread_abort+0xa4>
   24146:	4933      	ldr	r1, [pc, #204]	; (24214 <z_thread_abort+0x160>)
   24148:	4833      	ldr	r0, [pc, #204]	; (24218 <z_thread_abort+0x164>)
   2414a:	22b9      	movs	r2, #185	; 0xb9
   2414c:	f001 fd53 	bl	25bf6 <assert_print>
   24150:	4830      	ldr	r0, [pc, #192]	; (24214 <z_thread_abort+0x160>)
   24152:	21b9      	movs	r1, #185	; 0xb9
   24154:	f001 fd48 	bl	25be8 <assert_post_action>
   24158:	f386 8811 	msr	BASEPRI, r6
   2415c:	f3bf 8f6f 	isb	sy
   24160:	e7e8      	b.n	24134 <z_thread_abort+0x80>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   24162:	f023 0220 	bic.w	r2, r3, #32
   24166:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2416a:	09d2      	lsrs	r2, r2, #7
   2416c:	d138      	bne.n	241e0 <z_thread_abort+0x12c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2416e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   24170:	68a3      	ldr	r3, [r4, #8]
   24172:	b113      	cbz	r3, 2417a <z_thread_abort+0xc6>
			unpend_thread_no_timeout(thread);
   24174:	4620      	mov	r0, r4
   24176:	f7ff f9c7 	bl	23508 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2417a:	f104 0018 	add.w	r0, r4, #24
   2417e:	f000 f9e3 	bl	24548 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   24182:	f104 0758 	add.w	r7, r4, #88	; 0x58
   24186:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   2418a:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2418c:	42bd      	cmp	r5, r7
   2418e:	d000      	beq.n	24192 <z_thread_abort+0xde>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24190:	bb85      	cbnz	r5, 241f4 <z_thread_abort+0x140>
		update_cache(1);
   24192:	2001      	movs	r0, #1
   24194:	f7ff fa10 	bl	235b8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   24198:	4b21      	ldr	r3, [pc, #132]	; (24220 <z_thread_abort+0x16c>)
   2419a:	689b      	ldr	r3, [r3, #8]
   2419c:	42a3      	cmp	r3, r4
   2419e:	d1ce      	bne.n	2413e <z_thread_abort+0x8a>
   241a0:	f3ef 8305 	mrs	r3, IPSR
   241a4:	2b00      	cmp	r3, #0
   241a6:	d1ca      	bne.n	2413e <z_thread_abort+0x8a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   241a8:	4819      	ldr	r0, [pc, #100]	; (24210 <z_thread_abort+0x15c>)
   241aa:	f7fe f84f 	bl	2224c <z_spin_unlock_valid>
   241ae:	b940      	cbnz	r0, 241c2 <z_thread_abort+0x10e>
   241b0:	4918      	ldr	r1, [pc, #96]	; (24214 <z_thread_abort+0x160>)
   241b2:	4819      	ldr	r0, [pc, #100]	; (24218 <z_thread_abort+0x164>)
   241b4:	22d0      	movs	r2, #208	; 0xd0
   241b6:	f001 fd1e 	bl	25bf6 <assert_print>
   241ba:	4816      	ldr	r0, [pc, #88]	; (24214 <z_thread_abort+0x160>)
   241bc:	21d0      	movs	r1, #208	; 0xd0
   241be:	f001 fd13 	bl	25be8 <assert_post_action>
   241c2:	4630      	mov	r0, r6
   241c4:	f7f0 f954 	bl	14470 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   241c8:	4914      	ldr	r1, [pc, #80]	; (2421c <z_thread_abort+0x168>)
   241ca:	4813      	ldr	r0, [pc, #76]	; (24218 <z_thread_abort+0x164>)
   241cc:	f240 62e4 	movw	r2, #1764	; 0x6e4
   241d0:	f001 fd11 	bl	25bf6 <assert_print>
   241d4:	4811      	ldr	r0, [pc, #68]	; (2421c <z_thread_abort+0x168>)
   241d6:	f240 61e4 	movw	r1, #1764	; 0x6e4
   241da:	f001 fd05 	bl	25be8 <assert_post_action>
   241de:	e7ae      	b.n	2413e <z_thread_abort+0x8a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   241e0:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   241e4:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   241e8:	480e      	ldr	r0, [pc, #56]	; (24224 <z_thread_abort+0x170>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   241ea:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   241ec:	4621      	mov	r1, r4
   241ee:	f7ff f96d 	bl	234cc <z_priq_dumb_remove>
}
   241f2:	e7bd      	b.n	24170 <z_thread_abort+0xbc>
		unpend_thread_no_timeout(thread);
   241f4:	4628      	mov	r0, r5
   241f6:	f7ff f987 	bl	23508 <unpend_thread_no_timeout>
   241fa:	f105 0018 	add.w	r0, r5, #24
   241fe:	f000 f9a3 	bl	24548 <z_abort_timeout>
   24202:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   24206:	4628      	mov	r0, r5
   24208:	f7ff fabc 	bl	23784 <ready_thread>
   2420c:	e7bd      	b.n	2418a <z_thread_abort+0xd6>
   2420e:	bf00      	nop
   24210:	200027c0 	.word	0x200027c0
   24214:	0002b1aa 	.word	0x0002b1aa
   24218:	0002ab8c 	.word	0x0002ab8c
   2421c:	0002e419 	.word	0x0002e419
   24220:	20002780 	.word	0x20002780
   24224:	200027a0 	.word	0x200027a0

00024228 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   24228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2422a:	4604      	mov	r4, r0
   2422c:	460e      	mov	r6, r1
   2422e:	4615      	mov	r5, r2
	__asm__ volatile(
   24230:	f04f 0340 	mov.w	r3, #64	; 0x40
   24234:	f3ef 8711 	mrs	r7, BASEPRI
   24238:	f383 8812 	msr	BASEPRI_MAX, r3
   2423c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24240:	4819      	ldr	r0, [pc, #100]	; (242a8 <z_sched_wake+0x80>)
   24242:	f7fd fff5 	bl	22230 <z_spin_lock_valid>
   24246:	b940      	cbnz	r0, 2425a <z_sched_wake+0x32>
   24248:	4918      	ldr	r1, [pc, #96]	; (242ac <z_sched_wake+0x84>)
   2424a:	4819      	ldr	r0, [pc, #100]	; (242b0 <z_sched_wake+0x88>)
   2424c:	228e      	movs	r2, #142	; 0x8e
   2424e:	f001 fcd2 	bl	25bf6 <assert_print>
   24252:	4816      	ldr	r0, [pc, #88]	; (242ac <z_sched_wake+0x84>)
   24254:	218e      	movs	r1, #142	; 0x8e
   24256:	f001 fcc7 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   2425a:	4813      	ldr	r0, [pc, #76]	; (242a8 <z_sched_wake+0x80>)
   2425c:	f7fe f806 	bl	2226c <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   24260:	4620      	mov	r0, r4
   24262:	f005 fc6f 	bl	29b44 <z_priq_dumb_best>

		if (thread != NULL) {
   24266:	4604      	mov	r4, r0
   24268:	b158      	cbz	r0, 24282 <z_sched_wake+0x5a>
   2426a:	67c6      	str	r6, [r0, #124]	; 0x7c
   2426c:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   2426e:	f7ff f94b 	bl	23508 <unpend_thread_no_timeout>
   24272:	f104 0018 	add.w	r0, r4, #24
   24276:	f000 f967 	bl	24548 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   2427a:	4620      	mov	r0, r4
   2427c:	f7ff fa82 	bl	23784 <ready_thread>
			ret = true;
   24280:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24282:	4809      	ldr	r0, [pc, #36]	; (242a8 <z_sched_wake+0x80>)
   24284:	f7fd ffe2 	bl	2224c <z_spin_unlock_valid>
   24288:	b940      	cbnz	r0, 2429c <z_sched_wake+0x74>
   2428a:	4908      	ldr	r1, [pc, #32]	; (242ac <z_sched_wake+0x84>)
   2428c:	4808      	ldr	r0, [pc, #32]	; (242b0 <z_sched_wake+0x88>)
   2428e:	22b9      	movs	r2, #185	; 0xb9
   24290:	f001 fcb1 	bl	25bf6 <assert_print>
   24294:	4805      	ldr	r0, [pc, #20]	; (242ac <z_sched_wake+0x84>)
   24296:	21b9      	movs	r1, #185	; 0xb9
   24298:	f001 fca6 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   2429c:	f387 8811 	msr	BASEPRI, r7
   242a0:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   242a4:	4620      	mov	r0, r4
   242a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   242a8:	200027c0 	.word	0x200027c0
   242ac:	0002b1aa 	.word	0x0002b1aa
   242b0:	0002ab8c 	.word	0x0002ab8c

000242b4 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   242b4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   242b6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   242ba:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   242bc:	e9cd 6700 	strd	r6, r7, [sp]
   242c0:	f7ff fc0e 	bl	23ae0 <z_pend_curr>

	if (data != NULL) {
   242c4:	b11c      	cbz	r4, 242ce <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   242c6:	4b03      	ldr	r3, [pc, #12]	; (242d4 <z_sched_wait+0x20>)
   242c8:	689b      	ldr	r3, [r3, #8]
   242ca:	695b      	ldr	r3, [r3, #20]
   242cc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   242ce:	b002      	add	sp, #8
   242d0:	bdd0      	pop	{r4, r6, r7, pc}
   242d2:	bf00      	nop
   242d4:	20002780 	.word	0x20002780

000242d8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   242d8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   242da:	4806      	ldr	r0, [pc, #24]	; (242f4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   242dc:	4a06      	ldr	r2, [pc, #24]	; (242f8 <z_data_copy+0x20>)
   242de:	4907      	ldr	r1, [pc, #28]	; (242fc <z_data_copy+0x24>)
   242e0:	1a12      	subs	r2, r2, r0
   242e2:	f005 fb41 	bl	29968 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   242e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   242ea:	4a05      	ldr	r2, [pc, #20]	; (24300 <z_data_copy+0x28>)
   242ec:	4905      	ldr	r1, [pc, #20]	; (24304 <z_data_copy+0x2c>)
   242ee:	4806      	ldr	r0, [pc, #24]	; (24308 <z_data_copy+0x30>)
   242f0:	f005 bb3a 	b.w	29968 <z_early_memcpy>
   242f4:	20000000 	.word	0x20000000
   242f8:	200009f8 	.word	0x200009f8
   242fc:	0002e4dc 	.word	0x0002e4dc
   24300:	00000000 	.word	0x00000000
   24304:	0002e4dc 	.word	0x0002e4dc
   24308:	20000000 	.word	0x20000000

0002430c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2430c:	4b03      	ldr	r3, [pc, #12]	; (2431c <elapsed+0x10>)
   2430e:	681b      	ldr	r3, [r3, #0]
   24310:	b90b      	cbnz	r3, 24316 <elapsed+0xa>
   24312:	f7fb bba7 	b.w	1fa64 <sys_clock_elapsed>
}
   24316:	2000      	movs	r0, #0
   24318:	4770      	bx	lr
   2431a:	bf00      	nop
   2431c:	200027cc 	.word	0x200027cc

00024320 <next_timeout>:
	return list->head == list;
   24320:	4b10      	ldr	r3, [pc, #64]	; (24364 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   24322:	b510      	push	{r4, lr}
   24324:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24326:	429c      	cmp	r4, r3
   24328:	bf08      	it	eq
   2432a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2432c:	f7ff ffee 	bl	2430c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   24330:	b1a4      	cbz	r4, 2435c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   24332:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   24336:	1a1b      	subs	r3, r3, r0
   24338:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   2433c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   24340:	f170 0200 	sbcs.w	r2, r0, #0
   24344:	da0a      	bge.n	2435c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   24346:	2800      	cmp	r0, #0
   24348:	bfac      	ite	ge
   2434a:	4618      	movge	r0, r3
   2434c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2434e:	4b06      	ldr	r3, [pc, #24]	; (24368 <next_timeout+0x48>)
   24350:	691b      	ldr	r3, [r3, #16]
   24352:	b113      	cbz	r3, 2435a <next_timeout+0x3a>
   24354:	4298      	cmp	r0, r3
   24356:	bfa8      	it	ge
   24358:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2435a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   2435c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24360:	e7f5      	b.n	2434e <next_timeout+0x2e>
   24362:	bf00      	nop
   24364:	200006f8 	.word	0x200006f8
   24368:	20002780 	.word	0x20002780

0002436c <remove_timeout>:
{
   2436c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   2436e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24370:	b168      	cbz	r0, 2438e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   24372:	4a0a      	ldr	r2, [pc, #40]	; (2439c <remove_timeout+0x30>)
   24374:	6852      	ldr	r2, [r2, #4]
   24376:	4290      	cmp	r0, r2
   24378:	d009      	beq.n	2438e <remove_timeout+0x22>
	if (next(t) != NULL) {
   2437a:	b143      	cbz	r3, 2438e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2437c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   24380:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   24384:	1912      	adds	r2, r2, r4
   24386:	eb41 0105 	adc.w	r1, r1, r5
   2438a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   2438e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   24390:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24392:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24394:	2300      	movs	r3, #0
	node->prev = NULL;
   24396:	e9c0 3300 	strd	r3, r3, [r0]
}
   2439a:	bd30      	pop	{r4, r5, pc}
   2439c:	200006f8 	.word	0x200006f8

000243a0 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   243a0:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   243a2:	6804      	ldr	r4, [r0, #0]
   243a4:	b1e4      	cbz	r4, 243e0 <timeout_rem+0x40>
	return list->head == list;
   243a6:	4a10      	ldr	r2, [pc, #64]	; (243e8 <timeout_rem+0x48>)
   243a8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   243aa:	4293      	cmp	r3, r2
   243ac:	d015      	beq.n	243da <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
   243ae:	2400      	movs	r4, #0
   243b0:	6851      	ldr	r1, [r2, #4]
   243b2:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   243b4:	b933      	cbnz	r3, 243c4 <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   243b6:	f7ff ffa9 	bl	2430c <elapsed>
   243ba:	4601      	mov	r1, r0
   243bc:	1a20      	subs	r0, r4, r0
   243be:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
   243c2:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   243c4:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   243c8:	18a4      	adds	r4, r4, r2
   243ca:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   243ce:	4283      	cmp	r3, r0
   243d0:	d0f1      	beq.n	243b6 <timeout_rem+0x16>
   243d2:	428b      	cmp	r3, r1
   243d4:	d0ef      	beq.n	243b6 <timeout_rem+0x16>
   243d6:	681b      	ldr	r3, [r3, #0]
   243d8:	e7ec      	b.n	243b4 <timeout_rem+0x14>
   243da:	2400      	movs	r4, #0
   243dc:	4625      	mov	r5, r4
   243de:	e7ea      	b.n	243b6 <timeout_rem+0x16>
		return 0;
   243e0:	4620      	mov	r0, r4
   243e2:	4621      	mov	r1, r4
   243e4:	e7ed      	b.n	243c2 <timeout_rem+0x22>
   243e6:	bf00      	nop
   243e8:	200006f8 	.word	0x200006f8

000243ec <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   243ec:	f1b3 3fff 	cmp.w	r3, #4294967295
   243f0:	bf08      	it	eq
   243f2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   243f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   243fa:	4604      	mov	r4, r0
   243fc:	460e      	mov	r6, r1
   243fe:	4698      	mov	r8, r3
   24400:	4615      	mov	r5, r2
   24402:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24404:	f000 8090 	beq.w	24528 <z_add_timeout+0x13c>
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   24408:	6803      	ldr	r3, [r0, #0]
   2440a:	b143      	cbz	r3, 2441e <z_add_timeout+0x32>
   2440c:	4947      	ldr	r1, [pc, #284]	; (2452c <z_add_timeout+0x140>)
   2440e:	4848      	ldr	r0, [pc, #288]	; (24530 <z_add_timeout+0x144>)
   24410:	2263      	movs	r2, #99	; 0x63
   24412:	f001 fbf0 	bl	25bf6 <assert_print>
   24416:	4845      	ldr	r0, [pc, #276]	; (2452c <z_add_timeout+0x140>)
   24418:	2163      	movs	r1, #99	; 0x63
   2441a:	f001 fbe5 	bl	25be8 <assert_post_action>
	to->fn = fn;
   2441e:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   24420:	f04f 0340 	mov.w	r3, #64	; 0x40
   24424:	f3ef 8611 	mrs	r6, BASEPRI
   24428:	f383 8812 	msr	BASEPRI_MAX, r3
   2442c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24430:	4840      	ldr	r0, [pc, #256]	; (24534 <z_add_timeout+0x148>)
   24432:	f7fd fefd 	bl	22230 <z_spin_lock_valid>
   24436:	b940      	cbnz	r0, 2444a <z_add_timeout+0x5e>
   24438:	493f      	ldr	r1, [pc, #252]	; (24538 <z_add_timeout+0x14c>)
   2443a:	483d      	ldr	r0, [pc, #244]	; (24530 <z_add_timeout+0x144>)
   2443c:	228e      	movs	r2, #142	; 0x8e
   2443e:	f001 fbda 	bl	25bf6 <assert_print>
   24442:	483d      	ldr	r0, [pc, #244]	; (24538 <z_add_timeout+0x14c>)
   24444:	218e      	movs	r1, #142	; 0x8e
   24446:	f001 fbcf 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   2444a:	483a      	ldr	r0, [pc, #232]	; (24534 <z_add_timeout+0x148>)
   2444c:	f7fd ff0e 	bl	2226c <z_spin_lock_set_owner>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   24450:	f06f 0201 	mvn.w	r2, #1
   24454:	1b53      	subs	r3, r2, r5
   24456:	f04f 30ff 	mov.w	r0, #4294967295
   2445a:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2445e:	2b00      	cmp	r3, #0
   24460:	db1b      	blt.n	2449a <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   24462:	4b36      	ldr	r3, [pc, #216]	; (2453c <z_add_timeout+0x150>)
   24464:	e9d3 1300 	ldrd	r1, r3, [r3]
   24468:	1a52      	subs	r2, r2, r1
   2446a:	eb60 0303 	sbc.w	r3, r0, r3
   2446e:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
   24470:	eb63 0707 	sbc.w	r7, r3, r7
   24474:	2d01      	cmp	r5, #1
   24476:	f177 0300 	sbcs.w	r3, r7, #0
   2447a:	bfbc      	itt	lt
   2447c:	2501      	movlt	r5, #1
   2447e:	2700      	movlt	r7, #0
   24480:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   24484:	4a2e      	ldr	r2, [pc, #184]	; (24540 <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
   24486:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2448a:	4293      	cmp	r3, r2
   2448c:	d118      	bne.n	244c0 <z_add_timeout+0xd4>
	node->prev = tail;
   2448e:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   24492:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   24496:	6054      	str	r4, [r2, #4]
}
   24498:	e026      	b.n	244e8 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   2449a:	f7ff ff37 	bl	2430c <elapsed>
   2449e:	3501      	adds	r5, #1
   244a0:	f148 0800 	adc.w	r8, r8, #0
   244a4:	182d      	adds	r5, r5, r0
   244a6:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   244aa:	e9c4 5004 	strd	r5, r0, [r4, #16]
   244ae:	e7e9      	b.n	24484 <z_add_timeout+0x98>
			to->dticks -= t->dticks;
   244b0:	1a09      	subs	r1, r1, r0
   244b2:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   244b6:	459c      	cmp	ip, r3
   244b8:	e9c4 1504 	strd	r1, r5, [r4, #16]
   244bc:	d0e7      	beq.n	2448e <z_add_timeout+0xa2>
   244be:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   244c0:	2b00      	cmp	r3, #0
   244c2:	d0e4      	beq.n	2448e <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   244c4:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   244c8:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   244cc:	4281      	cmp	r1, r0
   244ce:	eb75 0e07 	sbcs.w	lr, r5, r7
   244d2:	daed      	bge.n	244b0 <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
   244d4:	1a41      	subs	r1, r0, r1
   244d6:	eb67 0505 	sbc.w	r5, r7, r5
   244da:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   244de:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   244e0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   244e4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   244e6:	605c      	str	r4, [r3, #4]
	return list->head == list;
   244e8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   244ea:	4293      	cmp	r3, r2
   244ec:	d00b      	beq.n	24506 <z_add_timeout+0x11a>
		if (to == first()) {
   244ee:	429c      	cmp	r4, r3
   244f0:	d109      	bne.n	24506 <z_add_timeout+0x11a>
			int32_t next_time = next_timeout();
   244f2:	f7ff ff15 	bl	24320 <next_timeout>
			if (next_time == 0 ||
   244f6:	b118      	cbz	r0, 24500 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   244f8:	4b12      	ldr	r3, [pc, #72]	; (24544 <z_add_timeout+0x158>)
			if (next_time == 0 ||
   244fa:	691b      	ldr	r3, [r3, #16]
   244fc:	4283      	cmp	r3, r0
   244fe:	d002      	beq.n	24506 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   24500:	2100      	movs	r1, #0
   24502:	f7fb fa7d 	bl	1fa00 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24506:	480b      	ldr	r0, [pc, #44]	; (24534 <z_add_timeout+0x148>)
   24508:	f7fd fea0 	bl	2224c <z_spin_unlock_valid>
   2450c:	b940      	cbnz	r0, 24520 <z_add_timeout+0x134>
   2450e:	490a      	ldr	r1, [pc, #40]	; (24538 <z_add_timeout+0x14c>)
   24510:	4807      	ldr	r0, [pc, #28]	; (24530 <z_add_timeout+0x144>)
   24512:	22b9      	movs	r2, #185	; 0xb9
   24514:	f001 fb6f 	bl	25bf6 <assert_print>
   24518:	4807      	ldr	r0, [pc, #28]	; (24538 <z_add_timeout+0x14c>)
   2451a:	21b9      	movs	r1, #185	; 0xb9
   2451c:	f001 fb64 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   24520:	f386 8811 	msr	BASEPRI, r6
   24524:	f3bf 8f6f 	isb	sy
}
   24528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2452c:	0002e43b 	.word	0x0002e43b
   24530:	0002ab8c 	.word	0x0002ab8c
   24534:	200027d0 	.word	0x200027d0
   24538:	0002b1aa 	.word	0x0002b1aa
   2453c:	200020a0 	.word	0x200020a0
   24540:	200006f8 	.word	0x200006f8
   24544:	20002780 	.word	0x20002780

00024548 <z_abort_timeout>:
{
   24548:	b538      	push	{r3, r4, r5, lr}
   2454a:	4604      	mov	r4, r0
	__asm__ volatile(
   2454c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24550:	f3ef 8511 	mrs	r5, BASEPRI
   24554:	f383 8812 	msr	BASEPRI_MAX, r3
   24558:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2455c:	4815      	ldr	r0, [pc, #84]	; (245b4 <z_abort_timeout+0x6c>)
   2455e:	f7fd fe67 	bl	22230 <z_spin_lock_valid>
   24562:	b940      	cbnz	r0, 24576 <z_abort_timeout+0x2e>
   24564:	4914      	ldr	r1, [pc, #80]	; (245b8 <z_abort_timeout+0x70>)
   24566:	4815      	ldr	r0, [pc, #84]	; (245bc <z_abort_timeout+0x74>)
   24568:	228e      	movs	r2, #142	; 0x8e
   2456a:	f001 fb44 	bl	25bf6 <assert_print>
   2456e:	4812      	ldr	r0, [pc, #72]	; (245b8 <z_abort_timeout+0x70>)
   24570:	218e      	movs	r1, #142	; 0x8e
   24572:	f001 fb39 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   24576:	480f      	ldr	r0, [pc, #60]	; (245b4 <z_abort_timeout+0x6c>)
   24578:	f7fd fe78 	bl	2226c <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   2457c:	6823      	ldr	r3, [r4, #0]
   2457e:	b1b3      	cbz	r3, 245ae <z_abort_timeout+0x66>
			remove_timeout(to);
   24580:	4620      	mov	r0, r4
   24582:	f7ff fef3 	bl	2436c <remove_timeout>
			ret = 0;
   24586:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24588:	480a      	ldr	r0, [pc, #40]	; (245b4 <z_abort_timeout+0x6c>)
   2458a:	f7fd fe5f 	bl	2224c <z_spin_unlock_valid>
   2458e:	b940      	cbnz	r0, 245a2 <z_abort_timeout+0x5a>
   24590:	4909      	ldr	r1, [pc, #36]	; (245b8 <z_abort_timeout+0x70>)
   24592:	480a      	ldr	r0, [pc, #40]	; (245bc <z_abort_timeout+0x74>)
   24594:	22b9      	movs	r2, #185	; 0xb9
   24596:	f001 fb2e 	bl	25bf6 <assert_print>
   2459a:	4807      	ldr	r0, [pc, #28]	; (245b8 <z_abort_timeout+0x70>)
   2459c:	21b9      	movs	r1, #185	; 0xb9
   2459e:	f001 fb23 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   245a2:	f385 8811 	msr	BASEPRI, r5
   245a6:	f3bf 8f6f 	isb	sy
}
   245aa:	4620      	mov	r0, r4
   245ac:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   245ae:	f06f 0415 	mvn.w	r4, #21
   245b2:	e7e9      	b.n	24588 <z_abort_timeout+0x40>
   245b4:	200027d0 	.word	0x200027d0
   245b8:	0002b1aa 	.word	0x0002b1aa
   245bc:	0002ab8c 	.word	0x0002ab8c

000245c0 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   245c0:	b570      	push	{r4, r5, r6, lr}
   245c2:	4604      	mov	r4, r0
	__asm__ volatile(
   245c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   245c8:	f3ef 8611 	mrs	r6, BASEPRI
   245cc:	f383 8812 	msr	BASEPRI_MAX, r3
   245d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   245d4:	4814      	ldr	r0, [pc, #80]	; (24628 <z_timeout_remaining+0x68>)
   245d6:	f7fd fe2b 	bl	22230 <z_spin_lock_valid>
   245da:	b940      	cbnz	r0, 245ee <z_timeout_remaining+0x2e>
   245dc:	4913      	ldr	r1, [pc, #76]	; (2462c <z_timeout_remaining+0x6c>)
   245de:	4814      	ldr	r0, [pc, #80]	; (24630 <z_timeout_remaining+0x70>)
   245e0:	228e      	movs	r2, #142	; 0x8e
   245e2:	f001 fb08 	bl	25bf6 <assert_print>
   245e6:	4811      	ldr	r0, [pc, #68]	; (2462c <z_timeout_remaining+0x6c>)
   245e8:	218e      	movs	r1, #142	; 0x8e
   245ea:	f001 fafd 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   245ee:	480e      	ldr	r0, [pc, #56]	; (24628 <z_timeout_remaining+0x68>)
   245f0:	f7fd fe3c 	bl	2226c <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   245f4:	4620      	mov	r0, r4
   245f6:	f7ff fed3 	bl	243a0 <timeout_rem>
   245fa:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   245fc:	480a      	ldr	r0, [pc, #40]	; (24628 <z_timeout_remaining+0x68>)
   245fe:	460c      	mov	r4, r1
   24600:	f7fd fe24 	bl	2224c <z_spin_unlock_valid>
   24604:	b940      	cbnz	r0, 24618 <z_timeout_remaining+0x58>
   24606:	4909      	ldr	r1, [pc, #36]	; (2462c <z_timeout_remaining+0x6c>)
   24608:	4809      	ldr	r0, [pc, #36]	; (24630 <z_timeout_remaining+0x70>)
   2460a:	22b9      	movs	r2, #185	; 0xb9
   2460c:	f001 faf3 	bl	25bf6 <assert_print>
   24610:	4806      	ldr	r0, [pc, #24]	; (2462c <z_timeout_remaining+0x6c>)
   24612:	21b9      	movs	r1, #185	; 0xb9
   24614:	f001 fae8 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   24618:	f386 8811 	msr	BASEPRI, r6
   2461c:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   24620:	4628      	mov	r0, r5
   24622:	4621      	mov	r1, r4
   24624:	bd70      	pop	{r4, r5, r6, pc}
   24626:	bf00      	nop
   24628:	200027d0 	.word	0x200027d0
   2462c:	0002b1aa 	.word	0x0002b1aa
   24630:	0002ab8c 	.word	0x0002ab8c

00024634 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   24634:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24636:	f04f 0340 	mov.w	r3, #64	; 0x40
   2463a:	f3ef 8511 	mrs	r5, BASEPRI
   2463e:	f383 8812 	msr	BASEPRI_MAX, r3
   24642:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24646:	4813      	ldr	r0, [pc, #76]	; (24694 <z_get_next_timeout_expiry+0x60>)
   24648:	f7fd fdf2 	bl	22230 <z_spin_lock_valid>
   2464c:	b940      	cbnz	r0, 24660 <z_get_next_timeout_expiry+0x2c>
   2464e:	4912      	ldr	r1, [pc, #72]	; (24698 <z_get_next_timeout_expiry+0x64>)
   24650:	4812      	ldr	r0, [pc, #72]	; (2469c <z_get_next_timeout_expiry+0x68>)
   24652:	228e      	movs	r2, #142	; 0x8e
   24654:	f001 facf 	bl	25bf6 <assert_print>
   24658:	480f      	ldr	r0, [pc, #60]	; (24698 <z_get_next_timeout_expiry+0x64>)
   2465a:	218e      	movs	r1, #142	; 0x8e
   2465c:	f001 fac4 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   24660:	480c      	ldr	r0, [pc, #48]	; (24694 <z_get_next_timeout_expiry+0x60>)
   24662:	f7fd fe03 	bl	2226c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   24666:	f7ff fe5b 	bl	24320 <next_timeout>
   2466a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2466c:	4809      	ldr	r0, [pc, #36]	; (24694 <z_get_next_timeout_expiry+0x60>)
   2466e:	f7fd fded 	bl	2224c <z_spin_unlock_valid>
   24672:	b940      	cbnz	r0, 24686 <z_get_next_timeout_expiry+0x52>
   24674:	4908      	ldr	r1, [pc, #32]	; (24698 <z_get_next_timeout_expiry+0x64>)
   24676:	4809      	ldr	r0, [pc, #36]	; (2469c <z_get_next_timeout_expiry+0x68>)
   24678:	22b9      	movs	r2, #185	; 0xb9
   2467a:	f001 fabc 	bl	25bf6 <assert_print>
   2467e:	4806      	ldr	r0, [pc, #24]	; (24698 <z_get_next_timeout_expiry+0x64>)
   24680:	21b9      	movs	r1, #185	; 0xb9
   24682:	f001 fab1 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   24686:	f385 8811 	msr	BASEPRI, r5
   2468a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2468e:	4620      	mov	r0, r4
   24690:	bd38      	pop	{r3, r4, r5, pc}
   24692:	bf00      	nop
   24694:	200027d0 	.word	0x200027d0
   24698:	0002b1aa 	.word	0x0002b1aa
   2469c:	0002ab8c 	.word	0x0002ab8c

000246a0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   246a0:	b570      	push	{r4, r5, r6, lr}
   246a2:	4604      	mov	r4, r0
   246a4:	460d      	mov	r5, r1
	__asm__ volatile(
   246a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   246aa:	f3ef 8611 	mrs	r6, BASEPRI
   246ae:	f383 8812 	msr	BASEPRI_MAX, r3
   246b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   246b6:	4816      	ldr	r0, [pc, #88]	; (24710 <z_set_timeout_expiry+0x70>)
   246b8:	f7fd fdba 	bl	22230 <z_spin_lock_valid>
   246bc:	b940      	cbnz	r0, 246d0 <z_set_timeout_expiry+0x30>
   246be:	4915      	ldr	r1, [pc, #84]	; (24714 <z_set_timeout_expiry+0x74>)
   246c0:	4815      	ldr	r0, [pc, #84]	; (24718 <z_set_timeout_expiry+0x78>)
   246c2:	228e      	movs	r2, #142	; 0x8e
   246c4:	f001 fa97 	bl	25bf6 <assert_print>
   246c8:	4812      	ldr	r0, [pc, #72]	; (24714 <z_set_timeout_expiry+0x74>)
   246ca:	218e      	movs	r1, #142	; 0x8e
   246cc:	f001 fa8c 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   246d0:	480f      	ldr	r0, [pc, #60]	; (24710 <z_set_timeout_expiry+0x70>)
   246d2:	f7fd fdcb 	bl	2226c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   246d6:	f7ff fe23 	bl	24320 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   246da:	2801      	cmp	r0, #1
   246dc:	dd05      	ble.n	246ea <z_set_timeout_expiry+0x4a>
   246de:	42a0      	cmp	r0, r4
   246e0:	db03      	blt.n	246ea <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   246e2:	4629      	mov	r1, r5
   246e4:	4620      	mov	r0, r4
   246e6:	f7fb f98b 	bl	1fa00 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   246ea:	4809      	ldr	r0, [pc, #36]	; (24710 <z_set_timeout_expiry+0x70>)
   246ec:	f7fd fdae 	bl	2224c <z_spin_unlock_valid>
   246f0:	b940      	cbnz	r0, 24704 <z_set_timeout_expiry+0x64>
   246f2:	4908      	ldr	r1, [pc, #32]	; (24714 <z_set_timeout_expiry+0x74>)
   246f4:	4808      	ldr	r0, [pc, #32]	; (24718 <z_set_timeout_expiry+0x78>)
   246f6:	22b9      	movs	r2, #185	; 0xb9
   246f8:	f001 fa7d 	bl	25bf6 <assert_print>
   246fc:	4805      	ldr	r0, [pc, #20]	; (24714 <z_set_timeout_expiry+0x74>)
   246fe:	21b9      	movs	r1, #185	; 0xb9
   24700:	f001 fa72 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   24704:	f386 8811 	msr	BASEPRI, r6
   24708:	f3bf 8f6f 	isb	sy
		}
	}
}
   2470c:	bd70      	pop	{r4, r5, r6, pc}
   2470e:	bf00      	nop
   24710:	200027d0 	.word	0x200027d0
   24714:	0002b1aa 	.word	0x0002b1aa
   24718:	0002ab8c 	.word	0x0002ab8c

0002471c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   2471c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24720:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   24722:	f7fe ffc9 	bl	236b8 <z_time_slice>
	__asm__ volatile(
   24726:	f04f 0340 	mov.w	r3, #64	; 0x40
   2472a:	f3ef 8611 	mrs	r6, BASEPRI
   2472e:	f383 8812 	msr	BASEPRI_MAX, r3
   24732:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24736:	4845      	ldr	r0, [pc, #276]	; (2484c <sys_clock_announce+0x130>)
   24738:	f7fd fd7a 	bl	22230 <z_spin_lock_valid>
   2473c:	b940      	cbnz	r0, 24750 <sys_clock_announce+0x34>
   2473e:	4944      	ldr	r1, [pc, #272]	; (24850 <sys_clock_announce+0x134>)
   24740:	4844      	ldr	r0, [pc, #272]	; (24854 <sys_clock_announce+0x138>)
   24742:	228e      	movs	r2, #142	; 0x8e
   24744:	f001 fa57 	bl	25bf6 <assert_print>
   24748:	4841      	ldr	r0, [pc, #260]	; (24850 <sys_clock_announce+0x134>)
   2474a:	218e      	movs	r1, #142	; 0x8e
   2474c:	f001 fa4c 	bl	25be8 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   24750:	f8df 8104 	ldr.w	r8, [pc, #260]	; 24858 <sys_clock_announce+0x13c>
	z_spin_lock_set_owner(l);
   24754:	483d      	ldr	r0, [pc, #244]	; (2484c <sys_clock_announce+0x130>)
	return list->head == list;
   24756:	f8df 9104 	ldr.w	r9, [pc, #260]	; 2485c <sys_clock_announce+0x140>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2475a:	4f41      	ldr	r7, [pc, #260]	; (24860 <sys_clock_announce+0x144>)
   2475c:	f7fd fd86 	bl	2226c <z_spin_lock_set_owner>
	announce_remaining = ticks;
   24760:	f8c8 4000 	str.w	r4, [r8]
   24764:	f8d9 4000 	ldr.w	r4, [r9]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   24768:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2476c:	454c      	cmp	r4, r9
		curr_tick += dt;
   2476e:	e9d7 2c00 	ldrd	r2, ip, [r7]
   24772:	ea4f 71e3 	mov.w	r1, r3, asr #31
   24776:	d00b      	beq.n	24790 <sys_clock_announce+0x74>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   24778:	b154      	cbz	r4, 24790 <sys_clock_announce+0x74>
   2477a:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
   2477e:	42ab      	cmp	r3, r5
   24780:	eb71 0e00 	sbcs.w	lr, r1, r0
   24784:	da24      	bge.n	247d0 <sys_clock_announce+0xb4>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   24786:	1aed      	subs	r5, r5, r3
   24788:	eb60 0001 	sbc.w	r0, r0, r1
   2478c:	e9c4 5004 	strd	r5, r0, [r4, #16]
	}

	curr_tick += announce_remaining;
   24790:	189b      	adds	r3, r3, r2
   24792:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
   24796:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   24798:	e9c7 3100 	strd	r3, r1, [r7]
	announce_remaining = 0;
   2479c:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   247a0:	f7ff fdbe 	bl	24320 <next_timeout>
   247a4:	4621      	mov	r1, r4
   247a6:	f7fb f92b 	bl	1fa00 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247aa:	4828      	ldr	r0, [pc, #160]	; (2484c <sys_clock_announce+0x130>)
   247ac:	f7fd fd4e 	bl	2224c <z_spin_unlock_valid>
   247b0:	b940      	cbnz	r0, 247c4 <sys_clock_announce+0xa8>
   247b2:	4927      	ldr	r1, [pc, #156]	; (24850 <sys_clock_announce+0x134>)
   247b4:	4827      	ldr	r0, [pc, #156]	; (24854 <sys_clock_announce+0x138>)
   247b6:	22b9      	movs	r2, #185	; 0xb9
   247b8:	f001 fa1d 	bl	25bf6 <assert_print>
   247bc:	4824      	ldr	r0, [pc, #144]	; (24850 <sys_clock_announce+0x134>)
   247be:	21b9      	movs	r1, #185	; 0xb9
   247c0:	f001 fa12 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   247c4:	f386 8811 	msr	BASEPRI, r6
   247c8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   247cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   247d0:	18aa      	adds	r2, r5, r2
   247d2:	eb4c 71e5 	adc.w	r1, ip, r5, asr #31
   247d6:	e9c7 2100 	strd	r2, r1, [r7]
		t->dticks = 0;
   247da:	2300      	movs	r3, #0
   247dc:	2200      	movs	r2, #0
		remove_timeout(t);
   247de:	4620      	mov	r0, r4
		t->dticks = 0;
   247e0:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   247e4:	f7ff fdc2 	bl	2436c <remove_timeout>
   247e8:	4818      	ldr	r0, [pc, #96]	; (2484c <sys_clock_announce+0x130>)
   247ea:	f7fd fd2f 	bl	2224c <z_spin_unlock_valid>
   247ee:	b940      	cbnz	r0, 24802 <sys_clock_announce+0xe6>
   247f0:	4917      	ldr	r1, [pc, #92]	; (24850 <sys_clock_announce+0x134>)
   247f2:	4818      	ldr	r0, [pc, #96]	; (24854 <sys_clock_announce+0x138>)
   247f4:	22b9      	movs	r2, #185	; 0xb9
   247f6:	f001 f9fe 	bl	25bf6 <assert_print>
   247fa:	4815      	ldr	r0, [pc, #84]	; (24850 <sys_clock_announce+0x134>)
   247fc:	21b9      	movs	r1, #185	; 0xb9
   247fe:	f001 f9f3 	bl	25be8 <assert_post_action>
   24802:	f386 8811 	msr	BASEPRI, r6
   24806:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2480a:	68a3      	ldr	r3, [r4, #8]
   2480c:	4620      	mov	r0, r4
   2480e:	4798      	blx	r3
	__asm__ volatile(
   24810:	f04f 0340 	mov.w	r3, #64	; 0x40
   24814:	f3ef 8611 	mrs	r6, BASEPRI
   24818:	f383 8812 	msr	BASEPRI_MAX, r3
   2481c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24820:	480a      	ldr	r0, [pc, #40]	; (2484c <sys_clock_announce+0x130>)
   24822:	f7fd fd05 	bl	22230 <z_spin_lock_valid>
   24826:	b940      	cbnz	r0, 2483a <sys_clock_announce+0x11e>
   24828:	4909      	ldr	r1, [pc, #36]	; (24850 <sys_clock_announce+0x134>)
   2482a:	480a      	ldr	r0, [pc, #40]	; (24854 <sys_clock_announce+0x138>)
   2482c:	228e      	movs	r2, #142	; 0x8e
   2482e:	f001 f9e2 	bl	25bf6 <assert_print>
   24832:	4807      	ldr	r0, [pc, #28]	; (24850 <sys_clock_announce+0x134>)
   24834:	218e      	movs	r1, #142	; 0x8e
   24836:	f001 f9d7 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   2483a:	4804      	ldr	r0, [pc, #16]	; (2484c <sys_clock_announce+0x130>)
   2483c:	f7fd fd16 	bl	2226c <z_spin_lock_set_owner>
		announce_remaining -= dt;
   24840:	f8d8 3000 	ldr.w	r3, [r8]
   24844:	1b5b      	subs	r3, r3, r5
   24846:	f8c8 3000 	str.w	r3, [r8]
   2484a:	e78b      	b.n	24764 <sys_clock_announce+0x48>
   2484c:	200027d0 	.word	0x200027d0
   24850:	0002b1aa 	.word	0x0002b1aa
   24854:	0002ab8c 	.word	0x0002ab8c
   24858:	200027cc 	.word	0x200027cc
   2485c:	200006f8 	.word	0x200006f8
   24860:	200020a0 	.word	0x200020a0

00024864 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   24864:	b570      	push	{r4, r5, r6, lr}
   24866:	f04f 0340 	mov.w	r3, #64	; 0x40
   2486a:	f3ef 8611 	mrs	r6, BASEPRI
   2486e:	f383 8812 	msr	BASEPRI_MAX, r3
   24872:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24876:	4816      	ldr	r0, [pc, #88]	; (248d0 <sys_clock_tick_get+0x6c>)
   24878:	f7fd fcda 	bl	22230 <z_spin_lock_valid>
   2487c:	b940      	cbnz	r0, 24890 <sys_clock_tick_get+0x2c>
   2487e:	4915      	ldr	r1, [pc, #84]	; (248d4 <sys_clock_tick_get+0x70>)
   24880:	4815      	ldr	r0, [pc, #84]	; (248d8 <sys_clock_tick_get+0x74>)
   24882:	228e      	movs	r2, #142	; 0x8e
   24884:	f001 f9b7 	bl	25bf6 <assert_print>
   24888:	4812      	ldr	r0, [pc, #72]	; (248d4 <sys_clock_tick_get+0x70>)
   2488a:	218e      	movs	r1, #142	; 0x8e
   2488c:	f001 f9ac 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   24890:	480f      	ldr	r0, [pc, #60]	; (248d0 <sys_clock_tick_get+0x6c>)
   24892:	f7fd fceb 	bl	2226c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   24896:	f7ff fd39 	bl	2430c <elapsed>
   2489a:	4a10      	ldr	r2, [pc, #64]	; (248dc <sys_clock_tick_get+0x78>)
   2489c:	e9d2 4500 	ldrd	r4, r5, [r2]
   248a0:	1904      	adds	r4, r0, r4
   248a2:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   248a6:	480a      	ldr	r0, [pc, #40]	; (248d0 <sys_clock_tick_get+0x6c>)
   248a8:	f7fd fcd0 	bl	2224c <z_spin_unlock_valid>
   248ac:	b940      	cbnz	r0, 248c0 <sys_clock_tick_get+0x5c>
   248ae:	4909      	ldr	r1, [pc, #36]	; (248d4 <sys_clock_tick_get+0x70>)
   248b0:	4809      	ldr	r0, [pc, #36]	; (248d8 <sys_clock_tick_get+0x74>)
   248b2:	22b9      	movs	r2, #185	; 0xb9
   248b4:	f001 f99f 	bl	25bf6 <assert_print>
   248b8:	4806      	ldr	r0, [pc, #24]	; (248d4 <sys_clock_tick_get+0x70>)
   248ba:	21b9      	movs	r1, #185	; 0xb9
   248bc:	f001 f994 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   248c0:	f386 8811 	msr	BASEPRI, r6
   248c4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   248c8:	4620      	mov	r0, r4
   248ca:	4629      	mov	r1, r5
   248cc:	bd70      	pop	{r4, r5, r6, pc}
   248ce:	bf00      	nop
   248d0:	200027d0 	.word	0x200027d0
   248d4:	0002b1aa 	.word	0x0002b1aa
   248d8:	0002ab8c 	.word	0x0002ab8c
   248dc:	200020a0 	.word	0x200020a0

000248e0 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   248e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   248e4:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   248e6:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 24ab0 <register_events+0x1d0>
   248ea:	4f72      	ldr	r7, [pc, #456]	; (24ab4 <register_events+0x1d4>)
   248ec:	4d72      	ldr	r5, [pc, #456]	; (24ab8 <register_events+0x1d8>)
{
   248ee:	9100      	str	r1, [sp, #0]
   248f0:	4614      	mov	r4, r2
   248f2:	9301      	str	r3, [sp, #4]
   248f4:	4681      	mov	r9, r0
	int events_registered = 0;
   248f6:	46b0      	mov	r8, r6
	for (int ii = 0; ii < num_events; ii++) {
   248f8:	9b00      	ldr	r3, [sp, #0]
   248fa:	429e      	cmp	r6, r3
   248fc:	db03      	blt.n	24906 <register_events+0x26>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   248fe:	4640      	mov	r0, r8
   24900:	b003      	add	sp, #12
   24902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   24906:	f04f 0240 	mov.w	r2, #64	; 0x40
   2490a:	f3ef 8b11 	mrs	fp, BASEPRI
   2490e:	f382 8812 	msr	BASEPRI_MAX, r2
   24912:	f3bf 8f6f 	isb	sy
   24916:	4650      	mov	r0, sl
   24918:	f7fd fc8a 	bl	22230 <z_spin_lock_valid>
   2491c:	b940      	cbnz	r0, 24930 <register_events+0x50>
   2491e:	4639      	mov	r1, r7
   24920:	4628      	mov	r0, r5
   24922:	228e      	movs	r2, #142	; 0x8e
   24924:	f001 f967 	bl	25bf6 <assert_print>
   24928:	218e      	movs	r1, #142	; 0x8e
   2492a:	4638      	mov	r0, r7
   2492c:	f001 f95c 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   24930:	4650      	mov	r0, sl
   24932:	f7fd fc9b 	bl	2226c <z_spin_lock_set_owner>
	switch (event->type) {
   24936:	f899 200d 	ldrb.w	r2, [r9, #13]
   2493a:	f002 021f 	and.w	r2, r2, #31
   2493e:	2a08      	cmp	r2, #8
   24940:	d853      	bhi.n	249ea <register_events+0x10a>
   24942:	e8df f002 	tbb	[pc, r2]
   24946:	4431      	.short	0x4431
   24948:	522d5205 	.word	0x522d5205
   2494c:	5252      	.short	0x5252
   2494e:	4b          	.byte	0x4b
   2494f:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   24950:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24954:	6892      	ldr	r2, [r2, #8]
   24956:	b33a      	cbz	r2, 249a8 <register_events+0xc8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   24958:	2202      	movs	r2, #2
	event->state |= state;
   2495a:	f8d9 100c 	ldr.w	r1, [r9, #12]
   2495e:	f3c1 3c45 	ubfx	ip, r1, #13, #6
   24962:	ea42 020c 	orr.w	r2, r2, ip
	event->poller = NULL;
   24966:	2000      	movs	r0, #0
	event->state |= state;
   24968:	f362 3152 	bfi	r1, r2, #13, #6
	event->poller = NULL;
   2496c:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   24970:	f8c9 100c 	str.w	r1, [r9, #12]
			poller->is_polling = false;
   24974:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24976:	4650      	mov	r0, sl
   24978:	f7fd fc68 	bl	2224c <z_spin_unlock_valid>
   2497c:	b940      	cbnz	r0, 24990 <register_events+0xb0>
   2497e:	4639      	mov	r1, r7
   24980:	4628      	mov	r0, r5
   24982:	22b9      	movs	r2, #185	; 0xb9
   24984:	f001 f937 	bl	25bf6 <assert_print>
   24988:	21b9      	movs	r1, #185	; 0xb9
   2498a:	4638      	mov	r0, r7
   2498c:	f001 f92c 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   24990:	f38b 8811 	msr	BASEPRI, fp
   24994:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   24998:	3601      	adds	r6, #1
   2499a:	f109 0914 	add.w	r9, r9, #20
   2499e:	e7ab      	b.n	248f8 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   249a0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   249a4:	6812      	ldr	r2, [r2, #0]
   249a6:	bb52      	cbnz	r2, 249fe <register_events+0x11e>
		} else if (!just_check && poller->is_polling) {
   249a8:	9b01      	ldr	r3, [sp, #4]
   249aa:	2b00      	cmp	r3, #0
   249ac:	d1e3      	bne.n	24976 <register_events+0x96>
   249ae:	7822      	ldrb	r2, [r4, #0]
   249b0:	2a00      	cmp	r2, #0
   249b2:	d0e0      	beq.n	24976 <register_events+0x96>
	switch (event->type) {
   249b4:	f899 200d 	ldrb.w	r2, [r9, #13]
   249b8:	f002 021f 	and.w	r2, r2, #31
   249bc:	2a08      	cmp	r2, #8
   249be:	d86d      	bhi.n	24a9c <register_events+0x1bc>
   249c0:	e8df f002 	tbb	[pc, r2]
   249c4:	6c1f4932 	.word	0x6c1f4932
   249c8:	6c6c6c37 	.word	0x6c6c6c37
   249cc:	5a          	.byte	0x5a
   249cd:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   249ce:	f8d9 2010 	ldr.w	r2, [r9, #16]
   249d2:	6892      	ldr	r2, [r2, #8]
   249d4:	2a00      	cmp	r2, #0
   249d6:	d0e7      	beq.n	249a8 <register_events+0xc8>
			*state = K_POLL_STATE_SIGNALED;
   249d8:	2201      	movs	r2, #1
   249da:	e7be      	b.n	2495a <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   249dc:	f8d9 2010 	ldr.w	r2, [r9, #16]
   249e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
   249e2:	2a00      	cmp	r2, #0
   249e4:	d0e0      	beq.n	249a8 <register_events+0xc8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   249e6:	2210      	movs	r2, #16
   249e8:	e7b7      	b.n	2495a <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   249ea:	4628      	mov	r0, r5
   249ec:	4933      	ldr	r1, [pc, #204]	; (24abc <register_events+0x1dc>)
   249ee:	225c      	movs	r2, #92	; 0x5c
   249f0:	f001 f901 	bl	25bf6 <assert_print>
   249f4:	4831      	ldr	r0, [pc, #196]	; (24abc <register_events+0x1dc>)
   249f6:	215c      	movs	r1, #92	; 0x5c
   249f8:	f001 f8f6 	bl	25be8 <assert_post_action>
		break;
   249fc:	e7d4      	b.n	249a8 <register_events+0xc8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   249fe:	2204      	movs	r2, #4
   24a00:	e7ab      	b.n	2495a <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   24a02:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24a06:	b942      	cbnz	r2, 24a1a <register_events+0x13a>
   24a08:	492c      	ldr	r1, [pc, #176]	; (24abc <register_events+0x1dc>)
   24a0a:	4628      	mov	r0, r5
   24a0c:	2286      	movs	r2, #134	; 0x86
   24a0e:	f001 f8f2 	bl	25bf6 <assert_print>
   24a12:	482a      	ldr	r0, [pc, #168]	; (24abc <register_events+0x1dc>)
   24a14:	2186      	movs	r1, #134	; 0x86
   24a16:	f001 f8e7 	bl	25be8 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   24a1a:	f8d9 0010 	ldr.w	r0, [r9, #16]
   24a1e:	4622      	mov	r2, r4
   24a20:	4649      	mov	r1, r9
   24a22:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   24a24:	f005 f8d7 	bl	29bd6 <add_event>
	event->poller = poller;
   24a28:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   24a2c:	f108 0801 	add.w	r8, r8, #1
   24a30:	e7a1      	b.n	24976 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   24a32:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24a36:	b942      	cbnz	r2, 24a4a <register_events+0x16a>
   24a38:	4920      	ldr	r1, [pc, #128]	; (24abc <register_events+0x1dc>)
   24a3a:	4628      	mov	r0, r5
   24a3c:	228a      	movs	r2, #138	; 0x8a
   24a3e:	f001 f8da 	bl	25bf6 <assert_print>
   24a42:	481e      	ldr	r0, [pc, #120]	; (24abc <register_events+0x1dc>)
   24a44:	218a      	movs	r1, #138	; 0x8a
   24a46:	f001 f8cf 	bl	25be8 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   24a4a:	f8d9 0010 	ldr.w	r0, [r9, #16]
   24a4e:	4622      	mov	r2, r4
   24a50:	4649      	mov	r1, r9
   24a52:	3014      	adds	r0, #20
   24a54:	e7e6      	b.n	24a24 <register_events+0x144>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24a56:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24a5a:	b942      	cbnz	r2, 24a6e <register_events+0x18e>
   24a5c:	4917      	ldr	r1, [pc, #92]	; (24abc <register_events+0x1dc>)
   24a5e:	4628      	mov	r0, r5
   24a60:	228e      	movs	r2, #142	; 0x8e
   24a62:	f001 f8c8 	bl	25bf6 <assert_print>
   24a66:	4815      	ldr	r0, [pc, #84]	; (24abc <register_events+0x1dc>)
   24a68:	218e      	movs	r1, #142	; 0x8e
   24a6a:	f001 f8bd 	bl	25be8 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   24a6e:	f8d9 0010 	ldr.w	r0, [r9, #16]
   24a72:	4622      	mov	r2, r4
   24a74:	4649      	mov	r1, r9
   24a76:	e7d5      	b.n	24a24 <register_events+0x144>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   24a78:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24a7c:	b942      	cbnz	r2, 24a90 <register_events+0x1b0>
   24a7e:	490f      	ldr	r1, [pc, #60]	; (24abc <register_events+0x1dc>)
   24a80:	4628      	mov	r0, r5
   24a82:	2292      	movs	r2, #146	; 0x92
   24a84:	f001 f8b7 	bl	25bf6 <assert_print>
   24a88:	480c      	ldr	r0, [pc, #48]	; (24abc <register_events+0x1dc>)
   24a8a:	2192      	movs	r1, #146	; 0x92
   24a8c:	f001 f8ac 	bl	25be8 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   24a90:	f8d9 0010 	ldr.w	r0, [r9, #16]
   24a94:	4622      	mov	r2, r4
   24a96:	4649      	mov	r1, r9
   24a98:	3028      	adds	r0, #40	; 0x28
   24a9a:	e7c3      	b.n	24a24 <register_events+0x144>
		__ASSERT(false, "invalid event type\n");
   24a9c:	4628      	mov	r0, r5
   24a9e:	4907      	ldr	r1, [pc, #28]	; (24abc <register_events+0x1dc>)
   24aa0:	2299      	movs	r2, #153	; 0x99
   24aa2:	f001 f8a8 	bl	25bf6 <assert_print>
   24aa6:	4805      	ldr	r0, [pc, #20]	; (24abc <register_events+0x1dc>)
   24aa8:	2199      	movs	r1, #153	; 0x99
   24aaa:	f001 f89d 	bl	25be8 <assert_post_action>
		break;
   24aae:	e7bb      	b.n	24a28 <register_events+0x148>
   24ab0:	200027d4 	.word	0x200027d4
   24ab4:	0002b1aa 	.word	0x0002b1aa
   24ab8:	0002ab8c 	.word	0x0002ab8c
   24abc:	0002e45f 	.word	0x0002e45f

00024ac0 <clear_event_registrations>:
{
   24ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24ac4:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   24ac6:	4d45      	ldr	r5, [pc, #276]	; (24bdc <clear_event_registrations+0x11c>)
   24ac8:	4e45      	ldr	r6, [pc, #276]	; (24be0 <clear_event_registrations+0x120>)
   24aca:	f8df 9118 	ldr.w	r9, [pc, #280]	; 24be4 <clear_event_registrations+0x124>
{
   24ace:	4690      	mov	r8, r2
	while (num_events--) {
   24ad0:	460f      	mov	r7, r1
   24ad2:	fb04 0401 	mla	r4, r4, r1, r0
   24ad6:	b90f      	cbnz	r7, 24adc <clear_event_registrations+0x1c>
}
   24ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   24adc:	2300      	movs	r3, #0
   24ade:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   24ae2:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   24ae6:	f003 031f 	and.w	r3, r3, #31
   24aea:	f1a4 0a14 	sub.w	sl, r4, #20
   24aee:	2b08      	cmp	r3, #8
   24af0:	d83e      	bhi.n	24b70 <clear_event_registrations+0xb0>
   24af2:	e8df f003 	tbb	[pc, r3]
   24af6:	2746      	.short	0x2746
   24af8:	3d1c3d05 	.word	0x3d1c3d05
   24afc:	3d3d      	.short	0x3d3d
   24afe:	32          	.byte	0x32
   24aff:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   24b00:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24b04:	b943      	cbnz	r3, 24b18 <clear_event_registrations+0x58>
   24b06:	4629      	mov	r1, r5
   24b08:	22a9      	movs	r2, #169	; 0xa9
   24b0a:	4630      	mov	r0, r6
   24b0c:	f001 f873 	bl	25bf6 <assert_print>
   24b10:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   24b12:	4628      	mov	r0, r5
   24b14:	f001 f868 	bl	25be8 <assert_post_action>
	return node->next != NULL;
   24b18:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   24b1c:	b38b      	cbz	r3, 24b82 <clear_event_registrations+0xc2>
	sys_dnode_t *const prev = node->prev;
   24b1e:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   24b22:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24b24:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24b26:	2300      	movs	r3, #0
	node->prev = NULL;
   24b28:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   24b2c:	e029      	b.n	24b82 <clear_event_registrations+0xc2>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   24b2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24b32:	2b00      	cmp	r3, #0
   24b34:	d1f0      	bne.n	24b18 <clear_event_registrations+0x58>
   24b36:	4629      	mov	r1, r5
   24b38:	22ad      	movs	r2, #173	; 0xad
   24b3a:	4630      	mov	r0, r6
   24b3c:	f001 f85b 	bl	25bf6 <assert_print>
   24b40:	21ad      	movs	r1, #173	; 0xad
   24b42:	e7e6      	b.n	24b12 <clear_event_registrations+0x52>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24b44:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24b48:	2b00      	cmp	r3, #0
   24b4a:	d1e5      	bne.n	24b18 <clear_event_registrations+0x58>
   24b4c:	4629      	mov	r1, r5
   24b4e:	22b1      	movs	r2, #177	; 0xb1
   24b50:	4630      	mov	r0, r6
   24b52:	f001 f850 	bl	25bf6 <assert_print>
   24b56:	21b1      	movs	r1, #177	; 0xb1
   24b58:	e7db      	b.n	24b12 <clear_event_registrations+0x52>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   24b5a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24b5e:	2b00      	cmp	r3, #0
   24b60:	d1da      	bne.n	24b18 <clear_event_registrations+0x58>
   24b62:	4629      	mov	r1, r5
   24b64:	22b5      	movs	r2, #181	; 0xb5
   24b66:	4630      	mov	r0, r6
   24b68:	f001 f845 	bl	25bf6 <assert_print>
   24b6c:	21b5      	movs	r1, #181	; 0xb5
   24b6e:	e7d0      	b.n	24b12 <clear_event_registrations+0x52>
		__ASSERT(false, "invalid event type\n");
   24b70:	4629      	mov	r1, r5
   24b72:	4630      	mov	r0, r6
   24b74:	22bc      	movs	r2, #188	; 0xbc
   24b76:	f001 f83e 	bl	25bf6 <assert_print>
   24b7a:	21bc      	movs	r1, #188	; 0xbc
   24b7c:	4628      	mov	r0, r5
   24b7e:	f001 f833 	bl	25be8 <assert_post_action>
   24b82:	4648      	mov	r0, r9
   24b84:	f7fd fb62 	bl	2224c <z_spin_unlock_valid>
   24b88:	b940      	cbnz	r0, 24b9c <clear_event_registrations+0xdc>
   24b8a:	4917      	ldr	r1, [pc, #92]	; (24be8 <clear_event_registrations+0x128>)
   24b8c:	4630      	mov	r0, r6
   24b8e:	22b9      	movs	r2, #185	; 0xb9
   24b90:	f001 f831 	bl	25bf6 <assert_print>
   24b94:	4814      	ldr	r0, [pc, #80]	; (24be8 <clear_event_registrations+0x128>)
   24b96:	21b9      	movs	r1, #185	; 0xb9
   24b98:	f001 f826 	bl	25be8 <assert_post_action>
   24b9c:	f388 8811 	msr	BASEPRI, r8
   24ba0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   24ba4:	f04f 0340 	mov.w	r3, #64	; 0x40
   24ba8:	f3ef 8811 	mrs	r8, BASEPRI
   24bac:	f383 8812 	msr	BASEPRI_MAX, r3
   24bb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24bb4:	4648      	mov	r0, r9
   24bb6:	f7fd fb3b 	bl	22230 <z_spin_lock_valid>
   24bba:	b940      	cbnz	r0, 24bce <clear_event_registrations+0x10e>
   24bbc:	490a      	ldr	r1, [pc, #40]	; (24be8 <clear_event_registrations+0x128>)
   24bbe:	4630      	mov	r0, r6
   24bc0:	228e      	movs	r2, #142	; 0x8e
   24bc2:	f001 f818 	bl	25bf6 <assert_print>
   24bc6:	4808      	ldr	r0, [pc, #32]	; (24be8 <clear_event_registrations+0x128>)
   24bc8:	218e      	movs	r1, #142	; 0x8e
   24bca:	f001 f80d 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   24bce:	4648      	mov	r0, r9
   24bd0:	f7fd fb4c 	bl	2226c <z_spin_lock_set_owner>
	return k;
   24bd4:	3f01      	subs	r7, #1
   24bd6:	4654      	mov	r4, sl
   24bd8:	e77d      	b.n	24ad6 <clear_event_registrations+0x16>
   24bda:	bf00      	nop
   24bdc:	0002e45f 	.word	0x0002e45f
   24be0:	0002ab8c 	.word	0x0002ab8c
   24be4:	200027d4 	.word	0x200027d4
   24be8:	0002b1aa 	.word	0x0002b1aa

00024bec <k_poll_event_init>:
{
   24bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24bee:	4605      	mov	r5, r0
   24bf0:	460f      	mov	r7, r1
   24bf2:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   24bf4:	4614      	mov	r4, r2
   24bf6:	b142      	cbz	r2, 24c0a <k_poll_event_init+0x1e>
   24bf8:	4915      	ldr	r1, [pc, #84]	; (24c50 <k_poll_event_init+0x64>)
   24bfa:	4816      	ldr	r0, [pc, #88]	; (24c54 <k_poll_event_init+0x68>)
   24bfc:	222d      	movs	r2, #45	; 0x2d
   24bfe:	f000 fffa 	bl	25bf6 <assert_print>
   24c02:	4813      	ldr	r0, [pc, #76]	; (24c50 <k_poll_event_init+0x64>)
   24c04:	212d      	movs	r1, #45	; 0x2d
   24c06:	f000 ffef 	bl	25be8 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   24c0a:	2f1f      	cmp	r7, #31
   24c0c:	d908      	bls.n	24c20 <k_poll_event_init+0x34>
   24c0e:	4910      	ldr	r1, [pc, #64]	; (24c50 <k_poll_event_init+0x64>)
   24c10:	4810      	ldr	r0, [pc, #64]	; (24c54 <k_poll_event_init+0x68>)
   24c12:	222f      	movs	r2, #47	; 0x2f
   24c14:	f000 ffef 	bl	25bf6 <assert_print>
   24c18:	480d      	ldr	r0, [pc, #52]	; (24c50 <k_poll_event_init+0x64>)
   24c1a:	212f      	movs	r1, #47	; 0x2f
   24c1c:	f000 ffe4 	bl	25be8 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   24c20:	b946      	cbnz	r6, 24c34 <k_poll_event_init+0x48>
   24c22:	490b      	ldr	r1, [pc, #44]	; (24c50 <k_poll_event_init+0x64>)
   24c24:	480b      	ldr	r0, [pc, #44]	; (24c54 <k_poll_event_init+0x68>)
   24c26:	2230      	movs	r2, #48	; 0x30
   24c28:	f000 ffe5 	bl	25bf6 <assert_print>
   24c2c:	4808      	ldr	r0, [pc, #32]	; (24c50 <k_poll_event_init+0x64>)
   24c2e:	2130      	movs	r1, #48	; 0x30
   24c30:	f000 ffda 	bl	25be8 <assert_post_action>
	event->poller = NULL;
   24c34:	2300      	movs	r3, #0
	event->type = type;
   24c36:	04e4      	lsls	r4, r4, #19
   24c38:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   24c3a:	60ab      	str	r3, [r5, #8]
	event->type = type;
   24c3c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   24c40:	7b2b      	ldrb	r3, [r5, #12]
   24c42:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   24c46:	433c      	orrs	r4, r7
   24c48:	431c      	orrs	r4, r3
	event->obj = obj;
   24c4a:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   24c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24c50:	0002e45f 	.word	0x0002e45f
   24c54:	0002ab8c 	.word	0x0002ab8c

00024c58 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   24c58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24c5c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   24c5e:	4b63      	ldr	r3, [pc, #396]	; (24dec <z_impl_k_poll+0x194>)
   24c60:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   24c62:	2301      	movs	r3, #1
{
   24c64:	4604      	mov	r4, r0
   24c66:	4688      	mov	r8, r1
   24c68:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   24c6a:	f107 0960 	add.w	r9, r7, #96	; 0x60
	poller->is_polling = true;
   24c6e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   24c72:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
   24c76:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   24c7a:	b153      	cbz	r3, 24c92 <z_impl_k_poll+0x3a>
   24c7c:	495c      	ldr	r1, [pc, #368]	; (24df0 <z_impl_k_poll+0x198>)
   24c7e:	485d      	ldr	r0, [pc, #372]	; (24df4 <z_impl_k_poll+0x19c>)
   24c80:	f44f 728d 	mov.w	r2, #282	; 0x11a
   24c84:	f000 ffb7 	bl	25bf6 <assert_print>
   24c88:	4859      	ldr	r0, [pc, #356]	; (24df0 <z_impl_k_poll+0x198>)
   24c8a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24c8e:	f000 ffab 	bl	25be8 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   24c92:	b954      	cbnz	r4, 24caa <z_impl_k_poll+0x52>
   24c94:	4956      	ldr	r1, [pc, #344]	; (24df0 <z_impl_k_poll+0x198>)
   24c96:	4857      	ldr	r0, [pc, #348]	; (24df4 <z_impl_k_poll+0x19c>)
   24c98:	f240 121b 	movw	r2, #283	; 0x11b
   24c9c:	f000 ffab 	bl	25bf6 <assert_print>
   24ca0:	4853      	ldr	r0, [pc, #332]	; (24df0 <z_impl_k_poll+0x198>)
   24ca2:	f240 111b 	movw	r1, #283	; 0x11b
   24ca6:	f000 ff9f 	bl	25be8 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   24caa:	f1b8 0f00 	cmp.w	r8, #0
   24cae:	da0a      	bge.n	24cc6 <z_impl_k_poll+0x6e>
   24cb0:	494f      	ldr	r1, [pc, #316]	; (24df0 <z_impl_k_poll+0x198>)
   24cb2:	4850      	ldr	r0, [pc, #320]	; (24df4 <z_impl_k_poll+0x19c>)
   24cb4:	f44f 728e 	mov.w	r2, #284	; 0x11c
   24cb8:	f000 ff9d 	bl	25bf6 <assert_print>
   24cbc:	484c      	ldr	r0, [pc, #304]	; (24df0 <z_impl_k_poll+0x198>)
   24cbe:	f44f 718e 	mov.w	r1, #284	; 0x11c
   24cc2:	f000 ff91 	bl	25be8 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   24cc6:	ea56 0305 	orrs.w	r3, r6, r5
   24cca:	bf0c      	ite	eq
   24ccc:	2301      	moveq	r3, #1
   24cce:	2300      	movne	r3, #0
   24cd0:	4641      	mov	r1, r8
   24cd2:	464a      	mov	r2, r9
   24cd4:	4620      	mov	r0, r4
   24cd6:	f7ff fe03 	bl	248e0 <register_events>
   24cda:	4680      	mov	r8, r0
   24cdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   24ce0:	f3ef 8911 	mrs	r9, BASEPRI
   24ce4:	f383 8812 	msr	BASEPRI_MAX, r3
   24ce8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24cec:	4842      	ldr	r0, [pc, #264]	; (24df8 <z_impl_k_poll+0x1a0>)
   24cee:	f7fd fa9f 	bl	22230 <z_spin_lock_valid>
   24cf2:	b940      	cbnz	r0, 24d06 <z_impl_k_poll+0xae>
   24cf4:	4941      	ldr	r1, [pc, #260]	; (24dfc <z_impl_k_poll+0x1a4>)
   24cf6:	483f      	ldr	r0, [pc, #252]	; (24df4 <z_impl_k_poll+0x19c>)
   24cf8:	228e      	movs	r2, #142	; 0x8e
   24cfa:	f000 ff7c 	bl	25bf6 <assert_print>
   24cfe:	483f      	ldr	r0, [pc, #252]	; (24dfc <z_impl_k_poll+0x1a4>)
   24d00:	218e      	movs	r1, #142	; 0x8e
   24d02:	f000 ff71 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   24d06:	483c      	ldr	r0, [pc, #240]	; (24df8 <z_impl_k_poll+0x1a0>)
   24d08:	f7fd fab0 	bl	2226c <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   24d0c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   24d10:	b9d3      	cbnz	r3, 24d48 <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   24d12:	4620      	mov	r0, r4
   24d14:	464a      	mov	r2, r9
   24d16:	4641      	mov	r1, r8
   24d18:	f7ff fed2 	bl	24ac0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d1c:	4836      	ldr	r0, [pc, #216]	; (24df8 <z_impl_k_poll+0x1a0>)
   24d1e:	f7fd fa95 	bl	2224c <z_spin_unlock_valid>
   24d22:	b940      	cbnz	r0, 24d36 <z_impl_k_poll+0xde>
   24d24:	4935      	ldr	r1, [pc, #212]	; (24dfc <z_impl_k_poll+0x1a4>)
   24d26:	4833      	ldr	r0, [pc, #204]	; (24df4 <z_impl_k_poll+0x19c>)
   24d28:	22b9      	movs	r2, #185	; 0xb9
   24d2a:	f000 ff64 	bl	25bf6 <assert_print>
   24d2e:	4833      	ldr	r0, [pc, #204]	; (24dfc <z_impl_k_poll+0x1a4>)
   24d30:	21b9      	movs	r1, #185	; 0xb9
   24d32:	f000 ff59 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   24d36:	f389 8811 	msr	BASEPRI, r9
   24d3a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
   24d3e:	2500      	movs	r5, #0
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   24d40:	4628      	mov	r0, r5
   24d42:	b003      	add	sp, #12
   24d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   24d48:	2300      	movs	r3, #0
   24d4a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24d4e:	ea56 0305 	orrs.w	r3, r6, r5
   24d52:	d113      	bne.n	24d7c <z_impl_k_poll+0x124>
   24d54:	4828      	ldr	r0, [pc, #160]	; (24df8 <z_impl_k_poll+0x1a0>)
   24d56:	f7fd fa79 	bl	2224c <z_spin_unlock_valid>
   24d5a:	b940      	cbnz	r0, 24d6e <z_impl_k_poll+0x116>
   24d5c:	4927      	ldr	r1, [pc, #156]	; (24dfc <z_impl_k_poll+0x1a4>)
   24d5e:	4825      	ldr	r0, [pc, #148]	; (24df4 <z_impl_k_poll+0x19c>)
   24d60:	22b9      	movs	r2, #185	; 0xb9
   24d62:	f000 ff48 	bl	25bf6 <assert_print>
   24d66:	4825      	ldr	r0, [pc, #148]	; (24dfc <z_impl_k_poll+0x1a4>)
   24d68:	21b9      	movs	r1, #185	; 0xb9
   24d6a:	f000 ff3d 	bl	25be8 <assert_post_action>
   24d6e:	f389 8811 	msr	BASEPRI, r9
   24d72:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   24d76:	f06f 050a 	mvn.w	r5, #10
   24d7a:	e7e1      	b.n	24d40 <z_impl_k_poll+0xe8>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   24d7c:	e9cd 6500 	strd	r6, r5, [sp]
   24d80:	4a1f      	ldr	r2, [pc, #124]	; (24e00 <z_impl_k_poll+0x1a8>)
   24d82:	481d      	ldr	r0, [pc, #116]	; (24df8 <z_impl_k_poll+0x1a0>)
   24d84:	4649      	mov	r1, r9
   24d86:	f7fe feab 	bl	23ae0 <z_pend_curr>
   24d8a:	4605      	mov	r5, r0
	__asm__ volatile(
   24d8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d90:	f3ef 8611 	mrs	r6, BASEPRI
   24d94:	f383 8812 	msr	BASEPRI_MAX, r3
   24d98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d9c:	4816      	ldr	r0, [pc, #88]	; (24df8 <z_impl_k_poll+0x1a0>)
   24d9e:	f7fd fa47 	bl	22230 <z_spin_lock_valid>
   24da2:	b940      	cbnz	r0, 24db6 <z_impl_k_poll+0x15e>
   24da4:	4915      	ldr	r1, [pc, #84]	; (24dfc <z_impl_k_poll+0x1a4>)
   24da6:	4813      	ldr	r0, [pc, #76]	; (24df4 <z_impl_k_poll+0x19c>)
   24da8:	228e      	movs	r2, #142	; 0x8e
   24daa:	f000 ff24 	bl	25bf6 <assert_print>
   24dae:	4813      	ldr	r0, [pc, #76]	; (24dfc <z_impl_k_poll+0x1a4>)
   24db0:	218e      	movs	r1, #142	; 0x8e
   24db2:	f000 ff19 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   24db6:	4810      	ldr	r0, [pc, #64]	; (24df8 <z_impl_k_poll+0x1a0>)
   24db8:	f7fd fa58 	bl	2226c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   24dbc:	4620      	mov	r0, r4
   24dbe:	4632      	mov	r2, r6
   24dc0:	4641      	mov	r1, r8
   24dc2:	f7ff fe7d 	bl	24ac0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24dc6:	480c      	ldr	r0, [pc, #48]	; (24df8 <z_impl_k_poll+0x1a0>)
   24dc8:	f7fd fa40 	bl	2224c <z_spin_unlock_valid>
   24dcc:	b940      	cbnz	r0, 24de0 <z_impl_k_poll+0x188>
   24dce:	490b      	ldr	r1, [pc, #44]	; (24dfc <z_impl_k_poll+0x1a4>)
   24dd0:	4808      	ldr	r0, [pc, #32]	; (24df4 <z_impl_k_poll+0x19c>)
   24dd2:	22b9      	movs	r2, #185	; 0xb9
   24dd4:	f000 ff0f 	bl	25bf6 <assert_print>
   24dd8:	4808      	ldr	r0, [pc, #32]	; (24dfc <z_impl_k_poll+0x1a4>)
   24dda:	21b9      	movs	r1, #185	; 0xb9
   24ddc:	f000 ff04 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   24de0:	f386 8811 	msr	BASEPRI, r6
   24de4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   24de8:	e7aa      	b.n	24d40 <z_impl_k_poll+0xe8>
   24dea:	bf00      	nop
   24dec:	20002780 	.word	0x20002780
   24df0:	0002e45f 	.word	0x0002e45f
   24df4:	0002ab8c 	.word	0x0002ab8c
   24df8:	200027d4 	.word	0x200027d4
   24dfc:	0002b1aa 	.word	0x0002b1aa
   24e00:	20000700 	.word	0x20000700

00024e04 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   24e04:	b570      	push	{r4, r5, r6, lr}
   24e06:	4604      	mov	r4, r0
   24e08:	460d      	mov	r5, r1
	__asm__ volatile(
   24e0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e0e:	f3ef 8611 	mrs	r6, BASEPRI
   24e12:	f383 8812 	msr	BASEPRI_MAX, r3
   24e16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24e1a:	481c      	ldr	r0, [pc, #112]	; (24e8c <z_impl_k_poll_signal_raise+0x88>)
   24e1c:	f7fd fa08 	bl	22230 <z_spin_lock_valid>
   24e20:	b940      	cbnz	r0, 24e34 <z_impl_k_poll_signal_raise+0x30>
   24e22:	491b      	ldr	r1, [pc, #108]	; (24e90 <z_impl_k_poll_signal_raise+0x8c>)
   24e24:	481b      	ldr	r0, [pc, #108]	; (24e94 <z_impl_k_poll_signal_raise+0x90>)
   24e26:	228e      	movs	r2, #142	; 0x8e
   24e28:	f000 fee5 	bl	25bf6 <assert_print>
   24e2c:	4818      	ldr	r0, [pc, #96]	; (24e90 <z_impl_k_poll_signal_raise+0x8c>)
   24e2e:	218e      	movs	r1, #142	; 0x8e
   24e30:	f000 feda 	bl	25be8 <assert_post_action>
	z_spin_lock_set_owner(l);
   24e34:	4815      	ldr	r0, [pc, #84]	; (24e8c <z_impl_k_poll_signal_raise+0x88>)
   24e36:	f7fd fa19 	bl	2226c <z_spin_lock_set_owner>
	return list->head == list;
   24e3a:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   24e3c:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   24e3e:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24e40:	4284      	cmp	r4, r0
   24e42:	60a1      	str	r1, [r4, #8]
   24e44:	d112      	bne.n	24e6c <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24e46:	4811      	ldr	r0, [pc, #68]	; (24e8c <z_impl_k_poll_signal_raise+0x88>)
   24e48:	f7fd fa00 	bl	2224c <z_spin_unlock_valid>
   24e4c:	b940      	cbnz	r0, 24e60 <z_impl_k_poll_signal_raise+0x5c>
   24e4e:	4910      	ldr	r1, [pc, #64]	; (24e90 <z_impl_k_poll_signal_raise+0x8c>)
   24e50:	4810      	ldr	r0, [pc, #64]	; (24e94 <z_impl_k_poll_signal_raise+0x90>)
   24e52:	22b9      	movs	r2, #185	; 0xb9
   24e54:	f000 fecf 	bl	25bf6 <assert_print>
   24e58:	480d      	ldr	r0, [pc, #52]	; (24e90 <z_impl_k_poll_signal_raise+0x8c>)
   24e5a:	21b9      	movs	r1, #185	; 0xb9
   24e5c:	f000 fec4 	bl	25be8 <assert_post_action>
	__asm__ volatile(
   24e60:	f386 8811 	msr	BASEPRI, r6
   24e64:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   24e68:	2400      	movs	r4, #0
   24e6a:	e00d      	b.n	24e88 <z_impl_k_poll_signal_raise+0x84>
	sys_dnode_t *const next = node->next;
   24e6c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24e70:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24e72:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24e74:	2300      	movs	r3, #0
	node->prev = NULL;
   24e76:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24e7a:	f004 fedb 	bl	29c34 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   24e7e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24e80:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24e82:	4802      	ldr	r0, [pc, #8]	; (24e8c <z_impl_k_poll_signal_raise+0x88>)
   24e84:	f7fe fa98 	bl	233b8 <z_reschedule>
	return rc;
}
   24e88:	4620      	mov	r0, r4
   24e8a:	bd70      	pop	{r4, r5, r6, pc}
   24e8c:	200027d4 	.word	0x200027d4
   24e90:	0002b1aa 	.word	0x0002b1aa
   24e94:	0002ab8c 	.word	0x0002ab8c

00024e98 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   24e98:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   24e9a:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   24e9e:	4606      	mov	r6, r0
   24ea0:	460d      	mov	r5, r1
   24ea2:	d20b      	bcs.n	24ebc <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   24ea4:	f04f 0800 	mov.w	r8, #0
   24ea8:	f04f 0900 	mov.w	r9, #0
   24eac:	e9cd 8900 	strd	r8, r9, [sp]
   24eb0:	f041 0104 	orr.w	r1, r1, #4
   24eb4:	f7fc fef8 	bl	21ca8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   24eb8:	4604      	mov	r4, r0
   24eba:	b920      	cbnz	r0, 24ec6 <z_heap_aligned_alloc+0x2e>
		return NULL;
   24ebc:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   24ebe:	4620      	mov	r0, r4
   24ec0:	b002      	add	sp, #8
   24ec2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   24ec6:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   24eca:	2d00      	cmp	r5, #0
   24ecc:	d0f7      	beq.n	24ebe <z_heap_aligned_alloc+0x26>
   24ece:	3d01      	subs	r5, #1
   24ed0:	422c      	tst	r4, r5
   24ed2:	d0f4      	beq.n	24ebe <z_heap_aligned_alloc+0x26>
   24ed4:	4904      	ldr	r1, [pc, #16]	; (24ee8 <z_heap_aligned_alloc+0x50>)
   24ed6:	4805      	ldr	r0, [pc, #20]	; (24eec <z_heap_aligned_alloc+0x54>)
   24ed8:	2225      	movs	r2, #37	; 0x25
   24eda:	f000 fe8c 	bl	25bf6 <assert_print>
   24ede:	4802      	ldr	r0, [pc, #8]	; (24ee8 <z_heap_aligned_alloc+0x50>)
   24ee0:	2125      	movs	r1, #37	; 0x25
   24ee2:	f000 fe81 	bl	25be8 <assert_post_action>
   24ee6:	e7ea      	b.n	24ebe <z_heap_aligned_alloc+0x26>
   24ee8:	0002e480 	.word	0x0002e480
   24eec:	0002ab8c 	.word	0x0002ab8c

00024ef0 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   24ef0:	2803      	cmp	r0, #3
{
   24ef2:	b538      	push	{r3, r4, r5, lr}
   24ef4:	4604      	mov	r4, r0
   24ef6:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   24ef8:	d901      	bls.n	24efe <k_aligned_alloc+0xe>
   24efa:	0783      	lsls	r3, r0, #30
   24efc:	d008      	beq.n	24f10 <k_aligned_alloc+0x20>
   24efe:	490e      	ldr	r1, [pc, #56]	; (24f38 <k_aligned_alloc+0x48>)
   24f00:	480e      	ldr	r0, [pc, #56]	; (24f3c <k_aligned_alloc+0x4c>)
   24f02:	2242      	movs	r2, #66	; 0x42
   24f04:	f000 fe77 	bl	25bf6 <assert_print>
   24f08:	480b      	ldr	r0, [pc, #44]	; (24f38 <k_aligned_alloc+0x48>)
   24f0a:	2142      	movs	r1, #66	; 0x42
   24f0c:	f000 fe6c 	bl	25be8 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   24f10:	1e63      	subs	r3, r4, #1
   24f12:	4223      	tst	r3, r4
   24f14:	d008      	beq.n	24f28 <k_aligned_alloc+0x38>
   24f16:	4908      	ldr	r1, [pc, #32]	; (24f38 <k_aligned_alloc+0x48>)
   24f18:	4808      	ldr	r0, [pc, #32]	; (24f3c <k_aligned_alloc+0x4c>)
   24f1a:	2246      	movs	r2, #70	; 0x46
   24f1c:	f000 fe6b 	bl	25bf6 <assert_print>
   24f20:	4805      	ldr	r0, [pc, #20]	; (24f38 <k_aligned_alloc+0x48>)
   24f22:	2146      	movs	r1, #70	; 0x46
   24f24:	f000 fe60 	bl	25be8 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   24f28:	462a      	mov	r2, r5
   24f2a:	4621      	mov	r1, r4
   24f2c:	4804      	ldr	r0, [pc, #16]	; (24f40 <k_aligned_alloc+0x50>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   24f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   24f32:	f7ff bfb1 	b.w	24e98 <z_heap_aligned_alloc>
   24f36:	bf00      	nop
   24f38:	0002e480 	.word	0x0002e480
   24f3c:	0002ab8c 	.word	0x0002ab8c
   24f40:	2000081c 	.word	0x2000081c

00024f44 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   24f44:	4b01      	ldr	r3, [pc, #4]	; (24f4c <k_thread_system_pool_assign+0x8>)
   24f46:	6743      	str	r3, [r0, #116]	; 0x74
}
   24f48:	4770      	bx	lr
   24f4a:	bf00      	nop
   24f4c:	2000081c 	.word	0x2000081c

00024f50 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24f50:	b538      	push	{r3, r4, r5, lr}
   24f52:	4604      	mov	r4, r0
   24f54:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   24f56:	f004 fd11 	bl	2997c <k_is_in_isr>
   24f5a:	b950      	cbnz	r0, 24f72 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24f5c:	4b06      	ldr	r3, [pc, #24]	; (24f78 <z_thread_aligned_alloc+0x28>)
   24f5e:	689b      	ldr	r3, [r3, #8]
   24f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   24f62:	b143      	cbz	r3, 24f76 <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   24f64:	462a      	mov	r2, r5
   24f66:	4621      	mov	r1, r4
   24f68:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   24f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   24f6e:	f7ff bf93 	b.w	24e98 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   24f72:	4b02      	ldr	r3, [pc, #8]	; (24f7c <z_thread_aligned_alloc+0x2c>)
   24f74:	e7f6      	b.n	24f64 <z_thread_aligned_alloc+0x14>
}
   24f76:	bd38      	pop	{r3, r4, r5, pc}
   24f78:	20002780 	.word	0x20002780
   24f7c:	2000081c 	.word	0x2000081c

00024f80 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   24f80:	4a02      	ldr	r2, [pc, #8]	; (24f8c <boot_banner+0xc>)
   24f82:	4903      	ldr	r1, [pc, #12]	; (24f90 <boot_banner+0x10>)
   24f84:	4803      	ldr	r0, [pc, #12]	; (24f94 <boot_banner+0x14>)
   24f86:	f000 bc45 	b.w	25814 <printk>
   24f8a:	bf00      	nop
   24f8c:	0002e265 	.word	0x0002e265
   24f90:	0002e4a4 	.word	0x0002e4a4
   24f94:	0002e4b3 	.word	0x0002e4b3

00024f98 <ocrypto_ecdh_p256_public_key>:
   24f98:	b530      	push	{r4, r5, lr}
   24f9a:	b099      	sub	sp, #100	; 0x64
   24f9c:	4605      	mov	r5, r0
   24f9e:	4668      	mov	r0, sp
   24fa0:	f000 f828 	bl	24ff4 <ocrypto_sc_p256_from32bytes>
   24fa4:	4669      	mov	r1, sp
   24fa6:	4604      	mov	r4, r0
   24fa8:	a808      	add	r0, sp, #32
   24faa:	f000 fa53 	bl	25454 <ocrypto_curve_p256_scalarmult_base>
   24fae:	a908      	add	r1, sp, #32
   24fb0:	4304      	orrs	r4, r0
   24fb2:	4628      	mov	r0, r5
   24fb4:	f000 f98a 	bl	252cc <ocrypto_curve_p256_to64bytes>
   24fb8:	4620      	mov	r0, r4
   24fba:	b019      	add	sp, #100	; 0x64
   24fbc:	bd30      	pop	{r4, r5, pc}
   24fbe:	bf00      	nop

00024fc0 <ocrypto_ecdh_p256_common_secret>:
   24fc0:	b570      	push	{r4, r5, r6, lr}
   24fc2:	b098      	sub	sp, #96	; 0x60
   24fc4:	4605      	mov	r5, r0
   24fc6:	4668      	mov	r0, sp
   24fc8:	4616      	mov	r6, r2
   24fca:	f000 f813 	bl	24ff4 <ocrypto_sc_p256_from32bytes>
   24fce:	4631      	mov	r1, r6
   24fd0:	4604      	mov	r4, r0
   24fd2:	a808      	add	r0, sp, #32
   24fd4:	f000 f946 	bl	25264 <ocrypto_curve_p256_from64bytes>
   24fd8:	a908      	add	r1, sp, #32
   24fda:	466a      	mov	r2, sp
   24fdc:	4304      	orrs	r4, r0
   24fde:	4608      	mov	r0, r1
   24fe0:	f000 f982 	bl	252e8 <ocrypto_curve_p256_scalarmult>
   24fe4:	a908      	add	r1, sp, #32
   24fe6:	4304      	orrs	r4, r0
   24fe8:	4628      	mov	r0, r5
   24fea:	f000 f96d 	bl	252c8 <ocrypto_curve_p256_to32bytes>
   24fee:	4620      	mov	r0, r4
   24ff0:	b018      	add	sp, #96	; 0x60
   24ff2:	bd70      	pop	{r4, r5, r6, pc}

00024ff4 <ocrypto_sc_p256_from32bytes>:
   24ff4:	b570      	push	{r4, r5, r6, lr}
   24ff6:	680b      	ldr	r3, [r1, #0]
   24ff8:	4e12      	ldr	r6, [pc, #72]	; (25044 <ocrypto_sc_p256_from32bytes+0x50>)
   24ffa:	ba1b      	rev	r3, r3
   24ffc:	61c3      	str	r3, [r0, #28]
   24ffe:	684b      	ldr	r3, [r1, #4]
   25000:	ba1b      	rev	r3, r3
   25002:	6183      	str	r3, [r0, #24]
   25004:	688b      	ldr	r3, [r1, #8]
   25006:	ba1b      	rev	r3, r3
   25008:	6143      	str	r3, [r0, #20]
   2500a:	68cb      	ldr	r3, [r1, #12]
   2500c:	ba1b      	rev	r3, r3
   2500e:	6103      	str	r3, [r0, #16]
   25010:	690b      	ldr	r3, [r1, #16]
   25012:	ba1b      	rev	r3, r3
   25014:	60c3      	str	r3, [r0, #12]
   25016:	694b      	ldr	r3, [r1, #20]
   25018:	ba1b      	rev	r3, r3
   2501a:	6083      	str	r3, [r0, #8]
   2501c:	698b      	ldr	r3, [r1, #24]
   2501e:	ba1b      	rev	r3, r3
   25020:	6043      	str	r3, [r0, #4]
   25022:	69cb      	ldr	r3, [r1, #28]
   25024:	ba1b      	rev	r3, r3
   25026:	4632      	mov	r2, r6
   25028:	6003      	str	r3, [r0, #0]
   2502a:	4601      	mov	r1, r0
   2502c:	4604      	mov	r4, r0
   2502e:	f7db f891 	bl	154 <ocrypto_bigint_sub256>
   25032:	4631      	mov	r1, r6
   25034:	4605      	mov	r5, r0
   25036:	4602      	mov	r2, r0
   25038:	4620      	mov	r0, r4
   2503a:	f7db f8ab 	bl	194 <ocrypto_bigint_cadd256>
   2503e:	1e68      	subs	r0, r5, #1
   25040:	bd70      	pop	{r4, r5, r6, pc}
   25042:	bf00      	nop
   25044:	0002a958 	.word	0x0002a958

00025048 <p256_zdblu>:
   25048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2504c:	b088      	sub	sp, #32
   2504e:	460c      	mov	r4, r1
   25050:	4606      	mov	r6, r0
   25052:	f102 0120 	add.w	r1, r2, #32
   25056:	4668      	mov	r0, sp
   25058:	f106 0720 	add.w	r7, r6, #32
   2505c:	4690      	mov	r8, r2
   2505e:	f7db fb83 	bl	768 <ocrypto_mod_p256_sqr>
   25062:	466a      	mov	r2, sp
   25064:	4669      	mov	r1, sp
   25066:	4668      	mov	r0, sp
   25068:	f7db fa90 	bl	58c <ocrypto_mod_p256_add>
   2506c:	4669      	mov	r1, sp
   2506e:	4638      	mov	r0, r7
   25070:	f7db fb7a 	bl	768 <ocrypto_mod_p256_sqr>
   25074:	463a      	mov	r2, r7
   25076:	4639      	mov	r1, r7
   25078:	4638      	mov	r0, r7
   2507a:	f104 0520 	add.w	r5, r4, #32
   2507e:	f7db fa85 	bl	58c <ocrypto_mod_p256_add>
   25082:	466a      	mov	r2, sp
   25084:	4669      	mov	r1, sp
   25086:	4668      	mov	r0, sp
   25088:	f7db fa80 	bl	58c <ocrypto_mod_p256_add>
   2508c:	4641      	mov	r1, r8
   2508e:	4628      	mov	r0, r5
   25090:	f7db fb6a 	bl	768 <ocrypto_mod_p256_sqr>
   25094:	466a      	mov	r2, sp
   25096:	4641      	mov	r1, r8
   25098:	4630      	mov	r0, r6
   2509a:	f7db fb4d 	bl	738 <ocrypto_mod_p256_mul>
   2509e:	462a      	mov	r2, r5
   250a0:	4629      	mov	r1, r5
   250a2:	4668      	mov	r0, sp
   250a4:	f7db fa72 	bl	58c <ocrypto_mod_p256_add>
   250a8:	462a      	mov	r2, r5
   250aa:	4669      	mov	r1, sp
   250ac:	4668      	mov	r0, sp
   250ae:	f7db fa6d 	bl	58c <ocrypto_mod_p256_add>
   250b2:	4a12      	ldr	r2, [pc, #72]	; (250fc <p256_zdblu+0xb4>)
   250b4:	4669      	mov	r1, sp
   250b6:	4668      	mov	r0, sp
   250b8:	f7db fa68 	bl	58c <ocrypto_mod_p256_add>
   250bc:	4669      	mov	r1, sp
   250be:	4620      	mov	r0, r4
   250c0:	f7db fb52 	bl	768 <ocrypto_mod_p256_sqr>
   250c4:	4632      	mov	r2, r6
   250c6:	4621      	mov	r1, r4
   250c8:	4620      	mov	r0, r4
   250ca:	f7db fa9d 	bl	608 <ocrypto_mod_p256_sub>
   250ce:	4632      	mov	r2, r6
   250d0:	4621      	mov	r1, r4
   250d2:	4620      	mov	r0, r4
   250d4:	f7db fa98 	bl	608 <ocrypto_mod_p256_sub>
   250d8:	4622      	mov	r2, r4
   250da:	4631      	mov	r1, r6
   250dc:	4628      	mov	r0, r5
   250de:	f7db fa93 	bl	608 <ocrypto_mod_p256_sub>
   250e2:	466a      	mov	r2, sp
   250e4:	4629      	mov	r1, r5
   250e6:	4628      	mov	r0, r5
   250e8:	f7db fb26 	bl	738 <ocrypto_mod_p256_mul>
   250ec:	463a      	mov	r2, r7
   250ee:	4629      	mov	r1, r5
   250f0:	4628      	mov	r0, r5
   250f2:	f7db fa89 	bl	608 <ocrypto_mod_p256_sub>
   250f6:	b008      	add	sp, #32
   250f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   250fc:	0002a9f8 	.word	0x0002a9f8

00025100 <p256_zaddc>:
   25100:	b5f0      	push	{r4, r5, r6, r7, lr}
   25102:	b099      	sub	sp, #100	; 0x64
   25104:	4604      	mov	r4, r0
   25106:	460d      	mov	r5, r1
   25108:	460a      	mov	r2, r1
   2510a:	4601      	mov	r1, r0
   2510c:	4668      	mov	r0, sp
   2510e:	f7db fa7b 	bl	608 <ocrypto_mod_p256_sub>
   25112:	4669      	mov	r1, sp
   25114:	4668      	mov	r0, sp
   25116:	f7db fb27 	bl	768 <ocrypto_mod_p256_sqr>
   2511a:	466a      	mov	r2, sp
   2511c:	4621      	mov	r1, r4
   2511e:	a808      	add	r0, sp, #32
   25120:	f105 0620 	add.w	r6, r5, #32
   25124:	f104 0720 	add.w	r7, r4, #32
   25128:	f7db fb06 	bl	738 <ocrypto_mod_p256_mul>
   2512c:	466a      	mov	r2, sp
   2512e:	4629      	mov	r1, r5
   25130:	4668      	mov	r0, sp
   25132:	f7db fb01 	bl	738 <ocrypto_mod_p256_mul>
   25136:	4632      	mov	r2, r6
   25138:	4639      	mov	r1, r7
   2513a:	a810      	add	r0, sp, #64	; 0x40
   2513c:	f7db fa26 	bl	58c <ocrypto_mod_p256_add>
   25140:	4632      	mov	r2, r6
   25142:	4639      	mov	r1, r7
   25144:	4630      	mov	r0, r6
   25146:	f7db fa5f 	bl	608 <ocrypto_mod_p256_sub>
   2514a:	4631      	mov	r1, r6
   2514c:	4628      	mov	r0, r5
   2514e:	f7db fb0b 	bl	768 <ocrypto_mod_p256_sqr>
   25152:	466a      	mov	r2, sp
   25154:	a908      	add	r1, sp, #32
   25156:	4620      	mov	r0, r4
   25158:	f7db fa18 	bl	58c <ocrypto_mod_p256_add>
   2515c:	4622      	mov	r2, r4
   2515e:	4629      	mov	r1, r5
   25160:	4628      	mov	r0, r5
   25162:	f7db fa51 	bl	608 <ocrypto_mod_p256_sub>
   25166:	466a      	mov	r2, sp
   25168:	a908      	add	r1, sp, #32
   2516a:	4668      	mov	r0, sp
   2516c:	f7db fa4c 	bl	608 <ocrypto_mod_p256_sub>
   25170:	466a      	mov	r2, sp
   25172:	4639      	mov	r1, r7
   25174:	4638      	mov	r0, r7
   25176:	f7db fadf 	bl	738 <ocrypto_mod_p256_mul>
   2517a:	462a      	mov	r2, r5
   2517c:	a908      	add	r1, sp, #32
   2517e:	4668      	mov	r0, sp
   25180:	f7db fa42 	bl	608 <ocrypto_mod_p256_sub>
   25184:	466a      	mov	r2, sp
   25186:	4631      	mov	r1, r6
   25188:	4630      	mov	r0, r6
   2518a:	f7db fad5 	bl	738 <ocrypto_mod_p256_mul>
   2518e:	463a      	mov	r2, r7
   25190:	4631      	mov	r1, r6
   25192:	4630      	mov	r0, r6
   25194:	f7db fa38 	bl	608 <ocrypto_mod_p256_sub>
   25198:	a910      	add	r1, sp, #64	; 0x40
   2519a:	4668      	mov	r0, sp
   2519c:	f7db fae4 	bl	768 <ocrypto_mod_p256_sqr>
   251a0:	4622      	mov	r2, r4
   251a2:	4669      	mov	r1, sp
   251a4:	4620      	mov	r0, r4
   251a6:	f7db fa2f 	bl	608 <ocrypto_mod_p256_sub>
   251aa:	a908      	add	r1, sp, #32
   251ac:	4622      	mov	r2, r4
   251ae:	4608      	mov	r0, r1
   251b0:	f7db fa2a 	bl	608 <ocrypto_mod_p256_sub>
   251b4:	a910      	add	r1, sp, #64	; 0x40
   251b6:	aa08      	add	r2, sp, #32
   251b8:	4608      	mov	r0, r1
   251ba:	f7db fabd 	bl	738 <ocrypto_mod_p256_mul>
   251be:	463a      	mov	r2, r7
   251c0:	a910      	add	r1, sp, #64	; 0x40
   251c2:	4638      	mov	r0, r7
   251c4:	f7db fa20 	bl	608 <ocrypto_mod_p256_sub>
   251c8:	b019      	add	sp, #100	; 0x64
   251ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000251cc <p256_zaddu>:
   251cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   251d0:	b088      	sub	sp, #32
   251d2:	460c      	mov	r4, r1
   251d4:	4605      	mov	r5, r0
   251d6:	4690      	mov	r8, r2
   251d8:	460a      	mov	r2, r1
   251da:	4601      	mov	r1, r0
   251dc:	4668      	mov	r0, sp
   251de:	f7db fa13 	bl	608 <ocrypto_mod_p256_sub>
   251e2:	4669      	mov	r1, sp
   251e4:	4668      	mov	r0, sp
   251e6:	f7db fabf 	bl	768 <ocrypto_mod_p256_sqr>
   251ea:	466a      	mov	r2, sp
   251ec:	4629      	mov	r1, r5
   251ee:	4628      	mov	r0, r5
   251f0:	f104 0620 	add.w	r6, r4, #32
   251f4:	f7db faa0 	bl	738 <ocrypto_mod_p256_mul>
   251f8:	f105 0720 	add.w	r7, r5, #32
   251fc:	466a      	mov	r2, sp
   251fe:	4621      	mov	r1, r4
   25200:	4668      	mov	r0, sp
   25202:	f7db fa99 	bl	738 <ocrypto_mod_p256_mul>
   25206:	4632      	mov	r2, r6
   25208:	4639      	mov	r1, r7
   2520a:	4630      	mov	r0, r6
   2520c:	f7db f9fc 	bl	608 <ocrypto_mod_p256_sub>
   25210:	4631      	mov	r1, r6
   25212:	4620      	mov	r0, r4
   25214:	f7db faa8 	bl	768 <ocrypto_mod_p256_sqr>
   25218:	462a      	mov	r2, r5
   2521a:	4621      	mov	r1, r4
   2521c:	4620      	mov	r0, r4
   2521e:	f7db f9f3 	bl	608 <ocrypto_mod_p256_sub>
   25222:	466a      	mov	r2, sp
   25224:	4621      	mov	r1, r4
   25226:	4620      	mov	r0, r4
   25228:	f7db f9ee 	bl	608 <ocrypto_mod_p256_sub>
   2522c:	466a      	mov	r2, sp
   2522e:	4629      	mov	r1, r5
   25230:	4640      	mov	r0, r8
   25232:	f7db f9e9 	bl	608 <ocrypto_mod_p256_sub>
   25236:	4642      	mov	r2, r8
   25238:	4639      	mov	r1, r7
   2523a:	4638      	mov	r0, r7
   2523c:	f7db fa7c 	bl	738 <ocrypto_mod_p256_mul>
   25240:	4622      	mov	r2, r4
   25242:	4629      	mov	r1, r5
   25244:	4668      	mov	r0, sp
   25246:	f7db f9df 	bl	608 <ocrypto_mod_p256_sub>
   2524a:	466a      	mov	r2, sp
   2524c:	4631      	mov	r1, r6
   2524e:	4630      	mov	r0, r6
   25250:	f7db fa72 	bl	738 <ocrypto_mod_p256_mul>
   25254:	463a      	mov	r2, r7
   25256:	4631      	mov	r1, r6
   25258:	4630      	mov	r0, r6
   2525a:	f7db f9d5 	bl	608 <ocrypto_mod_p256_sub>
   2525e:	b008      	add	sp, #32
   25260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025264 <ocrypto_curve_p256_from64bytes>:
   25264:	b570      	push	{r4, r5, r6, lr}
   25266:	f100 0620 	add.w	r6, r0, #32
   2526a:	b090      	sub	sp, #64	; 0x40
   2526c:	460d      	mov	r5, r1
   2526e:	4604      	mov	r4, r0
   25270:	f000 f914 	bl	2549c <ocrypto_mod_p256_from_bytes>
   25274:	f105 0120 	add.w	r1, r5, #32
   25278:	4630      	mov	r0, r6
   2527a:	f000 f90f 	bl	2549c <ocrypto_mod_p256_from_bytes>
   2527e:	4621      	mov	r1, r4
   25280:	a808      	add	r0, sp, #32
   25282:	f7db fa71 	bl	768 <ocrypto_mod_p256_sqr>
   25286:	a908      	add	r1, sp, #32
   25288:	4608      	mov	r0, r1
   2528a:	4a0d      	ldr	r2, [pc, #52]	; (252c0 <ocrypto_curve_p256_from64bytes+0x5c>)
   2528c:	f7db f97e 	bl	58c <ocrypto_mod_p256_add>
   25290:	a908      	add	r1, sp, #32
   25292:	4622      	mov	r2, r4
   25294:	4608      	mov	r0, r1
   25296:	f7db fa4f 	bl	738 <ocrypto_mod_p256_mul>
   2529a:	a908      	add	r1, sp, #32
   2529c:	4a09      	ldr	r2, [pc, #36]	; (252c4 <ocrypto_curve_p256_from64bytes+0x60>)
   2529e:	4608      	mov	r0, r1
   252a0:	f7db f974 	bl	58c <ocrypto_mod_p256_add>
   252a4:	4631      	mov	r1, r6
   252a6:	4668      	mov	r0, sp
   252a8:	f7db fa5e 	bl	768 <ocrypto_mod_p256_sqr>
   252ac:	2220      	movs	r2, #32
   252ae:	4669      	mov	r1, sp
   252b0:	eb0d 0002 	add.w	r0, sp, r2
   252b4:	f7db f93c 	bl	530 <ocrypto_constant_time_equal>
   252b8:	3801      	subs	r0, #1
   252ba:	b010      	add	sp, #64	; 0x40
   252bc:	bd70      	pop	{r4, r5, r6, pc}
   252be:	bf00      	nop
   252c0:	0002a9f8 	.word	0x0002a9f8
   252c4:	0002aa18 	.word	0x0002aa18

000252c8 <ocrypto_curve_p256_to32bytes>:
   252c8:	f000 b902 	b.w	254d0 <ocrypto_mod_p256_to_bytes>

000252cc <ocrypto_curve_p256_to64bytes>:
   252cc:	b538      	push	{r3, r4, r5, lr}
   252ce:	4604      	mov	r4, r0
   252d0:	460d      	mov	r5, r1
   252d2:	f000 f8fd 	bl	254d0 <ocrypto_mod_p256_to_bytes>
   252d6:	f105 0120 	add.w	r1, r5, #32
   252da:	f104 0020 	add.w	r0, r4, #32
   252de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   252e2:	f000 b8f5 	b.w	254d0 <ocrypto_mod_p256_to_bytes>
   252e6:	bf00      	nop

000252e8 <ocrypto_curve_p256_scalarmult>:
   252e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   252ec:	4613      	mov	r3, r2
   252ee:	b0b8      	sub	sp, #224	; 0xe0
   252f0:	4a54      	ldr	r2, [pc, #336]	; (25444 <ocrypto_curve_p256_scalarmult+0x15c>)
   252f2:	4689      	mov	r9, r1
   252f4:	4680      	mov	r8, r0
   252f6:	4619      	mov	r1, r3
   252f8:	a810      	add	r0, sp, #64	; 0x40
   252fa:	f7da ff2b 	bl	154 <ocrypto_bigint_sub256>
   252fe:	4952      	ldr	r1, [pc, #328]	; (25448 <ocrypto_curve_p256_scalarmult+0x160>)
   25300:	4602      	mov	r2, r0
   25302:	a810      	add	r0, sp, #64	; 0x40
   25304:	f7da ff46 	bl	194 <ocrypto_bigint_cadd256>
   25308:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   2530a:	494e      	ldr	r1, [pc, #312]	; (25444 <ocrypto_curve_p256_scalarmult+0x15c>)
   2530c:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   25310:	4607      	mov	r7, r0
   25312:	f1c6 0201 	rsb	r2, r6, #1
   25316:	a810      	add	r0, sp, #64	; 0x40
   25318:	f7da ff3c 	bl	194 <ocrypto_bigint_cadd256>
   2531c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2531e:	464a      	mov	r2, r9
   25320:	ea6f 0a03 	mvn.w	sl, r3
   25324:	a928      	add	r1, sp, #160	; 0xa0
   25326:	a818      	add	r0, sp, #96	; 0x60
   25328:	f7ff fe8e 	bl	25048 <p256_zdblu>
   2532c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   25330:	a920      	add	r1, sp, #128	; 0x80
   25332:	f1ca 0201 	rsb	r2, sl, #1
   25336:	4608      	mov	r0, r1
   25338:	f000 f892 	bl	25460 <ocrypto_mod_p256_cneg>
   2533c:	f1c7 0701 	rsb	r7, r7, #1
   25340:	24fe      	movs	r4, #254	; 0xfe
   25342:	466a      	mov	r2, sp
   25344:	a918      	add	r1, sp, #96	; 0x60
   25346:	a828      	add	r0, sp, #160	; 0xa0
   25348:	f7ff ff40 	bl	251cc <p256_zaddu>
   2534c:	1162      	asrs	r2, r4, #5
   2534e:	ab38      	add	r3, sp, #224	; 0xe0
   25350:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   25354:	f004 011f 	and.w	r1, r4, #31
   25358:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   2535c:	40cb      	lsrs	r3, r1
   2535e:	4655      	mov	r5, sl
   25360:	f003 0a01 	and.w	sl, r3, #1
   25364:	ea8a 0505 	eor.w	r5, sl, r5
   25368:	462a      	mov	r2, r5
   2536a:	a928      	add	r1, sp, #160	; 0xa0
   2536c:	a818      	add	r0, sp, #96	; 0x60
   2536e:	f7da ff6d 	bl	24c <ocrypto_bigint_cswap256>
   25372:	462a      	mov	r2, r5
   25374:	a930      	add	r1, sp, #192	; 0xc0
   25376:	a820      	add	r0, sp, #128	; 0x80
   25378:	f7da ff68 	bl	24c <ocrypto_bigint_cswap256>
   2537c:	3c01      	subs	r4, #1
   2537e:	a928      	add	r1, sp, #160	; 0xa0
   25380:	a818      	add	r0, sp, #96	; 0x60
   25382:	f7ff febd 	bl	25100 <p256_zaddc>
   25386:	1c63      	adds	r3, r4, #1
   25388:	d1db      	bne.n	25342 <ocrypto_curve_p256_scalarmult+0x5a>
   2538a:	f1ca 0201 	rsb	r2, sl, #1
   2538e:	a920      	add	r1, sp, #128	; 0x80
   25390:	a808      	add	r0, sp, #32
   25392:	f000 f865 	bl	25460 <ocrypto_mod_p256_cneg>
   25396:	ea86 060a 	eor.w	r6, r6, sl
   2539a:	466a      	mov	r2, sp
   2539c:	a918      	add	r1, sp, #96	; 0x60
   2539e:	a828      	add	r0, sp, #160	; 0xa0
   253a0:	f7ff ff14 	bl	251cc <p256_zaddu>
   253a4:	a928      	add	r1, sp, #160	; 0xa0
   253a6:	4632      	mov	r2, r6
   253a8:	a818      	add	r0, sp, #96	; 0x60
   253aa:	f7da ff4f 	bl	24c <ocrypto_bigint_cswap256>
   253ae:	4632      	mov	r2, r6
   253b0:	a930      	add	r1, sp, #192	; 0xc0
   253b2:	a820      	add	r0, sp, #128	; 0x80
   253b4:	f7da ff4a 	bl	24c <ocrypto_bigint_cswap256>
   253b8:	a908      	add	r1, sp, #32
   253ba:	466a      	mov	r2, sp
   253bc:	4608      	mov	r0, r1
   253be:	f7db f9bb 	bl	738 <ocrypto_mod_p256_mul>
   253c2:	a908      	add	r1, sp, #32
   253c4:	4608      	mov	r0, r1
   253c6:	f000 f89d 	bl	25504 <ocrypto_mod_p256_inv>
   253ca:	a908      	add	r1, sp, #32
   253cc:	f108 0420 	add.w	r4, r8, #32
   253d0:	f109 0220 	add.w	r2, r9, #32
   253d4:	4608      	mov	r0, r1
   253d6:	f7db f9af 	bl	738 <ocrypto_mod_p256_mul>
   253da:	a920      	add	r1, sp, #128	; 0x80
   253dc:	aa08      	add	r2, sp, #32
   253de:	4620      	mov	r0, r4
   253e0:	f7db f9aa 	bl	738 <ocrypto_mod_p256_mul>
   253e4:	aa08      	add	r2, sp, #32
   253e6:	a918      	add	r1, sp, #96	; 0x60
   253e8:	4668      	mov	r0, sp
   253ea:	f7db f9a5 	bl	738 <ocrypto_mod_p256_mul>
   253ee:	4669      	mov	r1, sp
   253f0:	4668      	mov	r0, sp
   253f2:	f7db f9b9 	bl	768 <ocrypto_mod_p256_sqr>
   253f6:	aa18      	add	r2, sp, #96	; 0x60
   253f8:	4669      	mov	r1, sp
   253fa:	a808      	add	r0, sp, #32
   253fc:	f7db f99c 	bl	738 <ocrypto_mod_p256_mul>
   25400:	4621      	mov	r1, r4
   25402:	4668      	mov	r0, sp
   25404:	f7db f9b0 	bl	768 <ocrypto_mod_p256_sqr>
   25408:	aa08      	add	r2, sp, #32
   2540a:	4669      	mov	r1, sp
   2540c:	4610      	mov	r0, r2
   2540e:	f7db f8fb 	bl	608 <ocrypto_mod_p256_sub>
   25412:	4a0e      	ldr	r2, [pc, #56]	; (2544c <ocrypto_curve_p256_scalarmult+0x164>)
   25414:	a908      	add	r1, sp, #32
   25416:	4668      	mov	r0, sp
   25418:	f7db f8f6 	bl	608 <ocrypto_mod_p256_sub>
   2541c:	4620      	mov	r0, r4
   2541e:	2120      	movs	r1, #32
   25420:	f7db f89a 	bl	558 <ocrypto_constant_time_is_zero>
   25424:	a908      	add	r1, sp, #32
   25426:	4243      	negs	r3, r0
   25428:	4602      	mov	r2, r0
   2542a:	4668      	mov	r0, sp
   2542c:	431f      	orrs	r7, r3
   2542e:	f7da ff0d 	bl	24c <ocrypto_bigint_cswap256>
   25432:	4640      	mov	r0, r8
   25434:	4a06      	ldr	r2, [pc, #24]	; (25450 <ocrypto_curve_p256_scalarmult+0x168>)
   25436:	4669      	mov	r1, sp
   25438:	f7db f97e 	bl	738 <ocrypto_mod_p256_mul>
   2543c:	4638      	mov	r0, r7
   2543e:	b038      	add	sp, #224	; 0xe0
   25440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25444:	0002aa38 	.word	0x0002aa38
   25448:	0002a9b8 	.word	0x0002a9b8
   2544c:	0002aa18 	.word	0x0002aa18
   25450:	0002a9d8 	.word	0x0002a9d8

00025454 <ocrypto_curve_p256_scalarmult_base>:
   25454:	460a      	mov	r2, r1
   25456:	4901      	ldr	r1, [pc, #4]	; (2545c <ocrypto_curve_p256_scalarmult_base+0x8>)
   25458:	f7ff bf46 	b.w	252e8 <ocrypto_curve_p256_scalarmult>
   2545c:	0002a978 	.word	0x0002a978

00025460 <ocrypto_mod_p256_cneg>:
   25460:	b570      	push	{r4, r5, r6, lr}
   25462:	b088      	sub	sp, #32
   25464:	4604      	mov	r4, r0
   25466:	460d      	mov	r5, r1
   25468:	4616      	mov	r6, r2
   2546a:	2100      	movs	r1, #0
   2546c:	2220      	movs	r2, #32
   2546e:	4668      	mov	r0, sp
   25470:	f001 fb7a 	bl	26b68 <memset>
   25474:	2300      	movs	r3, #0
   25476:	4629      	mov	r1, r5
   25478:	2220      	movs	r2, #32
   2547a:	4620      	mov	r0, r4
   2547c:	9300      	str	r3, [sp, #0]
   2547e:	f001 fb68 	bl	26b52 <memcpy>
   25482:	462a      	mov	r2, r5
   25484:	4669      	mov	r1, sp
   25486:	4668      	mov	r0, sp
   25488:	f7db f8be 	bl	608 <ocrypto_mod_p256_sub>
   2548c:	4632      	mov	r2, r6
   2548e:	4669      	mov	r1, sp
   25490:	4620      	mov	r0, r4
   25492:	f7da fedb 	bl	24c <ocrypto_bigint_cswap256>
   25496:	b008      	add	sp, #32
   25498:	bd70      	pop	{r4, r5, r6, pc}
   2549a:	bf00      	nop

0002549c <ocrypto_mod_p256_from_bytes>:
   2549c:	680b      	ldr	r3, [r1, #0]
   2549e:	ba1b      	rev	r3, r3
   254a0:	61c3      	str	r3, [r0, #28]
   254a2:	684b      	ldr	r3, [r1, #4]
   254a4:	ba1b      	rev	r3, r3
   254a6:	6183      	str	r3, [r0, #24]
   254a8:	688b      	ldr	r3, [r1, #8]
   254aa:	ba1b      	rev	r3, r3
   254ac:	6143      	str	r3, [r0, #20]
   254ae:	68cb      	ldr	r3, [r1, #12]
   254b0:	ba1b      	rev	r3, r3
   254b2:	6103      	str	r3, [r0, #16]
   254b4:	690b      	ldr	r3, [r1, #16]
   254b6:	ba1b      	rev	r3, r3
   254b8:	60c3      	str	r3, [r0, #12]
   254ba:	694b      	ldr	r3, [r1, #20]
   254bc:	ba1b      	rev	r3, r3
   254be:	6083      	str	r3, [r0, #8]
   254c0:	698b      	ldr	r3, [r1, #24]
   254c2:	ba1b      	rev	r3, r3
   254c4:	6043      	str	r3, [r0, #4]
   254c6:	69cb      	ldr	r3, [r1, #28]
   254c8:	ba1b      	rev	r3, r3
   254ca:	6003      	str	r3, [r0, #0]
   254cc:	4770      	bx	lr
   254ce:	bf00      	nop

000254d0 <ocrypto_mod_p256_to_bytes>:
   254d0:	69cb      	ldr	r3, [r1, #28]
   254d2:	ba1b      	rev	r3, r3
   254d4:	6003      	str	r3, [r0, #0]
   254d6:	698b      	ldr	r3, [r1, #24]
   254d8:	ba1b      	rev	r3, r3
   254da:	6043      	str	r3, [r0, #4]
   254dc:	694b      	ldr	r3, [r1, #20]
   254de:	ba1b      	rev	r3, r3
   254e0:	6083      	str	r3, [r0, #8]
   254e2:	690b      	ldr	r3, [r1, #16]
   254e4:	ba1b      	rev	r3, r3
   254e6:	60c3      	str	r3, [r0, #12]
   254e8:	68cb      	ldr	r3, [r1, #12]
   254ea:	ba1b      	rev	r3, r3
   254ec:	6103      	str	r3, [r0, #16]
   254ee:	688b      	ldr	r3, [r1, #8]
   254f0:	ba1b      	rev	r3, r3
   254f2:	6143      	str	r3, [r0, #20]
   254f4:	684b      	ldr	r3, [r1, #4]
   254f6:	ba1b      	rev	r3, r3
   254f8:	6183      	str	r3, [r0, #24]
   254fa:	680b      	ldr	r3, [r1, #0]
   254fc:	ba1b      	rev	r3, r3
   254fe:	61c3      	str	r3, [r0, #28]
   25500:	4770      	bx	lr
   25502:	bf00      	nop

00025504 <ocrypto_mod_p256_inv>:
   25504:	b570      	push	{r4, r5, r6, lr}
   25506:	b098      	sub	sp, #96	; 0x60
   25508:	460d      	mov	r5, r1
   2550a:	4606      	mov	r6, r0
   2550c:	a810      	add	r0, sp, #64	; 0x40
   2550e:	f7db f92b 	bl	768 <ocrypto_mod_p256_sqr>
   25512:	462a      	mov	r2, r5
   25514:	a910      	add	r1, sp, #64	; 0x40
   25516:	4668      	mov	r0, sp
   25518:	f7db f90e 	bl	738 <ocrypto_mod_p256_mul>
   2551c:	4669      	mov	r1, sp
   2551e:	a810      	add	r0, sp, #64	; 0x40
   25520:	f7db f922 	bl	768 <ocrypto_mod_p256_sqr>
   25524:	a910      	add	r1, sp, #64	; 0x40
   25526:	4608      	mov	r0, r1
   25528:	f7db f91e 	bl	768 <ocrypto_mod_p256_sqr>
   2552c:	466a      	mov	r2, sp
   2552e:	a910      	add	r1, sp, #64	; 0x40
   25530:	a808      	add	r0, sp, #32
   25532:	f7db f901 	bl	738 <ocrypto_mod_p256_mul>
   25536:	a908      	add	r1, sp, #32
   25538:	a810      	add	r0, sp, #64	; 0x40
   2553a:	f7db f915 	bl	768 <ocrypto_mod_p256_sqr>
   2553e:	a910      	add	r1, sp, #64	; 0x40
   25540:	4608      	mov	r0, r1
   25542:	f7db f911 	bl	768 <ocrypto_mod_p256_sqr>
   25546:	a910      	add	r1, sp, #64	; 0x40
   25548:	4608      	mov	r0, r1
   2554a:	f7db f90d 	bl	768 <ocrypto_mod_p256_sqr>
   2554e:	a910      	add	r1, sp, #64	; 0x40
   25550:	4608      	mov	r0, r1
   25552:	f7db f909 	bl	768 <ocrypto_mod_p256_sqr>
   25556:	a910      	add	r1, sp, #64	; 0x40
   25558:	aa08      	add	r2, sp, #32
   2555a:	4608      	mov	r0, r1
   2555c:	f7db f8ec 	bl	738 <ocrypto_mod_p256_mul>
   25560:	a910      	add	r1, sp, #64	; 0x40
   25562:	4608      	mov	r0, r1
   25564:	f7db f900 	bl	768 <ocrypto_mod_p256_sqr>
   25568:	a910      	add	r1, sp, #64	; 0x40
   2556a:	4608      	mov	r0, r1
   2556c:	f7db f8fc 	bl	768 <ocrypto_mod_p256_sqr>
   25570:	a910      	add	r1, sp, #64	; 0x40
   25572:	466a      	mov	r2, sp
   25574:	a808      	add	r0, sp, #32
   25576:	f7db f8df 	bl	738 <ocrypto_mod_p256_mul>
   2557a:	2405      	movs	r4, #5
   2557c:	a908      	add	r1, sp, #32
   2557e:	a810      	add	r0, sp, #64	; 0x40
   25580:	f7db f8f2 	bl	768 <ocrypto_mod_p256_sqr>
   25584:	a910      	add	r1, sp, #64	; 0x40
   25586:	4608      	mov	r0, r1
   25588:	f7db f8ee 	bl	768 <ocrypto_mod_p256_sqr>
   2558c:	3c01      	subs	r4, #1
   2558e:	a910      	add	r1, sp, #64	; 0x40
   25590:	d1f5      	bne.n	2557e <ocrypto_mod_p256_inv+0x7a>
   25592:	aa08      	add	r2, sp, #32
   25594:	4608      	mov	r0, r1
   25596:	f7db f8cf 	bl	738 <ocrypto_mod_p256_mul>
   2559a:	2405      	movs	r4, #5
   2559c:	a910      	add	r1, sp, #64	; 0x40
   2559e:	4608      	mov	r0, r1
   255a0:	f7db f8e2 	bl	768 <ocrypto_mod_p256_sqr>
   255a4:	a910      	add	r1, sp, #64	; 0x40
   255a6:	4608      	mov	r0, r1
   255a8:	f7db f8de 	bl	768 <ocrypto_mod_p256_sqr>
   255ac:	3c01      	subs	r4, #1
   255ae:	d1f5      	bne.n	2559c <ocrypto_mod_p256_inv+0x98>
   255b0:	a910      	add	r1, sp, #64	; 0x40
   255b2:	aa08      	add	r2, sp, #32
   255b4:	4608      	mov	r0, r1
   255b6:	f7db f8bf 	bl	738 <ocrypto_mod_p256_mul>
   255ba:	a910      	add	r1, sp, #64	; 0x40
   255bc:	a808      	add	r0, sp, #32
   255be:	f7db f8d3 	bl	768 <ocrypto_mod_p256_sqr>
   255c2:	a908      	add	r1, sp, #32
   255c4:	4608      	mov	r0, r1
   255c6:	f7db f8cf 	bl	768 <ocrypto_mod_p256_sqr>
   255ca:	a908      	add	r1, sp, #32
   255cc:	466a      	mov	r2, sp
   255ce:	4668      	mov	r0, sp
   255d0:	f7db f8b2 	bl	738 <ocrypto_mod_p256_mul>
   255d4:	2410      	movs	r4, #16
   255d6:	4669      	mov	r1, sp
   255d8:	a810      	add	r0, sp, #64	; 0x40
   255da:	f7db f8c5 	bl	768 <ocrypto_mod_p256_sqr>
   255de:	a910      	add	r1, sp, #64	; 0x40
   255e0:	4608      	mov	r0, r1
   255e2:	f7db f8c1 	bl	768 <ocrypto_mod_p256_sqr>
   255e6:	3c01      	subs	r4, #1
   255e8:	a910      	add	r1, sp, #64	; 0x40
   255ea:	d1f5      	bne.n	255d8 <ocrypto_mod_p256_inv+0xd4>
   255ec:	462a      	mov	r2, r5
   255ee:	4608      	mov	r0, r1
   255f0:	f7db f8a2 	bl	738 <ocrypto_mod_p256_mul>
   255f4:	2440      	movs	r4, #64	; 0x40
   255f6:	a910      	add	r1, sp, #64	; 0x40
   255f8:	4608      	mov	r0, r1
   255fa:	f7db f8b5 	bl	768 <ocrypto_mod_p256_sqr>
   255fe:	a910      	add	r1, sp, #64	; 0x40
   25600:	4608      	mov	r0, r1
   25602:	f7db f8b1 	bl	768 <ocrypto_mod_p256_sqr>
   25606:	3c01      	subs	r4, #1
   25608:	d1f5      	bne.n	255f6 <ocrypto_mod_p256_inv+0xf2>
   2560a:	a910      	add	r1, sp, #64	; 0x40
   2560c:	466a      	mov	r2, sp
   2560e:	4608      	mov	r0, r1
   25610:	f7db f892 	bl	738 <ocrypto_mod_p256_mul>
   25614:	2410      	movs	r4, #16
   25616:	a910      	add	r1, sp, #64	; 0x40
   25618:	4608      	mov	r0, r1
   2561a:	f7db f8a5 	bl	768 <ocrypto_mod_p256_sqr>
   2561e:	a910      	add	r1, sp, #64	; 0x40
   25620:	4608      	mov	r0, r1
   25622:	f7db f8a1 	bl	768 <ocrypto_mod_p256_sqr>
   25626:	3c01      	subs	r4, #1
   25628:	d1f5      	bne.n	25616 <ocrypto_mod_p256_inv+0x112>
   2562a:	a910      	add	r1, sp, #64	; 0x40
   2562c:	466a      	mov	r2, sp
   2562e:	4608      	mov	r0, r1
   25630:	f7db f882 	bl	738 <ocrypto_mod_p256_mul>
   25634:	2410      	movs	r4, #16
   25636:	a910      	add	r1, sp, #64	; 0x40
   25638:	4608      	mov	r0, r1
   2563a:	f7db f895 	bl	768 <ocrypto_mod_p256_sqr>
   2563e:	a910      	add	r1, sp, #64	; 0x40
   25640:	4608      	mov	r0, r1
   25642:	f7db f891 	bl	768 <ocrypto_mod_p256_sqr>
   25646:	3c01      	subs	r4, #1
   25648:	d1f5      	bne.n	25636 <ocrypto_mod_p256_inv+0x132>
   2564a:	a910      	add	r1, sp, #64	; 0x40
   2564c:	aa08      	add	r2, sp, #32
   2564e:	4608      	mov	r0, r1
   25650:	f7db f872 	bl	738 <ocrypto_mod_p256_mul>
   25654:	462a      	mov	r2, r5
   25656:	a910      	add	r1, sp, #64	; 0x40
   25658:	4630      	mov	r0, r6
   2565a:	f7db f86d 	bl	738 <ocrypto_mod_p256_mul>
   2565e:	b018      	add	sp, #96	; 0x60
   25660:	bd70      	pop	{r4, r5, r6, pc}
   25662:	bf00      	nop

00025664 <notify_process>:
{
   25664:	4608      	mov	r0, r1
   25666:	b508      	push	{r3, lr}
	if (kbds->notify_cb) {
   25668:	6f43      	ldr	r3, [r0, #116]	; 0x74
	keystates = bdata[0];
   2566a:	6811      	ldr	r1, [r2, #0]
	kbds->keystates = keystates;
   2566c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	if (kbds->notify_cb) {
   25670:	b10b      	cbz	r3, 25676 <notify_process+0x12>
		kbds->notify_cb(kbds, keystates);
   25672:	3804      	subs	r0, #4
   25674:	4798      	blx	r3
}
   25676:	2001      	movs	r0, #1
   25678:	bd08      	pop	{r3, pc}

0002567a <bt_kbds_conn>:


struct bt_conn *bt_kbds_conn(const struct bt_kbds_client *kbds)
{
	return kbds->conn;
}
   2567a:	6800      	ldr	r0, [r0, #0]
   2567c:	4770      	bx	lr

0002567e <bt_kbds_start_per_read_keystates>:


int bt_kbds_start_per_read_keystates(struct bt_kbds_client *kbds,
					int32_t interval,
					bt_kbds_notify_cb func)
{
   2567e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!kbds || !func || !interval) {
   25680:	4606      	mov	r6, r0
   25682:	b338      	cbz	r0, 256d4 <bt_kbds_start_per_read_keystates+0x56>
   25684:	b332      	cbz	r2, 256d4 <bt_kbds_start_per_read_keystates+0x56>
   25686:	b329      	cbz	r1, 256d4 <bt_kbds_start_per_read_keystates+0x56>
		return -EINVAL;
	}

	if (bt_kbds_notify_supported(kbds)) {
   25688:	f890 4089 	ldrb.w	r4, [r0, #137]	; 0x89
   2568c:	bb2c      	cbnz	r4, 256da <bt_kbds_start_per_read_keystates+0x5c>
		return -ENOTSUP;
	}

	kbds->notify_cb = func;
   2568e:	6782      	str	r2, [r0, #120]	; 0x78
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25690:	f100 0370 	add.w	r3, r0, #112	; 0x70
   25694:	f3bf 8f5b 	dmb	ish
   25698:	e853 2f00 	ldrex	r2, [r3]
   2569c:	e843 1000 	strex	r0, r1, [r3]
   256a0:	2800      	cmp	r0, #0
   256a2:	d1f9      	bne.n	25698 <bt_kbds_start_per_read_keystates+0x1a>
   256a4:	f3bf 8f5b 	dmb	ish
	atomic_set(&kbds->periodic_read.interval, interval);
	k_work_schedule(&kbds->periodic_read.read_work, K_MSEC(interval));
   256a8:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
   256ac:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   256b0:	f240 30e7 	movw	r0, #999	; 0x3e7
   256b4:	4621      	mov	r1, r4
   256b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   256ba:	2300      	movs	r3, #0
   256bc:	fbc5 0107 	smlal	r0, r1, r5, r7
   256c0:	f7da fd0e 	bl	e0 <__aeabi_uldivmod>
   256c4:	4602      	mov	r2, r0
   256c6:	460b      	mov	r3, r1
   256c8:	f106 0030 	add.w	r0, r6, #48	; 0x30
   256cc:	f7fd fcdc 	bl	23088 <k_work_schedule>

	return 0;
   256d0:	4620      	mov	r0, r4
}
   256d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   256d4:	f06f 0015 	mvn.w	r0, #21
   256d8:	e7fb      	b.n	256d2 <bt_kbds_start_per_read_keystates+0x54>
		return -ENOTSUP;
   256da:	f06f 0085 	mvn.w	r0, #133	; 0x85
   256de:	e7f8      	b.n	256d2 <bt_kbds_start_per_read_keystates+0x54>

000256e0 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   256e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   256e2:	2364      	movs	r3, #100	; 0x64
{
   256e4:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   256e6:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   256e8:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   256ea:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   256ee:	b111      	cbz	r1, 256f6 <u8_to_dec+0x16>
   256f0:	3d01      	subs	r5, #1
   256f2:	d101      	bne.n	256f8 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   256f4:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   256f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   256f8:	429a      	cmp	r2, r3
		digit = value / divisor;
   256fa:	fbb2 f7f3 	udiv	r7, r2, r3
   256fe:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   25700:	d202      	bcs.n	25708 <u8_to_dec+0x28>
   25702:	2b01      	cmp	r3, #1
   25704:	d000      	beq.n	25708 <u8_to_dec+0x28>
   25706:	b130      	cbz	r0, 25716 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   25708:	3630      	adds	r6, #48	; 0x30
			buflen--;
   2570a:	3901      	subs	r1, #1
			num_digits++;
   2570c:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   2570e:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   25712:	b2c9      	uxtb	r1, r1
			num_digits++;
   25714:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   25716:	fb03 2217 	mls	r2, r3, r7, r2
   2571a:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2571c:	fbb3 f3fc 	udiv	r3, r3, ip
   25720:	e7e5      	b.n	256ee <u8_to_dec+0xe>

00025722 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   25722:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   25726:	b2db      	uxtb	r3, r3
   25728:	2b09      	cmp	r3, #9
   2572a:	d802      	bhi.n	25732 <char2hex+0x10>
		*x = c - '0';
   2572c:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2572e:	2000      	movs	r0, #0
   25730:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   25732:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   25736:	2b05      	cmp	r3, #5
   25738:	d802      	bhi.n	25740 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2573a:	3857      	subs	r0, #87	; 0x57
   2573c:	7008      	strb	r0, [r1, #0]
   2573e:	e7f6      	b.n	2572e <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   25740:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   25744:	2b05      	cmp	r3, #5
   25746:	d801      	bhi.n	2574c <char2hex+0x2a>
		*x = c - 'A' + 10;
   25748:	3837      	subs	r0, #55	; 0x37
   2574a:	e7f7      	b.n	2573c <char2hex+0x1a>
		return -EINVAL;
   2574c:	f06f 0015 	mvn.w	r0, #21
}
   25750:	4770      	bx	lr

00025752 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   25752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25754:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   25756:	f001 0001 	and.w	r0, r1, #1
   2575a:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   2575e:	429d      	cmp	r5, r3
   25760:	ea4f 0651 	mov.w	r6, r1, lsr #1
   25764:	d903      	bls.n	2576e <hex2bin+0x1c>
		return 0;
   25766:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   25768:	4628      	mov	r0, r5
   2576a:	b003      	add	sp, #12
   2576c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2576e:	b158      	cbz	r0, 25788 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   25770:	7820      	ldrb	r0, [r4, #0]
   25772:	f10d 0107 	add.w	r1, sp, #7
   25776:	f7ff ffd4 	bl	25722 <char2hex>
   2577a:	2800      	cmp	r0, #0
   2577c:	dbf3      	blt.n	25766 <hex2bin+0x14>
		buf[0] = dec;
   2577e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25782:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   25786:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   25788:	3401      	adds	r4, #1
   2578a:	4416      	add	r6, r2
   2578c:	42b2      	cmp	r2, r6
   2578e:	d0eb      	beq.n	25768 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   25790:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   25794:	f10d 0107 	add.w	r1, sp, #7
   25798:	f7ff ffc3 	bl	25722 <char2hex>
   2579c:	2800      	cmp	r0, #0
   2579e:	dbe2      	blt.n	25766 <hex2bin+0x14>
		buf[i] = dec << 4;
   257a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   257a4:	011b      	lsls	r3, r3, #4
   257a6:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   257a8:	f814 0b02 	ldrb.w	r0, [r4], #2
   257ac:	f7ff ffb9 	bl	25722 <char2hex>
   257b0:	2800      	cmp	r0, #0
   257b2:	dbd8      	blt.n	25766 <hex2bin+0x14>
		buf[i] += dec;
   257b4:	7813      	ldrb	r3, [r2, #0]
   257b6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   257ba:	440b      	add	r3, r1
   257bc:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   257c0:	e7e4      	b.n	2578c <hex2bin+0x3a>

000257c2 <sys_notify_validate>:
	if (notify == NULL) {
   257c2:	4603      	mov	r3, r0
   257c4:	b140      	cbz	r0, 257d8 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   257c6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   257c8:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   257cc:	2a02      	cmp	r2, #2
   257ce:	d006      	beq.n	257de <sys_notify_validate+0x1c>
   257d0:	2a03      	cmp	r2, #3
   257d2:	d004      	beq.n	257de <sys_notify_validate+0x1c>
   257d4:	2a01      	cmp	r2, #1
   257d6:	d005      	beq.n	257e4 <sys_notify_validate+0x22>
		return -EINVAL;
   257d8:	f06f 0015 	mvn.w	r0, #21
}
   257dc:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   257de:	681a      	ldr	r2, [r3, #0]
   257e0:	2a00      	cmp	r2, #0
   257e2:	d0f9      	beq.n	257d8 <sys_notify_validate+0x16>
		notify->result = 0;
   257e4:	2000      	movs	r0, #0
   257e6:	6098      	str	r0, [r3, #8]
   257e8:	4770      	bx	lr

000257ea <arch_printk_char_out>:
}
   257ea:	2000      	movs	r0, #0
   257ec:	4770      	bx	lr

000257ee <str_out>:
{
   257ee:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   257f0:	688a      	ldr	r2, [r1, #8]
   257f2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   257f4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   257f6:	b114      	cbz	r4, 257fe <str_out+0x10>
   257f8:	684b      	ldr	r3, [r1, #4]
   257fa:	4293      	cmp	r3, r2
   257fc:	dc01      	bgt.n	25802 <str_out+0x14>
		ctx->count++;
   257fe:	608d      	str	r5, [r1, #8]
}
   25800:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   25802:	3b01      	subs	r3, #1
   25804:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   25806:	bf08      	it	eq
   25808:	2200      	moveq	r2, #0
   2580a:	608d      	str	r5, [r1, #8]
   2580c:	bf0c      	ite	eq
   2580e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   25810:	54a0      	strbne	r0, [r4, r2]
   25812:	e7f5      	b.n	25800 <str_out+0x12>

00025814 <printk>:
{
   25814:	b40f      	push	{r0, r1, r2, r3}
   25816:	b507      	push	{r0, r1, r2, lr}
   25818:	a904      	add	r1, sp, #16
   2581a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2581e:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   25820:	f7ec f914 	bl	11a4c <vprintk>
}
   25824:	b003      	add	sp, #12
   25826:	f85d eb04 	ldr.w	lr, [sp], #4
   2582a:	b004      	add	sp, #16
   2582c:	4770      	bx	lr

0002582e <snprintk>:
{
   2582e:	b40c      	push	{r2, r3}
   25830:	b507      	push	{r0, r1, r2, lr}
   25832:	ab04      	add	r3, sp, #16
   25834:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   25838:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2583a:	f7ec f915 	bl	11a68 <vsnprintk>
}
   2583e:	b003      	add	sp, #12
   25840:	f85d eb04 	ldr.w	lr, [sp], #4
   25844:	b002      	add	sp, #8
   25846:	4770      	bx	lr

00025848 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25848:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2584a:	f013 0307 	ands.w	r3, r3, #7
   2584e:	d105      	bne.n	2585c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   25850:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   25852:	2b00      	cmp	r3, #0
   25854:	bf0c      	ite	eq
   25856:	2000      	moveq	r0, #0
   25858:	2003      	movne	r0, #3
   2585a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2585c:	2b02      	cmp	r3, #2
   2585e:	d105      	bne.n	2586c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   25860:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   25862:	2b00      	cmp	r3, #0
   25864:	bf14      	ite	ne
   25866:	2000      	movne	r0, #0
   25868:	2004      	moveq	r0, #4
   2586a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2586c:	2b01      	cmp	r3, #1
   2586e:	d105      	bne.n	2587c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   25870:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   25872:	2b00      	cmp	r3, #0
   25874:	bf0c      	ite	eq
   25876:	2000      	moveq	r0, #0
   25878:	2005      	movne	r0, #5
   2587a:	4770      	bx	lr
	int evt = EVT_NOP;
   2587c:	2000      	movs	r0, #0
}
   2587e:	4770      	bx	lr

00025880 <notify_one>:
{
   25880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25884:	460d      	mov	r5, r1
   25886:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25888:	4619      	mov	r1, r3
   2588a:	1d28      	adds	r0, r5, #4
{
   2588c:	4690      	mov	r8, r2
   2588e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25890:	f7ec f8a4 	bl	119dc <sys_notify_finalize>
	if (cb) {
   25894:	4604      	mov	r4, r0
   25896:	b138      	cbz	r0, 258a8 <notify_one+0x28>
		cb(mgr, cli, state, res);
   25898:	4633      	mov	r3, r6
   2589a:	4642      	mov	r2, r8
   2589c:	4629      	mov	r1, r5
   2589e:	4638      	mov	r0, r7
   258a0:	46a4      	mov	ip, r4
}
   258a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   258a6:	4760      	bx	ip
}
   258a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000258ac <validate_args>:
{
   258ac:	b510      	push	{r4, lr}
   258ae:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   258b0:	b140      	cbz	r0, 258c4 <validate_args+0x18>
   258b2:	b139      	cbz	r1, 258c4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   258b4:	1d08      	adds	r0, r1, #4
   258b6:	f7ff ff84 	bl	257c2 <sys_notify_validate>
	if ((rv == 0)
   258ba:	b928      	cbnz	r0, 258c8 <validate_args+0x1c>
	    && ((cli->notify.flags
   258bc:	68a3      	ldr	r3, [r4, #8]
   258be:	f033 0303 	bics.w	r3, r3, #3
   258c2:	d001      	beq.n	258c8 <validate_args+0x1c>
		rv = -EINVAL;
   258c4:	f06f 0015 	mvn.w	r0, #21
}
   258c8:	bd10      	pop	{r4, pc}

000258ca <onoff_manager_init>:
{
   258ca:	b538      	push	{r3, r4, r5, lr}
   258cc:	460c      	mov	r4, r1
	if ((mgr == NULL)
   258ce:	4605      	mov	r5, r0
   258d0:	b158      	cbz	r0, 258ea <onoff_manager_init+0x20>
	    || (transitions == NULL)
   258d2:	b151      	cbz	r1, 258ea <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   258d4:	680b      	ldr	r3, [r1, #0]
   258d6:	b143      	cbz	r3, 258ea <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   258d8:	684b      	ldr	r3, [r1, #4]
   258da:	b133      	cbz	r3, 258ea <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   258dc:	2220      	movs	r2, #32
   258de:	2100      	movs	r1, #0
   258e0:	f001 f942 	bl	26b68 <memset>
   258e4:	612c      	str	r4, [r5, #16]
	return 0;
   258e6:	2000      	movs	r0, #0
}
   258e8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   258ea:	f06f 0015 	mvn.w	r0, #21
   258ee:	e7fb      	b.n	258e8 <onoff_manager_init+0x1e>

000258f0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   258f0:	4604      	mov	r4, r0
   258f2:	b508      	push	{r3, lr}
   258f4:	4608      	mov	r0, r1
   258f6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   258f8:	461a      	mov	r2, r3
   258fa:	47a0      	blx	r4
	return z_impl_z_current_get();
   258fc:	f7fe fbd4 	bl	240a8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   25900:	f7ef f928 	bl	14b54 <z_impl_k_thread_abort>

00025904 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   25904:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   25908:	8840      	ldrh	r0, [r0, #2]
}
   2590a:	0840      	lsrs	r0, r0, #1
   2590c:	4770      	bx	lr

0002590e <free_list_add>:
{
   2590e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25910:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   25912:	f7ff fff7 	bl	25904 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   25916:	fab0 f080 	clz	r0, r0
   2591a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2591e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   25922:	00ca      	lsls	r2, r1, #3
   25924:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   25928:	1d17      	adds	r7, r2, #4
{
   2592a:	460c      	mov	r4, r1
   2592c:	3206      	adds	r2, #6
   2592e:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   25930:	b956      	cbnz	r6, 25948 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   25932:	2101      	movs	r1, #1
   25934:	fa01 f000 	lsl.w	r0, r1, r0
   25938:	68d9      	ldr	r1, [r3, #12]
   2593a:	4301      	orrs	r1, r0
   2593c:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2593e:	f8cc 4010 	str.w	r4, [ip, #16]
   25942:	53dd      	strh	r5, [r3, r7]
   25944:	529d      	strh	r5, [r3, r2]
}
   25946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   25948:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2594a:	3104      	adds	r1, #4
   2594c:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2594e:	53d8      	strh	r0, [r3, r7]
   25950:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   25954:	529e      	strh	r6, [r3, r2]
   25956:	80c5      	strh	r5, [r0, #6]
   25958:	525d      	strh	r5, [r3, r1]
   2595a:	e7f4      	b.n	25946 <free_list_add+0x38>

0002595c <free_list_remove_bidx>:
{
   2595c:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2595e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   25962:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   25964:	4299      	cmp	r1, r3
   25966:	f102 0104 	add.w	r1, r2, #4
   2596a:	d10a      	bne.n	25982 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2596c:	2301      	movs	r3, #1
   2596e:	fa03 f202 	lsl.w	r2, r3, r2
   25972:	68c3      	ldr	r3, [r0, #12]
   25974:	ea23 0302 	bic.w	r3, r3, r2
   25978:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2597a:	2300      	movs	r3, #0
   2597c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   25980:	bd10      	pop	{r4, pc}
   25982:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   25984:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   25988:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2598c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   25990:	80cb      	strh	r3, [r1, #6]
   25992:	8082      	strh	r2, [r0, #4]
}
   25994:	e7f4      	b.n	25980 <free_list_remove_bidx+0x24>

00025996 <free_list_remove>:
{
   25996:	b508      	push	{r3, lr}
   25998:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2599a:	f7ff ffb3 	bl	25904 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2599e:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   259a2:	f1c2 021f 	rsb	r2, r2, #31
   259a6:	4618      	mov	r0, r3
}
   259a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   259ac:	f7ff bfd6 	b.w	2595c <free_list_remove_bidx>

000259b0 <alloc_chunk>:
{
   259b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   259b4:	fab1 f581 	clz	r5, r1
   259b8:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   259bc:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   259c0:	4603      	mov	r3, r0
	if (b->next) {
   259c2:	693a      	ldr	r2, [r7, #16]
{
   259c4:	460e      	mov	r6, r1
	if (b->next) {
   259c6:	b1c2      	cbz	r2, 259fa <alloc_chunk+0x4a>
   259c8:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   259cc:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   259ce:	4618      	mov	r0, r3
   259d0:	4621      	mov	r1, r4
   259d2:	f7ff ff97 	bl	25904 <chunk_size>
   259d6:	42b0      	cmp	r0, r6
   259d8:	d306      	bcc.n	259e8 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   259da:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   259dc:	4618      	mov	r0, r3
   259de:	f7ff ffbd 	bl	2595c <free_list_remove_bidx>
}
   259e2:	4620      	mov	r0, r4
   259e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   259e8:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   259ec:	f1b8 0801 	subs.w	r8, r8, #1
   259f0:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   259f2:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   259f4:	d001      	beq.n	259fa <alloc_chunk+0x4a>
   259f6:	4282      	cmp	r2, r0
   259f8:	d1e8      	bne.n	259cc <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   259fa:	f1c5 0220 	rsb	r2, r5, #32
   259fe:	f04f 34ff 	mov.w	r4, #4294967295
   25a02:	4094      	lsls	r4, r2
   25a04:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   25a06:	4014      	ands	r4, r2
   25a08:	d0eb      	beq.n	259e2 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   25a0a:	fa94 f2a4 	rbit	r2, r4
   25a0e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   25a12:	1d11      	adds	r1, r2, #4
   25a14:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   25a18:	4621      	mov	r1, r4
   25a1a:	e7df      	b.n	259dc <alloc_chunk+0x2c>

00025a1c <merge_chunks>:
{
   25a1c:	b538      	push	{r3, r4, r5, lr}
   25a1e:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25a20:	f7ff ff70 	bl	25904 <chunk_size>
{
   25a24:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25a26:	4604      	mov	r4, r0
   25a28:	4611      	mov	r1, r2
   25a2a:	4618      	mov	r0, r3
   25a2c:	f7ff ff6a 	bl	25904 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   25a30:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   25a34:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25a36:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   25a38:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   25a3a:	4618      	mov	r0, r3
   25a3c:	f7ff ff62 	bl	25904 <chunk_size>
	void *cmem = &buf[c];
   25a40:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25a42:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   25a46:	bd38      	pop	{r3, r4, r5, pc}

00025a48 <split_chunks>:
{
   25a48:	b538      	push	{r3, r4, r5, lr}
   25a4a:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   25a4c:	f7ff ff5a 	bl	25904 <chunk_size>
{
   25a50:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   25a52:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   25a54:	1a51      	subs	r1, r2, r1
   25a56:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   25a5a:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25a5c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   25a5e:	8060      	strh	r0, [r4, #2]
   25a60:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25a64:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   25a66:	8044      	strh	r4, [r0, #2]
   25a68:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   25a6c:	4618      	mov	r0, r3
   25a6e:	4611      	mov	r1, r2
   25a70:	f7ff ff48 	bl	25904 <chunk_size>
	void *cmem = &buf[c];
   25a74:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25a76:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   25a7a:	bd38      	pop	{r3, r4, r5, pc}

00025a7c <free_chunk>:
{
   25a7c:	b538      	push	{r3, r4, r5, lr}
   25a7e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   25a80:	f7ff ff40 	bl	25904 <chunk_size>
   25a84:	460c      	mov	r4, r1
   25a86:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   25a88:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25a8c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   25a8e:	07da      	lsls	r2, r3, #31
   25a90:	d40a      	bmi.n	25aa8 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   25a92:	4628      	mov	r0, r5
   25a94:	f7ff ff7f 	bl	25996 <free_list_remove>
	return c + chunk_size(h, c);
   25a98:	4621      	mov	r1, r4
   25a9a:	4628      	mov	r0, r5
   25a9c:	f7ff ff32 	bl	25904 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   25aa0:	1822      	adds	r2, r4, r0
   25aa2:	4628      	mov	r0, r5
   25aa4:	f7ff ffba 	bl	25a1c <merge_chunks>
		return ((uint16_t *)cmem)[f];
   25aa8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25aac:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   25aae:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25ab2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   25ab4:	07db      	lsls	r3, r3, #31
   25ab6:	d40c      	bmi.n	25ad2 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   25ab8:	4628      	mov	r0, r5
   25aba:	f7ff ff6c 	bl	25996 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   25abe:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   25ac2:	4622      	mov	r2, r4
   25ac4:	1a61      	subs	r1, r4, r1
   25ac6:	4628      	mov	r0, r5
   25ac8:	f7ff ffa8 	bl	25a1c <merge_chunks>
   25acc:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25ad0:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   25ad2:	4621      	mov	r1, r4
   25ad4:	4628      	mov	r0, r5
}
   25ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   25ada:	f7ff bf18 	b.w	2590e <free_list_add>

00025ade <sys_heap_alloc>:
{
   25ade:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   25ae0:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   25ae2:	b909      	cbnz	r1, 25ae8 <sys_heap_alloc+0xa>
		return NULL;
   25ae4:	2000      	movs	r0, #0
}
   25ae6:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   25ae8:	68ab      	ldr	r3, [r5, #8]
   25aea:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   25aee:	d9f9      	bls.n	25ae4 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25af0:	310b      	adds	r1, #11
   25af2:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   25af4:	4621      	mov	r1, r4
   25af6:	4628      	mov	r0, r5
   25af8:	f7ff ff5a 	bl	259b0 <alloc_chunk>
	if (c == 0U) {
   25afc:	4606      	mov	r6, r0
   25afe:	2800      	cmp	r0, #0
   25b00:	d0f0      	beq.n	25ae4 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   25b02:	4601      	mov	r1, r0
   25b04:	4628      	mov	r0, r5
   25b06:	f7ff fefd 	bl	25904 <chunk_size>
   25b0a:	42a0      	cmp	r0, r4
   25b0c:	d907      	bls.n	25b1e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   25b0e:	1932      	adds	r2, r6, r4
   25b10:	4628      	mov	r0, r5
   25b12:	f7ff ff99 	bl	25a48 <split_chunks>
		free_list_add(h, c + chunk_sz);
   25b16:	4611      	mov	r1, r2
   25b18:	4628      	mov	r0, r5
   25b1a:	f7ff fef8 	bl	2590e <free_list_add>
	void *cmem = &buf[c];
   25b1e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   25b22:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25b24:	8853      	ldrh	r3, [r2, #2]
   25b26:	f043 0301 	orr.w	r3, r3, #1
   25b2a:	8053      	strh	r3, [r2, #2]
   25b2c:	3004      	adds	r0, #4
	return mem;
   25b2e:	e7da      	b.n	25ae6 <sys_heap_alloc+0x8>

00025b30 <encode_uint>:
{
   25b30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b34:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   25b36:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   25b38:	2b6f      	cmp	r3, #111	; 0x6f
{
   25b3a:	4680      	mov	r8, r0
   25b3c:	460f      	mov	r7, r1
   25b3e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   25b40:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   25b44:	d029      	beq.n	25b9a <encode_uint+0x6a>
   25b46:	d824      	bhi.n	25b92 <encode_uint+0x62>
		return 16;
   25b48:	2b58      	cmp	r3, #88	; 0x58
   25b4a:	bf14      	ite	ne
   25b4c:	260a      	movne	r6, #10
   25b4e:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   25b50:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   25b54:	4632      	mov	r2, r6
   25b56:	2300      	movs	r3, #0
   25b58:	4640      	mov	r0, r8
   25b5a:	4639      	mov	r1, r7
   25b5c:	f7da fac0 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25b60:	2a09      	cmp	r2, #9
   25b62:	b2d4      	uxtb	r4, r2
   25b64:	d81e      	bhi.n	25ba4 <encode_uint+0x74>
   25b66:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   25b68:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25b6a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   25b6c:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25b70:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   25b74:	d301      	bcc.n	25b7a <encode_uint+0x4a>
   25b76:	45d1      	cmp	r9, sl
   25b78:	d811      	bhi.n	25b9e <encode_uint+0x6e>
	if (conv->flag_hash) {
   25b7a:	782b      	ldrb	r3, [r5, #0]
   25b7c:	069b      	lsls	r3, r3, #26
   25b7e:	d505      	bpl.n	25b8c <encode_uint+0x5c>
		if (radix == 8) {
   25b80:	2e08      	cmp	r6, #8
   25b82:	d115      	bne.n	25bb0 <encode_uint+0x80>
			conv->altform_0 = true;
   25b84:	78ab      	ldrb	r3, [r5, #2]
   25b86:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   25b8a:	70ab      	strb	r3, [r5, #2]
}
   25b8c:	4648      	mov	r0, r9
   25b8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   25b92:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   25b96:	2b70      	cmp	r3, #112	; 0x70
   25b98:	e7d7      	b.n	25b4a <encode_uint+0x1a>
	switch (specifier) {
   25b9a:	2608      	movs	r6, #8
   25b9c:	e7d8      	b.n	25b50 <encode_uint+0x20>
		value /= radix;
   25b9e:	4680      	mov	r8, r0
   25ba0:	460f      	mov	r7, r1
   25ba2:	e7d7      	b.n	25b54 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25ba4:	f1bb 0f19 	cmp.w	fp, #25
   25ba8:	bf94      	ite	ls
   25baa:	3437      	addls	r4, #55	; 0x37
   25bac:	3457      	addhi	r4, #87	; 0x57
   25bae:	e7db      	b.n	25b68 <encode_uint+0x38>
		} else if (radix == 16) {
   25bb0:	2e10      	cmp	r6, #16
   25bb2:	d1eb      	bne.n	25b8c <encode_uint+0x5c>
			conv->altform_0c = true;
   25bb4:	78ab      	ldrb	r3, [r5, #2]
   25bb6:	f043 0310 	orr.w	r3, r3, #16
   25bba:	e7e6      	b.n	25b8a <encode_uint+0x5a>

00025bbc <outs>:
{
   25bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25bc0:	4607      	mov	r7, r0
   25bc2:	4688      	mov	r8, r1
   25bc4:	4615      	mov	r5, r2
   25bc6:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   25bc8:	4614      	mov	r4, r2
   25bca:	42b4      	cmp	r4, r6
   25bcc:	eba4 0005 	sub.w	r0, r4, r5
   25bd0:	d302      	bcc.n	25bd8 <outs+0x1c>
   25bd2:	b93e      	cbnz	r6, 25be4 <outs+0x28>
   25bd4:	7823      	ldrb	r3, [r4, #0]
   25bd6:	b12b      	cbz	r3, 25be4 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   25bd8:	f814 0b01 	ldrb.w	r0, [r4], #1
   25bdc:	4641      	mov	r1, r8
   25bde:	47b8      	blx	r7
		if (rc < 0) {
   25be0:	2800      	cmp	r0, #0
   25be2:	daf2      	bge.n	25bca <outs+0xe>
}
   25be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025be8 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   25be8:	4040      	eors	r0, r0
   25bea:	f380 8811 	msr	BASEPRI, r0
   25bee:	f04f 0004 	mov.w	r0, #4
   25bf2:	df02      	svc	2
}
   25bf4:	4770      	bx	lr

00025bf6 <assert_print>:

void assert_print(const char *fmt, ...)
{
   25bf6:	b40f      	push	{r0, r1, r2, r3}
   25bf8:	b507      	push	{r0, r1, r2, lr}
   25bfa:	a904      	add	r1, sp, #16
   25bfc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   25c00:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   25c02:	f7eb ff23 	bl	11a4c <vprintk>

	va_end(ap);
}
   25c06:	b003      	add	sp, #12
   25c08:	f85d eb04 	ldr.w	lr, [sp], #4
   25c0c:	b004      	add	sp, #16
   25c0e:	4770      	bx	lr

00025c10 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   25c10:	4770      	bx	lr

00025c12 <z_log_minimal_printk>:
{
   25c12:	b40f      	push	{r0, r1, r2, r3}
   25c14:	b507      	push	{r0, r1, r2, lr}
   25c16:	a904      	add	r1, sp, #16
   25c18:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   25c1c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   25c1e:	f7eb ff15 	bl	11a4c <vprintk>
}
   25c22:	b003      	add	sp, #12
   25c24:	f85d eb04 	ldr.w	lr, [sp], #4
   25c28:	b004      	add	sp, #16
   25c2a:	4770      	bx	lr

00025c2c <nvs_flash_rd>:
{
   25c2c:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   25c2e:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25c30:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   25c32:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25c34:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   25c36:	fa16 f181 	uxtah	r1, r6, r1
   25c3a:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   25c3e:	6884      	ldr	r4, [r0, #8]
   25c40:	6824      	ldr	r4, [r4, #0]
   25c42:	46a4      	mov	ip, r4
}
   25c44:	bc70      	pop	{r4, r5, r6}
   25c46:	4760      	bx	ip

00025c48 <nvs_flash_block_cmp>:
{
   25c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25c4c:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   25c4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   25c50:	681d      	ldr	r5, [r3, #0]
   25c52:	426d      	negs	r5, r5
{
   25c54:	b089      	sub	sp, #36	; 0x24
   25c56:	4681      	mov	r9, r0
   25c58:	460e      	mov	r6, r1
   25c5a:	4617      	mov	r7, r2
	block_size =
   25c5c:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   25c60:	b91c      	cbnz	r4, 25c6a <nvs_flash_block_cmp+0x22>
	return 0;
   25c62:	4620      	mov	r0, r4
}
   25c64:	b009      	add	sp, #36	; 0x24
   25c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   25c6a:	42ac      	cmp	r4, r5
   25c6c:	46a0      	mov	r8, r4
   25c6e:	bf28      	it	cs
   25c70:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   25c72:	4643      	mov	r3, r8
   25c74:	466a      	mov	r2, sp
   25c76:	4631      	mov	r1, r6
   25c78:	4648      	mov	r0, r9
   25c7a:	f7ff ffd7 	bl	25c2c <nvs_flash_rd>
		if (rc) {
   25c7e:	2800      	cmp	r0, #0
   25c80:	d1f0      	bne.n	25c64 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   25c82:	4642      	mov	r2, r8
   25c84:	4669      	mov	r1, sp
   25c86:	4638      	mov	r0, r7
   25c88:	f000 ff52 	bl	26b30 <memcmp>
		if (rc) {
   25c8c:	b920      	cbnz	r0, 25c98 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   25c8e:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   25c92:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   25c94:	4447      	add	r7, r8
   25c96:	e7e3      	b.n	25c60 <nvs_flash_block_cmp+0x18>
			return 1;
   25c98:	2001      	movs	r0, #1
   25c9a:	e7e3      	b.n	25c64 <nvs_flash_block_cmp+0x1c>

00025c9c <nvs_flash_cmp_const>:
{
   25c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ca0:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   25ca2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   25ca4:	681d      	ldr	r5, [r3, #0]
   25ca6:	426d      	negs	r5, r5
{
   25ca8:	b088      	sub	sp, #32
	block_size =
   25caa:	f005 0520 	and.w	r5, r5, #32
{
   25cae:	4607      	mov	r7, r0
   25cb0:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   25cb2:	4668      	mov	r0, sp
{
   25cb4:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   25cb6:	462a      	mov	r2, r5
   25cb8:	f000 ff56 	bl	26b68 <memset>
	while (len) {
   25cbc:	b91c      	cbnz	r4, 25cc6 <nvs_flash_cmp_const+0x2a>
	return 0;
   25cbe:	4620      	mov	r0, r4
}
   25cc0:	b008      	add	sp, #32
   25cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   25cc6:	42ac      	cmp	r4, r5
   25cc8:	46a0      	mov	r8, r4
   25cca:	bf28      	it	cs
   25ccc:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   25cce:	4643      	mov	r3, r8
   25cd0:	466a      	mov	r2, sp
   25cd2:	4631      	mov	r1, r6
   25cd4:	4638      	mov	r0, r7
   25cd6:	f7ff ffb7 	bl	25c48 <nvs_flash_block_cmp>
		if (rc) {
   25cda:	2800      	cmp	r0, #0
   25cdc:	d1f0      	bne.n	25cc0 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   25cde:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   25ce2:	4446      	add	r6, r8
   25ce4:	e7ea      	b.n	25cbc <nvs_flash_cmp_const+0x20>

00025ce6 <nvs_flash_erase_sector>:
{
   25ce6:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25ce8:	8982      	ldrh	r2, [r0, #12]
   25cea:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   25cec:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25cee:	0c09      	lsrs	r1, r1, #16
{
   25cf0:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   25cf2:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   25cf4:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25cf6:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   25cfa:	6883      	ldr	r3, [r0, #8]
   25cfc:	689b      	ldr	r3, [r3, #8]
   25cfe:	4798      	blx	r3
	if (rc) {
   25d00:	b950      	cbnz	r0, 25d18 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   25d02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   25d04:	89a3      	ldrh	r3, [r4, #12]
   25d06:	7912      	ldrb	r2, [r2, #4]
   25d08:	4629      	mov	r1, r5
   25d0a:	4620      	mov	r0, r4
   25d0c:	f7ff ffc6 	bl	25c9c <nvs_flash_cmp_const>
		rc = -ENXIO;
   25d10:	2800      	cmp	r0, #0
   25d12:	bf18      	it	ne
   25d14:	f06f 0005 	mvnne.w	r0, #5
}
   25d18:	bd38      	pop	{r3, r4, r5, pc}

00025d1a <nvs_ate_crc8_update>:
{
   25d1a:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   25d1c:	4601      	mov	r1, r0
{
   25d1e:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   25d20:	2207      	movs	r2, #7
   25d22:	20ff      	movs	r0, #255	; 0xff
   25d24:	f7eb fe42 	bl	119ac <crc8_ccitt>
	entry->crc8 = crc8;
   25d28:	71e0      	strb	r0, [r4, #7]
}
   25d2a:	bd10      	pop	{r4, pc}

00025d2c <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   25d2c:	680b      	ldr	r3, [r1, #0]
   25d2e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   25d32:	0c1a      	lsrs	r2, r3, #16
   25d34:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   25d38:	bf08      	it	eq
   25d3a:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   25d3e:	600b      	str	r3, [r1, #0]
}
   25d40:	4770      	bx	lr

00025d42 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   25d42:	7803      	ldrb	r3, [r0, #0]
   25d44:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   25d46:	bf81      	itttt	hi
   25d48:	f101 31ff 	addhi.w	r1, r1, #4294967295
   25d4c:	18c9      	addhi	r1, r1, r3
   25d4e:	425b      	neghi	r3, r3
   25d50:	4019      	andhi	r1, r3
}
   25d52:	4608      	mov	r0, r1
   25d54:	4770      	bx	lr

00025d56 <nvs_ate_valid>:
{
   25d56:	b570      	push	{r4, r5, r6, lr}
   25d58:	460c      	mov	r4, r1
   25d5a:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25d5c:	2108      	movs	r1, #8
   25d5e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   25d60:	f7ff ffef 	bl	25d42 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   25d64:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25d66:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   25d68:	4621      	mov	r1, r4
   25d6a:	20ff      	movs	r0, #255	; 0xff
   25d6c:	f7eb fe1e 	bl	119ac <crc8_ccitt>
	if (crc8 == entry->crc8) {
   25d70:	79e3      	ldrb	r3, [r4, #7]
   25d72:	4283      	cmp	r3, r0
   25d74:	d107      	bne.n	25d86 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   25d76:	89a8      	ldrh	r0, [r5, #12]
   25d78:	8863      	ldrh	r3, [r4, #2]
   25d7a:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   25d7c:	4283      	cmp	r3, r0
   25d7e:	bf2c      	ite	cs
   25d80:	2000      	movcs	r0, #0
   25d82:	2001      	movcc	r0, #1
}
   25d84:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   25d86:	2000      	movs	r0, #0
   25d88:	e7fc      	b.n	25d84 <nvs_ate_valid+0x2e>

00025d8a <nvs_close_ate_valid>:
{
   25d8a:	b538      	push	{r3, r4, r5, lr}
   25d8c:	4605      	mov	r5, r0
   25d8e:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   25d90:	f7ff ffe1 	bl	25d56 <nvs_ate_valid>
   25d94:	b1a0      	cbz	r0, 25dc0 <nvs_close_ate_valid+0x36>
   25d96:	88a0      	ldrh	r0, [r4, #4]
   25d98:	b998      	cbnz	r0, 25dc2 <nvs_close_ate_valid+0x38>
   25d9a:	8822      	ldrh	r2, [r4, #0]
   25d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25da0:	429a      	cmp	r2, r3
   25da2:	d10d      	bne.n	25dc0 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25da4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   25da6:	2108      	movs	r1, #8
   25da8:	f7ff ffcb 	bl	25d42 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   25dac:	8862      	ldrh	r2, [r4, #2]
   25dae:	89ab      	ldrh	r3, [r5, #12]
   25db0:	1a9b      	subs	r3, r3, r2
   25db2:	fbb3 f2f0 	udiv	r2, r3, r0
   25db6:	fb02 3010 	mls	r0, r2, r0, r3
   25dba:	fab0 f080 	clz	r0, r0
   25dbe:	0940      	lsrs	r0, r0, #5
}
   25dc0:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   25dc2:	2000      	movs	r0, #0
   25dc4:	e7fc      	b.n	25dc0 <nvs_close_ate_valid+0x36>

00025dc6 <nvs_prev_ate>:
{
   25dc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25dc8:	4605      	mov	r5, r0
   25dca:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25dcc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   25dce:	2108      	movs	r1, #8
   25dd0:	f7ff ffb7 	bl	25d42 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25dd4:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25dd6:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25dd8:	2308      	movs	r3, #8
   25dda:	4628      	mov	r0, r5
   25ddc:	f7ff ff26 	bl	25c2c <nvs_flash_rd>
	if (rc) {
   25de0:	4604      	mov	r4, r0
   25de2:	2800      	cmp	r0, #0
   25de4:	d138      	bne.n	25e58 <nvs_prev_ate+0x92>
	*addr += ate_size;
   25de6:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   25de8:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   25dea:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   25dec:	b29a      	uxth	r2, r3
   25dee:	1bc7      	subs	r7, r0, r7
   25df0:	42ba      	cmp	r2, r7
	*addr += ate_size;
   25df2:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   25df4:	d130      	bne.n	25e58 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   25df6:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   25df8:	bf03      	ittte	eq
   25dfa:	89e9      	ldrheq	r1, [r5, #14]
   25dfc:	f101 31ff 	addeq.w	r1, r1, #4294967295
   25e00:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   25e04:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   25e08:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25e0a:	2308      	movs	r3, #8
   25e0c:	466a      	mov	r2, sp
   25e0e:	4628      	mov	r0, r5
   25e10:	f7ff ff0c 	bl	25c2c <nvs_flash_rd>
	if (rc) {
   25e14:	4604      	mov	r4, r0
   25e16:	b9f8      	cbnz	r0, 25e58 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   25e18:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   25e1a:	466a      	mov	r2, sp
   25e1c:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   25e1e:	4603      	mov	r3, r0
		if (data8[i] != value) {
   25e20:	f812 0b01 	ldrb.w	r0, [r2], #1
   25e24:	4281      	cmp	r1, r0
   25e26:	d10c      	bne.n	25e42 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   25e28:	3301      	adds	r3, #1
   25e2a:	2b08      	cmp	r3, #8
   25e2c:	d1f8      	bne.n	25e20 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   25e2e:	686b      	ldr	r3, [r5, #4]
   25e30:	e005      	b.n	25e3e <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   25e32:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   25e34:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   25e38:	0c1b      	lsrs	r3, r3, #16
   25e3a:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   25e3c:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   25e3e:	6033      	str	r3, [r6, #0]
		return 0;
   25e40:	e00a      	b.n	25e58 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   25e42:	4669      	mov	r1, sp
   25e44:	4628      	mov	r0, r5
   25e46:	f7ff ffa0 	bl	25d8a <nvs_close_ate_valid>
   25e4a:	2800      	cmp	r0, #0
   25e4c:	d1f1      	bne.n	25e32 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   25e4e:	4631      	mov	r1, r6
   25e50:	4628      	mov	r0, r5
   25e52:	f7ec fdd9 	bl	12a08 <nvs_recover_last_ate>
   25e56:	4604      	mov	r4, r0
}
   25e58:	4620      	mov	r0, r4
   25e5a:	b003      	add	sp, #12
   25e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025e5e <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   25e5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25e62:	8985      	ldrh	r5, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   25e64:	4607      	mov	r7, r0
	offset += addr & ADDR_OFFS_MASK;
   25e66:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   25e68:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25e6a:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   25e6c:	fa10 f181 	uxtah	r1, r0, r1
   25e70:	fb03 1505 	mla	r5, r3, r5, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   25e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25e76:	681e      	ldr	r6, [r3, #0]
   25e78:	4276      	negs	r6, r6
	if (blen > 0) {
   25e7a:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   25e7c:	b089      	sub	sp, #36	; 0x24
   25e7e:	4690      	mov	r8, r2
	if (blen > 0) {
   25e80:	d00a      	beq.n	25e98 <nvs_flash_al_wrt.part.0+0x3a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   25e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   25e84:	6883      	ldr	r3, [r0, #8]
   25e86:	4629      	mov	r1, r5
   25e88:	f8d3 9004 	ldr.w	r9, [r3, #4]
   25e8c:	4633      	mov	r3, r6
   25e8e:	47c8      	blx	r9
		if (rc) {
   25e90:	b9c0      	cbnz	r0, 25ec4 <nvs_flash_al_wrt.part.0+0x66>
		len -= blen;
   25e92:	1ba4      	subs	r4, r4, r6
		offset += blen;
   25e94:	4435      	add	r5, r6
		data8 += blen;
   25e96:	44b0      	add	r8, r6
	if (len) {
   25e98:	b1bc      	cbz	r4, 25eca <nvs_flash_al_wrt.part.0+0x6c>
		memcpy(buf, data8, len);
   25e9a:	4622      	mov	r2, r4
   25e9c:	4641      	mov	r1, r8
   25e9e:	4668      	mov	r0, sp
   25ea0:	f000 fe57 	bl	26b52 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   25ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25ea6:	681a      	ldr	r2, [r3, #0]
   25ea8:	7919      	ldrb	r1, [r3, #4]
   25eaa:	1b12      	subs	r2, r2, r4
   25eac:	eb0d 0004 	add.w	r0, sp, r4
   25eb0:	f000 fe5a 	bl	26b68 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   25eb4:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   25eb8:	681b      	ldr	r3, [r3, #0]
   25eba:	6882      	ldr	r2, [r0, #8]
   25ebc:	4629      	mov	r1, r5
   25ebe:	6854      	ldr	r4, [r2, #4]
   25ec0:	466a      	mov	r2, sp
   25ec2:	47a0      	blx	r4
}
   25ec4:	b009      	add	sp, #36	; 0x24
   25ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
end:
   25eca:	4620      	mov	r0, r4
   25ecc:	e7fa      	b.n	25ec4 <nvs_flash_al_wrt.part.0+0x66>

00025ece <nvs_flash_data_wrt>:
{
   25ece:	b538      	push	{r3, r4, r5, lr}
   25ed0:	4604      	mov	r4, r0
	if (!len) {
   25ed2:	4615      	mov	r5, r2
   25ed4:	b12a      	cbz	r2, 25ee2 <nvs_flash_data_wrt+0x14>
   25ed6:	4613      	mov	r3, r2
   25ed8:	460a      	mov	r2, r1
   25eda:	6881      	ldr	r1, [r0, #8]
   25edc:	f7ff ffbf 	bl	25e5e <nvs_flash_al_wrt.part.0>
   25ee0:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   25ee2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   25ee4:	4629      	mov	r1, r5
   25ee6:	f7ff ff2c 	bl	25d42 <nvs_al_size.isra.0>
   25eea:	68a3      	ldr	r3, [r4, #8]
   25eec:	4403      	add	r3, r0
   25eee:	60a3      	str	r3, [r4, #8]
}
   25ef0:	4610      	mov	r0, r2
   25ef2:	bd38      	pop	{r3, r4, r5, pc}

00025ef4 <nvs_flash_ate_wrt>:
{
   25ef4:	b510      	push	{r4, lr}
   25ef6:	460a      	mov	r2, r1
	if (!len) {
   25ef8:	2308      	movs	r3, #8
   25efa:	6841      	ldr	r1, [r0, #4]
{
   25efc:	4604      	mov	r4, r0
   25efe:	f7ff ffae 	bl	25e5e <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   25f02:	2108      	movs	r1, #8
   25f04:	4602      	mov	r2, r0
   25f06:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   25f08:	f7ff ff1b 	bl	25d42 <nvs_al_size.isra.0>
   25f0c:	6863      	ldr	r3, [r4, #4]
   25f0e:	1a1b      	subs	r3, r3, r0
   25f10:	6063      	str	r3, [r4, #4]
}
   25f12:	4610      	mov	r0, r2
   25f14:	bd10      	pop	{r4, pc}

00025f16 <nvs_add_gc_done_ate>:
{
   25f16:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   25f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25f1c:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   25f20:	2300      	movs	r3, #0
{
   25f22:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   25f24:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   25f28:	6883      	ldr	r3, [r0, #8]
   25f2a:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   25f2e:	4668      	mov	r0, sp
   25f30:	f7ff fef3 	bl	25d1a <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   25f34:	4669      	mov	r1, sp
   25f36:	4620      	mov	r0, r4
   25f38:	f7ff ffdc 	bl	25ef4 <nvs_flash_ate_wrt>
}
   25f3c:	b002      	add	sp, #8
   25f3e:	bd10      	pop	{r4, pc}

00025f40 <nvs_gc>:
{
   25f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f44:	4604      	mov	r4, r0
   25f46:	b093      	sub	sp, #76	; 0x4c
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25f48:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   25f4a:	2108      	movs	r1, #8
   25f4c:	f7ff fef9 	bl	25d42 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   25f50:	6863      	ldr	r3, [r4, #4]
   25f52:	0c1b      	lsrs	r3, r3, #16
   25f54:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25f56:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   25f58:	a901      	add	r1, sp, #4
   25f5a:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   25f5c:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
   25f5e:	f7ff fee5 	bl	25d2c <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   25f62:	9b01      	ldr	r3, [sp, #4]
   25f64:	89a1      	ldrh	r1, [r4, #12]
   25f66:	4419      	add	r1, r3
   25f68:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25f6a:	2308      	movs	r3, #8
   25f6c:	aa04      	add	r2, sp, #16
   25f6e:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   25f70:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25f72:	f7ff fe5b 	bl	25c2c <nvs_flash_rd>
	if (rc < 0) {
   25f76:	2800      	cmp	r0, #0
   25f78:	f2c0 8094 	blt.w	260a4 <nvs_gc+0x164>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   25f7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   25f7e:	aa04      	add	r2, sp, #16
   25f80:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   25f82:	2300      	movs	r3, #0
		if (data8[i] != value) {
   25f84:	f812 0b01 	ldrb.w	r0, [r2], #1
   25f88:	4281      	cmp	r1, r0
   25f8a:	d17c      	bne.n	26086 <nvs_gc+0x146>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   25f8c:	3301      	adds	r3, #1
   25f8e:	2b08      	cmp	r3, #8
   25f90:	d1f8      	bne.n	25f84 <nvs_gc+0x44>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   25f92:	68a0      	ldr	r0, [r4, #8]
   25f94:	6863      	ldr	r3, [r4, #4]
   25f96:	4428      	add	r0, r5
   25f98:	4283      	cmp	r3, r0
   25f9a:	d26e      	bcs.n	2607a <nvs_gc+0x13a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   25f9c:	9901      	ldr	r1, [sp, #4]
   25f9e:	4620      	mov	r0, r4
   25fa0:	f7ff fea1 	bl	25ce6 <nvs_flash_erase_sector>
	if (rc) {
   25fa4:	e07e      	b.n	260a4 <nvs_gc+0x164>
		gc_addr &= ADDR_SECT_MASK;
   25fa6:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
   25fa8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
   25fac:	0c1b      	lsrs	r3, r3, #16
   25fae:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   25fb0:	4413      	add	r3, r2
   25fb2:	9302      	str	r3, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   25fb4:	aa06      	add	r2, sp, #24
   25fb6:	a902      	add	r1, sp, #8
   25fb8:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   25fba:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   25fbe:	f7ff ff02 	bl	25dc6 <nvs_prev_ate>
		if (rc) {
   25fc2:	2800      	cmp	r0, #0
   25fc4:	d16e      	bne.n	260a4 <nvs_gc+0x164>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   25fc6:	a906      	add	r1, sp, #24
   25fc8:	4620      	mov	r0, r4
   25fca:	f7ff fec4 	bl	25d56 <nvs_ate_valid>
   25fce:	2800      	cmp	r0, #0
   25fd0:	d034      	beq.n	2603c <nvs_gc+0xfc>
		wlk_addr = fs->ate_wra;
   25fd2:	6863      	ldr	r3, [r4, #4]
   25fd4:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   25fd6:	aa08      	add	r2, sp, #32
   25fd8:	a903      	add	r1, sp, #12
   25fda:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   25fdc:	9e03      	ldr	r6, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   25fde:	f7ff fef2 	bl	25dc6 <nvs_prev_ate>
			if (rc) {
   25fe2:	2800      	cmp	r0, #0
   25fe4:	d15e      	bne.n	260a4 <nvs_gc+0x164>
			if ((wlk_ate.id == gc_ate.id) &&
   25fe6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   25fea:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   25fee:	429a      	cmp	r2, r3
   25ff0:	d027      	beq.n	26042 <nvs_gc+0x102>
		} while (wlk_addr != fs->ate_wra);
   25ff2:	6862      	ldr	r2, [r4, #4]
   25ff4:	9b03      	ldr	r3, [sp, #12]
   25ff6:	429a      	cmp	r2, r3
   25ff8:	d1ed      	bne.n	25fd6 <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   25ffa:	4556      	cmp	r6, sl
   25ffc:	d11e      	bne.n	2603c <nvs_gc+0xfc>
   25ffe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   26002:	b1db      	cbz	r3, 2603c <nvs_gc+0xfc>
			data_addr += gc_ate.offset;
   26004:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   26008:	ea4f 471a 	mov.w	r7, sl, lsr #16
   2600c:	043f      	lsls	r7, r7, #16
			data_addr += gc_ate.offset;
   2600e:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   26010:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   26012:	68a3      	ldr	r3, [r4, #8]
   26014:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   26018:	f7ff fe7f 	bl	25d1a <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2601c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2601e:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   26022:	681e      	ldr	r6, [r3, #0]
   26024:	4276      	negs	r6, r6
	block_size =
   26026:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2602a:	f1b8 0f00 	cmp.w	r8, #0
   2602e:	d10f      	bne.n	26050 <nvs_gc+0x110>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   26030:	a906      	add	r1, sp, #24
   26032:	4620      	mov	r0, r4
   26034:	f7ff ff5e 	bl	25ef4 <nvs_flash_ate_wrt>
			if (rc) {
   26038:	2800      	cmp	r0, #0
   2603a:	d133      	bne.n	260a4 <nvs_gc+0x164>
	} while (gc_prev_addr != stop_addr);
   2603c:	45ca      	cmp	sl, r9
   2603e:	d1b9      	bne.n	25fb4 <nvs_gc+0x74>
gc_done:
   26040:	e7a7      	b.n	25f92 <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   26042:	a908      	add	r1, sp, #32
   26044:	4620      	mov	r0, r4
   26046:	f7ff fe86 	bl	25d56 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2604a:	2800      	cmp	r0, #0
   2604c:	d0d1      	beq.n	25ff2 <nvs_gc+0xb2>
   2604e:	e7d4      	b.n	25ffa <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
   26050:	4546      	cmp	r6, r8
   26052:	46b3      	mov	fp, r6
   26054:	bf28      	it	cs
   26056:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   26058:	465b      	mov	r3, fp
   2605a:	aa0a      	add	r2, sp, #40	; 0x28
   2605c:	4639      	mov	r1, r7
   2605e:	4620      	mov	r0, r4
   26060:	f7ff fde4 	bl	25c2c <nvs_flash_rd>
		if (rc) {
   26064:	b9f0      	cbnz	r0, 260a4 <nvs_gc+0x164>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   26066:	465a      	mov	r2, fp
   26068:	a90a      	add	r1, sp, #40	; 0x28
   2606a:	4620      	mov	r0, r4
   2606c:	f7ff ff2f 	bl	25ece <nvs_flash_data_wrt>
		if (rc) {
   26070:	b9c0      	cbnz	r0, 260a4 <nvs_gc+0x164>
		len -= bytes_to_copy;
   26072:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   26076:	445f      	add	r7, fp
   26078:	e7d7      	b.n	2602a <nvs_gc+0xea>
		rc = nvs_add_gc_done_ate(fs);
   2607a:	4620      	mov	r0, r4
   2607c:	f7ff ff4b 	bl	25f16 <nvs_add_gc_done_ate>
		if (rc) {
   26080:	2800      	cmp	r0, #0
   26082:	d08b      	beq.n	25f9c <nvs_gc+0x5c>
   26084:	e00e      	b.n	260a4 <nvs_gc+0x164>
	stop_addr = gc_addr - ate_size;
   26086:	9b02      	ldr	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   26088:	a904      	add	r1, sp, #16
   2608a:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   2608c:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   26090:	f7ff fe7b 	bl	25d8a <nvs_close_ate_valid>
   26094:	2800      	cmp	r0, #0
   26096:	d186      	bne.n	25fa6 <nvs_gc+0x66>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   26098:	a902      	add	r1, sp, #8
   2609a:	4620      	mov	r0, r4
   2609c:	f7ec fcb4 	bl	12a08 <nvs_recover_last_ate>
		if (rc) {
   260a0:	2800      	cmp	r0, #0
   260a2:	d087      	beq.n	25fb4 <nvs_gc+0x74>
}
   260a4:	b013      	add	sp, #76	; 0x4c
   260a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000260aa <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   260aa:	2300      	movs	r3, #0
   260ac:	461a      	mov	r2, r3
   260ae:	f7ec be6f 	b.w	12d90 <nvs_write>

000260b2 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   260b2:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   260b4:	2400      	movs	r4, #0
   260b6:	9400      	str	r4, [sp, #0]
   260b8:	f7ec ff34 	bl	12f24 <nvs_read_hist>
	return rc;
}
   260bc:	b002      	add	sp, #8
   260be:	bd10      	pop	{r4, pc}

000260c0 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   260c0:	4770      	bx	lr

000260c2 <get_sectors_cb>:
{
   260c2:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   260c4:	6802      	ldr	r2, [r0, #0]
   260c6:	684c      	ldr	r4, [r1, #4]
   260c8:	42a2      	cmp	r2, r4
   260ca:	d316      	bcc.n	260fa <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   260cc:	688b      	ldr	r3, [r1, #8]
   260ce:	4423      	add	r3, r4
   260d0:	429a      	cmp	r2, r3
   260d2:	d206      	bcs.n	260e2 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   260d4:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   260d8:	42ab      	cmp	r3, r5
   260da:	d304      	bcc.n	260e6 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   260dc:	f06f 030b 	mvn.w	r3, #11
   260e0:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   260e2:	2000      	movs	r0, #0
   260e4:	e00a      	b.n	260fc <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   260e6:	68cd      	ldr	r5, [r1, #12]
   260e8:	1b12      	subs	r2, r2, r4
   260ea:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   260ee:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   260f2:	6842      	ldr	r2, [r0, #4]
   260f4:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   260f6:	3301      	adds	r3, #1
   260f8:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   260fa:	2001      	movs	r0, #1
}
   260fc:	bd70      	pop	{r4, r5, r6, pc}

000260fe <settings_load>:
	return settings_load_subtree(NULL);
   260fe:	2000      	movs	r0, #0
   26100:	f7ed b800 	b.w	13104 <settings_load_subtree>

00026104 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   26104:	2200      	movs	r2, #0
   26106:	4611      	mov	r1, r2
   26108:	f7ec bfc2 	b.w	13090 <settings_save_one>

0002610c <settings_name_steq>:
{
   2610c:	4603      	mov	r3, r0
   2610e:	b530      	push	{r4, r5, lr}
   26110:	4608      	mov	r0, r1
	if (next) {
   26112:	b10a      	cbz	r2, 26118 <settings_name_steq+0xc>
		*next = NULL;
   26114:	2100      	movs	r1, #0
   26116:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   26118:	b163      	cbz	r3, 26134 <settings_name_steq+0x28>
   2611a:	b190      	cbz	r0, 26142 <settings_name_steq+0x36>
   2611c:	1e41      	subs	r1, r0, #1
   2611e:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   26120:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   26124:	4604      	mov	r4, r0
   26126:	f810 3b01 	ldrb.w	r3, [r0], #1
   2612a:	b15d      	cbz	r5, 26144 <settings_name_steq+0x38>
   2612c:	429d      	cmp	r5, r3
   2612e:	d101      	bne.n	26134 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   26130:	2d3d      	cmp	r5, #61	; 0x3d
   26132:	d1f5      	bne.n	26120 <settings_name_steq+0x14>
	return 0;
   26134:	2000      	movs	r0, #0
   26136:	e004      	b.n	26142 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   26138:	2b3d      	cmp	r3, #61	; 0x3d
   2613a:	d008      	beq.n	2614e <settings_name_steq+0x42>
   2613c:	fab3 f083 	clz	r0, r3
   26140:	0940      	lsrs	r0, r0, #5
}
   26142:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   26144:	2b2f      	cmp	r3, #47	; 0x2f
   26146:	d1f7      	bne.n	26138 <settings_name_steq+0x2c>
		if (next) {
   26148:	b10a      	cbz	r2, 2614e <settings_name_steq+0x42>
			*next = name + 1;
   2614a:	3401      	adds	r4, #1
   2614c:	6014      	str	r4, [r2, #0]
		return 1;
   2614e:	2001      	movs	r0, #1
   26150:	e7f7      	b.n	26142 <settings_name_steq+0x36>

00026152 <settings_name_next>:
{
   26152:	b530      	push	{r4, r5, lr}
   26154:	4603      	mov	r3, r0
	if (next) {
   26156:	b109      	cbz	r1, 2615c <settings_name_next+0xa>
		*next = NULL;
   26158:	2200      	movs	r2, #0
   2615a:	600a      	str	r2, [r1, #0]
	if (!name) {
   2615c:	b16b      	cbz	r3, 2617a <settings_name_next+0x28>
   2615e:	461a      	mov	r2, r3
   26160:	4614      	mov	r4, r2
   26162:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   26164:	f812 5b01 	ldrb.w	r5, [r2], #1
   26168:	b135      	cbz	r5, 26178 <settings_name_next+0x26>
   2616a:	2d3d      	cmp	r5, #61	; 0x3d
   2616c:	d004      	beq.n	26178 <settings_name_next+0x26>
   2616e:	2d2f      	cmp	r5, #47	; 0x2f
   26170:	d1f6      	bne.n	26160 <settings_name_next+0xe>
		if (next) {
   26172:	b109      	cbz	r1, 26178 <settings_name_next+0x26>
			*next = name + 1;
   26174:	3401      	adds	r4, #1
   26176:	600c      	str	r4, [r1, #0]
}
   26178:	bd30      	pop	{r4, r5, pc}
		return 0;
   2617a:	4618      	mov	r0, r3
   2617c:	e7fc      	b.n	26178 <settings_name_next+0x26>

0002617e <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = (struct settings_nvs *)cs;

	return &cf->cf_nvs;
}
   2617e:	3008      	adds	r0, #8
   26180:	4770      	bx	lr

00026182 <settings_nvs_read_fn>:
{
   26182:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   26184:	4613      	mov	r3, r2
{
   26186:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   26188:	460a      	mov	r2, r1
   2618a:	8881      	ldrh	r1, [r0, #4]
   2618c:	6800      	ldr	r0, [r0, #0]
   2618e:	f7ff ff90 	bl	260b2 <nvs_read>
}
   26192:	42a0      	cmp	r0, r4
   26194:	bfa8      	it	ge
   26196:	4620      	movge	r0, r4
   26198:	bd10      	pop	{r4, pc}

0002619a <settings_nvs_save>:
{
   2619a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2619e:	b097      	sub	sp, #92	; 0x5c
   261a0:	4604      	mov	r4, r0
   261a2:	9201      	str	r2, [sp, #4]
   261a4:	469b      	mov	fp, r3
	if (!name) {
   261a6:	4689      	mov	r9, r1
   261a8:	2900      	cmp	r1, #0
   261aa:	d069      	beq.n	26280 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   261ac:	b1da      	cbz	r2, 261e6 <settings_nvs_save+0x4c>
   261ae:	fabb f78b 	clz	r7, fp
   261b2:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   261b4:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   261b6:	3501      	adds	r5, #1
   261b8:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   261ba:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   261bc:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   261c0:	1e6e      	subs	r6, r5, #1
   261c2:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   261c4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   261c8:	d02e      	beq.n	26228 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   261ca:	234a      	movs	r3, #74	; 0x4a
   261cc:	aa03      	add	r2, sp, #12
   261ce:	4631      	mov	r1, r6
   261d0:	4650      	mov	r0, sl
   261d2:	f7ff ff6e 	bl	260b2 <nvs_read>
		if (rc < 0) {
   261d6:	2800      	cmp	r0, #0
   261d8:	da07      	bge.n	261ea <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   261da:	f110 0f02 	cmn.w	r0, #2
   261de:	bf08      	it	eq
   261e0:	46b0      	moveq	r8, r6
   261e2:	4635      	mov	r5, r6
   261e4:	e7ec      	b.n	261c0 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   261e6:	2701      	movs	r7, #1
   261e8:	e7e4      	b.n	261b4 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   261ea:	ab16      	add	r3, sp, #88	; 0x58
   261ec:	4418      	add	r0, r3
   261ee:	2300      	movs	r3, #0
   261f0:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   261f4:	a903      	add	r1, sp, #12
   261f6:	4648      	mov	r0, r9
   261f8:	f000 fc7d 	bl	26af6 <strcmp>
   261fc:	2800      	cmp	r0, #0
   261fe:	d1f0      	bne.n	261e2 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   26200:	2f00      	cmp	r7, #0
   26202:	d03b      	beq.n	2627c <settings_nvs_save+0xe2>
   26204:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   26206:	42b3      	cmp	r3, r6
   26208:	d142      	bne.n	26290 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   2620a:	4622      	mov	r2, r4
   2620c:	1e73      	subs	r3, r6, #1
   2620e:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   26212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   26216:	2302      	movs	r3, #2
   26218:	4650      	mov	r0, sl
   2621a:	f7ec fdb9 	bl	12d90 <nvs_write>
			if (rc < 0) {
   2621e:	2800      	cmp	r0, #0
   26220:	da36      	bge.n	26290 <settings_nvs_save+0xf6>
}
   26222:	b017      	add	sp, #92	; 0x5c
   26224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   26228:	bb6f      	cbnz	r7, 26286 <settings_nvs_save+0xec>
	write_name = true;
   2622a:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2622c:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   26230:	d02b      	beq.n	2628a <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   26232:	f104 0508 	add.w	r5, r4, #8
   26236:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   2623a:	9a01      	ldr	r2, [sp, #4]
   2623c:	465b      	mov	r3, fp
   2623e:	b289      	uxth	r1, r1
   26240:	4628      	mov	r0, r5
   26242:	f7ec fda5 	bl	12d90 <nvs_write>
	if (rc < 0) {
   26246:	2800      	cmp	r0, #0
   26248:	dbeb      	blt.n	26222 <settings_nvs_save+0x88>
	if (write_name) {
   2624a:	b157      	cbz	r7, 26262 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2624c:	4648      	mov	r0, r9
   2624e:	f000 fc42 	bl	26ad6 <strlen>
   26252:	464a      	mov	r2, r9
   26254:	4603      	mov	r3, r0
   26256:	4641      	mov	r1, r8
   26258:	4628      	mov	r0, r5
   2625a:	f7ec fd99 	bl	12d90 <nvs_write>
		if (rc < 0) {
   2625e:	2800      	cmp	r0, #0
   26260:	dbdf      	blt.n	26222 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   26262:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   26264:	4543      	cmp	r3, r8
   26266:	d220      	bcs.n	262aa <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   26268:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2626a:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   2626c:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   26270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   26274:	4628      	mov	r0, r5
   26276:	f7ec fd8b 	bl	12d90 <nvs_write>
   2627a:	e016      	b.n	262aa <settings_nvs_save+0x110>
   2627c:	46b0      	mov	r8, r6
   2627e:	e7d5      	b.n	2622c <settings_nvs_save+0x92>
		return -EINVAL;
   26280:	f06f 0015 	mvn.w	r0, #21
   26284:	e7cd      	b.n	26222 <settings_nvs_save+0x88>
		return 0;
   26286:	2000      	movs	r0, #0
   26288:	e7cb      	b.n	26222 <settings_nvs_save+0x88>
		return -ENOMEM;
   2628a:	f06f 000b 	mvn.w	r0, #11
   2628e:	e7c8      	b.n	26222 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   26290:	4631      	mov	r1, r6
   26292:	4650      	mov	r0, sl
   26294:	f7ff ff09 	bl	260aa <nvs_delete>
			if (rc >= 0) {
   26298:	2800      	cmp	r0, #0
   2629a:	dbc2      	blt.n	26222 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   2629c:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   262a0:	313f      	adds	r1, #63	; 0x3f
   262a2:	b289      	uxth	r1, r1
   262a4:	4650      	mov	r0, sl
   262a6:	f7ff ff00 	bl	260aa <nvs_delete>
	if (rc < 0) {
   262aa:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   262ae:	e7b8      	b.n	26222 <settings_nvs_save+0x88>

000262b0 <settings_nvs_backend_init>:
	cf->cf_nvs.flash_device = cf->flash_dev;
   262b0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   262b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   262b4:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = cf->flash_dev;
   262b6:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   262b8:	b1c3      	cbz	r3, 262ec <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   262ba:	f100 0608 	add.w	r6, r0, #8
   262be:	4630      	mov	r0, r6
   262c0:	f7ec fbd4 	bl	12a6c <nvs_mount>
	if (rc) {
   262c4:	4605      	mov	r5, r0
   262c6:	b970      	cbnz	r0, 262e6 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   262c8:	2302      	movs	r3, #2
   262ca:	f10d 0206 	add.w	r2, sp, #6
   262ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   262d2:	4630      	mov	r0, r6
   262d4:	f7ff feed 	bl	260b2 <nvs_read>
	if (rc < 0) {
   262d8:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   262da:	bfac      	ite	ge
   262dc:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   262e0:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   262e4:	8723      	strh	r3, [r4, #56]	; 0x38
}
   262e6:	4628      	mov	r0, r5
   262e8:	b002      	add	sp, #8
   262ea:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   262ec:	f06f 0512 	mvn.w	r5, #18
   262f0:	e7f9      	b.n	262e6 <settings_nvs_backend_init+0x36>

000262f2 <attr_find_by_handle>:
{
   262f2:	b570      	push	{r4, r5, r6, lr}
   262f4:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   262f6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   262fa:	b1a8      	cbz	r0, 26328 <attr_find_by_handle+0x36>
	ssize_t upper = dm->cur_attr_id - 1;
   262fc:	3801      	subs	r0, #1
	ssize_t lower = 0;
   262fe:	2600      	movs	r6, #0
	while (upper >= lower) {
   26300:	4286      	cmp	r6, r0
   26302:	dd01      	ble.n	26308 <attr_find_by_handle+0x16>
		return NULL;
   26304:	2000      	movs	r0, #0
   26306:	e00f      	b.n	26328 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   26308:	1832      	adds	r2, r6, r0
   2630a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2630e:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   26310:	1cd5      	adds	r5, r2, #3
   26312:	00eb      	lsls	r3, r5, #3
   26314:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   26318:	892d      	ldrh	r5, [r5, #8]
   2631a:	428d      	cmp	r5, r1
   2631c:	d201      	bcs.n	26322 <attr_find_by_handle+0x30>
			lower = m + 1;
   2631e:	1c56      	adds	r6, r2, #1
   26320:	e7ee      	b.n	26300 <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   26322:	d802      	bhi.n	2632a <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   26324:	3304      	adds	r3, #4
   26326:	18e0      	adds	r0, r4, r3
}
   26328:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   2632a:	1e50      	subs	r0, r2, #1
   2632c:	e7e8      	b.n	26300 <attr_find_by_handle+0xe>

0002632e <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   2632e:	2300      	movs	r3, #0
{
   26330:	b510      	push	{r4, lr}
   26332:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   26334:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
	return list->head;
   26338:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   2633c:	b910      	cbnz	r0, 26344 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   2633e:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
}
   26342:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26344:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
	return node->next;
   26348:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   2634a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2634e:	4290      	cmp	r0, r2
	list->tail = node;
   26350:	bf08      	it	eq
   26352:	f8c4 3154 	streq.w	r3, [r4, #340]	; 0x154
		k_free(item);
   26356:	f003 fcdd 	bl	29d14 <k_free>
   2635a:	e7ed      	b.n	26338 <svc_attr_memory_release+0xa>

0002635c <atomic_and>:
{
   2635c:	4603      	mov	r3, r0
}
   2635e:	f3bf 8f5b 	dmb	ish
   26362:	e853 0f00 	ldrex	r0, [r3]
   26366:	ea00 0201 	and.w	r2, r0, r1
   2636a:	e843 2c00 	strex	ip, r2, [r3]
   2636e:	f1bc 0f00 	cmp.w	ip, #0
   26372:	d1f6      	bne.n	26362 <atomic_and+0x6>
   26374:	f3bf 8f5b 	dmb	ish
   26378:	4770      	bx	lr

0002637a <discovery_complete_not_found>:
{
   2637a:	b510      	push	{r4, lr}
   2637c:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   2637e:	f7ff ffd6 	bl	2632e <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26382:	f06f 0101 	mvn.w	r1, #1
   26386:	f504 709c 	add.w	r0, r4, #312	; 0x138
   2638a:	f7ff ffe7 	bl	2635c <atomic_and>
	if (dm->callback->service_not_found) {
   2638e:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
   26392:	685b      	ldr	r3, [r3, #4]
   26394:	b123      	cbz	r3, 263a0 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   26396:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   2639a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   2639e:	4718      	bx	r3
}
   263a0:	bd10      	pop	{r4, pc}

000263a2 <discovery_complete_error>:
{
   263a2:	b570      	push	{r4, r5, r6, lr}
   263a4:	4604      	mov	r4, r0
   263a6:	460d      	mov	r5, r1
	svc_attr_memory_release(dm);
   263a8:	f7ff ffc1 	bl	2632e <svc_attr_memory_release>
   263ac:	f06f 0101 	mvn.w	r1, #1
   263b0:	f504 709c 	add.w	r0, r4, #312	; 0x138
   263b4:	f7ff ffd2 	bl	2635c <atomic_and>
	if (dm->callback->error_found) {
   263b8:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
   263bc:	689b      	ldr	r3, [r3, #8]
   263be:	b12b      	cbz	r3, 263cc <discovery_complete_error+0x2a>
		dm->callback->error_found(dm->conn, err, dm->context);
   263c0:	6862      	ldr	r2, [r4, #4]
   263c2:	6820      	ldr	r0, [r4, #0]
   263c4:	4629      	mov	r1, r5
}
   263c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
   263ca:	4718      	bx	r3
}
   263cc:	bd70      	pop	{r4, r5, r6, pc}

000263ce <bt_gatt_dm_attr_service_val>:
{
   263ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   263d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   263d4:	6801      	ldr	r1, [r0, #0]
   263d6:	f8ad 3002 	strh.w	r3, [sp, #2]
{
   263da:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   263dc:	2400      	movs	r4, #0
   263de:	4668      	mov	r0, sp
   263e0:	f88d 4000 	strb.w	r4, [sp]
   263e4:	f000 fc49 	bl	26c7a <bt_uuid_cmp>
   263e8:	b918      	cbnz	r0, 263f2 <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   263ea:	6828      	ldr	r0, [r5, #0]
   263ec:	3808      	subs	r0, #8
}
   263ee:	b003      	add	sp, #12
   263f0:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   263f2:	f642 0301 	movw	r3, #10241	; 0x2801
   263f6:	6829      	ldr	r1, [r5, #0]
   263f8:	f88d 4004 	strb.w	r4, [sp, #4]
   263fc:	a801      	add	r0, sp, #4
   263fe:	f8ad 3006 	strh.w	r3, [sp, #6]
   26402:	f000 fc3a 	bl	26c7a <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   26406:	2800      	cmp	r0, #0
   26408:	d0ef      	beq.n	263ea <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   2640a:	4620      	mov	r0, r4
   2640c:	e7ef      	b.n	263ee <bt_gatt_dm_attr_service_val+0x20>

0002640e <bt_gatt_dm_attr_chrc_val>:
{
   2640e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   26410:	f642 0303 	movw	r3, #10243	; 0x2803
   26414:	6801      	ldr	r1, [r0, #0]
   26416:	f8ad 3006 	strh.w	r3, [sp, #6]
{
   2641a:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   2641c:	2400      	movs	r4, #0
   2641e:	a801      	add	r0, sp, #4
   26420:	f88d 4004 	strb.w	r4, [sp, #4]
   26424:	f000 fc29 	bl	26c7a <bt_uuid_cmp>
   26428:	b918      	cbnz	r0, 26432 <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   2642a:	6828      	ldr	r0, [r5, #0]
   2642c:	3808      	subs	r0, #8
}
   2642e:	b003      	add	sp, #12
   26430:	bd30      	pop	{r4, r5, pc}
	return NULL;
   26432:	4620      	mov	r0, r4
   26434:	e7fb      	b.n	2642e <bt_gatt_dm_attr_chrc_val+0x20>

00026436 <bt_gatt_dm_conn_get>:
}
   26436:	6800      	ldr	r0, [r0, #0]
   26438:	4770      	bx	lr

0002643a <bt_gatt_dm_service_get>:
}
   2643a:	301c      	adds	r0, #28
   2643c:	4770      	bx	lr

0002643e <bt_gatt_dm_char_next>:
{
   2643e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   26440:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   26444:	b131      	cbz	r1, 26454 <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   26446:	42a9      	cmp	r1, r5
   26448:	d203      	bcs.n	26452 <bt_gatt_dm_char_next+0x14>
	return NULL;
   2644a:	2500      	movs	r5, #0
}
   2644c:	4628      	mov	r0, r5
   2644e:	b003      	add	sp, #12
   26450:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26452:	460d      	mov	r5, r1
		const struct bt_gatt_dm_attr *const end =
   26454:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   26458:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   2645c:	f100 041c 	add.w	r4, r0, #28
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   26460:	2600      	movs	r6, #0
   26462:	f642 0703 	movw	r7, #10243	; 0x2803
		while (++prev < end) {
   26466:	3508      	adds	r5, #8
   26468:	42ac      	cmp	r4, r5
   2646a:	d9ee      	bls.n	2644a <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   2646c:	6829      	ldr	r1, [r5, #0]
   2646e:	f88d 6004 	strb.w	r6, [sp, #4]
   26472:	a801      	add	r0, sp, #4
   26474:	f8ad 7006 	strh.w	r7, [sp, #6]
   26478:	f000 fbff 	bl	26c7a <bt_uuid_cmp>
   2647c:	2800      	cmp	r0, #0
   2647e:	d1f2      	bne.n	26466 <bt_gatt_dm_char_next+0x28>
   26480:	e7e4      	b.n	2644c <bt_gatt_dm_char_next+0xe>

00026482 <bt_gatt_dm_attr_next>:
{
   26482:	4602      	mov	r2, r0
		prev = dm->attrs;
   26484:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   26488:	b111      	cbz	r1, 26490 <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   2648a:	4299      	cmp	r1, r3
   2648c:	d30b      	bcc.n	264a6 <bt_gatt_dm_attr_next+0x24>
   2648e:	460b      	mov	r3, r1
		if (++prev < end) {
   26490:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   26494:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   26498:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2649c:	321c      	adds	r2, #28
	return NULL;
   2649e:	4290      	cmp	r0, r2
   264a0:	bf28      	it	cs
   264a2:	2000      	movcs	r0, #0
   264a4:	4770      	bx	lr
   264a6:	2000      	movs	r0, #0
}
   264a8:	4770      	bx	lr

000264aa <bt_gatt_dm_desc_next>:
{
   264aa:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   264ac:	f7ff ffe9 	bl	26482 <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   264b0:	4604      	mov	r4, r0
   264b2:	b158      	cbz	r0, 264cc <bt_gatt_dm_desc_next+0x22>
   264b4:	2300      	movs	r3, #0
   264b6:	f88d 3004 	strb.w	r3, [sp, #4]
   264ba:	6801      	ldr	r1, [r0, #0]
   264bc:	f642 0303 	movw	r3, #10243	; 0x2803
   264c0:	a801      	add	r0, sp, #4
   264c2:	f8ad 3006 	strh.w	r3, [sp, #6]
   264c6:	f000 fbd8 	bl	26c7a <bt_uuid_cmp>
   264ca:	b900      	cbnz	r0, 264ce <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   264cc:	2400      	movs	r4, #0
}
   264ce:	4620      	mov	r0, r4
   264d0:	b002      	add	sp, #8
   264d2:	bd10      	pop	{r4, pc}

000264d4 <bt_gatt_dm_desc_by_uuid>:
{
   264d4:	b570      	push	{r4, r5, r6, lr}
   264d6:	4605      	mov	r5, r0
   264d8:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   264da:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   264dc:	4621      	mov	r1, r4
   264de:	4628      	mov	r0, r5
   264e0:	f7ff ffe3 	bl	264aa <bt_gatt_dm_desc_next>
   264e4:	4604      	mov	r4, r0
   264e6:	b128      	cbz	r0, 264f4 <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   264e8:	6821      	ldr	r1, [r4, #0]
   264ea:	4630      	mov	r0, r6
   264ec:	f000 fbc5 	bl	26c7a <bt_uuid_cmp>
   264f0:	2800      	cmp	r0, #0
   264f2:	d1f3      	bne.n	264dc <bt_gatt_dm_desc_by_uuid+0x8>
}
   264f4:	4620      	mov	r0, r4
   264f6:	bd70      	pop	{r4, r5, r6, pc}

000264f8 <bt_gatt_dm_data_release>:
{
   264f8:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   264fa:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   264fe:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26500:	f06f 0102 	mvn.w	r1, #2
   26504:	4628      	mov	r0, r5
   26506:	f7ff ff29 	bl	2635c <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   2650a:	0783      	lsls	r3, r0, #30
   2650c:	d509      	bpl.n	26522 <bt_gatt_dm_data_release+0x2a>
	svc_attr_memory_release(dm);
   2650e:	4620      	mov	r0, r4
   26510:	f7ff ff0d 	bl	2632e <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26514:	f06f 0101 	mvn.w	r1, #1
   26518:	4628      	mov	r0, r5
   2651a:	f7ff ff1f 	bl	2635c <atomic_and>
	return 0;
   2651e:	2000      	movs	r0, #0
}
   26520:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   26522:	f06f 0077 	mvn.w	r0, #119	; 0x77
   26526:	e7fb      	b.n	26520 <bt_gatt_dm_data_release+0x28>

00026528 <adv_data_found>:
{
   26528:	b510      	push	{r4, lr}
   2652a:	4604      	mov	r4, r0
   2652c:	4608      	mov	r0, r1
	switch (data->type) {
   2652e:	7823      	ldrb	r3, [r4, #0]
   26530:	2b05      	cmp	r3, #5
   26532:	d806      	bhi.n	26542 <adv_data_found+0x1a>
   26534:	2b03      	cmp	r3, #3
   26536:	d80e      	bhi.n	26556 <adv_data_found+0x2e>
   26538:	3b02      	subs	r3, #2
   2653a:	2b01      	cmp	r3, #1
   2653c:	d906      	bls.n	2654c <adv_data_found+0x24>
}
   2653e:	2001      	movs	r0, #1
   26540:	bd10      	pop	{r4, pc}
	switch (data->type) {
   26542:	3b06      	subs	r3, #6
   26544:	2b01      	cmp	r3, #1
   26546:	d8fa      	bhi.n	2653e <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   26548:	2202      	movs	r2, #2
   2654a:	e000      	b.n	2654e <adv_data_found+0x26>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
   2654c:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   2654e:	4621      	mov	r1, r4
   26550:	f7ed fc62 	bl	13e18 <uuid_check>
		break;
   26554:	e7f3      	b.n	2653e <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
   26556:	2201      	movs	r2, #1
   26558:	e7f9      	b.n	2654e <adv_data_found+0x26>

0002655a <bt_scan_stop>:
	return bt_le_scan_stop();
   2655a:	f7f1 b813 	b.w	17584 <bt_le_scan_stop>

0002655e <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2655e:	b538      	push	{r3, r4, r5, lr}
   26560:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   26562:	42ab      	cmp	r3, r5
{
   26564:	4611      	mov	r1, r2
   26566:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   26568:	d804      	bhi.n	26574 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2656a:	461a      	mov	r2, r3
   2656c:	f000 faf1 	bl	26b52 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   26570:	4620      	mov	r0, r4
   26572:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   26574:	2400      	movs	r4, #0
   26576:	e7fb      	b.n	26570 <_copy+0x12>

00026578 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   26578:	f000 baf6 	b.w	26b68 <memset>

0002657c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2657c:	09c3      	lsrs	r3, r0, #7
   2657e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26582:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   26586:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2658a:	b2c0      	uxtb	r0, r0
   2658c:	4770      	bx	lr

0002658e <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2658e:	78cb      	ldrb	r3, [r1, #3]
   26590:	7802      	ldrb	r2, [r0, #0]
   26592:	4053      	eors	r3, r2
   26594:	7003      	strb	r3, [r0, #0]
   26596:	884b      	ldrh	r3, [r1, #2]
   26598:	7842      	ldrb	r2, [r0, #1]
   2659a:	4053      	eors	r3, r2
   2659c:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2659e:	680a      	ldr	r2, [r1, #0]
   265a0:	7883      	ldrb	r3, [r0, #2]
   265a2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   265a6:	7083      	strb	r3, [r0, #2]
   265a8:	680a      	ldr	r2, [r1, #0]
   265aa:	78c3      	ldrb	r3, [r0, #3]
   265ac:	4053      	eors	r3, r2
   265ae:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   265b0:	79cb      	ldrb	r3, [r1, #7]
   265b2:	7902      	ldrb	r2, [r0, #4]
   265b4:	4053      	eors	r3, r2
   265b6:	7103      	strb	r3, [r0, #4]
   265b8:	88cb      	ldrh	r3, [r1, #6]
   265ba:	7942      	ldrb	r2, [r0, #5]
   265bc:	4053      	eors	r3, r2
   265be:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   265c0:	684a      	ldr	r2, [r1, #4]
   265c2:	7983      	ldrb	r3, [r0, #6]
   265c4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   265c8:	7183      	strb	r3, [r0, #6]
   265ca:	684a      	ldr	r2, [r1, #4]
   265cc:	79c3      	ldrb	r3, [r0, #7]
   265ce:	4053      	eors	r3, r2
   265d0:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   265d2:	7acb      	ldrb	r3, [r1, #11]
   265d4:	7a02      	ldrb	r2, [r0, #8]
   265d6:	4053      	eors	r3, r2
   265d8:	7203      	strb	r3, [r0, #8]
   265da:	7a42      	ldrb	r2, [r0, #9]
   265dc:	894b      	ldrh	r3, [r1, #10]
   265de:	4053      	eors	r3, r2
   265e0:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   265e2:	688a      	ldr	r2, [r1, #8]
   265e4:	7a83      	ldrb	r3, [r0, #10]
   265e6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   265ea:	7283      	strb	r3, [r0, #10]
   265ec:	688a      	ldr	r2, [r1, #8]
   265ee:	7ac3      	ldrb	r3, [r0, #11]
   265f0:	4053      	eors	r3, r2
   265f2:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   265f4:	7bcb      	ldrb	r3, [r1, #15]
   265f6:	7b02      	ldrb	r2, [r0, #12]
   265f8:	4053      	eors	r3, r2
   265fa:	7303      	strb	r3, [r0, #12]
   265fc:	89cb      	ldrh	r3, [r1, #14]
   265fe:	7b42      	ldrb	r2, [r0, #13]
   26600:	4053      	eors	r3, r2
   26602:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   26604:	68ca      	ldr	r2, [r1, #12]
   26606:	7b83      	ldrb	r3, [r0, #14]
   26608:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2660c:	7383      	strb	r3, [r0, #14]
   2660e:	68ca      	ldr	r2, [r1, #12]
   26610:	7bc3      	ldrb	r3, [r0, #15]
   26612:	4053      	eors	r3, r2
   26614:	73c3      	strb	r3, [r0, #15]
}
   26616:	4770      	bx	lr

00026618 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   26618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2661a:	7802      	ldrb	r2, [r0, #0]
   2661c:	f88d 2000 	strb.w	r2, [sp]
   26620:	7942      	ldrb	r2, [r0, #5]
   26622:	f88d 2001 	strb.w	r2, [sp, #1]
   26626:	7a82      	ldrb	r2, [r0, #10]
   26628:	f88d 2002 	strb.w	r2, [sp, #2]
   2662c:	7bc2      	ldrb	r2, [r0, #15]
   2662e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   26632:	7902      	ldrb	r2, [r0, #4]
   26634:	f88d 2004 	strb.w	r2, [sp, #4]
   26638:	7a42      	ldrb	r2, [r0, #9]
   2663a:	f88d 2005 	strb.w	r2, [sp, #5]
   2663e:	7b82      	ldrb	r2, [r0, #14]
   26640:	f88d 2006 	strb.w	r2, [sp, #6]
   26644:	78c2      	ldrb	r2, [r0, #3]
   26646:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2664a:	7a02      	ldrb	r2, [r0, #8]
   2664c:	f88d 2008 	strb.w	r2, [sp, #8]
   26650:	7b42      	ldrb	r2, [r0, #13]
   26652:	f88d 2009 	strb.w	r2, [sp, #9]
   26656:	7882      	ldrb	r2, [r0, #2]
   26658:	f88d 200a 	strb.w	r2, [sp, #10]
   2665c:	79c2      	ldrb	r2, [r0, #7]
   2665e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   26662:	7b02      	ldrb	r2, [r0, #12]
   26664:	f88d 200c 	strb.w	r2, [sp, #12]
   26668:	7842      	ldrb	r2, [r0, #1]
   2666a:	7ac3      	ldrb	r3, [r0, #11]
   2666c:	f88d 200d 	strb.w	r2, [sp, #13]
   26670:	7982      	ldrb	r2, [r0, #6]
   26672:	f88d 200e 	strb.w	r2, [sp, #14]
   26676:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2667a:	2310      	movs	r3, #16
   2667c:	466a      	mov	r2, sp
   2667e:	4619      	mov	r1, r3
   26680:	f7ff ff6d 	bl	2655e <_copy>
}
   26684:	b005      	add	sp, #20
   26686:	f85d fb04 	ldr.w	pc, [sp], #4

0002668a <mult_row_column>:
{
   2668a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2668c:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2668e:	7808      	ldrb	r0, [r1, #0]
{
   26690:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   26692:	f7ff ff73 	bl	2657c <_double_byte>
   26696:	4605      	mov	r5, r0
   26698:	7860      	ldrb	r0, [r4, #1]
   2669a:	f7ff ff6f 	bl	2657c <_double_byte>
   2669e:	78a2      	ldrb	r2, [r4, #2]
   266a0:	7863      	ldrb	r3, [r4, #1]
   266a2:	4053      	eors	r3, r2
   266a4:	78e2      	ldrb	r2, [r4, #3]
   266a6:	4053      	eors	r3, r2
   266a8:	405d      	eors	r5, r3
   266aa:	4045      	eors	r5, r0
   266ac:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   266ae:	7860      	ldrb	r0, [r4, #1]
   266b0:	7827      	ldrb	r7, [r4, #0]
   266b2:	f7ff ff63 	bl	2657c <_double_byte>
   266b6:	4605      	mov	r5, r0
   266b8:	78a0      	ldrb	r0, [r4, #2]
   266ba:	f7ff ff5f 	bl	2657c <_double_byte>
   266be:	78a3      	ldrb	r3, [r4, #2]
   266c0:	405f      	eors	r7, r3
   266c2:	78e3      	ldrb	r3, [r4, #3]
   266c4:	405f      	eors	r7, r3
   266c6:	407d      	eors	r5, r7
   266c8:	4045      	eors	r5, r0
   266ca:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   266cc:	78a0      	ldrb	r0, [r4, #2]
   266ce:	7865      	ldrb	r5, [r4, #1]
   266d0:	7827      	ldrb	r7, [r4, #0]
   266d2:	f7ff ff53 	bl	2657c <_double_byte>
   266d6:	406f      	eors	r7, r5
   266d8:	4605      	mov	r5, r0
   266da:	78e0      	ldrb	r0, [r4, #3]
   266dc:	f7ff ff4e 	bl	2657c <_double_byte>
   266e0:	78e3      	ldrb	r3, [r4, #3]
   266e2:	405f      	eors	r7, r3
   266e4:	407d      	eors	r5, r7
   266e6:	4045      	eors	r5, r0
   266e8:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   266ea:	7820      	ldrb	r0, [r4, #0]
   266ec:	f7ff ff46 	bl	2657c <_double_byte>
   266f0:	7863      	ldrb	r3, [r4, #1]
   266f2:	7825      	ldrb	r5, [r4, #0]
   266f4:	405d      	eors	r5, r3
   266f6:	78a3      	ldrb	r3, [r4, #2]
   266f8:	405d      	eors	r5, r3
   266fa:	4045      	eors	r5, r0
   266fc:	78e0      	ldrb	r0, [r4, #3]
   266fe:	f7ff ff3d 	bl	2657c <_double_byte>
   26702:	b2ed      	uxtb	r5, r5
   26704:	4045      	eors	r5, r0
   26706:	70f5      	strb	r5, [r6, #3]
}
   26708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002670a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2670a:	b570      	push	{r4, r5, r6, lr}
   2670c:	4614      	mov	r4, r2
   2670e:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   26710:	4605      	mov	r5, r0
   26712:	2800      	cmp	r0, #0
   26714:	d049      	beq.n	267aa <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   26716:	2900      	cmp	r1, #0
   26718:	d049      	beq.n	267ae <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2671a:	2a00      	cmp	r2, #0
   2671c:	d049      	beq.n	267b2 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2671e:	2310      	movs	r3, #16
   26720:	460a      	mov	r2, r1
   26722:	4668      	mov	r0, sp
   26724:	4619      	mov	r1, r3
   26726:	f7ff ff1a 	bl	2655e <_copy>
	add_round_key(state, s->words);
   2672a:	4621      	mov	r1, r4
   2672c:	4668      	mov	r0, sp
   2672e:	f7ff ff2e 	bl	2658e <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   26732:	3410      	adds	r4, #16
   26734:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   26738:	4668      	mov	r0, sp
   2673a:	f7ed fd63 	bl	14204 <sub_bytes>
		shift_rows(state);
   2673e:	4668      	mov	r0, sp
   26740:	f7ff ff6a 	bl	26618 <shift_rows>
	mult_row_column(t, s);
   26744:	4669      	mov	r1, sp
   26746:	a804      	add	r0, sp, #16
   26748:	f7ff ff9f 	bl	2668a <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2674c:	a901      	add	r1, sp, #4
   2674e:	a805      	add	r0, sp, #20
   26750:	f7ff ff9b 	bl	2668a <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   26754:	a902      	add	r1, sp, #8
   26756:	a806      	add	r0, sp, #24
   26758:	f7ff ff97 	bl	2668a <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2675c:	a903      	add	r1, sp, #12
   2675e:	a807      	add	r0, sp, #28
   26760:	f7ff ff93 	bl	2668a <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   26764:	2310      	movs	r3, #16
   26766:	4619      	mov	r1, r3
   26768:	eb0d 0203 	add.w	r2, sp, r3
   2676c:	4668      	mov	r0, sp
   2676e:	f7ff fef6 	bl	2655e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   26772:	4621      	mov	r1, r4
   26774:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   26776:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   26778:	f7ff ff09 	bl	2658e <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2677c:	42a6      	cmp	r6, r4
   2677e:	d1db      	bne.n	26738 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   26780:	f7ed fd40 	bl	14204 <sub_bytes>
	shift_rows(state);
   26784:	4668      	mov	r0, sp
   26786:	f7ff ff47 	bl	26618 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2678a:	4631      	mov	r1, r6
   2678c:	4668      	mov	r0, sp
   2678e:	f7ff fefe 	bl	2658e <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   26792:	2310      	movs	r3, #16
   26794:	4619      	mov	r1, r3
   26796:	466a      	mov	r2, sp
   26798:	4628      	mov	r0, r5
   2679a:	f7ff fee0 	bl	2655e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2679e:	4668      	mov	r0, sp
   267a0:	2210      	movs	r2, #16
   267a2:	2100      	movs	r1, #0
   267a4:	f7ff fee8 	bl	26578 <_set>

	return TC_CRYPTO_SUCCESS;
   267a8:	2001      	movs	r0, #1
}
   267aa:	b008      	add	sp, #32
   267ac:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   267ae:	4608      	mov	r0, r1
   267b0:	e7fb      	b.n	267aa <tc_aes_encrypt+0xa0>
   267b2:	4610      	mov	r0, r2
   267b4:	e7f9      	b.n	267aa <tc_aes_encrypt+0xa0>

000267b6 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   267b6:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   267b8:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   267ba:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   267bc:	f912 3b10 	ldrsb.w	r3, [r2], #16
   267c0:	2b00      	cmp	r3, #0
   267c2:	bfb4      	ite	lt
   267c4:	2387      	movlt	r3, #135	; 0x87
   267c6:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   267c8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   267cc:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   267d0:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   267d2:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   267d6:	d002      	beq.n	267de <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   267d8:	7813      	ldrb	r3, [r2, #0]
   267da:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   267dc:	e7f4      	b.n	267c8 <gf_double+0x12>
	}
}
   267de:	bd10      	pop	{r4, pc}

000267e0 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   267e0:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   267e2:	b120      	cbz	r0, 267ee <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   267e4:	2258      	movs	r2, #88	; 0x58
   267e6:	2100      	movs	r1, #0
   267e8:	f7ff fec6 	bl	26578 <_set>
   267ec:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   267ee:	bd08      	pop	{r3, pc}

000267f0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   267f0:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   267f2:	4604      	mov	r4, r0
   267f4:	b188      	cbz	r0, 2681a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   267f6:	2210      	movs	r2, #16
   267f8:	2100      	movs	r1, #0
   267fa:	f7ff febd 	bl	26578 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   267fe:	2210      	movs	r2, #16
   26800:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26804:	2100      	movs	r1, #0
   26806:	f7ff feb7 	bl	26578 <_set>
	s->leftover_offset = 0;
   2680a:	2300      	movs	r3, #0
   2680c:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2680e:	2200      	movs	r2, #0
   26810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   26814:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   26818:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2681a:	bd10      	pop	{r4, pc}

0002681c <tc_cmac_setup>:
{
   2681c:	b570      	push	{r4, r5, r6, lr}
   2681e:	460d      	mov	r5, r1
   26820:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   26822:	4604      	mov	r4, r0
   26824:	b310      	cbz	r0, 2686c <tc_cmac_setup+0x50>
   26826:	b311      	cbz	r1, 2686e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   26828:	2258      	movs	r2, #88	; 0x58
   2682a:	2100      	movs	r1, #0
   2682c:	f7ff fea4 	bl	26578 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   26830:	4629      	mov	r1, r5
	s->sched = sched;
   26832:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   26834:	4630      	mov	r0, r6
   26836:	f7ed fcf1 	bl	1421c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2683a:	2210      	movs	r2, #16
   2683c:	2100      	movs	r1, #0
   2683e:	4620      	mov	r0, r4
   26840:	f7ff fe9a 	bl	26578 <_set>
	gf_double (s->K1, s->iv);
   26844:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   26848:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2684a:	4621      	mov	r1, r4
   2684c:	4620      	mov	r0, r4
   2684e:	f7ff ff5c 	bl	2670a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   26852:	4621      	mov	r1, r4
   26854:	4628      	mov	r0, r5
   26856:	f7ff ffae 	bl	267b6 <gf_double>
	gf_double (s->K2, s->K1);
   2685a:	4629      	mov	r1, r5
   2685c:	f104 0020 	add.w	r0, r4, #32
   26860:	f7ff ffa9 	bl	267b6 <gf_double>
	tc_cmac_init(s);
   26864:	4620      	mov	r0, r4
   26866:	f7ff ffc3 	bl	267f0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2686a:	2001      	movs	r0, #1
}
   2686c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2686e:	4608      	mov	r0, r1
   26870:	e7fc      	b.n	2686c <tc_cmac_setup+0x50>

00026872 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   26872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26876:	460d      	mov	r5, r1
   26878:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2687a:	4604      	mov	r4, r0
   2687c:	2800      	cmp	r0, #0
   2687e:	d061      	beq.n	26944 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   26880:	b912      	cbnz	r2, 26888 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   26882:	2001      	movs	r0, #1
}
   26884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   26888:	2900      	cmp	r1, #0
   2688a:	d05b      	beq.n	26944 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   2688c:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   26890:	ea53 0102 	orrs.w	r1, r3, r2
   26894:	d056      	beq.n	26944 <tc_cmac_update+0xd2>
	s->countdown--;
   26896:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   26898:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2689c:	f142 32ff 	adc.w	r2, r2, #4294967295
   268a0:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   268a4:	f1b8 0f00 	cmp.w	r8, #0
   268a8:	d02a      	beq.n	26900 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   268aa:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   268ae:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   268b2:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   268b4:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   268b6:	d208      	bcs.n	268ca <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   268b8:	462a      	mov	r2, r5
   268ba:	4633      	mov	r3, r6
   268bc:	4631      	mov	r1, r6
   268be:	f7ff fe4e 	bl	2655e <_copy>
			s->leftover_offset += data_length;
   268c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   268c4:	4432      	add	r2, r6
   268c6:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   268c8:	e7db      	b.n	26882 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   268ca:	463b      	mov	r3, r7
   268cc:	462a      	mov	r2, r5
   268ce:	4639      	mov	r1, r7
   268d0:	f7ff fe45 	bl	2655e <_copy>
		data_length -= remaining_space;
   268d4:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   268d6:	2300      	movs	r3, #0
   268d8:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   268da:	4446      	add	r6, r8
		data += remaining_space;
   268dc:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   268de:	1e63      	subs	r3, r4, #1
   268e0:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   268e4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   268e8:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   268ec:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   268ee:	ea82 0200 	eor.w	r2, r2, r0
   268f2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   268f4:	d1f6      	bne.n	268e4 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   268f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   268f8:	4621      	mov	r1, r4
   268fa:	4620      	mov	r0, r4
   268fc:	f7ff ff05 	bl	2670a <tc_aes_encrypt>
   26900:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   26904:	2e10      	cmp	r6, #16
   26906:	d80a      	bhi.n	2691e <tc_cmac_update+0xac>
	if (data_length > 0) {
   26908:	2e00      	cmp	r6, #0
   2690a:	d0ba      	beq.n	26882 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   2690c:	4633      	mov	r3, r6
   2690e:	462a      	mov	r2, r5
   26910:	4631      	mov	r1, r6
   26912:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26916:	f7ff fe22 	bl	2655e <_copy>
		s->leftover_offset = data_length;
   2691a:	6466      	str	r6, [r4, #68]	; 0x44
   2691c:	e7b1      	b.n	26882 <tc_cmac_update+0x10>
   2691e:	1e63      	subs	r3, r4, #1
   26920:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   26922:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26926:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2692a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2692c:	ea82 0200 	eor.w	r2, r2, r0
   26930:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26932:	d1f6      	bne.n	26922 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26934:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26936:	4621      	mov	r1, r4
   26938:	4620      	mov	r0, r4
   2693a:	f7ff fee6 	bl	2670a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2693e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   26940:	3e10      	subs	r6, #16
   26942:	e7df      	b.n	26904 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   26944:	2000      	movs	r0, #0
   26946:	e79d      	b.n	26884 <tc_cmac_update+0x12>

00026948 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   26948:	b570      	push	{r4, r5, r6, lr}
   2694a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2694c:	4605      	mov	r5, r0
   2694e:	b1e8      	cbz	r0, 2698c <tc_cmac_final+0x44>
   26950:	b369      	cbz	r1, 269ae <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   26952:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   26954:	2a10      	cmp	r2, #16
   26956:	d11a      	bne.n	2698e <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   26958:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2695a:	1e63      	subs	r3, r4, #1
   2695c:	3901      	subs	r1, #1
   2695e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26962:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26966:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2696a:	4072      	eors	r2, r6
   2696c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26970:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26972:	ea82 0206 	eor.w	r2, r2, r6
   26976:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26978:	d1f3      	bne.n	26962 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2697a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2697c:	4621      	mov	r1, r4
   2697e:	4628      	mov	r0, r5
   26980:	f7ff fec3 	bl	2670a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   26984:	4620      	mov	r0, r4
   26986:	f7ff ff2b 	bl	267e0 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2698a:	2001      	movs	r0, #1
}
   2698c:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2698e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   26992:	2100      	movs	r1, #0
   26994:	f1c2 0210 	rsb	r2, r2, #16
   26998:	4420      	add	r0, r4
   2699a:	f7ff fded 	bl	26578 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2699e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   269a0:	4423      	add	r3, r4
   269a2:	2280      	movs	r2, #128	; 0x80
   269a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   269a8:	f104 0120 	add.w	r1, r4, #32
   269ac:	e7d5      	b.n	2695a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   269ae:	4608      	mov	r0, r1
   269b0:	e7ec      	b.n	2698c <tc_cmac_final+0x44>

000269b2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   269b2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   269b4:	6800      	ldr	r0, [r0, #0]
   269b6:	f7ed bca1 	b.w	142fc <z_arm_fatal_error>

000269ba <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   269ba:	2100      	movs	r1, #0
   269bc:	2001      	movs	r0, #1
   269be:	f7ed bc9d 	b.w	142fc <z_arm_fatal_error>

000269c2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   269c2:	b508      	push	{r3, lr}
	handler();
   269c4:	f7ed fd34 	bl	14430 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   269c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   269cc:	f7ed be0c 	b.w	145e8 <z_arm_exc_exit>

000269d0 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   269d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   269d4:	4607      	mov	r7, r0
   269d6:	4688      	mov	r8, r1
	register const char *s = nptr;
   269d8:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   269da:	4621      	mov	r1, r4
   269dc:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   269e0:	2b20      	cmp	r3, #32
   269e2:	d0fa      	beq.n	269da <strtoul+0xa>
   269e4:	f1a3 0009 	sub.w	r0, r3, #9
   269e8:	2804      	cmp	r0, #4
   269ea:	d9f6      	bls.n	269da <strtoul+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   269ec:	2b2d      	cmp	r3, #45	; 0x2d
   269ee:	d12f      	bne.n	26a50 <strtoul+0x80>
		neg = 1;
		c = *s++;
   269f0:	784b      	ldrb	r3, [r1, #1]
   269f2:	1c8c      	adds	r4, r1, #2
		neg = 1;
   269f4:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   269f8:	2a00      	cmp	r2, #0
   269fa:	d05e      	beq.n	26aba <strtoul+0xea>
   269fc:	2a10      	cmp	r2, #16
   269fe:	d109      	bne.n	26a14 <strtoul+0x44>
   26a00:	2b30      	cmp	r3, #48	; 0x30
   26a02:	d107      	bne.n	26a14 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   26a04:	7823      	ldrb	r3, [r4, #0]
   26a06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   26a0a:	2b58      	cmp	r3, #88	; 0x58
   26a0c:	d150      	bne.n	26ab0 <strtoul+0xe0>
		c = s[1];
   26a0e:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   26a10:	2210      	movs	r2, #16
		s += 2;
   26a12:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   26a14:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   26a18:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   26a1a:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   26a1e:	fb02 fe01 	mul.w	lr, r2, r1
   26a22:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   26a26:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   26a28:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   26a2c:	2d09      	cmp	r5, #9
   26a2e:	d816      	bhi.n	26a5e <strtoul+0x8e>
			c -= '0';
   26a30:	462b      	mov	r3, r5
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   26a32:	429a      	cmp	r2, r3
   26a34:	dd23      	ble.n	26a7e <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   26a36:	2e00      	cmp	r6, #0
   26a38:	db1e      	blt.n	26a78 <strtoul+0xa8>
   26a3a:	4288      	cmp	r0, r1
   26a3c:	d81c      	bhi.n	26a78 <strtoul+0xa8>
   26a3e:	d101      	bne.n	26a44 <strtoul+0x74>
   26a40:	4573      	cmp	r3, lr
   26a42:	dc19      	bgt.n	26a78 <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   26a44:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   26a48:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   26a4a:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   26a4e:	e7eb      	b.n	26a28 <strtoul+0x58>
	} else if (c == '+') {
   26a50:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   26a52:	bf04      	itt	eq
   26a54:	784b      	ldrbeq	r3, [r1, #1]
   26a56:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   26a58:	f04f 0c00 	mov.w	ip, #0
   26a5c:	e7cc      	b.n	269f8 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   26a5e:	f043 0520 	orr.w	r5, r3, #32
   26a62:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   26a64:	2d19      	cmp	r5, #25
   26a66:	d80a      	bhi.n	26a7e <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26a68:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   26a6c:	2d1a      	cmp	r5, #26
   26a6e:	bf34      	ite	cc
   26a70:	2537      	movcc	r5, #55	; 0x37
   26a72:	2557      	movcs	r5, #87	; 0x57
   26a74:	1b5b      	subs	r3, r3, r5
   26a76:	e7dc      	b.n	26a32 <strtoul+0x62>
			any = -1;
   26a78:	f04f 36ff 	mov.w	r6, #4294967295
   26a7c:	e7e5      	b.n	26a4a <strtoul+0x7a>
		}
	}
	if (any < 0) {
   26a7e:	2e00      	cmp	r6, #0
   26a80:	da0a      	bge.n	26a98 <strtoul+0xc8>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   26a82:	f7fa ffc1 	bl	21a08 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   26a86:	2322      	movs	r3, #34	; 0x22
   26a88:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   26a8a:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   26a8e:	f1b8 0f00 	cmp.w	r8, #0
   26a92:	d109      	bne.n	26aa8 <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   26a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   26a98:	f1bc 0f00 	cmp.w	ip, #0
   26a9c:	d000      	beq.n	26aa0 <strtoul+0xd0>
		acc = -acc;
   26a9e:	4240      	negs	r0, r0
	if (endptr != NULL) {
   26aa0:	f1b8 0f00 	cmp.w	r8, #0
   26aa4:	d0f6      	beq.n	26a94 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   26aa6:	b106      	cbz	r6, 26aaa <strtoul+0xda>
   26aa8:	1e67      	subs	r7, r4, #1
   26aaa:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   26aae:	e7f1      	b.n	26a94 <strtoul+0xc4>
	if (base == 0) {
   26ab0:	2330      	movs	r3, #48	; 0x30
   26ab2:	2a00      	cmp	r2, #0
   26ab4:	d1ae      	bne.n	26a14 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   26ab6:	2208      	movs	r2, #8
   26ab8:	e7ac      	b.n	26a14 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   26aba:	2b30      	cmp	r3, #48	; 0x30
   26abc:	d0a2      	beq.n	26a04 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   26abe:	220a      	movs	r2, #10
   26ac0:	e7a8      	b.n	26a14 <strtoul+0x44>

00026ac2 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   26ac2:	3901      	subs	r1, #1
   26ac4:	4603      	mov	r3, r0
   26ac6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   26aca:	b90a      	cbnz	r2, 26ad0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   26acc:	701a      	strb	r2, [r3, #0]

	return dest;
}
   26ace:	4770      	bx	lr
		*d = *s;
   26ad0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   26ad4:	e7f7      	b.n	26ac6 <strcpy+0x4>

00026ad6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   26ad6:	4603      	mov	r3, r0
	size_t n = 0;
   26ad8:	2000      	movs	r0, #0

	while (*s != '\0') {
   26ada:	5c1a      	ldrb	r2, [r3, r0]
   26adc:	b902      	cbnz	r2, 26ae0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   26ade:	4770      	bx	lr
		n++;
   26ae0:	3001      	adds	r0, #1
   26ae2:	e7fa      	b.n	26ada <strlen+0x4>

00026ae4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   26ae4:	4603      	mov	r3, r0
	size_t n = 0;
   26ae6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   26ae8:	5c1a      	ldrb	r2, [r3, r0]
   26aea:	b10a      	cbz	r2, 26af0 <strnlen+0xc>
   26aec:	4288      	cmp	r0, r1
   26aee:	d100      	bne.n	26af2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   26af0:	4770      	bx	lr
		n++;
   26af2:	3001      	adds	r0, #1
   26af4:	e7f8      	b.n	26ae8 <strnlen+0x4>

00026af6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   26af6:	1e43      	subs	r3, r0, #1
   26af8:	3901      	subs	r1, #1
   26afa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26afe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   26b02:	4282      	cmp	r2, r0
   26b04:	d101      	bne.n	26b0a <strcmp+0x14>
   26b06:	2a00      	cmp	r2, #0
   26b08:	d1f7      	bne.n	26afa <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   26b0a:	1a10      	subs	r0, r2, r0
   26b0c:	4770      	bx	lr

00026b0e <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   26b0e:	b510      	push	{r4, lr}
   26b10:	3901      	subs	r1, #1
   26b12:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   26b14:	4282      	cmp	r2, r0
   26b16:	d009      	beq.n	26b2c <strncmp+0x1e>
   26b18:	7803      	ldrb	r3, [r0, #0]
   26b1a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   26b1e:	42a3      	cmp	r3, r4
   26b20:	d100      	bne.n	26b24 <strncmp+0x16>
   26b22:	b90b      	cbnz	r3, 26b28 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   26b24:	1b18      	subs	r0, r3, r4
   26b26:	e002      	b.n	26b2e <strncmp+0x20>
		s1++;
   26b28:	3001      	adds	r0, #1
		n--;
   26b2a:	e7f3      	b.n	26b14 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   26b2c:	2000      	movs	r0, #0
}
   26b2e:	bd10      	pop	{r4, pc}

00026b30 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   26b30:	b510      	push	{r4, lr}
   26b32:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   26b34:	b15a      	cbz	r2, 26b4e <memcmp+0x1e>
   26b36:	3901      	subs	r1, #1
   26b38:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   26b3a:	f813 0b01 	ldrb.w	r0, [r3], #1
   26b3e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   26b42:	42a3      	cmp	r3, r4
   26b44:	d001      	beq.n	26b4a <memcmp+0x1a>
   26b46:	4290      	cmp	r0, r2
   26b48:	d0f7      	beq.n	26b3a <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   26b4a:	1a80      	subs	r0, r0, r2
}
   26b4c:	bd10      	pop	{r4, pc}
		return 0;
   26b4e:	4610      	mov	r0, r2
   26b50:	e7fc      	b.n	26b4c <memcmp+0x1c>

00026b52 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   26b52:	b510      	push	{r4, lr}
   26b54:	1e43      	subs	r3, r0, #1
   26b56:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   26b58:	4291      	cmp	r1, r2
   26b5a:	d100      	bne.n	26b5e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   26b5c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   26b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   26b62:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   26b66:	e7f7      	b.n	26b58 <memcpy+0x6>

00026b68 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   26b68:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   26b6a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   26b6c:	4603      	mov	r3, r0
	while (n > 0) {
   26b6e:	4293      	cmp	r3, r2
   26b70:	d100      	bne.n	26b74 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   26b72:	4770      	bx	lr
		*(d_byte++) = c_byte;
   26b74:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   26b78:	e7f9      	b.n	26b6e <memset+0x6>

00026b7a <_stdout_hook_default>:
}
   26b7a:	f04f 30ff 	mov.w	r0, #4294967295
   26b7e:	4770      	bx	lr

00026b80 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   26b80:	2806      	cmp	r0, #6
   26b82:	d108      	bne.n	26b96 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   26b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26b88:	2201      	movs	r2, #1
   26b8a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   26b8e:	f3bf 8f4f 	dsb	sy
        __WFE();
   26b92:	bf20      	wfe
    while (true)
   26b94:	e7fd      	b.n	26b92 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   26b96:	4770      	bx	lr

00026b98 <pm_state_exit_post_ops>:
   26b98:	2300      	movs	r3, #0
   26b9a:	f383 8811 	msr	BASEPRI, r3
   26b9e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   26ba2:	4770      	bx	lr

00026ba4 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   26ba4:	b530      	push	{r4, r5, lr}
   26ba6:	b085      	sub	sp, #20
   26ba8:	4604      	mov	r4, r0
   26baa:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   26bac:	4668      	mov	r0, sp
   26bae:	2203      	movs	r2, #3
   26bb0:	f7ff ffcf 	bl	26b52 <memcpy>
	(void)memset(res + 3, 0, 13);
   26bb4:	220d      	movs	r2, #13
   26bb6:	2100      	movs	r1, #0
   26bb8:	f10d 0003 	add.w	r0, sp, #3
   26bbc:	f7ff ffd4 	bl	26b68 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   26bc0:	4620      	mov	r0, r4
   26bc2:	466a      	mov	r2, sp
   26bc4:	4669      	mov	r1, sp
   26bc6:	f002 fd60 	bl	2968a <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   26bca:	4604      	mov	r4, r0
   26bcc:	b920      	cbnz	r0, 26bd8 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   26bce:	2203      	movs	r2, #3
   26bd0:	4669      	mov	r1, sp
   26bd2:	4628      	mov	r0, r5
   26bd4:	f7ff ffbd 	bl	26b52 <memcpy>

	return 0;
}
   26bd8:	4620      	mov	r0, r4
   26bda:	b005      	add	sp, #20
   26bdc:	bd30      	pop	{r4, r5, pc}

00026bde <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   26bde:	b513      	push	{r0, r1, r4, lr}
   26be0:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   26be2:	aa01      	add	r2, sp, #4
   26be4:	3103      	adds	r1, #3
   26be6:	f7ff ffdd 	bl	26ba4 <ah>
	if (err) {
   26bea:	b948      	cbnz	r0, 26c00 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   26bec:	2203      	movs	r2, #3
   26bee:	a901      	add	r1, sp, #4
   26bf0:	4620      	mov	r0, r4
   26bf2:	f7ff ff9d 	bl	26b30 <memcmp>
   26bf6:	fab0 f080 	clz	r0, r0
   26bfa:	0940      	lsrs	r0, r0, #5
}
   26bfc:	b002      	add	sp, #8
   26bfe:	bd10      	pop	{r4, pc}
		return false;
   26c00:	2000      	movs	r0, #0
   26c02:	e7fb      	b.n	26bfc <bt_rpa_irk_matches+0x1e>

00026c04 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   26c04:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   26c06:	1cce      	adds	r6, r1, #3
{
   26c08:	4605      	mov	r5, r0
   26c0a:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   26c0c:	4630      	mov	r0, r6
   26c0e:	2103      	movs	r1, #3
   26c10:	f7f9 fcc8 	bl	205a4 <bt_rand>
	if (err) {
   26c14:	b960      	cbnz	r0, 26c30 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   26c16:	7963      	ldrb	r3, [r4, #5]
   26c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26c20:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   26c22:	4622      	mov	r2, r4
   26c24:	4631      	mov	r1, r6
   26c26:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   26c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   26c2c:	f7ff bfba 	b.w	26ba4 <ah>
}
   26c30:	bd70      	pop	{r4, r5, r6, pc}

00026c32 <bt_settings_decode_key>:
{
   26c32:	b570      	push	{r4, r5, r6, lr}
   26c34:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   26c36:	2100      	movs	r1, #0
{
   26c38:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   26c3a:	f7ff fa8a 	bl	26152 <settings_name_next>
   26c3e:	280d      	cmp	r0, #13
   26c40:	d118      	bne.n	26c74 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   26c42:	7b23      	ldrb	r3, [r4, #12]
   26c44:	2b30      	cmp	r3, #48	; 0x30
   26c46:	d111      	bne.n	26c6c <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   26c48:	2300      	movs	r3, #0
   26c4a:	702b      	strb	r3, [r5, #0]
   26c4c:	f104 060c 	add.w	r6, r4, #12
   26c50:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   26c52:	462a      	mov	r2, r5
   26c54:	4620      	mov	r0, r4
   26c56:	2301      	movs	r3, #1
   26c58:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   26c5a:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   26c5c:	f7fe fd79 	bl	25752 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   26c60:	42b4      	cmp	r4, r6
   26c62:	f105 35ff 	add.w	r5, r5, #4294967295
   26c66:	d1f4      	bne.n	26c52 <bt_settings_decode_key+0x20>
	return 0;
   26c68:	2000      	movs	r0, #0
}
   26c6a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   26c6c:	2b31      	cmp	r3, #49	; 0x31
   26c6e:	d101      	bne.n	26c74 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   26c70:	2301      	movs	r3, #1
   26c72:	e7ea      	b.n	26c4a <bt_settings_decode_key+0x18>
		return -EINVAL;
   26c74:	f06f 0015 	mvn.w	r0, #21
   26c78:	e7f7      	b.n	26c6a <bt_settings_decode_key+0x38>

00026c7a <bt_uuid_cmp>:
{
   26c7a:	b510      	push	{r4, lr}
   26c7c:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   26c7e:	7801      	ldrb	r1, [r0, #0]
   26c80:	7822      	ldrb	r2, [r4, #0]
   26c82:	428a      	cmp	r2, r1
{
   26c84:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   26c86:	d00f      	beq.n	26ca8 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   26c88:	4669      	mov	r1, sp
   26c8a:	f7ee fa7f 	bl	1518c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   26c8e:	a905      	add	r1, sp, #20
   26c90:	4620      	mov	r0, r4
   26c92:	f7ee fa7b 	bl	1518c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   26c96:	2210      	movs	r2, #16
   26c98:	f10d 0115 	add.w	r1, sp, #21
   26c9c:	f10d 0001 	add.w	r0, sp, #1
   26ca0:	f7ff ff46 	bl	26b30 <memcmp>
}
   26ca4:	b00a      	add	sp, #40	; 0x28
   26ca6:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   26ca8:	2a01      	cmp	r2, #1
   26caa:	d006      	beq.n	26cba <bt_uuid_cmp+0x40>
   26cac:	2a02      	cmp	r2, #2
   26cae:	d007      	beq.n	26cc0 <bt_uuid_cmp+0x46>
   26cb0:	b972      	cbnz	r2, 26cd0 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   26cb2:	8840      	ldrh	r0, [r0, #2]
   26cb4:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   26cb6:	1ac0      	subs	r0, r0, r3
   26cb8:	e7f4      	b.n	26ca4 <bt_uuid_cmp+0x2a>
   26cba:	6840      	ldr	r0, [r0, #4]
   26cbc:	6863      	ldr	r3, [r4, #4]
   26cbe:	e7fa      	b.n	26cb6 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26cc0:	2210      	movs	r2, #16
   26cc2:	1c61      	adds	r1, r4, #1
   26cc4:	3001      	adds	r0, #1
}
   26cc6:	b00a      	add	sp, #40	; 0x28
   26cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26ccc:	f7ff bf30 	b.w	26b30 <memcmp>
	switch (u1->type) {
   26cd0:	f06f 0015 	mvn.w	r0, #21
   26cd4:	e7e6      	b.n	26ca4 <bt_uuid_cmp+0x2a>

00026cd6 <bt_uuid_create>:
	switch (data_len) {
   26cd6:	2a04      	cmp	r2, #4
{
   26cd8:	b510      	push	{r4, lr}
	switch (data_len) {
   26cda:	d00a      	beq.n	26cf2 <bt_uuid_create+0x1c>
   26cdc:	2a10      	cmp	r2, #16
   26cde:	d00d      	beq.n	26cfc <bt_uuid_create+0x26>
   26ce0:	2a02      	cmp	r2, #2
   26ce2:	f04f 0300 	mov.w	r3, #0
   26ce6:	d10f      	bne.n	26d08 <bt_uuid_create+0x32>
		uuid->type = BT_UUID_TYPE_16;
   26ce8:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   26cea:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   26cec:	8043      	strh	r3, [r0, #2]
	return true;
   26cee:	2001      	movs	r0, #1
}
   26cf0:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   26cf2:	2301      	movs	r3, #1
   26cf4:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   26cf6:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   26cf8:	6042      	str	r2, [r0, #4]
		break;
   26cfa:	e7f8      	b.n	26cee <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   26cfc:	2302      	movs	r3, #2
   26cfe:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   26d02:	f7ff ff26 	bl	26b52 <memcpy>
		break;
   26d06:	e7f2      	b.n	26cee <bt_uuid_create+0x18>
	switch (data_len) {
   26d08:	4618      	mov	r0, r3
   26d0a:	e7f1      	b.n	26cf0 <bt_uuid_create+0x1a>

00026d0c <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   26d0c:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   26d0e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   26d10:	2106      	movs	r1, #6
{
   26d12:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   26d14:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   26d18:	f7f9 fc44 	bl	205a4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   26d1c:	b918      	cbnz	r0, 26d26 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   26d1e:	79a3      	ldrb	r3, [r4, #6]
   26d20:	f063 033f 	orn	r3, r3, #63	; 0x3f
   26d24:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   26d26:	bd10      	pop	{r4, pc}

00026d28 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   26d28:	280f      	cmp	r0, #15
   26d2a:	d806      	bhi.n	26d3a <bt_hci_evt_get_flags+0x12>
   26d2c:	280d      	cmp	r0, #13
   26d2e:	d80b      	bhi.n	26d48 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   26d30:	2805      	cmp	r0, #5
   26d32:	bf14      	ite	ne
   26d34:	2002      	movne	r0, #2
   26d36:	2003      	moveq	r0, #3
   26d38:	4770      	bx	lr
	switch (evt) {
   26d3a:	2813      	cmp	r0, #19
   26d3c:	d004      	beq.n	26d48 <bt_hci_evt_get_flags+0x20>
   26d3e:	281a      	cmp	r0, #26
   26d40:	bf14      	ite	ne
   26d42:	2002      	movne	r0, #2
   26d44:	2001      	moveq	r0, #1
   26d46:	4770      	bx	lr
   26d48:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   26d4a:	4770      	bx	lr

00026d4c <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   26d4c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   26d50:	b193      	cbz	r3, 26d78 <update_sec_level+0x2c>
   26d52:	7b5a      	ldrb	r2, [r3, #13]
   26d54:	07d1      	lsls	r1, r2, #31
   26d56:	d50f      	bpl.n	26d78 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   26d58:	06d2      	lsls	r2, r2, #27
   26d5a:	d50b      	bpl.n	26d74 <update_sec_level+0x28>
   26d5c:	7b1b      	ldrb	r3, [r3, #12]
   26d5e:	2b10      	cmp	r3, #16
   26d60:	d108      	bne.n	26d74 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   26d62:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   26d64:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   26d66:	7a82      	ldrb	r2, [r0, #10]
   26d68:	7a40      	ldrb	r0, [r0, #9]
}
   26d6a:	4282      	cmp	r2, r0
   26d6c:	bf8c      	ite	hi
   26d6e:	2000      	movhi	r0, #0
   26d70:	2001      	movls	r0, #1
   26d72:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   26d74:	2303      	movs	r3, #3
   26d76:	e7f5      	b.n	26d64 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   26d78:	2302      	movs	r3, #2
   26d7a:	e7f3      	b.n	26d64 <update_sec_level+0x18>

00026d7c <hci_vendor_event>:
}
   26d7c:	4770      	bx	lr

00026d7e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   26d7e:	2207      	movs	r2, #7
   26d80:	f7ff bee7 	b.w	26b52 <memcpy>

00026d84 <atomic_or>:
{
   26d84:	4603      	mov	r3, r0
}
   26d86:	f3bf 8f5b 	dmb	ish
   26d8a:	e853 0f00 	ldrex	r0, [r3]
   26d8e:	ea40 0201 	orr.w	r2, r0, r1
   26d92:	e843 2c00 	strex	ip, r2, [r3]
   26d96:	f1bc 0f00 	cmp.w	ip, #0
   26d9a:	d1f6      	bne.n	26d8a <atomic_or+0x6>
   26d9c:	f3bf 8f5b 	dmb	ish
   26da0:	4770      	bx	lr

00026da2 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26da2:	f3bf 8f5b 	dmb	ish
   26da6:	e850 3f00 	ldrex	r3, [r0]
   26daa:	400b      	ands	r3, r1
   26dac:	e840 3200 	strex	r2, r3, [r0]
   26db0:	2a00      	cmp	r2, #0
   26db2:	d1f8      	bne.n	26da6 <atomic_and.isra.0+0x4>
   26db4:	f3bf 8f5b 	dmb	ish
}
   26db8:	4770      	bx	lr

00026dba <sys_put_le64>:
	dst[1] = val >> 8;
   26dba:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   26dbe:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   26dc0:	0e00      	lsrs	r0, r0, #24
   26dc2:	7053      	strb	r3, [r2, #1]
   26dc4:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   26dc6:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   26dc8:	f3c1 2007 	ubfx	r0, r1, #8, #8
   26dcc:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   26dce:	7093      	strb	r3, [r2, #2]
   26dd0:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   26dd2:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   26dd4:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   26dd6:	71d1      	strb	r1, [r2, #7]
}
   26dd8:	4770      	bx	lr

00026dda <bt_hci_disconnect>:
{
   26dda:	b570      	push	{r4, r5, r6, lr}
   26ddc:	4606      	mov	r6, r0
   26dde:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   26de0:	f240 4006 	movw	r0, #1030	; 0x406
   26de4:	2103      	movs	r1, #3
   26de6:	f7ee fe1d 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   26dea:	4604      	mov	r4, r0
   26dec:	b168      	cbz	r0, 26e0a <bt_hci_disconnect+0x30>
   26dee:	2103      	movs	r1, #3
   26df0:	3008      	adds	r0, #8
   26df2:	f7f7 fb79 	bl	1e4e8 <net_buf_simple_add>
	disconn->reason = reason;
   26df6:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   26df8:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26dfa:	4621      	mov	r1, r4
   26dfc:	2200      	movs	r2, #0
}
   26dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26e02:	f240 4006 	movw	r0, #1030	; 0x406
   26e06:	f7ee be55 	b.w	15ab4 <bt_hci_cmd_send_sync>
}
   26e0a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26e0e:	bd70      	pop	{r4, r5, r6, pc}

00026e10 <bt_le_set_data_len>:
{
   26e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26e12:	4607      	mov	r7, r0
   26e14:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26e16:	f242 0022 	movw	r0, #8226	; 0x2022
   26e1a:	2106      	movs	r1, #6
{
   26e1c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26e1e:	f7ee fe01 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   26e22:	4604      	mov	r4, r0
   26e24:	b178      	cbz	r0, 26e46 <bt_le_set_data_len+0x36>
   26e26:	2106      	movs	r1, #6
   26e28:	3008      	adds	r0, #8
   26e2a:	f7f7 fb5d 	bl	1e4e8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26e2e:	883b      	ldrh	r3, [r7, #0]
   26e30:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   26e32:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   26e34:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   26e36:	4621      	mov	r1, r4
   26e38:	2200      	movs	r2, #0
}
   26e3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   26e3e:	f242 0022 	movw	r0, #8226	; 0x2022
   26e42:	f7ee be37 	b.w	15ab4 <bt_hci_cmd_send_sync>
}
   26e46:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026e4c <bt_le_set_phy>:
{
   26e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26e50:	4680      	mov	r8, r0
   26e52:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   26e54:	f242 0032 	movw	r0, #8242	; 0x2032
   26e58:	2107      	movs	r1, #7
{
   26e5a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   26e5e:	4616      	mov	r6, r2
   26e60:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   26e62:	f7ee fddf 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   26e66:	4604      	mov	r4, r0
   26e68:	b198      	cbz	r0, 26e92 <bt_le_set_phy+0x46>
   26e6a:	2107      	movs	r1, #7
   26e6c:	3008      	adds	r0, #8
   26e6e:	f7f7 fb3b 	bl	1e4e8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26e72:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   26e76:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   26e78:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   26e7a:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   26e7c:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   26e7e:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   26e82:	4621      	mov	r1, r4
   26e84:	2200      	movs	r2, #0
}
   26e86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   26e8a:	f242 0032 	movw	r0, #8242	; 0x2032
   26e8e:	f7ee be11 	b.w	15ab4 <bt_hci_cmd_send_sync>
}
   26e92:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026e9a <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   26e9a:	6880      	ldr	r0, [r0, #8]
   26e9c:	f7ee bf34 	b.w	15d08 <bt_hci_le_enh_conn_complete>

00026ea0 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   26ea0:	8803      	ldrh	r3, [r0, #0]
   26ea2:	8842      	ldrh	r2, [r0, #2]
   26ea4:	4293      	cmp	r3, r2
{
   26ea6:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   26ea8:	d819      	bhi.n	26ede <bt_le_conn_params_valid+0x3e>
   26eaa:	2b05      	cmp	r3, #5
   26eac:	d917      	bls.n	26ede <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   26eae:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   26eb2:	d814      	bhi.n	26ede <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   26eb4:	8883      	ldrh	r3, [r0, #4]
   26eb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   26eba:	d210      	bcs.n	26ede <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   26ebc:	88c0      	ldrh	r0, [r0, #6]
   26ebe:	f1a0 010a 	sub.w	r1, r0, #10
   26ec2:	b289      	uxth	r1, r1
   26ec4:	f640 4476 	movw	r4, #3190	; 0xc76
   26ec8:	42a1      	cmp	r1, r4
   26eca:	d808      	bhi.n	26ede <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   26ecc:	3301      	adds	r3, #1
   26ece:	b29b      	uxth	r3, r3
   26ed0:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   26ed2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   26ed6:	bf34      	ite	cc
   26ed8:	2001      	movcc	r0, #1
   26eda:	2000      	movcs	r0, #0
}
   26edc:	bd10      	pop	{r4, pc}
		return false;
   26ede:	2000      	movs	r0, #0
   26ee0:	e7fc      	b.n	26edc <bt_le_conn_params_valid+0x3c>

00026ee2 <bt_get_appearance>:
}
   26ee2:	2000      	movs	r0, #0
   26ee4:	4770      	bx	lr

00026ee6 <bt_addr_le_is_bonded>:
{
   26ee6:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   26ee8:	f7f6 fe7a 	bl	1dbe0 <bt_keys_find_addr>
		return keys && keys->keys;
   26eec:	b118      	cbz	r0, 26ef6 <bt_addr_le_is_bonded+0x10>
   26eee:	89c0      	ldrh	r0, [r0, #14]
   26ef0:	3800      	subs	r0, #0
   26ef2:	bf18      	it	ne
   26ef4:	2001      	movne	r0, #1
}
   26ef6:	bd08      	pop	{r3, pc}

00026ef8 <bt_addr_le_copy>:
   26ef8:	2207      	movs	r2, #7
   26efa:	f7ff be2a 	b.w	26b52 <memcpy>

00026efe <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   26efe:	7a03      	ldrb	r3, [r0, #8]
   26f00:	075b      	lsls	r3, r3, #29
{
   26f02:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   26f04:	d505      	bpl.n	26f12 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   26f06:	4601      	mov	r1, r0
   26f08:	322a      	adds	r2, #42	; 0x2a
   26f0a:	f811 0b01 	ldrb.w	r0, [r1], #1
   26f0e:	f7ef bc7b 	b.w	16808 <hci_id_add>
}
   26f12:	4770      	bx	lr

00026f14 <addr_res_enable>:
{
   26f14:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   26f16:	2101      	movs	r1, #1
{
   26f18:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   26f1a:	f242 002d 	movw	r0, #8237	; 0x202d
   26f1e:	f7ee fd81 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   26f22:	4604      	mov	r4, r0
   26f24:	b158      	cbz	r0, 26f3e <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   26f26:	4629      	mov	r1, r5
   26f28:	3008      	adds	r0, #8
   26f2a:	f002 f8e9 	bl	29100 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   26f2e:	4621      	mov	r1, r4
   26f30:	2200      	movs	r2, #0
}
   26f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   26f36:	f242 002d 	movw	r0, #8237	; 0x202d
   26f3a:	f7ee bdbb 	b.w	15ab4 <bt_hci_cmd_send_sync>
}
   26f3e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26f42:	bd38      	pop	{r3, r4, r5, pc}

00026f44 <bt_lookup_id_addr>:
{
   26f44:	b510      	push	{r4, lr}
   26f46:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   26f48:	f7f6 fe12 	bl	1db70 <bt_keys_find_irk>
		if (keys) {
   26f4c:	b100      	cbz	r0, 26f50 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   26f4e:	1c44      	adds	r4, r0, #1
}
   26f50:	4620      	mov	r0, r4
   26f52:	bd10      	pop	{r4, pc}

00026f54 <bt_id_scan_random_addr_check>:
}
   26f54:	2001      	movs	r0, #1
   26f56:	4770      	bx	lr

00026f58 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   26f58:	7a03      	ldrb	r3, [r0, #8]
   26f5a:	07d9      	lsls	r1, r3, #31
   26f5c:	d504      	bpl.n	26f68 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   26f5e:	f023 0301 	bic.w	r3, r3, #1
   26f62:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   26f64:	f7ef bdd6 	b.w	16b14 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   26f68:	0799      	lsls	r1, r3, #30
   26f6a:	d504      	bpl.n	26f76 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   26f6c:	f023 0302 	bic.w	r3, r3, #2
   26f70:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   26f72:	f7ef be81 	b.w	16c78 <bt_id_del>
}
   26f76:	4770      	bx	lr

00026f78 <atomic_and>:
{
   26f78:	4603      	mov	r3, r0
}
   26f7a:	f3bf 8f5b 	dmb	ish
   26f7e:	e853 0f00 	ldrex	r0, [r3]
   26f82:	ea00 0201 	and.w	r2, r0, r1
   26f86:	e843 2c00 	strex	ip, r2, [r3]
   26f8a:	f1bc 0f00 	cmp.w	ip, #0
   26f8e:	d1f6      	bne.n	26f7e <atomic_and+0x6>
   26f90:	f3bf 8f5b 	dmb	ish
   26f94:	4770      	bx	lr

00026f96 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   26f96:	f7f0 b8ad 	b.w	170f4 <bt_le_scan_set_enable_legacy>

00026f9a <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26f9a:	b510      	push	{r4, lr}
   26f9c:	4603      	mov	r3, r0
	return list->head;
   26f9e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26fa0:	2200      	movs	r2, #0
   26fa2:	b158      	cbz	r0, 26fbc <sys_slist_find_and_remove+0x22>
   26fa4:	4288      	cmp	r0, r1
   26fa6:	d10f      	bne.n	26fc8 <sys_slist_find_and_remove+0x2e>
	return node->next;
   26fa8:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   26faa:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   26fac:	b93a      	cbnz	r2, 26fbe <sys_slist_find_and_remove+0x24>
   26fae:	42a1      	cmp	r1, r4
	list->head = node;
   26fb0:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   26fb2:	d100      	bne.n	26fb6 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   26fb4:	6058      	str	r0, [r3, #4]
	parent->next = child;
   26fb6:	2300      	movs	r3, #0
   26fb8:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26fba:	2001      	movs	r0, #1
   26fbc:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   26fbe:	42a1      	cmp	r1, r4
	parent->next = child;
   26fc0:	6010      	str	r0, [r2, #0]
	list->tail = node;
   26fc2:	bf08      	it	eq
   26fc4:	605a      	streq	r2, [r3, #4]
}
   26fc6:	e7f6      	b.n	26fb6 <sys_slist_find_and_remove+0x1c>
	return node->next;
   26fc8:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26fca:	6800      	ldr	r0, [r0, #0]
   26fcc:	e7e9      	b.n	26fa2 <sys_slist_find_and_remove+0x8>

00026fce <atomic_and>:
{
   26fce:	4603      	mov	r3, r0
}
   26fd0:	f3bf 8f5b 	dmb	ish
   26fd4:	e853 0f00 	ldrex	r0, [r3]
   26fd8:	ea00 0201 	and.w	r2, r0, r1
   26fdc:	e843 2c00 	strex	ip, r2, [r3]
   26fe0:	f1bc 0f00 	cmp.w	ip, #0
   26fe4:	d1f6      	bne.n	26fd4 <atomic_and+0x6>
   26fe6:	f3bf 8f5b 	dmb	ish
   26fea:	4770      	bx	lr

00026fec <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26fec:	f3bf 8f5b 	dmb	ish
   26ff0:	6800      	ldr	r0, [r0, #0]
   26ff2:	f3bf 8f5b 	dmb	ish
}
   26ff6:	4770      	bx	lr

00026ff8 <tx_complete_work>:
	tx_notify(conn);
   26ff8:	3828      	subs	r0, #40	; 0x28
   26ffa:	f7f0 bc49 	b.w	17890 <tx_notify>

00026ffe <bt_conn_reset_rx_state>:
{
   26ffe:	b510      	push	{r4, lr}
   27000:	4604      	mov	r4, r0
	if (!conn->rx) {
   27002:	6900      	ldr	r0, [r0, #16]
   27004:	b118      	cbz	r0, 2700e <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   27006:	f7f7 f959 	bl	1e2bc <net_buf_unref>
	conn->rx = NULL;
   2700a:	2300      	movs	r3, #0
   2700c:	6123      	str	r3, [r4, #16]
}
   2700e:	bd10      	pop	{r4, pc}

00027010 <bt_conn_ref>:
{
   27010:	b510      	push	{r4, lr}
   27012:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   27014:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   27018:	4610      	mov	r0, r2
   2701a:	f7ff ffe7 	bl	26fec <atomic_get>
		if (!old) {
   2701e:	b180      	cbz	r0, 27042 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   27020:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   27024:	1c41      	adds	r1, r0, #1
   27026:	e852 4f00 	ldrex	r4, [r2]
   2702a:	4284      	cmp	r4, r0
   2702c:	d104      	bne.n	27038 <bt_conn_ref+0x28>
   2702e:	e842 1c00 	strex	ip, r1, [r2]
   27032:	f1bc 0f00 	cmp.w	ip, #0
   27036:	d1f6      	bne.n	27026 <bt_conn_ref+0x16>
   27038:	f3bf 8f5b 	dmb	ish
   2703c:	d1ec      	bne.n	27018 <bt_conn_ref+0x8>
}
   2703e:	4618      	mov	r0, r3
   27040:	bd10      	pop	{r4, pc}
			return NULL;
   27042:	4603      	mov	r3, r0
   27044:	e7fb      	b.n	2703e <bt_conn_ref+0x2e>

00027046 <conn_lookup_handle>:
{
   27046:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2704a:	4607      	mov	r7, r0
   2704c:	460e      	mov	r6, r1
   2704e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   27050:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27052:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   27056:	42b4      	cmp	r4, r6
   27058:	d103      	bne.n	27062 <conn_lookup_handle+0x1c>
	return NULL;
   2705a:	2300      	movs	r3, #0
}
   2705c:	4618      	mov	r0, r3
   2705e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27062:	fb09 7004 	mla	r0, r9, r4, r7
   27066:	f7ff ffd3 	bl	27010 <bt_conn_ref>
   2706a:	4603      	mov	r3, r0
		if (!conn) {
   2706c:	b158      	cbz	r0, 27086 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2706e:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   27070:	2d01      	cmp	r5, #1
   27072:	d002      	beq.n	2707a <conn_lookup_handle+0x34>
   27074:	3d07      	subs	r5, #7
   27076:	2d01      	cmp	r5, #1
   27078:	d803      	bhi.n	27082 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2707a:	881a      	ldrh	r2, [r3, #0]
   2707c:	4542      	cmp	r2, r8
   2707e:	d0ed      	beq.n	2705c <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   27080:	4618      	mov	r0, r3
   27082:	f7f0 fe5b 	bl	17d3c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   27086:	3401      	adds	r4, #1
   27088:	e7e5      	b.n	27056 <conn_lookup_handle+0x10>

0002708a <bt_conn_connected>:
{
   2708a:	b510      	push	{r4, lr}
   2708c:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2708e:	f7f1 fc6f 	bl	18970 <bt_l2cap_connected>
	notify_connected(conn);
   27092:	4620      	mov	r0, r4
}
   27094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   27098:	f7f0 bbca 	b.w	17830 <notify_connected>

0002709c <bt_conn_le_start_encryption>:
{
   2709c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   270a0:	4682      	mov	sl, r0
   270a2:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   270a4:	f242 0019 	movw	r0, #8217	; 0x2019
   270a8:	211c      	movs	r1, #28
{
   270aa:	9e08      	ldr	r6, [sp, #32]
   270ac:	4690      	mov	r8, r2
   270ae:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   270b0:	f7ee fcb8 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   270b4:	4605      	mov	r5, r0
   270b6:	b340      	cbz	r0, 2710a <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   270b8:	211c      	movs	r1, #28
   270ba:	3008      	adds	r0, #8
   270bc:	f7f7 fa14 	bl	1e4e8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   270c0:	f8ba 3000 	ldrh.w	r3, [sl]
   270c4:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   270c6:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   270c8:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   270cc:	4649      	mov	r1, r9
   270ce:	f7ff fd40 	bl	26b52 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   270d2:	2202      	movs	r2, #2
   270d4:	4641      	mov	r1, r8
   270d6:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   270da:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   270dc:	f7ff fd39 	bl	26b52 <memcpy>
	memcpy(cp->ltk, ltk, len);
   270e0:	4632      	mov	r2, r6
   270e2:	4639      	mov	r1, r7
   270e4:	4620      	mov	r0, r4
   270e6:	f7ff fd34 	bl	26b52 <memcpy>
	if (len < sizeof(cp->ltk)) {
   270ea:	2e0f      	cmp	r6, #15
   270ec:	d805      	bhi.n	270fa <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   270ee:	f1c6 0210 	rsb	r2, r6, #16
   270f2:	2100      	movs	r1, #0
   270f4:	19a0      	adds	r0, r4, r6
   270f6:	f7ff fd37 	bl	26b68 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   270fa:	4629      	mov	r1, r5
   270fc:	2200      	movs	r2, #0
}
   270fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   27102:	f242 0019 	movw	r0, #8217	; 0x2019
   27106:	f7ee bcd5 	b.w	15ab4 <bt_hci_cmd_send_sync>
}
   2710a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027112 <bt_conn_set_security>:
{
   27112:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   27114:	7b43      	ldrb	r3, [r0, #13]
   27116:	2b07      	cmp	r3, #7
{
   27118:	4604      	mov	r4, r0
   2711a:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2711c:	d124      	bne.n	27168 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2711e:	7a43      	ldrb	r3, [r0, #9]
   27120:	428b      	cmp	r3, r1
   27122:	d224      	bcs.n	2716e <bt_conn_set_security+0x5c>
   27124:	7a83      	ldrb	r3, [r0, #10]
   27126:	428b      	cmp	r3, r1
   27128:	d221      	bcs.n	2716e <bt_conn_set_security+0x5c>
	if (val) {
   2712a:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2712c:	f100 0004 	add.w	r0, r0, #4
   27130:	d515      	bpl.n	2715e <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27132:	f3bf 8f5b 	dmb	ish
   27136:	e850 3f00 	ldrex	r3, [r0]
   2713a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2713e:	e840 3200 	strex	r2, r3, [r0]
   27142:	2a00      	cmp	r2, #0
   27144:	d1f7      	bne.n	27136 <bt_conn_set_security+0x24>
   27146:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2714a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2714e:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   27150:	4620      	mov	r0, r4
   27152:	f001 fe61 	bl	28e18 <bt_smp_start_security>
	if (err) {
   27156:	b108      	cbz	r0, 2715c <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   27158:	7a63      	ldrb	r3, [r4, #9]
   2715a:	72a3      	strb	r3, [r4, #10]
}
   2715c:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2715e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   27162:	f7ff ff34 	bl	26fce <atomic_and>
   27166:	e7f0      	b.n	2714a <bt_conn_set_security+0x38>
		return -ENOTCONN;
   27168:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2716c:	e7f6      	b.n	2715c <bt_conn_set_security+0x4a>
		return 0;
   2716e:	2000      	movs	r0, #0
   27170:	e7f4      	b.n	2715c <bt_conn_set_security+0x4a>

00027172 <bt_conn_get_security>:
}
   27172:	7a40      	ldrb	r0, [r0, #9]
   27174:	4770      	bx	lr

00027176 <bt_conn_is_peer_addr_le>:
{
   27176:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   27178:	7a03      	ldrb	r3, [r0, #8]
   2717a:	428b      	cmp	r3, r1
{
   2717c:	4604      	mov	r4, r0
   2717e:	4615      	mov	r5, r2
	if (id != conn->id) {
   27180:	d115      	bne.n	271ae <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   27182:	f100 0190 	add.w	r1, r0, #144	; 0x90
   27186:	2207      	movs	r2, #7
   27188:	4628      	mov	r0, r5
   2718a:	f7ff fcd1 	bl	26b30 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2718e:	b180      	cbz	r0, 271b2 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   27190:	78e3      	ldrb	r3, [r4, #3]
   27192:	2207      	movs	r2, #7
   27194:	b943      	cbnz	r3, 271a8 <bt_conn_is_peer_addr_le+0x32>
   27196:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2719a:	4628      	mov	r0, r5
   2719c:	f7ff fcc8 	bl	26b30 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   271a0:	fab0 f080 	clz	r0, r0
   271a4:	0940      	lsrs	r0, r0, #5
}
   271a6:	bd38      	pop	{r3, r4, r5, pc}
   271a8:	f104 0197 	add.w	r1, r4, #151	; 0x97
   271ac:	e7f5      	b.n	2719a <bt_conn_is_peer_addr_le+0x24>
		return false;
   271ae:	2000      	movs	r0, #0
   271b0:	e7f9      	b.n	271a6 <bt_conn_is_peer_addr_le+0x30>
		return true;
   271b2:	2001      	movs	r0, #1
   271b4:	e7f7      	b.n	271a6 <bt_conn_is_peer_addr_le+0x30>

000271b6 <bt_conn_get_dst>:
}
   271b6:	3090      	adds	r0, #144	; 0x90
   271b8:	4770      	bx	lr

000271ba <bt_conn_disconnect>:
{
   271ba:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   271bc:	7883      	ldrb	r3, [r0, #2]
   271be:	2b01      	cmp	r3, #1
{
   271c0:	4604      	mov	r4, r0
   271c2:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   271c4:	d103      	bne.n	271ce <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   271c6:	2100      	movs	r1, #0
   271c8:	3090      	adds	r0, #144	; 0x90
   271ca:	f7f1 f979 	bl	184c0 <bt_le_set_auto_conn>
	switch (conn->state) {
   271ce:	7b63      	ldrb	r3, [r4, #13]
   271d0:	3b02      	subs	r3, #2
   271d2:	2b06      	cmp	r3, #6
   271d4:	d805      	bhi.n	271e2 <bt_conn_disconnect+0x28>
   271d6:	e8df f003 	tbb	[pc, r3]
   271da:	0408      	.short	0x0408
   271dc:	1a120404 	.word	0x1a120404
   271e0:	10          	.byte	0x10
   271e1:	00          	.byte	0x00
   271e2:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   271e6:	4628      	mov	r0, r5
   271e8:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   271ea:	4620      	mov	r0, r4
		conn->err = reason;
   271ec:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   271ee:	2100      	movs	r1, #0
   271f0:	f7f0 fdce 	bl	17d90 <bt_conn_set_state>
			bt_le_scan_update(false);
   271f4:	2000      	movs	r0, #0
   271f6:	f7f0 f809 	bl	1720c <bt_le_scan_update>
		return 0;
   271fa:	2500      	movs	r5, #0
   271fc:	e7f3      	b.n	271e6 <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   271fe:	f104 0060 	add.w	r0, r4, #96	; 0x60
   27202:	f7fb ffaf 	bl	23164 <k_work_cancel_delayable>
}
   27206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   2720a:	f7ee bd63 	b.w	15cd4 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   2720e:	4629      	mov	r1, r5
   27210:	8820      	ldrh	r0, [r4, #0]
   27212:	f7ff fde2 	bl	26dda <bt_hci_disconnect>
	if (err) {
   27216:	4605      	mov	r5, r0
   27218:	2800      	cmp	r0, #0
   2721a:	d1e4      	bne.n	271e6 <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   2721c:	7b63      	ldrb	r3, [r4, #13]
   2721e:	2b07      	cmp	r3, #7
   27220:	d1e1      	bne.n	271e6 <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   27222:	2108      	movs	r1, #8
   27224:	4620      	mov	r0, r4
   27226:	f7f0 fdb3 	bl	17d90 <bt_conn_set_state>
   2722a:	e7dc      	b.n	271e6 <bt_conn_disconnect+0x2c>

0002722c <bt_conn_le_conn_update>:
{
   2722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2722e:	4607      	mov	r7, r0
   27230:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   27232:	f242 0013 	movw	r0, #8211	; 0x2013
   27236:	210e      	movs	r1, #14
   27238:	f7ee fbf4 	bl	15a24 <bt_hci_cmd_create>
	if (!buf) {
   2723c:	4606      	mov	r6, r0
   2723e:	b1d0      	cbz	r0, 27276 <bt_conn_le_conn_update+0x4a>
   27240:	210e      	movs	r1, #14
   27242:	3008      	adds	r0, #8
   27244:	f7f7 f950 	bl	1e4e8 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   27248:	220e      	movs	r2, #14
   2724a:	4604      	mov	r4, r0
   2724c:	2100      	movs	r1, #0
   2724e:	f7ff fc8b 	bl	26b68 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   27252:	883b      	ldrh	r3, [r7, #0]
   27254:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   27256:	882b      	ldrh	r3, [r5, #0]
   27258:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2725a:	886b      	ldrh	r3, [r5, #2]
   2725c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2725e:	88ab      	ldrh	r3, [r5, #4]
   27260:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   27262:	88eb      	ldrh	r3, [r5, #6]
   27264:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27266:	4631      	mov	r1, r6
   27268:	2200      	movs	r2, #0
}
   2726a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2726e:	f242 0013 	movw	r0, #8211	; 0x2013
   27272:	f7ee bc1f 	b.w	15ab4 <bt_hci_cmd_send_sync>
}
   27276:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2727a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002727c <l2cap_connected>:
}
   2727c:	4770      	bx	lr

0002727e <l2cap_disconnected>:
   2727e:	4770      	bx	lr

00027280 <bt_l2cap_chan_del>:
{
   27280:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   27282:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   27286:	4604      	mov	r4, r0
	if (!chan->conn) {
   27288:	b123      	cbz	r3, 27294 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2728a:	686b      	ldr	r3, [r5, #4]
   2728c:	b103      	cbz	r3, 27290 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2728e:	4798      	blx	r3
	chan->conn = NULL;
   27290:	2300      	movs	r3, #0
   27292:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   27294:	68e3      	ldr	r3, [r4, #12]
   27296:	b10b      	cbz	r3, 2729c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   27298:	4620      	mov	r0, r4
   2729a:	4798      	blx	r3
	if (ops->released) {
   2729c:	69eb      	ldr	r3, [r5, #28]
   2729e:	b11b      	cbz	r3, 272a8 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   272a0:	4620      	mov	r0, r4
}
   272a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   272a6:	4718      	bx	r3
}
   272a8:	bd70      	pop	{r4, r5, r6, pc}

000272aa <bt_l2cap_disconnected>:
	return list->head;
   272aa:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
   272ac:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   272ae:	b160      	cbz	r0, 272ca <bt_l2cap_disconnected+0x20>
	return node->next;
   272b0:	f850 4908 	ldr.w	r4, [r0], #-8
   272b4:	b104      	cbz	r4, 272b8 <bt_l2cap_disconnected+0xe>
   272b6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   272b8:	f7ff ffe2 	bl	27280 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   272bc:	b12c      	cbz	r4, 272ca <bt_l2cap_disconnected+0x20>
   272be:	68a3      	ldr	r3, [r4, #8]
   272c0:	b103      	cbz	r3, 272c4 <bt_l2cap_disconnected+0x1a>
   272c2:	3b08      	subs	r3, #8
{
   272c4:	4620      	mov	r0, r4
   272c6:	461c      	mov	r4, r3
   272c8:	e7f6      	b.n	272b8 <bt_l2cap_disconnected+0xe>
}
   272ca:	bd10      	pop	{r4, pc}

000272cc <bt_l2cap_security_changed>:
	return list->head;
   272cc:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
   272ce:	b538      	push	{r3, r4, r5, lr}
   272d0:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   272d2:	b178      	cbz	r0, 272f4 <bt_l2cap_security_changed+0x28>
	return node->next;
   272d4:	f850 4908 	ldr.w	r4, [r0], #-8
   272d8:	b104      	cbz	r4, 272dc <bt_l2cap_security_changed+0x10>
   272da:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   272dc:	6843      	ldr	r3, [r0, #4]
   272de:	689b      	ldr	r3, [r3, #8]
   272e0:	b10b      	cbz	r3, 272e6 <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   272e2:	4629      	mov	r1, r5
   272e4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   272e6:	b12c      	cbz	r4, 272f4 <bt_l2cap_security_changed+0x28>
   272e8:	68a3      	ldr	r3, [r4, #8]
   272ea:	b103      	cbz	r3, 272ee <bt_l2cap_security_changed+0x22>
   272ec:	3b08      	subs	r3, #8
{
   272ee:	4620      	mov	r0, r4
   272f0:	461c      	mov	r4, r3
   272f2:	e7f3      	b.n	272dc <bt_l2cap_security_changed+0x10>
}
   272f4:	bd38      	pop	{r3, r4, r5, pc}

000272f6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   272f6:	3104      	adds	r1, #4
   272f8:	f7f0 be62 	b.w	17fc0 <bt_conn_create_pdu_timeout>

000272fc <bt_l2cap_send_cb>:
{
   272fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27300:	4614      	mov	r4, r2
   27302:	4605      	mov	r5, r0
   27304:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   27306:	f102 0008 	add.w	r0, r2, #8
   2730a:	2104      	movs	r1, #4
   2730c:	461e      	mov	r6, r3
   2730e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   27312:	f7f7 f891 	bl	1e438 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27316:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   27318:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2731a:	3a04      	subs	r2, #4
   2731c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2731e:	4643      	mov	r3, r8
   27320:	4632      	mov	r2, r6
   27322:	4621      	mov	r1, r4
   27324:	4628      	mov	r0, r5
}
   27326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2732a:	f7f0 bc7d 	b.w	17c28 <bt_conn_send_cb>

0002732e <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   2732e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27330:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   27332:	2202      	movs	r2, #2
   27334:	2001      	movs	r0, #1
   27336:	f7f1 fafd 	bl	18934 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2733a:	4604      	mov	r4, r0
   2733c:	b198      	cbz	r0, 27366 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   2733e:	2102      	movs	r1, #2
   27340:	3008      	adds	r0, #8
   27342:	f7f7 f8d1 	bl	1e4e8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   27346:	2300      	movs	r3, #0
   27348:	7003      	strb	r3, [r0, #0]
   2734a:	7043      	strb	r3, [r0, #1]
   2734c:	4622      	mov	r2, r4
   2734e:	9300      	str	r3, [sp, #0]
   27350:	2105      	movs	r1, #5
   27352:	4628      	mov	r0, r5
   27354:	f7ff ffd2 	bl	272fc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   27358:	b128      	cbz	r0, 27366 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   2735a:	4620      	mov	r0, r4
}
   2735c:	b003      	add	sp, #12
   2735e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   27362:	f7f6 bfab 	b.w	1e2bc <net_buf_unref>
}
   27366:	b003      	add	sp, #12
   27368:	bd30      	pop	{r4, r5, pc}

0002736a <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2736a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2736c:	b130      	cbz	r0, 2737c <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2736e:	8b83      	ldrh	r3, [r0, #28]
   27370:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27372:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   27376:	d001      	beq.n	2737c <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   27378:	6880      	ldr	r0, [r0, #8]
   2737a:	e7f7      	b.n	2736c <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2737c:	4770      	bx	lr

0002737e <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2737e:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27380:	b130      	cbz	r0, 27390 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27382:	8983      	ldrh	r3, [r0, #12]
   27384:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27386:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2738a:	d001      	beq.n	27390 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   2738c:	6880      	ldr	r0, [r0, #8]
   2738e:	e7f7      	b.n	27380 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   27390:	4770      	bx	lr

00027392 <bt_l2cap_init>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   27392:	4770      	bx	lr

00027394 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   27394:	4603      	mov	r3, r0
	return list->head;
   27396:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   27398:	b128      	cbz	r0, 273a6 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2739a:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2739c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2739e:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   273a0:	4288      	cmp	r0, r1
	list->tail = node;
   273a2:	bf08      	it	eq
   273a4:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   273a6:	4770      	bx	lr

000273a8 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   273a8:	4603      	mov	r3, r0
	size_t bytes = 0;
   273aa:	2000      	movs	r0, #0

	while (buf) {
   273ac:	b903      	cbnz	r3, 273b0 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   273ae:	4770      	bx	lr
		bytes += buf->len;
   273b0:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   273b2:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   273b4:	4410      	add	r0, r2
		buf = buf->frags;
   273b6:	e7f9      	b.n	273ac <net_buf_frags_len+0x4>

000273b8 <attr_read_type_cb>:
{
   273b8:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   273ba:	68d4      	ldr	r4, [r2, #12]
   273bc:	7823      	ldrb	r3, [r4, #0]
   273be:	3102      	adds	r1, #2
   273c0:	b913      	cbnz	r3, 273c8 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   273c2:	7021      	strb	r1, [r4, #0]
	return true;
   273c4:	2001      	movs	r0, #1
   273c6:	e006      	b.n	273d6 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   273c8:	428b      	cmp	r3, r1
   273ca:	d0fb      	beq.n	273c4 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   273cc:	8983      	ldrh	r3, [r0, #12]
   273ce:	3b02      	subs	r3, #2
   273d0:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   273d2:	2000      	movs	r0, #0
   273d4:	6110      	str	r0, [r2, #16]
}
   273d6:	bd10      	pop	{r4, pc}

000273d8 <att_prepare_write_req>:
}
   273d8:	2006      	movs	r0, #6
   273da:	4770      	bx	lr

000273dc <att_op_get_type>:
	switch (op) {
   273dc:	2852      	cmp	r0, #82	; 0x52
   273de:	d830      	bhi.n	27442 <att_op_get_type+0x66>
   273e0:	b388      	cbz	r0, 27446 <att_op_get_type+0x6a>
   273e2:	1e43      	subs	r3, r0, #1
   273e4:	2b51      	cmp	r3, #81	; 0x51
   273e6:	d82e      	bhi.n	27446 <att_op_get_type+0x6a>
   273e8:	e8df f003 	tbb	[pc, r3]
   273ec:	39333933 	.word	0x39333933
   273f0:	39333933 	.word	0x39333933
   273f4:	39333933 	.word	0x39333933
   273f8:	39333933 	.word	0x39333933
   273fc:	2d333933 	.word	0x2d333933
   27400:	3933392d 	.word	0x3933392d
   27404:	2d352d33 	.word	0x2d352d33
   27408:	392d2937 	.word	0x392d2937
   2740c:	2d352d33 	.word	0x2d352d33
   27410:	2d2d2d2d 	.word	0x2d2d2d2d
   27414:	2d2d2d2d 	.word	0x2d2d2d2d
   27418:	2d2d2d2d 	.word	0x2d2d2d2d
   2741c:	2d2d2d2d 	.word	0x2d2d2d2d
   27420:	2d2d2d2d 	.word	0x2d2d2d2d
   27424:	2d2d2d2d 	.word	0x2d2d2d2d
   27428:	2d2d2d2d 	.word	0x2d2d2d2d
   2742c:	2d2d2d2d 	.word	0x2d2d2d2d
   27430:	2d2d2d2d 	.word	0x2d2d2d2d
   27434:	2d2d2d2d 	.word	0x2d2d2d2d
   27438:	2d2d2d2d 	.word	0x2d2d2d2d
   2743c:	3b2d      	.short	0x3b2d
   2743e:	2004      	movs	r0, #4
   27440:	4770      	bx	lr
   27442:	28d2      	cmp	r0, #210	; 0xd2
   27444:	d00d      	beq.n	27462 <att_op_get_type+0x86>
		return ATT_COMMAND;
   27446:	f010 0f40 	tst.w	r0, #64	; 0x40
   2744a:	bf0c      	ite	eq
   2744c:	2006      	moveq	r0, #6
   2744e:	2000      	movne	r0, #0
   27450:	4770      	bx	lr
		return ATT_RESPONSE;
   27452:	2002      	movs	r0, #2
   27454:	4770      	bx	lr
		return ATT_NOTIFICATION;
   27456:	2003      	movs	r0, #3
   27458:	4770      	bx	lr
		return ATT_INDICATION;
   2745a:	2005      	movs	r0, #5
   2745c:	4770      	bx	lr
		return ATT_REQUEST;
   2745e:	2001      	movs	r0, #1
   27460:	4770      	bx	lr
		return ATT_COMMAND;
   27462:	2000      	movs	r0, #0
}
   27464:	4770      	bx	lr

00027466 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27466:	f3bf 8f5b 	dmb	ish
   2746a:	6800      	ldr	r0, [r0, #0]
   2746c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27470:	4108      	asrs	r0, r1
}
   27472:	f000 0001 	and.w	r0, r0, #1
   27476:	4770      	bx	lr

00027478 <att_notify_mult>:
{
   27478:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2747a:	6803      	ldr	r3, [r0, #0]
   2747c:	898a      	ldrh	r2, [r1, #12]
   2747e:	6818      	ldr	r0, [r3, #0]
   27480:	6889      	ldr	r1, [r1, #8]
   27482:	f7f4 fd27 	bl	1bed4 <bt_gatt_mult_notification>
}
   27486:	2000      	movs	r0, #0
   27488:	bd08      	pop	{r3, pc}

0002748a <att_notify>:
{
   2748a:	b538      	push	{r3, r4, r5, lr}
   2748c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2748e:	f101 0008 	add.w	r0, r1, #8
   27492:	460c      	mov	r4, r1
   27494:	f001 fe14 	bl	290c0 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   27498:	682d      	ldr	r5, [r5, #0]
   2749a:	89a3      	ldrh	r3, [r4, #12]
   2749c:	68a2      	ldr	r2, [r4, #8]
   2749e:	4601      	mov	r1, r0
   274a0:	6828      	ldr	r0, [r5, #0]
   274a2:	f001 f954 	bl	2874e <bt_gatt_notification>
}
   274a6:	2000      	movs	r0, #0
   274a8:	bd38      	pop	{r3, r4, r5, pc}

000274aa <att_chan_mtu_updated>:
{
   274aa:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   274ac:	6806      	ldr	r6, [r0, #0]
	return list->head;
   274ae:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   274b0:	b1c3      	cbz	r3, 274e4 <att_chan_mtu_updated+0x3a>
   274b2:	461a      	mov	r2, r3
	return node->next;
   274b4:	f852 49f0 	ldr.w	r4, [r2], #-240
   274b8:	b104      	cbz	r4, 274bc <att_chan_mtu_updated+0x12>
   274ba:	3cf0      	subs	r4, #240	; 0xf0
{
   274bc:	2300      	movs	r3, #0
   274be:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   274c0:	4290      	cmp	r0, r2
   274c2:	d007      	beq.n	274d4 <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   274c4:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   274c6:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   274c8:	42a9      	cmp	r1, r5
   274ca:	bf38      	it	cc
   274cc:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   274ce:	4293      	cmp	r3, r2
   274d0:	bf38      	it	cc
   274d2:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   274d4:	b13c      	cbz	r4, 274e6 <att_chan_mtu_updated+0x3c>
   274d6:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   274da:	b105      	cbz	r5, 274de <att_chan_mtu_updated+0x34>
   274dc:	3df0      	subs	r5, #240	; 0xf0
{
   274de:	4622      	mov	r2, r4
   274e0:	462c      	mov	r4, r5
   274e2:	e7ed      	b.n	274c0 <att_chan_mtu_updated+0x16>
   274e4:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   274e6:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   274e8:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   274ea:	428c      	cmp	r4, r1
   274ec:	d801      	bhi.n	274f2 <att_chan_mtu_updated+0x48>
   274ee:	429a      	cmp	r2, r3
   274f0:	d909      	bls.n	27506 <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   274f2:	429a      	cmp	r2, r3
   274f4:	bf38      	it	cc
   274f6:	461a      	movcc	r2, r3
   274f8:	42a1      	cmp	r1, r4
   274fa:	6830      	ldr	r0, [r6, #0]
   274fc:	bf38      	it	cc
   274fe:	4621      	movcc	r1, r4
}
   27500:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   27502:	f7f4 bd97 	b.w	1c034 <bt_gatt_att_max_mtu_changed>
}
   27506:	bc70      	pop	{r4, r5, r6}
   27508:	4770      	bx	lr

0002750a <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2750a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2750c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   27510:	2300      	movs	r3, #0
   27512:	9300      	str	r3, [sp, #0]
   27514:	461a      	mov	r2, r3
   27516:	f7f3 f9e7 	bl	1a8e8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2751a:	b005      	add	sp, #20
   2751c:	f85d fb04 	ldr.w	pc, [sp], #4

00027520 <find_info_cb>:
{
   27520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   27522:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   27524:	6817      	ldr	r7, [r2, #0]
{
   27526:	4605      	mov	r5, r0
   27528:	460e      	mov	r6, r1
   2752a:	4614      	mov	r4, r2
	if (!data->rsp) {
   2752c:	b963      	cbnz	r3, 27548 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2752e:	6850      	ldr	r0, [r2, #4]
   27530:	2101      	movs	r1, #1
   27532:	3008      	adds	r0, #8
   27534:	f7f6 ffd8 	bl	1e4e8 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27538:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2753a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2753c:	781b      	ldrb	r3, [r3, #0]
   2753e:	2b00      	cmp	r3, #0
   27540:	bf0c      	ite	eq
   27542:	2301      	moveq	r3, #1
   27544:	2302      	movne	r3, #2
   27546:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   27548:	68a3      	ldr	r3, [r4, #8]
   2754a:	781b      	ldrb	r3, [r3, #0]
   2754c:	2b01      	cmp	r3, #1
   2754e:	d003      	beq.n	27558 <find_info_cb+0x38>
   27550:	2b02      	cmp	r3, #2
   27552:	d018      	beq.n	27586 <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   27554:	2000      	movs	r0, #0
   27556:	e015      	b.n	27584 <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   27558:	682b      	ldr	r3, [r5, #0]
   2755a:	781b      	ldrb	r3, [r3, #0]
   2755c:	2b00      	cmp	r3, #0
   2755e:	d1f9      	bne.n	27554 <find_info_cb+0x34>
   27560:	6860      	ldr	r0, [r4, #4]
   27562:	2104      	movs	r1, #4
   27564:	3008      	adds	r0, #8
   27566:	f7f6 ffbf 	bl	1e4e8 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2756a:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2756c:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2756e:	885b      	ldrh	r3, [r3, #2]
   27570:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   27572:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   27574:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   27576:	899b      	ldrh	r3, [r3, #12]
   27578:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2757a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2757c:	2804      	cmp	r0, #4
   2757e:	bf94      	ite	ls
   27580:	2000      	movls	r0, #0
   27582:	2001      	movhi	r0, #1
}
   27584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   27586:	682b      	ldr	r3, [r5, #0]
   27588:	781b      	ldrb	r3, [r3, #0]
   2758a:	2b02      	cmp	r3, #2
   2758c:	d1e2      	bne.n	27554 <find_info_cb+0x34>
   2758e:	6860      	ldr	r0, [r4, #4]
   27590:	2112      	movs	r1, #18
   27592:	3008      	adds	r0, #8
   27594:	f7f6 ffa8 	bl	1e4e8 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   27598:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2759a:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2759c:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2759e:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   275a2:	3101      	adds	r1, #1
   275a4:	f7ff fad5 	bl	26b52 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   275a8:	6863      	ldr	r3, [r4, #4]
   275aa:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   275ac:	899b      	ldrh	r3, [r3, #12]
   275ae:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   275b0:	2812      	cmp	r0, #18
   275b2:	e7e4      	b.n	2757e <find_info_cb+0x5e>

000275b4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   275b4:	68d0      	ldr	r0, [r2, #12]
   275b6:	7803      	ldrb	r3, [r0, #0]
   275b8:	3104      	adds	r1, #4
   275ba:	b913      	cbnz	r3, 275c2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   275bc:	7001      	strb	r1, [r0, #0]
	return true;
   275be:	2001      	movs	r0, #1
}
   275c0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   275c2:	428b      	cmp	r3, r1
   275c4:	d0fb      	beq.n	275be <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   275c6:	6891      	ldr	r1, [r2, #8]
   275c8:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   275ca:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   275cc:	3b04      	subs	r3, #4
   275ce:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   275d0:	6110      	str	r0, [r2, #16]
		return false;
   275d2:	4770      	bx	lr

000275d4 <write_cb>:
{
   275d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   275d6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   275d8:	4601      	mov	r1, r0
{
   275da:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   275dc:	f44f 7295 	mov.w	r2, #298	; 0x12a
   275e0:	6820      	ldr	r0, [r4, #0]
   275e2:	f000 fff8 	bl	285d6 <bt_gatt_check_perm>
   275e6:	4605      	mov	r5, r0
   275e8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   275ea:	bb20      	cbnz	r0, 27636 <write_cb+0x62>
	if (!data->req) {
   275ec:	7a23      	ldrb	r3, [r4, #8]
   275ee:	b1ab      	cbz	r3, 2761c <write_cb+0x48>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   275f0:	2b18      	cmp	r3, #24
   275f2:	bf14      	ite	ne
   275f4:	2300      	movne	r3, #0
   275f6:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   275f8:	9301      	str	r3, [sp, #4]
   275fa:	8a63      	ldrh	r3, [r4, #18]
   275fc:	9300      	str	r3, [sp, #0]
   275fe:	68b7      	ldr	r7, [r6, #8]
   27600:	8a23      	ldrh	r3, [r4, #16]
   27602:	68e2      	ldr	r2, [r4, #12]
   27604:	6820      	ldr	r0, [r4, #0]
   27606:	4631      	mov	r1, r6
   27608:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2760a:	1e03      	subs	r3, r0, #0
   2760c:	db08      	blt.n	27620 <write_cb+0x4c>
   2760e:	8a22      	ldrh	r2, [r4, #16]
   27610:	4293      	cmp	r3, r2
   27612:	d10e      	bne.n	27632 <write_cb+0x5e>
	data->err = 0U;
   27614:	2300      	movs	r3, #0
   27616:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   27618:	2501      	movs	r5, #1
   2761a:	e007      	b.n	2762c <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2761c:	2302      	movs	r3, #2
   2761e:	e7eb      	b.n	275f8 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   27620:	f113 0fff 	cmn.w	r3, #255	; 0xff
   27624:	d305      	bcc.n	27632 <write_cb+0x5e>
		return -err;
   27626:	425b      	negs	r3, r3
   27628:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2762a:	7523      	strb	r3, [r4, #20]
}
   2762c:	4628      	mov	r0, r5
   2762e:	b003      	add	sp, #12
   27630:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   27632:	230e      	movs	r3, #14
   27634:	e7f9      	b.n	2762a <write_cb+0x56>
		return BT_GATT_ITER_STOP;
   27636:	2500      	movs	r5, #0
   27638:	e7f8      	b.n	2762c <write_cb+0x58>

0002763a <att_chan_read>:
{
   2763a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2763e:	4680      	mov	r8, r0
   27640:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27642:	4610      	mov	r0, r2
{
   27644:	4699      	mov	r9, r3
   27646:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27648:	f7ff feae 	bl	273a8 <net_buf_frags_len>
   2764c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   27650:	4283      	cmp	r3, r0
{
   27652:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27654:	d97a      	bls.n	2774c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   27656:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2765a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2765c:	4630      	mov	r0, r6
   2765e:	f7f6 fe89 	bl	1e374 <net_buf_frag_last>
	size_t len, total = 0;
   27662:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   27666:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27668:	4630      	mov	r0, r6
   2766a:	f7ff fe9d 	bl	273a8 <net_buf_frags_len>
   2766e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   27672:	f105 0708 	add.w	r7, r5, #8
   27676:	1a24      	subs	r4, r4, r0
   27678:	4638      	mov	r0, r7
   2767a:	f001 fd2d 	bl	290d8 <net_buf_simple_tailroom>
   2767e:	4284      	cmp	r4, r0
   27680:	d211      	bcs.n	276a6 <att_chan_read+0x6c>
   27682:	4630      	mov	r0, r6
   27684:	f7ff fe90 	bl	273a8 <net_buf_frags_len>
   27688:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2768c:	1a24      	subs	r4, r4, r0
		if (!len) {
   2768e:	bb34      	cbnz	r4, 276de <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   27690:	79b0      	ldrb	r0, [r6, #6]
   27692:	f7f6 fb81 	bl	1dd98 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   27696:	2200      	movs	r2, #0
   27698:	2300      	movs	r3, #0
   2769a:	f001 fcfe 	bl	2909a <net_buf_alloc_fixed>
			if (!frag) {
   2769e:	4605      	mov	r5, r0
   276a0:	b930      	cbnz	r0, 276b0 <att_chan_read+0x76>
	return total;
   276a2:	4657      	mov	r7, sl
   276a4:	e02c      	b.n	27700 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   276a6:	4638      	mov	r0, r7
   276a8:	f001 fd16 	bl	290d8 <net_buf_simple_tailroom>
   276ac:	4604      	mov	r4, r0
   276ae:	e7ee      	b.n	2768e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   276b0:	4601      	mov	r1, r0
   276b2:	4630      	mov	r0, r6
   276b4:	f7f6 fe9e 	bl	1e3f4 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   276b8:	4630      	mov	r0, r6
   276ba:	f7ff fe75 	bl	273a8 <net_buf_frags_len>
   276be:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   276c2:	f105 0708 	add.w	r7, r5, #8
   276c6:	1a24      	subs	r4, r4, r0
   276c8:	4638      	mov	r0, r7
   276ca:	f001 fd05 	bl	290d8 <net_buf_simple_tailroom>
   276ce:	4284      	cmp	r4, r0
   276d0:	d21a      	bcs.n	27708 <att_chan_read+0xce>
   276d2:	4630      	mov	r0, r6
   276d4:	f7ff fe68 	bl	273a8 <net_buf_frags_len>
   276d8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   276dc:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   276de:	68a9      	ldr	r1, [r5, #8]
   276e0:	89aa      	ldrh	r2, [r5, #12]
   276e2:	f8db 7004 	ldr.w	r7, [fp, #4]
   276e6:	9803      	ldr	r0, [sp, #12]
   276e8:	f8cd 9000 	str.w	r9, [sp]
   276ec:	440a      	add	r2, r1
   276ee:	b2a3      	uxth	r3, r4
   276f0:	4659      	mov	r1, fp
   276f2:	47b8      	blx	r7
		if (read < 0) {
   276f4:	1e07      	subs	r7, r0, #0
   276f6:	da0c      	bge.n	27712 <att_chan_read+0xd8>
				return total;
   276f8:	f1ba 0f00 	cmp.w	sl, #0
   276fc:	bf18      	it	ne
   276fe:	4657      	movne	r7, sl
}
   27700:	4638      	mov	r0, r7
   27702:	b005      	add	sp, #20
   27704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27708:	4638      	mov	r0, r7
   2770a:	f001 fce5 	bl	290d8 <net_buf_simple_tailroom>
   2770e:	4604      	mov	r4, r0
   27710:	e7e5      	b.n	276de <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   27712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27714:	b993      	cbnz	r3, 2773c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   27716:	4639      	mov	r1, r7
   27718:	f105 0008 	add.w	r0, r5, #8
   2771c:	f7f6 fee4 	bl	1e4e8 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27720:	4630      	mov	r0, r6
   27722:	f7ff fe41 	bl	273a8 <net_buf_frags_len>
   27726:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2772a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2772c:	4283      	cmp	r3, r0
		total += read;
   2772e:	44ba      	add	sl, r7
		offset += read;
   27730:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27734:	d9b5      	bls.n	276a2 <att_chan_read+0x68>
   27736:	42a7      	cmp	r7, r4
   27738:	d096      	beq.n	27668 <att_chan_read+0x2e>
   2773a:	e7b2      	b.n	276a2 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2773c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2773e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27740:	4639      	mov	r1, r7
   27742:	4628      	mov	r0, r5
   27744:	4798      	blx	r3
   27746:	2800      	cmp	r0, #0
   27748:	d1e5      	bne.n	27716 <att_chan_read+0xdc>
   2774a:	e7aa      	b.n	276a2 <att_chan_read+0x68>
		return 0;
   2774c:	2700      	movs	r7, #0
   2774e:	e7d7      	b.n	27700 <att_chan_read+0xc6>

00027750 <process_queue>:
{
   27750:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   27752:	2200      	movs	r2, #0
{
   27754:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   27756:	2300      	movs	r3, #0
   27758:	4608      	mov	r0, r1
{
   2775a:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2775c:	f7f6 fc5e 	bl	1e01c <net_buf_get>
	if (buf) {
   27760:	4605      	mov	r5, r0
   27762:	b158      	cbz	r0, 2777c <process_queue+0x2c>
	return chan_send(chan, buf);
   27764:	4601      	mov	r1, r0
   27766:	4620      	mov	r0, r4
   27768:	f7f1 fba2 	bl	18eb0 <chan_send>
		if (err) {
   2776c:	4604      	mov	r4, r0
   2776e:	b118      	cbz	r0, 27778 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   27770:	4629      	mov	r1, r5
   27772:	4630      	mov	r0, r6
   27774:	f002 f949 	bl	29a0a <k_queue_prepend>
}
   27778:	4620      	mov	r0, r4
   2777a:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2777c:	f06f 0401 	mvn.w	r4, #1
   27780:	e7fa      	b.n	27778 <process_queue+0x28>

00027782 <bt_att_chan_send_rsp>:
{
   27782:	b538      	push	{r3, r4, r5, lr}
   27784:	4604      	mov	r4, r0
   27786:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   27788:	f7f1 fb92 	bl	18eb0 <chan_send>
	if (err) {
   2778c:	b130      	cbz	r0, 2779c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2778e:	4629      	mov	r1, r5
   27790:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   27794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   27798:	f7f6 bd62 	b.w	1e260 <net_buf_put>
}
   2779c:	bd38      	pop	{r3, r4, r5, pc}

0002779e <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2779e:	b510      	push	{r4, lr}
	return list->head;
   277a0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   277a2:	2200      	movs	r2, #0
   277a4:	b153      	cbz	r3, 277bc <sys_slist_find_and_remove.isra.0+0x1e>
   277a6:	428b      	cmp	r3, r1
   277a8:	d10e      	bne.n	277c8 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   277aa:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   277ac:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   277ae:	b932      	cbnz	r2, 277be <sys_slist_find_and_remove.isra.0+0x20>
   277b0:	42a1      	cmp	r1, r4
	list->head = node;
   277b2:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   277b4:	d100      	bne.n	277b8 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   277b6:	6043      	str	r3, [r0, #4]
	parent->next = child;
   277b8:	2300      	movs	r3, #0
   277ba:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   277bc:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   277be:	42a1      	cmp	r1, r4
	parent->next = child;
   277c0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   277c2:	bf08      	it	eq
   277c4:	6042      	streq	r2, [r0, #4]
}
   277c6:	e7f7      	b.n	277b8 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   277c8:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   277ca:	681b      	ldr	r3, [r3, #0]
   277cc:	e7ea      	b.n	277a4 <sys_slist_find_and_remove.isra.0+0x6>

000277ce <att_exec_write_req>:
   277ce:	2006      	movs	r0, #6
   277d0:	4770      	bx	lr

000277d2 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   277d2:	2301      	movs	r3, #1
   277d4:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   277d8:	f3bf 8f5b 	dmb	ish
   277dc:	e850 3f00 	ldrex	r3, [r0]
   277e0:	ea43 0201 	orr.w	r2, r3, r1
   277e4:	e840 2c00 	strex	ip, r2, [r0]
   277e8:	f1bc 0f00 	cmp.w	ip, #0
   277ec:	d1f6      	bne.n	277dc <atomic_test_and_set_bit+0xa>
   277ee:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   277f2:	4219      	tst	r1, r3
}
   277f4:	bf14      	ite	ne
   277f6:	2001      	movne	r0, #1
   277f8:	2000      	moveq	r0, #0
   277fa:	4770      	bx	lr

000277fc <read_cb>:
{
   277fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   27800:	f8d2 8000 	ldr.w	r8, [r2]
{
   27804:	4606      	mov	r6, r0
	data->err = 0x00;
   27806:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   27808:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2780c:	7317      	strb	r7, [r2, #12]
{
   2780e:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   27810:	4631      	mov	r1, r6
   27812:	2295      	movs	r2, #149	; 0x95
   27814:	f000 fedf 	bl	285d6 <bt_gatt_check_perm>
   27818:	4604      	mov	r4, r0
   2781a:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2781c:	b9a0      	cbnz	r0, 27848 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2781e:	e9cd 0000 	strd	r0, r0, [sp]
   27822:	88ab      	ldrh	r3, [r5, #4]
   27824:	68aa      	ldr	r2, [r5, #8]
   27826:	4631      	mov	r1, r6
   27828:	4640      	mov	r0, r8
   2782a:	f7ff ff06 	bl	2763a <att_chan_read>
	if (ret < 0) {
   2782e:	1e03      	subs	r3, r0, #0
   27830:	da0c      	bge.n	2784c <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   27832:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   27836:	bf26      	itte	cs
   27838:	425b      	negcs	r3, r3
   2783a:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2783c:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2783e:	732b      	strb	r3, [r5, #12]
}
   27840:	4620      	mov	r0, r4
   27842:	b002      	add	sp, #8
   27844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   27848:	463c      	mov	r4, r7
   2784a:	e7f9      	b.n	27840 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2784c:	2401      	movs	r4, #1
   2784e:	e7f7      	b.n	27840 <read_cb+0x44>

00027850 <read_vl_cb>:
{
   27850:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   27854:	f8d2 8000 	ldr.w	r8, [r2]
{
   27858:	4606      	mov	r6, r0
	data->err = 0x00;
   2785a:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2785c:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   27860:	7317      	strb	r7, [r2, #12]
{
   27862:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   27864:	4631      	mov	r1, r6
   27866:	2295      	movs	r2, #149	; 0x95
   27868:	f000 feb5 	bl	285d6 <bt_gatt_check_perm>
   2786c:	4604      	mov	r4, r0
   2786e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   27870:	bb18      	cbnz	r0, 278ba <read_vl_cb+0x6a>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   27872:	68a8      	ldr	r0, [r5, #8]
   27874:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   27878:	8982      	ldrh	r2, [r0, #12]
   2787a:	1a9b      	subs	r3, r3, r2
   2787c:	2b01      	cmp	r3, #1
   2787e:	dd15      	ble.n	278ac <read_vl_cb+0x5c>
   27880:	2102      	movs	r1, #2
   27882:	3008      	adds	r0, #8
   27884:	f7f6 fe30 	bl	1e4e8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   27888:	88ab      	ldrh	r3, [r5, #4]
   2788a:	68aa      	ldr	r2, [r5, #8]
   2788c:	e9cd 4400 	strd	r4, r4, [sp]
   27890:	4607      	mov	r7, r0
   27892:	4631      	mov	r1, r6
   27894:	4640      	mov	r0, r8
   27896:	f7ff fed0 	bl	2763a <att_chan_read>
	if (read < 0) {
   2789a:	1e03      	subs	r3, r0, #0
   2789c:	da0a      	bge.n	278b4 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2789e:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   278a2:	bf26      	itte	cs
   278a4:	425b      	negcs	r3, r3
   278a6:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   278a8:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   278aa:	732b      	strb	r3, [r5, #12]
}
   278ac:	4620      	mov	r0, r4
   278ae:	b002      	add	sp, #8
   278b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   278b4:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   278b6:	2401      	movs	r4, #1
   278b8:	e7f8      	b.n	278ac <read_vl_cb+0x5c>
		return BT_GATT_ITER_STOP;
   278ba:	463c      	mov	r4, r7
   278bc:	e7f6      	b.n	278ac <read_vl_cb+0x5c>

000278be <bt_att_sent>:
{
   278be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   278c2:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   278c4:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   278c6:	f100 0394 	add.w	r3, r0, #148	; 0x94
	struct bt_att *att = chan->att;
   278ca:	f850 6c04 	ldr.w	r6, [r0, #-4]
   278ce:	f3bf 8f5b 	dmb	ish
   278d2:	e853 2f00 	ldrex	r2, [r3]
   278d6:	f022 0210 	bic.w	r2, r2, #16
   278da:	e843 2100 	strex	r1, r2, [r3]
   278de:	2900      	cmp	r1, #0
   278e0:	d1f7      	bne.n	278d2 <bt_att_sent+0x14>
   278e2:	f3bf 8f5b 	dmb	ish
	if (!att) {
   278e6:	b3a6      	cbz	r6, 27952 <bt_att_sent+0x94>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   278e8:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
   278ec:	f1b8 0f00 	cmp.w	r8, #0
   278f0:	d113      	bne.n	2791a <bt_att_sent+0x5c>
   278f2:	6873      	ldr	r3, [r6, #4]
   278f4:	b18b      	cbz	r3, 2791a <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   278f6:	1d30      	adds	r0, r6, #4
   278f8:	f7ff fd4c 	bl	27394 <sys_slist_get>
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   278fc:	f8d0 9008 	ldr.w	r9, [r0, #8]
		sys_snode_t *node = sys_slist_get(&att->reqs);
   27900:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   27902:	4648      	mov	r0, r9
   27904:	f7ff fd50 	bl	273a8 <net_buf_frags_len>
   27908:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2790a:	4283      	cmp	r3, r0
   2790c:	d212      	bcs.n	27934 <bt_att_sent+0x76>
	parent->next = child;
   2790e:	6873      	ldr	r3, [r6, #4]
   27910:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   27912:	68b3      	ldr	r3, [r6, #8]
	list->head = node;
   27914:	6075      	str	r5, [r6, #4]
Z_GENLIST_PREPEND(slist, snode)
   27916:	b903      	cbnz	r3, 2791a <bt_att_sent+0x5c>
	list->tail = node;
   27918:	60b5      	str	r5, [r6, #8]
	err = process_queue(chan, &chan->tx_queue);
   2791a:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   2791e:	4638      	mov	r0, r7
   27920:	f7ff ff16 	bl	27750 <process_queue>
	if (!err) {
   27924:	b1a8      	cbz	r0, 27952 <bt_att_sent+0x94>
	(void)process_queue(chan, &att->tx_queue);
   27926:	f106 010c 	add.w	r1, r6, #12
   2792a:	4638      	mov	r0, r7
}
   2792c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	(void)process_queue(chan, &att->tx_queue);
   27930:	f7ff bf0e 	b.w	27750 <process_queue>
	chan->req = req;
   27934:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	return chan_send(chan, buf);
   27938:	4649      	mov	r1, r9
	req->buf = NULL;
   2793a:	f8c5 8008 	str.w	r8, [r5, #8]
	return chan_send(chan, buf);
   2793e:	4638      	mov	r0, r7
   27940:	f7f1 fab6 	bl	18eb0 <chan_send>
	if (err) {
   27944:	2800      	cmp	r0, #0
   27946:	d004      	beq.n	27952 <bt_att_sent+0x94>
		req->buf = buf;
   27948:	f8c5 9008 	str.w	r9, [r5, #8]
		chan->req = NULL;
   2794c:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27950:	dbdd      	blt.n	2790e <bt_att_sent+0x50>
}
   27952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027956 <att_req_send_process>:
{
   27956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2795a:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2795c:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2795e:	2c00      	cmp	r4, #0
   27960:	d03b      	beq.n	279da <att_req_send_process+0x84>
	return node->next;
   27962:	f854 59f0 	ldr.w	r5, [r4], #-240
   27966:	b105      	cbz	r5, 2796a <att_req_send_process+0x14>
   27968:	3df0      	subs	r5, #240	; 0xf0
{
   2796a:	2300      	movs	r3, #0
   2796c:	461e      	mov	r6, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   2796e:	f108 0704 	add.w	r7, r8, #4
		if (chan->req) {
   27972:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   27976:	b9e2      	cbnz	r2, 279b2 <att_req_send_process+0x5c>
		if (!req && prev &&
   27978:	b16e      	cbz	r6, 27996 <att_req_send_process+0x40>
	sys_snode_t *node = sys_slist_get(reqs);
   2797a:	4638      	mov	r0, r7
   2797c:	f7ff fd0a 	bl	27394 <sys_slist_get>
	if (node) {
   27980:	4606      	mov	r6, r0
   27982:	b9c0      	cbnz	r0, 279b6 <att_req_send_process+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27984:	b34d      	cbz	r5, 279da <att_req_send_process+0x84>
   27986:	f8d5 20f0 	ldr.w	r2, [r5, #240]	; 0xf0
   2798a:	b102      	cbz	r2, 2798e <att_req_send_process+0x38>
   2798c:	3af0      	subs	r2, #240	; 0xf0
{
   2798e:	4623      	mov	r3, r4
   27990:	462c      	mov	r4, r5
   27992:	4615      	mov	r5, r2
   27994:	e7ed      	b.n	27972 <att_req_send_process+0x1c>
		if (!req && prev &&
   27996:	2b00      	cmp	r3, #0
   27998:	d0ef      	beq.n	2797a <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2799a:	2103      	movs	r1, #3
   2799c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   279a0:	f7ff fd61 	bl	27466 <atomic_test_bit>
   279a4:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   279a6:	f103 0098 	add.w	r0, r3, #152	; 0x98
   279aa:	f7ff fd5c 	bl	27466 <atomic_test_bit>
		if (!req && prev &&
   279ae:	4282      	cmp	r2, r0
   279b0:	d1e3      	bne.n	2797a <att_req_send_process+0x24>
   279b2:	461c      	mov	r4, r3
   279b4:	e7e6      	b.n	27984 <att_req_send_process+0x2e>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   279b6:	4601      	mov	r1, r0
   279b8:	4620      	mov	r0, r4
   279ba:	f7f1 fadd 	bl	18f78 <bt_att_chan_req_send>
   279be:	2800      	cmp	r0, #0
   279c0:	da0b      	bge.n	279da <att_req_send_process+0x84>
	parent->next = child;
   279c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   279c6:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   279c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   279cc:	f8c8 6004 	str.w	r6, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   279d0:	2b00      	cmp	r3, #0
   279d2:	d1d7      	bne.n	27984 <att_req_send_process+0x2e>
	list->tail = node;
   279d4:	f8c8 6008 	str.w	r6, [r8, #8]
}
   279d8:	e7d4      	b.n	27984 <att_req_send_process+0x2e>
}
   279da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000279de <bt_att_status>:
{
   279de:	b538      	push	{r3, r4, r5, lr}
   279e0:	4605      	mov	r5, r0
   279e2:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   279e4:	2100      	movs	r1, #0
   279e6:	f7ff fd3e 	bl	27466 <atomic_test_bit>
   279ea:	b1c0      	cbz	r0, 27a1e <bt_att_status+0x40>
	if (!chan->att) {
   279ec:	f855 0c04 	ldr.w	r0, [r5, #-4]
   279f0:	b1a8      	cbz	r0, 27a1e <bt_att_status+0x40>
	if (chan->req) {
   279f2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   279f6:	b993      	cbnz	r3, 27a1e <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   279f8:	3004      	adds	r0, #4
   279fa:	f7ff fccb 	bl	27394 <sys_slist_get>
	if (!node) {
   279fe:	4604      	mov	r4, r0
   27a00:	b168      	cbz	r0, 27a1e <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27a02:	4601      	mov	r1, r0
   27a04:	1f28      	subs	r0, r5, #4
   27a06:	f7f1 fab7 	bl	18f78 <bt_att_chan_req_send>
   27a0a:	2800      	cmp	r0, #0
   27a0c:	da07      	bge.n	27a1e <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   27a0e:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   27a12:	685a      	ldr	r2, [r3, #4]
   27a14:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   27a16:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   27a18:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   27a1a:	b902      	cbnz	r2, 27a1e <bt_att_status+0x40>
	list->tail = node;
   27a1c:	609c      	str	r4, [r3, #8]
}
   27a1e:	bd38      	pop	{r3, r4, r5, pc}

00027a20 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   27a20:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   27a22:	6883      	ldr	r3, [r0, #8]
   27a24:	695b      	ldr	r3, [r3, #20]
   27a26:	b10b      	cbz	r3, 27a2c <att_sent+0xc>
		chan->ops->sent(chan);
   27a28:	3004      	adds	r0, #4
   27a2a:	4718      	bx	r3
}
   27a2c:	4770      	bx	lr

00027a2e <att_unknown>:
{
   27a2e:	b510      	push	{r4, lr}
   27a30:	460c      	mov	r4, r1
	if (!err) {
   27a32:	b90a      	cbnz	r2, 27a38 <att_unknown+0xa>
		att_sent(conn, user_data);
   27a34:	f7ff fff4 	bl	27a20 <att_sent>
	tx_meta_data_free(user_data);
   27a38:	4620      	mov	r0, r4
}
   27a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   27a3e:	f7f1 b923 	b.w	18c88 <tx_meta_data_free>

00027a42 <att_tx_complete>:
{
   27a42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27a46:	4606      	mov	r6, r0
   27a48:	460d      	mov	r5, r1
	if (!err) {
   27a4a:	4614      	mov	r4, r2
   27a4c:	b90a      	cbnz	r2, 27a52 <att_tx_complete+0x10>
		att_sent(conn, user_data);
   27a4e:	f7ff ffe7 	bl	27a20 <att_sent>
	tx_meta_data_free(data);
   27a52:	4628      	mov	r0, r5
	bt_gatt_complete_func_t func = data->func;
   27a54:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   27a56:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   27a5a:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   27a5e:	f7f1 f913 	bl	18c88 <tx_meta_data_free>
	if (!err && func) {
   27a62:	b904      	cbnz	r4, 27a66 <att_tx_complete+0x24>
   27a64:	b92f      	cbnz	r7, 27a72 <att_tx_complete+0x30>
}
   27a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   27a6a:	4649      	mov	r1, r9
   27a6c:	4630      	mov	r0, r6
   27a6e:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   27a70:	3401      	adds	r4, #1
   27a72:	b2a3      	uxth	r3, r4
   27a74:	4598      	cmp	r8, r3
   27a76:	d8f8      	bhi.n	27a6a <att_tx_complete+0x28>
   27a78:	e7f5      	b.n	27a66 <att_tx_complete+0x24>

00027a7a <att_req_sent>:
{
   27a7a:	b510      	push	{r4, lr}
   27a7c:	460c      	mov	r4, r1
	if (!err) {
   27a7e:	b90a      	cbnz	r2, 27a84 <att_req_sent+0xa>
		att_sent(conn, user_data);
   27a80:	f7ff ffce 	bl	27a20 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   27a84:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   27a86:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   27a8a:	b12b      	cbz	r3, 27a98 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   27a8c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   27a90:	2300      	movs	r3, #0
   27a92:	30c0      	adds	r0, #192	; 0xc0
   27a94:	f7fb fb60 	bl	23158 <k_work_reschedule>
	tx_meta_data_free(user_data);
   27a98:	4620      	mov	r0, r4
}
   27a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   27a9e:	f7f1 b8f3 	b.w	18c88 <tx_meta_data_free>

00027aa2 <att_cfm_sent>:
{
   27aa2:	b510      	push	{r4, lr}
   27aa4:	460c      	mov	r4, r1
	if (!err) {
   27aa6:	b90a      	cbnz	r2, 27aac <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   27aa8:	f7ff ffba 	bl	27a20 <att_sent>
   27aac:	6823      	ldr	r3, [r4, #0]
   27aae:	f3bf 8f5b 	dmb	ish
   27ab2:	3398      	adds	r3, #152	; 0x98
   27ab4:	e853 2f00 	ldrex	r2, [r3]
   27ab8:	f022 0202 	bic.w	r2, r2, #2
   27abc:	e843 2100 	strex	r1, r2, [r3]
   27ac0:	2900      	cmp	r1, #0
   27ac2:	d1f7      	bne.n	27ab4 <att_cfm_sent+0x12>
   27ac4:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   27ac8:	4620      	mov	r0, r4
}
   27aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   27ace:	f7f1 b8db 	b.w	18c88 <tx_meta_data_free>

00027ad2 <att_rsp_sent>:
{
   27ad2:	b510      	push	{r4, lr}
   27ad4:	460c      	mov	r4, r1
	if (!err) {
   27ad6:	b90a      	cbnz	r2, 27adc <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   27ad8:	f7ff ffa2 	bl	27a20 <att_sent>
   27adc:	6823      	ldr	r3, [r4, #0]
   27ade:	f3bf 8f5b 	dmb	ish
   27ae2:	3398      	adds	r3, #152	; 0x98
   27ae4:	e853 2f00 	ldrex	r2, [r3]
   27ae8:	f022 0201 	bic.w	r2, r2, #1
   27aec:	e843 2100 	strex	r1, r2, [r3]
   27af0:	2900      	cmp	r1, #0
   27af2:	d1f7      	bne.n	27ae4 <att_rsp_sent+0x12>
   27af4:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   27af8:	4620      	mov	r0, r4
}
   27afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   27afe:	f7f1 b8c3 	b.w	18c88 <tx_meta_data_free>

00027b02 <att_indicate>:
{
   27b02:	b570      	push	{r4, r5, r6, lr}
   27b04:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   27b06:	f101 0008 	add.w	r0, r1, #8
   27b0a:	460d      	mov	r5, r1
   27b0c:	f001 fad8 	bl	290c0 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   27b10:	6826      	ldr	r6, [r4, #0]
   27b12:	89ab      	ldrh	r3, [r5, #12]
   27b14:	68aa      	ldr	r2, [r5, #8]
   27b16:	4601      	mov	r1, r0
   27b18:	6830      	ldr	r0, [r6, #0]
   27b1a:	f000 fe18 	bl	2874e <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   27b1e:	211e      	movs	r1, #30
   27b20:	2200      	movs	r2, #0
   27b22:	4620      	mov	r0, r4
   27b24:	f7f1 fb60 	bl	191e8 <bt_att_chan_create_pdu>
	if (!buf) {
   27b28:	4601      	mov	r1, r0
   27b2a:	b110      	cbz	r0, 27b32 <att_indicate+0x30>
	bt_att_chan_send_rsp(chan, buf);
   27b2c:	4620      	mov	r0, r4
   27b2e:	f7ff fe28 	bl	27782 <bt_att_chan_send_rsp>
}
   27b32:	2000      	movs	r0, #0
   27b34:	bd70      	pop	{r4, r5, r6, pc}

00027b36 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27b3a:	4688      	mov	r8, r1
   27b3c:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   27b3e:	2101      	movs	r1, #1
   27b40:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27b42:	4605      	mov	r5, r0
   27b44:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   27b46:	f7f1 fb4f 	bl	191e8 <bt_att_chan_create_pdu>
	if (!buf) {
   27b4a:	4604      	mov	r4, r0
   27b4c:	b170      	cbz	r0, 27b6c <send_err_rsp.part.0+0x36>
	return net_buf_simple_add(&buf->b, len);
   27b4e:	2104      	movs	r1, #4
   27b50:	3008      	adds	r0, #8
   27b52:	f7f6 fcc9 	bl	1e4e8 <net_buf_simple_add>
	rsp->request = req;
   27b56:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   27b5a:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   27b5c:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf);
   27b60:	4621      	mov	r1, r4
   27b62:	4628      	mov	r0, r5
}
   27b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   27b68:	f7ff be0b 	b.w	27782 <bt_att_chan_send_rsp>
}
   27b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027b70 <att_write_req>:
{
   27b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27b72:	460c      	mov	r4, r1
   27b74:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   27b76:	f101 0008 	add.w	r0, r1, #8
   27b7a:	f001 faa1 	bl	290c0 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   27b7e:	89a2      	ldrh	r2, [r4, #12]
   27b80:	9201      	str	r2, [sp, #4]
   27b82:	68a2      	ldr	r2, [r4, #8]
   27b84:	9200      	str	r2, [sp, #0]
   27b86:	4603      	mov	r3, r0
   27b88:	2213      	movs	r2, #19
   27b8a:	2112      	movs	r1, #18
   27b8c:	4628      	mov	r0, r5
   27b8e:	f7f1 fbf1 	bl	19374 <att_write_rsp.constprop.0>
}
   27b92:	b003      	add	sp, #12
   27b94:	bd30      	pop	{r4, r5, pc}

00027b96 <att_write_cmd>:
{
   27b96:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27b98:	460c      	mov	r4, r1
   27b9a:	4605      	mov	r5, r0
   27b9c:	f101 0008 	add.w	r0, r1, #8
   27ba0:	f001 fa8e 	bl	290c0 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   27ba4:	89a2      	ldrh	r2, [r4, #12]
   27ba6:	9201      	str	r2, [sp, #4]
   27ba8:	68a2      	ldr	r2, [r4, #8]
   27baa:	9200      	str	r2, [sp, #0]
   27bac:	2200      	movs	r2, #0
   27bae:	4603      	mov	r3, r0
   27bb0:	4611      	mov	r1, r2
   27bb2:	4628      	mov	r0, r5
   27bb4:	f7f1 fbde 	bl	19374 <att_write_rsp.constprop.0>
}
   27bb8:	b003      	add	sp, #12
   27bba:	bd30      	pop	{r4, r5, pc}

00027bbc <att_read_blob_req>:
{
   27bbc:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   27bbe:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   27bc0:	8813      	ldrh	r3, [r2, #0]
   27bc2:	8852      	ldrh	r2, [r2, #2]
   27bc4:	9200      	str	r2, [sp, #0]
   27bc6:	210c      	movs	r1, #12
   27bc8:	220d      	movs	r2, #13
   27bca:	f7f1 fd97 	bl	196fc <att_read_rsp>
}
   27bce:	b003      	add	sp, #12
   27bd0:	f85d fb04 	ldr.w	pc, [sp], #4

00027bd4 <att_read_req>:
{
   27bd4:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   27bd6:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   27bd8:	2200      	movs	r2, #0
   27bda:	881b      	ldrh	r3, [r3, #0]
   27bdc:	9200      	str	r2, [sp, #0]
   27bde:	210a      	movs	r1, #10
   27be0:	220b      	movs	r2, #11
   27be2:	f7f1 fd8b 	bl	196fc <att_read_rsp>
}
   27be6:	b003      	add	sp, #12
   27be8:	f85d fb04 	ldr.w	pc, [sp], #4

00027bec <att_mtu_req>:
{
   27bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27bf0:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   27bf2:	f850 2b98 	ldr.w	r2, [r0], #152
{
   27bf6:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   27bf8:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   27bfa:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   27bfc:	f7ff fc33 	bl	27466 <atomic_test_bit>
   27c00:	4604      	mov	r4, r0
   27c02:	bb60      	cbnz	r0, 27c5e <att_mtu_req+0x72>
	mtu_client = sys_le16_to_cpu(req->mtu);
   27c04:	689b      	ldr	r3, [r3, #8]
   27c06:	881f      	ldrh	r7, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   27c08:	2f16      	cmp	r7, #22
   27c0a:	d92a      	bls.n	27c62 <att_mtu_req+0x76>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   27c0c:	2202      	movs	r2, #2
   27c0e:	4630      	mov	r0, r6
   27c10:	f7f1 fc1c 	bl	1944c <bt_att_create_pdu>
	if (!pdu) {
   27c14:	4680      	mov	r8, r0
   27c16:	b330      	cbz	r0, 27c66 <att_mtu_req+0x7a>
	return net_buf_simple_add(&buf->b, len);
   27c18:	2102      	movs	r1, #2
   27c1a:	3008      	adds	r0, #8
   27c1c:	f7f6 fc64 	bl	1e4e8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   27c20:	2341      	movs	r3, #65	; 0x41
   27c22:	7003      	strb	r3, [r0, #0]
   27c24:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   27c26:	4641      	mov	r1, r8
   27c28:	4628      	mov	r0, r5
   27c2a:	f7ff fdaa 	bl	27782 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   27c2e:	2f41      	cmp	r7, #65	; 0x41
   27c30:	bf28      	it	cs
   27c32:	2741      	movcs	r7, #65	; 0x41
   27c34:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   27c36:	856f      	strh	r7, [r5, #42]	; 0x2a
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27c38:	3604      	adds	r6, #4
   27c3a:	f3bf 8f5b 	dmb	ish
   27c3e:	e856 3f00 	ldrex	r3, [r6]
   27c42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   27c46:	e846 3200 	strex	r2, r3, [r6]
   27c4a:	2a00      	cmp	r2, #0
   27c4c:	d1f7      	bne.n	27c3e <att_mtu_req+0x52>
   27c4e:	f3bf 8f5b 	dmb	ish
	att_chan_mtu_updated(chan);
   27c52:	4628      	mov	r0, r5
   27c54:	f7ff fc29 	bl	274aa <att_chan_mtu_updated>
	return 0;
   27c58:	4620      	mov	r0, r4
}
   27c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   27c5e:	2006      	movs	r0, #6
   27c60:	e7fb      	b.n	27c5a <att_mtu_req+0x6e>
		return BT_ATT_ERR_INVALID_PDU;
   27c62:	2004      	movs	r0, #4
   27c64:	e7f9      	b.n	27c5a <att_mtu_req+0x6e>
		return BT_ATT_ERR_UNLIKELY;
   27c66:	200e      	movs	r0, #14
   27c68:	e7f7      	b.n	27c5a <att_mtu_req+0x6e>

00027c6a <bt_att_get_mtu>:
{
   27c6a:	b508      	push	{r3, lr}
	att = att_get(conn);
   27c6c:	f7f0 ffd0 	bl	18c10 <att_get>
	if (!att) {
   27c70:	b198      	cbz	r0, 27c9a <bt_att_get_mtu+0x30>
	return list->head;
   27c72:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27c74:	b188      	cbz	r0, 27c9a <bt_att_get_mtu+0x30>
   27c76:	4601      	mov	r1, r0
	return node->next;
   27c78:	f851 39f0 	ldr.w	r3, [r1], #-240
   27c7c:	b103      	cbz	r3, 27c80 <bt_att_get_mtu+0x16>
   27c7e:	3bf0      	subs	r3, #240	; 0xf0
{
   27c80:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   27c82:	8d4a      	ldrh	r2, [r1, #42]	; 0x2a
   27c84:	4290      	cmp	r0, r2
   27c86:	bf38      	it	cc
   27c88:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27c8a:	b133      	cbz	r3, 27c9a <bt_att_get_mtu+0x30>
   27c8c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   27c90:	b102      	cbz	r2, 27c94 <bt_att_get_mtu+0x2a>
   27c92:	3af0      	subs	r2, #240	; 0xf0
{
   27c94:	4619      	mov	r1, r3
   27c96:	4613      	mov	r3, r2
   27c98:	e7f3      	b.n	27c82 <bt_att_get_mtu+0x18>
}
   27c9a:	bd08      	pop	{r3, pc}

00027c9c <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   27c9c:	898a      	ldrh	r2, [r1, #12]
   27c9e:	6889      	ldr	r1, [r1, #8]
   27ca0:	2300      	movs	r3, #0
   27ca2:	f7f1 bee1 	b.w	19a68 <att_handle_rsp>

00027ca6 <att_handle_find_type_rsp>:
   27ca6:	f7ff bff9 	b.w	27c9c <att_handle_find_info_rsp>

00027caa <att_handle_read_type_rsp>:
   27caa:	f7ff bff7 	b.w	27c9c <att_handle_find_info_rsp>

00027cae <att_handle_read_rsp>:
   27cae:	f7ff bff5 	b.w	27c9c <att_handle_find_info_rsp>

00027cb2 <att_handle_read_blob_rsp>:
   27cb2:	f7ff bff3 	b.w	27c9c <att_handle_find_info_rsp>

00027cb6 <att_handle_read_mult_rsp>:
   27cb6:	f7ff bff1 	b.w	27c9c <att_handle_find_info_rsp>

00027cba <att_handle_read_mult_vl_rsp>:
   27cba:	f7ff bfef 	b.w	27c9c <att_handle_find_info_rsp>

00027cbe <att_handle_read_group_rsp>:
   27cbe:	f7ff bfed 	b.w	27c9c <att_handle_find_info_rsp>

00027cc2 <att_handle_write_rsp>:
   27cc2:	f7ff bfeb 	b.w	27c9c <att_handle_find_info_rsp>

00027cc6 <att_handle_prepare_write_rsp>:
   27cc6:	f7ff bfe9 	b.w	27c9c <att_handle_find_info_rsp>

00027cca <att_handle_exec_write_rsp>:
   27cca:	f7ff bfe7 	b.w	27c9c <att_handle_find_info_rsp>

00027cce <att_confirm>:
   27cce:	f7ff bfe5 	b.w	27c9c <att_handle_find_info_rsp>

00027cd2 <att_mtu_rsp>:
{
   27cd2:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   27cd4:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   27cd6:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   27cd8:	2b16      	cmp	r3, #22
{
   27cda:	4604      	mov	r4, r0
   27cdc:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   27cde:	d806      	bhi.n	27cee <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   27ce0:	2200      	movs	r2, #0
   27ce2:	2304      	movs	r3, #4
   27ce4:	4611      	mov	r1, r2
}
   27ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   27cea:	f7f1 bebd 	b.w	19a68 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   27cee:	2b41      	cmp	r3, #65	; 0x41
   27cf0:	bf28      	it	cs
   27cf2:	2341      	movcs	r3, #65	; 0x41
   27cf4:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   27cf6:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   27cf8:	f7ff fbd7 	bl	274aa <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   27cfc:	89aa      	ldrh	r2, [r5, #12]
   27cfe:	2300      	movs	r3, #0
   27d00:	4631      	mov	r1, r6
   27d02:	4620      	mov	r0, r4
   27d04:	e7ef      	b.n	27ce6 <att_mtu_rsp+0x14>

00027d06 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   27d06:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   27d0a:	b570      	push	{r4, r5, r6, lr}
   27d0c:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   27d0e:	1f06      	subs	r6, r0, #4
	if (!att_chan->att) {
   27d10:	2b00      	cmp	r3, #0
   27d12:	d039      	beq.n	27d88 <bt_att_encrypt_change+0x82>
	if (hci_status) {
   27d14:	b171      	cbz	r1, 27d34 <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
   27d16:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   27d1a:	2b00      	cmp	r3, #0
   27d1c:	d034      	beq.n	27d88 <bt_att_encrypt_change+0x82>
   27d1e:	7c1b      	ldrb	r3, [r3, #16]
   27d20:	07da      	lsls	r2, r3, #31
   27d22:	d531      	bpl.n	27d88 <bt_att_encrypt_change+0x82>
		return BT_ATT_ERR_AUTHENTICATION;
   27d24:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   27d26:	2200      	movs	r2, #0
   27d28:	4630      	mov	r0, r6
   27d2a:	4611      	mov	r1, r2
}
   27d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   27d30:	f7f1 be9a 	b.w	19a68 <att_handle_rsp>
	struct bt_conn *conn = le_chan->chan.conn;
   27d34:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   27d36:	4628      	mov	r0, r5
   27d38:	f7f4 f990 	bl	1c05c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   27d3c:	7a6b      	ldrb	r3, [r5, #9]
   27d3e:	2b01      	cmp	r3, #1
   27d40:	d022      	beq.n	27d88 <bt_att_encrypt_change+0x82>
	if (!(att_chan->req && att_chan->req->retrying)) {
   27d42:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   27d46:	b1fd      	cbz	r5, 27d88 <bt_att_encrypt_change+0x82>
   27d48:	7c2b      	ldrb	r3, [r5, #16]
   27d4a:	07db      	lsls	r3, r3, #31
   27d4c:	d51c      	bpl.n	27d88 <bt_att_encrypt_change+0x82>
	if (!req->encode) {
   27d4e:	68eb      	ldr	r3, [r5, #12]
   27d50:	2b00      	cmp	r3, #0
   27d52:	d0e7      	beq.n	27d24 <bt_att_encrypt_change+0x1e>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   27d54:	696a      	ldr	r2, [r5, #20]
   27d56:	7c69      	ldrb	r1, [r5, #17]
   27d58:	4630      	mov	r0, r6
   27d5a:	f7f1 fa45 	bl	191e8 <bt_att_chan_create_pdu>
	if (!buf) {
   27d5e:	4604      	mov	r4, r0
   27d60:	b150      	cbz	r0, 27d78 <bt_att_encrypt_change+0x72>
	if (req->encode(buf, req->len, req->user_data)) {
   27d62:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   27d66:	68eb      	ldr	r3, [r5, #12]
   27d68:	4798      	blx	r3
   27d6a:	b138      	cbz	r0, 27d7c <bt_att_encrypt_change+0x76>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   27d6c:	6960      	ldr	r0, [r4, #20]
   27d6e:	f7f0 ff8b 	bl	18c88 <tx_meta_data_free>
		net_buf_unref(buf);
   27d72:	4620      	mov	r0, r4
   27d74:	f7f6 faa2 	bl	1e2bc <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   27d78:	230e      	movs	r3, #14
   27d7a:	e7d4      	b.n	27d26 <bt_att_encrypt_change+0x20>
	if (chan_send(att_chan, buf)) {
   27d7c:	4621      	mov	r1, r4
   27d7e:	4630      	mov	r0, r6
   27d80:	f7f1 f896 	bl	18eb0 <chan_send>
   27d84:	2800      	cmp	r0, #0
   27d86:	d1f1      	bne.n	27d6c <bt_att_encrypt_change+0x66>
}
   27d88:	bd70      	pop	{r4, r5, r6, pc}

00027d8a <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   27d8a:	b510      	push	{r4, lr}
   27d8c:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   27d8e:	f7f0 ff3f 	bl	18c10 <att_get>
	if (!att) {
   27d92:	b198      	cbz	r0, 27dbc <bt_att_find_req_by_user_data+0x32>
	return list->head;
   27d94:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   27d96:	b14b      	cbz	r3, 27dac <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   27d98:	f853 2c54 	ldr.w	r2, [r3, #-84]
   27d9c:	6991      	ldr	r1, [r2, #24]
   27d9e:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   27da0:	f1a3 03f0 	sub.w	r3, r3, #240	; 0xf0
		if (chan->req->user_data == user_data) {
   27da4:	d009      	beq.n	27dba <bt_att_find_req_by_user_data+0x30>
	return node->next;
   27da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   27daa:	e7f4      	b.n	27d96 <bt_att_find_req_by_user_data+0xc>
	return list->head;
   27dac:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   27dae:	b128      	cbz	r0, 27dbc <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   27db0:	6983      	ldr	r3, [r0, #24]
   27db2:	42a3      	cmp	r3, r4
   27db4:	d002      	beq.n	27dbc <bt_att_find_req_by_user_data+0x32>
	return node->next;
   27db6:	6800      	ldr	r0, [r0, #0]
   27db8:	e7f9      	b.n	27dae <bt_att_find_req_by_user_data+0x24>
   27dba:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   27dbc:	bd10      	pop	{r4, pc}

00027dbe <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   27dbe:	2001      	movs	r0, #1
   27dc0:	4770      	bx	lr

00027dc2 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   27dc2:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   27dc4:	f7f0 ff24 	bl	18c10 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   27dc8:	b198      	cbz	r0, 27df2 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   27dca:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   27dcc:	b18b      	cbz	r3, 27df2 <bt_att_clear_out_of_sync_sent+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27dce:	f3bf 8f5b 	dmb	ish
   27dd2:	3bf0      	subs	r3, #240	; 0xf0
   27dd4:	f103 0298 	add.w	r2, r3, #152	; 0x98
   27dd8:	e852 1f00 	ldrex	r1, [r2]
   27ddc:	f021 0120 	bic.w	r1, r1, #32
   27de0:	e842 1000 	strex	r0, r1, [r2]
   27de4:	2800      	cmp	r0, #0
   27de6:	d1f7      	bne.n	27dd8 <bt_att_clear_out_of_sync_sent+0x16>
   27de8:	f3bf 8f5b 	dmb	ish
	return node->next;
   27dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   27df0:	e7ec      	b.n	27dcc <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   27df2:	bd08      	pop	{r3, pc}

00027df4 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   27df4:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   27df6:	2104      	movs	r1, #4
   27df8:	f7ff fac1 	bl	2737e <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   27dfc:	b128      	cbz	r0, 27e0a <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   27dfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   27e02:	2105      	movs	r1, #5
   27e04:	3094      	adds	r0, #148	; 0x94
   27e06:	f7ff bb2e 	b.w	27466 <atomic_test_bit>
}
   27e0a:	bd08      	pop	{r3, pc}

00027e0c <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   27e0c:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   27e0e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   27e12:	2201      	movs	r2, #1
   27e14:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   27e16:	7403      	strb	r3, [r0, #16]
}
   27e18:	4770      	bx	lr

00027e1a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   27e1a:	6010      	str	r0, [r2, #0]
}
   27e1c:	2000      	movs	r0, #0
   27e1e:	4770      	bx	lr

00027e20 <gatt_ccc_changed>:
{
   27e20:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   27e22:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   27e24:	895a      	ldrh	r2, [r3, #10]
   27e26:	428a      	cmp	r2, r1
   27e28:	d003      	beq.n	27e32 <gatt_ccc_changed+0x12>
		ccc->value = value;
   27e2a:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   27e2c:	68db      	ldr	r3, [r3, #12]
   27e2e:	b103      	cbz	r3, 27e32 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   27e30:	4718      	bx	r3
}
   27e32:	4770      	bx	lr

00027e34 <gatt_indicate_rsp>:
{
   27e34:	b510      	push	{r4, lr}
   27e36:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   27e38:	68a3      	ldr	r3, [r4, #8]
{
   27e3a:	460a      	mov	r2, r1
	if (params->func) {
   27e3c:	b10b      	cbz	r3, 27e42 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   27e3e:	4621      	mov	r1, r4
   27e40:	4798      	blx	r3
	params->_ref--;
   27e42:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   27e44:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   27e46:	3b01      	subs	r3, #1
   27e48:	b2db      	uxtb	r3, r3
   27e4a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   27e4c:	b122      	cbz	r2, 27e58 <gatt_indicate_rsp+0x24>
   27e4e:	b91b      	cbnz	r3, 27e58 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   27e50:	4620      	mov	r0, r4
}
   27e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   27e56:	4710      	bx	r2
}
   27e58:	bd10      	pop	{r4, pc}

00027e5a <match_uuid>:
	data->attr = attr;
   27e5a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   27e5c:	8091      	strh	r1, [r2, #4]
}
   27e5e:	2000      	movs	r0, #0
   27e60:	4770      	bx	lr

00027e62 <ccc_set_cb>:
}
   27e62:	2000      	movs	r0, #0
   27e64:	4770      	bx	lr

00027e66 <gen_hash_m>:
{
   27e66:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   27e68:	6807      	ldr	r7, [r0, #0]
   27e6a:	783d      	ldrb	r5, [r7, #0]
{
   27e6c:	b089      	sub	sp, #36	; 0x24
   27e6e:	4606      	mov	r6, r0
   27e70:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   27e72:	b10d      	cbz	r5, 27e78 <gen_hash_m+0x12>
	switch (u16->val) {
   27e74:	2501      	movs	r5, #1
   27e76:	e014      	b.n	27ea2 <gen_hash_m+0x3c>
   27e78:	887b      	ldrh	r3, [r7, #2]
   27e7a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   27e7e:	d004      	beq.n	27e8a <gen_hash_m+0x24>
   27e80:	d812      	bhi.n	27ea8 <gen_hash_m+0x42>
   27e82:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   27e86:	2b03      	cmp	r3, #3
   27e88:	d8f4      	bhi.n	27e74 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   27e8a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27e8e:	2202      	movs	r2, #2
   27e90:	f10d 010a 	add.w	r1, sp, #10
   27e94:	4620      	mov	r0, r4
   27e96:	f7fe fcec 	bl	26872 <tc_cmac_update>
   27e9a:	b9e0      	cbnz	r0, 27ed6 <gen_hash_m+0x70>
			state->err = -EINVAL;
   27e9c:	f06f 0315 	mvn.w	r3, #21
   27ea0:	65a3      	str	r3, [r4, #88]	; 0x58
}
   27ea2:	4628      	mov	r0, r5
   27ea4:	b009      	add	sp, #36	; 0x24
   27ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   27ea8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   27eac:	33ff      	adds	r3, #255	; 0xff
   27eae:	b29b      	uxth	r3, r3
   27eb0:	2b04      	cmp	r3, #4
   27eb2:	d8df      	bhi.n	27e74 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   27eb4:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27eb8:	2202      	movs	r2, #2
   27eba:	f10d 010a 	add.w	r1, sp, #10
   27ebe:	4620      	mov	r0, r4
   27ec0:	f7fe fcd7 	bl	26872 <tc_cmac_update>
   27ec4:	2800      	cmp	r0, #0
   27ec6:	d0e9      	beq.n	27e9c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   27ec8:	887b      	ldrh	r3, [r7, #2]
   27eca:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27ece:	2202      	movs	r2, #2
   27ed0:	f10d 010a 	add.w	r1, sp, #10
   27ed4:	e016      	b.n	27f04 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   27ed6:	887b      	ldrh	r3, [r7, #2]
   27ed8:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27edc:	2202      	movs	r2, #2
   27ede:	f10d 010a 	add.w	r1, sp, #10
   27ee2:	4620      	mov	r0, r4
   27ee4:	f7fe fcc5 	bl	26872 <tc_cmac_update>
   27ee8:	2800      	cmp	r0, #0
   27eea:	d0d7      	beq.n	27e9c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   27eec:	2000      	movs	r0, #0
   27eee:	aa03      	add	r2, sp, #12
   27ef0:	6877      	ldr	r7, [r6, #4]
   27ef2:	9000      	str	r0, [sp, #0]
   27ef4:	2313      	movs	r3, #19
   27ef6:	4631      	mov	r1, r6
   27ef8:	47b8      	blx	r7
		if (len < 0) {
   27efa:	1e02      	subs	r2, r0, #0
   27efc:	da01      	bge.n	27f02 <gen_hash_m+0x9c>
			state->err = len;
   27efe:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   27f00:	e7cf      	b.n	27ea2 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   27f02:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27f04:	4620      	mov	r0, r4
   27f06:	f7fe fcb4 	bl	26872 <tc_cmac_update>
   27f0a:	2800      	cmp	r0, #0
   27f0c:	d1b2      	bne.n	27e74 <gen_hash_m+0xe>
   27f0e:	e7c5      	b.n	27e9c <gen_hash_m+0x36>

00027f10 <bt_addr_le_cmp>:
   27f10:	2207      	movs	r2, #7
   27f12:	f7fe be0d 	b.w	26b30 <memcmp>

00027f16 <find_ccc_cfg>:
{
   27f16:	b513      	push	{r0, r1, r4, lr}
						    &cfg->peer)) {
   27f18:	1c4a      	adds	r2, r1, #1
{
   27f1a:	460c      	mov	r4, r1
		if (conn) {
   27f1c:	b140      	cbz	r0, 27f30 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   27f1e:	7809      	ldrb	r1, [r1, #0]
   27f20:	f7ff f929 	bl	27176 <bt_conn_is_peer_addr_le>
	return NULL;
   27f24:	2800      	cmp	r0, #0
   27f26:	bf08      	it	eq
   27f28:	2400      	moveq	r4, #0
}
   27f2a:	4620      	mov	r0, r4
   27f2c:	b002      	add	sp, #8
   27f2e:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   27f30:	9000      	str	r0, [sp, #0]
   27f32:	4669      	mov	r1, sp
   27f34:	f8cd 0003 	str.w	r0, [sp, #3]
   27f38:	4610      	mov	r0, r2
   27f3a:	f7ff ffe9 	bl	27f10 <bt_addr_le_cmp>
	return NULL;
   27f3e:	2800      	cmp	r0, #0
   27f40:	bf18      	it	ne
   27f42:	2400      	movne	r4, #0
   27f44:	e7f1      	b.n	27f2a <find_ccc_cfg+0x14>

00027f46 <ccc_find_cfg>:
{
   27f46:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   27f48:	7803      	ldrb	r3, [r0, #0]
   27f4a:	4293      	cmp	r3, r2
{
   27f4c:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   27f4e:	d001      	beq.n	27f54 <ccc_find_cfg+0xe>
	return NULL;
   27f50:	2000      	movs	r0, #0
}
   27f52:	bd10      	pop	{r4, pc}
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   27f54:	3001      	adds	r0, #1
   27f56:	f7ff ffdb 	bl	27f10 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   27f5a:	2800      	cmp	r0, #0
   27f5c:	d1f8      	bne.n	27f50 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   27f5e:	4620      	mov	r0, r4
   27f60:	e7f7      	b.n	27f52 <ccc_find_cfg+0xc>

00027f62 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27f62:	f3bf 8f5b 	dmb	ish
   27f66:	6800      	ldr	r0, [r0, #0]
   27f68:	f3bf 8f5b 	dmb	ish
}
   27f6c:	4770      	bx	lr

00027f6e <atomic_or>:
{
   27f6e:	4603      	mov	r3, r0
}
   27f70:	f3bf 8f5b 	dmb	ish
   27f74:	e853 0f00 	ldrex	r0, [r3]
   27f78:	ea40 0201 	orr.w	r2, r0, r1
   27f7c:	e843 2c00 	strex	ip, r2, [r3]
   27f80:	f1bc 0f00 	cmp.w	ip, #0
   27f84:	d1f6      	bne.n	27f74 <atomic_or+0x6>
   27f86:	f3bf 8f5b 	dmb	ish
   27f8a:	4770      	bx	lr

00027f8c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   27f8c:	2207      	movs	r2, #7
   27f8e:	f7fe bde0 	b.w	26b52 <memcpy>

00027f92 <clear_ccc_cfg>:
{
   27f92:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   27f94:	2500      	movs	r5, #0
{
   27f96:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   27f98:	4669      	mov	r1, sp
   27f9a:	3001      	adds	r0, #1
   27f9c:	9500      	str	r5, [sp, #0]
   27f9e:	f8cd 5003 	str.w	r5, [sp, #3]
   27fa2:	f7ff fff3 	bl	27f8c <bt_addr_le_copy>
	cfg->id = 0U;
   27fa6:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   27fa8:	8125      	strh	r5, [r4, #8]
}
   27faa:	b003      	add	sp, #12
   27fac:	bd30      	pop	{r4, r5, pc}

00027fae <gatt_sub_remove>:
{
   27fae:	b570      	push	{r4, r5, r6, lr}
   27fb0:	460c      	mov	r4, r1
	if (params) {
   27fb2:	4619      	mov	r1, r3
   27fb4:	b16b      	cbz	r3, 27fd2 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   27fb6:	f103 0618 	add.w	r6, r3, #24
	return list->tail;
   27fba:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   27fbc:	699b      	ldr	r3, [r3, #24]
Z_GENLIST_REMOVE(slist, snode)
   27fbe:	b97a      	cbnz	r2, 27fe0 <gatt_sub_remove+0x32>
   27fc0:	42ae      	cmp	r6, r5
	list->head = node;
   27fc2:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   27fc4:	d100      	bne.n	27fc8 <gatt_sub_remove+0x1a>
	list->tail = node;
   27fc6:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   27fc8:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   27fca:	680d      	ldr	r5, [r1, #0]
   27fcc:	618b      	str	r3, [r1, #24]
   27fce:	461a      	mov	r2, r3
   27fd0:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   27fd2:	68a3      	ldr	r3, [r4, #8]
   27fd4:	b94b      	cbnz	r3, 27fea <gatt_sub_remove+0x3c>
		gatt_sub_free(sub);
   27fd6:	4620      	mov	r0, r4
}
   27fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gatt_sub_free(sub);
   27fdc:	f7f2 b85a 	b.w	1a094 <gatt_sub_free>
Z_GENLIST_REMOVE(slist, snode)
   27fe0:	42ae      	cmp	r6, r5
	parent->next = child;
   27fe2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   27fe4:	bf08      	it	eq
   27fe6:	60e2      	streq	r2, [r4, #12]
}
   27fe8:	e7ee      	b.n	27fc8 <gatt_sub_remove+0x1a>
}
   27fea:	bd70      	pop	{r4, r5, r6, pc}

00027fec <atomic_and>:
{
   27fec:	4603      	mov	r3, r0
}
   27fee:	f3bf 8f5b 	dmb	ish
   27ff2:	e853 0f00 	ldrex	r0, [r3]
   27ff6:	ea00 0201 	and.w	r2, r0, r1
   27ffa:	e843 2c00 	strex	ip, r2, [r3]
   27ffe:	f1bc 0f00 	cmp.w	ip, #0
   28002:	d1f6      	bne.n	27ff2 <atomic_and+0x6>
   28004:	f3bf 8f5b 	dmb	ish
   28008:	4770      	bx	lr

0002800a <read_included_uuid_encode>:
{
   2800a:	b510      	push	{r4, lr}
   2800c:	2102      	movs	r1, #2
   2800e:	3008      	adds	r0, #8
   28010:	4614      	mov	r4, r2
   28012:	f7f6 fa69 	bl	1e4e8 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   28016:	8963      	ldrh	r3, [r4, #10]
   28018:	8003      	strh	r3, [r0, #0]
}
   2801a:	2000      	movs	r0, #0
   2801c:	bd10      	pop	{r4, pc}

0002801e <gatt_find_info_encode>:
{
   2801e:	b510      	push	{r4, lr}
   28020:	2104      	movs	r1, #4
   28022:	3008      	adds	r0, #8
   28024:	4614      	mov	r4, r2
   28026:	f7f6 fa5f 	bl	1e4e8 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2802a:	8923      	ldrh	r3, [r4, #8]
   2802c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2802e:	89e3      	ldrh	r3, [r4, #14]
   28030:	8043      	strh	r3, [r0, #2]
}
   28032:	2000      	movs	r0, #0
   28034:	bd10      	pop	{r4, pc}

00028036 <gatt_read_encode>:
{
   28036:	b510      	push	{r4, lr}
   28038:	2102      	movs	r1, #2
   2803a:	3008      	adds	r0, #8
   2803c:	4614      	mov	r4, r2
   2803e:	f7f6 fa53 	bl	1e4e8 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   28042:	8923      	ldrh	r3, [r4, #8]
   28044:	8003      	strh	r3, [r0, #0]
}
   28046:	2000      	movs	r0, #0
   28048:	bd10      	pop	{r4, pc}

0002804a <gatt_read_blob_encode>:
{
   2804a:	b510      	push	{r4, lr}
   2804c:	2104      	movs	r1, #4
   2804e:	3008      	adds	r0, #8
   28050:	4614      	mov	r4, r2
   28052:	f7f6 fa49 	bl	1e4e8 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   28056:	8923      	ldrh	r3, [r4, #8]
   28058:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   2805a:	8963      	ldrh	r3, [r4, #10]
   2805c:	8043      	strh	r3, [r0, #2]
}
   2805e:	2000      	movs	r0, #0
   28060:	bd10      	pop	{r4, pc}

00028062 <gatt_read_group_encode>:
{
   28062:	b538      	push	{r3, r4, r5, lr}
   28064:	f100 0408 	add.w	r4, r0, #8
   28068:	2104      	movs	r1, #4
   2806a:	4620      	mov	r0, r4
   2806c:	4615      	mov	r5, r2
   2806e:	f7f6 fa3b 	bl	1e4e8 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   28072:	892b      	ldrh	r3, [r5, #8]
   28074:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   28076:	89eb      	ldrh	r3, [r5, #14]
   28078:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2807a:	7c2b      	ldrb	r3, [r5, #16]
   2807c:	b933      	cbnz	r3, 2808c <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2807e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   28082:	4620      	mov	r0, r4
   28084:	f001 f843 	bl	2910e <net_buf_simple_add_le16>
}
   28088:	2000      	movs	r0, #0
   2808a:	bd38      	pop	{r3, r4, r5, pc}
   2808c:	f642 0101 	movw	r1, #10241	; 0x2801
   28090:	e7f7      	b.n	28082 <gatt_read_group_encode+0x20>

00028092 <gatt_read_type_encode>:
{
   28092:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   28094:	f100 0408 	add.w	r4, r0, #8
   28098:	2104      	movs	r1, #4
   2809a:	4620      	mov	r0, r4
   2809c:	4615      	mov	r5, r2
   2809e:	f7f6 fa23 	bl	1e4e8 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   280a2:	892b      	ldrh	r3, [r5, #8]
   280a4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   280a6:	89eb      	ldrh	r3, [r5, #14]
   280a8:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   280aa:	7c2b      	ldrb	r3, [r5, #16]
   280ac:	2b02      	cmp	r3, #2
   280ae:	d004      	beq.n	280ba <gatt_read_type_encode+0x28>
   280b0:	2b03      	cmp	r3, #3
   280b2:	d009      	beq.n	280c8 <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   280b4:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   280b6:	8859      	ldrh	r1, [r3, #2]
   280b8:	e001      	b.n	280be <gatt_read_type_encode+0x2c>
   280ba:	f642 0102 	movw	r1, #10242	; 0x2802
   280be:	4620      	mov	r0, r4
   280c0:	f001 f825 	bl	2910e <net_buf_simple_add_le16>
}
   280c4:	2000      	movs	r0, #0
   280c6:	bd38      	pop	{r3, r4, r5, pc}
   280c8:	f642 0103 	movw	r1, #10243	; 0x2803
   280cc:	e7f7      	b.n	280be <gatt_read_type_encode+0x2c>

000280ce <gatt_read_mult_encode>:
{
   280ce:	b570      	push	{r4, r5, r6, lr}
   280d0:	4614      	mov	r4, r2
	for (i = 0U; i < params->handle_count; i++) {
   280d2:	2500      	movs	r5, #0
   280d4:	f100 0608 	add.w	r6, r0, #8
   280d8:	6862      	ldr	r2, [r4, #4]
   280da:	b2eb      	uxtb	r3, r5
   280dc:	429a      	cmp	r2, r3
   280de:	f105 0501 	add.w	r5, r5, #1
   280e2:	d801      	bhi.n	280e8 <gatt_read_mult_encode+0x1a>
}
   280e4:	2000      	movs	r0, #0
   280e6:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_le16(buf, params->multiple.handles[i]);
   280e8:	68a2      	ldr	r2, [r4, #8]
   280ea:	4630      	mov	r0, r6
   280ec:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   280f0:	f001 f80d 	bl	2910e <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   280f4:	e7f0      	b.n	280d8 <gatt_read_mult_encode+0xa>

000280f6 <gatt_read_mult_vl_encode>:
   280f6:	f7ff bfea 	b.w	280ce <gatt_read_mult_encode>

000280fa <gatt_read_mult_rsp>:
{
   280fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   280fc:	9d08      	ldr	r5, [sp, #32]
   280fe:	4606      	mov	r6, r0
	params->func(conn, 0, params, pdu, length);
   28100:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   28102:	460c      	mov	r4, r1
   28104:	b901      	cbnz	r1, 28108 <gatt_read_mult_rsp+0xe>
   28106:	b94b      	cbnz	r3, 2811c <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   28108:	2300      	movs	r3, #0
   2810a:	9308      	str	r3, [sp, #32]
   2810c:	462a      	mov	r2, r5
   2810e:	4621      	mov	r1, r4
	params->func(conn, 0, params, NULL, 0);
   28110:	4630      	mov	r0, r6
   28112:	46bc      	mov	ip, r7
}
   28114:	b003      	add	sp, #12
   28116:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   2811a:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   2811c:	9300      	str	r3, [sp, #0]
   2811e:	4613      	mov	r3, r2
   28120:	462a      	mov	r2, r5
   28122:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   28124:	9408      	str	r4, [sp, #32]
   28126:	682f      	ldr	r7, [r5, #0]
   28128:	4623      	mov	r3, r4
   2812a:	462a      	mov	r2, r5
   2812c:	4621      	mov	r1, r4
   2812e:	e7ef      	b.n	28110 <gatt_read_mult_rsp+0x16>

00028130 <gatt_read_mult_vl_rsp>:
{
   28130:	b5f0      	push	{r4, r5, r6, r7, lr}
   28132:	b087      	sub	sp, #28
   28134:	4605      	mov	r5, r0
   28136:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   28138:	4610      	mov	r0, r2
   2813a:	461a      	mov	r2, r3
	if (err || !length) {
   2813c:	b901      	cbnz	r1, 28140 <gatt_read_mult_vl_rsp+0x10>
   2813e:	b94b      	cbnz	r3, 28154 <gatt_read_mult_vl_rsp+0x24>
		params->func(conn, err, params, NULL, 0);
   28140:	2300      	movs	r3, #0
   28142:	930c      	str	r3, [sp, #48]	; 0x30
   28144:	6826      	ldr	r6, [r4, #0]
   28146:	4622      	mov	r2, r4
   28148:	4628      	mov	r0, r5
   2814a:	46b4      	mov	ip, r6
}
   2814c:	b007      	add	sp, #28
   2814e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		params->func(conn, err, params, NULL, 0);
   28152:	4760      	bx	ip
	net_buf_simple_init_with_data(&buf, (void *)pdu, length);
   28154:	4601      	mov	r1, r0
   28156:	a803      	add	r0, sp, #12
   28158:	f000 ffa4 	bl	290a4 <net_buf_simple_init_with_data>
	while (buf.len >= sizeof(*rsp)) {
   2815c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   28160:	2b01      	cmp	r3, #1
   28162:	d808      	bhi.n	28176 <gatt_read_mult_vl_rsp+0x46>
	params->func(conn, 0, params, NULL, 0);
   28164:	2300      	movs	r3, #0
   28166:	9300      	str	r3, [sp, #0]
   28168:	6826      	ldr	r6, [r4, #0]
   2816a:	4622      	mov	r2, r4
   2816c:	4619      	mov	r1, r3
   2816e:	4628      	mov	r0, r5
   28170:	47b0      	blx	r6
}
   28172:	b007      	add	sp, #28
   28174:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rsp = net_buf_simple_pull_mem(&buf, sizeof(*rsp));
   28176:	2102      	movs	r1, #2
   28178:	a803      	add	r0, sp, #12
   2817a:	f7f6 f997 	bl	1e4ac <net_buf_simple_pull_mem>
		len = sys_le16_to_cpu(rsp->len);
   2817e:	4603      	mov	r3, r0
   28180:	f8bd 7010 	ldrh.w	r7, [sp, #16]
   28184:	f833 2b02 	ldrh.w	r2, [r3], #2
		if (len > buf.len) {
   28188:	4297      	cmp	r7, r2
   2818a:	bf28      	it	cs
   2818c:	4617      	movcs	r7, r2
		params->func(conn, 0, params, rsp->value, len);
   2818e:	9700      	str	r7, [sp, #0]
   28190:	6826      	ldr	r6, [r4, #0]
   28192:	4622      	mov	r2, r4
   28194:	2100      	movs	r1, #0
   28196:	4628      	mov	r0, r5
   28198:	47b0      	blx	r6
		net_buf_simple_pull_mem(&buf, len);
   2819a:	4639      	mov	r1, r7
   2819c:	a803      	add	r0, sp, #12
   2819e:	f7f6 f985 	bl	1e4ac <net_buf_simple_pull_mem>
   281a2:	e7db      	b.n	2815c <gatt_read_mult_vl_rsp+0x2c>

000281a4 <clear_cf_cfg>:
{
   281a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   281a6:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   281a8:	2500      	movs	r5, #0
   281aa:	4669      	mov	r1, sp
   281ac:	3001      	adds	r0, #1
   281ae:	9500      	str	r5, [sp, #0]
   281b0:	f8cd 5003 	str.w	r5, [sp, #3]
   281b4:	f7ff feea 	bl	27f8c <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   281b8:	f104 0008 	add.w	r0, r4, #8
   281bc:	2201      	movs	r2, #1
   281be:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   281c0:	340c      	adds	r4, #12
   281c2:	f7fe fcd1 	bl	26b68 <memset>
   281c6:	f3bf 8f5b 	dmb	ish
   281ca:	e854 3f00 	ldrex	r3, [r4]
   281ce:	e844 5200 	strex	r2, r5, [r4]
   281d2:	2a00      	cmp	r2, #0
   281d4:	d1f9      	bne.n	281ca <clear_cf_cfg+0x26>
   281d6:	f3bf 8f5b 	dmb	ish
}
   281da:	b003      	add	sp, #12
   281dc:	bd30      	pop	{r4, r5, pc}

000281de <gatt_find_type_encode>:
{
   281de:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   281e0:	f100 0508 	add.w	r5, r0, #8
   281e4:	2106      	movs	r1, #6
   281e6:	4628      	mov	r0, r5
   281e8:	4614      	mov	r4, r2
   281ea:	f7f6 f97d 	bl	1e4e8 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   281ee:	8923      	ldrh	r3, [r4, #8]
   281f0:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   281f2:	89e3      	ldrh	r3, [r4, #14]
   281f4:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   281f6:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   281f8:	6821      	ldr	r1, [r4, #0]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   281fa:	2b00      	cmp	r3, #0
   281fc:	f642 0301 	movw	r3, #10241	; 0x2801
   28200:	bf08      	it	eq
   28202:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   28206:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   28208:	780b      	ldrb	r3, [r1, #0]
   2820a:	b11b      	cbz	r3, 28214 <gatt_find_type_encode+0x36>
   2820c:	2b02      	cmp	r3, #2
   2820e:	d006      	beq.n	2821e <gatt_find_type_encode+0x40>
}
   28210:	2000      	movs	r0, #0
   28212:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   28214:	8849      	ldrh	r1, [r1, #2]
   28216:	4628      	mov	r0, r5
   28218:	f000 ff79 	bl	2910e <net_buf_simple_add_le16>
}
   2821c:	e7f8      	b.n	28210 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2821e:	2210      	movs	r2, #16
   28220:	3101      	adds	r1, #1
   28222:	4628      	mov	r0, r5
   28224:	f000 ff60 	bl	290e8 <net_buf_simple_add_mem>
   28228:	e7f2      	b.n	28210 <gatt_find_type_encode+0x32>

0002822a <gatt_read_uuid_encode>:
{
   2822a:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2822c:	f100 0408 	add.w	r4, r0, #8
   28230:	2104      	movs	r1, #4
   28232:	4620      	mov	r0, r4
   28234:	4615      	mov	r5, r2
   28236:	f7f6 f957 	bl	1e4e8 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   2823a:	892b      	ldrh	r3, [r5, #8]
   2823c:	8003      	strh	r3, [r0, #0]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   2823e:	68e9      	ldr	r1, [r5, #12]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   28240:	896b      	ldrh	r3, [r5, #10]
   28242:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   28244:	780b      	ldrb	r3, [r1, #0]
   28246:	b92b      	cbnz	r3, 28254 <gatt_read_uuid_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   28248:	8849      	ldrh	r1, [r1, #2]
   2824a:	4620      	mov	r0, r4
   2824c:	f000 ff5f 	bl	2910e <net_buf_simple_add_le16>
}
   28250:	2000      	movs	r0, #0
   28252:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_simple_add_mem(&buf->b, mem, len);
   28254:	2210      	movs	r2, #16
   28256:	3101      	adds	r1, #1
   28258:	4620      	mov	r0, r4
   2825a:	f000 ff45 	bl	290e8 <net_buf_simple_add_mem>
   2825e:	e7f7      	b.n	28250 <gatt_read_uuid_encode+0x26>

00028260 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   28260:	2a02      	cmp	r2, #2
{
   28262:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   28264:	d108      	bne.n	28278 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   28266:	2300      	movs	r3, #0
   28268:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2826c:	461a      	mov	r2, r3
   2826e:	7a00      	ldrb	r0, [r0, #8]
   28270:	f7f1 fed4 	bl	1a01c <sc_save>
}
   28274:	2002      	movs	r0, #2
   28276:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   28278:	f7f2 f9c0 	bl	1a5fc <sc_clear>
   2827c:	e7fa      	b.n	28274 <sc_ccc_cfg_write+0x14>

0002827e <read_central_addr_res>:
{
   2827e:	b513      	push	{r0, r1, r4, lr}
   28280:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   28284:	4610      	mov	r0, r2
	uint8_t central_addr_res = BT_GATT_CENTRAL_ADDR_RES_SUPP;
   28286:	2201      	movs	r2, #1
	if (offset > value_len) {
   28288:	4291      	cmp	r1, r2
	uint8_t central_addr_res = BT_GATT_CENTRAL_ADDR_RES_SUPP;
   2828a:	f88d 2007 	strb.w	r2, [sp, #7]
	if (offset > value_len) {
   2828e:	d80c      	bhi.n	282aa <read_central_addr_res+0x2c>
	len = MIN(buf_len, value_len - offset);
   28290:	1a54      	subs	r4, r2, r1
   28292:	429c      	cmp	r4, r3
   28294:	bfa8      	it	ge
   28296:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   28298:	f10d 0307 	add.w	r3, sp, #7
   2829c:	4622      	mov	r2, r4
   2829e:	4419      	add	r1, r3
   282a0:	f7fe fc57 	bl	26b52 <memcpy>
}
   282a4:	4620      	mov	r0, r4
   282a6:	b002      	add	sp, #8
   282a8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   282aa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   282ae:	e7f9      	b.n	282a4 <read_central_addr_res+0x26>

000282b0 <read_appearance>:
{
   282b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   282b2:	4615      	mov	r5, r2
   282b4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   282b8:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   282ba:	f7fe fe12 	bl	26ee2 <bt_get_appearance>
	if (offset > value_len) {
   282be:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   282c0:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   282c4:	d80e      	bhi.n	282e4 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   282c6:	f1c6 0402 	rsb	r4, r6, #2
   282ca:	42bc      	cmp	r4, r7
   282cc:	bfa8      	it	ge
   282ce:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   282d0:	f10d 0306 	add.w	r3, sp, #6
   282d4:	4622      	mov	r2, r4
   282d6:	1999      	adds	r1, r3, r6
   282d8:	4628      	mov	r0, r5
   282da:	f7fe fc3a 	bl	26b52 <memcpy>
}
   282de:	4620      	mov	r0, r4
   282e0:	b003      	add	sp, #12
   282e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   282e4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   282e8:	e7f9      	b.n	282de <read_appearance+0x2e>

000282ea <read_name>:
{
   282ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   282ee:	4698      	mov	r8, r3
   282f0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   282f4:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   282f6:	f7ee fa39 	bl	1676c <bt_get_name>
   282fa:	4607      	mov	r7, r0
				 strlen(name));
   282fc:	f7fe fbeb 	bl	26ad6 <strlen>
	if (offset > value_len) {
   28300:	b283      	uxth	r3, r0
   28302:	42b3      	cmp	r3, r6
   28304:	d30c      	bcc.n	28320 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   28306:	1b9c      	subs	r4, r3, r6
   28308:	4544      	cmp	r4, r8
   2830a:	bfa8      	it	ge
   2830c:	4644      	movge	r4, r8
   2830e:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   28310:	4622      	mov	r2, r4
   28312:	19b9      	adds	r1, r7, r6
   28314:	4628      	mov	r0, r5
   28316:	f7fe fc1c 	bl	26b52 <memcpy>
}
   2831a:	4620      	mov	r0, r4
   2831c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28320:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   28324:	e7f9      	b.n	2831a <read_name+0x30>

00028326 <cf_read>:
{
   28326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28328:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2832a:	2300      	movs	r3, #0
{
   2832c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   28330:	f88d 3004 	strb.w	r3, [sp, #4]
{
   28334:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   28336:	f7f1 fd61 	bl	19dfc <find_cf_cfg>
	if (cfg) {
   2833a:	b128      	cbz	r0, 28348 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2833c:	f100 0108 	add.w	r1, r0, #8
   28340:	2201      	movs	r2, #1
   28342:	a801      	add	r0, sp, #4
   28344:	f7fe fc05 	bl	26b52 <memcpy>
	if (offset > value_len) {
   28348:	2e01      	cmp	r6, #1
   2834a:	d80d      	bhi.n	28368 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2834c:	f1c6 0401 	rsb	r4, r6, #1
   28350:	42bc      	cmp	r4, r7
   28352:	bfa8      	it	ge
   28354:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28356:	ab01      	add	r3, sp, #4
   28358:	4622      	mov	r2, r4
   2835a:	1999      	adds	r1, r3, r6
   2835c:	4628      	mov	r0, r5
   2835e:	f7fe fbf8 	bl	26b52 <memcpy>
}
   28362:	4620      	mov	r0, r4
   28364:	b003      	add	sp, #12
   28366:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28368:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2836c:	e7f9      	b.n	28362 <cf_read+0x3c>

0002836e <bt_gatt_attr_read_service>:
{
   2836e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   28370:	68c9      	ldr	r1, [r1, #12]
{
   28372:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   28376:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   28378:	780b      	ldrb	r3, [r1, #0]
{
   2837a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2837c:	b993      	cbnz	r3, 283a4 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2837e:	884b      	ldrh	r3, [r1, #2]
   28380:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   28384:	2d02      	cmp	r5, #2
   28386:	d819      	bhi.n	283bc <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   28388:	f1c5 0202 	rsb	r2, r5, #2
   2838c:	4294      	cmp	r4, r2
   2838e:	bfa8      	it	ge
   28390:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   28392:	f10d 0306 	add.w	r3, sp, #6
   28396:	4622      	mov	r2, r4
   28398:	1959      	adds	r1, r3, r5
   2839a:	f7fe fbda 	bl	26b52 <memcpy>
}
   2839e:	4620      	mov	r0, r4
   283a0:	b003      	add	sp, #12
   283a2:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   283a4:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   283a6:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   283aa:	d807      	bhi.n	283bc <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   283ac:	f1c5 0210 	rsb	r2, r5, #16
   283b0:	4294      	cmp	r4, r2
   283b2:	bfa8      	it	ge
   283b4:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   283b6:	4622      	mov	r2, r4
   283b8:	4429      	add	r1, r5
   283ba:	e7ee      	b.n	2839a <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   283bc:	f06f 0406 	mvn.w	r4, #6
   283c0:	e7ed      	b.n	2839e <bt_gatt_attr_read_service+0x30>

000283c2 <bt_gatt_attr_read_ccc>:
{
   283c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   283c4:	68c9      	ldr	r1, [r1, #12]
{
   283c6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   283ca:	4615      	mov	r5, r2
   283cc:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   283ce:	f7ff fda2 	bl	27f16 <find_ccc_cfg>
	if (cfg) {
   283d2:	b100      	cbz	r0, 283d6 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   283d4:	8900      	ldrh	r0, [r0, #8]
   283d6:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   283da:	2e02      	cmp	r6, #2
   283dc:	d80e      	bhi.n	283fc <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   283de:	f1c6 0402 	rsb	r4, r6, #2
   283e2:	42bc      	cmp	r4, r7
   283e4:	bfa8      	it	ge
   283e6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   283e8:	f10d 0306 	add.w	r3, sp, #6
   283ec:	4622      	mov	r2, r4
   283ee:	1999      	adds	r1, r3, r6
   283f0:	4628      	mov	r0, r5
   283f2:	f7fe fbae 	bl	26b52 <memcpy>
}
   283f6:	4620      	mov	r0, r4
   283f8:	b003      	add	sp, #12
   283fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   283fc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   28400:	e7f9      	b.n	283f6 <bt_gatt_attr_read_ccc+0x34>

00028402 <gatt_req_send.constprop.0>:
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   28402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28406:	4606      	mov	r6, r0
   28408:	460d      	mov	r5, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2840a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2840e:	2100      	movs	r1, #0
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   28410:	f89d a020 	ldrb.w	sl, [sp, #32]
   28414:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   28418:	4690      	mov	r8, r2
   2841a:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2841c:	f7f1 faea 	bl	199f4 <bt_att_req_alloc>
	if (!req) {
   28420:	4604      	mov	r4, r0
   28422:	b920      	cbnz	r0, 2842e <gatt_req_send.constprop.0+0x2c>
		return -ENOMEM;
   28424:	f06f 050b 	mvn.w	r5, #11
}
   28428:	4628      	mov	r0, r5
   2842a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   2842e:	6045      	str	r5, [r0, #4]
	req->att_op = op;
   28430:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   28434:	f8c0 9014 	str.w	r9, [r0, #20]
	req->encode = encode;
   28438:	60c7      	str	r7, [r0, #12]
	req->user_data = params;
   2843a:	f8c0 8018 	str.w	r8, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   2843e:	464a      	mov	r2, r9
   28440:	4651      	mov	r1, sl
   28442:	4630      	mov	r0, r6
   28444:	f7f1 f802 	bl	1944c <bt_att_create_pdu>
   28448:	4605      	mov	r5, r0
	if (!buf) {
   2844a:	b918      	cbnz	r0, 28454 <gatt_req_send.constprop.0+0x52>
		bt_att_req_free(req);
   2844c:	4620      	mov	r0, r4
   2844e:	f7f1 faf3 	bl	19a38 <bt_att_req_free>
   28452:	e7e7      	b.n	28424 <gatt_req_send.constprop.0+0x22>
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   28454:	2200      	movs	r2, #0
   28456:	4611      	mov	r1, r2
   28458:	2301      	movs	r3, #1
   2845a:	f7ff fcd7 	bl	27e0c <bt_att_set_tx_meta_data>
	req->buf = buf;
   2845e:	60a5      	str	r5, [r4, #8]
	err = encode(buf, len, params);
   28460:	4628      	mov	r0, r5
   28462:	4642      	mov	r2, r8
   28464:	4649      	mov	r1, r9
   28466:	47b8      	blx	r7
	if (err) {
   28468:	4605      	mov	r5, r0
   2846a:	b118      	cbz	r0, 28474 <gatt_req_send.constprop.0+0x72>
		bt_att_req_free(req);
   2846c:	4620      	mov	r0, r4
   2846e:	f7f1 fae3 	bl	19a38 <bt_att_req_free>
   28472:	e7d9      	b.n	28428 <gatt_req_send.constprop.0+0x26>
	err = bt_att_req_send(conn, req);
   28474:	4621      	mov	r1, r4
   28476:	4630      	mov	r0, r6
   28478:	f7f1 fc36 	bl	19ce8 <bt_att_req_send>
	if (err) {
   2847c:	4605      	mov	r5, r0
   2847e:	2800      	cmp	r0, #0
   28480:	d0d2      	beq.n	28428 <gatt_req_send.constprop.0+0x26>
   28482:	e7f3      	b.n	2846c <gatt_req_send.constprop.0+0x6a>

00028484 <gatt_write_ccc_buf>:
{
   28484:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   28486:	f100 0508 	add.w	r5, r0, #8
   2848a:	2102      	movs	r1, #2
   2848c:	4628      	mov	r0, r5
   2848e:	4614      	mov	r4, r2
   28490:	f7f6 f82a 	bl	1e4e8 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   28494:	89e3      	ldrh	r3, [r4, #14]
   28496:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   28498:	8a21      	ldrh	r1, [r4, #16]
   2849a:	4628      	mov	r0, r5
   2849c:	f000 fe37 	bl	2910e <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   284a0:	2104      	movs	r1, #4
   284a2:	f104 0014 	add.w	r0, r4, #20
   284a6:	f7ff fd62 	bl	27f6e <atomic_or>
}
   284aa:	2000      	movs	r0, #0
   284ac:	bd38      	pop	{r3, r4, r5, pc}

000284ae <sc_restore_rsp>:
{
   284ae:	b538      	push	{r3, r4, r5, lr}
   284b0:	4604      	mov	r4, r0
   284b2:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   284b4:	f7ff fc83 	bl	27dbe <bt_att_fixed_chan_only>
   284b8:	b150      	cbz	r0, 284d0 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   284ba:	4620      	mov	r0, r4
   284bc:	f7f1 fc9e 	bl	19dfc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   284c0:	b130      	cbz	r0, 284d0 <sc_restore_rsp+0x22>
   284c2:	7a03      	ldrb	r3, [r0, #8]
   284c4:	07db      	lsls	r3, r3, #31
   284c6:	d503      	bpl.n	284d0 <sc_restore_rsp+0x22>
   284c8:	2101      	movs	r1, #1
   284ca:	300c      	adds	r0, #12
   284cc:	f7ff fd4f 	bl	27f6e <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   284d0:	b985      	cbnz	r5, 284f4 <sc_restore_rsp+0x46>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   284d2:	7a20      	ldrb	r0, [r4, #8]
   284d4:	f104 0190 	add.w	r1, r4, #144	; 0x90
   284d8:	f7f1 fcbe 	bl	19e58 <find_sc_cfg>
		if (sc_cfg) {
   284dc:	4604      	mov	r4, r0
   284de:	b148      	cbz	r0, 284f4 <sc_restore_rsp+0x46>
	memset(&cfg->data, 0, sizeof(cfg->data));
   284e0:	4629      	mov	r1, r5
   284e2:	2204      	movs	r2, #4
   284e4:	3008      	adds	r0, #8
   284e6:	f7fe fb3f 	bl	26b68 <memset>
		sc_store(cfg);
   284ea:	4620      	mov	r0, r4
}
   284ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   284f0:	f7f1 bd6c 	b.w	19fcc <sc_store>
}
   284f4:	bd38      	pop	{r3, r4, r5, pc}

000284f6 <bt_gatt_attr_read>:
{
   284f6:	b538      	push	{r3, r4, r5, lr}
   284f8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   284fc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   28500:	42a9      	cmp	r1, r5
{
   28502:	4610      	mov	r0, r2
	if (offset > value_len) {
   28504:	d80b      	bhi.n	2851e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   28506:	1a6d      	subs	r5, r5, r1
   28508:	429d      	cmp	r5, r3
   2850a:	bfa8      	it	ge
   2850c:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2850e:	9b05      	ldr	r3, [sp, #20]
   28510:	b2ad      	uxth	r5, r5
   28512:	462a      	mov	r2, r5
   28514:	4419      	add	r1, r3
   28516:	f7fe fb1c 	bl	26b52 <memcpy>
}
   2851a:	4628      	mov	r0, r5
   2851c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2851e:	f06f 0506 	mvn.w	r5, #6
   28522:	e7fa      	b.n	2851a <bt_gatt_attr_read+0x24>

00028524 <bt_gatt_attr_value_handle>:
{
   28524:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28526:	4604      	mov	r4, r0
   28528:	b910      	cbnz	r0, 28530 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2852a:	2000      	movs	r0, #0
}
   2852c:	b002      	add	sp, #8
   2852e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28530:	2300      	movs	r3, #0
   28532:	f88d 3004 	strb.w	r3, [sp, #4]
   28536:	6800      	ldr	r0, [r0, #0]
   28538:	f642 0303 	movw	r3, #10243	; 0x2803
   2853c:	a901      	add	r1, sp, #4
   2853e:	f8ad 3006 	strh.w	r3, [sp, #6]
   28542:	f7fe fb9a 	bl	26c7a <bt_uuid_cmp>
   28546:	2800      	cmp	r0, #0
   28548:	d1ef      	bne.n	2852a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2854a:	68e3      	ldr	r3, [r4, #12]
   2854c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2854e:	2800      	cmp	r0, #0
   28550:	d1ec      	bne.n	2852c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   28552:	4620      	mov	r0, r4
   28554:	f7f2 f984 	bl	1a860 <bt_gatt_attr_get_handle>
   28558:	3001      	adds	r0, #1
   2855a:	b280      	uxth	r0, r0
	return handle;
   2855c:	e7e6      	b.n	2852c <bt_gatt_attr_value_handle+0x8>

0002855e <bt_gatt_attr_read_chrc>:
{
   2855e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   28560:	68cf      	ldr	r7, [r1, #12]
{
   28562:	b087      	sub	sp, #28
   28564:	4608      	mov	r0, r1
   28566:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   28568:	79bb      	ldrb	r3, [r7, #6]
   2856a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2856e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   28572:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   28574:	f7ff ffd6 	bl	28524 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   28578:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2857a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2857e:	780b      	ldrb	r3, [r1, #0]
   28580:	b99b      	cbnz	r3, 285aa <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   28582:	884b      	ldrh	r3, [r1, #2]
   28584:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   28588:	2105      	movs	r1, #5
	if (offset > value_len) {
   2858a:	42b1      	cmp	r1, r6
   2858c:	d315      	bcc.n	285ba <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2858e:	1b89      	subs	r1, r1, r6
   28590:	42a1      	cmp	r1, r4
   28592:	bfa8      	it	ge
   28594:	4621      	movge	r1, r4
   28596:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   28598:	ab01      	add	r3, sp, #4
   2859a:	4622      	mov	r2, r4
   2859c:	1999      	adds	r1, r3, r6
   2859e:	4628      	mov	r0, r5
   285a0:	f7fe fad7 	bl	26b52 <memcpy>
}
   285a4:	4620      	mov	r0, r4
   285a6:	b007      	add	sp, #28
   285a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   285aa:	3101      	adds	r1, #1
   285ac:	2210      	movs	r2, #16
   285ae:	f10d 0007 	add.w	r0, sp, #7
   285b2:	f7fe face 	bl	26b52 <memcpy>
		value_len += 16U;
   285b6:	2113      	movs	r1, #19
   285b8:	e7e7      	b.n	2858a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   285ba:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   285be:	e7f1      	b.n	285a4 <bt_gatt_attr_read_chrc+0x46>

000285c0 <bt_gatt_foreach_attr>:
{
   285c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   285c2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   285c6:	2300      	movs	r3, #0
   285c8:	9300      	str	r3, [sp, #0]
   285ca:	461a      	mov	r2, r3
   285cc:	f7f2 f98c 	bl	1a8e8 <bt_gatt_foreach_attr_type>
}
   285d0:	b005      	add	sp, #20
   285d2:	f85d fb04 	ldr.w	pc, [sp], #4

000285d6 <bt_gatt_check_perm>:
{
   285d6:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   285d8:	07d3      	lsls	r3, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   285da:	8a4c      	ldrh	r4, [r1, #18]
{
   285dc:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   285de:	d504      	bpl.n	285ea <bt_gatt_check_perm+0x14>
   285e0:	f014 0f95 	tst.w	r4, #149	; 0x95
   285e4:	d026      	beq.n	28634 <bt_gatt_check_perm+0x5e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   285e6:	684b      	ldr	r3, [r1, #4]
   285e8:	b323      	cbz	r3, 28634 <bt_gatt_check_perm+0x5e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   285ea:	0790      	lsls	r0, r2, #30
   285ec:	d504      	bpl.n	285f8 <bt_gatt_check_perm+0x22>
   285ee:	f414 7f95 	tst.w	r4, #298	; 0x12a
   285f2:	d021      	beq.n	28638 <bt_gatt_check_perm+0x62>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   285f4:	688b      	ldr	r3, [r1, #8]
   285f6:	b1fb      	cbz	r3, 28638 <bt_gatt_check_perm+0x62>
	mask &= attr->perm;
   285f8:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   285fa:	f414 7fc0 	tst.w	r4, #384	; 0x180
   285fe:	d007      	beq.n	28610 <bt_gatt_check_perm+0x3a>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   28600:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   28604:	b90b      	cbnz	r3, 2860a <bt_gatt_check_perm+0x34>
			return BT_ATT_ERR_AUTHENTICATION;
   28606:	2005      	movs	r0, #5
}
   28608:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2860a:	7b5b      	ldrb	r3, [r3, #13]
   2860c:	06db      	lsls	r3, r3, #27
   2860e:	d5fa      	bpl.n	28606 <bt_gatt_check_perm+0x30>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   28610:	f014 0f30 	tst.w	r4, #48	; 0x30
   28614:	d108      	bne.n	28628 <bt_gatt_check_perm+0x52>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   28616:	f014 000c 	ands.w	r0, r4, #12
   2861a:	d0f5      	beq.n	28608 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2861c:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2861e:	2b00      	cmp	r3, #0
   28620:	bf14      	ite	ne
   28622:	2000      	movne	r0, #0
   28624:	200f      	moveq	r0, #15
   28626:	e7ef      	b.n	28608 <bt_gatt_check_perm+0x32>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   28628:	4628      	mov	r0, r5
   2862a:	f7fe fda2 	bl	27172 <bt_conn_get_security>
   2862e:	2802      	cmp	r0, #2
   28630:	d8f1      	bhi.n	28616 <bt_gatt_check_perm+0x40>
   28632:	e7e8      	b.n	28606 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   28634:	2002      	movs	r0, #2
   28636:	e7e7      	b.n	28608 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   28638:	2003      	movs	r0, #3
   2863a:	e7e5      	b.n	28608 <bt_gatt_check_perm+0x32>

0002863c <gatt_discover_next>:
{
   2863c:	b570      	push	{r4, r5, r6, lr}
   2863e:	4605      	mov	r5, r0
   28640:	4614      	mov	r4, r2
	if (!last_handle)
   28642:	b929      	cbnz	r1, 28650 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   28644:	4621      	mov	r1, r4
   28646:	4628      	mov	r0, r5
   28648:	f7f2 fe76 	bl	1b338 <bt_gatt_discover>
   2864c:	b928      	cbnz	r0, 2865a <gatt_discover_next+0x1e>
}
   2864e:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   28650:	f64f 72ff 	movw	r2, #65535	; 0xffff
   28654:	4291      	cmp	r1, r2
   28656:	d107      	bne.n	28668 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   28658:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   2865a:	6863      	ldr	r3, [r4, #4]
   2865c:	4622      	mov	r2, r4
   2865e:	4628      	mov	r0, r5
   28660:	2100      	movs	r1, #0
}
   28662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   28666:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   28668:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   2866a:	1c4b      	adds	r3, r1, #1
   2866c:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   2866e:	429a      	cmp	r2, r3
		params->start_handle++;
   28670:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   28672:	d2e7      	bcs.n	28644 <gatt_discover_next+0x8>
   28674:	e7f1      	b.n	2865a <gatt_discover_next+0x1e>

00028676 <gatt_find_type_rsp>:
{
   28676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2867a:	b089      	sub	sp, #36	; 0x24
   2867c:	4606      	mov	r6, r0
   2867e:	9f12      	ldr	r7, [sp, #72]	; 0x48
   28680:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   28682:	b911      	cbnz	r1, 2868a <gatt_find_type_rsp+0x14>
   28684:	f013 0803 	ands.w	r8, r3, #3
   28688:	d007      	beq.n	2869a <gatt_find_type_rsp+0x24>
	params->func(conn, NULL, params);
   2868a:	687b      	ldr	r3, [r7, #4]
   2868c:	463a      	mov	r2, r7
   2868e:	2100      	movs	r1, #0
   28690:	4630      	mov	r0, r6
}
   28692:	b009      	add	sp, #36	; 0x24
   28694:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   28698:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   2869a:	f3c3 0387 	ubfx	r3, r3, #2, #8
   2869e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   286a2:	46c1      	mov	r9, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   286a4:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   286a8:	42ac      	cmp	r4, r5
   286aa:	d107      	bne.n	286bc <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   286ac:	463a      	mov	r2, r7
   286ae:	4641      	mov	r1, r8
   286b0:	4630      	mov	r0, r6
}
   286b2:	b009      	add	sp, #36	; 0x24
   286b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, end_handle, params);
   286b8:	f7ff bfc0 	b.w	2863c <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   286bc:	7c3a      	ldrb	r2, [r7, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   286be:	8863      	ldrh	r3, [r4, #2]
		value.end_handle = end_handle;
   286c0:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   286c4:	2a00      	cmp	r2, #0
   286c6:	bf0c      	ite	eq
   286c8:	f44f 5220 	moveq.w	r2, #10240	; 0x2800
   286cc:	4652      	movne	r2, sl
   286ce:	f8ad 2002 	strh.w	r2, [sp, #2]
		attr = (struct bt_gatt_attr) {
   286d2:	2210      	movs	r2, #16
   286d4:	2100      	movs	r1, #0
   286d6:	eb0d 0002 	add.w	r0, sp, r2
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   286da:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   286de:	683b      	ldr	r3, [r7, #0]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   286e0:	f8b4 b000 	ldrh.w	fp, [r4]
		value.uuid = params->uuid;
   286e4:	9301      	str	r3, [sp, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   286e6:	f88d 9000 	strb.w	r9, [sp]
		attr = (struct bt_gatt_attr) {
   286ea:	f7fe fa3d 	bl	26b68 <memset>
   286ee:	ab01      	add	r3, sp, #4
   286f0:	9306      	str	r3, [sp, #24]
   286f2:	f8cd d00c 	str.w	sp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   286f6:	687b      	ldr	r3, [r7, #4]
		attr = (struct bt_gatt_attr) {
   286f8:	f8ad b01c 	strh.w	fp, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   286fc:	463a      	mov	r2, r7
   286fe:	a903      	add	r1, sp, #12
   28700:	4630      	mov	r0, r6
   28702:	4798      	blx	r3
   28704:	3404      	adds	r4, #4
   28706:	2800      	cmp	r0, #0
   28708:	d1ce      	bne.n	286a8 <gatt_find_type_rsp+0x32>
}
   2870a:	b009      	add	sp, #36	; 0x24
   2870c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028710 <bt_gatt_cancel>:
{
   28710:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28712:	4604      	mov	r4, r0
   28714:	460d      	mov	r5, r1
	k_sched_lock();
   28716:	f7fa fe85 	bl	23424 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   2871a:	4629      	mov	r1, r5
   2871c:	4620      	mov	r0, r4
   2871e:	f7ff fb34 	bl	27d8a <bt_att_find_req_by_user_data>
	if (req) {
   28722:	4601      	mov	r1, r0
   28724:	b920      	cbnz	r0, 28730 <bt_gatt_cancel+0x20>
}
   28726:	b002      	add	sp, #8
   28728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   2872c:	f7fb bad8 	b.w	23ce0 <k_sched_unlock>
		func = req->func;
   28730:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   28732:	4620      	mov	r0, r4
   28734:	f7f1 fb0c 	bl	19d50 <bt_att_req_cancel>
	k_sched_unlock();
   28738:	f7fb fad2 	bl	23ce0 <k_sched_unlock>
	if (func) {
   2873c:	b12e      	cbz	r6, 2874a <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   2873e:	2300      	movs	r3, #0
   28740:	9500      	str	r5, [sp, #0]
   28742:	461a      	mov	r2, r3
   28744:	210e      	movs	r1, #14
   28746:	4620      	mov	r0, r4
   28748:	47b0      	blx	r6
}
   2874a:	b002      	add	sp, #8
   2874c:	bd70      	pop	{r4, r5, r6, pc}

0002874e <bt_gatt_notification>:
{
   2874e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28752:	4605      	mov	r5, r0
   28754:	460e      	mov	r6, r1
   28756:	4690      	mov	r8, r2
   28758:	4699      	mov	r9, r3
	sub = gatt_sub_find(conn);
   2875a:	f7f1 fb9d 	bl	19e98 <gatt_sub_find>
	if (!sub) {
   2875e:	b1f8      	cbz	r0, 287a0 <bt_gatt_notification+0x52>
	return list->head;
   28760:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   28762:	b1ec      	cbz	r4, 287a0 <bt_gatt_notification+0x52>
	return node->next;
   28764:	f854 7918 	ldr.w	r7, [r4], #-24
   28768:	b107      	cbz	r7, 2876c <bt_gatt_notification+0x1e>
   2876a:	3f18      	subs	r7, #24
		if (handle != params->value_handle) {
   2876c:	89a3      	ldrh	r3, [r4, #12]
   2876e:	42b3      	cmp	r3, r6
   28770:	d10f      	bne.n	28792 <bt_gatt_notification+0x44>
		if (check_subscribe_security_level(conn, params)) {
   28772:	7a6a      	ldrb	r2, [r5, #9]
   28774:	7ca3      	ldrb	r3, [r4, #18]
   28776:	429a      	cmp	r2, r3
   28778:	d30b      	bcc.n	28792 <bt_gatt_notification+0x44>
			if (params->notify(conn, params, data, length) ==
   2877a:	f8d4 c000 	ldr.w	ip, [r4]
   2877e:	464b      	mov	r3, r9
   28780:	4642      	mov	r2, r8
   28782:	4621      	mov	r1, r4
   28784:	4628      	mov	r0, r5
   28786:	47e0      	blx	ip
   28788:	b918      	cbnz	r0, 28792 <bt_gatt_notification+0x44>
				bt_gatt_unsubscribe(conn, params);
   2878a:	4621      	mov	r1, r4
   2878c:	4628      	mov	r0, r5
   2878e:	f7f3 fb1b 	bl	1bdc8 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   28792:	b12f      	cbz	r7, 287a0 <bt_gatt_notification+0x52>
   28794:	69b8      	ldr	r0, [r7, #24]
   28796:	b100      	cbz	r0, 2879a <bt_gatt_notification+0x4c>
   28798:	3818      	subs	r0, #24
{
   2879a:	463c      	mov	r4, r7
   2879c:	4607      	mov	r7, r0
   2879e:	e7e5      	b.n	2876c <bt_gatt_notification+0x1e>
}
   287a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000287a4 <bt_gatt_change_aware>:
{
   287a4:	b570      	push	{r4, r5, r6, lr}
   287a6:	4606      	mov	r6, r0
   287a8:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   287aa:	f7f1 fb27 	bl	19dfc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   287ae:	b910      	cbnz	r0, 287b6 <bt_gatt_change_aware+0x12>
		return true;
   287b0:	2401      	movs	r4, #1
}
   287b2:	4620      	mov	r0, r4
   287b4:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   287b6:	7a03      	ldrb	r3, [r0, #8]
   287b8:	07da      	lsls	r2, r3, #31
   287ba:	d5f9      	bpl.n	287b0 <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   287bc:	f100 050c 	add.w	r5, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   287c0:	4628      	mov	r0, r5
   287c2:	f7ff fbce 	bl	27f62 <atomic_get>
   287c6:	07c3      	lsls	r3, r0, #31
   287c8:	d4f2      	bmi.n	287b0 <bt_gatt_change_aware+0xc>
	if (!req) {
   287ca:	b90c      	cbnz	r4, 287d0 <bt_gatt_change_aware+0x2c>
		return false;
   287cc:	2400      	movs	r4, #0
   287ce:	e7f0      	b.n	287b2 <bt_gatt_change_aware+0xe>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   287d0:	f06f 0102 	mvn.w	r1, #2
   287d4:	4628      	mov	r0, r5
   287d6:	f7ff fc09 	bl	27fec <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   287da:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   287de:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   287e0:	d006      	beq.n	287f0 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   287e2:	f7ff faee 	bl	27dc2 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   287e6:	2101      	movs	r1, #1
   287e8:	4628      	mov	r0, r5
   287ea:	f7ff fbc0 	bl	27f6e <atomic_or>
}
   287ee:	e7e0      	b.n	287b2 <bt_gatt_change_aware+0xe>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   287f0:	f7ff fae5 	bl	27dbe <bt_att_fixed_chan_only>
   287f4:	2800      	cmp	r0, #0
   287f6:	d0e9      	beq.n	287cc <bt_gatt_change_aware+0x28>
   287f8:	4630      	mov	r0, r6
   287fa:	f7ff fafb 	bl	27df4 <bt_att_out_of_sync_sent_on_fixed>
   287fe:	4604      	mov	r4, r0
   28800:	2800      	cmp	r0, #0
   28802:	d0e3      	beq.n	287cc <bt_gatt_change_aware+0x28>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28804:	f06f 0102 	mvn.w	r1, #2
   28808:	4628      	mov	r0, r5
   2880a:	f7ff fbef 	bl	27fec <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2880e:	4630      	mov	r0, r6
   28810:	e7e7      	b.n	287e2 <bt_gatt_change_aware+0x3e>

00028812 <ccc_delayed_store>:
{
   28812:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   28814:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   28818:	4605      	mov	r5, r0
		if (!conn) {
   2881a:	b194      	cbz	r4, 28842 <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2881c:	f104 0690 	add.w	r6, r4, #144	; 0x90
   28820:	7a20      	ldrb	r0, [r4, #8]
   28822:	4631      	mov	r1, r6
   28824:	f7fe fb5f 	bl	26ee6 <bt_addr_le_is_bonded>
   28828:	b158      	cbz	r0, 28842 <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   2882a:	2300      	movs	r3, #0
   2882c:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   28830:	7a20      	ldrb	r0, [r4, #8]
   28832:	4631      	mov	r1, r6
   28834:	f7f3 fc22 	bl	1c07c <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   28838:	4620      	mov	r0, r4
}
   2883a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2883e:	f7ef ba7d 	b.w	17d3c <bt_conn_unref>
}
   28842:	bd70      	pop	{r4, r5, r6, pc}

00028844 <smp_pairing_req>:
}
   28844:	2007      	movs	r0, #7
   28846:	4770      	bx	lr

00028848 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28848:	f3bf 8f5b 	dmb	ish
   2884c:	6800      	ldr	r0, [r0, #0]
   2884e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28852:	4108      	asrs	r0, r1
}
   28854:	f000 0001 	and.w	r0, r0, #1
   28858:	4770      	bx	lr

0002885a <update_keys_check>:
{
   2885a:	b510      	push	{r4, lr}
   2885c:	4603      	mov	r3, r0
	if (!keys ||
   2885e:	b1d9      	cbz	r1, 28898 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   28860:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   28862:	f010 0f24 	tst.w	r0, #36	; 0x24
   28866:	d017      	beq.n	28898 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   28868:	7d1a      	ldrb	r2, [r3, #20]
   2886a:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2886c:	7b09      	ldrb	r1, [r1, #12]
   2886e:	42a2      	cmp	r2, r4
   28870:	bf28      	it	cs
   28872:	4622      	movcs	r2, r4
   28874:	4291      	cmp	r1, r2
   28876:	d901      	bls.n	2887c <update_keys_check+0x22>
		return false;
   28878:	2000      	movs	r0, #0
}
   2887a:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2887c:	0682      	lsls	r2, r0, #26
   2887e:	d404      	bmi.n	2888a <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   28880:	7a18      	ldrb	r0, [r3, #8]
   28882:	3800      	subs	r0, #0
   28884:	bf18      	it	ne
   28886:	2001      	movne	r0, #1
   28888:	e7f7      	b.n	2887a <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2888a:	2105      	movs	r1, #5
   2888c:	1d18      	adds	r0, r3, #4
   2888e:	f7ff ffdb 	bl	28848 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   28892:	2800      	cmp	r0, #0
   28894:	d1f4      	bne.n	28880 <update_keys_check+0x26>
   28896:	e7ef      	b.n	28878 <update_keys_check+0x1e>
		return true;
   28898:	2001      	movs	r0, #1
   2889a:	e7ee      	b.n	2887a <update_keys_check+0x20>

0002889c <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2889c:	2301      	movs	r3, #1
   2889e:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   288a0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   288a2:	f3bf 8f5b 	dmb	ish
   288a6:	e850 2f00 	ldrex	r2, [r0]
   288aa:	401a      	ands	r2, r3
   288ac:	e840 2100 	strex	r1, r2, [r0]
   288b0:	2900      	cmp	r1, #0
   288b2:	d1f8      	bne.n	288a6 <atomic_clear_bit+0xa>
   288b4:	f3bf 8f5b 	dmb	ish
}
   288b8:	4770      	bx	lr

000288ba <bt_smp_aes_cmac>:
{
   288ba:	b570      	push	{r4, r5, r6, lr}
   288bc:	b0c2      	sub	sp, #264	; 0x108
   288be:	460d      	mov	r5, r1
   288c0:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   288c2:	4601      	mov	r1, r0
   288c4:	aa16      	add	r2, sp, #88	; 0x58
   288c6:	4668      	mov	r0, sp
{
   288c8:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   288ca:	f7fd ffa7 	bl	2681c <tc_cmac_setup>
   288ce:	b150      	cbz	r0, 288e6 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   288d0:	4632      	mov	r2, r6
   288d2:	4629      	mov	r1, r5
   288d4:	4668      	mov	r0, sp
   288d6:	f7fd ffcc 	bl	26872 <tc_cmac_update>
   288da:	b120      	cbz	r0, 288e6 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   288dc:	4669      	mov	r1, sp
   288de:	4620      	mov	r0, r4
   288e0:	f7fe f832 	bl	26948 <tc_cmac_final>
   288e4:	b918      	cbnz	r0, 288ee <bt_smp_aes_cmac+0x34>
		return -EIO;
   288e6:	f06f 0004 	mvn.w	r0, #4
}
   288ea:	b042      	add	sp, #264	; 0x108
   288ec:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   288ee:	2000      	movs	r0, #0
   288f0:	e7fb      	b.n	288ea <bt_smp_aes_cmac+0x30>

000288f2 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   288f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   288f4:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   288f6:	2200      	movs	r2, #0
   288f8:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   288fa:	4604      	mov	r4, r0
   288fc:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   288fe:	460a      	mov	r2, r1
   28900:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   28904:	2106      	movs	r1, #6
   28906:	f7fe fcf9 	bl	272fc <bt_l2cap_send_cb>
   2890a:	b128      	cbz	r0, 28918 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2890c:	4628      	mov	r0, r5
}
   2890e:	b003      	add	sp, #12
   28910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   28914:	f7f5 bcd2 	b.w	1e2bc <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   28918:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2891c:	2300      	movs	r3, #0
   2891e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   28922:	b003      	add	sp, #12
   28924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   28928:	f7fa bc16 	b.w	23158 <k_work_reschedule>

0002892c <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2892c:	b510      	push	{r4, lr}
   2892e:	1e43      	subs	r3, r0, #1
   28930:	f100 0210 	add.w	r2, r0, #16
   28934:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   28936:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2893a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2893e:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   28940:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   28942:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   28944:	d1f7      	bne.n	28936 <sys_mem_swap.constprop.0+0xa>
	}
}
   28946:	bd10      	pop	{r4, pc}

00028948 <smp_f6>:
{
   28948:	b5f0      	push	{r4, r5, r6, r7, lr}
   2894a:	b097      	sub	sp, #92	; 0x5c
   2894c:	4605      	mov	r5, r0
   2894e:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   28950:	a805      	add	r0, sp, #20
   28952:	2210      	movs	r2, #16
{
   28954:	461c      	mov	r4, r3
   28956:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   28958:	f7f3 fcc0 	bl	1c2dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2895c:	2210      	movs	r2, #16
   2895e:	4631      	mov	r1, r6
   28960:	a809      	add	r0, sp, #36	; 0x24
   28962:	f7f3 fcbb 	bl	1c2dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   28966:	4621      	mov	r1, r4
   28968:	2210      	movs	r2, #16
   2896a:	a80d      	add	r0, sp, #52	; 0x34
   2896c:	f7f3 fcb6 	bl	1c2dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   28970:	991c      	ldr	r1, [sp, #112]	; 0x70
   28972:	2203      	movs	r2, #3
   28974:	a811      	add	r0, sp, #68	; 0x44
   28976:	f7f3 fcb1 	bl	1c2dc <sys_memcpy_swap>
	m[51] = a1->type;
   2897a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2897c:	f814 3b01 	ldrb.w	r3, [r4], #1
   28980:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   28984:	4621      	mov	r1, r4
   28986:	2206      	movs	r2, #6
   28988:	a812      	add	r0, sp, #72	; 0x48
   2898a:	f7fe f8e2 	bl	26b52 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2898e:	4621      	mov	r1, r4
   28990:	2206      	movs	r2, #6
   28992:	a812      	add	r0, sp, #72	; 0x48
   28994:	f7f3 fca2 	bl	1c2dc <sys_memcpy_swap>
	m[58] = a2->type;
   28998:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2899a:	f814 3b01 	ldrb.w	r3, [r4], #1
   2899e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   289a2:	4621      	mov	r1, r4
   289a4:	2206      	movs	r2, #6
   289a6:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   289aa:	f7fe f8d2 	bl	26b52 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   289ae:	4621      	mov	r1, r4
   289b0:	2206      	movs	r2, #6
   289b2:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   289b6:	f7f3 fc91 	bl	1c2dc <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   289ba:	2210      	movs	r2, #16
   289bc:	4629      	mov	r1, r5
   289be:	a801      	add	r0, sp, #4
   289c0:	f7f3 fc8c 	bl	1c2dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   289c4:	463b      	mov	r3, r7
   289c6:	2241      	movs	r2, #65	; 0x41
   289c8:	a905      	add	r1, sp, #20
   289ca:	a801      	add	r0, sp, #4
   289cc:	f7ff ff75 	bl	288ba <bt_smp_aes_cmac>
	if (err) {
   289d0:	4604      	mov	r4, r0
   289d2:	b910      	cbnz	r0, 289da <smp_f6+0x92>
	sys_mem_swap(check, 16);
   289d4:	4638      	mov	r0, r7
   289d6:	f7ff ffa9 	bl	2892c <sys_mem_swap.constprop.0>
}
   289da:	4620      	mov	r0, r4
   289dc:	b017      	add	sp, #92	; 0x5c
   289de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000289e0 <smp_f4>:
{
   289e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   289e2:	b097      	sub	sp, #92	; 0x5c
   289e4:	4614      	mov	r4, r2
   289e6:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   289e8:	2220      	movs	r2, #32
   289ea:	4601      	mov	r1, r0
   289ec:	a805      	add	r0, sp, #20
{
   289ee:	461d      	mov	r5, r3
   289f0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   289f2:	f7f3 fc73 	bl	1c2dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   289f6:	2220      	movs	r2, #32
   289f8:	4631      	mov	r1, r6
   289fa:	a80d      	add	r0, sp, #52	; 0x34
   289fc:	f7f3 fc6e 	bl	1c2dc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   28a00:	4621      	mov	r1, r4
   28a02:	2210      	movs	r2, #16
   28a04:	a801      	add	r0, sp, #4
	m[64] = z;
   28a06:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   28a0a:	f7f3 fc67 	bl	1c2dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   28a0e:	463b      	mov	r3, r7
   28a10:	2241      	movs	r2, #65	; 0x41
   28a12:	a905      	add	r1, sp, #20
   28a14:	a801      	add	r0, sp, #4
   28a16:	f7ff ff50 	bl	288ba <bt_smp_aes_cmac>
	if (err) {
   28a1a:	4604      	mov	r4, r0
   28a1c:	b910      	cbnz	r0, 28a24 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   28a1e:	4638      	mov	r0, r7
   28a20:	f7ff ff84 	bl	2892c <sys_mem_swap.constprop.0>
}
   28a24:	4620      	mov	r0, r4
   28a26:	b017      	add	sp, #92	; 0x5c
   28a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028a2a <smp_signing_info>:
   28a2a:	2007      	movs	r0, #7
   28a2c:	4770      	bx	lr

00028a2e <atomic_test_and_clear_bit>:
{
   28a2e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   28a30:	2301      	movs	r3, #1
   28a32:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28a36:	43ca      	mvns	r2, r1
   28a38:	f3bf 8f5b 	dmb	ish
   28a3c:	e850 3f00 	ldrex	r3, [r0]
   28a40:	ea03 0c02 	and.w	ip, r3, r2
   28a44:	e840 ce00 	strex	lr, ip, [r0]
   28a48:	f1be 0f00 	cmp.w	lr, #0
   28a4c:	d1f6      	bne.n	28a3c <atomic_test_and_clear_bit+0xe>
   28a4e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   28a52:	420b      	tst	r3, r1
}
   28a54:	bf14      	ite	ne
   28a56:	2001      	movne	r0, #1
   28a58:	2000      	moveq	r0, #0
   28a5a:	f85d fb04 	ldr.w	pc, [sp], #4

00028a5e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28a5e:	2301      	movs	r3, #1
   28a60:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28a62:	f3bf 8f5b 	dmb	ish
   28a66:	e850 2f00 	ldrex	r2, [r0]
   28a6a:	431a      	orrs	r2, r3
   28a6c:	e840 2100 	strex	r1, r2, [r0]
   28a70:	2900      	cmp	r1, #0
   28a72:	d1f8      	bne.n	28a66 <atomic_set_bit+0x8>
   28a74:	f3bf 8f5b 	dmb	ish
}
   28a78:	4770      	bx	lr

00028a7a <smp_keypress_notif>:
{
   28a7a:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   28a7c:	210e      	movs	r1, #14
   28a7e:	f7ff ffee 	bl	28a5e <atomic_set_bit>
}
   28a82:	2000      	movs	r0, #0
   28a84:	bd08      	pop	{r3, pc}

00028a86 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   28a86:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   28a88:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   28a8a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   28a8c:	4628      	mov	r0, r5
   28a8e:	2104      	movs	r1, #4
   28a90:	f7ff feda 	bl	28848 <atomic_test_bit>
   28a94:	b970      	cbnz	r0, 28ab4 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   28a96:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   28a9a:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   28a9c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   28a9e:	4608      	mov	r0, r1
   28aa0:	f7fe fc29 	bl	272f6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   28aa4:	4604      	mov	r4, r0
   28aa6:	b938      	cbnz	r0, 28ab8 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   28aa8:	2104      	movs	r1, #4
   28aaa:	4628      	mov	r0, r5
   28aac:	f7ff ffd7 	bl	28a5e <atomic_set_bit>
}
   28ab0:	4620      	mov	r0, r4
   28ab2:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   28ab4:	2200      	movs	r2, #0
   28ab6:	e7f0      	b.n	28a9a <smp_create_pdu.constprop.0+0x14>
	return net_buf_simple_add(&buf->b, len);
   28ab8:	2101      	movs	r1, #1
   28aba:	3008      	adds	r0, #8
   28abc:	f7f5 fd14 	bl	1e4e8 <net_buf_simple_add>
	hdr->code = op;
   28ac0:	7006      	strb	r6, [r0, #0]
	return buf;
   28ac2:	e7f5      	b.n	28ab0 <smp_create_pdu.constprop.0+0x2a>

00028ac4 <smp_send_pairing_random>:
{
   28ac4:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   28ac6:	2104      	movs	r1, #4
{
   28ac8:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   28aca:	f7ff ffdc 	bl	28a86 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   28ace:	4604      	mov	r4, r0
   28ad0:	b178      	cbz	r0, 28af2 <smp_send_pairing_random+0x2e>
   28ad2:	2110      	movs	r1, #16
   28ad4:	3008      	adds	r0, #8
   28ad6:	f7f5 fd07 	bl	1e4e8 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   28ada:	2210      	movs	r2, #16
   28adc:	f105 0127 	add.w	r1, r5, #39	; 0x27
   28ae0:	f7fe f837 	bl	26b52 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   28ae4:	4628      	mov	r0, r5
   28ae6:	2200      	movs	r2, #0
   28ae8:	4621      	mov	r1, r4
   28aea:	f7ff ff02 	bl	288f2 <smp_send.constprop.0>
	return 0;
   28aee:	2000      	movs	r0, #0
}
   28af0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   28af2:	2008      	movs	r0, #8
   28af4:	e7fc      	b.n	28af0 <smp_send_pairing_random+0x2c>

00028af6 <smp_pairing_confirm>:
{
   28af6:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   28af8:	688d      	ldr	r5, [r1, #8]
{
   28afa:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   28afc:	210b      	movs	r1, #11
   28afe:	3004      	adds	r0, #4
   28b00:	f7ff fecc 	bl	2889c <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   28b04:	2210      	movs	r2, #16
   28b06:	4629      	mov	r1, r5
   28b08:	f104 0017 	add.w	r0, r4, #23
   28b0c:	f7fe f821 	bl	26b52 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   28b10:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   28b14:	78db      	ldrb	r3, [r3, #3]
   28b16:	b93b      	cbnz	r3, 28b28 <smp_pairing_confirm+0x32>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   28b18:	4620      	mov	r0, r4
   28b1a:	2104      	movs	r1, #4
   28b1c:	f7ff ff9f 	bl	28a5e <atomic_set_bit>
}
   28b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return smp_send_pairing_random(smp);
   28b24:	f7ff bfce 	b.w	28ac4 <smp_send_pairing_random>
}
   28b28:	2000      	movs	r0, #0
   28b2a:	bd38      	pop	{r3, r4, r5, pc}

00028b2c <smp_reset>:
{
   28b2c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28b2e:	1d03      	adds	r3, r0, #4
   28b30:	4604      	mov	r4, r0
   28b32:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   28b34:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
   28b38:	f3bf 8f5b 	dmb	ish
   28b3c:	e853 2f00 	ldrex	r2, [r3]
   28b40:	e843 5100 	strex	r1, r5, [r3]
   28b44:	2900      	cmp	r1, #0
   28b46:	d1f9      	bne.n	28b3c <smp_reset+0x10>
   28b48:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   28b4c:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   28b50:	f7fa fb08 	bl	23164 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   28b54:	7225      	strb	r5, [r4, #8]
   28b56:	f3bf 8f5b 	dmb	ish
   28b5a:	e854 3f00 	ldrex	r3, [r4]
   28b5e:	e844 5200 	strex	r2, r5, [r4]
   28b62:	2a00      	cmp	r2, #0
   28b64:	d1f9      	bne.n	28b5a <smp_reset+0x2e>
   28b66:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   28b6a:	78f3      	ldrb	r3, [r6, #3]
   28b6c:	b92b      	cbnz	r3, 28b7a <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   28b6e:	4620      	mov	r0, r4
   28b70:	210b      	movs	r1, #11
}
   28b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   28b76:	f7ff bf72 	b.w	28a5e <atomic_set_bit>
}
   28b7a:	bd70      	pop	{r4, r5, r6, pc}

00028b7c <smp_c1>:
{
   28b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28b80:	b089      	sub	sp, #36	; 0x24
   28b82:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   28b86:	4699      	mov	r9, r3
	p1[0] = ia->type;
   28b88:	783b      	ldrb	r3, [r7, #0]
{
   28b8a:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   28b8c:	f88d 3000 	strb.w	r3, [sp]
{
   28b90:	460c      	mov	r4, r1
	p1[1] = ra->type;
   28b92:	f898 3000 	ldrb.w	r3, [r8]
   28b96:	f88d 3001 	strb.w	r3, [sp, #1]
{
   28b9a:	4611      	mov	r1, r2
   28b9c:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   28b9e:	2207      	movs	r2, #7
   28ba0:	f10d 0002 	add.w	r0, sp, #2
   28ba4:	f7fd ffd5 	bl	26b52 <memcpy>
	memcpy(p1 + 9, pres, 7);
   28ba8:	2207      	movs	r2, #7
   28baa:	4649      	mov	r1, r9
   28bac:	f10d 0009 	add.w	r0, sp, #9
   28bb0:	f7fd ffcf 	bl	26b52 <memcpy>
	while (len--) {
   28bb4:	f104 0010 	add.w	r0, r4, #16
   28bb8:	4629      	mov	r1, r5
   28bba:	466a      	mov	r2, sp
   28bbc:	42a0      	cmp	r0, r4
   28bbe:	d127      	bne.n	28c10 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   28bc0:	462a      	mov	r2, r5
   28bc2:	4629      	mov	r1, r5
   28bc4:	4630      	mov	r0, r6
   28bc6:	f000 fd60 	bl	2968a <bt_encrypt_le>
	if (err) {
   28bca:	4604      	mov	r4, r0
   28bcc:	b9e0      	cbnz	r0, 28c08 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   28bce:	2206      	movs	r2, #6
   28bd0:	f108 0101 	add.w	r1, r8, #1
   28bd4:	a804      	add	r0, sp, #16
   28bd6:	f7fd ffbc 	bl	26b52 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   28bda:	2206      	movs	r2, #6
   28bdc:	1c79      	adds	r1, r7, #1
   28bde:	f10d 0016 	add.w	r0, sp, #22
   28be2:	f7fd ffb6 	bl	26b52 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   28be6:	2204      	movs	r2, #4
   28be8:	4621      	mov	r1, r4
   28bea:	a807      	add	r0, sp, #28
   28bec:	f7fd ffbc 	bl	26b68 <memset>
	while (len--) {
   28bf0:	f105 0010 	add.w	r0, r5, #16
   28bf4:	462a      	mov	r2, r5
   28bf6:	ab04      	add	r3, sp, #16
   28bf8:	4282      	cmp	r2, r0
   28bfa:	d112      	bne.n	28c22 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   28bfc:	462a      	mov	r2, r5
   28bfe:	4629      	mov	r1, r5
   28c00:	4630      	mov	r0, r6
   28c02:	f000 fd42 	bl	2968a <bt_encrypt_le>
   28c06:	4604      	mov	r4, r0
}
   28c08:	4620      	mov	r0, r4
   28c0a:	b009      	add	sp, #36	; 0x24
   28c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   28c10:	f814 3b01 	ldrb.w	r3, [r4], #1
   28c14:	f812 cb01 	ldrb.w	ip, [r2], #1
   28c18:	ea83 030c 	eor.w	r3, r3, ip
   28c1c:	f801 3b01 	strb.w	r3, [r1], #1
   28c20:	e7cc      	b.n	28bbc <smp_c1+0x40>
   28c22:	f812 1b01 	ldrb.w	r1, [r2], #1
   28c26:	f813 4b01 	ldrb.w	r4, [r3], #1
   28c2a:	4061      	eors	r1, r4
   28c2c:	f802 1c01 	strb.w	r1, [r2, #-1]
   28c30:	e7e2      	b.n	28bf8 <smp_c1+0x7c>

00028c32 <legacy_send_pairing_confirm>:
{
   28c32:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28c34:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   28c36:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   28c3a:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28c3c:	f7ff ff23 	bl	28a86 <smp_create_pdu.constprop.0>
	if (!buf) {
   28c40:	4606      	mov	r6, r0
   28c42:	b1c0      	cbz	r0, 28c76 <legacy_send_pairing_confirm+0x44>
   28c44:	2110      	movs	r1, #16
   28c46:	3008      	adds	r0, #8
   28c48:	f7f5 fc4e 	bl	1e4e8 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   28c4c:	f104 039e 	add.w	r3, r4, #158	; 0x9e
   28c50:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   28c52:	9002      	str	r0, [sp, #8]
   28c54:	9301      	str	r3, [sp, #4]
   28c56:	9400      	str	r4, [sp, #0]
   28c58:	f105 0310 	add.w	r3, r5, #16
   28c5c:	f105 0209 	add.w	r2, r5, #9
   28c60:	f105 0127 	add.w	r1, r5, #39	; 0x27
   28c64:	f105 0047 	add.w	r0, r5, #71	; 0x47
   28c68:	f7ff ff88 	bl	28b7c <smp_c1>
   28c6c:	4604      	mov	r4, r0
   28c6e:	b120      	cbz	r0, 28c7a <legacy_send_pairing_confirm+0x48>
		net_buf_unref(buf);
   28c70:	4630      	mov	r0, r6
   28c72:	f7f5 fb23 	bl	1e2bc <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   28c76:	2008      	movs	r0, #8
   28c78:	e009      	b.n	28c8e <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   28c7a:	4602      	mov	r2, r0
   28c7c:	4631      	mov	r1, r6
   28c7e:	4628      	mov	r0, r5
   28c80:	f7ff fe37 	bl	288f2 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   28c84:	1d28      	adds	r0, r5, #4
   28c86:	4621      	mov	r1, r4
   28c88:	f7ff fe08 	bl	2889c <atomic_clear_bit>
	return 0;
   28c8c:	4620      	mov	r0, r4
}
   28c8e:	b004      	add	sp, #16
   28c90:	bd70      	pop	{r4, r5, r6, pc}

00028c92 <bt_smp_request_ltk>:
{
   28c92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28c96:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   28c9a:	e9cd 2300 	strd	r2, r3, [sp]
   28c9e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   28ca0:	f7f3 fb42 	bl	1c328 <smp_chan_get>
	if (!smp) {
   28ca4:	4605      	mov	r5, r0
   28ca6:	2800      	cmp	r0, #0
   28ca8:	f000 8090 	beq.w	28dcc <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   28cac:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   28cb0:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   28cb2:	f1b9 0f00 	cmp.w	r9, #0
   28cb6:	d12a      	bne.n	28d0e <bt_smp_request_ltk+0x7c>
   28cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
   28cbc:	4313      	orrs	r3, r2
   28cbe:	d126      	bne.n	28d0e <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   28cc0:	2103      	movs	r1, #3
   28cc2:	4638      	mov	r0, r7
   28cc4:	f7ff fdc0 	bl	28848 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   28cc8:	b308      	cbz	r0, 28d0e <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   28cca:	2101      	movs	r1, #1
   28ccc:	4638      	mov	r0, r7
   28cce:	f7ff fdbb 	bl	28848 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   28cd2:	4606      	mov	r6, r0
   28cd4:	b1d8      	cbz	r0, 28d0e <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   28cd6:	7d2c      	ldrb	r4, [r5, #20]
   28cd8:	7b6b      	ldrb	r3, [r5, #13]
   28cda:	429c      	cmp	r4, r3
   28cdc:	bf28      	it	cs
   28cde:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   28ce0:	4622      	mov	r2, r4
   28ce2:	f105 0147 	add.w	r1, r5, #71	; 0x47
   28ce6:	4640      	mov	r0, r8
   28ce8:	f7fd ff33 	bl	26b52 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   28cec:	2c0f      	cmp	r4, #15
   28cee:	d806      	bhi.n	28cfe <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   28cf0:	f1c4 0210 	rsb	r2, r4, #16
   28cf4:	4649      	mov	r1, r9
   28cf6:	eb08 0004 	add.w	r0, r8, r4
   28cfa:	f7fd ff35 	bl	26b68 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   28cfe:	2101      	movs	r1, #1
   28d00:	4638      	mov	r0, r7
   28d02:	f7ff feac 	bl	28a5e <atomic_set_bit>
}
   28d06:	4630      	mov	r0, r6
   28d08:	b003      	add	sp, #12
   28d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   28d0e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   28d12:	b983      	cbnz	r3, 28d36 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   28d14:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   28d18:	7a21      	ldrb	r1, [r4, #8]
   28d1a:	4632      	mov	r2, r6
   28d1c:	2020      	movs	r0, #32
   28d1e:	f7f4 ff11 	bl	1db44 <bt_keys_find>
   28d22:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   28d26:	b930      	cbnz	r0, 28d36 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   28d28:	7a21      	ldrb	r1, [r4, #8]
   28d2a:	4632      	mov	r2, r6
   28d2c:	2001      	movs	r0, #1
   28d2e:	f7f4 ff09 	bl	1db44 <bt_keys_find>
   28d32:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   28d36:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   28d3a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   28d3e:	b9ee      	cbnz	r6, 28d7c <bt_smp_request_ltk+0xea>
   28d40:	e9dd 2300 	ldrd	r2, r3, [sp]
   28d44:	4313      	orrs	r3, r2
   28d46:	d119      	bne.n	28d7c <bt_smp_request_ltk+0xea>
   28d48:	b388      	cbz	r0, 28dae <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   28d4a:	89c3      	ldrh	r3, [r0, #14]
   28d4c:	069a      	lsls	r2, r3, #26
   28d4e:	d516      	bpl.n	28d7e <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   28d50:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   28d52:	f100 011a 	add.w	r1, r0, #26
   28d56:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   28d58:	4640      	mov	r0, r8
   28d5a:	f7fd fefa 	bl	26b52 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   28d5e:	2c0f      	cmp	r4, #15
   28d60:	d806      	bhi.n	28d70 <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   28d62:	f1c4 0210 	rsb	r2, r4, #16
   28d66:	4631      	mov	r1, r6
   28d68:	eb08 0004 	add.w	r0, r8, r4
   28d6c:	f7fd fefc 	bl	26b68 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   28d70:	2101      	movs	r1, #1
   28d72:	4638      	mov	r0, r7
   28d74:	f7ff fe73 	bl	28a5e <atomic_set_bit>
		return true;
   28d78:	2601      	movs	r6, #1
   28d7a:	e7c4      	b.n	28d06 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   28d7c:	b1b8      	cbz	r0, 28dae <bt_smp_request_ltk+0x11c>
   28d7e:	89c3      	ldrh	r3, [r0, #14]
   28d80:	07db      	lsls	r3, r3, #31
   28d82:	d514      	bpl.n	28dae <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   28d84:	2208      	movs	r2, #8
   28d86:	4669      	mov	r1, sp
   28d88:	3040      	adds	r0, #64	; 0x40
   28d8a:	f7fd fed1 	bl	26b30 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   28d8e:	b970      	cbnz	r0, 28dae <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   28d90:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   28d94:	2202      	movs	r2, #2
   28d96:	a90a      	add	r1, sp, #40	; 0x28
   28d98:	3048      	adds	r0, #72	; 0x48
   28d9a:	f7fd fec9 	bl	26b30 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   28d9e:	4606      	mov	r6, r0
   28da0:	b928      	cbnz	r0, 28dae <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   28da2:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   28da6:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   28da8:	314a      	adds	r1, #74	; 0x4a
   28daa:	4622      	mov	r2, r4
   28dac:	e7d4      	b.n	28d58 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   28dae:	210f      	movs	r1, #15
   28db0:	4638      	mov	r0, r7
   28db2:	f7ff fd49 	bl	28848 <atomic_test_bit>
   28db6:	b120      	cbz	r0, 28dc2 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   28db8:	2202      	movs	r2, #2
   28dba:	2106      	movs	r1, #6
   28dbc:	4620      	mov	r0, r4
   28dbe:	f7ef fa13 	bl	181e8 <bt_conn_security_changed>
	smp_reset(smp);
   28dc2:	4628      	mov	r0, r5
   28dc4:	f7ff feb2 	bl	28b2c <smp_reset>
	return false;
   28dc8:	2600      	movs	r6, #0
   28dca:	e79c      	b.n	28d06 <bt_smp_request_ltk+0x74>
		return false;
   28dcc:	4606      	mov	r6, r0
   28dce:	e79a      	b.n	28d06 <bt_smp_request_ltk+0x74>

00028dd0 <bt_smp_sign>:
   28dd0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28dd4:	4770      	bx	lr

00028dd6 <bt_smp_irk_get>:
{
   28dd6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   28dd8:	2500      	movs	r5, #0
{
   28dda:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   28ddc:	2210      	movs	r2, #16
   28dde:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   28de0:	e9cd 5500 	strd	r5, r5, [sp]
   28de4:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   28de8:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   28dea:	f7fd fea1 	bl	26b30 <memcmp>
   28dee:	b180      	cbz	r0, 28e12 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   28df0:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   28df2:	220c      	movs	r2, #12
   28df4:	4629      	mov	r1, r5
   28df6:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   28df8:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   28dfa:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   28dfc:	70e5      	strb	r5, [r4, #3]
   28dfe:	1d20      	adds	r0, r4, #4
   28e00:	f7fd feb2 	bl	26b68 <memset>
	err = bt_encrypt_le(key, res, res);
   28e04:	4622      	mov	r2, r4
   28e06:	4621      	mov	r1, r4
   28e08:	4630      	mov	r0, r6
   28e0a:	f000 fc3e 	bl	2968a <bt_encrypt_le>
}
   28e0e:	b004      	add	sp, #16
   28e10:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   28e12:	f06f 0015 	mvn.w	r0, #21
   28e16:	e7fa      	b.n	28e0e <bt_smp_irk_get+0x38>

00028e18 <bt_smp_start_security>:
{
   28e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (conn->role) {
   28e1a:	78c3      	ldrb	r3, [r0, #3]
{
   28e1c:	4604      	mov	r4, r0
	switch (conn->role) {
   28e1e:	2b00      	cmp	r3, #0
   28e20:	d15f      	bne.n	28ee2 <bt_smp_start_security+0xca>
		smp = smp_chan_get(conn);
   28e22:	f7f3 fa81 	bl	1c328 <smp_chan_get>
		if (!smp) {
   28e26:	4605      	mov	r5, r0
   28e28:	2800      	cmp	r0, #0
   28e2a:	d05d      	beq.n	28ee8 <bt_smp_start_security+0xd0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   28e2c:	1d06      	adds	r6, r0, #4
   28e2e:	2103      	movs	r1, #3
   28e30:	4630      	mov	r0, r6
   28e32:	f7ff fd09 	bl	28848 <atomic_test_bit>
   28e36:	b120      	cbz	r0, 28e42 <bt_smp_start_security+0x2a>
			return -EBUSY;
   28e38:	f06f 040f 	mvn.w	r4, #15
}
   28e3c:	4620      	mov	r0, r4
   28e3e:	b003      	add	sp, #12
   28e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   28e42:	2101      	movs	r1, #1
   28e44:	4630      	mov	r0, r6
   28e46:	f7ff fcff 	bl	28848 <atomic_test_bit>
   28e4a:	2800      	cmp	r0, #0
   28e4c:	d1f4      	bne.n	28e38 <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   28e4e:	210a      	movs	r1, #10
   28e50:	1d20      	adds	r0, r4, #4
   28e52:	f7ff fcf9 	bl	28848 <atomic_test_bit>
   28e56:	b128      	cbz	r0, 28e64 <bt_smp_start_security+0x4c>
			return smp_send_pairing_req(conn);
   28e58:	4620      	mov	r0, r4
}
   28e5a:	b003      	add	sp, #12
   28e5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return smp_send_pairing_req(conn);
   28e60:	f7f3 bc4c 	b.w	1c6fc <smp_send_pairing_req>
	if (!conn->le.keys) {
   28e64:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   28e68:	b983      	cbnz	r3, 28e8c <bt_smp_start_security+0x74>
						     conn->id, &conn->le.dst);
   28e6a:	f104 0790 	add.w	r7, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   28e6e:	7a21      	ldrb	r1, [r4, #8]
   28e70:	463a      	mov	r2, r7
   28e72:	2020      	movs	r0, #32
   28e74:	f7f4 fe66 	bl	1db44 <bt_keys_find>
   28e78:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   28e7c:	b930      	cbnz	r0, 28e8c <bt_smp_start_security+0x74>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   28e7e:	7a21      	ldrb	r1, [r4, #8]
   28e80:	463a      	mov	r2, r7
   28e82:	2004      	movs	r0, #4
   28e84:	f7f4 fe5e 	bl	1db44 <bt_keys_find>
   28e88:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys ||
   28e8c:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   28e90:	2900      	cmp	r1, #0
   28e92:	d0e1      	beq.n	28e58 <bt_smp_start_security+0x40>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   28e94:	89cb      	ldrh	r3, [r1, #14]
	if (!conn->le.keys ||
   28e96:	f013 0f24 	tst.w	r3, #36	; 0x24
   28e9a:	d0dd      	beq.n	28e58 <bt_smp_start_security+0x40>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   28e9c:	7aa2      	ldrb	r2, [r4, #10]
   28e9e:	2a02      	cmp	r2, #2
   28ea0:	d909      	bls.n	28eb6 <bt_smp_start_security+0x9e>
   28ea2:	7b48      	ldrb	r0, [r1, #13]
   28ea4:	07c0      	lsls	r0, r0, #31
   28ea6:	d5d7      	bpl.n	28e58 <bt_smp_start_security+0x40>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   28ea8:	2a03      	cmp	r2, #3
   28eaa:	d004      	beq.n	28eb6 <bt_smp_start_security+0x9e>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   28eac:	069b      	lsls	r3, r3, #26
   28eae:	d5d3      	bpl.n	28e58 <bt_smp_start_security+0x40>
   28eb0:	7b0b      	ldrb	r3, [r1, #12]
   28eb2:	2b10      	cmp	r3, #16
   28eb4:	d1d0      	bne.n	28e58 <bt_smp_start_security+0x40>
		err = bt_conn_le_start_encryption(conn,
   28eb6:	7b0b      	ldrb	r3, [r1, #12]
   28eb8:	9300      	str	r3, [sp, #0]
   28eba:	f101 0218 	add.w	r2, r1, #24
   28ebe:	f101 031a 	add.w	r3, r1, #26
   28ec2:	4620      	mov	r0, r4
   28ec4:	3110      	adds	r1, #16
   28ec6:	f7fe f8e9 	bl	2709c <bt_conn_le_start_encryption>
		if (err) {
   28eca:	4604      	mov	r4, r0
   28ecc:	2800      	cmp	r0, #0
   28ece:	d1b5      	bne.n	28e3c <bt_smp_start_security+0x24>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   28ed0:	4628      	mov	r0, r5
   28ed2:	210b      	movs	r1, #11
   28ed4:	f7ff fdc3 	bl	28a5e <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   28ed8:	2101      	movs	r1, #1
   28eda:	4630      	mov	r0, r6
   28edc:	f7ff fdbf 	bl	28a5e <atomic_set_bit>
		return 0;
   28ee0:	e7ac      	b.n	28e3c <bt_smp_start_security+0x24>
		return -EINVAL;
   28ee2:	f06f 0415 	mvn.w	r4, #21
   28ee6:	e7a9      	b.n	28e3c <bt_smp_start_security+0x24>
			return -ENOTCONN;
   28ee8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   28eec:	e7a6      	b.n	28e3c <bt_smp_start_security+0x24>

00028eee <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28eee:	1d03      	adds	r3, r0, #4
{
   28ef0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28ef2:	4605      	mov	r5, r0
   28ef4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28ef6:	4618      	mov	r0, r3
   28ef8:	2103      	movs	r1, #3
   28efa:	f7ff fca5 	bl	28848 <atomic_test_bit>
   28efe:	b1f0      	cbz	r0, 28f3e <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   28f00:	4631      	mov	r1, r6
   28f02:	4628      	mov	r0, r5
   28f04:	f7f4 fa52 	bl	1d3ac <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   28f08:	2105      	movs	r1, #5
   28f0a:	4628      	mov	r0, r5
   28f0c:	f7ff fdbb 	bl	28a86 <smp_create_pdu.constprop.0>
	if (!buf) {
   28f10:	4604      	mov	r4, r0
   28f12:	b308      	cbz	r0, 28f58 <smp_error+0x6a>
   28f14:	2101      	movs	r1, #1
   28f16:	3008      	adds	r0, #8
   28f18:	f7f5 fae6 	bl	1e4e8 <net_buf_simple_add>
	rsp->reason = reason;
   28f1c:	7006      	strb	r6, [r0, #0]
   28f1e:	2600      	movs	r6, #0
   28f20:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   28f24:	9600      	str	r6, [sp, #0]
   28f26:	4633      	mov	r3, r6
   28f28:	4622      	mov	r2, r4
   28f2a:	2106      	movs	r1, #6
   28f2c:	f7fe f9e6 	bl	272fc <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   28f30:	b118      	cbz	r0, 28f3a <smp_error+0x4c>
		net_buf_unref(buf);
   28f32:	4620      	mov	r0, r4
   28f34:	f7f5 f9c2 	bl	1e2bc <net_buf_unref>
	return 0;
   28f38:	4630      	mov	r0, r6
}
   28f3a:	b002      	add	sp, #8
   28f3c:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28f3e:	2101      	movs	r1, #1
   28f40:	4618      	mov	r0, r3
   28f42:	f7ff fc81 	bl	28848 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28f46:	2800      	cmp	r0, #0
   28f48:	d1da      	bne.n	28f00 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   28f4a:	210f      	movs	r1, #15
   28f4c:	4618      	mov	r0, r3
   28f4e:	f7ff fc7b 	bl	28848 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28f52:	2800      	cmp	r0, #0
   28f54:	d1d4      	bne.n	28f00 <smp_error+0x12>
   28f56:	e7d7      	b.n	28f08 <smp_error+0x1a>
		return -ENOBUFS;
   28f58:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28f5c:	e7ed      	b.n	28f3a <smp_error+0x4c>

00028f5e <bt_smp_dhkey_ready>:
{
   28f5e:	b570      	push	{r4, r5, r6, lr}
   28f60:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   28f62:	2008      	movs	r0, #8
   28f64:	f7f3 f96a 	bl	1c23c <smp_find>
	if (smp) {
   28f68:	4604      	mov	r4, r0
   28f6a:	b1b8      	cbz	r0, 28f9c <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   28f6c:	1d05      	adds	r5, r0, #4
   28f6e:	2108      	movs	r1, #8
   28f70:	4628      	mov	r0, r5
   28f72:	f7ff fc93 	bl	2889c <atomic_clear_bit>
	if (!dhkey) {
   28f76:	b3b6      	cbz	r6, 28fe6 <bt_smp_dhkey_ready+0x88>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   28f78:	2107      	movs	r1, #7
   28f7a:	f7ff fc8f 	bl	2889c <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   28f7e:	4631      	mov	r1, r6
   28f80:	2220      	movs	r2, #32
   28f82:	f104 0097 	add.w	r0, r4, #151	; 0x97
   28f86:	f7fd fde4 	bl	26b52 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28f8a:	210a      	movs	r1, #10
   28f8c:	4628      	mov	r0, r5
   28f8e:	f7ff fc5b 	bl	28848 <atomic_test_bit>
   28f92:	b168      	cbz	r0, 28fb0 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28f94:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28f96:	4628      	mov	r0, r5
   28f98:	f7ff fd61 	bl	28a5e <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   28f9c:	2007      	movs	r0, #7
   28f9e:	f7f3 f94d 	bl	1c23c <smp_find>
		if (smp) {
   28fa2:	4604      	mov	r4, r0
   28fa4:	b118      	cbz	r0, 28fae <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   28fa6:	f7f3 fa5f 	bl	1c468 <smp_dhkey_generate>
			if (err) {
   28faa:	4601      	mov	r1, r0
   28fac:	b9b8      	cbnz	r0, 28fde <bt_smp_dhkey_ready+0x80>
}
   28fae:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   28fb0:	2110      	movs	r1, #16
   28fb2:	4628      	mov	r0, r5
   28fb4:	f7ff fc48 	bl	28848 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28fb8:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   28fba:	2800      	cmp	r0, #0
   28fbc:	d1eb      	bne.n	28f96 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   28fbe:	4628      	mov	r0, r5
   28fc0:	f7ff fc42 	bl	28848 <atomic_test_bit>
   28fc4:	2800      	cmp	r0, #0
   28fc6:	d0e9      	beq.n	28f9c <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   28fc8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   28fcc:	78db      	ldrb	r3, [r3, #3]
   28fce:	2b00      	cmp	r3, #0
   28fd0:	d1e4      	bne.n	28f9c <bt_smp_dhkey_ready+0x3e>
			return compute_and_send_central_dhcheck(smp);
   28fd2:	4620      	mov	r0, r4
   28fd4:	f7f3 fe46 	bl	1cc64 <compute_and_send_central_dhcheck>
		if (err) {
   28fd8:	4601      	mov	r1, r0
   28fda:	2800      	cmp	r0, #0
   28fdc:	d0de      	beq.n	28f9c <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   28fde:	4620      	mov	r0, r4
   28fe0:	f7ff ff85 	bl	28eee <smp_error>
   28fe4:	e7da      	b.n	28f9c <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   28fe6:	210b      	movs	r1, #11
   28fe8:	e7f9      	b.n	28fde <bt_smp_dhkey_ready+0x80>

00028fea <smp_ident_sent>:
	if (!err) {
   28fea:	b922      	cbnz	r2, 28ff6 <smp_ident_sent+0xc>
	if (conn->type == BT_CONN_TYPE_LE) {
   28fec:	7881      	ldrb	r1, [r0, #2]
   28fee:	2901      	cmp	r1, #1
   28ff0:	d101      	bne.n	28ff6 <smp_ident_sent+0xc>
   28ff2:	f7f4 bb95 	b.w	1d720 <smp_check_complete.part.0>
}
   28ff6:	4770      	bx	lr

00028ff8 <smp_id_sent>:
	if (!err) {
   28ff8:	b92a      	cbnz	r2, 29006 <smp_id_sent+0xe>
	if (conn->type == BT_CONN_TYPE_LE) {
   28ffa:	7883      	ldrb	r3, [r0, #2]
   28ffc:	2b01      	cmp	r3, #1
   28ffe:	d102      	bne.n	29006 <smp_id_sent+0xe>
   29000:	2102      	movs	r1, #2
   29002:	f7f4 bb8d 	b.w	1d720 <smp_check_complete.part.0>
}
   29006:	4770      	bx	lr

00029008 <bt_smp_disconnected>:
{
   29008:	b570      	push	{r4, r5, r6, lr}
   2900a:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2900c:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   29010:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29014:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   29016:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   2901a:	f7fa f8a3 	bl	23164 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2901e:	2103      	movs	r1, #3
   29020:	4620      	mov	r0, r4
   29022:	f7ff fc11 	bl	28848 <atomic_test_bit>
   29026:	b1a0      	cbz	r0, 29052 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   29028:	2108      	movs	r1, #8
   2902a:	4630      	mov	r0, r6
   2902c:	f7f4 f9be 	bl	1d3ac <smp_pairing_complete>
	if (keys) {
   29030:	b13d      	cbz	r5, 29042 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   29032:	89eb      	ldrh	r3, [r5, #14]
   29034:	b113      	cbz	r3, 2903c <bt_smp_disconnected+0x34>
   29036:	7b6b      	ldrb	r3, [r5, #13]
   29038:	079b      	lsls	r3, r3, #30
   2903a:	d502      	bpl.n	29042 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2903c:	4628      	mov	r0, r5
   2903e:	f7f4 fddf 	bl	1dc00 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   29042:	4630      	mov	r0, r6
   29044:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
}
   29048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2904c:	2100      	movs	r1, #0
   2904e:	f7fd bd8b 	b.w	26b68 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   29052:	2101      	movs	r1, #1
   29054:	4620      	mov	r0, r4
   29056:	f7ff fbf7 	bl	28848 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2905a:	2800      	cmp	r0, #0
   2905c:	d1e4      	bne.n	29028 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2905e:	210f      	movs	r1, #15
   29060:	4620      	mov	r0, r4
   29062:	f7ff fbf1 	bl	28848 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   29066:	2800      	cmp	r0, #0
   29068:	d1de      	bne.n	29028 <bt_smp_disconnected+0x20>
   2906a:	e7e1      	b.n	29030 <bt_smp_disconnected+0x28>

0002906c <id_add>:
	bt_id_add(keys);
   2906c:	f7ed bd52 	b.w	16b14 <bt_id_add>

00029070 <bt_keys_get_type>:
{
   29070:	b570      	push	{r4, r5, r6, lr}
   29072:	4604      	mov	r4, r0
   29074:	460d      	mov	r5, r1
   29076:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   29078:	f7f4 fd64 	bl	1db44 <bt_keys_find>
	if (keys) {
   2907c:	b938      	cbnz	r0, 2908e <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2907e:	4631      	mov	r1, r6
   29080:	4628      	mov	r0, r5
   29082:	f7f4 fd1f 	bl	1dac4 <bt_keys_get_addr>
	if (!keys) {
   29086:	b110      	cbz	r0, 2908e <bt_keys_get_type+0x1e>
	keys->keys |= type;
   29088:	89c3      	ldrh	r3, [r0, #14]
   2908a:	431c      	orrs	r4, r3
   2908c:	81c4      	strh	r4, [r0, #14]
}
   2908e:	bd70      	pop	{r4, r5, r6, pc}

00029090 <bt_keys_add_type>:
	keys->keys |= type;
   29090:	89c3      	ldrh	r3, [r0, #14]
   29092:	4319      	orrs	r1, r3
   29094:	81c1      	strh	r1, [r0, #14]
}
   29096:	4770      	bx	lr

00029098 <fixed_data_unref>:
}
   29098:	4770      	bx	lr

0002909a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2909a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2909c:	6849      	ldr	r1, [r1, #4]
   2909e:	6809      	ldr	r1, [r1, #0]
   290a0:	f7f4 bece 	b.w	1de40 <net_buf_alloc_len>

000290a4 <net_buf_simple_init_with_data>:
	buf->size  = size;
   290a4:	b292      	uxth	r2, r2
	buf->__buf = data;
   290a6:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   290a8:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   290aa:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   290ac:	8082      	strh	r2, [r0, #4]
}
   290ae:	4770      	bx	lr

000290b0 <net_buf_simple_pull_u8>:
{
   290b0:	b510      	push	{r4, lr}
	val = buf->data[0];
   290b2:	6803      	ldr	r3, [r0, #0]
   290b4:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   290b6:	2101      	movs	r1, #1
   290b8:	f7f5 f9dc 	bl	1e474 <net_buf_simple_pull>
}
   290bc:	4620      	mov	r0, r4
   290be:	bd10      	pop	{r4, pc}

000290c0 <net_buf_simple_pull_le16>:
{
   290c0:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   290c2:	6803      	ldr	r3, [r0, #0]
   290c4:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   290c6:	2102      	movs	r1, #2
   290c8:	f7f5 f9d4 	bl	1e474 <net_buf_simple_pull>
}
   290cc:	4620      	mov	r0, r4
   290ce:	bd10      	pop	{r4, pc}

000290d0 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   290d0:	6802      	ldr	r2, [r0, #0]
   290d2:	6880      	ldr	r0, [r0, #8]
}
   290d4:	1a10      	subs	r0, r2, r0
   290d6:	4770      	bx	lr

000290d8 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   290d8:	8883      	ldrh	r3, [r0, #4]
   290da:	88c2      	ldrh	r2, [r0, #6]
   290dc:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   290de:	6803      	ldr	r3, [r0, #0]
   290e0:	6880      	ldr	r0, [r0, #8]
   290e2:	1a18      	subs	r0, r3, r0
}
   290e4:	1a10      	subs	r0, r2, r0
   290e6:	4770      	bx	lr

000290e8 <net_buf_simple_add_mem>:
{
   290e8:	b538      	push	{r3, r4, r5, lr}
   290ea:	460d      	mov	r5, r1
   290ec:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   290ee:	4611      	mov	r1, r2
   290f0:	f7f5 f9fa 	bl	1e4e8 <net_buf_simple_add>
   290f4:	4622      	mov	r2, r4
   290f6:	4629      	mov	r1, r5
}
   290f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   290fc:	f7fd bd29 	b.w	26b52 <memcpy>

00029100 <net_buf_simple_add_u8>:
{
   29100:	b510      	push	{r4, lr}
   29102:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   29104:	2101      	movs	r1, #1
   29106:	f7f5 f9ef 	bl	1e4e8 <net_buf_simple_add>
	*u8 = val;
   2910a:	7004      	strb	r4, [r0, #0]
}
   2910c:	bd10      	pop	{r4, pc}

0002910e <net_buf_simple_add_le16>:
{
   2910e:	b510      	push	{r4, lr}
   29110:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   29112:	2102      	movs	r1, #2
   29114:	f7f5 f9e8 	bl	1e4e8 <net_buf_simple_add>
	dst[0] = val;
   29118:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2911a:	0a24      	lsrs	r4, r4, #8
   2911c:	7044      	strb	r4, [r0, #1]
}
   2911e:	bd10      	pop	{r4, pc}

00029120 <set_on_state>:
	__asm__ volatile(
   29120:	f04f 0340 	mov.w	r3, #64	; 0x40
   29124:	f3ef 8211 	mrs	r2, BASEPRI
   29128:	f383 8812 	msr	BASEPRI_MAX, r3
   2912c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   29130:	6803      	ldr	r3, [r0, #0]
   29132:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   29136:	f043 0302 	orr.w	r3, r3, #2
   2913a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2913c:	f382 8811 	msr	BASEPRI, r2
   29140:	f3bf 8f6f 	isb	sy
}
   29144:	4770      	bx	lr

00029146 <async_start>:
{
   29146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29148:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2914a:	6904      	ldr	r4, [r0, #16]
{
   2914c:	4605      	mov	r5, r0
   2914e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   29150:	f04f 0040 	mov.w	r0, #64	; 0x40
   29154:	f3ef 8c11 	mrs	ip, BASEPRI
   29158:	f380 8812 	msr	BASEPRI_MAX, r0
   2915c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   29160:	260c      	movs	r6, #12
   29162:	fb06 4601 	mla	r6, r6, r1, r4
   29166:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   29168:	f000 0e07 	and.w	lr, r0, #7
   2916c:	f1be 0f01 	cmp.w	lr, #1
   29170:	d110      	bne.n	29194 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   29172:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
   29174:	2600      	movs	r6, #0
	__asm__ volatile(
   29176:	f38c 8811 	msr	BASEPRI, ip
   2917a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2917e:	b93e      	cbnz	r6, 29190 <async_start+0x4a>
	subdata->cb = cb;
   29180:	200c      	movs	r0, #12
   29182:	4341      	muls	r1, r0
   29184:	440c      	add	r4, r1
	subdata->user_data = user_data;
   29186:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2918a:	686b      	ldr	r3, [r5, #4]
   2918c:	585b      	ldr	r3, [r3, r1]
   2918e:	4798      	blx	r3
}
   29190:	4630      	mov	r0, r6
   29192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   29194:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   29198:	4287      	cmp	r7, r0
   2919a:	bf14      	ite	ne
   2919c:	f04f 36ff 	movne.w	r6, #4294967295
   291a0:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   291a4:	e7e7      	b.n	29176 <async_start+0x30>

000291a6 <api_start>:
{
   291a6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   291a8:	2480      	movs	r4, #128	; 0x80
   291aa:	9400      	str	r4, [sp, #0]
   291ac:	f7ff ffcb 	bl	29146 <async_start>
}
   291b0:	b002      	add	sp, #8
   291b2:	bd10      	pop	{r4, pc}

000291b4 <onoff_started_callback>:
	return &data->mgr[type];
   291b4:	6900      	ldr	r0, [r0, #16]
   291b6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   291b8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   291bc:	2100      	movs	r1, #0
   291be:	4710      	bx	r2

000291c0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   291c0:	2000      	movs	r0, #0
   291c2:	f7f7 bc45 	b.w	20a50 <nrfx_clock_stop>

000291c6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   291c6:	2280      	movs	r2, #128	; 0x80
   291c8:	f7f5 b9f4 	b.w	1e5b4 <stop>

000291cc <blocking_start_callback>:
{
   291cc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   291ce:	f7f9 bb03 	b.w	227d8 <z_impl_k_sem_give>

000291d2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   291d2:	6843      	ldr	r3, [r0, #4]
   291d4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   291d6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   291da:	600b      	str	r3, [r1, #0]
}
   291dc:	2000      	movs	r0, #0
   291de:	4770      	bx	lr

000291e0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   291e0:	6843      	ldr	r3, [r0, #4]
   291e2:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   291e4:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   291e8:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   291ec:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   291f0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   291f4:	2000      	movs	r0, #0
   291f6:	4770      	bx	lr

000291f8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   291f8:	6843      	ldr	r3, [r0, #4]
   291fa:	685b      	ldr	r3, [r3, #4]
}
   291fc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   291fe:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   29202:	4770      	bx	lr

00029204 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29204:	6843      	ldr	r3, [r0, #4]
   29206:	685b      	ldr	r3, [r3, #4]
}
   29208:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2920a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2920e:	4770      	bx	lr

00029210 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29210:	6843      	ldr	r3, [r0, #4]
   29212:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   29214:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   29218:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2921c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2921e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   29222:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   29226:	2000      	movs	r0, #0
   29228:	4770      	bx	lr

0002922a <erase_op>:
{
   2922a:	b570      	push	{r4, r5, r6, lr}
   2922c:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2922e:	f000 fb2c 	bl	2988a <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   29232:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   29234:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   29236:	b10b      	cbz	r3, 2923c <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   29238:	f000 fa86 	bl	29748 <nrf_flash_sync_get_timestamp_begin>
{
   2923c:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2923e:	6860      	ldr	r0, [r4, #4]
   29240:	f7f8 faec 	bl	2181c <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   29244:	68a3      	ldr	r3, [r4, #8]
   29246:	1b5b      	subs	r3, r3, r5
   29248:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2924a:	6863      	ldr	r3, [r4, #4]
   2924c:	442b      	add	r3, r5
   2924e:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   29250:	7b23      	ldrb	r3, [r4, #12]
		i++;
   29252:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   29254:	b93b      	cbnz	r3, 29266 <erase_op+0x3c>
	} while (e_ctx->len > 0);
   29256:	68a3      	ldr	r3, [r4, #8]
   29258:	2b00      	cmp	r3, #0
   2925a:	d1f0      	bne.n	2923e <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2925c:	68a0      	ldr	r0, [r4, #8]
}
   2925e:	3800      	subs	r0, #0
   29260:	bf18      	it	ne
   29262:	2001      	movne	r0, #1
   29264:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   29266:	4630      	mov	r0, r6
   29268:	f7f7 fd48 	bl	20cfc <nrf_flash_sync_check_time_limit>
   2926c:	2800      	cmp	r0, #0
   2926e:	d0f2      	beq.n	29256 <erase_op+0x2c>
   29270:	e7f4      	b.n	2925c <erase_op+0x32>

00029272 <is_regular_addr_valid>:
{
   29272:	b538      	push	{r3, r4, r5, lr}
   29274:	4605      	mov	r5, r0
   29276:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   29278:	f000 fb01 	bl	2987e <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2927c:	2d00      	cmp	r5, #0
   2927e:	db07      	blt.n	29290 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   29280:	42a8      	cmp	r0, r5
   29282:	d905      	bls.n	29290 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   29284:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   29286:	4284      	cmp	r4, r0
   29288:	bf8c      	ite	hi
   2928a:	2000      	movhi	r0, #0
   2928c:	2001      	movls	r0, #1
}
   2928e:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   29290:	2000      	movs	r0, #0
   29292:	e7fc      	b.n	2928e <is_regular_addr_valid+0x1c>

00029294 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   29294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   29298:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   2929a:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2929c:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   292a0:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   292a2:	f8c4 8000 	str.w	r8, [r4]
{
   292a6:	460d      	mov	r5, r1
   292a8:	4616      	mov	r6, r2
	info->index = 0U;
   292aa:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   292ae:	aa01      	add	r2, sp, #4
   292b0:	4669      	mov	r1, sp
   292b2:	4798      	blx	r3

	while (layout_size--) {
   292b4:	e9dd 7c00 	ldrd	r7, ip, [sp]
   292b8:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   292ba:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   292be:	4560      	cmp	r0, ip
   292c0:	d104      	bne.n	292cc <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   292c2:	f06f 0015 	mvn.w	r0, #21
}
   292c6:	b003      	add	sp, #12
   292c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   292cc:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   292d0:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   292d2:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   292d4:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   292d8:	b985      	cbnz	r5, 292fc <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   292da:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   292dc:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   292e0:	4543      	cmp	r3, r8
   292e2:	bf28      	it	cs
   292e4:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   292e6:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   292ea:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   292ec:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   292ee:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   292f0:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   292f2:	f100 0001 	add.w	r0, r0, #1
   292f6:	d9e2      	bls.n	292be <flash_get_page_info+0x2a>
			return 0;
   292f8:	2000      	movs	r0, #0
   292fa:	e7e4      	b.n	292c6 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   292fc:	1aab      	subs	r3, r5, r2
   292fe:	fbb3 f3f9 	udiv	r3, r3, r9
   29302:	e7eb      	b.n	292dc <flash_get_page_info+0x48>

00029304 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   29304:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   29306:	2200      	movs	r2, #0
   29308:	f7ff bfc4 	b.w	29294 <flash_get_page_info>

0002930c <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   29310:	6883      	ldr	r3, [r0, #8]
{
   29312:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   29314:	691b      	ldr	r3, [r3, #16]
{
   29316:	4688      	mov	r8, r1
   29318:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2931a:	a901      	add	r1, sp, #4
   2931c:	aa02      	add	r2, sp, #8
   2931e:	4798      	blx	r3
	off_t off = 0;
   29320:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   29322:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   29324:	4625      	mov	r5, r4
   29326:	9b02      	ldr	r3, [sp, #8]
   29328:	42ab      	cmp	r3, r5
   2932a:	d802      	bhi.n	29332 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2932c:	b006      	add	sp, #24
   2932e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   29332:	9f01      	ldr	r7, [sp, #4]
   29334:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   29338:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2933a:	687b      	ldr	r3, [r7, #4]
   2933c:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2933e:	683a      	ldr	r2, [r7, #0]
   29340:	42b2      	cmp	r2, r6
   29342:	eb0a 0306 	add.w	r3, sl, r6
   29346:	d802      	bhi.n	2934e <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   29348:	3501      	adds	r5, #1
   2934a:	469a      	mov	sl, r3
   2934c:	e7eb      	b.n	29326 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2934e:	4649      	mov	r1, r9
   29350:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   29352:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   29354:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   29356:	47c0      	blx	r8
   29358:	2800      	cmp	r0, #0
   2935a:	d0e7      	beq.n	2932c <flash_page_foreach+0x20>
			off += page_info.size;
   2935c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2935e:	3601      	adds	r6, #1
			off += page_info.size;
   29360:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   29362:	e7ec      	b.n	2933e <flash_page_foreach+0x32>

00029364 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   29364:	6902      	ldr	r2, [r0, #16]
{
   29366:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   29368:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2936c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   29370:	2000      	movs	r0, #0
   29372:	4770      	bx	lr

00029374 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   29374:	6843      	ldr	r3, [r0, #4]
   29376:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   29378:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2937c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   29380:	4770      	bx	lr

00029382 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   29382:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   29384:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   29386:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29388:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2938c:	b150      	cbz	r0, 293a4 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   2938e:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29390:	2000      	movs	r0, #0
   29392:	7812      	ldrb	r2, [r2, #0]
   29394:	700a      	strb	r2, [r1, #0]
   29396:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2939a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2939e:	2201      	movs	r2, #1
   293a0:	601a      	str	r2, [r3, #0]
	return 0;
   293a2:	4770      	bx	lr
		return -1;
   293a4:	f04f 30ff 	mov.w	r0, #4294967295
}
   293a8:	4770      	bx	lr

000293aa <is_tx_ready.isra.0>:
	return config->uarte_regs;
   293aa:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   293ac:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   293ae:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   293b2:	b940      	cbnz	r0, 293c6 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   293b4:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   293b6:	079b      	lsls	r3, r3, #30
   293b8:	d406      	bmi.n	293c8 <is_tx_ready.isra.0+0x1e>
   293ba:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   293be:	3800      	subs	r0, #0
   293c0:	bf18      	it	ne
   293c2:	2001      	movne	r0, #1
   293c4:	4770      	bx	lr
   293c6:	2001      	movs	r0, #1
}
   293c8:	4770      	bx	lr

000293ca <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   293ca:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   293cc:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   293ce:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   293d2:	05c9      	lsls	r1, r1, #23
   293d4:	d518      	bpl.n	29408 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   293d6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   293da:	b1a9      	cbz	r1, 29408 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   293dc:	f04f 0040 	mov.w	r0, #64	; 0x40
   293e0:	f3ef 8111 	mrs	r1, BASEPRI
   293e4:	f380 8812 	msr	BASEPRI_MAX, r0
   293e8:	f3bf 8f6f 	isb	sy
   293ec:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   293f0:	b130      	cbz	r0, 29400 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   293f2:	2000      	movs	r0, #0
   293f4:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   293f8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   293fc:	2001      	movs	r0, #1
   293fe:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   29400:	f381 8811 	msr	BASEPRI, r1
   29404:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   29408:	6852      	ldr	r2, [r2, #4]
   2940a:	06d2      	lsls	r2, r2, #27
   2940c:	d515      	bpl.n	2943a <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   2940e:	f04f 0140 	mov.w	r1, #64	; 0x40
   29412:	f3ef 8211 	mrs	r2, BASEPRI
   29416:	f381 8812 	msr	BASEPRI_MAX, r1
   2941a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2941e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   29422:	b111      	cbz	r1, 2942a <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   29424:	2100      	movs	r1, #0
   29426:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2942a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2942e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   29432:	f382 8811 	msr	BASEPRI, r2
   29436:	f3bf 8f6f 	isb	sy
}
   2943a:	4770      	bx	lr

0002943c <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2943c:	2000      	movs	r0, #0
   2943e:	4770      	bx	lr

00029440 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   29440:	b538      	push	{r3, r4, r5, lr}
   29442:	460c      	mov	r4, r1
   29444:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   29446:	f7ed f985 	bl	16754 <bt_is_ready>
   2944a:	b128      	cbz	r0, 29458 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2944c:	4629      	mov	r1, r5
   2944e:	4620      	mov	r0, r4
}
   29450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   29454:	f7ec bbb0 	b.w	15bb8 <bt_hci_le_rand>
}
   29458:	f06f 000a 	mvn.w	r0, #10
   2945c:	bd38      	pop	{r3, r4, r5, pc}

0002945e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2945e:	4770      	bx	lr

00029460 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   29460:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   29462:	6843      	ldr	r3, [r0, #4]
   29464:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   29466:	7a03      	ldrb	r3, [r0, #8]
   29468:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   2946c:	3b01      	subs	r3, #1
   2946e:	00db      	lsls	r3, r3, #3
   29470:	6845      	ldr	r5, [r0, #4]
   29472:	6814      	ldr	r4, [r2, #0]
   29474:	441d      	add	r5, r3
   29476:	42ac      	cmp	r4, r5
   29478:	d902      	bls.n	29480 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   2947a:	f06f 0001 	mvn.w	r0, #1
}
   2947e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   29480:	7965      	ldrb	r5, [r4, #5]
   29482:	428d      	cmp	r5, r1
   29484:	d002      	beq.n	2948c <pinctrl_lookup_state+0x2c>
		(*state)++;
   29486:	3408      	adds	r4, #8
   29488:	6014      	str	r4, [r2, #0]
   2948a:	e7f1      	b.n	29470 <pinctrl_lookup_state+0x10>
			return 0;
   2948c:	2000      	movs	r0, #0
   2948e:	e7f6      	b.n	2947e <pinctrl_lookup_state+0x1e>

00029490 <nrf_gpio_pin_clear>:
{
   29490:	b507      	push	{r0, r1, r2, lr}
   29492:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29494:	a801      	add	r0, sp, #4
   29496:	f7f6 faef 	bl	1fa78 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2949a:	9a01      	ldr	r2, [sp, #4]
   2949c:	2301      	movs	r3, #1
   2949e:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   294a0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   294a4:	b003      	add	sp, #12
   294a6:	f85d fb04 	ldr.w	pc, [sp], #4

000294aa <nrf_gpio_pin_set>:
{
   294aa:	b507      	push	{r0, r1, r2, lr}
   294ac:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   294ae:	a801      	add	r0, sp, #4
   294b0:	f7f6 fae2 	bl	1fa78 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   294b4:	9a01      	ldr	r2, [sp, #4]
   294b6:	2301      	movs	r3, #1
   294b8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   294ba:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   294be:	b003      	add	sp, #12
   294c0:	f85d fb04 	ldr.w	pc, [sp], #4

000294c4 <nrf_gpio_pin_write>:
    if (value == 0)
   294c4:	b909      	cbnz	r1, 294ca <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   294c6:	f7ff bfe3 	b.w	29490 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   294ca:	f7ff bfee 	b.w	294aa <nrf_gpio_pin_set>

000294ce <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   294ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   294d0:	461c      	mov	r4, r3
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   294d2:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   294d6:	2b00      	cmp	r3, #0
{
   294d8:	4605      	mov	r5, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   294da:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   294de:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   294e0:	bf0b      	itete	eq
   294e2:	4616      	moveq	r6, r2
   294e4:	2601      	movne	r6, #1
   294e6:	460f      	moveq	r7, r1
   294e8:	2700      	movne	r7, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   294ea:	9301      	str	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   294ec:	0224      	lsls	r4, r4, #8
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   294ee:	f7f6 fac3 	bl	1fa78 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   294f2:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   294f4:	f3c5 1281 	ubfx	r2, r5, #6, #2
   294f8:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
   294fc:	433a      	orrs	r2, r7
    reg->PIN_CNF[pin_number] = cnf;
   294fe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   29502:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   29506:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
   2950a:	b003      	add	sp, #12
   2950c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002950e <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2950e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29512:	4616      	mov	r6, r2
   29514:	4605      	mov	r5, r0
   29516:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2951a:	42af      	cmp	r7, r5
   2951c:	d102      	bne.n	29524 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   2951e:	2000      	movs	r0, #0
}
   29520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   29524:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
   29526:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   29528:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   2952c:	2b19      	cmp	r3, #25
   2952e:	d871      	bhi.n	29614 <pinctrl_configure_pins+0x106>
   29530:	e8df f003 	tbb	[pc, r3]
   29534:	2621190d 	.word	0x2621190d
   29538:	70263c2b 	.word	0x70263c2b
   2953c:	46707070 	.word	0x46707070
   29540:	70707050 	.word	0x70707050
   29544:	70707070 	.word	0x70707070
   29548:	61557070 	.word	0x61557070
   2954c:	6b66      	.short	0x6b66
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   2954e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29552:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   29556:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_set(pin_number);
   29558:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2955c:	f7ff ffa5 	bl	294aa <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   29560:	4643      	mov	r3, r8
   29562:	2201      	movs	r2, #1
   29564:	e005      	b.n	29572 <pinctrl_configure_pins+0x64>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   29566:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2956a:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2956e:	4643      	mov	r3, r8
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   29570:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   29572:	4611      	mov	r1, r2
   29574:	e015      	b.n	295a2 <pinctrl_configure_pins+0x94>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   29576:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2957a:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
   2957e:	e7ea      	b.n	29556 <pinctrl_configure_pins+0x48>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
   29580:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29584:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
   29588:	e7f1      	b.n	2956e <pinctrl_configure_pins+0x60>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   2958a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2958e:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   29592:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_clear(pin_number);
   29594:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   29598:	f7ff ff7a 	bl	29490 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2959c:	4643      	mov	r3, r8
   2959e:	2200      	movs	r2, #0
   295a0:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   295a2:	6828      	ldr	r0, [r5, #0]
   295a4:	f7ff ff93 	bl	294ce <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   295a8:	3504      	adds	r5, #4
   295aa:	e7b6      	b.n	2951a <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   295ac:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   295b0:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   295b4:	6828      	ldr	r0, [r5, #0]
   295b6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   295ba:	f7ff ff69 	bl	29490 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   295be:	e7cf      	b.n	29560 <pinctrl_configure_pins+0x52>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   295c0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   295c4:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
   295c8:	f1b8 0f00 	cmp.w	r8, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   295cc:	bf14      	ite	ne
   295ce:	4643      	movne	r3, r8
   295d0:	2306      	moveq	r3, #6
   295d2:	e7cd      	b.n	29570 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   295d4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   295d8:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
   295dc:	e7f4      	b.n	295c8 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   295de:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   295e2:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   295e6:	6828      	ldr	r0, [r5, #0]
   295e8:	f3c0 3140 	ubfx	r1, r0, #13, #1
   295ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   295f0:	f7ff ff68 	bl	294c4 <nrf_gpio_pin_write>
   295f4:	e7b4      	b.n	29560 <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   295f6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   295fa:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   295fe:	e7f2      	b.n	295e6 <pinctrl_configure_pins+0xd8>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   29600:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   29604:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   29608:	e7ed      	b.n	295e6 <pinctrl_configure_pins+0xd8>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   2960a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2960e:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
   29612:	e7e8      	b.n	295e6 <pinctrl_configure_pins+0xd8>
		switch (NRF_GET_FUN(pins[i])) {
   29614:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29618:	e782      	b.n	29520 <pinctrl_configure_pins+0x12>

0002961a <hci_driver_send>:
{
   2961a:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2961c:	8983      	ldrh	r3, [r0, #12]
{
   2961e:	4605      	mov	r5, r0
	if (!buf->len) {
   29620:	b373      	cbz	r3, 29680 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   29622:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   29624:	b1a3      	cbz	r3, 29650 <hci_driver_send+0x36>
   29626:	2b02      	cmp	r3, #2
   29628:	d12a      	bne.n	29680 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2962a:	f04f 30ff 	mov.w	r0, #4294967295
   2962e:	f04f 31ff 	mov.w	r1, #4294967295
   29632:	f7f6 fa53 	bl	1fadc <multithreading_lock_acquire>
	if (!errcode) {
   29636:	4604      	mov	r4, r0
   29638:	b940      	cbnz	r0, 2964c <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   2963a:	68a8      	ldr	r0, [r5, #8]
   2963c:	f7e4 fc35 	bl	deaa <sdc_hci_data_put>
   29640:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   29642:	f7f6 fa53 	bl	1faec <multithreading_lock_release>
		if (errcode) {
   29646:	b1b4      	cbz	r4, 29676 <hci_driver_send+0x5c>
			receive_signal_raise();
   29648:	f7f6 fbba 	bl	1fdc0 <receive_signal_raise>
}
   2964c:	4620      	mov	r0, r4
   2964e:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   29650:	f04f 30ff 	mov.w	r0, #4294967295
   29654:	f04f 31ff 	mov.w	r1, #4294967295
   29658:	f7f6 fa40 	bl	1fadc <multithreading_lock_acquire>
	if (!errcode) {
   2965c:	4604      	mov	r4, r0
   2965e:	2800      	cmp	r0, #0
   29660:	d1f4      	bne.n	2964c <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   29662:	68a8      	ldr	r0, [r5, #8]
   29664:	f7f6 fc5e 	bl	1ff24 <hci_internal_cmd_put>
   29668:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2966a:	f7f6 fa3f 	bl	1faec <multithreading_lock_release>
	if (errcode) {
   2966e:	2c00      	cmp	r4, #0
   29670:	d1ec      	bne.n	2964c <hci_driver_send+0x32>
	receive_signal_raise();
   29672:	f7f6 fba5 	bl	1fdc0 <receive_signal_raise>
		net_buf_unref(buf);
   29676:	4628      	mov	r0, r5
   29678:	f7f4 fe20 	bl	1e2bc <net_buf_unref>
   2967c:	2400      	movs	r4, #0
   2967e:	e7e5      	b.n	2964c <hci_driver_send+0x32>
	switch (type) {
   29680:	f06f 0415 	mvn.w	r4, #21
   29684:	e7e2      	b.n	2964c <hci_driver_send+0x32>

00029686 <receive_work_handler>:
	hci_driver_receive_process();
   29686:	f7f6 bbc3 	b.w	1fe10 <hci_driver_receive_process>

0002968a <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2968a:	b530      	push	{r4, r5, lr}
   2968c:	b08d      	sub	sp, #52	; 0x34
   2968e:	460c      	mov	r4, r1
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	BT_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   29690:	4601      	mov	r1, r0
   29692:	4668      	mov	r0, sp
{
   29694:	4615      	mov	r5, r2
	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   29696:	f7f6 ff5f 	bl	20558 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   2969a:	4621      	mov	r1, r4
   2969c:	a804      	add	r0, sp, #16
   2969e:	f7f6 ff5b 	bl	20558 <sys_memcpy_swap.constprop.0>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   296a2:	f04f 30ff 	mov.w	r0, #4294967295
   296a6:	f04f 31ff 	mov.w	r1, #4294967295
   296aa:	f7f6 fa17 	bl	1fadc <multithreading_lock_acquire>

	if (!errcode) {
   296ae:	4604      	mov	r4, r0
   296b0:	b960      	cbnz	r0, 296cc <bt_encrypt_le+0x42>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   296b2:	aa08      	add	r2, sp, #32
   296b4:	a904      	add	r1, sp, #16
   296b6:	4668      	mov	r0, sp
   296b8:	f7e4 f8db 	bl	d872 <sdc_soc_ecb_block_encrypt>
   296bc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   296be:	f7f6 fa15 	bl	1faec <multithreading_lock_release>
	}

	if (!errcode) {
   296c2:	b91c      	cbnz	r4, 296cc <bt_encrypt_le+0x42>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   296c4:	a908      	add	r1, sp, #32
   296c6:	4628      	mov	r0, r5
   296c8:	f7f6 ff46 	bl	20558 <sys_memcpy_swap.constprop.0>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   296cc:	4620      	mov	r0, r4
   296ce:	b00d      	add	sp, #52	; 0x34
   296d0:	bd30      	pop	{r4, r5, pc}

000296d2 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   296d2:	2100      	movs	r1, #0
   296d4:	f7f7 b8dc 	b.w	20890 <cmd_le_generate_dhkey>

000296d8 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   296d8:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   296dc:	2901      	cmp	r1, #1
   296de:	d801      	bhi.n	296e4 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   296e0:	f7f7 b8d6 	b.w	20890 <cmd_le_generate_dhkey>
}
   296e4:	2012      	movs	r0, #18
   296e6:	4770      	bx	lr

000296e8 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   296e8:	4668      	mov	r0, sp
   296ea:	f020 0107 	bic.w	r1, r0, #7
   296ee:	468d      	mov	sp, r1
   296f0:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   296f2:	f7d9 fc77 	bl	2fe4 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   296f6:	f7ea fe8d 	bl	14414 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   296fa:	f7ea ff75 	bl	145e8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   296fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29702:	4685      	mov	sp, r0
   29704:	4770      	bx	lr

00029706 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   29706:	4668      	mov	r0, sp
   29708:	f020 0107 	bic.w	r1, r0, #7
   2970c:	468d      	mov	sp, r1
   2970e:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   29710:	f7d9 fbde 	bl	2ed0 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   29714:	f7ea fe7e 	bl	14414 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   29718:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2971c:	4685      	mov	sp, r0
   2971e:	4770      	bx	lr

00029720 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   29720:	4668      	mov	r0, sp
   29722:	f020 0107 	bic.w	r1, r0, #7
   29726:	468d      	mov	sp, r1
   29728:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2972a:	f7d7 f939 	bl	9a0 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2972e:	f7ea fe71 	bl	14414 <_arch_isr_direct_pm>
   29732:	f7ea ff59 	bl	145e8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   29736:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2973a:	4685      	mov	sp, r0
   2973c:	4770      	bx	lr

0002973e <nrfx_clock_enable>:
}
   2973e:	4770      	bx	lr

00029740 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   29740:	f7da b8da 	b.w	38f8 <MPSL_IRQ_CLOCK_Handler>

00029744 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   29744:	f7da bc76 	b.w	4034 <mpsl_is_initialized>

00029748 <nrf_flash_sync_get_timestamp_begin>:
}
   29748:	4770      	bx	lr

0002974a <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   2974a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2974e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   29752:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   29754:	bf04      	itt	eq
   29756:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   2975a:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   2975e:	1f83      	subs	r3, r0, #6
   29760:	4258      	negs	r0, r3
   29762:	4158      	adcs	r0, r3
   29764:	4770      	bx	lr

00029766 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   29766:	4700      	bx	r0

00029768 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   29768:	f000 ba06 	b.w	29b78 <z_impl_k_busy_wait>

0002976c <nrf_gpio_pin_present_check>:
    switch (port)
   2976c:	0943      	lsrs	r3, r0, #5
   2976e:	bf0c      	ite	eq
   29770:	f04f 33ff 	moveq.w	r3, #4294967295
   29774:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   29776:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2977a:	fa23 f000 	lsr.w	r0, r3, r0
}
   2977e:	f000 0001 	and.w	r0, r0, #1
   29782:	4770      	bx	lr

00029784 <pin_is_task_output>:
{
   29784:	b508      	push	{r3, lr}
   29786:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   29788:	f7f7 fc8a 	bl	210a0 <pin_is_output>
   2978c:	b110      	cbz	r0, 29794 <pin_is_task_output+0x10>
   2978e:	4610      	mov	r0, r2
   29790:	f7f7 fc70 	bl	21074 <pin_in_use_by_te>
}
   29794:	f000 0001 	and.w	r0, r0, #1
   29798:	bd08      	pop	{r3, pc}

0002979a <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2979a:	0080      	lsls	r0, r0, #2
}
   2979c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   297a0:	4770      	bx	lr

000297a2 <nrf_gpio_reconfigure>:
{
   297a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   297a6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   297a8:	a801      	add	r0, sp, #4
{
   297aa:	460e      	mov	r6, r1
   297ac:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   297b0:	4690      	mov	r8, r2
   297b2:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   297b4:	f7f7 fcf6 	bl	211a4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   297b8:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   297ba:	f1b8 0f00 	cmp.w	r8, #0
   297be:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   297c2:	bf14      	ite	ne
   297c4:	2302      	movne	r3, #2
   297c6:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   297c8:	2e00      	cmp	r6, #0
   297ca:	bf18      	it	ne
   297cc:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   297d0:	2d00      	cmp	r5, #0
   297d2:	bf14      	ite	ne
   297d4:	210c      	movne	r1, #12
   297d6:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   297d8:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   297da:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   297de:	bf14      	ite	ne
   297e0:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   297e4:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   297e6:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   297e8:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   297ec:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   297f0:	bf14      	ite	ne
   297f2:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   297f6:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   297f8:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   297fa:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   297fe:	b106      	cbz	r6, 29802 <nrf_gpio_reconfigure+0x60>
   29800:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   29802:	f1b8 0f00 	cmp.w	r8, #0
   29806:	d003      	beq.n	29810 <nrf_gpio_reconfigure+0x6e>
   29808:	f898 8000 	ldrb.w	r8, [r8]
   2980c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   29810:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   29812:	b10d      	cbz	r5, 29818 <nrf_gpio_reconfigure+0x76>
   29814:	782d      	ldrb	r5, [r5, #0]
   29816:	00ad      	lsls	r5, r5, #2
   29818:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2981c:	b10c      	cbz	r4, 29822 <nrf_gpio_reconfigure+0x80>
   2981e:	7822      	ldrb	r2, [r4, #0]
   29820:	0214      	lsls	r4, r2, #8
   29822:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   29824:	b10f      	cbz	r7, 2982a <nrf_gpio_reconfigure+0x88>
   29826:	783f      	ldrb	r7, [r7, #0]
   29828:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2982a:	432c      	orrs	r4, r5
   2982c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2982e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   29832:	b002      	add	sp, #8
   29834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029838 <nrf_gpio_cfg_sense_set>:
{
   29838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2983a:	f10d 030f 	add.w	r3, sp, #15
   2983e:	9301      	str	r3, [sp, #4]
   29840:	2300      	movs	r3, #0
{
   29842:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   29846:	9300      	str	r3, [sp, #0]
   29848:	461a      	mov	r2, r3
   2984a:	4619      	mov	r1, r3
   2984c:	f7ff ffa9 	bl	297a2 <nrf_gpio_reconfigure>
}
   29850:	b005      	add	sp, #20
   29852:	f85d fb04 	ldr.w	pc, [sp], #4

00029856 <is_valid_address>:
{
   29856:	4603      	mov	r3, r0
   29858:	4608      	mov	r0, r1
   2985a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   2985e:	690a      	ldr	r2, [r1, #16]
    return p_reg->CODESIZE;
   29860:	6949      	ldr	r1, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   29862:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   29864:	4293      	cmp	r3, r2
   29866:	d308      	bcc.n	2987a <is_valid_address+0x24>
    if (uicr_allowed &&
   29868:	b140      	cbz	r0, 2987c <is_valid_address+0x26>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   2986a:	f1a3 2010 	sub.w	r0, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   2986e:	f5b0 7f04 	cmp.w	r0, #528	; 0x210
   29872:	bf2c      	ite	cs
   29874:	2000      	movcs	r0, #0
   29876:	2001      	movcc	r0, #1
   29878:	4770      	bx	lr
        return true;
   2987a:	2001      	movs	r0, #1
}
   2987c:	4770      	bx	lr

0002987e <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   2987e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29882:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   29884:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   29886:	4350      	muls	r0, r2
   29888:	4770      	bx	lr

0002988a <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2988a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2988e:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   29890:	4770      	bx	lr

00029892 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   29892:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29896:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   29898:	4770      	bx	lr

0002989a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2989a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   2989c:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   2989e:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   298a0:	bf9c      	itt	ls
   298a2:	6880      	ldrls	r0, [r0, #8]
   298a4:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   298a6:	3b01      	subs	r3, #1
   298a8:	1a98      	subs	r0, r3, r2
}
   298aa:	4770      	bx	lr

000298ac <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   298ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   298b0:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   298b4:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   298b6:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   298ba:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   298bc:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   298be:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   298c0:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   298c2:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   298c4:	d906      	bls.n	298d4 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   298c6:	f7fd f944 	bl	26b52 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   298ca:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   298ce:	60ec      	str	r4, [r5, #12]
}
   298d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   298d4:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   298d6:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   298da:	f7fd f93a 	bl	26b52 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   298de:	6868      	ldr	r0, [r5, #4]
   298e0:	4622      	mov	r2, r4
   298e2:	eb07 0108 	add.w	r1, r7, r8
   298e6:	e7ee      	b.n	298c6 <_WriteNoCheck+0x1a>

000298e8 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   298e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   298ec:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   298ee:	4606      	mov	r6, r0
   298f0:	4689      	mov	r9, r1
   298f2:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   298f4:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   298f8:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   298fa:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   298fc:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   298fe:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   29900:	bf28      	it	cs
   29902:	18e4      	addcs	r4, r4, r3
   29904:	3c01      	subs	r4, #1
   29906:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   29908:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   2990a:	42bc      	cmp	r4, r7
   2990c:	bf28      	it	cs
   2990e:	463c      	movcs	r4, r7
   29910:	4294      	cmp	r4, r2
   29912:	bf28      	it	cs
   29914:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   29916:	4649      	mov	r1, r9
   29918:	4622      	mov	r2, r4
   2991a:	4428      	add	r0, r5
   2991c:	f7fd f919 	bl	26b52 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   29920:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   29922:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
   29924:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   29926:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
   29928:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
   2992a:	42ab      	cmp	r3, r5
   2992c:	bf08      	it	eq
   2992e:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   29930:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   29934:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   29936:	2f00      	cmp	r7, #0
   29938:	d1de      	bne.n	298f8 <_WriteBlocking+0x10>
}
   2993a:	4640      	mov	r0, r8
   2993c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029940 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   29940:	f7f7 bfdc 	b.w	218fc <_DoInit>

00029944 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   29944:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   29946:	f7ff fffb 	bl	29940 <SEGGER_RTT_Init>

	return 0;
}
   2994a:	2000      	movs	r0, #0
   2994c:	bd08      	pop	{r3, pc}

0002994e <z_device_state_init>:
}
   2994e:	4770      	bx	lr

00029950 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   29950:	b138      	cbz	r0, 29962 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   29952:	68c3      	ldr	r3, [r0, #12]
   29954:	8818      	ldrh	r0, [r3, #0]
   29956:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2995a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2995e:	4258      	negs	r0, r3
   29960:	4158      	adcs	r0, r3
}
   29962:	4770      	bx	lr

00029964 <z_early_memset>:
	(void) memset(dst, c, n);
   29964:	f7fd b900 	b.w	26b68 <memset>

00029968 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   29968:	f7fd b8f3 	b.w	26b52 <memcpy>

0002996c <k_heap_init>:
{
   2996c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2996e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   29972:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   29976:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   29978:	f7e8 bba4 	b.w	120c4 <sys_heap_init>

0002997c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2997c:	f3ef 8005 	mrs	r0, IPSR
}
   29980:	3800      	subs	r0, #0
   29982:	bf18      	it	ne
   29984:	2001      	movne	r0, #1
   29986:	4770      	bx	lr

00029988 <z_impl_k_thread_name_set>:
}
   29988:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2998c:	4770      	bx	lr

0002998e <k_thread_name_get>:
}
   2998e:	2000      	movs	r0, #0
   29990:	4770      	bx	lr

00029992 <z_impl_k_thread_start>:
	z_sched_start(thread);
   29992:	f7f9 bf77 	b.w	23884 <z_sched_start>

00029996 <z_pm_save_idle_exit>:
{
   29996:	b508      	push	{r3, lr}
	pm_system_resume();
   29998:	f7e9 fdf4 	bl	13584 <pm_system_resume>
}
   2999c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   299a0:	f7ff bd5d 	b.w	2945e <sys_clock_idle_exit>

000299a4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   299a4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   299a8:	428b      	cmp	r3, r1
   299aa:	d001      	beq.n	299b0 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   299ac:	f7fa b8be 	b.w	23b2c <z_set_prio>
}
   299b0:	2000      	movs	r0, #0
   299b2:	4770      	bx	lr

000299b4 <z_impl_k_mutex_init>:
{
   299b4:	4603      	mov	r3, r0
	mutex->owner = NULL;
   299b6:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   299b8:	e9c3 0002 	strd	r0, r0, [r3, #8]
   299bc:	e9c3 3300 	strd	r3, r3, [r3]
}
   299c0:	4770      	bx	lr

000299c2 <z_queue_node_peek>:
{
   299c2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   299c4:	4604      	mov	r4, r0
   299c6:	b130      	cbz	r0, 299d6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   299c8:	6802      	ldr	r2, [r0, #0]
   299ca:	0793      	lsls	r3, r2, #30
   299cc:	d003      	beq.n	299d6 <z_queue_node_peek+0x14>
		ret = anode->data;
   299ce:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   299d0:	b109      	cbz	r1, 299d6 <z_queue_node_peek+0x14>
			k_free(anode);
   299d2:	f000 f99f 	bl	29d14 <k_free>
}
   299d6:	4620      	mov	r0, r4
   299d8:	bd10      	pop	{r4, pc}

000299da <z_impl_k_queue_init>:
	list->head = NULL;
   299da:	2300      	movs	r3, #0
	list->tail = NULL;
   299dc:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   299e0:	6083      	str	r3, [r0, #8]
   299e2:	f100 030c 	add.w	r3, r0, #12
   299e6:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   299ea:	f100 0314 	add.w	r3, r0, #20
   299ee:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   299f2:	4770      	bx	lr

000299f4 <k_queue_append>:
{
   299f4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   299f6:	2301      	movs	r3, #1
   299f8:	9300      	str	r3, [sp, #0]
   299fa:	2300      	movs	r3, #0
{
   299fc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   299fe:	4619      	mov	r1, r3
   29a00:	f7f8 fdb4 	bl	2256c <queue_insert>
}
   29a04:	b003      	add	sp, #12
   29a06:	f85d fb04 	ldr.w	pc, [sp], #4

00029a0a <k_queue_prepend>:
{
   29a0a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   29a0c:	2300      	movs	r3, #0
{
   29a0e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   29a10:	9300      	str	r3, [sp, #0]
   29a12:	4619      	mov	r1, r3
   29a14:	f7f8 fdaa 	bl	2256c <queue_insert>
}
   29a18:	b003      	add	sp, #12
   29a1a:	f85d fb04 	ldr.w	pc, [sp], #4

00029a1e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   29a1e:	b15a      	cbz	r2, 29a38 <z_impl_k_sem_init+0x1a>
   29a20:	428a      	cmp	r2, r1
   29a22:	d309      	bcc.n	29a38 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   29a24:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   29a28:	e9c0 1202 	strd	r1, r2, [r0, #8]
   29a2c:	e9c0 0000 	strd	r0, r0, [r0]
   29a30:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   29a34:	2000      	movs	r0, #0
   29a36:	4770      	bx	lr
		return -EINVAL;
   29a38:	f06f 0015 	mvn.w	r0, #21
}
   29a3c:	4770      	bx	lr

00029a3e <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   29a3e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   29a40:	2301      	movs	r3, #1
   29a42:	408b      	lsls	r3, r1
   29a44:	ea22 0303 	bic.w	r3, r2, r3
   29a48:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   29a4a:	fa22 f001 	lsr.w	r0, r2, r1
}
   29a4e:	f000 0001 	and.w	r0, r0, #1
   29a52:	4770      	bx	lr

00029a54 <unschedule_locked>:
{
   29a54:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29a56:	2103      	movs	r1, #3
{
   29a58:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29a5a:	300c      	adds	r0, #12
   29a5c:	f7ff ffef 	bl	29a3e <flag_test_and_clear>
   29a60:	4604      	mov	r4, r0
   29a62:	b118      	cbz	r0, 29a6c <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   29a64:	f105 0010 	add.w	r0, r5, #16
   29a68:	f7fa fd6e 	bl	24548 <z_abort_timeout>
}
   29a6c:	4620      	mov	r0, r4
   29a6e:	bd38      	pop	{r3, r4, r5, pc}

00029a70 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   29a70:	b120      	cbz	r0, 29a7c <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   29a72:	2200      	movs	r2, #0
   29a74:	4611      	mov	r1, r2
   29a76:	3088      	adds	r0, #136	; 0x88
   29a78:	f7fa bbd6 	b.w	24228 <z_sched_wake>
}
   29a7c:	4770      	bx	lr

00029a7e <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   29a7e:	68c3      	ldr	r3, [r0, #12]
{
   29a80:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29a82:	f3c3 0540 	ubfx	r5, r3, #1, #1
   29a86:	079b      	lsls	r3, r3, #30
{
   29a88:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29a8a:	d416      	bmi.n	29aba <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   29a8c:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   29a8e:	2102      	movs	r1, #2
   29a90:	300c      	adds	r0, #12
   29a92:	f7ff ffd4 	bl	29a3e <flag_test_and_clear>
   29a96:	b180      	cbz	r0, 29aba <cancel_async_locked+0x3c>
	return list->head;
   29a98:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29a9c:	b16a      	cbz	r2, 29aba <cancel_async_locked+0x3c>
   29a9e:	4294      	cmp	r4, r2
   29aa0:	d11b      	bne.n	29ada <cancel_async_locked+0x5c>
	return node->next;
   29aa2:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   29aa4:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   29aa8:	b98d      	cbnz	r5, 29ace <cancel_async_locked+0x50>
   29aaa:	428c      	cmp	r4, r1
	list->head = node;
   29aac:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   29ab0:	d101      	bne.n	29ab6 <cancel_async_locked+0x38>
	list->tail = node;
   29ab2:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   29ab6:	2300      	movs	r3, #0
   29ab8:	6023      	str	r3, [r4, #0]
	return *flagp;
   29aba:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   29abc:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   29ac0:	bf1e      	ittt	ne
   29ac2:	f043 0302 	orrne.w	r3, r3, #2
   29ac6:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   29ac8:	f003 000f 	andne.w	r0, r3, #15
}
   29acc:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   29ace:	428c      	cmp	r4, r1
	parent->next = child;
   29ad0:	602a      	str	r2, [r5, #0]
	list->tail = node;
   29ad2:	bf08      	it	eq
   29ad4:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   29ad8:	e7ed      	b.n	29ab6 <cancel_async_locked+0x38>
	return node->next;
   29ada:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29adc:	6812      	ldr	r2, [r2, #0]
   29ade:	e7dd      	b.n	29a9c <cancel_async_locked+0x1e>

00029ae0 <k_work_submit_to_queue>:
{
   29ae0:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   29ae2:	f7f9 f973 	bl	22dcc <z_work_submit_to_queue>
	if (ret > 0) {
   29ae6:	1e04      	subs	r4, r0, #0
   29ae8:	dd09      	ble.n	29afe <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   29aea:	f04f 0340 	mov.w	r3, #64	; 0x40
   29aee:	f3ef 8011 	mrs	r0, BASEPRI
   29af2:	f383 8812 	msr	BASEPRI_MAX, r3
   29af6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   29afa:	f000 f80d 	bl	29b18 <z_reschedule_irqlock>
}
   29afe:	4620      	mov	r0, r4
   29b00:	bd10      	pop	{r4, pc}

00029b02 <k_work_delayable_busy_get>:
   29b02:	f7f9 b92d 	b.w	22d60 <k_work_busy_get>

00029b06 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   29b06:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   29b0a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   29b0e:	4283      	cmp	r3, r0
		return b2 - b1;
   29b10:	bf14      	ite	ne
   29b12:	1ac0      	subne	r0, r0, r3
	return 0;
   29b14:	2000      	moveq	r0, #0
}
   29b16:	4770      	bx	lr

00029b18 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   29b18:	4603      	mov	r3, r0
   29b1a:	b920      	cbnz	r0, 29b26 <z_reschedule_irqlock+0xe>
   29b1c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   29b20:	b90a      	cbnz	r2, 29b26 <z_reschedule_irqlock+0xe>
   29b22:	f7ea bca5 	b.w	14470 <arch_swap>
	__asm__ volatile(
   29b26:	f383 8811 	msr	BASEPRI, r3
   29b2a:	f3bf 8f6f 	isb	sy
}
   29b2e:	4770      	bx	lr

00029b30 <z_reschedule_unlocked>:
	__asm__ volatile(
   29b30:	f04f 0340 	mov.w	r3, #64	; 0x40
   29b34:	f3ef 8011 	mrs	r0, BASEPRI
   29b38:	f383 8812 	msr	BASEPRI_MAX, r3
   29b3c:	f3bf 8f6f 	isb	sy
   29b40:	f7ff bfea 	b.w	29b18 <z_reschedule_irqlock>

00029b44 <z_priq_dumb_best>:
{
   29b44:	4603      	mov	r3, r0
	return list->head == list;
   29b46:	6800      	ldr	r0, [r0, #0]
}
   29b48:	4283      	cmp	r3, r0
   29b4a:	bf08      	it	eq
   29b4c:	2000      	moveq	r0, #0
   29b4e:	4770      	bx	lr

00029b50 <z_unpend_all>:
{
   29b50:	b538      	push	{r3, r4, r5, lr}
   29b52:	4605      	mov	r5, r0
	int need_sched = 0;
   29b54:	2000      	movs	r0, #0
   29b56:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29b58:	42a5      	cmp	r5, r4
   29b5a:	d000      	beq.n	29b5e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   29b5c:	b904      	cbnz	r4, 29b60 <z_unpend_all+0x10>
}
   29b5e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   29b60:	4620      	mov	r0, r4
   29b62:	f7f9 fcef 	bl	23544 <z_unpend_thread>
		z_ready_thread(thread);
   29b66:	4620      	mov	r0, r4
   29b68:	f7f9 fe56 	bl	23818 <z_ready_thread>
		need_sched = 1;
   29b6c:	2001      	movs	r0, #1
   29b6e:	e7f2      	b.n	29b56 <z_unpend_all+0x6>

00029b70 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   29b70:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   29b72:	f7fa fe77 	bl	24864 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   29b76:	bd08      	pop	{r3, pc}

00029b78 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   29b78:	b108      	cbz	r0, 29b7e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   29b7a:	f7eb b94f 	b.w	14e1c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   29b7e:	4770      	bx	lr

00029b80 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29b80:	f1b1 3fff 	cmp.w	r1, #4294967295
   29b84:	bf08      	it	eq
   29b86:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   29b8a:	b538      	push	{r3, r4, r5, lr}
   29b8c:	4605      	mov	r5, r0
   29b8e:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29b90:	d01d      	beq.n	29bce <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   29b92:	ea51 0300 	orrs.w	r3, r1, r0
   29b96:	d103      	bne.n	29ba0 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   29b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   29b9c:	f7fa be62 	b.w	24864 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   29ba0:	f06f 0301 	mvn.w	r3, #1
   29ba4:	1a18      	subs	r0, r3, r0
   29ba6:	f04f 33ff 	mov.w	r3, #4294967295
   29baa:	eb63 0101 	sbc.w	r1, r3, r1
   29bae:	2900      	cmp	r1, #0
   29bb0:	da0c      	bge.n	29bcc <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   29bb2:	f7fa fe57 	bl	24864 <sys_clock_tick_get>
   29bb6:	2d01      	cmp	r5, #1
   29bb8:	4622      	mov	r2, r4
   29bba:	f174 0400 	sbcs.w	r4, r4, #0
   29bbe:	462b      	mov	r3, r5
   29bc0:	bfbc      	itt	lt
   29bc2:	2301      	movlt	r3, #1
   29bc4:	2200      	movlt	r2, #0
   29bc6:	1818      	adds	r0, r3, r0
   29bc8:	eb41 0102 	adc.w	r1, r1, r2
}
   29bcc:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   29bce:	f04f 30ff 	mov.w	r0, #4294967295
   29bd2:	4601      	mov	r1, r0
   29bd4:	e7fa      	b.n	29bcc <sys_clock_timeout_end_calc+0x4c>

00029bd6 <add_event>:
{
   29bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29bd8:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   29bda:	e9d0 1300 	ldrd	r1, r3, [r0]
   29bde:	4288      	cmp	r0, r1
   29be0:	4604      	mov	r4, r0
   29be2:	d00d      	beq.n	29c00 <add_event+0x2a>
	if ((pending == NULL) ||
   29be4:	b163      	cbz	r3, 29c00 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29be6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29be8:	b100      	cbz	r0, 29bec <add_event+0x16>
   29bea:	3860      	subs	r0, #96	; 0x60
   29bec:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29bf0:	4639      	mov	r1, r7
   29bf2:	f7ff ff88 	bl	29b06 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   29bf6:	2800      	cmp	r0, #0
   29bf8:	dc02      	bgt.n	29c00 <add_event+0x2a>
	return list->head == list;
   29bfa:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29bfc:	42b4      	cmp	r4, r6
   29bfe:	d109      	bne.n	29c14 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   29c00:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   29c02:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   29c06:	601d      	str	r5, [r3, #0]
	list->tail = node;
   29c08:	6065      	str	r5, [r4, #4]
}
   29c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   29c0c:	6863      	ldr	r3, [r4, #4]
   29c0e:	42b3      	cmp	r3, r6
   29c10:	d0f6      	beq.n	29c00 <add_event+0x2a>
   29c12:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   29c14:	2e00      	cmp	r6, #0
   29c16:	d0f3      	beq.n	29c00 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   29c18:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29c1a:	b101      	cbz	r1, 29c1e <add_event+0x48>
   29c1c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   29c1e:	4638      	mov	r0, r7
   29c20:	f7ff ff71 	bl	29b06 <z_sched_prio_cmp>
   29c24:	2800      	cmp	r0, #0
   29c26:	ddf1      	ble.n	29c0c <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   29c28:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   29c2a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   29c2e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   29c30:	6075      	str	r5, [r6, #4]
			return;
   29c32:	e7ea      	b.n	29c0a <add_event+0x34>

00029c34 <signal_poll_event>:
{
   29c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   29c38:	6884      	ldr	r4, [r0, #8]
{
   29c3a:	4605      	mov	r5, r0
   29c3c:	460e      	mov	r6, r1
	if (poller != NULL) {
   29c3e:	b144      	cbz	r4, 29c52 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   29c40:	7863      	ldrb	r3, [r4, #1]
   29c42:	2b01      	cmp	r3, #1
   29c44:	d136      	bne.n	29cb4 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   29c46:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   29c4a:	f013 0302 	ands.w	r3, r3, #2
   29c4e:	d10a      	bne.n	29c66 <signal_poll_event+0x32>
		poller->is_polling = false;
   29c50:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   29c52:	68eb      	ldr	r3, [r5, #12]
   29c54:	f3c3 3145 	ubfx	r1, r3, #13, #6
   29c58:	430e      	orrs	r6, r1
	event->poller = NULL;
   29c5a:	2000      	movs	r0, #0
	event->state |= state;
   29c5c:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   29c60:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   29c62:	60eb      	str	r3, [r5, #12]
	return retcode;
   29c64:	e00b      	b.n	29c7e <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   29c66:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   29c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
   29c6e:	bf08      	it	eq
   29c70:	f112 0f02 	cmneq.w	r2, #2
   29c74:	d105      	bne.n	29c82 <signal_poll_event+0x4e>
		poller->is_polling = false;
   29c76:	2300      	movs	r3, #0
   29c78:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   29c7a:	f06f 000a 	mvn.w	r0, #10
}
   29c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29c82:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   29c86:	4640      	mov	r0, r8
   29c88:	f7f9 fc5c 	bl	23544 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   29c8c:	2e08      	cmp	r6, #8
   29c8e:	bf0c      	ite	eq
   29c90:	f06f 0303 	mvneq.w	r3, #3
   29c94:	2300      	movne	r3, #0
   29c96:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   29c98:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   29c9c:	06db      	lsls	r3, r3, #27
   29c9e:	d102      	bne.n	29ca6 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   29ca0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   29ca4:	b10f      	cbz	r7, 29caa <signal_poll_event+0x76>
		poller->is_polling = false;
   29ca6:	2300      	movs	r3, #0
   29ca8:	e7d2      	b.n	29c50 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   29caa:	4640      	mov	r0, r8
   29cac:	f7f9 fdb4 	bl	23818 <z_ready_thread>
		poller->is_polling = false;
   29cb0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   29cb2:	e7ce      	b.n	29c52 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   29cb4:	2b02      	cmp	r3, #2
   29cb6:	d1f6      	bne.n	29ca6 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   29cb8:	7823      	ldrb	r3, [r4, #0]
   29cba:	2b00      	cmp	r3, #0
   29cbc:	d0c9      	beq.n	29c52 <signal_poll_event+0x1e>
   29cbe:	f854 7c04 	ldr.w	r7, [r4, #-4]
   29cc2:	2f00      	cmp	r7, #0
   29cc4:	d0f4      	beq.n	29cb0 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   29cc6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   29cca:	f1a4 0914 	sub.w	r9, r4, #20
   29cce:	f104 0014 	add.w	r0, r4, #20
   29cd2:	f7fa fc39 	bl	24548 <z_abort_timeout>
		twork->poll_result = 0;
   29cd6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   29cda:	4649      	mov	r1, r9
   29cdc:	4638      	mov	r0, r7
   29cde:	f7f9 f875 	bl	22dcc <z_work_submit_to_queue>
		poller->is_polling = false;
   29ce2:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   29ce6:	e7b4      	b.n	29c52 <signal_poll_event+0x1e>

00029ce8 <z_handle_obj_poll_events>:
{
   29ce8:	4603      	mov	r3, r0
	return list->head == list;
   29cea:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   29cec:	4283      	cmp	r3, r0
   29cee:	d008      	beq.n	29d02 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   29cf0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   29cf4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29cf6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29cf8:	2300      	movs	r3, #0
	node->prev = NULL;
   29cfa:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   29cfe:	f7ff bf99 	b.w	29c34 <signal_poll_event>
}
   29d02:	4770      	bx	lr

00029d04 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   29d04:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   29d06:	e9c0 0000 	strd	r0, r0, [r0]
   29d0a:	6083      	str	r3, [r0, #8]
}
   29d0c:	4770      	bx	lr

00029d0e <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   29d0e:	2300      	movs	r3, #0
   29d10:	6083      	str	r3, [r0, #8]
}
   29d12:	4770      	bx	lr

00029d14 <k_free>:
	if (ptr != NULL) {
   29d14:	b120      	cbz	r0, 29d20 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   29d16:	1f01      	subs	r1, r0, #4
   29d18:	f850 0c04 	ldr.w	r0, [r0, #-4]
   29d1c:	f7f8 b84c 	b.w	21db8 <k_heap_free>
}
   29d20:	4770      	bx	lr

00029d22 <k_malloc>:
{
   29d22:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   29d24:	2004      	movs	r0, #4
   29d26:	f7fb b8e3 	b.w	24ef0 <k_aligned_alloc>

00029d2a <k_calloc>:
{
   29d2a:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   29d2c:	fba0 5401 	umull	r5, r4, r0, r1
   29d30:	b934      	cbnz	r4, 29d40 <k_calloc+0x16>
	ret = k_malloc(bounds);
   29d32:	4628      	mov	r0, r5
   29d34:	f7ff fff5 	bl	29d22 <k_malloc>
	if (ret != NULL) {
   29d38:	4606      	mov	r6, r0
   29d3a:	b918      	cbnz	r0, 29d44 <k_calloc+0x1a>
}
   29d3c:	4630      	mov	r0, r6
   29d3e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   29d40:	2600      	movs	r6, #0
   29d42:	e7fb      	b.n	29d3c <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   29d44:	462a      	mov	r2, r5
   29d46:	4621      	mov	r1, r4
   29d48:	f7fc ff0e 	bl	26b68 <memset>
   29d4c:	e7f6      	b.n	29d3c <k_calloc+0x12>

00029d4e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   29d4e:	4770      	bx	lr
