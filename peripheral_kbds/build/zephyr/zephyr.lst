
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	c0 61 00 20 e5 47 01 00 67 70 02 00 b9 47 01 00     .a. .G..gp...G..
    1010:	b9 47 01 00 b9 47 01 00 b9 47 01 00 00 00 00 00     .G...G...G......
	...
    102c:	65 42 01 00 b9 47 01 00 00 00 00 00 11 42 01 00     eB...G.......B..
    103c:	b9 47 01 00                                         .G..

00001040 <_irq_vector_table>:
    1040:	15 43 01 00 89 96 02 00 15 43 01 00 15 43 01 00     .C.......C...C..
    1050:	15 43 01 00 15 43 01 00 15 43 01 00 15 43 01 00     .C...C...C...C..
    1060:	51 96 02 00 15 43 01 00 15 43 01 00 6f 96 02 00     Q....C...C..o...
    1070:	15 43 01 00 15 43 01 00 15 43 01 00 15 43 01 00     .C...C...C...C..
    1080:	15 43 01 00 15 43 01 00 15 43 01 00 15 43 01 00     .C...C...C...C..
    1090:	15 43 01 00 15 43 01 00 15 43 01 00 15 43 01 00     .C...C...C...C..
    10a0:	15 43 01 00 15 43 01 00 15 43 01 00 15 43 01 00     .C...C...C...C..
    10b0:	15 43 01 00 15 43 01 00 15 43 01 00 15 43 01 00     .C...C...C...C..
    10c0:	15 43 01 00 15 43 01 00 15 43 01 00 15 43 01 00     .C...C...C...C..
    10d0:	15 43 01 00 15 43 01 00 15 43 01 00 15 43 01 00     .C...C...C...C..
    10e0:	15 43 01 00 15 43 01 00 15 43 01 00 15 43 01 00     .C...C...C...C..
    10f0:	15 43 01 00 15 43 01 00 15 43 01 00 15 43 01 00     .C...C...C...C..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295
    1110:	f04f 30ff 	movne.w	r0, #4294967295
    1114:	f000 b80c 	b.w	1130 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f00b fe54 	bl	cdcc <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__aeabi_idiv0>:
    1130:	4770      	bx	lr
    1132:	bf00      	nop

00001134 <ocrypto_bigint_add256>:
    1134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    113c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1140:	185b      	adds	r3, r3, r1
    1142:	eb54 040c 	adcs.w	r4, r4, ip
    1146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    114a:	414d      	adcs	r5, r1
    114c:	eb56 060c 	adcs.w	r6, r6, ip
    1150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1154:	414f      	adcs	r7, r1
    1156:	eb58 080c 	adcs.w	r8, r8, ip
    115a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    115e:	eb59 0901 	adcs.w	r9, r9, r1
    1162:	eb5a 0a0c 	adcs.w	sl, sl, ip
    1166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    116a:	4180      	sbcs	r0, r0
    116c:	3001      	adds	r0, #1
    116e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1172:	4770      	bx	lr

00001174 <ocrypto_bigint_sub256>:
    1174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    117c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1180:	1a5b      	subs	r3, r3, r1
    1182:	eb74 040c 	sbcs.w	r4, r4, ip
    1186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    118a:	418d      	sbcs	r5, r1
    118c:	eb76 060c 	sbcs.w	r6, r6, ip
    1190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1194:	418f      	sbcs	r7, r1
    1196:	eb78 080c 	sbcs.w	r8, r8, ip
    119a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    119e:	eb79 0901 	sbcs.w	r9, r9, r1
    11a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    11a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    11aa:	4180      	sbcs	r0, r0
    11ac:	4240      	negs	r0, r0
    11ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11b2:	4770      	bx	lr

000011b4 <ocrypto_bigint_cadd256>:
    11b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11b8:	4252      	negs	r2, r2
    11ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    11be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    11c2:	4017      	ands	r7, r2
    11c4:	19db      	adds	r3, r3, r7
    11c6:	ea18 0802 	ands.w	r8, r8, r2
    11ca:	eb54 0408 	adcs.w	r4, r4, r8
    11ce:	ea19 0902 	ands.w	r9, r9, r2
    11d2:	eb55 0509 	adcs.w	r5, r5, r9
    11d6:	ea1a 0a02 	ands.w	sl, sl, r2
    11da:	eb56 060a 	adcs.w	r6, r6, sl
    11de:	c078      	stmia	r0!, {r3, r4, r5, r6}
    11e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    11e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    11e8:	4017      	ands	r7, r2
    11ea:	417b      	adcs	r3, r7
    11ec:	ea18 0802 	ands.w	r8, r8, r2
    11f0:	eb54 0408 	adcs.w	r4, r4, r8
    11f4:	ea19 0902 	ands.w	r9, r9, r2
    11f8:	eb55 0509 	adcs.w	r5, r5, r9
    11fc:	ea1a 0a02 	ands.w	sl, sl, r2
    1200:	eb56 060a 	adcs.w	r6, r6, sl
    1204:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1206:	4180      	sbcs	r0, r0
    1208:	3001      	adds	r0, #1
    120a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    120e:	4770      	bx	lr

00001210 <ocrypto_bigint_csub256>:
    1210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1214:	4252      	negs	r2, r2
    1216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    121a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    121e:	4017      	ands	r7, r2
    1220:	1bdb      	subs	r3, r3, r7
    1222:	ea18 0802 	ands.w	r8, r8, r2
    1226:	eb74 0408 	sbcs.w	r4, r4, r8
    122a:	ea19 0902 	ands.w	r9, r9, r2
    122e:	eb75 0509 	sbcs.w	r5, r5, r9
    1232:	ea1a 0a02 	ands.w	sl, sl, r2
    1236:	eb76 060a 	sbcs.w	r6, r6, sl
    123a:	c078      	stmia	r0!, {r3, r4, r5, r6}
    123c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    1240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    1244:	4017      	ands	r7, r2
    1246:	41bb      	sbcs	r3, r7
    1248:	ea18 0802 	ands.w	r8, r8, r2
    124c:	eb74 0408 	sbcs.w	r4, r4, r8
    1250:	ea19 0902 	ands.w	r9, r9, r2
    1254:	eb75 0509 	sbcs.w	r5, r5, r9
    1258:	ea1a 0a02 	ands.w	sl, sl, r2
    125c:	eb76 060a 	sbcs.w	r6, r6, sl
    1260:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1262:	4180      	sbcs	r0, r0
    1264:	4240      	negs	r0, r0
    1266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    126a:	4770      	bx	lr

0000126c <ocrypto_bigint_cswap256>:
    126c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    1270:	4252      	negs	r2, r2
    1272:	f04f 0804 	mov.w	r8, #4

00001276 <cswap256_loop>:
    1276:	e890 0030 	ldmia.w	r0, {r4, r5}
    127a:	e891 00c0 	ldmia.w	r1, {r6, r7}
    127e:	1ba3      	subs	r3, r4, r6
    1280:	4013      	ands	r3, r2
    1282:	1ae4      	subs	r4, r4, r3
    1284:	18f6      	adds	r6, r6, r3
    1286:	1beb      	subs	r3, r5, r7
    1288:	4013      	ands	r3, r2
    128a:	1aed      	subs	r5, r5, r3
    128c:	18ff      	adds	r7, r7, r3
    128e:	c030      	stmia	r0!, {r4, r5}
    1290:	c1c0      	stmia	r1!, {r6, r7}
    1292:	f1b8 0801 	subs.w	r8, r8, #1
    1296:	d1ee      	bne.n	1276 <cswap256_loop>
    1298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    129c:	4770      	bx	lr
    129e:	bf00      	nop

000012a0 <ocrypto_mul256_noframe>:
    12a0:	b500      	push	{lr}
    12a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
    12a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
    12aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
    12ae:	b402      	push	{r1}
    12b0:	fba7 5102 	umull	r5, r1, r7, r2
    12b4:	950a      	str	r5, [sp, #40]	; 0x28
    12b6:	fba8 0b02 	umull	r0, fp, r8, r2
    12ba:	fbe7 1063 	umaal	r1, r0, r7, r3
    12be:	fbe9 b062 	umaal	fp, r0, r9, r2
    12c2:	910b      	str	r1, [sp, #44]	; 0x2c
    12c4:	fba8 5103 	umull	r5, r1, r8, r3
    12c8:	fbea 0162 	umaal	r0, r1, sl, r2
    12cc:	fbe7 b564 	umaal	fp, r5, r7, r4
    12d0:	fbe7 0566 	umaal	r0, r5, r7, r6
    12d4:	fbe8 1566 	umaal	r1, r5, r8, r6
    12d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    12dc:	fba9 b603 	umull	fp, r6, r9, r3
    12e0:	fbea 1663 	umaal	r1, r6, sl, r3
    12e4:	fbec 5663 	umaal	r5, r6, ip, r3
    12e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
    12ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
    12f0:	fbea 5b64 	umaal	r5, fp, sl, r4
    12f4:	fbec 6b64 	umaal	r6, fp, ip, r4
    12f8:	900d      	str	r0, [sp, #52]	; 0x34
    12fa:	fbac 3002 	umull	r3, r0, ip, r2
    12fe:	9c05      	ldr	r4, [sp, #20]
    1300:	fbee 5062 	umaal	r5, r0, lr, r2
    1304:	fbe9 6064 	umaal	r6, r0, r9, r4
    1308:	fbea b064 	umaal	fp, r0, sl, r4
    130c:	fbe7 3164 	umaal	r3, r1, r7, r4
    1310:	fbe8 5164 	umaal	r5, r1, r8, r4
    1314:	9c06      	ldr	r4, [sp, #24]
    1316:	fbe8 6164 	umaal	r6, r1, r8, r4
    131a:	fbe9 b164 	umaal	fp, r1, r9, r4
    131e:	fbea 0164 	umaal	r0, r1, sl, r4
    1322:	930e      	str	r3, [sp, #56]	; 0x38
    1324:	fba7 3204 	umull	r3, r2, r7, r4
    1328:	9c07      	ldr	r4, [sp, #28]
    132a:	fbe7 6264 	umaal	r6, r2, r7, r4
    132e:	fbe8 b264 	umaal	fp, r2, r8, r4
    1332:	fbe9 0264 	umaal	r0, r2, r9, r4
    1336:	fbea 1264 	umaal	r1, r2, sl, r4
    133a:	9c04      	ldr	r4, [sp, #16]
    133c:	fbe9 5364 	umaal	r5, r3, r9, r4
    1340:	fbea 6364 	umaal	r6, r3, sl, r4
    1344:	9c08      	ldr	r4, [sp, #32]
    1346:	fbe7 b364 	umaal	fp, r3, r7, r4
    134a:	fbe8 0364 	umaal	r0, r3, r8, r4
    134e:	fbe9 1364 	umaal	r1, r3, r9, r4
    1352:	fbea 2364 	umaal	r2, r3, sl, r4
    1356:	950f      	str	r5, [sp, #60]	; 0x3c
    1358:	f85d 9b04 	ldr.w	r9, [sp], #4
    135c:	e899 0600 	ldmia.w	r9, {r9, sl}
    1360:	f8dd 8000 	ldr.w	r8, [sp]
    1364:	fba9 5408 	umull	r5, r4, r9, r8
    1368:	fbea b468 	umaal	fp, r4, sl, r8
    136c:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1370:	fbec 0468 	umaal	r0, r4, ip, r8
    1374:	fbee 1468 	umaal	r1, r4, lr, r8
    1378:	fbe9 2468 	umaal	r2, r4, r9, r8
    137c:	fbea 3468 	umaal	r3, r4, sl, r8
    1380:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1384:	fbee 6568 	umaal	r6, r5, lr, r8
    1388:	fbe9 b568 	umaal	fp, r5, r9, r8
    138c:	fbea 0568 	umaal	r0, r5, sl, r8
    1390:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1394:	fbec 1568 	umaal	r1, r5, ip, r8
    1398:	fbee 2568 	umaal	r2, r5, lr, r8
    139c:	fbe9 3568 	umaal	r3, r5, r9, r8
    13a0:	fbea 4568 	umaal	r4, r5, sl, r8
    13a4:	960f      	str	r6, [sp, #60]	; 0x3c
    13a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
    13aa:	fbae 7608 	umull	r7, r6, lr, r8
    13ae:	fbe9 0668 	umaal	r0, r6, r9, r8
    13b2:	fbea 1668 	umaal	r1, r6, sl, r8
    13b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
    13ba:	fbec 2668 	umaal	r2, r6, ip, r8
    13be:	fbee 3668 	umaal	r3, r6, lr, r8
    13c2:	fbe9 4668 	umaal	r4, r6, r9, r8
    13c6:	fbea 5668 	umaal	r5, r6, sl, r8
    13ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
    13ce:	fbec b768 	umaal	fp, r7, ip, r8
    13d2:	fbee 0768 	umaal	r0, r7, lr, r8
    13d6:	fbe9 1768 	umaal	r1, r7, r9, r8
    13da:	fbea 2768 	umaal	r2, r7, sl, r8
    13de:	f8dd 801c 	ldr.w	r8, [sp, #28]
    13e2:	fbec 3768 	umaal	r3, r7, ip, r8
    13e6:	fbee 4768 	umaal	r4, r7, lr, r8
    13ea:	fbe9 5768 	umaal	r5, r7, r9, r8
    13ee:	fbea 6768 	umaal	r6, r7, sl, r8
    13f2:	b008      	add	sp, #32
    13f4:	bd00      	pop	{pc}
    13f6:	bf00      	nop

000013f8 <ocrypto_bigint_mul256>:
    13f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13fc:	b087      	sub	sp, #28
    13fe:	f7ff ff4f 	bl	12a0 <ocrypto_mul256_noframe>
    1402:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1406:	f108 0820 	add.w	r8, r8, #32
    140a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    140e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    1410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    1414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001418 <ocrypto_sqr256_noframe>:
    1418:	b500      	push	{lr}
    141a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
    141e:	fba3 5203 	umull	r5, r2, r3, r3
    1422:	9501      	str	r5, [sp, #4]
    1424:	fba3 0104 	umull	r0, r1, r3, r4
    1428:	fbe3 2064 	umaal	r2, r0, r3, r4
    142c:	fbe3 1067 	umaal	r1, r0, r3, r7
    1430:	9202      	str	r2, [sp, #8]
    1432:	fba3 5207 	umull	r5, r2, r3, r7
    1436:	fbe3 0268 	umaal	r0, r2, r3, r8
    143a:	fbe4 1564 	umaal	r1, r5, r4, r4
    143e:	fbe3 0568 	umaal	r0, r5, r3, r8
    1442:	fbe3 2569 	umaal	r2, r5, r3, r9
    1446:	9103      	str	r1, [sp, #12]
    1448:	fba4 b607 	umull	fp, r6, r4, r7
    144c:	fbe3 2669 	umaal	r2, r6, r3, r9
    1450:	fbe3 566a 	umaal	r5, r6, r3, sl
    1454:	fbe4 0b67 	umaal	r0, fp, r4, r7
    1458:	fbe4 2b68 	umaal	r2, fp, r4, r8
    145c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
    1460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
    1464:	9004      	str	r0, [sp, #16]
    1466:	fba4 1008 	umull	r1, r0, r4, r8
    146a:	fbe4 5069 	umaal	r5, r0, r4, r9
    146e:	fbe3 606c 	umaal	r6, r0, r3, ip
    1472:	fbe3 b06e 	umaal	fp, r0, r3, lr
    1476:	fbe7 2167 	umaal	r2, r1, r7, r7
    147a:	fbe4 5169 	umaal	r5, r1, r4, r9
    147e:	fbe4 616a 	umaal	r6, r1, r4, sl
    1482:	fbe3 b16e 	umaal	fp, r1, r3, lr
    1486:	fbe4 016e 	umaal	r0, r1, r4, lr
    148a:	9205      	str	r2, [sp, #20]
    148c:	fba7 3208 	umull	r3, r2, r7, r8
    1490:	fbe4 626a 	umaal	r6, r2, r4, sl
    1494:	fbe4 b26c 	umaal	fp, r2, r4, ip
    1498:	fbe4 026e 	umaal	r0, r2, r4, lr
    149c:	fbe7 126e 	umaal	r1, r2, r7, lr
    14a0:	fbe7 5368 	umaal	r5, r3, r7, r8
    14a4:	fbe7 6369 	umaal	r6, r3, r7, r9
    14a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
    14ac:	fbe7 036c 	umaal	r0, r3, r7, ip
    14b0:	fbe7 136e 	umaal	r1, r3, r7, lr
    14b4:	fbe8 236e 	umaal	r2, r3, r8, lr
    14b8:	9506      	str	r5, [sp, #24]
    14ba:	fba7 5409 	umull	r5, r4, r7, r9
    14be:	fbe7 b46a 	umaal	fp, r4, r7, sl
    14c2:	fbe7 046c 	umaal	r0, r4, r7, ip
    14c6:	fbe8 146c 	umaal	r1, r4, r8, ip
    14ca:	fbe8 246e 	umaal	r2, r4, r8, lr
    14ce:	fbe9 346e 	umaal	r3, r4, r9, lr
    14d2:	fbe8 6568 	umaal	r6, r5, r8, r8
    14d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
    14da:	fbe8 056a 	umaal	r0, r5, r8, sl
    14de:	fbe8 156c 	umaal	r1, r5, r8, ip
    14e2:	fbe9 256c 	umaal	r2, r5, r9, ip
    14e6:	fbe9 356e 	umaal	r3, r5, r9, lr
    14ea:	fbea 456e 	umaal	r4, r5, sl, lr
    14ee:	9607      	str	r6, [sp, #28]
    14f0:	fba8 7609 	umull	r7, r6, r8, r9
    14f4:	fbe8 066a 	umaal	r0, r6, r8, sl
    14f8:	fbe9 166a 	umaal	r1, r6, r9, sl
    14fc:	fbe9 266c 	umaal	r2, r6, r9, ip
    1500:	fbea 366c 	umaal	r3, r6, sl, ip
    1504:	fbea 466e 	umaal	r4, r6, sl, lr
    1508:	fbec 566e 	umaal	r5, r6, ip, lr
    150c:	fbe8 b769 	umaal	fp, r7, r8, r9
    1510:	fbe9 0769 	umaal	r0, r7, r9, r9
    1514:	fbe9 176a 	umaal	r1, r7, r9, sl
    1518:	fbea 276a 	umaal	r2, r7, sl, sl
    151c:	fbea 376c 	umaal	r3, r7, sl, ip
    1520:	fbec 476c 	umaal	r4, r7, ip, ip
    1524:	fbec 576e 	umaal	r5, r7, ip, lr
    1528:	fbee 676e 	umaal	r6, r7, lr, lr
    152c:	bd00      	pop	{pc}
    152e:	bf00      	nop

00001530 <ocrypto_bigint_sqr256>:
    1530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1534:	b087      	sub	sp, #28
    1536:	f7ff ff6f 	bl	1418 <ocrypto_sqr256_noframe>
    153a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    153e:	f108 0820 	add.w	r8, r8, #32
    1542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    1548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    154c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001550 <ocrypto_constant_time_equal>:
    1550:	b430      	push	{r4, r5}
    1552:	f04f 0300 	mov.w	r3, #0

00001556 <constant_time_equal_loop>:
    1556:	f810 4b01 	ldrb.w	r4, [r0], #1
    155a:	f811 5b01 	ldrb.w	r5, [r1], #1
    155e:	3a01      	subs	r2, #1
    1560:	ea84 0405 	eor.w	r4, r4, r5
    1564:	ea43 0304 	orr.w	r3, r3, r4
    1568:	d1f5      	bne.n	1556 <constant_time_equal_loop>
    156a:	f1a3 0301 	sub.w	r3, r3, #1
    156e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    1572:	bc30      	pop	{r4, r5}
    1574:	4770      	bx	lr
    1576:	bf00      	nop

00001578 <ocrypto_constant_time_is_zero>:
    1578:	f04f 0300 	mov.w	r3, #0

0000157c <constant_time_is_zero_loop>:
    157c:	f810 2b01 	ldrb.w	r2, [r0], #1
    1580:	3901      	subs	r1, #1
    1582:	ea43 0302 	orr.w	r3, r3, r2
    1586:	d1f9      	bne.n	157c <constant_time_is_zero_loop>
    1588:	f1a3 0301 	sub.w	r3, r3, #1
    158c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    1590:	4770      	bx	lr
    1592:	bf00      	nop

00001594 <ocrypto_constant_time_xor>:
    1594:	b430      	push	{r4, r5}

00001596 <constant_time_xor_loop>:
    1596:	f811 4b01 	ldrb.w	r4, [r1], #1
    159a:	f812 5b01 	ldrb.w	r5, [r2], #1
    159e:	406c      	eors	r4, r5
    15a0:	f800 4b01 	strb.w	r4, [r0], #1
    15a4:	3b01      	subs	r3, #1
    15a6:	d1f6      	bne.n	1596 <constant_time_xor_loop>
    15a8:	bc30      	pop	{r4, r5}
    15aa:	4770      	bx	lr

000015ac <ocrypto_mod_p256_add>:
    15ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    15b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    15b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15b8:	185b      	adds	r3, r3, r1
    15ba:	eb54 040c 	adcs.w	r4, r4, ip
    15be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15c2:	414d      	adcs	r5, r1
    15c4:	eb56 060c 	adcs.w	r6, r6, ip
    15c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15cc:	414f      	adcs	r7, r1
    15ce:	eb58 080c 	adcs.w	r8, r8, ip
    15d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15d6:	eb59 0901 	adcs.w	r9, r9, r1
    15da:	eb5a 0a0c 	adcs.w	sl, sl, ip
    15de:	4189      	sbcs	r1, r1
    15e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    15e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    15e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    15ec:	f176 0600 	sbcs.w	r6, r6, #0
    15f0:	f177 0700 	sbcs.w	r7, r7, #0
    15f4:	f178 0800 	sbcs.w	r8, r8, #0
    15f8:	f179 0901 	sbcs.w	r9, r9, #1
    15fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    1600:	f151 0100 	adcs.w	r1, r1, #0
    1604:	185b      	adds	r3, r3, r1
    1606:	414c      	adcs	r4, r1
    1608:	414d      	adcs	r5, r1
    160a:	f156 0600 	adcs.w	r6, r6, #0
    160e:	f157 0700 	adcs.w	r7, r7, #0
    1612:	f158 0800 	adcs.w	r8, r8, #0
    1616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    161a:	eb5a 0a01 	adcs.w	sl, sl, r1
    161e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    1622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1626:	4770      	bx	lr

00001628 <ocrypto_mod_p256_sub>:
    1628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    162c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    1630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1634:	1a5b      	subs	r3, r3, r1
    1636:	eb74 040c 	sbcs.w	r4, r4, ip
    163a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    163e:	418d      	sbcs	r5, r1
    1640:	eb76 060c 	sbcs.w	r6, r6, ip
    1644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1648:	418f      	sbcs	r7, r1
    164a:	eb78 080c 	sbcs.w	r8, r8, ip
    164e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1652:	eb79 0901 	sbcs.w	r9, r9, r1
    1656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    165a:	4189      	sbcs	r1, r1
    165c:	185b      	adds	r3, r3, r1
    165e:	414c      	adcs	r4, r1
    1660:	414d      	adcs	r5, r1
    1662:	f156 0600 	adcs.w	r6, r6, #0
    1666:	f157 0700 	adcs.w	r7, r7, #0
    166a:	f158 0800 	adcs.w	r8, r8, #0
    166e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    1672:	eb5a 0a01 	adcs.w	sl, sl, r1
    1676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    167a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    167e:	4770      	bx	lr

00001680 <mul_reduce>:
    1680:	eb18 0804 	adds.w	r8, r8, r4
    1684:	eb59 0905 	adcs.w	r9, r9, r5
    1688:	eb5a 0a06 	adcs.w	sl, sl, r6
    168c:	eb5b 0b07 	adcs.w	fp, fp, r7
    1690:	f05f 0c00 	movs.w	ip, #0
    1694:	f14c 0c00 	adc.w	ip, ip, #0
    1698:	eb18 0805 	adds.w	r8, r8, r5
    169c:	eb59 0906 	adcs.w	r9, r9, r6
    16a0:	eb5a 0a07 	adcs.w	sl, sl, r7
    16a4:	eb5b 0b07 	adcs.w	fp, fp, r7
    16a8:	eb50 000c 	adcs.w	r0, r0, ip
    16ac:	f05f 0c00 	movs.w	ip, #0
    16b0:	eb51 010c 	adcs.w	r1, r1, ip
    16b4:	eb52 020c 	adcs.w	r2, r2, ip
    16b8:	4163      	adcs	r3, r4
    16ba:	f14c 0c00 	adc.w	ip, ip, #0
    16be:	ebb8 0807 	subs.w	r8, r8, r7
    16c2:	f179 0900 	sbcs.w	r9, r9, #0
    16c6:	f17a 0a00 	sbcs.w	sl, sl, #0
    16ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
    16ce:	41a8      	sbcs	r0, r5
    16d0:	41b1      	sbcs	r1, r6
    16d2:	41a2      	sbcs	r2, r4
    16d4:	41b3      	sbcs	r3, r6
    16d6:	f16c 0c00 	sbc.w	ip, ip, #0
    16da:	ebbb 0b05 	subs.w	fp, fp, r5
    16de:	41b0      	sbcs	r0, r6
    16e0:	41b9      	sbcs	r1, r7
    16e2:	41aa      	sbcs	r2, r5
    16e4:	41bb      	sbcs	r3, r7
    16e6:	f16c 0c00 	sbc.w	ip, ip, #0
    16ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    16ee:	ebb8 0804 	subs.w	r8, r8, r4
    16f2:	eb79 0904 	sbcs.w	r9, r9, r4
    16f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
    16fa:	f17b 0b00 	sbcs.w	fp, fp, #0
    16fe:	f170 0000 	sbcs.w	r0, r0, #0
    1702:	f171 0100 	sbcs.w	r1, r1, #0
    1706:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    170a:	41a3      	sbcs	r3, r4
    170c:	f16c 0c00 	sbc.w	ip, ip, #0
    1710:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    1714:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    1718:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    171c:	f15b 0b00 	adcs.w	fp, fp, #0
    1720:	f150 0400 	adcs.w	r4, r0, #0
    1724:	f151 0500 	adcs.w	r5, r1, #0
    1728:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    172c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    1730:	f14c 0c00 	adc.w	ip, ip, #0
    1734:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    1738:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    173c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    1740:	f15b 0300 	adcs.w	r3, fp, #0
    1744:	f154 0400 	adcs.w	r4, r4, #0
    1748:	f155 0500 	adcs.w	r5, r5, #0
    174c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    1750:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    1754:	4770      	bx	lr
    1756:	bf00      	nop

00001758 <ocrypto_mod_p256_mul>:
    1758:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    175c:	b087      	sub	sp, #28
    175e:	f7ff fd9f 	bl	12a0 <ocrypto_mul256_noframe>
    1762:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1766:	f8dd 9014 	ldr.w	r9, [sp, #20]
    176a:	f8dd a018 	ldr.w	sl, [sp, #24]
    176e:	f7ff ff87 	bl	1680 <mul_reduce>
    1772:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    1776:	f7ff ff83 	bl	1680 <mul_reduce>
    177a:	b003      	add	sp, #12
    177c:	f85d 8b04 	ldr.w	r8, [sp], #4
    1780:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001788 <ocrypto_mod_p256_sqr>:
    1788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    178c:	b087      	sub	sp, #28
    178e:	f7ff fe43 	bl	1418 <ocrypto_sqr256_noframe>
    1792:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1796:	f8dd 9014 	ldr.w	r9, [sp, #20]
    179a:	f8dd a018 	ldr.w	sl, [sp, #24]
    179e:	f7ff ff6f 	bl	1680 <mul_reduce>
    17a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    17a6:	f7ff ff6b 	bl	1680 <mul_reduce>
    17aa:	b003      	add	sp, #12
    17ac:	f85d 8b04 	ldr.w	r8, [sp], #4
    17b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    17b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000017b8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    17b8:	4801      	ldr	r0, [pc, #4]	; (17c0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    17ba:	7800      	ldrb	r0, [r0, #0]
    17bc:	4770      	bx	lr
    17be:	0000      	.short	0x0000
    17c0:	20000028 	.word	0x20000028

000017c4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    17c4:	b570      	push	{r4, r5, r6, lr}
    17c6:	f00b ffdd 	bl	d784 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    17ca:	4c13      	ldr	r4, [pc, #76]	; (1818 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>)
    17cc:	f06f 0527 	mvn.w	r5, #39	; 0x27
    17d0:	b928      	cbnz	r0, 17de <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
    17d2:	f00c f80d 	bl	d7f0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    17d6:	b910      	cbnz	r0, 17de <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
    17d8:	f00c f814 	bl	d804 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    17dc:	b120      	cbz	r0, 17e8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    17de:	480f      	ldr	r0, [pc, #60]	; (181c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
    17e0:	6060      	str	r0, [r4, #4]
    17e2:	7065      	strb	r5, [r4, #1]
    17e4:	2008      	movs	r0, #8
    17e6:	e010      	b.n	180a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    17e8:	f00b ffa1 	bl	d72e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    17ec:	b940      	cbnz	r0, 1800 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
    17ee:	f00b ffa8 	bl	d742 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    17f2:	b928      	cbnz	r0, 1800 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
    17f4:	f00b ffbc 	bl	d770 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    17f8:	b910      	cbnz	r0, 1800 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
    17fa:	f00b ffcd 	bl	d798 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    17fe:	b130      	cbz	r0, 180e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x4a>
    1800:	4806      	ldr	r0, [pc, #24]	; (181c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
    1802:	3031      	adds	r0, #49	; 0x31
    1804:	6060      	str	r0, [r4, #4]
    1806:	7065      	strb	r5, [r4, #1]
    1808:	2004      	movs	r0, #4
    180a:	70a0      	strb	r0, [r4, #2]
    180c:	bd70      	pop	{r4, r5, r6, pc}
    180e:	21e8      	movs	r1, #232	; 0xe8
    1810:	2074      	movs	r0, #116	; 0x74
    1812:	f003 fbbf 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1816:	0000      	.short	0x0000
    1818:	20000028 	.word	0x20000028
    181c:	0001162c 	.word	0x0001162c

00001820 <mpsl_tx_power_radio_supported_power_adjust>:
    1820:	4907      	ldr	r1, [pc, #28]	; (1840 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    1822:	f991 2002 	ldrsb.w	r2, [r1, #2]
    1826:	4290      	cmp	r0, r2
    1828:	da03      	bge.n	1832 <mpsl_tx_power_radio_supported_power_adjust+0x12>
    182a:	f991 2001 	ldrsb.w	r2, [r1, #1]
    182e:	4290      	cmp	r0, r2
    1830:	dc01      	bgt.n	1836 <mpsl_tx_power_radio_supported_power_adjust+0x16>
    1832:	4610      	mov	r0, r2
    1834:	4770      	bx	lr
    1836:	6849      	ldr	r1, [r1, #4]
    1838:	1a80      	subs	r0, r0, r2
    183a:	5608      	ldrsb	r0, [r1, r0]
    183c:	4770      	bx	lr
    183e:	0000      	.short	0x0000
    1840:	20000028 	.word	0x20000028

00001844 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    1844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1848:	461c      	mov	r4, r3
    184a:	4690      	mov	r8, r2
    184c:	460d      	mov	r5, r1
    184e:	4606      	mov	r6, r0
    1850:	f06f 0715 	mvn.w	r7, #21
    1854:	2804      	cmp	r0, #4
    1856:	d804      	bhi.n	1862 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    1858:	b11c      	cbz	r4, 1862 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    185a:	f00b fc0a 	bl	d072 <__udivmoddi4+0x2a6>
    185e:	42a8      	cmp	r0, r5
    1860:	d802      	bhi.n	1868 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    1862:	4638      	mov	r0, r7
    1864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1868:	4805      	ldr	r0, [pc, #20]	; (1880 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    186a:	4642      	mov	r2, r8
    186c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    1870:	b118      	cbz	r0, 187a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    1872:	5740      	ldrsb	r0, [r0, r5]
    1874:	4282      	cmp	r2, r0
    1876:	dd00      	ble.n	187a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    1878:	4602      	mov	r2, r0
    187a:	7022      	strb	r2, [r4, #0]
    187c:	2000      	movs	r0, #0
    187e:	e7f1      	b.n	1864 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    1880:	20000ba0 	.word	0x20000ba0
    1884:	2800      	cmp	r0, #0
    1886:	d019      	beq.n	18bc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x78>
    1888:	7803      	ldrb	r3, [r0, #0]
    188a:	4913      	ldr	r1, [pc, #76]	; (18d8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x94>)
    188c:	4a13      	ldr	r2, [pc, #76]	; (18dc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x98>)
    188e:	b113      	cbz	r3, 1896 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x52>
    1890:	2b01      	cmp	r3, #1
    1892:	d00e      	beq.n	18b2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
    1894:	e011      	b.n	18ba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    1896:	7903      	ldrb	r3, [r0, #4]
    1898:	2b01      	cmp	r3, #1
    189a:	d000      	beq.n	189e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x5a>
    189c:	b96b      	cbnz	r3, 18ba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    189e:	7943      	ldrb	r3, [r0, #5]
    18a0:	b10b      	cbz	r3, 18a6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
    18a2:	2b01      	cmp	r3, #1
    18a4:	d109      	bne.n	18ba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    18a6:	6883      	ldr	r3, [r0, #8]
    18a8:	3b64      	subs	r3, #100	; 0x64
    18aa:	428b      	cmp	r3, r1
    18ac:	d205      	bcs.n	18ba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    18ae:	68c0      	ldr	r0, [r0, #12]
    18b0:	e00e      	b.n	18d0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    18b2:	7903      	ldrb	r3, [r0, #4]
    18b4:	2b01      	cmp	r3, #1
    18b6:	d002      	beq.n	18be <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
    18b8:	b10b      	cbz	r3, 18be <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
    18ba:	2000      	movs	r0, #0
    18bc:	4770      	bx	lr
    18be:	7943      	ldrb	r3, [r0, #5]
    18c0:	b10b      	cbz	r3, 18c6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x82>
    18c2:	2b01      	cmp	r3, #1
    18c4:	d1f9      	bne.n	18ba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    18c6:	68c3      	ldr	r3, [r0, #12]
    18c8:	3b64      	subs	r3, #100	; 0x64
    18ca:	428b      	cmp	r3, r1
    18cc:	d2f5      	bcs.n	18ba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    18ce:	6880      	ldr	r0, [r0, #8]
    18d0:	4290      	cmp	r0, r2
    18d2:	d8f2      	bhi.n	18ba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    18d4:	2001      	movs	r0, #1
    18d6:	4770      	bx	lr
    18d8:	0001863d 	.word	0x0001863d
    18dc:	0f423fff 	.word	0x0f423fff
    18e0:	b510      	push	{r4, lr}
    18e2:	4c05      	ldr	r4, [pc, #20]	; (18f8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb4>)
    18e4:	6820      	ldr	r0, [r4, #0]
    18e6:	b110      	cbz	r0, 18ee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xaa>
    18e8:	4780      	blx	r0
    18ea:	2000      	movs	r0, #0
    18ec:	6020      	str	r0, [r4, #0]
    18ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    18f2:	f002 b8bd 	b.w	3a70 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    18f6:	0000      	.short	0x0000
    18f8:	20000030 	.word	0x20000030

000018fc <mpsl_timeslot_session_open>:
    18fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1900:	460e      	mov	r6, r1
    1902:	0005      	movs	r5, r0
    1904:	d004      	beq.n	1910 <mpsl_timeslot_session_open+0x14>
    1906:	f000 f847 	bl	1998 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    190a:	4607      	mov	r7, r0
    190c:	2400      	movs	r4, #0
    190e:	e00b      	b.n	1928 <mpsl_timeslot_session_open+0x2c>
    1910:	f06f 0015 	mvn.w	r0, #21
    1914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1918:	4620      	mov	r0, r4
    191a:	f000 f843 	bl	19a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    191e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    1922:	b130      	cbz	r0, 1932 <mpsl_timeslot_session_open+0x36>
    1924:	1c64      	adds	r4, r4, #1
    1926:	b2e4      	uxtb	r4, r4
    1928:	42bc      	cmp	r4, r7
    192a:	d3f5      	bcc.n	1918 <mpsl_timeslot_session_open+0x1c>
    192c:	f06f 000b 	mvn.w	r0, #11
    1930:	e7f0      	b.n	1914 <mpsl_timeslot_session_open+0x18>
    1932:	4627      	mov	r7, r4
    1934:	2cff      	cmp	r4, #255	; 0xff
    1936:	d0f9      	beq.n	192c <mpsl_timeslot_session_open+0x30>
    1938:	4620      	mov	r0, r4
    193a:	f000 f833 	bl	19a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    193e:	4604      	mov	r4, r0
    1940:	f00b fd63 	bl	d40a <__udivmoddi4+0x63e>
    1944:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    1948:	4621      	mov	r1, r4
    194a:	4808      	ldr	r0, [pc, #32]	; (196c <mpsl_timeslot_session_open+0x70>)
    194c:	f002 f868 	bl	3a20 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    1950:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1954:	2820      	cmp	r0, #32
    1956:	d006      	beq.n	1966 <mpsl_timeslot_session_open+0x6a>
    1958:	2001      	movs	r0, #1
    195a:	6225      	str	r5, [r4, #32]
    195c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    1960:	7037      	strb	r7, [r6, #0]
    1962:	2000      	movs	r0, #0
    1964:	e7d6      	b.n	1914 <mpsl_timeslot_session_open+0x18>
    1966:	f06f 0022 	mvn.w	r0, #34	; 0x22
    196a:	e7d3      	b.n	1914 <mpsl_timeslot_session_open+0x18>
    196c:	0000d135 	.word	0x0000d135

00001970 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    1970:	b510      	push	{r4, lr}
    1972:	0782      	lsls	r2, r0, #30
    1974:	d002      	beq.n	197c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    1976:	f06f 000d 	mvn.w	r0, #13
    197a:	bd10      	pop	{r4, pc}
    197c:	4a05      	ldr	r2, [pc, #20]	; (1994 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    197e:	7011      	strb	r1, [r2, #0]
    1980:	6050      	str	r0, [r2, #4]
    1982:	b128      	cbz	r0, 1990 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    1984:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1988:	010a      	lsls	r2, r1, #4
    198a:	2100      	movs	r1, #0
    198c:	f00b ffbe 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1990:	2000      	movs	r0, #0
    1992:	bd10      	pop	{r4, pc}
    1994:	20000034 	.word	0x20000034

00001998 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1998:	4801      	ldr	r0, [pc, #4]	; (19a0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    199a:	7800      	ldrb	r0, [r0, #0]
    199c:	4770      	bx	lr
    199e:	0000      	.short	0x0000
    19a0:	20000034 	.word	0x20000034

000019a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    19a4:	4905      	ldr	r1, [pc, #20]	; (19bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    19a6:	780a      	ldrb	r2, [r1, #0]
    19a8:	4290      	cmp	r0, r2
    19aa:	d301      	bcc.n	19b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    19ac:	2000      	movs	r0, #0
    19ae:	4770      	bx	lr
    19b0:	6849      	ldr	r1, [r1, #4]
    19b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    19b6:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    19ba:	4770      	bx	lr
    19bc:	20000034 	.word	0x20000034

000019c0 <MPSL_IRQ_RADIO_Handler>:
    19c0:	490e      	ldr	r1, [pc, #56]	; (19fc <MPSL_IRQ_RADIO_Handler+0x3c>)
    19c2:	b510      	push	{r4, lr}
    19c4:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    19c8:	2820      	cmp	r0, #32
    19ca:	d012      	beq.n	19f2 <MPSL_IRQ_RADIO_Handler+0x32>
    19cc:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    19d0:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    19d4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    19d8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    19dc:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    19e0:	6840      	ldr	r0, [r0, #4]
    19e2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    19e6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    19ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    19ee:	2104      	movs	r1, #4
    19f0:	4710      	bx	r2
    19f2:	f640 0187 	movw	r1, #2183	; 0x887
    19f6:	2070      	movs	r0, #112	; 0x70
    19f8:	f003 facc 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19fc:	20000fb4 	.word	0x20000fb4
    1a00:	b570      	push	{r4, r5, r6, lr}
    1a02:	4605      	mov	r5, r0
    1a04:	2a20      	cmp	r2, #32
    1a06:	d028      	beq.n	1a5a <MPSL_IRQ_RADIO_Handler+0x9a>
    1a08:	4819      	ldr	r0, [pc, #100]	; (1a70 <MPSL_IRQ_RADIO_Handler+0xb0>)
    1a0a:	4c1a      	ldr	r4, [pc, #104]	; (1a74 <MPSL_IRQ_RADIO_Handler+0xb4>)
    1a0c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1a10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a14:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    1a18:	4423      	add	r3, r4
    1a1a:	2920      	cmp	r1, #32
    1a1c:	d022      	beq.n	1a64 <MPSL_IRQ_RADIO_Handler+0xa4>
    1a1e:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1a22:	7840      	ldrb	r0, [r0, #1]
    1a24:	784c      	ldrb	r4, [r1, #1]
    1a26:	7048      	strb	r0, [r1, #1]
    1a28:	4620      	mov	r0, r4
    1a2a:	4601      	mov	r1, r0
    1a2c:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    1a30:	4291      	cmp	r1, r2
    1a32:	7005      	strb	r5, [r0, #0]
    1a34:	7840      	ldrb	r0, [r0, #1]
    1a36:	d1f8      	bne.n	1a2a <MPSL_IRQ_RADIO_Handler+0x6a>
    1a38:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    1a3c:	2a20      	cmp	r2, #32
    1a3e:	bf1a      	itte	ne
    1a40:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1a44:	7054      	strbne	r4, [r2, #1]
    1a46:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    1a4a:	2220      	movs	r2, #32
    1a4c:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    1a50:	f88c 2001 	strb.w	r2, [ip, #1]
    1a54:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    1a58:	bd70      	pop	{r4, r5, r6, pc}
    1a5a:	f240 2192 	movw	r1, #658	; 0x292
    1a5e:	2070      	movs	r0, #112	; 0x70
    1a60:	f003 fa98 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a64:	f893 4020 	ldrb.w	r4, [r3, #32]
    1a68:	7840      	ldrb	r0, [r0, #1]
    1a6a:	f883 0020 	strb.w	r0, [r3, #32]
    1a6e:	e7db      	b.n	1a28 <MPSL_IRQ_RADIO_Handler+0x68>
    1a70:	20000f34 	.word	0x20000f34
    1a74:	20000fb4 	.word	0x20000fb4
    1a78:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a7c:	b085      	sub	sp, #20
    1a7e:	4615      	mov	r5, r2
    1a80:	460c      	mov	r4, r1
    1a82:	f002 f9e3 	bl	3e4c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1a86:	4428      	add	r0, r5
    1a88:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1a8c:	9102      	str	r1, [sp, #8]
    1a8e:	6820      	ldr	r0, [r4, #0]
    1a90:	1a40      	subs	r0, r0, r1
    1a92:	0200      	lsls	r0, r0, #8
    1a94:	17c1      	asrs	r1, r0, #31
    1a96:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a9a:	1200      	asrs	r0, r0, #8
    1a9c:	2800      	cmp	r0, #0
    1a9e:	f300 80f0 	bgt.w	1c82 <MPSL_IRQ_RADIO_Handler+0x2c2>
    1aa2:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1aa6:	48ca      	ldr	r0, [pc, #808]	; (1dd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>)
    1aa8:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    1aac:	4408      	add	r0, r1
    1aae:	9003      	str	r0, [sp, #12]
    1ab0:	f890 5020 	ldrb.w	r5, [r0, #32]
    1ab4:	2020      	movs	r0, #32
    1ab6:	4ec7      	ldr	r6, [pc, #796]	; (1dd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>)
    1ab8:	46ea      	mov	sl, sp
    1aba:	f10d 0904 	add.w	r9, sp, #4
    1abe:	f88d 0000 	strb.w	r0, [sp]
    1ac2:	2d20      	cmp	r5, #32
    1ac4:	bf1c      	itt	ne
    1ac6:	48c4      	ldrne	r0, [pc, #784]	; (1dd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>)
    1ac8:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1acc:	d039      	beq.n	1b42 <MPSL_IRQ_RADIO_Handler+0x182>
    1ace:	bf00      	nop
    1ad0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1ad4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1ad8:	f100 0108 	add.w	r1, r0, #8
    1adc:	68c0      	ldr	r0, [r0, #12]
    1ade:	6827      	ldr	r7, [r4, #0]
    1ae0:	1a38      	subs	r0, r7, r0
    1ae2:	0200      	lsls	r0, r0, #8
    1ae4:	17c2      	asrs	r2, r0, #31
    1ae6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1aea:	1200      	asrs	r0, r0, #8
    1aec:	d429      	bmi.n	1b42 <MPSL_IRQ_RADIO_Handler+0x182>
    1aee:	89e0      	ldrh	r0, [r4, #14]
    1af0:	b300      	cbz	r0, 1b34 <MPSL_IRQ_RADIO_Handler+0x174>
    1af2:	89c8      	ldrh	r0, [r1, #14]
    1af4:	b9f0      	cbnz	r0, 1b34 <MPSL_IRQ_RADIO_Handler+0x174>
    1af6:	6808      	ldr	r0, [r1, #0]
    1af8:	9004      	str	r0, [sp, #16]
    1afa:	f003 f8a1 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1afe:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1b02:	bf08      	it	eq
    1b04:	200d      	moveq	r0, #13
    1b06:	d00b      	beq.n	1b20 <MPSL_IRQ_RADIO_Handler+0x160>
    1b08:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1b0c:	3856      	subs	r0, #86	; 0x56
    1b0e:	bf08      	it	eq
    1b10:	201c      	moveq	r0, #28
    1b12:	d005      	beq.n	1b20 <MPSL_IRQ_RADIO_Handler+0x160>
    1b14:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1b18:	389f      	subs	r0, #159	; 0x9f
    1b1a:	bf14      	ite	ne
    1b1c:	2000      	movne	r0, #0
    1b1e:	2032      	moveq	r0, #50	; 0x32
    1b20:	1c41      	adds	r1, r0, #1
    1b22:	9804      	ldr	r0, [sp, #16]
    1b24:	1a38      	subs	r0, r7, r0
    1b26:	0200      	lsls	r0, r0, #8
    1b28:	17c2      	asrs	r2, r0, #31
    1b2a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b2e:	1200      	asrs	r0, r0, #8
    1b30:	4288      	cmp	r0, r1
    1b32:	db06      	blt.n	1b42 <MPSL_IRQ_RADIO_Handler+0x182>
    1b34:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1b38:	f88a 5000 	strb.w	r5, [sl]
    1b3c:	7845      	ldrb	r5, [r0, #1]
    1b3e:	2d20      	cmp	r5, #32
    1b40:	d1c6      	bne.n	1ad0 <MPSL_IRQ_RADIO_Handler+0x110>
    1b42:	f89a 0000 	ldrb.w	r0, [sl]
    1b46:	f889 0000 	strb.w	r0, [r9]
    1b4a:	2d20      	cmp	r5, #32
    1b4c:	bf1c      	itt	ne
    1b4e:	48a2      	ldrne	r0, [pc, #648]	; (1dd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>)
    1b50:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1b54:	f000 8138 	beq.w	1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1b58:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1b5c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1b60:	6860      	ldr	r0, [r4, #4]
    1b62:	f8d7 8008 	ldr.w	r8, [r7, #8]
    1b66:	f107 0108 	add.w	r1, r7, #8
    1b6a:	eba8 0000 	sub.w	r0, r8, r0
    1b6e:	0200      	lsls	r0, r0, #8
    1b70:	17c2      	asrs	r2, r0, #31
    1b72:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b76:	1200      	asrs	r0, r0, #8
    1b78:	d427      	bmi.n	1bca <MPSL_IRQ_RADIO_Handler+0x20a>
    1b7a:	89c8      	ldrh	r0, [r1, #14]
    1b7c:	2800      	cmp	r0, #0
    1b7e:	f000 8123 	beq.w	1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1b82:	89e0      	ldrh	r0, [r4, #14]
    1b84:	2800      	cmp	r0, #0
    1b86:	f040 811f 	bne.w	1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1b8a:	f8d4 a000 	ldr.w	sl, [r4]
    1b8e:	f003 f857 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1b92:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1b96:	bf08      	it	eq
    1b98:	200d      	moveq	r0, #13
    1b9a:	d00b      	beq.n	1bb4 <MPSL_IRQ_RADIO_Handler+0x1f4>
    1b9c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1ba0:	3856      	subs	r0, #86	; 0x56
    1ba2:	bf08      	it	eq
    1ba4:	201c      	moveq	r0, #28
    1ba6:	d005      	beq.n	1bb4 <MPSL_IRQ_RADIO_Handler+0x1f4>
    1ba8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1bac:	389f      	subs	r0, #159	; 0x9f
    1bae:	bf14      	ite	ne
    1bb0:	2000      	movne	r0, #0
    1bb2:	2032      	moveq	r0, #50	; 0x32
    1bb4:	1c41      	adds	r1, r0, #1
    1bb6:	eba8 000a 	sub.w	r0, r8, sl
    1bba:	0200      	lsls	r0, r0, #8
    1bbc:	17c2      	asrs	r2, r0, #31
    1bbe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1bc2:	1200      	asrs	r0, r0, #8
    1bc4:	4288      	cmp	r0, r1
    1bc6:	f280 80ff 	bge.w	1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1bca:	f889 5000 	strb.w	r5, [r9]
    1bce:	7e39      	ldrb	r1, [r7, #24]
    1bd0:	7c20      	ldrb	r0, [r4, #16]
    1bd2:	4281      	cmp	r1, r0
    1bd4:	d906      	bls.n	1be4 <MPSL_IRQ_RADIO_Handler+0x224>
    1bd6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1bda:	7845      	ldrb	r5, [r0, #1]
    1bdc:	2d20      	cmp	r5, #32
    1bde:	d1bb      	bne.n	1b58 <MPSL_IRQ_RADIO_Handler+0x198>
    1be0:	f000 b8f2 	b.w	1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1be4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1be8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1bec:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1bf0:	8ac1      	ldrh	r1, [r0, #22]
    1bf2:	68c5      	ldr	r5, [r0, #12]
    1bf4:	bbe1      	cbnz	r1, 1c70 <MPSL_IRQ_RADIO_Handler+0x2b0>
    1bf6:	89e1      	ldrh	r1, [r4, #14]
    1bf8:	b3d1      	cbz	r1, 1c70 <MPSL_IRQ_RADIO_Handler+0x2b0>
    1bfa:	6887      	ldr	r7, [r0, #8]
    1bfc:	f003 f820 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1c00:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1c04:	bf08      	it	eq
    1c06:	200d      	moveq	r0, #13
    1c08:	d00b      	beq.n	1c22 <MPSL_IRQ_RADIO_Handler+0x262>
    1c0a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1c0e:	3856      	subs	r0, #86	; 0x56
    1c10:	bf08      	it	eq
    1c12:	201c      	moveq	r0, #28
    1c14:	d005      	beq.n	1c22 <MPSL_IRQ_RADIO_Handler+0x262>
    1c16:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1c1a:	389f      	subs	r0, #159	; 0x9f
    1c1c:	bf14      	ite	ne
    1c1e:	2000      	movne	r0, #0
    1c20:	2032      	moveq	r0, #50	; 0x32
    1c22:	1c41      	adds	r1, r0, #1
    1c24:	1be8      	subs	r0, r5, r7
    1c26:	0200      	lsls	r0, r0, #8
    1c28:	17c2      	asrs	r2, r0, #31
    1c2a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1c2e:	1200      	asrs	r0, r0, #8
    1c30:	4288      	cmp	r0, r1
    1c32:	da1d      	bge.n	1c70 <MPSL_IRQ_RADIO_Handler+0x2b0>
    1c34:	f003 f804 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1c38:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1c3c:	bf08      	it	eq
    1c3e:	200d      	moveq	r0, #13
    1c40:	d00b      	beq.n	1c5a <MPSL_IRQ_RADIO_Handler+0x29a>
    1c42:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1c46:	3856      	subs	r0, #86	; 0x56
    1c48:	bf08      	it	eq
    1c4a:	201c      	moveq	r0, #28
    1c4c:	d005      	beq.n	1c5a <MPSL_IRQ_RADIO_Handler+0x29a>
    1c4e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1c52:	389f      	subs	r0, #159	; 0x9f
    1c54:	bf14      	ite	ne
    1c56:	2000      	movne	r0, #0
    1c58:	2032      	moveq	r0, #50	; 0x32
    1c5a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1c5e:	1c40      	adds	r0, r0, #1
    1c60:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1c64:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    1c68:	6889      	ldr	r1, [r1, #8]
    1c6a:	4408      	add	r0, r1
    1c6c:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    1c70:	9802      	ldr	r0, [sp, #8]
    1c72:	1a28      	subs	r0, r5, r0
    1c74:	0200      	lsls	r0, r0, #8
    1c76:	17c1      	asrs	r1, r0, #31
    1c78:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1c7c:	1200      	asrs	r0, r0, #8
    1c7e:	2800      	cmp	r0, #0
    1c80:	dd03      	ble.n	1c8a <MPSL_IRQ_RADIO_Handler+0x2ca>
    1c82:	b009      	add	sp, #36	; 0x24
    1c84:	2000      	movs	r0, #0
    1c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c8a:	e9d4 1000 	ldrd	r1, r0, [r4]
    1c8e:	1a40      	subs	r0, r0, r1
    1c90:	4428      	add	r0, r5
    1c92:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    1c96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c9a:	e9c4 1000 	strd	r1, r0, [r4]
    1c9e:	9808      	ldr	r0, [sp, #32]
    1ca0:	9004      	str	r0, [sp, #16]
    1ca2:	9803      	ldr	r0, [sp, #12]
    1ca4:	46ea      	mov	sl, sp
    1ca6:	f10d 0804 	add.w	r8, sp, #4
    1caa:	f890 5020 	ldrb.w	r5, [r0, #32]
    1cae:	2020      	movs	r0, #32
    1cb0:	f88d 0000 	strb.w	r0, [sp]
    1cb4:	2d20      	cmp	r5, #32
    1cb6:	d03c      	beq.n	1d32 <MPSL_IRQ_RADIO_Handler+0x372>
    1cb8:	4847      	ldr	r0, [pc, #284]	; (1dd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>)
    1cba:	9904      	ldr	r1, [sp, #16]
    1cbc:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    1cc0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1cc4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1cc8:	f100 0108 	add.w	r1, r0, #8
    1ccc:	68c0      	ldr	r0, [r0, #12]
    1cce:	6827      	ldr	r7, [r4, #0]
    1cd0:	1a38      	subs	r0, r7, r0
    1cd2:	0200      	lsls	r0, r0, #8
    1cd4:	17c2      	asrs	r2, r0, #31
    1cd6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1cda:	1200      	asrs	r0, r0, #8
    1cdc:	d429      	bmi.n	1d32 <MPSL_IRQ_RADIO_Handler+0x372>
    1cde:	89e0      	ldrh	r0, [r4, #14]
    1ce0:	b300      	cbz	r0, 1d24 <MPSL_IRQ_RADIO_Handler+0x364>
    1ce2:	89c8      	ldrh	r0, [r1, #14]
    1ce4:	b9f0      	cbnz	r0, 1d24 <MPSL_IRQ_RADIO_Handler+0x364>
    1ce6:	f8d1 9000 	ldr.w	r9, [r1]
    1cea:	f002 ffa9 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1cee:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1cf2:	bf08      	it	eq
    1cf4:	200d      	moveq	r0, #13
    1cf6:	d00b      	beq.n	1d10 <MPSL_IRQ_RADIO_Handler+0x350>
    1cf8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1cfc:	3856      	subs	r0, #86	; 0x56
    1cfe:	bf08      	it	eq
    1d00:	201c      	moveq	r0, #28
    1d02:	d005      	beq.n	1d10 <MPSL_IRQ_RADIO_Handler+0x350>
    1d04:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1d08:	389f      	subs	r0, #159	; 0x9f
    1d0a:	bf14      	ite	ne
    1d0c:	2000      	movne	r0, #0
    1d0e:	2032      	moveq	r0, #50	; 0x32
    1d10:	1c41      	adds	r1, r0, #1
    1d12:	eba7 0009 	sub.w	r0, r7, r9
    1d16:	0200      	lsls	r0, r0, #8
    1d18:	17c2      	asrs	r2, r0, #31
    1d1a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1d1e:	1200      	asrs	r0, r0, #8
    1d20:	4288      	cmp	r0, r1
    1d22:	db06      	blt.n	1d32 <MPSL_IRQ_RADIO_Handler+0x372>
    1d24:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1d28:	f88a 5000 	strb.w	r5, [sl]
    1d2c:	7845      	ldrb	r5, [r0, #1]
    1d2e:	2d20      	cmp	r5, #32
    1d30:	d1c6      	bne.n	1cc0 <MPSL_IRQ_RADIO_Handler+0x300>
    1d32:	f89a 0000 	ldrb.w	r0, [sl]
    1d36:	f888 0000 	strb.w	r0, [r8]
    1d3a:	9804      	ldr	r0, [sp, #16]
    1d3c:	2d20      	cmp	r5, #32
    1d3e:	bf1c      	itt	ne
    1d40:	4925      	ldrne	r1, [pc, #148]	; (1dd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>)
    1d42:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1d46:	d03f      	beq.n	1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1d48:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1d4c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1d50:	6861      	ldr	r1, [r4, #4]
    1d52:	f8d7 9008 	ldr.w	r9, [r7, #8]
    1d56:	f107 0008 	add.w	r0, r7, #8
    1d5a:	eba9 0101 	sub.w	r1, r9, r1
    1d5e:	0209      	lsls	r1, r1, #8
    1d60:	17ca      	asrs	r2, r1, #31
    1d62:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1d66:	1209      	asrs	r1, r1, #8
    1d68:	d422      	bmi.n	1db0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x64>
    1d6a:	89c0      	ldrh	r0, [r0, #14]
    1d6c:	b360      	cbz	r0, 1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1d6e:	89e0      	ldrh	r0, [r4, #14]
    1d70:	bb50      	cbnz	r0, 1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1d72:	f8d4 a000 	ldr.w	sl, [r4]
    1d76:	f002 ff63 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1d7a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1d7e:	bf08      	it	eq
    1d80:	200d      	moveq	r0, #13
    1d82:	d00b      	beq.n	1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    1d84:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1d88:	3856      	subs	r0, #86	; 0x56
    1d8a:	bf08      	it	eq
    1d8c:	201c      	moveq	r0, #28
    1d8e:	d005      	beq.n	1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    1d90:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1d94:	389f      	subs	r0, #159	; 0x9f
    1d96:	bf14      	ite	ne
    1d98:	2000      	movne	r0, #0
    1d9a:	2032      	moveq	r0, #50	; 0x32
    1d9c:	1c41      	adds	r1, r0, #1
    1d9e:	eba9 000a 	sub.w	r0, r9, sl
    1da2:	0200      	lsls	r0, r0, #8
    1da4:	17c2      	asrs	r2, r0, #31
    1da6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1daa:	1200      	asrs	r0, r0, #8
    1dac:	4288      	cmp	r0, r1
    1dae:	da0b      	bge.n	1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1db0:	f888 5000 	strb.w	r5, [r8]
    1db4:	7e38      	ldrb	r0, [r7, #24]
    1db6:	7c21      	ldrb	r1, [r4, #16]
    1db8:	4288      	cmp	r0, r1
    1dba:	f67f af13 	bls.w	1be4 <MPSL_IRQ_RADIO_Handler+0x224>
    1dbe:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1dc2:	7845      	ldrb	r5, [r0, #1]
    1dc4:	2d20      	cmp	r5, #32
    1dc6:	d1bf      	bne.n	1d48 <MPSL_IRQ_RADIO_Handler+0x388>
    1dc8:	b009      	add	sp, #36	; 0x24
    1dca:	2001      	movs	r0, #1
    1dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dd0:	20000fb4 	.word	0x20000fb4
    1dd4:	20000bb4 	.word	0x20000bb4
    1dd8:	20000f34 	.word	0x20000f34
    1ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1de0:	460f      	mov	r7, r1
    1de2:	4606      	mov	r6, r0
    1de4:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    1de8:	494b      	ldr	r1, [pc, #300]	; (1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>)
    1dea:	4699      	mov	r9, r3
    1dec:	4408      	add	r0, r1
    1dee:	4692      	mov	sl, r2
    1df0:	f890 4020 	ldrb.w	r4, [r0, #32]
    1df4:	2020      	movs	r0, #32
    1df6:	7010      	strb	r0, [r2, #0]
    1df8:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    1dfc:	2c20      	cmp	r4, #32
    1dfe:	bf1c      	itt	ne
    1e00:	4846      	ldrne	r0, [pc, #280]	; (1f1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d0>)
    1e02:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    1e06:	d038      	beq.n	1e7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1e08:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1e0c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    1e10:	f100 0108 	add.w	r1, r0, #8
    1e14:	68c0      	ldr	r0, [r0, #12]
    1e16:	6835      	ldr	r5, [r6, #0]
    1e18:	1a28      	subs	r0, r5, r0
    1e1a:	0200      	lsls	r0, r0, #8
    1e1c:	17c2      	asrs	r2, r0, #31
    1e1e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1e22:	1200      	asrs	r0, r0, #8
    1e24:	d429      	bmi.n	1e7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1e26:	89f0      	ldrh	r0, [r6, #14]
    1e28:	b300      	cbz	r0, 1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>
    1e2a:	89c8      	ldrh	r0, [r1, #14]
    1e2c:	b9f0      	cbnz	r0, 1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>
    1e2e:	6808      	ldr	r0, [r1, #0]
    1e30:	9000      	str	r0, [sp, #0]
    1e32:	f002 ff05 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1e36:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1e3a:	bf08      	it	eq
    1e3c:	200d      	moveq	r0, #13
    1e3e:	d00b      	beq.n	1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1e40:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1e44:	3856      	subs	r0, #86	; 0x56
    1e46:	bf08      	it	eq
    1e48:	201c      	moveq	r0, #28
    1e4a:	d005      	beq.n	1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1e4c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1e50:	389f      	subs	r0, #159	; 0x9f
    1e52:	bf14      	ite	ne
    1e54:	2000      	movne	r0, #0
    1e56:	2032      	moveq	r0, #50	; 0x32
    1e58:	1c41      	adds	r1, r0, #1
    1e5a:	9800      	ldr	r0, [sp, #0]
    1e5c:	1a28      	subs	r0, r5, r0
    1e5e:	0200      	lsls	r0, r0, #8
    1e60:	17c2      	asrs	r2, r0, #31
    1e62:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1e66:	1200      	asrs	r0, r0, #8
    1e68:	4288      	cmp	r0, r1
    1e6a:	db06      	blt.n	1e7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1e6c:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    1e70:	f88a 4000 	strb.w	r4, [sl]
    1e74:	7844      	ldrb	r4, [r0, #1]
    1e76:	2c20      	cmp	r4, #32
    1e78:	d1c6      	bne.n	1e08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbc>
    1e7a:	f89a 0000 	ldrb.w	r0, [sl]
    1e7e:	f889 0000 	strb.w	r0, [r9]
    1e82:	2c20      	cmp	r4, #32
    1e84:	bf1c      	itt	ne
    1e86:	4825      	ldrne	r0, [pc, #148]	; (1f1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d0>)
    1e88:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    1e8c:	d040      	beq.n	1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    1e8e:	bf00      	nop
    1e90:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1e94:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    1e98:	6870      	ldr	r0, [r6, #4]
    1e9a:	68bd      	ldr	r5, [r7, #8]
    1e9c:	f107 0108 	add.w	r1, r7, #8
    1ea0:	1a28      	subs	r0, r5, r0
    1ea2:	0200      	lsls	r0, r0, #8
    1ea4:	17c2      	asrs	r2, r0, #31
    1ea6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1eaa:	1200      	asrs	r0, r0, #8
    1eac:	d422      	bmi.n	1ef4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    1eae:	89c8      	ldrh	r0, [r1, #14]
    1eb0:	b370      	cbz	r0, 1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    1eb2:	89f0      	ldrh	r0, [r6, #14]
    1eb4:	bb60      	cbnz	r0, 1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    1eb6:	f8d6 b000 	ldr.w	fp, [r6]
    1eba:	f002 fec1 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1ebe:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1ec2:	bf08      	it	eq
    1ec4:	200d      	moveq	r0, #13
    1ec6:	d00b      	beq.n	1ee0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x194>
    1ec8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1ecc:	3856      	subs	r0, #86	; 0x56
    1ece:	bf08      	it	eq
    1ed0:	201c      	moveq	r0, #28
    1ed2:	d005      	beq.n	1ee0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x194>
    1ed4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1ed8:	389f      	subs	r0, #159	; 0x9f
    1eda:	bf14      	ite	ne
    1edc:	2000      	movne	r0, #0
    1ede:	2032      	moveq	r0, #50	; 0x32
    1ee0:	1c41      	adds	r1, r0, #1
    1ee2:	eba5 000b 	sub.w	r0, r5, fp
    1ee6:	0200      	lsls	r0, r0, #8
    1ee8:	17c2      	asrs	r2, r0, #31
    1eea:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1eee:	1200      	asrs	r0, r0, #8
    1ef0:	4288      	cmp	r0, r1
    1ef2:	da0d      	bge.n	1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    1ef4:	f889 4000 	strb.w	r4, [r9]
    1ef8:	7e38      	ldrb	r0, [r7, #24]
    1efa:	7c31      	ldrb	r1, [r6, #16]
    1efc:	4288      	cmp	r0, r1
    1efe:	d802      	bhi.n	1f06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ba>
    1f00:	2000      	movs	r0, #0
    1f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f06:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    1f0a:	7844      	ldrb	r4, [r0, #1]
    1f0c:	2c20      	cmp	r4, #32
    1f0e:	d1bf      	bne.n	1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>
    1f10:	2001      	movs	r0, #1
    1f12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f16:	0000      	.short	0x0000
    1f18:	20000fb4 	.word	0x20000fb4
    1f1c:	20000f34 	.word	0x20000f34
    1f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f24:	b082      	sub	sp, #8
    1f26:	4605      	mov	r5, r0
    1f28:	4614      	mov	r4, r2
    1f2a:	4688      	mov	r8, r1
    1f2c:	89d0      	ldrh	r0, [r2, #14]
    1f2e:	aa01      	add	r2, sp, #4
    1f30:	4669      	mov	r1, sp
    1f32:	f001 ffa7 	bl	3e84 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1f36:	f002 fcb5 	bl	48a4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1f3a:	f001 ff87 	bl	3e4c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1f3e:	4607      	mov	r7, r0
    1f40:	4820      	ldr	r0, [pc, #128]	; (1fc4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x278>)
    1f42:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1f46:	2920      	cmp	r1, #32
    1f48:	d004      	beq.n	1f54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>
    1f4a:	68c0      	ldr	r0, [r0, #12]
    1f4c:	1d40      	adds	r0, r0, #5
    1f4e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1f52:	e024      	b.n	1f9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x252>
    1f54:	89e0      	ldrh	r0, [r4, #14]
    1f56:	f105 0609 	add.w	r6, r5, #9
    1f5a:	b1b0      	cbz	r0, 1f8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23e>
    1f5c:	f002 ffa2 	bl	4ea4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f60:	b998      	cbnz	r0, 1f8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23e>
    1f62:	f002 fe6d 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1f66:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1f6a:	bf08      	it	eq
    1f6c:	200d      	moveq	r0, #13
    1f6e:	d00b      	beq.n	1f88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    1f70:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1f74:	3856      	subs	r0, #86	; 0x56
    1f76:	bf08      	it	eq
    1f78:	201c      	moveq	r0, #28
    1f7a:	d005      	beq.n	1f88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    1f7c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1f80:	389f      	subs	r0, #159	; 0x9f
    1f82:	bf14      	ite	ne
    1f84:	2000      	movne	r0, #0
    1f86:	2032      	moveq	r0, #50	; 0x32
    1f88:	4406      	add	r6, r0
    1f8a:	f1b8 0f00 	cmp.w	r8, #0
    1f8e:	d104      	bne.n	1f9a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24e>
    1f90:	9800      	ldr	r0, [sp, #0]
    1f92:	4287      	cmp	r7, r0
    1f94:	bf84      	itt	hi
    1f96:	1a38      	subhi	r0, r7, r0
    1f98:	4406      	addhi	r6, r0
    1f9a:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1f9e:	e9d4 2000 	ldrd	r2, r0, [r4]
    1fa2:	1a80      	subs	r0, r0, r2
    1fa4:	4408      	add	r0, r1
    1fa6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1faa:	e9c4 1000 	strd	r1, r0, [r4]
    1fae:	42a9      	cmp	r1, r5
    1fb0:	bf24      	itt	cs
    1fb2:	b002      	addcs	sp, #8
    1fb4:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fb8:	68a0      	ldr	r0, [r4, #8]
    1fba:	1c40      	adds	r0, r0, #1
    1fbc:	60a0      	str	r0, [r4, #8]
    1fbe:	b002      	add	sp, #8
    1fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fc4:	20000fb4 	.word	0x20000fb4
    1fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fcc:	b097      	sub	sp, #92	; 0x5c
    1fce:	4617      	mov	r7, r2
    1fd0:	468b      	mov	fp, r1
    1fd2:	4605      	mov	r5, r0
    1fd4:	f002 f9e8 	bl	43a8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    1fd8:	4604      	mov	r4, r0
    1fda:	f002 fc63 	bl	48a4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1fde:	4606      	mov	r6, r0
    1fe0:	f1bb 0f01 	cmp.w	fp, #1
    1fe4:	bf18      	it	ne
    1fe6:	f1bb 0f02 	cmpne.w	fp, #2
    1fea:	d005      	beq.n	1ff8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ac>
    1fec:	f640 115d 	movw	r1, #2397	; 0x95d
    1ff0:	f04f 0070 	mov.w	r0, #112	; 0x70
    1ff4:	f002 ffce 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ff8:	49f8      	ldr	r1, [pc, #992]	; (23dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3dc>)
    1ffa:	2001      	movs	r0, #1
    1ffc:	6008      	str	r0, [r1, #0]
    1ffe:	49f8      	ldr	r1, [pc, #992]	; (23e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e0>)
    2000:	6889      	ldr	r1, [r1, #8]
    2002:	6008      	str	r0, [r1, #0]
    2004:	2000      	movs	r0, #0
    2006:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    200a:	900c      	str	r0, [sp, #48]	; 0x30
    200c:	1e40      	subs	r0, r0, #1
    200e:	900d      	str	r0, [sp, #52]	; 0x34
    2010:	49f4      	ldr	r1, [pc, #976]	; (23e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e4>)
    2012:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
    2016:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    201a:	f100 0108 	add.w	r1, r0, #8
    201e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    2022:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    2026:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    202a:	6980      	ldr	r0, [r0, #24]
    202c:	9012      	str	r0, [sp, #72]	; 0x48
    202e:	a80e      	add	r0, sp, #56	; 0x38
    2030:	f000 fbc4 	bl	27bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7bc>
    2034:	9007      	str	r0, [sp, #28]
    2036:	48ec      	ldr	r0, [pc, #944]	; (23e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e8>)
    2038:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    203c:	8b80      	ldrh	r0, [r0, #28]
    203e:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    2042:	f1b8 0f00 	cmp.w	r8, #0
    2046:	bf04      	itt	eq
    2048:	2000      	moveq	r0, #0
    204a:	9006      	streq	r0, [sp, #24]
    204c:	d00b      	beq.n	2066 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x66>
    204e:	2001      	movs	r0, #1
    2050:	9006      	str	r0, [sp, #24]
    2052:	48e5      	ldr	r0, [pc, #916]	; (23e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e8>)
    2054:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    2058:	b928      	cbnz	r0, 2066 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x66>
    205a:	f002 ff23 	bl	4ea4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    205e:	2800      	cmp	r0, #0
    2060:	bf08      	it	eq
    2062:	2701      	moveq	r7, #1
    2064:	d000      	beq.n	2068 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x68>
    2066:	2700      	movs	r7, #0
    2068:	f002 fdea 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    206c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2070:	bf08      	it	eq
    2072:	200d      	moveq	r0, #13
    2074:	d00b      	beq.n	208e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8e>
    2076:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    207a:	3856      	subs	r0, #86	; 0x56
    207c:	bf08      	it	eq
    207e:	201c      	moveq	r0, #28
    2080:	d005      	beq.n	208e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8e>
    2082:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2086:	389f      	subs	r0, #159	; 0x9f
    2088:	bf14      	ite	ne
    208a:	2000      	movne	r0, #0
    208c:	2032      	moveq	r0, #50	; 0x32
    208e:	f04f 0900 	mov.w	r9, #0
    2092:	46ca      	mov	sl, r9
    2094:	900b      	str	r0, [sp, #44]	; 0x2c
    2096:	4546      	cmp	r6, r8
    2098:	d938      	bls.n	210c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x10c>
    209a:	9907      	ldr	r1, [sp, #28]
    209c:	f8df 934c 	ldr.w	r9, [pc, #844]	; 23ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3ec>
    20a0:	ea6f 0c06 	mvn.w	ip, r6
    20a4:	466b      	mov	r3, sp
    20a6:	aa16      	add	r2, sp, #88	; 0x58
    20a8:	eb01 000c 	add.w	r0, r1, ip
    20ac:	4549      	cmp	r1, r9
    20ae:	d904      	bls.n	20ba <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xba>
    20b0:	f240 516f 	movw	r1, #1391	; 0x56f
    20b4:	2070      	movs	r0, #112	; 0x70
    20b6:	f002 ff6d 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20ba:	49cd      	ldr	r1, [pc, #820]	; (23f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3f0>)
    20bc:	458c      	cmp	ip, r1
    20be:	dd04      	ble.n	20ca <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xca>
    20c0:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    20c4:	2070      	movs	r0, #112	; 0x70
    20c6:	f002 ff65 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20ca:	49ca      	ldr	r1, [pc, #808]	; (23f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3f4>)
    20cc:	458c      	cmp	ip, r1
    20ce:	da04      	bge.n	20da <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xda>
    20d0:	f240 5171 	movw	r1, #1393	; 0x571
    20d4:	2070      	movs	r0, #112	; 0x70
    20d6:	f002 ff5d 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20da:	49c7      	ldr	r1, [pc, #796]	; (23f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3f8>)
    20dc:	4281      	cmp	r1, r0
    20de:	bfdc      	itt	le
    20e0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    20e4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    20e8:	dd05      	ble.n	20f6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf6>
    20ea:	2800      	cmp	r0, #0
    20ec:	bfbc      	itt	lt
    20ee:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    20f2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    20f6:	4619      	mov	r1, r3
    20f8:	f001 fec4 	bl	3e84 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    20fc:	9800      	ldr	r0, [sp, #0]
    20fe:	990e      	ldr	r1, [sp, #56]	; 0x38
    2100:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2104:	9000      	str	r0, [sp, #0]
    2106:	1a08      	subs	r0, r1, r0
    2108:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    210c:	2f00      	cmp	r7, #0
    210e:	bf18      	it	ne
    2110:	f8dd a02c 	ldrne.w	sl, [sp, #44]	; 0x2c
    2114:	d105      	bne.n	2122 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x122>
    2116:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    211a:	2800      	cmp	r0, #0
    211c:	bf18      	it	ne
    211e:	f04f 0a02 	movne.w	sl, #2
    2122:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    2126:	d008      	beq.n	213a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x13a>
    2128:	980e      	ldr	r0, [sp, #56]	; 0x38
    212a:	1b00      	subs	r0, r0, r4
    212c:	0200      	lsls	r0, r0, #8
    212e:	17c1      	asrs	r1, r0, #31
    2130:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2134:	1200      	asrs	r0, r0, #8
    2136:	2801      	cmp	r0, #1
    2138:	da01      	bge.n	213e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x13e>
    213a:	2003      	movs	r0, #3
    213c:	e00d      	b.n	215a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x15a>
    213e:	b157      	cbz	r7, 2156 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x156>
    2140:	48a9      	ldr	r0, [pc, #676]	; (23e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e8>)
    2142:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    2146:	b130      	cbz	r0, 2156 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x156>
    2148:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    214c:	f110 0a00 	adds.w	sl, r0, #0
    2150:	bf18      	it	ne
    2152:	f04f 0a02 	movne.w	sl, #2
    2156:	4625      	mov	r5, r4
    2158:	2000      	movs	r0, #0
    215a:	4482      	add	sl, r0
    215c:	980e      	ldr	r0, [sp, #56]	; 0x38
    215e:	eba0 0009 	sub.w	r0, r0, r9
    2162:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2166:	1e50      	subs	r0, r2, #1
    2168:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    216c:	1b41      	subs	r1, r0, r5
    216e:	0209      	lsls	r1, r1, #8
    2170:	17cb      	asrs	r3, r1, #31
    2172:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    2176:	1209      	asrs	r1, r1, #8
    2178:	4551      	cmp	r1, sl
    217a:	db04      	blt.n	2186 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x186>
    217c:	f1b9 0f00 	cmp.w	r9, #0
    2180:	bf18      	it	ne
    2182:	920e      	strne	r2, [sp, #56]	; 0x38
    2184:	e02d      	b.n	21e2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e2>
    2186:	f1b9 0f00 	cmp.w	r9, #0
    218a:	d005      	beq.n	2198 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x198>
    218c:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
    2190:	b920      	cbnz	r0, 219c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x19c>
    2192:	f002 fb7d 	bl	4890 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    2196:	b108      	cbz	r0, 219c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x19c>
    2198:	b9af      	cbnz	r7, 21c6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c6>
    219a:	e00c      	b.n	21b6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1b6>
    219c:	b92f      	cbnz	r7, 21aa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1aa>
    219e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    21a2:	2800      	cmp	r0, #0
    21a4:	bf18      	it	ne
    21a6:	f1aa 0a02 	subne.w	sl, sl, #2
    21aa:	f04f 0900 	mov.w	r9, #0
    21ae:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
    21b2:	464e      	mov	r6, r9
    21b4:	e007      	b.n	21c6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c6>
    21b6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    21ba:	b120      	cbz	r0, 21c6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c6>
    21bc:	2000      	movs	r0, #0
    21be:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    21c2:	f1aa 0a02 	sub.w	sl, sl, #2
    21c6:	980e      	ldr	r0, [sp, #56]	; 0x38
    21c8:	eba0 0009 	sub.w	r0, r0, r9
    21cc:	1e40      	subs	r0, r0, #1
    21ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21d2:	1b41      	subs	r1, r0, r5
    21d4:	0209      	lsls	r1, r1, #8
    21d6:	17ca      	asrs	r2, r1, #31
    21d8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    21dc:	1209      	asrs	r1, r1, #8
    21de:	4551      	cmp	r1, sl
    21e0:	db7e      	blt.n	22e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2e0>
    21e2:	9714      	str	r7, [sp, #80]	; 0x50
    21e4:	4605      	mov	r5, r0
    21e6:	f04f 0900 	mov.w	r9, #0
    21ea:	9f06      	ldr	r7, [sp, #24]
    21ec:	f001 ffb4 	bl	4158 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    21f0:	1a28      	subs	r0, r5, r0
    21f2:	0200      	lsls	r0, r0, #8
    21f4:	17c1      	asrs	r1, r0, #31
    21f6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    21fa:	ea4f 2a20 	mov.w	sl, r0, asr #8
    21fe:	f002 fd1f 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2202:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2206:	bf08      	it	eq
    2208:	200d      	moveq	r0, #13
    220a:	d00b      	beq.n	2224 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x224>
    220c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2210:	3856      	subs	r0, #86	; 0x56
    2212:	bf08      	it	eq
    2214:	201c      	moveq	r0, #28
    2216:	d005      	beq.n	2224 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x224>
    2218:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    221c:	389f      	subs	r0, #159	; 0x9f
    221e:	bf14      	ite	ne
    2220:	2000      	movne	r0, #0
    2222:	2032      	moveq	r0, #50	; 0x32
    2224:	300b      	adds	r0, #11
    2226:	4582      	cmp	sl, r0
    2228:	da20      	bge.n	226c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x26c>
    222a:	f1bb 0f01 	cmp.w	fp, #1
    222e:	d002      	beq.n	2236 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x236>
    2230:	9814      	ldr	r0, [sp, #80]	; 0x50
    2232:	b140      	cbz	r0, 2246 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x246>
    2234:	e012      	b.n	225c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x25c>
    2236:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    223a:	d11c      	bne.n	2276 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x276>
    223c:	f640 01de 	movw	r1, #2270	; 0x8de
    2240:	2070      	movs	r0, #112	; 0x70
    2242:	f002 fea7 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2246:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    224a:	d007      	beq.n	225c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x25c>
    224c:	1b60      	subs	r0, r4, r5
    224e:	0200      	lsls	r0, r0, #8
    2250:	17c1      	asrs	r1, r0, #31
    2252:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2256:	1200      	asrs	r0, r0, #8
    2258:	2804      	cmp	r0, #4
    225a:	dd04      	ble.n	2266 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x266>
    225c:	462c      	mov	r4, r5
    225e:	4620      	mov	r0, r4
    2260:	f001 ffa0 	bl	41a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2264:	e007      	b.n	2276 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x276>
    2266:	2800      	cmp	r0, #0
    2268:	dc63      	bgt.n	2332 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x332>
    226a:	e004      	b.n	2276 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x276>
    226c:	462c      	mov	r4, r5
    226e:	4620      	mov	r0, r4
    2270:	f001 ff98 	bl	41a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2274:	46b9      	mov	r9, r7
    2276:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    227a:	d055      	beq.n	2328 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x328>
    227c:	980e      	ldr	r0, [sp, #56]	; 0x38
    227e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2280:	1b00      	subs	r0, r0, r4
    2282:	1b12      	subs	r2, r2, r4
    2284:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2288:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    228c:	2801      	cmp	r0, #1
    228e:	d350      	bcc.n	2332 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x332>
    2290:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2294:	bf98      	it	ls
    2296:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    229a:	d84a      	bhi.n	2332 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x332>
    229c:	4620      	mov	r0, r4
    229e:	f00b f961 	bl	d564 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    22a2:	9907      	ldr	r1, [sp, #28]
    22a4:	4a52      	ldr	r2, [pc, #328]	; (23f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3f0>)
    22a6:	1a0d      	subs	r5, r1, r0
    22a8:	f04f 0a00 	mov.w	sl, #0
    22ac:	1aaa      	subs	r2, r5, r2
    22ae:	f17a 0200 	sbcs.w	r2, sl, #0
    22b2:	d318      	bcc.n	22e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2e6>
    22b4:	4b4e      	ldr	r3, [pc, #312]	; (23f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3f0>)
    22b6:	1a42      	subs	r2, r0, r1
    22b8:	1ad3      	subs	r3, r2, r3
    22ba:	f17a 0300 	sbcs.w	r3, sl, #0
    22be:	d312      	bcc.n	22e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2e6>
    22c0:	4b4a      	ldr	r3, [pc, #296]	; (23ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3ec>)
    22c2:	42ab      	cmp	r3, r5
    22c4:	bf3e      	ittt	cc
    22c6:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    22ca:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    22ce:	1845      	addcc	r5, r0, r1
    22d0:	d309      	bcc.n	22e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2e6>
    22d2:	4293      	cmp	r3, r2
    22d4:	d231      	bcs.n	233a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x33a>
    22d6:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    22da:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    22de:	e000      	b.n	22e2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2e2>
    22e0:	e027      	b.n	2332 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x332>
    22e2:	4408      	add	r0, r1
    22e4:	4245      	negs	r5, r0
    22e6:	4f40      	ldr	r7, [pc, #256]	; (23e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e8>)
    22e8:	7fb8      	ldrb	r0, [r7, #30]
    22ea:	b358      	cbz	r0, 2344 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x344>
    22ec:	f1bb 0f01 	cmp.w	fp, #1
    22f0:	d005      	beq.n	22fe <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2fe>
    22f2:	2002      	movs	r0, #2
    22f4:	f002 f992 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    22f8:	2001      	movs	r0, #1
    22fa:	f002 f98f 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    22fe:	45b0      	cmp	r8, r6
    2300:	d22c      	bcs.n	235c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x35c>
    2302:	eba5 0106 	sub.w	r1, r5, r6
    2306:	f04f 0002 	mov.w	r0, #2
    230a:	f002 f8d1 	bl	44b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    230e:	b390      	cbz	r0, 2376 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x376>
    2310:	f1b8 0f00 	cmp.w	r8, #0
    2314:	bf1c      	itt	ne
    2316:	eba5 0108 	subne.w	r1, r5, r8
    231a:	2001      	movne	r0, #1
    231c:	d034      	beq.n	2388 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x388>
    231e:	bf00      	nop
    2320:	f002 f8c6 	bl	44b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2324:	b338      	cbz	r0, 2376 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x376>
    2326:	e02f      	b.n	2388 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x388>
    2328:	f640 11f1 	movw	r1, #2545	; 0x9f1
    232c:	2070      	movs	r0, #112	; 0x70
    232e:	f002 fe31 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2332:	b017      	add	sp, #92	; 0x5c
    2334:	2000      	movs	r0, #0
    2336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    233a:	f640 21c2 	movw	r1, #2754	; 0xac2
    233e:	2070      	movs	r0, #112	; 0x70
    2340:	f002 fe28 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2344:	45b0      	cmp	r8, r6
    2346:	bf34      	ite	cc
    2348:	4630      	movcc	r0, r6
    234a:	4640      	movcs	r0, r8
    234c:	301e      	adds	r0, #30
    234e:	42a8      	cmp	r0, r5
    2350:	dbcc      	blt.n	22ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2ec>
    2352:	f640 2105 	movw	r1, #2565	; 0xa05
    2356:	2070      	movs	r0, #112	; 0x70
    2358:	f002 fe1c 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    235c:	d90c      	bls.n	2378 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x378>
    235e:	eba5 0108 	sub.w	r1, r5, r8
    2362:	2001      	movs	r0, #1
    2364:	f002 f8a4 	bl	44b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2368:	b128      	cbz	r0, 2376 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x376>
    236a:	2e00      	cmp	r6, #0
    236c:	bf1c      	itt	ne
    236e:	1ba9      	subne	r1, r5, r6
    2370:	2002      	movne	r0, #2
    2372:	d009      	beq.n	2388 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x388>
    2374:	e7d4      	b.n	2320 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x320>
    2376:	e030      	b.n	23da <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3da>
    2378:	ea56 0008 	orrs.w	r0, r6, r8
    237c:	d004      	beq.n	2388 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x388>
    237e:	f640 1141 	movw	r1, #2369	; 0x941
    2382:	2070      	movs	r0, #112	; 0x70
    2384:	f002 fe06 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2388:	4629      	mov	r1, r5
    238a:	2000      	movs	r0, #0
    238c:	f002 f890 	bl	44b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2390:	b318      	cbz	r0, 23da <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3da>
    2392:	9806      	ldr	r0, [sp, #24]
    2394:	2601      	movs	r6, #1
    2396:	2800      	cmp	r0, #0
    2398:	bf04      	itt	eq
    239a:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    239e:	2800      	cmpeq	r0, #0
    23a0:	d002      	beq.n	23a8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a8>
    23a2:	f1b9 0f00 	cmp.w	r9, #0
    23a6:	d033      	beq.n	2410 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x410>
    23a8:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    23ac:	b118      	cbz	r0, 23b6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3b6>
    23ae:	f002 fc4d 	bl	4c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    23b2:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    23b6:	f1b9 0f00 	cmp.w	r9, #0
    23ba:	d02c      	beq.n	2416 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x416>
    23bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    23be:	1a20      	subs	r0, r4, r0
    23c0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    23c4:	2005      	movs	r0, #5
    23c6:	f002 f873 	bl	44b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    23ca:	b3e0      	cbz	r0, 2446 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x446>
    23cc:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    23d0:	2800      	cmp	r0, #0
    23d2:	bf08      	it	eq
    23d4:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    23d8:	e025      	b.n	2426 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x426>
    23da:	e00f      	b.n	23fc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3fc>
    23dc:	40000508 	.word	0x40000508
    23e0:	2000003c 	.word	0x2000003c
    23e4:	20000bb4 	.word	0x20000bb4
    23e8:	20000fb4 	.word	0x20000fb4
    23ec:	1e847fff 	.word	0x1e847fff
    23f0:	0f424000 	.word	0x0f424000
    23f4:	f0bdc000 	.word	0xf0bdc000
    23f8:	1e848000 	.word	0x1e848000
    23fc:	2002      	movs	r0, #2
    23fe:	f002 f90d 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2402:	2001      	movs	r0, #1
    2404:	f002 f90a 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2408:	b017      	add	sp, #92	; 0x5c
    240a:	2000      	movs	r0, #0
    240c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2410:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    2414:	b190      	cbz	r0, 243c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x43c>
    2416:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    241a:	b120      	cbz	r0, 2426 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x426>
    241c:	2005      	movs	r0, #5
    241e:	f002 f8fd 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2422:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    2426:	eba5 0008 	sub.w	r0, r5, r8
    242a:	f1a0 0119 	sub.w	r1, r0, #25
    242e:	2900      	cmp	r1, #0
    2430:	dc0f      	bgt.n	2452 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x452>
    2432:	f640 212e 	movw	r1, #2606	; 0xa2e
    2436:	2070      	movs	r0, #112	; 0x70
    2438:	f002 fdac 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    243c:	f002 fc22 	bl	4c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2440:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    2444:	e7b7      	b.n	23b6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3b6>
    2446:	e7ff      	b.n	2448 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x448>
    2448:	f240 21f2 	movw	r1, #754	; 0x2f2
    244c:	2070      	movs	r0, #112	; 0x70
    244e:	f002 fda1 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2452:	2003      	movs	r0, #3
    2454:	f002 f82c 	bl	44b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2458:	b1c0      	cbz	r0, 248c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x48c>
    245a:	480f      	ldr	r0, [pc, #60]	; (2498 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x498>)
    245c:	6880      	ldr	r0, [r0, #8]
    245e:	f8c0 a000 	str.w	sl, [r0]
    2462:	480e      	ldr	r0, [pc, #56]	; (249c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x49c>)
    2464:	f8c0 a000 	str.w	sl, [r0]
    2468:	ac0c      	add	r4, sp, #48	; 0x30
    246a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    246e:	6038      	str	r0, [r7, #0]
    2470:	6079      	str	r1, [r7, #4]
    2472:	60ba      	str	r2, [r7, #8]
    2474:	60fb      	str	r3, [r7, #12]
    2476:	ac10      	add	r4, sp, #64	; 0x40
    2478:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    247c:	6138      	str	r0, [r7, #16]
    247e:	6179      	str	r1, [r7, #20]
    2480:	61ba      	str	r2, [r7, #24]
    2482:	61fb      	str	r3, [r7, #28]
    2484:	b017      	add	sp, #92	; 0x5c
    2486:	2001      	movs	r0, #1
    2488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    248c:	f640 2136 	movw	r1, #2614	; 0xa36
    2490:	2070      	movs	r0, #112	; 0x70
    2492:	f002 fd7f 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2496:	0000      	.short	0x0000
    2498:	2000003c 	.word	0x2000003c
    249c:	40000508 	.word	0x40000508
    24a0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    24a4:	4606      	mov	r6, r0
    24a6:	7808      	ldrb	r0, [r1, #0]
    24a8:	7490      	strb	r0, [r2, #18]
    24aa:	7ac8      	ldrb	r0, [r1, #11]
    24ac:	7450      	strb	r0, [r2, #17]
    24ae:	7a88      	ldrb	r0, [r1, #10]
    24b0:	7410      	strb	r0, [r2, #16]
    24b2:	8908      	ldrh	r0, [r1, #8]
    24b4:	81d0      	strh	r0, [r2, #14]
    24b6:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2650 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x650>
    24ba:	6870      	ldr	r0, [r6, #4]
    24bc:	469a      	mov	sl, r3
    24be:	fba0 7908 	umull	r7, r9, r0, r8
    24c2:	4614      	mov	r4, r2
    24c4:	460d      	mov	r5, r1
    24c6:	6830      	ldr	r0, [r6, #0]
    24c8:	f00b f84c 	bl	d564 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    24cc:	19c1      	adds	r1, r0, r7
    24ce:	7828      	ldrb	r0, [r5, #0]
    24d0:	ea4f 0c68 	mov.w	ip, r8, asr #1
    24d4:	f149 0200 	adc.w	r2, r9, #0
    24d8:	f1a8 0e01 	sub.w	lr, r8, #1
    24dc:	f1cc 0b00 	rsb	fp, ip, #0
    24e0:	b168      	cbz	r0, 24fe <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4fe>
    24e2:	89e0      	ldrh	r0, [r4, #14]
    24e4:	7c67      	ldrb	r7, [r4, #17]
    24e6:	43c0      	mvns	r0, r0
    24e8:	f8d5 9004 	ldr.w	r9, [r5, #4]
    24ec:	f104 020c 	add.w	r2, r4, #12
    24f0:	4560      	cmp	r0, ip
    24f2:	dd5f      	ble.n	25b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5b4>
    24f4:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    24f8:	2070      	movs	r0, #112	; 0x70
    24fa:	f002 fd4b 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24fe:	f8df 9154 	ldr.w	r9, [pc, #340]	; 2654 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x654>
    2502:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    2506:	eb11 0a09 	adds.w	sl, r1, r9
    250a:	f142 0900 	adc.w	r9, r2, #0
    250e:	ebb0 0a0a 	subs.w	sl, r0, sl
    2512:	eb73 0909 	sbcs.w	r9, r3, r9
    2516:	d245      	bcs.n	25a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5a4>
    2518:	1a41      	subs	r1, r0, r1
    251a:	eb73 0102 	sbcs.w	r1, r3, r2
    251e:	d341      	bcc.n	25a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5a4>
    2520:	1bc7      	subs	r7, r0, r7
    2522:	6870      	ldr	r0, [r6, #4]
    2524:	60a0      	str	r0, [r4, #8]
    2526:	4547      	cmp	r7, r8
    2528:	d305      	bcc.n	2536 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x536>
    252a:	1c40      	adds	r0, r0, #1
    252c:	f1a7 57f4 	sub.w	r7, r7, #511705088	; 0x1e800000
    2530:	f5a7 2790 	sub.w	r7, r7, #294912	; 0x48000
    2534:	60a0      	str	r0, [r4, #8]
    2536:	89e0      	ldrh	r0, [r4, #14]
    2538:	686d      	ldr	r5, [r5, #4]
    253a:	43c1      	mvns	r1, r0
    253c:	7c66      	ldrb	r6, [r4, #17]
    253e:	1878      	adds	r0, r7, r1
    2540:	f104 020c 	add.w	r2, r4, #12
    2544:	4577      	cmp	r7, lr
    2546:	d904      	bls.n	2552 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x552>
    2548:	f240 516f 	movw	r1, #1391	; 0x56f
    254c:	2070      	movs	r0, #112	; 0x70
    254e:	f002 fd21 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2552:	4561      	cmp	r1, ip
    2554:	dcce      	bgt.n	24f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4f4>
    2556:	4559      	cmp	r1, fp
    2558:	db2f      	blt.n	25ba <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5ba>
    255a:	4580      	cmp	r8, r0
    255c:	bfdc      	itt	le
    255e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2562:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2566:	dd05      	ble.n	2574 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x574>
    2568:	2800      	cmp	r0, #0
    256a:	bfbc      	itt	lt
    256c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2570:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2574:	4621      	mov	r1, r4
    2576:	f001 fc85 	bl	3e84 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    257a:	6820      	ldr	r0, [r4, #0]
    257c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2580:	1978      	adds	r0, r7, r5
    2582:	1c40      	adds	r0, r0, #1
    2584:	6021      	str	r1, [r4, #0]
    2586:	2e00      	cmp	r6, #0
    2588:	bf08      	it	eq
    258a:	307a      	addeq	r0, #122	; 0x7a
    258c:	d003      	beq.n	2596 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x596>
    258e:	2e01      	cmp	r6, #1
    2590:	bf08      	it	eq
    2592:	3048      	addeq	r0, #72	; 0x48
    2594:	d134      	bne.n	2600 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x600>
    2596:	f001 fc59 	bl	3e4c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    259a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    259e:	6060      	str	r0, [r4, #4]
    25a0:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    25a4:	6830      	ldr	r0, [r6, #0]
    25a6:	1e40      	subs	r0, r0, #1
    25a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25ac:	6020      	str	r0, [r4, #0]
    25ae:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    25b2:	e7f4      	b.n	259e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x59e>
    25b4:	4601      	mov	r1, r0
    25b6:	4558      	cmp	r0, fp
    25b8:	da04      	bge.n	25c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5c4>
    25ba:	f240 5171 	movw	r1, #1393	; 0x571
    25be:	2070      	movs	r0, #112	; 0x70
    25c0:	f002 fce8 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25c4:	4580      	cmp	r8, r0
    25c6:	bfdc      	itt	le
    25c8:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    25cc:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    25d0:	dd05      	ble.n	25de <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5de>
    25d2:	2800      	cmp	r0, #0
    25d4:	bfbc      	itt	lt
    25d6:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    25da:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    25de:	4621      	mov	r1, r4
    25e0:	f001 fc50 	bl	3e84 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25e4:	6820      	ldr	r0, [r4, #0]
    25e6:	2f00      	cmp	r7, #0
    25e8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    25ec:	f109 0001 	add.w	r0, r9, #1
    25f0:	6021      	str	r1, [r4, #0]
    25f2:	bf08      	it	eq
    25f4:	307a      	addeq	r0, #122	; 0x7a
    25f6:	d008      	beq.n	260a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x60a>
    25f8:	2f01      	cmp	r7, #1
    25fa:	bf08      	it	eq
    25fc:	3048      	addeq	r0, #72	; 0x48
    25fe:	d004      	beq.n	260a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x60a>
    2600:	f240 6124 	movw	r1, #1572	; 0x624
    2604:	2070      	movs	r0, #112	; 0x70
    2606:	f002 fcc5 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    260a:	f001 fc1f 	bl	3e4c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    260e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2612:	6061      	str	r1, [r4, #4]
    2614:	6870      	ldr	r0, [r6, #4]
    2616:	60a0      	str	r0, [r4, #8]
    2618:	2100      	movs	r1, #0
    261a:	4622      	mov	r2, r4
    261c:	6830      	ldr	r0, [r6, #0]
    261e:	f7ff fc7f 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    2622:	6832      	ldr	r2, [r6, #0]
    2624:	4653      	mov	r3, sl
    2626:	4621      	mov	r1, r4
    2628:	6928      	ldr	r0, [r5, #16]
    262a:	f7ff fa25 	bl	1a78 <MPSL_IRQ_RADIO_Handler+0xb8>
    262e:	2800      	cmp	r0, #0
    2630:	bf18      	it	ne
    2632:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2636:	e9d4 2100 	ldrd	r2, r1, [r4]
    263a:	6830      	ldr	r0, [r6, #0]
    263c:	1a89      	subs	r1, r1, r2
    263e:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2642:	4408      	add	r0, r1
    2644:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2648:	e9c4 2000 	strd	r2, r0, [r4]
    264c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2650:	1e848000 	.word	0x1e848000
    2654:	0f424000 	.word	0x0f424000
    2658:	b570      	push	{r4, r5, r6, lr}
    265a:	4d1e      	ldr	r5, [pc, #120]	; (26d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6d4>)
    265c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2660:	2820      	cmp	r0, #32
    2662:	bf18      	it	ne
    2664:	bd70      	popne	{r4, r5, r6, pc}
    2666:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    266a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    266e:	4428      	add	r0, r5
    2670:	f890 4020 	ldrb.w	r4, [r0, #32]
    2674:	2c20      	cmp	r4, #32
    2676:	d027      	beq.n	26c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6c8>
    2678:	4b17      	ldr	r3, [pc, #92]	; (26d8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6d8>)
    267a:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    267e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    2682:	7849      	ldrb	r1, [r1, #1]
    2684:	f880 1020 	strb.w	r1, [r0, #32]
    2688:	20ff      	movs	r0, #255	; 0xff
    268a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    268e:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    2692:	4621      	mov	r1, r4
    2694:	2002      	movs	r0, #2
    2696:	f000 f8cb 	bl	2830 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x830>
    269a:	2000      	movs	r0, #0
    269c:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    26a0:	77a8      	strb	r0, [r5, #30]
    26a2:	490e      	ldr	r1, [pc, #56]	; (26dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6dc>)
    26a4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    26a8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    26ac:	7e00      	ldrb	r0, [r0, #24]
    26ae:	2800      	cmp	r0, #0
    26b0:	bf08      	it	eq
    26b2:	f002 fdc9 	bleq	5248 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    26b6:	2000      	movs	r0, #0
    26b8:	4909      	ldr	r1, [pc, #36]	; (26e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6e0>)
    26ba:	6849      	ldr	r1, [r1, #4]
    26bc:	2900      	cmp	r1, #0
    26be:	bf08      	it	eq
    26c0:	bd70      	popeq	{r4, r5, r6, pc}
    26c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    26c6:	4708      	bx	r1
    26c8:	f44f 714b 	mov.w	r1, #812	; 0x32c
    26cc:	2070      	movs	r0, #112	; 0x70
    26ce:	f002 fc61 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26d2:	0000      	.short	0x0000
    26d4:	20000fb4 	.word	0x20000fb4
    26d8:	20000f34 	.word	0x20000f34
    26dc:	20000bb4 	.word	0x20000bb4
    26e0:	2000003c 	.word	0x2000003c
    26e4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    26e8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 27ac <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7ac>
    26ec:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    26f0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    26f4:	4440      	add	r0, r8
    26f6:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    26fa:	2c20      	cmp	r4, #32
    26fc:	bf08      	it	eq
    26fe:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2702:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 27b0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7b0>
    2706:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 27b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7b4>
    270a:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    270e:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    2712:	2607      	movs	r6, #7
    2714:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    2718:	2801      	cmp	r0, #1
    271a:	d00e      	beq.n	273a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x73a>
    271c:	2804      	cmp	r0, #4
    271e:	bf08      	it	eq
    2720:	2602      	moveq	r6, #2
    2722:	d00a      	beq.n	273a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x73a>
    2724:	2805      	cmp	r0, #5
    2726:	bf0c      	ite	eq
    2728:	2603      	moveq	r6, #3
    272a:	2806      	cmpne	r0, #6
    272c:	d005      	beq.n	273a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x73a>
    272e:	f640 01a8 	movw	r1, #2216	; 0x8a8
    2732:	f04f 0070 	mov.w	r0, #112	; 0x70
    2736:	f002 fc2d 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    273a:	f1bb 0f00 	cmp.w	fp, #0
    273e:	bf18      	it	ne
    2740:	f3af 8000 	nopne.w
    2744:	f3ef 8010 	mrs	r0, PRIMASK
    2748:	b672      	cpsid	i
    274a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    274e:	784a      	ldrb	r2, [r1, #1]
    2750:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    2754:	4441      	add	r1, r8
    2756:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    275a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    275e:	42a2      	cmp	r2, r4
    2760:	bf04      	itt	eq
    2762:	2220      	moveq	r2, #32
    2764:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    2768:	b1c0      	cbz	r0, 279c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x79c>
    276a:	462a      	mov	r2, r5
    276c:	4621      	mov	r1, r4
    276e:	2001      	movs	r0, #1
    2770:	f000 f85e 	bl	2830 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x830>
    2774:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2778:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    277c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    2780:	6840      	ldr	r0, [r0, #4]
    2782:	4631      	mov	r1, r6
    2784:	4790      	blx	r2
    2786:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    278a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    278e:	4440      	add	r0, r8
    2790:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2794:	2c20      	cmp	r4, #32
    2796:	d1ba      	bne.n	270e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x70e>
    2798:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    279c:	4806      	ldr	r0, [pc, #24]	; (27b8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7b8>)
    279e:	2800      	cmp	r0, #0
    27a0:	bf18      	it	ne
    27a2:	f3af 8000 	nopne.w
    27a6:	b662      	cpsie	i
    27a8:	e7df      	b.n	276a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x76a>
    27aa:	0000      	.short	0x0000
    27ac:	20000fb4 	.word	0x20000fb4
    27b0:	00000000 	.word	0x00000000
    27b4:	20000f34 	.word	0x20000f34
    27b8:	00000000 	.word	0x00000000
    27bc:	b510      	push	{r4, lr}
    27be:	4604      	mov	r4, r0
    27c0:	6800      	ldr	r0, [r0, #0]
    27c2:	f00a fecf 	bl	d564 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    27c6:	4602      	mov	r2, r0
    27c8:	89e0      	ldrh	r0, [r4, #14]
    27ca:	7b21      	ldrb	r1, [r4, #12]
    27cc:	4b14      	ldr	r3, [pc, #80]	; (2820 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x820>)
    27ce:	4408      	add	r0, r1
    27d0:	1c41      	adds	r1, r0, #1
    27d2:	1850      	adds	r0, r2, r1
    27d4:	429a      	cmp	r2, r3
    27d6:	d904      	bls.n	27e2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7e2>
    27d8:	f240 516f 	movw	r1, #1391	; 0x56f
    27dc:	2070      	movs	r0, #112	; 0x70
    27de:	f002 fbd9 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27e2:	4a10      	ldr	r2, [pc, #64]	; (2824 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x824>)
    27e4:	4291      	cmp	r1, r2
    27e6:	dd04      	ble.n	27f2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7f2>
    27e8:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    27ec:	2070      	movs	r0, #112	; 0x70
    27ee:	f002 fbd1 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27f2:	4a0d      	ldr	r2, [pc, #52]	; (2828 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x828>)
    27f4:	4291      	cmp	r1, r2
    27f6:	da04      	bge.n	2802 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x802>
    27f8:	f240 5171 	movw	r1, #1393	; 0x571
    27fc:	2070      	movs	r0, #112	; 0x70
    27fe:	f002 fbc9 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2802:	490a      	ldr	r1, [pc, #40]	; (282c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x82c>)
    2804:	4281      	cmp	r1, r0
    2806:	bfde      	ittt	le
    2808:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    280c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2810:	bd10      	pople	{r4, pc}
    2812:	2800      	cmp	r0, #0
    2814:	bfbc      	itt	lt
    2816:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    281a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    281e:	bd10      	pop	{r4, pc}
    2820:	1e847fff 	.word	0x1e847fff
    2824:	0f424000 	.word	0x0f424000
    2828:	f0bdc000 	.word	0xf0bdc000
    282c:	1e848000 	.word	0x1e848000
    2830:	f8df c058 	ldr.w	ip, [pc, #88]	; 288c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x88c>
    2834:	b510      	push	{r4, lr}
    2836:	2300      	movs	r3, #0
    2838:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    283c:	2807      	cmp	r0, #7
    283e:	d21f      	bcs.n	2880 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x880>
    2840:	e8df f000 	tbb	[pc, r0]
    2844:	05050505 	.word	0x05050505
    2848:	00040404 	.word	0x00040404
    284c:	2301      	movs	r3, #1
    284e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    2852:	2b00      	cmp	r3, #0
    2854:	bf08      	it	eq
    2856:	bd10      	popeq	{r4, pc}
    2858:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    285c:	480c      	ldr	r0, [pc, #48]	; (2890 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x890>)
    285e:	4402      	add	r2, r0
    2860:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    2864:	2820      	cmp	r0, #32
    2866:	bf0e      	itee	eq
    2868:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    286c:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    2870:	7041      	strbne	r1, [r0, #1]
    2872:	2020      	movs	r0, #32
    2874:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    2878:	7058      	strb	r0, [r3, #1]
    287a:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    287e:	bd10      	pop	{r4, pc}
    2880:	f44f 711a 	mov.w	r1, #616	; 0x268
    2884:	2070      	movs	r0, #112	; 0x70
    2886:	f002 fb85 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    288a:	0000      	.short	0x0000
    288c:	20000f34 	.word	0x20000f34
    2890:	20000fb4 	.word	0x20000fb4
    2894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2898:	4617      	mov	r7, r2
    289a:	f8df a158 	ldr.w	sl, [pc, #344]	; 29f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9f4>
    289e:	eb02 0047 	add.w	r0, r2, r7, lsl #1
    28a2:	4450      	add	r0, sl
    28a4:	4688      	mov	r8, r1
    28a6:	f890 4020 	ldrb.w	r4, [r0, #32]
    28aa:	2901      	cmp	r1, #1
    28ac:	4625      	mov	r5, r4
    28ae:	bf18      	it	ne
    28b0:	f1b8 0f02 	cmpne.w	r8, #2
    28b4:	d005      	beq.n	28c2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8c2>
    28b6:	f640 216c 	movw	r1, #2668	; 0xa6c
    28ba:	f04f 0070 	mov.w	r0, #112	; 0x70
    28be:	f002 fb69 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28c2:	f04f 0b00 	mov.w	fp, #0
    28c6:	2d20      	cmp	r5, #32
    28c8:	d044      	beq.n	2954 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x954>
    28ca:	f89a 001e 	ldrb.w	r0, [sl, #30]
    28ce:	2600      	movs	r6, #0
    28d0:	2800      	cmp	r0, #0
    28d2:	bf08      	it	eq
    28d4:	2602      	moveq	r6, #2
    28d6:	f001 fc3f 	bl	4158 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    28da:	4b47      	ldr	r3, [pc, #284]	; (29f8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9f8>)
    28dc:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    28e0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    28e4:	688a      	ldr	r2, [r1, #8]
    28e6:	68c9      	ldr	r1, [r1, #12]
    28e8:	1a12      	subs	r2, r2, r0
    28ea:	1a09      	subs	r1, r1, r0
    28ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    28f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    28f4:	4296      	cmp	r6, r2
    28f6:	bf99      	ittee	ls
    28f8:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    28fc:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2900:	4a3e      	ldrhi	r2, [pc, #248]	; (29fc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9fc>)
    2902:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    2906:	d923      	bls.n	2950 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x950>
    2908:	4622      	mov	r2, r4
    290a:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    290e:	784c      	ldrb	r4, [r1, #1]
    2910:	2c20      	cmp	r4, #32
    2912:	d015      	beq.n	2940 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x940>
    2914:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2918:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    291c:	f8dc 1008 	ldr.w	r1, [ip, #8]
    2920:	f8dc c00c 	ldr.w	ip, [ip, #12]
    2924:	1a09      	subs	r1, r1, r0
    2926:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    292a:	ebac 0c00 	sub.w	ip, ip, r0
    292e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    2932:	428e      	cmp	r6, r1
    2934:	bf9c      	itt	ls
    2936:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    293a:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    293e:	d8e3      	bhi.n	2908 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x908>
    2940:	2a20      	cmp	r2, #32
    2942:	d005      	beq.n	2950 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x950>
    2944:	463b      	mov	r3, r7
    2946:	2120      	movs	r1, #32
    2948:	2004      	movs	r0, #4
    294a:	f7ff f859 	bl	1a00 <MPSL_IRQ_RADIO_Handler+0x40>
    294e:	4604      	mov	r4, r0
    2950:	42ac      	cmp	r4, r5
    2952:	d10f      	bne.n	2974 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x974>
    2954:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    2958:	2820      	cmp	r0, #32
    295a:	d00f      	beq.n	297c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x97c>
    295c:	9900      	ldr	r1, [sp, #0]
    295e:	f8da 0008 	ldr.w	r0, [sl, #8]
    2962:	1c89      	adds	r1, r1, #2
    2964:	1a08      	subs	r0, r1, r0
    2966:	0200      	lsls	r0, r0, #8
    2968:	17c1      	asrs	r1, r0, #31
    296a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    296e:	1200      	asrs	r0, r0, #8
    2970:	2800      	cmp	r0, #0
    2972:	dd03      	ble.n	297c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x97c>
    2974:	b003      	add	sp, #12
    2976:	2000      	movs	r0, #0
    2978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    297c:	2d20      	cmp	r5, #32
    297e:	d016      	beq.n	29ae <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9ae>
    2980:	462a      	mov	r2, r5
    2982:	4641      	mov	r1, r8
    2984:	9800      	ldr	r0, [sp, #0]
    2986:	f7ff fb1f 	bl	1fc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>
    298a:	2800      	cmp	r0, #0
    298c:	bf1f      	itttt	ne
    298e:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    2992:	2002      	movne	r0, #2
    2994:	b003      	addne	sp, #12
    2996:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    299a:	463b      	mov	r3, r7
    299c:	462a      	mov	r2, r5
    299e:	2120      	movs	r1, #32
    29a0:	2004      	movs	r0, #4
    29a2:	f7ff f82d 	bl	1a00 <MPSL_IRQ_RADIO_Handler+0x40>
    29a6:	b003      	add	sp, #12
    29a8:	2000      	movs	r0, #0
    29aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29ae:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    29b2:	b118      	cbz	r0, 29bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9bc>
    29b4:	f002 f94a 	bl	4c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    29b8:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    29bc:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    29c0:	b120      	cbz	r0, 29cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9cc>
    29c2:	2005      	movs	r0, #5
    29c4:	f001 fe2a 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29c8:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    29cc:	2004      	movs	r0, #4
    29ce:	f001 fe25 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29d2:	f001 fe93 	bl	46fc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    29d6:	2020      	movs	r0, #32
    29d8:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    29dc:	4808      	ldr	r0, [pc, #32]	; (2a00 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa00>)
    29de:	6880      	ldr	r0, [r0, #8]
    29e0:	f8c0 b000 	str.w	fp, [r0]
    29e4:	4807      	ldr	r0, [pc, #28]	; (2a04 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa04>)
    29e6:	f8c0 b000 	str.w	fp, [r0]
    29ea:	b003      	add	sp, #12
    29ec:	2001      	movs	r0, #1
    29ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29f2:	0000      	.short	0x0000
    29f4:	20000fb4 	.word	0x20000fb4
    29f8:	20000bb4 	.word	0x20000bb4
    29fc:	20000f34 	.word	0x20000f34
    2a00:	2000003c 	.word	0x2000003c
    2a04:	40000508 	.word	0x40000508

00002a08 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2a08:	4906      	ldr	r1, [pc, #24]	; (2a24 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    2a0a:	b510      	push	{r4, lr}
    2a0c:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    2a10:	2a20      	cmp	r2, #32
    2a12:	bf1c      	itt	ne
    2a14:	7788      	strbne	r0, [r1, #30]
    2a16:	bd10      	popne	{r4, pc}
    2a18:	f240 317a 	movw	r1, #890	; 0x37a
    2a1c:	2070      	movs	r0, #112	; 0x70
    2a1e:	f002 fab9 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a22:	0000      	.short	0x0000
    2a24:	20000fb4 	.word	0x20000fb4

00002a28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a2c:	4e69      	ldr	r6, [pc, #420]	; (2bd4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    2a2e:	4607      	mov	r7, r0
    2a30:	b08d      	sub	sp, #52	; 0x34
    2a32:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    2a36:	4688      	mov	r8, r1
    2a38:	2820      	cmp	r0, #32
    2a3a:	d055      	beq.n	2ae8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    2a3c:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    2a40:	f106 0408 	add.w	r4, r6, #8
    2a44:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a48:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    2a4c:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    2a50:	2020      	movs	r0, #32
    2a52:	f88d 0020 	strb.w	r0, [sp, #32]
    2a56:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    2a5a:	aa0a      	add	r2, sp, #40	; 0x28
    2a5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2a60:	4430      	add	r0, r6
    2a62:	a909      	add	r1, sp, #36	; 0x24
    2a64:	f890 5020 	ldrb.w	r5, [r0, #32]
    2a68:	68f0      	ldr	r0, [r6, #12]
    2a6a:	9002      	str	r0, [sp, #8]
    2a6c:	6830      	ldr	r0, [r6, #0]
    2a6e:	4438      	add	r0, r7
    2a70:	f001 fa08 	bl	3e84 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2a74:	f8da 000c 	ldr.w	r0, [sl, #12]
    2a78:	9909      	ldr	r1, [sp, #36]	; 0x24
    2a7a:	2f65      	cmp	r7, #101	; 0x65
    2a7c:	4408      	add	r0, r1
    2a7e:	d338      	bcc.n	2af2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2a80:	4a55      	ldr	r2, [pc, #340]	; (2bd8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    2a82:	2100      	movs	r1, #0
    2a84:	1bd2      	subs	r2, r2, r7
    2a86:	eb71 0201 	sbcs.w	r2, r1, r1
    2a8a:	d332      	bcc.n	2af2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2a8c:	6822      	ldr	r2, [r4, #0]
    2a8e:	1a82      	subs	r2, r0, r2
    2a90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2a94:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    2a98:	d82b      	bhi.n	2af2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a9e:	6060      	str	r0, [r4, #4]
    2aa0:	4630      	mov	r0, r6
    2aa2:	f884 8010 	strb.w	r8, [r4, #16]
    2aa6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    2aaa:	f10d 0a20 	add.w	sl, sp, #32
    2aae:	2d20      	cmp	r5, #32
    2ab0:	bf1c      	itt	ne
    2ab2:	494a      	ldrne	r1, [pc, #296]	; (2bdc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    2ab4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    2ab8:	d050      	beq.n	2b5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2aba:	bf00      	nop
    2abc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    2ac0:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    2ac4:	6861      	ldr	r1, [r4, #4]
    2ac6:	f8d8 6008 	ldr.w	r6, [r8, #8]
    2aca:	f108 0008 	add.w	r0, r8, #8
    2ace:	1a71      	subs	r1, r6, r1
    2ad0:	0209      	lsls	r1, r1, #8
    2ad2:	17ca      	asrs	r2, r1, #31
    2ad4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2ad8:	1209      	asrs	r1, r1, #8
    2ada:	d42d      	bmi.n	2b38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    2adc:	89c0      	ldrh	r0, [r0, #14]
    2ade:	2800      	cmp	r0, #0
    2ae0:	d03c      	beq.n	2b5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2ae2:	89e0      	ldrh	r0, [r4, #14]
    2ae4:	b148      	cbz	r0, 2afa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    2ae6:	e039      	b.n	2b5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2ae8:	f44f 6133 	mov.w	r1, #2864	; 0xb30
    2aec:	2070      	movs	r0, #112	; 0x70
    2aee:	f002 fa51 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2af2:	b00d      	add	sp, #52	; 0x34
    2af4:	2001      	movs	r0, #1
    2af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2afa:	6820      	ldr	r0, [r4, #0]
    2afc:	900c      	str	r0, [sp, #48]	; 0x30
    2afe:	f002 f89f 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2b02:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2b06:	bf08      	it	eq
    2b08:	200d      	moveq	r0, #13
    2b0a:	d00b      	beq.n	2b24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    2b0c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2b10:	3856      	subs	r0, #86	; 0x56
    2b12:	bf08      	it	eq
    2b14:	201c      	moveq	r0, #28
    2b16:	d005      	beq.n	2b24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    2b18:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2b1c:	389f      	subs	r0, #159	; 0x9f
    2b1e:	bf14      	ite	ne
    2b20:	2000      	movne	r0, #0
    2b22:	2032      	moveq	r0, #50	; 0x32
    2b24:	1c41      	adds	r1, r0, #1
    2b26:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b28:	1a30      	subs	r0, r6, r0
    2b2a:	0200      	lsls	r0, r0, #8
    2b2c:	17c2      	asrs	r2, r0, #31
    2b2e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2b32:	1200      	asrs	r0, r0, #8
    2b34:	4288      	cmp	r0, r1
    2b36:	da11      	bge.n	2b5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2b38:	f88a 5000 	strb.w	r5, [sl]
    2b3c:	f898 1018 	ldrb.w	r1, [r8, #24]
    2b40:	7c20      	ldrb	r0, [r4, #16]
    2b42:	4281      	cmp	r1, r0
    2b44:	d805      	bhi.n	2b52 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    2b46:	9802      	ldr	r0, [sp, #8]
    2b48:	6060      	str	r0, [r4, #4]
    2b4a:	b00d      	add	sp, #52	; 0x34
    2b4c:	2002      	movs	r0, #2
    2b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b52:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    2b56:	7845      	ldrb	r5, [r0, #1]
    2b58:	2d20      	cmp	r5, #32
    2b5a:	d1af      	bne.n	2abc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    2b5c:	2005      	movs	r0, #5
    2b5e:	f001 fd5d 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2b62:	4c1c      	ldr	r4, [pc, #112]	; (2bd4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    2b64:	f04f 30ff 	mov.w	r0, #4294967295
    2b68:	6060      	str	r0, [r4, #4]
    2b6a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    2b6e:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2b72:	2120      	movs	r1, #32
    2b74:	2a20      	cmp	r2, #32
    2b76:	d003      	beq.n	2b80 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    2b78:	2005      	movs	r0, #5
    2b7a:	f7fe ff41 	bl	1a00 <MPSL_IRQ_RADIO_Handler+0x40>
    2b7e:	e004      	b.n	2b8a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    2b80:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    2b84:	4420      	add	r0, r4
    2b86:	f890 0020 	ldrb.w	r0, [r0, #32]
    2b8a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    2b8e:	4913      	ldr	r1, [pc, #76]	; (2bdc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    2b90:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    2b94:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    2b98:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2b9c:	7048      	strb	r0, [r1, #1]
    2b9e:	6820      	ldr	r0, [r4, #0]
    2ba0:	4438      	add	r0, r7
    2ba2:	6020      	str	r0, [r4, #0]
    2ba4:	20ff      	movs	r0, #255	; 0xff
    2ba6:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2baa:	7e60      	ldrb	r0, [r4, #25]
    2bac:	2801      	cmp	r0, #1
    2bae:	d105      	bne.n	2bbc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    2bb0:	68e0      	ldr	r0, [r4, #12]
    2bb2:	1e40      	subs	r0, r0, #1
    2bb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2bb8:	f001 fb94 	bl	42e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2bbc:	f89d 0020 	ldrb.w	r0, [sp, #32]
    2bc0:	2820      	cmp	r0, #32
    2bc2:	d003      	beq.n	2bcc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    2bc4:	4806      	ldr	r0, [pc, #24]	; (2be0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    2bc6:	7840      	ldrb	r0, [r0, #1]
    2bc8:	f002 fab8 	bl	513c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2bcc:	b00d      	add	sp, #52	; 0x34
    2bce:	2000      	movs	r0, #0
    2bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bd4:	20000fb4 	.word	0x20000fb4
    2bd8:	0f424000 	.word	0x0f424000
    2bdc:	20000f34 	.word	0x20000f34
    2be0:	2000003c 	.word	0x2000003c

00002be4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    2be4:	4806      	ldr	r0, [pc, #24]	; (2c00 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    2be6:	b510      	push	{r4, lr}
    2be8:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    2bec:	2920      	cmp	r1, #32
    2bee:	bf1c      	itt	ne
    2bf0:	7e00      	ldrbne	r0, [r0, #24]
    2bf2:	bd10      	popne	{r4, pc}
    2bf4:	f640 312a 	movw	r1, #2858	; 0xb2a
    2bf8:	2070      	movs	r0, #112	; 0x70
    2bfa:	f002 f9cb 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bfe:	0000      	.short	0x0000
    2c00:	20000fb4 	.word	0x20000fb4

00002c04 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    2c04:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    2c08:	b570      	push	{r4, r5, r6, lr}
    2c0a:	4807      	ldr	r0, [pc, #28]	; (2c28 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    2c0c:	4a07      	ldr	r2, [pc, #28]	; (2c2c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x28>)
    2c0e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2c12:	6901      	ldr	r1, [r0, #16]
    2c14:	3008      	adds	r0, #8
    2c16:	fba1 4502 	umull	r4, r5, r1, r2
    2c1a:	f7ff fdcf 	bl	27bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7bc>
    2c1e:	1900      	adds	r0, r0, r4
    2c20:	f145 0100 	adc.w	r1, r5, #0
    2c24:	bd70      	pop	{r4, r5, r6, pc}
    2c26:	0000      	.short	0x0000
    2c28:	20000bb4 	.word	0x20000bb4
    2c2c:	1e848000 	.word	0x1e848000

00002c30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c32:	4d6b      	ldr	r5, [pc, #428]	; (2de0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    2c34:	4a6b      	ldr	r2, [pc, #428]	; (2de4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    2c36:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    2c3a:	2601      	movs	r6, #1
    2c3c:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    2c40:	2808      	cmp	r0, #8
    2c42:	d27c      	bcs.n	2d3e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    2c44:	e8df f000 	tbb	[pc, r0]
    2c48:	a9977004 	.word	0xa9977004
    2c4c:	b3ae41c7 	.word	0xb3ae41c7
    2c50:	b919      	cbnz	r1, 2c5a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2c52:	f002 f817 	bl	4c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2c56:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2c5a:	8ae0      	ldrh	r0, [r4, #22]
    2c5c:	b110      	cbz	r0, 2c64 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2c5e:	f002 f921 	bl	4ea4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2c62:	b180      	cbz	r0, 2c86 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    2c64:	f7ff fcf8 	bl	2658 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x658>
    2c68:	20ff      	movs	r0, #255	; 0xff
    2c6a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2c6e:	6861      	ldr	r1, [r4, #4]
    2c70:	f1b1 3fff 	cmp.w	r1, #4294967295
    2c74:	d003      	beq.n	2c7e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    2c76:	2005      	movs	r0, #5
    2c78:	f001 fc1a 	bl	44b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2c7c:	b140      	cbz	r0, 2c90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    2c7e:	7e60      	ldrb	r0, [r4, #25]
    2c80:	2801      	cmp	r0, #1
    2c82:	d110      	bne.n	2ca6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    2c84:	e009      	b.n	2c9a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    2c86:	f640 0134 	movw	r1, #2100	; 0x834
    2c8a:	2070      	movs	r0, #112	; 0x70
    2c8c:	f002 f982 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c90:	f640 0139 	movw	r1, #2105	; 0x839
    2c94:	2070      	movs	r0, #112	; 0x70
    2c96:	f002 f97d 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c9a:	68e0      	ldr	r0, [r4, #12]
    2c9c:	1e40      	subs	r0, r0, #1
    2c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ca2:	f001 fb1f 	bl	42e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2ca6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2caa:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2cae:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2cb2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2cb6:	6840      	ldr	r0, [r0, #4]
    2cb8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2cbc:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2cc0:	b001      	add	sp, #4
    2cc2:	2101      	movs	r1, #1
    2cc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2cc8:	4710      	bx	r2
    2cca:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2cce:	b140      	cbz	r0, 2ce2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    2cd0:	b919      	cbnz	r1, 2cda <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    2cd2:	f001 ffd7 	bl	4c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2cd6:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2cda:	2000      	movs	r0, #0
    2cdc:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ce2:	f7ff fcb9 	bl	2658 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x658>
    2ce6:	f04f 30ff 	mov.w	r0, #4294967295
    2cea:	6060      	str	r0, [r4, #4]
    2cec:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2cf0:	f88d 0000 	strb.w	r0, [sp]
    2cf4:	f89d 0000 	ldrb.w	r0, [sp]
    2cf8:	b188      	cbz	r0, 2d1e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    2cfa:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2cfe:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2d02:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2d06:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2d0a:	6840      	ldr	r0, [r0, #4]
    2d0c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2d10:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2d14:	b001      	add	sp, #4
    2d16:	2106      	movs	r1, #6
    2d18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2d1c:	4710      	bx	r2
    2d1e:	f44f 6105 	mov.w	r1, #2128	; 0x850
    2d22:	2070      	movs	r0, #112	; 0x70
    2d24:	f002 f936 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d28:	f7ff fc96 	bl	2658 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x658>
    2d2c:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    2d30:	f002 f8b8 	bl	4ea4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2d34:	b120      	cbz	r0, 2d40 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    2d36:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2d3a:	b130      	cbz	r0, 2d4a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    2d3c:	e009      	b.n	2d52 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    2d3e:	e04a      	b.n	2dd6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    2d40:	f640 015e 	movw	r1, #2142	; 0x85e
    2d44:	2070      	movs	r0, #112	; 0x70
    2d46:	f002 f925 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d4a:	f001 ff9b 	bl	4c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2d4e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2d52:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2d56:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2d5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2d5e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2d62:	6840      	ldr	r0, [r0, #4]
    2d64:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2d68:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2d6c:	b001      	add	sp, #4
    2d6e:	2100      	movs	r1, #0
    2d70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2d74:	4710      	bx	r2
    2d76:	f001 fd77 	bl	4868 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2d7a:	8ae0      	ldrh	r0, [r4, #22]
    2d7c:	b110      	cbz	r0, 2d84 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    2d7e:	f002 f891 	bl	4ea4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2d82:	b128      	cbz	r0, 2d90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    2d84:	f001 fd84 	bl	4890 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    2d88:	2800      	cmp	r0, #0
    2d8a:	bf18      	it	ne
    2d8c:	7766      	strbne	r6, [r4, #29]
    2d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d90:	f640 0168 	movw	r1, #2152	; 0x868
    2d94:	2070      	movs	r0, #112	; 0x70
    2d96:	f002 f8fd 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d9a:	4813      	ldr	r0, [pc, #76]	; (2de8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2d9c:	6006      	str	r6, [r0, #0]
    2d9e:	6890      	ldr	r0, [r2, #8]
    2da0:	6006      	str	r6, [r0, #0]
    2da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2da4:	7810      	ldrb	r0, [r2, #0]
    2da6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2daa:	f002 b9c7 	b.w	513c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2dae:	f7ff fc53 	bl	2658 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x658>
    2db2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2db6:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2dba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2dbe:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2dc2:	6840      	ldr	r0, [r0, #4]
    2dc4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2dc8:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2dcc:	b001      	add	sp, #4
    2dce:	2105      	movs	r1, #5
    2dd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2dd4:	4710      	bx	r2
    2dd6:	f640 017b 	movw	r1, #2171	; 0x87b
    2dda:	2070      	movs	r0, #112	; 0x70
    2ddc:	f002 f8da 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2de0:	20000bb4 	.word	0x20000bb4
    2de4:	2000003c 	.word	0x2000003c
    2de8:	40000508 	.word	0x40000508

00002dec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2dec:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2df0:	4682      	mov	sl, r0
    2df2:	48f0      	ldr	r0, [pc, #960]	; (31b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    2df4:	b095      	sub	sp, #84	; 0x54
    2df6:	6800      	ldr	r0, [r0, #0]
    2df8:	4def      	ldr	r5, [pc, #956]	; (31b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    2dfa:	05c0      	lsls	r0, r0, #23
    2dfc:	0dc0      	lsrs	r0, r0, #23
    2dfe:	d00e      	beq.n	2e1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2e00:	3810      	subs	r0, #16
    2e02:	b240      	sxtb	r0, r0
    2e04:	2800      	cmp	r0, #0
    2e06:	bfb8      	it	lt
    2e08:	f000 000f 	andlt.w	r0, r0, #15
    2e0c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2e10:	bfac      	ite	ge
    2e12:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2e16:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2e1a:	0940      	lsrs	r0, r0, #5
    2e1c:	d00d      	beq.n	2e3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    2e1e:	9816      	ldr	r0, [sp, #88]	; 0x58
    2e20:	f04f 0b00 	mov.w	fp, #0
    2e24:	7800      	ldrb	r0, [r0, #0]
    2e26:	2800      	cmp	r0, #0
    2e28:	bf18      	it	ne
    2e2a:	2801      	cmpne	r0, #1
    2e2c:	d018      	beq.n	2e60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2e2e:	f240 7104 	movw	r1, #1796	; 0x704
    2e32:	f04f 0070 	mov.w	r0, #112	; 0x70
    2e36:	f002 f8ad 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e3a:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2e3e:	f04f 0b01 	mov.w	fp, #1
    2e42:	2820      	cmp	r0, #32
    2e44:	d007      	beq.n	2e56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    2e46:	9816      	ldr	r0, [sp, #88]	; 0x58
    2e48:	7800      	ldrb	r0, [r0, #0]
    2e4a:	b148      	cbz	r0, 2e60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2e4c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    2e50:	2070      	movs	r0, #112	; 0x70
    2e52:	f002 f89f 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e56:	f240 61fd 	movw	r1, #1789	; 0x6fd
    2e5a:	2070      	movs	r0, #112	; 0x70
    2e5c:	f002 f89a 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e60:	4cd6      	ldr	r4, [pc, #856]	; (31bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    2e62:	b124      	cbz	r4, 2e6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2e64:	2100      	movs	r1, #0
    2e66:	f240 7007 	movw	r0, #1799	; 0x707
    2e6a:	f3af 8000 	nop.w
    2e6e:	2000      	movs	r0, #0
    2e70:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    2e74:	49d2      	ldr	r1, [pc, #840]	; (31c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    2e76:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    2e7a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2e7e:	f04f 0901 	mov.w	r9, #1
    2e82:	9000      	str	r0, [sp, #0]
    2e84:	b124      	cbz	r4, 2e90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2e86:	2100      	movs	r1, #0
    2e88:	f240 7012 	movw	r0, #1810	; 0x712
    2e8c:	f3af 8000 	nop.w
    2e90:	f1b9 0f00 	cmp.w	r9, #0
    2e94:	d00a      	beq.n	2eac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    2e96:	bf00      	nop
    2e98:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    2e9c:	f04f 0800 	mov.w	r8, #0
    2ea0:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2ea4:	f1bb 0f00 	cmp.w	fp, #0
    2ea8:	d007      	beq.n	2eba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    2eaa:	e038      	b.n	2f1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    2eac:	48c5      	ldr	r0, [pc, #788]	; (31c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    2eae:	2800      	cmp	r0, #0
    2eb0:	bf18      	it	ne
    2eb2:	f3af 8000 	nopne.w
    2eb6:	b662      	cpsie	i
    2eb8:	e7ee      	b.n	2e98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    2eba:	4637      	mov	r7, r6
    2ebc:	2001      	movs	r0, #1
    2ebe:	ea20 0607 	bic.w	r6, r0, r7
    2ec2:	48c1      	ldr	r0, [pc, #772]	; (31c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    2ec4:	2240      	movs	r2, #64	; 0x40
    2ec6:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2eca:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2ece:	f00a fca3 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2ed2:	b124      	cbz	r4, 2ede <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    2ed4:	2100      	movs	r1, #0
    2ed6:	f240 502f 	movw	r0, #1327	; 0x52f
    2eda:	f3af 8000 	nop.w
    2ede:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    2ee2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2ee6:	4429      	add	r1, r5
    2ee8:	4428      	add	r0, r5
    2eea:	8c0a      	ldrh	r2, [r1, #32]
    2eec:	8402      	strh	r2, [r0, #32]
    2eee:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2ef2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2ef6:	b124      	cbz	r4, 2f02 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    2ef8:	2100      	movs	r1, #0
    2efa:	f240 5033 	movw	r0, #1331	; 0x533
    2efe:	f3af 8000 	nop.w
    2f02:	b124      	cbz	r4, 2f0e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    2f04:	2100      	movs	r1, #0
    2f06:	f240 701c 	movw	r0, #1820	; 0x71c
    2f0a:	f3af 8000 	nop.w
    2f0e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2f12:	f88d 0008 	strb.w	r0, [sp, #8]
    2f16:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2f1a:	2800      	cmp	r0, #0
    2f1c:	d1b2      	bne.n	2e84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2f1e:	b124      	cbz	r4, 2f2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    2f20:	2100      	movs	r1, #0
    2f22:	f240 7026 	movw	r0, #1830	; 0x726
    2f26:	f3af 8000 	nop.w
    2f2a:	a802      	add	r0, sp, #8
    2f2c:	f001 f91a 	bl	4164 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2f34:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    2f38:	4633      	mov	r3, r6
    2f3a:	aa09      	add	r2, sp, #36	; 0x24
    2f3c:	a80e      	add	r0, sp, #56	; 0x38
    2f3e:	9916      	ldr	r1, [sp, #88]	; 0x58
    2f40:	f7ff faae 	bl	24a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4a0>
    2f44:	b124      	cbz	r4, 2f50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    2f46:	2100      	movs	r1, #0
    2f48:	f240 702d 	movw	r0, #1837	; 0x72d
    2f4c:	f3af 8000 	nop.w
    2f50:	4a9d      	ldr	r2, [pc, #628]	; (31c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    2f52:	990e      	ldr	r1, [sp, #56]	; 0x38
    2f54:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    2f58:	a809      	add	r0, sp, #36	; 0x24
    2f5a:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    2f5e:	2a01      	cmp	r2, #1
    2f60:	bf18      	it	ne
    2f62:	2a02      	cmpne	r2, #2
    2f64:	d138      	bne.n	2fd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    2f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2f6a:	eba2 0201 	sub.w	r2, r2, r1
    2f6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2f72:	eba3 0101 	sub.w	r1, r3, r1
    2f76:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    2f7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2f7e:	2a02      	cmp	r2, #2
    2f80:	d364      	bcc.n	304c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    2f82:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    2f86:	bf98      	it	ls
    2f88:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2f8c:	d85e      	bhi.n	304c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    2f8e:	f04f 0801 	mov.w	r8, #1
    2f92:	ab14      	add	r3, sp, #80	; 0x50
    2f94:	aa13      	add	r2, sp, #76	; 0x4c
    2f96:	4631      	mov	r1, r6
    2f98:	f7fe ff20 	bl	1ddc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    2f9c:	2800      	cmp	r0, #0
    2f9e:	d05d      	beq.n	305c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    2fa0:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    2fa4:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    2fa8:	4633      	mov	r3, r6
    2faa:	428a      	cmp	r2, r1
    2fac:	d05a      	beq.n	3064 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    2fae:	2005      	movs	r0, #5
    2fb0:	f7fe fd26 	bl	1a00 <MPSL_IRQ_RADIO_Handler+0x40>
    2fb4:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2fb8:	7048      	strb	r0, [r1, #1]
    2fba:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2fbe:	2820      	cmp	r0, #32
    2fc0:	bf1c      	itt	ne
    2fc2:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2fc6:	f880 a001 	strbne.w	sl, [r0, #1]
    2fca:	d057      	beq.n	307c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    2fcc:	4632      	mov	r2, r6
    2fce:	4651      	mov	r1, sl
    2fd0:	f05f 0003 	movs.w	r0, #3
    2fd4:	f7ff fc2c 	bl	2830 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x830>
    2fd8:	b124      	cbz	r4, 2fe4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    2fda:	2100      	movs	r1, #0
    2fdc:	f240 7032 	movw	r0, #1842	; 0x732
    2fe0:	f3af 8000 	nop.w
    2fe4:	4879      	ldr	r0, [pc, #484]	; (31cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    2fe6:	2800      	cmp	r0, #0
    2fe8:	bf18      	it	ne
    2fea:	f3af 8000 	nopne.w
    2fee:	f3ef 8910 	mrs	r9, PRIMASK
    2ff2:	b672      	cpsid	i
    2ff4:	b124      	cbz	r4, 3000 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    2ff6:	2100      	movs	r1, #0
    2ff8:	f44f 60e7 	mov.w	r0, #1848	; 0x738
    2ffc:	f3af 8000 	nop.w
    3000:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    3004:	f88d 0008 	strb.w	r0, [sp, #8]
    3008:	f89d 0008 	ldrb.w	r0, [sp, #8]
    300c:	2800      	cmp	r0, #0
    300e:	f47f af39 	bne.w	2e84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    3012:	b124      	cbz	r4, 301e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    3014:	2100      	movs	r1, #0
    3016:	f44f 60e8 	mov.w	r0, #1856	; 0x740
    301a:	f3af 8000 	nop.w
    301e:	af09      	add	r7, sp, #36	; 0x24
    3020:	9800      	ldr	r0, [sp, #0]
    3022:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    3026:	f100 0708 	add.w	r7, r0, #8
    302a:	f1b8 0f00 	cmp.w	r8, #0
    302e:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    3032:	990d      	ldr	r1, [sp, #52]	; 0x34
    3034:	6181      	str	r1, [r0, #24]
    3036:	d053      	beq.n	30e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    3038:	b124      	cbz	r4, 3044 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    303a:	2100      	movs	r1, #0
    303c:	f240 704d 	movw	r0, #1869	; 0x74d
    3040:	f3af 8000 	nop.w
    3044:	f1bb 0f00 	cmp.w	fp, #0
    3048:	d13a      	bne.n	30c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    304a:	e01f      	b.n	308c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    304c:	4632      	mov	r2, r6
    304e:	4651      	mov	r1, sl
    3050:	2004      	movs	r0, #4
    3052:	f7ff fbed 	bl	2830 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x830>
    3056:	f04f 0801 	mov.w	r8, #1
    305a:	e7bd      	b.n	2fd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    305c:	4632      	mov	r2, r6
    305e:	4651      	mov	r1, sl
    3060:	2004      	movs	r0, #4
    3062:	e7b7      	b.n	2fd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    3064:	2920      	cmp	r1, #32
    3066:	bf19      	ittee	ne
    3068:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    306c:	7840      	ldrbne	r0, [r0, #1]
    306e:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    3072:	4428      	addeq	r0, r5
    3074:	bf08      	it	eq
    3076:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    307a:	e79b      	b.n	2fb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    307c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    3080:	4429      	add	r1, r5
    3082:	f881 a020 	strb.w	sl, [r1, #32]
    3086:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    308a:	e79f      	b.n	2fcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    308c:	9811      	ldr	r0, [sp, #68]	; 0x44
    308e:	f010 0fff 	tst.w	r0, #255	; 0xff
    3092:	d015      	beq.n	30c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    3094:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    3098:	2820      	cmp	r0, #32
    309a:	d111      	bne.n	30c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    309c:	b124      	cbz	r4, 30a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    309e:	2100      	movs	r1, #0
    30a0:	f240 7052 	movw	r0, #1874	; 0x752
    30a4:	f3af 8000 	nop.w
    30a8:	4632      	mov	r2, r6
    30aa:	2102      	movs	r1, #2
    30ac:	980e      	ldr	r0, [sp, #56]	; 0x38
    30ae:	f7ff fbf1 	bl	2894 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x894>
    30b2:	9010      	str	r0, [sp, #64]	; 0x40
    30b4:	b920      	cbnz	r0, 30c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    30b6:	9816      	ldr	r0, [sp, #88]	; 0x58
    30b8:	7800      	ldrb	r0, [r0, #0]
    30ba:	b1f0      	cbz	r0, 30fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    30bc:	2801      	cmp	r0, #1
    30be:	d02b      	beq.n	3118 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    30c0:	b124      	cbz	r4, 30cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>
    30c2:	2100      	movs	r1, #0
    30c4:	f240 706f 	movw	r0, #1903	; 0x76f
    30c8:	f3af 8000 	nop.w
    30cc:	20ff      	movs	r0, #255	; 0xff
    30ce:	f1bb 0f00 	cmp.w	fp, #0
    30d2:	bf18      	it	ne
    30d4:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    30d8:	d027      	beq.n	312a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    30da:	bf00      	nop
    30dc:	f04f 0801 	mov.w	r8, #1
    30e0:	b124      	cbz	r4, 30ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x300>
    30e2:	2100      	movs	r1, #0
    30e4:	f44f 60f0 	mov.w	r0, #1920	; 0x780
    30e8:	f3af 8000 	nop.w
    30ec:	9810      	ldr	r0, [sp, #64]	; 0x40
    30ee:	4e38      	ldr	r6, [pc, #224]	; (31d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    30f0:	2802      	cmp	r0, #2
    30f2:	d023      	beq.n	313c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>
    30f4:	2801      	cmp	r0, #1
    30f6:	d029      	beq.n	314c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>
    30f8:	e02d      	b.n	3156 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    30fa:	b124      	cbz	r4, 3106 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31a>
    30fc:	2100      	movs	r1, #0
    30fe:	f240 705a 	movw	r0, #1882	; 0x75a
    3102:	f3af 8000 	nop.w
    3106:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    310a:	4651      	mov	r1, sl
    310c:	2004      	movs	r0, #4
    310e:	f7ff fb8f 	bl	2830 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x830>
    3112:	f04f 0801 	mov.w	r8, #1
    3116:	e7e3      	b.n	30e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    3118:	2c00      	cmp	r4, #0
    311a:	f43f aeb3 	beq.w	2e84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    311e:	2100      	movs	r1, #0
    3120:	f240 7065 	movw	r0, #1893	; 0x765
    3124:	f3af 8000 	nop.w
    3128:	e6ac      	b.n	2e84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    312a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    312e:	2101      	movs	r1, #1
    3130:	4391      	bics	r1, r2
    3132:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    3136:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    313a:	e7cf      	b.n	30dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    313c:	68a8      	ldr	r0, [r5, #8]
    313e:	990e      	ldr	r1, [sp, #56]	; 0x38
    3140:	1a40      	subs	r0, r0, r1
    3142:	f00a fa0f 	bl	d564 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3146:	6871      	ldr	r1, [r6, #4]
    3148:	b921      	cbnz	r1, 3154 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    314a:	e004      	b.n	3156 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    314c:	6871      	ldr	r1, [r6, #4]
    314e:	f04f 30ff 	mov.w	r0, #4294967295
    3152:	b101      	cbz	r1, 3156 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    3154:	4788      	blx	r1
    3156:	f1b9 0f00 	cmp.w	r9, #0
    315a:	d024      	beq.n	31a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    315c:	b124      	cbz	r4, 3168 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>
    315e:	2100      	movs	r1, #0
    3160:	f44f 60f2 	mov.w	r0, #1936	; 0x790
    3164:	f3af 8000 	nop.w
    3168:	f1b8 0f00 	cmp.w	r8, #0
    316c:	d011      	beq.n	3192 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    316e:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    3172:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3176:	4428      	add	r0, r5
    3178:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    317c:	2820      	cmp	r0, #32
    317e:	d008      	beq.n	3192 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    3180:	b124      	cbz	r4, 318c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
    3182:	2100      	movs	r1, #0
    3184:	f240 7097 	movw	r0, #1943	; 0x797
    3188:	f3af 8000 	nop.w
    318c:	7870      	ldrb	r0, [r6, #1]
    318e:	f001 ffd5 	bl	513c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3192:	b124      	cbz	r4, 319e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    3194:	2100      	movs	r1, #0
    3196:	f240 709c 	movw	r0, #1948	; 0x79c
    319a:	f3af 8000 	nop.w
    319e:	b017      	add	sp, #92	; 0x5c
    31a0:	4640      	mov	r0, r8
    31a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31a6:	4807      	ldr	r0, [pc, #28]	; (31c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    31a8:	2800      	cmp	r0, #0
    31aa:	bf18      	it	ne
    31ac:	f3af 8000 	nopne.w
    31b0:	b662      	cpsie	i
    31b2:	e7d3      	b.n	315c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    31b4:	e000ed04 	.word	0xe000ed04
    31b8:	20000fb4 	.word	0x20000fb4
    31bc:	00000000 	.word	0x00000000
    31c0:	20000bb4 	.word	0x20000bb4
    31c4:	00000000 	.word	0x00000000
    31c8:	20000f34 	.word	0x20000f34
    31cc:	00000000 	.word	0x00000000
    31d0:	2000003c 	.word	0x2000003c

000031d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    31d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31d8:	48c9      	ldr	r0, [pc, #804]	; (3500 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x32c>)
    31da:	b08a      	sub	sp, #40	; 0x28
    31dc:	6800      	ldr	r0, [r0, #0]
    31de:	05c0      	lsls	r0, r0, #23
    31e0:	0dc0      	lsrs	r0, r0, #23
    31e2:	d011      	beq.n	3208 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    31e4:	3810      	subs	r0, #16
    31e6:	b240      	sxtb	r0, r0
    31e8:	2800      	cmp	r0, #0
    31ea:	bfb8      	it	lt
    31ec:	f000 000f 	andlt.w	r0, r0, #15
    31f0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    31f4:	bfac      	ite	ge
    31f6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    31fa:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    31fe:	0940      	lsrs	r0, r0, #5
    3200:	bf08      	it	eq
    3202:	f04f 0b01 	moveq.w	fp, #1
    3206:	d001      	beq.n	320c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    3208:	f04f 0b00 	mov.w	fp, #0
    320c:	980a      	ldr	r0, [sp, #40]	; 0x28
    320e:	7800      	ldrb	r0, [r0, #0]
    3210:	2800      	cmp	r0, #0
    3212:	bf1e      	ittt	ne
    3214:	2000      	movne	r0, #0
    3216:	b00b      	addne	sp, #44	; 0x2c
    3218:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    321c:	f04f 0a00 	mov.w	sl, #0
    3220:	4db8      	ldr	r5, [pc, #736]	; (3504 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x330>)
    3222:	4cb9      	ldr	r4, [pc, #740]	; (3508 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x334>)
    3224:	46d1      	mov	r9, sl
    3226:	b125      	cbz	r5, 3232 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    3228:	2100      	movs	r1, #0
    322a:	f240 50b9 	movw	r0, #1465	; 0x5b9
    322e:	f3af 8000 	nop.w
    3232:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    3236:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    323a:	f04f 0800 	mov.w	r8, #0
    323e:	b125      	cbz	r5, 324a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    3240:	2100      	movs	r1, #0
    3242:	f240 50be 	movw	r0, #1470	; 0x5be
    3246:	f3af 8000 	nop.w
    324a:	f1bb 0f00 	cmp.w	fp, #0
    324e:	d123      	bne.n	3298 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    3250:	4637      	mov	r7, r6
    3252:	2001      	movs	r0, #1
    3254:	ea20 0607 	bic.w	r6, r0, r7
    3258:	48ac      	ldr	r0, [pc, #688]	; (350c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x338>)
    325a:	2240      	movs	r2, #64	; 0x40
    325c:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    3260:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    3264:	f00a fad8 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3268:	b125      	cbz	r5, 3274 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    326a:	2100      	movs	r1, #0
    326c:	f240 502f 	movw	r0, #1327	; 0x52f
    3270:	f3af 8000 	nop.w
    3274:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    3278:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    327c:	4421      	add	r1, r4
    327e:	4420      	add	r0, r4
    3280:	8c0a      	ldrh	r2, [r1, #32]
    3282:	8402      	strh	r2, [r0, #32]
    3284:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    3288:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    328c:	b125      	cbz	r5, 3298 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    328e:	2100      	movs	r1, #0
    3290:	f240 5033 	movw	r0, #1331	; 0x533
    3294:	f3af 8000 	nop.w
    3298:	b125      	cbz	r5, 32a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd0>
    329a:	2100      	movs	r1, #0
    329c:	f240 50c6 	movw	r0, #1478	; 0x5c6
    32a0:	f3af 8000 	nop.w
    32a4:	a808      	add	r0, sp, #32
    32a6:	f000 ff5d 	bl	4164 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    32aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    32ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
    32b2:	4633      	mov	r3, r6
    32b4:	466a      	mov	r2, sp
    32b6:	a806      	add	r0, sp, #24
    32b8:	990a      	ldr	r1, [sp, #40]	; 0x28
    32ba:	f7ff f8f1 	bl	24a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4a0>
    32be:	b125      	cbz	r5, 32ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xf6>
    32c0:	2100      	movs	r1, #0
    32c2:	f240 50cc 	movw	r0, #1484	; 0x5cc
    32c6:	f3af 8000 	nop.w
    32ca:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    32ce:	2820      	cmp	r0, #32
    32d0:	d019      	beq.n	3306 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    32d2:	68e0      	ldr	r0, [r4, #12]
    32d4:	9900      	ldr	r1, [sp, #0]
    32d6:	1a09      	subs	r1, r1, r0
    32d8:	0209      	lsls	r1, r1, #8
    32da:	17ca      	asrs	r2, r1, #31
    32dc:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    32e0:	1209      	asrs	r1, r1, #8
    32e2:	d510      	bpl.n	3306 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    32e4:	e9dd 2100 	ldrd	r2, r1, [sp]
    32e8:	1a89      	subs	r1, r1, r2
    32ea:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    32ee:	4408      	add	r0, r1
    32f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    32f4:	e9cd 3000 	strd	r3, r0, [sp]
    32f8:	4293      	cmp	r3, r2
    32fa:	d202      	bcs.n	3302 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    32fc:	9802      	ldr	r0, [sp, #8]
    32fe:	1c40      	adds	r0, r0, #1
    3300:	9002      	str	r0, [sp, #8]
    3302:	f04f 0801 	mov.w	r8, #1
    3306:	b14d      	cbz	r5, 331c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x148>
    3308:	2100      	movs	r1, #0
    330a:	f240 50df 	movw	r0, #1503	; 0x5df
    330e:	f3af 8000 	nop.w
    3312:	2100      	movs	r1, #0
    3314:	f240 50e5 	movw	r0, #1509	; 0x5e5
    3318:	f3af 8000 	nop.w
    331c:	9900      	ldr	r1, [sp, #0]
    331e:	9806      	ldr	r0, [sp, #24]
    3320:	9a01      	ldr	r2, [sp, #4]
    3322:	1a09      	subs	r1, r1, r0
    3324:	1a10      	subs	r0, r2, r0
    3326:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    332a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    332e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    3332:	bf98      	it	ls
    3334:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    3338:	d803      	bhi.n	3342 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16e>
    333a:	f1bb 0f00 	cmp.w	fp, #0
    333e:	d10c      	bne.n	335a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x186>
    3340:	e003      	b.n	334a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x176>
    3342:	f1bb 0f00 	cmp.w	fp, #0
    3346:	d039      	beq.n	33bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e8>
    3348:	e0c0      	b.n	34cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    334a:	4633      	mov	r3, r6
    334c:	4669      	mov	r1, sp
    334e:	4870      	ldr	r0, [pc, #448]	; (3510 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    3350:	9a06      	ldr	r2, [sp, #24]
    3352:	f7fe fb91 	bl	1a78 <MPSL_IRQ_RADIO_Handler+0xb8>
    3356:	ea48 0800 	orr.w	r8, r8, r0
    335a:	f1b8 0f00 	cmp.w	r8, #0
    335e:	d023      	beq.n	33a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    3360:	9800      	ldr	r0, [sp, #0]
    3362:	f00a f8ff 	bl	d564 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3366:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    336a:	f89d 200c 	ldrb.w	r2, [sp, #12]
    336e:	4b69      	ldr	r3, [pc, #420]	; (3514 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    3370:	4411      	add	r1, r2
    3372:	1c49      	adds	r1, r1, #1
    3374:	1842      	adds	r2, r0, r1
    3376:	4298      	cmp	r0, r3
    3378:	d856      	bhi.n	3428 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    337a:	4865      	ldr	r0, [pc, #404]	; (3510 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    337c:	4281      	cmp	r1, r0
    337e:	dc7c      	bgt.n	347a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a6>
    3380:	4240      	negs	r0, r0
    3382:	4281      	cmp	r1, r0
    3384:	db7a      	blt.n	347c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>
    3386:	1c58      	adds	r0, r3, #1
    3388:	4290      	cmp	r0, r2
    338a:	bfdc      	itt	le
    338c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    3390:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    3394:	dd05      	ble.n	33a2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ce>
    3396:	2a00      	cmp	r2, #0
    3398:	bfbc      	itt	lt
    339a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    339e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    33a2:	980a      	ldr	r0, [sp, #40]	; 0x28
    33a4:	e9c0 2904 	strd	r2, r9, [r0, #16]
    33a8:	f04f 0a01 	mov.w	sl, #1
    33ac:	2d00      	cmp	r5, #0
    33ae:	d07c      	beq.n	34aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d6>
    33b0:	2100      	movs	r1, #0
    33b2:	f44f 60bf 	mov.w	r0, #1528	; 0x5f8
    33b6:	f3af 8000 	nop.w
    33ba:	e087      	b.n	34cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    33bc:	9807      	ldr	r0, [sp, #28]
    33be:	9002      	str	r0, [sp, #8]
    33c0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    33c4:	aa08      	add	r2, sp, #32
    33c6:	a905      	add	r1, sp, #20
    33c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
    33cc:	f000 fd5a 	bl	3e84 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    33d0:	f001 fa68 	bl	48a4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    33d4:	f000 fd3a 	bl	3e4c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    33d8:	4607      	mov	r7, r0
    33da:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    33de:	2820      	cmp	r0, #32
    33e0:	d027      	beq.n	3432 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    33e2:	68e0      	ldr	r0, [r4, #12]
    33e4:	1d40      	adds	r0, r0, #5
    33e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    33ea:	bf00      	nop
    33ec:	e9dd 2100 	ldrd	r2, r1, [sp]
    33f0:	1a89      	subs	r1, r1, r2
    33f2:	9000      	str	r0, [sp, #0]
    33f4:	4408      	add	r0, r1
    33f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    33fa:	9001      	str	r0, [sp, #4]
    33fc:	9800      	ldr	r0, [sp, #0]
    33fe:	4540      	cmp	r0, r8
    3400:	d202      	bcs.n	3408 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    3402:	9802      	ldr	r0, [sp, #8]
    3404:	1c40      	adds	r0, r0, #1
    3406:	9002      	str	r0, [sp, #8]
    3408:	201f      	movs	r0, #31
    340a:	f88d 000c 	strb.w	r0, [sp, #12]
    340e:	9800      	ldr	r0, [sp, #0]
    3410:	f00a f8a8 	bl	d564 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3414:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    3418:	f89d 200c 	ldrb.w	r2, [sp, #12]
    341c:	4b3d      	ldr	r3, [pc, #244]	; (3514 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    341e:	4411      	add	r1, r2
    3420:	1c49      	adds	r1, r1, #1
    3422:	1842      	adds	r2, r0, r1
    3424:	4298      	cmp	r0, r3
    3426:	d92a      	bls.n	347e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2aa>
    3428:	f240 516f 	movw	r1, #1391	; 0x56f
    342c:	2070      	movs	r0, #112	; 0x70
    342e:	f001 fdb1 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3432:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    3436:	f108 0609 	add.w	r6, r8, #9
    343a:	b1b0      	cbz	r0, 346a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    343c:	f001 fd32 	bl	4ea4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3440:	b998      	cbnz	r0, 346a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    3442:	f001 fbfd 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    3446:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    344a:	bf08      	it	eq
    344c:	200d      	moveq	r0, #13
    344e:	d00b      	beq.n	3468 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    3450:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    3454:	3856      	subs	r0, #86	; 0x56
    3456:	bf08      	it	eq
    3458:	201c      	moveq	r0, #28
    345a:	d005      	beq.n	3468 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    345c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    3460:	389f      	subs	r0, #159	; 0x9f
    3462:	bf14      	ite	ne
    3464:	4648      	movne	r0, r9
    3466:	2032      	moveq	r0, #50	; 0x32
    3468:	4406      	add	r6, r0
    346a:	9805      	ldr	r0, [sp, #20]
    346c:	4287      	cmp	r7, r0
    346e:	bf84      	itt	hi
    3470:	1a38      	subhi	r0, r7, r0
    3472:	4406      	addhi	r6, r0
    3474:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    3478:	e7b8      	b.n	33ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x218>
    347a:	e003      	b.n	3484 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>
    347c:	e00a      	b.n	3494 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>
    347e:	4824      	ldr	r0, [pc, #144]	; (3510 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    3480:	4281      	cmp	r1, r0
    3482:	dd04      	ble.n	348e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ba>
    3484:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    3488:	2070      	movs	r0, #112	; 0x70
    348a:	f001 fd83 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    348e:	4822      	ldr	r0, [pc, #136]	; (3518 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x344>)
    3490:	4281      	cmp	r1, r0
    3492:	da04      	bge.n	349e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ca>
    3494:	f240 5171 	movw	r1, #1393	; 0x571
    3498:	2070      	movs	r0, #112	; 0x70
    349a:	f001 fd7b 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    349e:	481f      	ldr	r0, [pc, #124]	; (351c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    34a0:	4290      	cmp	r0, r2
    34a2:	bfd8      	it	le
    34a4:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    34a8:	e000      	b.n	34ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d8>
    34aa:	e00f      	b.n	34cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    34ac:	bfd8      	it	le
    34ae:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    34b2:	dd05      	ble.n	34c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ec>
    34b4:	2a00      	cmp	r2, #0
    34b6:	bfbc      	itt	lt
    34b8:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    34bc:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    34c0:	980a      	ldr	r0, [sp, #40]	; 0x28
    34c2:	f04f 0a01 	mov.w	sl, #1
    34c6:	46d0      	mov	r8, sl
    34c8:	e9c0 2904 	strd	r2, r9, [r0, #16]
    34cc:	ea1a 0f08 	tst.w	sl, r8
    34d0:	d009      	beq.n	34e6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x312>
    34d2:	980a      	ldr	r0, [sp, #40]	; 0x28
    34d4:	4911      	ldr	r1, [pc, #68]	; (351c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    34d6:	9b02      	ldr	r3, [sp, #8]
    34d8:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
    34dc:	fbe3 2001 	umlal	r2, r0, r3, r1
    34e0:	990a      	ldr	r1, [sp, #40]	; 0x28
    34e2:	e9c1 2004 	strd	r2, r0, [r1, #16]
    34e6:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    34ea:	f88d 0014 	strb.w	r0, [sp, #20]
    34ee:	f89d 0014 	ldrb.w	r0, [sp, #20]
    34f2:	2800      	cmp	r0, #0
    34f4:	f47f ae97 	bne.w	3226 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    34f8:	b00b      	add	sp, #44	; 0x2c
    34fa:	4650      	mov	r0, sl
    34fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3500:	e000ed04 	.word	0xe000ed04
    3504:	00000000 	.word	0x00000000
    3508:	20000fb4 	.word	0x20000fb4
    350c:	20000f34 	.word	0x20000f34
    3510:	0f424000 	.word	0x0f424000
    3514:	1e847fff 	.word	0x1e847fff
    3518:	f0bdc000 	.word	0xf0bdc000
    351c:	1e848000 	.word	0x1e848000

00003520 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    3520:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3524:	4d94      	ldr	r5, [pc, #592]	; (3778 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    3526:	b08c      	sub	sp, #48	; 0x30
    3528:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    352c:	2000      	movs	r0, #0
    352e:	9009      	str	r0, [sp, #36]	; 0x24
    3530:	9006      	str	r0, [sp, #24]
    3532:	2001      	movs	r0, #1
    3534:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    3538:	f04f 0800 	mov.w	r8, #0
    353c:	4607      	mov	r7, r0
    353e:	4c8f      	ldr	r4, [pc, #572]	; (377c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    3540:	f8cd 001c 	str.w	r0, [sp, #28]
    3544:	f000 fe08 	bl	4158 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    3548:	9008      	str	r0, [sp, #32]
    354a:	b124      	cbz	r4, 3556 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x36>
    354c:	2100      	movs	r1, #0
    354e:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    3552:	f3af 8000 	nop.w
    3556:	9807      	ldr	r0, [sp, #28]
    3558:	2800      	cmp	r0, #0
    355a:	d03c      	beq.n	35d6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb6>
    355c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    3560:	b124      	cbz	r4, 356c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x4c>
    3562:	2100      	movs	r1, #0
    3564:	f240 70b5 	movw	r0, #1973	; 0x7b5
    3568:	f3af 8000 	nop.w
    356c:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    3570:	2240      	movs	r2, #64	; 0x40
    3572:	ea27 060a 	bic.w	r6, r7, sl
    3576:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    357a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    357e:	4683      	mov	fp, r0
    3580:	f00a f94a 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3584:	b124      	cbz	r4, 3590 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x70>
    3586:	2100      	movs	r1, #0
    3588:	f240 502f 	movw	r0, #1327	; 0x52f
    358c:	f3af 8000 	nop.w
    3590:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    3594:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    3598:	4428      	add	r0, r5
    359a:	4429      	add	r1, r5
    359c:	9000      	str	r0, [sp, #0]
    359e:	8c0a      	ldrh	r2, [r1, #32]
    35a0:	8402      	strh	r2, [r0, #32]
    35a2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    35a6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    35aa:	b124      	cbz	r4, 35b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    35ac:	2100      	movs	r1, #0
    35ae:	f240 5033 	movw	r0, #1331	; 0x533
    35b2:	f3af 8000 	nop.w
    35b6:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    35ba:	f88d 0008 	strb.w	r0, [sp, #8]
    35be:	f89d 0008 	ldrb.w	r0, [sp, #8]
    35c2:	b178      	cbz	r0, 35e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc4>
    35c4:	2c00      	cmp	r4, #0
    35c6:	bf1c      	itt	ne
    35c8:	2100      	movne	r1, #0
    35ca:	f240 70bb 	movwne	r0, #1979	; 0x7bb
    35ce:	d0b9      	beq.n	3544 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    35d0:	f3af 8000 	nop.w
    35d4:	e7b6      	b.n	3544 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    35d6:	486a      	ldr	r0, [pc, #424]	; (3780 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    35d8:	2800      	cmp	r0, #0
    35da:	bf18      	it	ne
    35dc:	f3af 8000 	nopne.w
    35e0:	b662      	cpsie	i
    35e2:	e7bb      	b.n	355c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    35e4:	b124      	cbz	r4, 35f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xd0>
    35e6:	2100      	movs	r1, #0
    35e8:	f240 70bf 	movw	r0, #1983	; 0x7bf
    35ec:	f3af 8000 	nop.w
    35f0:	980c      	ldr	r0, [sp, #48]	; 0x30
    35f2:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    35f6:	2803      	cmp	r0, #3
    35f8:	d17d      	bne.n	36f6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d6>
    35fa:	9a00      	ldr	r2, [sp, #0]
    35fc:	990c      	ldr	r1, [sp, #48]	; 0x30
    35fe:	f892 0020 	ldrb.w	r0, [r2, #32]
    3602:	4288      	cmp	r0, r1
    3604:	bf14      	ite	ne
    3606:	f04f 0a00 	movne.w	sl, #0
    360a:	f04f 0a01 	moveq.w	sl, #1
    360e:	f102 0c20 	add.w	ip, r2, #32
    3612:	4683      	mov	fp, r0
    3614:	2220      	movs	r2, #32
    3616:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    361a:	e003      	b.n	3624 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x104>
    361c:	4602      	mov	r2, r0
    361e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    3622:	7840      	ldrb	r0, [r0, #1]
    3624:	4288      	cmp	r0, r1
    3626:	d002      	beq.n	362e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    3628:	2820      	cmp	r0, #32
    362a:	d00a      	beq.n	3642 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    362c:	e7f6      	b.n	361c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    362e:	2820      	cmp	r0, #32
    3630:	d007      	beq.n	3642 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    3632:	4583      	cmp	fp, r0
    3634:	d107      	bne.n	3646 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    3636:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    363a:	7840      	ldrb	r0, [r0, #1]
    363c:	f88c 0000 	strb.w	r0, [ip]
    3640:	e007      	b.n	3652 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    3642:	4640      	mov	r0, r8
    3644:	e00c      	b.n	3660 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    3646:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    364a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    364e:	7840      	ldrb	r0, [r0, #1]
    3650:	7048      	strb	r0, [r1, #1]
    3652:	b124      	cbz	r4, 365e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x13e>
    3654:	2100      	movs	r1, #0
    3656:	f240 409a 	movw	r0, #1178	; 0x49a
    365a:	f3af 8000 	nop.w
    365e:	4638      	mov	r0, r7
    3660:	46c3      	mov	fp, r8
    3662:	ea10 0f0a 	tst.w	r0, sl
    3666:	bf18      	it	ne
    3668:	46bb      	movne	fp, r7
    366a:	2800      	cmp	r0, #0
    366c:	d04f      	beq.n	370e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    366e:	b124      	cbz	r4, 367a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15a>
    3670:	2100      	movs	r1, #0
    3672:	f240 70c4 	movw	r0, #1988	; 0x7c4
    3676:	f3af 8000 	nop.w
    367a:	4632      	mov	r2, r6
    367c:	2001      	movs	r0, #1
    367e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3680:	f7ff f8d6 	bl	2830 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x830>
    3684:	b124      	cbz	r4, 3690 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    3686:	2100      	movs	r1, #0
    3688:	f240 70cd 	movw	r0, #1997	; 0x7cd
    368c:	f3af 8000 	nop.w
    3690:	483c      	ldr	r0, [pc, #240]	; (3784 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x264>)
    3692:	2800      	cmp	r0, #0
    3694:	bf18      	it	ne
    3696:	f3af 8000 	nopne.w
    369a:	f3ef 8010 	mrs	r0, PRIMASK
    369e:	b672      	cpsid	i
    36a0:	9007      	str	r0, [sp, #28]
    36a2:	b124      	cbz	r4, 36ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    36a4:	2100      	movs	r1, #0
    36a6:	f240 70d2 	movw	r0, #2002	; 0x7d2
    36aa:	f3af 8000 	nop.w
    36ae:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    36b2:	f88d 0008 	strb.w	r0, [sp, #8]
    36b6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    36ba:	b138      	cbz	r0, 36cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    36bc:	2c00      	cmp	r4, #0
    36be:	bf1c      	itt	ne
    36c0:	2100      	movne	r1, #0
    36c2:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    36c6:	f43f af3d 	beq.w	3544 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    36ca:	e781      	b.n	35d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    36cc:	f1bb 0f00 	cmp.w	fp, #0
    36d0:	d00a      	beq.n	36e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    36d2:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    36d6:	2820      	cmp	r0, #32
    36d8:	d106      	bne.n	36e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    36da:	4632      	mov	r2, r6
    36dc:	2102      	movs	r1, #2
    36de:	9808      	ldr	r0, [sp, #32]
    36e0:	f7ff f8d8 	bl	2894 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x894>
    36e4:	9006      	str	r0, [sp, #24]
    36e6:	b1f8      	cbz	r0, 3728 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>
    36e8:	b124      	cbz	r4, 36f4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    36ea:	2100      	movs	r1, #0
    36ec:	f240 70ea 	movw	r0, #2026	; 0x7ea
    36f0:	f3af 8000 	nop.w
    36f4:	e000      	b.n	36f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d8>
    36f6:	e00a      	b.n	370e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    36f8:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    36fc:	ea27 0000 	bic.w	r0, r7, r0
    3700:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    3704:	20ff      	movs	r0, #255	; 0xff
    3706:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    370a:	2001      	movs	r0, #1
    370c:	9009      	str	r0, [sp, #36]	; 0x24
    370e:	b124      	cbz	r4, 371a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fa>
    3710:	2100      	movs	r1, #0
    3712:	f240 70f3 	movw	r0, #2035	; 0x7f3
    3716:	f3af 8000 	nop.w
    371a:	9806      	ldr	r0, [sp, #24]
    371c:	4e1a      	ldr	r6, [pc, #104]	; (3788 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x268>)
    371e:	2802      	cmp	r0, #2
    3720:	d009      	beq.n	3736 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x216>
    3722:	2801      	cmp	r0, #1
    3724:	d00f      	beq.n	3746 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    3726:	e013      	b.n	3750 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    3728:	b194      	cbz	r4, 3750 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    372a:	2100      	movs	r1, #0
    372c:	f240 70e5 	movw	r0, #2021	; 0x7e5
    3730:	f3af 8000 	nop.w
    3734:	e7ec      	b.n	3710 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    3736:	68a9      	ldr	r1, [r5, #8]
    3738:	9808      	ldr	r0, [sp, #32]
    373a:	1a08      	subs	r0, r1, r0
    373c:	f009 ff12 	bl	d564 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3740:	6871      	ldr	r1, [r6, #4]
    3742:	b921      	cbnz	r1, 374e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22e>
    3744:	e004      	b.n	3750 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    3746:	6871      	ldr	r1, [r6, #4]
    3748:	f04f 30ff 	mov.w	r0, #4294967295
    374c:	b101      	cbz	r1, 3750 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    374e:	4788      	blx	r1
    3750:	9807      	ldr	r0, [sp, #28]
    3752:	b148      	cbz	r0, 3768 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x248>
    3754:	b124      	cbz	r4, 3760 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    3756:	2100      	movs	r1, #0
    3758:	f640 0007 	movw	r0, #2055	; 0x807
    375c:	f3af 8000 	nop.w
    3760:	9809      	ldr	r0, [sp, #36]	; 0x24
    3762:	b00d      	add	sp, #52	; 0x34
    3764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3768:	4805      	ldr	r0, [pc, #20]	; (3780 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    376a:	2800      	cmp	r0, #0
    376c:	bf18      	it	ne
    376e:	f3af 8000 	nopne.w
    3772:	b662      	cpsie	i
    3774:	e7ee      	b.n	3754 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>
    3776:	0000      	.short	0x0000
    3778:	20000fb4 	.word	0x20000fb4
	...
    3788:	2000003c 	.word	0x2000003c

0000378c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    378c:	2820      	cmp	r0, #32
    378e:	bf24      	itt	cs
    3790:	2000      	movcs	r0, #0
    3792:	4770      	bxcs	lr
    3794:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3798:	4b03      	ldr	r3, [pc, #12]	; (37a8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    379a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    379e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    37a2:	6042      	str	r2, [r0, #4]
    37a4:	2001      	movs	r0, #1
    37a6:	4770      	bx	lr
    37a8:	20000bb4 	.word	0x20000bb4

000037ac <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    37ac:	b510      	push	{r4, lr}
    37ae:	2820      	cmp	r0, #32
    37b0:	d211      	bcs.n	37d6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    37b2:	490e      	ldr	r1, [pc, #56]	; (37ec <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    37b4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    37b8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    37bc:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    37c0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    37c4:	b13b      	cbz	r3, 37d6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    37c6:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    37ca:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    37ce:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    37d2:	2a01      	cmp	r2, #1
    37d4:	d001      	beq.n	37da <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    37d6:	2000      	movs	r0, #0
    37d8:	bd10      	pop	{r4, pc}
    37da:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    37de:	4601      	mov	r1, r0
    37e0:	2000      	movs	r0, #0
    37e2:	f7ff f825 	bl	2830 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x830>
    37e6:	2001      	movs	r0, #1
    37e8:	bd10      	pop	{r4, pc}
    37ea:	0000      	.short	0x0000
    37ec:	20000fb4 	.word	0x20000fb4

000037f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    37f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37f4:	4e86      	ldr	r6, [pc, #536]	; (3a10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    37f6:	4680      	mov	r8, r0
    37f8:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    37fc:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    3800:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    3804:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3808:	2800      	cmp	r0, #0
    380a:	d071      	beq.n	38f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    380c:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    3810:	4d80      	ldr	r5, [pc, #512]	; (3a14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    3812:	b125      	cbz	r5, 381e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    3814:	2100      	movs	r1, #0
    3816:	f640 3076 	movw	r0, #2934	; 0xb76
    381a:	f3af 8000 	nop.w
    381e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    3822:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    3826:	2801      	cmp	r0, #1
    3828:	d018      	beq.n	385c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    382a:	b2c0      	uxtb	r0, r0
    382c:	2804      	cmp	r0, #4
    382e:	bf1c      	itt	ne
    3830:	2805      	cmpne	r0, #5
    3832:	2806      	cmpne	r0, #6
    3834:	d061      	beq.n	38fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    3836:	b12d      	cbz	r5, 3844 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    3838:	f04f 0100 	mov.w	r1, #0
    383c:	f640 3082 	movw	r0, #2946	; 0xb82
    3840:	f3af 8000 	nop.w
    3844:	f001 fcd0 	bl	51e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3848:	b125      	cbz	r5, 3854 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    384a:	2100      	movs	r1, #0
    384c:	f640 3086 	movw	r0, #2950	; 0xb86
    3850:	f3af 8000 	nop.w
    3854:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    3858:	2801      	cmp	r0, #1
    385a:	d1e6      	bne.n	382a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    385c:	2401      	movs	r4, #1
    385e:	b125      	cbz	r5, 386a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    3860:	2100      	movs	r1, #0
    3862:	f640 308d 	movw	r0, #2957	; 0xb8d
    3866:	f3af 8000 	nop.w
    386a:	2c00      	cmp	r4, #0
    386c:	d04b      	beq.n	3906 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    386e:	2000      	movs	r0, #0
    3870:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    3874:	b125      	cbz	r5, 3880 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    3876:	2100      	movs	r1, #0
    3878:	f640 3092 	movw	r0, #2962	; 0xb92
    387c:	f3af 8000 	nop.w
    3880:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    3884:	2001      	movs	r0, #1
    3886:	ea20 090b 	bic.w	r9, r0, fp
    388a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    388e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    3892:	2240      	movs	r2, #64	; 0x40
    3894:	f009 ffc0 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3898:	b125      	cbz	r5, 38a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    389a:	2100      	movs	r1, #0
    389c:	f240 502f 	movw	r0, #1327	; 0x52f
    38a0:	f3af 8000 	nop.w
    38a4:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    38a8:	eb00 0a06 	add.w	sl, r0, r6
    38ac:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    38b0:	4430      	add	r0, r6
    38b2:	8c01      	ldrh	r1, [r0, #32]
    38b4:	f8aa 1020 	strh.w	r1, [sl, #32]
    38b8:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    38bc:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    38c0:	b125      	cbz	r5, 38cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    38c2:	2100      	movs	r1, #0
    38c4:	f240 5033 	movw	r0, #1331	; 0x533
    38c8:	f3af 8000 	nop.w
    38cc:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    38d0:	f88d 0000 	strb.w	r0, [sp]
    38d4:	f89d 0000 	ldrb.w	r0, [sp]
    38d8:	b1e0      	cbz	r0, 3914 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    38da:	2d00      	cmp	r5, #0
    38dc:	bf1c      	itt	ne
    38de:	2100      	movne	r1, #0
    38e0:	f640 3098 	movwne	r0, #2968	; 0xb98
    38e4:	d0bb      	beq.n	385e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    38e6:	bf00      	nop
    38e8:	f3af 8000 	nop.w
    38ec:	e7b7      	b.n	385e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    38ee:	e7ff      	b.n	38f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    38f0:	f640 316d 	movw	r1, #2925	; 0xb6d
    38f4:	2070      	movs	r0, #112	; 0x70
    38f6:	f001 fb4d 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38fa:	464a      	mov	r2, r9
    38fc:	4641      	mov	r1, r8
    38fe:	2001      	movs	r0, #1
    3900:	f7fe ff96 	bl	2830 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x830>
    3904:	e7a0      	b.n	3848 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    3906:	4844      	ldr	r0, [pc, #272]	; (3a18 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    3908:	2800      	cmp	r0, #0
    390a:	bf18      	it	ne
    390c:	f3af 8000 	nopne.w
    3910:	b662      	cpsie	i
    3912:	e7ac      	b.n	386e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    3914:	b125      	cbz	r5, 3920 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    3916:	2100      	movs	r1, #0
    3918:	f640 309c 	movw	r0, #2972	; 0xb9c
    391c:	f3af 8000 	nop.w
    3920:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    3924:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    3928:	4640      	mov	r0, r8
    392a:	461c      	mov	r4, r3
    392c:	f04f 0b20 	mov.w	fp, #32
    3930:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    3934:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    3938:	e004      	b.n	3944 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    393a:	46a3      	mov	fp, r4
    393c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    3940:	f89c 4001 	ldrb.w	r4, [ip, #1]
    3944:	4284      	cmp	r4, r0
    3946:	d002      	beq.n	394e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    3948:	2c20      	cmp	r4, #32
    394a:	d02b      	beq.n	39a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    394c:	e7f5      	b.n	393a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    394e:	2c20      	cmp	r4, #32
    3950:	d028      	beq.n	39a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    3952:	42a3      	cmp	r3, r4
    3954:	d104      	bne.n	3960 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    3956:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    395a:	7840      	ldrb	r0, [r0, #1]
    395c:	7008      	strb	r0, [r1, #0]
    395e:	e005      	b.n	396c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    3960:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    3964:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    3968:	7840      	ldrb	r0, [r0, #1]
    396a:	7048      	strb	r0, [r1, #1]
    396c:	f1ba 0f00 	cmp.w	sl, #0
    3970:	d011      	beq.n	3996 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    3972:	b125      	cbz	r5, 397e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    3974:	2100      	movs	r1, #0
    3976:	f240 4092 	movw	r0, #1170	; 0x492
    397a:	f3af 8000 	nop.w
    397e:	f89a 0000 	ldrb.w	r0, [sl]
    3982:	42a0      	cmp	r0, r4
    3984:	d107      	bne.n	3996 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    3986:	b125      	cbz	r5, 3992 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    3988:	2100      	movs	r1, #0
    398a:	f240 4095 	movw	r0, #1173	; 0x495
    398e:	f3af 8000 	nop.w
    3992:	f88a b000 	strb.w	fp, [sl]
    3996:	b15d      	cbz	r5, 39b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    3998:	2100      	movs	r1, #0
    399a:	f240 409a 	movw	r0, #1178	; 0x49a
    399e:	f3af 8000 	nop.w
    39a2:	e000      	b.n	39a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    39a4:	b125      	cbz	r5, 39b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    39a6:	2100      	movs	r1, #0
    39a8:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    39ac:	f3af 8000 	nop.w
    39b0:	481a      	ldr	r0, [pc, #104]	; (3a1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    39b2:	2800      	cmp	r0, #0
    39b4:	bf18      	it	ne
    39b6:	f3af 8000 	nopne.w
    39ba:	f3ef 8410 	mrs	r4, PRIMASK
    39be:	b672      	cpsid	i
    39c0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    39c4:	f88d 0000 	strb.w	r0, [sp]
    39c8:	f89d 0000 	ldrb.w	r0, [sp]
    39cc:	b138      	cbz	r0, 39de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    39ce:	2d00      	cmp	r5, #0
    39d0:	bf1c      	itt	ne
    39d2:	2100      	movne	r1, #0
    39d4:	f640 30a6 	movwne	r0, #2982	; 0xba6
    39d8:	f43f af41 	beq.w	385e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    39dc:	e784      	b.n	38e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    39de:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    39e2:	20ff      	movs	r0, #255	; 0xff
    39e4:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    39e8:	b154      	cbz	r4, 3a00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    39ea:	2d00      	cmp	r5, #0
    39ec:	bf08      	it	eq
    39ee:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39f2:	2100      	movs	r1, #0
    39f4:	f640 30b3 	movw	r0, #2995	; 0xbb3
    39f8:	f3af 8000 	nop.w
    39fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a00:	4805      	ldr	r0, [pc, #20]	; (3a18 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    3a02:	2800      	cmp	r0, #0
    3a04:	bf18      	it	ne
    3a06:	f3af 8000 	nopne.w
    3a0a:	b662      	cpsie	i
    3a0c:	e7ed      	b.n	39ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    3a0e:	0000      	.short	0x0000
    3a10:	20000fb4 	.word	0x20000fb4
	...

00003a20 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3a20:	b570      	push	{r4, r5, r6, lr}
    3a22:	460d      	mov	r5, r1
    3a24:	4606      	mov	r6, r0
    3a26:	f001 fa2b 	bl	4e80 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3a2a:	480f      	ldr	r0, [pc, #60]	; (3a68 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    3a2c:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    3a30:	2400      	movs	r4, #0
    3a32:	3880      	subs	r0, #128	; 0x80
    3a34:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    3a38:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    3a3c:	b129      	cbz	r1, 3a4a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    3a3e:	1c61      	adds	r1, r4, #1
    3a40:	b2cc      	uxtb	r4, r1
    3a42:	2c20      	cmp	r4, #32
    3a44:	d3f8      	bcc.n	3a38 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    3a46:	2020      	movs	r0, #32
    3a48:	bd70      	pop	{r4, r5, r6, pc}
    3a4a:	4808      	ldr	r0, [pc, #32]	; (3a6c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    3a4c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    3a50:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    3a54:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    3a58:	4621      	mov	r1, r4
    3a5a:	6045      	str	r5, [r0, #4]
    3a5c:	2001      	movs	r0, #1
    3a5e:	f7fe fee7 	bl	2830 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x830>
    3a62:	4620      	mov	r0, r4
    3a64:	bd70      	pop	{r4, r5, r6, pc}
    3a66:	0000      	.short	0x0000
    3a68:	20000fb4 	.word	0x20000fb4
    3a6c:	20000bb4 	.word	0x20000bb4

00003a70 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    3a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a74:	f000 fb70 	bl	4158 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    3a78:	4605      	mov	r5, r0
    3a7a:	f000 fe3f 	bl	46fc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    3a7e:	4c60      	ldr	r4, [pc, #384]	; (3c00 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x190>)
    3a80:	6860      	ldr	r0, [r4, #4]
    3a82:	f1b0 3fff 	cmp.w	r0, #4294967295
    3a86:	bf1c      	itt	ne
    3a88:	f04f 30ff 	movne.w	r0, #4294967295
    3a8c:	6060      	strne	r0, [r4, #4]
    3a8e:	7fa0      	ldrb	r0, [r4, #30]
    3a90:	4f5c      	ldr	r7, [pc, #368]	; (3c04 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>)
    3a92:	b990      	cbnz	r0, 3aba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4a>
    3a94:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    3a98:	1a40      	subs	r0, r0, r1
    3a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3a9e:	f44f 710c 	mov.w	r1, #560	; 0x230
    3aa2:	f009 fd8a 	bl	d5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    3aa6:	68e1      	ldr	r1, [r4, #12]
    3aa8:	4408      	add	r0, r1
    3aaa:	1a28      	subs	r0, r5, r0
    3aac:	0200      	lsls	r0, r0, #8
    3aae:	17c1      	asrs	r1, r0, #31
    3ab0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    3ab4:	1200      	asrs	r0, r0, #8
    3ab6:	0fc0      	lsrs	r0, r0, #31
    3ab8:	d012      	beq.n	3ae0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    3aba:	7e60      	ldrb	r0, [r4, #25]
    3abc:	b320      	cbz	r0, 3b08 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    3abe:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    3ac2:	f88d 0000 	strb.w	r0, [sp]
    3ac6:	f89d 0000 	ldrb.w	r0, [sp]
    3aca:	b1e8      	cbz	r0, 3b08 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    3acc:	f000 fc72 	bl	43b4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    3ad0:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    3ad4:	b1f0      	cbz	r0, 3b14 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    3ad6:	f240 31d5 	movw	r1, #981	; 0x3d5
    3ada:	2070      	movs	r0, #112	; 0x70
    3adc:	f001 fa5a 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ae0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3ae4:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    3ae8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3aec:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3af0:	6840      	ldr	r0, [r0, #4]
    3af2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3af6:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
    3afa:	2108      	movs	r1, #8
    3afc:	4790      	blx	r2
    3afe:	f240 31bd 	movw	r1, #957	; 0x3bd
    3b02:	2070      	movs	r0, #112	; 0x70
    3b04:	f001 fa46 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b08:	1ce8      	adds	r0, r5, #3
    3b0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3b0e:	f000 fb49 	bl	41a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3b12:	e7dd      	b.n	3ad0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    3b14:	2001      	movs	r0, #1
    3b16:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3b1a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3b1e:	2820      	cmp	r0, #32
    3b20:	d021      	beq.n	3b66 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf6>
    3b22:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
    3b26:	2020      	movs	r0, #32
    3b28:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3b2c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3b30:	2600      	movs	r6, #0
    3b32:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    3b36:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
    3b3a:	6026      	str	r6, [r4, #0]
    3b3c:	f000 feb8 	bl	48b0 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    3b40:	7720      	strb	r0, [r4, #28]
    3b42:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
    3b46:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    3b4a:	eb00 0a04 	add.w	sl, r0, r4
    3b4e:	f89a 0020 	ldrb.w	r0, [sl, #32]
    3b52:	2820      	cmp	r0, #32
    3b54:	d012      	beq.n	3b7c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    3b56:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3b5a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3b5e:	7e81      	ldrb	r1, [r0, #26]
    3b60:	2901      	cmp	r1, #1
    3b62:	d005      	beq.n	3b70 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    3b64:	e00a      	b.n	3b7c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    3b66:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    3b6a:	2070      	movs	r0, #112	; 0x70
    3b6c:	f001 fa12 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b70:	f100 0208 	add.w	r2, r0, #8
    3b74:	2101      	movs	r1, #1
    3b76:	4628      	mov	r0, r5
    3b78:	f7fe f9d2 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    3b7c:	4642      	mov	r2, r8
    3b7e:	2101      	movs	r1, #1
    3b80:	4628      	mov	r0, r5
    3b82:	f7fe fe87 	bl	2894 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x894>
    3b86:	0007      	movs	r7, r0
    3b88:	d0f8      	beq.n	3b7c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10c>
    3b8a:	481f      	ldr	r0, [pc, #124]	; (3c08 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x198>)
    3b8c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    3b90:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    3b94:	2802      	cmp	r0, #2
    3b96:	d104      	bne.n	3ba2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x132>
    3b98:	4642      	mov	r2, r8
    3b9a:	4649      	mov	r1, r9
    3b9c:	2006      	movs	r0, #6
    3b9e:	f7fe fe47 	bl	2830 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x830>
    3ba2:	20ff      	movs	r0, #255	; 0xff
    3ba4:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3ba8:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    3bac:	f8df 805c 	ldr.w	r8, [pc, #92]	; 3c0c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>
    3bb0:	2820      	cmp	r0, #32
    3bb2:	bf1c      	itt	ne
    3bb4:	f898 0001 	ldrbne.w	r0, [r8, #1]
    3bb8:	f001 fac0 	blne	513c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3bbc:	7f20      	ldrb	r0, [r4, #28]
    3bbe:	b118      	cbz	r0, 3bc8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x158>
    3bc0:	f000 fe52 	bl	4868 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    3bc4:	7726      	strb	r6, [r4, #28]
    3bc6:	7766      	strb	r6, [r4, #29]
    3bc8:	2f02      	cmp	r7, #2
    3bca:	d00f      	beq.n	3bec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x17c>
    3bcc:	2f01      	cmp	r7, #1
    3bce:	bf18      	it	ne
    3bd0:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3bd4:	f04f 30ff 	mov.w	r0, #4294967295
    3bd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    3bdc:	2900      	cmp	r1, #0
    3bde:	bf08      	it	eq
    3be0:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3be4:	b001      	add	sp, #4
    3be6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bea:	4708      	bx	r1
    3bec:	68a0      	ldr	r0, [r4, #8]
    3bee:	1b40      	subs	r0, r0, r5
    3bf0:	f009 fcb8 	bl	d564 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3bf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    3bf8:	2900      	cmp	r1, #0
    3bfa:	d1f3      	bne.n	3be4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    3bfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c00:	20000fb4 	.word	0x20000fb4
    3c04:	20000bb4 	.word	0x20000bb4
    3c08:	20000f34 	.word	0x20000f34
    3c0c:	2000003c 	.word	0x2000003c

00003c10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3c10:	b530      	push	{r4, r5, lr}
    3c12:	4c36      	ldr	r4, [pc, #216]	; (3cec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    3c14:	4605      	mov	r5, r0
    3c16:	b083      	sub	sp, #12
    3c18:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3c1c:	2820      	cmp	r0, #32
    3c1e:	d008      	beq.n	3c32 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    3c20:	6860      	ldr	r0, [r4, #4]
    3c22:	f1b0 3fff 	cmp.w	r0, #4294967295
    3c26:	d009      	beq.n	3c3c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    3c28:	f640 21a1 	movw	r1, #2721	; 0xaa1
    3c2c:	2070      	movs	r0, #112	; 0x70
    3c2e:	f001 f9b1 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c32:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
    3c36:	2070      	movs	r0, #112	; 0x70
    3c38:	f001 f9ac 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c3c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3c40:	492b      	ldr	r1, [pc, #172]	; (3cf0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe0>)
    3c42:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3c46:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3c4a:	3008      	adds	r0, #8
    3c4c:	f7fe fdb6 	bl	27bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7bc>
    3c50:	4601      	mov	r1, r0
    3c52:	4a28      	ldr	r2, [pc, #160]	; (3cf4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe4>)
    3c54:	4428      	add	r0, r5
    3c56:	4291      	cmp	r1, r2
    3c58:	d904      	bls.n	3c64 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x54>
    3c5a:	f240 516f 	movw	r1, #1391	; 0x56f
    3c5e:	2070      	movs	r0, #112	; 0x70
    3c60:	f001 f998 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c64:	4924      	ldr	r1, [pc, #144]	; (3cf8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe8>)
    3c66:	428d      	cmp	r5, r1
    3c68:	dd04      	ble.n	3c74 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x64>
    3c6a:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    3c6e:	2070      	movs	r0, #112	; 0x70
    3c70:	f001 f990 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c74:	4921      	ldr	r1, [pc, #132]	; (3cfc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xec>)
    3c76:	428d      	cmp	r5, r1
    3c78:	da04      	bge.n	3c84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x74>
    3c7a:	f240 5171 	movw	r1, #1393	; 0x571
    3c7e:	2070      	movs	r0, #112	; 0x70
    3c80:	f001 f988 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c84:	491e      	ldr	r1, [pc, #120]	; (3d00 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
    3c86:	4281      	cmp	r1, r0
    3c88:	bfdc      	itt	le
    3c8a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    3c8e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    3c92:	dd05      	ble.n	3ca0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    3c94:	2800      	cmp	r0, #0
    3c96:	bfbc      	itt	lt
    3c98:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    3c9c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    3ca0:	aa01      	add	r2, sp, #4
    3ca2:	4669      	mov	r1, sp
    3ca4:	f000 f8ee 	bl	3e84 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3ca8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3cac:	280f      	cmp	r0, #15
    3cae:	bf8c      	ite	hi
    3cb0:	2001      	movhi	r0, #1
    3cb2:	2000      	movls	r0, #0
    3cb4:	9900      	ldr	r1, [sp, #0]
    3cb6:	4408      	add	r0, r1
    3cb8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3cbc:	6061      	str	r1, [r4, #4]
    3cbe:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    3cc2:	f88d 0000 	strb.w	r0, [sp]
    3cc6:	f89d 0000 	ldrb.w	r0, [sp]
    3cca:	2800      	cmp	r0, #0
    3ccc:	bf04      	itt	eq
    3cce:	b003      	addeq	sp, #12
    3cd0:	bd30      	popeq	{r4, r5, pc}
    3cd2:	2005      	movs	r0, #5
    3cd4:	f000 fbec 	bl	44b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3cd8:	2800      	cmp	r0, #0
    3cda:	bf1c      	itt	ne
    3cdc:	b003      	addne	sp, #12
    3cde:	bd30      	popne	{r4, r5, pc}
    3ce0:	f640 21a8 	movw	r1, #2728	; 0xaa8
    3ce4:	2070      	movs	r0, #112	; 0x70
    3ce6:	f001 f955 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3cea:	0000      	.short	0x0000
    3cec:	20000fb4 	.word	0x20000fb4
    3cf0:	20000bb4 	.word	0x20000bb4
    3cf4:	1e847fff 	.word	0x1e847fff
    3cf8:	0f424000 	.word	0x0f424000
    3cfc:	f0bdc000 	.word	0xf0bdc000
    3d00:	1e848000 	.word	0x1e848000

00003d04 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3d04:	b570      	push	{r4, r5, r6, lr}
    3d06:	4c1c      	ldr	r4, [pc, #112]	; (3d78 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    3d08:	2120      	movs	r1, #32
    3d0a:	f884 1020 	strb.w	r1, [r4, #32]
    3d0e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3d12:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3d16:	2000      	movs	r0, #0
    3d18:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3d1c:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    3d20:	1e42      	subs	r2, r0, #1
    3d22:	e9c4 0200 	strd	r0, r2, [r4]
    3d26:	77a0      	strb	r0, [r4, #30]
    3d28:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    3d2c:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    3d30:	7720      	strb	r0, [r4, #28]
    3d32:	7760      	strb	r0, [r4, #29]
    3d34:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    3d38:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    3d3c:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    3d40:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3d44:	2210      	movs	r2, #16
    3d46:	7088      	strb	r0, [r1, #2]
    3d48:	f801 0f04 	strb.w	r0, [r1, #4]!
    3d4c:	1e52      	subs	r2, r2, #1
    3d4e:	d1fa      	bne.n	3d46 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    3d50:	f000 fdb8 	bl	48c4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    3d54:	4d09      	ldr	r5, [pc, #36]	; (3d7c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    3d56:	2601      	movs	r6, #1
    3d58:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3d5c:	20ff      	movs	r0, #255	; 0xff
    3d5e:	7028      	strb	r0, [r5, #0]
    3d60:	4807      	ldr	r0, [pc, #28]	; (3d80 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3d62:	f001 f9cd 	bl	5100 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3d66:	7068      	strb	r0, [r5, #1]
    3d68:	f001 fa28 	bl	51bc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    3d6c:	60a8      	str	r0, [r5, #8]
    3d6e:	f000 fd33 	bl	47d8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    3d72:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    3d76:	bd70      	pop	{r4, r5, r6, pc}
    3d78:	20000fb4 	.word	0x20000fb4
    3d7c:	2000003c 	.word	0x2000003c
    3d80:	000026e5 	.word	0x000026e5

00003d84 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    3d84:	b500      	push	{lr}
    3d86:	b083      	sub	sp, #12
    3d88:	4668      	mov	r0, sp
    3d8a:	f000 f9eb 	bl	4164 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3d8e:	9800      	ldr	r0, [sp, #0]
    3d90:	f009 fbe8 	bl	d564 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3d94:	9a01      	ldr	r2, [sp, #4]
    3d96:	4b03      	ldr	r3, [pc, #12]	; (3da4 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    3d98:	2100      	movs	r1, #0
    3d9a:	fbe2 0103 	umlal	r0, r1, r2, r3
    3d9e:	b003      	add	sp, #12
    3da0:	bd00      	pop	{pc}
    3da2:	0000      	.short	0x0000
    3da4:	1e848000 	.word	0x1e848000

00003da8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    3da8:	b570      	push	{r4, r5, r6, lr}
    3daa:	4606      	mov	r6, r0
    3dac:	b082      	sub	sp, #8
    3dae:	461d      	mov	r5, r3
    3db0:	4610      	mov	r0, r2
    3db2:	f009 fbd7 	bl	d564 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3db6:	4604      	mov	r4, r0
    3db8:	4668      	mov	r0, sp
    3dba:	f000 f9d3 	bl	4164 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3dbe:	4920      	ldr	r1, [pc, #128]	; (3e40 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    3dc0:	9801      	ldr	r0, [sp, #4]
    3dc2:	fba0 0201 	umull	r0, r2, r0, r1
    3dc6:	1a30      	subs	r0, r6, r0
    3dc8:	bf44      	itt	mi
    3dca:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    3dce:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    3dd2:	d504      	bpl.n	3dde <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    3dd4:	f640 31c8 	movw	r1, #3016	; 0xbc8
    3dd8:	2070      	movs	r0, #112	; 0x70
    3dda:	f001 f8db 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dde:	4288      	cmp	r0, r1
    3de0:	db04      	blt.n	3dec <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    3de2:	f640 31c9 	movw	r1, #3017	; 0xbc9
    3de6:	2070      	movs	r0, #112	; 0x70
    3de8:	f001 f8d4 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dec:	4a15      	ldr	r2, [pc, #84]	; (3e44 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    3dee:	1a21      	subs	r1, r4, r0
    3df0:	2300      	movs	r3, #0
    3df2:	1a8a      	subs	r2, r1, r2
    3df4:	f173 0200 	sbcs.w	r2, r3, #0
    3df8:	d318      	bcc.n	3e2c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3dfa:	f8df c048 	ldr.w	ip, [pc, #72]	; 3e44 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    3dfe:	1b02      	subs	r2, r0, r4
    3e00:	ebb2 0c0c 	subs.w	ip, r2, ip
    3e04:	f173 0300 	sbcs.w	r3, r3, #0
    3e08:	d310      	bcc.n	3e2c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3e0a:	4b0f      	ldr	r3, [pc, #60]	; (3e48 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    3e0c:	428b      	cmp	r3, r1
    3e0e:	bf3e      	ittt	cc
    3e10:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    3e14:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    3e18:	1901      	addcc	r1, r0, r4
    3e1a:	d307      	bcc.n	3e2c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3e1c:	4293      	cmp	r3, r2
    3e1e:	d20a      	bcs.n	3e36 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    3e20:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    3e24:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    3e28:	4408      	add	r0, r1
    3e2a:	4241      	negs	r1, r0
    3e2c:	f101 000f 	add.w	r0, r1, #15
    3e30:	b002      	add	sp, #8
    3e32:	1a28      	subs	r0, r5, r0
    3e34:	bd70      	pop	{r4, r5, r6, pc}
    3e36:	f640 21c2 	movw	r1, #2754	; 0xac2
    3e3a:	2070      	movs	r0, #112	; 0x70
    3e3c:	f001 f8aa 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e40:	1e848000 	.word	0x1e848000
    3e44:	0f424000 	.word	0x0f424000
    3e48:	1e847fff 	.word	0x1e847fff

00003e4c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3e4c:	0b41      	lsrs	r1, r0, #13
    3e4e:	f248 6237 	movw	r2, #34359	; 0x8637
    3e52:	4351      	muls	r1, r2
    3e54:	0c0a      	lsrs	r2, r1, #16
    3e56:	4b09      	ldr	r3, [pc, #36]	; (3e7c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3e58:	0251      	lsls	r1, r2, #9
    3e5a:	fb02 0203 	mla	r2, r2, r3, r0
    3e5e:	4808      	ldr	r0, [pc, #32]	; (3e80 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3e60:	4350      	muls	r0, r2
    3e62:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    3e66:	306e      	adds	r0, #110	; 0x6e
    3e68:	0d40      	lsrs	r0, r0, #21
    3e6a:	425b      	negs	r3, r3
    3e6c:	fb10 f303 	smulbb	r3, r0, r3
    3e70:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3e74:	bf88      	it	hi
    3e76:	1c49      	addhi	r1, r1, #1
    3e78:	4408      	add	r0, r1
    3e7a:	4770      	bx	lr
    3e7c:	ffffc2f7 	.word	0xffffc2f7
    3e80:	00010c6f 	.word	0x00010c6f

00003e84 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3e84:	0b43      	lsrs	r3, r0, #13
    3e86:	f248 6c37 	movw	ip, #34359	; 0x8637
    3e8a:	fb03 f30c 	mul.w	r3, r3, ip
    3e8e:	b430      	push	{r4, r5}
    3e90:	0c1b      	lsrs	r3, r3, #16
    3e92:	f8df c044 	ldr.w	ip, [pc, #68]	; 3ed8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    3e96:	025c      	lsls	r4, r3, #9
    3e98:	fb03 030c 	mla	r3, r3, ip, r0
    3e9c:	480f      	ldr	r0, [pc, #60]	; (3edc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    3e9e:	4358      	muls	r0, r3
    3ea0:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3ea4:	eb04 000c 	add.w	r0, r4, ip
    3ea8:	f643 5409 	movw	r4, #15625	; 0x3d09
    3eac:	fb1c f404 	smulbb	r4, ip, r4
    3eb0:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3eb4:	f643 5508 	movw	r5, #15624	; 0x3d08
    3eb8:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3ebc:	442c      	add	r4, r5
    3ebe:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3ec2:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    3ec6:	bf84      	itt	hi
    3ec8:	f04f 0c00 	movhi.w	ip, #0
    3ecc:	1c40      	addhi	r0, r0, #1
    3ece:	6008      	str	r0, [r1, #0]
    3ed0:	f882 c000 	strb.w	ip, [r2]
    3ed4:	bc30      	pop	{r4, r5}
    3ed6:	4770      	bx	lr
    3ed8:	ffffc2f7 	.word	0xffffc2f7
    3edc:	00010c6f 	.word	0x00010c6f

00003ee0 <MPSL_IRQ_RTC0_Handler>:
    3ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ee4:	4d3b      	ldr	r5, [pc, #236]	; (3fd4 <MPSL_IRQ_RTC0_Handler+0xf4>)
    3ee6:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3eea:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3fd8 <MPSL_IRQ_RTC0_Handler+0xf8>
    3eee:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3ef2:	f44f 6600 	mov.w	r6, #2048	; 0x800
    3ef6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3efa:	f04f 0400 	mov.w	r4, #0
    3efe:	d019      	beq.n	3f34 <MPSL_IRQ_RTC0_Handler+0x54>
    3f00:	4836      	ldr	r0, [pc, #216]	; (3fdc <MPSL_IRQ_RTC0_Handler+0xfc>)
    3f02:	6800      	ldr	r0, [r0, #0]
    3f04:	b1b0      	cbz	r0, 3f34 <MPSL_IRQ_RTC0_Handler+0x54>
    3f06:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    3f0a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3f0e:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    3f12:	f8d8 1000 	ldr.w	r1, [r8]
    3f16:	1a40      	subs	r0, r0, r1
    3f18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3f1c:	2802      	cmp	r0, #2
    3f1e:	d302      	bcc.n	3f26 <MPSL_IRQ_RTC0_Handler+0x46>
    3f20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f24:	d906      	bls.n	3f34 <MPSL_IRQ_RTC0_Handler+0x54>
    3f26:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3f2a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3f2e:	2004      	movs	r0, #4
    3f30:	f7fe fe7e 	bl	2c30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3f34:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3f38:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3f3c:	d01a      	beq.n	3f74 <MPSL_IRQ_RTC0_Handler+0x94>
    3f3e:	4828      	ldr	r0, [pc, #160]	; (3fe0 <MPSL_IRQ_RTC0_Handler+0x100>)
    3f40:	6800      	ldr	r0, [r0, #0]
    3f42:	b1b8      	cbz	r0, 3f74 <MPSL_IRQ_RTC0_Handler+0x94>
    3f44:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    3f48:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3f4c:	4825      	ldr	r0, [pc, #148]	; (3fe4 <MPSL_IRQ_RTC0_Handler+0x104>)
    3f4e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3f52:	f8d8 1000 	ldr.w	r1, [r8]
    3f56:	1a40      	subs	r0, r0, r1
    3f58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3f5c:	2802      	cmp	r0, #2
    3f5e:	d302      	bcc.n	3f66 <MPSL_IRQ_RTC0_Handler+0x86>
    3f60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f64:	d906      	bls.n	3f74 <MPSL_IRQ_RTC0_Handler+0x94>
    3f66:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3f6a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3f6e:	2005      	movs	r0, #5
    3f70:	f7fe fe5e 	bl	2c30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3f74:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3f78:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3f7c:	d01a      	beq.n	3fb4 <MPSL_IRQ_RTC0_Handler+0xd4>
    3f7e:	481a      	ldr	r0, [pc, #104]	; (3fe8 <MPSL_IRQ_RTC0_Handler+0x108>)
    3f80:	6800      	ldr	r0, [r0, #0]
    3f82:	b1b8      	cbz	r0, 3fb4 <MPSL_IRQ_RTC0_Handler+0xd4>
    3f84:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3f88:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3f8c:	4817      	ldr	r0, [pc, #92]	; (3fec <MPSL_IRQ_RTC0_Handler+0x10c>)
    3f8e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3f92:	f8d8 1000 	ldr.w	r1, [r8]
    3f96:	1a40      	subs	r0, r0, r1
    3f98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3f9c:	2802      	cmp	r0, #2
    3f9e:	d302      	bcc.n	3fa6 <MPSL_IRQ_RTC0_Handler+0xc6>
    3fa0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3fa4:	d906      	bls.n	3fb4 <MPSL_IRQ_RTC0_Handler+0xd4>
    3fa6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3faa:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3fae:	2006      	movs	r0, #6
    3fb0:	f7fe fe3e 	bl	2c30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3fb4:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    3fb8:	2800      	cmp	r0, #0
    3fba:	bf08      	it	eq
    3fbc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fc0:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    3fc4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3fc8:	4809      	ldr	r0, [pc, #36]	; (3ff0 <MPSL_IRQ_RTC0_Handler+0x110>)
    3fca:	68c1      	ldr	r1, [r0, #12]
    3fcc:	1c49      	adds	r1, r1, #1
    3fce:	60c1      	str	r1, [r0, #12]
    3fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fd4:	4000b000 	.word	0x4000b000
    3fd8:	4000b504 	.word	0x4000b504
    3fdc:	4000b140 	.word	0x4000b140
    3fe0:	4000b144 	.word	0x4000b144
    3fe4:	4000b004 	.word	0x4000b004
    3fe8:	4000b148 	.word	0x4000b148
    3fec:	4000b008 	.word	0x4000b008
    3ff0:	20000048 	.word	0x20000048

00003ff4 <MPSL_IRQ_TIMER0_Handler>:
    3ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ff8:	4d38      	ldr	r5, [pc, #224]	; (40dc <MPSL_IRQ_TIMER0_Handler+0xe8>)
    3ffa:	7828      	ldrb	r0, [r5, #0]
    3ffc:	2804      	cmp	r0, #4
    3ffe:	d068      	beq.n	40d2 <MPSL_IRQ_TIMER0_Handler+0xde>
    4000:	1ca8      	adds	r0, r5, #2
    4002:	2201      	movs	r2, #1
    4004:	7801      	ldrb	r1, [r0, #0]
    4006:	b159      	cbz	r1, 4020 <MPSL_IRQ_TIMER0_Handler+0x2c>
    4008:	2901      	cmp	r1, #1
    400a:	bf08      	it	eq
    400c:	706a      	strbeq	r2, [r5, #1]
    400e:	d002      	beq.n	4016 <MPSL_IRQ_TIMER0_Handler+0x22>
    4010:	7869      	ldrb	r1, [r5, #1]
    4012:	2900      	cmp	r1, #0
    4014:	d058      	beq.n	40c8 <MPSL_IRQ_TIMER0_Handler+0xd4>
    4016:	2102      	movs	r1, #2
    4018:	7001      	strb	r1, [r0, #0]
    401a:	7840      	ldrb	r0, [r0, #1]
    401c:	f000 fafe 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4020:	4c2f      	ldr	r4, [pc, #188]	; (40e0 <MPSL_IRQ_TIMER0_Handler+0xec>)
    4022:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    4026:	f04f 0800 	mov.w	r8, #0
    402a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    402e:	f44f 7780 	mov.w	r7, #256	; 0x100
    4032:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    4036:	d00a      	beq.n	404e <MPSL_IRQ_TIMER0_Handler+0x5a>
    4038:	482a      	ldr	r0, [pc, #168]	; (40e4 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    403a:	6800      	ldr	r0, [r0, #0]
    403c:	b138      	cbz	r0, 404e <MPSL_IRQ_TIMER0_Handler+0x5a>
    403e:	2003      	movs	r0, #3
    4040:	f000 faec 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4044:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    4048:	2003      	movs	r0, #3
    404a:	f7fe fdf1 	bl	2c30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    404e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    4052:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    4056:	d00a      	beq.n	406e <MPSL_IRQ_TIMER0_Handler+0x7a>
    4058:	4823      	ldr	r0, [pc, #140]	; (40e8 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    405a:	6800      	ldr	r0, [r0, #0]
    405c:	b138      	cbz	r0, 406e <MPSL_IRQ_TIMER0_Handler+0x7a>
    405e:	2002      	movs	r0, #2
    4060:	f000 fadc 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4064:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    4068:	2002      	movs	r0, #2
    406a:	f7fe fde1 	bl	2c30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    406e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    4072:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    4076:	d00a      	beq.n	408e <MPSL_IRQ_TIMER0_Handler+0x9a>
    4078:	481c      	ldr	r0, [pc, #112]	; (40ec <MPSL_IRQ_TIMER0_Handler+0xf8>)
    407a:	6800      	ldr	r0, [r0, #0]
    407c:	b138      	cbz	r0, 408e <MPSL_IRQ_TIMER0_Handler+0x9a>
    407e:	2001      	movs	r0, #1
    4080:	f000 facc 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4084:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    4088:	2001      	movs	r0, #1
    408a:	f7fe fdd1 	bl	2c30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    408e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    4092:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    4096:	bf08      	it	eq
    4098:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    409c:	4814      	ldr	r0, [pc, #80]	; (40f0 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    409e:	6800      	ldr	r0, [r0, #0]
    40a0:	2800      	cmp	r0, #0
    40a2:	bf08      	it	eq
    40a4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    40a8:	2000      	movs	r0, #0
    40aa:	f000 fab7 	bl	461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    40ae:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    40b2:	2004      	movs	r0, #4
    40b4:	7028      	strb	r0, [r5, #0]
    40b6:	f8c5 8004 	str.w	r8, [r5, #4]
    40ba:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    40be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    40c2:	2000      	movs	r0, #0
    40c4:	f7fe bdb4 	b.w	2c30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    40c8:	f240 419f 	movw	r1, #1183	; 0x49f
    40cc:	206c      	movs	r0, #108	; 0x6c
    40ce:	f000 ff61 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    40d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    40d6:	2007      	movs	r0, #7
    40d8:	f7fe bdaa 	b.w	2c30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    40dc:	20000048 	.word	0x20000048
    40e0:	40008000 	.word	0x40008000
    40e4:	4000814c 	.word	0x4000814c
    40e8:	40008148 	.word	0x40008148
    40ec:	40008144 	.word	0x40008144
    40f0:	40008140 	.word	0x40008140
    40f4:	2201      	movs	r2, #1
    40f6:	0211      	lsls	r1, r2, #8
    40f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    40fc:	2000      	movs	r0, #0
    40fe:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    4102:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    4106:	f3bf 8f4f 	dsb	sy
    410a:	f3bf 8f6f 	isb	sy
    410e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    4112:	490e      	ldr	r1, [pc, #56]	; (414c <MPSL_IRQ_TIMER0_Handler+0x158>)
    4114:	f841 2f04 	str.w	r2, [r1, #4]!
    4118:	1e43      	subs	r3, r0, #1
    411a:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    411e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    4122:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    4126:	4b0a      	ldr	r3, [pc, #40]	; (4150 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    4128:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    412c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    4130:	1d1b      	adds	r3, r3, #4
    4132:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    4136:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    413a:	1d1b      	adds	r3, r3, #4
    413c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    4140:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    4144:	60ca      	str	r2, [r1, #12]
    4146:	4903      	ldr	r1, [pc, #12]	; (4154 <MPSL_IRQ_TIMER0_Handler+0x160>)
    4148:	7048      	strb	r0, [r1, #1]
    414a:	4770      	bx	lr
    414c:	40008000 	.word	0x40008000
    4150:	40008004 	.word	0x40008004
    4154:	20000048 	.word	0x20000048

00004158 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    4158:	4801      	ldr	r0, [pc, #4]	; (4160 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    415a:	6800      	ldr	r0, [r0, #0]
    415c:	4770      	bx	lr
    415e:	0000      	.short	0x0000
    4160:	4000b504 	.word	0x4000b504

00004164 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    4164:	b430      	push	{r4, r5}
    4166:	f3ef 8c10 	mrs	ip, PRIMASK
    416a:	b672      	cpsid	i
    416c:	2500      	movs	r5, #0
    416e:	4b0b      	ldr	r3, [pc, #44]	; (419c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    4170:	4a0b      	ldr	r2, [pc, #44]	; (41a0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    4172:	bf00      	nop
    4174:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    4178:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    417c:	b12c      	cbz	r4, 418a <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    417e:	68d1      	ldr	r1, [r2, #12]
    4180:	1c49      	adds	r1, r1, #1
    4182:	60d1      	str	r1, [r2, #12]
    4184:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    4188:	e7f4      	b.n	4174 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    418a:	68d2      	ldr	r2, [r2, #12]
    418c:	f1bc 0f00 	cmp.w	ip, #0
    4190:	d100      	bne.n	4194 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    4192:	b662      	cpsie	i
    4194:	e9c0 1200 	strd	r1, r2, [r0]
    4198:	bc30      	pop	{r4, r5}
    419a:	4770      	bx	lr
    419c:	4000b000 	.word	0x4000b000
    41a0:	20000048 	.word	0x20000048

000041a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    41a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    41a8:	4e46      	ldr	r6, [pc, #280]	; (42c4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    41aa:	4605      	mov	r5, r0
    41ac:	1eb7      	subs	r7, r6, #2
    41ae:	7833      	ldrb	r3, [r6, #0]
    41b0:	68b9      	ldr	r1, [r7, #8]
    41b2:	2b01      	cmp	r3, #1
    41b4:	bf04      	itt	eq
    41b6:	42a9      	cmpeq	r1, r5
    41b8:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41bc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    41c0:	4a41      	ldr	r2, [pc, #260]	; (42c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    41c2:	6010      	str	r0, [r2, #0]
    41c4:	4a42      	ldr	r2, [pc, #264]	; (42d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    41c6:	4841      	ldr	r0, [pc, #260]	; (42cc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    41c8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    41cc:	f102 0c04 	add.w	ip, r2, #4
    41d0:	f04f 0400 	mov.w	r4, #0
    41d4:	2b00      	cmp	r3, #0
    41d6:	d062      	beq.n	429e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    41d8:	483e      	ldr	r0, [pc, #248]	; (42d4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    41da:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    41de:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    41e2:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    41e6:	bf00      	nop
    41e8:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    41ec:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    41f0:	f04f 0801 	mov.w	r8, #1
    41f4:	2800      	cmp	r0, #0
    41f6:	bf01      	itttt	eq
    41f8:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    41fc:	2800      	cmpeq	r0, #0
    41fe:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    4202:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    4206:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    420a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    420e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    4212:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    4216:	4830      	ldr	r0, [pc, #192]	; (42d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    4218:	f8d0 c000 	ldr.w	ip, [r0]
    421c:	eba5 0c0c 	sub.w	ip, r5, ip
    4220:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    4224:	f1bc 0f02 	cmp.w	ip, #2
    4228:	d344      	bcc.n	42b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    422a:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    422e:	d841      	bhi.n	42b4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    4230:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    4234:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    4238:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    423c:	b12b      	cbz	r3, 424a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    423e:	6802      	ldr	r2, [r0, #0]
    4240:	1a8a      	subs	r2, r1, r2
    4242:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    4246:	2a02      	cmp	r2, #2
    4248:	d3f9      	bcc.n	423e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    424a:	f8c7 8004 	str.w	r8, [r7, #4]
    424e:	703c      	strb	r4, [r7, #0]
    4250:	f7ff ff50 	bl	40f4 <MPSL_IRQ_TIMER0_Handler+0x100>
    4254:	4821      	ldr	r0, [pc, #132]	; (42dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    4256:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    425a:	f364 0101 	bfi	r1, r4, #0, #2
    425e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    4262:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    4266:	2102      	movs	r1, #2
    4268:	f361 0201 	bfi	r2, r1, #0, #2
    426c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    4270:	2104      	movs	r1, #4
    4272:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    4276:	f8c0 800c 	str.w	r8, [r0, #12]
    427a:	6879      	ldr	r1, [r7, #4]
    427c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4280:	1580      	asrs	r0, r0, #22
    4282:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    4286:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    428a:	4915      	ldr	r1, [pc, #84]	; (42e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    428c:	05c0      	lsls	r0, r0, #23
    428e:	6008      	str	r0, [r1, #0]
    4290:	2004      	movs	r0, #4
    4292:	60bd      	str	r5, [r7, #8]
    4294:	7070      	strb	r0, [r6, #1]
    4296:	f886 8000 	strb.w	r8, [r6]
    429a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    429e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    42a2:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    42a6:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    42aa:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    42ae:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    42b2:	e799      	b.n	41e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    42b4:	2000      	movs	r0, #0
    42b6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    42ba:	f240 2193 	movw	r1, #659	; 0x293
    42be:	206c      	movs	r0, #108	; 0x6c
    42c0:	f000 fe68 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    42c4:	2000004a 	.word	0x2000004a
    42c8:	4001f508 	.word	0x4001f508
    42cc:	fffbfffd 	.word	0xfffbfffd
    42d0:	4000b000 	.word	0x4000b000
    42d4:	fffafffd 	.word	0xfffafffd
    42d8:	4000b504 	.word	0x4000b504
    42dc:	40008000 	.word	0x40008000
    42e0:	4001f504 	.word	0x4001f504

000042e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    42e4:	b570      	push	{r4, r5, r6, lr}
    42e6:	4c2a      	ldr	r4, [pc, #168]	; (4390 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    42e8:	68a1      	ldr	r1, [r4, #8]
    42ea:	4281      	cmp	r1, r0
    42ec:	bf14      	ite	ne
    42ee:	2201      	movne	r2, #1
    42f0:	2200      	moveq	r2, #0
    42f2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 4394 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    42f6:	f89c 5000 	ldrb.w	r5, [ip]
    42fa:	2d02      	cmp	r5, #2
    42fc:	d002      	beq.n	4304 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    42fe:	2a00      	cmp	r2, #0
    4300:	d034      	beq.n	436c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    4302:	e002      	b.n	430a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    4304:	2a00      	cmp	r2, #0
    4306:	bf08      	it	eq
    4308:	bd70      	popeq	{r4, r5, r6, pc}
    430a:	7862      	ldrb	r2, [r4, #1]
    430c:	b39a      	cbz	r2, 4376 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    430e:	4b22      	ldr	r3, [pc, #136]	; (4398 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    4310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4314:	601a      	str	r2, [r3, #0]
    4316:	4b21      	ldr	r3, [pc, #132]	; (439c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    4318:	1392      	asrs	r2, r2, #14
    431a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    431e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    4322:	2200      	movs	r2, #0
    4324:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    4328:	4a1d      	ldr	r2, [pc, #116]	; (43a0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    432a:	6816      	ldr	r6, [r2, #0]
    432c:	1b86      	subs	r6, r0, r6
    432e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    4332:	2e02      	cmp	r6, #2
    4334:	d324      	bcc.n	4380 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    4336:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    433a:	d821      	bhi.n	4380 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    433c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    4340:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    4344:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    4348:	b12d      	cbz	r5, 4356 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    434a:	6813      	ldr	r3, [r2, #0]
    434c:	1acb      	subs	r3, r1, r3
    434e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4352:	2b02      	cmp	r3, #2
    4354:	d3f9      	bcc.n	434a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    4356:	4b13      	ldr	r3, [pc, #76]	; (43a4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    4358:	2102      	movs	r1, #2
    435a:	074a      	lsls	r2, r1, #29
    435c:	601a      	str	r2, [r3, #0]
    435e:	60a0      	str	r0, [r4, #8]
    4360:	2004      	movs	r0, #4
    4362:	f88c 0001 	strb.w	r0, [ip, #1]
    4366:	f88c 1000 	strb.w	r1, [ip]
    436a:	bd70      	pop	{r4, r5, r6, pc}
    436c:	f240 21a1 	movw	r1, #673	; 0x2a1
    4370:	206c      	movs	r0, #108	; 0x6c
    4372:	f000 fe0f 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4376:	f240 21a5 	movw	r1, #677	; 0x2a5
    437a:	206c      	movs	r0, #108	; 0x6c
    437c:	f000 fe0a 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4380:	2000      	movs	r0, #0
    4382:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    4386:	f240 21b1 	movw	r1, #689	; 0x2b1
    438a:	206c      	movs	r0, #108	; 0x6c
    438c:	f000 fe02 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4390:	20000048 	.word	0x20000048
    4394:	2000004a 	.word	0x2000004a
    4398:	4001f508 	.word	0x4001f508
    439c:	4000b000 	.word	0x4000b000
    43a0:	4000b504 	.word	0x4000b504
    43a4:	4001f504 	.word	0x4001f504

000043a8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    43a8:	4801      	ldr	r0, [pc, #4]	; (43b0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    43aa:	6880      	ldr	r0, [r0, #8]
    43ac:	4770      	bx	lr
    43ae:	0000      	.short	0x0000
    43b0:	20000048 	.word	0x20000048

000043b4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    43b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43b8:	4836      	ldr	r0, [pc, #216]	; (4494 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    43ba:	4a35      	ldr	r2, [pc, #212]	; (4490 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    43bc:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    43c0:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 4498 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    43c4:	1d03      	adds	r3, r0, #4
    43c6:	2100      	movs	r1, #0
    43c8:	f89c 4000 	ldrb.w	r4, [ip]
    43cc:	b184      	cbz	r4, 43f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    43ce:	4a33      	ldr	r2, [pc, #204]	; (449c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    43d0:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    43d4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    43d8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    43dc:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    43e0:	2301      	movs	r3, #1
    43e2:	2a00      	cmp	r2, #0
    43e4:	bf04      	itt	eq
    43e6:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    43ea:	2800      	cmpeq	r0, #0
    43ec:	d111      	bne.n	4412 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    43ee:	e00a      	b.n	4406 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    43f0:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    43f4:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    43f8:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    43fc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    4400:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    4404:	e7ea      	b.n	43dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    4406:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    440a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    440e:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    4412:	2c02      	cmp	r4, #2
    4414:	d004      	beq.n	4420 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    4416:	f240 21bd 	movw	r1, #701	; 0x2bd
    441a:	206c      	movs	r0, #108	; 0x6c
    441c:	f000 fdba 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4420:	4e1f      	ldr	r6, [pc, #124]	; (44a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    4422:	6830      	ldr	r0, [r6, #0]
    4424:	4c1f      	ldr	r4, [pc, #124]	; (44a4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    4426:	1cc0      	adds	r0, r0, #3
    4428:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    442c:	68a2      	ldr	r2, [r4, #8]
    442e:	4d1e      	ldr	r5, [pc, #120]	; (44a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    4430:	4290      	cmp	r0, r2
    4432:	d00b      	beq.n	444c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    4434:	6837      	ldr	r7, [r6, #0]
    4436:	1bd7      	subs	r7, r2, r7
    4438:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    443c:	2f04      	cmp	r7, #4
    443e:	d305      	bcc.n	444c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    4440:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    4444:	d802      	bhi.n	444c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    4446:	f7ff fead 	bl	41a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    444a:	e01b      	b.n	4484 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    444c:	6830      	ldr	r0, [r6, #0]
    444e:	1a10      	subs	r0, r2, r0
    4450:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4454:	2802      	cmp	r0, #2
    4456:	d313      	bcc.n	4480 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    4458:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    445c:	d810      	bhi.n	4480 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    445e:	4a13      	ldr	r2, [pc, #76]	; (44ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    4460:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4464:	6010      	str	r0, [r2, #0]
    4466:	6063      	str	r3, [r4, #4]
    4468:	7021      	strb	r1, [r4, #0]
    446a:	606b      	str	r3, [r5, #4]
    446c:	60eb      	str	r3, [r5, #12]
    446e:	0040      	lsls	r0, r0, #1
    4470:	1f11      	subs	r1, r2, #4
    4472:	6008      	str	r0, [r1, #0]
    4474:	2004      	movs	r0, #4
    4476:	f88c 0001 	strb.w	r0, [ip, #1]
    447a:	f88c 3000 	strb.w	r3, [ip]
    447e:	e001      	b.n	4484 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    4480:	6063      	str	r3, [r4, #4]
    4482:	7021      	strb	r1, [r4, #0]
    4484:	6860      	ldr	r0, [r4, #4]
    4486:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    448a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    448e:	0000      	.short	0x0000
    4490:	fffbfffd 	.word	0xfffbfffd
    4494:	4000b000 	.word	0x4000b000
    4498:	2000004a 	.word	0x2000004a
    449c:	fffafffd 	.word	0xfffafffd
    44a0:	4000b504 	.word	0x4000b504
    44a4:	20000048 	.word	0x20000048
    44a8:	40008000 	.word	0x40008000
    44ac:	4001f508 	.word	0x4001f508

000044b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    44b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44b4:	4a54      	ldr	r2, [pc, #336]	; (4608 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    44b6:	2500      	movs	r5, #0
    44b8:	2401      	movs	r4, #1
    44ba:	f892 c000 	ldrb.w	ip, [r2]
    44be:	7853      	ldrb	r3, [r2, #1]
    44c0:	f44f 76a0 	mov.w	r6, #320	; 0x140
    44c4:	2807      	cmp	r0, #7
    44c6:	d27d      	bcs.n	45c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    44c8:	e8df f000 	tbb	[pc, r0]
    44cc:	04040404 	.word	0x04040404
    44d0:	00585858 	.word	0x00585858
    44d4:	4a4d      	ldr	r2, [pc, #308]	; (460c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    44d6:	6897      	ldr	r7, [r2, #8]
    44d8:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    44dc:	bf04      	itt	eq
    44de:	7852      	ldrbeq	r2, [r2, #1]
    44e0:	2a00      	cmpeq	r2, #0
    44e2:	d003      	beq.n	44ec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    44e4:	f1bc 0f02 	cmp.w	ip, #2
    44e8:	d005      	beq.n	44f6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    44ea:	e026      	b.n	453a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    44ec:	f240 314d 	movw	r1, #845	; 0x34d
    44f0:	206c      	movs	r0, #108	; 0x6c
    44f2:	f000 fd4f 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    44f6:	1f1a      	subs	r2, r3, #4
    44f8:	b2d2      	uxtb	r2, r2
    44fa:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    44fe:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    4502:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    4506:	2200      	movs	r2, #0
    4508:	f1bc 0f01 	cmp.w	ip, #1
    450c:	d003      	beq.n	4516 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    450e:	f1bc 0f02 	cmp.w	ip, #2
    4512:	d008      	beq.n	4526 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    4514:	e00e      	b.n	4534 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    4516:	2b04      	cmp	r3, #4
    4518:	bf24      	itt	cs
    451a:	6837      	ldrcs	r7, [r6, #0]
    451c:	2f00      	cmpcs	r7, #0
    451e:	bf08      	it	eq
    4520:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    4524:	e006      	b.n	4534 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    4526:	2b04      	cmp	r3, #4
    4528:	bf24      	itt	cs
    452a:	6837      	ldrcs	r7, [r6, #0]
    452c:	2f00      	cmpcs	r7, #0
    452e:	bf08      	it	eq
    4530:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    4534:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    4538:	d1e5      	bne.n	4506 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    453a:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 4610 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    453e:	f100 0210 	add.w	r2, r0, #16
    4542:	fa04 f202 	lsl.w	r2, r4, r2
    4546:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    454a:	f04f 0340 	mov.w	r3, #64	; 0x40
    454e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    4552:	b2db      	uxtb	r3, r3
    4554:	4463      	add	r3, ip
    4556:	601c      	str	r4, [r3, #0]
    4558:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    455c:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    4560:	eba1 0303 	sub.w	r3, r1, r3
    4564:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4568:	2b03      	cmp	r3, #3
    456a:	bf26      	itte	cs
    456c:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    4570:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    4574:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    4578:	d237      	bcs.n	45ea <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    457a:	e03c      	b.n	45f6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    457c:	f1bc 0f00 	cmp.w	ip, #0
    4580:	d006      	beq.n	4590 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    4582:	4283      	cmp	r3, r0
    4584:	d104      	bne.n	4590 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    4586:	f240 316d 	movw	r1, #877	; 0x36d
    458a:	206c      	movs	r0, #108	; 0x6c
    458c:	f000 fd02 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4590:	1f02      	subs	r2, r0, #4
    4592:	b2d3      	uxtb	r3, r2
    4594:	2b03      	cmp	r3, #3
    4596:	d304      	bcc.n	45a2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    4598:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    459c:	206c      	movs	r0, #108	; 0x6c
    459e:	f000 fcf9 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    45a2:	f8df c070 	ldr.w	ip, [pc, #112]	; 4614 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    45a6:	f103 0210 	add.w	r2, r3, #16
    45aa:	fa04 f202 	lsl.w	r2, r4, r2
    45ae:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    45b2:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    45b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    45ba:	f84c 5003 	str.w	r5, [ip, r3]
    45be:	4b16      	ldr	r3, [pc, #88]	; (4618 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    45c0:	681b      	ldr	r3, [r3, #0]
    45c2:	e000      	b.n	45c6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    45c4:	e01a      	b.n	45fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    45c6:	1f00      	subs	r0, r0, #4
    45c8:	1acb      	subs	r3, r1, r3
    45ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    45ce:	b2c0      	uxtb	r0, r0
    45d0:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    45d4:	2b02      	cmp	r3, #2
    45d6:	d30b      	bcc.n	45f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    45d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    45dc:	d808      	bhi.n	45f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    45de:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    45e2:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    45e6:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    45ea:	2001      	movs	r0, #1
    45ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45f0:	2100      	movs	r1, #0
    45f2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    45f6:	2000      	movs	r0, #0
    45f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45fc:	f240 3171 	movw	r1, #881	; 0x371
    4600:	206c      	movs	r0, #108	; 0x6c
    4602:	f000 fcc7 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4606:	0000      	.short	0x0000
    4608:	2000004a 	.word	0x2000004a
    460c:	20000048 	.word	0x20000048
    4610:	40008000 	.word	0x40008000
    4614:	4000b000 	.word	0x4000b000
    4618:	4000b504 	.word	0x4000b504

0000461c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    461c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4620:	2601      	movs	r6, #1
    4622:	2700      	movs	r7, #0
    4624:	f44f 78a0 	mov.w	r8, #320	; 0x140
    4628:	2807      	cmp	r0, #7
    462a:	d251      	bcs.n	46d0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    462c:	e8df f000 	tbb	[pc, r0]
    4630:	04040404 	.word	0x04040404
    4634:	00191919 	.word	0x00191919
    4638:	f100 0110 	add.w	r1, r0, #16
    463c:	fa06 f201 	lsl.w	r2, r6, r1
    4640:	4926      	ldr	r1, [pc, #152]	; (46dc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    4642:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4646:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    464a:	2200      	movs	r2, #0
    464c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    4650:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    4654:	508f      	str	r7, [r1, r2]
    4656:	4922      	ldr	r1, [pc, #136]	; (46e0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    4658:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    465c:	9000      	str	r0, [sp, #0]
    465e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4662:	4d20      	ldr	r5, [pc, #128]	; (46e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    4664:	1f01      	subs	r1, r0, #4
    4666:	b2cc      	uxtb	r4, r1
    4668:	7829      	ldrb	r1, [r5, #0]
    466a:	b179      	cbz	r1, 468c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    466c:	786a      	ldrb	r2, [r5, #1]
    466e:	4282      	cmp	r2, r0
    4670:	d10c      	bne.n	468c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    4672:	4a1d      	ldr	r2, [pc, #116]	; (46e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    4674:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    4678:	6010      	str	r0, [r2, #0]
    467a:	2901      	cmp	r1, #1
    467c:	bf08      	it	eq
    467e:	f7ff fd39 	bleq	40f4 <MPSL_IRQ_TIMER0_Handler+0x100>
    4682:	702f      	strb	r7, [r5, #0]
    4684:	4919      	ldr	r1, [pc, #100]	; (46ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    4686:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    468a:	6088      	str	r0, [r1, #8]
    468c:	4918      	ldr	r1, [pc, #96]	; (46f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    468e:	f104 0010 	add.w	r0, r4, #16
    4692:	fa06 f000 	lsl.w	r0, r6, r0
    4696:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    469a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    469e:	00a0      	lsls	r0, r4, #2
    46a0:	4408      	add	r0, r1
    46a2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    46a6:	4a13      	ldr	r2, [pc, #76]	; (46f4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    46a8:	6812      	ldr	r2, [r2, #0]
    46aa:	1a80      	subs	r0, r0, r2
    46ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    46b0:	2802      	cmp	r0, #2
    46b2:	d307      	bcc.n	46c4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    46b4:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    46b8:	2000      	movs	r0, #0
    46ba:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    46be:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    46c2:	500f      	str	r7, [r1, r0]
    46c4:	480c      	ldr	r0, [pc, #48]	; (46f8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    46c6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    46ca:	9000      	str	r0, [sp, #0]
    46cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    46d0:	f240 31f5 	movw	r1, #1013	; 0x3f5
    46d4:	206c      	movs	r0, #108	; 0x6c
    46d6:	f000 fc5d 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    46da:	0000      	.short	0x0000
    46dc:	40008000 	.word	0x40008000
    46e0:	40008140 	.word	0x40008140
    46e4:	2000004a 	.word	0x2000004a
    46e8:	4001f508 	.word	0x4001f508
    46ec:	20000048 	.word	0x20000048
    46f0:	4000b000 	.word	0x4000b000
    46f4:	4000b504 	.word	0x4000b504
    46f8:	4000b140 	.word	0x4000b140

000046fc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    46fc:	4825      	ldr	r0, [pc, #148]	; (4794 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    46fe:	4a24      	ldr	r2, [pc, #144]	; (4790 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    4700:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4704:	4924      	ldr	r1, [pc, #144]	; (4798 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    4706:	1d03      	adds	r3, r0, #4
    4708:	f891 c000 	ldrb.w	ip, [r1]
    470c:	2100      	movs	r1, #0
    470e:	f1bc 0f00 	cmp.w	ip, #0
    4712:	d010      	beq.n	4736 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    4714:	4a21      	ldr	r2, [pc, #132]	; (479c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    4716:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    471a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    471e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    4722:	bf00      	nop
    4724:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    4728:	2a00      	cmp	r2, #0
    472a:	bf04      	itt	eq
    472c:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    4730:	2800      	cmpeq	r0, #0
    4732:	d111      	bne.n	4758 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    4734:	e00a      	b.n	474c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    4736:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    473a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    473e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    4742:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    4746:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    474a:	e7eb      	b.n	4724 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    474c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4750:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4754:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    4758:	4811      	ldr	r0, [pc, #68]	; (47a0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    475a:	f04f 32ff 	mov.w	r2, #4294967295
    475e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4762:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    4766:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    476a:	f100 0204 	add.w	r2, r0, #4
    476e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    4772:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    4776:	f102 0204 	add.w	r2, r2, #4
    477a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    477e:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    4782:	f102 0204 	add.w	r2, r2, #4
    4786:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    478a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    478e:	4770      	bx	lr
    4790:	fffbfffd 	.word	0xfffbfffd
    4794:	4000b000 	.word	0x4000b000
    4798:	2000004a 	.word	0x2000004a
    479c:	fffafffd 	.word	0xfffafffd
    47a0:	40008000 	.word	0x40008000

000047a4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    47a4:	b510      	push	{r4, lr}
    47a6:	2807      	cmp	r0, #7
    47a8:	d20d      	bcs.n	47c6 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    47aa:	e8df f000 	tbb	[pc, r0]
    47ae:	0404      	.short	0x0404
    47b0:	06060404 	.word	0x06060404
    47b4:	0006      	.short	0x0006
    47b6:	4906      	ldr	r1, [pc, #24]	; (47d0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    47b8:	e002      	b.n	47c0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    47ba:	1f00      	subs	r0, r0, #4
    47bc:	4905      	ldr	r1, [pc, #20]	; (47d4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    47be:	b2c0      	uxtb	r0, r0
    47c0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    47c4:	bd10      	pop	{r4, pc}
    47c6:	f240 3195 	movw	r1, #917	; 0x395
    47ca:	206c      	movs	r0, #108	; 0x6c
    47cc:	f000 fbe2 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    47d0:	40008140 	.word	0x40008140
    47d4:	4000b140 	.word	0x4000b140

000047d8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    47d8:	b570      	push	{r4, r5, r6, lr}
    47da:	481f      	ldr	r0, [pc, #124]	; (4858 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    47dc:	2400      	movs	r4, #0
    47de:	2104      	movs	r1, #4
    47e0:	7004      	strb	r4, [r0, #0]
    47e2:	1e80      	subs	r0, r0, #2
    47e4:	7001      	strb	r1, [r0, #0]
    47e6:	0589      	lsls	r1, r1, #22
    47e8:	60c4      	str	r4, [r0, #12]
    47ea:	6081      	str	r1, [r0, #8]
    47ec:	f7ff fc82 	bl	40f4 <MPSL_IRQ_TIMER0_Handler+0x100>
    47f0:	2501      	movs	r5, #1
    47f2:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    47f6:	02eb      	lsls	r3, r5, #11
    47f8:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    47fc:	f3bf 8f4f 	dsb	sy
    4800:	f3bf 8f6f 	isb	sy
    4804:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    4808:	4814      	ldr	r0, [pc, #80]	; (485c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    480a:	6045      	str	r5, [r0, #4]
    480c:	6085      	str	r5, [r0, #8]
    480e:	4914      	ldr	r1, [pc, #80]	; (4860 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    4810:	680a      	ldr	r2, [r1, #0]
    4812:	2a00      	cmp	r2, #0
    4814:	d1fc      	bne.n	4810 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    4816:	1e51      	subs	r1, r2, #1
    4818:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    481c:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    4820:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    4824:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    4828:	490e      	ldr	r1, [pc, #56]	; (4864 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    482a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    482e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    4832:	1d09      	adds	r1, r1, #4
    4834:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    4838:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    483c:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    4840:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    4844:	6005      	str	r5, [r0, #0]
    4846:	f44f 7182 	mov.w	r1, #260	; 0x104
    484a:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    484e:	2102      	movs	r1, #2
    4850:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    4854:	bd70      	pop	{r4, r5, r6, pc}
    4856:	0000      	.short	0x0000
    4858:	2000004a 	.word	0x2000004a
    485c:	4000b000 	.word	0x4000b000
    4860:	4000b504 	.word	0x4000b504
    4864:	4000b004 	.word	0x4000b004

00004868 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    4868:	4808      	ldr	r0, [pc, #32]	; (488c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    486a:	f990 0000 	ldrsb.w	r0, [r0]
    486e:	2800      	cmp	r0, #0
    4870:	bfb8      	it	lt
    4872:	4770      	bxlt	lr
    4874:	f000 011f 	and.w	r1, r0, #31
    4878:	2201      	movs	r2, #1
    487a:	fa02 f101 	lsl.w	r1, r2, r1
    487e:	0940      	lsrs	r0, r0, #5
    4880:	0080      	lsls	r0, r0, #2
    4882:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4886:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    488a:	4770      	bx	lr
    488c:	20000328 	.word	0x20000328

00004890 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    4890:	4803      	ldr	r0, [pc, #12]	; (48a0 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    4892:	7800      	ldrb	r0, [r0, #0]
    4894:	2803      	cmp	r0, #3
    4896:	bf0c      	ite	eq
    4898:	2001      	moveq	r0, #1
    489a:	2000      	movne	r0, #0
    489c:	4770      	bx	lr
    489e:	0000      	.short	0x0000
    48a0:	20000314 	.word	0x20000314

000048a4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    48a4:	4801      	ldr	r0, [pc, #4]	; (48ac <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    48a6:	8840      	ldrh	r0, [r0, #2]
    48a8:	4770      	bx	lr
    48aa:	0000      	.short	0x0000
    48ac:	20000314 	.word	0x20000314

000048b0 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    48b0:	4803      	ldr	r0, [pc, #12]	; (48c0 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    48b2:	7800      	ldrb	r0, [r0, #0]
    48b4:	2802      	cmp	r0, #2
    48b6:	bf16      	itet	ne
    48b8:	2803      	cmpne	r0, #3
    48ba:	2001      	moveq	r0, #1
    48bc:	2000      	movne	r0, #0
    48be:	4770      	bx	lr
    48c0:	20000314 	.word	0x20000314

000048c4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    48c4:	4802      	ldr	r0, [pc, #8]	; (48d0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    48c6:	2100      	movs	r1, #0
    48c8:	7001      	strb	r1, [r0, #0]
    48ca:	8041      	strh	r1, [r0, #2]
    48cc:	4770      	bx	lr
    48ce:	0000      	.short	0x0000
    48d0:	20000314 	.word	0x20000314

000048d4 <MPSL_IRQ_CLOCK_Handler>:
    48d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48d8:	4c16      	ldr	r4, [pc, #88]	; (4934 <MPSL_IRQ_CLOCK_Handler+0x60>)
    48da:	7a60      	ldrb	r0, [r4, #9]
    48dc:	2800      	cmp	r0, #0
    48de:	d027      	beq.n	4930 <MPSL_IRQ_CLOCK_Handler+0x5c>
    48e0:	f44f 7180 	mov.w	r1, #256	; 0x100
    48e4:	058d      	lsls	r5, r1, #22
    48e6:	4628      	mov	r0, r5
    48e8:	f008 fe8b 	bl	d602 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    48ec:	4680      	mov	r8, r0
    48ee:	f44f 7182 	mov.w	r1, #260	; 0x104
    48f2:	4628      	mov	r0, r5
    48f4:	f008 fe85 	bl	d602 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    48f8:	2600      	movs	r6, #0
    48fa:	4607      	mov	r7, r0
    48fc:	f1b8 0f00 	cmp.w	r8, #0
    4900:	d009      	beq.n	4916 <MPSL_IRQ_CLOCK_Handler+0x42>
    4902:	2001      	movs	r0, #1
    4904:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4908:	7920      	ldrb	r0, [r4, #4]
    490a:	b120      	cbz	r0, 4916 <MPSL_IRQ_CLOCK_Handler+0x42>
    490c:	7126      	strb	r6, [r4, #4]
    490e:	69e0      	ldr	r0, [r4, #28]
    4910:	b108      	cbz	r0, 4916 <MPSL_IRQ_CLOCK_Handler+0x42>
    4912:	4780      	blx	r0
    4914:	61e6      	str	r6, [r4, #28]
    4916:	b137      	cbz	r7, 4926 <MPSL_IRQ_CLOCK_Handler+0x52>
    4918:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    491c:	2002      	movs	r0, #2
    491e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4922:	f000 fa6b 	bl	4dfc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4926:	4640      	mov	r0, r8
    4928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    492c:	f000 b858 	b.w	49e0 <MPSL_IRQ_CLOCK_Handler+0x10c>
    4930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4934:	20000058 	.word	0x20000058
    4938:	b510      	push	{r4, lr}
    493a:	f008 ff0c 	bl	d756 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    493e:	b930      	cbnz	r0, 494e <MPSL_IRQ_CLOCK_Handler+0x7a>
    4940:	f008 ff2a 	bl	d798 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4944:	b918      	cbnz	r0, 494e <MPSL_IRQ_CLOCK_Handler+0x7a>
    4946:	f008 ff5d 	bl	d804 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    494a:	2800      	cmp	r0, #0
    494c:	d002      	beq.n	4954 <MPSL_IRQ_CLOCK_Handler+0x80>
    494e:	4902      	ldr	r1, [pc, #8]	; (4958 <MPSL_IRQ_CLOCK_Handler+0x84>)
    4950:	2002      	movs	r0, #2
    4952:	6008      	str	r0, [r1, #0]
    4954:	bd10      	pop	{r4, pc}
    4956:	0000      	.short	0x0000
    4958:	40000c34 	.word	0x40000c34
    495c:	b570      	push	{r4, r5, r6, lr}
    495e:	f000 f991 	bl	4c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4962:	f000 fa9f 	bl	4ea4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4966:	4c09      	ldr	r4, [pc, #36]	; (498c <MPSL_IRQ_CLOCK_Handler+0xb8>)
    4968:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    496c:	b130      	cbz	r0, 497c <MPSL_IRQ_CLOCK_Handler+0xa8>
    496e:	f7ff ffe3 	bl	4938 <MPSL_IRQ_CLOCK_Handler+0x64>
    4972:	2001      	movs	r0, #1
    4974:	6128      	str	r0, [r5, #16]
    4976:	2004      	movs	r0, #4
    4978:	72a0      	strb	r0, [r4, #10]
    497a:	e004      	b.n	4986 <MPSL_IRQ_CLOCK_Handler+0xb2>
    497c:	2003      	movs	r0, #3
    497e:	72a0      	strb	r0, [r4, #10]
    4980:	2001      	movs	r0, #1
    4982:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4986:	2000      	movs	r0, #0
    4988:	71e0      	strb	r0, [r4, #7]
    498a:	bd70      	pop	{r4, r5, r6, pc}
    498c:	20000058 	.word	0x20000058
    4990:	b570      	push	{r4, r5, r6, lr}
    4992:	4c12      	ldr	r4, [pc, #72]	; (49dc <MPSL_IRQ_CLOCK_Handler+0x108>)
    4994:	79a0      	ldrb	r0, [r4, #6]
    4996:	b1e0      	cbz	r0, 49d2 <MPSL_IRQ_CLOCK_Handler+0xfe>
    4998:	79e1      	ldrb	r1, [r4, #7]
    499a:	1e40      	subs	r0, r0, #1
    499c:	4281      	cmp	r1, r0
    499e:	da18      	bge.n	49d2 <MPSL_IRQ_CLOCK_Handler+0xfe>
    49a0:	f000 fa80 	bl	4ea4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    49a4:	4605      	mov	r5, r0
    49a6:	f000 fb69 	bl	507c <mpsl_temperature_get>
    49aa:	79a1      	ldrb	r1, [r4, #6]
    49ac:	2901      	cmp	r1, #1
    49ae:	d902      	bls.n	49b6 <MPSL_IRQ_CLOCK_Handler+0xe2>
    49b0:	79e1      	ldrb	r1, [r4, #7]
    49b2:	1c49      	adds	r1, r1, #1
    49b4:	71e1      	strb	r1, [r4, #7]
    49b6:	b10d      	cbz	r5, 49bc <MPSL_IRQ_CLOCK_Handler+0xe8>
    49b8:	6961      	ldr	r1, [r4, #20]
    49ba:	e000      	b.n	49be <MPSL_IRQ_CLOCK_Handler+0xea>
    49bc:	6921      	ldr	r1, [r4, #16]
    49be:	1a41      	subs	r1, r0, r1
    49c0:	2902      	cmp	r1, #2
    49c2:	da02      	bge.n	49ca <MPSL_IRQ_CLOCK_Handler+0xf6>
    49c4:	f111 0f02 	cmn.w	r1, #2
    49c8:	dc07      	bgt.n	49da <MPSL_IRQ_CLOCK_Handler+0x106>
    49ca:	b10d      	cbz	r5, 49d0 <MPSL_IRQ_CLOCK_Handler+0xfc>
    49cc:	6160      	str	r0, [r4, #20]
    49ce:	e000      	b.n	49d2 <MPSL_IRQ_CLOCK_Handler+0xfe>
    49d0:	6120      	str	r0, [r4, #16]
    49d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    49d6:	f7ff bfc1 	b.w	495c <MPSL_IRQ_CLOCK_Handler+0x88>
    49da:	bd70      	pop	{r4, r5, r6, pc}
    49dc:	20000058 	.word	0x20000058
    49e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    49e4:	4606      	mov	r6, r0
    49e6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    49ea:	f44f 7186 	mov.w	r1, #268	; 0x10c
    49ee:	4628      	mov	r0, r5
    49f0:	f008 fe07 	bl	d602 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    49f4:	4680      	mov	r8, r0
    49f6:	f44f 7188 	mov.w	r1, #272	; 0x110
    49fa:	4628      	mov	r0, r5
    49fc:	f008 fe01 	bl	d602 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4a00:	4c27      	ldr	r4, [pc, #156]	; (4aa0 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    4a02:	4682      	mov	sl, r0
    4a04:	7827      	ldrb	r7, [r4, #0]
    4a06:	f104 0008 	add.w	r0, r4, #8
    4a0a:	f008 fe6e 	bl	d6ea <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4a0e:	b110      	cbz	r0, 4a16 <MPSL_IRQ_CLOCK_Handler+0x142>
    4a10:	f240 11b9 	movw	r1, #441	; 0x1b9
    4a14:	e016      	b.n	4a44 <MPSL_IRQ_CLOCK_Handler+0x170>
    4a16:	f04f 0901 	mov.w	r9, #1
    4a1a:	b146      	cbz	r6, 4a2e <MPSL_IRQ_CLOCK_Handler+0x15a>
    4a1c:	7aa0      	ldrb	r0, [r4, #10]
    4a1e:	2803      	cmp	r0, #3
    4a20:	d105      	bne.n	4a2e <MPSL_IRQ_CLOCK_Handler+0x15a>
    4a22:	2004      	movs	r0, #4
    4a24:	72a0      	strb	r0, [r4, #10]
    4a26:	f7ff ff87 	bl	4938 <MPSL_IRQ_CLOCK_Handler+0x64>
    4a2a:	f8c5 9010 	str.w	r9, [r5, #16]
    4a2e:	2600      	movs	r6, #0
    4a30:	f1b8 0f00 	cmp.w	r8, #0
    4a34:	d018      	beq.n	4a68 <MPSL_IRQ_CLOCK_Handler+0x194>
    4a36:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    4a3a:	7aa0      	ldrb	r0, [r4, #10]
    4a3c:	2804      	cmp	r0, #4
    4a3e:	d004      	beq.n	4a4a <MPSL_IRQ_CLOCK_Handler+0x176>
    4a40:	f240 11cb 	movw	r1, #459	; 0x1cb
    4a44:	206d      	movs	r0, #109	; 0x6d
    4a46:	f000 faa5 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4a4a:	f008 fe84 	bl	d756 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4a4e:	b928      	cbnz	r0, 4a5c <MPSL_IRQ_CLOCK_Handler+0x188>
    4a50:	f008 fea2 	bl	d798 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4a54:	b910      	cbnz	r0, 4a5c <MPSL_IRQ_CLOCK_Handler+0x188>
    4a56:	f008 fed5 	bl	d804 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4a5a:	b108      	cbz	r0, 4a60 <MPSL_IRQ_CLOCK_Handler+0x18c>
    4a5c:	4811      	ldr	r0, [pc, #68]	; (4aa4 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4a5e:	6006      	str	r6, [r0, #0]
    4a60:	2002      	movs	r0, #2
    4a62:	72a0      	strb	r0, [r4, #10]
    4a64:	f000 f8f2 	bl	4c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4a68:	f1ba 0f00 	cmp.w	sl, #0
    4a6c:	d008      	beq.n	4a80 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    4a6e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    4a72:	7aa0      	ldrb	r0, [r4, #10]
    4a74:	2802      	cmp	r0, #2
    4a76:	d101      	bne.n	4a7c <MPSL_IRQ_CLOCK_Handler+0x1a8>
    4a78:	f7ff ff8a 	bl	4990 <MPSL_IRQ_CLOCK_Handler+0xbc>
    4a7c:	f8c5 9014 	str.w	r9, [r5, #20]
    4a80:	b13f      	cbz	r7, 4a92 <MPSL_IRQ_CLOCK_Handler+0x1be>
    4a82:	7026      	strb	r6, [r4, #0]
    4a84:	7aa0      	ldrb	r0, [r4, #10]
    4a86:	2802      	cmp	r0, #2
    4a88:	d101      	bne.n	4a8e <MPSL_IRQ_CLOCK_Handler+0x1ba>
    4a8a:	f7ff ff67 	bl	495c <MPSL_IRQ_CLOCK_Handler+0x88>
    4a8e:	f000 f8dd 	bl	4c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4a92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a96:	4802      	ldr	r0, [pc, #8]	; (4aa0 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    4a98:	3008      	adds	r0, #8
    4a9a:	f008 be3d 	b.w	d718 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4a9e:	0000      	.short	0x0000
    4aa0:	20000058 	.word	0x20000058
    4aa4:	40000c34 	.word	0x40000c34
    4aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4aac:	4c5f      	ldr	r4, [pc, #380]	; (4c2c <MPSL_IRQ_CLOCK_Handler+0x358>)
    4aae:	2700      	movs	r7, #0
    4ab0:	4606      	mov	r6, r0
    4ab2:	61a7      	str	r7, [r4, #24]
    4ab4:	7842      	ldrb	r2, [r0, #1]
    4ab6:	7881      	ldrb	r1, [r0, #2]
    4ab8:	7800      	ldrb	r0, [r0, #0]
    4aba:	72e0      	strb	r0, [r4, #11]
    4abc:	7162      	strb	r2, [r4, #5]
    4abe:	71a1      	strb	r1, [r4, #6]
    4ac0:	71e7      	strb	r7, [r4, #7]
    4ac2:	f04f 0801 	mov.w	r8, #1
    4ac6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4aca:	2805      	cmp	r0, #5
    4acc:	d225      	bcs.n	4b1a <MPSL_IRQ_CLOCK_Handler+0x246>
    4ace:	e8df f000 	tbb	[pc, r0]
    4ad2:	0310      	.short	0x0310
    4ad4:	00222006 	.word	0x00222006
    4ad8:	f8c4 8018 	str.w	r8, [r4, #24]
    4adc:	e009      	b.n	4af2 <MPSL_IRQ_CLOCK_Handler+0x21e>
    4ade:	f000 f8d1 	bl	4c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4ae2:	2101      	movs	r1, #1
    4ae4:	4628      	mov	r0, r5
    4ae6:	f008 fd91 	bl	d60c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4aea:	2800      	cmp	r0, #0
    4aec:	d0f9      	beq.n	4ae2 <MPSL_IRQ_CLOCK_Handler+0x20e>
    4aee:	2002      	movs	r0, #2
    4af0:	61a0      	str	r0, [r4, #24]
    4af2:	f008 fdb7 	bl	d664 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    4af6:	b1b0      	cbz	r0, 4b26 <MPSL_IRQ_CLOCK_Handler+0x252>
    4af8:	f000 f9ee 	bl	4ed8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4afc:	7e21      	ldrb	r1, [r4, #24]
    4afe:	f001 0103 	and.w	r1, r1, #3
    4b02:	4288      	cmp	r0, r1
    4b04:	d10f      	bne.n	4b26 <MPSL_IRQ_CLOCK_Handler+0x252>
    4b06:	79b0      	ldrb	r0, [r6, #6]
    4b08:	b150      	cbz	r0, 4b20 <MPSL_IRQ_CLOCK_Handler+0x24c>
    4b0a:	2002      	movs	r0, #2
    4b0c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4b10:	e070      	b.n	4bf4 <MPSL_IRQ_CLOCK_Handler+0x320>
    4b12:	4847      	ldr	r0, [pc, #284]	; (4c30 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4b14:	e7ec      	b.n	4af0 <MPSL_IRQ_CLOCK_Handler+0x21c>
    4b16:	4847      	ldr	r0, [pc, #284]	; (4c34 <MPSL_IRQ_CLOCK_Handler+0x360>)
    4b18:	e7ea      	b.n	4af0 <MPSL_IRQ_CLOCK_Handler+0x21c>
    4b1a:	f240 313a 	movw	r1, #826	; 0x33a
    4b1e:	e04d      	b.n	4bbc <MPSL_IRQ_CLOCK_Handler+0x2e8>
    4b20:	f000 f9ae 	bl	4e80 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4b24:	e066      	b.n	4bf4 <MPSL_IRQ_CLOCK_Handler+0x320>
    4b26:	f8c5 800c 	str.w	r8, [r5, #12]
    4b2a:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4b2e:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4b32:	69a0      	ldr	r0, [r4, #24]
    4b34:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    4b38:	f008 fdf9 	bl	d72e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4b3c:	b940      	cbnz	r0, 4b50 <MPSL_IRQ_CLOCK_Handler+0x27c>
    4b3e:	f008 fe00 	bl	d742 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4b42:	b928      	cbnz	r0, 4b50 <MPSL_IRQ_CLOCK_Handler+0x27c>
    4b44:	f008 fe14 	bl	d770 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4b48:	b910      	cbnz	r0, 4b50 <MPSL_IRQ_CLOCK_Handler+0x27c>
    4b4a:	f008 fe25 	bl	d798 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4b4e:	b138      	cbz	r0, 4b60 <MPSL_IRQ_CLOCK_Handler+0x28c>
    4b50:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    4b54:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    4b58:	4937      	ldr	r1, [pc, #220]	; (4c38 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4b5a:	f3c0 3042 	ubfx	r0, r0, #13, #3
    4b5e:	6008      	str	r0, [r1, #0]
    4b60:	f008 fde5 	bl	d72e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4b64:	b940      	cbnz	r0, 4b78 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4b66:	f008 fdec 	bl	d742 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4b6a:	b928      	cbnz	r0, 4b78 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4b6c:	f008 fe00 	bl	d770 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4b70:	b910      	cbnz	r0, 4b78 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4b72:	f008 fe11 	bl	d798 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4b76:	b118      	cbz	r0, 4b80 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    4b78:	492f      	ldr	r1, [pc, #188]	; (4c38 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4b7a:	3110      	adds	r1, #16
    4b7c:	f8c1 8000 	str.w	r8, [r1]
    4b80:	f8c5 8008 	str.w	r8, [r5, #8]
    4b84:	2002      	movs	r0, #2
    4b86:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4b8a:	79b0      	ldrb	r0, [r6, #6]
    4b8c:	bb90      	cbnz	r0, 4bf4 <MPSL_IRQ_CLOCK_Handler+0x320>
    4b8e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    4b92:	f010 0f02 	tst.w	r0, #2
    4b96:	d00f      	beq.n	4bb8 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    4b98:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4c3c <MPSL_IRQ_CLOCK_Handler+0x368>
    4b9c:	f8d9 1000 	ldr.w	r1, [r9]
    4ba0:	43c9      	mvns	r1, r1
    4ba2:	f341 1100 	sbfx	r1, r1, #4, #1
    4ba6:	f101 0801 	add.w	r8, r1, #1
    4baa:	f8d9 1000 	ldr.w	r1, [r9]
    4bae:	f041 0110 	orr.w	r1, r1, #16
    4bb2:	f8c9 1000 	str.w	r1, [r9]
    4bb6:	e007      	b.n	4bc8 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    4bb8:	f240 21fb 	movw	r1, #763	; 0x2fb
    4bbc:	206d      	movs	r0, #109	; 0x6d
    4bbe:	f000 f9e9 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4bc2:	bf00      	nop
    4bc4:	f000 fb10 	bl	51e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4bc8:	4651      	mov	r1, sl
    4bca:	4628      	mov	r0, r5
    4bcc:	f008 fd19 	bl	d602 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4bd0:	2800      	cmp	r0, #0
    4bd2:	d0f7      	beq.n	4bc4 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    4bd4:	f000 f954 	bl	4e80 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4bd8:	f1b8 0f00 	cmp.w	r8, #0
    4bdc:	d105      	bne.n	4bea <MPSL_IRQ_CLOCK_Handler+0x316>
    4bde:	f8d9 1000 	ldr.w	r1, [r9]
    4be2:	f021 0110 	bic.w	r1, r1, #16
    4be6:	f8c9 1000 	str.w	r1, [r9]
    4bea:	2002      	movs	r0, #2
    4bec:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4bf0:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4bf4:	79a0      	ldrb	r0, [r4, #6]
    4bf6:	b170      	cbz	r0, 4c16 <MPSL_IRQ_CLOCK_Handler+0x342>
    4bf8:	7830      	ldrb	r0, [r6, #0]
    4bfa:	b960      	cbnz	r0, 4c16 <MPSL_IRQ_CLOCK_Handler+0x342>
    4bfc:	f000 f952 	bl	4ea4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4c00:	4606      	mov	r6, r0
    4c02:	f000 fa3b 	bl	507c <mpsl_temperature_get>
    4c06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4c0a:	b116      	cbz	r6, 4c12 <MPSL_IRQ_CLOCK_Handler+0x33e>
    4c0c:	e9c4 1004 	strd	r1, r0, [r4, #16]
    4c10:	e001      	b.n	4c16 <MPSL_IRQ_CLOCK_Handler+0x342>
    4c12:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4c16:	2101      	movs	r1, #1
    4c18:	4628      	mov	r0, r5
    4c1a:	f008 fcf7 	bl	d60c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4c1e:	b108      	cbz	r0, 4c24 <MPSL_IRQ_CLOCK_Handler+0x350>
    4c20:	f000 f93a 	bl	4e98 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4c24:	72a7      	strb	r7, [r4, #10]
    4c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c2a:	0000      	.short	0x0000
    4c2c:	20000058 	.word	0x20000058
    4c30:	00020001 	.word	0x00020001
    4c34:	00030001 	.word	0x00030001
    4c38:	4000053c 	.word	0x4000053c
    4c3c:	e000ed10 	.word	0xe000ed10

00004c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    4c40:	4801      	ldr	r0, [pc, #4]	; (4c48 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    4c42:	89c0      	ldrh	r0, [r0, #14]
    4c44:	4770      	bx	lr
    4c46:	0000      	.short	0x0000
    4c48:	20000058 	.word	0x20000058

00004c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4c4c:	b510      	push	{r4, lr}
    4c4e:	f3ef 8410 	mrs	r4, PRIMASK
    4c52:	b672      	cpsid	i
    4c54:	480a      	ldr	r0, [pc, #40]	; (4c80 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    4c56:	7841      	ldrb	r1, [r0, #1]
    4c58:	b129      	cbz	r1, 4c66 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    4c5a:	7841      	ldrb	r1, [r0, #1]
    4c5c:	1e49      	subs	r1, r1, #1
    4c5e:	7041      	strb	r1, [r0, #1]
    4c60:	7841      	ldrb	r1, [r0, #1]
    4c62:	b129      	cbz	r1, 4c70 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4c64:	e008      	b.n	4c78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4c66:	f44f 718e 	mov.w	r1, #284	; 0x11c
    4c6a:	206d      	movs	r0, #109	; 0x6d
    4c6c:	f000 f992 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4c70:	7880      	ldrb	r0, [r0, #2]
    4c72:	b908      	cbnz	r0, 4c78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4c74:	f000 f924 	bl	4ec0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4c78:	2c00      	cmp	r4, #0
    4c7a:	d100      	bne.n	4c7e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4c7c:	b662      	cpsie	i
    4c7e:	bd10      	pop	{r4, pc}
    4c80:	20000058 	.word	0x20000058

00004c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4c84:	b510      	push	{r4, lr}
    4c86:	f3ef 8410 	mrs	r4, PRIMASK
    4c8a:	b672      	cpsid	i
    4c8c:	4806      	ldr	r0, [pc, #24]	; (4ca8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    4c8e:	7841      	ldrb	r1, [r0, #1]
    4c90:	1c49      	adds	r1, r1, #1
    4c92:	7041      	strb	r1, [r0, #1]
    4c94:	7840      	ldrb	r0, [r0, #1]
    4c96:	2801      	cmp	r0, #1
    4c98:	d101      	bne.n	4c9e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    4c9a:	f008 fcce 	bl	d63a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    4c9e:	2c00      	cmp	r4, #0
    4ca0:	d100      	bne.n	4ca4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    4ca2:	b662      	cpsie	i
    4ca4:	bd10      	pop	{r4, pc}
    4ca6:	0000      	.short	0x0000
    4ca8:	20000058 	.word	0x20000058

00004cac <mpsl_clock_hfclk_release>:
    4cac:	4805      	ldr	r0, [pc, #20]	; (4cc4 <mpsl_clock_hfclk_release+0x18>)
    4cae:	b510      	push	{r4, lr}
    4cb0:	78c1      	ldrb	r1, [r0, #3]
    4cb2:	b121      	cbz	r1, 4cbe <mpsl_clock_hfclk_release+0x12>
    4cb4:	2100      	movs	r1, #0
    4cb6:	7101      	strb	r1, [r0, #4]
    4cb8:	70c1      	strb	r1, [r0, #3]
    4cba:	f7ff ffc7 	bl	4c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4cbe:	2000      	movs	r0, #0
    4cc0:	bd10      	pop	{r4, pc}
    4cc2:	0000      	.short	0x0000
    4cc4:	20000058 	.word	0x20000058

00004cc8 <mpsl_clock_hfclk_request>:
    4cc8:	b570      	push	{r4, r5, r6, lr}
    4cca:	4c0c      	ldr	r4, [pc, #48]	; (4cfc <mpsl_clock_hfclk_request+0x34>)
    4ccc:	78e1      	ldrb	r1, [r4, #3]
    4cce:	b961      	cbnz	r1, 4cea <mpsl_clock_hfclk_request+0x22>
    4cd0:	2501      	movs	r5, #1
    4cd2:	70e5      	strb	r5, [r4, #3]
    4cd4:	61e0      	str	r0, [r4, #28]
    4cd6:	f7ff ffd5 	bl	4c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4cda:	f000 f8e3 	bl	4ea4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4cde:	b130      	cbz	r0, 4cee <mpsl_clock_hfclk_request+0x26>
    4ce0:	69e0      	ldr	r0, [r4, #28]
    4ce2:	b110      	cbz	r0, 4cea <mpsl_clock_hfclk_request+0x22>
    4ce4:	4780      	blx	r0
    4ce6:	2000      	movs	r0, #0
    4ce8:	61e0      	str	r0, [r4, #28]
    4cea:	2000      	movs	r0, #0
    4cec:	bd70      	pop	{r4, r5, r6, pc}
    4cee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4cf2:	7125      	strb	r5, [r4, #4]
    4cf4:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    4cf8:	e7f7      	b.n	4cea <mpsl_clock_hfclk_request+0x22>
    4cfa:	0000      	.short	0x0000
    4cfc:	20000058 	.word	0x20000058

00004d00 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d04:	0005      	movs	r5, r0
    4d06:	f06f 0015 	mvn.w	r0, #21
    4d0a:	d03f      	beq.n	4d8c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d0c:	7829      	ldrb	r1, [r5, #0]
    4d0e:	2904      	cmp	r1, #4
    4d10:	d83c      	bhi.n	4d8c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d12:	2900      	cmp	r1, #0
    4d14:	7869      	ldrb	r1, [r5, #1]
    4d16:	d03b      	beq.n	4d90 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    4d18:	2900      	cmp	r1, #0
    4d1a:	d137      	bne.n	4d8c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d1c:	78a9      	ldrb	r1, [r5, #2]
    4d1e:	2900      	cmp	r1, #0
    4d20:	d134      	bne.n	4d8c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d22:	2000      	movs	r0, #0
    4d24:	f008 fc38 	bl	d598 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    4d28:	2000      	movs	r0, #0
    4d2a:	f008 fc28 	bl	d57e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    4d2e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4d32:	f04f 31ff 	mov.w	r1, #4294967295
    4d36:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    4d3a:	2600      	movs	r6, #0
    4d3c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4d40:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    4d44:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    4d48:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    4d4c:	4c14      	ldr	r4, [pc, #80]	; (4da0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    4d4e:	7066      	strb	r6, [r4, #1]
    4d50:	88a8      	ldrh	r0, [r5, #4]
    4d52:	81a0      	strh	r0, [r4, #12]
    4d54:	f008 fc68 	bl	d628 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4d58:	2701      	movs	r7, #1
    4d5a:	b108      	cbz	r0, 4d60 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4d5c:	70e7      	strb	r7, [r4, #3]
    4d5e:	7067      	strb	r7, [r4, #1]
    4d60:	2101      	movs	r1, #1
    4d62:	4640      	mov	r0, r8
    4d64:	f008 fc52 	bl	d60c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4d68:	b108      	cbz	r0, 4d6e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    4d6a:	f000 f895 	bl	4e98 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4d6e:	f240 50f5 	movw	r0, #1525	; 0x5f5
    4d72:	81e0      	strh	r0, [r4, #14]
    4d74:	4628      	mov	r0, r5
    4d76:	f7ff fe97 	bl	4aa8 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    4d7a:	7267      	strb	r7, [r4, #9]
    4d7c:	2000      	movs	r0, #0
    4d7e:	f008 fbfe 	bl	d57e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    4d82:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4d86:	4630      	mov	r0, r6
    4d88:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    4d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d90:	2900      	cmp	r1, #0
    4d92:	d0fb      	beq.n	4d8c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d94:	2920      	cmp	r1, #32
    4d96:	d8f9      	bhi.n	4d8c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d98:	78a9      	ldrb	r1, [r5, #2]
    4d9a:	2921      	cmp	r1, #33	; 0x21
    4d9c:	d9c1      	bls.n	4d22 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    4d9e:	e7f5      	b.n	4d8c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4da0:	20000058 	.word	0x20000058

00004da4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4da4:	4801      	ldr	r0, [pc, #4]	; (4dac <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    4da6:	8980      	ldrh	r0, [r0, #12]
    4da8:	4770      	bx	lr
    4daa:	0000      	.short	0x0000
    4dac:	20000058 	.word	0x20000058

00004db0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    4db0:	b510      	push	{r4, lr}
    4db2:	480d      	ldr	r0, [pc, #52]	; (4de8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4db4:	f008 fc99 	bl	d6ea <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4db8:	490b      	ldr	r1, [pc, #44]	; (4de8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4dba:	3908      	subs	r1, #8
    4dbc:	b148      	cbz	r0, 4dd2 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    4dbe:	2001      	movs	r0, #1
    4dc0:	7008      	strb	r0, [r1, #0]
    4dc2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4dc6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4dce:	f7ff bf59 	b.w	4c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4dd2:	7a88      	ldrb	r0, [r1, #10]
    4dd4:	2802      	cmp	r0, #2
    4dd6:	d101      	bne.n	4ddc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4dd8:	f7ff fdc0 	bl	495c <MPSL_IRQ_CLOCK_Handler+0x88>
    4ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4de0:	4801      	ldr	r0, [pc, #4]	; (4de8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4de2:	f008 bc99 	b.w	d718 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4de6:	0000      	.short	0x0000
    4de8:	20000060 	.word	0x20000060

00004dec <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4dec:	4802      	ldr	r0, [pc, #8]	; (4df8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    4dee:	7a80      	ldrb	r0, [r0, #10]
    4df0:	2800      	cmp	r0, #0
    4df2:	d000      	beq.n	4df6 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4df4:	2001      	movs	r0, #1
    4df6:	4770      	bx	lr
    4df8:	20000058 	.word	0x20000058

00004dfc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dfe:	4d1f      	ldr	r5, [pc, #124]	; (4e7c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4e00:	7ae8      	ldrb	r0, [r5, #11]
    4e02:	2800      	cmp	r0, #0
    4e04:	d10f      	bne.n	4e26 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4e06:	7e28      	ldrb	r0, [r5, #24]
    4e08:	f000 0003 	and.w	r0, r0, #3
    4e0c:	f008 fc1a 	bl	d644 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4e10:	2800      	cmp	r0, #0
    4e12:	d008      	beq.n	4e26 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4e14:	f3ef 8110 	mrs	r1, PRIMASK
    4e18:	b672      	cpsid	i
    4e1a:	f7ff ffe7 	bl	4dec <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4e1e:	b118      	cbz	r0, 4e28 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4e20:	2900      	cmp	r1, #0
    4e22:	d100      	bne.n	4e26 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4e24:	b662      	cpsie	i
    4e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e28:	2601      	movs	r6, #1
    4e2a:	72ae      	strb	r6, [r5, #10]
    4e2c:	b901      	cbnz	r1, 4e30 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4e2e:	b662      	cpsie	i
    4e30:	2018      	movs	r0, #24
    4e32:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4e36:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4e3a:	61a6      	str	r6, [r4, #24]
    4e3c:	f44f 7020 	mov.w	r0, #640	; 0x280
    4e40:	f8ad 0000 	strh.w	r0, [sp]
    4e44:	f8bd 0000 	ldrh.w	r0, [sp]
    4e48:	1e41      	subs	r1, r0, #1
    4e4a:	f8ad 1000 	strh.w	r1, [sp]
    4e4e:	d2f9      	bcs.n	4e44 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4e50:	2700      	movs	r7, #0
    4e52:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    4e56:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    4e5a:	4808      	ldr	r0, [pc, #32]	; (4e7c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4e5c:	3008      	adds	r0, #8
    4e5e:	f008 fc57 	bl	d710 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4e62:	702f      	strb	r7, [r5, #0]
    4e64:	f7ff fd7a 	bl	495c <MPSL_IRQ_CLOCK_Handler+0x88>
    4e68:	6166      	str	r6, [r4, #20]
    4e6a:	7968      	ldrb	r0, [r5, #5]
    4e6c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4e70:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4e74:	2018      	movs	r0, #24
    4e76:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    4e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e7c:	20000058 	.word	0x20000058

00004e80 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4e80:	b510      	push	{r4, lr}
    4e82:	4c04      	ldr	r4, [pc, #16]	; (4e94 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4e84:	7e20      	ldrb	r0, [r4, #24]
    4e86:	f000 0003 	and.w	r0, r0, #3
    4e8a:	f008 fbdb 	bl	d644 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4e8e:	2800      	cmp	r0, #0
    4e90:	d0f8      	beq.n	4e84 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    4e92:	bd10      	pop	{r4, pc}
    4e94:	20000058 	.word	0x20000058

00004e98 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    4e98:	4901      	ldr	r1, [pc, #4]	; (4ea0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    4e9a:	2001      	movs	r0, #1
    4e9c:	7008      	strb	r0, [r1, #0]
    4e9e:	4770      	bx	lr
    4ea0:	20000329 	.word	0x20000329

00004ea4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4ea4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4ea8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4eac:	b918      	cbnz	r0, 4eb6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    4eae:	4803      	ldr	r0, [pc, #12]	; (4ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    4eb0:	7800      	ldrb	r0, [r0, #0]
    4eb2:	2800      	cmp	r0, #0
    4eb4:	d000      	beq.n	4eb8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    4eb6:	2001      	movs	r0, #1
    4eb8:	4770      	bx	lr
    4eba:	0000      	.short	0x0000
    4ebc:	20000329 	.word	0x20000329

00004ec0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    4ec0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4ec4:	2101      	movs	r1, #1
    4ec6:	6041      	str	r1, [r0, #4]
    4ec8:	2100      	movs	r1, #0
    4eca:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4ece:	4801      	ldr	r0, [pc, #4]	; (4ed4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    4ed0:	7001      	strb	r1, [r0, #0]
    4ed2:	4770      	bx	lr
    4ed4:	20000329 	.word	0x20000329

00004ed8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4ed8:	4802      	ldr	r0, [pc, #8]	; (4ee4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4eda:	6800      	ldr	r0, [r0, #0]
    4edc:	f000 0003 	and.w	r0, r0, #3
    4ee0:	4770      	bx	lr
    4ee2:	0000      	.short	0x0000
    4ee4:	4000041c 	.word	0x4000041c
    4ee8:	b510      	push	{r4, lr}
    4eea:	b131      	cbz	r1, 4efa <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4eec:	2901      	cmp	r1, #1
    4eee:	d007      	beq.n	4f00 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    4ef0:	f240 3102 	movw	r1, #770	; 0x302
    4ef4:	a005      	add	r0, pc, #20	; (adr r0, 4f0c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    4ef6:	f000 f821 	bl	4f3c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4efa:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    4efe:	e001      	b.n	4f04 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    4f00:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4f04:	f000 0001 	and.w	r0, r0, #1
    4f08:	bd10      	pop	{r4, pc}
    4f0a:	0000      	.short	0x0000
    4f0c:	5f66726e 	.word	0x5f66726e
    4f10:	636f6c63 	.word	0x636f6c63
    4f14:	00682e6b 	.word	0x00682e6b
    4f18:	f3bf 8f4f 	dsb	sy
    4f1c:	4805      	ldr	r0, [pc, #20]	; (4f34 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    4f1e:	6801      	ldr	r1, [r0, #0]
    4f20:	4a05      	ldr	r2, [pc, #20]	; (4f38 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    4f22:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4f26:	4311      	orrs	r1, r2
    4f28:	6001      	str	r1, [r0, #0]
    4f2a:	f3bf 8f4f 	dsb	sy
    4f2e:	bf00      	nop
    4f30:	e7fd      	b.n	4f2e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    4f32:	0000      	.short	0x0000
    4f34:	e000ed0c 	.word	0xe000ed0c
    4f38:	05fa0004 	.word	0x05fa0004

00004f3c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4f3c:	b672      	cpsid	i
    4f3e:	4a03      	ldr	r2, [pc, #12]	; (4f4c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    4f40:	6852      	ldr	r2, [r2, #4]
    4f42:	b102      	cbz	r2, 4f46 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    4f44:	4790      	blx	r2
    4f46:	f7ff ffe7 	bl	4f18 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4f4a:	0000      	.short	0x0000
    4f4c:	20000078 	.word	0x20000078
    4f50:	4806      	ldr	r0, [pc, #24]	; (4f6c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    4f52:	b510      	push	{r4, lr}
    4f54:	2100      	movs	r1, #0
    4f56:	6001      	str	r1, [r0, #0]
    4f58:	2101      	movs	r1, #1
    4f5a:	6001      	str	r1, [r0, #0]
    4f5c:	4608      	mov	r0, r1
    4f5e:	f008 fb98 	bl	d692 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f66:	2001      	movs	r0, #1
    4f68:	f008 bb86 	b.w	d678 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4f6c:	40001ffc 	.word	0x40001ffc
    4f70:	4807      	ldr	r0, [pc, #28]	; (4f90 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    4f72:	b510      	push	{r4, lr}
    4f74:	2101      	movs	r1, #1
    4f76:	6041      	str	r1, [r0, #4]
    4f78:	1e89      	subs	r1, r1, #2
    4f7a:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4f7e:	200c      	movs	r0, #12
    4f80:	f008 fb87 	bl	d692 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f88:	200c      	movs	r0, #12
    4f8a:	f008 bb75 	b.w	d678 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4f8e:	0000      	.short	0x0000
    4f90:	4000c000 	.word	0x4000c000

00004f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4f94:	b50e      	push	{r1, r2, r3, lr}
    4f96:	b672      	cpsid	i
    4f98:	4a0f      	ldr	r2, [pc, #60]	; (4fd8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4f9a:	6855      	ldr	r5, [r2, #4]
    4f9c:	b1d5      	cbz	r5, 4fd4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    4f9e:	2200      	movs	r2, #0
    4fa0:	4603      	mov	r3, r0
    4fa2:	466e      	mov	r6, sp
    4fa4:	240a      	movs	r4, #10
    4fa6:	e003      	b.n	4fb0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    4fa8:	fbb0 f0f4 	udiv	r0, r0, r4
    4fac:	1c52      	adds	r2, r2, #1
    4fae:	b2d2      	uxtb	r2, r2
    4fb0:	2800      	cmp	r0, #0
    4fb2:	d1f9      	bne.n	4fa8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4fb4:	54b0      	strb	r0, [r6, r2]
    4fb6:	e009      	b.n	4fcc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4fb8:	fbb3 f0f4 	udiv	r0, r3, r4
    4fbc:	fb04 3010 	mls	r0, r4, r0, r3
    4fc0:	fbb3 f3f4 	udiv	r3, r3, r4
    4fc4:	1e52      	subs	r2, r2, #1
    4fc6:	b2d2      	uxtb	r2, r2
    4fc8:	3030      	adds	r0, #48	; 0x30
    4fca:	54b0      	strb	r0, [r6, r2]
    4fcc:	2a00      	cmp	r2, #0
    4fce:	d1f3      	bne.n	4fb8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    4fd0:	4630      	mov	r0, r6
    4fd2:	47a8      	blx	r5
    4fd4:	f7ff ffa0 	bl	4f18 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4fd8:	20000078 	.word	0x20000078

00004fdc <mpsl_init>:
    4fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fe0:	4c18      	ldr	r4, [pc, #96]	; (5044 <mpsl_init+0x68>)
    4fe2:	4606      	mov	r6, r0
    4fe4:	4617      	mov	r7, r2
    4fe6:	7860      	ldrb	r0, [r4, #1]
    4fe8:	460d      	mov	r5, r1
    4fea:	b118      	cbz	r0, 4ff4 <mpsl_init+0x18>
    4fec:	f04f 30ff 	mov.w	r0, #4294967295
    4ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ff4:	f7fc fbe6 	bl	17c4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    4ff8:	b906      	cbnz	r6, 4ffc <mpsl_init+0x20>
    4ffa:	4e13      	ldr	r6, [pc, #76]	; (5048 <mpsl_init+0x6c>)
    4ffc:	6067      	str	r7, [r4, #4]
    4ffe:	7025      	strb	r5, [r4, #0]
    5000:	f7ff ffa6 	bl	4f50 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    5004:	f7ff ffb4 	bl	4f70 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    5008:	4630      	mov	r0, r6
    500a:	f7ff fe79 	bl	4d00 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    500e:	0006      	movs	r6, r0
    5010:	d1ee      	bne.n	4ff0 <mpsl_init+0x14>
    5012:	f7fe fe77 	bl	3d04 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    5016:	f7ff fef1 	bl	4dfc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    501a:	f008 f9fd 	bl	d418 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    501e:	4628      	mov	r0, r5
    5020:	f008 fb2a 	bl	d678 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    5024:	2001      	movs	r0, #1
    5026:	2d00      	cmp	r5, #0
    5028:	db09      	blt.n	503e <mpsl_init+0x62>
    502a:	f005 011f 	and.w	r1, r5, #31
    502e:	fa00 f101 	lsl.w	r1, r0, r1
    5032:	096a      	lsrs	r2, r5, #5
    5034:	0092      	lsls	r2, r2, #2
    5036:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    503a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    503e:	7060      	strb	r0, [r4, #1]
    5040:	4630      	mov	r0, r6
    5042:	e7d5      	b.n	4ff0 <mpsl_init+0x14>
    5044:	20000078 	.word	0x20000078
    5048:	0000d6b4 	.word	0x0000d6b4

0000504c <mpsl_is_initialized>:
    504c:	4801      	ldr	r0, [pc, #4]	; (5054 <mpsl_is_initialized+0x8>)
    504e:	7840      	ldrb	r0, [r0, #1]
    5050:	4770      	bx	lr
    5052:	0000      	.short	0x0000
    5054:	20000078 	.word	0x20000078

00005058 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    5058:	4807      	ldr	r0, [pc, #28]	; (5078 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    505a:	f990 0000 	ldrsb.w	r0, [r0]
    505e:	2800      	cmp	r0, #0
    5060:	db09      	blt.n	5076 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    5062:	f000 021f 	and.w	r2, r0, #31
    5066:	2101      	movs	r1, #1
    5068:	4091      	lsls	r1, r2
    506a:	0940      	lsrs	r0, r0, #5
    506c:	0080      	lsls	r0, r0, #2
    506e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5072:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    5076:	4770      	bx	lr
    5078:	20000078 	.word	0x20000078

0000507c <mpsl_temperature_get>:
    507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5080:	2601      	movs	r6, #1
    5082:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    5086:	0331      	lsls	r1, r6, #12
    5088:	f04f 0800 	mov.w	r8, #0
    508c:	4640      	mov	r0, r8
    508e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    5092:	f3bf 8f4f 	dsb	sy
    5096:	f3bf 8f6f 	isb	sy
    509a:	4c16      	ldr	r4, [pc, #88]	; (50f4 <mpsl_temperature_get+0x78>)
    509c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    50a0:	200c      	movs	r0, #12
    50a2:	f008 fb15 	bl	d6d0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    50a6:	4d14      	ldr	r5, [pc, #80]	; (50f8 <mpsl_temperature_get+0x7c>)
    50a8:	6828      	ldr	r0, [r5, #0]
    50aa:	43c0      	mvns	r0, r0
    50ac:	f340 1700 	sbfx	r7, r0, #4, #1
    50b0:	6828      	ldr	r0, [r5, #0]
    50b2:	f040 0010 	orr.w	r0, r0, #16
    50b6:	6028      	str	r0, [r5, #0]
    50b8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    50bc:	6026      	str	r6, [r4, #0]
    50be:	1c7f      	adds	r7, r7, #1
    50c0:	e002      	b.n	50c8 <mpsl_temperature_get+0x4c>
    50c2:	bf00      	nop
    50c4:	f000 f890 	bl	51e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    50c8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    50cc:	2800      	cmp	r0, #0
    50ce:	d0f9      	beq.n	50c4 <mpsl_temperature_get+0x48>
    50d0:	b91f      	cbnz	r7, 50da <mpsl_temperature_get+0x5e>
    50d2:	6828      	ldr	r0, [r5, #0]
    50d4:	f020 0010 	bic.w	r0, r0, #16
    50d8:	6028      	str	r0, [r5, #0]
    50da:	4808      	ldr	r0, [pc, #32]	; (50fc <mpsl_temperature_get+0x80>)
    50dc:	6805      	ldr	r5, [r0, #0]
    50de:	6066      	str	r6, [r4, #4]
    50e0:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    50e4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    50e8:	200c      	movs	r0, #12
    50ea:	f008 faf1 	bl	d6d0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    50ee:	4628      	mov	r0, r5
    50f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50f4:	4000c000 	.word	0x4000c000
    50f8:	e000ed10 	.word	0xe000ed10
    50fc:	4000c508 	.word	0x4000c508

00005100 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    5100:	b510      	push	{r4, lr}
    5102:	4602      	mov	r2, r0
    5104:	2005      	movs	r0, #5
    5106:	490c      	ldr	r1, [pc, #48]	; (5138 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    5108:	e004      	b.n	5114 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    510a:	bf00      	nop
    510c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    5110:	791b      	ldrb	r3, [r3, #4]
    5112:	b133      	cbz	r3, 5122 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    5114:	1e40      	subs	r0, r0, #1
    5116:	b2c0      	uxtb	r0, r0
    5118:	d2f8      	bcs.n	510c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    511a:	2148      	movs	r1, #72	; 0x48
    511c:	2069      	movs	r0, #105	; 0x69
    511e:	f7ff ff39 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5122:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    5126:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    512a:	2200      	movs	r2, #0
    512c:	714a      	strb	r2, [r1, #5]
    512e:	718a      	strb	r2, [r1, #6]
    5130:	2201      	movs	r2, #1
    5132:	710a      	strb	r2, [r1, #4]
    5134:	bd10      	pop	{r4, pc}
    5136:	0000      	.short	0x0000
    5138:	20000fe4 	.word	0x20000fe4

0000513c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    513c:	b510      	push	{r4, lr}
    513e:	2805      	cmp	r0, #5
    5140:	d301      	bcc.n	5146 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    5142:	2158      	movs	r1, #88	; 0x58
    5144:	e006      	b.n	5154 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    5146:	490a      	ldr	r1, [pc, #40]	; (5170 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    5148:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    514c:	7901      	ldrb	r1, [r0, #4]
    514e:	2901      	cmp	r1, #1
    5150:	d003      	beq.n	515a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    5152:	2159      	movs	r1, #89	; 0x59
    5154:	2069      	movs	r0, #105	; 0x69
    5156:	f7ff ff1d 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    515a:	7941      	ldrb	r1, [r0, #5]
    515c:	7982      	ldrb	r2, [r0, #6]
    515e:	1c49      	adds	r1, r1, #1
    5160:	b2c9      	uxtb	r1, r1
    5162:	428a      	cmp	r2, r1
    5164:	d000      	beq.n	5168 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    5166:	7141      	strb	r1, [r0, #5]
    5168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    516c:	f7ff bf74 	b.w	5058 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    5170:	20000fe4 	.word	0x20000fe4

00005174 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    5174:	b570      	push	{r4, r5, r6, lr}
    5176:	2505      	movs	r5, #5
    5178:	4e0e      	ldr	r6, [pc, #56]	; (51b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    517a:	4c0f      	ldr	r4, [pc, #60]	; (51b8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    517c:	e016      	b.n	51ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    517e:	7821      	ldrb	r1, [r4, #0]
    5180:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    5184:	7902      	ldrb	r2, [r0, #4]
    5186:	2a01      	cmp	r2, #1
    5188:	d108      	bne.n	519c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    518a:	7942      	ldrb	r2, [r0, #5]
    518c:	7983      	ldrb	r3, [r0, #6]
    518e:	429a      	cmp	r2, r3
    5190:	d004      	beq.n	519c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    5192:	7942      	ldrb	r2, [r0, #5]
    5194:	7182      	strb	r2, [r0, #6]
    5196:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    519a:	4780      	blx	r0
    519c:	7820      	ldrb	r0, [r4, #0]
    519e:	1c40      	adds	r0, r0, #1
    51a0:	b2c0      	uxtb	r0, r0
    51a2:	7020      	strb	r0, [r4, #0]
    51a4:	2805      	cmp	r0, #5
    51a6:	d301      	bcc.n	51ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    51a8:	2000      	movs	r0, #0
    51aa:	7020      	strb	r0, [r4, #0]
    51ac:	1e6d      	subs	r5, r5, #1
    51ae:	b2ed      	uxtb	r5, r5
    51b0:	d2e5      	bcs.n	517e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    51b2:	bd70      	pop	{r4, r5, r6, pc}
    51b4:	20000fe4 	.word	0x20000fe4
    51b8:	2000032a 	.word	0x2000032a

000051bc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    51bc:	b500      	push	{lr}
    51be:	f008 fab6 	bl	d72e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    51c2:	b940      	cbnz	r0, 51d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    51c4:	f008 fabd 	bl	d742 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    51c8:	b928      	cbnz	r0, 51d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    51ca:	f008 fad1 	bl	d770 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    51ce:	b910      	cbnz	r0, 51d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    51d0:	f008 fae2 	bl	d798 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    51d4:	b108      	cbz	r0, 51da <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    51d6:	4802      	ldr	r0, [pc, #8]	; (51e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    51d8:	bd00      	pop	{pc}
    51da:	4802      	ldr	r0, [pc, #8]	; (51e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    51dc:	bd00      	pop	{pc}
    51de:	0000      	.short	0x0000
    51e0:	4000050c 	.word	0x4000050c
    51e4:	4001e700 	.word	0x4001e700

000051e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    51e8:	b510      	push	{r4, lr}
    51ea:	f008 fad5 	bl	d798 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    51ee:	b330      	cbz	r0, 523e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    51f0:	f3ef 8010 	mrs	r0, PRIMASK
    51f4:	b1c8      	cbz	r0, 522a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    51f6:	2100      	movs	r1, #0
    51f8:	b672      	cpsid	i
    51fa:	4812      	ldr	r0, [pc, #72]	; (5244 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    51fc:	6802      	ldr	r2, [r0, #0]
    51fe:	6803      	ldr	r3, [r0, #0]
    5200:	f3c2 1200 	ubfx	r2, r2, #4, #1
    5204:	f043 0310 	orr.w	r3, r3, #16
    5208:	6003      	str	r3, [r0, #0]
    520a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    520e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    5212:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    5216:	431c      	orrs	r4, r3
    5218:	d000      	beq.n	521c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    521a:	bf40      	sev
    521c:	bf20      	wfe
    521e:	bf00      	nop
    5220:	bf00      	nop
    5222:	bf00      	nop
    5224:	bf00      	nop
    5226:	b112      	cbz	r2, 522e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    5228:	e005      	b.n	5236 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    522a:	2101      	movs	r1, #1
    522c:	e7e4      	b.n	51f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    522e:	6802      	ldr	r2, [r0, #0]
    5230:	f022 0210 	bic.w	r2, r2, #16
    5234:	6002      	str	r2, [r0, #0]
    5236:	2900      	cmp	r1, #0
    5238:	d000      	beq.n	523c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    523a:	b662      	cpsie	i
    523c:	bd10      	pop	{r4, pc}
    523e:	bf20      	wfe
    5240:	bd10      	pop	{r4, pc}
    5242:	0000      	.short	0x0000
    5244:	e000ed10 	.word	0xe000ed10

00005248 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    5248:	4901      	ldr	r1, [pc, #4]	; (5250 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    524a:	2001      	movs	r0, #1
    524c:	7088      	strb	r0, [r1, #2]
    524e:	4770      	bx	lr
    5250:	20000080 	.word	0x20000080

00005254 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    5254:	0000d9e5 0000da1d 0000da07 0000d9f5     ................
    5264:	0000da01 0000d9ef 0000d9e3 0000d9e1     ................
    5274:	0000da19 0000da0d 0000d9fb 0000d9e9     ................
    5284:	0000d9db 0000d9d3 0000d9d7 0000d9cd     ................

00005294 <mpsl_fem_disable>:
    5294:	4801      	ldr	r0, [pc, #4]	; (529c <mpsl_fem_disable+0x8>)
    5296:	6800      	ldr	r0, [r0, #0]
    5298:	6800      	ldr	r0, [r0, #0]
    529a:	4700      	bx	r0
    529c:	20000094 	.word	0x20000094

000052a0 <mpsl_fem_lna_configuration_clear>:
    52a0:	4801      	ldr	r0, [pc, #4]	; (52a8 <mpsl_fem_lna_configuration_clear+0x8>)
    52a2:	6800      	ldr	r0, [r0, #0]
    52a4:	6940      	ldr	r0, [r0, #20]
    52a6:	4700      	bx	r0
    52a8:	20000094 	.word	0x20000094

000052ac <mpsl_fem_lna_configuration_set>:
    52ac:	4a01      	ldr	r2, [pc, #4]	; (52b4 <mpsl_fem_lna_configuration_set+0x8>)
    52ae:	6812      	ldr	r2, [r2, #0]
    52b0:	68d2      	ldr	r2, [r2, #12]
    52b2:	4710      	bx	r2
    52b4:	20000094 	.word	0x20000094

000052b8 <mpsl_fem_lna_is_configured>:
    52b8:	4901      	ldr	r1, [pc, #4]	; (52c0 <mpsl_fem_lna_is_configured+0x8>)
    52ba:	6809      	ldr	r1, [r1, #0]
    52bc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    52be:	4708      	bx	r1
    52c0:	20000094 	.word	0x20000094

000052c4 <mpsl_fem_pa_configuration_clear>:
    52c4:	4801      	ldr	r0, [pc, #4]	; (52cc <mpsl_fem_pa_configuration_clear+0x8>)
    52c6:	6800      	ldr	r0, [r0, #0]
    52c8:	6900      	ldr	r0, [r0, #16]
    52ca:	4700      	bx	r0
    52cc:	20000094 	.word	0x20000094

000052d0 <mpsl_fem_pa_configuration_set>:
    52d0:	4a01      	ldr	r2, [pc, #4]	; (52d8 <mpsl_fem_pa_configuration_set+0x8>)
    52d2:	6812      	ldr	r2, [r2, #0]
    52d4:	6892      	ldr	r2, [r2, #8]
    52d6:	4710      	bx	r2
    52d8:	20000094 	.word	0x20000094

000052dc <mpsl_fem_pa_gain_set>:
    52dc:	4901      	ldr	r1, [pc, #4]	; (52e4 <mpsl_fem_pa_gain_set+0x8>)
    52de:	6809      	ldr	r1, [r1, #0]
    52e0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    52e2:	4708      	bx	r1
    52e4:	20000094 	.word	0x20000094

000052e8 <mpsl_fem_pa_is_configured>:
    52e8:	4901      	ldr	r1, [pc, #4]	; (52f0 <mpsl_fem_pa_is_configured+0x8>)
    52ea:	6809      	ldr	r1, [r1, #0]
    52ec:	6a89      	ldr	r1, [r1, #40]	; 0x28
    52ee:	4708      	bx	r1
    52f0:	20000094 	.word	0x20000094

000052f4 <mpsl_fem_tx_power_split>:
    52f4:	4b01      	ldr	r3, [pc, #4]	; (52fc <mpsl_fem_tx_power_split+0x8>)
    52f6:	681b      	ldr	r3, [r3, #0]
    52f8:	685b      	ldr	r3, [r3, #4]
    52fa:	4718      	bx	r3
    52fc:	20000094 	.word	0x20000094

00005300 <mpsl_fem_device_config_254_apply_get>:
    5300:	4801      	ldr	r0, [pc, #4]	; (5308 <mpsl_fem_device_config_254_apply_get+0x8>)
    5302:	7800      	ldrb	r0, [r0, #0]
    5304:	4770      	bx	lr
    5306:	0000      	.short	0x0000
    5308:	2000032b 	.word	0x2000032b
    530c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    530e:	4c14      	ldr	r4, [pc, #80]	; (5360 <mpsl_fem_device_config_254_apply_get+0x60>)
    5310:	7a20      	ldrb	r0, [r4, #8]
    5312:	f88d 0001 	strb.w	r0, [sp, #1]
    5316:	79e0      	ldrb	r0, [r4, #7]
    5318:	f88d 0000 	strb.w	r0, [sp]
    531c:	79a0      	ldrb	r0, [r4, #6]
    531e:	f8ad 0004 	strh.w	r0, [sp, #4]
    5322:	7960      	ldrb	r0, [r4, #5]
    5324:	f8ad 0002 	strh.w	r0, [sp, #2]
    5328:	4668      	mov	r0, sp
    532a:	f006 f895 	bl	b458 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    532e:	b108      	cbz	r0, 5334 <mpsl_fem_device_config_254_apply_get+0x34>
    5330:	2183      	movs	r1, #131	; 0x83
    5332:	e010      	b.n	5356 <mpsl_fem_device_config_254_apply_get+0x56>
    5334:	68e0      	ldr	r0, [r4, #12]
    5336:	9002      	str	r0, [sp, #8]
    5338:	a802      	add	r0, sp, #8
    533a:	f006 f8a3 	bl	b484 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    533e:	b108      	cbz	r0, 5344 <mpsl_fem_device_config_254_apply_get+0x44>
    5340:	2187      	movs	r1, #135	; 0x87
    5342:	e008      	b.n	5356 <mpsl_fem_device_config_254_apply_get+0x56>
    5344:	4807      	ldr	r0, [pc, #28]	; (5364 <mpsl_fem_device_config_254_apply_get+0x64>)
    5346:	6800      	ldr	r0, [r0, #0]
    5348:	9003      	str	r0, [sp, #12]
    534a:	a803      	add	r0, sp, #12
    534c:	f00b fcc7 	bl	10cde <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    5350:	2800      	cmp	r0, #0
    5352:	d003      	beq.n	535c <mpsl_fem_device_config_254_apply_get+0x5c>
    5354:	218b      	movs	r1, #139	; 0x8b
    5356:	2003      	movs	r0, #3
    5358:	f000 f8ec 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    535c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    535e:	0000      	.short	0x0000
    5360:	2000100c 	.word	0x2000100c
    5364:	00005640 	.word	0x00005640

00005368 <sdc_build_revision_get>:
    5368:	b510      	push	{r4, lr}
    536a:	b128      	cbz	r0, 5378 <sdc_build_revision_get+0x10>
    536c:	2214      	movs	r2, #20
    536e:	4904      	ldr	r1, [pc, #16]	; (5380 <sdc_build_revision_get+0x18>)
    5370:	f008 fa52 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5374:	2000      	movs	r0, #0
    5376:	bd10      	pop	{r4, pc}
    5378:	f06f 0015 	mvn.w	r0, #21
    537c:	bd10      	pop	{r4, pc}
    537e:	0000      	.short	0x0000
    5380:	0000565c 	.word	0x0000565c

00005384 <sdc_cfg_set>:
    5384:	b570      	push	{r4, r5, r6, lr}
    5386:	0003      	movs	r3, r0
    5388:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    538c:	d103      	bne.n	5396 <sdc_cfg_set+0x12>
    538e:	4c2e      	ldr	r4, [pc, #184]	; (5448 <sdc_cfg_set+0xc4>)
    5390:	7863      	ldrb	r3, [r4, #1]
    5392:	b10b      	cbz	r3, 5398 <sdc_cfg_set+0x14>
    5394:	1180      	asrs	r0, r0, #6
    5396:	bd70      	pop	{r4, r5, r6, pc}
    5398:	b301      	cbz	r1, 53dc <sdc_cfg_set+0x58>
    539a:	f06f 0515 	mvn.w	r5, #21
    539e:	b38a      	cbz	r2, 5404 <sdc_cfg_set+0x80>
    53a0:	4b2a      	ldr	r3, [pc, #168]	; (544c <sdc_cfg_set+0xc8>)
    53a2:	290c      	cmp	r1, #12
    53a4:	d24b      	bcs.n	543e <sdc_cfg_set+0xba>
    53a6:	e8df f001 	tbb	[pc, r1]
    53aa:	064a      	.short	0x064a
    53ac:	1d1a0c09 	.word	0x1d1a0c09
    53b0:	31202e25 	.word	0x31202e25
    53b4:	3b36      	.short	0x3b36
    53b6:	7810      	ldrb	r0, [r2, #0]
    53b8:	7018      	strb	r0, [r3, #0]
    53ba:	e035      	b.n	5428 <sdc_cfg_set+0xa4>
    53bc:	7810      	ldrb	r0, [r2, #0]
    53be:	7058      	strb	r0, [r3, #1]
    53c0:	e032      	b.n	5428 <sdc_cfg_set+0xa4>
    53c2:	7890      	ldrb	r0, [r2, #2]
    53c4:	b1f0      	cbz	r0, 5404 <sdc_cfg_set+0x80>
    53c6:	78d0      	ldrb	r0, [r2, #3]
    53c8:	b1e0      	cbz	r0, 5404 <sdc_cfg_set+0x80>
    53ca:	7810      	ldrb	r0, [r2, #0]
    53cc:	281b      	cmp	r0, #27
    53ce:	d336      	bcc.n	543e <sdc_cfg_set+0xba>
    53d0:	7850      	ldrb	r0, [r2, #1]
    53d2:	281b      	cmp	r0, #27
    53d4:	d333      	bcc.n	543e <sdc_cfg_set+0xba>
    53d6:	6810      	ldr	r0, [r2, #0]
    53d8:	f8c3 0005 	str.w	r0, [r3, #5]
    53dc:	e024      	b.n	5428 <sdc_cfg_set+0xa4>
    53de:	6810      	ldr	r0, [r2, #0]
    53e0:	60d8      	str	r0, [r3, #12]
    53e2:	e021      	b.n	5428 <sdc_cfg_set+0xa4>
    53e4:	7810      	ldrb	r0, [r2, #0]
    53e6:	7098      	strb	r0, [r3, #2]
    53e8:	e01e      	b.n	5428 <sdc_cfg_set+0xa4>
    53ea:	7811      	ldrb	r1, [r2, #0]
    53ec:	2900      	cmp	r1, #0
    53ee:	d1d2      	bne.n	5396 <sdc_cfg_set+0x12>
    53f0:	70d9      	strb	r1, [r3, #3]
    53f2:	e019      	b.n	5428 <sdc_cfg_set+0xa4>
    53f4:	78e0      	ldrb	r0, [r4, #3]
    53f6:	b110      	cbz	r0, 53fe <sdc_cfg_set+0x7a>
    53f8:	7810      	ldrb	r0, [r2, #0]
    53fa:	2802      	cmp	r0, #2
    53fc:	d31f      	bcc.n	543e <sdc_cfg_set+0xba>
    53fe:	7810      	ldrb	r0, [r2, #0]
    5400:	7418      	strb	r0, [r3, #16]
    5402:	e011      	b.n	5428 <sdc_cfg_set+0xa4>
    5404:	e01b      	b.n	543e <sdc_cfg_set+0xba>
    5406:	8810      	ldrh	r0, [r2, #0]
    5408:	8258      	strh	r0, [r3, #18]
    540a:	e00d      	b.n	5428 <sdc_cfg_set+0xa4>
    540c:	7811      	ldrb	r1, [r2, #0]
    540e:	2900      	cmp	r1, #0
    5410:	d1c1      	bne.n	5396 <sdc_cfg_set+0x12>
    5412:	7119      	strb	r1, [r3, #4]
    5414:	e008      	b.n	5428 <sdc_cfg_set+0xa4>
    5416:	7810      	ldrb	r0, [r2, #0]
    5418:	2802      	cmp	r0, #2
    541a:	d310      	bcc.n	543e <sdc_cfg_set+0xba>
    541c:	7518      	strb	r0, [r3, #20]
    541e:	e003      	b.n	5428 <sdc_cfg_set+0xa4>
    5420:	7811      	ldrb	r1, [r2, #0]
    5422:	2900      	cmp	r1, #0
    5424:	d1b7      	bne.n	5396 <sdc_cfg_set+0x12>
    5426:	7559      	strb	r1, [r3, #21]
    5428:	2201      	movs	r2, #1
    542a:	4908      	ldr	r1, [pc, #32]	; (544c <sdc_cfg_set+0xc8>)
    542c:	2000      	movs	r0, #0
    542e:	f008 fb0f 	bl	da50 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    5432:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    5436:	db04      	blt.n	5442 <sdc_cfg_set+0xbe>
    5438:	f06f 000b 	mvn.w	r0, #11
    543c:	bd70      	pop	{r4, r5, r6, pc}
    543e:	4628      	mov	r0, r5
    5440:	bd70      	pop	{r4, r5, r6, pc}
    5442:	2101      	movs	r1, #1
    5444:	70a1      	strb	r1, [r4, #2]
    5446:	bd70      	pop	{r4, r5, r6, pc}
    5448:	20000098 	.word	0x20000098
    544c:	2000100c 	.word	0x2000100c

00005450 <sdc_enable>:
    5450:	b570      	push	{r4, r5, r6, lr}
    5452:	460c      	mov	r4, r1
    5454:	0005      	movs	r5, r0
    5456:	d019      	beq.n	548c <sdc_enable+0x3c>
    5458:	b1c4      	cbz	r4, 548c <sdc_enable+0x3c>
    545a:	f000 f925 	bl	56a8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    545e:	b1c0      	cbz	r0, 5492 <sdc_enable+0x42>
    5460:	4628      	mov	r0, r5
    5462:	f7ff fe4d 	bl	5100 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5466:	4d0c      	ldr	r5, [pc, #48]	; (5498 <sdc_enable+0x48>)
    5468:	2200      	movs	r2, #0
    546a:	490c      	ldr	r1, [pc, #48]	; (549c <sdc_enable+0x4c>)
    546c:	7028      	strb	r0, [r5, #0]
    546e:	4620      	mov	r0, r4
    5470:	f008 faee 	bl	da50 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    5474:	f00c f86b 	bl	1154e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    5478:	2100      	movs	r1, #0
    547a:	7828      	ldrb	r0, [r5, #0]
    547c:	f006 fa4a 	bl	b914 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    5480:	f7ff ff44 	bl	530c <mpsl_fem_device_config_254_apply_get+0xc>
    5484:	2001      	movs	r0, #1
    5486:	7068      	strb	r0, [r5, #1]
    5488:	2000      	movs	r0, #0
    548a:	bd70      	pop	{r4, r5, r6, pc}
    548c:	f06f 0015 	mvn.w	r0, #21
    5490:	bd70      	pop	{r4, r5, r6, pc}
    5492:	f04f 30ff 	mov.w	r0, #4294967295
    5496:	bd70      	pop	{r4, r5, r6, pc}
    5498:	20000098 	.word	0x20000098
    549c:	2000100c 	.word	0x2000100c

000054a0 <sdc_init>:
    54a0:	b530      	push	{r4, r5, lr}
    54a2:	b087      	sub	sp, #28
    54a4:	0005      	movs	r5, r0
    54a6:	d00c      	beq.n	54c2 <sdc_init+0x22>
    54a8:	f7ff fdd0 	bl	504c <mpsl_is_initialized>
    54ac:	f04f 34ff 	mov.w	r4, #4294967295
    54b0:	b120      	cbz	r0, 54bc <sdc_init+0x1c>
    54b2:	f7ff fc77 	bl	4da4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    54b6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    54ba:	d905      	bls.n	54c8 <sdc_init+0x28>
    54bc:	4620      	mov	r0, r4
    54be:	b007      	add	sp, #28
    54c0:	bd30      	pop	{r4, r5, pc}
    54c2:	f06f 0015 	mvn.w	r0, #21
    54c6:	e7fa      	b.n	54be <sdc_init+0x1e>
    54c8:	4c15      	ldr	r4, [pc, #84]	; (5520 <sdc_init+0x80>)
    54ca:	4816      	ldr	r0, [pc, #88]	; (5524 <sdc_init+0x84>)
    54cc:	6065      	str	r5, [r4, #4]
    54ce:	f000 f9f5 	bl	58bc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    54d2:	2000      	movs	r0, #0
    54d4:	7060      	strb	r0, [r4, #1]
    54d6:	70a0      	strb	r0, [r4, #2]
    54d8:	70e0      	strb	r0, [r4, #3]
    54da:	4601      	mov	r1, r0
    54dc:	2218      	movs	r2, #24
    54de:	4668      	mov	r0, sp
    54e0:	f008 fa14 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    54e4:	2218      	movs	r2, #24
    54e6:	4910      	ldr	r1, [pc, #64]	; (5528 <sdc_init+0x88>)
    54e8:	4668      	mov	r0, sp
    54ea:	f008 f995 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    54ee:	2218      	movs	r2, #24
    54f0:	4669      	mov	r1, sp
    54f2:	480e      	ldr	r0, [pc, #56]	; (552c <sdc_init+0x8c>)
    54f4:	f008 f990 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    54f8:	f3ef 8410 	mrs	r4, PRIMASK
    54fc:	b672      	cpsid	i
    54fe:	f06f 000c 	mvn.w	r0, #12
    5502:	f000 fd57 	bl	5fb4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    5506:	480a      	ldr	r0, [pc, #40]	; (5530 <sdc_init+0x90>)
    5508:	f000 fe22 	bl	6150 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    550c:	b118      	cbz	r0, 5516 <sdc_init+0x76>
    550e:	219e      	movs	r1, #158	; 0x9e
    5510:	2003      	movs	r0, #3
    5512:	f000 f80f 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5516:	b904      	cbnz	r4, 551a <sdc_init+0x7a>
    5518:	b662      	cpsie	i
    551a:	2000      	movs	r0, #0
    551c:	e7cf      	b.n	54be <sdc_init+0x1e>
    551e:	0000      	.short	0x0000
    5520:	20000098 	.word	0x20000098
    5524:	0000530d 	.word	0x0000530d
    5528:	00005644 	.word	0x00005644
    552c:	2000100c 	.word	0x2000100c
    5530:	000056d5 	.word	0x000056d5

00005534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    5534:	b50e      	push	{r1, r2, r3, lr}
    5536:	b672      	cpsid	i
    5538:	4a15      	ldr	r2, [pc, #84]	; (5590 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    553a:	6855      	ldr	r5, [r2, #4]
    553c:	b1dd      	cbz	r5, 5576 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    553e:	2200      	movs	r2, #0
    5540:	4603      	mov	r3, r0
    5542:	466e      	mov	r6, sp
    5544:	240a      	movs	r4, #10
    5546:	e003      	b.n	5550 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    5548:	fbb0 f0f4 	udiv	r0, r0, r4
    554c:	1c52      	adds	r2, r2, #1
    554e:	b2d2      	uxtb	r2, r2
    5550:	2800      	cmp	r0, #0
    5552:	d1f9      	bne.n	5548 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    5554:	54b0      	strb	r0, [r6, r2]
    5556:	e00a      	b.n	556e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    5558:	b2d8      	uxtb	r0, r3
    555a:	fbb0 f7f4 	udiv	r7, r0, r4
    555e:	fbb3 f3f4 	udiv	r3, r3, r4
    5562:	fb04 0017 	mls	r0, r4, r7, r0
    5566:	1e52      	subs	r2, r2, #1
    5568:	b2d2      	uxtb	r2, r2
    556a:	3030      	adds	r0, #48	; 0x30
    556c:	54b0      	strb	r0, [r6, r2]
    556e:	2a00      	cmp	r2, #0
    5570:	d1f2      	bne.n	5558 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    5572:	4630      	mov	r0, r6
    5574:	47a8      	blx	r5
    5576:	f3bf 8f4f 	dsb	sy
    557a:	4806      	ldr	r0, [pc, #24]	; (5594 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    557c:	6801      	ldr	r1, [r0, #0]
    557e:	4a06      	ldr	r2, [pc, #24]	; (5598 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    5580:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    5584:	4311      	orrs	r1, r2
    5586:	6001      	str	r1, [r0, #0]
    5588:	f3bf 8f4f 	dsb	sy
    558c:	bf00      	nop
    558e:	e7fd      	b.n	558c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    5590:	20000098 	.word	0x20000098
    5594:	e000ed0c 	.word	0xe000ed0c
    5598:	05fa0004 	.word	0x05fa0004

0000559c <sdc_support_adv>:
    559c:	4806      	ldr	r0, [pc, #24]	; (55b8 <sdc_support_adv+0x1c>)
    559e:	b510      	push	{r4, lr}
    55a0:	7881      	ldrb	r1, [r0, #2]
    55a2:	7840      	ldrb	r0, [r0, #1]
    55a4:	4301      	orrs	r1, r0
    55a6:	d002      	beq.n	55ae <sdc_support_adv+0x12>
    55a8:	f04f 30ff 	mov.w	r0, #4294967295
    55ac:	bd10      	pop	{r4, pc}
    55ae:	f006 f9cf 	bl	b950 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    55b2:	2000      	movs	r0, #0
    55b4:	bd10      	pop	{r4, pc}
    55b6:	0000      	.short	0x0000
    55b8:	20000098 	.word	0x20000098

000055bc <sdc_support_dle_peripheral>:
    55bc:	4806      	ldr	r0, [pc, #24]	; (55d8 <sdc_support_dle_peripheral+0x1c>)
    55be:	b510      	push	{r4, lr}
    55c0:	7881      	ldrb	r1, [r0, #2]
    55c2:	7840      	ldrb	r0, [r0, #1]
    55c4:	4301      	orrs	r1, r0
    55c6:	d002      	beq.n	55ce <sdc_support_dle_peripheral+0x12>
    55c8:	f04f 30ff 	mov.w	r0, #4294967295
    55cc:	bd10      	pop	{r4, pc}
    55ce:	f005 ff71 	bl	b4b4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    55d2:	2000      	movs	r0, #0
    55d4:	bd10      	pop	{r4, pc}
    55d6:	0000      	.short	0x0000
    55d8:	20000098 	.word	0x20000098

000055dc <sdc_support_le_2m_phy>:
    55dc:	4807      	ldr	r0, [pc, #28]	; (55fc <sdc_support_le_2m_phy+0x20>)
    55de:	b510      	push	{r4, lr}
    55e0:	7881      	ldrb	r1, [r0, #2]
    55e2:	7840      	ldrb	r0, [r0, #1]
    55e4:	4301      	orrs	r1, r0
    55e6:	d002      	beq.n	55ee <sdc_support_le_2m_phy+0x12>
    55e8:	f04f 30ff 	mov.w	r0, #4294967295
    55ec:	bd10      	pop	{r4, pc}
    55ee:	f00b fd43 	bl	11078 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    55f2:	f00b fd51 	bl	11098 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    55f6:	2000      	movs	r0, #0
    55f8:	bd10      	pop	{r4, pc}
    55fa:	0000      	.short	0x0000
    55fc:	20000098 	.word	0x20000098

00005600 <sdc_support_peripheral>:
    5600:	4806      	ldr	r0, [pc, #24]	; (561c <sdc_support_peripheral+0x1c>)
    5602:	b510      	push	{r4, lr}
    5604:	7881      	ldrb	r1, [r0, #2]
    5606:	7840      	ldrb	r0, [r0, #1]
    5608:	4301      	orrs	r1, r0
    560a:	d002      	beq.n	5612 <sdc_support_peripheral+0x12>
    560c:	f04f 30ff 	mov.w	r0, #4294967295
    5610:	bd10      	pop	{r4, pc}
    5612:	f006 f9af 	bl	b974 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    5616:	2000      	movs	r0, #0
    5618:	bd10      	pop	{r4, pc}
    561a:	0000      	.short	0x0000
    561c:	20000098 	.word	0x20000098

00005620 <sdc_support_phy_update_peripheral>:
    5620:	4806      	ldr	r0, [pc, #24]	; (563c <sdc_support_phy_update_peripheral+0x1c>)
    5622:	b510      	push	{r4, lr}
    5624:	7881      	ldrb	r1, [r0, #2]
    5626:	7840      	ldrb	r0, [r0, #1]
    5628:	4301      	orrs	r1, r0
    562a:	d002      	beq.n	5632 <sdc_support_phy_update_peripheral+0x12>
    562c:	f04f 30ff 	mov.w	r0, #4294967295
    5630:	bd10      	pop	{r4, pc}
    5632:	f00b fd31 	bl	11098 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    5636:	2000      	movs	r0, #0
    5638:	bd10      	pop	{r4, pc}
    563a:	0000      	.short	0x0000
    563c:	20000098 	.word	0x20000098
    5640:	00000001 	.word	0x00000001
    5644:	00010101 	.word	0x00010101
    5648:	031b1b00 	.word	0x031b1b00
    564c:	00000002 	.word	0x00000002
    5650:	00001d4c 	.word	0x00001d4c
    5654:	001f0003 	.word	0x001f0003
    5658:	00000000 	.word	0x00000000
    565c:	f1925c29 	.word	0xf1925c29
    5660:	d1928136 	.word	0xd1928136
    5664:	f1f0a9b7 	.word	0xf1f0a9b7
    5668:	194ce999 	.word	0x194ce999
    566c:	4a83231f 	.word	0x4a83231f

00005670 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    5670:	4a05      	ldr	r2, [pc, #20]	; (5688 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    5672:	b510      	push	{r4, lr}
    5674:	6852      	ldr	r2, [r2, #4]
    5676:	b112      	cbz	r2, 567e <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    5678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    567c:	4710      	bx	r2
    567e:	2192      	movs	r1, #146	; 0x92
    5680:	2004      	movs	r0, #4
    5682:	f7ff ff57 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5686:	0000      	.short	0x0000
    5688:	20001024 	.word	0x20001024

0000568c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    568c:	4a05      	ldr	r2, [pc, #20]	; (56a4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    568e:	b510      	push	{r4, lr}
    5690:	6892      	ldr	r2, [r2, #8]
    5692:	b112      	cbz	r2, 569a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    5694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5698:	4710      	bx	r2
    569a:	2198      	movs	r1, #152	; 0x98
    569c:	2004      	movs	r0, #4
    569e:	f7ff ff49 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56a2:	0000      	.short	0x0000
    56a4:	20001024 	.word	0x20001024

000056a8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    56a8:	4805      	ldr	r0, [pc, #20]	; (56c0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    56aa:	6801      	ldr	r1, [r0, #0]
    56ac:	b129      	cbz	r1, 56ba <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    56ae:	6841      	ldr	r1, [r0, #4]
    56b0:	b119      	cbz	r1, 56ba <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    56b2:	6880      	ldr	r0, [r0, #8]
    56b4:	b108      	cbz	r0, 56ba <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    56b6:	2001      	movs	r0, #1
    56b8:	4770      	bx	lr
    56ba:	2000      	movs	r0, #0
    56bc:	4770      	bx	lr
    56be:	0000      	.short	0x0000
    56c0:	20001024 	.word	0x20001024

000056c4 <sdc_rand_source_register>:
    56c4:	4902      	ldr	r1, [pc, #8]	; (56d0 <sdc_rand_source_register+0xc>)
    56c6:	c80d      	ldmia	r0, {r0, r2, r3}
    56c8:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    56cc:	2000      	movs	r0, #0
    56ce:	4770      	bx	lr
    56d0:	20001024 	.word	0x20001024

000056d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    56d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56d6:	4c12      	ldr	r4, [pc, #72]	; (5720 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    56d8:	2600      	movs	r6, #0
    56da:	6825      	ldr	r5, [r4, #0]
    56dc:	e011      	b.n	5702 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    56de:	9800      	ldr	r0, [sp, #0]
    56e0:	2802      	cmp	r0, #2
    56e2:	d002      	beq.n	56ea <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    56e4:	2803      	cmp	r0, #3
    56e6:	d10c      	bne.n	5702 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    56e8:	e006      	b.n	56f8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    56ea:	6820      	ldr	r0, [r4, #0]
    56ec:	b110      	cbz	r0, 56f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    56ee:	2000      	movs	r0, #0
    56f0:	6026      	str	r6, [r4, #0]
    56f2:	e005      	b.n	5700 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    56f4:	2128      	movs	r1, #40	; 0x28
    56f6:	e00c      	b.n	5712 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    56f8:	6820      	ldr	r0, [r4, #0]
    56fa:	b168      	cbz	r0, 5718 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    56fc:	2001      	movs	r0, #1
    56fe:	6026      	str	r6, [r4, #0]
    5700:	47a8      	blx	r5
    5702:	4668      	mov	r0, sp
    5704:	f000 fcf6 	bl	60f4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    5708:	2800      	cmp	r0, #0
    570a:	d0e8      	beq.n	56de <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    570c:	2805      	cmp	r0, #5
    570e:	d005      	beq.n	571c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    5710:	2135      	movs	r1, #53	; 0x35
    5712:	2004      	movs	r0, #4
    5714:	f7ff ff0e 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5718:	212d      	movs	r1, #45	; 0x2d
    571a:	e7fa      	b.n	5712 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    571c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    571e:	0000      	.short	0x0000
    5720:	200000a0 	.word	0x200000a0
    5724:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    5726:	4c1f      	ldr	r4, [pc, #124]	; (57a4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    5728:	4605      	mov	r5, r0
    572a:	7820      	ldrb	r0, [r4, #0]
    572c:	b140      	cbz	r0, 5740 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    572e:	78a2      	ldrb	r2, [r4, #2]
    5730:	1c61      	adds	r1, r4, #1
    5732:	4628      	mov	r0, r5
    5734:	1c92      	adds	r2, r2, #2
    5736:	f008 f86f 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    573a:	2000      	movs	r0, #0
    573c:	7020      	strb	r0, [r4, #0]
    573e:	e021      	b.n	5784 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    5740:	4819      	ldr	r0, [pc, #100]	; (57a8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    5742:	f001 ff43 	bl	75cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    5746:	2800      	cmp	r0, #0
    5748:	d01d      	beq.n	5786 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    574a:	4c17      	ldr	r4, [pc, #92]	; (57a8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    574c:	7820      	ldrb	r0, [r4, #0]
    574e:	2811      	cmp	r0, #17
    5750:	d104      	bne.n	575c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    5752:	210a      	movs	r1, #10
    5754:	203e      	movs	r0, #62	; 0x3e
    5756:	f008 fa06 	bl	db66 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    575a:	b118      	cbz	r0, 5764 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    575c:	7820      	ldrb	r0, [r4, #0]
    575e:	2808      	cmp	r0, #8
    5760:	d005      	beq.n	576e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    5762:	e009      	b.n	5778 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    5764:	4910      	ldr	r1, [pc, #64]	; (57a8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    5766:	4628      	mov	r0, r5
    5768:	f008 fc06 	bl	df78 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    576c:	e00a      	b.n	5784 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    576e:	2105      	movs	r1, #5
    5770:	203e      	movs	r0, #62	; 0x3e
    5772:	f008 f9f8 	bl	db66 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    5776:	b138      	cbz	r0, 5788 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    5778:	490b      	ldr	r1, [pc, #44]	; (57a8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    577a:	4628      	mov	r0, r5
    577c:	f008 fa4f 	bl	dc1e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    5780:	2800      	cmp	r0, #0
    5782:	d000      	beq.n	5786 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    5784:	2001      	movs	r0, #1
    5786:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5788:	88a0      	ldrh	r0, [r4, #4]
    578a:	f8ad 0000 	strh.w	r0, [sp]
    578e:	a901      	add	r1, sp, #4
    5790:	4668      	mov	r0, sp
    5792:	f008 fd20 	bl	e1d6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    5796:	2800      	cmp	r0, #0
    5798:	d0f5      	beq.n	5786 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    579a:	219c      	movs	r1, #156	; 0x9c
    579c:	2008      	movs	r0, #8
    579e:	f7ff fec9 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57a2:	0000      	.short	0x0000
    57a4:	200011c2 	.word	0x200011c2
    57a8:	200010c0 	.word	0x200010c0
    57ac:	b570      	push	{r4, r5, r6, lr}
    57ae:	780a      	ldrb	r2, [r1, #0]
    57b0:	7082      	strb	r2, [r0, #2]
    57b2:	b33a      	cbz	r2, 5804 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    57b4:	2a01      	cmp	r2, #1
    57b6:	d825      	bhi.n	5804 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    57b8:	2313      	movs	r3, #19
    57ba:	7003      	strb	r3, [r0, #0]
    57bc:	2300      	movs	r3, #0
    57be:	e00a      	b.n	57d6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    57c0:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    57c4:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    57c8:	78a6      	ldrb	r6, [r4, #2]
    57ca:	70ee      	strb	r6, [r5, #3]
    57cc:	8864      	ldrh	r4, [r4, #2]
    57ce:	0a24      	lsrs	r4, r4, #8
    57d0:	1c5b      	adds	r3, r3, #1
    57d2:	712c      	strb	r4, [r5, #4]
    57d4:	b2db      	uxtb	r3, r3
    57d6:	4293      	cmp	r3, r2
    57d8:	d3f2      	bcc.n	57c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    57da:	2300      	movs	r3, #0
    57dc:	e00b      	b.n	57f6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    57de:	bf00      	nop
    57e0:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    57e4:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    57e8:	792e      	ldrb	r6, [r5, #4]
    57ea:	7166      	strb	r6, [r4, #5]
    57ec:	88ad      	ldrh	r5, [r5, #4]
    57ee:	0a2d      	lsrs	r5, r5, #8
    57f0:	1c5b      	adds	r3, r3, #1
    57f2:	71a5      	strb	r5, [r4, #6]
    57f4:	b2db      	uxtb	r3, r3
    57f6:	4293      	cmp	r3, r2
    57f8:	d3f2      	bcc.n	57e0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    57fa:	2101      	movs	r1, #1
    57fc:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    5800:	b2c0      	uxtb	r0, r0
    5802:	bd70      	pop	{r4, r5, r6, pc}
    5804:	2000      	movs	r0, #0
    5806:	bd70      	pop	{r4, r5, r6, pc}

00005808 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    5808:	2840      	cmp	r0, #64	; 0x40
    580a:	d203      	bcs.n	5814 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    580c:	1e40      	subs	r0, r0, #1
    580e:	b2c1      	uxtb	r1, r0
    5810:	4805      	ldr	r0, [pc, #20]	; (5828 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    5812:	e005      	b.n	5820 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    5814:	28ff      	cmp	r0, #255	; 0xff
    5816:	d005      	beq.n	5824 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    5818:	3840      	subs	r0, #64	; 0x40
    581a:	b2c1      	uxtb	r1, r0
    581c:	4802      	ldr	r0, [pc, #8]	; (5828 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    581e:	3008      	adds	r0, #8
    5820:	f008 bbd4 	b.w	dfcc <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    5824:	2001      	movs	r0, #1
    5826:	4770      	bx	lr
    5828:	200000a4 	.word	0x200000a4

0000582c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    582c:	1e40      	subs	r0, r0, #1
    582e:	b2c1      	uxtb	r1, r0
    5830:	4801      	ldr	r0, [pc, #4]	; (5838 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    5832:	f008 bbcb 	b.w	dfcc <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    5836:	0000      	.short	0x0000
    5838:	200000b4 	.word	0x200000b4

0000583c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    583c:	4902      	ldr	r1, [pc, #8]	; (5848 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    583e:	6802      	ldr	r2, [r0, #0]
    5840:	610a      	str	r2, [r1, #16]
    5842:	6840      	ldr	r0, [r0, #4]
    5844:	6148      	str	r0, [r1, #20]
    5846:	4770      	bx	lr
    5848:	200000a4 	.word	0x200000a4

0000584c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    584c:	4905      	ldr	r1, [pc, #20]	; (5864 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    584e:	6802      	ldr	r2, [r0, #0]
    5850:	600a      	str	r2, [r1, #0]
    5852:	6840      	ldr	r0, [r0, #4]
    5854:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    5858:	600a      	str	r2, [r1, #0]
    585a:	4a03      	ldr	r2, [pc, #12]	; (5868 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    585c:	4310      	orrs	r0, r2
    585e:	6048      	str	r0, [r1, #4]
    5860:	4770      	bx	lr
    5862:	0000      	.short	0x0000
    5864:	200000a4 	.word	0x200000a4
    5868:	024007f8 	.word	0x024007f8

0000586c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    586c:	4902      	ldr	r1, [pc, #8]	; (5878 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    586e:	6802      	ldr	r2, [r0, #0]
    5870:	608a      	str	r2, [r1, #8]
    5872:	6840      	ldr	r0, [r0, #4]
    5874:	60c8      	str	r0, [r1, #12]
    5876:	4770      	bx	lr
    5878:	200000a4 	.word	0x200000a4

0000587c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    587c:	4807      	ldr	r0, [pc, #28]	; (589c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    587e:	f04f 31ff 	mov.w	r1, #4294967295
    5882:	2200      	movs	r2, #0
    5884:	6001      	str	r1, [r0, #0]
    5886:	0cc9      	lsrs	r1, r1, #19
    5888:	6041      	str	r1, [r0, #4]
    588a:	f100 0108 	add.w	r1, r0, #8
    588e:	201f      	movs	r0, #31
    5890:	600a      	str	r2, [r1, #0]
    5892:	604a      	str	r2, [r1, #4]
    5894:	3108      	adds	r1, #8
    5896:	e9c1 0200 	strd	r0, r2, [r1]
    589a:	4770      	bx	lr
    589c:	200000a4 	.word	0x200000a4

000058a0 <sdc_hci_cmd_cb_reset>:
    58a0:	b510      	push	{r4, lr}
    58a2:	f7ff ffeb 	bl	587c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    58a6:	f00b fb60 	bl	10f6a <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    58aa:	4604      	mov	r4, r0
    58ac:	4802      	ldr	r0, [pc, #8]	; (58b8 <sdc_hci_cmd_cb_reset+0x18>)
    58ae:	6800      	ldr	r0, [r0, #0]
    58b0:	b100      	cbz	r0, 58b4 <sdc_hci_cmd_cb_reset+0x14>
    58b2:	4780      	blx	r0
    58b4:	4620      	mov	r0, r4
    58b6:	bd10      	pop	{r4, pc}
    58b8:	200000bc 	.word	0x200000bc

000058bc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    58bc:	4901      	ldr	r1, [pc, #4]	; (58c4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    58be:	6008      	str	r0, [r1, #0]
    58c0:	4770      	bx	lr
    58c2:	0000      	.short	0x0000
    58c4:	200000bc 	.word	0x200000bc

000058c8 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    58c8:	2102      	movs	r1, #2
    58ca:	8001      	strh	r1, [r0, #0]
    58cc:	8041      	strh	r1, [r0, #2]
    58ce:	2100      	movs	r1, #0
    58d0:	7101      	strb	r1, [r0, #4]
    58d2:	2129      	movs	r1, #41	; 0x29
    58d4:	7141      	strb	r1, [r0, #5]
    58d6:	f249 215c 	movw	r1, #37468	; 0x925c
    58da:	80c1      	strh	r1, [r0, #6]
    58dc:	4901      	ldr	r1, [pc, #4]	; (58e4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    58de:	6081      	str	r1, [r0, #8]
    58e0:	2000      	movs	r0, #0
    58e2:	4770      	bx	lr
    58e4:	928136f1 	.word	0x928136f1

000058e8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    58e8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    58ea:	4604      	mov	r4, r0
    58ec:	4669      	mov	r1, sp
    58ee:	f008 ffc1 	bl	e874 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    58f2:	b170      	cbz	r0, 5912 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    58f4:	f240 215a 	movw	r1, #602	; 0x25a
    58f8:	e008      	b.n	590c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    58fa:	bf00      	nop
    58fc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5900:	4621      	mov	r1, r4
    5902:	f000 f8ab 	bl	5a5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5906:	b120      	cbz	r0, 5912 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5908:	f240 215f 	movw	r1, #607	; 0x25f
    590c:	2017      	movs	r0, #23
    590e:	f7ff fe11 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5912:	4668      	mov	r0, sp
    5914:	f000 f852 	bl	59bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    5918:	2800      	cmp	r0, #0
    591a:	d0ef      	beq.n	58fc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    591c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00005920 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    5920:	b510      	push	{r4, lr}
    5922:	2802      	cmp	r0, #2
    5924:	d304      	bcc.n	5930 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    5926:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    592a:	2017      	movs	r0, #23
    592c:	f7ff fe02 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5930:	4901      	ldr	r1, [pc, #4]	; (5938 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    5932:	5c08      	ldrb	r0, [r1, r0]
    5934:	bd10      	pop	{r4, pc}
    5936:	0000      	.short	0x0000
    5938:	20001030 	.word	0x20001030

0000593c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    593e:	0005      	movs	r5, r0
    5940:	9500      	str	r5, [sp, #0]
    5942:	d010      	beq.n	5966 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    5944:	2600      	movs	r6, #0
    5946:	7808      	ldrb	r0, [r1, #0]
    5948:	7849      	ldrb	r1, [r1, #1]
    594a:	4604      	mov	r4, r0
    594c:	42a1      	cmp	r1, r4
    594e:	d900      	bls.n	5952 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    5950:	460c      	mov	r4, r1
    5952:	1cea      	adds	r2, r5, #3
    5954:	f022 0203 	bic.w	r2, r2, #3
    5958:	42aa      	cmp	r2, r5
    595a:	d006      	beq.n	596a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    595c:	f240 1179 	movw	r1, #377	; 0x179
    5960:	2017      	movs	r0, #23
    5962:	f7ff fde7 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5966:	2601      	movs	r6, #1
    5968:	e7ed      	b.n	5946 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    596a:	4f13      	ldr	r7, [pc, #76]	; (59b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    596c:	7038      	strb	r0, [r7, #0]
    596e:	7079      	strb	r1, [r7, #1]
    5970:	4631      	mov	r1, r6
    5972:	4668      	mov	r0, sp
    5974:	f000 f8ee 	bl	5b54 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    5978:	2100      	movs	r1, #0
    597a:	460b      	mov	r3, r1
    597c:	9800      	ldr	r0, [sp, #0]
    597e:	1cc0      	adds	r0, r0, #3
    5980:	f020 0003 	bic.w	r0, r0, #3
    5984:	9000      	str	r0, [sp, #0]
    5986:	b96e      	cbnz	r6, 59a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    5988:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    598c:	60d0      	str	r0, [r2, #12]
    598e:	2000      	movs	r0, #0
    5990:	e006      	b.n	59a0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    5992:	bf00      	nop
    5994:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    5998:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    599c:	1c40      	adds	r0, r0, #1
    599e:	b2c0      	uxtb	r0, r0
    59a0:	42a0      	cmp	r0, r4
    59a2:	d3f7      	bcc.n	5994 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    59a4:	9800      	ldr	r0, [sp, #0]
    59a6:	1c49      	adds	r1, r1, #1
    59a8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    59ac:	b2c9      	uxtb	r1, r1
    59ae:	9000      	str	r0, [sp, #0]
    59b0:	2902      	cmp	r1, #2
    59b2:	d3e3      	bcc.n	597c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    59b4:	1b40      	subs	r0, r0, r5
    59b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59b8:	20001030 	.word	0x20001030

000059bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    59bc:	b570      	push	{r4, r5, r6, lr}
    59be:	4604      	mov	r4, r0
    59c0:	f009 f907 	bl	ebd2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    59c4:	b108      	cbz	r0, 59ca <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    59c6:	2010      	movs	r0, #16
    59c8:	bd70      	pop	{r4, r5, r6, pc}
    59ca:	7825      	ldrb	r5, [r4, #0]
    59cc:	f000 f8fe 	bl	5bcc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    59d0:	4602      	mov	r2, r0
    59d2:	480c      	ldr	r0, [pc, #48]	; (5a04 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    59d4:	8861      	ldrh	r1, [r4, #2]
    59d6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    59da:	e00e      	b.n	59fa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    59dc:	68c3      	ldr	r3, [r0, #12]
    59de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    59e2:	b143      	cbz	r3, 59f6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    59e4:	1c4a      	adds	r2, r1, #1
    59e6:	8062      	strh	r2, [r4, #2]
    59e8:	80a1      	strh	r1, [r4, #4]
    59ea:	68c0      	ldr	r0, [r0, #12]
    59ec:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    59f0:	60a0      	str	r0, [r4, #8]
    59f2:	2000      	movs	r0, #0
    59f4:	bd70      	pop	{r4, r5, r6, pc}
    59f6:	1c49      	adds	r1, r1, #1
    59f8:	b289      	uxth	r1, r1
    59fa:	4291      	cmp	r1, r2
    59fc:	d3ee      	bcc.n	59dc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    59fe:	8061      	strh	r1, [r4, #2]
    5a00:	2005      	movs	r0, #5
    5a02:	bd70      	pop	{r4, r5, r6, pc}
    5a04:	20001030 	.word	0x20001030

00005a08 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    5a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a0c:	b121      	cbz	r1, 5a18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5a0e:	2901      	cmp	r1, #1
    5a10:	d002      	beq.n	5a18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5a12:	2000      	movs	r0, #0
    5a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a18:	4c0f      	ldr	r4, [pc, #60]	; (5a58 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    5a1a:	2700      	movs	r7, #0
    5a1c:	463b      	mov	r3, r7
    5a1e:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5a22:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    5a26:	f814 c001 	ldrb.w	ip, [r4, r1]
    5a2a:	e00a      	b.n	5a42 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    5a2c:	19dc      	adds	r4, r3, r7
    5a2e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    5a32:	b2a4      	uxth	r4, r4
    5a34:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    5a38:	f1be 0f00 	cmp.w	lr, #0
    5a3c:	d004      	beq.n	5a48 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    5a3e:	1c5b      	adds	r3, r3, #1
    5a40:	b29b      	uxth	r3, r3
    5a42:	459c      	cmp	ip, r3
    5a44:	d8f2      	bhi.n	5a2c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    5a46:	4634      	mov	r4, r6
    5a48:	8004      	strh	r4, [r0, #0]
    5a4a:	4620      	mov	r0, r4
    5a4c:	42b4      	cmp	r4, r6
    5a4e:	d0e0      	beq.n	5a12 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    5a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5a54:	f000 b834 	b.w	5ac0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    5a58:	20001030 	.word	0x20001030

00005a5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a60:	4606      	mov	r6, r0
    5a62:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    5a66:	460c      	mov	r4, r1
    5a68:	f243 0702 	movw	r7, #12290	; 0x3002
    5a6c:	38ff      	subs	r0, #255	; 0xff
    5a6e:	d020      	beq.n	5ab2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5a70:	2c02      	cmp	r4, #2
    5a72:	d302      	bcc.n	5a7a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    5a74:	2007      	movs	r0, #7
    5a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a7a:	4630      	mov	r0, r6
    5a7c:	f000 f85a 	bl	5b34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    5a80:	0005      	movs	r5, r0
    5a82:	d016      	beq.n	5ab2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5a84:	480c      	ldr	r0, [pc, #48]	; (5ab8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    5a86:	4629      	mov	r1, r5
    5a88:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    5a8c:	4630      	mov	r0, r6
    5a8e:	4790      	blx	r2
    5a90:	480a      	ldr	r0, [pc, #40]	; (5abc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    5a92:	2100      	movs	r1, #0
    5a94:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    5a98:	68f8      	ldr	r0, [r7, #12]
    5a9a:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    5a9e:	4620      	mov	r0, r4
    5aa0:	f000 f88a 	bl	5bb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5aa4:	4602      	mov	r2, r0
    5aa6:	4629      	mov	r1, r5
    5aa8:	6878      	ldr	r0, [r7, #4]
    5aaa:	f008 fec2 	bl	e832 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5aae:	2000      	movs	r0, #0
    5ab0:	e7e1      	b.n	5a76 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5ab2:	4638      	mov	r0, r7
    5ab4:	e7df      	b.n	5a76 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5ab6:	0000      	.short	0x0000
    5ab8:	00005bec 	.word	0x00005bec
    5abc:	20001030 	.word	0x20001030
    5ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ac4:	4690      	mov	r8, r2
    5ac6:	460d      	mov	r5, r1
    5ac8:	4607      	mov	r7, r0
    5aca:	f008 fee4 	bl	e896 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5ace:	b148      	cbz	r0, 5ae4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    5ad0:	4816      	ldr	r0, [pc, #88]	; (5b2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    5ad2:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5ad6:	68f0      	ldr	r0, [r6, #12]
    5ad8:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5adc:	b128      	cbz	r0, 5aea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    5ade:	f44f 719d 	mov.w	r1, #314	; 0x13a
    5ae2:	e015      	b.n	5b10 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5ae4:	f240 1139 	movw	r1, #313	; 0x139
    5ae8:	e012      	b.n	5b10 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5aea:	6870      	ldr	r0, [r6, #4]
    5aec:	2800      	cmp	r0, #0
    5aee:	d01a      	beq.n	5b26 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    5af0:	4628      	mov	r0, r5
    5af2:	f000 f861 	bl	5bb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5af6:	4601      	mov	r1, r0
    5af8:	6870      	ldr	r0, [r6, #4]
    5afa:	f008 fe42 	bl	e782 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5afe:	0004      	movs	r4, r0
    5b00:	d010      	beq.n	5b24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    5b02:	68f0      	ldr	r0, [r6, #12]
    5b04:	2d02      	cmp	r5, #2
    5b06:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    5b0a:	d304      	bcc.n	5b16 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    5b0c:	f240 1145 	movw	r1, #325	; 0x145
    5b10:	2017      	movs	r0, #23
    5b12:	f7ff fd0f 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b16:	4806      	ldr	r0, [pc, #24]	; (5b30 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    5b18:	4642      	mov	r2, r8
    5b1a:	4621      	mov	r1, r4
    5b1c:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    5b20:	4638      	mov	r0, r7
    5b22:	4798      	blx	r3
    5b24:	4620      	mov	r0, r4
    5b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b2a:	0000      	.short	0x0000
    5b2c:	20001030 	.word	0x20001030
    5b30:	00005be4 	.word	0x00005be4
    5b34:	b570      	push	{r4, r5, r6, lr}
    5b36:	460c      	mov	r4, r1
    5b38:	4605      	mov	r5, r0
    5b3a:	f008 feac 	bl	e896 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5b3e:	2800      	cmp	r0, #0
    5b40:	d005      	beq.n	5b4e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    5b42:	4803      	ldr	r0, [pc, #12]	; (5b50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    5b44:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5b48:	68c0      	ldr	r0, [r0, #12]
    5b4a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    5b4e:	bd70      	pop	{r4, r5, r6, pc}
    5b50:	20001030 	.word	0x20001030
    5b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b58:	4e16      	ldr	r6, [pc, #88]	; (5bb4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    5b5a:	4688      	mov	r8, r1
    5b5c:	4605      	mov	r5, r0
    5b5e:	2400      	movs	r4, #0
    5b60:	6828      	ldr	r0, [r5, #0]
    5b62:	1cc0      	adds	r0, r0, #3
    5b64:	f020 0003 	bic.w	r0, r0, #3
    5b68:	6028      	str	r0, [r5, #0]
    5b6a:	4620      	mov	r0, r4
    5b6c:	f000 f824 	bl	5bb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5b70:	5d31      	ldrb	r1, [r6, r4]
    5b72:	4348      	muls	r0, r1
    5b74:	f1b8 0f00 	cmp.w	r8, #0
    5b78:	d001      	beq.n	5b7e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    5b7a:	2200      	movs	r2, #0
    5b7c:	e000      	b.n	5b80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    5b7e:	682a      	ldr	r2, [r5, #0]
    5b80:	4601      	mov	r1, r0
    5b82:	9200      	str	r2, [sp, #0]
    5b84:	b132      	cbz	r2, 5b94 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    5b86:	2700      	movs	r7, #0
    5b88:	ea4f 000d 	mov.w	r0, sp
    5b8c:	f008 fe2a 	bl	e7e4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5b90:	b11f      	cbz	r7, 5b9a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    5b92:	e006      	b.n	5ba2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    5b94:	2701      	movs	r7, #1
    5b96:	2000      	movs	r0, #0
    5b98:	e7f8      	b.n	5b8c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    5b9a:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    5b9e:	9a00      	ldr	r2, [sp, #0]
    5ba0:	604a      	str	r2, [r1, #4]
    5ba2:	6829      	ldr	r1, [r5, #0]
    5ba4:	1c64      	adds	r4, r4, #1
    5ba6:	4408      	add	r0, r1
    5ba8:	b2e4      	uxtb	r4, r4
    5baa:	6028      	str	r0, [r5, #0]
    5bac:	2c02      	cmp	r4, #2
    5bae:	d3d7      	bcc.n	5b60 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    5bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5bb4:	20001030 	.word	0x20001030
    5bb8:	4903      	ldr	r1, [pc, #12]	; (5bc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    5bba:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5bbe:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    5bc2:	1cc0      	adds	r0, r0, #3
    5bc4:	4008      	ands	r0, r1
    5bc6:	4770      	bx	lr
    5bc8:	00005be0 	.word	0x00005be0
    5bcc:	4903      	ldr	r1, [pc, #12]	; (5bdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    5bce:	7808      	ldrb	r0, [r1, #0]
    5bd0:	7849      	ldrb	r1, [r1, #1]
    5bd2:	4288      	cmp	r0, r1
    5bd4:	d200      	bcs.n	5bd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    5bd6:	4608      	mov	r0, r1
    5bd8:	4770      	bx	lr
    5bda:	0000      	.short	0x0000
    5bdc:	20001030 	.word	0x20001030
    5be0:	011002a0 	.word	0x011002a0
    5be4:	0000e8ab 	.word	0x0000e8ab
    5be8:	0000e8ab 	.word	0x0000e8ab
    5bec:	000106fb 	.word	0x000106fb
    5bf0:	0000fa1b 	.word	0x0000fa1b

00005bf4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5bf4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bf8:	4c27      	ldr	r4, [pc, #156]	; (5c98 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa4>)
    5bfa:	4606      	mov	r6, r0
    5bfc:	b081      	sub	sp, #4
    5bfe:	6820      	ldr	r0, [r4, #0]
    5c00:	469a      	mov	sl, r3
    5c02:	4693      	mov	fp, r2
    5c04:	b158      	cbz	r0, 5c1e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    5c06:	7a01      	ldrb	r1, [r0, #8]
    5c08:	42b1      	cmp	r1, r6
    5c0a:	d903      	bls.n	5c14 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5c0c:	6840      	ldr	r0, [r0, #4]
    5c0e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    5c12:	b140      	cbz	r0, 5c26 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    5c14:	f243 0002 	movw	r0, #12290	; 0x3002
    5c18:	b005      	add	sp, #20
    5c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c1e:	21a5      	movs	r1, #165	; 0xa5
    5c20:	2018      	movs	r0, #24
    5c22:	f7ff fc87 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c26:	4619      	mov	r1, r3
    5c28:	9802      	ldr	r0, [sp, #8]
    5c2a:	f008 fe58 	bl	e8de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    5c2e:	4680      	mov	r8, r0
    5c30:	4658      	mov	r0, fp
    5c32:	990e      	ldr	r1, [sp, #56]	; 0x38
    5c34:	f008 fe49 	bl	e8ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    5c38:	4605      	mov	r5, r0
    5c3a:	eb08 0005 	add.w	r0, r8, r5
    5c3e:	1d00      	adds	r0, r0, #4
    5c40:	b287      	uxth	r7, r0
    5c42:	6820      	ldr	r0, [r4, #0]
    5c44:	46a1      	mov	r9, r4
    5c46:	4639      	mov	r1, r7
    5c48:	6800      	ldr	r0, [r0, #0]
    5c4a:	f008 fd9a 	bl	e782 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5c4e:	0004      	movs	r4, r0
    5c50:	d01f      	beq.n	5c92 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9e>
    5c52:	8067      	strh	r7, [r4, #2]
    5c54:	8025      	strh	r5, [r4, #0]
    5c56:	4629      	mov	r1, r5
    5c58:	1d20      	adds	r0, r4, #4
    5c5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5c5c:	4607      	mov	r7, r0
    5c5e:	465a      	mov	r2, fp
    5c60:	2301      	movs	r3, #1
    5c62:	9500      	str	r5, [sp, #0]
    5c64:	f008 fcec 	bl	e640 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5c68:	8820      	ldrh	r0, [r4, #0]
    5c6a:	4641      	mov	r1, r8
    5c6c:	4438      	add	r0, r7
    5c6e:	230a      	movs	r3, #10
    5c70:	9a02      	ldr	r2, [sp, #8]
    5c72:	f8cd a000 	str.w	sl, [sp]
    5c76:	f008 fce3 	bl	e640 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5c7a:	8820      	ldrh	r0, [r4, #0]
    5c7c:	19c1      	adds	r1, r0, r7
    5c7e:	4638      	mov	r0, r7
    5c80:	f008 fd0f 	bl	e6a2 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    5c84:	f8d9 0000 	ldr.w	r0, [r9]
    5c88:	6840      	ldr	r0, [r0, #4]
    5c8a:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    5c8e:	2000      	movs	r0, #0
    5c90:	e7c2      	b.n	5c18 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5c92:	2004      	movs	r0, #4
    5c94:	e7c0      	b.n	5c18 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5c96:	0000      	.short	0x0000
    5c98:	200000c0 	.word	0x200000c0

00005c9c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    5c9c:	b570      	push	{r4, r5, r6, lr}
    5c9e:	4c14      	ldr	r4, [pc, #80]	; (5cf0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5ca0:	6823      	ldr	r3, [r4, #0]
    5ca2:	b18b      	cbz	r3, 5cc8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5ca4:	7a19      	ldrb	r1, [r3, #8]
    5ca6:	4281      	cmp	r1, r0
    5ca8:	d912      	bls.n	5cd0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5caa:	685a      	ldr	r2, [r3, #4]
    5cac:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5cb0:	b171      	cbz	r1, 5cd0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5cb2:	2500      	movs	r5, #0
    5cb4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    5cb8:	884a      	ldrh	r2, [r1, #2]
    5cba:	6818      	ldr	r0, [r3, #0]
    5cbc:	f008 fdb9 	bl	e832 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5cc0:	6821      	ldr	r1, [r4, #0]
    5cc2:	2000      	movs	r0, #0
    5cc4:	7a0a      	ldrb	r2, [r1, #8]
    5cc6:	e00c      	b.n	5ce2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    5cc8:	21c8      	movs	r1, #200	; 0xc8
    5cca:	2018      	movs	r0, #24
    5ccc:	f7ff fc32 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cd0:	f243 0002 	movw	r0, #12290	; 0x3002
    5cd4:	bd70      	pop	{r4, r5, r6, pc}
    5cd6:	684b      	ldr	r3, [r1, #4]
    5cd8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5cdc:	b933      	cbnz	r3, 5cec <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    5cde:	1c40      	adds	r0, r0, #1
    5ce0:	b2c0      	uxtb	r0, r0
    5ce2:	4282      	cmp	r2, r0
    5ce4:	d8f7      	bhi.n	5cd6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    5ce6:	6808      	ldr	r0, [r1, #0]
    5ce8:	f008 fd98 	bl	e81c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    5cec:	2000      	movs	r0, #0
    5cee:	bd70      	pop	{r4, r5, r6, pc}
    5cf0:	200000c0 	.word	0x200000c0

00005cf4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cf8:	460d      	mov	r5, r1
    5cfa:	0004      	movs	r4, r0
    5cfc:	4690      	mov	r8, r2
    5cfe:	f04f 0600 	mov.w	r6, #0
    5d02:	d009      	beq.n	5d18 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5d04:	2700      	movs	r7, #0
    5d06:	1ce0      	adds	r0, r4, #3
    5d08:	f020 0003 	bic.w	r0, r0, #3
    5d0c:	42a0      	cmp	r0, r4
    5d0e:	d005      	beq.n	5d1c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5d10:	2186      	movs	r1, #134	; 0x86
    5d12:	2018      	movs	r0, #24
    5d14:	f7ff fc0e 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d18:	2701      	movs	r7, #1
    5d1a:	e7f4      	b.n	5d06 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    5d1c:	b1cd      	cbz	r5, 5d52 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5d1e:	4611      	mov	r1, r2
    5d20:	2000      	movs	r0, #0
    5d22:	f008 fd5f 	bl	e7e4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5d26:	300c      	adds	r0, #12
    5d28:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5d2c:	b98f      	cbnz	r7, 5d52 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5d2e:	4f0a      	ldr	r7, [pc, #40]	; (5d58 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5d30:	f104 000c 	add.w	r0, r4, #12
    5d34:	00aa      	lsls	r2, r5, #2
    5d36:	603c      	str	r4, [r7, #0]
    5d38:	7225      	strb	r5, [r4, #8]
    5d3a:	6060      	str	r0, [r4, #4]
    5d3c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5d40:	6020      	str	r0, [r4, #0]
    5d42:	2100      	movs	r1, #0
    5d44:	6860      	ldr	r0, [r4, #4]
    5d46:	f007 fde1 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5d4a:	4641      	mov	r1, r8
    5d4c:	6838      	ldr	r0, [r7, #0]
    5d4e:	f008 fd49 	bl	e7e4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5d52:	4630      	mov	r0, r6
    5d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d58:	200000c0 	.word	0x200000c0

00005d5c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5d5c:	b570      	push	{r4, r5, r6, lr}
    5d5e:	4d08      	ldr	r5, [pc, #32]	; (5d80 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5d60:	6828      	ldr	r0, [r5, #0]
    5d62:	2800      	cmp	r0, #0
    5d64:	d00a      	beq.n	5d7c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    5d66:	2400      	movs	r4, #0
    5d68:	e004      	b.n	5d74 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    5d6a:	4620      	mov	r0, r4
    5d6c:	f7ff ff96 	bl	5c9c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5d70:	1c64      	adds	r4, r4, #1
    5d72:	b2e4      	uxtb	r4, r4
    5d74:	6828      	ldr	r0, [r5, #0]
    5d76:	7a00      	ldrb	r0, [r0, #8]
    5d78:	42a0      	cmp	r0, r4
    5d7a:	d8f6      	bhi.n	5d6a <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5d7c:	bd70      	pop	{r4, r5, r6, pc}
    5d7e:	0000      	.short	0x0000
    5d80:	200000c0 	.word	0x200000c0

00005d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5d84:	4909      	ldr	r1, [pc, #36]	; (5dac <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    5d86:	b510      	push	{r4, lr}
    5d88:	4602      	mov	r2, r0
    5d8a:	6809      	ldr	r1, [r1, #0]
    5d8c:	2000      	movs	r0, #0
    5d8e:	b149      	cbz	r1, 5da4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5d90:	7a0b      	ldrb	r3, [r1, #8]
    5d92:	4293      	cmp	r3, r2
    5d94:	d905      	bls.n	5da2 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5d96:	6849      	ldr	r1, [r1, #4]
    5d98:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5d9c:	2900      	cmp	r1, #0
    5d9e:	d000      	beq.n	5da2 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5da0:	1d08      	adds	r0, r1, #4
    5da2:	bd10      	pop	{r4, pc}
    5da4:	21ee      	movs	r1, #238	; 0xee
    5da6:	2018      	movs	r0, #24
    5da8:	f7ff fbc4 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dac:	200000c0 	.word	0x200000c0

00005db0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5db0:	490a      	ldr	r1, [pc, #40]	; (5ddc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5db2:	b510      	push	{r4, lr}
    5db4:	4602      	mov	r2, r0
    5db6:	6809      	ldr	r1, [r1, #0]
    5db8:	2000      	movs	r0, #0
    5dba:	b159      	cbz	r1, 5dd4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5dbc:	7a0b      	ldrb	r3, [r1, #8]
    5dbe:	4293      	cmp	r3, r2
    5dc0:	d907      	bls.n	5dd2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5dc2:	6849      	ldr	r1, [r1, #4]
    5dc4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5dc8:	2900      	cmp	r1, #0
    5dca:	d002      	beq.n	5dd2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5dcc:	f831 0b04 	ldrh.w	r0, [r1], #4
    5dd0:	4408      	add	r0, r1
    5dd2:	bd10      	pop	{r4, pc}
    5dd4:	21fc      	movs	r1, #252	; 0xfc
    5dd6:	2018      	movs	r0, #24
    5dd8:	f7ff fbac 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ddc:	200000c0 	.word	0x200000c0
    5de0:	b570      	push	{r4, r5, r6, lr}
    5de2:	4b1e      	ldr	r3, [pc, #120]	; (5e5c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    5de4:	6845      	ldr	r5, [r0, #4]
    5de6:	4604      	mov	r4, r0
    5de8:	2200      	movs	r2, #0
    5dea:	b1a1      	cbz	r1, 5e16 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    5dec:	2001      	movs	r0, #1
    5dee:	7060      	strb	r0, [r4, #1]
    5df0:	8858      	ldrh	r0, [r3, #2]
    5df2:	0881      	lsrs	r1, r0, #2
    5df4:	f05f 0000 	movs.w	r0, #0
    5df8:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    5dfc:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5e00:	831a      	strh	r2, [r3, #24]
    5e02:	8419      	strh	r1, [r3, #32]
    5e04:	fb00 5301 	mla	r3, r0, r1, r5
    5e08:	6073      	str	r3, [r6, #4]
    5e0a:	1823      	adds	r3, r4, r0
    5e0c:	1c40      	adds	r0, r0, #1
    5e0e:	751a      	strb	r2, [r3, #20]
    5e10:	2804      	cmp	r0, #4
    5e12:	d3f1      	bcc.n	5df8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    5e14:	bd70      	pop	{r4, r5, r6, pc}
    5e16:	7062      	strb	r2, [r4, #1]
    5e18:	f05f 0000 	movs.w	r0, #0
    5e1c:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5e20:	830a      	strh	r2, [r1, #24]
    5e22:	840a      	strh	r2, [r1, #32]
    5e24:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5e28:	604a      	str	r2, [r1, #4]
    5e2a:	1821      	adds	r1, r4, r0
    5e2c:	1c40      	adds	r0, r0, #1
    5e2e:	750a      	strb	r2, [r1, #20]
    5e30:	2804      	cmp	r0, #4
    5e32:	d3f3      	bcc.n	5e1c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5e34:	8858      	ldrh	r0, [r3, #2]
    5e36:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    5e3a:	d201      	bcs.n	5e40 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5e3c:	0846      	lsrs	r6, r0, #1
    5e3e:	e000      	b.n	5e42 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5e40:	26ff      	movs	r6, #255	; 0xff
    5e42:	f008 fdc0 	bl	e9c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    5e46:	6065      	str	r5, [r4, #4]
    5e48:	8420      	strh	r0, [r4, #32]
    5e4a:	1829      	adds	r1, r5, r0
    5e4c:	60a1      	str	r1, [r4, #8]
    5e4e:	8466      	strh	r6, [r4, #34]	; 0x22
    5e50:	60e5      	str	r5, [r4, #12]
    5e52:	84a0      	strh	r0, [r4, #36]	; 0x24
    5e54:	6121      	str	r1, [r4, #16]
    5e56:	84e6      	strh	r6, [r4, #38]	; 0x26
    5e58:	bd70      	pop	{r4, r5, r6, pc}
    5e5a:	0000      	.short	0x0000
    5e5c:	200000c4 	.word	0x200000c4

00005e60 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    5e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e64:	b170      	cbz	r0, 5e84 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    5e66:	2500      	movs	r5, #0
    5e68:	4411      	add	r1, r2
    5e6a:	b2cc      	uxtb	r4, r1
    5e6c:	4e25      	ldr	r6, [pc, #148]	; (5f04 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa4>)
    5e6e:	1cc1      	adds	r1, r0, #3
    5e70:	2700      	movs	r7, #0
    5e72:	f021 0103 	bic.w	r1, r1, #3
    5e76:	7034      	strb	r4, [r6, #0]
    5e78:	4281      	cmp	r1, r0
    5e7a:	d005      	beq.n	5e88 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    5e7c:	214e      	movs	r1, #78	; 0x4e
    5e7e:	2009      	movs	r0, #9
    5e80:	f7ff fb58 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e84:	2501      	movs	r5, #1
    5e86:	e7ef      	b.n	5e68 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    5e88:	2b1f      	cmp	r3, #31
    5e8a:	d804      	bhi.n	5e96 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    5e8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5e90:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    5e94:	e009      	b.n	5eaa <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    5e96:	0059      	lsls	r1, r3, #1
    5e98:	2bff      	cmp	r3, #255	; 0xff
    5e9a:	d90c      	bls.n	5eb6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x56>
    5e9c:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    5ea0:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5ea4:	d200      	bcs.n	5ea8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5ea6:	4611      	mov	r1, r2
    5ea8:	b289      	uxth	r1, r1
    5eaa:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    5eae:	1cc9      	adds	r1, r1, #3
    5eb0:	4011      	ands	r1, r2
    5eb2:	b135      	cbz	r5, 5ec2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x62>
    5eb4:	e007      	b.n	5ec6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x66>
    5eb6:	227c      	movs	r2, #124	; 0x7c
    5eb8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5ebc:	d3f4      	bcc.n	5ea8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5ebe:	217c      	movs	r1, #124	; 0x7c
    5ec0:	e7f2      	b.n	5ea8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5ec2:	6070      	str	r0, [r6, #4]
    5ec4:	8071      	strh	r1, [r6, #2]
    5ec6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    5eca:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    5ece:	2200      	movs	r2, #0
    5ed0:	6876      	ldr	r6, [r6, #4]
    5ed2:	f04f 0c01 	mov.w	ip, #1
    5ed6:	e00d      	b.n	5ef4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x94>
    5ed8:	b94d      	cbnz	r5, 5eee <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    5eda:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    5ede:	eb00 0e03 	add.w	lr, r0, r3
    5ee2:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    5ee6:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    5eea:	f8c7 e004 	str.w	lr, [r7, #4]
    5eee:	1c52      	adds	r2, r2, #1
    5ef0:	440b      	add	r3, r1
    5ef2:	b2d2      	uxtb	r2, r2
    5ef4:	42a2      	cmp	r2, r4
    5ef6:	d3ef      	bcc.n	5ed8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x78>
    5ef8:	1ddb      	adds	r3, r3, #7
    5efa:	f023 0007 	bic.w	r0, r3, #7
    5efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f02:	0000      	.short	0x0000
    5f04:	200000c4 	.word	0x200000c4

00005f08 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5f08:	b570      	push	{r4, r5, r6, lr}
    5f0a:	4a10      	ldr	r2, [pc, #64]	; (5f4c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    5f0c:	2000      	movs	r0, #0
    5f0e:	6851      	ldr	r1, [r2, #4]
    5f10:	7812      	ldrb	r2, [r2, #0]
    5f12:	e014      	b.n	5f3e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    5f14:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5f18:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    5f1c:	b16b      	cbz	r3, 5f3a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    5f1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5f22:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    5f26:	d00c      	beq.n	5f42 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    5f28:	2500      	movs	r5, #0
    5f2a:	70a5      	strb	r5, [r4, #2]
    5f2c:	2101      	movs	r1, #1
    5f2e:	4620      	mov	r0, r4
    5f30:	f7ff ff56 	bl	5de0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5f34:	7025      	strb	r5, [r4, #0]
    5f36:	4620      	mov	r0, r4
    5f38:	bd70      	pop	{r4, r5, r6, pc}
    5f3a:	1c40      	adds	r0, r0, #1
    5f3c:	b2c0      	uxtb	r0, r0
    5f3e:	4290      	cmp	r0, r2
    5f40:	d3e8      	bcc.n	5f14 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5f42:	21a9      	movs	r1, #169	; 0xa9
    5f44:	2009      	movs	r0, #9
    5f46:	f7ff faf5 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f4a:	0000      	.short	0x0000
    5f4c:	200000c4 	.word	0x200000c4

00005f50 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5f50:	4804      	ldr	r0, [pc, #16]	; (5f64 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    5f52:	b510      	push	{r4, lr}
    5f54:	8840      	ldrh	r0, [r0, #2]
    5f56:	0884      	lsrs	r4, r0, #2
    5f58:	f008 fd35 	bl	e9c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    5f5c:	4284      	cmp	r4, r0
    5f5e:	d300      	bcc.n	5f62 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5f60:	4620      	mov	r0, r4
    5f62:	bd10      	pop	{r4, pc}
    5f64:	200000c4 	.word	0x200000c4
    5f68:	b530      	push	{r4, r5, lr}
    5f6a:	490d      	ldr	r1, [pc, #52]	; (5fa0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    5f6c:	2001      	movs	r0, #1
    5f6e:	6048      	str	r0, [r1, #4]
    5f70:	1e82      	subs	r2, r0, #2
    5f72:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5f76:	490b      	ldr	r1, [pc, #44]	; (5fa4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    5f78:	6088      	str	r0, [r1, #8]
    5f7a:	2300      	movs	r3, #0
    5f7c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    5f80:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5f84:	4c08      	ldr	r4, [pc, #32]	; (5fa8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    5f86:	6023      	str	r3, [r4, #0]
    5f88:	1d25      	adds	r5, r4, #4
    5f8a:	6028      	str	r0, [r5, #0]
    5f8c:	6088      	str	r0, [r1, #8]
    5f8e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5f92:	6023      	str	r3, [r4, #0]
    5f94:	6028      	str	r0, [r5, #0]
    5f96:	4906      	ldr	r1, [pc, #24]	; (5fb0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    5f98:	4804      	ldr	r0, [pc, #16]	; (5fac <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    5f9a:	6008      	str	r0, [r1, #0]
    5f9c:	bd30      	pop	{r4, r5, pc}
    5f9e:	0000      	.short	0x0000
    5fa0:	4000e000 	.word	0x4000e000
    5fa4:	4000f000 	.word	0x4000f000
    5fa8:	4000f500 	.word	0x4000f500
    5fac:	3ff60000 	.word	0x3ff60000
    5fb0:	4001f508 	.word	0x4001f508

00005fb4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    5fb4:	b510      	push	{r4, lr}
    5fb6:	4604      	mov	r4, r0
    5fb8:	f7ff ffd6 	bl	5f68 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    5fbc:	f008 fdd6 	bl	eb6c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    5fc0:	f000 f888 	bl	60d4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    5fc4:	4905      	ldr	r1, [pc, #20]	; (5fdc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    5fc6:	4804      	ldr	r0, [pc, #16]	; (5fd8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    5fc8:	6008      	str	r0, [r1, #0]
    5fca:	4620      	mov	r0, r4
    5fcc:	f000 f8b8 	bl	6140 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    5fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5fd4:	f000 b8d0 	b.w	6178 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    5fd8:	3ff60000 	.word	0x3ff60000
    5fdc:	4001f508 	.word	0x4001f508
    5fe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5fe4:	4682      	mov	sl, r0
    5fe6:	4838      	ldr	r0, [pc, #224]	; (60c8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    5fe8:	f007 fb7f 	bl	d6ea <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5fec:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 60c8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    5ff0:	b128      	cbz	r0, 5ffe <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    5ff2:	2601      	movs	r6, #1
    5ff4:	f10b 0001 	add.w	r0, fp, #1
    5ff8:	21ff      	movs	r1, #255	; 0xff
    5ffa:	7001      	strb	r1, [r0, #0]
    5ffc:	e000      	b.n	6000 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    5ffe:	2600      	movs	r6, #0
    6000:	f44f 7580 	mov.w	r5, #256	; 0x100
    6004:	4c31      	ldr	r4, [pc, #196]	; (60cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    6006:	f04f 0800 	mov.w	r8, #0
    600a:	1d2f      	adds	r7, r5, #4
    600c:	2101      	movs	r1, #1
    600e:	6061      	str	r1, [r4, #4]
    6010:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    6014:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    6018:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    601c:	6021      	str	r1, [r4, #0]
    601e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 60d0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    6022:	e01c      	b.n	605e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    6024:	f8d9 0000 	ldr.w	r0, [r9]
    6028:	06c0      	lsls	r0, r0, #27
    602a:	d518      	bpl.n	605e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    602c:	200e      	movs	r0, #14
    602e:	f008 fdac 	bl	eb8a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    6032:	f3ef 8010 	mrs	r0, PRIMASK
    6036:	9000      	str	r0, [sp, #0]
    6038:	b672      	cpsid	i
    603a:	2103      	movs	r1, #3
    603c:	4620      	mov	r0, r4
    603e:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    6042:	4629      	mov	r1, r5
    6044:	f008 fdae 	bl	eba4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    6048:	b930      	cbnz	r0, 6058 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    604a:	4639      	mov	r1, r7
    604c:	4620      	mov	r0, r4
    604e:	f008 fda9 	bl	eba4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    6052:	b908      	cbnz	r0, 6058 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    6054:	f7ff f8c8 	bl	51e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    6058:	9800      	ldr	r0, [sp, #0]
    605a:	b900      	cbnz	r0, 605e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    605c:	b662      	cpsie	i
    605e:	4629      	mov	r1, r5
    6060:	4620      	mov	r0, r4
    6062:	f008 fd9f 	bl	eba4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    6066:	b928      	cbnz	r0, 6074 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    6068:	4639      	mov	r1, r7
    606a:	4620      	mov	r0, r4
    606c:	f008 fd9a 	bl	eba4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    6070:	2800      	cmp	r0, #0
    6072:	d0d7      	beq.n	6024 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    6074:	4639      	mov	r1, r7
    6076:	4620      	mov	r0, r4
    6078:	f008 fd94 	bl	eba4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    607c:	2800      	cmp	r0, #0
    607e:	d1c5      	bne.n	600c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    6080:	bb06      	cbnz	r6, 60c4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    6082:	f89b 1001 	ldrb.w	r1, [fp, #1]
    6086:	f88d 1000 	strb.w	r1, [sp]
    608a:	9900      	ldr	r1, [sp, #0]
    608c:	9100      	str	r1, [sp, #0]
    608e:	f89d 1000 	ldrb.w	r1, [sp]
    6092:	b109      	cbz	r1, 6098 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    6094:	2501      	movs	r5, #1
    6096:	e000      	b.n	609a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    6098:	2500      	movs	r5, #0
    609a:	f10b 0001 	add.w	r0, fp, #1
    609e:	f880 8000 	strb.w	r8, [r0]
    60a2:	2003      	movs	r0, #3
    60a4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    60a8:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    60ac:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    60b0:	200e      	movs	r0, #14
    60b2:	f008 fd6a 	bl	eb8a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    60b6:	4804      	ldr	r0, [pc, #16]	; (60c8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    60b8:	f007 fb2e 	bl	d718 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    60bc:	b115      	cbz	r5, 60c4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    60be:	2011      	movs	r0, #17
    60c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60c4:	2000      	movs	r0, #0
    60c6:	e7fb      	b.n	60c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    60c8:	2000032c 	.word	0x2000032c
    60cc:	4000e000 	.word	0x4000e000
    60d0:	e000ed10 	.word	0xe000ed10

000060d4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    60d4:	b510      	push	{r4, lr}
    60d6:	4806      	ldr	r0, [pc, #24]	; (60f0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    60d8:	f007 fb1a 	bl	d710 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    60dc:	b118      	cbz	r0, 60e6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    60de:	2127      	movs	r1, #39	; 0x27
    60e0:	201d      	movs	r0, #29
    60e2:	f7ff fa27 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60e6:	4802      	ldr	r0, [pc, #8]	; (60f0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    60e8:	2100      	movs	r1, #0
    60ea:	7041      	strb	r1, [r0, #1]
    60ec:	bd10      	pop	{r4, pc}
    60ee:	0000      	.short	0x0000
    60f0:	2000032c 	.word	0x2000032c

000060f4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    60f4:	b570      	push	{r4, r5, r6, lr}
    60f6:	4911      	ldr	r1, [pc, #68]	; (613c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    60f8:	680a      	ldr	r2, [r1, #0]
    60fa:	b1ea      	cbz	r2, 6138 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    60fc:	2300      	movs	r3, #0
    60fe:	461d      	mov	r5, r3
    6100:	2401      	movs	r4, #1
    6102:	684a      	ldr	r2, [r1, #4]
    6104:	1c52      	adds	r2, r2, #1
    6106:	604a      	str	r2, [r1, #4]
    6108:	2a09      	cmp	r2, #9
    610a:	d300      	bcc.n	610e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    610c:	604d      	str	r5, [r1, #4]
    610e:	790e      	ldrb	r6, [r1, #4]
    6110:	fa04 f206 	lsl.w	r2, r4, r6
    6114:	680e      	ldr	r6, [r1, #0]
    6116:	4216      	tst	r6, r2
    6118:	d00b      	beq.n	6132 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    611a:	f3ef 8310 	mrs	r3, PRIMASK
    611e:	b672      	cpsid	i
    6120:	680c      	ldr	r4, [r1, #0]
    6122:	4394      	bics	r4, r2
    6124:	600c      	str	r4, [r1, #0]
    6126:	b903      	cbnz	r3, 612a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    6128:	b662      	cpsie	i
    612a:	6849      	ldr	r1, [r1, #4]
    612c:	6001      	str	r1, [r0, #0]
    612e:	2000      	movs	r0, #0
    6130:	bd70      	pop	{r4, r5, r6, pc}
    6132:	1c5b      	adds	r3, r3, #1
    6134:	2b09      	cmp	r3, #9
    6136:	d3e4      	bcc.n	6102 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    6138:	2005      	movs	r0, #5
    613a:	bd70      	pop	{r4, r5, r6, pc}
    613c:	200000cc 	.word	0x200000cc

00006140 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    6140:	4802      	ldr	r0, [pc, #8]	; (614c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    6142:	2100      	movs	r1, #0
    6144:	6001      	str	r1, [r0, #0]
    6146:	6041      	str	r1, [r0, #4]
    6148:	4770      	bx	lr
    614a:	0000      	.short	0x0000
    614c:	200000cc 	.word	0x200000cc

00006150 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    6150:	b510      	push	{r4, lr}
    6152:	4c08      	ldr	r4, [pc, #32]	; (6174 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    6154:	7861      	ldrb	r1, [r4, #1]
    6156:	b109      	cbz	r1, 615c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    6158:	200f      	movs	r0, #15
    615a:	bd10      	pop	{r4, pc}
    615c:	f7fe ffd0 	bl	5100 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    6160:	7020      	strb	r0, [r4, #0]
    6162:	28ff      	cmp	r0, #255	; 0xff
    6164:	d001      	beq.n	616a <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    6166:	2000      	movs	r0, #0
    6168:	bd10      	pop	{r4, pc}
    616a:	2178      	movs	r1, #120	; 0x78
    616c:	201f      	movs	r0, #31
    616e:	f7ff f9e1 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6172:	0000      	.short	0x0000
    6174:	20000000 	.word	0x20000000

00006178 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    6178:	4901      	ldr	r1, [pc, #4]	; (6180 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    617a:	2000      	movs	r0, #0
    617c:	7048      	strb	r0, [r1, #1]
    617e:	4770      	bx	lr
    6180:	20000000 	.word	0x20000000

00006184 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    6184:	4806      	ldr	r0, [pc, #24]	; (61a0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    6186:	4a07      	ldr	r2, [pc, #28]	; (61a4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    6188:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    618a:	8852      	ldrh	r2, [r2, #2]
    618c:	4291      	cmp	r1, r2
    618e:	d104      	bne.n	619a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    6190:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    6194:	b108      	cbz	r0, 619a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    6196:	2000      	movs	r0, #0
    6198:	4770      	bx	lr
    619a:	2001      	movs	r0, #1
    619c:	4770      	bx	lr
    619e:	0000      	.short	0x0000
    61a0:	200012c4 	.word	0x200012c4
    61a4:	20000318 	.word	0x20000318

000061a8 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    61a8:	4901      	ldr	r1, [pc, #4]	; (61b0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    61aa:	8048      	strh	r0, [r1, #2]
    61ac:	4770      	bx	lr
    61ae:	0000      	.short	0x0000
    61b0:	20000318 	.word	0x20000318

000061b4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    61b4:	4808      	ldr	r0, [pc, #32]	; (61d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    61b6:	4a09      	ldr	r2, [pc, #36]	; (61dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    61b8:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    61ba:	8852      	ldrh	r2, [r2, #2]
    61bc:	4291      	cmp	r1, r2
    61be:	d109      	bne.n	61d4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    61c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    61c4:	8481      	strh	r1, [r0, #36]	; 0x24
    61c6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    61ca:	b119      	cbz	r1, 61d4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    61cc:	2100      	movs	r1, #0
    61ce:	7001      	strb	r1, [r0, #0]
    61d0:	2001      	movs	r0, #1
    61d2:	4770      	bx	lr
    61d4:	2000      	movs	r0, #0
    61d6:	4770      	bx	lr
    61d8:	200012c4 	.word	0x200012c4
    61dc:	20000318 	.word	0x20000318

000061e0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    61e0:	4807      	ldr	r0, [pc, #28]	; (6200 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    61e2:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    61e6:	2901      	cmp	r1, #1
    61e8:	d007      	beq.n	61fa <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    61ea:	2101      	movs	r1, #1
    61ec:	7001      	strb	r1, [r0, #0]
    61ee:	4805      	ldr	r0, [pc, #20]	; (6204 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    61f0:	4903      	ldr	r1, [pc, #12]	; (6200 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    61f2:	8800      	ldrh	r0, [r0, #0]
    61f4:	8488      	strh	r0, [r1, #36]	; 0x24
    61f6:	2001      	movs	r0, #1
    61f8:	4770      	bx	lr
    61fa:	2000      	movs	r0, #0
    61fc:	4770      	bx	lr
    61fe:	0000      	.short	0x0000
    6200:	200012c4 	.word	0x200012c4
    6204:	20000318 	.word	0x20000318

00006208 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    6208:	4906      	ldr	r1, [pc, #24]	; (6224 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    620a:	4b07      	ldr	r3, [pc, #28]	; (6228 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    620c:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    620e:	885b      	ldrh	r3, [r3, #2]
    6210:	429a      	cmp	r2, r3
    6212:	d105      	bne.n	6220 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    6214:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    6218:	b112      	cbz	r2, 6220 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    621a:	6001      	str	r1, [r0, #0]
    621c:	2001      	movs	r0, #1
    621e:	4770      	bx	lr
    6220:	2000      	movs	r0, #0
    6222:	4770      	bx	lr
    6224:	200012c4 	.word	0x200012c4
    6228:	20000318 	.word	0x20000318

0000622c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    622c:	4909      	ldr	r1, [pc, #36]	; (6254 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    622e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    6230:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    6234:	3bff      	subs	r3, #255	; 0xff
    6236:	d002      	beq.n	623e <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    6238:	2100      	movs	r1, #0
    623a:	6001      	str	r1, [r0, #0]
    623c:	e007      	b.n	624e <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    623e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    6242:	4904      	ldr	r1, [pc, #16]	; (6254 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    6244:	2a01      	cmp	r2, #1
    6246:	d002      	beq.n	624e <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    6248:	6001      	str	r1, [r0, #0]
    624a:	2001      	movs	r0, #1
    624c:	4770      	bx	lr
    624e:	2000      	movs	r0, #0
    6250:	4770      	bx	lr
    6252:	0000      	.short	0x0000
    6254:	200012c4 	.word	0x200012c4

00006258 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    6258:	4901      	ldr	r1, [pc, #4]	; (6260 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    625a:	8008      	strh	r0, [r1, #0]
    625c:	4770      	bx	lr
    625e:	0000      	.short	0x0000
    6260:	20000318 	.word	0x20000318

00006264 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    6264:	4905      	ldr	r1, [pc, #20]	; (627c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    6266:	2000      	movs	r0, #0
    6268:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    626c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6270:	8488      	strh	r0, [r1, #36]	; 0x24
    6272:	4903      	ldr	r1, [pc, #12]	; (6280 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    6274:	8008      	strh	r0, [r1, #0]
    6276:	8048      	strh	r0, [r1, #2]
    6278:	4770      	bx	lr
    627a:	0000      	.short	0x0000
    627c:	200012c4 	.word	0x200012c4
    6280:	20000318 	.word	0x20000318
    6284:	4905      	ldr	r1, [pc, #20]	; (629c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    6286:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    6288:	4282      	cmp	r2, r0
    628a:	d105      	bne.n	6298 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    628c:	2000      	movs	r0, #0
    628e:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    6292:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6296:	8488      	strh	r0, [r1, #36]	; 0x24
    6298:	4770      	bx	lr
    629a:	0000      	.short	0x0000
    629c:	200012c4 	.word	0x200012c4

000062a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    62a0:	4a0a      	ldr	r2, [pc, #40]	; (62cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    62a2:	b110      	cbz	r0, 62aa <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    62a4:	2801      	cmp	r0, #1
    62a6:	d007      	beq.n	62b8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    62a8:	e00e      	b.n	62c8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    62aa:	7850      	ldrb	r0, [r2, #1]
    62ac:	b160      	cbz	r0, 62c8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    62ae:	f8d2 0002 	ldr.w	r0, [r2, #2]
    62b2:	6008      	str	r0, [r1, #0]
    62b4:	88d0      	ldrh	r0, [r2, #6]
    62b6:	e004      	b.n	62c2 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    62b8:	7810      	ldrb	r0, [r2, #0]
    62ba:	b128      	cbz	r0, 62c8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    62bc:	6890      	ldr	r0, [r2, #8]
    62be:	6008      	str	r0, [r1, #0]
    62c0:	8990      	ldrh	r0, [r2, #12]
    62c2:	8088      	strh	r0, [r1, #4]
    62c4:	2001      	movs	r0, #1
    62c6:	4770      	bx	lr
    62c8:	2000      	movs	r0, #0
    62ca:	4770      	bx	lr
    62cc:	2000032e 	.word	0x2000032e

000062d0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    62d0:	4a08      	ldr	r2, [pc, #32]	; (62f4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    62d2:	2301      	movs	r3, #1
    62d4:	b138      	cbz	r0, 62e6 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    62d6:	2801      	cmp	r0, #1
    62d8:	d104      	bne.n	62e4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    62da:	7013      	strb	r3, [r2, #0]
    62dc:	6808      	ldr	r0, [r1, #0]
    62de:	6090      	str	r0, [r2, #8]
    62e0:	8888      	ldrh	r0, [r1, #4]
    62e2:	8190      	strh	r0, [r2, #12]
    62e4:	4770      	bx	lr
    62e6:	7053      	strb	r3, [r2, #1]
    62e8:	6808      	ldr	r0, [r1, #0]
    62ea:	f8c2 0002 	str.w	r0, [r2, #2]
    62ee:	8888      	ldrh	r0, [r1, #4]
    62f0:	80d0      	strh	r0, [r2, #6]
    62f2:	4770      	bx	lr
    62f4:	2000032e 	.word	0x2000032e

000062f8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    62f8:	4906      	ldr	r1, [pc, #24]	; (6314 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    62fa:	b110      	cbz	r0, 6302 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    62fc:	2801      	cmp	r0, #1
    62fe:	d002      	beq.n	6306 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    6300:	e005      	b.n	630e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    6302:	7848      	ldrb	r0, [r1, #1]
    6304:	e000      	b.n	6308 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    6306:	7808      	ldrb	r0, [r1, #0]
    6308:	b108      	cbz	r0, 630e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    630a:	2001      	movs	r0, #1
    630c:	4770      	bx	lr
    630e:	2000      	movs	r0, #0
    6310:	4770      	bx	lr
    6312:	0000      	.short	0x0000
    6314:	2000032e 	.word	0x2000032e

00006318 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    6318:	4901      	ldr	r1, [pc, #4]	; (6320 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    631a:	7708      	strb	r0, [r1, #28]
    631c:	4770      	bx	lr
    631e:	0000      	.short	0x0000
    6320:	20000b7a 	.word	0x20000b7a

00006324 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    6324:	4801      	ldr	r0, [pc, #4]	; (632c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    6326:	78c0      	ldrb	r0, [r0, #3]
    6328:	4770      	bx	lr
    632a:	0000      	.short	0x0000
    632c:	200000d4 	.word	0x200000d4

00006330 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    6330:	4801      	ldr	r0, [pc, #4]	; (6338 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    6332:	7900      	ldrb	r0, [r0, #4]
    6334:	4770      	bx	lr
    6336:	0000      	.short	0x0000
    6338:	200000d4 	.word	0x200000d4

0000633c <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI>:
    633c:	4608      	mov	r0, r1
    633e:	2100      	movs	r1, #0
    6340:	7041      	strb	r1, [r0, #1]
    6342:	211a      	movs	r1, #26
    6344:	f800 1b04 	strb.w	r1, [r0], #4
    6348:	220e      	movs	r2, #14
    634a:	4901      	ldr	r1, [pc, #4]	; (6350 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI+0x14>)
    634c:	f007 ba64 	b.w	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6350:	20000b88 	.word	0x20000b88

00006354 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    6354:	b510      	push	{r4, lr}
    6356:	4604      	mov	r4, r0
    6358:	f000 f952 	bl	6600 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    635c:	b118      	cbz	r0, 6366 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    635e:	21c2      	movs	r1, #194	; 0xc2
    6360:	2027      	movs	r0, #39	; 0x27
    6362:	f7ff f8e7 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6366:	4803      	ldr	r0, [pc, #12]	; (6374 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    6368:	2101      	movs	r1, #1
    636a:	f009 f826 	bl	f3ba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    636e:	4802      	ldr	r0, [pc, #8]	; (6378 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    6370:	62c4      	str	r4, [r0, #44]	; 0x2c
    6372:	bd10      	pop	{r4, pc}
    6374:	20000b58 	.word	0x20000b58
    6378:	200000d4 	.word	0x200000d4

0000637c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    637c:	4901      	ldr	r1, [pc, #4]	; (6384 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    637e:	2001      	movs	r0, #1
    6380:	7188      	strb	r0, [r1, #6]
    6382:	4770      	bx	lr
    6384:	200000d4 	.word	0x200000d4

00006388 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    6388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    638c:	4c5e      	ldr	r4, [pc, #376]	; (6508 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    638e:	9d06      	ldr	r5, [sp, #24]
    6390:	7826      	ldrb	r6, [r4, #0]
    6392:	2e00      	cmp	r6, #0
    6394:	d16b      	bne.n	646e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    6396:	2a00      	cmp	r2, #0
    6398:	d069      	beq.n	646e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    639a:	2b00      	cmp	r3, #0
    639c:	d067      	beq.n	646e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    639e:	2d00      	cmp	r5, #0
    63a0:	d065      	beq.n	646e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    63a2:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    63a6:	f104 0614 	add.w	r6, r4, #20
    63aa:	2000      	movs	r0, #0
    63ac:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    63b0:	71a0      	strb	r0, [r4, #6]
    63b2:	7160      	strb	r0, [r4, #5]
    63b4:	70e0      	strb	r0, [r4, #3]
    63b6:	70a0      	strb	r0, [r4, #2]
    63b8:	7120      	strb	r0, [r4, #4]
    63ba:	81a0      	strh	r0, [r4, #12]
    63bc:	81e0      	strh	r0, [r4, #14]
    63be:	f000 f957 	bl	6670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    63c2:	4606      	mov	r6, r0
    63c4:	f000 f94e 	bl	6664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    63c8:	4605      	mov	r5, r0
    63ca:	f005 ff35 	bl	c238 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    63ce:	f005 fc8d 	bl	bcec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    63d2:	f995 0072 	ldrsb.w	r0, [r5, #114]	; 0x72
    63d6:	f005 ffb3 	bl	c340 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    63da:	f105 001c 	add.w	r0, r5, #28
    63de:	f006 f885 	bl	c4ec <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    63e2:	6968      	ldr	r0, [r5, #20]
    63e4:	f006 f878 	bl	c4d8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    63e8:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    63ec:	f006 f8b2 	bl	c554 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    63f0:	f104 0038 	add.w	r0, r4, #56	; 0x38
    63f4:	6840      	ldr	r0, [r0, #4]
    63f6:	f890 01c6 	ldrb.w	r0, [r0, #454]	; 0x1c6
    63fa:	b108      	cbz	r0, 6400 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    63fc:	f005 fe9c 	bl	c138 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    6400:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    6404:	2001      	movs	r0, #1
    6406:	f005 fddb 	bl	bfc0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    640a:	2800      	cmp	r0, #0
    640c:	d075      	beq.n	64fa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    640e:	483f      	ldr	r0, [pc, #252]	; (650c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    6410:	f005 fe42 	bl	c098 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6414:	8828      	ldrh	r0, [r5, #0]
    6416:	f7ff fccb 	bl	5db0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    641a:	6320      	str	r0, [r4, #48]	; 0x30
    641c:	8828      	ldrh	r0, [r5, #0]
    641e:	f7ff fcb1 	bl	5d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6422:	6360      	str	r0, [r4, #52]	; 0x34
    6424:	3678      	adds	r6, #120	; 0x78
    6426:	483a      	ldr	r0, [pc, #232]	; (6510 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    6428:	ce8e      	ldmia	r6!, {r1, r2, r3, r7}
    642a:	f100 0808 	add.w	r8, r0, #8
    642e:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    6432:	f856 1b04 	ldr.w	r1, [r6], #4
    6436:	f8c0 1021 	str.w	r1, [r0, #33]	; 0x21
    643a:	f856 198c 	ldr.w	r1, [r6], #-140
    643e:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
    6442:	f000 f999 	bl	6778 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x15c>
    6446:	4601      	mov	r1, r0
    6448:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
    644a:	f008 fd27 	bl	ee9c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    644e:	8f29      	ldrh	r1, [r5, #56]	; 0x38
    6450:	4281      	cmp	r1, r0
    6452:	d200      	bcs.n	6456 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xce>
    6454:	4608      	mov	r0, r1
    6456:	7220      	strb	r0, [r4, #8]
    6458:	46a0      	mov	r8, r4
    645a:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    645e:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
    6462:	7d37      	ldrb	r7, [r6, #20]
    6464:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
    6468:	2908      	cmp	r1, #8
    646a:	d104      	bne.n	6476 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    646c:	e002      	b.n	6474 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    646e:	f44f 718d 	mov.w	r1, #282	; 0x11a
    6472:	e046      	b.n	6502 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17a>
    6474:	2104      	movs	r1, #4
    6476:	f008 fd11 	bl	ee9c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    647a:	b90f      	cbnz	r7, 6480 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    647c:	1d00      	adds	r0, r0, #4
    647e:	b280      	uxth	r0, r0
    6480:	4284      	cmp	r4, r0
    6482:	d200      	bcs.n	6486 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    6484:	4620      	mov	r0, r4
    6486:	b2c4      	uxtb	r4, r0
    6488:	f888 4009 	strb.w	r4, [r8, #9]
    648c:	7d31      	ldrb	r1, [r6, #20]
    648e:	2900      	cmp	r1, #0
    6490:	d002      	beq.n	6498 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    6492:	bf00      	nop
    6494:	f04f 0104 	mov.w	r1, #4
    6498:	4421      	add	r1, r4
    649a:	f888 1007 	strb.w	r1, [r8, #7]
    649e:	d014      	beq.n	64ca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x142>
    64a0:	481b      	ldr	r0, [pc, #108]	; (6510 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    64a2:	f04f 0701 	mov.w	r7, #1
    64a6:	f100 0008 	add.w	r0, r0, #8
    64aa:	7607      	strb	r7, [r0, #24]
    64ac:	e9d6 121c 	ldrd	r1, r2, [r6, #112]	; 0x70
    64b0:	e9c0 1204 	strd	r1, r2, [r0, #16]
    64b4:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
    64b8:	f008 fc05 	bl	ecc6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    64bc:	4914      	ldr	r1, [pc, #80]	; (6510 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    64be:	4603      	mov	r3, r0
    64c0:	4622      	mov	r2, r4
    64c2:	3108      	adds	r1, #8
    64c4:	4638      	mov	r0, r7
    64c6:	f005 fb7d 	bl	bbc4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    64ca:	2001      	movs	r0, #1
    64cc:	f000 fb9a 	bl	6c04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    64d0:	4810      	ldr	r0, [pc, #64]	; (6514 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    64d2:	6800      	ldr	r0, [r0, #0]
    64d4:	2803      	cmp	r0, #3
    64d6:	d012      	beq.n	64fe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    64d8:	280b      	cmp	r0, #11
    64da:	d010      	beq.n	64fe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    64dc:	480c      	ldr	r0, [pc, #48]	; (6510 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    64de:	220e      	movs	r2, #14
    64e0:	2100      	movs	r1, #0
    64e2:	3052      	adds	r0, #82	; 0x52
    64e4:	f007 fa12 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    64e8:	4809      	ldr	r0, [pc, #36]	; (6510 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    64ea:	88b1      	ldrh	r1, [r6, #4]
    64ec:	3052      	adds	r0, #82	; 0x52
    64ee:	8041      	strh	r1, [r0, #2]
    64f0:	8829      	ldrh	r1, [r5, #0]
    64f2:	8001      	strh	r1, [r0, #0]
    64f4:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    64f8:	7101      	strb	r1, [r0, #4]
    64fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64fe:	f240 11d5 	movw	r1, #469	; 0x1d5
    6502:	2027      	movs	r0, #39	; 0x27
    6504:	f7ff f816 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6508:	200000d4 	.word	0x200000d4
    650c:	00006e04 	.word	0x00006e04
    6510:	20000b28 	.word	0x20000b28
    6514:	40001550 	.word	0x40001550

00006518 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    6518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    651c:	4605      	mov	r5, r0
    651e:	f000 f8a7 	bl	6670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6522:	4e32      	ldr	r6, [pc, #200]	; (65ec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd4>)
    6524:	4604      	mov	r4, r0
    6526:	f04f 0800 	mov.w	r8, #0
    652a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    652c:	7847      	ldrb	r7, [r0, #1]
    652e:	b10d      	cbz	r5, 6534 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1c>
    6530:	2d01      	cmp	r5, #1
    6532:	d101      	bne.n	6538 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    6534:	f886 8001 	strb.w	r8, [r6, #1]
    6538:	7870      	ldrb	r0, [r6, #1]
    653a:	f04f 0901 	mov.w	r9, #1
    653e:	b150      	cbz	r0, 6556 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    6540:	2801      	cmp	r0, #1
    6542:	d01a      	beq.n	657a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x62>
    6544:	2802      	cmp	r0, #2
    6546:	d034      	beq.n	65b2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9a>
    6548:	2803      	cmp	r0, #3
    654a:	d048      	beq.n	65de <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc6>
    654c:	f240 411d 	movw	r1, #1053	; 0x41d
    6550:	2027      	movs	r0, #39	; 0x27
    6552:	f7fe ffef 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6556:	2d01      	cmp	r5, #1
    6558:	d032      	beq.n	65c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    655a:	f000 f8f9 	bl	6750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    655e:	4639      	mov	r1, r7
    6560:	2201      	movs	r2, #1
    6562:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6564:	f007 ff09 	bl	e37a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    6568:	e028      	b.n	65bc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa4>
    656a:	bf00      	nop
    656c:	f884 8008 	strb.w	r8, [r4, #8]
    6570:	e031      	b.n	65d6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    6572:	bf00      	nop
    6574:	f884 9008 	strb.w	r9, [r4, #8]
    6578:	e02d      	b.n	65d6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    657a:	2d01      	cmp	r5, #1
    657c:	d008      	beq.n	6590 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    657e:	f000 f8e7 	bl	6750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    6582:	4639      	mov	r1, r7
    6584:	2200      	movs	r2, #0
    6586:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6588:	f007 fef7 	bl	e37a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    658c:	2d02      	cmp	r5, #2
    658e:	d00b      	beq.n	65a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    6590:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    6594:	1c40      	adds	r0, r0, #1
    6596:	f141 0100 	adc.w	r1, r1, #0
    659a:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    659e:	7a20      	ldrb	r0, [r4, #8]
    65a0:	2801      	cmp	r0, #1
    65a2:	d003      	beq.n	65ac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    65a4:	f884 9008 	strb.w	r9, [r4, #8]
    65a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    65ac:	f884 8008 	strb.w	r8, [r4, #8]
    65b0:	e7fa      	b.n	65a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    65b2:	2d01      	cmp	r5, #1
    65b4:	d004      	beq.n	65c0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    65b6:	6b70      	ldr	r0, [r6, #52]	; 0x34
    65b8:	f008 f8de 	bl	e778 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    65bc:	2d02      	cmp	r5, #2
    65be:	d0f3      	beq.n	65a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    65c0:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    65c4:	1c40      	adds	r0, r0, #1
    65c6:	f141 0100 	adc.w	r1, r1, #0
    65ca:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    65ce:	7a20      	ldrb	r0, [r4, #8]
    65d0:	2801      	cmp	r0, #1
    65d2:	d1cf      	bne.n	6574 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x5c>
    65d4:	e7ca      	b.n	656c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x54>
    65d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65da:	f001 b8a5 	b.w	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    65de:	2d01      	cmp	r5, #1
    65e0:	d0e2      	beq.n	65a8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    65e2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    65e4:	f008 f8c8 	bl	e778 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    65e8:	e7f5      	b.n	65d6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    65ea:	0000      	.short	0x0000
    65ec:	200000d4 	.word	0x200000d4

000065f0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    65f0:	4802      	ldr	r0, [pc, #8]	; (65fc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    65f2:	89c0      	ldrh	r0, [r0, #14]
    65f4:	f3c0 2080 	ubfx	r0, r0, #10, #1
    65f8:	4770      	bx	lr
    65fa:	0000      	.short	0x0000
    65fc:	200000d4 	.word	0x200000d4

00006600 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    6600:	4804      	ldr	r0, [pc, #16]	; (6614 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    6602:	7800      	ldrb	r0, [r0, #0]
    6604:	b108      	cbz	r0, 660a <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    6606:	200c      	movs	r0, #12
    6608:	4770      	bx	lr
    660a:	4903      	ldr	r1, [pc, #12]	; (6618 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    660c:	2000      	movs	r0, #0
    660e:	7708      	strb	r0, [r1, #28]
    6610:	4770      	bx	lr
    6612:	0000      	.short	0x0000
    6614:	200000d4 	.word	0x200000d4
    6618:	20000b7a 	.word	0x20000b7a

0000661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    661c:	480c      	ldr	r0, [pc, #48]	; (6650 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    661e:	b510      	push	{r4, lr}
    6620:	7801      	ldrb	r1, [r0, #0]
    6622:	b149      	cbz	r1, 6638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    6624:	f100 0138 	add.w	r1, r0, #56	; 0x38
    6628:	7800      	ldrb	r0, [r0, #0]
    662a:	2802      	cmp	r0, #2
    662c:	d008      	beq.n	6640 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    662e:	f240 11f1 	movw	r1, #497	; 0x1f1
    6632:	2027      	movs	r0, #39	; 0x27
    6634:	f7fe ff7e 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    663c:	f000 b9fe 	b.w	6a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6640:	6848      	ldr	r0, [r1, #4]
    6642:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
    6646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    664a:	f005 bd2d 	b.w	c0a8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    664e:	0000      	.short	0x0000
    6650:	200000d4 	.word	0x200000d4
    6654:	4a02      	ldr	r2, [pc, #8]	; (6660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    6656:	8993      	ldrh	r3, [r2, #12]
    6658:	4303      	orrs	r3, r0
    665a:	8193      	strh	r3, [r2, #12]
    665c:	6952      	ldr	r2, [r2, #20]
    665e:	4710      	bx	r2
    6660:	200000d4 	.word	0x200000d4
    6664:	4801      	ldr	r0, [pc, #4]	; (666c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    6666:	6840      	ldr	r0, [r0, #4]
    6668:	4770      	bx	lr
    666a:	0000      	.short	0x0000
    666c:	2000010c 	.word	0x2000010c
    6670:	4801      	ldr	r0, [pc, #4]	; (6678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    6672:	6840      	ldr	r0, [r0, #4]
    6674:	3078      	adds	r0, #120	; 0x78
    6676:	4770      	bx	lr
    6678:	2000010c 	.word	0x2000010c
    667c:	4a01      	ldr	r2, [pc, #4]	; (6684 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    667e:	2100      	movs	r1, #0
    6680:	6952      	ldr	r2, [r2, #20]
    6682:	4710      	bx	r2
    6684:	200000d4 	.word	0x200000d4
    6688:	b570      	push	{r4, r5, r6, lr}
    668a:	f7ff fff1 	bl	6670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    668e:	4604      	mov	r4, r0
    6690:	f7ff ffe8 	bl	6664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6694:	4605      	mov	r5, r0
    6696:	4621      	mov	r1, r4
    6698:	f008 fc91 	bl	efbe <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    669c:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    66a0:	2901      	cmp	r1, #1
    66a2:	d112      	bne.n	66ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    66a4:	2800      	cmp	r0, #0
    66a6:	d010      	beq.n	66ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    66a8:	4808      	ldr	r0, [pc, #32]	; (66cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>)
    66aa:	882a      	ldrh	r2, [r5, #0]
    66ac:	6841      	ldr	r1, [r0, #4]
    66ae:	f501 7096 	add.w	r0, r1, #300	; 0x12c
    66b2:	8142      	strh	r2, [r0, #10]
    66b4:	7a62      	ldrb	r2, [r4, #9]
    66b6:	7302      	strb	r2, [r0, #12]
    66b8:	7aa2      	ldrb	r2, [r4, #10]
    66ba:	7342      	strb	r2, [r0, #13]
    66bc:	2218      	movs	r2, #24
    66be:	f000 ff61 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    66c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    66c6:	f001 b82f 	b.w	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    66ca:	bd70      	pop	{r4, r5, r6, pc}
    66cc:	2000010c 	.word	0x2000010c
    66d0:	b570      	push	{r4, r5, r6, lr}
    66d2:	4605      	mov	r5, r0
    66d4:	2901      	cmp	r1, #1
    66d6:	d818      	bhi.n	670a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    66d8:	4c12      	ldr	r4, [pc, #72]	; (6724 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>)
    66da:	69a1      	ldr	r1, [r4, #24]
    66dc:	4788      	blx	r1
    66de:	b1a0      	cbz	r0, 670a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    66e0:	7960      	ldrb	r0, [r4, #5]
    66e2:	b990      	cbnz	r0, 670a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    66e4:	b9e5      	cbnz	r5, 6720 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    66e6:	f104 0010 	add.w	r0, r4, #16
    66ea:	7801      	ldrb	r1, [r0, #0]
    66ec:	06c8      	lsls	r0, r1, #27
    66ee:	d405      	bmi.n	66fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    66f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    66f2:	7800      	ldrb	r0, [r0, #0]
    66f4:	06c0      	lsls	r0, r0, #27
    66f6:	d401      	bmi.n	66fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    66f8:	2001      	movs	r0, #1
    66fa:	e000      	b.n	66fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    66fc:	2000      	movs	r0, #0
    66fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6700:	b92a      	cbnz	r2, 670e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    6702:	8962      	ldrh	r2, [r4, #10]
    6704:	b11a      	cbz	r2, 670e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    6706:	06c9      	lsls	r1, r1, #27
    6708:	d401      	bmi.n	670e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    670a:	2001      	movs	r0, #1
    670c:	bd70      	pop	{r4, r5, r6, pc}
    670e:	89a1      	ldrh	r1, [r4, #12]
    6710:	078a      	lsls	r2, r1, #30
    6712:	d503      	bpl.n	671c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    6714:	6a22      	ldr	r2, [r4, #32]
    6716:	78d2      	ldrb	r2, [r2, #3]
    6718:	2a02      	cmp	r2, #2
    671a:	d001      	beq.n	6720 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    671c:	4308      	orrs	r0, r1
    671e:	d1f4      	bne.n	670a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    6720:	2000      	movs	r0, #0
    6722:	bd70      	pop	{r4, r5, r6, pc}
    6724:	200000d4 	.word	0x200000d4
    6728:	b530      	push	{r4, r5, lr}
    672a:	4b08      	ldr	r3, [pc, #32]	; (674c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>)
    672c:	88dd      	ldrh	r5, [r3, #6]
    672e:	891c      	ldrh	r4, [r3, #8]
    6730:	b12a      	cbz	r2, 673e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    6732:	b908      	cbnz	r0, 6738 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    6734:	b905      	cbnz	r5, 6738 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    6736:	b114      	cbz	r4, 673e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    6738:	8958      	ldrh	r0, [r3, #10]
    673a:	1c40      	adds	r0, r0, #1
    673c:	8158      	strh	r0, [r3, #10]
    673e:	b111      	cbz	r1, 6746 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12a>
    6740:	1c6d      	adds	r5, r5, #1
    6742:	80dd      	strh	r5, [r3, #6]
    6744:	bd30      	pop	{r4, r5, pc}
    6746:	1c64      	adds	r4, r4, #1
    6748:	811c      	strh	r4, [r3, #8]
    674a:	bd30      	pop	{r4, r5, pc}
    674c:	20000b7a 	.word	0x20000b7a
    6750:	b510      	push	{r4, lr}
    6752:	4c08      	ldr	r4, [pc, #32]	; (6774 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x158>)
    6754:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6756:	b138      	cbz	r0, 6768 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x14c>
    6758:	8962      	ldrh	r2, [r4, #10]
    675a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    675c:	1cd2      	adds	r2, r2, #3
    675e:	f007 f85b 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6762:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6764:	6260      	str	r0, [r4, #36]	; 0x24
    6766:	bd10      	pop	{r4, pc}
    6768:	f240 4163 	movw	r1, #1123	; 0x463
    676c:	2027      	movs	r0, #39	; 0x27
    676e:	f7fe fee1 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6772:	0000      	.short	0x0000
    6774:	200000d4 	.word	0x200000d4
    6778:	b510      	push	{r4, lr}
    677a:	f7ff ff73 	bl	6664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    677e:	4604      	mov	r4, r0
    6780:	f7ff ff76 	bl	6670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6784:	4601      	mov	r1, r0
    6786:	7b42      	ldrb	r2, [r0, #13]
    6788:	4815      	ldr	r0, [pc, #84]	; (67e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c4>)
    678a:	2a24      	cmp	r2, #36	; 0x24
    678c:	d00e      	beq.n	67ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    678e:	7b89      	ldrb	r1, [r1, #14]
    6790:	2924      	cmp	r1, #36	; 0x24
    6792:	d00b      	beq.n	67ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    6794:	2a1f      	cmp	r2, #31
    6796:	d00d      	beq.n	67b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    6798:	2a20      	cmp	r2, #32
    679a:	d00b      	beq.n	67b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    679c:	2922      	cmp	r1, #34	; 0x22
    679e:	d00f      	beq.n	67c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    67a0:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    67a4:	2804      	cmp	r0, #4
    67a6:	d100      	bne.n	67aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18e>
    67a8:	2008      	movs	r0, #8
    67aa:	bd10      	pop	{r4, pc}
    67ac:	6840      	ldr	r0, [r0, #4]
    67ae:	f890 1276 	ldrb.w	r1, [r0, #630]	; 0x276
    67b2:	e00e      	b.n	67d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b6>
    67b4:	2922      	cmp	r1, #34	; 0x22
    67b6:	d003      	beq.n	67c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    67b8:	6840      	ldr	r0, [r0, #4]
    67ba:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    67be:	e005      	b.n	67cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b0>
    67c0:	6841      	ldr	r1, [r0, #4]
    67c2:	f891 0126 	ldrb.w	r0, [r1, #294]	; 0x126
    67c6:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    67ca:	4008      	ands	r0, r1
    67cc:	f008 fa71 	bl	ecb2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    67d0:	4601      	mov	r1, r0
    67d2:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    67d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67da:	f008 ba82 	b.w	ece2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    67de:	0000      	.short	0x0000
    67e0:	2000010c 	.word	0x2000010c
    67e4:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    67e8:	468b      	mov	fp, r1
    67ea:	4607      	mov	r7, r0
    67ec:	f7ff ff40 	bl	6670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    67f0:	f04f 0900 	mov.w	r9, #0
    67f4:	4c61      	ldr	r4, [pc, #388]	; (697c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>)
    67f6:	4605      	mov	r5, r0
    67f8:	f88d 9000 	strb.w	r9, [sp]
    67fc:	f8cd 9004 	str.w	r9, [sp, #4]
    6800:	7820      	ldrb	r0, [r4, #0]
    6802:	464e      	mov	r6, r9
    6804:	2802      	cmp	r0, #2
    6806:	d004      	beq.n	6812 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    6808:	f240 41ea 	movw	r1, #1258	; 0x4ea
    680c:	2027      	movs	r0, #39	; 0x27
    680e:	f7fe fe91 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6812:	7ba0      	ldrb	r0, [r4, #14]
    6814:	0640      	lsls	r0, r0, #25
    6816:	d406      	bmi.n	6826 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    6818:	2040      	movs	r0, #64	; 0x40
    681a:	f7ff ff2f 	bl	667c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    681e:	89e0      	ldrh	r0, [r4, #14]
    6820:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    6824:	81e0      	strh	r0, [r4, #14]
    6826:	7d28      	ldrb	r0, [r5, #20]
    6828:	b3df      	cbz	r7, 68a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    682a:	b180      	cbz	r0, 684e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    682c:	f005 fa98 	bl	bd60 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    6830:	f005 fa72 	bl	bd18 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    6834:	b958      	cbnz	r0, 684e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6836:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6838:	7841      	ldrb	r1, [r0, #1]
    683a:	b141      	cbz	r1, 684e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    683c:	7800      	ldrb	r0, [r0, #0]
    683e:	7a29      	ldrb	r1, [r5, #8]
    6840:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6844:	4288      	cmp	r0, r1
    6846:	d102      	bne.n	684e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6848:	2001      	movs	r0, #1
    684a:	70a0      	strb	r0, [r4, #2]
    684c:	e092      	b.n	6974 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    684e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6850:	7841      	ldrb	r1, [r0, #1]
    6852:	8161      	strh	r1, [r4, #10]
    6854:	b121      	cbz	r1, 6860 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    6856:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6858:	f007 ff5b 	bl	e712 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    685c:	62a0      	str	r0, [r4, #40]	; 0x28
    685e:	e000      	b.n	6862 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x246>
    6860:	62a6      	str	r6, [r4, #40]	; 0x28
    6862:	89e0      	ldrh	r0, [r4, #14]
    6864:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6868:	81e0      	strh	r0, [r4, #14]
    686a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    686c:	79e9      	ldrb	r1, [r5, #7]
    686e:	7800      	ldrb	r0, [r0, #0]
    6870:	f3c0 0080 	ubfx	r0, r0, #2, #1
    6874:	4288      	cmp	r0, r1
    6876:	d007      	beq.n	6888 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26c>
    6878:	a801      	add	r0, sp, #4
    687a:	f000 f975 	bl	6b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54c>
    687e:	89e0      	ldrh	r0, [r4, #14]
    6880:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6884:	81e0      	strh	r0, [r4, #14]
    6886:	e001      	b.n	688c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x270>
    6888:	f04f 0901 	mov.w	r9, #1
    688c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    688e:	7a29      	ldrb	r1, [r5, #8]
    6890:	7800      	ldrb	r0, [r0, #0]
    6892:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6896:	4288      	cmp	r0, r1
    6898:	d10e      	bne.n	68b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    689a:	4668      	mov	r0, sp
    689c:	f000 f926 	bl	6aec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d0>
    68a0:	e00a      	b.n	68b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    68a2:	e7ff      	b.n	68a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    68a4:	b108      	cbz	r0, 68aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    68a6:	f005 fa55 	bl	bd54 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    68aa:	78e0      	ldrb	r0, [r4, #3]
    68ac:	1c40      	adds	r0, r0, #1
    68ae:	70e0      	strb	r0, [r4, #3]
    68b0:	89e0      	ldrh	r0, [r4, #14]
    68b2:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    68b6:	81e0      	strh	r0, [r4, #14]
    68b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 697c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    68bc:	7ce8      	ldrb	r0, [r5, #19]
    68be:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    68c2:	b188      	cbz	r0, 68e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    68c4:	f7ff fece 	bl	6664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    68c8:	492d      	ldr	r1, [pc, #180]	; (6980 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    68ca:	760e      	strb	r6, [r1, #24]
    68cc:	e9d5 231a 	ldrd	r2, r3, [r5, #104]	; 0x68
    68d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    68d4:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    68d8:	f008 f9f5 	bl	ecc6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    68dc:	4603      	mov	r3, r0
    68de:	22fb      	movs	r2, #251	; 0xfb
    68e0:	4927      	ldr	r1, [pc, #156]	; (6980 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    68e2:	4630      	mov	r0, r6
    68e4:	f005 f96e 	bl	bbc4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    68e8:	f04f 0800 	mov.w	r8, #0
    68ec:	f1bb 0f00 	cmp.w	fp, #0
    68f0:	d104      	bne.n	68fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    68f2:	78e1      	ldrb	r1, [r4, #3]
    68f4:	2001      	movs	r0, #1
    68f6:	f7ff feeb 	bl	66d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    68fa:	b198      	cbz	r0, 6924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    68fc:	f005 fdd8 	bl	c4b0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    6900:	f89d 0000 	ldrb.w	r0, [sp]
    6904:	b110      	cbz	r0, 690c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>
    6906:	2000      	movs	r0, #0
    6908:	f7ff fe06 	bl	6518 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    690c:	88a8      	ldrh	r0, [r5, #4]
    690e:	464a      	mov	r2, r9
    6910:	4639      	mov	r1, r7
    6912:	f7ff ff09 	bl	6728 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    6916:	b117      	cbz	r7, 691e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    6918:	70e6      	strb	r6, [r4, #3]
    691a:	f7ff feb5 	bl	6688 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    691e:	f04f 0801 	mov.w	r8, #1
    6922:	e017      	b.n	6954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    6924:	f89d 0000 	ldrb.w	r0, [sp]
    6928:	b110      	cbz	r0, 6930 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    692a:	2001      	movs	r0, #1
    692c:	f7ff fdf4 	bl	6518 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6930:	2000      	movs	r0, #0
    6932:	f000 f9a3 	bl	6c7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x660>
    6936:	f89d 0000 	ldrb.w	r0, [sp]
    693a:	b110      	cbz	r0, 6942 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    693c:	2002      	movs	r0, #2
    693e:	f7ff fdeb 	bl	6518 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6942:	88a8      	ldrh	r0, [r5, #4]
    6944:	464a      	mov	r2, r9
    6946:	4639      	mov	r1, r7
    6948:	f7ff feee 	bl	6728 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    694c:	b117      	cbz	r7, 6954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    694e:	70e6      	strb	r6, [r4, #3]
    6950:	f7ff fe9a 	bl	6688 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6954:	9801      	ldr	r0, [sp, #4]
    6956:	b150      	cbz	r0, 696e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    6958:	f007 fd67 	bl	e42a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    695c:	f8da 1004 	ldr.w	r1, [sl, #4]
    6960:	1c40      	adds	r0, r0, #1
    6962:	7206      	strb	r6, [r0, #8]
    6964:	220b      	movs	r2, #11
    6966:	f000 fe0d 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    696a:	f000 fedd 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    696e:	f1b8 0f00 	cmp.w	r8, #0
    6972:	d001      	beq.n	6978 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    6974:	f000 f862 	bl	6a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6978:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    697c:	200000d4 	.word	0x200000d4
    6980:	20000b30 	.word	0x20000b30
    6984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6988:	460f      	mov	r7, r1
    698a:	4680      	mov	r8, r0
    698c:	f7ff fe70 	bl	6670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6990:	4d28      	ldr	r5, [pc, #160]	; (6a34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    6992:	4604      	mov	r4, r0
    6994:	7828      	ldrb	r0, [r5, #0]
    6996:	2801      	cmp	r0, #1
    6998:	d004      	beq.n	69a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    699a:	f240 4172 	movw	r1, #1138	; 0x472
    699e:	2027      	movs	r0, #39	; 0x27
    69a0:	f7fe fdc8 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69a4:	7821      	ldrb	r1, [r4, #0]
    69a6:	2000      	movs	r0, #0
    69a8:	2601      	movs	r6, #1
    69aa:	b129      	cbz	r1, 69b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    69ac:	7020      	strb	r0, [r4, #0]
    69ae:	2100      	movs	r1, #0
    69b0:	2004      	movs	r0, #4
    69b2:	f7ff fe4f 	bl	6654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    69b6:	70a6      	strb	r6, [r4, #2]
    69b8:	6a29      	ldr	r1, [r5, #32]
    69ba:	7808      	ldrb	r0, [r1, #0]
    69bc:	43c0      	mvns	r0, r0
    69be:	0780      	lsls	r0, r0, #30
    69c0:	d109      	bne.n	69d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ba>
    69c2:	79a0      	ldrb	r0, [r4, #6]
    69c4:	bb78      	cbnz	r0, 6a26 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    69c6:	2002      	movs	r0, #2
    69c8:	f7ff fe44 	bl	6654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    69cc:	6a28      	ldr	r0, [r5, #32]
    69ce:	7800      	ldrb	r0, [r0, #0]
    69d0:	43c0      	mvns	r0, r0
    69d2:	0780      	lsls	r0, r0, #30
    69d4:	d027      	beq.n	6a26 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    69d6:	6a28      	ldr	r0, [r5, #32]
    69d8:	7840      	ldrb	r0, [r0, #1]
    69da:	b110      	cbz	r0, 69e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c6>
    69dc:	2002      	movs	r0, #2
    69de:	71a0      	strb	r0, [r4, #6]
    69e0:	e000      	b.n	69e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c8>
    69e2:	71a6      	strb	r6, [r4, #6]
    69e4:	7d20      	ldrb	r0, [r4, #20]
    69e6:	b190      	cbz	r0, 6a0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f2>
    69e8:	f7ff fe3c 	bl	6664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    69ec:	4912      	ldr	r1, [pc, #72]	; (6a38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    69ee:	7a6d      	ldrb	r5, [r5, #9]
    69f0:	760e      	strb	r6, [r1, #24]
    69f2:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    69f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    69fa:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    69fe:	f008 f962 	bl	ecc6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6a02:	4603      	mov	r3, r0
    6a04:	462a      	mov	r2, r5
    6a06:	490c      	ldr	r1, [pc, #48]	; (6a38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    6a08:	4630      	mov	r0, r6
    6a0a:	f005 f8db 	bl	bbc4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6a0e:	ea37 0708 	bics.w	r7, r7, r8
    6a12:	d004      	beq.n	6a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    6a14:	2100      	movs	r1, #0
    6a16:	4608      	mov	r0, r1
    6a18:	f7ff fe5a 	bl	66d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    6a1c:	b128      	cbz	r0, 6a2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40e>
    6a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a22:	f000 b80b 	b.w	6a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6a26:	2003      	movs	r0, #3
    6a28:	e7d9      	b.n	69de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    6a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a2e:	2000      	movs	r0, #0
    6a30:	f000 b8e8 	b.w	6c04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    6a34:	200000d4 	.word	0x200000d4
    6a38:	20000b30 	.word	0x20000b30
    6a3c:	b510      	push	{r4, lr}
    6a3e:	f005 fa35 	bl	beac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6a42:	f005 f953 	bl	bcec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6a46:	4c0e      	ldr	r4, [pc, #56]	; (6a80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>)
    6a48:	89e0      	ldrh	r0, [r4, #14]
    6a4a:	f7ff fe17 	bl	667c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6a4e:	69e2      	ldr	r2, [r4, #28]
    6a50:	7961      	ldrb	r1, [r4, #5]
    6a52:	78a0      	ldrb	r0, [r4, #2]
    6a54:	4790      	blx	r2
    6a56:	480b      	ldr	r0, [pc, #44]	; (6a84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6a58:	7f00      	ldrb	r0, [r0, #28]
    6a5a:	b168      	cbz	r0, 6a78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    6a5c:	4909      	ldr	r1, [pc, #36]	; (6a84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6a5e:	220e      	movs	r2, #14
    6a60:	f101 000e 	add.w	r0, r1, #14
    6a64:	f006 fed8 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a68:	4806      	ldr	r0, [pc, #24]	; (6a84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6a6a:	221d      	movs	r2, #29
    6a6c:	2100      	movs	r1, #0
    6a6e:	301d      	adds	r0, #29
    6a70:	f000 fd88 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6a74:	f000 fe58 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6a78:	2000      	movs	r0, #0
    6a7a:	7020      	strb	r0, [r4, #0]
    6a7c:	bd10      	pop	{r4, pc}
    6a7e:	0000      	.short	0x0000
    6a80:	200000d4 	.word	0x200000d4
    6a84:	20000b7a 	.word	0x20000b7a
    6a88:	4808      	ldr	r0, [pc, #32]	; (6aac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x490>)
    6a8a:	b510      	push	{r4, lr}
    6a8c:	7800      	ldrb	r0, [r0, #0]
    6a8e:	2802      	cmp	r0, #2
    6a90:	d004      	beq.n	6a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    6a92:	f240 212a 	movw	r1, #554	; 0x22a
    6a96:	2027      	movs	r0, #39	; 0x27
    6a98:	f7fe fd4c 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a9c:	4904      	ldr	r1, [pc, #16]	; (6ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>)
    6a9e:	2001      	movs	r0, #1
    6aa0:	7308      	strb	r0, [r1, #12]
    6aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6aa6:	f7ff bfc9 	b.w	6a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6aaa:	0000      	.short	0x0000
    6aac:	200000d4 	.word	0x200000d4
    6ab0:	20000b7a 	.word	0x20000b7a
    6ab4:	4b0c      	ldr	r3, [pc, #48]	; (6ae8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>)
    6ab6:	b430      	push	{r4, r5}
    6ab8:	79db      	ldrb	r3, [r3, #7]
    6aba:	b93a      	cbnz	r2, 6acc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    6abc:	2bff      	cmp	r3, #255	; 0xff
    6abe:	d105      	bne.n	6acc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    6ac0:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    6ac4:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
    6ac8:	42a2      	cmp	r2, r4
    6aca:	d00a      	beq.n	6ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c6>
    6acc:	b129      	cbz	r1, 6ada <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    6ace:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    6ad2:	bc30      	pop	{r4, r5}
    6ad4:	4618      	mov	r0, r3
    6ad6:	f005 bd13 	b.w	c500 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    6ada:	23ff      	movs	r3, #255	; 0xff
    6adc:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    6ae0:	e7f7      	b.n	6ad2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b6>
    6ae2:	bc30      	pop	{r4, r5}
    6ae4:	4770      	bx	lr
    6ae6:	0000      	.short	0x0000
    6ae8:	200000d4 	.word	0x200000d4
    6aec:	b570      	push	{r4, r5, r6, lr}
    6aee:	4606      	mov	r6, r0
    6af0:	f7ff fdbe 	bl	6670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6af4:	4a1b      	ldr	r2, [pc, #108]	; (6b64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>)
    6af6:	4604      	mov	r4, r0
    6af8:	2501      	movs	r5, #1
    6afa:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6afc:	7808      	ldrb	r0, [r1, #0]
    6afe:	f000 0003 	and.w	r0, r0, #3
    6b02:	2801      	cmp	r0, #1
    6b04:	d00c      	beq.n	6b20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    6b06:	2802      	cmp	r0, #2
    6b08:	d00a      	beq.n	6b20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    6b0a:	2803      	cmp	r0, #3
    6b0c:	d121      	bne.n	6b52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6b0e:	7025      	strb	r5, [r4, #0]
    6b10:	89d0      	ldrh	r0, [r2, #14]
    6b12:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    6b16:	81d0      	strh	r0, [r2, #14]
    6b18:	2001      	movs	r0, #1
    6b1a:	f7ff fd9b 	bl	6654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6b1e:	e018      	b.n	6b52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6b20:	7848      	ldrb	r0, [r1, #1]
    6b22:	b1b0      	cbz	r0, 6b52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6b24:	89d1      	ldrh	r1, [r2, #14]
    6b26:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    6b2a:	81d1      	strh	r1, [r2, #14]
    6b2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6b2e:	2900      	cmp	r1, #0
    6b30:	d009      	beq.n	6b46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    6b32:	28fb      	cmp	r0, #251	; 0xfb
    6b34:	d808      	bhi.n	6b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    6b36:	7990      	ldrb	r0, [r2, #6]
    6b38:	b120      	cbz	r0, 6b44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>
    6b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b3e:	2020      	movs	r0, #32
    6b40:	f7ff bd9c 	b.w	667c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6b44:	7035      	strb	r5, [r6, #0]
    6b46:	bd70      	pop	{r4, r5, r6, pc}
    6b48:	7950      	ldrb	r0, [r2, #5]
    6b4a:	f040 0010 	orr.w	r0, r0, #16
    6b4e:	7150      	strb	r0, [r2, #5]
    6b50:	bd70      	pop	{r4, r5, r6, pc}
    6b52:	7a20      	ldrb	r0, [r4, #8]
    6b54:	2801      	cmp	r0, #1
    6b56:	d001      	beq.n	6b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    6b58:	7225      	strb	r5, [r4, #8]
    6b5a:	bd70      	pop	{r4, r5, r6, pc}
    6b5c:	2000      	movs	r0, #0
    6b5e:	7220      	strb	r0, [r4, #8]
    6b60:	bd70      	pop	{r4, r5, r6, pc}
    6b62:	0000      	.short	0x0000
    6b64:	200000d4 	.word	0x200000d4
    6b68:	b570      	push	{r4, r5, r6, lr}
    6b6a:	4605      	mov	r5, r0
    6b6c:	f7ff fd80 	bl	6670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6b70:	4604      	mov	r4, r0
    6b72:	7980      	ldrb	r0, [r0, #6]
    6b74:	2800      	cmp	r0, #0
    6b76:	d02d      	beq.n	6bd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    6b78:	2802      	cmp	r0, #2
    6b7a:	d10c      	bne.n	6b96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    6b7c:	481b      	ldr	r0, [pc, #108]	; (6bec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    6b7e:	4629      	mov	r1, r5
    6b80:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6b82:	f007 fbce 	bl	e322 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    6b86:	b330      	cbz	r0, 6bd6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ba>
    6b88:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    6b8c:	1c40      	adds	r0, r0, #1
    6b8e:	f141 0100 	adc.w	r1, r1, #0
    6b92:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    6b96:	2500      	movs	r5, #0
    6b98:	71a5      	strb	r5, [r4, #6]
    6b9a:	78a0      	ldrb	r0, [r4, #2]
    6b9c:	b120      	cbz	r0, 6ba8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58c>
    6b9e:	70a5      	strb	r5, [r4, #2]
    6ba0:	2100      	movs	r1, #0
    6ba2:	2010      	movs	r0, #16
    6ba4:	f7ff fd56 	bl	6654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6ba8:	7860      	ldrb	r0, [r4, #1]
    6baa:	b170      	cbz	r0, 6bca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ae>
    6bac:	7065      	strb	r5, [r4, #1]
    6bae:	f7ff fb01 	bl	61b4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6bb2:	b198      	cbz	r0, 6bdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c0>
    6bb4:	2100      	movs	r1, #0
    6bb6:	2008      	movs	r0, #8
    6bb8:	f7ff fd4c 	bl	6654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6bbc:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    6bc0:	1c40      	adds	r0, r0, #1
    6bc2:	f141 0100 	adc.w	r1, r1, #0
    6bc6:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    6bca:	79e0      	ldrb	r0, [r4, #7]
    6bcc:	2801      	cmp	r0, #1
    6bce:	d00a      	beq.n	6be6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ca>
    6bd0:	2001      	movs	r0, #1
    6bd2:	71e0      	strb	r0, [r4, #7]
    6bd4:	bd70      	pop	{r4, r5, r6, pc}
    6bd6:	f240 31b9 	movw	r1, #953	; 0x3b9
    6bda:	e001      	b.n	6be0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c4>
    6bdc:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6be0:	2027      	movs	r0, #39	; 0x27
    6be2:	f7fe fca7 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6be6:	71e5      	strb	r5, [r4, #7]
    6be8:	bd70      	pop	{r4, r5, r6, pc}
    6bea:	0000      	.short	0x0000
    6bec:	200000d4 	.word	0x200000d4
    6bf0:	4803      	ldr	r0, [pc, #12]	; (6c00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    6bf2:	7800      	ldrb	r0, [r0, #0]
    6bf4:	2800      	cmp	r0, #0
    6bf6:	d001      	beq.n	6bfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>
    6bf8:	f7ff bf20 	b.w	6a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6bfc:	4770      	bx	lr
    6bfe:	0000      	.short	0x0000
    6c00:	200000d4 	.word	0x200000d4
    6c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c08:	4606      	mov	r6, r0
    6c0a:	f7ff fd2b 	bl	6664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6c0e:	4680      	mov	r8, r0
    6c10:	f7ff fd2e 	bl	6670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6c14:	4c16      	ldr	r4, [pc, #88]	; (6c70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>)
    6c16:	4605      	mov	r5, r0
    6c18:	4632      	mov	r2, r6
    6c1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6c1c:	6260      	str	r0, [r4, #36]	; 0x24
    6c1e:	2101      	movs	r1, #1
    6c20:	4640      	mov	r0, r8
    6c22:	f7ff ff47 	bl	6ab4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    6c26:	7d28      	ldrb	r0, [r5, #20]
    6c28:	2700      	movs	r7, #0
    6c2a:	b170      	cbz	r0, 6c4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62e>
    6c2c:	4811      	ldr	r0, [pc, #68]	; (6c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6c2e:	f005 fba9 	bl	c384 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6c32:	4811      	ldr	r0, [pc, #68]	; (6c78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65c>)
    6c34:	2101      	movs	r1, #1
    6c36:	7601      	strb	r1, [r0, #24]
    6c38:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    6c3c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6c40:	490c      	ldr	r1, [pc, #48]	; (6c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6c42:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6c44:	f005 f810 	bl	bc68 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6c48:	e004      	b.n	6c54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x638>
    6c4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6c4c:	f005 fb9a 	bl	c384 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6c50:	f005 f84c 	bl	bcec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6c54:	b916      	cbnz	r6, 6c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x640>
    6c56:	4638      	mov	r0, r7
    6c58:	f005 fa4a 	bl	c0f0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6c5c:	2100      	movs	r1, #0
    6c5e:	f898 206e 	ldrb.w	r2, [r8, #110]	; 0x6e
    6c62:	4608      	mov	r0, r1
    6c64:	f005 fc06 	bl	c474 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6c68:	2002      	movs	r0, #2
    6c6a:	7020      	strb	r0, [r4, #0]
    6c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c70:	200000d4 	.word	0x200000d4
    6c74:	20000a28 	.word	0x20000a28
    6c78:	20000b30 	.word	0x20000b30
    6c7c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6c80:	4604      	mov	r4, r0
    6c82:	f7ff fcf5 	bl	6670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6c86:	4605      	mov	r5, r0
    6c88:	f7ff fcec 	bl	6664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6c8c:	2700      	movs	r7, #0
    6c8e:	4606      	mov	r6, r0
    6c90:	f8df 9164 	ldr.w	r9, [pc, #356]	; 6df8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7dc>
    6c94:	f88d 7000 	strb.w	r7, [sp]
    6c98:	4622      	mov	r2, r4
    6c9a:	4639      	mov	r1, r7
    6c9c:	f7ff ff0a 	bl	6ab4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    6ca0:	79a8      	ldrb	r0, [r5, #6]
    6ca2:	f04f 0801 	mov.w	r8, #1
    6ca6:	f1a9 0420 	sub.w	r4, r9, #32
    6caa:	b140      	cbz	r0, 6cbe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    6cac:	2801      	cmp	r0, #1
    6cae:	d020      	beq.n	6cf2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    6cb0:	2802      	cmp	r0, #2
    6cb2:	d02f      	beq.n	6d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    6cb4:	2803      	cmp	r0, #3
    6cb6:	d03b      	beq.n	6d30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x714>
    6cb8:	f240 21d5 	movw	r1, #725	; 0x2d5
    6cbc:	e057      	b.n	6d6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    6cbe:	7a20      	ldrb	r0, [r4, #8]
    6cc0:	2154      	movs	r1, #84	; 0x54
    6cc2:	f8ad 0004 	strh.w	r0, [sp, #4]
    6cc6:	5388      	strh	r0, [r1, r6]
    6cc8:	4648      	mov	r0, r9
    6cca:	f7ff fa9d 	bl	6208 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6cce:	b130      	cbz	r0, 6cde <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c2>
    6cd0:	2080      	movs	r0, #128	; 0x80
    6cd2:	6a21      	ldr	r1, [r4, #32]
    6cd4:	f7ff fcbe 	bl	6654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6cd8:	f885 8001 	strb.w	r8, [r5, #1]
    6cdc:	e02c      	b.n	6d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6cde:	466a      	mov	r2, sp
    6ce0:	a901      	add	r1, sp, #4
    6ce2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6ce4:	f008 f807 	bl	ecf6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6ce8:	6220      	str	r0, [r4, #32]
    6cea:	b110      	cbz	r0, 6cf2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    6cec:	f895 104b 	ldrb.w	r1, [r5, #75]	; 0x4b
    6cf0:	b111      	cbz	r1, 6cf8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    6cf2:	4842      	ldr	r0, [pc, #264]	; (6dfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    6cf4:	6220      	str	r0, [r4, #32]
    6cf6:	e01f      	b.n	6d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6cf8:	f89d 1000 	ldrb.w	r1, [sp]
    6cfc:	b921      	cbnz	r1, 6d08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    6cfe:	8007      	strh	r7, [r0, #0]
    6d00:	7087      	strb	r7, [r0, #2]
    6d02:	2101      	movs	r1, #1
    6d04:	f008 fb59 	bl	f3ba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6d08:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6d0c:	6a20      	ldr	r0, [r4, #32]
    6d0e:	f008 fb08 	bl	f322 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    6d12:	e011      	b.n	6d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6d14:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
    6d18:	f8ad 0004 	strh.w	r0, [sp, #4]
    6d1c:	466a      	mov	r2, sp
    6d1e:	a901      	add	r1, sp, #4
    6d20:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6d22:	f007 ffe8 	bl	ecf6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6d26:	6220      	str	r0, [r4, #32]
    6d28:	b930      	cbnz	r0, 6d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6d2a:	f240 21c6 	movw	r1, #710	; 0x2c6
    6d2e:	e01e      	b.n	6d6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    6d30:	4648      	mov	r0, r9
    6d32:	f7ff fa69 	bl	6208 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6d36:	b1c0      	cbz	r0, 6d6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74e>
    6d38:	6a20      	ldr	r0, [r4, #32]
    6d3a:	2308      	movs	r3, #8
    6d3c:	7801      	ldrb	r1, [r0, #0]
    6d3e:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    6d42:	7001      	strb	r1, [r0, #0]
    6d44:	79ea      	ldrb	r2, [r5, #7]
    6d46:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    6d4a:	4311      	orrs	r1, r2
    6d4c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    6d50:	7001      	strb	r1, [r0, #0]
    6d52:	7a2a      	ldrb	r2, [r5, #8]
    6d54:	2304      	movs	r3, #4
    6d56:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    6d5a:	4311      	orrs	r1, r2
    6d5c:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    6d60:	7001      	strb	r1, [r0, #0]
    6d62:	43c9      	mvns	r1, r1
    6d64:	0789      	lsls	r1, r1, #30
    6d66:	d005      	beq.n	6d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    6d68:	e007      	b.n	6d7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75e>
    6d6a:	f240 21cf 	movw	r1, #719	; 0x2cf
    6d6e:	2027      	movs	r0, #39	; 0x27
    6d70:	f7fe fbe0 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d74:	78c0      	ldrb	r0, [r0, #3]
    6d76:	2802      	cmp	r0, #2
    6d78:	d00f      	beq.n	6d9a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    6d7a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6d7c:	f007 fbeb 	bl	e556 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6d80:	b108      	cbz	r0, 6d86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x76a>
    6d82:	2101      	movs	r1, #1
    6d84:	e00a      	b.n	6d9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    6d86:	6a20      	ldr	r0, [r4, #32]
    6d88:	7800      	ldrb	r0, [r0, #0]
    6d8a:	43c0      	mvns	r0, r0
    6d8c:	0780      	lsls	r0, r0, #30
    6d8e:	d004      	beq.n	6d9a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    6d90:	f7ff f9f8 	bl	6184 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6d94:	f080 0101 	eor.w	r1, r0, #1
    6d98:	e000      	b.n	6d9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    6d9a:	2100      	movs	r1, #0
    6d9c:	6a20      	ldr	r0, [r4, #32]
    6d9e:	7802      	ldrb	r2, [r0, #0]
    6da0:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    6da4:	7001      	strb	r1, [r0, #0]
    6da6:	7ce9      	ldrb	r1, [r5, #19]
    6da8:	b181      	cbz	r1, 6dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    6daa:	7841      	ldrb	r1, [r0, #1]
    6dac:	b171      	cbz	r1, 6dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    6dae:	4814      	ldr	r0, [pc, #80]	; (6e00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    6db0:	f005 fae8 	bl	c384 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6db4:	4811      	ldr	r0, [pc, #68]	; (6dfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    6db6:	3828      	subs	r0, #40	; 0x28
    6db8:	7607      	strb	r7, [r0, #24]
    6dba:	e9d5 121a 	ldrd	r1, r2, [r5, #104]	; 0x68
    6dbe:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6dc2:	480f      	ldr	r0, [pc, #60]	; (6e00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    6dc4:	6a21      	ldr	r1, [r4, #32]
    6dc6:	f004 ff4f 	bl	bc68 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6dca:	e003      	b.n	6dd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>
    6dcc:	f005 fada 	bl	c384 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6dd0:	f004 ff8c 	bl	bcec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6dd4:	f896 206f 	ldrb.w	r2, [r6, #111]	; 0x6f
    6dd8:	2101      	movs	r1, #1
    6dda:	2000      	movs	r0, #0
    6ddc:	f005 fb4a 	bl	c474 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6de0:	f884 8004 	strb.w	r8, [r4, #4]
    6de4:	6a21      	ldr	r1, [r4, #32]
    6de6:	880a      	ldrh	r2, [r1, #0]
    6de8:	8222      	strh	r2, [r4, #16]
    6dea:	7889      	ldrb	r1, [r1, #2]
    6dec:	74a1      	strb	r1, [r4, #18]
    6dee:	f884 8000 	strb.w	r8, [r4]
    6df2:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    6df6:	0000      	.short	0x0000
    6df8:	200000f4 	.word	0x200000f4
    6dfc:	20000b58 	.word	0x20000b58
    6e00:	20000a28 	.word	0x20000a28
    6e04:	00006a89 	.word	0x00006a89
    6e08:	000067e5 	.word	0x000067e5
    6e0c:	00006985 	.word	0x00006985
    6e10:	00006bf1 	.word	0x00006bf1

00006e14 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    6e14:	4800      	ldr	r0, [pc, #0]	; (6e18 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    6e16:	4770      	bx	lr
    6e18:	200014bd 	.word	0x200014bd

00006e1c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6e1c:	4904      	ldr	r1, [pc, #16]	; (6e30 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    6e1e:	788a      	ldrb	r2, [r1, #2]
    6e20:	4282      	cmp	r2, r0
    6e22:	d903      	bls.n	6e2c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6e24:	4408      	add	r0, r1
    6e26:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    6e2a:	4770      	bx	lr
    6e2c:	2000      	movs	r0, #0
    6e2e:	4770      	bx	lr
    6e30:	200012ea 	.word	0x200012ea

00006e34 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6e34:	4904      	ldr	r1, [pc, #16]	; (6e48 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6e36:	788a      	ldrb	r2, [r1, #2]
    6e38:	4282      	cmp	r2, r0
    6e3a:	d903      	bls.n	6e44 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6e3c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6e40:	3083      	adds	r0, #131	; 0x83
    6e42:	4770      	bx	lr
    6e44:	2000      	movs	r0, #0
    6e46:	4770      	bx	lr
    6e48:	200012ea 	.word	0x200012ea

00006e4c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6e4c:	4a05      	ldr	r2, [pc, #20]	; (6e64 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    6e4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6e52:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6e56:	6802      	ldr	r2, [r0, #0]
    6e58:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6e5c:	8880      	ldrh	r0, [r0, #4]
    6e5e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6e62:	4770      	bx	lr
    6e64:	200012ea 	.word	0x200012ea

00006e68 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6e68:	4904      	ldr	r1, [pc, #16]	; (6e7c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6e6a:	788a      	ldrb	r2, [r1, #2]
    6e6c:	4282      	cmp	r2, r0
    6e6e:	d903      	bls.n	6e78 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    6e70:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6e74:	1cc0      	adds	r0, r0, #3
    6e76:	4770      	bx	lr
    6e78:	2000      	movs	r0, #0
    6e7a:	4770      	bx	lr
    6e7c:	200012ea 	.word	0x200012ea

00006e80 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6e80:	b510      	push	{r4, lr}
    6e82:	f240 12d3 	movw	r2, #467	; 0x1d3
    6e86:	2100      	movs	r1, #0
    6e88:	4808      	ldr	r0, [pc, #32]	; (6eac <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    6e8a:	f006 fd3f 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6e8e:	2208      	movs	r2, #8
    6e90:	21ff      	movs	r1, #255	; 0xff
    6e92:	4807      	ldr	r0, [pc, #28]	; (6eb0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6e94:	f006 fd3a 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6e98:	4805      	ldr	r0, [pc, #20]	; (6eb0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6e9a:	2100      	movs	r1, #0
    6e9c:	1f00      	subs	r0, r0, #4
    6e9e:	7001      	strb	r1, [r0, #0]
    6ea0:	7041      	strb	r1, [r0, #1]
    6ea2:	f44f 7161 	mov.w	r1, #900	; 0x384
    6ea6:	8041      	strh	r1, [r0, #2]
    6ea8:	bd10      	pop	{r4, pc}
    6eaa:	0000      	.short	0x0000
    6eac:	200012ea 	.word	0x200012ea
    6eb0:	20000320 	.word	0x20000320

00006eb4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    6eb4:	4b0b      	ldr	r3, [pc, #44]	; (6ee4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    6eb6:	b510      	push	{r4, lr}
    6eb8:	789c      	ldrb	r4, [r3, #2]
    6eba:	4284      	cmp	r4, r0
    6ebc:	d90f      	bls.n	6ede <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    6ebe:	4418      	add	r0, r3
    6ec0:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6ec4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6ec8:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6ecc:	700b      	strb	r3, [r1, #0]
    6ece:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    6ed2:	6011      	str	r1, [r2, #0]
    6ed4:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6ed8:	8090      	strh	r0, [r2, #4]
    6eda:	2001      	movs	r0, #1
    6edc:	bd10      	pop	{r4, pc}
    6ede:	2000      	movs	r0, #0
    6ee0:	bd10      	pop	{r4, pc}
    6ee2:	0000      	.short	0x0000
    6ee4:	200012ea 	.word	0x200012ea

00006ee8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6ee8:	4907      	ldr	r1, [pc, #28]	; (6f08 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    6eea:	788a      	ldrb	r2, [r1, #2]
    6eec:	4282      	cmp	r2, r0
    6eee:	d909      	bls.n	6f04 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    6ef0:	4408      	add	r0, r1
    6ef2:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6ef6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6efa:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6efe:	f000 0001 	and.w	r0, r0, #1
    6f02:	4770      	bx	lr
    6f04:	2000      	movs	r0, #0
    6f06:	4770      	bx	lr
    6f08:	200012ea 	.word	0x200012ea

00006f0c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6f0c:	4801      	ldr	r0, [pc, #4]	; (6f14 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6f0e:	8840      	ldrh	r0, [r0, #2]
    6f10:	4770      	bx	lr
    6f12:	0000      	.short	0x0000
    6f14:	2000031c 	.word	0x2000031c

00006f18 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6f18:	4905      	ldr	r1, [pc, #20]	; (6f30 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    6f1a:	788a      	ldrb	r2, [r1, #2]
    6f1c:	4282      	cmp	r2, r0
    6f1e:	d903      	bls.n	6f28 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    6f20:	4408      	add	r0, r1
    6f22:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6f26:	b108      	cbz	r0, 6f2c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    6f28:	2000      	movs	r0, #0
    6f2a:	4770      	bx	lr
    6f2c:	2001      	movs	r0, #1
    6f2e:	4770      	bx	lr
    6f30:	200012ea 	.word	0x200012ea

00006f34 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6f34:	b570      	push	{r4, r5, r6, lr}
    6f36:	460d      	mov	r5, r1
    6f38:	4606      	mov	r6, r0
    6f3a:	f000 f8c1 	bl	70c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6f3e:	4c10      	ldr	r4, [pc, #64]	; (6f80 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    6f40:	2810      	cmp	r0, #16
    6f42:	d007      	beq.n	6f54 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6f44:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6f48:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6f4c:	07c9      	lsls	r1, r1, #31
    6f4e:	d001      	beq.n	6f54 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6f50:	2001      	movs	r0, #1
    6f52:	bd70      	pop	{r4, r5, r6, pc}
    6f54:	7861      	ldrb	r1, [r4, #1]
    6f56:	2908      	cmp	r1, #8
    6f58:	d210      	bcs.n	6f7c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6f5a:	2810      	cmp	r0, #16
    6f5c:	d008      	beq.n	6f70 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    6f5e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6f62:	2101      	movs	r1, #1
    6f64:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6f68:	7860      	ldrb	r0, [r4, #1]
    6f6a:	1c40      	adds	r0, r0, #1
    6f6c:	7060      	strb	r0, [r4, #1]
    6f6e:	e7ef      	b.n	6f50 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6f70:	2201      	movs	r2, #1
    6f72:	4629      	mov	r1, r5
    6f74:	4630      	mov	r0, r6
    6f76:	f000 f887 	bl	7088 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6f7a:	e7f5      	b.n	6f68 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6f7c:	2000      	movs	r0, #0
    6f7e:	bd70      	pop	{r4, r5, r6, pc}
    6f80:	200012ea 	.word	0x200012ea

00006f84 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6f84:	b570      	push	{r4, r5, r6, lr}
    6f86:	4d0b      	ldr	r5, [pc, #44]	; (6fb4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6f88:	7828      	ldrb	r0, [r5, #0]
    6f8a:	1e40      	subs	r0, r0, #1
    6f8c:	b244      	sxtb	r4, r0
    6f8e:	e00a      	b.n	6fa6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6f90:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6f94:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6f98:	07c0      	lsls	r0, r0, #31
    6f9a:	d002      	beq.n	6fa2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6f9c:	b2e0      	uxtb	r0, r4
    6f9e:	f000 f8ed 	bl	717c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    6fa2:	1e64      	subs	r4, r4, #1
    6fa4:	b264      	sxtb	r4, r4
    6fa6:	2c00      	cmp	r4, #0
    6fa8:	daf2      	bge.n	6f90 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    6faa:	4903      	ldr	r1, [pc, #12]	; (6fb8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6fac:	2000      	movs	r0, #0
    6fae:	7048      	strb	r0, [r1, #1]
    6fb0:	bd70      	pop	{r4, r5, r6, pc}
    6fb2:	0000      	.short	0x0000
    6fb4:	200012ea 	.word	0x200012ea
    6fb8:	2000031c 	.word	0x2000031c

00006fbc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fc0:	2400      	movs	r4, #0
    6fc2:	4625      	mov	r5, r4
    6fc4:	4e18      	ldr	r6, [pc, #96]	; (7028 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    6fc6:	e029      	b.n	701c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    6fc8:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6fcc:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6fd0:	07c0      	lsls	r0, r0, #31
    6fd2:	d021      	beq.n	7018 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6fd4:	4628      	mov	r0, r5
    6fd6:	f000 f843 	bl	7060 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6fda:	4603      	mov	r3, r0
    6fdc:	f7ff ff44 	bl	6e68 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6fe0:	4601      	mov	r1, r0
    6fe2:	2000      	movs	r0, #0
    6fe4:	2b10      	cmp	r3, #16
    6fe6:	d009      	beq.n	6ffc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6fe8:	18f2      	adds	r2, r6, r3
    6fea:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    6fee:	f1bc 0f01 	cmp.w	ip, #1
    6ff2:	d002      	beq.n	6ffa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6ff4:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6ff8:	b102      	cbz	r2, 6ffc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6ffa:	2001      	movs	r0, #1
    6ffc:	1e40      	subs	r0, r0, #1
    6ffe:	4201      	tst	r1, r0
    7000:	d10a      	bne.n	7018 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    7002:	480a      	ldr	r0, [pc, #40]	; (702c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    7004:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    7008:	5503      	strb	r3, [r0, r4]
    700a:	4620      	mov	r0, r4
    700c:	1c64      	adds	r4, r4, #1
    700e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    7012:	b2e4      	uxtb	r4, r4
    7014:	f005 fb56 	bl	c6c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    7018:	1c6d      	adds	r5, r5, #1
    701a:	b2ed      	uxtb	r5, r5
    701c:	7830      	ldrb	r0, [r6, #0]
    701e:	42a8      	cmp	r0, r5
    7020:	d8d2      	bhi.n	6fc8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    7022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7026:	0000      	.short	0x0000
    7028:	200012ea 	.word	0x200012ea
    702c:	20000320 	.word	0x20000320
    7030:	4602      	mov	r2, r0
    7032:	4809      	ldr	r0, [pc, #36]	; (7058 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    7034:	b510      	push	{r4, lr}
    7036:	7800      	ldrb	r0, [r0, #0]
    7038:	460b      	mov	r3, r1
    703a:	b158      	cbz	r0, 7054 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    703c:	4807      	ldr	r0, [pc, #28]	; (705c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    703e:	7881      	ldrb	r1, [r0, #2]
    7040:	b141      	cbz	r1, 7054 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    7042:	b10b      	cbz	r3, 7048 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    7044:	1cc0      	adds	r0, r0, #3
    7046:	e001      	b.n	704c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    7048:	4804      	ldr	r0, [pc, #16]	; (705c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    704a:	3083      	adds	r0, #131	; 0x83
    704c:	f004 fd14 	bl	ba78 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    7050:	2001      	movs	r0, #1
    7052:	bd10      	pop	{r4, pc}
    7054:	2000      	movs	r0, #0
    7056:	bd10      	pop	{r4, pc}
    7058:	2000031c 	.word	0x2000031c
    705c:	200012ea 	.word	0x200012ea
    7060:	4908      	ldr	r1, [pc, #32]	; (7084 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    7062:	b510      	push	{r4, lr}
    7064:	4603      	mov	r3, r0
    7066:	2000      	movs	r0, #0
    7068:	788a      	ldrb	r2, [r1, #2]
    706a:	e006      	b.n	707a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    706c:	180c      	adds	r4, r1, r0
    706e:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    7072:	429c      	cmp	r4, r3
    7074:	d004      	beq.n	7080 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    7076:	1c40      	adds	r0, r0, #1
    7078:	b2c0      	uxtb	r0, r0
    707a:	4282      	cmp	r2, r0
    707c:	d8f6      	bhi.n	706c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    707e:	2010      	movs	r0, #16
    7080:	bd10      	pop	{r4, pc}
    7082:	0000      	.short	0x0000
    7084:	200012ea 	.word	0x200012ea
    7088:	b570      	push	{r4, r5, r6, lr}
    708a:	4b0c      	ldr	r3, [pc, #48]	; (70bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    708c:	4604      	mov	r4, r0
    708e:	7818      	ldrb	r0, [r3, #0]
    7090:	1c45      	adds	r5, r0, #1
    7092:	701d      	strb	r5, [r3, #0]
    7094:	2810      	cmp	r0, #16
    7096:	d303      	bcc.n	70a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    7098:	2146      	movs	r1, #70	; 0x46
    709a:	2028      	movs	r0, #40	; 0x28
    709c:	f7fe fa4a 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70a0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    70a4:	680d      	ldr	r5, [r1, #0]
    70a6:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    70aa:	8889      	ldrh	r1, [r1, #4]
    70ac:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    70b0:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    70b4:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    70b8:	bd70      	pop	{r4, r5, r6, pc}
    70ba:	0000      	.short	0x0000
    70bc:	200012ea 	.word	0x200012ea
    70c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    70c2:	4c1a      	ldr	r4, [pc, #104]	; (712c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    70c4:	4603      	mov	r3, r0
    70c6:	2000      	movs	r0, #0
    70c8:	7825      	ldrb	r5, [r4, #0]
    70ca:	e02a      	b.n	7122 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    70cc:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    70d0:	780f      	ldrb	r7, [r1, #0]
    70d2:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    70d6:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    70da:	ea87 070c 	eor.w	r7, r7, ip
    70de:	405e      	eors	r6, r3
    70e0:	443e      	add	r6, r7
    70e2:	784f      	ldrb	r7, [r1, #1]
    70e4:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    70e8:	ea87 070c 	eor.w	r7, r7, ip
    70ec:	443e      	add	r6, r7
    70ee:	788f      	ldrb	r7, [r1, #2]
    70f0:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    70f4:	ea87 070c 	eor.w	r7, r7, ip
    70f8:	443e      	add	r6, r7
    70fa:	78cf      	ldrb	r7, [r1, #3]
    70fc:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    7100:	ea87 070c 	eor.w	r7, r7, ip
    7104:	443e      	add	r6, r7
    7106:	790f      	ldrb	r7, [r1, #4]
    7108:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    710c:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    7110:	ea87 070c 	eor.w	r7, r7, ip
    7114:	443e      	add	r6, r7
    7116:	794f      	ldrb	r7, [r1, #5]
    7118:	4057      	eors	r7, r2
    711a:	42f7      	cmn	r7, r6
    711c:	d004      	beq.n	7128 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    711e:	1c40      	adds	r0, r0, #1
    7120:	b2c0      	uxtb	r0, r0
    7122:	4285      	cmp	r5, r0
    7124:	d8d2      	bhi.n	70cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    7126:	2010      	movs	r0, #16
    7128:	bdf0      	pop	{r4, r5, r6, r7, pc}
    712a:	0000      	.short	0x0000
    712c:	200012ea 	.word	0x200012ea
    7130:	b570      	push	{r4, r5, r6, lr}
    7132:	4605      	mov	r5, r0
    7134:	f7ff ff94 	bl	7060 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    7138:	2810      	cmp	r0, #16
    713a:	d11c      	bne.n	7176 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    713c:	4c0e      	ldr	r4, [pc, #56]	; (7178 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    713e:	7820      	ldrb	r0, [r4, #0]
    7140:	1e40      	subs	r0, r0, #1
    7142:	b2c0      	uxtb	r0, r0
    7144:	7020      	strb	r0, [r4, #0]
    7146:	42a8      	cmp	r0, r5
    7148:	d015      	beq.n	7176 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    714a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    714e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    7152:	f502 7080 	add.w	r0, r2, #256	; 0x100
    7156:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    715a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    715e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    7162:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    7166:	7820      	ldrb	r0, [r4, #0]
    7168:	f7ff ff7a 	bl	7060 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    716c:	2810      	cmp	r0, #16
    716e:	d002      	beq.n	7176 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    7170:	4420      	add	r0, r4
    7172:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    7176:	bd70      	pop	{r4, r5, r6, pc}
    7178:	200012ea 	.word	0x200012ea
    717c:	4905      	ldr	r1, [pc, #20]	; (7194 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    717e:	784a      	ldrb	r2, [r1, #1]
    7180:	1e52      	subs	r2, r2, #1
    7182:	704a      	strb	r2, [r1, #1]
    7184:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7188:	2200      	movs	r2, #0
    718a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    718e:	f7ff bfcf 	b.w	7130 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    7192:	0000      	.short	0x0000
    7194:	200012ea 	.word	0x200012ea

00007198 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    7198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    719c:	4604      	mov	r4, r0
    719e:	f04f 0801 	mov.w	r8, #1
    71a2:	b181      	cbz	r1, 71c6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    71a4:	f104 068f 	add.w	r6, r4, #143	; 0x8f
    71a8:	1e75      	subs	r5, r6, #1
    71aa:	f104 0078 	add.w	r0, r4, #120	; 0x78
    71ae:	2901      	cmp	r1, #1
    71b0:	d022      	beq.n	71f8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x60>
    71b2:	2902      	cmp	r1, #2
    71b4:	d045      	beq.n	7242 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    71b6:	2903      	cmp	r1, #3
    71b8:	d11c      	bne.n	71f4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    71ba:	4631      	mov	r1, r6
    71bc:	4628      	mov	r0, r5
    71be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    71c2:	f007 bfba 	b.w	f13a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    71c6:	f44f 7228 	mov.w	r2, #672	; 0x2a0
    71ca:	2100      	movs	r1, #0
    71cc:	f006 fb9e 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    71d0:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
    71d4:	3484      	adds	r4, #132	; 0x84
    71d6:	f004 fc1f 	bl	ba18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    71da:	f644 122b 	movw	r2, #18731	; 0x492b
    71de:	4010      	ands	r0, r2
    71e0:	6520      	str	r0, [r4, #80]	; 0x50
    71e2:	f001 0106 	and.w	r1, r1, #6
    71e6:	6561      	str	r1, [r4, #84]	; 0x54
    71e8:	20fe      	movs	r0, #254	; 0xfe
    71ea:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    71ee:	207f      	movs	r0, #127	; 0x7f
    71f0:	f804 0c03 	strb.w	r0, [r4, #-3]
    71f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71f8:	2700      	movs	r7, #0
    71fa:	f8a4 71de 	strh.w	r7, [r4, #478]	; 0x1de
    71fe:	f884 71d3 	strb.w	r7, [r4, #467]	; 0x1d3
    7202:	4a14      	ldr	r2, [pc, #80]	; (7254 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>)
    7204:	6921      	ldr	r1, [r4, #16]
    7206:	440a      	add	r2, r1
    7208:	fbb2 f2f1 	udiv	r2, r2, r1
    720c:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    7210:	f640 32b8 	movw	r2, #3000	; 0xbb8
    7214:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    7218:	8b63      	ldrh	r3, [r4, #26]
    721a:	460a      	mov	r2, r1
    721c:	f000 f81c 	bl	7258 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    7220:	4631      	mov	r1, r6
    7222:	4628      	mov	r0, r5
    7224:	f007 ff89 	bl	f13a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    7228:	f006 fad2 	bl	d7d0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    722c:	b118      	cbz	r0, 7236 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    722e:	6960      	ldr	r0, [r4, #20]
    7230:	f000 fbae 	bl	7990 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    7234:	b110      	cbz	r0, 723c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    7236:	f884 71c6 	strb.w	r7, [r4, #454]	; 0x1c6
    723a:	e7db      	b.n	71f4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    723c:	f884 81c6 	strb.w	r8, [r4, #454]	; 0x1c6
    7240:	e7d8      	b.n	71f4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    7242:	f8b4 3282 	ldrh.w	r3, [r4, #642]	; 0x282
    7246:	f8d4 227c 	ldr.w	r2, [r4, #636]	; 0x27c
    724a:	6921      	ldr	r1, [r4, #16]
    724c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7250:	f000 b802 	b.w	7258 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    7254:	01c9c37f 	.word	0x01c9c37f
    7258:	b530      	push	{r4, r5, lr}
    725a:	2400      	movs	r4, #0
    725c:	8784      	strh	r4, [r0, #60]	; 0x3c
    725e:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
    7262:	4d15      	ldr	r5, [pc, #84]	; (72b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    7264:	434c      	muls	r4, r1
    7266:	fbb4 f4f2 	udiv	r4, r4, r2
    726a:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
    726e:	f242 7410 	movw	r4, #10000	; 0x2710
    7272:	4363      	muls	r3, r4
    7274:	fbb3 f3f2 	udiv	r3, r3, r2
    7278:	1c5b      	adds	r3, r3, #1
    727a:	b29b      	uxth	r3, r3
    727c:	fb03 f402 	mul.w	r4, r3, r2
    7280:	87c3      	strh	r3, [r0, #62]	; 0x3e
    7282:	42ac      	cmp	r4, r5
    7284:	d901      	bls.n	728a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    7286:	1e5b      	subs	r3, r3, #1
    7288:	87c3      	strh	r3, [r0, #62]	; 0x3e
    728a:	4b0c      	ldr	r3, [pc, #48]	; (72bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    728c:	f240 2471 	movw	r4, #625	; 0x271
    7290:	fbb3 f3f2 	udiv	r3, r3, r2
    7294:	1c5b      	adds	r3, r3, #1
    7296:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    729a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    729c:	4363      	muls	r3, r4
    729e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    72a2:	1e5b      	subs	r3, r3, #1
    72a4:	fbb3 f3f2 	udiv	r3, r3, r2
    72a8:	6343      	str	r3, [r0, #52]	; 0x34
    72aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    72ac:	434b      	muls	r3, r1
    72ae:	fbb3 f1f2 	udiv	r1, r3, r2
    72b2:	6301      	str	r1, [r0, #48]	; 0x30
    72b4:	bd30      	pop	{r4, r5, pc}
    72b6:	0000      	.short	0x0000
    72b8:	01e84800 	.word	0x01e84800
    72bc:	02625a00 	.word	0x02625a00

000072c0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    72c0:	b570      	push	{r4, r5, r6, lr}
    72c2:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    72c6:	b28b      	uxth	r3, r1
    72c8:	7ac5      	ldrb	r5, [r0, #11]
    72ca:	ea83 0102 	eor.w	r1, r3, r2
    72ce:	2200      	movs	r2, #0
    72d0:	b2cc      	uxtb	r4, r1
    72d2:	0a09      	lsrs	r1, r1, #8
    72d4:	fa94 f4a4 	rbit	r4, r4
    72d8:	fa91 f1a1 	rbit	r1, r1
    72dc:	0e24      	lsrs	r4, r4, #24
    72de:	0e09      	lsrs	r1, r1, #24
    72e0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    72e4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    72e8:	1c52      	adds	r2, r2, #1
    72ea:	4419      	add	r1, r3
    72ec:	b2d2      	uxtb	r2, r2
    72ee:	b289      	uxth	r1, r1
    72f0:	2a03      	cmp	r2, #3
    72f2:	d3ed      	bcc.n	72d0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    72f4:	4059      	eors	r1, r3
    72f6:	2225      	movs	r2, #37	; 0x25
    72f8:	fbb1 f3f2 	udiv	r3, r1, r2
    72fc:	fb02 1213 	mls	r2, r2, r3, r1
    7300:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    7304:	f002 0607 	and.w	r6, r2, #7
    7308:	785b      	ldrb	r3, [r3, #1]
    730a:	2401      	movs	r4, #1
    730c:	fa04 f606 	lsl.w	r6, r4, r6
    7310:	4233      	tst	r3, r6
    7312:	d001      	beq.n	7318 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    7314:	4610      	mov	r0, r2
    7316:	bd70      	pop	{r4, r5, r6, pc}
    7318:	434d      	muls	r5, r1
    731a:	0c29      	lsrs	r1, r5, #16
    731c:	1c49      	adds	r1, r1, #1
    731e:	b2c9      	uxtb	r1, r1
    7320:	2200      	movs	r2, #0
    7322:	1885      	adds	r5, r0, r2
    7324:	79ab      	ldrb	r3, [r5, #6]
    7326:	428b      	cmp	r3, r1
    7328:	d312      	bcc.n	7350 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    732a:	f895 5001 	ldrb.w	r5, [r5, #1]
    732e:	2300      	movs	r3, #0
    7330:	fa04 f603 	lsl.w	r6, r4, r3
    7334:	4235      	tst	r5, r6
    7336:	d001      	beq.n	733c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    7338:	1e49      	subs	r1, r1, #1
    733a:	b2c9      	uxtb	r1, r1
    733c:	b121      	cbz	r1, 7348 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    733e:	1c5b      	adds	r3, r3, #1
    7340:	b2db      	uxtb	r3, r3
    7342:	2b08      	cmp	r3, #8
    7344:	d3f4      	bcc.n	7330 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    7346:	e005      	b.n	7354 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    7348:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    734c:	b2c0      	uxtb	r0, r0
    734e:	bd70      	pop	{r4, r5, r6, pc}
    7350:	1ac9      	subs	r1, r1, r3
    7352:	b2c9      	uxtb	r1, r1
    7354:	1c52      	adds	r2, r2, #1
    7356:	b2d2      	uxtb	r2, r2
    7358:	2a05      	cmp	r2, #5
    735a:	d3e2      	bcc.n	7322 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    735c:	f240 110d 	movw	r1, #269	; 0x10d
    7360:	2046      	movs	r0, #70	; 0x46
    7362:	f7fe f8e7 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7366:	0000      	movs	r0, r0
    7368:	b570      	push	{r4, r5, r6, lr}
    736a:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
    736e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    7372:	2401      	movs	r4, #1
    7374:	fb03 2101 	mla	r1, r3, r1, r2
    7378:	2225      	movs	r2, #37	; 0x25
    737a:	fbb1 f3f2 	udiv	r3, r1, r2
    737e:	fb02 1113 	mls	r1, r2, r3, r1
    7382:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    7386:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    738a:	f001 0307 	and.w	r3, r1, #7
    738e:	7dd2      	ldrb	r2, [r2, #23]
    7390:	fa04 f303 	lsl.w	r3, r4, r3
    7394:	421a      	tst	r2, r3
    7396:	d003      	beq.n	73a0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    7398:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    739c:	2000      	movs	r0, #0
    739e:	bd70      	pop	{r4, r5, r6, pc}
    73a0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    73a4:	fbb1 f3f2 	udiv	r3, r1, r2
    73a8:	fb02 1113 	mls	r1, r2, r3, r1
    73ac:	1c49      	adds	r1, r1, #1
    73ae:	b2c9      	uxtb	r1, r1
    73b0:	2300      	movs	r3, #0
    73b2:	18c5      	adds	r5, r0, r3
    73b4:	7f2a      	ldrb	r2, [r5, #28]
    73b6:	428a      	cmp	r2, r1
    73b8:	d311      	bcc.n	73de <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    73ba:	f895 5017 	ldrb.w	r5, [r5, #23]
    73be:	2200      	movs	r2, #0
    73c0:	fa04 f602 	lsl.w	r6, r4, r2
    73c4:	4235      	tst	r5, r6
    73c6:	d001      	beq.n	73cc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    73c8:	1e49      	subs	r1, r1, #1
    73ca:	b2c9      	uxtb	r1, r1
    73cc:	b121      	cbz	r1, 73d8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    73ce:	1c52      	adds	r2, r2, #1
    73d0:	b2d2      	uxtb	r2, r2
    73d2:	2a08      	cmp	r2, #8
    73d4:	d3f4      	bcc.n	73c0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    73d6:	e004      	b.n	73e2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    73d8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    73dc:	e7dc      	b.n	7398 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    73de:	1a89      	subs	r1, r1, r2
    73e0:	b2c9      	uxtb	r1, r1
    73e2:	1c5b      	adds	r3, r3, #1
    73e4:	b2db      	uxtb	r3, r3
    73e6:	2b05      	cmp	r3, #5
    73e8:	d3e3      	bcc.n	73b2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    73ea:	201f      	movs	r0, #31
    73ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000073f0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    73f0:	7841      	ldrb	r1, [r0, #1]
    73f2:	b141      	cbz	r1, 7406 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    73f4:	78c0      	ldrb	r0, [r0, #3]
    73f6:	2826      	cmp	r0, #38	; 0x26
    73f8:	d203      	bcs.n	7402 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    73fa:	4a04      	ldr	r2, [pc, #16]	; (740c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    73fc:	5c10      	ldrb	r0, [r2, r0]
    73fe:	4288      	cmp	r0, r1
    7400:	d101      	bne.n	7406 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    7402:	2001      	movs	r0, #1
    7404:	4770      	bx	lr
    7406:	2000      	movs	r0, #0
    7408:	4770      	bx	lr
    740a:	0000      	.short	0x0000
    740c:	0001168a 	.word	0x0001168a

00007410 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    7410:	b510      	push	{r4, lr}
    7412:	2201      	movs	r2, #1
    7414:	70c1      	strb	r1, [r0, #3]
    7416:	2926      	cmp	r1, #38	; 0x26
    7418:	d202      	bcs.n	7420 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    741a:	4a06      	ldr	r2, [pc, #24]	; (7434 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    741c:	5c52      	ldrb	r2, [r2, r1]
    741e:	e006      	b.n	742e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    7420:	29ff      	cmp	r1, #255	; 0xff
    7422:	d004      	beq.n	742e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    7424:	f240 411d 	movw	r1, #1053	; 0x41d
    7428:	202a      	movs	r0, #42	; 0x2a
    742a:	f7fe f883 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    742e:	7042      	strb	r2, [r0, #1]
    7430:	bd10      	pop	{r4, pc}
    7432:	0000      	.short	0x0000
    7434:	0001168a 	.word	0x0001168a

00007438 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    7438:	4904      	ldr	r1, [pc, #16]	; (744c <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    743a:	7c89      	ldrb	r1, [r1, #18]
    743c:	0749      	lsls	r1, r1, #29
    743e:	d400      	bmi.n	7442 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    7440:	b108      	cbz	r0, 7446 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    7442:	2000      	movs	r0, #0
    7444:	4770      	bx	lr
    7446:	2001      	movs	r0, #1
    7448:	4770      	bx	lr
    744a:	0000      	.short	0x0000
    744c:	20001044 	.word	0x20001044

00007450 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    7450:	4803      	ldr	r0, [pc, #12]	; (7460 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    7452:	7c80      	ldrb	r0, [r0, #18]
    7454:	0780      	lsls	r0, r0, #30
    7456:	d401      	bmi.n	745c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    7458:	2001      	movs	r0, #1
    745a:	4770      	bx	lr
    745c:	2000      	movs	r0, #0
    745e:	4770      	bx	lr
    7460:	20001044 	.word	0x20001044

00007464 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    7464:	4803      	ldr	r0, [pc, #12]	; (7474 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    7466:	7c80      	ldrb	r0, [r0, #18]
    7468:	07c0      	lsls	r0, r0, #31
    746a:	d001      	beq.n	7470 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    746c:	2000      	movs	r0, #0
    746e:	4770      	bx	lr
    7470:	2001      	movs	r0, #1
    7472:	4770      	bx	lr
    7474:	20001044 	.word	0x20001044

00007478 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    7478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    747c:	4c12      	ldr	r4, [pc, #72]	; (74c8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    747e:	4607      	mov	r7, r0
    7480:	460e      	mov	r6, r1
    7482:	7da0      	ldrb	r0, [r4, #22]
    7484:	b110      	cbz	r0, 748c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    7486:	8b20      	ldrh	r0, [r4, #24]
    7488:	2800      	cmp	r0, #0
    748a:	d012      	beq.n	74b2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    748c:	480e      	ldr	r0, [pc, #56]	; (74c8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    748e:	3014      	adds	r0, #20
    7490:	4680      	mov	r8, r0
    7492:	f008 f811 	bl	f4b8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7496:	b9a8      	cbnz	r0, 74c4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    7498:	8aa5      	ldrh	r5, [r4, #20]
    749a:	8aa0      	ldrh	r0, [r4, #20]
    749c:	4632      	mov	r2, r6
    749e:	4639      	mov	r1, r7
    74a0:	f008 f84e 	bl	f540 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    74a4:	b138      	cbz	r0, 74b6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    74a6:	7da0      	ldrb	r0, [r4, #22]
    74a8:	b110      	cbz	r0, 74b0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    74aa:	8b20      	ldrh	r0, [r4, #24]
    74ac:	1e40      	subs	r0, r0, #1
    74ae:	8320      	strh	r0, [r4, #24]
    74b0:	2001      	movs	r0, #1
    74b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74b6:	4640      	mov	r0, r8
    74b8:	f007 fffe 	bl	f4b8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    74bc:	b910      	cbnz	r0, 74c4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    74be:	8aa0      	ldrh	r0, [r4, #20]
    74c0:	42a8      	cmp	r0, r5
    74c2:	d1ea      	bne.n	749a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    74c4:	2000      	movs	r0, #0
    74c6:	e7f4      	b.n	74b2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    74c8:	20001044 	.word	0x20001044
    74cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    74d0:	468a      	mov	sl, r1
    74d2:	4699      	mov	r9, r3
    74d4:	4615      	mov	r5, r2
    74d6:	4604      	mov	r4, r0
    74d8:	a901      	add	r1, sp, #4
    74da:	f007 fc4f 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    74de:	bbe0      	cbnz	r0, 755a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    74e0:	9f02      	ldr	r7, [sp, #8]
    74e2:	f04f 0800 	mov.w	r8, #0
    74e6:	3778      	adds	r7, #120	; 0x78
    74e8:	b18d      	cbz	r5, 750e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    74ea:	4620      	mov	r0, r4
    74ec:	f7fe fc60 	bl	5db0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    74f0:	0004      	movs	r4, r0
    74f2:	d00f      	beq.n	7514 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    74f4:	4629      	mov	r1, r5
    74f6:	f007 f800 	bl	e4fa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    74fa:	0006      	movs	r6, r0
    74fc:	d003      	beq.n	7506 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    74fe:	481d      	ldr	r0, [pc, #116]	; (7574 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    7500:	8840      	ldrh	r0, [r0, #2]
    7502:	42a8      	cmp	r0, r5
    7504:	d208      	bcs.n	7518 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    7506:	2000      	movs	r0, #0
    7508:	b004      	add	sp, #16
    750a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    750e:	2001      	movs	r0, #1
    7510:	7578      	strb	r0, [r7, #21]
    7512:	e029      	b.n	7568 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    7514:	216e      	movs	r1, #110	; 0x6e
    7516:	e02a      	b.n	756e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    7518:	4620      	mov	r0, r4
    751a:	4631      	mov	r1, r6
    751c:	aa03      	add	r2, sp, #12
    751e:	f006 ffe5 	bl	e4ec <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    7522:	9803      	ldr	r0, [sp, #12]
    7524:	f8a0 8000 	strh.w	r8, [r0]
    7528:	f880 8002 	strb.w	r8, [r0, #2]
    752c:	7d79      	ldrb	r1, [r7, #21]
    752e:	b109      	cbz	r1, 7534 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    7530:	f04f 0a02 	mov.w	sl, #2
    7534:	4651      	mov	r1, sl
    7536:	f007 ff40 	bl	f3ba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    753a:	4631      	mov	r1, r6
    753c:	2603      	movs	r6, #3
    753e:	4620      	mov	r0, r4
    7540:	464a      	mov	r2, r9
    7542:	462b      	mov	r3, r5
    7544:	9600      	str	r6, [sp, #0]
    7546:	f006 fec5 	bl	e2d4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    754a:	4620      	mov	r0, r4
    754c:	4629      	mov	r1, r5
    754e:	f006 ff86 	bl	e45e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    7552:	b158      	cbz	r0, 756c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    7554:	4644      	mov	r4, r8
    7556:	a801      	add	r0, sp, #4
    7558:	e000      	b.n	755c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    755a:	e005      	b.n	7568 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    755c:	f007 ffcd 	bl	f4fa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    7560:	9802      	ldr	r0, [sp, #8]
    7562:	f8a0 41ca 	strh.w	r4, [r0, #458]	; 0x1ca
    7566:	757c      	strb	r4, [r7, #21]
    7568:	2001      	movs	r0, #1
    756a:	e7cd      	b.n	7508 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    756c:	2184      	movs	r1, #132	; 0x84
    756e:	202b      	movs	r0, #43	; 0x2b
    7570:	f7fd ffe0 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7574:	20001044 	.word	0x20001044

00007578 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    7578:	4901      	ldr	r1, [pc, #4]	; (7580 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    757a:	2001      	movs	r0, #1
    757c:	7008      	strb	r0, [r1, #0]
    757e:	4770      	bx	lr
    7580:	200014cd 	.word	0x200014cd

00007584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    7584:	b538      	push	{r3, r4, r5, lr}
    7586:	b198      	cbz	r0, 75b0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x2c>
    7588:	7a03      	ldrb	r3, [r0, #8]
    758a:	f88d 3000 	strb.w	r3, [sp]
    758e:	9b00      	ldr	r3, [sp, #0]
    7590:	9300      	str	r3, [sp, #0]
    7592:	f89d 3000 	ldrb.w	r3, [sp]
    7596:	2b00      	cmp	r3, #0
    7598:	d114      	bne.n	75c4 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    759a:	6003      	str	r3, [r0, #0]
    759c:	6041      	str	r1, [r0, #4]
    759e:	f3ef 8310 	mrs	r3, PRIMASK
    75a2:	b672      	cpsid	i
    75a4:	4908      	ldr	r1, [pc, #32]	; (75c8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x44>)
    75a6:	680c      	ldr	r4, [r1, #0]
    75a8:	b13c      	cbz	r4, 75ba <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x36>
    75aa:	684c      	ldr	r4, [r1, #4]
    75ac:	6020      	str	r0, [r4, #0]
    75ae:	e005      	b.n	75bc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x38>
    75b0:	f240 4141 	movw	r1, #1089	; 0x441
    75b4:	2010      	movs	r0, #16
    75b6:	f7fd ffbd 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75ba:	6008      	str	r0, [r1, #0]
    75bc:	6048      	str	r0, [r1, #4]
    75be:	b903      	cbnz	r3, 75c2 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x3e>
    75c0:	b662      	cpsie	i
    75c2:	7202      	strb	r2, [r0, #8]
    75c4:	bd38      	pop	{r3, r4, r5, pc}
    75c6:	0000      	.short	0x0000
    75c8:	20000118 	.word	0x20000118

000075cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    75cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    75d0:	0004      	movs	r4, r0
    75d2:	d00a      	beq.n	75ea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    75d4:	484d      	ldr	r0, [pc, #308]	; (770c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x140>)
    75d6:	2600      	movs	r6, #0
    75d8:	7801      	ldrb	r1, [r0, #0]
    75da:	b149      	cbz	r1, 75f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    75dc:	7066      	strb	r6, [r4, #1]
    75de:	2103      	movs	r1, #3
    75e0:	7021      	strb	r1, [r4, #0]
    75e2:	2101      	movs	r1, #1
    75e4:	7121      	strb	r1, [r4, #4]
    75e6:	7006      	strb	r6, [r0, #0]
    75e8:	e08d      	b.n	7706 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    75ea:	f240 315d 	movw	r1, #861	; 0x35d
    75ee:	e050      	b.n	7692 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    75f0:	f8df 811c 	ldr.w	r8, [pc, #284]	; 7710 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>
    75f4:	f88d 6000 	strb.w	r6, [sp]
    75f8:	4668      	mov	r0, sp
    75fa:	f000 f8b9 	bl	7770 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    75fe:	f89d 1000 	ldrb.w	r1, [sp]
    7602:	2900      	cmp	r1, #0
    7604:	d1f8      	bne.n	75f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c>
    7606:	2800      	cmp	r0, #0
    7608:	d07e      	beq.n	7708 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    760a:	4605      	mov	r5, r0
    760c:	7a00      	ldrb	r0, [r0, #8]
    760e:	f88d 0000 	strb.w	r0, [sp]
    7612:	9800      	ldr	r0, [sp, #0]
    7614:	9000      	str	r0, [sp, #0]
    7616:	f89d 7000 	ldrb.w	r7, [sp]
    761a:	2f1f      	cmp	r7, #31
    761c:	d26e      	bcs.n	76fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    761e:	e8df f007 	tbb	[pc, r7]
    7622:	3d6d      	.short	0x3d6d
    7624:	3d6d106d 	.word	0x3d6d106d
    7628:	3d3d4d3d 	.word	0x3d3d4d3d
    762c:	6d3d3d3d 	.word	0x6d3d3d3d
    7630:	3d3d6d10 	.word	0x3d3d6d10
    7634:	6d6d6d10 	.word	0x6d6d6d10
    7638:	103d3d6d 	.word	0x103d3d6d
    763c:	626d3d3d 	.word	0x626d3d3d
    7640:	0010      	.short	0x0010
    7642:	4834      	ldr	r0, [pc, #208]	; (7714 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>)
    7644:	6803      	ldr	r3, [r0, #0]
    7646:	2b00      	cmp	r3, #0
    7648:	d05c      	beq.n	7704 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    764a:	6868      	ldr	r0, [r5, #4]
    764c:	463a      	mov	r2, r7
    764e:	4621      	mov	r1, r4
    7650:	4798      	blx	r3
    7652:	7820      	ldrb	r0, [r4, #0]
    7654:	6869      	ldr	r1, [r5, #4]
    7656:	2811      	cmp	r0, #17
    7658:	d002      	beq.n	7660 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    765a:	2814      	cmp	r0, #20
    765c:	d003      	beq.n	7666 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    765e:	e01b      	b.n	7698 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7660:	7920      	ldrb	r0, [r4, #4]
    7662:	b930      	cbnz	r0, 7672 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    7664:	e018      	b.n	7698 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7666:	7920      	ldrb	r0, [r4, #4]
    7668:	b1b0      	cbz	r0, 7698 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    766a:	4608      	mov	r0, r1
    766c:	f008 fa7c 	bl	fb68 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7670:	b990      	cbnz	r0, 7698 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7672:	88e4      	ldrh	r4, [r4, #6]
    7674:	2100      	movs	r1, #0
    7676:	4620      	mov	r0, r4
    7678:	f007 f8f2 	bl	e860 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    767c:	b160      	cbz	r0, 7698 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    767e:	8800      	ldrh	r0, [r0, #0]
    7680:	f007 faac 	bl	ebdc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7684:	2100      	movs	r1, #0
    7686:	4620      	mov	r0, r4
    7688:	f7fe f9e8 	bl	5a5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    768c:	b120      	cbz	r0, 7698 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    768e:	f44f 71af 	mov.w	r1, #350	; 0x15e
    7692:	2010      	movs	r0, #16
    7694:	f7fd ff4e 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7698:	722e      	strb	r6, [r5, #8]
    769a:	e034      	b.n	7706 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    769c:	f8d8 0000 	ldr.w	r0, [r8]
    76a0:	b358      	cbz	r0, 76fa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    76a2:	463a      	mov	r2, r7
    76a4:	4629      	mov	r1, r5
    76a6:	4620      	mov	r0, r4
    76a8:	f000 f892 	bl	77d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8c>
    76ac:	b110      	cbz	r0, 76b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    76ae:	2f0b      	cmp	r7, #11
    76b0:	d029      	beq.n	7706 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    76b2:	e7f1      	b.n	7698 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    76b4:	2f0b      	cmp	r7, #11
    76b6:	d026      	beq.n	7706 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    76b8:	722e      	strb	r6, [r5, #8]
    76ba:	e79b      	b.n	75f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x28>
    76bc:	f8d8 0000 	ldr.w	r0, [r8]
    76c0:	b180      	cbz	r0, 76e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    76c2:	6868      	ldr	r0, [r5, #4]
    76c4:	7066      	strb	r6, [r4, #1]
    76c6:	2108      	movs	r1, #8
    76c8:	7021      	strb	r1, [r4, #0]
    76ca:	8801      	ldrh	r1, [r0, #0]
    76cc:	80a1      	strh	r1, [r4, #4]
    76ce:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
    76d2:	f8c4 1006 	str.w	r1, [r4, #6]
    76d6:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
    76da:	f8c4 100a 	str.w	r1, [r4, #10]
    76de:	f8b0 0298 	ldrh.w	r0, [r0, #664]	; 0x298
    76e2:	81e0      	strh	r0, [r4, #14]
    76e4:	e7d8      	b.n	7698 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    76e6:	480c      	ldr	r0, [pc, #48]	; (7718 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14c>)
    76e8:	6803      	ldr	r3, [r0, #0]
    76ea:	b11b      	cbz	r3, 76f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    76ec:	2200      	movs	r2, #0
    76ee:	4621      	mov	r1, r4
    76f0:	4610      	mov	r0, r2
    76f2:	4798      	blx	r3
    76f4:	e7d0      	b.n	7698 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    76f6:	e007      	b.n	7708 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    76f8:	e000      	b.n	76fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    76fa:	e002      	b.n	7702 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    76fc:	f240 412d 	movw	r1, #1069	; 0x42d
    7700:	e7c7      	b.n	7692 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    7702:	e7c9      	b.n	7698 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7704:	e7c8      	b.n	7698 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7706:	2001      	movs	r0, #1
    7708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    770c:	200014cd 	.word	0x200014cd
    7710:	20000124 	.word	0x20000124
    7714:	20000120 	.word	0x20000120
    7718:	20000128 	.word	0x20000128

0000771c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    771c:	4901      	ldr	r1, [pc, #4]	; (7724 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    771e:	7008      	strb	r0, [r1, #0]
    7720:	f000 b928 	b.w	7974 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    7724:	20000114 	.word	0x20000114

00007728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    7728:	4801      	ldr	r0, [pc, #4]	; (7730 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    772a:	7800      	ldrb	r0, [r0, #0]
    772c:	f7fd bd06 	b.w	513c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7730:	20000114 	.word	0x20000114

00007734 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    7734:	4902      	ldr	r1, [pc, #8]	; (7740 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    7736:	4801      	ldr	r0, [pc, #4]	; (773c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    7738:	6008      	str	r0, [r1, #0]
    773a:	4770      	bx	lr
    773c:	0000fa93 	.word	0x0000fa93
    7740:	20000120 	.word	0x20000120

00007744 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    7744:	4905      	ldr	r1, [pc, #20]	; (775c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    7746:	4804      	ldr	r0, [pc, #16]	; (7758 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    7748:	6008      	str	r0, [r1, #0]
    774a:	4906      	ldr	r1, [pc, #24]	; (7764 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    774c:	4804      	ldr	r0, [pc, #16]	; (7760 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    774e:	6008      	str	r0, [r1, #0]
    7750:	4906      	ldr	r1, [pc, #24]	; (776c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    7752:	4805      	ldr	r0, [pc, #20]	; (7768 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    7754:	6008      	str	r0, [r1, #0]
    7756:	4770      	bx	lr
    7758:	0000fa93 	.word	0x0000fa93
    775c:	20000120 	.word	0x20000120
    7760:	0000f5d3 	.word	0x0000f5d3
    7764:	20000124 	.word	0x20000124
    7768:	0000633d 	.word	0x0000633d
    776c:	20000128 	.word	0x20000128
    7770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7772:	4605      	mov	r5, r0
    7774:	4c15      	ldr	r4, [pc, #84]	; (77cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x88>)
    7776:	2000      	movs	r0, #0
    7778:	7028      	strb	r0, [r5, #0]
    777a:	6820      	ldr	r0, [r4, #0]
    777c:	2800      	cmp	r0, #0
    777e:	d023      	beq.n	77c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    7780:	7a01      	ldrb	r1, [r0, #8]
    7782:	2601      	movs	r6, #1
    7784:	f88d 1000 	strb.w	r1, [sp]
    7788:	9900      	ldr	r1, [sp, #0]
    778a:	9100      	str	r1, [sp, #0]
    778c:	f89d 1000 	ldrb.w	r1, [sp]
    7790:	2908      	cmp	r1, #8
    7792:	d107      	bne.n	77a4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    7794:	6840      	ldr	r0, [r0, #4]
    7796:	8800      	ldrh	r0, [r0, #0]
    7798:	f7fe faf4 	bl	5d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    779c:	f006 fdb1 	bl	e302 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    77a0:	2800      	cmp	r0, #0
    77a2:	d011      	beq.n	77c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    77a4:	f3ef 8110 	mrs	r1, PRIMASK
    77a8:	6820      	ldr	r0, [r4, #0]
    77aa:	b672      	cpsid	i
    77ac:	6802      	ldr	r2, [r0, #0]
    77ae:	6022      	str	r2, [r4, #0]
    77b0:	b901      	cbnz	r1, 77b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x70>
    77b2:	b662      	cpsie	i
    77b4:	7a01      	ldrb	r1, [r0, #8]
    77b6:	f88d 1000 	strb.w	r1, [sp]
    77ba:	9900      	ldr	r1, [sp, #0]
    77bc:	9100      	str	r1, [sp, #0]
    77be:	f89d 1000 	ldrb.w	r1, [sp]
    77c2:	2900      	cmp	r1, #0
    77c4:	d100      	bne.n	77c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    77c6:	702e      	strb	r6, [r5, #0]
    77c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77ca:	0000      	.short	0x0000
    77cc:	20000118 	.word	0x20000118
    77d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77d4:	b086      	sub	sp, #24
    77d6:	000f      	movs	r7, r1
    77d8:	4604      	mov	r4, r0
    77da:	4691      	mov	r9, r2
    77dc:	d013      	beq.n	7806 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    77de:	6878      	ldr	r0, [r7, #4]
    77e0:	b188      	cbz	r0, 7806 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    77e2:	f100 0578 	add.w	r5, r0, #120	; 0x78
    77e6:	f500 7196 	add.w	r1, r0, #300	; 0x12c
    77ea:	8806      	ldrh	r6, [r0, #0]
    77ec:	4610      	mov	r0, r2
    77ee:	f04f 0800 	mov.w	r8, #0
    77f2:	2a10      	cmp	r2, #16
    77f4:	d079      	beq.n	78ea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a6>
    77f6:	dc09      	bgt.n	780c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc8>
    77f8:	f04f 0a01 	mov.w	sl, #1
    77fc:	2801      	cmp	r0, #1
    77fe:	d00a      	beq.n	7816 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd2>
    7800:	2a0b      	cmp	r2, #11
    7802:	d171      	bne.n	78e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7804:	e01a      	b.n	783c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    7806:	f240 2182 	movw	r1, #642	; 0x282
    780a:	e0ad      	b.n	7968 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    780c:	281a      	cmp	r0, #26
    780e:	d04d      	beq.n	78ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x168>
    7810:	2a1b      	cmp	r2, #27
    7812:	d169      	bne.n	78e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7814:	e027      	b.n	7866 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x122>
    7816:	2d00      	cmp	r5, #0
    7818:	d00f      	beq.n	783a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    781a:	f884 8001 	strb.w	r8, [r4, #1]
    781e:	f884 a000 	strb.w	sl, [r4]
    7822:	f884 8004 	strb.w	r8, [r4, #4]
    7826:	f8a4 6005 	strh.w	r6, [r4, #5]
    782a:	f895 0057 	ldrb.w	r0, [r5, #87]	; 0x57
    782e:	71e0      	strb	r0, [r4, #7]
    7830:	f835 0f58 	ldrh.w	r0, [r5, #88]!
    7834:	8120      	strh	r0, [r4, #8]
    7836:	8868      	ldrh	r0, [r5, #2]
    7838:	8160      	strh	r0, [r4, #10]
    783a:	e076      	b.n	792a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    783c:	4630      	mov	r0, r6
    783e:	f7fe fab7 	bl	5db0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7842:	b168      	cbz	r0, 7860 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    7844:	f884 8001 	strb.w	r8, [r4, #1]
    7848:	220d      	movs	r2, #13
    784a:	7022      	strb	r2, [r4, #0]
    784c:	80e6      	strh	r6, [r4, #6]
    784e:	4641      	mov	r1, r8
    7850:	f8a4 a008 	strh.w	sl, [r4, #8]
    7854:	f884 a004 	strb.w	sl, [r4, #4]
    7858:	460a      	mov	r2, r1
    785a:	f006 ff25 	bl	e6a8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    785e:	e064      	b.n	792a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7860:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    7864:	e080      	b.n	7968 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7866:	f7ff fdfd 	bl	7464 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    786a:	b3e8      	cbz	r0, 78e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    786c:	f887 8008 	strb.w	r8, [r7, #8]
    7870:	4630      	mov	r0, r6
    7872:	f8ad 6000 	strh.w	r6, [sp]
    7876:	a902      	add	r1, sp, #8
    7878:	f007 fa80 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    787c:	b110      	cbz	r0, 7884 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x140>
    787e:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    7882:	e071      	b.n	7968 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7884:	9803      	ldr	r0, [sp, #12]
    7886:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
    788a:	f88d 1002 	strb.w	r1, [sp, #2]
    788e:	7841      	ldrb	r1, [r0, #1]
    7890:	f88d 1003 	strb.w	r1, [sp, #3]
    7894:	8840      	ldrh	r0, [r0, #2]
    7896:	f8ad 0004 	strh.w	r0, [sp, #4]
    789a:	2102      	movs	r1, #2
    789c:	4668      	mov	r0, sp
    789e:	f009 fb8b 	bl	10fb8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    78a2:	2800      	cmp	r0, #0
    78a4:	d034      	beq.n	7910 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    78a6:	f44f 71c2 	mov.w	r1, #388	; 0x184
    78aa:	e05d      	b.n	7968 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    78ac:	f7ff fdd0 	bl	7450 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    78b0:	b1d0      	cbz	r0, 78e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    78b2:	f887 8008 	strb.w	r8, [r7, #8]
    78b6:	a903      	add	r1, sp, #12
    78b8:	4630      	mov	r0, r6
    78ba:	f009 f9f4 	bl	10ca6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    78be:	b110      	cbz	r0, 78c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x182>
    78c0:	f240 118b 	movw	r1, #395	; 0x18b
    78c4:	e050      	b.n	7968 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    78c6:	f8ad 6000 	strh.w	r6, [sp]
    78ca:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    78ce:	f8ad 0002 	strh.w	r0, [sp, #2]
    78d2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    78d6:	f8ad 0004 	strh.w	r0, [sp, #4]
    78da:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    78de:	f8ad 0006 	strh.w	r0, [sp, #6]
    78e2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    78e6:	e001      	b.n	78ec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a8>
    78e8:	e015      	b.n	7916 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d2>
    78ea:	e009      	b.n	7900 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1bc>
    78ec:	f8ad 0008 	strh.w	r0, [sp, #8]
    78f0:	4668      	mov	r0, sp
    78f2:	f009 f9fc 	bl	10cee <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    78f6:	2800      	cmp	r0, #0
    78f8:	d00a      	beq.n	7910 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    78fa:	f44f 71ca 	mov.w	r1, #404	; 0x194
    78fe:	e033      	b.n	7968 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7900:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    7904:	f000 0001 	and.w	r0, r0, #1
    7908:	f7ff fd96 	bl	7438 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    790c:	b130      	cbz	r0, 791c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d8>
    790e:	2000      	movs	r0, #0
    7910:	b006      	add	sp, #24
    7912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7916:	f1b9 0f08 	cmp.w	r9, #8
    791a:	d008      	beq.n	792e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ea>
    791c:	4814      	ldr	r0, [pc, #80]	; (7970 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>)
    791e:	6803      	ldr	r3, [r0, #0]
    7920:	b11b      	cbz	r3, 792a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7922:	6878      	ldr	r0, [r7, #4]
    7924:	464a      	mov	r2, r9
    7926:	4621      	mov	r1, r4
    7928:	4798      	blx	r3
    792a:	2001      	movs	r0, #1
    792c:	e7f0      	b.n	7910 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    792e:	4630      	mov	r0, r6
    7930:	f7fe fa28 	bl	5d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7934:	f006 fce5 	bl	e302 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    7938:	b1a0      	cbz	r0, 7964 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x220>
    793a:	4630      	mov	r0, r6
    793c:	f007 f94e 	bl	ebdc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7940:	2100      	movs	r1, #0
    7942:	4630      	mov	r0, r6
    7944:	f7fe f88a 	bl	5a5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7948:	2d00      	cmp	r5, #0
    794a:	d0ee      	beq.n	792a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    794c:	f884 8001 	strb.w	r8, [r4, #1]
    7950:	210a      	movs	r1, #10
    7952:	7021      	strb	r1, [r4, #0]
    7954:	f884 8004 	strb.w	r8, [r4, #4]
    7958:	f8a4 6005 	strh.w	r6, [r4, #5]
    795c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    7960:	71e0      	strb	r0, [r4, #7]
    7962:	e7e2      	b.n	792a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7964:	f240 21c3 	movw	r1, #707	; 0x2c3
    7968:	2010      	movs	r0, #16
    796a:	f7fd fde3 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    796e:	0000      	.short	0x0000
    7970:	20000124 	.word	0x20000124
    7974:	4904      	ldr	r1, [pc, #16]	; (7988 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x244>)
    7976:	2000      	movs	r0, #0
    7978:	6048      	str	r0, [r1, #4]
    797a:	6088      	str	r0, [r1, #8]
    797c:	4903      	ldr	r1, [pc, #12]	; (798c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x248>)
    797e:	6008      	str	r0, [r1, #0]
    7980:	6048      	str	r0, [r1, #4]
    7982:	8108      	strh	r0, [r1, #8]
    7984:	4770      	bx	lr
    7986:	0000      	.short	0x0000
    7988:	20000114 	.word	0x20000114
    798c:	200014cd 	.word	0x200014cd

00007990 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7990:	b5f0      	push	{r4, r5, r6, r7, lr}
    7992:	f06f 021f 	mvn.w	r2, #31
    7996:	0c01      	lsrs	r1, r0, #16
    7998:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    799c:	251f      	movs	r5, #31
    799e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    79a2:	3854      	subs	r0, #84	; 0x54
    79a4:	d00d      	beq.n	79c2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    79a6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    79aa:	3855      	subs	r0, #85	; 0x55
    79ac:	d009      	beq.n	79c2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    79ae:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    79b2:	38aa      	subs	r0, #170	; 0xaa
    79b4:	d005      	beq.n	79c2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    79b6:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    79ba:	38aa      	subs	r0, #170	; 0xaa
    79bc:	d001      	beq.n	79c2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    79be:	2001      	movs	r0, #1
    79c0:	e000      	b.n	79c4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    79c2:	2000      	movs	r0, #0
    79c4:	2200      	movs	r2, #0
    79c6:	4613      	mov	r3, r2
    79c8:	ea4f 0402 	mov.w	r4, r2
    79cc:	ea82 0701 	eor.w	r7, r2, r1
    79d0:	43ff      	mvns	r7, r7
    79d2:	431f      	orrs	r7, r3
    79d4:	1c7f      	adds	r7, r7, #1
    79d6:	d00f      	beq.n	79f8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    79d8:	f006 0701 	and.w	r7, r6, #1
    79dc:	0852      	lsrs	r2, r2, #1
    79de:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    79e2:	f005 0701 	and.w	r7, r5, #1
    79e6:	085b      	lsrs	r3, r3, #1
    79e8:	0876      	lsrs	r6, r6, #1
    79ea:	086d      	lsrs	r5, r5, #1
    79ec:	1c64      	adds	r4, r4, #1
    79ee:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    79f2:	2c16      	cmp	r4, #22
    79f4:	d3ea      	bcc.n	79cc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    79f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79f8:	2000      	movs	r0, #0
    79fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000079fc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    79fc:	b510      	push	{r4, lr}
    79fe:	4804      	ldr	r0, [pc, #16]	; (7a10 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    7a00:	f007 ffb1 	bl	f966 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    7a04:	4802      	ldr	r0, [pc, #8]	; (7a10 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    7a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a0a:	3008      	adds	r0, #8
    7a0c:	f007 bfab 	b.w	f966 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    7a10:	2000012c 	.word	0x2000012c

00007a14 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    7a14:	4801      	ldr	r0, [pc, #4]	; (7a1c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    7a16:	f000 b809 	b.w	7a2c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    7a1a:	0000      	.short	0x0000
    7a1c:	2000012c 	.word	0x2000012c

00007a20 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    7a20:	4801      	ldr	r0, [pc, #4]	; (7a28 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    7a22:	f000 b803 	b.w	7a2c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    7a26:	0000      	.short	0x0000
    7a28:	20000134 	.word	0x20000134
    7a2c:	b510      	push	{r4, lr}
    7a2e:	e9d0 2100 	ldrd	r2, r1, [r0]
    7a32:	4b09      	ldr	r3, [pc, #36]	; (7a58 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    7a34:	4c09      	ldr	r4, [pc, #36]	; (7a5c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    7a36:	4353      	muls	r3, r2
    7a38:	4354      	muls	r4, r2
    7a3a:	4051      	eors	r1, r2
    7a3c:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    7a40:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    7a44:	ea4f 41f1 	mov.w	r1, r1, ror #19
    7a48:	e9c0 2100 	strd	r2, r1, [r0]
    7a4c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    7a50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7a54:	4618      	mov	r0, r3
    7a56:	bd10      	pop	{r4, pc}
    7a58:	c6ef3760 	.word	0xc6ef3760
    7a5c:	9e3779bb 	.word	0x9e3779bb

00007a60 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7a60:	b570      	push	{r4, r5, r6, lr}
    7a62:	4604      	mov	r4, r0
    7a64:	7c00      	ldrb	r0, [r0, #16]
    7a66:	b300      	cbz	r0, 7aaa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7a68:	2802      	cmp	r0, #2
    7a6a:	d01e      	beq.n	7aaa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7a6c:	f05f 0001 	movs.w	r0, #1
    7a70:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7a74:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    7a78:	460d      	mov	r5, r1
    7a7a:	b1c0      	cbz	r0, 7aae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    7a7c:	7de0      	ldrb	r0, [r4, #23]
    7a7e:	b1f0      	cbz	r0, 7abe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    7a80:	f8d4 0011 	ldr.w	r0, [r4, #17]
    7a84:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    7a88:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    7a8c:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    7a90:	7c20      	ldrb	r0, [r4, #16]
    7a92:	f007 ff89 	bl	f9a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    7a96:	7620      	strb	r0, [r4, #24]
    7a98:	2008      	movs	r0, #8
    7a9a:	7660      	strb	r0, [r4, #25]
    7a9c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7aa0:	4629      	mov	r1, r5
    7aa2:	f007 ff6d 	bl	f980 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    7aa6:	b9a8      	cbnz	r0, 7ad4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    7aa8:	e00e      	b.n	7ac8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    7aaa:	2000      	movs	r0, #0
    7aac:	e7e0      	b.n	7a70 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    7aae:	2000      	movs	r0, #0
    7ab0:	f7fe fbf6 	bl	62a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7ab4:	2800      	cmp	r0, #0
    7ab6:	d1eb      	bne.n	7a90 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    7ab8:	f240 418a 	movw	r1, #1162	; 0x48a
    7abc:	e001      	b.n	7ac2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    7abe:	f240 418e 	movw	r1, #1166	; 0x48e
    7ac2:	202d      	movs	r0, #45	; 0x2d
    7ac4:	f7fd fd36 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ac8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7acc:	4629      	mov	r1, r5
    7ace:	f007 ff60 	bl	f992 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    7ad2:	b100      	cbz	r0, 7ad6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7ad4:	2001      	movs	r0, #1
    7ad6:	76a0      	strb	r0, [r4, #26]
    7ad8:	7e20      	ldrb	r0, [r4, #24]
    7ada:	b130      	cbz	r0, 7aea <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    7adc:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    7ae0:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7ae4:	f007 f916 	bl	ed14 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7ae8:	7660      	strb	r0, [r4, #25]
    7aea:	f7ff fa0f 	bl	6f0c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7aee:	490c      	ldr	r1, [pc, #48]	; (7b20 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    7af0:	fba0 2301 	umull	r2, r3, r0, r1
    7af4:	f104 0040 	add.w	r0, r4, #64	; 0x40
    7af8:	f008 f8ef 	bl	fcda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    7afc:	2100      	movs	r1, #0
    7afe:	4620      	mov	r0, r4
    7b00:	f008 f899 	bl	fc36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    7b04:	2000      	movs	r0, #0
    7b06:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7b0a:	78a0      	ldrb	r0, [r4, #2]
    7b0c:	0740      	lsls	r0, r0, #29
    7b0e:	d505      	bpl.n	7b1c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    7b10:	4620      	mov	r0, r4
    7b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b16:	2100      	movs	r1, #0
    7b18:	f000 bdac 	b.w	8674 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>
    7b1c:	bd70      	pop	{r4, r5, r6, pc}
    7b1e:	0000      	.short	0x0000
    7b20:	000f4240 	.word	0x000f4240

00007b24 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    7b24:	b530      	push	{r4, r5, lr}
    7b26:	460c      	mov	r4, r1
    7b28:	b08d      	sub	sp, #52	; 0x34
    7b2a:	4605      	mov	r5, r0
    7b2c:	4601      	mov	r1, r0
    7b2e:	2220      	movs	r2, #32
    7b30:	a802      	add	r0, sp, #8
    7b32:	f005 fe71 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7b36:	a80a      	add	r0, sp, #40	; 0x28
    7b38:	f008 f935 	bl	fda6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7b3c:	7aa0      	ldrb	r0, [r4, #10]
    7b3e:	f88d 0018 	strb.w	r0, [sp, #24]
    7b42:	7820      	ldrb	r0, [r4, #0]
    7b44:	f88d 0008 	strb.w	r0, [sp, #8]
    7b48:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7b4c:	f8ad 0000 	strh.w	r0, [sp]
    7b50:	f89d 0000 	ldrb.w	r0, [sp]
    7b54:	f000 0101 	and.w	r1, r0, #1
    7b58:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7b5c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7b60:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7b64:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7b68:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7b6c:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7b70:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7b74:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7b78:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7b7c:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7b80:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7b84:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7b88:	f8ad 000a 	strh.w	r0, [sp, #10]
    7b8c:	7d20      	ldrb	r0, [r4, #20]
    7b8e:	2801      	cmp	r0, #1
    7b90:	d006      	beq.n	7ba0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7b92:	2802      	cmp	r0, #2
    7b94:	d004      	beq.n	7ba0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7b96:	f240 21bb 	movw	r1, #699	; 0x2bb
    7b9a:	2006      	movs	r0, #6
    7b9c:	f7fd fcca 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ba0:	f88d 000c 	strb.w	r0, [sp, #12]
    7ba4:	7a61      	ldrb	r1, [r4, #9]
    7ba6:	a80a      	add	r0, sp, #40	; 0x28
    7ba8:	f008 f8e4 	bl	fd74 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7bac:	7d20      	ldrb	r0, [r4, #20]
    7bae:	2101      	movs	r1, #1
    7bb0:	2802      	cmp	r0, #2
    7bb2:	d102      	bne.n	7bba <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7bb4:	7d60      	ldrb	r0, [r4, #21]
    7bb6:	1c40      	adds	r0, r0, #1
    7bb8:	b2c1      	uxtb	r1, r0
    7bba:	7ea0      	ldrb	r0, [r4, #26]
    7bbc:	1c40      	adds	r0, r0, #1
    7bbe:	b2c2      	uxtb	r2, r0
    7bc0:	a80a      	add	r0, sp, #40	; 0x28
    7bc2:	f008 f89e 	bl	fd02 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    7bc6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    7bca:	0700      	lsls	r0, r0, #28
    7bcc:	d501      	bpl.n	7bd2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    7bce:	2000      	movs	r0, #0
    7bd0:	e020      	b.n	7c14 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    7bd2:	a80a      	add	r0, sp, #40	; 0x28
    7bd4:	f008 f8a7 	bl	fd26 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7bd8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    7bdc:	2228      	movs	r2, #40	; 0x28
    7bde:	f000 fdef 	bl	87c0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7be2:	f240 2171 	movw	r1, #625	; 0x271
    7be6:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    7bea:	fbb0 f0f1 	udiv	r0, r0, r1
    7bee:	4348      	muls	r0, r1
    7bf0:	f8d4 1002 	ldr.w	r1, [r4, #2]
    7bf4:	f240 2371 	movw	r3, #625	; 0x271
    7bf8:	0a0a      	lsrs	r2, r1, #8
    7bfa:	f240 2171 	movw	r1, #625	; 0x271
    7bfe:	434a      	muls	r2, r1
    7c00:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7c04:	0a09      	lsrs	r1, r1, #8
    7c06:	4359      	muls	r1, r3
    7c08:	4290      	cmp	r0, r2
    7c0a:	d801      	bhi.n	7c10 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    7c0c:	9204      	str	r2, [sp, #16]
    7c0e:	e004      	b.n	7c1a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7c10:	4288      	cmp	r0, r1
    7c12:	d801      	bhi.n	7c18 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    7c14:	9004      	str	r0, [sp, #16]
    7c16:	e000      	b.n	7c1a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7c18:	9104      	str	r1, [sp, #16]
    7c1a:	7ca0      	ldrb	r0, [r4, #18]
    7c1c:	f88d 0017 	strb.w	r0, [sp, #23]
    7c20:	7e20      	ldrb	r0, [r4, #24]
    7c22:	2801      	cmp	r0, #1
    7c24:	d000      	beq.n	7c28 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    7c26:	2000      	movs	r0, #0
    7c28:	f88d 0014 	strb.w	r0, [sp, #20]
    7c2c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7c2e:	f006 fed8 	bl	e9e2 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    7c32:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7c34:	f006 ff79 	bl	eb2a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7c38:	2220      	movs	r2, #32
    7c3a:	a902      	add	r1, sp, #8
    7c3c:	4628      	mov	r0, r5
    7c3e:	f005 fdeb 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7c42:	980a      	ldr	r0, [sp, #40]	; 0x28
    7c44:	6228      	str	r0, [r5, #32]
    7c46:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    7c4a:	84a8      	strh	r0, [r5, #36]	; 0x24
    7c4c:	7ae0      	ldrb	r0, [r4, #11]
    7c4e:	b168      	cbz	r0, 7c6c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7c50:	2802      	cmp	r0, #2
    7c52:	d00b      	beq.n	7c6c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7c54:	f05f 0001 	movs.w	r0, #1
    7c58:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    7c5c:	68e0      	ldr	r0, [r4, #12]
    7c5e:	6528      	str	r0, [r5, #80]	; 0x50
    7c60:	8a20      	ldrh	r0, [r4, #16]
    7c62:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    7c66:	b00d      	add	sp, #52	; 0x34
    7c68:	2000      	movs	r0, #0
    7c6a:	bd30      	pop	{r4, r5, pc}
    7c6c:	2000      	movs	r0, #0
    7c6e:	e7f3      	b.n	7c58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00007c70 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7c70:	4a0a      	ldr	r2, [pc, #40]	; (7c9c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    7c72:	b510      	push	{r4, lr}
    7c74:	2100      	movs	r1, #0
    7c76:	7011      	strb	r1, [r2, #0]
    7c78:	4c09      	ldr	r4, [pc, #36]	; (7ca0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    7c7a:	6060      	str	r0, [r4, #4]
    7c7c:	f000 f822 	bl	7cc4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    7c80:	b110      	cbz	r0, 7c88 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    7c82:	f240 310a 	movw	r1, #778	; 0x30a
    7c86:	e004      	b.n	7c92 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    7c88:	68a0      	ldr	r0, [r4, #8]
    7c8a:	2800      	cmp	r0, #0
    7c8c:	d104      	bne.n	7c98 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    7c8e:	f240 310d 	movw	r1, #781	; 0x30d
    7c92:	202d      	movs	r0, #45	; 0x2d
    7c94:	f7fd fc4e 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c98:	bd10      	pop	{r4, pc}
    7c9a:	0000      	.short	0x0000
    7c9c:	20001060 	.word	0x20001060
    7ca0:	2000013c 	.word	0x2000013c

00007ca4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7ca4:	4902      	ldr	r1, [pc, #8]	; (7cb0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7ca6:	4801      	ldr	r0, [pc, #4]	; (7cac <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7ca8:	6088      	str	r0, [r1, #8]
    7caa:	4770      	bx	lr
    7cac:	000087a8 	.word	0x000087a8
    7cb0:	2000013c 	.word	0x2000013c

00007cb4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7cb4:	4902      	ldr	r1, [pc, #8]	; (7cc0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    7cb6:	6008      	str	r0, [r1, #0]
    7cb8:	6889      	ldr	r1, [r1, #8]
    7cba:	6809      	ldr	r1, [r1, #0]
    7cbc:	4708      	bx	r1
    7cbe:	0000      	.short	0x0000
    7cc0:	2000013c 	.word	0x2000013c

00007cc4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7cc4:	4808      	ldr	r0, [pc, #32]	; (7ce8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7cc6:	b510      	push	{r4, lr}
    7cc8:	7800      	ldrb	r0, [r0, #0]
    7cca:	b110      	cbz	r0, 7cd2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7ccc:	240c      	movs	r4, #12
    7cce:	4620      	mov	r0, r4
    7cd0:	bd10      	pop	{r4, pc}
    7cd2:	2400      	movs	r4, #0
    7cd4:	2218      	movs	r2, #24
    7cd6:	4621      	mov	r1, r4
    7cd8:	4803      	ldr	r0, [pc, #12]	; (7ce8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7cda:	f005 fe17 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7cde:	f004 f8bd 	bl	be5c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7ce2:	f003 fee1 	bl	baa8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7ce6:	e7f2      	b.n	7cce <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    7ce8:	20001060 	.word	0x20001060

00007cec <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7cec:	4904      	ldr	r1, [pc, #16]	; (7d00 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    7cee:	b510      	push	{r4, lr}
    7cf0:	7809      	ldrb	r1, [r1, #0]
    7cf2:	2901      	cmp	r1, #1
    7cf4:	d101      	bne.n	7cfa <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    7cf6:	f000 fb7b 	bl	83f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7cfa:	2000      	movs	r0, #0
    7cfc:	bd10      	pop	{r4, pc}
    7cfe:	0000      	.short	0x0000
    7d00:	20001060 	.word	0x20001060

00007d04 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7d04:	4902      	ldr	r1, [pc, #8]	; (7d10 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    7d06:	4801      	ldr	r0, [pc, #4]	; (7d0c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    7d08:	6008      	str	r0, [r1, #0]
    7d0a:	4770      	bx	lr
    7d0c:	0000852d 	.word	0x0000852d
    7d10:	20000148 	.word	0x20000148
    7d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d18:	000f      	movs	r7, r1
    7d1a:	4604      	mov	r4, r0
    7d1c:	d023      	beq.n	7d66 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    7d1e:	f104 0020 	add.w	r0, r4, #32
    7d22:	4605      	mov	r5, r0
    7d24:	f008 f828 	bl	fd78 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7d28:	b9b0      	cbnz	r0, 7d58 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    7d2a:	78a0      	ldrb	r0, [r4, #2]
    7d2c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7d30:	b350      	cbz	r0, 7d88 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    7d32:	4628      	mov	r0, r5
    7d34:	f007 fff7 	bl	fd26 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7d38:	4606      	mov	r6, r0
    7d3a:	4628      	mov	r0, r5
    7d3c:	f008 f81c 	bl	fd78 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7d40:	1a30      	subs	r0, r6, r0
    7d42:	b2c0      	uxtb	r0, r0
    7d44:	f008 f86d 	bl	fe22 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7d48:	4601      	mov	r1, r0
    7d4a:	4835      	ldr	r0, [pc, #212]	; (7e20 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    7d4c:	6842      	ldr	r2, [r0, #4]
    7d4e:	4411      	add	r1, r2
    7d50:	6041      	str	r1, [r0, #4]
    7d52:	4628      	mov	r0, r5
    7d54:	f008 f82e 	bl	fdb4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7d58:	4628      	mov	r0, r5
    7d5a:	f007 fff0 	bl	fd3e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7d5e:	4601      	mov	r1, r0
    7d60:	4620      	mov	r0, r4
    7d62:	f007 ffa4 	bl	fcae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    7d66:	4d2f      	ldr	r5, [pc, #188]	; (7e24 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    7d68:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    7d6c:	2100      	movs	r1, #0
    7d6e:	6868      	ldr	r0, [r5, #4]
    7d70:	8001      	strh	r1, [r0, #0]
    7d72:	f007 ffbd 	bl	fcf0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7d76:	8860      	ldrh	r0, [r4, #2]
    7d78:	2813      	cmp	r0, #19
    7d7a:	d013      	beq.n	7da4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    7d7c:	dc09      	bgt.n	7d92 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    7d7e:	2810      	cmp	r0, #16
    7d80:	d036      	beq.n	7df0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    7d82:	2812      	cmp	r0, #18
    7d84:	d109      	bne.n	7d9a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    7d86:	e031      	b.n	7dec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    7d88:	4620      	mov	r0, r4
    7d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7d8e:	f000 bb2f 	b.w	83f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7d92:	2815      	cmp	r0, #21
    7d94:	d00f      	beq.n	7db6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7d96:	281d      	cmp	r0, #29
    7d98:	d00d      	beq.n	7db6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7d9a:	f240 614a 	movw	r1, #1610	; 0x64a
    7d9e:	202d      	movs	r0, #45	; 0x2d
    7da0:	f7fd fbc8 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7da4:	2100      	movs	r1, #0
    7da6:	6868      	ldr	r0, [r5, #4]
    7da8:	f007 fb3f 	bl	f42a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7dac:	2101      	movs	r1, #1
    7dae:	6868      	ldr	r0, [r5, #4]
    7db0:	f007 ff9e 	bl	fcf0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7db4:	e020      	b.n	7df8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7db6:	2101      	movs	r1, #1
    7db8:	6868      	ldr	r0, [r5, #4]
    7dba:	f007 fb36 	bl	f42a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7dbe:	2101      	movs	r1, #1
    7dc0:	6868      	ldr	r0, [r5, #4]
    7dc2:	f007 ff95 	bl	fcf0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7dc6:	b136      	cbz	r6, 7dd6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    7dc8:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7dcc:	6868      	ldr	r0, [r5, #4]
    7dce:	f007 fb47 	bl	f460 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7dd2:	2101      	movs	r1, #1
    7dd4:	e006      	b.n	7de4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    7dd6:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7dda:	6868      	ldr	r0, [r5, #4]
    7ddc:	f007 fb40 	bl	f460 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7de0:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    7de4:	6868      	ldr	r0, [r5, #4]
    7de6:	f007 fb41 	bl	f46c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7dea:	e005      	b.n	7df8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7dec:	2106      	movs	r1, #6
    7dee:	e000      	b.n	7df2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    7df0:	2102      	movs	r1, #2
    7df2:	6868      	ldr	r0, [r5, #4]
    7df4:	f007 fb19 	bl	f42a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7df8:	4620      	mov	r0, r4
    7dfa:	f000 fcb1 	bl	8760 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74c>
    7dfe:	8860      	ldrh	r0, [r4, #2]
    7e00:	281d      	cmp	r0, #29
    7e02:	d007      	beq.n	7e14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    7e04:	2815      	cmp	r0, #21
    7e06:	d005      	beq.n	7e14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    7e08:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    7e0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7e0e:	6868      	ldr	r0, [r5, #4]
    7e10:	f007 fafb 	bl	f40a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7e14:	4639      	mov	r1, r7
    7e16:	4620      	mov	r0, r4
    7e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7e1c:	f000 b9e4 	b.w	81e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    7e20:	20001060 	.word	0x20001060
    7e24:	2000013c 	.word	0x2000013c
    7e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e2c:	4d2e      	ldr	r5, [pc, #184]	; (7ee8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    7e2e:	4607      	mov	r7, r0
    7e30:	7828      	ldrb	r0, [r5, #0]
    7e32:	2802      	cmp	r0, #2
    7e34:	d005      	beq.n	7e42 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7e36:	7828      	ldrb	r0, [r5, #0]
    7e38:	2803      	cmp	r0, #3
    7e3a:	d002      	beq.n	7e42 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7e3c:	f640 41b9 	movw	r1, #3257	; 0xcb9
    7e40:	e028      	b.n	7e94 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    7e42:	4c2a      	ldr	r4, [pc, #168]	; (7eec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7e44:	6820      	ldr	r0, [r4, #0]
    7e46:	7b01      	ldrb	r1, [r0, #12]
    7e48:	b109      	cbz	r1, 7e4e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    7e4a:	f007 ff3b 	bl	fcc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    7e4e:	f8d4 c004 	ldr.w	ip, [r4, #4]
    7e52:	f04f 0800 	mov.w	r8, #0
    7e56:	f89c 0000 	ldrb.w	r0, [ip]
    7e5a:	f000 060f 	and.w	r6, r0, #15
    7e5e:	b33f      	cbz	r7, 7eb0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7e60:	6821      	ldr	r1, [r4, #0]
    7e62:	09c0      	lsrs	r0, r0, #7
    7e64:	f101 0349 	add.w	r3, r1, #73	; 0x49
    7e68:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    7e6c:	f10c 0109 	add.w	r1, ip, #9
    7e70:	f006 feb8 	bl	ebe4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7e74:	b1e0      	cbz	r0, 7eb0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7e76:	4641      	mov	r1, r8
    7e78:	6860      	ldr	r0, [r4, #4]
    7e7a:	f007 fab6 	bl	f3ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7e7e:	b1b8      	cbz	r0, 7eb0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7e80:	782a      	ldrb	r2, [r5, #0]
    7e82:	6820      	ldr	r0, [r4, #0]
    7e84:	4631      	mov	r1, r6
    7e86:	2a02      	cmp	r2, #2
    7e88:	d007      	beq.n	7e9a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7e8a:	782a      	ldrb	r2, [r5, #0]
    7e8c:	2a03      	cmp	r2, #3
    7e8e:	d004      	beq.n	7e9a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7e90:	f640 4192 	movw	r1, #3218	; 0xc92
    7e94:	202d      	movs	r0, #45	; 0x2d
    7e96:	f7fd fb4d 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e9a:	68a2      	ldr	r2, [r4, #8]
    7e9c:	782b      	ldrb	r3, [r5, #0]
    7e9e:	6952      	ldr	r2, [r2, #20]
    7ea0:	f06f 0607 	mvn.w	r6, #7
    7ea4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7ea8:	58d2      	ldr	r2, [r2, r3]
    7eaa:	4790      	blx	r2
    7eac:	4606      	mov	r6, r0
    7eae:	e000      	b.n	7eb2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7eb0:	2601      	movs	r6, #1
    7eb2:	7ba8      	ldrb	r0, [r5, #14]
    7eb4:	b118      	cbz	r0, 7ebe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    7eb6:	f003 ffd1 	bl	be5c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7eba:	f003 fdf5 	bl	baa8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7ebe:	2e00      	cmp	r6, #0
    7ec0:	d00f      	beq.n	7ee2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    7ec2:	6820      	ldr	r0, [r4, #0]
    7ec4:	f007 ffc3 	bl	fe4e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7ec8:	b130      	cbz	r0, 7ed8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    7eca:	f003 ffef 	bl	beac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7ece:	68a0      	ldr	r0, [r4, #8]
    7ed0:	6880      	ldr	r0, [r0, #8]
    7ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7ed6:	4700      	bx	r0
    7ed8:	6820      	ldr	r0, [r4, #0]
    7eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7ede:	f000 ba87 	b.w	83f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ee6:	0000      	.short	0x0000
    7ee8:	20001060 	.word	0x20001060
    7eec:	2000013c 	.word	0x2000013c
    7ef0:	b510      	push	{r4, lr}
    7ef2:	2903      	cmp	r1, #3
    7ef4:	d002      	beq.n	7efc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    7ef6:	2905      	cmp	r1, #5
    7ef8:	d10a      	bne.n	7f10 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7efa:	e002      	b.n	7f02 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    7efc:	f000 fb7e 	bl	85fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    7f00:	e003      	b.n	7f0a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    7f02:	4904      	ldr	r1, [pc, #16]	; (7f14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    7f04:	6809      	ldr	r1, [r1, #0]
    7f06:	b109      	cbz	r1, 7f0c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    7f08:	4788      	blx	r1
    7f0a:	b108      	cbz	r0, 7f10 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7f0c:	2000      	movs	r0, #0
    7f0e:	bd10      	pop	{r4, pc}
    7f10:	2001      	movs	r0, #1
    7f12:	bd10      	pop	{r4, pc}
    7f14:	20000148 	.word	0x20000148
    7f18:	4a09      	ldr	r2, [pc, #36]	; (7f40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    7f1a:	0003      	movs	r3, r0
    7f1c:	6810      	ldr	r0, [r2, #0]
    7f1e:	d001      	beq.n	7f24 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    7f20:	f000 ba66 	b.w	83f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7f24:	2900      	cmp	r1, #0
    7f26:	d009      	beq.n	7f3c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    7f28:	6891      	ldr	r1, [r2, #8]
    7f2a:	4a06      	ldr	r2, [pc, #24]	; (7f44 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    7f2c:	6909      	ldr	r1, [r1, #16]
    7f2e:	7812      	ldrb	r2, [r2, #0]
    7f30:	f06f 030f 	mvn.w	r3, #15
    7f34:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7f38:	5889      	ldr	r1, [r1, r2]
    7f3a:	4708      	bx	r1
    7f3c:	4770      	bx	lr
    7f3e:	0000      	.short	0x0000
    7f40:	2000013c 	.word	0x2000013c
    7f44:	20001060 	.word	0x20001060
    7f48:	b570      	push	{r4, r5, r6, lr}
    7f4a:	4604      	mov	r4, r0
    7f4c:	8840      	ldrh	r0, [r0, #2]
    7f4e:	2810      	cmp	r0, #16
    7f50:	d019      	beq.n	7f86 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    7f52:	4d10      	ldr	r5, [pc, #64]	; (7f94 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7f54:	7ba8      	ldrb	r0, [r5, #14]
    7f56:	b120      	cbz	r0, 7f62 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    7f58:	f003 fdc6 	bl	bae8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7f5c:	2040      	movs	r0, #64	; 0x40
    7f5e:	f003 ff8b 	bl	be78 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7f62:	480d      	ldr	r0, [pc, #52]	; (7f98 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    7f64:	6840      	ldr	r0, [r0, #4]
    7f66:	f004 fa0d 	bl	c384 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7f6a:	78a0      	ldrb	r0, [r4, #2]
    7f6c:	0740      	lsls	r0, r0, #29
    7f6e:	d404      	bmi.n	7f7a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    7f70:	2100      	movs	r1, #0
    7f72:	7922      	ldrb	r2, [r4, #4]
    7f74:	4608      	mov	r0, r1
    7f76:	f004 fa7d 	bl	c474 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7f7a:	2000      	movs	r0, #0
    7f7c:	f004 f8b8 	bl	c0f0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7f80:	2002      	movs	r0, #2
    7f82:	7028      	strb	r0, [r5, #0]
    7f84:	bd70      	pop	{r4, r5, r6, pc}
    7f86:	4620      	mov	r0, r4
    7f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f8c:	2101      	movs	r1, #1
    7f8e:	f7ff bec1 	b.w	7d14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7f92:	0000      	.short	0x0000
    7f94:	20001060 	.word	0x20001060
    7f98:	2000013c 	.word	0x2000013c
    7f9c:	b510      	push	{r4, lr}
    7f9e:	4c12      	ldr	r4, [pc, #72]	; (7fe8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    7fa0:	6820      	ldr	r0, [r4, #0]
    7fa2:	f000 f825 	bl	7ff0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7fa6:	6820      	ldr	r0, [r4, #0]
    7fa8:	f007 ff51 	bl	fe4e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7fac:	2800      	cmp	r0, #0
    7fae:	6820      	ldr	r0, [r4, #0]
    7fb0:	d00b      	beq.n	7fca <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    7fb2:	490e      	ldr	r1, [pc, #56]	; (7fec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7fb4:	780a      	ldrb	r2, [r1, #0]
    7fb6:	2a02      	cmp	r2, #2
    7fb8:	d00b      	beq.n	7fd2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7fba:	780a      	ldrb	r2, [r1, #0]
    7fbc:	2a03      	cmp	r2, #3
    7fbe:	d008      	beq.n	7fd2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7fc0:	f640 31c6 	movw	r1, #3014	; 0xbc6
    7fc4:	202d      	movs	r0, #45	; 0x2d
    7fc6:	f7fd fab5 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fce:	f000 ba0f 	b.w	83f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7fd2:	68a2      	ldr	r2, [r4, #8]
    7fd4:	7809      	ldrb	r1, [r1, #0]
    7fd6:	68d2      	ldr	r2, [r2, #12]
    7fd8:	f06f 0307 	mvn.w	r3, #7
    7fdc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7fe0:	5851      	ldr	r1, [r2, r1]
    7fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fe6:	4708      	bx	r1
    7fe8:	2000013c 	.word	0x2000013c
    7fec:	20001060 	.word	0x20001060
    7ff0:	b510      	push	{r4, lr}
    7ff2:	7b01      	ldrb	r1, [r0, #12]
    7ff4:	b109      	cbz	r1, 7ffa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    7ff6:	f007 fe65 	bl	fcc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    7ffa:	4805      	ldr	r0, [pc, #20]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7ffc:	7b80      	ldrb	r0, [r0, #14]
    7ffe:	2800      	cmp	r0, #0
    8000:	d005      	beq.n	800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    8002:	f003 ff2b 	bl	be5c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    800a:	f003 bd4d 	b.w	baa8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    800e:	bd10      	pop	{r4, pc}
    8010:	20001060 	.word	0x20001060

00008014 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    8014:	b5f0      	push	{r4, r5, r6, r7, lr}
    8016:	4d59      	ldr	r5, [pc, #356]	; (817c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    8018:	4604      	mov	r4, r0
    801a:	b08b      	sub	sp, #44	; 0x2c
    801c:	7828      	ldrb	r0, [r5, #0]
    801e:	bbe8      	cbnz	r0, 809c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    8020:	7820      	ldrb	r0, [r4, #0]
    8022:	28ff      	cmp	r0, #255	; 0xff
    8024:	d03d      	beq.n	80a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    8026:	2000      	movs	r0, #0
    8028:	81a8      	strh	r0, [r5, #12]
    802a:	6068      	str	r0, [r5, #4]
    802c:	7068      	strb	r0, [r5, #1]
    802e:	70a8      	strb	r0, [r5, #2]
    8030:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    8034:	4b52      	ldr	r3, [pc, #328]	; (8180 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    8036:	af06      	add	r7, sp, #24
    8038:	4e52      	ldr	r6, [pc, #328]	; (8184 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    803a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    803c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    8040:	68b0      	ldr	r0, [r6, #8]
    8042:	6840      	ldr	r0, [r0, #4]
    8044:	9009      	str	r0, [sp, #36]	; 0x24
    8046:	a806      	add	r0, sp, #24
    8048:	f004 f826 	bl	c098 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    804c:	f004 f8f4 	bl	c238 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    8050:	f004 fb68 	bl	c724 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    8054:	f003 ff02 	bl	be5c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8058:	f003 fd26 	bl	baa8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    805c:	484a      	ldr	r0, [pc, #296]	; (8188 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    805e:	f004 fa3b 	bl	c4d8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    8062:	4847      	ldr	r0, [pc, #284]	; (8180 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    8064:	1f00      	subs	r0, r0, #4
    8066:	f004 fa41 	bl	c4ec <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    806a:	f104 0020 	add.w	r0, r4, #32
    806e:	4607      	mov	r7, r0
    8070:	f007 fea0 	bl	fdb4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    8074:	4638      	mov	r0, r7
    8076:	f007 fe62 	bl	fd3e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    807a:	4601      	mov	r1, r0
    807c:	4620      	mov	r0, r4
    807e:	f007 fe16 	bl	fcae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    8082:	f994 000e 	ldrsb.w	r0, [r4, #14]
    8086:	f004 f95b 	bl	c340 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    808a:	7921      	ldrb	r1, [r4, #4]
    808c:	2000      	movs	r0, #0
    808e:	f003 ff97 	bl	bfc0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    8092:	2101      	movs	r1, #1
    8094:	60a8      	str	r0, [r5, #8]
    8096:	b138      	cbz	r0, 80a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x94>
    8098:	7ea0      	ldrb	r0, [r4, #26]
    809a:	e000      	b.n	809e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    809c:	e001      	b.n	80a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    809e:	b950      	cbnz	r0, 80b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa2>
    80a0:	e004      	b.n	80ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x98>
    80a2:	200c      	movs	r0, #12
    80a4:	b00b      	add	sp, #44	; 0x2c
    80a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80a8:	7029      	strb	r1, [r5, #0]
    80aa:	e064      	b.n	8176 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    80ac:	7e20      	ldrb	r0, [r4, #24]
    80ae:	b910      	cbnz	r0, 80b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa2>
    80b0:	78a0      	ldrb	r0, [r4, #2]
    80b2:	0740      	lsls	r0, r0, #29
    80b4:	d522      	bpl.n	80fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    80b6:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
    80ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    80be:	4050      	eors	r0, r2
    80c0:	ea70 0101 	orns	r1, r0, r1
    80c4:	d01a      	beq.n	80fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    80c6:	f7fb fe5d 	bl	3d84 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    80ca:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    80ce:	1a80      	subs	r0, r0, r2
    80d0:	4199      	sbcs	r1, r3
    80d2:	d313      	bcc.n	80fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    80d4:	f7fe ff1a 	bl	6f0c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    80d8:	492c      	ldr	r1, [pc, #176]	; (818c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    80da:	fba0 2301 	umull	r2, r3, r0, r1
    80de:	f104 0040 	add.w	r0, r4, #64	; 0x40
    80e2:	f007 fdfa 	bl	fcda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    80e6:	2101      	movs	r1, #1
    80e8:	4620      	mov	r0, r4
    80ea:	f007 fda4 	bl	fc36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    80ee:	78a0      	ldrb	r0, [r4, #2]
    80f0:	0740      	lsls	r0, r0, #29
    80f2:	d503      	bpl.n	80fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe8>
    80f4:	2101      	movs	r1, #1
    80f6:	4620      	mov	r0, r4
    80f8:	f000 fabc 	bl	8674 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>
    80fc:	f104 0130 	add.w	r1, r4, #48	; 0x30
    8100:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8102:	f006 fce1 	bl	eac8 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    8106:	f104 0138 	add.w	r1, r4, #56	; 0x38
    810a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    810c:	f006 fcdf 	bl	eace <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    8110:	f7fe ff54 	bl	6fbc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    8114:	6870      	ldr	r0, [r6, #4]
    8116:	1cc0      	adds	r0, r0, #3
    8118:	f006 fdef 	bl	ecfa <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    811c:	73a8      	strb	r0, [r5, #14]
    811e:	78a0      	ldrb	r0, [r4, #2]
    8120:	07c0      	lsls	r0, r0, #31
    8122:	d028      	beq.n	8176 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    8124:	a903      	add	r1, sp, #12
    8126:	2000      	movs	r0, #0
    8128:	f006 fba4 	bl	e874 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    812c:	b120      	cbz	r0, 8138 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x124>
    812e:	f640 118c 	movw	r1, #2444	; 0x98c
    8132:	202d      	movs	r0, #45	; 0x2d
    8134:	f7fd f9fe 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8138:	20ff      	movs	r0, #255	; 0xff
    813a:	73e8      	strb	r0, [r5, #15]
    813c:	69e6      	ldr	r6, [r4, #28]
    813e:	f106 070a 	add.w	r7, r6, #10
    8142:	e013      	b.n	816c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    8144:	9c05      	ldr	r4, [sp, #20]
    8146:	42b4      	cmp	r4, r6
    8148:	d010      	beq.n	816c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    814a:	7a72      	ldrb	r2, [r6, #9]
    814c:	7a60      	ldrb	r0, [r4, #9]
    814e:	463b      	mov	r3, r7
    8150:	f104 010a 	add.w	r1, r4, #10
    8154:	f006 fd46 	bl	ebe4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    8158:	b140      	cbz	r0, 816c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    815a:	78a0      	ldrb	r0, [r4, #2]
    815c:	73e8      	strb	r0, [r5, #15]
    815e:	f8d4 0003 	ldr.w	r0, [r4, #3]
    8162:	6128      	str	r0, [r5, #16]
    8164:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    8168:	82a8      	strh	r0, [r5, #20]
    816a:	e004      	b.n	8176 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    816c:	a803      	add	r0, sp, #12
    816e:	f7fd fc25 	bl	59bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8172:	2800      	cmp	r0, #0
    8174:	d0e6      	beq.n	8144 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x130>
    8176:	2000      	movs	r0, #0
    8178:	e794      	b.n	80a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    817a:	0000      	.short	0x0000
    817c:	20001060 	.word	0x20001060
    8180:	00008788 	.word	0x00008788
    8184:	2000013c 	.word	0x2000013c
    8188:	8e89bed6 	.word	0x8e89bed6
    818c:	000f4240 	.word	0x000f4240
    8190:	b510      	push	{r4, lr}
    8192:	4604      	mov	r4, r0
    8194:	f7ff ff3e 	bl	8014 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    8198:	2800      	cmp	r0, #0
    819a:	d108      	bne.n	81ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    819c:	4804      	ldr	r0, [pc, #16]	; (81b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    819e:	7800      	ldrb	r0, [r0, #0]
    81a0:	2801      	cmp	r0, #1
    81a2:	d003      	beq.n	81ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    81a4:	2100      	movs	r1, #0
    81a6:	4620      	mov	r0, r4
    81a8:	f7ff fdb4 	bl	7d14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    81ac:	2000      	movs	r0, #0
    81ae:	bd10      	pop	{r4, pc}
    81b0:	20001060 	.word	0x20001060
    81b4:	480a      	ldr	r0, [pc, #40]	; (81e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    81b6:	b510      	push	{r4, lr}
    81b8:	490a      	ldr	r1, [pc, #40]	; (81e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    81ba:	6804      	ldr	r4, [r0, #0]
    81bc:	7808      	ldrb	r0, [r1, #0]
    81be:	2800      	cmp	r0, #0
    81c0:	d00d      	beq.n	81de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    81c2:	7808      	ldrb	r0, [r1, #0]
    81c4:	2802      	cmp	r0, #2
    81c6:	d002      	beq.n	81ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    81c8:	7808      	ldrb	r0, [r1, #0]
    81ca:	2803      	cmp	r0, #3
    81cc:	d102      	bne.n	81d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    81ce:	4620      	mov	r0, r4
    81d0:	f7ff ff0e 	bl	7ff0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    81d4:	4620      	mov	r0, r4
    81d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    81da:	f000 b909 	b.w	83f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    81de:	bd10      	pop	{r4, pc}
    81e0:	2000013c 	.word	0x2000013c
    81e4:	20001060 	.word	0x20001060
    81e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81ec:	4604      	mov	r4, r0
    81ee:	4827      	ldr	r0, [pc, #156]	; (828c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    81f0:	460d      	mov	r5, r1
    81f2:	6840      	ldr	r0, [r0, #4]
    81f4:	f004 f8c6 	bl	c384 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    81f8:	4e25      	ldr	r6, [pc, #148]	; (8290 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    81fa:	2004      	movs	r0, #4
    81fc:	7030      	strb	r0, [r6, #0]
    81fe:	b325      	cbz	r5, 824a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    8200:	8860      	ldrh	r0, [r4, #2]
    8202:	2810      	cmp	r0, #16
    8204:	d02a      	beq.n	825c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    8206:	f104 0020 	add.w	r0, r4, #32
    820a:	4680      	mov	r8, r0
    820c:	68b5      	ldr	r5, [r6, #8]
    820e:	f007 fd8a 	bl	fd26 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    8212:	4607      	mov	r7, r0
    8214:	4640      	mov	r0, r8
    8216:	f007 fdaf 	bl	fd78 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    821a:	1a38      	subs	r0, r7, r0
    821c:	1e40      	subs	r0, r0, #1
    821e:	b2c0      	uxtb	r0, r0
    8220:	8861      	ldrh	r1, [r4, #2]
    8222:	2228      	movs	r2, #40	; 0x28
    8224:	f000 faec 	bl	8800 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    8228:	4405      	add	r5, r0
    822a:	78a0      	ldrb	r0, [r4, #2]
    822c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    8230:	b130      	cbz	r0, 8240 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    8232:	6870      	ldr	r0, [r6, #4]
    8234:	4405      	add	r5, r0
    8236:	f007 fdf8 	bl	fe2a <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    823a:	4428      	add	r0, r5
    823c:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    8240:	7922      	ldrb	r2, [r4, #4]
    8242:	4629      	mov	r1, r5
    8244:	2000      	movs	r0, #0
    8246:	f004 f8b3 	bl	c3b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    824a:	8860      	ldrh	r0, [r4, #2]
    824c:	2813      	cmp	r0, #19
    824e:	d013      	beq.n	8278 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    8250:	dc09      	bgt.n	8266 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    8252:	2810      	cmp	r0, #16
    8254:	d017      	beq.n	8286 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    8256:	2812      	cmp	r0, #18
    8258:	d109      	bne.n	826e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    825a:	e00d      	b.n	8278 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    825c:	7921      	ldrb	r1, [r4, #4]
    825e:	2000      	movs	r0, #0
    8260:	f003 fe74 	bl	bf4c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    8264:	e7f1      	b.n	824a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    8266:	2815      	cmp	r0, #21
    8268:	d006      	beq.n	8278 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    826a:	281d      	cmp	r0, #29
    826c:	d004      	beq.n	8278 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    826e:	f640 5148 	movw	r1, #3400	; 0xd48
    8272:	202d      	movs	r0, #45	; 0x2d
    8274:	f7fd f95e 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8278:	7922      	ldrb	r2, [r4, #4]
    827a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    827e:	2101      	movs	r1, #1
    8280:	2000      	movs	r0, #0
    8282:	f004 b8f7 	b.w	c474 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    828a:	0000      	.short	0x0000
    828c:	2000013c 	.word	0x2000013c
    8290:	20001060 	.word	0x20001060
    8294:	b510      	push	{r4, lr}
    8296:	4604      	mov	r4, r0
    8298:	7800      	ldrb	r0, [r0, #0]
    829a:	460b      	mov	r3, r1
    829c:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    82a0:	29ff      	cmp	r1, #255	; 0xff
    82a2:	d010      	beq.n	82c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    82a4:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
    82a8:	1e51      	subs	r1, r2, #1
    82aa:	4618      	mov	r0, r3
    82ac:	f7fe fe02 	bl	6eb4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    82b0:	b130      	cbz	r0, 82c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    82b2:	f894 00b6 	ldrb.w	r0, [r4, #182]	; 0xb6
    82b6:	f040 0002 	orr.w	r0, r0, #2
    82ba:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
    82be:	e011      	b.n	82e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    82c0:	f640 7193 	movw	r1, #3987	; 0xf93
    82c4:	e023      	b.n	830e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fa>
    82c6:	4813      	ldr	r0, [pc, #76]	; (8314 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>)
    82c8:	6840      	ldr	r0, [r0, #4]
    82ca:	7801      	ldrb	r1, [r0, #0]
    82cc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    82d0:	f884 10b6 	strb.w	r1, [r4, #182]	; 0xb6
    82d4:	f8d0 1003 	ldr.w	r1, [r0, #3]
    82d8:	f8c4 10b7 	str.w	r1, [r4, #183]	; 0xb7
    82dc:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    82e0:	f8a4 00bb 	strh.w	r0, [r4, #187]	; 0xbb
    82e4:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    82e8:	287f      	cmp	r0, #127	; 0x7f
    82ea:	d00e      	beq.n	830a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f6>
    82ec:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    82f0:	207f      	movs	r0, #127	; 0x7f
    82f2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    82f6:	2219      	movs	r2, #25
    82f8:	4621      	mov	r1, r4
    82fa:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    82fe:	f7ff f941 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8306:	f7ff ba0f 	b.w	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    830a:	f640 51fb 	movw	r1, #3579	; 0xdfb
    830e:	202d      	movs	r0, #45	; 0x2d
    8310:	f7fd f910 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8314:	2000013c 	.word	0x2000013c
    8318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    831c:	4690      	mov	r8, r2
    831e:	460e      	mov	r6, r1
    8320:	4604      	mov	r4, r0
    8322:	2903      	cmp	r1, #3
    8324:	d004      	beq.n	8330 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    8326:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    832a:	b108      	cbz	r0, 8330 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    832c:	2001      	movs	r0, #1
    832e:	e000      	b.n	8332 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    8330:	2000      	movs	r0, #0
    8332:	4681      	mov	r9, r0
    8334:	f003 fdac 	bl	be90 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    8338:	4605      	mov	r5, r0
    833a:	2e03      	cmp	r6, #3
    833c:	d003      	beq.n	8346 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    833e:	2701      	movs	r7, #1
    8340:	2e05      	cmp	r6, #5
    8342:	d005      	beq.n	8350 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    8344:	e008      	b.n	8358 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x344>
    8346:	78a0      	ldrb	r0, [r4, #2]
    8348:	2702      	movs	r7, #2
    834a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    834e:	e001      	b.n	8354 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    8350:	78a0      	ldrb	r0, [r4, #2]
    8352:	07c0      	lsls	r0, r0, #31
    8354:	2800      	cmp	r0, #0
    8356:	d042      	beq.n	83de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    8358:	f1b9 0f00 	cmp.w	r9, #0
    835c:	d13e      	bne.n	83dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    835e:	4822      	ldr	r0, [pc, #136]	; (83e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    8360:	7b80      	ldrb	r0, [r0, #14]
    8362:	b140      	cbz	r0, 8376 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    8364:	f006 fccc 	bl	ed00 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    8368:	f888 0000 	strb.w	r0, [r8]
    836c:	28ff      	cmp	r0, #255	; 0xff
    836e:	d002      	beq.n	8376 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    8370:	f7fe fdba 	bl	6ee8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    8374:	4305      	orrs	r5, r0
    8376:	4e1d      	ldr	r6, [pc, #116]	; (83ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>)
    8378:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    837c:	f104 0350 	add.w	r3, r4, #80	; 0x50
    8380:	6871      	ldr	r1, [r6, #4]
    8382:	f811 0b03 	ldrb.w	r0, [r1], #3
    8386:	f3c0 1080 	ubfx	r0, r0, #6, #1
    838a:	f006 fc2b 	bl	ebe4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    838e:	f898 1000 	ldrb.w	r1, [r8]
    8392:	29ff      	cmp	r1, #255	; 0xff
    8394:	d004      	beq.n	83a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    8396:	b990      	cbnz	r0, 83be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    8398:	7e60      	ldrb	r0, [r4, #25]
    839a:	4288      	cmp	r0, r1
    839c:	d00f      	beq.n	83be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    839e:	e008      	b.n	83b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    83a0:	b138      	cbz	r0, 83b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    83a2:	6871      	ldr	r1, [r6, #4]
    83a4:	f811 0b03 	ldrb.w	r0, [r1], #3
    83a8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    83ac:	f007 fc2a 	bl	fc04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    83b0:	b128      	cbz	r0, 83be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    83b2:	2000      	movs	r0, #0
    83b4:	78a1      	ldrb	r1, [r4, #2]
    83b6:	0749      	lsls	r1, r1, #29
    83b8:	d503      	bpl.n	83c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    83ba:	b990      	cbnz	r0, 83e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    83bc:	e00e      	b.n	83dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    83be:	2001      	movs	r0, #1
    83c0:	e7f8      	b.n	83b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    83c2:	b975      	cbnz	r5, 83e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    83c4:	7be0      	ldrb	r0, [r4, #15]
    83c6:	b108      	cbz	r0, 83cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b8>
    83c8:	42b8      	cmp	r0, r7
    83ca:	d107      	bne.n	83dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    83cc:	6871      	ldr	r1, [r6, #4]
    83ce:	f811 0b03 	ldrb.w	r0, [r1], #3
    83d2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    83d6:	f007 fc15 	bl	fc04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    83da:	b110      	cbz	r0, 83e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ce>
    83dc:	2000      	movs	r0, #0
    83de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    83e2:	2001      	movs	r0, #1
    83e4:	e7fb      	b.n	83de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ca>
    83e6:	0000      	.short	0x0000
    83e8:	20001060 	.word	0x20001060
    83ec:	2000013c 	.word	0x2000013c
    83f0:	b570      	push	{r4, r5, r6, lr}
    83f2:	4604      	mov	r4, r0
    83f4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    83f6:	4d13      	ldr	r5, [pc, #76]	; (8444 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>)
    83f8:	1c40      	adds	r0, r0, #1
    83fa:	8520      	strh	r0, [r4, #40]	; 0x28
    83fc:	7ba8      	ldrb	r0, [r5, #14]
    83fe:	2600      	movs	r6, #0
    8400:	b120      	cbz	r0, 840c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f8>
    8402:	f003 fd2b 	bl	be5c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8406:	f003 fb4f 	bl	baa8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    840a:	73ae      	strb	r6, [r5, #14]
    840c:	702e      	strb	r6, [r5, #0]
    840e:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    8412:	b108      	cbz	r0, 8418 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    8414:	2101      	movs	r1, #1
    8416:	e00f      	b.n	8438 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    8418:	7b60      	ldrb	r0, [r4, #13]
    841a:	b160      	cbz	r0, 8436 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    841c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    841e:	4288      	cmp	r0, r1
    8420:	d809      	bhi.n	8436 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x422>
    8422:	2101      	movs	r1, #1
    8424:	4620      	mov	r0, r4
    8426:	f007 fd24 	bl	fe72 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    842a:	78a0      	ldrb	r0, [r4, #2]
    842c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8430:	07c0      	lsls	r0, r0, #31
    8432:	f7ff b979 	b.w	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8436:	2100      	movs	r1, #0
    8438:	4620      	mov	r0, r4
    843a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    843e:	f007 bd18 	b.w	fe72 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    8442:	0000      	.short	0x0000
    8444:	20001060 	.word	0x20001060
    8448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    844a:	4604      	mov	r4, r0
    844c:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    8450:	4616      	mov	r6, r2
    8452:	460d      	mov	r5, r1
    8454:	f88d 0000 	strb.w	r0, [sp]
    8458:	9800      	ldr	r0, [sp, #0]
    845a:	9000      	str	r0, [sp, #0]
    845c:	f89d 0000 	ldrb.w	r0, [sp]
    8460:	b110      	cbz	r0, 8468 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    8462:	f640 31fa 	movw	r1, #3066	; 0xbfa
    8466:	e055      	b.n	8514 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x500>
    8468:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
    846c:	2700      	movs	r7, #0
    846e:	8828      	ldrh	r0, [r5, #0]
    8470:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
    8474:	2b00      	cmp	r3, #0
    8476:	d14a      	bne.n	850e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    8478:	6928      	ldr	r0, [r5, #16]
    847a:	f006 fc90 	bl	ed9e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    847e:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    8482:	8b28      	ldrh	r0, [r5, #24]
    8484:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
    8488:	8b68      	ldrh	r0, [r5, #26]
    848a:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    848e:	f895 01c7 	ldrb.w	r0, [r5, #455]	; 0x1c7
    8492:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    8496:	7e20      	ldrb	r0, [r4, #24]
    8498:	f104 0149 	add.w	r1, r4, #73	; 0x49
    849c:	460d      	mov	r5, r1
    849e:	b120      	cbz	r0, 84aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x496>
    84a0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    84a4:	f007 fa75 	bl	f992 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    84a8:	b940      	cbnz	r0, 84bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>
    84aa:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    84ae:	b170      	cbz	r0, 84ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    84b0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    84b4:	4629      	mov	r1, r5
    84b6:	f007 fa63 	bl	f980 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    84ba:	b140      	cbz	r0, 84ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    84bc:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    84c0:	f8c4 007a 	str.w	r0, [r4, #122]	; 0x7a
    84c4:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    84c8:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    84cc:	e003      	b.n	84d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    84ce:	f8c4 707a 	str.w	r7, [r4, #122]	; 0x7a
    84d2:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    84d6:	4814      	ldr	r0, [pc, #80]	; (8528 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>)
    84d8:	2eff      	cmp	r6, #255	; 0xff
    84da:	6840      	ldr	r0, [r0, #4]
    84dc:	7801      	ldrb	r1, [r0, #0]
    84de:	f3c1 1180 	ubfx	r1, r1, #6, #1
    84e2:	f884 1073 	strb.w	r1, [r4, #115]	; 0x73
    84e6:	f850 1f03 	ldr.w	r1, [r0, #3]!
    84ea:	d016      	beq.n	851a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x506>
    84ec:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    84f0:	8880      	ldrh	r0, [r0, #4]
    84f2:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    84f6:	f104 0274 	add.w	r2, r4, #116	; 0x74
    84fa:	1e51      	subs	r1, r2, #1
    84fc:	4630      	mov	r0, r6
    84fe:	f7fe fcd9 	bl	6eb4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    8502:	b128      	cbz	r0, 8510 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fc>
    8504:	f814 0f73 	ldrb.w	r0, [r4, #115]!
    8508:	f040 0002 	orr.w	r0, r0, #2
    850c:	7020      	strb	r0, [r4, #0]
    850e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8510:	f640 411b 	movw	r1, #3099	; 0xc1b
    8514:	202d      	movs	r0, #45	; 0x2d
    8516:	f7fd f80d 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    851a:	f844 1f74 	str.w	r1, [r4, #116]!
    851e:	8880      	ldrh	r0, [r0, #4]
    8520:	80a0      	strh	r0, [r4, #4]
    8522:	60e7      	str	r7, [r4, #12]
    8524:	8227      	strh	r7, [r4, #16]
    8526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8528:	2000013c 	.word	0x2000013c
    852c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    852e:	4604      	mov	r4, r0
    8530:	20ff      	movs	r0, #255	; 0xff
    8532:	f88d 0000 	strb.w	r0, [sp]
    8536:	2601      	movs	r6, #1
    8538:	466a      	mov	r2, sp
    853a:	2105      	movs	r1, #5
    853c:	4620      	mov	r0, r4
    853e:	f7ff feeb 	bl	8318 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    8542:	b160      	cbz	r0, 855e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54a>
    8544:	4d2c      	ldr	r5, [pc, #176]	; (85f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    8546:	4f2b      	ldr	r7, [pc, #172]	; (85f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    8548:	6869      	ldr	r1, [r5, #4]
    854a:	7bfa      	ldrb	r2, [r7, #15]
    854c:	f107 0310 	add.w	r3, r7, #16
    8550:	f811 0b03 	ldrb.w	r0, [r1], #3
    8554:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8558:	f006 fb44 	bl	ebe4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    855c:	b110      	cbz	r0, 8564 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x550>
    855e:	2600      	movs	r6, #0
    8560:	4630      	mov	r0, r6
    8562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8564:	686a      	ldr	r2, [r5, #4]
    8566:	69e0      	ldr	r0, [r4, #28]
    8568:	7812      	ldrb	r2, [r2, #0]
    856a:	f810 1f8e 	ldrb.w	r1, [r0, #142]!
    856e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    8572:	4011      	ands	r1, r2
    8574:	7001      	strb	r1, [r0, #0]
    8576:	2201      	movs	r2, #1
    8578:	4620      	mov	r0, r4
    857a:	69e1      	ldr	r1, [r4, #28]
    857c:	f000 f8a8 	bl	86d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6bc>
    8580:	2300      	movs	r3, #0
    8582:	f89d 2000 	ldrb.w	r2, [sp]
    8586:	4620      	mov	r0, r4
    8588:	69e1      	ldr	r1, [r4, #28]
    858a:	f7ff ff5d 	bl	8448 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    858e:	220e      	movs	r2, #14
    8590:	4621      	mov	r1, r4
    8592:	f104 0064 	add.w	r0, r4, #100	; 0x64
    8596:	f7fe fff5 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    859a:	69e0      	ldr	r0, [r4, #28]
    859c:	2203      	movs	r2, #3
    859e:	8801      	ldrh	r1, [r0, #0]
    85a0:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
    85a4:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    85a8:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    85ac:	4621      	mov	r1, r4
    85ae:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    85b2:	f7fe ffe7 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    85b6:	f7ff f8b7 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    85ba:	2000      	movs	r0, #0
    85bc:	7038      	strb	r0, [r7, #0]
    85be:	2200      	movs	r2, #0
    85c0:	4621      	mov	r1, r4
    85c2:	69e0      	ldr	r0, [r4, #28]
    85c4:	f000 fa74 	bl	8ab0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    85c8:	69e0      	ldr	r0, [r4, #28]
    85ca:	8800      	ldrh	r0, [r0, #0]
    85cc:	f7fd fbda 	bl	5d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    85d0:	f006 f822 	bl	e618 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    85d4:	6868      	ldr	r0, [r5, #4]
    85d6:	69e1      	ldr	r1, [r4, #28]
    85d8:	f8d0 2003 	ldr.w	r2, [r0, #3]
    85dc:	f841 2f03 	str.w	r2, [r1, #3]!
    85e0:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    85e4:	808a      	strh	r2, [r1, #4]
    85e6:	7800      	ldrb	r0, [r0, #0]
    85e8:	69e1      	ldr	r1, [r4, #28]
    85ea:	f3c0 1080 	ubfx	r0, r0, #6, #1
    85ee:	7088      	strb	r0, [r1, #2]
    85f0:	e7b6      	b.n	8560 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54c>
    85f2:	0000      	.short	0x0000
    85f4:	20001060 	.word	0x20001060
    85f8:	2000013c 	.word	0x2000013c
    85fc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    8600:	4604      	mov	r4, r0
    8602:	20ff      	movs	r0, #255	; 0xff
    8604:	f88d 0000 	strb.w	r0, [sp]
    8608:	2501      	movs	r5, #1
    860a:	466a      	mov	r2, sp
    860c:	2103      	movs	r1, #3
    860e:	4620      	mov	r0, r4
    8610:	f7ff fe82 	bl	8318 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    8614:	b330      	cbz	r0, 8664 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x650>
    8616:	7b20      	ldrb	r0, [r4, #12]
    8618:	2700      	movs	r7, #0
    861a:	b168      	cbz	r0, 8638 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
    861c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    8620:	f88d 0004 	strb.w	r0, [sp, #4]
    8624:	9801      	ldr	r0, [sp, #4]
    8626:	9001      	str	r0, [sp, #4]
    8628:	f89d 0004 	ldrb.w	r0, [sp, #4]
    862c:	b920      	cbnz	r0, 8638 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
    862e:	f89d 1000 	ldrb.w	r1, [sp]
    8632:	4620      	mov	r0, r4
    8634:	f7ff fe2e 	bl	8294 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    8638:	4e0c      	ldr	r6, [pc, #48]	; (866c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    863a:	2104      	movs	r1, #4
    863c:	6870      	ldr	r0, [r6, #4]
    863e:	8007      	strh	r7, [r0, #0]
    8640:	f006 fef3 	bl	f42a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8644:	4620      	mov	r0, r4
    8646:	f000 f88b 	bl	8760 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x74c>
    864a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    864e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    8650:	6870      	ldr	r0, [r6, #4]
    8652:	f006 ff21 	bl	f498 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    8656:	4906      	ldr	r1, [pc, #24]	; (8670 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>)
    8658:	2005      	movs	r0, #5
    865a:	7008      	strb	r0, [r1, #0]
    865c:	6870      	ldr	r0, [r6, #4]
    865e:	f003 fe91 	bl	c384 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8662:	e000      	b.n	8666 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x652>
    8664:	2500      	movs	r5, #0
    8666:	4628      	mov	r0, r5
    8668:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    866c:	2000013c 	.word	0x2000013c
    8670:	20001060 	.word	0x20001060
    8674:	b570      	push	{r4, r5, r6, lr}
    8676:	4604      	mov	r4, r0
    8678:	460e      	mov	r6, r1
    867a:	7e40      	ldrb	r0, [r0, #25]
    867c:	f7fe fbf4 	bl	6e68 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    8680:	0005      	movs	r5, r0
    8682:	d019      	beq.n	86b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>
    8684:	2110      	movs	r1, #16
    8686:	f006 fd28 	bl	f0da <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    868a:	2800      	cmp	r0, #0
    868c:	d114      	bne.n	86b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>
    868e:	2001      	movs	r0, #1
    8690:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    8694:	f104 0157 	add.w	r1, r4, #87	; 0x57
    8698:	4632      	mov	r2, r6
    869a:	460c      	mov	r4, r1
    869c:	4628      	mov	r0, r5
    869e:	f006 fad1 	bl	ec44 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    86a2:	4621      	mov	r1, r4
    86a4:	4c05      	ldr	r4, [pc, #20]	; (86bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a8>)
    86a6:	6860      	ldr	r0, [r4, #4]
    86a8:	f006 feda 	bl	f460 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    86ac:	6860      	ldr	r0, [r4, #4]
    86ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    86b2:	2101      	movs	r1, #1
    86b4:	f006 beda 	b.w	f46c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    86b8:	bd70      	pop	{r4, r5, r6, pc}
    86ba:	0000      	.short	0x0000
    86bc:	2000013c 	.word	0x2000013c
    86c0:	4802      	ldr	r0, [pc, #8]	; (86cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>)
    86c2:	2101      	movs	r1, #1
    86c4:	6800      	ldr	r0, [r0, #0]
    86c6:	f7ff bb25 	b.w	7d14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    86ca:	0000      	.short	0x0000
    86cc:	2000013c 	.word	0x2000013c
    86d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86d4:	4e21      	ldr	r6, [pc, #132]	; (875c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>)
    86d6:	4680      	mov	r8, r0
    86d8:	460c      	mov	r4, r1
    86da:	6870      	ldr	r0, [r6, #4]
    86dc:	4615      	mov	r5, r2
    86de:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    86e2:	6161      	str	r1, [r4, #20]
    86e4:	8881      	ldrh	r1, [r0, #4]
    86e6:	83a1      	strh	r1, [r4, #28]
    86e8:	7981      	ldrb	r1, [r0, #6]
    86ea:	77a1      	strb	r1, [r4, #30]
    86ec:	8940      	ldrh	r0, [r0, #10]
    86ee:	f006 fb52 	bl	ed96 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    86f2:	4607      	mov	r7, r0
    86f4:	6120      	str	r0, [r4, #16]
    86f6:	6870      	ldr	r0, [r6, #4]
    86f8:	4639      	mov	r1, r7
    86fa:	7d80      	ldrb	r0, [r0, #22]
    86fc:	f006 fce4 	bl	f0c8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8700:	8420      	strh	r0, [r4, #32]
    8702:	6870      	ldr	r0, [r6, #4]
    8704:	4639      	mov	r1, r7
    8706:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    870a:	f006 fcd9 	bl	f0c0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    870e:	6260      	str	r0, [r4, #36]	; 0x24
    8710:	6870      	ldr	r0, [r6, #4]
    8712:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    8716:	8321      	strh	r1, [r4, #24]
    8718:	8841      	ldrh	r1, [r0, #2]
    871a:	8361      	strh	r1, [r4, #26]
    871c:	6841      	ldr	r1, [r0, #4]
    871e:	f8c4 108f 	str.w	r1, [r4, #143]	; 0x8f
    8722:	7a01      	ldrb	r1, [r0, #8]
    8724:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
    8728:	7a41      	ldrb	r1, [r0, #9]
    872a:	f001 011f 	and.w	r1, r1, #31
    872e:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    8732:	7a40      	ldrb	r0, [r0, #9]
    8734:	0940      	lsrs	r0, r0, #5
    8736:	f884 01c7 	strb.w	r0, [r4, #455]	; 0x1c7
    873a:	f104 0066 	add.w	r0, r4, #102	; 0x66
    873e:	7205      	strb	r5, [r0, #8]
    8740:	7245      	strb	r5, [r0, #9]
    8742:	21ff      	movs	r1, #255	; 0xff
    8744:	7281      	strb	r1, [r0, #10]
    8746:	2100      	movs	r1, #0
    8748:	3836      	subs	r0, #54	; 0x36
    874a:	f007 f887 	bl	f85c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    874e:	f898 000e 	ldrb.w	r0, [r8, #14]
    8752:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
    8756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    875a:	0000      	.short	0x0000
    875c:	2000013c 	.word	0x2000013c
    8760:	b570      	push	{r4, r5, r6, lr}
    8762:	4d07      	ldr	r5, [pc, #28]	; (8780 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x76c>)
    8764:	4604      	mov	r4, r0
    8766:	f100 0149 	add.w	r1, r0, #73	; 0x49
    876a:	6868      	ldr	r0, [r5, #4]
    876c:	f006 fe85 	bl	f47a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    8770:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    8774:	6868      	ldr	r0, [r5, #4]
    8776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    877a:	f006 be84 	b.w	f486 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    877e:	0000      	.short	0x0000
    8780:	2000013c 	.word	0x2000013c
    8784:	00555555 	.word	0x00555555
    8788:	00007f9d 	.word	0x00007f9d
    878c:	00007e29 	.word	0x00007e29
    8790:	00007f19 	.word	0x00007f19
    8794:	00000000 	.word	0x00000000
    8798:	00007ef1 	.word	0x00007ef1
    879c:	00007f49 	.word	0x00007f49
    87a0:	0000fc2b 	.word	0x0000fc2b
    87a4:	0000fc31 	.word	0x0000fc31
    87a8:	00008191 	.word	0x00008191
    87ac:	000081b5 	.word	0x000081b5
    87b0:	000086c1 	.word	0x000086c1
    87b4:	000087a4 	.word	0x000087a4
    87b8:	0000879c 	.word	0x0000879c
    87bc:	00008798 	.word	0x00008798

000087c0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    87c0:	b510      	push	{r4, lr}
    87c2:	1e42      	subs	r2, r0, #1
    87c4:	2a02      	cmp	r2, #2
    87c6:	d901      	bls.n	87cc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    87c8:	21ca      	movs	r1, #202	; 0xca
    87ca:	e009      	b.n	87e0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    87cc:	1e40      	subs	r0, r0, #1
    87ce:	2910      	cmp	r1, #16
    87d0:	d009      	beq.n	87e6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    87d2:	2912      	cmp	r1, #18
    87d4:	d00c      	beq.n	87f0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    87d6:	2913      	cmp	r1, #19
    87d8:	d00a      	beq.n	87f0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    87da:	2915      	cmp	r1, #21
    87dc:	d005      	beq.n	87ea <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    87de:	21d8      	movs	r1, #216	; 0xd8
    87e0:	202f      	movs	r0, #47	; 0x2f
    87e2:	f7fc fea7 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87e6:	4905      	ldr	r1, [pc, #20]	; (87fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    87e8:	e004      	b.n	87f4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    87ea:	4904      	ldr	r1, [pc, #16]	; (87fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    87ec:	1d89      	adds	r1, r1, #6
    87ee:	e001      	b.n	87f4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    87f0:	4902      	ldr	r1, [pc, #8]	; (87fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    87f2:	1f89      	subs	r1, r1, #6
    87f4:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    87f8:	bd10      	pop	{r4, pc}
    87fa:	0000      	.short	0x0000
    87fc:	0000fe42 	.word	0x0000fe42

00008800 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8800:	1e42      	subs	r2, r0, #1
    8802:	b510      	push	{r4, lr}
    8804:	b2d2      	uxtb	r2, r2
    8806:	2a01      	cmp	r2, #1
    8808:	d903      	bls.n	8812 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    880a:	291d      	cmp	r1, #29
    880c:	d001      	beq.n	8812 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    880e:	21ee      	movs	r1, #238	; 0xee
    8810:	e00d      	b.n	882e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    8812:	2913      	cmp	r1, #19
    8814:	d013      	beq.n	883e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    8816:	dc04      	bgt.n	8822 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    8818:	2910      	cmp	r1, #16
    881a:	d00b      	beq.n	8834 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    881c:	2912      	cmp	r1, #18
    881e:	d104      	bne.n	882a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    8820:	e00d      	b.n	883e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    8822:	2915      	cmp	r1, #21
    8824:	d008      	beq.n	8838 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    8826:	291d      	cmp	r1, #29
    8828:	d00e      	beq.n	8848 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    882a:	f44f 7181 	mov.w	r1, #258	; 0x102
    882e:	202f      	movs	r0, #47	; 0x2f
    8830:	f7fc fe80 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8834:	4807      	ldr	r0, [pc, #28]	; (8854 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8836:	e004      	b.n	8842 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    8838:	4806      	ldr	r0, [pc, #24]	; (8854 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    883a:	3008      	adds	r0, #8
    883c:	e001      	b.n	8842 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    883e:	4805      	ldr	r0, [pc, #20]	; (8854 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8840:	1d00      	adds	r0, r0, #4
    8842:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    8846:	bd10      	pop	{r4, pc}
    8848:	f240 315a 	movw	r1, #858	; 0x35a
    884c:	fb10 f001 	smulbb	r0, r0, r1
    8850:	bd10      	pop	{r4, pc}
    8852:	0000      	.short	0x0000
    8854:	0000fe30 	.word	0x0000fe30

00008858 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    8858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    885c:	4604      	mov	r4, r0
    885e:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    8862:	4616      	mov	r6, r2
    8864:	460f      	mov	r7, r1
    8866:	2800      	cmp	r0, #0
    8868:	d15e      	bne.n	8928 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    886a:	4621      	mov	r1, r4
    886c:	484d      	ldr	r0, [pc, #308]	; (89a4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    886e:	f7fb f8d7 	bl	3a20 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8872:	4605      	mov	r5, r0
    8874:	2820      	cmp	r0, #32
    8876:	d057      	beq.n	8928 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    8878:	2250      	movs	r2, #80	; 0x50
    887a:	2100      	movs	r1, #0
    887c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    8880:	f005 f844 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8884:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
    8888:	2501      	movs	r5, #1
    888a:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
    888e:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
    8892:	b137      	cbz	r7, 88a2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    8894:	f7ff f8c4 	bl	7a20 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    8898:	f000 0007 	and.w	r0, r0, #7
    889c:	1c40      	adds	r0, r0, #1
    889e:	f887 01f4 	strb.w	r0, [r7, #500]	; 0x1f4
    88a2:	4620      	mov	r0, r4
    88a4:	f007 fcb7 	bl	10216 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    88a8:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    88ac:	2002      	movs	r0, #2
    88ae:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
    88b2:	46a8      	mov	r8, r5
    88b4:	f884 50eb 	strb.w	r5, [r4, #235]	; 0xeb
    88b8:	2500      	movs	r5, #0
    88ba:	f804 5fe0 	strb.w	r5, [r4, #224]!
    88be:	f7fc f9bf 	bl	4c40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    88c2:	4607      	mov	r7, r0
    88c4:	f004 fe45 	bl	d552 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    88c8:	8921      	ldrh	r1, [r4, #8]
    88ca:	3ce0      	subs	r4, #224	; 0xe0
    88cc:	4288      	cmp	r0, r1
    88ce:	d800      	bhi.n	88d2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    88d0:	4608      	mov	r0, r1
    88d2:	4438      	add	r0, r7
    88d4:	30cc      	adds	r0, #204	; 0xcc
    88d6:	b287      	uxth	r7, r0
    88d8:	4620      	mov	r0, r4
    88da:	f007 f945 	bl	fb68 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    88de:	b330      	cbz	r0, 892e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    88e0:	f008 fe1b 	bl	1151a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    88e4:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    88e8:	b281      	uxth	r1, r0
    88ea:	4630      	mov	r0, r6
    88ec:	f004 fe65 	bl	d5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    88f0:	4430      	add	r0, r6
    88f2:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    88f6:	34c4      	adds	r4, #196	; 0xc4
    88f8:	f7fb fa44 	bl	3d84 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    88fc:	19c0      	adds	r0, r0, r7
    88fe:	4169      	adcs	r1, r5
    8900:	e9c4 010b 	strd	r0, r1, [r4, #44]	; 0x2c
    8904:	f804 5c03 	strb.w	r5, [r4, #-3]
    8908:	f884 8004 	strb.w	r8, [r4, #4]
    890c:	2001      	movs	r0, #1
    890e:	f007 fa88 	bl	fe22 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    8912:	f500 7088 	add.w	r0, r0, #272	; 0x110
    8916:	1a30      	subs	r0, r6, r0
    8918:	60a0      	str	r0, [r4, #8]
    891a:	f04f 30ff 	mov.w	r0, #4294967295
    891e:	0841      	lsrs	r1, r0, #1
    8920:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
    8924:	3cc4      	subs	r4, #196	; 0xc4
    8926:	e022      	b.n	896e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x116>
    8928:	200c      	movs	r0, #12
    892a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    892e:	4620      	mov	r0, r4
    8930:	f007 fbc4 	bl	100bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    8934:	f844 0fe4 	str.w	r0, [r4, #228]!
    8938:	f804 8c23 	strb.w	r8, [r4, #-35]
    893c:	f7fb fa22 	bl	3d84 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8940:	4680      	mov	r8, r0
    8942:	4689      	mov	r9, r1
    8944:	f7ff f86c 	bl	7a20 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    8948:	f242 7110 	movw	r1, #10000	; 0x2710
    894c:	fbb0 f2f1 	udiv	r2, r0, r1
    8950:	fb01 0012 	mls	r0, r1, r2, r0
    8954:	1839      	adds	r1, r7, r0
    8956:	eb11 0108 	adds.w	r1, r1, r8
    895a:	eb45 0009 	adc.w	r0, r5, r9
    895e:	e9c4 1003 	strd	r1, r0, [r4, #12]
    8962:	3ce4      	subs	r4, #228	; 0xe4
    8964:	b196      	cbz	r6, 898c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x134>
    8966:	1989      	adds	r1, r1, r6
    8968:	4168      	adcs	r0, r5
    896a:	e9c4 1040 	strd	r1, r0, [r4, #256]	; 0x100
    896e:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    8972:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
    8976:	f007 fc4c 	bl	10212 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    897a:	b168      	cbz	r0, 8998 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x140>
    897c:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
    8980:	2100      	movs	r1, #0
    8982:	4620      	mov	r0, r4
    8984:	f007 f91c 	bl	fbc0 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8988:	2000      	movs	r0, #0
    898a:	e7ce      	b.n	892a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    898c:	f04f 30ff 	mov.w	r0, #4294967295
    8990:	0841      	lsrs	r1, r0, #1
    8992:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
    8996:	e7ea      	b.n	896e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x116>
    8998:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    899c:	2030      	movs	r0, #48	; 0x30
    899e:	f7fc fdc9 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89a2:	0000      	.short	0x0000
    89a4:	00010393 	.word	0x00010393

000089a8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    89a8:	4803      	ldr	r0, [pc, #12]	; (89b8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x10>)
    89aa:	2100      	movs	r1, #0
    89ac:	7001      	strb	r1, [r0, #0]
    89ae:	2201      	movs	r2, #1
    89b0:	7082      	strb	r2, [r0, #2]
    89b2:	7041      	strb	r1, [r0, #1]
    89b4:	f007 ba9d 	b.w	fef2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    89b8:	2000014c 	.word	0x2000014c

000089bc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    89bc:	4901      	ldr	r1, [pc, #4]	; (89c4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    89be:	7008      	strb	r0, [r1, #0]
    89c0:	4770      	bx	lr
    89c2:	0000      	.short	0x0000
    89c4:	2000014c 	.word	0x2000014c

000089c8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    89c8:	4908      	ldr	r1, [pc, #32]	; (89ec <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    89ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    89ce:	fbb1 f1f2 	udiv	r1, r1, r2
    89d2:	b510      	push	{r4, lr}
    89d4:	f501 7125 	add.w	r1, r1, #660	; 0x294
    89d8:	f006 ff59 	bl	f88e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    89dc:	f640 0148 	movw	r1, #2120	; 0x848
    89e0:	4288      	cmp	r0, r1
    89e2:	d300      	bcc.n	89e6 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    89e4:	4608      	mov	r0, r1
    89e6:	b280      	uxth	r0, r0
    89e8:	bd10      	pop	{r4, pc}
    89ea:	0000      	.short	0x0000
    89ec:	0001527d 	.word	0x0001527d

000089f0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    89f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89f4:	4c10      	ldr	r4, [pc, #64]	; (8a38 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    89f6:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    89fa:	f003 fbdd 	bl	c1b8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    89fe:	4606      	mov	r6, r0
    8a00:	7820      	ldrb	r0, [r4, #0]
    8a02:	b128      	cbz	r0, 8a10 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    8a04:	4632      	mov	r2, r6
    8a06:	4639      	mov	r1, r7
    8a08:	4628      	mov	r0, r5
    8a0a:	f006 f9ce 	bl	edaa <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8a0e:	4605      	mov	r5, r0
    8a10:	6860      	ldr	r0, [r4, #4]
    8a12:	4285      	cmp	r5, r0
    8a14:	d005      	beq.n	8a22 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    8a16:	68e1      	ldr	r1, [r4, #12]
    8a18:	1a28      	subs	r0, r5, r0
    8a1a:	4408      	add	r0, r1
    8a1c:	60e0      	str	r0, [r4, #12]
    8a1e:	f7fb f8f7 	bl	3c10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8a22:	6065      	str	r5, [r4, #4]
    8a24:	42ae      	cmp	r6, r5
    8a26:	d801      	bhi.n	8a2c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    8a28:	7860      	ldrb	r0, [r4, #1]
    8a2a:	b110      	cbz	r0, 8a32 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    8a2c:	2000      	movs	r0, #0
    8a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a32:	2001      	movs	r0, #1
    8a34:	e7fb      	b.n	8a2e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    8a36:	0000      	.short	0x0000
    8a38:	2000014c 	.word	0x2000014c

00008a3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    8a3c:	b510      	push	{r4, lr}
    8a3e:	4604      	mov	r4, r0
    8a40:	2906      	cmp	r1, #6
    8a42:	d22e      	bcs.n	8aa2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    8a44:	e8df f001 	tbb	[pc, r1]
    8a48:	14031105 	.word	0x14031105
    8a4c:	2815      	.short	0x2815
    8a4e:	2100      	movs	r1, #0
    8a50:	e006      	b.n	8a60 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    8a52:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    8a56:	b110      	cbz	r0, 8a5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    8a58:	4620      	mov	r0, r4
    8a5a:	f007 fb6d 	bl	10138 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x218>
    8a5e:	2101      	movs	r1, #1
    8a60:	4620      	mov	r0, r4
    8a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8a66:	f000 b8fb 	b.w	8c60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b0>
    8a6a:	2003      	movs	r0, #3
    8a6c:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8a70:	bd10      	pop	{r4, pc}
    8a72:	f003 fba7 	bl	c1c4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8a76:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    8a7a:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8a7e:	f003 fc65 	bl	c34c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a82:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8a86:	1a09      	subs	r1, r1, r0
    8a88:	4808      	ldr	r0, [pc, #32]	; (8aac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    8a8a:	6842      	ldr	r2, [r0, #4]
    8a8c:	440a      	add	r2, r1
    8a8e:	6042      	str	r2, [r0, #4]
    8a90:	6882      	ldr	r2, [r0, #8]
    8a92:	4411      	add	r1, r2
    8a94:	6081      	str	r1, [r0, #8]
    8a96:	bd10      	pop	{r4, pc}
    8a98:	4620      	mov	r0, r4
    8a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8a9e:	f007 bb36 	b.w	1010e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8aa2:	f240 715b 	movw	r1, #1883	; 0x75b
    8aa6:	2030      	movs	r0, #48	; 0x30
    8aa8:	f7fc fd44 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8aac:	2000014c 	.word	0x2000014c

00008ab0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    8ab0:	b570      	push	{r4, r5, r6, lr}
    8ab2:	460c      	mov	r4, r1
    8ab4:	4605      	mov	r5, r0
    8ab6:	b112      	cbz	r2, 8abe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    8ab8:	f240 7185 	movw	r1, #1925	; 0x785
    8abc:	e010      	b.n	8ae0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    8abe:	f003 fb7b 	bl	c1b8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8ac2:	4601      	mov	r1, r0
    8ac4:	2200      	movs	r2, #0
    8ac6:	4620      	mov	r0, r4
    8ac8:	f007 fc17 	bl	102fa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3da>
    8acc:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    8ad0:	462a      	mov	r2, r5
    8ad2:	4905      	ldr	r1, [pc, #20]	; (8ae8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    8ad4:	f7fa fe5a 	bl	378c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    8ad8:	2800      	cmp	r0, #0
    8ada:	d104      	bne.n	8ae6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    8adc:	f240 716e 	movw	r1, #1902	; 0x76e
    8ae0:	2030      	movs	r0, #48	; 0x30
    8ae2:	f7fc fd27 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ae6:	bd70      	pop	{r4, r5, r6, pc}
    8ae8:	00010433 	.word	0x00010433
    8aec:	b510      	push	{r4, lr}
    8aee:	280c      	cmp	r0, #12
    8af0:	d304      	bcc.n	8afc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    8af2:	f44f 7157 	mov.w	r1, #860	; 0x35c
    8af6:	2006      	movs	r0, #6
    8af8:	f7fc fd1c 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8afc:	4901      	ldr	r1, [pc, #4]	; (8b04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    8afe:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8b02:	bd10      	pop	{r4, pc}
    8b04:	00010656 	.word	0x00010656
    8b08:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8b0a:	4c18      	ldr	r4, [pc, #96]	; (8b6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    8b0c:	2001      	movs	r0, #1
    8b0e:	7060      	strb	r0, [r4, #1]
    8b10:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8b14:	e00b      	b.n	8b2e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    8b16:	2100      	movs	r1, #0
    8b18:	f005 fea2 	bl	e860 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8b1c:	0006      	movs	r6, r0
    8b1e:	d010      	beq.n	8b42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    8b20:	f896 024c 	ldrb.w	r0, [r6, #588]	; 0x24c
    8b24:	f7fa fe64 	bl	37f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8b28:	4630      	mov	r0, r6
    8b2a:	f007 fbd9 	bl	102e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
    8b2e:	4669      	mov	r1, sp
    8b30:	2000      	movs	r0, #0
    8b32:	f005 fe9f 	bl	e874 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8b36:	b180      	cbz	r0, 8b5a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8b38:	f240 1103 	movw	r1, #259	; 0x103
    8b3c:	2030      	movs	r0, #48	; 0x30
    8b3e:	f7fc fcf9 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b42:	f240 1123 	movw	r1, #291	; 0x123
    8b46:	e7f9      	b.n	8b3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    8b48:	9802      	ldr	r0, [sp, #8]
    8b4a:	b130      	cbz	r0, 8b5a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8b4c:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
    8b50:	b119      	cbz	r1, 8b5a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8b52:	8800      	ldrh	r0, [r0, #0]
    8b54:	42a8      	cmp	r0, r5
    8b56:	d1de      	bne.n	8b16 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    8b58:	e004      	b.n	8b64 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    8b5a:	4668      	mov	r0, sp
    8b5c:	f7fc ff2e 	bl	59bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8b60:	2800      	cmp	r0, #0
    8b62:	d0f1      	beq.n	8b48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    8b64:	2000      	movs	r0, #0
    8b66:	7060      	strb	r0, [r4, #1]
    8b68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8b6a:	0000      	.short	0x0000
    8b6c:	2000014c 	.word	0x2000014c
    8b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b74:	4604      	mov	r4, r0
    8b76:	4839      	ldr	r0, [pc, #228]	; (8c5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>)
    8b78:	461e      	mov	r6, r3
    8b7a:	4690      	mov	r8, r2
    8b7c:	7880      	ldrb	r0, [r0, #2]
    8b7e:	4689      	mov	r9, r1
    8b80:	2500      	movs	r5, #0
    8b82:	2800      	cmp	r0, #0
    8b84:	d063      	beq.n	8c4e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8b86:	f7fc f931 	bl	4dec <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    8b8a:	b3e0      	cbz	r0, 8c06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    8b8c:	f8b4 01f0 	ldrh.w	r0, [r4, #496]	; 0x1f0
    8b90:	2802      	cmp	r0, #2
    8b92:	d35c      	bcc.n	8c4e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8b94:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8b98:	2802      	cmp	r0, #2
    8b9a:	d058      	beq.n	8c4e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8b9c:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
    8ba0:	bb88      	cbnz	r0, 8c06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    8ba2:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    8ba6:	f7ff ffa1 	bl	8aec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8baa:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    8bae:	b281      	uxth	r1, r0
    8bb0:	8031      	strh	r1, [r6, #0]
    8bb2:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8bb6:	2700      	movs	r7, #0
    8bb8:	2801      	cmp	r0, #1
    8bba:	d00d      	beq.n	8bd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x128>
    8bbc:	6920      	ldr	r0, [r4, #16]
    8bbe:	f004 fcfc 	bl	d5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8bc2:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    8bc6:	4442      	add	r2, r8
    8bc8:	eba2 0109 	sub.w	r1, r2, r9
    8bcc:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8bd0:	1a82      	subs	r2, r0, r2
    8bd2:	fb01 7502 	mla	r5, r1, r2, r7
    8bd6:	e035      	b.n	8c44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x194>
    8bd8:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    8bdc:	2803      	cmp	r0, #3
    8bde:	d039      	beq.n	8c54 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    8be0:	2101      	movs	r1, #1
    8be2:	2000      	movs	r0, #0
    8be4:	f006 f99c 	bl	ef20 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8be8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8bea:	1847      	adds	r7, r0, r1
    8bec:	8831      	ldrh	r1, [r6, #0]
    8bee:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8bf2:	f004 fce2 	bl	d5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8bf6:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
    8bfa:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    8bfe:	1a82      	subs	r2, r0, r2
    8c00:	fb01 5502 	mla	r5, r1, r2, r5
    8c04:	e000      	b.n	8c08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x158>
    8c06:	e022      	b.n	8c4e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8c08:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    8c0c:	8831      	ldrh	r1, [r6, #0]
    8c0e:	4638      	mov	r0, r7
    8c10:	f004 fcd3 	bl	d5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8c14:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8c18:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8c1c:	1a41      	subs	r1, r0, r1
    8c1e:	440d      	add	r5, r1
    8c20:	8831      	ldrh	r1, [r6, #0]
    8c22:	6920      	ldr	r0, [r4, #16]
    8c24:	f004 fcc9 	bl	d5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8c28:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    8c2c:	4442      	add	r2, r8
    8c2e:	eba2 0109 	sub.w	r1, r2, r9
    8c32:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    8c36:	1a89      	subs	r1, r1, r2
    8c38:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8c3c:	1a82      	subs	r2, r0, r2
    8c3e:	1e49      	subs	r1, r1, #1
    8c40:	fb01 5502 	mla	r5, r1, r2, r5
    8c44:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    8c48:	2001      	movs	r0, #1
    8c4a:	f884 021a 	strb.w	r0, [r4, #538]	; 0x21a
    8c4e:	4628      	mov	r0, r5
    8c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c54:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8c58:	e7c6      	b.n	8be8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x138>
    8c5a:	0000      	.short	0x0000
    8c5c:	2000014c 	.word	0x2000014c
    8c60:	b538      	push	{r3, r4, r5, lr}
    8c62:	2500      	movs	r5, #0
    8c64:	4604      	mov	r4, r0
    8c66:	2901      	cmp	r1, #1
    8c68:	d102      	bne.n	8c70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    8c6a:	4810      	ldr	r0, [pc, #64]	; (8cac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    8c6c:	7840      	ldrb	r0, [r0, #1]
    8c6e:	b170      	cbz	r0, 8c8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1de>
    8c70:	2004      	movs	r0, #4
    8c72:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8c76:	bf00      	nop
    8c78:	f007 fa57 	bl	1012a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
    8c7c:	f8a4 524a 	strh.w	r5, [r4, #586]	; 0x24a
    8c80:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8c84:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    8c88:	f884 5219 	strb.w	r5, [r4, #537]	; 0x219
    8c8c:	bd38      	pop	{r3, r4, r5, pc}
    8c8e:	9500      	str	r5, [sp, #0]
    8c90:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    8c94:	2301      	movs	r3, #1
    8c96:	2200      	movs	r2, #0
    8c98:	4620      	mov	r0, r4
    8c9a:	f000 f809 	bl	8cb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    8c9e:	2800      	cmp	r0, #0
    8ca0:	d0ea      	beq.n	8c78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c8>
    8ca2:	f240 61cf 	movw	r1, #1743	; 0x6cf
    8ca6:	2030      	movs	r0, #48	; 0x30
    8ca8:	f7fc fc44 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cac:	2000014c 	.word	0x2000014c
    8cb0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8cb4:	b08b      	sub	sp, #44	; 0x2c
    8cb6:	4604      	mov	r4, r0
    8cb8:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    8cbc:	4699      	mov	r9, r3
    8cbe:	460f      	mov	r7, r1
    8cc0:	9307      	str	r3, [sp, #28]
    8cc2:	9005      	str	r0, [sp, #20]
    8cc4:	f008 fc29 	bl	1151a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8cc8:	4605      	mov	r5, r0
    8cca:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    8cce:	f7ff ff0d 	bl	8aec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8cd2:	4428      	add	r0, r5
    8cd4:	f8ad 0004 	strh.w	r0, [sp, #4]
    8cd8:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8cdc:	280d      	cmp	r0, #13
    8cde:	d004      	beq.n	8cea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23a>
    8ce0:	2000      	movs	r0, #0
    8ce2:	9008      	str	r0, [sp, #32]
    8ce4:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ce6:	b110      	cbz	r0, 8cee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23e>
    8ce8:	e02e      	b.n	8d48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8cea:	2001      	movs	r0, #1
    8cec:	e7f9      	b.n	8ce2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    8cee:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8cf2:	2803      	cmp	r0, #3
    8cf4:	d128      	bne.n	8d48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8cf6:	9808      	ldr	r0, [sp, #32]
    8cf8:	b330      	cbz	r0, 8d48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8cfa:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    8cfe:	42b8      	cmp	r0, r7
    8d00:	d122      	bne.n	8d48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8d02:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    8d06:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    8d0a:	6920      	ldr	r0, [r4, #16]
    8d0c:	f8c4 01fc 	str.w	r0, [r4, #508]	; 0x1fc
    8d10:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    8d14:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8d18:	4408      	add	r0, r1
    8d1a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    8d1e:	4620      	mov	r0, r4
    8d20:	f007 fcb9 	bl	10696 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8d24:	f8d4 0278 	ldr.w	r0, [r4, #632]	; 0x278
    8d28:	6260      	str	r0, [r4, #36]	; 0x24
    8d2a:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    8d2e:	8420      	strh	r0, [r4, #32]
    8d30:	f8d4 027c 	ldr.w	r0, [r4, #636]	; 0x27c
    8d34:	6120      	str	r0, [r4, #16]
    8d36:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
    8d3a:	8320      	strh	r0, [r4, #24]
    8d3c:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
    8d40:	8360      	strh	r0, [r4, #26]
    8d42:	2002      	movs	r0, #2
    8d44:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8d48:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8d4c:	f504 7508 	add.w	r5, r4, #544	; 0x220
    8d50:	1a38      	subs	r0, r7, r0
    8d52:	fa0f fa80 	sxth.w	sl, r0
    8d56:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    8d5a:	1a38      	subs	r0, r7, r0
    8d5c:	fa0f f880 	sxth.w	r8, r0
    8d60:	f1b8 0f00 	cmp.w	r8, #0
    8d64:	da08      	bge.n	8d78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c8>
    8d66:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
    8d6a:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
    8d6e:	46d0      	mov	r8, sl
    8d70:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    8d74:	2001      	movs	r0, #1
    8d76:	9007      	str	r0, [sp, #28]
    8d78:	ab01      	add	r3, sp, #4
    8d7a:	4652      	mov	r2, sl
    8d7c:	4641      	mov	r1, r8
    8d7e:	4620      	mov	r0, r4
    8d80:	f7ff fef6 	bl	8b70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    8d84:	9004      	str	r0, [sp, #16]
    8d86:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8d8a:	f8df b334 	ldr.w	fp, [pc, #820]	; 90c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    8d8e:	b140      	cbz	r0, 8da2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f2>
    8d90:	2801      	cmp	r0, #1
    8d92:	d07d      	beq.n	8e90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e0>
    8d94:	2802      	cmp	r0, #2
    8d96:	d051      	beq.n	8e3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38c>
    8d98:	2803      	cmp	r0, #3
    8d9a:	d07a      	beq.n	8e92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e2>
    8d9c:	f240 514b 	movw	r1, #1355	; 0x54b
    8da0:	e18a      	b.n	90b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8da2:	2101      	movs	r1, #1
    8da4:	2000      	movs	r0, #0
    8da6:	f006 f8bb 	bl	ef20 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8daa:	4606      	mov	r6, r0
    8dac:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8dae:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8db2:	4430      	add	r0, r6
    8db4:	f004 fc01 	bl	d5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8db8:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8dbc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8dc0:	6920      	ldr	r0, [r4, #16]
    8dc2:	f004 fbfa 	bl	d5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8dc6:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    8dca:	a907      	add	r1, sp, #28
    8dcc:	a806      	add	r0, sp, #24
    8dce:	f003 f95b 	bl	c088 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    8dd2:	e9d4 0190 	ldrd	r0, r1, [r4, #576]	; 0x240
    8dd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    8dda:	f7fa ffe5 	bl	3da8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    8dde:	4682      	mov	sl, r0
    8de0:	4620      	mov	r0, r4
    8de2:	f007 f994 	bl	1010e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8de6:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8dea:	f8d4 8250 	ldr.w	r8, [r4, #592]	; 0x250
    8dee:	f003 fad9 	bl	c3a4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8df2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8df6:	4401      	add	r1, r0
    8df8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8dfc:	fbb1 f0f0 	udiv	r0, r1, r0
    8e00:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8e02:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
    8e06:	4431      	add	r1, r6
    8e08:	1a08      	subs	r0, r1, r0
    8e0a:	1a81      	subs	r1, r0, r2
    8e0c:	4441      	add	r1, r8
    8e0e:	3920      	subs	r1, #32
    8e10:	eba1 060a 	sub.w	r6, r1, sl
    8e14:	0050      	lsls	r0, r2, #1
    8e16:	8c21      	ldrh	r1, [r4, #32]
    8e18:	3060      	adds	r0, #96	; 0x60
    8e1a:	4401      	add	r1, r0
    8e1c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8e20:	f007 f9e5 	bl	101ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    8e24:	3022      	adds	r0, #34	; 0x22
    8e26:	f8cb 0010 	str.w	r0, [fp, #16]
    8e2a:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    8e2e:	1a30      	subs	r0, r6, r0
    8e30:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    8e34:	d258      	bcs.n	8ee8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x438>
    8e36:	f240 41e4 	movw	r1, #1252	; 0x4e4
    8e3a:	e13d      	b.n	90b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8e3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8e3e:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8e42:	4408      	add	r0, r1
    8e44:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8e48:	f004 fbb7 	bl	d5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8e4c:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8e50:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8e54:	6920      	ldr	r0, [r4, #16]
    8e56:	f004 fbb0 	bl	d5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8e5a:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    8e5e:	4620      	mov	r0, r4
    8e60:	f007 f955 	bl	1010e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8e64:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    8e68:	bb10      	cbnz	r0, 8eb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    8e6a:	f1b9 0f00 	cmp.w	r9, #0
    8e6e:	d01f      	beq.n	8eb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    8e70:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
    8e74:	4640      	mov	r0, r8
    8e76:	f003 fa95 	bl	c3a4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8e7a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8e7e:	4401      	add	r1, r0
    8e80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8e84:	fbb1 f0f0 	udiv	r0, r1, r0
    8e88:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8e8c:	4408      	add	r0, r1
    8e8e:	e001      	b.n	8e94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e4>
    8e90:	e02b      	b.n	8eea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x43a>
    8e92:	e047      	b.n	8f24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x474>
    8e94:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8e96:	f8d4 11fc 	ldr.w	r1, [r4, #508]	; 0x1fc
    8e9a:	4411      	add	r1, r2
    8e9c:	1a0e      	subs	r6, r1, r0
    8e9e:	4640      	mov	r0, r8
    8ea0:	f003 fa54 	bl	c34c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8ea4:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8ea8:	1a08      	subs	r0, r1, r0
    8eaa:	4406      	add	r6, r0
    8eac:	3e20      	subs	r6, #32
    8eae:	e006      	b.n	8ebe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x40e>
    8eb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8eb2:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8eb6:	4408      	add	r0, r1
    8eb8:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8ebc:	1a46      	subs	r6, r0, r1
    8ebe:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    8ec2:	f8d4 11f8 	ldr.w	r1, [r4, #504]	; 0x1f8
    8ec6:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    8eca:	fb01 0002 	mla	r0, r1, r2, r0
    8ece:	0040      	lsls	r0, r0, #1
    8ed0:	8c21      	ldrh	r1, [r4, #32]
    8ed2:	3060      	adds	r0, #96	; 0x60
    8ed4:	4401      	add	r1, r0
    8ed6:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8eda:	f007 f988 	bl	101ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    8ede:	f8cb 0010 	str.w	r0, [fp, #16]
    8ee2:	2001      	movs	r0, #1
    8ee4:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8ee8:	e061      	b.n	8fae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4fe>
    8eea:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8eee:	6920      	ldr	r0, [r4, #16]
    8ef0:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8ef4:	1a86      	subs	r6, r0, r2
    8ef6:	eb01 000a 	add.w	r0, r1, sl
    8efa:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    8efe:	f8d4 c1f8 	ldr.w	ip, [r4, #504]	; 0x1f8
    8f02:	1a40      	subs	r0, r0, r1
    8f04:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
    8f08:	1e40      	subs	r0, r0, #1
    8f0a:	fb0c 3101 	mla	r1, ip, r1, r3
    8f0e:	fb00 1002 	mla	r0, r0, r2, r1
    8f12:	0040      	lsls	r0, r0, #1
    8f14:	8c21      	ldrh	r1, [r4, #32]
    8f16:	3060      	adds	r0, #96	; 0x60
    8f18:	4401      	add	r1, r0
    8f1a:	fb06 f608 	mul.w	r6, r6, r8
    8f1e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8f22:	e040      	b.n	8fa6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    8f24:	6920      	ldr	r0, [r4, #16]
    8f26:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    8f2a:	fb00 f008 	mul.w	r0, r0, r8
    8f2e:	fb08 0611 	mls	r6, r8, r1, r0
    8f32:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    8f36:	2824      	cmp	r0, #36	; 0x24
    8f38:	d003      	beq.n	8f42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x492>
    8f3a:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8f3e:	2824      	cmp	r0, #36	; 0x24
    8f40:	d109      	bne.n	8f56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8f42:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    8f46:	1a38      	subs	r0, r7, r0
    8f48:	b200      	sxth	r0, r0
    8f4a:	2800      	cmp	r0, #0
    8f4c:	db03      	blt.n	8f56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8f4e:	f894 0277 	ldrb.w	r0, [r4, #631]	; 0x277
    8f52:	b100      	cbz	r0, 8f56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8f54:	9005      	str	r0, [sp, #20]
    8f56:	9807      	ldr	r0, [sp, #28]
    8f58:	b1d8      	cbz	r0, 8f92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    8f5a:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    8f5e:	b9c0      	cbnz	r0, 8f92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    8f60:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    8f64:	2800      	cmp	r0, #0
    8f66:	d07d      	beq.n	9064 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b4>
    8f68:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8f6c:	f003 fa1a 	bl	c3a4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8f70:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8f74:	4401      	add	r1, r0
    8f76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8f7a:	fbb1 f0f0 	udiv	r0, r1, r0
    8f7e:	1a36      	subs	r6, r6, r0
    8f80:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8f84:	f003 f9e2 	bl	c34c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8f88:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8f8c:	1a08      	subs	r0, r1, r0
    8f8e:	4406      	add	r6, r0
    8f90:	3e20      	subs	r6, #32
    8f92:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8f96:	eb01 000a 	add.w	r0, r1, sl
    8f9a:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    8f9e:	4348      	muls	r0, r1
    8fa0:	0041      	lsls	r1, r0, #1
    8fa2:	3160      	adds	r1, #96	; 0x60
    8fa4:	9805      	ldr	r0, [sp, #20]
    8fa6:	f007 f922 	bl	101ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    8faa:	f8cb 0010 	str.w	r0, [fp, #16]
    8fae:	9804      	ldr	r0, [sp, #16]
    8fb0:	f8db 2010 	ldr.w	r2, [fp, #16]
    8fb4:	1a31      	subs	r1, r6, r0
    8fb6:	f8d4 620c 	ldr.w	r6, [r4, #524]	; 0x20c
    8fba:	6920      	ldr	r0, [r4, #16]
    8fbc:	1b80      	subs	r0, r0, r6
    8fbe:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    8fc2:	f8cb 0014 	str.w	r0, [fp, #20]
    8fc6:	4282      	cmp	r2, r0
    8fc8:	d800      	bhi.n	8fcc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x51c>
    8fca:	4610      	mov	r0, r2
    8fcc:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    8fd0:	2600      	movs	r6, #0
    8fd2:	702e      	strb	r6, [r5, #0]
    8fd4:	2064      	movs	r0, #100	; 0x64
    8fd6:	8128      	strh	r0, [r5, #8]
    8fd8:	e9d4 2090 	ldrd	r2, r0, [r4, #576]	; 0x240
    8fdc:	1851      	adds	r1, r2, r1
    8fde:	4170      	adcs	r0, r6
    8fe0:	e9c5 1004 	strd	r1, r0, [r5, #16]
    8fe4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8fe8:	f006 fc22 	bl	f830 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8fec:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
    8ff0:	4408      	add	r0, r1
    8ff2:	6068      	str	r0, [r5, #4]
    8ff4:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    8ff8:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    8ffc:	f8a4 7248 	strh.w	r7, [r4, #584]	; 0x248
    9000:	72ae      	strb	r6, [r5, #10]
    9002:	f8b4 01c8 	ldrh.w	r0, [r4, #456]	; 0x1c8
    9006:	1bc0      	subs	r0, r0, r7
    9008:	b200      	sxth	r0, r0
    900a:	2800      	cmp	r0, #0
    900c:	dd01      	ble.n	9012 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x562>
    900e:	2002      	movs	r0, #2
    9010:	72a8      	strb	r0, [r5, #10]
    9012:	9808      	ldr	r0, [sp, #32]
    9014:	b338      	cbz	r0, 9066 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b6>
    9016:	f1b9 0f00 	cmp.w	r9, #0
    901a:	d01c      	beq.n	9056 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    901c:	f8b4 11f0 	ldrh.w	r1, [r4, #496]	; 0x1f0
    9020:	b3f1      	cbz	r1, 90a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f0>
    9022:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    9026:	bf00      	nop
    9028:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    902c:	f894 21f4 	ldrb.w	r2, [r4, #500]	; 0x1f4
    9030:	1c40      	adds	r0, r0, #1
    9032:	4342      	muls	r2, r0
    9034:	428a      	cmp	r2, r1
    9036:	d20e      	bcs.n	9056 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    9038:	7aa8      	ldrb	r0, [r5, #10]
    903a:	b160      	cbz	r0, 9056 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    903c:	72ae      	strb	r6, [r5, #10]
    903e:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    9042:	1c40      	adds	r0, r0, #1
    9044:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    9048:	f7fe fce4 	bl	7a14 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    904c:	f000 0007 	and.w	r0, r0, #7
    9050:	1c40      	adds	r0, r0, #1
    9052:	f884 01f4 	strb.w	r0, [r4, #500]	; 0x1f4
    9056:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    905a:	4629      	mov	r1, r5
    905c:	f007 f8d9 	bl	10212 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    9060:	b340      	cbz	r0, 90b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    9062:	e001      	b.n	9068 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b8>
    9064:	e009      	b.n	907a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ca>
    9066:	e00b      	b.n	9080 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    9068:	980d      	ldr	r0, [sp, #52]	; 0x34
    906a:	f080 0001 	eor.w	r0, r0, #1
    906e:	f884 0218 	strb.w	r0, [r4, #536]	; 0x218
    9072:	2000      	movs	r0, #0
    9074:	b00f      	add	sp, #60	; 0x3c
    9076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    907a:	f240 5136 	movw	r1, #1334	; 0x536
    907e:	e01b      	b.n	90b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    9080:	f1b9 0f00 	cmp.w	r9, #0
    9084:	d1ca      	bne.n	901c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    9086:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    908a:	2800      	cmp	r0, #0
    908c:	d0e3      	beq.n	9056 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    908e:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    9092:	6920      	ldr	r0, [r4, #16]
    9094:	1a41      	subs	r1, r0, r1
    9096:	4628      	mov	r0, r5
    9098:	f005 ff54 	bl	ef44 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    909c:	0400      	lsls	r0, r0, #16
    909e:	e000      	b.n	90a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f2>
    90a0:	e006      	b.n	90b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    90a2:	0c00      	lsrs	r0, r0, #16
    90a4:	d0d7      	beq.n	9056 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    90a6:	9918      	ldr	r1, [sp, #96]	; 0x60
    90a8:	b101      	cbz	r1, 90ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    90aa:	8008      	strh	r0, [r1, #0]
    90ac:	2001      	movs	r0, #1
    90ae:	e7e1      	b.n	9074 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>
    90b0:	2000      	movs	r0, #0
    90b2:	e7b9      	b.n	9028 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x578>
    90b4:	f240 5194 	movw	r1, #1428	; 0x594
    90b8:	2030      	movs	r0, #48	; 0x30
    90ba:	f7fc fa3b 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90be:	0000      	.short	0x0000
    90c0:	2000014c 	.word	0x2000014c
    90c4:	b570      	push	{r4, r5, r6, lr}
    90c6:	4604      	mov	r4, r0
    90c8:	f004 fa43 	bl	d552 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    90cc:	2864      	cmp	r0, #100	; 0x64
    90ce:	d901      	bls.n	90d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
    90d0:	4605      	mov	r5, r0
    90d2:	e000      	b.n	90d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x626>
    90d4:	2564      	movs	r5, #100	; 0x64
    90d6:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    90da:	2128      	movs	r1, #40	; 0x28
    90dc:	f006 ff87 	bl	ffee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    90e0:	4428      	add	r0, r5
    90e2:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    90e6:	f500 7010 	add.w	r0, r0, #576	; 0x240
    90ea:	180e      	adds	r6, r1, r0
    90ec:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    90f0:	2128      	movs	r1, #40	; 0x28
    90f2:	f006 ff7c 	bl	ffee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    90f6:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    90fa:	4620      	mov	r0, r4
    90fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    90fe:	f006 fb34 	bl	f76a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    9102:	4605      	mov	r5, r0
    9104:	4632      	mov	r2, r6
    9106:	4620      	mov	r0, r4
    9108:	6921      	ldr	r1, [r4, #16]
    910a:	f006 fb2e 	bl	f76a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    910e:	4907      	ldr	r1, [pc, #28]	; (912c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67c>)
    9110:	4285      	cmp	r5, r0
    9112:	6088      	str	r0, [r1, #8]
    9114:	d200      	bcs.n	9118 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x668>
    9116:	4628      	mov	r0, r5
    9118:	6048      	str	r0, [r1, #4]
    911a:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    911e:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    9122:	60c8      	str	r0, [r1, #12]
    9124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9128:	f7fa bd72 	b.w	3c10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    912c:	2000014c 	.word	0x2000014c

00009130 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    9130:	4806      	ldr	r0, [pc, #24]	; (914c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    9132:	4905      	ldr	r1, [pc, #20]	; (9148 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    9134:	6501      	str	r1, [r0, #80]	; 0x50
    9136:	4906      	ldr	r1, [pc, #24]	; (9150 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    9138:	6541      	str	r1, [r0, #84]	; 0x54
    913a:	4807      	ldr	r0, [pc, #28]	; (9158 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    913c:	4905      	ldr	r1, [pc, #20]	; (9154 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    913e:	6501      	str	r1, [r0, #80]	; 0x50
    9140:	4906      	ldr	r1, [pc, #24]	; (915c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    9142:	6541      	str	r1, [r0, #84]	; 0x54
    9144:	4770      	bx	lr
    9146:	0000      	.short	0x0000
    9148:	0000a551 	.word	0x0000a551
    914c:	2000017c 	.word	0x2000017c
    9150:	0000a635 	.word	0x0000a635
    9154:	0000acf1 	.word	0x0000acf1
    9158:	20000214 	.word	0x20000214
    915c:	0000ad21 	.word	0x0000ad21

00009160 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    9160:	481e      	ldr	r0, [pc, #120]	; (91dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    9162:	491d      	ldr	r1, [pc, #116]	; (91d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    9164:	6081      	str	r1, [r0, #8]
    9166:	491e      	ldr	r1, [pc, #120]	; (91e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    9168:	6041      	str	r1, [r0, #4]
    916a:	491e      	ldr	r1, [pc, #120]	; (91e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    916c:	6001      	str	r1, [r0, #0]
    916e:	491e      	ldr	r1, [pc, #120]	; (91e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    9170:	6281      	str	r1, [r0, #40]	; 0x28
    9172:	491e      	ldr	r1, [pc, #120]	; (91ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    9174:	62c1      	str	r1, [r0, #44]	; 0x2c
    9176:	491e      	ldr	r1, [pc, #120]	; (91f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    9178:	60c1      	str	r1, [r0, #12]
    917a:	491e      	ldr	r1, [pc, #120]	; (91f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    917c:	6181      	str	r1, [r0, #24]
    917e:	491e      	ldr	r1, [pc, #120]	; (91f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    9180:	6301      	str	r1, [r0, #48]	; 0x30
    9182:	491e      	ldr	r1, [pc, #120]	; (91fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    9184:	6201      	str	r1, [r0, #32]
    9186:	491e      	ldr	r1, [pc, #120]	; (9200 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    9188:	64c1      	str	r1, [r0, #76]	; 0x4c
    918a:	491e      	ldr	r1, [pc, #120]	; (9204 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    918c:	6481      	str	r1, [r0, #72]	; 0x48
    918e:	491e      	ldr	r1, [pc, #120]	; (9208 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    9190:	6441      	str	r1, [r0, #68]	; 0x44
    9192:	491e      	ldr	r1, [pc, #120]	; (920c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    9194:	6341      	str	r1, [r0, #52]	; 0x34
    9196:	491e      	ldr	r1, [pc, #120]	; (9210 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    9198:	61c1      	str	r1, [r0, #28]
    919a:	491e      	ldr	r1, [pc, #120]	; (9214 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    919c:	6241      	str	r1, [r0, #36]	; 0x24
    919e:	481f      	ldr	r0, [pc, #124]	; (921c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    91a0:	491d      	ldr	r1, [pc, #116]	; (9218 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    91a2:	6081      	str	r1, [r0, #8]
    91a4:	491e      	ldr	r1, [pc, #120]	; (9220 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    91a6:	61c1      	str	r1, [r0, #28]
    91a8:	491e      	ldr	r1, [pc, #120]	; (9224 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    91aa:	6241      	str	r1, [r0, #36]	; 0x24
    91ac:	491e      	ldr	r1, [pc, #120]	; (9228 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    91ae:	62c1      	str	r1, [r0, #44]	; 0x2c
    91b0:	491e      	ldr	r1, [pc, #120]	; (922c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    91b2:	6101      	str	r1, [r0, #16]
    91b4:	491e      	ldr	r1, [pc, #120]	; (9230 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    91b6:	6141      	str	r1, [r0, #20]
    91b8:	491e      	ldr	r1, [pc, #120]	; (9234 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    91ba:	6441      	str	r1, [r0, #68]	; 0x44
    91bc:	491e      	ldr	r1, [pc, #120]	; (9238 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    91be:	6341      	str	r1, [r0, #52]	; 0x34
    91c0:	491e      	ldr	r1, [pc, #120]	; (923c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    91c2:	6181      	str	r1, [r0, #24]
    91c4:	491e      	ldr	r1, [pc, #120]	; (9240 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    91c6:	6301      	str	r1, [r0, #48]	; 0x30
    91c8:	491e      	ldr	r1, [pc, #120]	; (9244 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    91ca:	6481      	str	r1, [r0, #72]	; 0x48
    91cc:	491e      	ldr	r1, [pc, #120]	; (9248 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    91ce:	64c1      	str	r1, [r0, #76]	; 0x4c
    91d0:	491e      	ldr	r1, [pc, #120]	; (924c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    91d2:	6381      	str	r1, [r0, #56]	; 0x38
    91d4:	4770      	bx	lr
    91d6:	0000      	.short	0x0000
    91d8:	0000aa1d 	.word	0x0000aa1d
    91dc:	2000017c 	.word	0x2000017c
    91e0:	0000a275 	.word	0x0000a275
    91e4:	0000a2d9 	.word	0x0000a2d9
    91e8:	0000a709 	.word	0x0000a709
    91ec:	0000a74d 	.word	0x0000a74d
    91f0:	0000a38d 	.word	0x0000a38d
    91f4:	0000a9f5 	.word	0x0000a9f5
    91f8:	0000ab2d 	.word	0x0000ab2d
    91fc:	0000a445 	.word	0x0000a445
    9200:	0000a6d9 	.word	0x0000a6d9
    9204:	0000a6ad 	.word	0x0000a6ad
    9208:	0000a99d 	.word	0x0000a99d
    920c:	0000a9cd 	.word	0x0000a9cd
    9210:	0000aa55 	.word	0x0000aa55
    9214:	0000a499 	.word	0x0000a499
    9218:	0000af49 	.word	0x0000af49
    921c:	20000214 	.word	0x20000214
    9220:	0000af71 	.word	0x0000af71
    9224:	0000acc1 	.word	0x0000acc1
    9228:	0000ad99 	.word	0x0000ad99
    922c:	0000ac95 	.word	0x0000ac95
    9230:	0000ae9d 	.word	0x0000ae9d
    9234:	0000ae1d 	.word	0x0000ae1d
    9238:	0000ae49 	.word	0x0000ae49
    923c:	0000aec1 	.word	0x0000aec1
    9240:	0000afcd 	.word	0x0000afcd
    9244:	0000ad51 	.word	0x0000ad51
    9248:	0000ad81 	.word	0x0000ad81
    924c:	0000ae6d 	.word	0x0000ae6d

00009250 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    9250:	4806      	ldr	r0, [pc, #24]	; (926c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    9252:	4905      	ldr	r1, [pc, #20]	; (9268 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    9254:	6581      	str	r1, [r0, #88]	; 0x58
    9256:	4906      	ldr	r1, [pc, #24]	; (9270 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    9258:	6601      	str	r1, [r0, #96]	; 0x60
    925a:	4807      	ldr	r0, [pc, #28]	; (9278 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    925c:	4905      	ldr	r1, [pc, #20]	; (9274 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    925e:	6581      	str	r1, [r0, #88]	; 0x58
    9260:	4906      	ldr	r1, [pc, #24]	; (927c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    9262:	65c1      	str	r1, [r0, #92]	; 0x5c
    9264:	4770      	bx	lr
    9266:	0000      	.short	0x0000
    9268:	0000a76d 	.word	0x0000a76d
    926c:	2000017c 	.word	0x2000017c
    9270:	0000a84d 	.word	0x0000a84d
    9274:	0000adc5 	.word	0x0000adc5
    9278:	20000214 	.word	0x20000214
    927c:	0000adf5 	.word	0x0000adf5

00009280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    9280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9282:	4c7c      	ldr	r4, [pc, #496]	; (9474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    9284:	2101      	movs	r1, #1
    9286:	f1a4 0610 	sub.w	r6, r4, #16
    928a:	7021      	strb	r1, [r4, #0]
    928c:	2500      	movs	r5, #0
    928e:	6060      	str	r0, [r4, #4]
    9290:	8075      	strh	r5, [r6, #2]
    9292:	7075      	strb	r5, [r6, #1]
    9294:	7035      	strb	r5, [r6, #0]
    9296:	f880 11d3 	strb.w	r1, [r0, #467]	; 0x1d3
    929a:	8800      	ldrh	r0, [r0, #0]
    929c:	f7fc fd88 	bl	5db0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    92a0:	b180      	cbz	r0, 92c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    92a2:	6860      	ldr	r0, [r4, #4]
    92a4:	8800      	ldrh	r0, [r0, #0]
    92a6:	f7fc ffd7 	bl	6258 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    92aa:	6860      	ldr	r0, [r4, #4]
    92ac:	8800      	ldrh	r0, [r0, #0]
    92ae:	f7fc ff7b 	bl	61a8 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    92b2:	6860      	ldr	r0, [r4, #4]
    92b4:	f8b0 11ca 	ldrh.w	r1, [r0, #458]	; 0x1ca
    92b8:	b1c9      	cbz	r1, 92ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    92ba:	3078      	adds	r0, #120	; 0x78
    92bc:	f007 fa32 	bl	10724 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    92c0:	b118      	cbz	r0, 92ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    92c2:	e014      	b.n	92ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    92c4:	f640 3166 	movw	r1, #2918	; 0xb66
    92c8:	e06c      	b.n	93a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    92ca:	6860      	ldr	r0, [r4, #4]
    92cc:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    92d0:	f88d 1000 	strb.w	r1, [sp]
    92d4:	9900      	ldr	r1, [sp, #0]
    92d6:	9100      	str	r1, [sp, #0]
    92d8:	f89d 1000 	ldrb.w	r1, [sp]
    92dc:	b139      	cbz	r1, 92ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    92de:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    92e2:	2301      	movs	r3, #1
    92e4:	4619      	mov	r1, r3
    92e6:	3078      	adds	r0, #120	; 0x78
    92e8:	f005 fd72 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    92ec:	b180      	cbz	r0, 9310 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    92ee:	6860      	ldr	r0, [r4, #4]
    92f0:	3078      	adds	r0, #120	; 0x78
    92f2:	f007 fa17 	bl	10724 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    92f6:	b128      	cbz	r0, 9304 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    92f8:	6860      	ldr	r0, [r4, #4]
    92fa:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    92fe:	bf00      	nop
    9300:	f000 fbb2 	bl	9a68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    9304:	6860      	ldr	r0, [r4, #4]
    9306:	f890 11d5 	ldrb.w	r1, [r0, #469]	; 0x1d5
    930a:	b189      	cbz	r1, 9330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    930c:	80b5      	strh	r5, [r6, #4]
    930e:	e01e      	b.n	934e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    9310:	6860      	ldr	r0, [r4, #4]
    9312:	f8a0 50b8 	strh.w	r5, [r0, #184]	; 0xb8
    9316:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    931a:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    931e:	2100      	movs	r1, #0
    9320:	2002      	movs	r0, #2
    9322:	f000 fe53 	bl	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9326:	6860      	ldr	r0, [r4, #4]
    9328:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    932c:	2002      	movs	r0, #2
    932e:	e7e7      	b.n	9300 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    9330:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    9334:	f88d 1000 	strb.w	r1, [sp]
    9338:	9900      	ldr	r1, [sp, #0]
    933a:	9100      	str	r1, [sp, #0]
    933c:	f89d 1000 	ldrb.w	r1, [sp]
    9340:	b919      	cbnz	r1, 934a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    9342:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    9344:	8b02      	ldrh	r2, [r0, #24]
    9346:	4291      	cmp	r1, r2
    9348:	d800      	bhi.n	934c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    934a:	8b01      	ldrh	r1, [r0, #24]
    934c:	80b1      	strh	r1, [r6, #4]
    934e:	f8b0 11ce 	ldrh.w	r1, [r0, #462]	; 0x1ce
    9352:	1e49      	subs	r1, r1, #1
    9354:	b28f      	uxth	r7, r1
    9356:	f8b0 11d0 	ldrh.w	r1, [r0, #464]	; 0x1d0
    935a:	4439      	add	r1, r7
    935c:	f8a0 11d0 	strh.w	r1, [r0, #464]	; 0x1d0
    9360:	f830 1fb4 	ldrh.w	r1, [r0, #180]!
    9364:	4439      	add	r1, r7
    9366:	8001      	strh	r1, [r0, #0]
    9368:	f001 fe5e 	bl	b028 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    936c:	b120      	cbz	r0, 9378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    936e:	6860      	ldr	r0, [r4, #4]
    9370:	f850 1fa8 	ldr.w	r1, [r0, #168]!
    9374:	4439      	add	r1, r7
    9376:	6001      	str	r1, [r0, #0]
    9378:	6861      	ldr	r1, [r4, #4]
    937a:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    937e:	2801      	cmp	r0, #1
    9380:	d802      	bhi.n	9388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    9382:	1c40      	adds	r0, r0, #1
    9384:	f8a1 01ca 	strh.w	r0, [r1, #458]	; 0x1ca
    9388:	b10f      	cbz	r7, 938e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    938a:	f881 51dc 	strb.w	r5, [r1, #476]	; 0x1dc
    938e:	f881 51d2 	strb.w	r5, [r1, #466]	; 0x1d2
    9392:	f8b1 21ce 	ldrh.w	r2, [r1, #462]	; 0x1ce
    9396:	f101 0078 	add.w	r0, r1, #120	; 0x78
    939a:	f005 fead 	bl	f0f8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    939e:	b120      	cbz	r0, 93aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    93a0:	f640 31ad 	movw	r1, #2989	; 0xbad
    93a4:	2031      	movs	r0, #49	; 0x31
    93a6:	f7fc f8c5 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    93aa:	6860      	ldr	r0, [r4, #4]
    93ac:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    93b0:	290b      	cmp	r1, #11
    93b2:	d001      	beq.n	93b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    93b4:	290c      	cmp	r1, #12
    93b6:	d119      	bne.n	93ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    93b8:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    93bc:	f8b0 3274 	ldrh.w	r3, [r0, #628]	; 0x274
    93c0:	1ad2      	subs	r2, r2, r3
    93c2:	b212      	sxth	r2, r2
    93c4:	2a00      	cmp	r2, #0
    93c6:	db11      	blt.n	93ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    93c8:	f8d0 1276 	ldr.w	r1, [r0, #630]	; 0x276
    93cc:	f8c0 108f 	str.w	r1, [r0, #143]	; 0x8f
    93d0:	f890 127a 	ldrb.w	r1, [r0, #634]	; 0x27a
    93d4:	f880 1093 	strb.w	r1, [r0, #147]	; 0x93
    93d8:	2103      	movs	r1, #3
    93da:	f7fd fedd 	bl	7198 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    93de:	6860      	ldr	r0, [r4, #4]
    93e0:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    93e4:	21ff      	movs	r1, #255	; 0xff
    93e6:	f880 10dc 	strb.w	r1, [r0, #220]	; 0xdc
    93ea:	e026      	b.n	943a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    93ec:	2924      	cmp	r1, #36	; 0x24
    93ee:	d111      	bne.n	9414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    93f0:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    93f4:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    93f8:	1a89      	subs	r1, r1, r2
    93fa:	b209      	sxth	r1, r1
    93fc:	2900      	cmp	r1, #0
    93fe:	db09      	blt.n	9414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    9400:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9404:	f000 fe9c 	bl	a140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    9408:	2800      	cmp	r0, #0
    940a:	6860      	ldr	r0, [r4, #4]
    940c:	f880 5124 	strb.w	r5, [r0, #292]	; 0x124
    9410:	d029      	beq.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    9412:	e012      	b.n	943a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    9414:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9418:	2924      	cmp	r1, #36	; 0x24
    941a:	d001      	beq.n	9420 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    941c:	2925      	cmp	r1, #37	; 0x25
    941e:	d10c      	bne.n	943a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    9420:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    9424:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    9428:	1a89      	subs	r1, r1, r2
    942a:	b209      	sxth	r1, r1
    942c:	2900      	cmp	r1, #0
    942e:	db04      	blt.n	943a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    9430:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9434:	f000 fe84 	bl	a140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    9438:	b1a8      	cbz	r0, 9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    943a:	480f      	ldr	r0, [pc, #60]	; (9478 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    943c:	9000      	str	r0, [sp, #0]
    943e:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    9442:	4b0e      	ldr	r3, [pc, #56]	; (947c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    9444:	4a0e      	ldr	r2, [pc, #56]	; (9480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    9446:	f7fc ff9f 	bl	6388 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    944a:	6860      	ldr	r0, [r4, #4]
    944c:	2301      	movs	r3, #1
    944e:	2105      	movs	r1, #5
    9450:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9454:	3078      	adds	r0, #120	; 0x78
    9456:	f005 fcbb 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    945a:	2800      	cmp	r0, #0
    945c:	d009      	beq.n	9472 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    945e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9462:	f7fc bf8b 	b.w	637c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    9466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    946a:	2100      	movs	r1, #0
    946c:	4608      	mov	r0, r1
    946e:	f000 bbd9 	b.w	9c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a4>
    9472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9474:	20000174 	.word	0x20000174
    9478:	00009c25 	.word	0x00009c25
    947c:	00009745 	.word	0x00009745
    9480:	0000a08d 	.word	0x0000a08d
    9484:	4804      	ldr	r0, [pc, #16]	; (9498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    9486:	2100      	movs	r1, #0
    9488:	6840      	ldr	r0, [r0, #4]
    948a:	f820 1fc0 	strh.w	r1, [r0, #192]!
    948e:	7881      	ldrb	r1, [r0, #2]
    9490:	1c49      	adds	r1, r1, #1
    9492:	7081      	strb	r1, [r0, #2]
    9494:	4770      	bx	lr
    9496:	0000      	.short	0x0000
    9498:	20000174 	.word	0x20000174
    949c:	4807      	ldr	r0, [pc, #28]	; (94bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    949e:	b510      	push	{r4, lr}
    94a0:	6841      	ldr	r1, [r0, #4]
    94a2:	f811 0fc2 	ldrb.w	r0, [r1, #194]!
    94a6:	1e40      	subs	r0, r0, #1
    94a8:	b240      	sxtb	r0, r0
    94aa:	7008      	strb	r0, [r1, #0]
    94ac:	2800      	cmp	r0, #0
    94ae:	da04      	bge.n	94ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    94b0:	f240 118d 	movw	r1, #397	; 0x18d
    94b4:	2031      	movs	r0, #49	; 0x31
    94b6:	f7fc f83d 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94ba:	bd10      	pop	{r4, pc}
    94bc:	20000174 	.word	0x20000174
    94c0:	491d      	ldr	r1, [pc, #116]	; (9538 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    94c2:	b508      	push	{r3, lr}
    94c4:	6849      	ldr	r1, [r1, #4]
    94c6:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    94ca:	b1b8      	cbz	r0, 94fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>
    94cc:	2a10      	cmp	r2, #16
    94ce:	d006      	beq.n	94de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    94d0:	2a14      	cmp	r2, #20
    94d2:	d007      	beq.n	94e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    94d4:	2a15      	cmp	r2, #21
    94d6:	d008      	beq.n	94ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26a>
    94d8:	2a1b      	cmp	r2, #27
    94da:	d127      	bne.n	952c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    94dc:	e008      	b.n	94f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x270>
    94de:	2101      	movs	r1, #1
    94e0:	200b      	movs	r0, #11
    94e2:	e007      	b.n	94f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    94e4:	f001 fb88 	bl	abf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    94e8:	e006      	b.n	94f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    94ea:	f000 fd8d 	bl	a008 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd88>
    94ee:	e003      	b.n	94f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    94f0:	2101      	movs	r1, #1
    94f2:	2006      	movs	r0, #6
    94f4:	f000 fd6a 	bl	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    94f8:	2001      	movs	r0, #1
    94fa:	bd08      	pop	{r3, pc}
    94fc:	2a21      	cmp	r2, #33	; 0x21
    94fe:	d004      	beq.n	950a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28a>
    9500:	2a28      	cmp	r2, #40	; 0x28
    9502:	d113      	bne.n	952c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    9504:	2101      	movs	r1, #1
    9506:	2011      	movs	r0, #17
    9508:	e7f4      	b.n	94f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    950a:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    950e:	2802      	cmp	r0, #2
    9510:	d00e      	beq.n	9530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    9512:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    9516:	2801      	cmp	r0, #1
    9518:	d108      	bne.n	952c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    951a:	f891 0125 	ldrb.w	r0, [r1, #293]	; 0x125
    951e:	f88d 0000 	strb.w	r0, [sp]
    9522:	9800      	ldr	r0, [sp, #0]
    9524:	9000      	str	r0, [sp, #0]
    9526:	f89d 0000 	ldrb.w	r0, [sp]
    952a:	b108      	cbz	r0, 9530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    952c:	2000      	movs	r0, #0
    952e:	bd08      	pop	{r3, pc}
    9530:	2101      	movs	r1, #1
    9532:	2017      	movs	r0, #23
    9534:	e7de      	b.n	94f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    9536:	0000      	.short	0x0000
    9538:	20000174 	.word	0x20000174
    953c:	b538      	push	{r3, r4, r5, lr}
    953e:	2800      	cmp	r0, #0
    9540:	d16d      	bne.n	961e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    9542:	4c38      	ldr	r4, [pc, #224]	; (9624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a4>)
    9544:	6860      	ldr	r0, [r4, #4]
    9546:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    954a:	07ca      	lsls	r2, r1, #31
    954c:	d002      	beq.n	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    954e:	2101      	movs	r1, #1
    9550:	2009      	movs	r0, #9
    9552:	e05d      	b.n	9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    9554:	078a      	lsls	r2, r1, #30
    9556:	d50a      	bpl.n	956e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    9558:	2101      	movs	r1, #1
    955a:	200c      	movs	r0, #12
    955c:	f000 fd36 	bl	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9560:	6860      	ldr	r0, [r4, #4]
    9562:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    9566:	f041 0101 	orr.w	r1, r1, #1
    956a:	7001      	strb	r1, [r0, #0]
    956c:	e052      	b.n	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    956e:	074a      	lsls	r2, r1, #29
    9570:	d502      	bpl.n	9578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    9572:	2101      	movs	r1, #1
    9574:	2013      	movs	r0, #19
    9576:	e04b      	b.n	9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    9578:	070a      	lsls	r2, r1, #28
    957a:	d506      	bpl.n	958a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    957c:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    9580:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    9584:	2101      	movs	r1, #1
    9586:	2007      	movs	r0, #7
    9588:	e042      	b.n	9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    958a:	f011 0f30 	tst.w	r1, #48	; 0x30
    958e:	d046      	beq.n	961e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    9590:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    9594:	f88d 1000 	strb.w	r1, [sp]
    9598:	9900      	ldr	r1, [sp, #0]
    959a:	9100      	str	r1, [sp, #0]
    959c:	f89d 1000 	ldrb.w	r1, [sp]
    95a0:	bbd1      	cbnz	r1, 9618 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    95a2:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    95a6:	2500      	movs	r5, #0
    95a8:	f88d 1000 	strb.w	r1, [sp]
    95ac:	9900      	ldr	r1, [sp, #0]
    95ae:	9100      	str	r1, [sp, #0]
    95b0:	f89d 1000 	ldrb.w	r1, [sp]
    95b4:	b1c1      	cbz	r1, 95e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    95b6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    95ba:	2924      	cmp	r1, #36	; 0x24
    95bc:	d02d      	beq.n	961a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    95be:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    95c2:	2924      	cmp	r1, #36	; 0x24
    95c4:	d029      	beq.n	961a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    95c6:	2300      	movs	r3, #0
    95c8:	f200 2276 	addw	r2, r0, #630	; 0x276
    95cc:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    95d0:	f006 f8bd 	bl	f74e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    95d4:	6860      	ldr	r0, [r4, #4]
    95d6:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    95da:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    95de:	f041 0110 	orr.w	r1, r1, #16
    95e2:	7001      	strb	r1, [r0, #0]
    95e4:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
    95e8:	6860      	ldr	r0, [r4, #4]
    95ea:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    95ee:	06c9      	lsls	r1, r1, #27
    95f0:	d515      	bpl.n	961e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    95f2:	f006 f8c7 	bl	f784 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    95f6:	f000 f92b 	bl	9850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    95fa:	6861      	ldr	r1, [r4, #4]
    95fc:	f101 0030 	add.w	r0, r1, #48	; 0x30
    9600:	8bc2      	ldrh	r2, [r0, #30]
    9602:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    9606:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9608:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    960c:	2101      	movs	r1, #1
    960e:	2015      	movs	r0, #21
    9610:	f000 fcdc 	bl	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9614:	2001      	movs	r0, #1
    9616:	bd38      	pop	{r3, r4, r5, pc}
    9618:	e001      	b.n	961e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    961a:	2301      	movs	r3, #1
    961c:	e7d4      	b.n	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    961e:	2000      	movs	r0, #0
    9620:	e7f9      	b.n	9616 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x396>
    9622:	0000      	.short	0x0000
    9624:	20000174 	.word	0x20000174
    9628:	b570      	push	{r4, r5, r6, lr}
    962a:	460d      	mov	r5, r1
    962c:	4606      	mov	r6, r0
    962e:	f005 fe54 	bl	f2da <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    9632:	4604      	mov	r4, r0
    9634:	4630      	mov	r0, r6
    9636:	f005 fe5c 	bl	f2f2 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    963a:	4629      	mov	r1, r5
    963c:	f000 f81e 	bl	967c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fc>
    9640:	b1b8      	cbz	r0, 9672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    9642:	4620      	mov	r0, r4
    9644:	f005 fc5e 	bl	ef04 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    9648:	0001      	movs	r1, r0
    964a:	d00d      	beq.n	9668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    964c:	480a      	ldr	r0, [pc, #40]	; (9678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>)
    964e:	6840      	ldr	r0, [r0, #4]
    9650:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    9654:	428a      	cmp	r2, r1
    9656:	d007      	beq.n	9668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    9658:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    965c:	2901      	cmp	r1, #1
    965e:	d005      	beq.n	966c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    9660:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9664:	4220      	tst	r0, r4
    9666:	d004      	beq.n	9672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    9668:	2001      	movs	r0, #1
    966a:	bd70      	pop	{r4, r5, r6, pc}
    966c:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    9670:	e7f8      	b.n	9664 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>
    9672:	2000      	movs	r0, #0
    9674:	bd70      	pop	{r4, r5, r6, pc}
    9676:	0000      	.short	0x0000
    9678:	20000174 	.word	0x20000174
    967c:	b570      	push	{r4, r5, r6, lr}
    967e:	460d      	mov	r5, r1
    9680:	4604      	mov	r4, r0
    9682:	f005 fc3f 	bl	ef04 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    9686:	b350      	cbz	r0, 96de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    9688:	4916      	ldr	r1, [pc, #88]	; (96e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>)
    968a:	6849      	ldr	r1, [r1, #4]
    968c:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
    9690:	4282      	cmp	r2, r0
    9692:	d024      	beq.n	96de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    9694:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    9698:	2b01      	cmp	r3, #1
    969a:	d005      	beq.n	96a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    969c:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
    96a0:	4223      	tst	r3, r4
    96a2:	d013      	beq.n	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    96a4:	b11d      	cbz	r5, 96ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    96a6:	e01a      	b.n	96de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    96a8:	f891 3126 	ldrb.w	r3, [r1, #294]	; 0x126
    96ac:	e7f8      	b.n	96a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    96ae:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    96b2:	4221      	tst	r1, r4
    96b4:	d113      	bne.n	96de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    96b6:	b15a      	cbz	r2, 96d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x450>
    96b8:	2a04      	cmp	r2, #4
    96ba:	d00e      	beq.n	96da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    96bc:	2804      	cmp	r0, #4
    96be:	d00c      	beq.n	96da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    96c0:	2a08      	cmp	r2, #8
    96c2:	d00a      	beq.n	96da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    96c4:	2808      	cmp	r0, #8
    96c6:	d008      	beq.n	96da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    96c8:	4282      	cmp	r2, r0
    96ca:	d908      	bls.n	96de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    96cc:	2000      	movs	r0, #0
    96ce:	bd70      	pop	{r4, r5, r6, pc}
    96d0:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    96d4:	2006      	movs	r0, #6
    96d6:	f7fb ff2d 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96da:	4282      	cmp	r2, r0
    96dc:	d3f6      	bcc.n	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    96de:	2001      	movs	r0, #1
    96e0:	bd70      	pop	{r4, r5, r6, pc}
    96e2:	0000      	.short	0x0000
    96e4:	20000174 	.word	0x20000174
    96e8:	b510      	push	{r4, lr}
    96ea:	4c10      	ldr	r4, [pc, #64]	; (972c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ac>)
    96ec:	2301      	movs	r3, #1
    96ee:	2100      	movs	r1, #0
    96f0:	6860      	ldr	r0, [r4, #4]
    96f2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    96f6:	3078      	adds	r0, #120	; 0x78
    96f8:	f005 fb6a 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96fc:	b140      	cbz	r0, 9710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    96fe:	6860      	ldr	r0, [r4, #4]
    9700:	2301      	movs	r3, #1
    9702:	2104      	movs	r1, #4
    9704:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9708:	3078      	adds	r0, #120	; 0x78
    970a:	f005 fb61 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    970e:	b108      	cbz	r0, 9714 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x494>
    9710:	2000      	movs	r0, #0
    9712:	bd10      	pop	{r4, pc}
    9714:	6860      	ldr	r0, [r4, #4]
    9716:	f890 00b2 	ldrb.w	r0, [r0, #178]	; 0xb2
    971a:	2800      	cmp	r0, #0
    971c:	d0f9      	beq.n	9712 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    971e:	2100      	movs	r1, #0
    9720:	2012      	movs	r0, #18
    9722:	f000 fc53 	bl	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9726:	2001      	movs	r0, #1
    9728:	bd10      	pop	{r4, pc}
    972a:	0000      	.short	0x0000
    972c:	20000174 	.word	0x20000174
    9730:	4903      	ldr	r1, [pc, #12]	; (9740 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>)
    9732:	2000      	movs	r0, #0
    9734:	6849      	ldr	r1, [r1, #4]
    9736:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    973a:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    973e:	4770      	bx	lr
    9740:	20000174 	.word	0x20000174
    9744:	490d      	ldr	r1, [pc, #52]	; (977c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4fc>)
    9746:	4602      	mov	r2, r0
    9748:	7848      	ldrb	r0, [r1, #1]
    974a:	b9a0      	cbnz	r0, 9776 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    974c:	f101 0010 	add.w	r0, r1, #16
    9750:	6840      	ldr	r0, [r0, #4]
    9752:	b142      	cbz	r2, 9766 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e6>
    9754:	7889      	ldrb	r1, [r1, #2]
    9756:	0709      	lsls	r1, r1, #28
    9758:	d503      	bpl.n	9762 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e2>
    975a:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
    975e:	2808      	cmp	r0, #8
    9760:	d009      	beq.n	9776 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    9762:	2001      	movs	r0, #1
    9764:	4770      	bx	lr
    9766:	f100 0130 	add.w	r1, r0, #48	; 0x30
    976a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    976c:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    976e:	428a      	cmp	r2, r1
    9770:	d801      	bhi.n	9776 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    9772:	f7ff b93d 	b.w	89f0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    9776:	2000      	movs	r0, #0
    9778:	4770      	bx	lr
    977a:	0000      	.short	0x0000
    977c:	20000164 	.word	0x20000164
    9780:	b538      	push	{r3, r4, r5, lr}
    9782:	4c32      	ldr	r4, [pc, #200]	; (984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>)
    9784:	4605      	mov	r5, r0
    9786:	6860      	ldr	r0, [r4, #4]
    9788:	3078      	adds	r0, #120	; 0x78
    978a:	f006 ffcb 	bl	10724 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    978e:	2800      	cmp	r0, #0
    9790:	d15b      	bne.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9792:	2d00      	cmp	r5, #0
    9794:	d159      	bne.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9796:	6860      	ldr	r0, [r4, #4]
    9798:	2301      	movs	r3, #1
    979a:	4619      	mov	r1, r3
    979c:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    97a0:	3078      	adds	r0, #120	; 0x78
    97a2:	f005 fb15 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97a6:	2800      	cmp	r0, #0
    97a8:	d14f      	bne.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97aa:	6860      	ldr	r0, [r4, #4]
    97ac:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    97b0:	f88d 1000 	strb.w	r1, [sp]
    97b4:	9900      	ldr	r1, [sp, #0]
    97b6:	9100      	str	r1, [sp, #0]
    97b8:	f89d 2000 	ldrb.w	r2, [sp]
    97bc:	2100      	movs	r1, #0
    97be:	b142      	cbz	r2, 97d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x552>
    97c0:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
    97c4:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    97c8:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    97cc:	2100      	movs	r1, #0
    97ce:	2002      	movs	r0, #2
    97d0:	e030      	b.n	9834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    97d2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    97d6:	2301      	movs	r3, #1
    97d8:	2104      	movs	r1, #4
    97da:	3078      	adds	r0, #120	; 0x78
    97dc:	f005 faf8 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97e0:	4605      	mov	r5, r0
    97e2:	f7ff feab 	bl	953c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    97e6:	2800      	cmp	r0, #0
    97e8:	d12f      	bne.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97ea:	4628      	mov	r0, r5
    97ec:	f7ff fe68 	bl	94c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    97f0:	2800      	cmp	r0, #0
    97f2:	d12a      	bne.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97f4:	f7ff ff78 	bl	96e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x468>
    97f8:	2800      	cmp	r0, #0
    97fa:	d126      	bne.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97fc:	6860      	ldr	r0, [r4, #4]
    97fe:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9802:	290a      	cmp	r1, #10
    9804:	d01a      	beq.n	983c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5bc>
    9806:	2d00      	cmp	r5, #0
    9808:	d11f      	bne.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    980a:	f000 fb2b 	bl	9e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe4>
    980e:	2800      	cmp	r0, #0
    9810:	d11b      	bne.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9812:	6860      	ldr	r0, [r4, #4]
    9814:	2301      	movs	r3, #1
    9816:	2100      	movs	r1, #0
    9818:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    981c:	3078      	adds	r0, #120	; 0x78
    981e:	f005 fad7 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9822:	2800      	cmp	r0, #0
    9824:	d011      	beq.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9826:	6860      	ldr	r0, [r4, #4]
    9828:	f890 026c 	ldrb.w	r0, [r0, #620]	; 0x26c
    982c:	2800      	cmp	r0, #0
    982e:	d00c      	beq.n	984a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9830:	2100      	movs	r1, #0
    9832:	20ff      	movs	r0, #255	; 0xff
    9834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9838:	f000 bbc8 	b.w	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    983c:	f890 1109 	ldrb.w	r1, [r0, #265]	; 0x109
    9840:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    9844:	2100      	movs	r1, #0
    9846:	2007      	movs	r0, #7
    9848:	e7f4      	b.n	9834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    984a:	bd38      	pop	{r3, r4, r5, pc}
    984c:	20000174 	.word	0x20000174
    9850:	480a      	ldr	r0, [pc, #40]	; (987c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fc>)
    9852:	b510      	push	{r4, lr}
    9854:	6843      	ldr	r3, [r0, #4]
    9856:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    985a:	2801      	cmp	r0, #1
    985c:	d00a      	beq.n	9874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f4>
    985e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    9862:	f103 0130 	add.w	r1, r3, #48	; 0x30
    9866:	8818      	ldrh	r0, [r3, #0]
    9868:	f005 ff49 	bl	f6fe <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    986c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9870:	f7fd bf5a 	b.w	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9874:	2002      	movs	r0, #2
    9876:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    987a:	bd10      	pop	{r4, pc}
    987c:	20000174 	.word	0x20000174
    9880:	b570      	push	{r4, r5, r6, lr}
    9882:	4c24      	ldr	r4, [pc, #144]	; (9914 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x694>)
    9884:	0006      	movs	r6, r0
    9886:	f104 0510 	add.w	r5, r4, #16
    988a:	d12f      	bne.n	98ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    988c:	f000 f8a2 	bl	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>
    9890:	f000 f844 	bl	991c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>
    9894:	0006      	movs	r6, r0
    9896:	d129      	bne.n	98ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9898:	8860      	ldrh	r0, [r4, #2]
    989a:	0741      	lsls	r1, r0, #29
    989c:	d506      	bpl.n	98ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    989e:	6869      	ldr	r1, [r5, #4]
    98a0:	f891 1088 	ldrb.w	r1, [r1, #136]	; 0x88
    98a4:	2907      	cmp	r1, #7
    98a6:	d101      	bne.n	98ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    98a8:	2101      	movs	r1, #1
    98aa:	7021      	strb	r1, [r4, #0]
    98ac:	0780      	lsls	r0, r0, #30
    98ae:	d512      	bpl.n	98d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    98b0:	68a0      	ldr	r0, [r4, #8]
    98b2:	78c0      	ldrb	r0, [r0, #3]
    98b4:	2826      	cmp	r0, #38	; 0x26
    98b6:	d205      	bcs.n	98c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    98b8:	4917      	ldr	r1, [pc, #92]	; (9918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>)
    98ba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    98be:	b109      	cbz	r1, 98c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    98c0:	4788      	blx	r1
    98c2:	e008      	b.n	98d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    98c4:	28ff      	cmp	r0, #255	; 0xff
    98c6:	d004      	beq.n	98d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    98c8:	f240 71c9 	movw	r1, #1993	; 0x7c9
    98cc:	2031      	movs	r0, #49	; 0x31
    98ce:	f7fb fe31 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98d2:	f001 f9d3 	bl	ac7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    98d6:	78a0      	ldrb	r0, [r4, #2]
    98d8:	06c0      	lsls	r0, r0, #27
    98da:	d507      	bpl.n	98ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    98dc:	6868      	ldr	r0, [r5, #4]
    98de:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    98e2:	290b      	cmp	r1, #11
    98e4:	d102      	bne.n	98ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    98e6:	210c      	movs	r1, #12
    98e8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    98ec:	7860      	ldrb	r0, [r4, #1]
    98ee:	0700      	lsls	r0, r0, #28
    98f0:	d50d      	bpl.n	990e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    98f2:	6868      	ldr	r0, [r5, #4]
    98f4:	2301      	movs	r3, #1
    98f6:	2105      	movs	r1, #5
    98f8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    98fc:	3078      	adds	r0, #120	; 0x78
    98fe:	f005 fa67 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9902:	b108      	cbz	r0, 9908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x688>
    9904:	2608      	movs	r6, #8
    9906:	e002      	b.n	990e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    9908:	2000      	movs	r0, #0
    990a:	f7fc fe05 	bl	6518 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    990e:	4630      	mov	r0, r6
    9910:	bd70      	pop	{r4, r5, r6, pc}
    9912:	0000      	.short	0x0000
    9914:	20000164 	.word	0x20000164
    9918:	20000214 	.word	0x20000214
    991c:	b570      	push	{r4, r5, r6, lr}
    991e:	4d2b      	ldr	r5, [pc, #172]	; (99cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74c>)
    9920:	2000      	movs	r0, #0
    9922:	78a9      	ldrb	r1, [r5, #2]
    9924:	07c9      	lsls	r1, r1, #31
    9926:	d017      	beq.n	9958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d8>
    9928:	68e8      	ldr	r0, [r5, #12]
    992a:	f105 0410 	add.w	r4, r5, #16
    992e:	2301      	movs	r3, #1
    9930:	78c6      	ldrb	r6, [r0, #3]
    9932:	6860      	ldr	r0, [r4, #4]
    9934:	2105      	movs	r1, #5
    9936:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    993a:	3078      	adds	r0, #120	; 0x78
    993c:	f005 fa48 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9940:	b158      	cbz	r0, 995a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    9942:	1eb6      	subs	r6, r6, #2
    9944:	2e0a      	cmp	r6, #10
    9946:	d206      	bcs.n	9956 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    9948:	e8df f006 	tbb	[pc, r6]
    994c:	05050707 	.word	0x05050707
    9950:	05050707 	.word	0x05050707
    9954:	0707      	.short	0x0707
    9956:	2008      	movs	r0, #8
    9958:	bd70      	pop	{r4, r5, r6, pc}
    995a:	68e8      	ldr	r0, [r5, #12]
    995c:	f7fd fd48 	bl	73f0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9960:	b138      	cbz	r0, 9972 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f2>
    9962:	68e8      	ldr	r0, [r5, #12]
    9964:	78c5      	ldrb	r5, [r0, #3]
    9966:	b145      	cbz	r5, 997a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9968:	2d01      	cmp	r5, #1
    996a:	d006      	beq.n	997a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    996c:	2d16      	cmp	r5, #22
    996e:	d118      	bne.n	99a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9970:	e003      	b.n	997a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9976:	f000 bdd1 	b.w	a51c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    997a:	6860      	ldr	r0, [r4, #4]
    997c:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9980:	f005 fa74 	bl	ee6c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9984:	b168      	cbz	r0, 99a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9986:	6861      	ldr	r1, [r4, #4]
    9988:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    998c:	281f      	cmp	r0, #31
    998e:	d008      	beq.n	99a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9990:	2820      	cmp	r0, #32
    9992:	d003      	beq.n	999c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    9994:	2d16      	cmp	r5, #22
    9996:	d00c      	beq.n	99b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x732>
    9998:	2002      	movs	r0, #2
    999a:	bd70      	pop	{r4, r5, r6, pc}
    999c:	2027      	movs	r0, #39	; 0x27
    999e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    99a2:	2d26      	cmp	r5, #38	; 0x26
    99a4:	d207      	bcs.n	99b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    99a6:	480a      	ldr	r0, [pc, #40]	; (99d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    99a8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    99ac:	b118      	cbz	r0, 99b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    99ae:	4780      	blx	r0
    99b0:	e003      	b.n	99ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    99b2:	2020      	movs	r0, #32
    99b4:	bd70      	pop	{r4, r5, r6, pc}
    99b6:	f000 fdb1 	bl	a51c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    99ba:	6861      	ldr	r1, [r4, #4]
    99bc:	e9f1 233a 	ldrd	r2, r3, [r1, #232]!	; 0xe8
    99c0:	1c52      	adds	r2, r2, #1
    99c2:	f143 0300 	adc.w	r3, r3, #0
    99c6:	e9c1 2300 	strd	r2, r3, [r1]
    99ca:	bd70      	pop	{r4, r5, r6, pc}
    99cc:	20000164 	.word	0x20000164
    99d0:	2000017c 	.word	0x2000017c
    99d4:	b570      	push	{r4, r5, r6, lr}
    99d6:	4e23      	ldr	r6, [pc, #140]	; (9a64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
    99d8:	78b0      	ldrb	r0, [r6, #2]
    99da:	0700      	lsls	r0, r0, #28
    99dc:	d540      	bpl.n	9a60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    99de:	f106 0410 	add.w	r4, r6, #16
    99e2:	6860      	ldr	r0, [r4, #4]
    99e4:	3078      	adds	r0, #120	; 0x78
    99e6:	f006 fe9d 	bl	10724 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    99ea:	b148      	cbz	r0, 9a00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
    99ec:	6860      	ldr	r0, [r4, #4]
    99ee:	21fe      	movs	r1, #254	; 0xfe
    99f0:	2500      	movs	r5, #0
    99f2:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    99f6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    99fa:	2919      	cmp	r1, #25
    99fc:	d10c      	bne.n	9a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
    99fe:	e004      	b.n	9a0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
    9a00:	f240 71d3 	movw	r1, #2003	; 0x7d3
    9a04:	2031      	movs	r0, #49	; 0x31
    9a06:	f7fb fd95 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a0a:	f880 50c3 	strb.w	r5, [r0, #195]	; 0xc3
    9a0e:	f7ff fd45 	bl	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9a12:	6860      	ldr	r0, [r4, #4]
    9a14:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9a18:	6860      	ldr	r0, [r4, #4]
    9a1a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9a1e:	291f      	cmp	r1, #31
    9a20:	d002      	beq.n	9a28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
    9a22:	2929      	cmp	r1, #41	; 0x29
    9a24:	d113      	bne.n	9a4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9a26:	e00b      	b.n	9a40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    9a28:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9a2c:	f005 fa1e 	bl	ee6c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9a30:	b108      	cbz	r0, 9a36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
    9a32:	2027      	movs	r0, #39	; 0x27
    9a34:	e000      	b.n	9a38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
    9a36:	2020      	movs	r0, #32
    9a38:	6861      	ldr	r1, [r4, #4]
    9a3a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9a3e:	e006      	b.n	9a4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9a40:	2101      	movs	r1, #1
    9a42:	f880 126d 	strb.w	r1, [r0, #621]	; 0x26d
    9a46:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9a4a:	f880 50be 	strb.w	r5, [r0, #190]	; 0xbe
    9a4e:	6860      	ldr	r0, [r4, #4]
    9a50:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    9a54:	2908      	cmp	r1, #8
    9a56:	d103      	bne.n	9a60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    9a58:	2102      	movs	r1, #2
    9a5a:	7031      	strb	r1, [r6, #0]
    9a5c:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    9a60:	bd70      	pop	{r4, r5, r6, pc}
    9a62:	0000      	.short	0x0000
    9a64:	20000164 	.word	0x20000164
    9a68:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    9a6a:	4606      	mov	r6, r0
    9a6c:	4668      	mov	r0, sp
    9a6e:	f7fc fbdd 	bl	622c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9a72:	b310      	cbz	r0, 9aba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83a>
    9a74:	2222      	movs	r2, #34	; 0x22
    9a76:	2100      	movs	r1, #0
    9a78:	9800      	ldr	r0, [sp, #0]
    9a7a:	f003 ff47 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9a7e:	2103      	movs	r1, #3
    9a80:	9800      	ldr	r0, [sp, #0]
    9a82:	f005 fc9a 	bl	f3ba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9a86:	9800      	ldr	r0, [sp, #0]
    9a88:	7801      	ldrb	r1, [r0, #0]
    9a8a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    9a8e:	7001      	strb	r1, [r0, #0]
    9a90:	4631      	mov	r1, r6
    9a92:	f7fd fcbd 	bl	7410 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9a96:	4c62      	ldr	r4, [pc, #392]	; (9c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a0>)
    9a98:	f644 152f 	movw	r5, #18735	; 0x492f
    9a9c:	2e0e      	cmp	r6, #14
    9a9e:	d079      	beq.n	9b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    9aa0:	dc0e      	bgt.n	9ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x840>
    9aa2:	f1a6 0602 	sub.w	r6, r6, #2
    9aa6:	2e0c      	cmp	r6, #12
    9aa8:	d21c      	bcs.n	9ae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    9aaa:	e8df f006 	tbb	[pc, r6]
    9aae:	1b1e      	.short	0x1b1e
    9ab0:	23aeae52 	.word	0x23aeae52
    9ab4:	ae1b5f1b 	.word	0xae1b5f1b
    9ab8:	363c      	.short	0x363c
    9aba:	f640 210a 	movw	r1, #2570	; 0xa0a
    9abe:	e0aa      	b.n	9c16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9ac0:	2e15      	cmp	r6, #21
    9ac2:	d068      	beq.n	9b96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    9ac4:	dc08      	bgt.n	9ad8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x858>
    9ac6:	2e11      	cmp	r6, #17
    9ac8:	d01a      	beq.n	9b00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x880>
    9aca:	2e12      	cmp	r6, #18
    9acc:	d017      	beq.n	9afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9ace:	2e13      	cmp	r6, #19
    9ad0:	d015      	beq.n	9afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9ad2:	2e14      	cmp	r6, #20
    9ad4:	d106      	bne.n	9ae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    9ad6:	e05e      	b.n	9b96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    9ad8:	2e16      	cmp	r6, #22
    9ada:	d030      	beq.n	9b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    9adc:	2e17      	cmp	r6, #23
    9ade:	d075      	beq.n	9bcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    9ae0:	2eff      	cmp	r6, #255	; 0xff
    9ae2:	d072      	beq.n	9bca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94a>
    9ae4:	f640 217b 	movw	r1, #2683	; 0xa7b
    9ae8:	e095      	b.n	9c16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9aea:	6861      	ldr	r1, [r4, #4]
    9aec:	9800      	ldr	r0, [sp, #0]
    9aee:	f891 110e 	ldrb.w	r1, [r1, #270]	; 0x10e
    9af2:	e016      	b.n	9b22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8a2>
    9af4:	6860      	ldr	r0, [r4, #4]
    9af6:	9900      	ldr	r1, [sp, #0]
    9af8:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
    9afc:	7108      	strb	r0, [r1, #4]
    9afe:	e084      	b.n	9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b00:	6860      	ldr	r0, [r4, #4]
    9b02:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    9b06:	9800      	ldr	r0, [sp, #0]
    9b08:	f005 fc33 	bl	f372 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9b0c:	6860      	ldr	r0, [r4, #4]
    9b0e:	f890 110a 	ldrb.w	r1, [r0, #266]	; 0x10a
    9b12:	9800      	ldr	r0, [sp, #0]
    9b14:	f005 fc2f 	bl	f376 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    9b18:	e077      	b.n	9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b1a:	6861      	ldr	r1, [r4, #4]
    9b1c:	9800      	ldr	r0, [sp, #0]
    9b1e:	f891 110a 	ldrb.w	r1, [r1, #266]	; 0x10a
    9b22:	7101      	strb	r1, [r0, #4]
    9b24:	e071      	b.n	9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b26:	9800      	ldr	r0, [sp, #0]
    9b28:	210c      	movs	r1, #12
    9b2a:	7101      	strb	r1, [r0, #4]
    9b2c:	2159      	movs	r1, #89	; 0x59
    9b2e:	7141      	strb	r1, [r0, #5]
    9b30:	2100      	movs	r1, #0
    9b32:	7181      	strb	r1, [r0, #6]
    9b34:	21d8      	movs	r1, #216	; 0xd8
    9b36:	71c1      	strb	r1, [r0, #7]
    9b38:	2111      	movs	r1, #17
    9b3a:	7201      	strb	r1, [r0, #8]
    9b3c:	e065      	b.n	9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b3e:	9800      	ldr	r0, [sp, #0]
    9b40:	f8d4 1004 	ldr.w	r1, [r4, #4]
    9b44:	f891 2126 	ldrb.w	r2, [r1, #294]	; 0x126
    9b48:	7102      	strb	r2, [r0, #4]
    9b4a:	f891 1127 	ldrb.w	r1, [r1, #295]	; 0x127
    9b4e:	7141      	strb	r1, [r0, #5]
    9b50:	e05b      	b.n	9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b52:	6861      	ldr	r1, [r4, #4]
    9b54:	9800      	ldr	r0, [sp, #0]
    9b56:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
    9b5a:	f005 fc1f 	bl	f39c <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    9b5e:	6861      	ldr	r1, [r4, #4]
    9b60:	9800      	ldr	r0, [sp, #0]
    9b62:	f501 7182 	add.w	r1, r1, #260	; 0x104
    9b66:	f005 fc16 	bl	f396 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    9b6a:	e04e      	b.n	9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b6c:	f001 ff54 	bl	ba18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b70:	4028      	ands	r0, r5
    9b72:	f001 0106 	and.w	r1, r1, #6
    9b76:	e9cd 0101 	strd	r0, r1, [sp, #4]
    9b7a:	6861      	ldr	r1, [r4, #4]
    9b7c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9b80:	f891 10d4 	ldrb.w	r1, [r1, #212]	; 0xd4
    9b84:	4008      	ands	r0, r1
    9b86:	f88d 0004 	strb.w	r0, [sp, #4]
    9b8a:	a901      	add	r1, sp, #4
    9b8c:	9800      	ldr	r0, [sp, #0]
    9b8e:	f005 fc0f 	bl	f3b0 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9b92:	e03a      	b.n	9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b94:	e025      	b.n	9be2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x962>
    9b96:	6860      	ldr	r0, [r4, #4]
    9b98:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    9b9c:	9800      	ldr	r0, [sp, #0]
    9b9e:	f005 fc14 	bl	f3ca <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9ba2:	6860      	ldr	r0, [r4, #4]
    9ba4:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    9ba8:	9800      	ldr	r0, [sp, #0]
    9baa:	f005 fc12 	bl	f3d2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9bae:	6860      	ldr	r0, [r4, #4]
    9bb0:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9bb4:	9800      	ldr	r0, [sp, #0]
    9bb6:	f005 fc10 	bl	f3da <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9bba:	6860      	ldr	r0, [r4, #4]
    9bbc:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    9bc0:	9800      	ldr	r0, [sp, #0]
    9bc2:	f005 fc0e 	bl	f3e2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9bc6:	e020      	b.n	9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9bc8:	e000      	b.n	9bcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    9bca:	e016      	b.n	9bfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    9bcc:	6861      	ldr	r1, [r4, #4]
    9bce:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    9bd2:	2801      	cmp	r0, #1
    9bd4:	9800      	ldr	r0, [sp, #0]
    9bd6:	d0b5      	beq.n	9b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c4>
    9bd8:	f811 2f6a 	ldrb.w	r2, [r1, #106]!
    9bdc:	7102      	strb	r2, [r0, #4]
    9bde:	7849      	ldrb	r1, [r1, #1]
    9be0:	e7b5      	b.n	9b4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ce>
    9be2:	f001 ff19 	bl	ba18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9be6:	4028      	ands	r0, r5
    9be8:	f001 0106 	and.w	r1, r1, #6
    9bec:	e9cd 0101 	strd	r0, r1, [sp, #4]
    9bf0:	a901      	add	r1, sp, #4
    9bf2:	9800      	ldr	r0, [sp, #0]
    9bf4:	f005 fbd7 	bl	f3a6 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9bf8:	e007      	b.n	9c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9bfa:	6860      	ldr	r0, [r4, #4]
    9bfc:	f890 226f 	ldrb.w	r2, [r0, #623]	; 0x26f
    9c00:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    9c04:	9800      	ldr	r0, [sp, #0]
    9c06:	f005 fbb8 	bl	f37a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    9c0a:	f7fc fae9 	bl	61e0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9c0e:	2800      	cmp	r0, #0
    9c10:	d104      	bne.n	9c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    9c12:	f640 217f 	movw	r1, #2687	; 0xa7f
    9c16:	2031      	movs	r0, #49	; 0x31
    9c18:	f7fb fc8c 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9c1e:	0000      	.short	0x0000
    9c20:	20000174 	.word	0x20000174
    9c24:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9c28:	4e8d      	ldr	r6, [pc, #564]	; (9e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe0>)
    9c2a:	468a      	mov	sl, r1
    9c2c:	6870      	ldr	r0, [r6, #4]
    9c2e:	8800      	ldrh	r0, [r0, #0]
    9c30:	f7fc f8be 	bl	5db0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9c34:	0007      	movs	r7, r0
    9c36:	d00c      	beq.n	9c52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    9c38:	f1a6 0510 	sub.w	r5, r6, #16
    9c3c:	f04f 0400 	mov.w	r4, #0
    9c40:	8868      	ldrh	r0, [r5, #2]
    9c42:	05c0      	lsls	r0, r0, #23
    9c44:	d50a      	bpl.n	9c5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9dc>
    9c46:	6870      	ldr	r0, [r6, #4]
    9c48:	f8a0 40b4 	strh.w	r4, [r0, #180]	; 0xb4
    9c4c:	f880 41dc 	strb.w	r4, [r0, #476]	; 0x1dc
    9c50:	e009      	b.n	9c66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e6>
    9c52:	f640 515c 	movw	r1, #3420	; 0xd5c
    9c56:	2031      	movs	r0, #49	; 0x31
    9c58:	f7fb fc6c 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c5c:	6871      	ldr	r1, [r6, #4]
    9c5e:	f831 0fb4 	ldrh.w	r0, [r1, #180]!
    9c62:	1c40      	adds	r0, r0, #1
    9c64:	8008      	strh	r0, [r1, #0]
    9c66:	f001 f9df 	bl	b028 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    9c6a:	f04f 0901 	mov.w	r9, #1
    9c6e:	b348      	cbz	r0, 9cc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9c70:	8868      	ldrh	r0, [r5, #2]
    9c72:	0500      	lsls	r0, r0, #20
    9c74:	d506      	bpl.n	9c84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    9c76:	6870      	ldr	r0, [r6, #4]
    9c78:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    9c7c:	b111      	cbz	r1, 9c84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    9c7e:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
    9c82:	e01f      	b.n	9cc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9c84:	6871      	ldr	r1, [r6, #4]
    9c86:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    9c8a:	1c40      	adds	r0, r0, #1
    9c8c:	f8c1 00a8 	str.w	r0, [r1, #168]	; 0xa8
    9c90:	f8d1 20ac 	ldr.w	r2, [r1, #172]	; 0xac
    9c94:	4282      	cmp	r2, r0
    9c96:	d301      	bcc.n	9c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1c>
    9c98:	1a13      	subs	r3, r2, r0
    9c9a:	e000      	b.n	9c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    9c9c:	2300      	movs	r3, #0
    9c9e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    9ca2:	f10c 0c05 	add.w	ip, ip, #5
    9ca6:	4563      	cmp	r3, ip
    9ca8:	d801      	bhi.n	9cae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    9caa:	f881 90b2 	strb.w	r9, [r1, #178]	; 0xb2
    9cae:	4290      	cmp	r0, r2
    9cb0:	d308      	bcc.n	9cc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9cb2:	f501 709d 	add.w	r0, r1, #314	; 0x13a
    9cb6:	220c      	movs	r2, #12
    9cb8:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
    9cbc:	f7fd fc62 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9cc0:	f7fd fd32 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9cc4:	8868      	ldrh	r0, [r5, #2]
    9cc6:	f04f 0b02 	mov.w	fp, #2
    9cca:	f410 7f40 	tst.w	r0, #768	; 0x300
    9cce:	d00e      	beq.n	9cee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9cd0:	6870      	ldr	r0, [r6, #4]
    9cd2:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9cd6:	b111      	cbz	r1, 9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5e>
    9cd8:	2903      	cmp	r1, #3
    9cda:	d108      	bne.n	9cee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9cdc:	e002      	b.n	9ce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    9cde:	f880 908a 	strb.w	r9, [r0, #138]	; 0x8a
    9ce2:	e001      	b.n	9ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa68>
    9ce4:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    9ce8:	2101      	movs	r1, #1
    9cea:	f7fe fea7 	bl	8a3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9cee:	6870      	ldr	r0, [r6, #4]
    9cf0:	46b0      	mov	r8, r6
    9cf2:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9cf6:	2901      	cmp	r1, #1
    9cf8:	d104      	bne.n	9d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    9cfa:	8869      	ldrh	r1, [r5, #2]
    9cfc:	0549      	lsls	r1, r1, #21
    9cfe:	d501      	bpl.n	9d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    9d00:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    9d04:	9900      	ldr	r1, [sp, #0]
    9d06:	2900      	cmp	r1, #0
    9d08:	d179      	bne.n	9dfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
    9d0a:	78a9      	ldrb	r1, [r5, #2]
    9d0c:	0649      	lsls	r1, r1, #25
    9d0e:	d502      	bpl.n	9d16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa96>
    9d10:	f8a0 41f0 	strh.w	r4, [r0, #496]	; 0x1f0
    9d14:	e004      	b.n	9d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa0>
    9d16:	f8b0 11f0 	ldrh.w	r1, [r0, #496]	; 0x1f0
    9d1a:	1c49      	adds	r1, r1, #1
    9d1c:	f8a0 11f0 	strh.w	r1, [r0, #496]	; 0x1f0
    9d20:	4650      	mov	r0, sl
    9d22:	f7ff fdad 	bl	9880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    9d26:	ea40 000a 	orr.w	r0, r0, sl
    9d2a:	4682      	mov	sl, r0
    9d2c:	f7ff fd28 	bl	9780 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x500>
    9d30:	f8d8 6004 	ldr.w	r6, [r8, #4]
    9d34:	f8b6 01d0 	ldrh.w	r0, [r6, #464]	; 0x1d0
    9d38:	1c40      	adds	r0, r0, #1
    9d3a:	f8a6 01d0 	strh.w	r0, [r6, #464]	; 0x1d0
    9d3e:	f896 01d4 	ldrb.w	r0, [r6, #468]	; 0x1d4
    9d42:	b128      	cbz	r0, 9d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad0>
    9d44:	f7fc fc54 	bl	65f0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    9d48:	b1b0      	cbz	r0, 9d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9d4a:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9d4e:	e013      	b.n	9d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9d50:	f7fc faee 	bl	6330 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9d54:	b108      	cbz	r0, 9d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xada>
    9d56:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9d5a:	f7fc fae3 	bl	6324 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9d5e:	b158      	cbz	r0, 9d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9d60:	f896 01dc 	ldrb.w	r0, [r6, #476]	; 0x1dc
    9d64:	1c40      	adds	r0, r0, #1
    9d66:	b2c0      	uxtb	r0, r0
    9d68:	f886 01dc 	strb.w	r0, [r6, #476]	; 0x1dc
    9d6c:	2802      	cmp	r0, #2
    9d6e:	d903      	bls.n	9d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9d70:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9d74:	f886 41dc 	strb.w	r4, [r6, #476]	; 0x1dc
    9d78:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9d7c:	4646      	mov	r6, r8
    9d7e:	2301      	movs	r3, #1
    9d80:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9d84:	2100      	movs	r1, #0
    9d86:	3078      	adds	r0, #120	; 0x78
    9d88:	f005 f822 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d8c:	b920      	cbnz	r0, 9d98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb18>
    9d8e:	6870      	ldr	r0, [r6, #4]
    9d90:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9d94:	280c      	cmp	r0, #12
    9d96:	d160      	bne.n	9e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9d98:	6870      	ldr	r0, [r6, #4]
    9d9a:	2301      	movs	r3, #1
    9d9c:	2100      	movs	r1, #0
    9d9e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9da2:	3078      	adds	r0, #120	; 0x78
    9da4:	f005 f814 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9da8:	b350      	cbz	r0, 9e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9daa:	6870      	ldr	r0, [r6, #4]
    9dac:	2301      	movs	r3, #1
    9dae:	2100      	movs	r1, #0
    9db0:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9db4:	3078      	adds	r0, #120	; 0x78
    9db6:	f005 f80b 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9dba:	b308      	cbz	r0, 9e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9dbc:	6870      	ldr	r0, [r6, #4]
    9dbe:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9dc2:	2902      	cmp	r1, #2
    9dc4:	d149      	bne.n	9e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9dc6:	f890 01dc 	ldrb.w	r0, [r0, #476]	; 0x1dc
    9dca:	b9c8      	cbnz	r0, 9e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9dcc:	4638      	mov	r0, r7
    9dce:	f004 fa98 	bl	e302 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9dd2:	b1a8      	cbz	r0, 9e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9dd4:	6870      	ldr	r0, [r6, #4]
    9dd6:	3078      	adds	r0, #120	; 0x78
    9dd8:	f006 fca4 	bl	10724 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9ddc:	b980      	cbnz	r0, 9e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9dde:	6871      	ldr	r1, [r6, #4]
    9de0:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    9de4:	2801      	cmp	r0, #1
    9de6:	d938      	bls.n	9e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9de8:	f881 91d2 	strb.w	r9, [r1, #466]	; 0x1d2
    9dec:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    9df0:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    9df4:	1e83      	subs	r3, r0, #2
    9df6:	429a      	cmp	r2, r3
    9df8:	db03      	blt.n	9e02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb82>
    9dfa:	2001      	movs	r0, #1
    9dfc:	e004      	b.n	9e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    9dfe:	e01d      	b.n	9e3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9e00:	e02b      	b.n	9e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9e02:	1a80      	subs	r0, r0, r2
    9e04:	1e40      	subs	r0, r0, #1
    9e06:	b280      	uxth	r0, r0
    9e08:	f8b1 21d0 	ldrh.w	r2, [r1, #464]	; 0x1d0
    9e0c:	88ab      	ldrh	r3, [r5, #4]
    9e0e:	429a      	cmp	r2, r3
    9e10:	d301      	bcc.n	9e16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb96>
    9e12:	2201      	movs	r2, #1
    9e14:	e002      	b.n	9e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
    9e16:	1a9a      	subs	r2, r3, r2
    9e18:	1c52      	adds	r2, r2, #1
    9e1a:	b292      	uxth	r2, r2
    9e1c:	4290      	cmp	r0, r2
    9e1e:	d900      	bls.n	9e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    9e20:	4610      	mov	r0, r2
    9e22:	2801      	cmp	r0, #1
    9e24:	d102      	bne.n	9e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbac>
    9e26:	bf00      	nop
    9e28:	f881 41d2 	strb.w	r4, [r1, #466]	; 0x1d2
    9e2c:	6871      	ldr	r1, [r6, #4]
    9e2e:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
    9e32:	4410      	add	r0, r2
    9e34:	f8a1 01cc 	strh.w	r0, [r1, #460]	; 0x1cc
    9e38:	f001 f9ca 	bl	b1d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f50>
    9e3c:	78a8      	ldrb	r0, [r5, #2]
    9e3e:	4652      	mov	r2, sl
    9e40:	f3c0 1180 	ubfx	r1, r0, #6, #1
    9e44:	9800      	ldr	r0, [sp, #0]
    9e46:	f001 f903 	bl	b050 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    9e4a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9e4e:	f880 41d3 	strb.w	r4, [r0, #467]	; 0x1d3
    9e52:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9e56:	f7fc b9ad 	b.w	61b4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9e5a:	2001      	movs	r0, #1
    9e5c:	6871      	ldr	r1, [r6, #4]
    9e5e:	e7e3      	b.n	9e28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    9e60:	20000174 	.word	0x20000174
    9e64:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9e66:	4c58      	ldr	r4, [pc, #352]	; (9fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    9e68:	2301      	movs	r3, #1
    9e6a:	2100      	movs	r1, #0
    9e6c:	6860      	ldr	r0, [r4, #4]
    9e6e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e72:	3078      	adds	r0, #120	; 0x78
    9e74:	f004 ffac 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e78:	2800      	cmp	r0, #0
    9e7a:	d07c      	beq.n	9f76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    9e7c:	6860      	ldr	r0, [r4, #4]
    9e7e:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    9e82:	2500      	movs	r5, #0
    9e84:	b139      	cbz	r1, 9e96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc16>
    9e86:	2100      	movs	r1, #0
    9e88:	200e      	movs	r0, #14
    9e8a:	f000 f89f 	bl	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9e8e:	6860      	ldr	r0, [r4, #4]
    9e90:	f880 512b 	strb.w	r5, [r0, #299]	; 0x12b
    9e94:	e096      	b.n	9fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9e96:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    9e9a:	b119      	cbz	r1, 9ea4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc24>
    9e9c:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    9ea0:	0789      	lsls	r1, r1, #30
    9ea2:	d016      	beq.n	9ed2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc52>
    9ea4:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    9ea8:	f88d 1004 	strb.w	r1, [sp, #4]
    9eac:	9901      	ldr	r1, [sp, #4]
    9eae:	9101      	str	r1, [sp, #4]
    9eb0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9eb4:	b141      	cbz	r1, 9ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc48>
    9eb6:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    9eba:	f88d 1000 	strb.w	r1, [sp]
    9ebe:	9900      	ldr	r1, [sp, #0]
    9ec0:	9100      	str	r1, [sp, #0]
    9ec2:	f89d 1000 	ldrb.w	r1, [sp]
    9ec6:	b189      	cbz	r1, 9eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    9ec8:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    9ecc:	2901      	cmp	r1, #1
    9ece:	d030      	beq.n	9f32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb2>
    9ed0:	e072      	b.n	9fb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9ed2:	2100      	movs	r1, #0
    9ed4:	200c      	movs	r0, #12
    9ed6:	f000 f879 	bl	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9eda:	6860      	ldr	r0, [r4, #4]
    9edc:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    9ee0:	f041 0101 	orr.w	r1, r1, #1
    9ee4:	7001      	strb	r1, [r0, #0]
    9ee6:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    9eea:	e06b      	b.n	9fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9eec:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9ef0:	2924      	cmp	r1, #36	; 0x24
    9ef2:	d01c      	beq.n	9f2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    9ef4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9ef8:	2924      	cmp	r1, #36	; 0x24
    9efa:	d018      	beq.n	9f2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    9efc:	f05f 0300 	movs.w	r3, #0
    9f00:	f200 2276 	addw	r2, r0, #630	; 0x276
    9f04:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    9f08:	f005 fc21 	bl	f74e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9f0c:	6860      	ldr	r0, [r4, #4]
    9f0e:	f880 511a 	strb.w	r5, [r0, #282]	; 0x11a
    9f12:	2100      	movs	r1, #0
    9f14:	2014      	movs	r0, #20
    9f16:	f000 f859 	bl	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9f1a:	6861      	ldr	r1, [r4, #4]
    9f1c:	f101 0030 	add.w	r0, r1, #48	; 0x30
    9f20:	8bc2      	ldrh	r2, [r0, #30]
    9f22:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    9f26:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9f28:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    9f2c:	e04a      	b.n	9fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9f2e:	2301      	movs	r3, #1
    9f30:	e7e6      	b.n	9f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    9f32:	f890 1125 	ldrb.w	r1, [r0, #293]	; 0x125
    9f36:	f88d 1000 	strb.w	r1, [sp]
    9f3a:	9900      	ldr	r1, [sp, #0]
    9f3c:	9100      	str	r1, [sp, #0]
    9f3e:	f89d 1000 	ldrb.w	r1, [sp]
    9f42:	bb31      	cbnz	r1, 9f92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    9f44:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f48:	2301      	movs	r3, #1
    9f4a:	210b      	movs	r1, #11
    9f4c:	3078      	adds	r0, #120	; 0x78
    9f4e:	f004 ff3f 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f52:	b9f0      	cbnz	r0, 9f92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    9f54:	6860      	ldr	r0, [r4, #4]
    9f56:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    9f5a:	f006 fbeb 	bl	10734 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9f5e:	4605      	mov	r5, r0
    9f60:	6860      	ldr	r0, [r4, #4]
    9f62:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    9f66:	f006 fbe5 	bl	10734 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9f6a:	4606      	mov	r6, r0
    9f6c:	6860      	ldr	r0, [r4, #4]
    9f6e:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    9f72:	4628      	mov	r0, r5
    9f74:	e000      	b.n	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf8>
    9f76:	e020      	b.n	9fba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    9f78:	f006 fbe7 	bl	1074a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9f7c:	b150      	cbz	r0, 9f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    9f7e:	6860      	ldr	r0, [r4, #4]
    9f80:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    9f84:	4630      	mov	r0, r6
    9f86:	f006 fbe0 	bl	1074a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9f8a:	b118      	cbz	r0, 9f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    9f8c:	2000      	movs	r0, #0
    9f8e:	f000 f929 	bl	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    9f92:	e011      	b.n	9fb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9f94:	6860      	ldr	r0, [r4, #4]
    9f96:	2301      	movs	r3, #1
    9f98:	2103      	movs	r1, #3
    9f9a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f9e:	3078      	adds	r0, #120	; 0x78
    9fa0:	f004 ff16 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fa4:	b940      	cbnz	r0, 9fb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9fa6:	6860      	ldr	r0, [r4, #4]
    9fa8:	2301      	movs	r3, #1
    9faa:	2102      	movs	r1, #2
    9fac:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9fb0:	3078      	adds	r0, #120	; 0x78
    9fb2:	f004 ff0d 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fb6:	b108      	cbz	r0, 9fbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3c>
    9fb8:	2000      	movs	r0, #0
    9fba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9fbc:	2100      	movs	r1, #0
    9fbe:	2016      	movs	r0, #22
    9fc0:	f000 f804 	bl	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9fc4:	2001      	movs	r0, #1
    9fc6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9fc8:	20000174 	.word	0x20000174
    9fcc:	b570      	push	{r4, r5, r6, lr}
    9fce:	4c0d      	ldr	r4, [pc, #52]	; (a004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd84>)
    9fd0:	4606      	mov	r6, r0
    9fd2:	460d      	mov	r5, r1
    9fd4:	6860      	ldr	r0, [r4, #4]
    9fd6:	3078      	adds	r0, #120	; 0x78
    9fd8:	f006 fba4 	bl	10724 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9fdc:	b120      	cbz	r0, 9fe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
    9fde:	f640 2184 	movw	r1, #2692	; 0xa84
    9fe2:	2031      	movs	r0, #49	; 0x31
    9fe4:	f7fb faa6 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fe8:	6862      	ldr	r2, [r4, #4]
    9fea:	2000      	movs	r0, #0
    9fec:	f882 610c 	strb.w	r6, [r2, #268]	; 0x10c
    9ff0:	b115      	cbz	r5, 9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9ff2:	f8a2 00c0 	strh.w	r0, [r2, #192]	; 0xc0
    9ff6:	bd70      	pop	{r4, r5, r6, pc}
    9ff8:	f822 0fba 	strh.w	r0, [r2, #186]!
    9ffc:	2001      	movs	r0, #1
    9ffe:	7110      	strb	r0, [r2, #4]
    a000:	bd70      	pop	{r4, r5, r6, pc}
    a002:	0000      	.short	0x0000
    a004:	20000174 	.word	0x20000174
    a008:	b538      	push	{r3, r4, r5, lr}
    a00a:	4c1f      	ldr	r4, [pc, #124]	; (a088 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>)
    a00c:	2500      	movs	r5, #0
    a00e:	6860      	ldr	r0, [r4, #4]
    a010:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
    a014:	2901      	cmp	r1, #1
    a016:	d00a      	beq.n	a02e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    a018:	2902      	cmp	r1, #2
    a01a:	d133      	bne.n	a084 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    a01c:	f890 10c4 	ldrb.w	r1, [r0, #196]	; 0xc4
    a020:	b1d9      	cbz	r1, a05a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    a022:	2106      	movs	r1, #6
    a024:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    a028:	2101      	movs	r1, #1
    a02a:	2002      	movs	r0, #2
    a02c:	e025      	b.n	a07a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    a02e:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a032:	f88d 1000 	strb.w	r1, [sp]
    a036:	9900      	ldr	r1, [sp, #0]
    a038:	9100      	str	r1, [sp, #0]
    a03a:	f89d 1000 	ldrb.w	r1, [sp]
    a03e:	2900      	cmp	r1, #0
    a040:	d120      	bne.n	a084 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    a042:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
    a046:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    a04a:	2200      	movs	r2, #0
    a04c:	f200 2059 	addw	r0, r0, #601	; 0x259
    a050:	f004 fe76 	bl	ed40 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a054:	2101      	movs	r1, #1
    a056:	2005      	movs	r0, #5
    a058:	e00f      	b.n	a07a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    a05a:	2203      	movs	r2, #3
    a05c:	2106      	movs	r1, #6
    a05e:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
    a062:	f880 110a 	strb.w	r1, [r0, #266]	; 0x10a
    a066:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    a06a:	0880      	lsrs	r0, r0, #2
    a06c:	f010 0f01 	tst.w	r0, #1
    a070:	d001      	beq.n	a076 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf6>
    a072:	2011      	movs	r0, #17
    a074:	e000      	b.n	a078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    a076:	200d      	movs	r0, #13
    a078:	2101      	movs	r1, #1
    a07a:	f7ff ffa7 	bl	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    a07e:	6860      	ldr	r0, [r4, #4]
    a080:	f880 5258 	strb.w	r5, [r0, #600]	; 0x258
    a084:	bd38      	pop	{r3, r4, r5, pc}
    a086:	0000      	.short	0x0000
    a088:	20000174 	.word	0x20000174
    a08c:	b570      	push	{r4, r5, r6, lr}
    a08e:	4b2b      	ldr	r3, [pc, #172]	; (a13c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebc>)
    a090:	4602      	mov	r2, r0
    a092:	8858      	ldrh	r0, [r3, #2]
    a094:	4310      	orrs	r0, r2
    a096:	8058      	strh	r0, [r3, #2]
    a098:	f103 0010 	add.w	r0, r3, #16
    a09c:	2a40      	cmp	r2, #64	; 0x40
    a09e:	6840      	ldr	r0, [r0, #4]
    a0a0:	d00d      	beq.n	a0be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3e>
    a0a2:	0796      	lsls	r6, r2, #30
    a0a4:	f04f 0500 	mov.w	r5, #0
    a0a8:	f04f 0401 	mov.w	r4, #1
    a0ac:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    a0b0:	d50c      	bpl.n	a0cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    a0b2:	b14e      	cbz	r6, a0c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    a0b4:	f640 41c9 	movw	r1, #3273	; 0xcc9
    a0b8:	2031      	movs	r0, #49	; 0x31
    a0ba:	f7fb fa3b 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a0c2:	2104      	movs	r1, #4
    a0c4:	f7fe bcba 	b.w	8a3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a0c8:	6099      	str	r1, [r3, #8]
    a0ca:	e01c      	b.n	a106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    a0cc:	b1c6      	cbz	r6, a100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a0ce:	60d9      	str	r1, [r3, #12]
    a0d0:	78c9      	ldrb	r1, [r1, #3]
    a0d2:	2906      	cmp	r1, #6
    a0d4:	d002      	beq.n	a0dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    a0d6:	290b      	cmp	r1, #11
    a0d8:	d112      	bne.n	a100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a0da:	e009      	b.n	a0f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
    a0dc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a0e0:	2917      	cmp	r1, #23
    a0e2:	d10d      	bne.n	a100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a0e4:	2100      	movs	r1, #0
    a0e6:	e9c0 1138 	strd	r1, r1, [r0, #224]	; 0xe0
    a0ea:	f880 408b 	strb.w	r4, [r0, #139]	; 0x8b
    a0ee:	e007      	b.n	a100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a0f0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a0f4:	2911      	cmp	r1, #17
    a0f6:	d103      	bne.n	a100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a0f8:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    a0fc:	f880 40c4 	strb.w	r4, [r0, #196]	; 0xc4
    a100:	0791      	lsls	r1, r2, #30
    a102:	d516      	bpl.n	a132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a104:	6899      	ldr	r1, [r3, #8]
    a106:	78c9      	ldrb	r1, [r1, #3]
    a108:	2905      	cmp	r1, #5
    a10a:	d002      	beq.n	a112 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe92>
    a10c:	290b      	cmp	r1, #11
    a10e:	d110      	bne.n	a132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a110:	e009      	b.n	a126 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea6>
    a112:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a116:	2915      	cmp	r1, #21
    a118:	d10b      	bne.n	a132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a11a:	2100      	movs	r1, #0
    a11c:	e9c0 113a 	strd	r1, r1, [r0, #232]	; 0xe8
    a120:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
    a124:	e005      	b.n	a132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a126:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a12a:	2910      	cmp	r1, #16
    a12c:	d101      	bne.n	a132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a12e:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
    a132:	0690      	lsls	r0, r2, #26
    a134:	d501      	bpl.n	a13a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    a136:	2008      	movs	r0, #8
    a138:	7058      	strb	r0, [r3, #1]
    a13a:	bd70      	pop	{r4, r5, r6, pc}
    a13c:	20000164 	.word	0x20000164
    a140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a144:	4c26      	ldr	r4, [pc, #152]	; (a1e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>)
    a146:	2501      	movs	r5, #1
    a148:	6862      	ldr	r2, [r4, #4]
    a14a:	f892 0276 	ldrb.w	r0, [r2, #630]	; 0x276
    a14e:	b108      	cbz	r0, a154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed4>
    a150:	2701      	movs	r7, #1
    a152:	e000      	b.n	a156 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed6>
    a154:	2700      	movs	r7, #0
    a156:	f892 1277 	ldrb.w	r1, [r2, #631]	; 0x277
    a15a:	b109      	cbz	r1, a160 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    a15c:	2601      	movs	r6, #1
    a15e:	e000      	b.n	a162 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee2>
    a160:	2600      	movs	r6, #0
    a162:	b90f      	cbnz	r7, a168 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee8>
    a164:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
    a168:	b90e      	cbnz	r6, a16e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeee>
    a16a:	f892 106f 	ldrb.w	r1, [r2, #111]	; 0x6f
    a16e:	f102 0366 	add.w	r3, r2, #102	; 0x66
    a172:	7218      	strb	r0, [r3, #8]
    a174:	7259      	strb	r1, [r3, #9]
    a176:	20ff      	movs	r0, #255	; 0xff
    a178:	7298      	strb	r0, [r3, #10]
    a17a:	f892 0124 	ldrb.w	r0, [r2, #292]	; 0x124
    a17e:	2801      	cmp	r0, #1
    a180:	d001      	beq.n	a186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    a182:	b907      	cbnz	r7, a186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    a184:	b116      	cbz	r6, a18c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>
    a186:	2000      	movs	r0, #0
    a188:	f000 f82c 	bl	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a18c:	6860      	ldr	r0, [r4, #4]
    a18e:	3030      	adds	r0, #48	; 0x30
    a190:	f005 fb4e 	bl	f830 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a194:	4607      	mov	r7, r0
    a196:	2105      	movs	r1, #5
    a198:	6860      	ldr	r0, [r4, #4]
    a19a:	f7fe fc4f 	bl	8a3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a19e:	6860      	ldr	r0, [r4, #4]
    a1a0:	3030      	adds	r0, #48	; 0x30
    a1a2:	f005 fb45 	bl	f830 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a1a6:	4606      	mov	r6, r0
    a1a8:	42b7      	cmp	r7, r6
    a1aa:	d20a      	bcs.n	a1c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    a1ac:	f7f8 fd1a 	bl	2be4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    a1b0:	4601      	mov	r1, r0
    a1b2:	1bf0      	subs	r0, r6, r7
    a1b4:	2865      	cmp	r0, #101	; 0x65
    a1b6:	d200      	bcs.n	a1ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3a>
    a1b8:	2065      	movs	r0, #101	; 0x65
    a1ba:	f7f8 fc35 	bl	2a28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a1be:	b100      	cbz	r0, a1c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    a1c0:	2500      	movs	r5, #0
    a1c2:	6860      	ldr	r0, [r4, #4]
    a1c4:	f005 fade 	bl	f784 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a1c8:	b138      	cbz	r0, a1da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    a1ca:	6863      	ldr	r3, [r4, #4]
    a1cc:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    a1d0:	8818      	ldrh	r0, [r3, #0]
    a1d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
    a1d6:	f005 fa92 	bl	f6fe <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a1da:	4628      	mov	r0, r5
    a1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a1e0:	20000174 	.word	0x20000174
    a1e4:	b510      	push	{r4, lr}
    a1e6:	4c11      	ldr	r4, [pc, #68]	; (a22c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>)
    a1e8:	6861      	ldr	r1, [r4, #4]
    a1ea:	880a      	ldrh	r2, [r1, #0]
    a1ec:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
    a1f0:	f881 0186 	strb.w	r0, [r1, #390]	; 0x186
    a1f4:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
    a1f8:	f006 fa9c 	bl	10734 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a1fc:	6861      	ldr	r1, [r4, #4]
    a1fe:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    a202:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
    a206:	f006 fa95 	bl	10734 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a20a:	6861      	ldr	r1, [r4, #4]
    a20c:	2211      	movs	r2, #17
    a20e:	f881 018b 	strb.w	r0, [r1, #395]	; 0x18b
    a212:	f501 70be 	add.w	r0, r1, #380	; 0x17c
    a216:	f7fd f9b5 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a21a:	6861      	ldr	r1, [r4, #4]
    a21c:	2000      	movs	r0, #0
    a21e:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    a222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a226:	f7fd ba7f 	b.w	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a22a:	0000      	.short	0x0000
    a22c:	20000174 	.word	0x20000174
    a230:	b570      	push	{r4, r5, r6, lr}
    a232:	4d0f      	ldr	r5, [pc, #60]	; (a270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>)
    a234:	686c      	ldr	r4, [r5, #4]
    a236:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    a23a:	2920      	cmp	r1, #32
    a23c:	d002      	beq.n	a244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    a23e:	2927      	cmp	r1, #39	; 0x27
    a240:	d003      	beq.n	a24a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfca>
    a242:	e011      	b.n	a268 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfe8>
    a244:	f7ff ffce 	bl	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a248:	e008      	b.n	a25c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    a24a:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
    a24e:	f104 0078 	add.w	r0, r4, #120	; 0x78
    a252:	2301      	movs	r3, #1
    a254:	210b      	movs	r1, #11
    a256:	f004 fdbb 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a25a:	b138      	cbz	r0, a26c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    a25c:	6869      	ldr	r1, [r5, #4]
    a25e:	2000      	movs	r0, #0
    a260:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a264:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    a268:	2000      	movs	r0, #0
    a26a:	bd70      	pop	{r4, r5, r6, pc}
    a26c:	202a      	movs	r0, #42	; 0x2a
    a26e:	e7e9      	b.n	a244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    a270:	20000174 	.word	0x20000174
    a274:	b570      	push	{r4, r5, r6, lr}
    a276:	4c17      	ldr	r4, [pc, #92]	; (a2d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1054>)
    a278:	2301      	movs	r3, #1
    a27a:	2100      	movs	r1, #0
    a27c:	6860      	ldr	r0, [r4, #4]
    a27e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a282:	3078      	adds	r0, #120	; 0x78
    a284:	f004 fda4 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a288:	b1b0      	cbz	r0, a2b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1038>
    a28a:	f1a4 0510 	sub.w	r5, r4, #16
    a28e:	68e8      	ldr	r0, [r5, #12]
    a290:	f004 fff7 	bl	f282 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    a294:	6861      	ldr	r1, [r4, #4]
    a296:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a29a:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a29e:	f006 fa62 	bl	10766 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a2a2:	b158      	cbz	r0, a2bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x103c>
    a2a4:	6861      	ldr	r1, [r4, #4]
    a2a6:	2028      	movs	r0, #40	; 0x28
    a2a8:	2208      	movs	r2, #8
    a2aa:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a2ae:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a2b2:	f7fd f967 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a2b6:	e00b      	b.n	a2d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    a2b8:	2001      	movs	r0, #1
    a2ba:	bd70      	pop	{r4, r5, r6, pc}
    a2bc:	6861      	ldr	r1, [r4, #4]
    a2be:	68e8      	ldr	r0, [r5, #12]
    a2c0:	f201 2176 	addw	r1, r1, #630	; 0x276
    a2c4:	f004 ffd8 	bl	f278 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    a2c8:	6861      	ldr	r1, [r4, #4]
    a2ca:	200b      	movs	r0, #11
    a2cc:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a2d0:	2000      	movs	r0, #0
    a2d2:	bd70      	pop	{r4, r5, r6, pc}
    a2d4:	20000174 	.word	0x20000174
    a2d8:	b570      	push	{r4, r5, r6, lr}
    a2da:	4d2b      	ldr	r5, [pc, #172]	; (a388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1108>)
    a2dc:	2301      	movs	r3, #1
    a2de:	2100      	movs	r1, #0
    a2e0:	6868      	ldr	r0, [r5, #4]
    a2e2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a2e6:	3078      	adds	r0, #120	; 0x78
    a2e8:	f004 fd72 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2ec:	b1d8      	cbz	r0, a326 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a6>
    a2ee:	f1a5 0410 	sub.w	r4, r5, #16
    a2f2:	2100      	movs	r1, #0
    a2f4:	68e0      	ldr	r0, [r4, #12]
    a2f6:	f004 ff97 	bl	f228 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    a2fa:	b1b0      	cbz	r0, a32a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10aa>
    a2fc:	68e0      	ldr	r0, [r4, #12]
    a2fe:	6869      	ldr	r1, [r5, #4]
    a300:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    a304:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a308:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a30c:	f006 fa2b 	bl	10766 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a310:	b178      	cbz	r0, a332 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b2>
    a312:	6869      	ldr	r1, [r5, #4]
    a314:	2028      	movs	r0, #40	; 0x28
    a316:	2208      	movs	r2, #8
    a318:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a31c:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a320:	f7fd f930 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a324:	e02e      	b.n	a384 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1104>
    a326:	2001      	movs	r0, #1
    a328:	bd70      	pop	{r4, r5, r6, pc}
    a32a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a32e:	f000 b8f5 	b.w	a51c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a332:	68e0      	ldr	r0, [r4, #12]
    a334:	f004 ffa8 	bl	f288 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    a338:	f004 fd2d 	bl	ed96 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a33c:	4606      	mov	r6, r0
    a33e:	6868      	ldr	r0, [r5, #4]
    a340:	4631      	mov	r1, r6
    a342:	f8c0 627c 	str.w	r6, [r0, #636]	; 0x27c
    a346:	68e0      	ldr	r0, [r4, #12]
    a348:	7900      	ldrb	r0, [r0, #4]
    a34a:	f004 febd 	bl	f0c8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    a34e:	6869      	ldr	r1, [r5, #4]
    a350:	f8a1 0276 	strh.w	r0, [r1, #630]	; 0x276
    a354:	68e0      	ldr	r0, [r4, #12]
    a356:	4631      	mov	r1, r6
    a358:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    a35c:	f004 feb0 	bl	f0c0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    a360:	6869      	ldr	r1, [r5, #4]
    a362:	f8c1 0278 	str.w	r0, [r1, #632]	; 0x278
    a366:	68e0      	ldr	r0, [r4, #12]
    a368:	f004 ff91 	bl	f28e <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    a36c:	6869      	ldr	r1, [r5, #4]
    a36e:	f8a1 0280 	strh.w	r0, [r1, #640]	; 0x280
    a372:	68e0      	ldr	r0, [r4, #12]
    a374:	f004 ff8e 	bl	f294 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    a378:	6869      	ldr	r1, [r5, #4]
    a37a:	f8a1 0282 	strh.w	r0, [r1, #642]	; 0x282
    a37e:	200d      	movs	r0, #13
    a380:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a384:	2000      	movs	r0, #0
    a386:	bd70      	pop	{r4, r5, r6, pc}
    a388:	20000174 	.word	0x20000174
    a38c:	b538      	push	{r3, r4, r5, lr}
    a38e:	4c2c      	ldr	r4, [pc, #176]	; (a440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    a390:	2301      	movs	r3, #1
    a392:	2100      	movs	r1, #0
    a394:	6860      	ldr	r0, [r4, #4]
    a396:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a39a:	3078      	adds	r0, #120	; 0x78
    a39c:	f004 fd18 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3a0:	b970      	cbnz	r0, a3c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    a3a2:	6860      	ldr	r0, [r4, #4]
    a3a4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a3a8:	2a12      	cmp	r2, #18
    a3aa:	d009      	beq.n	a3c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    a3ac:	2301      	movs	r3, #1
    a3ae:	2105      	movs	r1, #5
    a3b0:	3078      	adds	r0, #120	; 0x78
    a3b2:	f004 fd0d 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3b6:	b108      	cbz	r0, a3bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113c>
    a3b8:	2008      	movs	r0, #8
    a3ba:	bd38      	pop	{r3, r4, r5, pc}
    a3bc:	2001      	movs	r0, #1
    a3be:	bd38      	pop	{r3, r4, r5, pc}
    a3c0:	6860      	ldr	r0, [r4, #4]
    a3c2:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
    a3c6:	b908      	cbnz	r0, a3cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x114c>
    a3c8:	f7ff f85c 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a3cc:	4d1c      	ldr	r5, [pc, #112]	; (a440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    a3ce:	6861      	ldr	r1, [r4, #4]
    a3d0:	3d10      	subs	r5, #16
    a3d2:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
    a3d6:	68e8      	ldr	r0, [r5, #12]
    a3d8:	f004 ff6b 	bl	f2b2 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    a3dc:	6861      	ldr	r1, [r4, #4]
    a3de:	68e8      	ldr	r0, [r5, #12]
    a3e0:	f501 7180 	add.w	r1, r1, #256	; 0x100
    a3e4:	f004 ff5c 	bl	f2a0 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    a3e8:	6861      	ldr	r1, [r4, #4]
    a3ea:	f891 028c 	ldrb.w	r0, [r1, #652]	; 0x28c
    a3ee:	f88d 0000 	strb.w	r0, [sp]
    a3f2:	9800      	ldr	r0, [sp, #0]
    a3f4:	9000      	str	r0, [sp, #0]
    a3f6:	f89d 0000 	ldrb.w	r0, [sp]
    a3fa:	b120      	cbz	r0, a406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1186>
    a3fc:	f240 21a2 	movw	r1, #674	; 0x2a2
    a400:	2031      	movs	r0, #49	; 0x31
    a402:	f7fb f897 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a406:	8808      	ldrh	r0, [r1, #0]
    a408:	f8a1 028e 	strh.w	r0, [r1, #654]	; 0x28e
    a40c:	f501 7124 	add.w	r1, r1, #656	; 0x290
    a410:	68e8      	ldr	r0, [r5, #12]
    a412:	f004 ff49 	bl	f2a8 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    a416:	6861      	ldr	r1, [r4, #4]
    a418:	68e8      	ldr	r0, [r5, #12]
    a41a:	f501 7126 	add.w	r1, r1, #664	; 0x298
    a41e:	f004 ff3c 	bl	f29a <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    a422:	6861      	ldr	r1, [r4, #4]
    a424:	2207      	movs	r2, #7
    a426:	f501 7021 	add.w	r0, r1, #644	; 0x284
    a42a:	f7fd f8ab 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a42e:	6861      	ldr	r1, [r4, #4]
    a430:	2014      	movs	r0, #20
    a432:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a436:	f7fd f977 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a43a:	2000      	movs	r0, #0
    a43c:	bd38      	pop	{r3, r4, r5, pc}
    a43e:	0000      	.short	0x0000
    a440:	20000174 	.word	0x20000174
    a444:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a446:	4c13      	ldr	r4, [pc, #76]	; (a494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    a448:	6860      	ldr	r0, [r4, #4]
    a44a:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a44e:	07c0      	lsls	r0, r0, #31
    a450:	d001      	beq.n	a456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11d6>
    a452:	2001      	movs	r0, #1
    a454:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a456:	480f      	ldr	r0, [pc, #60]	; (a494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    a458:	4669      	mov	r1, sp
    a45a:	3810      	subs	r0, #16
    a45c:	68c0      	ldr	r0, [r0, #12]
    a45e:	f004 ff2e 	bl	f2be <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    a462:	f001 fad9 	bl	ba18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a466:	f644 122f 	movw	r2, #18735	; 0x492f
    a46a:	4010      	ands	r0, r2
    a46c:	e9dd 5200 	ldrd	r5, r2, [sp]
    a470:	6863      	ldr	r3, [r4, #4]
    a472:	4005      	ands	r5, r0
    a474:	f001 0106 	and.w	r1, r1, #6
    a478:	f843 5fd4 	str.w	r5, [r3, #212]!
    a47c:	400a      	ands	r2, r1
    a47e:	605a      	str	r2, [r3, #4]
    a480:	f7ff f800 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a484:	6860      	ldr	r0, [r4, #4]
    a486:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a48a:	f041 0101 	orr.w	r1, r1, #1
    a48e:	7001      	strb	r1, [r0, #0]
    a490:	2000      	movs	r0, #0
    a492:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a494:	20000174 	.word	0x20000174
    a498:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a49c:	4d1e      	ldr	r5, [pc, #120]	; (a518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    a49e:	2301      	movs	r3, #1
    a4a0:	2107      	movs	r1, #7
    a4a2:	6868      	ldr	r0, [r5, #4]
    a4a4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a4a8:	3078      	adds	r0, #120	; 0x78
    a4aa:	f004 fc91 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4ae:	b380      	cbz	r0, a512 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1292>
    a4b0:	f1a5 0010 	sub.w	r0, r5, #16
    a4b4:	4669      	mov	r1, sp
    a4b6:	68c0      	ldr	r0, [r0, #12]
    a4b8:	f004 ff06 	bl	f2c8 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a4bc:	686e      	ldr	r6, [r5, #4]
    a4be:	f89d 7004 	ldrb.w	r7, [sp, #4]
    a4c2:	36d4      	adds	r6, #212	; 0xd4
    a4c4:	9c00      	ldr	r4, [sp, #0]
    a4c6:	f001 faa7 	bl	ba18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a4ca:	4004      	ands	r4, r0
    a4cc:	f644 102f 	movw	r0, #18735	; 0x492f
    a4d0:	4004      	ands	r4, r0
    a4d2:	400f      	ands	r7, r1
    a4d4:	f007 0006 	and.w	r0, r7, #6
    a4d8:	6034      	str	r4, [r6, #0]
    a4da:	6070      	str	r0, [r6, #4]
    a4dc:	6869      	ldr	r1, [r5, #4]
    a4de:	2000      	movs	r0, #0
    a4e0:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    a4e4:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a4e8:	880a      	ldrh	r2, [r1, #0]
    a4ea:	f8a1 2198 	strh.w	r2, [r1, #408]	; 0x198
    a4ee:	f881 0196 	strb.w	r0, [r1, #406]	; 0x196
    a4f2:	9a00      	ldr	r2, [sp, #0]
    a4f4:	f8c1 219a 	str.w	r2, [r1, #410]	; 0x19a
    a4f8:	9a01      	ldr	r2, [sp, #4]
    a4fa:	f8c1 219e 	str.w	r2, [r1, #414]	; 0x19e
    a4fe:	f501 70c6 	add.w	r0, r1, #396	; 0x18c
    a502:	2205      	movs	r2, #5
    a504:	f7fd f83e 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a508:	f7fd f90e 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a50c:	2000      	movs	r0, #0
    a50e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a512:	e7ff      	b.n	a514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1294>
    a514:	2001      	movs	r0, #1
    a516:	e7fa      	b.n	a50e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128e>
    a518:	20000174 	.word	0x20000174
    a51c:	480b      	ldr	r0, [pc, #44]	; (a54c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    a51e:	b510      	push	{r4, lr}
    a520:	6840      	ldr	r0, [r0, #4]
    a522:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a526:	070a      	lsls	r2, r1, #28
    a528:	d501      	bpl.n	a52e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ae>
    a52a:	2001      	movs	r0, #1
    a52c:	bd10      	pop	{r4, pc}
    a52e:	f041 0108 	orr.w	r1, r1, #8
    a532:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a536:	4905      	ldr	r1, [pc, #20]	; (a54c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    a538:	3910      	subs	r1, #16
    a53a:	68c9      	ldr	r1, [r1, #12]
    a53c:	78c9      	ldrb	r1, [r1, #3]
    a53e:	f880 1108 	strb.w	r1, [r0, #264]	; 0x108
    a542:	f7fe ff9f 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a546:	2000      	movs	r0, #0
    a548:	bd10      	pop	{r4, pc}
    a54a:	0000      	.short	0x0000
    a54c:	20000174 	.word	0x20000174
    a550:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a554:	4d36      	ldr	r5, [pc, #216]	; (a630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    a556:	6868      	ldr	r0, [r5, #4]
    a558:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a55c:	f010 0f30 	tst.w	r0, #48	; 0x30
    a560:	d002      	beq.n	a568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>
    a562:	2001      	movs	r0, #1
    a564:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a568:	4c31      	ldr	r4, [pc, #196]	; (a630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    a56a:	3c10      	subs	r4, #16
    a56c:	68e0      	ldr	r0, [r4, #12]
    a56e:	f004 fec6 	bl	f2fe <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a572:	b328      	cbz	r0, a5c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1340>
    a574:	68e0      	ldr	r0, [r4, #12]
    a576:	f004 feb4 	bl	f2e2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a57a:	4607      	mov	r7, r0
    a57c:	68e0      	ldr	r0, [r4, #12]
    a57e:	f004 feb4 	bl	f2ea <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a582:	4680      	mov	r8, r0
    a584:	68e0      	ldr	r0, [r4, #12]
    a586:	f004 feaa 	bl	f2de <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a58a:	4606      	mov	r6, r0
    a58c:	68e0      	ldr	r0, [r4, #12]
    a58e:	f004 feaa 	bl	f2e6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a592:	4601      	mov	r1, r0
    a594:	9700      	str	r7, [sp, #0]
    a596:	6868      	ldr	r0, [r5, #4]
    a598:	4643      	mov	r3, r8
    a59a:	4632      	mov	r2, r6
    a59c:	3030      	adds	r0, #48	; 0x30
    a59e:	f005 f981 	bl	f8a4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a5a2:	78a0      	ldrb	r0, [r4, #2]
    a5a4:	0781      	lsls	r1, r0, #30
    a5a6:	f04f 0001 	mov.w	r0, #1
    a5aa:	d503      	bpl.n	a5b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1334>
    a5ac:	68a1      	ldr	r1, [r4, #8]
    a5ae:	78c9      	ldrb	r1, [r1, #3]
    a5b0:	2914      	cmp	r1, #20
    a5b2:	d009      	beq.n	a5c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    a5b4:	6869      	ldr	r1, [r5, #4]
    a5b6:	f891 1085 	ldrb.w	r1, [r1, #133]	; 0x85
    a5ba:	291c      	cmp	r1, #28
    a5bc:	d004      	beq.n	a5c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    a5be:	e006      	b.n	a5ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    a5c0:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a5c4:	f7ff bfaa 	b.w	a51c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a5c8:	6869      	ldr	r1, [r5, #4]
    a5ca:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    a5ce:	686b      	ldr	r3, [r5, #4]
    a5d0:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    a5d4:	2801      	cmp	r0, #1
    a5d6:	d011      	beq.n	a5fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    a5d8:	f893 011b 	ldrb.w	r0, [r3, #283]	; 0x11b
    a5dc:	f88d 0004 	strb.w	r0, [sp, #4]
    a5e0:	9801      	ldr	r0, [sp, #4]
    a5e2:	9001      	str	r0, [sp, #4]
    a5e4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a5e8:	b940      	cbnz	r0, a5fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    a5ea:	f893 011a 	ldrb.w	r0, [r3, #282]	; 0x11a
    a5ee:	f88d 0000 	strb.w	r0, [sp]
    a5f2:	9800      	ldr	r0, [sp, #0]
    a5f4:	9000      	str	r0, [sp, #0]
    a5f6:	f89d 0000 	ldrb.w	r0, [sp]
    a5fa:	b148      	cbz	r0, a610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1390>
    a5fc:	f813 0f87 	ldrb.w	r0, [r3, #135]!
    a600:	f040 0010 	orr.w	r0, r0, #16
    a604:	f883 0000 	strb.w	r0, [r3]
    a608:	f7fe ff3c 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a60c:	2000      	movs	r0, #0
    a60e:	e7a9      	b.n	a564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    a610:	f893 0087 	ldrb.w	r0, [r3, #135]	; 0x87
    a614:	f503 72ad 	add.w	r2, r3, #346	; 0x15a
    a618:	f040 0020 	orr.w	r0, r0, #32
    a61c:	f883 0087 	strb.w	r0, [r3, #135]	; 0x87
    a620:	f103 0130 	add.w	r1, r3, #48	; 0x30
    a624:	8818      	ldrh	r0, [r3, #0]
    a626:	f005 f944 	bl	f8b2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a62a:	f7fd f87d 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a62e:	e7eb      	b.n	a608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
    a630:	20000174 	.word	0x20000174
    a634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a638:	4c1b      	ldr	r4, [pc, #108]	; (a6a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>)
    a63a:	2301      	movs	r3, #1
    a63c:	210a      	movs	r1, #10
    a63e:	6860      	ldr	r0, [r4, #4]
    a640:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a644:	3078      	adds	r0, #120	; 0x78
    a646:	f004 fbc3 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a64a:	b358      	cbz	r0, a6a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    a64c:	f1a4 0510 	sub.w	r5, r4, #16
    a650:	68e8      	ldr	r0, [r5, #12]
    a652:	f004 fe54 	bl	f2fe <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a656:	b1d0      	cbz	r0, a68e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140e>
    a658:	68e8      	ldr	r0, [r5, #12]
    a65a:	f004 fe42 	bl	f2e2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a65e:	4680      	mov	r8, r0
    a660:	68e8      	ldr	r0, [r5, #12]
    a662:	f004 fe42 	bl	f2ea <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a666:	4607      	mov	r7, r0
    a668:	68e8      	ldr	r0, [r5, #12]
    a66a:	f004 fe38 	bl	f2de <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a66e:	4606      	mov	r6, r0
    a670:	68e8      	ldr	r0, [r5, #12]
    a672:	f004 fe38 	bl	f2e6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a676:	4601      	mov	r1, r0
    a678:	f8cd 8000 	str.w	r8, [sp]
    a67c:	6860      	ldr	r0, [r4, #4]
    a67e:	463b      	mov	r3, r7
    a680:	4632      	mov	r2, r6
    a682:	3030      	adds	r0, #48	; 0x30
    a684:	f005 f90e 	bl	f8a4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a688:	6860      	ldr	r0, [r4, #4]
    a68a:	f005 f87b 	bl	f784 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a68e:	6861      	ldr	r1, [r4, #4]
    a690:	2000      	movs	r0, #0
    a692:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    a696:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a69a:	f7ff f8d9 	bl	9850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    a69e:	2000      	movs	r0, #0
    a6a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a6a4:	2001      	movs	r0, #1
    a6a6:	e7fb      	b.n	a6a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1420>
    a6a8:	20000174 	.word	0x20000174
    a6ac:	b510      	push	{r4, lr}
    a6ae:	4c09      	ldr	r4, [pc, #36]	; (a6d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1454>)
    a6b0:	6860      	ldr	r0, [r4, #4]
    a6b2:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a6b6:	0740      	lsls	r0, r0, #29
    a6b8:	d501      	bpl.n	a6be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x143e>
    a6ba:	2001      	movs	r0, #1
    a6bc:	bd10      	pop	{r4, pc}
    a6be:	f7fe fee1 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a6c2:	6860      	ldr	r0, [r4, #4]
    a6c4:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a6c8:	f041 0104 	orr.w	r1, r1, #4
    a6cc:	7001      	strb	r1, [r0, #0]
    a6ce:	2000      	movs	r0, #0
    a6d0:	bd10      	pop	{r4, pc}
    a6d2:	0000      	.short	0x0000
    a6d4:	20000174 	.word	0x20000174
    a6d8:	b510      	push	{r4, lr}
    a6da:	4c0a      	ldr	r4, [pc, #40]	; (a704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
    a6dc:	2301      	movs	r3, #1
    a6de:	2109      	movs	r1, #9
    a6e0:	6860      	ldr	r0, [r4, #4]
    a6e2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a6e6:	3078      	adds	r0, #120	; 0x78
    a6e8:	f004 fb72 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a6ec:	2800      	cmp	r0, #0
    a6ee:	d007      	beq.n	a700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1480>
    a6f0:	6860      	ldr	r0, [r4, #4]
    a6f2:	2100      	movs	r1, #0
    a6f4:	f800 1fb2 	strb.w	r1, [r0, #178]!
    a6f8:	7301      	strb	r1, [r0, #12]
    a6fa:	f800 1c2d 	strb.w	r1, [r0, #-45]
    a6fe:	4608      	mov	r0, r1
    a700:	bd10      	pop	{r4, pc}
    a702:	0000      	.short	0x0000
    a704:	20000174 	.word	0x20000174
    a708:	b510      	push	{r4, lr}
    a70a:	4c0f      	ldr	r4, [pc, #60]	; (a748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>)
    a70c:	2301      	movs	r3, #1
    a70e:	2100      	movs	r1, #0
    a710:	6860      	ldr	r0, [r4, #4]
    a712:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a716:	3078      	adds	r0, #120	; 0x78
    a718:	f004 fb5a 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a71c:	b138      	cbz	r0, a72e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ae>
    a71e:	f7fe feb1 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a722:	6861      	ldr	r1, [r4, #4]
    a724:	2010      	movs	r0, #16
    a726:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a72a:	2000      	movs	r0, #0
    a72c:	bd10      	pop	{r4, pc}
    a72e:	6860      	ldr	r0, [r4, #4]
    a730:	2301      	movs	r3, #1
    a732:	2105      	movs	r1, #5
    a734:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a738:	3078      	adds	r0, #120	; 0x78
    a73a:	f004 fb49 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a73e:	b108      	cbz	r0, a744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c4>
    a740:	2008      	movs	r0, #8
    a742:	bd10      	pop	{r4, pc}
    a744:	2001      	movs	r0, #1
    a746:	bd10      	pop	{r4, pc}
    a748:	20000174 	.word	0x20000174
    a74c:	4806      	ldr	r0, [pc, #24]	; (a768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e8>)
    a74e:	6840      	ldr	r0, [r0, #4]
    a750:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a754:	2911      	cmp	r1, #17
    a756:	d001      	beq.n	a75c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14dc>
    a758:	2002      	movs	r0, #2
    a75a:	4770      	bx	lr
    a75c:	2112      	movs	r1, #18
    a75e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a762:	2000      	movs	r0, #0
    a764:	4770      	bx	lr
    a766:	0000      	.short	0x0000
    a768:	20000174 	.word	0x20000174
    a76c:	b538      	push	{r3, r4, r5, lr}
    a76e:	4c36      	ldr	r4, [pc, #216]	; (a848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    a770:	2301      	movs	r3, #1
    a772:	210b      	movs	r1, #11
    a774:	6860      	ldr	r0, [r4, #4]
    a776:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a77a:	3078      	adds	r0, #120	; 0x78
    a77c:	f004 fb28 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a780:	bb80      	cbnz	r0, a7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1564>
    a782:	6860      	ldr	r0, [r4, #4]
    a784:	2301      	movs	r3, #1
    a786:	2100      	movs	r1, #0
    a788:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a78c:	3078      	adds	r0, #120	; 0x78
    a78e:	f004 fb1f 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a792:	b328      	cbz	r0, a7e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1560>
    a794:	6860      	ldr	r0, [r4, #4]
    a796:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a79a:	2824      	cmp	r0, #36	; 0x24
    a79c:	d023      	beq.n	a7e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    a79e:	f1a4 0510 	sub.w	r5, r4, #16
    a7a2:	68e8      	ldr	r0, [r5, #12]
    a7a4:	f004 fdc7 	bl	f336 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a7a8:	b1f8      	cbz	r0, a7ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156a>
    a7aa:	6860      	ldr	r0, [r4, #4]
    a7ac:	2102      	movs	r1, #2
    a7ae:	30d4      	adds	r0, #212	; 0xd4
    a7b0:	f005 ff67 	bl	10682 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    a7b4:	68e8      	ldr	r0, [r5, #12]
    a7b6:	7941      	ldrb	r1, [r0, #5]
    a7b8:	f001 0207 	and.w	r2, r1, #7
    a7bc:	6861      	ldr	r1, [r4, #4]
    a7be:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
    a7c2:	7900      	ldrb	r0, [r0, #4]
    a7c4:	f000 0007 	and.w	r0, r0, #7
    a7c8:	f881 0066 	strb.w	r0, [r1, #102]	; 0x66
    a7cc:	f891 3125 	ldrb.w	r3, [r1, #293]	; 0x125
    a7d0:	f88d 3000 	strb.w	r3, [sp]
    a7d4:	9b00      	ldr	r3, [sp, #0]
    a7d6:	9300      	str	r3, [sp, #0]
    a7d8:	f89d 3000 	ldrb.w	r3, [sp]
    a7dc:	bb5b      	cbnz	r3, a836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a7de:	e008      	b.n	a7f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    a7e0:	2001      	movs	r0, #1
    a7e2:	bd38      	pop	{r3, r4, r5, pc}
    a7e4:	e7ff      	b.n	a7e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    a7e6:	2020      	movs	r0, #32
    a7e8:	e7fb      	b.n	a7e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a7ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a7ee:	f7ff be95 	b.w	a51c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a7f2:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    a7f6:	2b01      	cmp	r3, #1
    a7f8:	d01d      	beq.n	a836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a7fa:	f101 036e 	add.w	r3, r1, #110	; 0x6e
    a7fe:	785d      	ldrb	r5, [r3, #1]
    a800:	4285      	cmp	r5, r0
    a802:	d106      	bne.n	a812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    a804:	7818      	ldrb	r0, [r3, #0]
    a806:	4290      	cmp	r0, r2
    a808:	d103      	bne.n	a812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    a80a:	2002      	movs	r0, #2
    a80c:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    a810:	e011      	b.n	a836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a812:	f501 70bc 	add.w	r0, r1, #376	; 0x178
    a816:	880a      	ldrh	r2, [r1, #0]
    a818:	f820 2b02 	strh.w	r2, [r0], #2
    a81c:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    a820:	f800 2b01 	strb.w	r2, [r0], #1
    a824:	f891 2067 	ldrb.w	r2, [r1, #103]	; 0x67
    a828:	f800 290d 	strb.w	r2, [r0], #-13
    a82c:	221b      	movs	r2, #27
    a82e:	f7fc fea9 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a832:	f7fc ff79 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a836:	6861      	ldr	r1, [r4, #4]
    a838:	2021      	movs	r0, #33	; 0x21
    a83a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a83e:	f7fe fe21 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a842:	2000      	movs	r0, #0
    a844:	e7cd      	b.n	a7e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a846:	0000      	.short	0x0000
    a848:	20000174 	.word	0x20000174
    a84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a850:	4951      	ldr	r1, [pc, #324]	; (a998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    a852:	6848      	ldr	r0, [r1, #4]
    a854:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a858:	2a20      	cmp	r2, #32
    a85a:	d009      	beq.n	a870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>
    a85c:	f05f 0600 	movs.w	r6, #0
    a860:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a864:	2a22      	cmp	r2, #34	; 0x22
    a866:	d005      	beq.n	a874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f4>
    a868:	b3a6      	cbz	r6, a8d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1654>
    a86a:	f100 0485 	add.w	r4, r0, #133	; 0x85
    a86e:	e003      	b.n	a878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>
    a870:	2601      	movs	r6, #1
    a872:	e7f5      	b.n	a860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e0>
    a874:	f100 0486 	add.w	r4, r0, #134	; 0x86
    a878:	4688      	mov	r8, r1
    a87a:	2102      	movs	r1, #2
    a87c:	30d4      	adds	r0, #212	; 0xd4
    a87e:	f005 ff00 	bl	10682 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    a882:	4d45      	ldr	r5, [pc, #276]	; (a998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    a884:	3d10      	subs	r5, #16
    a886:	68e8      	ldr	r0, [r5, #12]
    a888:	f004 fd5f 	bl	f34a <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    a88c:	2700      	movs	r7, #0
    a88e:	b328      	cbz	r0, a8dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a890:	4631      	mov	r1, r6
    a892:	68e8      	ldr	r0, [r5, #12]
    a894:	f7fe fec8 	bl	9628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    a898:	b300      	cbz	r0, a8dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a89a:	4646      	mov	r6, r8
    a89c:	466a      	mov	r2, sp
    a89e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a8a2:	68e9      	ldr	r1, [r5, #12]
    a8a4:	f004 fbc6 	bl	f034 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    a8a8:	b3a8      	cbz	r0, a916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1696>
    a8aa:	68e8      	ldr	r0, [r5, #12]
    a8ac:	f004 fd1f 	bl	f2ee <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    a8b0:	6871      	ldr	r1, [r6, #4]
    a8b2:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a8b6:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a8ba:	f005 ff54 	bl	10766 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a8be:	b358      	cbz	r0, a918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    a8c0:	6871      	ldr	r1, [r6, #4]
    a8c2:	2028      	movs	r0, #40	; 0x28
    a8c4:	2208      	movs	r2, #8
    a8c6:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a8ca:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a8ce:	f7fc fe59 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a8d2:	e055      	b.n	a980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a8d4:	e7ff      	b.n	a8d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1656>
    a8d6:	2002      	movs	r0, #2
    a8d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a8dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a8e0:	f04f 0900 	mov.w	r9, #0
    a8e4:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    a8e8:	2901      	cmp	r1, #1
    a8ea:	d016      	beq.n	a91a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169a>
    a8ec:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    a8f0:	b1fe      	cbz	r6, a932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b2>
    a8f2:	68e8      	ldr	r0, [r5, #12]
    a8f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    a8f8:	2201      	movs	r2, #1
    a8fa:	78c0      	ldrb	r0, [r0, #3]
    a8fc:	f881 0109 	strb.w	r0, [r1, #265]	; 0x109
    a900:	4082      	lsls	r2, r0
    a902:	f3c2 6000 	ubfx	r0, r2, #24, #1
    a906:	b160      	cbz	r0, a922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a2>
    a908:	200a      	movs	r0, #10
    a90a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a90e:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    a912:	b9a0      	cbnz	r0, a93e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16be>
    a914:	e008      	b.n	a928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a8>
    a916:	e014      	b.n	a942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    a918:	e027      	b.n	a96a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ea>
    a91a:	201e      	movs	r0, #30
    a91c:	f7ff fc62 	bl	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a920:	e7e6      	b.n	a8f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    a922:	f240 31fd 	movw	r1, #1021	; 0x3fd
    a926:	e001      	b.n	a92c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ac>
    a928:	f240 4105 	movw	r1, #1029	; 0x405
    a92c:	2031      	movs	r0, #49	; 0x31
    a92e:	f7fa fe01 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a932:	7027      	strb	r7, [r4, #0]
    a934:	f7fe fdb2 	bl	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a938:	f7ff fdf0 	bl	a51c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a93c:	4681      	mov	r9, r0
    a93e:	4648      	mov	r0, r9
    a940:	e7ca      	b.n	a8d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    a942:	6870      	ldr	r0, [r6, #4]
    a944:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    a948:	2901      	cmp	r1, #1
    a94a:	d009      	beq.n	a960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e0>
    a94c:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    a950:	6870      	ldr	r0, [r6, #4]
    a952:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a956:	42a1      	cmp	r1, r4
    a958:	d112      	bne.n	a980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a95a:	f880 7086 	strb.w	r7, [r0, #134]	; 0x86
    a95e:	e00f      	b.n	a980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a960:	2000      	movs	r0, #0
    a962:	f7ff fc3f 	bl	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a966:	7027      	strb	r7, [r4, #0]
    a968:	e7f2      	b.n	a950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    a96a:	6870      	ldr	r0, [r6, #4]
    a96c:	f89d 1000 	ldrb.w	r1, [sp]
    a970:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
    a974:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a978:	f880 1277 	strb.w	r1, [r0, #631]	; 0x277
    a97c:	2024      	movs	r0, #36	; 0x24
    a97e:	7020      	strb	r0, [r4, #0]
    a980:	6870      	ldr	r0, [r6, #4]
    a982:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a986:	42a1      	cmp	r1, r4
    a988:	d102      	bne.n	a990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1710>
    a98a:	f7fe fd87 	bl	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a98e:	e001      	b.n	a994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1714>
    a990:	f880 70be 	strb.w	r7, [r0, #190]	; 0xbe
    a994:	2000      	movs	r0, #0
    a996:	e79f      	b.n	a8d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    a998:	20000174 	.word	0x20000174
    a99c:	b570      	push	{r4, r5, r6, lr}
    a99e:	480a      	ldr	r0, [pc, #40]	; (a9c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    a9a0:	2102      	movs	r1, #2
    a9a2:	6840      	ldr	r0, [r0, #4]
    a9a4:	30d4      	adds	r0, #212	; 0xd4
    a9a6:	f005 fe6c 	bl	10682 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    a9aa:	4c07      	ldr	r4, [pc, #28]	; (a9c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    a9ac:	3c10      	subs	r4, #16
    a9ae:	68e0      	ldr	r0, [r4, #12]
    a9b0:	f004 fcdb 	bl	f36a <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a9b4:	4605      	mov	r5, r0
    a9b6:	68e0      	ldr	r0, [r4, #12]
    a9b8:	f004 fcd9 	bl	f36e <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a9bc:	4601      	mov	r1, r0
    a9be:	4628      	mov	r0, r5
    a9c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a9c4:	f005 bedb 	b.w	1077e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a9c8:	20000174 	.word	0x20000174
    a9cc:	4808      	ldr	r0, [pc, #32]	; (a9f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    a9ce:	68c0      	ldr	r0, [r0, #12]
    a9d0:	7901      	ldrb	r1, [r0, #4]
    a9d2:	4807      	ldr	r0, [pc, #28]	; (a9f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    a9d4:	3010      	adds	r0, #16
    a9d6:	6840      	ldr	r0, [r0, #4]
    a9d8:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a9dc:	2820      	cmp	r0, #32
    a9de:	d005      	beq.n	a9ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    a9e0:	2827      	cmp	r0, #39	; 0x27
    a9e2:	d003      	beq.n	a9ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    a9e4:	f05f 00fe 	movs.w	r0, #254	; 0xfe
    a9e8:	f005 bec9 	b.w	1077e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a9ec:	2016      	movs	r0, #22
    a9ee:	e7fb      	b.n	a9e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>
    a9f0:	20000164 	.word	0x20000164
    a9f4:	b510      	push	{r4, lr}
    a9f6:	4c08      	ldr	r4, [pc, #32]	; (aa18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>)
    a9f8:	6860      	ldr	r0, [r4, #4]
    a9fa:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a9fe:	2817      	cmp	r0, #23
    aa00:	d001      	beq.n	aa06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1786>
    aa02:	2002      	movs	r0, #2
    aa04:	bd10      	pop	{r4, pc}
    aa06:	f7fe fd49 	bl	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    aa0a:	6861      	ldr	r1, [r4, #4]
    aa0c:	201b      	movs	r0, #27
    aa0e:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    aa12:	2000      	movs	r0, #0
    aa14:	bd10      	pop	{r4, pc}
    aa16:	0000      	.short	0x0000
    aa18:	20000174 	.word	0x20000174
    aa1c:	b510      	push	{r4, lr}
    aa1e:	4c0c      	ldr	r4, [pc, #48]	; (aa50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    aa20:	2301      	movs	r3, #1
    aa22:	4619      	mov	r1, r3
    aa24:	6860      	ldr	r0, [r4, #4]
    aa26:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    aa2a:	3078      	adds	r0, #120	; 0x78
    aa2c:	f004 f9d0 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa30:	b108      	cbz	r0, aa36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b6>
    aa32:	2000      	movs	r0, #0
    aa34:	bd10      	pop	{r4, pc}
    aa36:	4806      	ldr	r0, [pc, #24]	; (aa50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    aa38:	3810      	subs	r0, #16
    aa3a:	68c0      	ldr	r0, [r0, #12]
    aa3c:	f004 fc5b 	bl	f2f6 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    aa40:	6861      	ldr	r1, [r4, #4]
    aa42:	f881 0089 	strb.w	r0, [r1, #137]	; 0x89
    aa46:	2007      	movs	r0, #7
    aa48:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    aa4c:	e7f1      	b.n	aa32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    aa4e:	0000      	.short	0x0000
    aa50:	20000174 	.word	0x20000174
    aa54:	b570      	push	{r4, r5, r6, lr}
    aa56:	4834      	ldr	r0, [pc, #208]	; (ab28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    aa58:	4c33      	ldr	r4, [pc, #204]	; (ab28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    aa5a:	2500      	movs	r5, #0
    aa5c:	68c0      	ldr	r0, [r0, #12]
    aa5e:	3410      	adds	r4, #16
    aa60:	6862      	ldr	r2, [r4, #4]
    aa62:	7901      	ldrb	r1, [r0, #4]
    aa64:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    aa68:	390e      	subs	r1, #14
    aa6a:	290a      	cmp	r1, #10
    aa6c:	d259      	bcs.n	ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aa6e:	e8df f001 	tbb	[pc, r1]
    aa72:	5805      	.short	0x5805
    aa74:	581a5858 	.word	0x581a5858
    aa78:	442c5820 	.word	0x442c5820
    aa7c:	2804      	cmp	r0, #4
    aa7e:	d150      	bne.n	ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aa80:	f7fe fe56 	bl	9730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    aa84:	6860      	ldr	r0, [r4, #4]
    aa86:	2205      	movs	r2, #5
    aa88:	f500 73c6 	add.w	r3, r0, #396	; 0x18c
    aa8c:	8801      	ldrh	r1, [r0, #0]
    aa8e:	f8a0 1198 	strh.w	r1, [r0, #408]	; 0x198
    aa92:	211a      	movs	r1, #26
    aa94:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    aa98:	4601      	mov	r1, r0
    aa9a:	4618      	mov	r0, r3
    aa9c:	f7fc fd72 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    aaa0:	f7fc fe42 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aaa4:	e03d      	b.n	ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aaa6:	280e      	cmp	r0, #14
    aaa8:	d13b      	bne.n	ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aaaa:	f7ff fe15 	bl	a6d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1458>
    aaae:	4605      	mov	r5, r0
    aab0:	e037      	b.n	ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aab2:	281c      	cmp	r0, #28
    aab4:	d135      	bne.n	ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aab6:	f7fe fe3b 	bl	9730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    aaba:	6860      	ldr	r0, [r4, #4]
    aabc:	2105      	movs	r1, #5
    aabe:	30d4      	adds	r0, #212	; 0xd4
    aac0:	f005 fdd5 	bl	1066e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    aac4:	f7fe fec4 	bl	9850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    aac8:	e02b      	b.n	ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aaca:	2820      	cmp	r0, #32
    aacc:	d001      	beq.n	aad2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    aace:	2827      	cmp	r0, #39	; 0x27
    aad0:	d127      	bne.n	ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aad2:	f7fe fe2d 	bl	9730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    aad6:	6860      	ldr	r0, [r4, #4]
    aad8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    aadc:	2921      	cmp	r1, #33	; 0x21
    aade:	d020      	beq.n	ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aae0:	2108      	movs	r1, #8
    aae2:	30d4      	adds	r0, #212	; 0xd4
    aae4:	f005 fdc3 	bl	1066e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    aae8:	6860      	ldr	r0, [r4, #4]
    aaea:	210b      	movs	r1, #11
    aaec:	30d4      	adds	r0, #212	; 0xd4
    aaee:	f005 fdbe 	bl	1066e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    aaf2:	201a      	movs	r0, #26
    aaf4:	f7ff fb76 	bl	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    aaf8:	e013      	b.n	ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aafa:	f892 0086 	ldrb.w	r0, [r2, #134]	; 0x86
    aafe:	2822      	cmp	r0, #34	; 0x22
    ab00:	d10f      	bne.n	ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    ab02:	2600      	movs	r6, #0
    ab04:	f882 6086 	strb.w	r6, [r2, #134]	; 0x86
    ab08:	f7fe fcc8 	bl	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ab0c:	6860      	ldr	r0, [r4, #4]
    ab0e:	f890 0124 	ldrb.w	r0, [r0, #292]	; 0x124
    ab12:	2801      	cmp	r0, #1
    ab14:	d102      	bne.n	ab1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189c>
    ab16:	2000      	movs	r0, #0
    ab18:	f7ff fb64 	bl	a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    ab1c:	6860      	ldr	r0, [r4, #4]
    ab1e:	f880 6124 	strb.w	r6, [r0, #292]	; 0x124
    ab22:	4628      	mov	r0, r5
    ab24:	bd70      	pop	{r4, r5, r6, pc}
    ab26:	0000      	.short	0x0000
    ab28:	20000164 	.word	0x20000164
    ab2c:	b570      	push	{r4, r5, r6, lr}
    ab2e:	4c31      	ldr	r4, [pc, #196]	; (abf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    ab30:	6860      	ldr	r0, [r4, #4]
    ab32:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    ab36:	0789      	lsls	r1, r1, #30
    ab38:	d507      	bpl.n	ab4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ca>
    ab3a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ab3e:	2301      	movs	r3, #1
    ab40:	2108      	movs	r1, #8
    ab42:	3078      	adds	r0, #120	; 0x78
    ab44:	f004 f944 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab48:	b1f8      	cbz	r0, ab8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    ab4a:	6860      	ldr	r0, [r4, #4]
    ab4c:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    ab50:	0780      	lsls	r0, r0, #30
    ab52:	d414      	bmi.n	ab7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    ab54:	4d27      	ldr	r5, [pc, #156]	; (abf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    ab56:	3d10      	subs	r5, #16
    ab58:	68e8      	ldr	r0, [r5, #12]
    ab5a:	f004 fbce 	bl	f2fa <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    ab5e:	6861      	ldr	r1, [r4, #4]
    ab60:	f881 00cf 	strb.w	r0, [r1, #207]	; 0xcf
    ab64:	68e8      	ldr	r0, [r5, #12]
    ab66:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    ab6a:	f8a1 20d0 	strh.w	r2, [r1, #208]	; 0xd0
    ab6e:	8840      	ldrh	r0, [r0, #2]
    ab70:	f8a1 00d2 	strh.w	r0, [r1, #210]	; 0xd2
    ab74:	f811 0fc5 	ldrb.w	r0, [r1, #197]!
    ab78:	f040 0002 	orr.w	r0, r0, #2
    ab7c:	7008      	strb	r0, [r1, #0]
    ab7e:	6860      	ldr	r0, [r4, #4]
    ab80:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    ab84:	07c9      	lsls	r1, r1, #31
    ab86:	d002      	beq.n	ab8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    ab88:	e015      	b.n	abb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    ab8a:	2001      	movs	r0, #1
    ab8c:	bd70      	pop	{r4, r5, r6, pc}
    ab8e:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    ab92:	078a      	lsls	r2, r1, #30
    ab94:	d504      	bpl.n	aba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
    ab96:	f240 21e2 	movw	r1, #738	; 0x2e2
    ab9a:	2031      	movs	r0, #49	; 0x31
    ab9c:	f7fa fcca 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aba0:	f041 0102 	orr.w	r1, r1, #2
    aba4:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    aba8:	f7fe fc6c 	bl	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    abac:	6860      	ldr	r0, [r4, #4]
    abae:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    abb2:	07c0      	lsls	r0, r0, #31
    abb4:	d007      	beq.n	abc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    abb6:	6861      	ldr	r1, [r4, #4]
    abb8:	2201      	movs	r2, #1
    abba:	f101 00c6 	add.w	r0, r1, #198	; 0xc6
    abbe:	f7fc fce1 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    abc2:	f7fc fdb1 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    abc6:	6860      	ldr	r0, [r4, #4]
    abc8:	2100      	movs	r1, #0
    abca:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    abce:	2a06      	cmp	r2, #6
    abd0:	d103      	bne.n	abda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195a>
    abd2:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    abd6:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    abda:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
    abde:	b132      	cbz	r2, abee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    abe0:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    abe4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    abe8:	b90a      	cbnz	r2, abee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    abea:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    abee:	2000      	movs	r0, #0
    abf0:	bd70      	pop	{r4, r5, r6, pc}
    abf2:	0000      	.short	0x0000
    abf4:	20000174 	.word	0x20000174
    abf8:	b510      	push	{r4, lr}
    abfa:	4c1f      	ldr	r4, [pc, #124]	; (ac78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f8>)
    abfc:	6863      	ldr	r3, [r4, #4]
    abfe:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    ac02:	2808      	cmp	r0, #8
    ac04:	d20d      	bcs.n	ac22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a2>
    ac06:	f500 72f4 	add.w	r2, r0, #488	; 0x1e8
    ac0a:	f1c0 0008 	rsb	r0, r0, #8
    ac0e:	b2c1      	uxtb	r1, r0
    ac10:	1898      	adds	r0, r3, r2
    ac12:	f7fa fd2d 	bl	5670 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ac16:	6861      	ldr	r1, [r4, #4]
    ac18:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    ac1c:	4410      	add	r0, r2
    ac1e:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    ac22:	6863      	ldr	r3, [r4, #4]
    ac24:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    ac28:	3808      	subs	r0, #8
    ac2a:	2804      	cmp	r0, #4
    ac2c:	d20d      	bcs.n	ac4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ca>
    ac2e:	f500 7282 	add.w	r2, r0, #260	; 0x104
    ac32:	f1c0 0004 	rsb	r0, r0, #4
    ac36:	b2c1      	uxtb	r1, r0
    ac38:	1898      	adds	r0, r3, r2
    ac3a:	f7fa fd19 	bl	5670 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ac3e:	6861      	ldr	r1, [r4, #4]
    ac40:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    ac44:	4410      	add	r0, r2
    ac46:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    ac4a:	6860      	ldr	r0, [r4, #4]
    ac4c:	f890 1112 	ldrb.w	r1, [r0, #274]	; 0x112
    ac50:	290c      	cmp	r1, #12
    ac52:	d30f      	bcc.n	ac74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
    ac54:	d005      	beq.n	ac62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e2>
    ac56:	f640 013b 	movw	r1, #2107	; 0x83b
    ac5a:	f04f 0031 	mov.w	r0, #49	; 0x31
    ac5e:	f7fa fc69 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac62:	2100      	movs	r1, #0
    ac64:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
    ac68:	2101      	movs	r1, #1
    ac6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac6e:	2004      	movs	r0, #4
    ac70:	f7ff b9ac 	b.w	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    ac74:	bd10      	pop	{r4, pc}
    ac76:	0000      	.short	0x0000
    ac78:	20000174 	.word	0x20000174
    ac7c:	4804      	ldr	r0, [pc, #16]	; (ac90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>)
    ac7e:	2129      	movs	r1, #41	; 0x29
    ac80:	6840      	ldr	r0, [r0, #4]
    ac82:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ac86:	2100      	movs	r1, #0
    ac88:	f880 126c 	strb.w	r1, [r0, #620]	; 0x26c
    ac8c:	4770      	bx	lr
    ac8e:	0000      	.short	0x0000
    ac90:	20000174 	.word	0x20000174
    ac94:	4809      	ldr	r0, [pc, #36]	; (acbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3c>)
    ac96:	b510      	push	{r4, lr}
    ac98:	6840      	ldr	r0, [r0, #4]
    ac9a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ac9e:	2914      	cmp	r1, #20
    aca0:	d004      	beq.n	acac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    aca2:	f240 61fd 	movw	r1, #1789	; 0x6fd
    aca6:	2031      	movs	r0, #49	; 0x31
    aca8:	f7fa fc44 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acac:	2101      	movs	r1, #1
    acae:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    acb2:	2115      	movs	r1, #21
    acb4:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    acb8:	bd10      	pop	{r4, pc}
    acba:	0000      	.short	0x0000
    acbc:	20000174 	.word	0x20000174
    acc0:	b510      	push	{r4, lr}
    acc2:	4c0a      	ldr	r4, [pc, #40]	; (acec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    acc4:	6860      	ldr	r0, [r4, #4]
    acc6:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    acca:	07c0      	lsls	r0, r0, #31
    accc:	d008      	beq.n	ace0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    acce:	f7fe fbe5 	bl	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    acd2:	6860      	ldr	r0, [r4, #4]
    acd4:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    acd8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    acdc:	7001      	strb	r1, [r0, #0]
    acde:	bd10      	pop	{r4, pc}
    ace0:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    ace4:	2031      	movs	r0, #49	; 0x31
    ace6:	f7fa fc25 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acea:	0000      	.short	0x0000
    acec:	20000174 	.word	0x20000174
    acf0:	b510      	push	{r4, lr}
    acf2:	4c0a      	ldr	r4, [pc, #40]	; (ad1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9c>)
    acf4:	2301      	movs	r3, #1
    acf6:	2100      	movs	r1, #0
    acf8:	6860      	ldr	r0, [r4, #4]
    acfa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    acfe:	3078      	adds	r0, #120	; 0x78
    ad00:	f004 f866 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad04:	b120      	cbz	r0, ad10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a90>
    ad06:	6861      	ldr	r1, [r4, #4]
    ad08:	201c      	movs	r0, #28
    ad0a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ad0e:	bd10      	pop	{r4, pc}
    ad10:	f240 7184 	movw	r1, #1924	; 0x784
    ad14:	2031      	movs	r0, #49	; 0x31
    ad16:	f7fa fc0d 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad1a:	0000      	.short	0x0000
    ad1c:	20000174 	.word	0x20000174
    ad20:	480a      	ldr	r0, [pc, #40]	; (ad4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>)
    ad22:	b510      	push	{r4, lr}
    ad24:	6840      	ldr	r0, [r0, #4]
    ad26:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    ad2a:	f3c1 1201 	ubfx	r2, r1, #4, #2
    ad2e:	2a01      	cmp	r2, #1
    ad30:	d004      	beq.n	ad3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    ad32:	f240 718b 	movw	r1, #1931	; 0x78b
    ad36:	2031      	movs	r0, #49	; 0x31
    ad38:	f7fa fbfc 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad3c:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    ad40:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    ad44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad48:	f7fe bba8 	b.w	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ad4c:	20000174 	.word	0x20000174
    ad50:	b510      	push	{r4, lr}
    ad52:	4c0a      	ldr	r4, [pc, #40]	; (ad7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afc>)
    ad54:	2301      	movs	r3, #1
    ad56:	2100      	movs	r1, #0
    ad58:	6860      	ldr	r0, [r4, #4]
    ad5a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ad5e:	3078      	adds	r0, #120	; 0x78
    ad60:	f004 f836 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad64:	b120      	cbz	r0, ad70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    ad66:	6861      	ldr	r1, [r4, #4]
    ad68:	200e      	movs	r0, #14
    ad6a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ad6e:	bd10      	pop	{r4, pc}
    ad70:	f240 7177 	movw	r1, #1911	; 0x777
    ad74:	2031      	movs	r0, #49	; 0x31
    ad76:	f7fa fbdd 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad7a:	0000      	.short	0x0000
    ad7c:	20000174 	.word	0x20000174
    ad80:	4804      	ldr	r0, [pc, #16]	; (ad94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b14>)
    ad82:	6840      	ldr	r0, [r0, #4]
    ad84:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    ad88:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    ad8c:	7001      	strb	r1, [r0, #0]
    ad8e:	f7fe bb85 	b.w	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ad92:	0000      	.short	0x0000
    ad94:	20000174 	.word	0x20000174
    ad98:	4809      	ldr	r0, [pc, #36]	; (adc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b40>)
    ad9a:	b510      	push	{r4, lr}
    ad9c:	6840      	ldr	r0, [r0, #4]
    ad9e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ada2:	2910      	cmp	r1, #16
    ada4:	d004      	beq.n	adb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b30>
    ada6:	f240 61f5 	movw	r1, #1781	; 0x6f5
    adaa:	2031      	movs	r0, #49	; 0x31
    adac:	f7fa fbc2 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adb0:	2101      	movs	r1, #1
    adb2:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    adb6:	2111      	movs	r1, #17
    adb8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    adbc:	bd10      	pop	{r4, pc}
    adbe:	0000      	.short	0x0000
    adc0:	20000174 	.word	0x20000174
    adc4:	b510      	push	{r4, lr}
    adc6:	4c0a      	ldr	r4, [pc, #40]	; (adf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b70>)
    adc8:	2301      	movs	r3, #1
    adca:	2100      	movs	r1, #0
    adcc:	6860      	ldr	r0, [r4, #4]
    adce:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    add2:	3078      	adds	r0, #120	; 0x78
    add4:	f003 fffc 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    add8:	b120      	cbz	r0, ade4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>
    adda:	6861      	ldr	r1, [r4, #4]
    addc:	201f      	movs	r0, #31
    adde:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ade2:	bd10      	pop	{r4, pc}
    ade4:	f240 7197 	movw	r1, #1943	; 0x797
    ade8:	2031      	movs	r0, #49	; 0x31
    adea:	f7fa fba3 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adee:	0000      	.short	0x0000
    adf0:	20000174 	.word	0x20000174
    adf4:	4808      	ldr	r0, [pc, #32]	; (ae18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b98>)
    adf6:	b510      	push	{r4, lr}
    adf8:	6840      	ldr	r0, [r0, #4]
    adfa:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    adfe:	2921      	cmp	r1, #33	; 0x21
    ae00:	d005      	beq.n	ae0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    ae02:	b121      	cbz	r1, ae0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    ae04:	f240 719e 	movw	r1, #1950	; 0x79e
    ae08:	2031      	movs	r0, #49	; 0x31
    ae0a:	f7fa fb93 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae0e:	2122      	movs	r1, #34	; 0x22
    ae10:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ae14:	bd10      	pop	{r4, pc}
    ae16:	0000      	.short	0x0000
    ae18:	20000174 	.word	0x20000174
    ae1c:	4809      	ldr	r0, [pc, #36]	; (ae44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>)
    ae1e:	b510      	push	{r4, lr}
    ae20:	6840      	ldr	r0, [r0, #4]
    ae22:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ae26:	2928      	cmp	r1, #40	; 0x28
    ae28:	d006      	beq.n	ae38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb8>
    ae2a:	2915      	cmp	r1, #21
    ae2c:	d006      	beq.n	ae3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    ae2e:	f240 711e 	movw	r1, #1822	; 0x71e
    ae32:	2031      	movs	r0, #49	; 0x31
    ae34:	f7fa fb7e 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae38:	2100      	movs	r1, #0
    ae3a:	e000      	b.n	ae3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
    ae3c:	2119      	movs	r1, #25
    ae3e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ae42:	bd10      	pop	{r4, pc}
    ae44:	20000174 	.word	0x20000174
    ae48:	4807      	ldr	r0, [pc, #28]	; (ae68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
    ae4a:	b510      	push	{r4, lr}
    ae4c:	6840      	ldr	r0, [r0, #4]
    ae4e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ae52:	2915      	cmp	r1, #21
    ae54:	d004      	beq.n	ae60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be0>
    ae56:	f240 710a 	movw	r1, #1802	; 0x70a
    ae5a:	2031      	movs	r0, #49	; 0x31
    ae5c:	f7fa fb6a 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae60:	2119      	movs	r1, #25
    ae62:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ae66:	bd10      	pop	{r4, pc}
    ae68:	20000174 	.word	0x20000174
    ae6c:	b510      	push	{r4, lr}
    ae6e:	4c0a      	ldr	r4, [pc, #40]	; (ae98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c18>)
    ae70:	2301      	movs	r3, #1
    ae72:	2100      	movs	r1, #0
    ae74:	6860      	ldr	r0, [r4, #4]
    ae76:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae7a:	3078      	adds	r0, #120	; 0x78
    ae7c:	f003 ffa8 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae80:	b120      	cbz	r0, ae8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c0c>
    ae82:	6861      	ldr	r1, [r4, #4]
    ae84:	2004      	movs	r0, #4
    ae86:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ae8a:	bd10      	pop	{r4, pc}
    ae8c:	f240 61ef 	movw	r1, #1775	; 0x6ef
    ae90:	2031      	movs	r0, #49	; 0x31
    ae92:	f7fa fb4f 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae96:	0000      	.short	0x0000
    ae98:	20000174 	.word	0x20000174
    ae9c:	4807      	ldr	r0, [pc, #28]	; (aebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>)
    ae9e:	b510      	push	{r4, lr}
    aea0:	6840      	ldr	r0, [r0, #4]
    aea2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    aea6:	2915      	cmp	r1, #21
    aea8:	d004      	beq.n	aeb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c34>
    aeaa:	f240 7104 	movw	r1, #1796	; 0x704
    aeae:	2031      	movs	r0, #49	; 0x31
    aeb0:	f7fa fb40 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aeb4:	2117      	movs	r1, #23
    aeb6:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    aeba:	bd10      	pop	{r4, pc}
    aebc:	20000174 	.word	0x20000174
    aec0:	b538      	push	{r3, r4, r5, lr}
    aec2:	4d20      	ldr	r5, [pc, #128]	; (af44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    aec4:	6869      	ldr	r1, [r5, #4]
    aec6:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    aeca:	281b      	cmp	r0, #27
    aecc:	d002      	beq.n	aed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c54>
    aece:	f240 7137 	movw	r1, #1847	; 0x737
    aed2:	e00e      	b.n	aef2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
    aed4:	2400      	movs	r4, #0
    aed6:	f881 40c3 	strb.w	r4, [r1, #195]	; 0xc3
    aeda:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    aede:	f88d 0000 	strb.w	r0, [sp]
    aee2:	9800      	ldr	r0, [sp, #0]
    aee4:	9000      	str	r0, [sp, #0]
    aee6:	f89d 0000 	ldrb.w	r0, [sp]
    aeea:	2201      	movs	r2, #1
    aeec:	b120      	cbz	r0, aef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c78>
    aeee:	f240 713b 	movw	r1, #1851	; 0x73b
    aef2:	2031      	movs	r0, #49	; 0x31
    aef4:	f7fa fb1e 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aef8:	4812      	ldr	r0, [pc, #72]	; (af44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    aefa:	f891 30c4 	ldrb.w	r3, [r1, #196]	; 0xc4
    aefe:	6840      	ldr	r0, [r0, #4]
    af00:	f500 70db 	add.w	r0, r0, #438	; 0x1b6
    af04:	b143      	cbz	r3, af18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    af06:	f881 40c4 	strb.w	r4, [r1, #196]	; 0xc4
    af0a:	880a      	ldrh	r2, [r1, #0]
    af0c:	f8a1 21c2 	strh.w	r2, [r1, #450]	; 0x1c2
    af10:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    af14:	220a      	movs	r2, #10
    af16:	e007      	b.n	af28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca8>
    af18:	880b      	ldrh	r3, [r1, #0]
    af1a:	f8a1 31c2 	strh.w	r3, [r1, #450]	; 0x1c2
    af1e:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    af22:	f881 21c4 	strb.w	r2, [r1, #452]	; 0x1c4
    af26:	2209      	movs	r2, #9
    af28:	f7fc fb2c 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    af2c:	6868      	ldr	r0, [r5, #4]
    af2e:	8800      	ldrh	r0, [r0, #0]
    af30:	f7fa ff28 	bl	5d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    af34:	f003 fb70 	bl	e618 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    af38:	f7fc fbf6 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    af3c:	6868      	ldr	r0, [r5, #4]
    af3e:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
    af42:	bd38      	pop	{r3, r4, r5, pc}
    af44:	20000174 	.word	0x20000174
    af48:	b510      	push	{r4, lr}
    af4a:	4c08      	ldr	r4, [pc, #32]	; (af6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>)
    af4c:	2301      	movs	r3, #1
    af4e:	4619      	mov	r1, r3
    af50:	6860      	ldr	r0, [r4, #4]
    af52:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    af56:	3078      	adds	r0, #120	; 0x78
    af58:	f003 ff3a 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af5c:	2800      	cmp	r0, #0
    af5e:	d103      	bne.n	af68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce8>
    af60:	6861      	ldr	r1, [r4, #4]
    af62:	2008      	movs	r0, #8
    af64:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    af68:	bd10      	pop	{r4, pc}
    af6a:	0000      	.short	0x0000
    af6c:	20000174 	.word	0x20000174
    af70:	4815      	ldr	r0, [pc, #84]	; (afc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    af72:	b510      	push	{r4, lr}
    af74:	6880      	ldr	r0, [r0, #8]
    af76:	7901      	ldrb	r1, [r0, #4]
    af78:	4813      	ldr	r0, [pc, #76]	; (afc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    af7a:	3010      	adds	r0, #16
    af7c:	6840      	ldr	r0, [r0, #4]
    af7e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af82:	2a0a      	cmp	r2, #10
    af84:	d109      	bne.n	af9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    af86:	f890 2109 	ldrb.w	r2, [r0, #265]	; 0x109
    af8a:	428a      	cmp	r2, r1
    af8c:	d105      	bne.n	af9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    af8e:	2100      	movs	r1, #0
    af90:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    af94:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    af98:	bd10      	pop	{r4, pc}
    af9a:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    af9e:	0713      	lsls	r3, r2, #28
    afa0:	d507      	bpl.n	afb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d32>
    afa2:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
    afa6:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    afaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afae:	f7fe ba75 	b.w	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    afb2:	29ff      	cmp	r1, #255	; 0xff
    afb4:	d004      	beq.n	afc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d40>
    afb6:	f240 61e2 	movw	r1, #1762	; 0x6e2
    afba:	2031      	movs	r0, #49	; 0x31
    afbc:	f7fa faba 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afc4:	f7ff be5a 	b.w	ac7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    afc8:	20000164 	.word	0x20000164
    afcc:	b510      	push	{r4, lr}
    afce:	4c15      	ldr	r4, [pc, #84]	; (b024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da4>)
    afd0:	6860      	ldr	r0, [r4, #4]
    afd2:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    afd6:	0789      	lsls	r1, r1, #30
    afd8:	d411      	bmi.n	affe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7e>
    afda:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    afde:	2301      	movs	r3, #1
    afe0:	2100      	movs	r1, #0
    afe2:	3078      	adds	r0, #120	; 0x78
    afe4:	f003 fef4 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afe8:	b120      	cbz	r0, aff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d74>
    afea:	6861      	ldr	r1, [r4, #4]
    afec:	2006      	movs	r0, #6
    afee:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    aff2:	e009      	b.n	b008 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d88>
    aff4:	f240 7163 	movw	r1, #1891	; 0x763
    aff8:	2031      	movs	r0, #49	; 0x31
    affa:	f7fa fa9b 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    affe:	2100      	movs	r1, #0
    b000:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b004:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    b008:	6860      	ldr	r0, [r4, #4]
    b00a:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    b00e:	0780      	lsls	r0, r0, #30
    b010:	d507      	bpl.n	b022 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da2>
    b012:	f7fe fa43 	bl	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    b016:	6860      	ldr	r0, [r4, #4]
    b018:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    b01c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    b020:	7001      	strb	r1, [r0, #0]
    b022:	bd10      	pop	{r4, pc}
    b024:	20000174 	.word	0x20000174
    b028:	4808      	ldr	r0, [pc, #32]	; (b04c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dcc>)
    b02a:	b510      	push	{r4, lr}
    b02c:	6840      	ldr	r0, [r0, #4]
    b02e:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    b032:	b941      	cbnz	r1, b046 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc6>
    b034:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b038:	2301      	movs	r3, #1
    b03a:	2106      	movs	r1, #6
    b03c:	3078      	adds	r0, #120	; 0x78
    b03e:	f003 fec7 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b042:	2800      	cmp	r0, #0
    b044:	d000      	beq.n	b048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc8>
    b046:	2001      	movs	r0, #1
    b048:	bd10      	pop	{r4, pc}
    b04a:	0000      	.short	0x0000
    b04c:	20000174 	.word	0x20000174
    b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b052:	4c5e      	ldr	r4, [pc, #376]	; (b1cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    b054:	4607      	mov	r7, r0
    b056:	4615      	mov	r5, r2
    b058:	6860      	ldr	r0, [r4, #4]
    b05a:	2200      	movs	r2, #0
    b05c:	b111      	cbz	r1, b064 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    b05e:	f8a0 21de 	strh.w	r2, [r0, #478]	; 0x1de
    b062:	e006      	b.n	b072 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
    b064:	f8b0 11de 	ldrh.w	r1, [r0, #478]	; 0x1de
    b068:	f8b0 21ce 	ldrh.w	r2, [r0, #462]	; 0x1ce
    b06c:	4411      	add	r1, r2
    b06e:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    b072:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    b076:	f88d 1000 	strb.w	r1, [sp]
    b07a:	9900      	ldr	r1, [sp, #0]
    b07c:	9100      	str	r1, [sp, #0]
    b07e:	f89d 1000 	ldrb.w	r1, [sp]
    b082:	b939      	cbnz	r1, b094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e14>
    b084:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    b088:	2301      	movs	r3, #1
    b08a:	4619      	mov	r1, r3
    b08c:	3078      	adds	r0, #120	; 0x78
    b08e:	f003 fe9f 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b092:	b130      	cbz	r0, b0a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e22>
    b094:	6860      	ldr	r0, [r4, #4]
    b096:	f830 1fb8 	ldrh.w	r1, [r0, #184]!
    b09a:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    b09e:	4411      	add	r1, r2
    b0a0:	8001      	strh	r1, [r0, #0]
    b0a2:	6861      	ldr	r1, [r4, #4]
    b0a4:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    b0a8:	b130      	cbz	r0, b0b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e38>
    b0aa:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
    b0ae:	f8b1 31ce 	ldrh.w	r3, [r1, #462]	; 0x1ce
    b0b2:	441a      	add	r2, r3
    b0b4:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    b0b8:	f991 20c2 	ldrsb.w	r2, [r1, #194]	; 0xc2
    b0bc:	2a00      	cmp	r2, #0
    b0be:	dd06      	ble.n	b0ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4e>
    b0c0:	f8b1 30c0 	ldrh.w	r3, [r1, #192]	; 0xc0
    b0c4:	f8b1 61ce 	ldrh.w	r6, [r1, #462]	; 0x1ce
    b0c8:	4433      	add	r3, r6
    b0ca:	f8a1 30c0 	strh.w	r3, [r1, #192]	; 0xc0
    b0ce:	263d      	movs	r6, #61	; 0x3d
    b0d0:	b117      	cbz	r7, b0d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e58>
    b0d2:	f881 60a6 	strb.w	r6, [r1, #166]	; 0xa6
    b0d6:	e016      	b.n	b106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    b0d8:	4b3c      	ldr	r3, [pc, #240]	; (b1cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    b0da:	3b10      	subs	r3, #16
    b0dc:	781b      	ldrb	r3, [r3, #0]
    b0de:	2b02      	cmp	r3, #2
    b0e0:	d00b      	beq.n	b0fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7a>
    b0e2:	2b01      	cmp	r3, #1
    b0e4:	d015      	beq.n	b112 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e92>
    b0e6:	b36d      	cbz	r5, b144 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ec4>
    b0e8:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    b0ec:	2208      	movs	r2, #8
    b0ee:	f7fc fa49 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    b0f2:	06e8      	lsls	r0, r5, #27
    b0f4:	d510      	bpl.n	b118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e98>
    b0f6:	201e      	movs	r0, #30
    b0f8:	e01b      	b.n	b132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    b0fa:	f891 010e 	ldrb.w	r0, [r1, #270]	; 0x10e
    b0fe:	2806      	cmp	r0, #6
    b100:	d048      	beq.n	b194 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b102:	2016      	movs	r0, #22
    b104:	e046      	b.n	b194 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b106:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    b10a:	2208      	movs	r2, #8
    b10c:	f7fc fa3a 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    b110:	e049      	b.n	b1a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b112:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    b116:	e03d      	b.n	b194 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b118:	0728      	lsls	r0, r5, #28
    b11a:	d503      	bpl.n	b124 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea4>
    b11c:	6860      	ldr	r0, [r4, #4]
    b11e:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    b122:	e040      	b.n	b1a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b124:	06a8      	lsls	r0, r5, #26
    b126:	d501      	bpl.n	b12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eac>
    b128:	2023      	movs	r0, #35	; 0x23
    b12a:	e002      	b.n	b132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    b12c:	07a8      	lsls	r0, r5, #30
    b12e:	d004      	beq.n	b13a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eba>
    b130:	202a      	movs	r0, #42	; 0x2a
    b132:	6861      	ldr	r1, [r4, #4]
    b134:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    b138:	e035      	b.n	b1a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b13a:	f640 4173 	movw	r1, #3187	; 0xc73
    b13e:	2031      	movs	r0, #49	; 0x31
    b140:	f7fa f9f8 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b144:	b128      	cbz	r0, b152 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ed2>
    b146:	f8b1 00ba 	ldrh.w	r0, [r1, #186]	; 0xba
    b14a:	f8b1 30bc 	ldrh.w	r3, [r1, #188]	; 0xbc
    b14e:	4298      	cmp	r0, r3
    b150:	d216      	bcs.n	b180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    b152:	2a00      	cmp	r2, #0
    b154:	dd05      	ble.n	b162 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ee2>
    b156:	f8b1 00c0 	ldrh.w	r0, [r1, #192]	; 0xc0
    b15a:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
    b15e:	4290      	cmp	r0, r2
    b160:	d20e      	bcs.n	b180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    b162:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
    b166:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    b16a:	4282      	cmp	r2, r0
    b16c:	d30a      	bcc.n	b184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    b16e:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
    b172:	f88d 2000 	strb.w	r2, [sp]
    b176:	9a00      	ldr	r2, [sp, #0]
    b178:	9200      	str	r2, [sp, #0]
    b17a:	f89d 2000 	ldrb.w	r2, [sp]
    b17e:	b10a      	cbz	r2, b184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    b180:	2022      	movs	r0, #34	; 0x22
    b182:	e007      	b.n	b194 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b184:	f891 208a 	ldrb.w	r2, [r1, #138]	; 0x8a
    b188:	b13a      	cbz	r2, b19a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f1a>
    b18a:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    b18e:	4282      	cmp	r2, r0
    b190:	d309      	bcc.n	b1a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b192:	2008      	movs	r0, #8
    b194:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    b198:	e7b5      	b.n	b106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    b19a:	f8b1 00b4 	ldrh.w	r0, [r1, #180]	; 0xb4
    b19e:	2806      	cmp	r0, #6
    b1a0:	d301      	bcc.n	b1a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b1a2:	203e      	movs	r0, #62	; 0x3e
    b1a4:	e7f6      	b.n	b194 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b1a6:	6860      	ldr	r0, [r4, #4]
    b1a8:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    b1ac:	f88d 1000 	strb.w	r1, [sp]
    b1b0:	9900      	ldr	r1, [sp, #0]
    b1b2:	9100      	str	r1, [sp, #0]
    b1b4:	f89d 1000 	ldrb.w	r1, [sp]
    b1b8:	b119      	cbz	r1, b1c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f42>
    b1ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b1be:	f005 baa2 	b.w	10706 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    b1c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b1c6:	2100      	movs	r1, #0
    b1c8:	f7fd bc38 	b.w	8a3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b1cc:	20000174 	.word	0x20000174
    b1d0:	b570      	push	{r4, r5, r6, lr}
    b1d2:	4d2e      	ldr	r5, [pc, #184]	; (b28c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200c>)
    b1d4:	6868      	ldr	r0, [r5, #4]
    b1d6:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    b1da:	b151      	cbz	r1, b1f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    b1dc:	2901      	cmp	r1, #1
    b1de:	d008      	beq.n	b1f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    b1e0:	2902      	cmp	r1, #2
    b1e2:	d009      	beq.n	b1f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    b1e4:	2903      	cmp	r1, #3
    b1e6:	d007      	beq.n	b1f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    b1e8:	f640 21f1 	movw	r1, #2801	; 0xaf1
    b1ec:	2031      	movs	r0, #49	; 0x31
    b1ee:	f7fa f9a1 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1f2:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    b1f6:	e037      	b.n	b268 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe8>
    b1f8:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    b1fc:	2908      	cmp	r1, #8
    b1fe:	d036      	beq.n	b26e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fee>
    b200:	f8b0 20b4 	ldrh.w	r2, [r0, #180]	; 0xb4
    b204:	f8b0 10b6 	ldrh.w	r1, [r0, #182]	; 0xb6
    b208:	2400      	movs	r4, #0
    b20a:	1c93      	adds	r3, r2, #2
    b20c:	4299      	cmp	r1, r3
    b20e:	d306      	bcc.n	b21e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    b210:	1a89      	subs	r1, r1, r2
    b212:	1e89      	subs	r1, r1, #2
    b214:	040c      	lsls	r4, r1, #16
    b216:	0c24      	lsrs	r4, r4, #16
    b218:	d001      	beq.n	b21e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    b21a:	1e64      	subs	r4, r4, #1
    b21c:	b2a4      	uxth	r4, r4
    b21e:	f890 10b2 	ldrb.w	r1, [r0, #178]	; 0xb2
    b222:	b139      	cbz	r1, b234 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fb4>
    b224:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b228:	2301      	movs	r3, #1
    b22a:	2109      	movs	r1, #9
    b22c:	3078      	adds	r0, #120	; 0x78
    b22e:	f003 fdcf 	bl	edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b232:	b340      	cbz	r0, b286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2006>
    b234:	f7ff fef8 	bl	b028 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    b238:	b178      	cbz	r0, b25a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    b23a:	686a      	ldr	r2, [r5, #4]
    b23c:	2000      	movs	r0, #0
    b23e:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    b242:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
    b246:	1c93      	adds	r3, r2, #2
    b248:	4299      	cmp	r1, r3
    b24a:	d303      	bcc.n	b254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    b24c:	1a88      	subs	r0, r1, r2
    b24e:	1e80      	subs	r0, r0, #2
    b250:	d000      	beq.n	b254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    b252:	1e40      	subs	r0, r0, #1
    b254:	42a0      	cmp	r0, r4
    b256:	d200      	bcs.n	b25a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    b258:	b284      	uxth	r4, r0
    b25a:	b10c      	cbz	r4, b260 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    b25c:	1e64      	subs	r4, r4, #1
    b25e:	b2a4      	uxth	r4, r4
    b260:	6868      	ldr	r0, [r5, #4]
    b262:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    b266:	4421      	add	r1, r4
    b268:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    b26c:	bd70      	pop	{r4, r5, r6, pc}
    b26e:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    b272:	2903      	cmp	r1, #3
    b274:	d3bd      	bcc.n	b1f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    b276:	f830 1f7c 	ldrh.w	r1, [r0, #124]!
    b27a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    b27c:	4411      	add	r1, r2
    b27e:	1c49      	adds	r1, r1, #1
    b280:	f8a0 114c 	strh.w	r1, [r0, #332]	; 0x14c
    b284:	bd70      	pop	{r4, r5, r6, pc}
    b286:	2400      	movs	r4, #0
    b288:	e7ea      	b.n	b260 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    b28a:	0000      	.short	0x0000
    b28c:	20000174 	.word	0x20000174

0000b290 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    b290:	4903      	ldr	r1, [pc, #12]	; (b2a0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    b292:	884a      	ldrh	r2, [r1, #2]
    b294:	8002      	strh	r2, [r0, #0]
    b296:	7809      	ldrb	r1, [r1, #0]
    b298:	7081      	strb	r1, [r0, #2]
    b29a:	2000      	movs	r0, #0
    b29c:	4770      	bx	lr
    b29e:	0000      	.short	0x0000
    b2a0:	20001044 	.word	0x20001044

0000b2a4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    b2a4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b2a6:	460c      	mov	r4, r1
    b2a8:	4605      	mov	r5, r0
    b2aa:	8800      	ldrh	r0, [r0, #0]
    b2ac:	4669      	mov	r1, sp
    b2ae:	f003 fd65 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b2b2:	2200      	movs	r2, #0
    b2b4:	b128      	cbz	r0, b2c2 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    b2b6:	f8c4 2002 	str.w	r2, [r4, #2]
    b2ba:	71a2      	strb	r2, [r4, #6]
    b2bc:	8022      	strh	r2, [r4, #0]
    b2be:	2002      	movs	r0, #2
    b2c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b2c2:	9901      	ldr	r1, [sp, #4]
    b2c4:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    b2c8:	f881 2064 	strb.w	r2, [r1, #100]	; 0x64
    b2cc:	f8d1 0017 	ldr.w	r0, [r1, #23]
    b2d0:	f8c4 0002 	str.w	r0, [r4, #2]
    b2d4:	7ec8      	ldrb	r0, [r1, #27]
    b2d6:	71a0      	strb	r0, [r4, #6]
    b2d8:	8828      	ldrh	r0, [r5, #0]
    b2da:	8020      	strh	r0, [r4, #0]
    b2dc:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    b2e0:	f88d 0008 	strb.w	r0, [sp, #8]
    b2e4:	9802      	ldr	r0, [sp, #8]
    b2e6:	9002      	str	r0, [sp, #8]
    b2e8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b2ec:	2800      	cmp	r0, #0
    b2ee:	d1eb      	bne.n	b2c8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    b2f0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000b2f4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    b2f4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    b2f6:	460d      	mov	r5, r1
    b2f8:	4606      	mov	r6, r0
    b2fa:	8800      	ldrh	r0, [r0, #0]
    b2fc:	4669      	mov	r1, sp
    b2fe:	f003 fd3d 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b302:	2800      	cmp	r0, #0
    b304:	d11a      	bne.n	b33c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    b306:	f8dd 4004 	ldr.w	r4, [sp, #4]
    b30a:	2700      	movs	r7, #0
    b30c:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    b310:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
    b314:	f005 fed7 	bl	110c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    b318:	70a8      	strb	r0, [r5, #2]
    b31a:	7860      	ldrb	r0, [r4, #1]
    b31c:	f005 fed3 	bl	110c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    b320:	70e8      	strb	r0, [r5, #3]
    b322:	78a0      	ldrb	r0, [r4, #2]
    b324:	f88d 0008 	strb.w	r0, [sp, #8]
    b328:	9802      	ldr	r0, [sp, #8]
    b32a:	9002      	str	r0, [sp, #8]
    b32c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b330:	3c6e      	subs	r4, #110	; 0x6e
    b332:	2800      	cmp	r0, #0
    b334:	d1ea      	bne.n	b30c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    b336:	8830      	ldrh	r0, [r6, #0]
    b338:	8028      	strh	r0, [r5, #0]
    b33a:	2000      	movs	r0, #0
    b33c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000b340 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    b340:	4903      	ldr	r1, [pc, #12]	; (b350 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    b342:	888a      	ldrh	r2, [r1, #4]
    b344:	8002      	strh	r2, [r0, #0]
    b346:	88c9      	ldrh	r1, [r1, #6]
    b348:	8041      	strh	r1, [r0, #2]
    b34a:	2000      	movs	r0, #0
    b34c:	4770      	bx	lr
    b34e:	0000      	.short	0x0000
    b350:	200002b4 	.word	0x200002b4

0000b354 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    b354:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b356:	2400      	movs	r4, #0
    b358:	a902      	add	r1, sp, #8
    b35a:	f88d 4004 	strb.w	r4, [sp, #4]
    b35e:	f88d 4008 	strb.w	r4, [sp, #8]
    b362:	9100      	str	r1, [sp, #0]
    b364:	7882      	ldrb	r2, [r0, #2]
    b366:	7841      	ldrb	r1, [r0, #1]
    b368:	7800      	ldrb	r0, [r0, #0]
    b36a:	ab01      	add	r3, sp, #4
    b36c:	f006 f836 	bl	113dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
    b370:	2800      	cmp	r0, #0
    b372:	d112      	bne.n	b39a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    b374:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b378:	f005 ff71 	bl	1125e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    b37c:	b170      	cbz	r0, b39c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    b37e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b382:	f005 ff6c 	bl	1125e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    b386:	b148      	cbz	r0, b39c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    b388:	4805      	ldr	r0, [pc, #20]	; (b3a0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    b38a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b38e:	7381      	strb	r1, [r0, #14]
    b390:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b394:	73c1      	strb	r1, [r0, #15]
    b396:	8204      	strh	r4, [r0, #16]
    b398:	2000      	movs	r0, #0
    b39a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b39c:	2011      	movs	r0, #17
    b39e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b3a0:	20001044 	.word	0x20001044

0000b3a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    b3a4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    b3a8:	460f      	mov	r7, r1
    b3aa:	4605      	mov	r5, r0
    b3ac:	7806      	ldrb	r6, [r0, #0]
    b3ae:	f005 ff09 	bl	111c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x12c>
    b3b2:	2800      	cmp	r0, #0
    b3b4:	d10a      	bne.n	b3cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b3b6:	4628      	mov	r0, r5
    b3b8:	f005 fede 	bl	11178 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
    b3bc:	2800      	cmp	r0, #0
    b3be:	d105      	bne.n	b3cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b3c0:	2001      	movs	r0, #1
    b3c2:	f7fa faad 	bl	5920 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    b3c6:	4286      	cmp	r6, r0
    b3c8:	d302      	bcc.n	b3d0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    b3ca:	2007      	movs	r0, #7
    b3cc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    b3d0:	2101      	movs	r1, #1
    b3d2:	4630      	mov	r0, r6
    b3d4:	f003 fa44 	bl	e860 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b3d8:	0004      	movs	r4, r0
    b3da:	d004      	beq.n	b3e6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    b3dc:	f004 fd86 	bl	feec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b3e0:	b170      	cbz	r0, b400 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5c>
    b3e2:	200c      	movs	r0, #12
    b3e4:	e7f2      	b.n	b3cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b3e6:	2200      	movs	r2, #0
    b3e8:	2101      	movs	r1, #1
    b3ea:	4630      	mov	r0, r6
    b3ec:	f003 fa2e 	bl	e84c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    b3f0:	0004      	movs	r4, r0
    b3f2:	d013      	beq.n	b41c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x78>
    b3f4:	4817      	ldr	r0, [pc, #92]	; (b454 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xb0>)
    b3f6:	f990 1000 	ldrsb.w	r1, [r0]
    b3fa:	4620      	mov	r0, r4
    b3fc:	f004 fb12 	bl	fa24 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    b400:	4620      	mov	r0, r4
    b402:	f004 fbbb 	bl	fb7c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    b406:	7038      	strb	r0, [r7, #0]
    b408:	74e8      	strb	r0, [r5, #19]
    b40a:	4629      	mov	r1, r5
    b40c:	4620      	mov	r0, r4
    b40e:	f7fc fb89 	bl	7b24 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    b412:	4606      	mov	r6, r0
    b414:	7e68      	ldrb	r0, [r5, #25]
    b416:	b1d0      	cbz	r0, b44e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    b418:	b12e      	cbz	r6, b426 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x82>
    b41a:	e018      	b.n	b44e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    b41c:	f241 215a 	movw	r1, #4698	; 0x125a
    b420:	2039      	movs	r0, #57	; 0x39
    b422:	f7fa f887 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b426:	2200      	movs	r2, #0
    b428:	4668      	mov	r0, sp
    b42a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    b42c:	f003 fadc 	bl	e9e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    b430:	2200      	movs	r2, #0
    b432:	2101      	movs	r1, #1
    b434:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b436:	f003 fb4d 	bl	ead4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    b43a:	2204      	movs	r2, #4
    b43c:	4668      	mov	r0, sp
    b43e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    b440:	f003 fad2 	bl	e9e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    b444:	2200      	movs	r2, #0
    b446:	4611      	mov	r1, r2
    b448:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b44a:	f003 fb43 	bl	ead4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    b44e:	4630      	mov	r0, r6
    b450:	e7bc      	b.n	b3cc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b452:	0000      	.short	0x0000
    b454:	200002ac 	.word	0x200002ac

0000b458 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    b458:	7801      	ldrb	r1, [r0, #0]
    b45a:	b171      	cbz	r1, b47a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b45c:	7841      	ldrb	r1, [r0, #1]
    b45e:	b161      	cbz	r1, b47a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b460:	8841      	ldrh	r1, [r0, #2]
    b462:	291b      	cmp	r1, #27
    b464:	d309      	bcc.n	b47a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b466:	8881      	ldrh	r1, [r0, #4]
    b468:	291b      	cmp	r1, #27
    b46a:	d306      	bcc.n	b47a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b46c:	4904      	ldr	r1, [pc, #16]	; (b480 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    b46e:	6802      	ldr	r2, [r0, #0]
    b470:	600a      	str	r2, [r1, #0]
    b472:	8880      	ldrh	r0, [r0, #4]
    b474:	8088      	strh	r0, [r1, #4]
    b476:	2000      	movs	r0, #0
    b478:	4770      	bx	lr
    b47a:	2012      	movs	r0, #18
    b47c:	4770      	bx	lr
    b47e:	0000      	.short	0x0000
    b480:	20001044 	.word	0x20001044

0000b484 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    b484:	6800      	ldr	r0, [r0, #0]
    b486:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b48a:	4288      	cmp	r0, r1
    b48c:	d303      	bcc.n	b496 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    b48e:	4903      	ldr	r1, [pc, #12]	; (b49c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    b490:	6088      	str	r0, [r1, #8]
    b492:	2000      	movs	r0, #0
    b494:	4770      	bx	lr
    b496:	2012      	movs	r0, #18
    b498:	4770      	bx	lr
    b49a:	0000      	.short	0x0000
    b49c:	20001044 	.word	0x20001044

0000b4a0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    b4a0:	4a03      	ldr	r2, [pc, #12]	; (b4b0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    b4a2:	e9d2 1200 	ldrd	r1, r2, [r2]
    b4a6:	6001      	str	r1, [r0, #0]
    b4a8:	6042      	str	r2, [r0, #4]
    b4aa:	2000      	movs	r0, #0
    b4ac:	4770      	bx	lr
    b4ae:	0000      	.short	0x0000
    b4b0:	0000b90c 	.word	0x0000b90c

0000b4b4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    b4b4:	b510      	push	{r4, lr}
    b4b6:	2005      	movs	r0, #5
    b4b8:	f000 faa2 	bl	ba00 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    b4bc:	f7fd fe38 	bl	9130 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    b4c0:	4902      	ldr	r1, [pc, #8]	; (b4cc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    b4c2:	4801      	ldr	r0, [pc, #4]	; (b4c8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    b4c4:	6048      	str	r0, [r1, #4]
    b4c6:	bd10      	pop	{r4, pc}
    b4c8:	0000b4d1 	.word	0x0000b4d1
    b4cc:	200002ac 	.word	0x200002ac
    b4d0:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    b4d4:	4613      	mov	r3, r2
    b4d6:	4a33      	ldr	r2, [pc, #204]	; (b5a4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf0>)
    b4d8:	460f      	mov	r7, r1
    b4da:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
    b4de:	8814      	ldrh	r4, [r2, #0]
    b4e0:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
    b4e4:	428c      	cmp	r4, r1
    b4e6:	d200      	bcs.n	b4ea <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    b4e8:	4621      	mov	r1, r4
    b4ea:	4688      	mov	r8, r1
    b4ec:	8891      	ldrh	r1, [r2, #4]
    b4ee:	42b1      	cmp	r1, r6
    b4f0:	d200      	bcs.n	b4f4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x40>
    b4f2:	460e      	mov	r6, r1
    b4f4:	8851      	ldrh	r1, [r2, #2]
    b4f6:	f640 0448 	movw	r4, #2120	; 0x848
    b4fa:	42a1      	cmp	r1, r4
    b4fc:	d300      	bcc.n	b500 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x4c>
    b4fe:	4621      	mov	r1, r4
    b500:	88d5      	ldrh	r5, [r2, #6]
    b502:	42a5      	cmp	r5, r4
    b504:	d300      	bcc.n	b508 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x54>
    b506:	4625      	mov	r5, r4
    b508:	42a1      	cmp	r1, r4
    b50a:	d200      	bcs.n	b50e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x5a>
    b50c:	460c      	mov	r4, r1
    b50e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    b512:	2e1b      	cmp	r6, #27
    b514:	d001      	beq.n	b51a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x66>
    b516:	4295      	cmp	r5, r2
    b518:	d104      	bne.n	b524 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x70>
    b51a:	f1b8 0f1b 	cmp.w	r8, #27
    b51e:	d03e      	beq.n	b59e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    b520:	4294      	cmp	r4, r2
    b522:	d03c      	beq.n	b59e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    b524:	466a      	mov	r2, sp
    b526:	4619      	mov	r1, r3
    b528:	f005 febc 	bl	112a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    b52c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    b530:	4641      	mov	r1, r8
    b532:	4540      	cmp	r0, r8
    b534:	d900      	bls.n	b538 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>
    b536:	4608      	mov	r0, r1
    b538:	80f8      	strh	r0, [r7, #6]
    b53a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    b53e:	42a1      	cmp	r1, r4
    b540:	d800      	bhi.n	b544 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x90>
    b542:	460c      	mov	r4, r1
    b544:	813c      	strh	r4, [r7, #8]
    b546:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    b54a:	42b1      	cmp	r1, r6
    b54c:	d800      	bhi.n	b550 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    b54e:	460e      	mov	r6, r1
    b550:	807e      	strh	r6, [r7, #2]
    b552:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b556:	42a9      	cmp	r1, r5
    b558:	d800      	bhi.n	b55c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xa8>
    b55a:	460d      	mov	r5, r1
    b55c:	80bd      	strh	r5, [r7, #4]
    b55e:	21ff      	movs	r1, #255	; 0xff
    b560:	7039      	strb	r1, [r7, #0]
    b562:	381b      	subs	r0, #27
    b564:	28e0      	cmp	r0, #224	; 0xe0
    b566:	d902      	bls.n	b56e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xba>
    b568:	f640 41b8 	movw	r1, #3256	; 0xcb8
    b56c:	e014      	b.n	b598 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    b56e:	3e1b      	subs	r6, #27
    b570:	2ee0      	cmp	r6, #224	; 0xe0
    b572:	d902      	bls.n	b57a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc6>
    b574:	f640 41ba 	movw	r1, #3258	; 0xcba
    b578:	e00e      	b.n	b598 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    b57a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    b57e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    b582:	4284      	cmp	r4, r0
    b584:	d902      	bls.n	b58c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd8>
    b586:	f640 41bc 	movw	r1, #3260	; 0xcbc
    b58a:	e005      	b.n	b598 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    b58c:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    b590:	4285      	cmp	r5, r0
    b592:	d904      	bls.n	b59e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    b594:	f640 41be 	movw	r1, #3262	; 0xcbe
    b598:	2039      	movs	r0, #57	; 0x39
    b59a:	f7f9 ffcb 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b59e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    b5a2:	0000      	.short	0x0000
    b5a4:	200002b4 	.word	0x200002b4
    b5a8:	b510      	push	{r4, lr}
    b5aa:	480e      	ldr	r0, [pc, #56]	; (b5e4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x130>)
    b5ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b5b0:	4b0d      	ldr	r3, [pc, #52]	; (b5e8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x134>)
    b5b2:	8281      	strh	r1, [r0, #20]
    b5b4:	2100      	movs	r1, #0
    b5b6:	7581      	strb	r1, [r0, #22]
    b5b8:	8301      	strh	r1, [r0, #24]
    b5ba:	221b      	movs	r2, #27
    b5bc:	801a      	strh	r2, [r3, #0]
    b5be:	f44f 74a4 	mov.w	r4, #328	; 0x148
    b5c2:	805c      	strh	r4, [r3, #2]
    b5c4:	809a      	strh	r2, [r3, #4]
    b5c6:	80dc      	strh	r4, [r3, #6]
    b5c8:	7381      	strb	r1, [r0, #14]
    b5ca:	73c1      	strb	r1, [r0, #15]
    b5cc:	2303      	movs	r3, #3
    b5ce:	7003      	strb	r3, [r0, #0]
    b5d0:	2302      	movs	r3, #2
    b5d2:	7043      	strb	r3, [r0, #1]
    b5d4:	8042      	strh	r2, [r0, #2]
    b5d6:	8082      	strh	r2, [r0, #4]
    b5d8:	f640 62a6 	movw	r2, #3750	; 0xea6
    b5dc:	6082      	str	r2, [r0, #8]
    b5de:	7481      	strb	r1, [r0, #18]
    b5e0:	7301      	strb	r1, [r0, #12]
    b5e2:	bd10      	pop	{r4, pc}
    b5e4:	20001044 	.word	0x20001044
    b5e8:	200002b4 	.word	0x200002b4
    b5ec:	b510      	push	{r4, lr}
    b5ee:	2101      	movs	r1, #1
    b5f0:	2000      	movs	r0, #0
    b5f2:	f003 f935 	bl	e860 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b5f6:	0004      	movs	r4, r0
    b5f8:	d10c      	bne.n	b614 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    b5fa:	2200      	movs	r2, #0
    b5fc:	2101      	movs	r1, #1
    b5fe:	4610      	mov	r0, r2
    b600:	f003 f924 	bl	e84c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    b604:	0004      	movs	r4, r0
    b606:	d007      	beq.n	b618 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x164>
    b608:	4806      	ldr	r0, [pc, #24]	; (b624 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x170>)
    b60a:	f990 1000 	ldrsb.w	r1, [r0]
    b60e:	4620      	mov	r0, r4
    b610:	f004 fa08 	bl	fa24 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    b614:	4620      	mov	r0, r4
    b616:	bd10      	pop	{r4, pc}
    b618:	f240 2135 	movw	r1, #565	; 0x235
    b61c:	2039      	movs	r0, #57	; 0x39
    b61e:	f7f9 ff89 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b622:	0000      	.short	0x0000
    b624:	200002ac 	.word	0x200002ac

0000b628 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b62c:	b088      	sub	sp, #32
    b62e:	460c      	mov	r4, r1
    b630:	4606      	mov	r6, r0
    b632:	f004 faa6 	bl	fb82 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    b636:	b198      	cbz	r0, b660 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    b638:	4630      	mov	r0, r6
    b63a:	f004 fa95 	bl	fb68 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    b63e:	b130      	cbz	r0, b64e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    b640:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    b644:	2012      	movs	r0, #18
    b646:	2900      	cmp	r1, #0
    b648:	d00b      	beq.n	b662 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b64a:	2980      	cmp	r1, #128	; 0x80
    b64c:	d809      	bhi.n	b662 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b64e:	4630      	mov	r0, r6
    b650:	f004 fa79 	bl	fb46 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    b654:	b140      	cbz	r0, b668 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b656:	4630      	mov	r0, r6
    b658:	f004 f9ae 	bl	f9b8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    b65c:	b130      	cbz	r0, b66c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    b65e:	e009      	b.n	b674 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    b660:	2042      	movs	r0, #66	; 0x42
    b662:	b008      	add	sp, #32
    b664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b668:	200c      	movs	r0, #12
    b66a:	e7fa      	b.n	b662 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b66c:	4630      	mov	r0, r6
    b66e:	f004 fa75 	bl	fb5c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    b672:	b3c0      	cbz	r0, b6e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    b674:	4630      	mov	r0, r6
    b676:	f004 fc39 	bl	feec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b67a:	2800      	cmp	r0, #0
    b67c:	d1f4      	bne.n	b668 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b67e:	4630      	mov	r0, r6
    b680:	f004 f9b5 	bl	f9ee <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    b684:	2800      	cmp	r0, #0
    b686:	d1ef      	bne.n	b668 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b688:	4630      	mov	r0, r6
    b68a:	f7fc f9e9 	bl	7a60 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    b68e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    b692:	f242 7110 	movw	r1, #10000	; 0x2710
    b696:	fb00 f801 	mul.w	r8, r0, r1
    b69a:	78e1      	ldrb	r1, [r4, #3]
    b69c:	4630      	mov	r0, r6
    b69e:	f004 fa49 	bl	fb34 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    b6a2:	4630      	mov	r0, r6
    b6a4:	f004 fa5c 	bl	fb60 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    b6a8:	b300      	cbz	r0, b6ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    b6aa:	2200      	movs	r2, #0
    b6ac:	4611      	mov	r1, r2
    b6ae:	a801      	add	r0, sp, #4
    b6b0:	f7fa f9aa 	bl	5a08 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b6b4:	0004      	movs	r4, r0
    b6b6:	d06d      	beq.n	b794 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    b6b8:	2100      	movs	r1, #0
    b6ba:	f7fb fd6d 	bl	7198 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    b6be:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b6c2:	8020      	strh	r0, [r4, #0]
    b6c4:	4621      	mov	r1, r4
    b6c6:	4630      	mov	r0, r6
    b6c8:	f004 fa6e 	bl	fba8 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    b6cc:	f000 f9a4 	bl	ba18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b6d0:	0940      	lsrs	r0, r0, #5
    b6d2:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    b6d6:	07c0      	lsls	r0, r0, #31
    b6d8:	4d3a      	ldr	r5, [pc, #232]	; (b7c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>)
    b6da:	f104 0030 	add.w	r0, r4, #48	; 0x30
    b6de:	d00f      	beq.n	b700 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd8>
    b6e0:	8869      	ldrh	r1, [r5, #2]
    b6e2:	88aa      	ldrh	r2, [r5, #4]
    b6e4:	e00e      	b.n	b704 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    b6e6:	e7ff      	b.n	b6e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    b6e8:	2012      	movs	r0, #18
    b6ea:	e7ba      	b.n	b662 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b6ec:	4642      	mov	r2, r8
    b6ee:	2100      	movs	r1, #0
    b6f0:	4630      	mov	r0, r6
    b6f2:	f7fd f8b1 	bl	8858 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b6f6:	2800      	cmp	r0, #0
    b6f8:	d0b3      	beq.n	b662 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b6fa:	f241 417b 	movw	r1, #5243	; 0x147b
    b6fe:	e053      	b.n	b7a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b700:	211b      	movs	r1, #27
    b702:	460a      	mov	r2, r1
    b704:	84c1      	strh	r1, [r0, #38]	; 0x26
    b706:	8502      	strh	r2, [r0, #40]	; 0x28
    b708:	68a8      	ldr	r0, [r5, #8]
    b70a:	6320      	str	r0, [r4, #48]	; 0x30
    b70c:	f641 574c 	movw	r7, #7500	; 0x1d4c
    b710:	4630      	mov	r0, r6
    b712:	f004 fa2d 	bl	fb70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b716:	b910      	cbnz	r0, b71e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf6>
    b718:	4630      	mov	r0, r6
    b71a:	f004 fa43 	bl	fba4 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    b71e:	6127      	str	r7, [r4, #16]
    b720:	8821      	ldrh	r1, [r4, #0]
    b722:	f8ad 1008 	strh.w	r1, [sp, #8]
    b726:	7ba9      	ldrb	r1, [r5, #14]
    b728:	f88d 100a 	strb.w	r1, [sp, #10]
    b72c:	7be9      	ldrb	r1, [r5, #15]
    b72e:	f88d 100b 	strb.w	r1, [sp, #11]
    b732:	8a29      	ldrh	r1, [r5, #16]
    b734:	f8ad 100c 	strh.w	r1, [sp, #12]
    b738:	a905      	add	r1, sp, #20
    b73a:	9100      	str	r1, [sp, #0]
    b73c:	2001      	movs	r0, #1
    b73e:	ab04      	add	r3, sp, #16
    b740:	aa02      	add	r2, sp, #8
    b742:	4621      	mov	r1, r4
    b744:	f005 fde4 	bl	11310 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
    b748:	b140      	cbz	r0, b75c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x134>
    b74a:	2100      	movs	r1, #0
    b74c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b750:	f7fa f984 	bl	5a5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b754:	b1f0      	cbz	r0, b794 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    b756:	f241 41cb 	movw	r1, #5323	; 0x14cb
    b75a:	e025      	b.n	b7a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b75c:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b760:	f88d 0018 	strb.w	r0, [sp, #24]
    b764:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b768:	f88d 0019 	strb.w	r0, [sp, #25]
    b76c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b770:	f8ad 001a 	strh.w	r0, [sp, #26]
    b774:	a906      	add	r1, sp, #24
    b776:	4620      	mov	r0, r4
    b778:	f003 fbc0 	bl	eefc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b77c:	7868      	ldrb	r0, [r5, #1]
    b77e:	9000      	str	r0, [sp, #0]
    b780:	782b      	ldrb	r3, [r5, #0]
    b782:	88aa      	ldrh	r2, [r5, #4]
    b784:	8869      	ldrh	r1, [r5, #2]
    b786:	8820      	ldrh	r0, [r4, #0]
    b788:	f7fa fa34 	bl	5bf4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b78c:	b120      	cbz	r0, b798 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x170>
    b78e:	f241 41d6 	movw	r1, #5334	; 0x14d6
    b792:	e009      	b.n	b7a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b794:	2009      	movs	r0, #9
    b796:	e764      	b.n	b662 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b798:	4642      	mov	r2, r8
    b79a:	4621      	mov	r1, r4
    b79c:	4630      	mov	r0, r6
    b79e:	f7fd f85b 	bl	8858 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b7a2:	b120      	cbz	r0, b7ae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    b7a4:	f241 41d8 	movw	r1, #5336	; 0x14d8
    b7a8:	2039      	movs	r0, #57	; 0x39
    b7aa:	f7f9 fec3 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7ae:	4806      	ldr	r0, [pc, #24]	; (b7c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a0>)
    b7b0:	6843      	ldr	r3, [r0, #4]
    b7b2:	b123      	cbz	r3, b7be <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x196>
    b7b4:	2200      	movs	r2, #0
    b7b6:	f504 718d 	add.w	r1, r4, #282	; 0x11a
    b7ba:	4620      	mov	r0, r4
    b7bc:	4798      	blx	r3
    b7be:	2000      	movs	r0, #0
    b7c0:	e74f      	b.n	b662 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b7c2:	0000      	.short	0x0000
    b7c4:	20001044 	.word	0x20001044
    b7c8:	200002ac 	.word	0x200002ac
    b7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7d0:	b088      	sub	sp, #32
    b7d2:	4604      	mov	r4, r0
    b7d4:	8800      	ldrh	r0, [r0, #0]
    b7d6:	a906      	add	r1, sp, #24
    b7d8:	f003 fad0 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b7dc:	2800      	cmp	r0, #0
    b7de:	d147      	bne.n	b870 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b7e0:	9807      	ldr	r0, [sp, #28]
    b7e2:	f890 1162 	ldrb.w	r1, [r0, #354]	; 0x162
    b7e6:	f88d 1008 	strb.w	r1, [sp, #8]
    b7ea:	9902      	ldr	r1, [sp, #8]
    b7ec:	9102      	str	r1, [sp, #8]
    b7ee:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b7f2:	3078      	adds	r0, #120	; 0x78
    b7f4:	b101      	cbz	r1, b7f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    b7f6:	2101      	movs	r1, #1
    b7f8:	f88d 100c 	strb.w	r1, [sp, #12]
    b7fc:	7bc1      	ldrb	r1, [r0, #15]
    b7fe:	f04f 0800 	mov.w	r8, #0
    b802:	0689      	lsls	r1, r1, #26
    b804:	d502      	bpl.n	b80c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e4>
    b806:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b80a:	b149      	cbz	r1, b820 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    b80c:	f05f 0100 	movs.w	r1, #0
    b810:	f88d 1004 	strb.w	r1, [sp, #4]
    b814:	2105      	movs	r1, #5
    b816:	305c      	adds	r0, #92	; 0x5c
    b818:	f004 ffb9 	bl	1078e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
    b81c:	b110      	cbz	r0, b824 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>
    b81e:	e004      	b.n	b82a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x202>
    b820:	2101      	movs	r1, #1
    b822:	e7f5      	b.n	b810 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e8>
    b824:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b828:	b308      	cbz	r0, b86e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    b82a:	8921      	ldrh	r1, [r4, #8]
    b82c:	88e0      	ldrh	r0, [r4, #6]
    b82e:	f005 fd2b 	bl	11288 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b832:	2800      	cmp	r0, #0
    b834:	d11c      	bne.n	b870 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b836:	88a1      	ldrh	r1, [r4, #4]
    b838:	8860      	ldrh	r0, [r4, #2]
    b83a:	f005 fd25 	bl	11288 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b83e:	2800      	cmp	r0, #0
    b840:	d116      	bne.n	b870 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b842:	8921      	ldrh	r1, [r4, #8]
    b844:	88e0      	ldrh	r0, [r4, #6]
    b846:	f005 fd15 	bl	11274 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    b84a:	2800      	cmp	r0, #0
    b84c:	d110      	bne.n	b870 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b84e:	88a1      	ldrh	r1, [r4, #4]
    b850:	8860      	ldrh	r0, [r4, #2]
    b852:	f005 fd0f 	bl	11274 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    b856:	0006      	movs	r6, r0
    b858:	d10a      	bne.n	b870 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b85a:	9807      	ldr	r0, [sp, #28]
    b85c:	f500 758d 	add.w	r5, r0, #282	; 0x11a
    b860:	27ff      	movs	r7, #255	; 0xff
    b862:	706f      	strb	r7, [r5, #1]
    b864:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b868:	b129      	cbz	r1, b876 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24e>
    b86a:	263a      	movs	r6, #58	; 0x3a
    b86c:	e02e      	b.n	b8cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    b86e:	201a      	movs	r0, #26
    b870:	b008      	add	sp, #32
    b872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b876:	4641      	mov	r1, r8
    b878:	aa03      	add	r2, sp, #12
    b87a:	f005 fd13 	bl	112a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    b87e:	8861      	ldrh	r1, [r4, #2]
    b880:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    b884:	4281      	cmp	r1, r0
    b886:	d200      	bcs.n	b88a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    b888:	4608      	mov	r0, r1
    b88a:	80e8      	strh	r0, [r5, #6]
    b88c:	88a1      	ldrh	r1, [r4, #4]
    b88e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    b892:	4281      	cmp	r1, r0
    b894:	d200      	bcs.n	b898 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x270>
    b896:	4608      	mov	r0, r1
    b898:	8128      	strh	r0, [r5, #8]
    b89a:	88e2      	ldrh	r2, [r4, #6]
    b89c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b8a0:	428a      	cmp	r2, r1
    b8a2:	d200      	bcs.n	b8a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    b8a4:	4611      	mov	r1, r2
    b8a6:	8069      	strh	r1, [r5, #2]
    b8a8:	8922      	ldrh	r2, [r4, #8]
    b8aa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    b8ae:	428a      	cmp	r2, r1
    b8b0:	d200      	bcs.n	b8b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    b8b2:	4611      	mov	r1, r2
    b8b4:	f640 0248 	movw	r2, #2120	; 0x848
    b8b8:	80a9      	strh	r1, [r5, #4]
    b8ba:	4291      	cmp	r1, r2
    b8bc:	d300      	bcc.n	b8c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    b8be:	4611      	mov	r1, r2
    b8c0:	80a9      	strh	r1, [r5, #4]
    b8c2:	4290      	cmp	r0, r2
    b8c4:	d200      	bcs.n	b8c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a0>
    b8c6:	4602      	mov	r2, r0
    b8c8:	812a      	strh	r2, [r5, #8]
    b8ca:	702f      	strb	r7, [r5, #0]
    b8cc:	f885 8001 	strb.w	r8, [r5, #1]
    b8d0:	4630      	mov	r0, r6
    b8d2:	e7cd      	b.n	b870 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b8d4:	b510      	push	{r4, lr}
    b8d6:	4604      	mov	r4, r0
    b8d8:	88c1      	ldrh	r1, [r0, #6]
    b8da:	8880      	ldrh	r0, [r0, #4]
    b8dc:	f005 fcd4 	bl	11288 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b8e0:	2800      	cmp	r0, #0
    b8e2:	d10f      	bne.n	b904 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    b8e4:	8861      	ldrh	r1, [r4, #2]
    b8e6:	8820      	ldrh	r0, [r4, #0]
    b8e8:	f005 fcce 	bl	11288 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b8ec:	2800      	cmp	r0, #0
    b8ee:	d109      	bne.n	b904 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    b8f0:	4805      	ldr	r0, [pc, #20]	; (b908 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2e0>)
    b8f2:	88a1      	ldrh	r1, [r4, #4]
    b8f4:	8081      	strh	r1, [r0, #4]
    b8f6:	8821      	ldrh	r1, [r4, #0]
    b8f8:	8001      	strh	r1, [r0, #0]
    b8fa:	88e1      	ldrh	r1, [r4, #6]
    b8fc:	80c1      	strh	r1, [r0, #6]
    b8fe:	8861      	ldrh	r1, [r4, #2]
    b900:	8041      	strh	r1, [r0, #2]
    b902:	2000      	movs	r0, #0
    b904:	bd10      	pop	{r4, pc}
    b906:	0000      	.short	0x0000
    b908:	200002b4 	.word	0x200002b4
    b90c:	0c11d80c 	.word	0x0c11d80c
    b910:	11d80059 	.word	0x11d80059

0000b914 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b914:	b510      	push	{r4, lr}
    b916:	f7fb ff01 	bl	771c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b91a:	4805      	ldr	r0, [pc, #20]	; (b930 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    b91c:	6840      	ldr	r0, [r0, #4]
    b91e:	f005 fdd5 	bl	114cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x434>
    b922:	f005 fb47 	bl	10fb4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b92a:	f7fc b867 	b.w	79fc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    b92e:	0000      	.short	0x0000
    b930:	200002bc 	.word	0x200002bc

0000b934 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b934:	b510      	push	{r4, lr}
    b936:	4c05      	ldr	r4, [pc, #20]	; (b94c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    b938:	68a0      	ldr	r0, [r4, #8]
    b93a:	f005 fdc7 	bl	114cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x434>
    b93e:	68e0      	ldr	r0, [r4, #12]
    b940:	f005 fdc4 	bl	114cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x434>
    b944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b948:	f005 bb99 	b.w	1107e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b94c:	200002bc 	.word	0x200002bc

0000b950 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    b950:	b510      	push	{r4, lr}
    b952:	4905      	ldr	r1, [pc, #20]	; (b968 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    b954:	4805      	ldr	r0, [pc, #20]	; (b96c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b956:	f005 fdac 	bl	114b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b95a:	4804      	ldr	r0, [pc, #16]	; (b96c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b960:	4903      	ldr	r1, [pc, #12]	; (b970 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b962:	1d00      	adds	r0, r0, #4
    b964:	f005 bda5 	b.w	114b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b968:	200002cc 	.word	0x200002cc
    b96c:	200002c0 	.word	0x200002c0
    b970:	200002d4 	.word	0x200002d4

0000b974 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b974:	b510      	push	{r4, lr}
    b976:	4908      	ldr	r1, [pc, #32]	; (b998 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b978:	4808      	ldr	r0, [pc, #32]	; (b99c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b97a:	f005 fd9a 	bl	114b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b97e:	4807      	ldr	r0, [pc, #28]	; (b99c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b980:	4907      	ldr	r1, [pc, #28]	; (b9a0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b982:	1d00      	adds	r0, r0, #4
    b984:	f005 fd95 	bl	114b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b988:	4804      	ldr	r0, [pc, #16]	; (b99c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b98a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b98e:	4905      	ldr	r1, [pc, #20]	; (b9a4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b990:	3008      	adds	r0, #8
    b992:	f005 bd8e 	b.w	114b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b996:	0000      	.short	0x0000
    b998:	200002e4 	.word	0x200002e4
    b99c:	200002c0 	.word	0x200002c0
    b9a0:	200002ec 	.word	0x200002ec
    b9a4:	200002dc 	.word	0x200002dc

0000b9a8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b9a8:	4801      	ldr	r0, [pc, #4]	; (b9b0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b9aa:	7800      	ldrb	r0, [r0, #0]
    b9ac:	4770      	bx	lr
    b9ae:	0000      	.short	0x0000
    b9b0:	200002bc 	.word	0x200002bc
    b9b4:	b510      	push	{r4, lr}
    b9b6:	f7fc f975 	bl	7ca4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b9ba:	f7fc fff5 	bl	89a8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    b9be:	4803      	ldr	r0, [pc, #12]	; (b9cc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    b9c0:	f7fc f956 	bl	7c70 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b9c8:	f7fb beb4 	b.w	7734 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    b9cc:	200014d7 	.word	0x200014d7
    b9d0:	4909      	ldr	r1, [pc, #36]	; (b9f8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    b9d2:	b510      	push	{r4, lr}
    b9d4:	2001      	movs	r0, #1
    b9d6:	7008      	strb	r0, [r1, #0]
    b9d8:	f7fc f994 	bl	7d04 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    b9dc:	f7fd fbc0 	bl	9160 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    b9e0:	f003 f8fe 	bl	ebe0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b9e4:	4805      	ldr	r0, [pc, #20]	; (b9fc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    b9e6:	f7fa fcb5 	bl	6354 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b9ea:	2000      	movs	r0, #0
    b9ec:	f7f9 ff7c 	bl	58e8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b9f4:	f7fb bea6 	b.w	7744 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    b9f8:	200002bc 	.word	0x200002bc
    b9fc:	200014d7 	.word	0x200014d7

0000ba00 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    ba00:	4a04      	ldr	r2, [pc, #16]	; (ba14 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    ba02:	08c1      	lsrs	r1, r0, #3
    ba04:	f000 0307 	and.w	r3, r0, #7
    ba08:	2001      	movs	r0, #1
    ba0a:	4098      	lsls	r0, r3
    ba0c:	5c53      	ldrb	r3, [r2, r1]
    ba0e:	4303      	orrs	r3, r0
    ba10:	5453      	strb	r3, [r2, r1]
    ba12:	4770      	bx	lr
    ba14:	20000020 	.word	0x20000020

0000ba18 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    ba18:	4901      	ldr	r1, [pc, #4]	; (ba20 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    ba1a:	e9d1 0100 	ldrd	r0, r1, [r1]
    ba1e:	4770      	bx	lr
    ba20:	20000020 	.word	0x20000020

0000ba24 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    ba24:	4806      	ldr	r0, [pc, #24]	; (ba40 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    ba26:	8801      	ldrh	r1, [r0, #0]
    ba28:	7900      	ldrb	r0, [r0, #4]
    ba2a:	0602      	lsls	r2, r0, #24
    ba2c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    ba30:	f000 0001 	and.w	r0, r0, #1
    ba34:	1800      	adds	r0, r0, r0
    ba36:	b2c0      	uxtb	r0, r0
    ba38:	f040 0001 	orr.w	r0, r0, #1
    ba3c:	4770      	bx	lr
    ba3e:	0000      	.short	0x0000
    ba40:	20000020 	.word	0x20000020

0000ba44 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    ba44:	b510      	push	{r4, lr}
    ba46:	f7f9 f9ad 	bl	4da4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    ba4a:	2200      	movs	r2, #0
    ba4c:	4b08      	ldr	r3, [pc, #32]	; (ba70 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    ba4e:	4611      	mov	r1, r2
    ba50:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    ba54:	4284      	cmp	r4, r0
    ba56:	d303      	bcc.n	ba60 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    ba58:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    ba5c:	7882      	ldrb	r2, [r0, #2]
    ba5e:	e003      	b.n	ba68 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    ba60:	1c49      	adds	r1, r1, #1
    ba62:	b2c9      	uxtb	r1, r1
    ba64:	290c      	cmp	r1, #12
    ba66:	d3f3      	bcc.n	ba50 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    ba68:	4802      	ldr	r0, [pc, #8]	; (ba74 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    ba6a:	7002      	strb	r2, [r0, #0]
    ba6c:	bd10      	pop	{r4, pc}
    ba6e:	0000      	.short	0x0000
    ba70:	0001151e 	.word	0x0001151e
    ba74:	2000033c 	.word	0x2000033c

0000ba78 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    ba78:	b570      	push	{r4, r5, r6, lr}
    ba7a:	4605      	mov	r5, r0
    ba7c:	4616      	mov	r6, r2
    ba7e:	460c      	mov	r4, r1
    ba80:	2002      	movs	r0, #2
    ba82:	f000 f9b7 	bl	bdf4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ba86:	4906      	ldr	r1, [pc, #24]	; (baa0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    ba88:	2001      	movs	r0, #1
    ba8a:	1ef6      	subs	r6, r6, #3
    ba8c:	7008      	strb	r0, [r1, #0]
    ba8e:	4805      	ldr	r0, [pc, #20]	; (baa4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    ba90:	6006      	str	r6, [r0, #0]
    ba92:	4804      	ldr	r0, [pc, #16]	; (baa4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    ba94:	3808      	subs	r0, #8
    ba96:	6005      	str	r5, [r0, #0]
    ba98:	1f00      	subs	r0, r0, #4
    ba9a:	6004      	str	r4, [r0, #0]
    ba9c:	bd70      	pop	{r4, r5, r6, pc}
    ba9e:	0000      	.short	0x0000
    baa0:	2000033d 	.word	0x2000033d
    baa4:	4000f510 	.word	0x4000f510

0000baa8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    baa8:	b510      	push	{r4, lr}
    baaa:	4c0c      	ldr	r4, [pc, #48]	; (badc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    baac:	7820      	ldrb	r0, [r4, #0]
    baae:	b180      	cbz	r0, bad2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    bab0:	490b      	ldr	r1, [pc, #44]	; (bae0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    bab2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bab6:	6008      	str	r0, [r1, #0]
    bab8:	f000 f86a 	bl	bb90 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    babc:	2100      	movs	r1, #0
    babe:	b120      	cbz	r0, baca <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    bac0:	2001      	movs	r0, #1
    bac2:	7060      	strb	r0, [r4, #1]
    bac4:	4807      	ldr	r0, [pc, #28]	; (bae4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    bac6:	6800      	ldr	r0, [r0, #0]
    bac8:	e001      	b.n	bace <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    baca:	7061      	strb	r1, [r4, #1]
    bacc:	2010      	movs	r0, #16
    bace:	70a0      	strb	r0, [r4, #2]
    bad0:	7021      	strb	r1, [r4, #0]
    bad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bad6:	2000      	movs	r0, #0
    bad8:	f000 b98c 	b.w	bdf4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    badc:	2000033d 	.word	0x2000033d
    bae0:	4001f508 	.word	0x4001f508
    bae4:	4000f400 	.word	0x4000f400

0000bae8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    bae8:	b510      	push	{r4, lr}
    baea:	2002      	movs	r0, #2
    baec:	f000 f982 	bl	bdf4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    baf0:	4904      	ldr	r1, [pc, #16]	; (bb04 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    baf2:	2001      	movs	r0, #1
    baf4:	7008      	strb	r0, [r1, #0]
    baf6:	f000 f859 	bl	bbac <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    bafa:	4903      	ldr	r1, [pc, #12]	; (bb08 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    bafc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bb00:	6008      	str	r0, [r1, #0]
    bb02:	bd10      	pop	{r4, pc}
    bb04:	2000033d 	.word	0x2000033d
    bb08:	4001f504 	.word	0x4001f504

0000bb0c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    bb0c:	4803      	ldr	r0, [pc, #12]	; (bb1c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    bb0e:	2100      	movs	r1, #0
    bb10:	7001      	strb	r1, [r0, #0]
    bb12:	7041      	strb	r1, [r0, #1]
    bb14:	2110      	movs	r1, #16
    bb16:	7081      	strb	r1, [r0, #2]
    bb18:	4770      	bx	lr
    bb1a:	0000      	.short	0x0000
    bb1c:	2000033d 	.word	0x2000033d

0000bb20 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    bb20:	4807      	ldr	r0, [pc, #28]	; (bb40 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    bb22:	b510      	push	{r4, lr}
    bb24:	7801      	ldrb	r1, [r0, #0]
    bb26:	b141      	cbz	r1, bb3a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    bb28:	f000 f832 	bl	bb90 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    bb2c:	b118      	cbz	r0, bb36 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    bb2e:	4805      	ldr	r0, [pc, #20]	; (bb44 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    bb30:	6800      	ldr	r0, [r0, #0]
    bb32:	b2c0      	uxtb	r0, r0
    bb34:	bd10      	pop	{r4, pc}
    bb36:	2010      	movs	r0, #16
    bb38:	bd10      	pop	{r4, pc}
    bb3a:	7880      	ldrb	r0, [r0, #2]
    bb3c:	bd10      	pop	{r4, pc}
    bb3e:	0000      	.short	0x0000
    bb40:	2000033d 	.word	0x2000033d
    bb44:	4000f400 	.word	0x4000f400

0000bb48 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    bb48:	4808      	ldr	r0, [pc, #32]	; (bb6c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    bb4a:	b510      	push	{r4, lr}
    bb4c:	7801      	ldrb	r1, [r0, #0]
    bb4e:	b159      	cbz	r1, bb68 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    bb50:	4807      	ldr	r0, [pc, #28]	; (bb70 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    bb52:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    bb56:	b128      	cbz	r0, bb64 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    bb58:	f000 f80c 	bl	bb74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    bb5c:	2800      	cmp	r0, #0
    bb5e:	d000      	beq.n	bb62 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    bb60:	2001      	movs	r0, #1
    bb62:	bd10      	pop	{r4, pc}
    bb64:	2002      	movs	r0, #2
    bb66:	bd10      	pop	{r4, pc}
    bb68:	7840      	ldrb	r0, [r0, #1]
    bb6a:	bd10      	pop	{r4, pc}
    bb6c:	2000033d 	.word	0x2000033d
    bb70:	4000f000 	.word	0x4000f000
    bb74:	4805      	ldr	r0, [pc, #20]	; (bb8c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    bb76:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    bb7a:	b111      	cbz	r1, bb82 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    bb7c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    bb80:	b108      	cbz	r0, bb86 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    bb82:	2000      	movs	r0, #0
    bb84:	4770      	bx	lr
    bb86:	2001      	movs	r0, #1
    bb88:	4770      	bx	lr
    bb8a:	0000      	.short	0x0000
    bb8c:	4000f000 	.word	0x4000f000
    bb90:	4805      	ldr	r0, [pc, #20]	; (bba8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    bb92:	b510      	push	{r4, lr}
    bb94:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    bb98:	b120      	cbz	r0, bba4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    bb9a:	f7ff ffeb 	bl	bb74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    bb9e:	b108      	cbz	r0, bba4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    bba0:	2001      	movs	r0, #1
    bba2:	bd10      	pop	{r4, pc}
    bba4:	2000      	movs	r0, #0
    bba6:	bd10      	pop	{r4, pc}
    bba8:	4000f000 	.word	0x4000f000
    bbac:	4804      	ldr	r0, [pc, #16]	; (bbc0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    bbae:	2100      	movs	r1, #0
    bbb0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bbb4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    bbb8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    bbbc:	4770      	bx	lr
    bbbe:	0000      	.short	0x0000
    bbc0:	4000f000 	.word	0x4000f000

0000bbc4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    bbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbc8:	4604      	mov	r4, r0
    bbca:	461e      	mov	r6, r3
    bbcc:	4690      	mov	r8, r2
    bbce:	460f      	mov	r7, r1
    bbd0:	2001      	movs	r0, #1
    bbd2:	f000 f90f 	bl	bdf4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    bbd6:	4d1e      	ldr	r5, [pc, #120]	; (bc50 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    bbd8:	481e      	ldr	r0, [pc, #120]	; (bc54 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    bbda:	f004 0103 	and.w	r1, r4, #3
    bbde:	712e      	strb	r6, [r5, #4]
    bbe0:	6800      	ldr	r0, [r0, #0]
    bbe2:	0432      	lsls	r2, r6, #16
    bbe4:	f361 0007 	bfi	r0, r1, #0, #8
    bbe8:	f366 200f 	bfi	r0, r6, #8, #8
    bbec:	0c00      	lsrs	r0, r0, #16
    bbee:	4e1a      	ldr	r6, [pc, #104]	; (bc58 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    bbf0:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    bbf4:	4308      	orrs	r0, r1
    bbf6:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    bbfa:	4818      	ldr	r0, [pc, #96]	; (bc5c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    bbfc:	6007      	str	r7, [r0, #0]
    bbfe:	f001 fdcb 	bl	d798 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bc02:	b938      	cbnz	r0, bc14 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    bc04:	4815      	ldr	r0, [pc, #84]	; (bc5c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    bc06:	3010      	adds	r0, #16
    bc08:	6801      	ldr	r1, [r0, #0]
    bc0a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    bc0e:	ea41 0108 	orr.w	r1, r1, r8
    bc12:	6001      	str	r1, [r0, #0]
    bc14:	f000 f8e4 	bl	bde0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    bc18:	b10c      	cbz	r4, bc1e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    bc1a:	2c04      	cmp	r4, #4
    bc1c:	d107      	bne.n	bc2e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    bc1e:	4811      	ldr	r0, [pc, #68]	; (bc64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    bc20:	490d      	ldr	r1, [pc, #52]	; (bc58 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    bc22:	4a0f      	ldr	r2, [pc, #60]	; (bc60 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    bc24:	1d09      	adds	r1, r1, #4
    bc26:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    bc2a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    bc2e:	2001      	movs	r0, #1
    bc30:	7068      	strb	r0, [r5, #1]
    bc32:	70ec      	strb	r4, [r5, #3]
    bc34:	b11c      	cbz	r4, bc3e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    bc36:	2c01      	cmp	r4, #1
    bc38:	d001      	beq.n	bc3e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    bc3a:	2c02      	cmp	r4, #2
    bc3c:	d106      	bne.n	bc4c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    bc3e:	7028      	strb	r0, [r5, #0]
    bc40:	2100      	movs	r1, #0
    bc42:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    bc46:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    bc4a:	6030      	str	r0, [r6, #0]
    bc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc50:	20000340 	.word	0x20000340
    bc54:	0000bdf0 	.word	0x0000bdf0
    bc58:	4000f000 	.word	0x4000f000
    bc5c:	4000f508 	.word	0x4000f508
    bc60:	4000f100 	.word	0x4000f100
    bc64:	4001f088 	.word	0x4001f088

0000bc68 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    bc68:	b570      	push	{r4, r5, r6, lr}
    bc6a:	4a1c      	ldr	r2, [pc, #112]	; (bcdc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    bc6c:	7853      	ldrb	r3, [r2, #1]
    bc6e:	b1a3      	cbz	r3, bc9a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    bc70:	4b1b      	ldr	r3, [pc, #108]	; (bce0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    bc72:	6019      	str	r1, [r3, #0]
    bc74:	1d19      	adds	r1, r3, #4
    bc76:	6008      	str	r0, [r1, #0]
    bc78:	2501      	movs	r5, #1
    bc7a:	7095      	strb	r5, [r2, #2]
    bc7c:	4610      	mov	r0, r2
    bc7e:	78d6      	ldrb	r6, [r2, #3]
    bc80:	4b18      	ldr	r3, [pc, #96]	; (bce4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    bc82:	7800      	ldrb	r0, [r0, #0]
    bc84:	4c18      	ldr	r4, [pc, #96]	; (bce8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    bc86:	2100      	movs	r1, #0
    bc88:	b156      	cbz	r6, bca0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    bc8a:	2e04      	cmp	r6, #4
    bc8c:	d01b      	beq.n	bcc6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    bc8e:	b308      	cbz	r0, bcd4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    bc90:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bc94:	0668      	lsls	r0, r5, #25
    bc96:	6018      	str	r0, [r3, #0]
    bc98:	bd70      	pop	{r4, r5, r6, pc}
    bc9a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    bc9e:	e01a      	b.n	bcd6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    bca0:	b178      	cbz	r0, bcc2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    bca2:	4620      	mov	r0, r4
    bca4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bca8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    bcac:	601e      	str	r6, [r3, #0]
    bcae:	1271      	asrs	r1, r6, #9
    bcb0:	f005 fc6a 	bl	11588 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bcb4:	2800      	cmp	r0, #0
    bcb6:	d0ef      	beq.n	bc98 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    bcb8:	6065      	str	r5, [r4, #4]
    bcba:	480a      	ldr	r0, [pc, #40]	; (bce4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    bcbc:	1d00      	adds	r0, r0, #4
    bcbe:	6006      	str	r6, [r0, #0]
    bcc0:	bd70      	pop	{r4, r5, r6, pc}
    bcc2:	21b3      	movs	r1, #179	; 0xb3
    bcc4:	e007      	b.n	bcd6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    bcc6:	7015      	strb	r5, [r2, #0]
    bcc8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bccc:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    bcd0:	6025      	str	r5, [r4, #0]
    bcd2:	bd70      	pop	{r4, r5, r6, pc}
    bcd4:	21c6      	movs	r1, #198	; 0xc6
    bcd6:	203c      	movs	r0, #60	; 0x3c
    bcd8:	f7f9 fc2c 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcdc:	20000340 	.word	0x20000340
    bce0:	4000f50c 	.word	0x4000f50c
    bce4:	4001f504 	.word	0x4001f504
    bce8:	4000f000 	.word	0x4000f000

0000bcec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    bcec:	b570      	push	{r4, r5, r6, lr}
    bcee:	4d05      	ldr	r5, [pc, #20]	; (bd04 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    bcf0:	2400      	movs	r4, #0
    bcf2:	7828      	ldrb	r0, [r5, #0]
    bcf4:	b110      	cbz	r0, bcfc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    bcf6:	f000 f873 	bl	bde0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    bcfa:	702c      	strb	r4, [r5, #0]
    bcfc:	706c      	strb	r4, [r5, #1]
    bcfe:	70ac      	strb	r4, [r5, #2]
    bd00:	bd70      	pop	{r4, r5, r6, pc}
    bd02:	0000      	.short	0x0000
    bd04:	20000340 	.word	0x20000340

0000bd08 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    bd08:	4802      	ldr	r0, [pc, #8]	; (bd14 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    bd0a:	2100      	movs	r1, #0
    bd0c:	7001      	strb	r1, [r0, #0]
    bd0e:	7041      	strb	r1, [r0, #1]
    bd10:	7081      	strb	r1, [r0, #2]
    bd12:	4770      	bx	lr
    bd14:	20000340 	.word	0x20000340

0000bd18 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    bd18:	480b      	ldr	r0, [pc, #44]	; (bd48 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    bd1a:	b510      	push	{r4, lr}
    bd1c:	7800      	ldrb	r0, [r0, #0]
    bd1e:	b158      	cbz	r0, bd38 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    bd20:	f44f 7182 	mov.w	r1, #260	; 0x104
    bd24:	4809      	ldr	r0, [pc, #36]	; (bd4c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    bd26:	f005 fc2f 	bl	11588 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bd2a:	b140      	cbz	r0, bd3e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    bd2c:	4808      	ldr	r0, [pc, #32]	; (bd50 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    bd2e:	6800      	ldr	r0, [r0, #0]
    bd30:	2800      	cmp	r0, #0
    bd32:	d000      	beq.n	bd36 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    bd34:	2001      	movs	r0, #1
    bd36:	bd10      	pop	{r4, pc}
    bd38:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    bd3c:	e001      	b.n	bd42 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    bd3e:	f240 11eb 	movw	r1, #491	; 0x1eb
    bd42:	203c      	movs	r0, #60	; 0x3c
    bd44:	f7f9 fbf6 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd48:	20000340 	.word	0x20000340
    bd4c:	4000f000 	.word	0x4000f000
    bd50:	4000f400 	.word	0x4000f400

0000bd54 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    bd54:	4801      	ldr	r0, [pc, #4]	; (bd5c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    bd56:	2101      	movs	r1, #1
    bd58:	6081      	str	r1, [r0, #8]
    bd5a:	4770      	bx	lr
    bd5c:	4000f000 	.word	0x4000f000

0000bd60 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    bd60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd64:	481b      	ldr	r0, [pc, #108]	; (bdd4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    bd66:	7800      	ldrb	r0, [r0, #0]
    bd68:	b1d8      	cbz	r0, bda2 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    bd6a:	f8df 806c 	ldr.w	r8, [pc, #108]	; bdd8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    bd6e:	f44f 7682 	mov.w	r6, #260	; 0x104
    bd72:	4631      	mov	r1, r6
    bd74:	4640      	mov	r0, r8
    bd76:	f005 fc07 	bl	11588 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bd7a:	2800      	cmp	r0, #0
    bd7c:	d128      	bne.n	bdd0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    bd7e:	2002      	movs	r0, #2
    bd80:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    bd84:	4c15      	ldr	r4, [pc, #84]	; (bddc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    bd86:	6820      	ldr	r0, [r4, #0]
    bd88:	43c0      	mvns	r0, r0
    bd8a:	f340 1500 	sbfx	r5, r0, #4, #1
    bd8e:	6820      	ldr	r0, [r4, #0]
    bd90:	f040 0010 	orr.w	r0, r0, #16
    bd94:	6020      	str	r0, [r4, #0]
    bd96:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    bd9a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    bd9e:	1c6d      	adds	r5, r5, #1
    bda0:	e008      	b.n	bdb4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    bda2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    bda6:	203c      	movs	r0, #60	; 0x3c
    bda8:	f7f9 fbc4 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdac:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    bdb0:	f7f9 fa1a 	bl	51e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bdb4:	4631      	mov	r1, r6
    bdb6:	4640      	mov	r0, r8
    bdb8:	f005 fbe6 	bl	11588 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bdbc:	2800      	cmp	r0, #0
    bdbe:	d0f5      	beq.n	bdac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    bdc0:	b91d      	cbnz	r5, bdca <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    bdc2:	6820      	ldr	r0, [r4, #0]
    bdc4:	f020 0010 	bic.w	r0, r0, #16
    bdc8:	6020      	str	r0, [r4, #0]
    bdca:	2002      	movs	r0, #2
    bdcc:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    bdd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bdd4:	20000340 	.word	0x20000340
    bdd8:	4000f000 	.word	0x4000f000
    bddc:	e000ed10 	.word	0xe000ed10
    bde0:	4902      	ldr	r1, [pc, #8]	; (bdec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    bde2:	4801      	ldr	r0, [pc, #4]	; (bde8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    bde4:	6008      	str	r0, [r1, #0]
    bde6:	4770      	bx	lr
    bde8:	02020000 	.word	0x02020000
    bdec:	4001f508 	.word	0x4001f508
    bdf0:	00010000 	.word	0x00010000

0000bdf4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    bdf4:	b510      	push	{r4, lr}
    bdf6:	4604      	mov	r4, r0
    bdf8:	f000 f820 	bl	be3c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    bdfc:	2c00      	cmp	r4, #0
    bdfe:	d00e      	beq.n	be1e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    be00:	4a0b      	ldr	r2, [pc, #44]	; (be30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    be02:	480b      	ldr	r0, [pc, #44]	; (be30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    be04:	490b      	ldr	r1, [pc, #44]	; (be34 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    be06:	3214      	adds	r2, #20
    be08:	2c01      	cmp	r4, #1
    be0a:	d005      	beq.n	be18 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    be0c:	2c02      	cmp	r4, #2
    be0e:	d007      	beq.n	be20 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    be10:	2181      	movs	r1, #129	; 0x81
    be12:	203d      	movs	r0, #61	; 0x3d
    be14:	f7f9 fb8e 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be18:	2302      	movs	r3, #2
    be1a:	6003      	str	r3, [r0, #0]
    be1c:	6011      	str	r1, [r2, #0]
    be1e:	bd10      	pop	{r4, pc}
    be20:	2303      	movs	r3, #3
    be22:	6003      	str	r3, [r0, #0]
    be24:	6011      	str	r1, [r2, #0]
    be26:	4904      	ldr	r1, [pc, #16]	; (be38 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    be28:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    be2c:	6008      	str	r0, [r1, #0]
    be2e:	bd10      	pop	{r4, pc}
    be30:	4000f500 	.word	0x4000f500
    be34:	200015d9 	.word	0x200015d9
    be38:	4001f504 	.word	0x4001f504
    be3c:	4805      	ldr	r0, [pc, #20]	; (be54 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    be3e:	b510      	push	{r4, lr}
    be40:	2100      	movs	r1, #0
    be42:	6001      	str	r1, [r0, #0]
    be44:	6001      	str	r1, [r0, #0]
    be46:	f7ff ff51 	bl	bcec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    be4a:	4903      	ldr	r1, [pc, #12]	; (be58 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    be4c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    be50:	6008      	str	r0, [r1, #0]
    be52:	bd10      	pop	{r4, pc}
    be54:	4000f500 	.word	0x4000f500
    be58:	4001f508 	.word	0x4001f508

0000be5c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    be5c:	4805      	ldr	r0, [pc, #20]	; (be74 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    be5e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    be62:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    be66:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    be6a:	2100      	movs	r1, #0
    be6c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    be70:	4770      	bx	lr
    be72:	0000      	.short	0x0000
    be74:	40001000 	.word	0x40001000

0000be78 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    be78:	4904      	ldr	r1, [pc, #16]	; (be8c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    be7a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    be7e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    be82:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    be86:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    be8a:	4770      	bx	lr
    be8c:	40001000 	.word	0x40001000

0000be90 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    be90:	4801      	ldr	r0, [pc, #4]	; (be98 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    be92:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    be96:	4770      	bx	lr
    be98:	20001088 	.word	0x20001088

0000be9c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    be9c:	4902      	ldr	r1, [pc, #8]	; (bea8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    be9e:	5c08      	ldrb	r0, [r1, r0]
    bea0:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    bea4:	4770      	bx	lr
    bea6:	0000      	.short	0x0000
    bea8:	0000cbca 	.word	0x0000cbca

0000beac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    beac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    beae:	4c24      	ldr	r4, [pc, #144]	; (bf40 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    beb0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    beb4:	f010 0f10 	tst.w	r0, #16
    beb8:	d001      	beq.n	bebe <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    beba:	2701      	movs	r7, #1
    bebc:	e000      	b.n	bec0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    bebe:	2700      	movs	r7, #0
    bec0:	2010      	movs	r0, #16
    bec2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    bec6:	2002      	movs	r0, #2
    bec8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    becc:	481d      	ldr	r0, [pc, #116]	; (bf44 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    bece:	2500      	movs	r5, #0
    bed0:	491d      	ldr	r1, [pc, #116]	; (bf48 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    bed2:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    bed6:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    beda:	6008      	str	r0, [r1, #0]
    bedc:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    bee0:	f44f 7688 	mov.w	r6, #272	; 0x110
    bee4:	f010 0fff 	tst.w	r0, #255	; 0xff
    bee8:	d019      	beq.n	bf1e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    beea:	20ff      	movs	r0, #255	; 0xff
    beec:	f88d 0000 	strb.w	r0, [sp]
    bef0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bef4:	2001      	movs	r0, #1
    bef6:	6120      	str	r0, [r4, #16]
    bef8:	e005      	b.n	bf06 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    befa:	bf00      	nop
    befc:	f89d 0000 	ldrb.w	r0, [sp]
    bf00:	1e40      	subs	r0, r0, #1
    bf02:	f88d 0000 	strb.w	r0, [sp]
    bf06:	f89d 0000 	ldrb.w	r0, [sp]
    bf0a:	b128      	cbz	r0, bf18 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    bf0c:	4631      	mov	r1, r6
    bf0e:	4620      	mov	r0, r4
    bf10:	f005 fb69 	bl	115e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    bf14:	2800      	cmp	r0, #0
    bf16:	d0f1      	beq.n	befc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    bf18:	f89d 0000 	ldrb.w	r0, [sp]
    bf1c:	b158      	cbz	r0, bf36 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    bf1e:	f000 fc49 	bl	c7b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    bf22:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bf26:	f000 fdd1 	bl	cacc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    bf2a:	2f00      	cmp	r7, #0
    bf2c:	d002      	beq.n	bf34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    bf2e:	2010      	movs	r0, #16
    bf30:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bf34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf36:	f640 0183 	movw	r1, #2179	; 0x883
    bf3a:	203e      	movs	r0, #62	; 0x3e
    bf3c:	f7f9 fafa 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf40:	40001000 	.word	0x40001000
    bf44:	20001088 	.word	0x20001088
    bf48:	4001f508 	.word	0x4001f508

0000bf4c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    bf4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf50:	4d18      	ldr	r5, [pc, #96]	; (bfb4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    bf52:	4607      	mov	r7, r0
    bf54:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    bf58:	07c2      	lsls	r2, r0, #31
    bf5a:	d00f      	beq.n	bf7c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    bf5c:	4c16      	ldr	r4, [pc, #88]	; (bfb8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    bf5e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    bf62:	f042 0201 	orr.w	r2, r2, #1
    bf66:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    bf6a:	f040 0002 	orr.w	r0, r0, #2
    bf6e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    bf72:	2601      	movs	r6, #1
    bf74:	b13f      	cbz	r7, bf86 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    bf76:	2f01      	cmp	r7, #1
    bf78:	d00b      	beq.n	bf92 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    bf7a:	e010      	b.n	bf9e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    bf7c:	f44f 61ed 	mov.w	r1, #1896	; 0x768
    bf80:	203e      	movs	r0, #62	; 0x3e
    bf82:	f7f9 fad7 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf86:	4608      	mov	r0, r1
    bf88:	f000 fdfa 	bl	cb80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    bf8c:	726e      	strb	r6, [r5, #9]
    bf8e:	6026      	str	r6, [r4, #0]
    bf90:	e005      	b.n	bf9e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    bf92:	4608      	mov	r0, r1
    bf94:	f000 fdda 	bl	cb4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    bf98:	2002      	movs	r0, #2
    bf9a:	7268      	strb	r0, [r5, #9]
    bf9c:	6066      	str	r6, [r4, #4]
    bf9e:	4807      	ldr	r0, [pc, #28]	; (bfbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    bfa0:	64c6      	str	r6, [r0, #76]	; 0x4c
    bfa2:	4806      	ldr	r0, [pc, #24]	; (bfbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    bfa4:	300c      	adds	r0, #12
    bfa6:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    bfaa:	4638      	mov	r0, r7
    bfac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bfb0:	f000 bd5e 	b.w	ca70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    bfb4:	20001088 	.word	0x20001088
    bfb8:	40001000 	.word	0x40001000
    bfbc:	40008000 	.word	0x40008000

0000bfc0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    bfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bfc4:	4c2c      	ldr	r4, [pc, #176]	; (c078 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    bfc6:	0006      	movs	r6, r0
    bfc8:	4d2c      	ldr	r5, [pc, #176]	; (c07c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    bfca:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    bfce:	f8df 80b0 	ldr.w	r8, [pc, #176]	; c080 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    bfd2:	f040 0002 	orr.w	r0, r0, #2
    bfd6:	4689      	mov	r9, r1
    bfd8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    bfdc:	f04f 0700 	mov.w	r7, #0
    bfe0:	d002      	beq.n	bfe8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    bfe2:	2e01      	cmp	r6, #1
    bfe4:	d020      	beq.n	c028 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    bfe6:	e036      	b.n	c056 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    bfe8:	4608      	mov	r0, r1
    bfea:	f000 fdc9 	bl	cb80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    bfee:	2001      	movs	r0, #1
    bff0:	7260      	strb	r0, [r4, #9]
    bff2:	79e0      	ldrb	r0, [r4, #7]
    bff4:	2801      	cmp	r0, #1
    bff6:	d105      	bne.n	c004 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    bff8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    bffc:	f040 0008 	orr.w	r0, r0, #8
    c000:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    c004:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c006:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    c00a:	62a0      	str	r0, [r4, #40]	; 0x28
    c00c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c010:	f8c8 0000 	str.w	r0, [r8]
    c014:	491b      	ldr	r1, [pc, #108]	; (c084 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    c016:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    c01a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c01e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    c022:	fbb0 f7f1 	udiv	r7, r0, r1
    c026:	e016      	b.n	c056 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    c028:	4608      	mov	r0, r1
    c02a:	f000 fd8f 	bl	cb4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    c02e:	2002      	movs	r0, #2
    c030:	7260      	strb	r0, [r4, #9]
    c032:	79e0      	ldrb	r0, [r4, #7]
    c034:	2801      	cmp	r0, #1
    c036:	d105      	bne.n	c044 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    c038:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    c03c:	f040 0004 	orr.w	r0, r0, #4
    c040:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    c044:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c046:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    c04a:	62a0      	str	r0, [r4, #40]	; 0x28
    c04c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    c050:	f8c8 0000 	str.w	r0, [r8]
    c054:	2729      	movs	r7, #41	; 0x29
    c056:	f000 fc19 	bl	c88c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    c05a:	f001 fa71 	bl	d540 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    c05e:	b120      	cbz	r0, c06a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    c060:	f7ff ff24 	bl	beac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c064:	2000      	movs	r0, #0
    c066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c06a:	2100      	movs	r1, #0
    c06c:	4630      	mov	r0, r6
    c06e:	f000 fcff 	bl	ca70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c072:	4638      	mov	r0, r7
    c074:	e7f7      	b.n	c066 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    c076:	0000      	.short	0x0000
    c078:	20001088 	.word	0x20001088
    c07c:	40001000 	.word	0x40001000
    c080:	4001f504 	.word	0x4001f504
    c084:	0000cbc4 	.word	0x0000cbc4

0000c088 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    c088:	4a02      	ldr	r2, [pc, #8]	; (c094 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    c08a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    c08c:	6003      	str	r3, [r0, #0]
    c08e:	6b50      	ldr	r0, [r2, #52]	; 0x34
    c090:	6008      	str	r0, [r1, #0]
    c092:	4770      	bx	lr
    c094:	20001088 	.word	0x20001088

0000c098 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    c098:	b510      	push	{r4, lr}
    c09a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    c09c:	4901      	ldr	r1, [pc, #4]	; (c0a4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    c09e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    c0a2:	bd10      	pop	{r4, pc}
    c0a4:	20001078 	.word	0x20001078

0000c0a8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    c0a8:	490f      	ldr	r1, [pc, #60]	; (c0e8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    c0aa:	b510      	push	{r4, lr}
    c0ac:	69ca      	ldr	r2, [r1, #28]
    c0ae:	4282      	cmp	r2, r0
    c0b0:	d302      	bcc.n	c0b8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    c0b2:	f640 1117 	movw	r1, #2327	; 0x917
    c0b6:	e00b      	b.n	c0d0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    c0b8:	2201      	movs	r2, #1
    c0ba:	730a      	strb	r2, [r1, #12]
    c0bc:	6108      	str	r0, [r1, #16]
    c0be:	490b      	ldr	r1, [pc, #44]	; (c0ec <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    c0c0:	644a      	str	r2, [r1, #68]	; 0x44
    c0c2:	1d0a      	adds	r2, r1, #4
    c0c4:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    c0c8:	4283      	cmp	r3, r0
    c0ca:	d304      	bcc.n	c0d6 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    c0cc:	f44f 6112 	mov.w	r1, #2336	; 0x920
    c0d0:	203e      	movs	r0, #62	; 0x3e
    c0d2:	f7f9 fa2f 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0d6:	2300      	movs	r3, #0
    c0d8:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    c0dc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c0e4:	f000 bc98 	b.w	ca18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c0e8:	20001088 	.word	0x20001088
    c0ec:	40008000 	.word	0x40008000

0000c0f0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    c0f0:	b570      	push	{r4, r5, r6, lr}
    c0f2:	4c0f      	ldr	r4, [pc, #60]	; (c130 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    c0f4:	4603      	mov	r3, r0
    c0f6:	2002      	movs	r0, #2
    c0f8:	7320      	strb	r0, [r4, #12]
    c0fa:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    c0fe:	2096      	movs	r0, #150	; 0x96
    c100:	f894 1020 	ldrb.w	r1, [r4, #32]
    c104:	7d22      	ldrb	r2, [r4, #20]
    c106:	2d01      	cmp	r5, #1
    c108:	d00e      	beq.n	c128 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    c10a:	f000 fd97 	bl	cc3c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    c10e:	6120      	str	r0, [r4, #16]
    c110:	4808      	ldr	r0, [pc, #32]	; (c134 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    c112:	2100      	movs	r1, #0
    c114:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    c118:	6921      	ldr	r1, [r4, #16]
    c11a:	69e0      	ldr	r0, [r4, #28]
    c11c:	4408      	add	r0, r1
    c11e:	4905      	ldr	r1, [pc, #20]	; (c134 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    c120:	1d09      	adds	r1, r1, #4
    c122:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c126:	bd70      	pop	{r4, r5, r6, pc}
    c128:	f000 fda6 	bl	cc78 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    c12c:	e7ef      	b.n	c10e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    c12e:	0000      	.short	0x0000
    c130:	20001088 	.word	0x20001088
    c134:	40008000 	.word	0x40008000

0000c138 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    c138:	b510      	push	{r4, lr}
    c13a:	f001 fb49 	bl	d7d0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c13e:	2800      	cmp	r0, #0
    c140:	d006      	beq.n	c150 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    c142:	4804      	ldr	r0, [pc, #16]	; (c154 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    c144:	6801      	ldr	r1, [r0, #0]
    c146:	f021 0101 	bic.w	r1, r1, #1
    c14a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    c14e:	6001      	str	r1, [r0, #0]
    c150:	bd10      	pop	{r4, pc}
    c152:	0000      	.short	0x0000
    c154:	40001774 	.word	0x40001774

0000c158 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c15c:	2238      	movs	r2, #56	; 0x38
    c15e:	2100      	movs	r1, #0
    c160:	4813      	ldr	r0, [pc, #76]	; (c1b0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    c162:	f001 fbd3 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c166:	f000 fcb1 	bl	cacc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c16a:	f001 faea 	bl	d742 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c16e:	4d11      	ldr	r5, [pc, #68]	; (c1b4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c170:	4e10      	ldr	r6, [pc, #64]	; (c1b4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c172:	2400      	movs	r4, #0
    c174:	4f0f      	ldr	r7, [pc, #60]	; (c1b4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c176:	3508      	adds	r5, #8
    c178:	3610      	adds	r6, #16
    c17a:	b928      	cbnz	r0, c188 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c17c:	f001 faf8 	bl	d770 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c180:	b910      	cbnz	r0, c188 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c182:	f001 faff 	bl	d784 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    c186:	b108      	cbz	r0, c18c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    c188:	2224      	movs	r2, #36	; 0x24
    c18a:	e006      	b.n	c19a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c18c:	f001 fb3a 	bl	d804 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c190:	b910      	cbnz	r0, c198 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    c192:	f001 fb2d 	bl	d7f0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    c196:	b140      	cbz	r0, c1aa <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    c198:	2240      	movs	r2, #64	; 0x40
    c19a:	21ff      	movs	r1, #255	; 0xff
    c19c:	4638      	mov	r0, r7
    c19e:	f001 fbb5 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c1a2:	602c      	str	r4, [r5, #0]
    c1a4:	6034      	str	r4, [r6, #0]
    c1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1aa:	2238      	movs	r2, #56	; 0x38
    c1ac:	e7f5      	b.n	c19a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c1ae:	0000      	.short	0x0000
    c1b0:	20001088 	.word	0x20001088
    c1b4:	40000e00 	.word	0x40000e00

0000c1b8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    c1b8:	4801      	ldr	r0, [pc, #4]	; (c1c0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    c1ba:	69c0      	ldr	r0, [r0, #28]
    c1bc:	4770      	bx	lr
    c1be:	0000      	.short	0x0000
    c1c0:	20001088 	.word	0x20001088

0000c1c4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    c1c4:	4801      	ldr	r0, [pc, #4]	; (c1cc <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    c1c6:	6980      	ldr	r0, [r0, #24]
    c1c8:	4770      	bx	lr
    c1ca:	0000      	.short	0x0000
    c1cc:	20001088 	.word	0x20001088

0000c1d0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    c1d0:	b510      	push	{r4, lr}
    c1d2:	f000 fc2f 	bl	ca34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    c1d6:	f7ff fe69 	bl	beac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c1da:	f7f9 f85b 	bl	5294 <mpsl_fem_disable>
    c1de:	b130      	cbz	r0, c1ee <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    c1e0:	1c40      	adds	r0, r0, #1
    c1e2:	d004      	beq.n	c1ee <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    c1e4:	f240 5146 	movw	r1, #1350	; 0x546
    c1e8:	203e      	movs	r0, #62	; 0x3e
    c1ea:	f7f9 f9a3 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1ee:	480f      	ldr	r0, [pc, #60]	; (c22c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    c1f0:	4a0f      	ldr	r2, [pc, #60]	; (c230 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    c1f2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c1f4:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    c1f8:	6011      	str	r1, [r2, #0]
    c1fa:	2400      	movs	r4, #0
    c1fc:	6284      	str	r4, [r0, #40]	; 0x28
    c1fe:	7304      	strb	r4, [r0, #12]
    c200:	61c4      	str	r4, [r0, #28]
    c202:	6184      	str	r4, [r0, #24]
    c204:	f000 fc16 	bl	ca34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    c208:	480a      	ldr	r0, [pc, #40]	; (c234 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    c20a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c20e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c212:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c216:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    c21a:	2001      	movs	r0, #1
    c21c:	f005 f9d2 	bl	115c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c224:	2001      	movs	r0, #1
    c226:	f005 b9c0 	b.w	115aa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c22a:	0000      	.short	0x0000
    c22c:	20001088 	.word	0x20001088
    c230:	4001f508 	.word	0x4001f508
    c234:	40008000 	.word	0x40008000

0000c238 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    c238:	b570      	push	{r4, r5, r6, lr}
    c23a:	2001      	movs	r0, #1
    c23c:	f005 f9c2 	bl	115c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c240:	4c37      	ldr	r4, [pc, #220]	; (c320 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    c242:	2000      	movs	r0, #0
    c244:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c248:	2001      	movs	r0, #1
    c24a:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c24e:	f001 faaf 	bl	d7b0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c252:	4d34      	ldr	r5, [pc, #208]	; (c324 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c254:	b118      	cbz	r0, c25e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    c256:	6828      	ldr	r0, [r5, #0]
    c258:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c25c:	6028      	str	r0, [r5, #0]
    c25e:	f001 fa9b 	bl	d798 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c262:	b128      	cbz	r0, c270 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    c264:	6828      	ldr	r0, [r5, #0]
    c266:	4930      	ldr	r1, [pc, #192]	; (c328 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c268:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    c26c:	4308      	orrs	r0, r1
    c26e:	6028      	str	r0, [r5, #0]
    c270:	f001 faae 	bl	d7d0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c274:	b138      	cbz	r0, c286 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    c276:	482b      	ldr	r0, [pc, #172]	; (c324 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c278:	1d00      	adds	r0, r0, #4
    c27a:	6801      	ldr	r1, [r0, #0]
    c27c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    c280:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    c284:	6001      	str	r1, [r0, #0]
    c286:	4927      	ldr	r1, [pc, #156]	; (c324 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c288:	4828      	ldr	r0, [pc, #160]	; (c32c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    c28a:	313c      	adds	r1, #60	; 0x3c
    c28c:	6008      	str	r0, [r1, #0]
    c28e:	f7f9 f837 	bl	5300 <mpsl_fem_device_config_254_apply_get>
    c292:	b140      	cbz	r0, c2a6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c294:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c298:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    c29c:	1c41      	adds	r1, r0, #1
    c29e:	d002      	beq.n	c2a6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c2a0:	4920      	ldr	r1, [pc, #128]	; (c324 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c2a2:	3110      	adds	r1, #16
    c2a4:	6008      	str	r0, [r1, #0]
    c2a6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    c2aa:	6e00      	ldr	r0, [r0, #96]	; 0x60
    c2ac:	1c41      	adds	r1, r0, #1
    c2ae:	d004      	beq.n	c2ba <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    c2b0:	491f      	ldr	r1, [pc, #124]	; (c330 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    c2b2:	680a      	ldr	r2, [r1, #0]
    c2b4:	f360 4217 	bfi	r2, r0, #16, #8
    c2b8:	600a      	str	r2, [r1, #0]
    c2ba:	f240 1103 	movw	r1, #259	; 0x103
    c2be:	f240 605b 	movw	r0, #1627	; 0x65b
    c2c2:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    c2c6:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c2ca:	2001      	movs	r0, #1
    c2cc:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    c2d0:	f000 f842 	bl	c358 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c2d4:	f240 2001 	movw	r0, #513	; 0x201
    c2d8:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    c2dc:	2002      	movs	r0, #2
    c2de:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c2e2:	4914      	ldr	r1, [pc, #80]	; (c334 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c2e4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c2e8:	6008      	str	r0, [r1, #0]
    c2ea:	4913      	ldr	r1, [pc, #76]	; (c338 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    c2ec:	2000      	movs	r0, #0
    c2ee:	4d13      	ldr	r5, [pc, #76]	; (c33c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    c2f0:	8608      	strh	r0, [r1, #48]	; 0x30
    c2f2:	3110      	adds	r1, #16
    c2f4:	61c8      	str	r0, [r1, #28]
    c2f6:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    c2fa:	7028      	strb	r0, [r5, #0]
    c2fc:	2001      	movs	r0, #1
    c2fe:	f005 f954 	bl	115aa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c302:	2010      	movs	r0, #16
    c304:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c308:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c30c:	2002      	movs	r0, #2
    c30e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c312:	6868      	ldr	r0, [r5, #4]
    c314:	2800      	cmp	r0, #0
    c316:	d002      	beq.n	c31e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    c318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c31c:	4700      	bx	r0
    c31e:	bd70      	pop	{r4, r5, r6, pc}
    c320:	40001000 	.word	0x40001000
    c324:	4000173c 	.word	0x4000173c
    c328:	80000096 	.word	0x80000096
    c32c:	8900002c 	.word	0x8900002c
    c330:	4000158c 	.word	0x4000158c
    c334:	4001f504 	.word	0x4001f504
    c338:	20001078 	.word	0x20001078
    c33c:	200002f4 	.word	0x200002f4

0000c340 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    c340:	4901      	ldr	r1, [pc, #4]	; (c348 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    c342:	7548      	strb	r0, [r1, #21]
    c344:	4770      	bx	lr
    c346:	0000      	.short	0x0000
    c348:	20001088 	.word	0x20001088

0000c34c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    c34c:	4901      	ldr	r1, [pc, #4]	; (c354 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    c34e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c352:	4770      	bx	lr
    c354:	0000cc18 	.word	0x0000cc18

0000c358 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    c358:	4908      	ldr	r1, [pc, #32]	; (c37c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    c35a:	b510      	push	{r4, lr}
    c35c:	7508      	strb	r0, [r1, #20]
    c35e:	4908      	ldr	r1, [pc, #32]	; (c380 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    c360:	2801      	cmp	r0, #1
    c362:	d006      	beq.n	c372 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    c364:	2802      	cmp	r0, #2
    c366:	d006      	beq.n	c376 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    c368:	f640 5155 	movw	r1, #3413	; 0xd55
    c36c:	203e      	movs	r0, #62	; 0x3e
    c36e:	f7f9 f8e1 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c372:	2003      	movs	r0, #3
    c374:	e000      	b.n	c378 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    c376:	2004      	movs	r0, #4
    c378:	6008      	str	r0, [r1, #0]
    c37a:	bd10      	pop	{r4, pc}
    c37c:	20001088 	.word	0x20001088
    c380:	40001510 	.word	0x40001510

0000c384 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    c384:	4905      	ldr	r1, [pc, #20]	; (c39c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    c386:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    c38a:	4805      	ldr	r0, [pc, #20]	; (c3a0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    c38c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    c390:	f041 0101 	orr.w	r1, r1, #1
    c394:	7001      	strb	r1, [r0, #0]
    c396:	f000 ba3f 	b.w	c818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c39a:	0000      	.short	0x0000
    c39c:	40001000 	.word	0x40001000
    c3a0:	20001088 	.word	0x20001088

0000c3a4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    c3a4:	4901      	ldr	r1, [pc, #4]	; (c3ac <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    c3a6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c3aa:	4770      	bx	lr
    c3ac:	0000cc24 	.word	0x0000cc24

0000c3b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    c3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3b4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; c458 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    c3b8:	4d28      	ldr	r5, [pc, #160]	; (c45c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    c3ba:	460f      	mov	r7, r1
    c3bc:	0006      	movs	r6, r0
    c3be:	4614      	mov	r4, r2
    c3c0:	f04f 0801 	mov.w	r8, #1
    c3c4:	d004      	beq.n	c3d0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    c3c6:	2e01      	cmp	r6, #1
    c3c8:	d010      	beq.n	c3ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    c3ca:	f640 0114 	movw	r1, #2068	; 0x814
    c3ce:	e039      	b.n	c444 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    c3d0:	4610      	mov	r0, r2
    c3d2:	f000 fbd5 	bl	cb80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c3d6:	4822      	ldr	r0, [pc, #136]	; (c460 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    c3d8:	f885 8009 	strb.w	r8, [r5, #9]
    c3dc:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    c3e0:	4638      	mov	r0, r7
    c3e2:	f000 fb7b 	bl	cadc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    c3e6:	4604      	mov	r4, r0
    c3e8:	4648      	mov	r0, r9
    c3ea:	e00c      	b.n	c406 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    c3ec:	4610      	mov	r0, r2
    c3ee:	f000 fbad 	bl	cb4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    c3f2:	2002      	movs	r0, #2
    c3f4:	7268      	strb	r0, [r5, #9]
    c3f6:	f649 71ba 	movw	r1, #40890	; 0x9fba
    c3fa:	4638      	mov	r0, r7
    c3fc:	f000 fb6e 	bl	cadc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    c400:	4604      	mov	r4, r0
    c402:	4815      	ldr	r0, [pc, #84]	; (c458 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    c404:	1d00      	adds	r0, r0, #4
    c406:	f000 fb27 	bl	ca58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    c40a:	4f16      	ldr	r7, [pc, #88]	; (c464 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    c40c:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    c410:	4916      	ldr	r1, [pc, #88]	; (c46c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    c412:	4815      	ldr	r0, [pc, #84]	; (c468 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    c414:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    c418:	2010      	movs	r0, #16
    c41a:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    c41e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    c420:	4913      	ldr	r1, [pc, #76]	; (c470 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    c422:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    c426:	62a8      	str	r0, [r5, #40]	; 0x28
    c428:	0138      	lsls	r0, r7, #4
    c42a:	6008      	str	r0, [r1, #0]
    c42c:	f000 fa2e 	bl	c88c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    c430:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    c434:	480b      	ldr	r0, [pc, #44]	; (c464 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    c436:	300c      	adds	r0, #12
    c438:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c43c:	42a0      	cmp	r0, r4
    c43e:	d304      	bcc.n	c44a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    c440:	f640 012a 	movw	r1, #2090	; 0x82a
    c444:	203e      	movs	r0, #62	; 0x3e
    c446:	f7f9 f875 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c44a:	4621      	mov	r1, r4
    c44c:	4630      	mov	r0, r6
    c44e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c452:	f000 bb0d 	b.w	ca70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c456:	0000      	.short	0x0000
    c458:	40001000 	.word	0x40001000
    c45c:	20001088 	.word	0x20001088
    c460:	0000cbc4 	.word	0x0000cbc4
    c464:	40008000 	.word	0x40008000
    c468:	40008140 	.word	0x40008140
    c46c:	4001f098 	.word	0x4001f098
    c470:	4001f504 	.word	0x4001f504

0000c474 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    c474:	4b0d      	ldr	r3, [pc, #52]	; (c4ac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    c476:	b510      	push	{r4, lr}
    c478:	71d8      	strb	r0, [r3, #7]
    c47a:	729a      	strb	r2, [r3, #10]
    c47c:	b151      	cbz	r1, c494 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    c47e:	2002      	movs	r0, #2
    c480:	7218      	strb	r0, [r3, #8]
    c482:	2801      	cmp	r0, #1
    c484:	d008      	beq.n	c498 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    c486:	2802      	cmp	r0, #2
    c488:	d00f      	beq.n	c4aa <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c48a:	f640 213d 	movw	r1, #2621	; 0xa3d
    c48e:	203e      	movs	r0, #62	; 0x3e
    c490:	f7f9 f850 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c494:	2001      	movs	r0, #1
    c496:	e7f3      	b.n	c480 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    c498:	7a58      	ldrb	r0, [r3, #9]
    c49a:	2802      	cmp	r0, #2
    c49c:	d105      	bne.n	c4aa <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c49e:	f000 f97f 	bl	c7a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    c4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c4a6:	f000 baad 	b.w	ca04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    c4aa:	bd10      	pop	{r4, pc}
    c4ac:	20001088 	.word	0x20001088

0000c4b0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    c4b0:	4902      	ldr	r1, [pc, #8]	; (c4bc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    c4b2:	2000      	movs	r0, #0
    c4b4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c4b8:	4770      	bx	lr
    c4ba:	0000      	.short	0x0000
    c4bc:	40008000 	.word	0x40008000

0000c4c0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    c4c0:	4904      	ldr	r1, [pc, #16]	; (c4d4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    c4c2:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    c4c6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    c4ca:	4249      	negs	r1, r1
    c4cc:	7001      	strb	r1, [r0, #0]
    c4ce:	2001      	movs	r0, #1
    c4d0:	4770      	bx	lr
    c4d2:	0000      	.short	0x0000
    c4d4:	40001000 	.word	0x40001000

0000c4d8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    c4d8:	4903      	ldr	r1, [pc, #12]	; (c4e8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    c4da:	0e02      	lsrs	r2, r0, #24
    c4dc:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    c4e0:	0200      	lsls	r0, r0, #8
    c4e2:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    c4e6:	4770      	bx	lr
    c4e8:	40001000 	.word	0x40001000

0000c4ec <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    c4ec:	6800      	ldr	r0, [r0, #0]
    c4ee:	4903      	ldr	r1, [pc, #12]	; (c4fc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    c4f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c4f4:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    c4f8:	4770      	bx	lr
    c4fa:	0000      	.short	0x0000
    c4fc:	40001000 	.word	0x40001000

0000c500 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    c500:	b510      	push	{r4, lr}
    c502:	2200      	movs	r2, #0
    c504:	2901      	cmp	r1, #1
    c506:	d006      	beq.n	c516 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    c508:	2902      	cmp	r1, #2
    c50a:	d002      	beq.n	c512 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    c50c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    c510:	e014      	b.n	c53c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    c512:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c516:	490b      	ldr	r1, [pc, #44]	; (c544 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    c518:	430a      	orrs	r2, r1
    c51a:	490b      	ldr	r1, [pc, #44]	; (c548 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c51c:	600a      	str	r2, [r1, #0]
    c51e:	490b      	ldr	r1, [pc, #44]	; (c54c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    c520:	4308      	orrs	r0, r1
    c522:	4909      	ldr	r1, [pc, #36]	; (c548 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c524:	1d09      	adds	r1, r1, #4
    c526:	6008      	str	r0, [r1, #0]
    c528:	4809      	ldr	r0, [pc, #36]	; (c550 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    c52a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c52e:	b2c0      	uxtb	r0, r0
    c530:	2803      	cmp	r0, #3
    c532:	d001      	beq.n	c538 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    c534:	280b      	cmp	r0, #11
    c536:	d104      	bne.n	c542 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    c538:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    c53c:	203e      	movs	r0, #62	; 0x3e
    c53e:	f7f8 fff9 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c542:	bd10      	pop	{r4, pc}
    c544:	00100108 	.word	0x00100108
    c548:	40001514 	.word	0x40001514
    c54c:	02030000 	.word	0x02030000
    c550:	40001000 	.word	0x40001000

0000c554 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    c554:	4901      	ldr	r1, [pc, #4]	; (c55c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    c556:	7588      	strb	r0, [r1, #22]
    c558:	4770      	bx	lr
    c55a:	0000      	.short	0x0000
    c55c:	20001088 	.word	0x20001088

0000c560 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    c560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c564:	4852      	ldr	r0, [pc, #328]	; (c6b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c566:	f04f 0a01 	mov.w	sl, #1
    c56a:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    c56e:	4850      	ldr	r0, [pc, #320]	; (c6b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c570:	300c      	adds	r0, #12
    c572:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    c576:	f000 ffe1 	bl	d53c <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    c57a:	4c4e      	ldr	r4, [pc, #312]	; (c6b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c57c:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    c580:	f000 f918 	bl	c7b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    c584:	494c      	ldr	r1, [pc, #304]	; (c6b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c586:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c588:	6008      	str	r0, [r1, #0]
    c58a:	f8df 9130 	ldr.w	r9, [pc, #304]	; c6bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    c58e:	2000      	movs	r0, #0
    c590:	62a0      	str	r0, [r4, #40]	; 0x28
    c592:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    c596:	f240 131d 	movw	r3, #285	; 0x11d
    c59a:	439a      	bics	r2, r3
    c59c:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    c5a0:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c5a4:	f000 f986 	bl	c8b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    c5a8:	4605      	mov	r5, r0
    c5aa:	4841      	ldr	r0, [pc, #260]	; (c6b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c5ac:	3008      	adds	r0, #8
    c5ae:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c5b2:	4e3f      	ldr	r6, [pc, #252]	; (c6b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c5b4:	61e0      	str	r0, [r4, #28]
    c5b6:	1d36      	adds	r6, r6, #4
    c5b8:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c5bc:	61a0      	str	r0, [r4, #24]
    c5be:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c5c2:	7d21      	ldrb	r1, [r4, #20]
    c5c4:	f884 1020 	strb.w	r1, [r4, #32]
    c5c8:	7a61      	ldrb	r1, [r4, #9]
    c5ca:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    c5ce:	46a0      	mov	r8, r4
    c5d0:	2400      	movs	r4, #0
    c5d2:	4639      	mov	r1, r7
    c5d4:	4628      	mov	r0, r5
    c5d6:	f000 f9e1 	bl	c99c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    c5da:	b910      	cbnz	r0, c5e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    c5dc:	f8c9 a010 	str.w	sl, [r9, #16]
    c5e0:	2401      	movs	r4, #1
    c5e2:	4f34      	ldr	r7, [pc, #208]	; (c6b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c5e4:	07e8      	lsls	r0, r5, #31
    c5e6:	f1a7 0710 	sub.w	r7, r7, #16
    c5ea:	d002      	beq.n	c5f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    c5ec:	6838      	ldr	r0, [r7, #0]
    c5ee:	4780      	blx	r0
    c5f0:	e032      	b.n	c658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    c5f2:	07a8      	lsls	r0, r5, #30
    c5f4:	d527      	bpl.n	c646 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    c5f6:	0768      	lsls	r0, r5, #29
    c5f8:	d41f      	bmi.n	c63a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c5fa:	f001 f8e9 	bl	d7d0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c5fe:	b9e0      	cbnz	r0, c63a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c600:	f001 f8d6 	bl	d7b0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c604:	b9c8      	cbnz	r0, c63a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c606:	482e      	ldr	r0, [pc, #184]	; (c6c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    c608:	6800      	ldr	r0, [r0, #0]
    c60a:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    c60e:	f3c0 5142 	ubfx	r1, r0, #21, #3
    c612:	f000 030f 	and.w	r3, r0, #15
    c616:	f3c0 1203 	ubfx	r2, r0, #4, #4
    c61a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c61e:	f1bc 0f00 	cmp.w	ip, #0
    c622:	d00a      	beq.n	c63a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c624:	b10b      	cbz	r3, c62a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    c626:	b102      	cbz	r2, c62a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    c628:	b938      	cbnz	r0, c63a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c62a:	4825      	ldr	r0, [pc, #148]	; (c6c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    c62c:	1d00      	adds	r0, r0, #4
    c62e:	6800      	ldr	r0, [r0, #0]
    c630:	b118      	cbz	r0, c63a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c632:	2903      	cmp	r1, #3
    c634:	d201      	bcs.n	c63a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c636:	f045 0504 	orr.w	r5, r5, #4
    c63a:	f345 0080 	sbfx	r0, r5, #2, #1
    c63e:	4621      	mov	r1, r4
    c640:	1c40      	adds	r0, r0, #1
    c642:	687a      	ldr	r2, [r7, #4]
    c644:	e007      	b.n	c656 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    c646:	f015 0f28 	tst.w	r5, #40	; 0x28
    c64a:	d005      	beq.n	c658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    c64c:	f345 1140 	sbfx	r1, r5, #5, #1
    c650:	68ba      	ldr	r2, [r7, #8]
    c652:	4620      	mov	r0, r4
    c654:	1c49      	adds	r1, r1, #1
    c656:	4790      	blx	r2
    c658:	06e8      	lsls	r0, r5, #27
    c65a:	d501      	bpl.n	c660 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    c65c:	68f8      	ldr	r0, [r7, #12]
    c65e:	4780      	blx	r0
    c660:	f898 1009 	ldrb.w	r1, [r8, #9]
    c664:	4640      	mov	r0, r8
    c666:	2902      	cmp	r1, #2
    c668:	d120      	bne.n	c6ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    c66a:	7b01      	ldrb	r1, [r0, #12]
    c66c:	2900      	cmp	r1, #0
    c66e:	d01d      	beq.n	c6ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    c670:	2902      	cmp	r1, #2
    c672:	d004      	beq.n	c67e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    c674:	2901      	cmp	r1, #1
    c676:	d009      	beq.n	c68c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    c678:	f640 4134 	movw	r1, #3124	; 0xc34
    c67c:	e00d      	b.n	c69a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    c67e:	69c1      	ldr	r1, [r0, #28]
    c680:	f8d8 0010 	ldr.w	r0, [r8, #16]
    c684:	4408      	add	r0, r1
    c686:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    c68a:	e00b      	b.n	c6a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c68c:	6901      	ldr	r1, [r0, #16]
    c68e:	f8d8 001c 	ldr.w	r0, [r8, #28]
    c692:	4281      	cmp	r1, r0
    c694:	d804      	bhi.n	c6a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    c696:	f640 4135 	movw	r1, #3125	; 0xc35
    c69a:	203e      	movs	r0, #62	; 0x3e
    c69c:	f7f8 ff4a 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6a0:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    c6a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6a8:	f000 b9b6 	b.w	ca18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6b0:	40008000 	.word	0x40008000
    c6b4:	20001088 	.word	0x20001088
    c6b8:	4001f508 	.word	0x4001f508
    c6bc:	40001000 	.word	0x40001000
    c6c0:	40001450 	.word	0x40001450

0000c6c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c6c4:	b570      	push	{r4, r5, r6, lr}
    c6c6:	4b16      	ldr	r3, [pc, #88]	; (c720 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    c6c8:	888c      	ldrh	r4, [r1, #4]
    c6ca:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    c6ce:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    c6d2:	780c      	ldrb	r4, [r1, #0]
    c6d4:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c6d8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    c6dc:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    c6e0:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    c6e4:	2401      	movs	r4, #1
    c6e6:	4084      	lsls	r4, r0
    c6e8:	b2c9      	uxtb	r1, r1
    c6ea:	b2e5      	uxtb	r5, r4
    c6ec:	4329      	orrs	r1, r5
    c6ee:	b132      	cbz	r2, c6fe <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    c6f0:	2a01      	cmp	r2, #1
    c6f2:	d00a      	beq.n	c70a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    c6f4:	f240 51ad 	movw	r1, #1453	; 0x5ad
    c6f8:	203e      	movs	r0, #62	; 0x3e
    c6fa:	f7f8 ff1b 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6fe:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c702:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c706:	43a0      	bics	r0, r4
    c708:	e004      	b.n	c714 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    c70a:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c70e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c712:	4328      	orrs	r0, r5
    c714:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c718:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    c71c:	bd70      	pop	{r4, r5, r6, pc}
    c71e:	0000      	.short	0x0000
    c720:	40001000 	.word	0x40001000

0000c724 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c724:	4901      	ldr	r1, [pc, #4]	; (c72c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c726:	2001      	movs	r0, #1
    c728:	7008      	strb	r0, [r1, #0]
    c72a:	4770      	bx	lr
    c72c:	200002f4 	.word	0x200002f4
    c730:	480b      	ldr	r0, [pc, #44]	; (c760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    c732:	7d81      	ldrb	r1, [r0, #22]
    c734:	480b      	ldr	r0, [pc, #44]	; (c764 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    c736:	5c40      	ldrb	r0, [r0, r1]
    c738:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    c73c:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c740:	d204      	bcs.n	c74c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    c742:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    c746:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c74a:	e001      	b.n	c750 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    c74c:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    c750:	4a05      	ldr	r2, [pc, #20]	; (c768 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    c752:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    c756:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c75a:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    c75e:	4770      	bx	lr
    c760:	20001088 	.word	0x20001088
    c764:	0000cbca 	.word	0x0000cbca
    c768:	40001000 	.word	0x40001000
    c76c:	b508      	push	{r3, lr}
    c76e:	490b      	ldr	r1, [pc, #44]	; (c79c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    c770:	466b      	mov	r3, sp
    c772:	f991 2015 	ldrsb.w	r2, [r1, #21]
    c776:	7d89      	ldrb	r1, [r1, #22]
    c778:	f000 faca 	bl	cd10 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    c77c:	f99d 0000 	ldrsb.w	r0, [sp]
    c780:	f000 fa9a 	bl	ccb8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c784:	f10d 0001 	add.w	r0, sp, #1
    c788:	f7f8 fda8 	bl	52dc <mpsl_fem_pa_gain_set>
    c78c:	2800      	cmp	r0, #0
    c78e:	d004      	beq.n	c79a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    c790:	f240 51ee 	movw	r1, #1518	; 0x5ee
    c794:	203e      	movs	r0, #62	; 0x3e
    c796:	f7f8 fecd 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c79a:	bd08      	pop	{r3, pc}
    c79c:	20001088 	.word	0x20001088
    c7a0:	4803      	ldr	r0, [pc, #12]	; (c7b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    c7a2:	7a01      	ldrb	r1, [r0, #8]
    c7a4:	2901      	cmp	r1, #1
    c7a6:	d102      	bne.n	c7ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    c7a8:	7a80      	ldrb	r0, [r0, #10]
    c7aa:	f7ff bfdf 	b.w	c76c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    c7ae:	4770      	bx	lr
    c7b0:	20001088 	.word	0x20001088
    c7b4:	480d      	ldr	r0, [pc, #52]	; (c7ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    c7b6:	b510      	push	{r4, lr}
    c7b8:	7a40      	ldrb	r0, [r0, #9]
    c7ba:	2801      	cmp	r0, #1
    c7bc:	d00c      	beq.n	c7d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    c7be:	2802      	cmp	r0, #2
    c7c0:	d113      	bne.n	c7ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c7c2:	f7f8 fd6d 	bl	52a0 <mpsl_fem_lna_configuration_clear>
    c7c6:	2800      	cmp	r0, #0
    c7c8:	d00f      	beq.n	c7ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c7ca:	1c40      	adds	r0, r0, #1
    c7cc:	d00d      	beq.n	c7ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c7ce:	f640 019a 	movw	r1, #2202	; 0x89a
    c7d2:	203e      	movs	r0, #62	; 0x3e
    c7d4:	f7f8 feae 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c7d8:	f7f8 fd74 	bl	52c4 <mpsl_fem_pa_configuration_clear>
    c7dc:	2800      	cmp	r0, #0
    c7de:	d004      	beq.n	c7ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c7e0:	1c40      	adds	r0, r0, #1
    c7e2:	d002      	beq.n	c7ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c7e4:	f640 0194 	movw	r1, #2196	; 0x894
    c7e8:	e7f3      	b.n	c7d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    c7ea:	bd10      	pop	{r4, pc}
    c7ec:	20001088 	.word	0x20001088
    c7f0:	4808      	ldr	r0, [pc, #32]	; (c814 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    c7f2:	2100      	movs	r1, #0
    c7f4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c7f8:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c7fc:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c800:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c804:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c808:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c80c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c810:	4770      	bx	lr
    c812:	0000      	.short	0x0000
    c814:	40001000 	.word	0x40001000
    c818:	4818      	ldr	r0, [pc, #96]	; (c87c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    c81a:	b510      	push	{r4, lr}
    c81c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c820:	07c1      	lsls	r1, r0, #31
    c822:	d029      	beq.n	c878 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c824:	0781      	lsls	r1, r0, #30
    c826:	d514      	bpl.n	c852 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    c828:	4815      	ldr	r0, [pc, #84]	; (c880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    c82a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c82e:	f041 0101 	orr.w	r1, r1, #1
    c832:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c836:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c83a:	b2c0      	uxtb	r0, r0
    c83c:	280b      	cmp	r0, #11
    c83e:	d005      	beq.n	c84c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c840:	280a      	cmp	r0, #10
    c842:	d003      	beq.n	c84c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c844:	2803      	cmp	r0, #3
    c846:	d001      	beq.n	c84c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c848:	2802      	cmp	r0, #2
    c84a:	d115      	bne.n	c878 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c84c:	f240 6117 	movw	r1, #1559	; 0x617
    c850:	e00f      	b.n	c872 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    c852:	0740      	lsls	r0, r0, #29
    c854:	d510      	bpl.n	c878 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c856:	480a      	ldr	r0, [pc, #40]	; (c880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    c858:	490a      	ldr	r1, [pc, #40]	; (c884 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    c85a:	3008      	adds	r0, #8
    c85c:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c860:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c864:	4808      	ldr	r0, [pc, #32]	; (c888 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    c866:	f004 fec3 	bl	115f0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c86a:	2800      	cmp	r0, #0
    c86c:	d004      	beq.n	c878 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c86e:	f240 611f 	movw	r1, #1567	; 0x61f
    c872:	203e      	movs	r0, #62	; 0x3e
    c874:	f7f8 fe5e 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c878:	bd10      	pop	{r4, pc}
    c87a:	0000      	.short	0x0000
    c87c:	20001088 	.word	0x20001088
    c880:	40001000 	.word	0x40001000
    c884:	4001f098 	.word	0x4001f098
    c888:	40008000 	.word	0x40008000
    c88c:	4808      	ldr	r0, [pc, #32]	; (c8b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    c88e:	4601      	mov	r1, r0
    c890:	79c2      	ldrb	r2, [r0, #7]
    c892:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c896:	b112      	cbz	r2, c89e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    c898:	2a01      	cmp	r2, #1
    c89a:	d003      	beq.n	c8a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    c89c:	e006      	b.n	c8ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c89e:	f041 0102 	orr.w	r1, r1, #2
    c8a2:	e001      	b.n	c8a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    c8a4:	f041 0104 	orr.w	r1, r1, #4
    c8a8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c8ac:	f7ff bfb4 	b.w	c818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c8b0:	20001088 	.word	0x20001088
    c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8b8:	4d34      	ldr	r5, [pc, #208]	; (c98c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    c8ba:	2400      	movs	r4, #0
    c8bc:	7b28      	ldrb	r0, [r5, #12]
    c8be:	b138      	cbz	r0, c8d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    c8c0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c8c4:	4832      	ldr	r0, [pc, #200]	; (c990 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    c8c6:	f004 fe93 	bl	115f0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c8ca:	b108      	cbz	r0, c8d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    c8cc:	2601      	movs	r6, #1
    c8ce:	e000      	b.n	c8d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    c8d0:	2600      	movs	r6, #0
    c8d2:	7a68      	ldrb	r0, [r5, #9]
    c8d4:	4f2f      	ldr	r7, [pc, #188]	; (c994 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    c8d6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c8da:	2801      	cmp	r0, #1
    c8dc:	d002      	beq.n	c8e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c8de:	2802      	cmp	r0, #2
    c8e0:	d006      	beq.n	c8f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    c8e2:	e016      	b.n	c912 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c8e4:	4638      	mov	r0, r7
    c8e6:	f004 fe7e 	bl	115e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c8ea:	b190      	cbz	r0, c912 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c8ec:	2408      	movs	r4, #8
    c8ee:	e010      	b.n	c912 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c8f0:	4638      	mov	r0, r7
    c8f2:	f004 fe78 	bl	115e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c8f6:	b100      	cbz	r0, c8fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    c8f8:	2402      	movs	r4, #2
    c8fa:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    c8fe:	43c0      	mvns	r0, r0
    c900:	f340 0000 	sbfx	r0, r0, #0, #1
    c904:	1c40      	adds	r0, r0, #1
    c906:	d101      	bne.n	c90c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    c908:	f044 0404 	orr.w	r4, r4, #4
    c90c:	b10e      	cbz	r6, c912 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c90e:	f044 0401 	orr.w	r4, r4, #1
    c912:	f014 0f0b 	tst.w	r4, #11
    c916:	d107      	bne.n	c928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c918:	f44f 7188 	mov.w	r1, #272	; 0x110
    c91c:	4638      	mov	r0, r7
    c91e:	f004 fe62 	bl	115e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c922:	b108      	cbz	r0, c928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c924:	f044 0410 	orr.w	r4, r4, #16
    c928:	481b      	ldr	r0, [pc, #108]	; (c998 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    c92a:	7800      	ldrb	r0, [r0, #0]
    c92c:	b1f8      	cbz	r0, c96e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    c92e:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c932:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c936:	d007      	beq.n	c948 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c938:	f44f 718a 	mov.w	r1, #276	; 0x114
    c93c:	4638      	mov	r0, r7
    c93e:	f004 fe52 	bl	115e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c942:	b108      	cbz	r0, c948 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c944:	2001      	movs	r0, #1
    c946:	e000      	b.n	c94a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    c948:	2000      	movs	r0, #0
    c94a:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c94e:	b13e      	cbz	r6, c960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c950:	f44f 718c 	mov.w	r1, #280	; 0x118
    c954:	4638      	mov	r0, r7
    c956:	f004 fe46 	bl	115e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c95a:	b108      	cbz	r0, c960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c95c:	2001      	movs	r0, #1
    c95e:	e000      	b.n	c962 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    c960:	2000      	movs	r0, #0
    c962:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c966:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c96a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c96e:	f7ff ff3f 	bl	c7f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c972:	06e0      	lsls	r0, r4, #27
    c974:	d506      	bpl.n	c984 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c976:	0720      	lsls	r0, r4, #28
    c978:	d404      	bmi.n	c984 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c97a:	7a68      	ldrb	r0, [r5, #9]
    c97c:	2801      	cmp	r0, #1
    c97e:	d101      	bne.n	c984 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c980:	f044 0420 	orr.w	r4, r4, #32
    c984:	4620      	mov	r0, r4
    c986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c98a:	0000      	.short	0x0000
    c98c:	20001088 	.word	0x20001088
    c990:	40008000 	.word	0x40008000
    c994:	40001000 	.word	0x40001000
    c998:	200002f4 	.word	0x200002f4
    c99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9a0:	4c17      	ldr	r4, [pc, #92]	; (ca00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    c9a2:	460d      	mov	r5, r1
    c9a4:	7a21      	ldrb	r1, [r4, #8]
    c9a6:	b129      	cbz	r1, c9b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    c9a8:	f010 0f11 	tst.w	r0, #17
    c9ac:	d007      	beq.n	c9be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    c9ae:	f7ff fa7d 	bl	beac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c9b2:	e023      	b.n	c9fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c9b4:	f000 f88a 	bl	cacc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c9b8:	2000      	movs	r0, #0
    c9ba:	7320      	strb	r0, [r4, #12]
    c9bc:	e01e      	b.n	c9fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c9be:	2901      	cmp	r1, #1
    c9c0:	d001      	beq.n	c9c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c9c2:	2601      	movs	r6, #1
    c9c4:	e000      	b.n	c9c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    c9c6:	2600      	movs	r6, #0
    c9c8:	79e0      	ldrb	r0, [r4, #7]
    c9ca:	2801      	cmp	r0, #1
    c9cc:	d00e      	beq.n	c9ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    c9ce:	2700      	movs	r7, #0
    c9d0:	f000 f87c 	bl	cacc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c9d4:	2196      	movs	r1, #150	; 0x96
    c9d6:	4630      	mov	r0, r6
    c9d8:	f000 f88e 	bl	caf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    c9dc:	4601      	mov	r1, r0
    c9de:	b14f      	cbz	r7, c9f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    c9e0:	353b      	adds	r5, #59	; 0x3b
    c9e2:	428d      	cmp	r5, r1
    c9e4:	d904      	bls.n	c9f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    c9e6:	2000      	movs	r0, #0
    c9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9ec:	2701      	movs	r7, #1
    c9ee:	e7ef      	b.n	c9d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    c9f0:	2001      	movs	r0, #1
    c9f2:	71e0      	strb	r0, [r4, #7]
    c9f4:	7aa2      	ldrb	r2, [r4, #10]
    c9f6:	4630      	mov	r0, r6
    c9f8:	f7ff fcda 	bl	c3b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c9fc:	2001      	movs	r0, #1
    c9fe:	e7f3      	b.n	c9e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    ca00:	20001088 	.word	0x20001088
    ca04:	4803      	ldr	r0, [pc, #12]	; (ca14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    ca06:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ca0a:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    ca0e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ca12:	4770      	bx	lr
    ca14:	40001000 	.word	0x40001000
    ca18:	4804      	ldr	r0, [pc, #16]	; (ca2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    ca1a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ca1c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    ca20:	6281      	str	r1, [r0, #40]	; 0x28
    ca22:	4903      	ldr	r1, [pc, #12]	; (ca30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    ca24:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    ca28:	6008      	str	r0, [r1, #0]
    ca2a:	4770      	bx	lr
    ca2c:	20001088 	.word	0x20001088
    ca30:	4001f504 	.word	0x4001f504
    ca34:	4a07      	ldr	r2, [pc, #28]	; (ca54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    ca36:	2000      	movs	r0, #0
    ca38:	3208      	adds	r2, #8
    ca3a:	4906      	ldr	r1, [pc, #24]	; (ca54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    ca3c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ca40:	1d0a      	adds	r2, r1, #4
    ca42:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ca46:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ca4a:	4902      	ldr	r1, [pc, #8]	; (ca54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    ca4c:	310c      	adds	r1, #12
    ca4e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ca52:	4770      	bx	lr
    ca54:	40008000 	.word	0x40008000
    ca58:	4903      	ldr	r1, [pc, #12]	; (ca68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    ca5a:	79c9      	ldrb	r1, [r1, #7]
    ca5c:	2900      	cmp	r1, #0
    ca5e:	d102      	bne.n	ca66 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    ca60:	4902      	ldr	r1, [pc, #8]	; (ca6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    ca62:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ca66:	4770      	bx	lr
    ca68:	20001088 	.word	0x20001088
    ca6c:	4001f098 	.word	0x4001f098
    ca70:	b510      	push	{r4, lr}
    ca72:	4a14      	ldr	r2, [pc, #80]	; (cac4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    ca74:	b120      	cbz	r0, ca80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    ca76:	2801      	cmp	r0, #1
    ca78:	d011      	beq.n	ca9e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    ca7a:	f240 714c 	movw	r1, #1868	; 0x74c
    ca7e:	e01c      	b.n	caba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    ca80:	f101 0028 	add.w	r0, r1, #40	; 0x28
    ca84:	e9c2 1002 	strd	r1, r0, [r2, #8]
    ca88:	490f      	ldr	r1, [pc, #60]	; (cac8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    ca8a:	480e      	ldr	r0, [pc, #56]	; (cac4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    ca8c:	f7f8 fc20 	bl	52d0 <mpsl_fem_pa_configuration_set>
    ca90:	2800      	cmp	r0, #0
    ca92:	d015      	beq.n	cac0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    ca94:	1c40      	adds	r0, r0, #1
    ca96:	d013      	beq.n	cac0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    ca98:	f240 713b 	movw	r1, #1851	; 0x73b
    ca9c:	e00d      	b.n	caba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    ca9e:	f101 0029 	add.w	r0, r1, #41	; 0x29
    caa2:	e9c2 1002 	strd	r1, r0, [r2, #8]
    caa6:	4908      	ldr	r1, [pc, #32]	; (cac8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    caa8:	4806      	ldr	r0, [pc, #24]	; (cac4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    caaa:	f7f8 fbff 	bl	52ac <mpsl_fem_lna_configuration_set>
    caae:	2800      	cmp	r0, #0
    cab0:	d006      	beq.n	cac0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    cab2:	1c40      	adds	r0, r0, #1
    cab4:	d004      	beq.n	cac0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    cab6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    caba:	203e      	movs	r0, #62	; 0x3e
    cabc:	f7f8 fd3a 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cac0:	bd10      	pop	{r4, pc}
    cac2:	0000      	.short	0x0000
    cac4:	200002fc 	.word	0x200002fc
    cac8:	0000cbf4 	.word	0x0000cbf4
    cacc:	4802      	ldr	r0, [pc, #8]	; (cad8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    cace:	2100      	movs	r1, #0
    cad0:	71c1      	strb	r1, [r0, #7]
    cad2:	7201      	strb	r1, [r0, #8]
    cad4:	7241      	strb	r1, [r0, #9]
    cad6:	4770      	bx	lr
    cad8:	20001088 	.word	0x20001088
    cadc:	4a05      	ldr	r2, [pc, #20]	; (caf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    cade:	79d2      	ldrb	r2, [r2, #7]
    cae0:	2a01      	cmp	r2, #1
    cae2:	d006      	beq.n	caf2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    cae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cae8:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    caec:	fbb1 f1f2 	udiv	r1, r1, r2
    caf0:	1a40      	subs	r0, r0, r1
    caf2:	4770      	bx	lr
    caf4:	20001088 	.word	0x20001088
    caf8:	b570      	push	{r4, r5, r6, lr}
    cafa:	4c13      	ldr	r4, [pc, #76]	; (cb48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    cafc:	4603      	mov	r3, r0
    cafe:	460d      	mov	r5, r1
    cb00:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    cb04:	2000      	movs	r0, #0
    cb06:	b15a      	cbz	r2, cb20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    cb08:	4621      	mov	r1, r4
    cb0a:	f891 1020 	ldrb.w	r1, [r1, #32]
    cb0e:	b163      	cbz	r3, cb2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    cb10:	2b01      	cmp	r3, #1
    cb12:	d111      	bne.n	cb38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    cb14:	2a01      	cmp	r2, #1
    cb16:	4628      	mov	r0, r5
    cb18:	d012      	beq.n	cb40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    cb1a:	f004 fd6e 	bl	115fa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    cb1e:	e009      	b.n	cb34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    cb20:	f640 0147 	movw	r1, #2119	; 0x847
    cb24:	203e      	movs	r0, #62	; 0x3e
    cb26:	f7f8 fd05 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb2a:	2a01      	cmp	r2, #1
    cb2c:	4628      	mov	r0, r5
    cb2e:	d004      	beq.n	cb3a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    cb30:	f004 fd71 	bl	11616 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    cb34:	69e1      	ldr	r1, [r4, #28]
    cb36:	4408      	add	r0, r1
    cb38:	bd70      	pop	{r4, r5, r6, pc}
    cb3a:	f000 f8d1 	bl	cce0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    cb3e:	e7f9      	b.n	cb34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    cb40:	f000 f8c0 	bl	ccc4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    cb44:	e7f6      	b.n	cb34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    cb46:	0000      	.short	0x0000
    cb48:	20001088 	.word	0x20001088
    cb4c:	b510      	push	{r4, lr}
    cb4e:	f7ff fc03 	bl	c358 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    cb52:	f7ff fded 	bl	c730 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    cb56:	f7ff fe23 	bl	c7a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    cb5a:	f7ff ff53 	bl	ca04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    cb5e:	f000 fe37 	bl	d7d0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cb62:	2800      	cmp	r0, #0
    cb64:	d108      	bne.n	cb78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    cb66:	f000 fe23 	bl	d7b0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    cb6a:	2800      	cmp	r0, #0
    cb6c:	d104      	bne.n	cb78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    cb6e:	4803      	ldr	r0, [pc, #12]	; (cb7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    cb70:	6801      	ldr	r1, [r0, #0]
    cb72:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    cb76:	6001      	str	r1, [r0, #0]
    cb78:	bd10      	pop	{r4, pc}
    cb7a:	0000      	.short	0x0000
    cb7c:	40001568 	.word	0x40001568
    cb80:	b510      	push	{r4, lr}
    cb82:	4604      	mov	r4, r0
    cb84:	f7ff fbe8 	bl	c358 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    cb88:	f7ff fdd2 	bl	c730 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    cb8c:	4620      	mov	r0, r4
    cb8e:	f7ff fded 	bl	c76c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    cb92:	f000 fe1d 	bl	d7d0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cb96:	2800      	cmp	r0, #0
    cb98:	d00d      	beq.n	cbb6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    cb9a:	4a09      	ldr	r2, [pc, #36]	; (cbc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    cb9c:	6811      	ldr	r1, [r2, #0]
    cb9e:	0650      	lsls	r0, r2, #25
    cba0:	2c02      	cmp	r4, #2
    cba2:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    cba6:	d007      	beq.n	cbb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    cba8:	f3c0 2006 	ubfx	r0, r0, #8, #7
    cbac:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    cbb0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    cbb4:	6010      	str	r0, [r2, #0]
    cbb6:	bd10      	pop	{r4, pc}
    cbb8:	f3c0 6006 	ubfx	r0, r0, #24, #7
    cbbc:	e7f6      	b.n	cbac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    cbbe:	0000      	.short	0x0000
    cbc0:	40001588 	.word	0x40001588
    cbc4:	a62c0000 	.word	0xa62c0000
    cbc8:	0604a1e0 	.word	0x0604a1e0
    cbcc:	0e0c0a08 	.word	0x0e0c0a08
    cbd0:	16141210 	.word	0x16141210
    cbd4:	201e1c18 	.word	0x201e1c18
    cbd8:	28262422 	.word	0x28262422
    cbdc:	302e2c2a 	.word	0x302e2c2a
    cbe0:	38363432 	.word	0x38363432
    cbe4:	403e3c3a 	.word	0x403e3c3a
    cbe8:	48464442 	.word	0x48464442
    cbec:	024e4c4a 	.word	0x024e4c4a
    cbf0:	0000501a 	.word	0x0000501a
    cbf4:	00000001 	.word	0x00000001
    cbf8:	40001110 	.word	0x40001110
	...
    cc10:	00001e14 	.word	0x00001e14
    cc14:	00001130 	.word	0x00001130
    cc18:	00000000 	.word	0x00000000
    cc1c:	00000028 	.word	0x00000028
    cc20:	00000018 	.word	0x00000018
    cc24:	00000000 	.word	0x00000000
    cc28:	00001e14 	.word	0x00001e14
    cc2c:	00001130 	.word	0x00001130
    cc30:	00000000 	.word	0x00000000
    cc34:	00001770 	.word	0x00001770
    cc38:	00000fa0 	.word	0x00000fa0

0000cc3c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    cc3c:	b570      	push	{r4, r5, r6, lr}
    cc3e:	4605      	mov	r5, r0
    cc40:	4614      	mov	r4, r2
    cc42:	4608      	mov	r0, r1
    cc44:	f7ff fbae 	bl	c3a4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    cc48:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    cc4c:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    cc50:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    cc54:	4807      	ldr	r0, [pc, #28]	; (cc74 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    cc56:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    cc5a:	4408      	add	r0, r1
    cc5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    cc60:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    cc64:	fbb0 f5f1 	udiv	r5, r0, r1
    cc68:	4620      	mov	r0, r4
    cc6a:	f7ff fb6f 	bl	c34c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    cc6e:	4428      	add	r0, r5
    cc70:	1d40      	adds	r0, r0, #5
    cc72:	bd70      	pop	{r4, r5, r6, pc}
    cc74:	0000cd04 	.word	0x0000cd04

0000cc78 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    cc78:	b570      	push	{r4, r5, r6, lr}
    cc7a:	4d0e      	ldr	r5, [pc, #56]	; (ccb4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    cc7c:	461c      	mov	r4, r3
    cc7e:	3d08      	subs	r5, #8
    cc80:	4b0c      	ldr	r3, [pc, #48]	; (ccb4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    cc82:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    cc86:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    cc8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cc8e:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    cc92:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    cc96:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    cc9a:	4418      	add	r0, r3
    cc9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    cca0:	fbb0 f5f1 	udiv	r5, r0, r1
    cca4:	4610      	mov	r0, r2
    cca6:	f7ff fb51 	bl	c34c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ccaa:	4428      	add	r0, r5
    ccac:	4420      	add	r0, r4
    ccae:	1d40      	adds	r0, r0, #5
    ccb0:	bd70      	pop	{r4, r5, r6, pc}
    ccb2:	0000      	.short	0x0000
    ccb4:	0000cd04 	.word	0x0000cd04

0000ccb8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    ccb8:	4901      	ldr	r1, [pc, #4]	; (ccc0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    ccba:	b2c0      	uxtb	r0, r0
    ccbc:	6008      	str	r0, [r1, #0]
    ccbe:	4770      	bx	lr
    ccc0:	4000150c 	.word	0x4000150c

0000ccc4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    ccc4:	4a05      	ldr	r2, [pc, #20]	; (ccdc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    ccc6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    ccca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ccce:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    ccd2:	fbb1 f1f2 	udiv	r1, r1, r2
    ccd6:	4408      	add	r0, r1
    ccd8:	1e80      	subs	r0, r0, #2
    ccda:	4770      	bx	lr
    ccdc:	0000ccfc 	.word	0x0000ccfc

0000cce0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    cce0:	4a05      	ldr	r2, [pc, #20]	; (ccf8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    cce2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    cce6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ccea:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    ccee:	fbb1 f1f2 	udiv	r1, r1, r2
    ccf2:	4408      	add	r0, r1
    ccf4:	4770      	bx	lr
    ccf6:	0000      	.short	0x0000
    ccf8:	0000ccfc 	.word	0x0000ccfc
    ccfc:	05dc0000 	.word	0x05dc0000
    cd00:	000003e8 	.word	0x000003e8
    cd04:	00000000 	.word	0x00000000
    cd08:	00001e14 	.word	0x00001e14
    cd0c:	00001130 	.word	0x00001130

0000cd10 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    cd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd14:	461e      	mov	r6, r3
    cd16:	4617      	mov	r7, r2
    cd18:	460c      	mov	r4, r1
    cd1a:	4605      	mov	r5, r0
    cd1c:	f7f4 fd4c 	bl	17b8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    cd20:	f8df 90a4 	ldr.w	r9, [pc, #164]	; cdc8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    cd24:	4680      	mov	r8, r0
    cd26:	f899 0000 	ldrb.w	r0, [r9]
    cd2a:	42a8      	cmp	r0, r5
    cd2c:	d110      	bne.n	cd50 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cd2e:	f899 1001 	ldrb.w	r1, [r9, #1]
    cd32:	4648      	mov	r0, r9
    cd34:	42a1      	cmp	r1, r4
    cd36:	d10b      	bne.n	cd50 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cd38:	f990 1002 	ldrsb.w	r1, [r0, #2]
    cd3c:	42b9      	cmp	r1, r7
    cd3e:	d107      	bne.n	cd50 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cd40:	78c2      	ldrb	r2, [r0, #3]
    cd42:	4542      	cmp	r2, r8
    cd44:	d104      	bne.n	cd50 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cd46:	8881      	ldrh	r1, [r0, #4]
    cd48:	8031      	strh	r1, [r6, #0]
    cd4a:	7980      	ldrb	r0, [r0, #6]
    cd4c:	70b0      	strb	r0, [r6, #2]
    cd4e:	e036      	b.n	cdbe <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    cd50:	463a      	mov	r2, r7
    cd52:	4621      	mov	r1, r4
    cd54:	2d01      	cmp	r5, #1
    cd56:	d009      	beq.n	cd6c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    cd58:	2d02      	cmp	r5, #2
    cd5a:	d009      	beq.n	cd70 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    cd5c:	2d04      	cmp	r5, #4
    cd5e:	d009      	beq.n	cd74 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    cd60:	2d08      	cmp	r5, #8
    cd62:	d009      	beq.n	cd78 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    cd64:	f240 4133 	movw	r1, #1075	; 0x433
    cd68:	2006      	movs	r0, #6
    cd6a:	e00c      	b.n	cd86 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    cd6c:	2000      	movs	r0, #0
    cd6e:	e004      	b.n	cd7a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cd70:	2001      	movs	r0, #1
    cd72:	e002      	b.n	cd7a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cd74:	2003      	movs	r0, #3
    cd76:	e000      	b.n	cd7a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cd78:	2002      	movs	r0, #2
    cd7a:	466b      	mov	r3, sp
    cd7c:	f7f4 fd62 	bl	1844 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    cd80:	b118      	cbz	r0, cd8a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    cd82:	213d      	movs	r1, #61	; 0x3d
    cd84:	2075      	movs	r0, #117	; 0x75
    cd86:	f7f8 fbd5 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd8a:	4620      	mov	r0, r4
    cd8c:	f7ff f886 	bl	be9c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    cd90:	4602      	mov	r2, r0
    cd92:	4631      	mov	r1, r6
    cd94:	f99d 0000 	ldrsb.w	r0, [sp]
    cd98:	f7f8 faac 	bl	52f4 <mpsl_fem_tx_power_split>
    cd9c:	4601      	mov	r1, r0
    cd9e:	f889 1007 	strb.w	r1, [r9, #7]
    cda2:	8831      	ldrh	r1, [r6, #0]
    cda4:	f8a9 1004 	strh.w	r1, [r9, #4]
    cda8:	78b1      	ldrb	r1, [r6, #2]
    cdaa:	f889 1006 	strb.w	r1, [r9, #6]
    cdae:	f889 5000 	strb.w	r5, [r9]
    cdb2:	f889 4001 	strb.w	r4, [r9, #1]
    cdb6:	f889 7002 	strb.w	r7, [r9, #2]
    cdba:	f889 8003 	strb.w	r8, [r9, #3]
    cdbe:	f999 0007 	ldrsb.w	r0, [r9, #7]
    cdc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cdc6:	0000      	.short	0x0000
    cdc8:	20000345 	.word	0x20000345

0000cdcc <__udivmoddi4>:
    cdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdd0:	4607      	mov	r7, r0
    cdd2:	468c      	mov	ip, r1
    cdd4:	4608      	mov	r0, r1
    cdd6:	9e09      	ldr	r6, [sp, #36]	; 0x24
    cdd8:	4615      	mov	r5, r2
    cdda:	463c      	mov	r4, r7
    cddc:	4619      	mov	r1, r3
    cdde:	2b00      	cmp	r3, #0
    cde0:	f040 80c6 	bne.w	cf70 <__udivmoddi4+0x1a4>
    cde4:	4282      	cmp	r2, r0
    cde6:	fab2 f782 	clz	r7, r2
    cdea:	d946      	bls.n	ce7a <__udivmoddi4+0xae>
    cdec:	b14f      	cbz	r7, ce02 <__udivmoddi4+0x36>
    cdee:	f1c7 0e20 	rsb	lr, r7, #32
    cdf2:	fa24 fe0e 	lsr.w	lr, r4, lr
    cdf6:	fa00 f307 	lsl.w	r3, r0, r7
    cdfa:	40bd      	lsls	r5, r7
    cdfc:	ea4e 0c03 	orr.w	ip, lr, r3
    ce00:	40bc      	lsls	r4, r7
    ce02:	ea4f 4815 	mov.w	r8, r5, lsr #16
    ce06:	fa1f fe85 	uxth.w	lr, r5
    ce0a:	fbbc f9f8 	udiv	r9, ip, r8
    ce0e:	0c22      	lsrs	r2, r4, #16
    ce10:	fb08 c319 	mls	r3, r8, r9, ip
    ce14:	fb09 fa0e 	mul.w	sl, r9, lr
    ce18:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    ce1c:	459a      	cmp	sl, r3
    ce1e:	d928      	bls.n	ce72 <__udivmoddi4+0xa6>
    ce20:	18eb      	adds	r3, r5, r3
    ce22:	f109 30ff 	add.w	r0, r9, #4294967295
    ce26:	d204      	bcs.n	ce32 <__udivmoddi4+0x66>
    ce28:	459a      	cmp	sl, r3
    ce2a:	d902      	bls.n	ce32 <__udivmoddi4+0x66>
    ce2c:	f1a9 0002 	sub.w	r0, r9, #2
    ce30:	442b      	add	r3, r5
    ce32:	eba3 030a 	sub.w	r3, r3, sl
    ce36:	b2a4      	uxth	r4, r4
    ce38:	fbb3 f2f8 	udiv	r2, r3, r8
    ce3c:	fb08 3312 	mls	r3, r8, r2, r3
    ce40:	fb02 fe0e 	mul.w	lr, r2, lr
    ce44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    ce48:	45a6      	cmp	lr, r4
    ce4a:	d914      	bls.n	ce76 <__udivmoddi4+0xaa>
    ce4c:	192c      	adds	r4, r5, r4
    ce4e:	f102 33ff 	add.w	r3, r2, #4294967295
    ce52:	d203      	bcs.n	ce5c <__udivmoddi4+0x90>
    ce54:	45a6      	cmp	lr, r4
    ce56:	d901      	bls.n	ce5c <__udivmoddi4+0x90>
    ce58:	1e93      	subs	r3, r2, #2
    ce5a:	442c      	add	r4, r5
    ce5c:	eba4 040e 	sub.w	r4, r4, lr
    ce60:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ce64:	b11e      	cbz	r6, ce6e <__udivmoddi4+0xa2>
    ce66:	40fc      	lsrs	r4, r7
    ce68:	2300      	movs	r3, #0
    ce6a:	6034      	str	r4, [r6, #0]
    ce6c:	6073      	str	r3, [r6, #4]
    ce6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce72:	4648      	mov	r0, r9
    ce74:	e7dd      	b.n	ce32 <__udivmoddi4+0x66>
    ce76:	4613      	mov	r3, r2
    ce78:	e7f0      	b.n	ce5c <__udivmoddi4+0x90>
    ce7a:	b902      	cbnz	r2, ce7e <__udivmoddi4+0xb2>
    ce7c:	deff      	udf	#255	; 0xff
    ce7e:	bb87      	cbnz	r7, cee2 <__udivmoddi4+0x116>
    ce80:	1a83      	subs	r3, r0, r2
    ce82:	2101      	movs	r1, #1
    ce84:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ce88:	b2aa      	uxth	r2, r5
    ce8a:	fbb3 fcfe 	udiv	ip, r3, lr
    ce8e:	0c20      	lsrs	r0, r4, #16
    ce90:	fb0e 331c 	mls	r3, lr, ip, r3
    ce94:	fb0c f802 	mul.w	r8, ip, r2
    ce98:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    ce9c:	4598      	cmp	r8, r3
    ce9e:	d963      	bls.n	cf68 <__udivmoddi4+0x19c>
    cea0:	18eb      	adds	r3, r5, r3
    cea2:	f10c 30ff 	add.w	r0, ip, #4294967295
    cea6:	d204      	bcs.n	ceb2 <__udivmoddi4+0xe6>
    cea8:	4598      	cmp	r8, r3
    ceaa:	d902      	bls.n	ceb2 <__udivmoddi4+0xe6>
    ceac:	f1ac 0002 	sub.w	r0, ip, #2
    ceb0:	442b      	add	r3, r5
    ceb2:	eba3 0308 	sub.w	r3, r3, r8
    ceb6:	b2a4      	uxth	r4, r4
    ceb8:	fbb3 fcfe 	udiv	ip, r3, lr
    cebc:	fb0e 331c 	mls	r3, lr, ip, r3
    cec0:	fb0c f202 	mul.w	r2, ip, r2
    cec4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cec8:	42a2      	cmp	r2, r4
    ceca:	d94f      	bls.n	cf6c <__udivmoddi4+0x1a0>
    cecc:	192c      	adds	r4, r5, r4
    cece:	f10c 33ff 	add.w	r3, ip, #4294967295
    ced2:	d204      	bcs.n	cede <__udivmoddi4+0x112>
    ced4:	42a2      	cmp	r2, r4
    ced6:	d902      	bls.n	cede <__udivmoddi4+0x112>
    ced8:	f1ac 0302 	sub.w	r3, ip, #2
    cedc:	442c      	add	r4, r5
    cede:	1aa4      	subs	r4, r4, r2
    cee0:	e7be      	b.n	ce60 <__udivmoddi4+0x94>
    cee2:	f1c7 0c20 	rsb	ip, r7, #32
    cee6:	fa20 f80c 	lsr.w	r8, r0, ip
    ceea:	fa00 f307 	lsl.w	r3, r0, r7
    ceee:	fa24 fc0c 	lsr.w	ip, r4, ip
    cef2:	40bd      	lsls	r5, r7
    cef4:	ea4c 0203 	orr.w	r2, ip, r3
    cef8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cefc:	b2ab      	uxth	r3, r5
    cefe:	fbb8 fcfe 	udiv	ip, r8, lr
    cf02:	0c11      	lsrs	r1, r2, #16
    cf04:	fb0e 801c 	mls	r0, lr, ip, r8
    cf08:	fb0c f903 	mul.w	r9, ip, r3
    cf0c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    cf10:	4581      	cmp	r9, r0
    cf12:	fa04 f407 	lsl.w	r4, r4, r7
    cf16:	d923      	bls.n	cf60 <__udivmoddi4+0x194>
    cf18:	1828      	adds	r0, r5, r0
    cf1a:	f10c 31ff 	add.w	r1, ip, #4294967295
    cf1e:	d204      	bcs.n	cf2a <__udivmoddi4+0x15e>
    cf20:	4581      	cmp	r9, r0
    cf22:	d902      	bls.n	cf2a <__udivmoddi4+0x15e>
    cf24:	f1ac 0102 	sub.w	r1, ip, #2
    cf28:	4428      	add	r0, r5
    cf2a:	eba0 0009 	sub.w	r0, r0, r9
    cf2e:	b292      	uxth	r2, r2
    cf30:	fbb0 fcfe 	udiv	ip, r0, lr
    cf34:	fb0e 001c 	mls	r0, lr, ip, r0
    cf38:	fb0c f803 	mul.w	r8, ip, r3
    cf3c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    cf40:	4598      	cmp	r8, r3
    cf42:	d90f      	bls.n	cf64 <__udivmoddi4+0x198>
    cf44:	18eb      	adds	r3, r5, r3
    cf46:	f10c 32ff 	add.w	r2, ip, #4294967295
    cf4a:	d204      	bcs.n	cf56 <__udivmoddi4+0x18a>
    cf4c:	4598      	cmp	r8, r3
    cf4e:	d902      	bls.n	cf56 <__udivmoddi4+0x18a>
    cf50:	f1ac 0202 	sub.w	r2, ip, #2
    cf54:	442b      	add	r3, r5
    cf56:	eba3 0308 	sub.w	r3, r3, r8
    cf5a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    cf5e:	e791      	b.n	ce84 <__udivmoddi4+0xb8>
    cf60:	4661      	mov	r1, ip
    cf62:	e7e2      	b.n	cf2a <__udivmoddi4+0x15e>
    cf64:	4662      	mov	r2, ip
    cf66:	e7f6      	b.n	cf56 <__udivmoddi4+0x18a>
    cf68:	4660      	mov	r0, ip
    cf6a:	e7a2      	b.n	ceb2 <__udivmoddi4+0xe6>
    cf6c:	4663      	mov	r3, ip
    cf6e:	e7b6      	b.n	cede <__udivmoddi4+0x112>
    cf70:	4283      	cmp	r3, r0
    cf72:	d905      	bls.n	cf80 <__udivmoddi4+0x1b4>
    cf74:	b10e      	cbz	r6, cf7a <__udivmoddi4+0x1ae>
    cf76:	e9c6 7000 	strd	r7, r0, [r6]
    cf7a:	2100      	movs	r1, #0
    cf7c:	4608      	mov	r0, r1
    cf7e:	e776      	b.n	ce6e <__udivmoddi4+0xa2>
    cf80:	fab3 f183 	clz	r1, r3
    cf84:	b981      	cbnz	r1, cfa8 <__udivmoddi4+0x1dc>
    cf86:	4283      	cmp	r3, r0
    cf88:	d301      	bcc.n	cf8e <__udivmoddi4+0x1c2>
    cf8a:	42ba      	cmp	r2, r7
    cf8c:	d80a      	bhi.n	cfa4 <__udivmoddi4+0x1d8>
    cf8e:	1abc      	subs	r4, r7, r2
    cf90:	eb60 0303 	sbc.w	r3, r0, r3
    cf94:	2001      	movs	r0, #1
    cf96:	469c      	mov	ip, r3
    cf98:	2e00      	cmp	r6, #0
    cf9a:	d068      	beq.n	d06e <__udivmoddi4+0x2a2>
    cf9c:	e9c6 4c00 	strd	r4, ip, [r6]
    cfa0:	2100      	movs	r1, #0
    cfa2:	e764      	b.n	ce6e <__udivmoddi4+0xa2>
    cfa4:	4608      	mov	r0, r1
    cfa6:	e7f7      	b.n	cf98 <__udivmoddi4+0x1cc>
    cfa8:	f1c1 0c20 	rsb	ip, r1, #32
    cfac:	408b      	lsls	r3, r1
    cfae:	fa22 f40c 	lsr.w	r4, r2, ip
    cfb2:	431c      	orrs	r4, r3
    cfb4:	fa02 f501 	lsl.w	r5, r2, r1
    cfb8:	fa00 f301 	lsl.w	r3, r0, r1
    cfbc:	fa27 f20c 	lsr.w	r2, r7, ip
    cfc0:	fa20 fb0c 	lsr.w	fp, r0, ip
    cfc4:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cfc8:	4313      	orrs	r3, r2
    cfca:	fbbb f8f9 	udiv	r8, fp, r9
    cfce:	fa1f fe84 	uxth.w	lr, r4
    cfd2:	fb09 bb18 	mls	fp, r9, r8, fp
    cfd6:	0c1a      	lsrs	r2, r3, #16
    cfd8:	fb08 fa0e 	mul.w	sl, r8, lr
    cfdc:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    cfe0:	4592      	cmp	sl, r2
    cfe2:	fa07 f701 	lsl.w	r7, r7, r1
    cfe6:	d93e      	bls.n	d066 <__udivmoddi4+0x29a>
    cfe8:	18a2      	adds	r2, r4, r2
    cfea:	f108 30ff 	add.w	r0, r8, #4294967295
    cfee:	d204      	bcs.n	cffa <__udivmoddi4+0x22e>
    cff0:	4592      	cmp	sl, r2
    cff2:	d902      	bls.n	cffa <__udivmoddi4+0x22e>
    cff4:	f1a8 0002 	sub.w	r0, r8, #2
    cff8:	4422      	add	r2, r4
    cffa:	eba2 020a 	sub.w	r2, r2, sl
    cffe:	b29b      	uxth	r3, r3
    d000:	fbb2 f8f9 	udiv	r8, r2, r9
    d004:	fb09 2218 	mls	r2, r9, r8, r2
    d008:	fb08 fe0e 	mul.w	lr, r8, lr
    d00c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    d010:	4596      	cmp	lr, r2
    d012:	d92a      	bls.n	d06a <__udivmoddi4+0x29e>
    d014:	18a2      	adds	r2, r4, r2
    d016:	f108 33ff 	add.w	r3, r8, #4294967295
    d01a:	d204      	bcs.n	d026 <__udivmoddi4+0x25a>
    d01c:	4596      	cmp	lr, r2
    d01e:	d902      	bls.n	d026 <__udivmoddi4+0x25a>
    d020:	f1a8 0302 	sub.w	r3, r8, #2
    d024:	4422      	add	r2, r4
    d026:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    d02a:	fba0 9305 	umull	r9, r3, r0, r5
    d02e:	eba2 020e 	sub.w	r2, r2, lr
    d032:	429a      	cmp	r2, r3
    d034:	46ce      	mov	lr, r9
    d036:	4698      	mov	r8, r3
    d038:	d302      	bcc.n	d040 <__udivmoddi4+0x274>
    d03a:	d106      	bne.n	d04a <__udivmoddi4+0x27e>
    d03c:	454f      	cmp	r7, r9
    d03e:	d204      	bcs.n	d04a <__udivmoddi4+0x27e>
    d040:	ebb9 0e05 	subs.w	lr, r9, r5
    d044:	eb63 0804 	sbc.w	r8, r3, r4
    d048:	3801      	subs	r0, #1
    d04a:	b186      	cbz	r6, d06e <__udivmoddi4+0x2a2>
    d04c:	ebb7 030e 	subs.w	r3, r7, lr
    d050:	eb62 0708 	sbc.w	r7, r2, r8
    d054:	fa07 fc0c 	lsl.w	ip, r7, ip
    d058:	40cb      	lsrs	r3, r1
    d05a:	ea4c 0303 	orr.w	r3, ip, r3
    d05e:	40cf      	lsrs	r7, r1
    d060:	e9c6 3700 	strd	r3, r7, [r6]
    d064:	e79c      	b.n	cfa0 <__udivmoddi4+0x1d4>
    d066:	4640      	mov	r0, r8
    d068:	e7c7      	b.n	cffa <__udivmoddi4+0x22e>
    d06a:	4643      	mov	r3, r8
    d06c:	e7db      	b.n	d026 <__udivmoddi4+0x25a>
    d06e:	4631      	mov	r1, r6
    d070:	e6fd      	b.n	ce6e <__udivmoddi4+0xa2>
    d072:	2804      	cmp	r0, #4
    d074:	d202      	bcs.n	d07c <__udivmoddi4+0x2b0>
    d076:	f04f 0028 	mov.w	r0, #40	; 0x28
    d07a:	4770      	bx	lr
    d07c:	d102      	bne.n	d084 <__udivmoddi4+0x2b8>
    d07e:	f04f 0010 	mov.w	r0, #16
    d082:	4770      	bx	lr
    d084:	f04f 0000 	mov.w	r0, #0
    d088:	4770      	bx	lr
    d08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d08e:	000d      	movs	r5, r1
    d090:	4604      	mov	r4, r0
    d092:	f04f 0602 	mov.w	r6, #2
    d096:	f04f 0701 	mov.w	r7, #1
    d09a:	d008      	beq.n	d0ae <__udivmoddi4+0x2e2>
    d09c:	7828      	ldrb	r0, [r5, #0]
    d09e:	b1d0      	cbz	r0, d0d6 <__udivmoddi4+0x30a>
    d0a0:	2801      	cmp	r0, #1
    d0a2:	d007      	beq.n	d0b4 <__udivmoddi4+0x2e8>
    d0a4:	2802      	cmp	r0, #2
    d0a6:	d014      	beq.n	d0d2 <__udivmoddi4+0x306>
    d0a8:	2803      	cmp	r0, #3
    d0aa:	d13e      	bne.n	d12a <__udivmoddi4+0x35e>
    d0ac:	e016      	b.n	d0dc <__udivmoddi4+0x310>
    d0ae:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    d0b2:	e00e      	b.n	d0d2 <__udivmoddi4+0x306>
    d0b4:	6868      	ldr	r0, [r5, #4]
    d0b6:	28c8      	cmp	r0, #200	; 0xc8
    d0b8:	d303      	bcc.n	d0c2 <__udivmoddi4+0x2f6>
    d0ba:	2103      	movs	r1, #3
    d0bc:	f7f5 fcb4 	bl	2a28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d0c0:	b108      	cbz	r0, d0c6 <__udivmoddi4+0x2fa>
    d0c2:	2600      	movs	r6, #0
    d0c4:	e007      	b.n	d0d6 <__udivmoddi4+0x30a>
    d0c6:	4620      	mov	r0, r4
    d0c8:	6869      	ldr	r1, [r5, #4]
    d0ca:	f000 f943 	bl	d354 <__udivmoddi4+0x588>
    d0ce:	2601      	movs	r6, #1
    d0d0:	e001      	b.n	d0d6 <__udivmoddi4+0x30a>
    d0d2:	f7f4 fc05 	bl	18e0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
    d0d6:	4630      	mov	r0, r6
    d0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0dc:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d0e0:	2800      	cmp	r0, #0
    d0e2:	d1f6      	bne.n	d0d2 <__udivmoddi4+0x306>
    d0e4:	6868      	ldr	r0, [r5, #4]
    d0e6:	f7f4 fbcd 	bl	1884 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    d0ea:	b1f0      	cbz	r0, d12a <__udivmoddi4+0x35e>
    d0ec:	6869      	ldr	r1, [r5, #4]
    d0ee:	7808      	ldrb	r0, [r1, #0]
    d0f0:	b130      	cbz	r0, d100 <__udivmoddi4+0x334>
    d0f2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d0f6:	2805      	cmp	r0, #5
    d0f8:	d008      	beq.n	d10c <__udivmoddi4+0x340>
    d0fa:	f44f 71be 	mov.w	r1, #380	; 0x17c
    d0fe:	e011      	b.n	d124 <__udivmoddi4+0x358>
    d100:	4620      	mov	r0, r4
    d102:	f000 f92f 	bl	d364 <__udivmoddi4+0x598>
    d106:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    d10a:	e7e2      	b.n	d0d2 <__udivmoddi4+0x306>
    d10c:	4620      	mov	r0, r4
    d10e:	f000 f942 	bl	d396 <__udivmoddi4+0x5ca>
    d112:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d116:	4621      	mov	r1, r4
    d118:	f000 f80a 	bl	d130 <__udivmoddi4+0x364>
    d11c:	2800      	cmp	r0, #0
    d11e:	d1d8      	bne.n	d0d2 <__udivmoddi4+0x306>
    d120:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    d124:	206a      	movs	r0, #106	; 0x6a
    d126:	f7f7 ff35 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d12a:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d12e:	e7d0      	b.n	d0d2 <__udivmoddi4+0x306>
    d130:	f7f5 be5c 	b.w	2dec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    d134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d138:	460d      	mov	r5, r1
    d13a:	0004      	movs	r4, r0
    d13c:	d00c      	beq.n	d158 <__udivmoddi4+0x38c>
    d13e:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    d142:	2700      	movs	r7, #0
    d144:	2002      	movs	r0, #2
    d146:	2d09      	cmp	r5, #9
    d148:	d270      	bcs.n	d22c <__udivmoddi4+0x460>
    d14a:	e8df f005 	tbb	[pc, r5]
    d14e:	1108      	.short	0x1108
    d150:	70653535 	.word	0x70653535
    d154:	0093a588 	.word	0x0093a588
    d158:	f44f 71cb 	mov.w	r1, #406	; 0x196
    d15c:	e0f7      	b.n	d34e <__udivmoddi4+0x582>
    d15e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d162:	2804      	cmp	r0, #4
    d164:	d07a      	beq.n	d25c <__udivmoddi4+0x490>
    d166:	2803      	cmp	r0, #3
    d168:	d0fc      	beq.n	d164 <__udivmoddi4+0x398>
    d16a:	f240 11a1 	movw	r1, #417	; 0x1a1
    d16e:	e0ee      	b.n	d34e <__udivmoddi4+0x582>
    d170:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d174:	2804      	cmp	r0, #4
    d176:	d004      	beq.n	d182 <__udivmoddi4+0x3b6>
    d178:	2803      	cmp	r0, #3
    d17a:	d002      	beq.n	d182 <__udivmoddi4+0x3b6>
    d17c:	f240 11a5 	movw	r1, #421	; 0x1a5
    d180:	e0e5      	b.n	d34e <__udivmoddi4+0x582>
    d182:	2005      	movs	r0, #5
    d184:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d188:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d18c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d190:	bbb0      	cbnz	r0, d200 <__udivmoddi4+0x434>
    d192:	2100      	movs	r1, #0
    d194:	4620      	mov	r0, r4
    d196:	f000 f8dd 	bl	d354 <__udivmoddi4+0x588>
    d19a:	7820      	ldrb	r0, [r4, #0]
    d19c:	2801      	cmp	r0, #1
    d19e:	d006      	beq.n	d1ae <__udivmoddi4+0x3e2>
    d1a0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    d1a4:	e9c4 0106 	strd	r0, r1, [r4, #24]
    d1a8:	2100      	movs	r1, #0
    d1aa:	6a22      	ldr	r2, [r4, #32]
    d1ac:	e048      	b.n	d240 <__udivmoddi4+0x474>
    d1ae:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d1b2:	f7f5 fd27 	bl	2c04 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    d1b6:	e7f5      	b.n	d1a4 <__udivmoddi4+0x3d8>
    d1b8:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    d1bc:	2904      	cmp	r1, #4
    d1be:	d004      	beq.n	d1ca <__udivmoddi4+0x3fe>
    d1c0:	2903      	cmp	r1, #3
    d1c2:	d002      	beq.n	d1ca <__udivmoddi4+0x3fe>
    d1c4:	f240 11c3 	movw	r1, #451	; 0x1c3
    d1c8:	e0c1      	b.n	d34e <__udivmoddi4+0x582>
    d1ca:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    d1ce:	b122      	cbz	r2, d1da <__udivmoddi4+0x40e>
    d1d0:	4621      	mov	r1, r4
    d1d2:	4630      	mov	r0, r6
    d1d4:	f000 f8fe 	bl	d3d4 <__udivmoddi4+0x608>
    d1d8:	e0b1      	b.n	d33e <__udivmoddi4+0x572>
    d1da:	2904      	cmp	r1, #4
    d1dc:	d000      	beq.n	d1e0 <__udivmoddi4+0x414>
    d1de:	2001      	movs	r0, #1
    d1e0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d1e4:	6a22      	ldr	r2, [r4, #32]
    d1e6:	2d02      	cmp	r5, #2
    d1e8:	d00b      	beq.n	d202 <__udivmoddi4+0x436>
    d1ea:	2106      	movs	r1, #6
    d1ec:	4630      	mov	r0, r6
    d1ee:	4790      	blx	r2
    d1f0:	2800      	cmp	r0, #0
    d1f2:	d06d      	beq.n	d2d0 <__udivmoddi4+0x504>
    d1f4:	7800      	ldrb	r0, [r0, #0]
    d1f6:	2800      	cmp	r0, #0
    d1f8:	d06a      	beq.n	d2d0 <__udivmoddi4+0x504>
    d1fa:	f240 11dd 	movw	r1, #477	; 0x1dd
    d1fe:	e0a6      	b.n	d34e <__udivmoddi4+0x582>
    d200:	e034      	b.n	d26c <__udivmoddi4+0x4a0>
    d202:	2105      	movs	r1, #5
    d204:	4630      	mov	r0, r6
    d206:	4790      	blx	r2
    d208:	2800      	cmp	r0, #0
    d20a:	d07c      	beq.n	d306 <__udivmoddi4+0x53a>
    d20c:	7800      	ldrb	r0, [r0, #0]
    d20e:	2800      	cmp	r0, #0
    d210:	d079      	beq.n	d306 <__udivmoddi4+0x53a>
    d212:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    d216:	e09a      	b.n	d34e <__udivmoddi4+0x582>
    d218:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d21c:	2805      	cmp	r0, #5
    d21e:	d002      	beq.n	d226 <__udivmoddi4+0x45a>
    d220:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    d224:	e093      	b.n	d34e <__udivmoddi4+0x582>
    d226:	2102      	movs	r1, #2
    d228:	6a22      	ldr	r2, [r4, #32]
    d22a:	e009      	b.n	d240 <__udivmoddi4+0x474>
    d22c:	e07e      	b.n	d32c <__udivmoddi4+0x560>
    d22e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d232:	2805      	cmp	r0, #5
    d234:	d002      	beq.n	d23c <__udivmoddi4+0x470>
    d236:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    d23a:	e088      	b.n	d34e <__udivmoddi4+0x582>
    d23c:	6a22      	ldr	r2, [r4, #32]
    d23e:	2101      	movs	r1, #1
    d240:	4630      	mov	r0, r6
    d242:	4790      	blx	r2
    d244:	4601      	mov	r1, r0
    d246:	4620      	mov	r0, r4
    d248:	f7ff ff1f 	bl	d08a <__udivmoddi4+0x2be>
    d24c:	2802      	cmp	r0, #2
    d24e:	d076      	beq.n	d33e <__udivmoddi4+0x572>
    d250:	b3e8      	cbz	r0, d2ce <__udivmoddi4+0x502>
    d252:	2801      	cmp	r0, #1
    d254:	d06d      	beq.n	d332 <__udivmoddi4+0x566>
    d256:	f240 212a 	movw	r1, #554	; 0x22a
    d25a:	e078      	b.n	d34e <__udivmoddi4+0x582>
    d25c:	e071      	b.n	d342 <__udivmoddi4+0x576>
    d25e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d262:	2805      	cmp	r0, #5
    d264:	d002      	beq.n	d26c <__udivmoddi4+0x4a0>
    d266:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    d26a:	e070      	b.n	d34e <__udivmoddi4+0x582>
    d26c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d270:	f7f4 bb36 	b.w	18e0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
    d274:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d278:	2805      	cmp	r0, #5
    d27a:	d002      	beq.n	d282 <__udivmoddi4+0x4b6>
    d27c:	f240 11f5 	movw	r1, #501	; 0x1f5
    d280:	e065      	b.n	d34e <__udivmoddi4+0x582>
    d282:	6a22      	ldr	r2, [r4, #32]
    d284:	210a      	movs	r1, #10
    d286:	4630      	mov	r0, r6
    d288:	4790      	blx	r2
    d28a:	4601      	mov	r1, r0
    d28c:	4620      	mov	r0, r4
    d28e:	f7ff fefc 	bl	d08a <__udivmoddi4+0x2be>
    d292:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    d296:	e05a      	b.n	d34e <__udivmoddi4+0x582>
    d298:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    d29c:	2905      	cmp	r1, #5
    d29e:	d007      	beq.n	d2b0 <__udivmoddi4+0x4e4>
    d2a0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    d2a4:	b10a      	cbz	r2, d2aa <__udivmoddi4+0x4de>
    d2a6:	2903      	cmp	r1, #3
    d2a8:	d002      	beq.n	d2b0 <__udivmoddi4+0x4e4>
    d2aa:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    d2ae:	e04e      	b.n	d34e <__udivmoddi4+0x582>
    d2b0:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    d2b4:	b129      	cbz	r1, d2c2 <__udivmoddi4+0x4f6>
    d2b6:	4621      	mov	r1, r4
    d2b8:	4630      	mov	r0, r6
    d2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d2be:	f000 b889 	b.w	d3d4 <__udivmoddi4+0x608>
    d2c2:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
    d2c6:	b199      	cbz	r1, d2f0 <__udivmoddi4+0x524>
    d2c8:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d2cc:	e001      	b.n	d2d2 <__udivmoddi4+0x506>
    d2ce:	e033      	b.n	d338 <__udivmoddi4+0x56c>
    d2d0:	e035      	b.n	d33e <__udivmoddi4+0x572>
    d2d2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d2d6:	6a22      	ldr	r2, [r4, #32]
    d2d8:	2108      	movs	r1, #8
    d2da:	4630      	mov	r0, r6
    d2dc:	4790      	blx	r2
    d2de:	2800      	cmp	r0, #0
    d2e0:	d011      	beq.n	d306 <__udivmoddi4+0x53a>
    d2e2:	7800      	ldrb	r0, [r0, #0]
    d2e4:	2800      	cmp	r0, #0
    d2e6:	d00e      	beq.n	d306 <__udivmoddi4+0x53a>
    d2e8:	f44f 7102 	mov.w	r1, #520	; 0x208
    d2ec:	e02f      	b.n	d34e <__udivmoddi4+0x582>
    d2ee:	e00a      	b.n	d306 <__udivmoddi4+0x53a>
    d2f0:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    d2f4:	b161      	cbz	r1, d310 <__udivmoddi4+0x544>
    d2f6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d2fa:	4621      	mov	r1, r4
    d2fc:	f7ff ff18 	bl	d130 <__udivmoddi4+0x364>
    d300:	b118      	cbz	r0, d30a <__udivmoddi4+0x53e>
    d302:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    d306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d30a:	f44f 7103 	mov.w	r1, #524	; 0x20c
    d30e:	e01e      	b.n	d34e <__udivmoddi4+0x582>
    d310:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d314:	6a22      	ldr	r2, [r4, #32]
    d316:	2107      	movs	r1, #7
    d318:	4630      	mov	r0, r6
    d31a:	4790      	blx	r2
    d31c:	2800      	cmp	r0, #0
    d31e:	d0f2      	beq.n	d306 <__udivmoddi4+0x53a>
    d320:	7800      	ldrb	r0, [r0, #0]
    d322:	2800      	cmp	r0, #0
    d324:	d0ef      	beq.n	d306 <__udivmoddi4+0x53a>
    d326:	f44f 7105 	mov.w	r1, #532	; 0x214
    d32a:	e010      	b.n	d34e <__udivmoddi4+0x582>
    d32c:	f240 2119 	movw	r1, #537	; 0x219
    d330:	e00d      	b.n	d34e <__udivmoddi4+0x582>
    d332:	2104      	movs	r1, #4
    d334:	6a22      	ldr	r2, [r4, #32]
    d336:	e783      	b.n	d240 <__udivmoddi4+0x474>
    d338:	2103      	movs	r1, #3
    d33a:	6a22      	ldr	r2, [r4, #32]
    d33c:	e780      	b.n	d240 <__udivmoddi4+0x474>
    d33e:	2d00      	cmp	r5, #0
    d340:	d1e1      	bne.n	d306 <__udivmoddi4+0x53a>
    d342:	f000 f8fd 	bl	d540 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    d346:	2800      	cmp	r0, #0
    d348:	d0dd      	beq.n	d306 <__udivmoddi4+0x53a>
    d34a:	f240 2133 	movw	r1, #563	; 0x233
    d34e:	206a      	movs	r0, #106	; 0x6a
    d350:	f7f7 fe20 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d354:	4602      	mov	r2, r0
    d356:	7803      	ldrb	r3, [r0, #0]
    d358:	6840      	ldr	r0, [r0, #4]
    d35a:	4408      	add	r0, r1
    d35c:	6050      	str	r0, [r2, #4]
    d35e:	3859      	subs	r0, #89	; 0x59
    d360:	f7f6 bc56 	b.w	3c10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    d364:	2201      	movs	r2, #1
    d366:	7002      	strb	r2, [r0, #0]
    d368:	2200      	movs	r2, #0
    d36a:	72c2      	strb	r2, [r0, #11]
    d36c:	790a      	ldrb	r2, [r1, #4]
    d36e:	b172      	cbz	r2, d38e <__udivmoddi4+0x5c2>
    d370:	2200      	movs	r2, #0
    d372:	8102      	strh	r2, [r0, #8]
    d374:	794a      	ldrb	r2, [r1, #5]
    d376:	b162      	cbz	r2, d392 <__udivmoddi4+0x5c6>
    d378:	2203      	movs	r2, #3
    d37a:	7282      	strb	r2, [r0, #10]
    d37c:	688a      	ldr	r2, [r1, #8]
    d37e:	326a      	adds	r2, #106	; 0x6a
    d380:	6042      	str	r2, [r0, #4]
    d382:	68c9      	ldr	r1, [r1, #12]
    d384:	6101      	str	r1, [r0, #16]
    d386:	2103      	movs	r1, #3
    d388:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d38c:	4770      	bx	lr
    d38e:	222b      	movs	r2, #43	; 0x2b
    d390:	e7ef      	b.n	d372 <__udivmoddi4+0x5a6>
    d392:	2202      	movs	r2, #2
    d394:	e7f1      	b.n	d37a <__udivmoddi4+0x5ae>
    d396:	b510      	push	{r4, lr}
    d398:	2200      	movs	r2, #0
    d39a:	7002      	strb	r2, [r0, #0]
    d39c:	72c2      	strb	r2, [r0, #11]
    d39e:	790a      	ldrb	r2, [r1, #4]
    d3a0:	b1a2      	cbz	r2, d3cc <__udivmoddi4+0x600>
    d3a2:	2200      	movs	r2, #0
    d3a4:	8102      	strh	r2, [r0, #8]
    d3a6:	794a      	ldrb	r2, [r1, #5]
    d3a8:	b192      	cbz	r2, d3d0 <__udivmoddi4+0x604>
    d3aa:	2203      	movs	r2, #3
    d3ac:	7282      	strb	r2, [r0, #10]
    d3ae:	68ca      	ldr	r2, [r1, #12]
    d3b0:	326a      	adds	r2, #106	; 0x6a
    d3b2:	6042      	str	r2, [r0, #4]
    d3b4:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    d3b8:	6889      	ldr	r1, [r1, #8]
    d3ba:	17cb      	asrs	r3, r1, #31
    d3bc:	1861      	adds	r1, r4, r1
    d3be:	415a      	adcs	r2, r3
    d3c0:	e9c0 1204 	strd	r1, r2, [r0, #16]
    d3c4:	2104      	movs	r1, #4
    d3c6:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d3ca:	bd10      	pop	{r4, pc}
    d3cc:	222b      	movs	r2, #43	; 0x2b
    d3ce:	e7e9      	b.n	d3a4 <__udivmoddi4+0x5d8>
    d3d0:	2202      	movs	r2, #2
    d3d2:	e7eb      	b.n	d3ac <__udivmoddi4+0x5e0>
    d3d4:	b570      	push	{r4, r5, r6, lr}
    d3d6:	4605      	mov	r5, r0
    d3d8:	460c      	mov	r4, r1
    d3da:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    d3de:	f7f6 f9e5 	bl	37ac <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    d3e2:	b178      	cbz	r0, d404 <__udivmoddi4+0x638>
    d3e4:	4620      	mov	r0, r4
    d3e6:	f000 f810 	bl	d40a <__udivmoddi4+0x63e>
    d3ea:	6a22      	ldr	r2, [r4, #32]
    d3ec:	2109      	movs	r1, #9
    d3ee:	4628      	mov	r0, r5
    d3f0:	4790      	blx	r2
    d3f2:	2800      	cmp	r0, #0
    d3f4:	d008      	beq.n	d408 <__udivmoddi4+0x63c>
    d3f6:	7800      	ldrb	r0, [r0, #0]
    d3f8:	2800      	cmp	r0, #0
    d3fa:	d005      	beq.n	d408 <__udivmoddi4+0x63c>
    d3fc:	21dc      	movs	r1, #220	; 0xdc
    d3fe:	206a      	movs	r0, #106	; 0x6a
    d400:	f7f7 fdc8 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d404:	21d8      	movs	r1, #216	; 0xd8
    d406:	e7fa      	b.n	d3fe <__udivmoddi4+0x632>
    d408:	bd70      	pop	{r4, r5, r6, pc}
    d40a:	2100      	movs	r1, #0
    d40c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d410:	f800 1f24 	strb.w	r1, [r0, #36]!
    d414:	7041      	strb	r1, [r0, #1]
    d416:	4770      	bx	lr

0000d418 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    d418:	b570      	push	{r4, r5, r6, lr}
    d41a:	f7f4 fabd 	bl	1998 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d41e:	4605      	mov	r5, r0
    d420:	2400      	movs	r4, #0
    d422:	e006      	b.n	d432 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    d424:	4620      	mov	r0, r4
    d426:	f7f4 fabd 	bl	19a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d42a:	f7ff ffee 	bl	d40a <__udivmoddi4+0x63e>
    d42e:	1c64      	adds	r4, r4, #1
    d430:	b2e4      	uxtb	r4, r4
    d432:	42ac      	cmp	r4, r5
    d434:	d3f6      	bcc.n	d424 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    d436:	bd70      	pop	{r4, r5, r6, pc}

0000d438 <mpsl_timeslot_request>:
    d438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d43c:	460d      	mov	r5, r1
    d43e:	f7f4 fab1 	bl	19a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d442:	0004      	movs	r4, r0
    d444:	d008      	beq.n	d458 <mpsl_timeslot_request+0x20>
    d446:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d44a:	f06f 0622 	mvn.w	r6, #34	; 0x22
    d44e:	2801      	cmp	r0, #1
    d450:	d006      	beq.n	d460 <mpsl_timeslot_request+0x28>
    d452:	2802      	cmp	r0, #2
    d454:	d111      	bne.n	d47a <mpsl_timeslot_request+0x42>
    d456:	e003      	b.n	d460 <mpsl_timeslot_request+0x28>
    d458:	f06f 0001 	mvn.w	r0, #1
    d45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d460:	f06f 0715 	mvn.w	r7, #21
    d464:	b15d      	cbz	r5, d47e <mpsl_timeslot_request+0x46>
    d466:	4628      	mov	r0, r5
    d468:	f7f4 fa0c 	bl	1884 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    d46c:	b138      	cbz	r0, d47e <mpsl_timeslot_request+0x46>
    d46e:	7828      	ldrb	r0, [r5, #0]
    d470:	b138      	cbz	r0, d482 <mpsl_timeslot_request+0x4a>
    d472:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d476:	2802      	cmp	r0, #2
    d478:	d008      	beq.n	d48c <mpsl_timeslot_request+0x54>
    d47a:	4630      	mov	r0, r6
    d47c:	e7ee      	b.n	d45c <mpsl_timeslot_request+0x24>
    d47e:	4638      	mov	r0, r7
    d480:	e7ec      	b.n	d45c <mpsl_timeslot_request+0x24>
    d482:	4629      	mov	r1, r5
    d484:	4620      	mov	r0, r4
    d486:	f7ff ff6d 	bl	d364 <__udivmoddi4+0x598>
    d48a:	e003      	b.n	d494 <mpsl_timeslot_request+0x5c>
    d48c:	4629      	mov	r1, r5
    d48e:	4620      	mov	r0, r4
    d490:	f7ff ff81 	bl	d396 <__udivmoddi4+0x5ca>
    d494:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d498:	4621      	mov	r1, r4
    d49a:	f7ff fe49 	bl	d130 <__udivmoddi4+0x364>
    d49e:	b108      	cbz	r0, d4a4 <mpsl_timeslot_request+0x6c>
    d4a0:	2000      	movs	r0, #0
    d4a2:	e7db      	b.n	d45c <mpsl_timeslot_request+0x24>
    d4a4:	f240 21b1 	movw	r1, #689	; 0x2b1
    d4a8:	206a      	movs	r0, #106	; 0x6a
    d4aa:	f7f7 fd73 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000d4ae <mpsl_timeslot_session_close>:
    d4ae:	b510      	push	{r4, lr}
    d4b0:	4604      	mov	r4, r0
    d4b2:	f7f4 fa77 	bl	19a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d4b6:	0001      	movs	r1, r0
    d4b8:	d005      	beq.n	d4c6 <mpsl_timeslot_session_close+0x18>
    d4ba:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    d4be:	f06f 0222 	mvn.w	r2, #34	; 0x22
    d4c2:	b978      	cbnz	r0, d4e4 <mpsl_timeslot_session_close+0x36>
    d4c4:	e002      	b.n	d4cc <mpsl_timeslot_session_close+0x1e>
    d4c6:	f06f 0001 	mvn.w	r0, #1
    d4ca:	bd10      	pop	{r4, pc}
    d4cc:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    d4d0:	b140      	cbz	r0, d4e4 <mpsl_timeslot_session_close+0x36>
    d4d2:	2802      	cmp	r0, #2
    d4d4:	d008      	beq.n	d4e8 <mpsl_timeslot_session_close+0x3a>
    d4d6:	2801      	cmp	r0, #1
    d4d8:	d006      	beq.n	d4e8 <mpsl_timeslot_session_close+0x3a>
    d4da:	2001      	movs	r0, #1
    d4dc:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    d4e0:	2000      	movs	r0, #0
    d4e2:	bd10      	pop	{r4, pc}
    d4e4:	4610      	mov	r0, r2
    d4e6:	bd10      	pop	{r4, pc}
    d4e8:	4620      	mov	r0, r4
    d4ea:	f7ff ff73 	bl	d3d4 <__udivmoddi4+0x608>
    d4ee:	e7f7      	b.n	d4e0 <mpsl_timeslot_session_close+0x32>

0000d4f0 <mpsl_timeslot_session_count_set>:
    d4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4f4:	460e      	mov	r6, r1
    d4f6:	4607      	mov	r7, r0
    d4f8:	f7f4 fa4e 	bl	1998 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d4fc:	4605      	mov	r5, r0
    d4fe:	2400      	movs	r4, #0
    d500:	e00b      	b.n	d51a <mpsl_timeslot_session_count_set+0x2a>
    d502:	4620      	mov	r0, r4
    d504:	f7f4 fa4e 	bl	19a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d508:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    d50c:	b118      	cbz	r0, d516 <mpsl_timeslot_session_count_set+0x26>
    d50e:	f04f 30ff 	mov.w	r0, #4294967295
    d512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d516:	1c64      	adds	r4, r4, #1
    d518:	b2e4      	uxtb	r4, r4
    d51a:	42ac      	cmp	r4, r5
    d51c:	d3f1      	bcc.n	d502 <mpsl_timeslot_session_count_set+0x12>
    d51e:	2e08      	cmp	r6, #8
    d520:	d902      	bls.n	d528 <mpsl_timeslot_session_count_set+0x38>
    d522:	f06f 0015 	mvn.w	r0, #21
    d526:	e7f4      	b.n	d512 <mpsl_timeslot_session_count_set+0x22>
    d528:	b117      	cbz	r7, d530 <mpsl_timeslot_session_count_set+0x40>
    d52a:	4631      	mov	r1, r6
    d52c:	4638      	mov	r0, r7
    d52e:	e001      	b.n	d534 <mpsl_timeslot_session_count_set+0x44>
    d530:	2100      	movs	r1, #0
    d532:	4608      	mov	r0, r1
    d534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d538:	f7f4 ba1a 	b.w	1970 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000d53c <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    d53c:	f7f6 be0c 	b.w	4158 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000d540 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    d540:	b510      	push	{r4, lr}
    d542:	2000      	movs	r0, #0
    d544:	f7f7 f92e 	bl	47a4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    d548:	6800      	ldr	r0, [r0, #0]
    d54a:	2800      	cmp	r0, #0
    d54c:	bf18      	it	ne
    d54e:	2001      	movne	r0, #1
    d550:	bd10      	pop	{r4, pc}

0000d552 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    d552:	b510      	push	{r4, lr}
    d554:	f7f7 f9a6 	bl	48a4 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    d558:	f7f6 fc78 	bl	3e4c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d55c:	f000 f802 	bl	d564 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    d560:	b280      	uxth	r0, r0
    d562:	bd10      	pop	{r4, pc}

0000d564 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    d564:	0a41      	lsrs	r1, r0, #9
    d566:	f643 5209 	movw	r2, #15625	; 0x3d09
    d56a:	4351      	muls	r1, r2
    d56c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d570:	fb10 f002 	smulbb	r0, r0, r2
    d574:	f500 7080 	add.w	r0, r0, #256	; 0x100
    d578:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    d57c:	4770      	bx	lr
    d57e:	2800      	cmp	r0, #0
    d580:	db09      	blt.n	d596 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    d582:	f000 021f 	and.w	r2, r0, #31
    d586:	2101      	movs	r1, #1
    d588:	4091      	lsls	r1, r2
    d58a:	0940      	lsrs	r0, r0, #5
    d58c:	0080      	lsls	r0, r0, #2
    d58e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d592:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d596:	4770      	bx	lr
    d598:	2800      	cmp	r0, #0
    d59a:	db0d      	blt.n	d5b8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    d59c:	f000 021f 	and.w	r2, r0, #31
    d5a0:	2101      	movs	r1, #1
    d5a2:	4091      	lsls	r1, r2
    d5a4:	0940      	lsrs	r0, r0, #5
    d5a6:	0080      	lsls	r0, r0, #2
    d5a8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d5ac:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d5b0:	f3bf 8f4f 	dsb	sy
    d5b4:	f3bf 8f6f 	isb	sy
    d5b8:	4770      	bx	lr

0000d5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    d5ba:	b570      	push	{r4, r5, r6, lr}
    d5bc:	4602      	mov	r2, r0
    d5be:	2000      	movs	r0, #0
    d5c0:	2900      	cmp	r1, #0
    d5c2:	d01d      	beq.n	d600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    d5c4:	fba2 0101 	umull	r0, r1, r2, r1
    d5c8:	0a40      	lsrs	r0, r0, #9
    d5ca:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    d5ce:	0a49      	lsrs	r1, r1, #9
    d5d0:	1c40      	adds	r0, r0, #1
    d5d2:	f141 0100 	adc.w	r1, r1, #0
    d5d6:	f240 72a1 	movw	r2, #1953	; 0x7a1
    d5da:	1883      	adds	r3, r0, r2
    d5dc:	f141 0100 	adc.w	r1, r1, #0
    d5e0:	1c5b      	adds	r3, r3, #1
    d5e2:	f141 0400 	adc.w	r4, r1, #0
    d5e6:	2100      	movs	r1, #0
    d5e8:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    d5ec:	41a1      	sbcs	r1, r4
    d5ee:	d203      	bcs.n	d5f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    d5f0:	2172      	movs	r1, #114	; 0x72
    d5f2:	206d      	movs	r0, #109	; 0x6d
    d5f4:	f7f7 fcce 	bl	4f94 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d5f8:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    d5fc:	fbb0 f0f2 	udiv	r0, r0, r2
    d600:	bd70      	pop	{r4, r5, r6, pc}
    d602:	5840      	ldr	r0, [r0, r1]
    d604:	2800      	cmp	r0, #0
    d606:	d000      	beq.n	d60a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    d608:	2001      	movs	r0, #1
    d60a:	4770      	bx	lr
    d60c:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    d610:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    d614:	f002 0201 	and.w	r2, r2, #1
    d618:	03c0      	lsls	r0, r0, #15
    d61a:	d503      	bpl.n	d624 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d61c:	428a      	cmp	r2, r1
    d61e:	d101      	bne.n	d624 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d620:	2001      	movs	r0, #1
    d622:	4770      	bx	lr
    d624:	2000      	movs	r0, #0
    d626:	4770      	bx	lr

0000d628 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    d628:	b510      	push	{r4, lr}
    d62a:	2101      	movs	r1, #1
    d62c:	0788      	lsls	r0, r1, #30
    d62e:	f7f7 fc5b 	bl	4ee8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d632:	2800      	cmp	r0, #0
    d634:	d000      	beq.n	d638 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    d636:	2001      	movs	r0, #1
    d638:	bd10      	pop	{r4, pc}

0000d63a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    d63a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d63e:	2101      	movs	r1, #1
    d640:	6001      	str	r1, [r0, #0]
    d642:	4770      	bx	lr

0000d644 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    d644:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d648:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    d64c:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    d650:	f002 0203 	and.w	r2, r2, #3
    d654:	03c9      	lsls	r1, r1, #15
    d656:	d503      	bpl.n	d660 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d658:	4282      	cmp	r2, r0
    d65a:	d101      	bne.n	d660 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d65c:	2001      	movs	r0, #1
    d65e:	4770      	bx	lr
    d660:	2000      	movs	r0, #0
    d662:	4770      	bx	lr

0000d664 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    d664:	b510      	push	{r4, lr}
    d666:	2100      	movs	r1, #0
    d668:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d66c:	f7f7 fc3c 	bl	4ee8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d670:	2800      	cmp	r0, #0
    d672:	d000      	beq.n	d676 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    d674:	2001      	movs	r0, #1
    d676:	bd10      	pop	{r4, pc}
    d678:	2800      	cmp	r0, #0
    d67a:	db09      	blt.n	d690 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    d67c:	f000 021f 	and.w	r2, r0, #31
    d680:	2101      	movs	r1, #1
    d682:	4091      	lsls	r1, r2
    d684:	0940      	lsrs	r0, r0, #5
    d686:	0080      	lsls	r0, r0, #2
    d688:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d68c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d690:	4770      	bx	lr
    d692:	2800      	cmp	r0, #0
    d694:	db0d      	blt.n	d6b2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    d696:	f000 021f 	and.w	r2, r0, #31
    d69a:	2101      	movs	r1, #1
    d69c:	4091      	lsls	r1, r2
    d69e:	0940      	lsrs	r0, r0, #5
    d6a0:	0080      	lsls	r0, r0, #2
    d6a2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6a6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d6aa:	f3bf 8f4f 	dsb	sy
    d6ae:	f3bf 8f6f 	isb	sy
    d6b2:	4770      	bx	lr
    d6b4:	00021000 	.word	0x00021000
    d6b8:	000000fa 	.word	0x000000fa
    d6bc:	63a70f14 	.word	0x63a70f14
    d6c0:	c477f9cf 	.word	0xc477f9cf
    d6c4:	e931f9ef 	.word	0xe931f9ef
    d6c8:	03bcf561 	.word	0x03bcf561
    d6cc:	2b06749a 	.word	0x2b06749a
    d6d0:	2800      	cmp	r0, #0
    d6d2:	db09      	blt.n	d6e8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    d6d4:	f000 021f 	and.w	r2, r0, #31
    d6d8:	2101      	movs	r1, #1
    d6da:	4091      	lsls	r1, r2
    d6dc:	0940      	lsrs	r0, r0, #5
    d6de:	0080      	lsls	r0, r0, #2
    d6e0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6e4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d6e8:	4770      	bx	lr

0000d6ea <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    d6ea:	f3ef 8110 	mrs	r1, PRIMASK
    d6ee:	b672      	cpsid	i
    d6f0:	7802      	ldrb	r2, [r0, #0]
    d6f2:	2a01      	cmp	r2, #1
    d6f4:	d001      	beq.n	d6fa <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    d6f6:	2201      	movs	r2, #1
    d6f8:	e000      	b.n	d6fc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    d6fa:	2200      	movs	r2, #0
    d6fc:	2301      	movs	r3, #1
    d6fe:	7003      	strb	r3, [r0, #0]
    d700:	b901      	cbnz	r1, d704 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    d702:	b662      	cpsie	i
    d704:	b10a      	cbz	r2, d70a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    d706:	2000      	movs	r0, #0
    d708:	4770      	bx	lr
    d70a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d70e:	4770      	bx	lr

0000d710 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    d710:	2100      	movs	r1, #0
    d712:	7001      	strb	r1, [r0, #0]
    d714:	4608      	mov	r0, r1
    d716:	4770      	bx	lr

0000d718 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    d718:	f3ef 8110 	mrs	r1, PRIMASK
    d71c:	b672      	cpsid	i
    d71e:	2200      	movs	r2, #0
    d720:	7002      	strb	r2, [r0, #0]
    d722:	b901      	cbnz	r1, d726 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    d724:	b662      	cpsie	i
    d726:	2000      	movs	r0, #0
    d728:	4770      	bx	lr

0000d72a <mpsl_low_priority_process>:
    d72a:	f7f7 bd23 	b.w	5174 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000d72e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    d72e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d732:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d736:	280f      	cmp	r0, #15
    d738:	d001      	beq.n	d73e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    d73a:	2000      	movs	r0, #0
    d73c:	4770      	bx	lr
    d73e:	2001      	movs	r0, #1
    d740:	4770      	bx	lr

0000d742 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    d742:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d746:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d74a:	280a      	cmp	r0, #10
    d74c:	d001      	beq.n	d752 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    d74e:	2000      	movs	r0, #0
    d750:	4770      	bx	lr
    d752:	2001      	movs	r0, #1
    d754:	4770      	bx	lr

0000d756 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    d756:	b500      	push	{lr}
    d758:	f7ff fff3 	bl	d742 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d75c:	b120      	cbz	r0, d768 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    d75e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d762:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d766:	b108      	cbz	r0, d76c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    d768:	2000      	movs	r0, #0
    d76a:	bd00      	pop	{pc}
    d76c:	2001      	movs	r0, #1
    d76e:	bd00      	pop	{pc}

0000d770 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    d770:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d774:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d778:	280e      	cmp	r0, #14
    d77a:	d001      	beq.n	d780 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    d77c:	2000      	movs	r0, #0
    d77e:	4770      	bx	lr
    d780:	2001      	movs	r0, #1
    d782:	4770      	bx	lr

0000d784 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    d784:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d788:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d78c:	2810      	cmp	r0, #16
    d78e:	d001      	beq.n	d794 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    d790:	2000      	movs	r0, #0
    d792:	4770      	bx	lr
    d794:	2001      	movs	r0, #1
    d796:	4770      	bx	lr

0000d798 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    d798:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d79c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d7a0:	2806      	cmp	r0, #6
    d7a2:	d003      	beq.n	d7ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d7a4:	1c40      	adds	r0, r0, #1
    d7a6:	d001      	beq.n	d7ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d7a8:	2000      	movs	r0, #0
    d7aa:	4770      	bx	lr
    d7ac:	2001      	movs	r0, #1
    d7ae:	4770      	bx	lr

0000d7b0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    d7b0:	b500      	push	{lr}
    d7b2:	f7ff fff1 	bl	d798 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d7b6:	b148      	cbz	r0, d7cc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d7b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d7bc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d7c0:	2806      	cmp	r0, #6
    d7c2:	d303      	bcc.n	d7cc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d7c4:	1c40      	adds	r0, r0, #1
    d7c6:	d001      	beq.n	d7cc <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d7c8:	2001      	movs	r0, #1
    d7ca:	bd00      	pop	{pc}
    d7cc:	2000      	movs	r0, #0
    d7ce:	bd00      	pop	{pc}

0000d7d0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    d7d0:	b500      	push	{lr}
    d7d2:	f7ff ffe1 	bl	d798 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d7d6:	b138      	cbz	r0, d7e8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    d7d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d7dc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d7e0:	2806      	cmp	r0, #6
    d7e2:	d303      	bcc.n	d7ec <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d7e4:	1c40      	adds	r0, r0, #1
    d7e6:	d001      	beq.n	d7ec <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d7e8:	2000      	movs	r0, #0
    d7ea:	bd00      	pop	{pc}
    d7ec:	2001      	movs	r0, #1
    d7ee:	bd00      	pop	{pc}

0000d7f0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    d7f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d7f4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d7f8:	280d      	cmp	r0, #13
    d7fa:	d001      	beq.n	d800 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    d7fc:	2000      	movs	r0, #0
    d7fe:	4770      	bx	lr
    d800:	2001      	movs	r0, #1
    d802:	4770      	bx	lr

0000d804 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    d804:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d808:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d80c:	2808      	cmp	r0, #8
    d80e:	d001      	beq.n	d814 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d810:	2000      	movs	r0, #0
    d812:	4770      	bx	lr
    d814:	2001      	movs	r0, #1
    d816:	4770      	bx	lr

0000d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d818:	b4f0      	push	{r4, r5, r6, r7}
    d81a:	ea80 0c01 	eor.w	ip, r0, r1
    d81e:	4603      	mov	r3, r0
    d820:	f01c 0f03 	tst.w	ip, #3
    d824:	d13c      	bne.n	d8a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d826:	f013 0f03 	tst.w	r3, #3
    d82a:	d00b      	beq.n	d844 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d82c:	2a00      	cmp	r2, #0
    d82e:	bf04      	itt	eq
    d830:	bcf0      	popeq	{r4, r5, r6, r7}
    d832:	4770      	bxeq	lr
    d834:	f811 cb01 	ldrb.w	ip, [r1], #1
    d838:	f803 cb01 	strb.w	ip, [r3], #1
    d83c:	1e52      	subs	r2, r2, #1
    d83e:	f013 0f03 	tst.w	r3, #3
    d842:	d1f3      	bne.n	d82c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d844:	2a03      	cmp	r2, #3
    d846:	d94f      	bls.n	d8e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d848:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d84c:	d24c      	bcs.n	d8e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d84e:	f1c2 0c00 	rsb	ip, r2, #0
    d852:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d856:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d85a:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d85e:	f1cc 0c00 	rsb	ip, ip, #0
    d862:	f1bc 0f00 	cmp.w	ip, #0
    d866:	dd1b      	ble.n	d8a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d868:	1f0d      	subs	r5, r1, #4
    d86a:	1f1c      	subs	r4, r3, #4
    d86c:	f01c 0f01 	tst.w	ip, #1
    d870:	d003      	beq.n	d87a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d872:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d876:	f844 6f04 	str.w	r6, [r4, #4]!
    d87a:	ea5f 066c 	movs.w	r6, ip, asr #1
    d87e:	d007      	beq.n	d890 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d880:	686f      	ldr	r7, [r5, #4]
    d882:	6067      	str	r7, [r4, #4]
    d884:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d888:	f844 7f08 	str.w	r7, [r4, #8]!
    d88c:	1e76      	subs	r6, r6, #1
    d88e:	d1f7      	bne.n	d880 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d890:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d894:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d898:	f1cc 0c00 	rsb	ip, ip, #0
    d89c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d8a0:	2a00      	cmp	r2, #0
    d8a2:	bf04      	itt	eq
    d8a4:	bcf0      	popeq	{r4, r5, r6, r7}
    d8a6:	4770      	bxeq	lr
    d8a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d8ac:	d226      	bcs.n	d8fc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d8ae:	2a00      	cmp	r2, #0
    d8b0:	bfdc      	itt	le
    d8b2:	bcf0      	pople	{r4, r5, r6, r7}
    d8b4:	4770      	bxle	lr
    d8b6:	1e49      	subs	r1, r1, #1
    d8b8:	1e5b      	subs	r3, r3, #1
    d8ba:	f012 0f01 	tst.w	r2, #1
    d8be:	d003      	beq.n	d8c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d8c0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d8c4:	f803 cf01 	strb.w	ip, [r3, #1]!
    d8c8:	1052      	asrs	r2, r2, #1
    d8ca:	bf04      	itt	eq
    d8cc:	bcf0      	popeq	{r4, r5, r6, r7}
    d8ce:	4770      	bxeq	lr
    d8d0:	f891 c001 	ldrb.w	ip, [r1, #1]
    d8d4:	f883 c001 	strb.w	ip, [r3, #1]
    d8d8:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d8dc:	f803 cf02 	strb.w	ip, [r3, #2]!
    d8e0:	1e52      	subs	r2, r2, #1
    d8e2:	d1f5      	bne.n	d8d0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d8e4:	bcf0      	pop	{r4, r5, r6, r7}
    d8e6:	4770      	bx	lr
    d8e8:	2a04      	cmp	r2, #4
    d8ea:	d3d9      	bcc.n	d8a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d8ec:	f851 cb04 	ldr.w	ip, [r1], #4
    d8f0:	1f12      	subs	r2, r2, #4
    d8f2:	f843 cb04 	str.w	ip, [r3], #4
    d8f6:	2a04      	cmp	r2, #4
    d8f8:	d2f8      	bcs.n	d8ec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d8fa:	e7d1      	b.n	d8a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d8fc:	f811 cb01 	ldrb.w	ip, [r1], #1
    d900:	f803 cb01 	strb.w	ip, [r3], #1
    d904:	1e52      	subs	r2, r2, #1
    d906:	d1f9      	bne.n	d8fc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d908:	bcf0      	pop	{r4, r5, r6, r7}
    d90a:	4770      	bx	lr

0000d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d90c:	b470      	push	{r4, r5, r6}
    d90e:	4603      	mov	r3, r0
    d910:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d914:	f010 0f03 	tst.w	r0, #3
    d918:	d009      	beq.n	d92e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d91a:	2a00      	cmp	r2, #0
    d91c:	bf04      	itt	eq
    d91e:	bc70      	popeq	{r4, r5, r6}
    d920:	4770      	bxeq	lr
    d922:	f803 cb01 	strb.w	ip, [r3], #1
    d926:	1e52      	subs	r2, r2, #1
    d928:	f013 0f03 	tst.w	r3, #3
    d92c:	d1f5      	bne.n	d91a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d92e:	b2c9      	uxtb	r1, r1
    d930:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d934:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d938:	2a03      	cmp	r2, #3
    d93a:	d939      	bls.n	d9b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d93c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d940:	d236      	bcs.n	d9b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d942:	4251      	negs	r1, r2
    d944:	17cc      	asrs	r4, r1, #31
    d946:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d94a:	1089      	asrs	r1, r1, #2
    d94c:	424e      	negs	r6, r1
    d94e:	2e00      	cmp	r6, #0
    d950:	dd11      	ble.n	d976 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d952:	1f19      	subs	r1, r3, #4
    d954:	f016 0f01 	tst.w	r6, #1
    d958:	bf18      	it	ne
    d95a:	f841 5f04 	strne.w	r5, [r1, #4]!
    d95e:	1074      	asrs	r4, r6, #1
    d960:	d004      	beq.n	d96c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d962:	604d      	str	r5, [r1, #4]
    d964:	f841 5f08 	str.w	r5, [r1, #8]!
    d968:	1e64      	subs	r4, r4, #1
    d96a:	d1fa      	bne.n	d962 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d96c:	4271      	negs	r1, r6
    d96e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d972:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d976:	2a00      	cmp	r2, #0
    d978:	bf04      	itt	eq
    d97a:	bc70      	popeq	{r4, r5, r6}
    d97c:	4770      	bxeq	lr
    d97e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d982:	d21d      	bcs.n	d9c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d984:	2a00      	cmp	r2, #0
    d986:	bfdc      	itt	le
    d988:	bc70      	pople	{r4, r5, r6}
    d98a:	4770      	bxle	lr
    d98c:	1e59      	subs	r1, r3, #1
    d98e:	f012 0f01 	tst.w	r2, #1
    d992:	bf18      	it	ne
    d994:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d998:	1052      	asrs	r2, r2, #1
    d99a:	bf04      	itt	eq
    d99c:	bc70      	popeq	{r4, r5, r6}
    d99e:	4770      	bxeq	lr
    d9a0:	f881 c001 	strb.w	ip, [r1, #1]
    d9a4:	f801 cf02 	strb.w	ip, [r1, #2]!
    d9a8:	1e52      	subs	r2, r2, #1
    d9aa:	d1f9      	bne.n	d9a0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d9ac:	bc70      	pop	{r4, r5, r6}
    d9ae:	4770      	bx	lr
    d9b0:	2a04      	cmp	r2, #4
    d9b2:	d3e0      	bcc.n	d976 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d9b4:	1f12      	subs	r2, r2, #4
    d9b6:	f843 5b04 	str.w	r5, [r3], #4
    d9ba:	2a04      	cmp	r2, #4
    d9bc:	d2fa      	bcs.n	d9b4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d9be:	e7da      	b.n	d976 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d9c0:	f803 cb01 	strb.w	ip, [r3], #1
    d9c4:	1e52      	subs	r2, r2, #1
    d9c6:	d1fb      	bne.n	d9c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d9c8:	bc70      	pop	{r4, r5, r6}
    d9ca:	4770      	bx	lr
    d9cc:	f04f 30ff 	mov.w	r0, #4294967295
    d9d0:	4770      	bx	lr
    d9d2:	2000      	movs	r0, #0
    d9d4:	4770      	bx	lr
    d9d6:	2000      	movs	r0, #0
    d9d8:	4770      	bx	lr
    d9da:	f04f 30ff 	mov.w	r0, #4294967295
    d9de:	4770      	bx	lr
    d9e0:	4770      	bx	lr
    d9e2:	4770      	bx	lr
    d9e4:	2000      	movs	r0, #0
    d9e6:	4770      	bx	lr
    d9e8:	2100      	movs	r1, #0
    d9ea:	7001      	strb	r1, [r0, #0]
    d9ec:	4770      	bx	lr
    d9ee:	f04f 30ff 	mov.w	r0, #4294967295
    d9f2:	4770      	bx	lr
    d9f4:	f04f 30ff 	mov.w	r0, #4294967295
    d9f8:	4770      	bx	lr
    d9fa:	2100      	movs	r1, #0
    d9fc:	7001      	strb	r1, [r0, #0]
    d9fe:	4770      	bx	lr
    da00:	f04f 30ff 	mov.w	r0, #4294967295
    da04:	4770      	bx	lr
    da06:	f04f 30ff 	mov.w	r0, #4294967295
    da0a:	4770      	bx	lr
    da0c:	7800      	ldrb	r0, [r0, #0]
    da0e:	2800      	cmp	r0, #0
    da10:	d001      	beq.n	da16 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    da12:	f06f 0015 	mvn.w	r0, #21
    da16:	4770      	bx	lr
    da18:	2000      	movs	r0, #0
    da1a:	4770      	bx	lr
    da1c:	2200      	movs	r2, #0
    da1e:	f000 b800 	b.w	da22 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000da22 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    da22:	b570      	push	{r4, r5, r6, lr}
    da24:	4614      	mov	r4, r2
    da26:	460d      	mov	r5, r1
    da28:	1b00      	subs	r0, r0, r4
    da2a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    da2e:	4288      	cmp	r0, r1
    da30:	da01      	bge.n	da36 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    da32:	4608      	mov	r0, r1
    da34:	e002      	b.n	da3c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    da36:	287f      	cmp	r0, #127	; 0x7f
    da38:	dd00      	ble.n	da3c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    da3a:	207f      	movs	r0, #127	; 0x7f
    da3c:	b240      	sxtb	r0, r0
    da3e:	f7f3 feef 	bl	1820 <mpsl_tx_power_radio_supported_power_adjust>
    da42:	7028      	strb	r0, [r5, #0]
    da44:	706c      	strb	r4, [r5, #1]
    da46:	2100      	movs	r1, #0
    da48:	4420      	add	r0, r4
    da4a:	70a9      	strb	r1, [r5, #2]
    da4c:	b240      	sxtb	r0, r0
    da4e:	bd70      	pop	{r4, r5, r6, pc}
    da50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da54:	460c      	mov	r4, r1
    da56:	4681      	mov	r9, r0
    da58:	7849      	ldrb	r1, [r1, #1]
    da5a:	f100 0003 	add.w	r0, r0, #3
    da5e:	f88d 1000 	strb.w	r1, [sp]
    da62:	f020 0003 	bic.w	r0, r0, #3
    da66:	78a1      	ldrb	r1, [r4, #2]
    da68:	0016      	movs	r6, r2
    da6a:	4605      	mov	r5, r0
    da6c:	f88d 1001 	strb.w	r1, [sp, #1]
    da70:	d000      	beq.n	da74 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    da72:	2000      	movs	r0, #0
    da74:	4669      	mov	r1, sp
    da76:	f7f7 ff61 	bl	593c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    da7a:	4428      	add	r0, r5
    da7c:	78a1      	ldrb	r1, [r4, #2]
    da7e:	4605      	mov	r5, r0
    da80:	b131      	cbz	r1, da90 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    da82:	8a63      	ldrh	r3, [r4, #18]
    da84:	78e2      	ldrb	r2, [r4, #3]
    da86:	b106      	cbz	r6, da8a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    da88:	2000      	movs	r0, #0
    da8a:	f7f8 f9e9 	bl	5e60 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    da8e:	4405      	add	r5, r0
    da90:	7820      	ldrb	r0, [r4, #0]
    da92:	7861      	ldrb	r1, [r4, #1]
    da94:	46b2      	mov	sl, r6
    da96:	2600      	movs	r6, #0
    da98:	4408      	add	r0, r1
    da9a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    da9e:	4637      	mov	r7, r6
    daa0:	e008      	b.n	dab4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    daa2:	7a23      	ldrb	r3, [r4, #8]
    daa4:	79e2      	ldrb	r2, [r4, #7]
    daa6:	79a1      	ldrb	r1, [r4, #6]
    daa8:	7960      	ldrb	r0, [r4, #5]
    daaa:	f000 feff 	bl	e8ac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    daae:	1c7f      	adds	r7, r7, #1
    dab0:	4406      	add	r6, r0
    dab2:	b2ff      	uxtb	r7, r7
    dab4:	4547      	cmp	r7, r8
    dab6:	d3f4      	bcc.n	daa2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    dab8:	1ced      	adds	r5, r5, #3
    daba:	f025 0003 	bic.w	r0, r5, #3
    dabe:	4604      	mov	r4, r0
    dac0:	f1ba 0f00 	cmp.w	sl, #0
    dac4:	d000      	beq.n	dac8 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    dac6:	2000      	movs	r0, #0
    dac8:	4632      	mov	r2, r6
    daca:	4641      	mov	r1, r8
    dacc:	f7f8 f912 	bl	5cf4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    dad0:	4420      	add	r0, r4
    dad2:	1dc0      	adds	r0, r0, #7
    dad4:	f020 0007 	bic.w	r0, r0, #7
    dad8:	eba0 0009 	sub.w	r0, r0, r9
    dadc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000dae0 <sdc_soc_ecb_block_encrypt>:
    dae0:	b530      	push	{r4, r5, lr}
    dae2:	460d      	mov	r5, r1
    dae4:	b08d      	sub	sp, #52	; 0x34
    dae6:	4614      	mov	r4, r2
    dae8:	4601      	mov	r1, r0
    daea:	2210      	movs	r2, #16
    daec:	4668      	mov	r0, sp
    daee:	f7ff fe93 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    daf2:	2210      	movs	r2, #16
    daf4:	4629      	mov	r1, r5
    daf6:	a804      	add	r0, sp, #16
    daf8:	f7ff fe8e 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dafc:	4668      	mov	r0, sp
    dafe:	f001 f856 	bl	ebae <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    db02:	b118      	cbz	r0, db0c <sdc_soc_ecb_block_encrypt+0x2c>
    db04:	f06f 0015 	mvn.w	r0, #21
    db08:	b00d      	add	sp, #52	; 0x34
    db0a:	bd30      	pop	{r4, r5, pc}
    db0c:	2210      	movs	r2, #16
    db0e:	4620      	mov	r0, r4
    db10:	a908      	add	r1, sp, #32
    db12:	f7ff fe81 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db16:	2000      	movs	r0, #0
    db18:	e7f6      	b.n	db08 <sdc_soc_ecb_block_encrypt+0x28>

0000db1a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    db1a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    db1c:	4604      	mov	r4, r0
    db1e:	1d01      	adds	r1, r0, #4
    db20:	4668      	mov	r0, sp
    db22:	f7f9 fca9 	bl	7478 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    db26:	2800      	cmp	r0, #0
    db28:	d004      	beq.n	db34 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    db2a:	4669      	mov	r1, sp
    db2c:	4620      	mov	r0, r4
    db2e:	f000 f848 	bl	dbc2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    db32:	2001      	movs	r0, #1
    db34:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000db36 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    db36:	b50e      	push	{r1, r2, r3, lr}
    db38:	4601      	mov	r1, r0
    db3a:	4668      	mov	r0, sp
    db3c:	f000 f827 	bl	db8e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    db40:	4668      	mov	r0, sp
    db42:	f001 fce6 	bl	f512 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    db46:	bd0e      	pop	{r1, r2, r3, pc}

0000db48 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    db48:	b510      	push	{r4, lr}
    db4a:	4604      	mov	r4, r0
    db4c:	4620      	mov	r0, r4
    db4e:	f7f7 fde9 	bl	5724 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    db52:	2800      	cmp	r0, #0
    db54:	d006      	beq.n	db64 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    db56:	78a1      	ldrb	r1, [r4, #2]
    db58:	7820      	ldrb	r0, [r4, #0]
    db5a:	f000 f804 	bl	db66 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    db5e:	2800      	cmp	r0, #0
    db60:	d0f4      	beq.n	db4c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    db62:	2001      	movs	r0, #1
    db64:	bd10      	pop	{r4, pc}
    db66:	b570      	push	{r4, r5, r6, lr}
    db68:	460c      	mov	r4, r1
    db6a:	4605      	mov	r5, r0
    db6c:	f7f7 fe4c 	bl	5808 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    db70:	2800      	cmp	r0, #0
    db72:	d002      	beq.n	db7a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    db74:	2d3e      	cmp	r5, #62	; 0x3e
    db76:	d001      	beq.n	db7c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    db78:	2001      	movs	r0, #1
    db7a:	bd70      	pop	{r4, r5, r6, pc}
    db7c:	2c12      	cmp	r4, #18
    db7e:	d004      	beq.n	db8a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    db80:	4620      	mov	r0, r4
    db82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    db86:	f7f7 be51 	b.w	582c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    db8a:	2000      	movs	r0, #0
    db8c:	bd70      	pop	{r4, r5, r6, pc}

0000db8e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    db8e:	880a      	ldrh	r2, [r1, #0]
    db90:	f3c2 020b 	ubfx	r2, r2, #0, #12
    db94:	8002      	strh	r2, [r0, #0]
    db96:	884a      	ldrh	r2, [r1, #2]
    db98:	8042      	strh	r2, [r0, #2]
    db9a:	784a      	ldrb	r2, [r1, #1]
    db9c:	0993      	lsrs	r3, r2, #6
    db9e:	2200      	movs	r2, #0
    dba0:	7142      	strb	r2, [r0, #5]
    dba2:	784b      	ldrb	r3, [r1, #1]
    dba4:	f3c3 1301 	ubfx	r3, r3, #4, #2
    dba8:	b11b      	cbz	r3, dbb2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    dbaa:	2b01      	cmp	r3, #1
    dbac:	d005      	beq.n	dbba <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    dbae:	2b02      	cmp	r3, #2
    dbb0:	d005      	beq.n	dbbe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    dbb2:	7102      	strb	r2, [r0, #4]
    dbb4:	1d09      	adds	r1, r1, #4
    dbb6:	6081      	str	r1, [r0, #8]
    dbb8:	4770      	bx	lr
    dbba:	2201      	movs	r2, #1
    dbbc:	e7f9      	b.n	dbb2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    dbbe:	2202      	movs	r2, #2
    dbc0:	e7f7      	b.n	dbb2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000dbc2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    dbc2:	b510      	push	{r4, lr}
    dbc4:	460c      	mov	r4, r1
    dbc6:	7809      	ldrb	r1, [r1, #0]
    dbc8:	7001      	strb	r1, [r0, #0]
    dbca:	7841      	ldrb	r1, [r0, #1]
    dbcc:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    dbd0:	7041      	strb	r1, [r0, #1]
    dbd2:	8822      	ldrh	r2, [r4, #0]
    dbd4:	f3c2 2203 	ubfx	r2, r2, #8, #4
    dbd8:	4311      	orrs	r1, r2
    dbda:	7041      	strb	r1, [r0, #1]
    dbdc:	78a2      	ldrb	r2, [r4, #2]
    dbde:	7082      	strb	r2, [r0, #2]
    dbe0:	8862      	ldrh	r2, [r4, #2]
    dbe2:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    dbe6:	0a12      	lsrs	r2, r2, #8
    dbe8:	70c2      	strb	r2, [r0, #3]
    dbea:	7041      	strb	r1, [r0, #1]
    dbec:	7922      	ldrb	r2, [r4, #4]
    dbee:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    dbf2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    dbf6:	7041      	strb	r1, [r0, #1]
    dbf8:	7962      	ldrb	r2, [r4, #5]
    dbfa:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    dbfe:	7041      	strb	r1, [r0, #1]
    dc00:	68a1      	ldr	r1, [r4, #8]
    dc02:	1d02      	adds	r2, r0, #4
    dc04:	4291      	cmp	r1, r2
    dc06:	d006      	beq.n	dc16 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    dc08:	8862      	ldrh	r2, [r4, #2]
    dc0a:	2afb      	cmp	r2, #251	; 0xfb
    dc0c:	d300      	bcc.n	dc10 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    dc0e:	22fb      	movs	r2, #251	; 0xfb
    dc10:	1d00      	adds	r0, r0, #4
    dc12:	f7ff fe01 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dc16:	78a0      	ldrb	r0, [r4, #2]
    dc18:	1d00      	adds	r0, r0, #4
    dc1a:	b2c0      	uxtb	r0, r0
    dc1c:	bd10      	pop	{r4, pc}

0000dc1e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    dc1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc22:	4604      	mov	r4, r0
    dc24:	f891 c000 	ldrb.w	ip, [r1]
    dc28:	2000      	movs	r0, #0
    dc2a:	2513      	movs	r5, #19
    dc2c:	260c      	movs	r6, #12
    dc2e:	2705      	movs	r7, #5
    dc30:	223e      	movs	r2, #62	; 0x3e
    dc32:	23ff      	movs	r3, #255	; 0xff
    dc34:	f1bc 0f1b 	cmp.w	ip, #27
    dc38:	d27d      	bcs.n	dd36 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    dc3a:	e8df f00c 	tbb	[pc, ip]
    dc3e:	0e7c      	.short	0x0e7c
    dc40:	872d2725 	.word	0x872d2725
    dc44:	d0bda391 	.word	0xd0bda391
    dc48:	f2f4ddd2 	.word	0xf2f4ddd2
    dc4c:	537c7cf1 	.word	0x537c7cf1
    dc50:	edeeefff 	.word	0xedeeefff
    dc54:	e9eaebec 	.word	0xe9eaebec
    dc58:	00e8      	.short	0x00e8
    dc5a:	7026      	strb	r6, [r4, #0]
    dc5c:	7908      	ldrb	r0, [r1, #4]
    dc5e:	70a0      	strb	r0, [r4, #2]
    dc60:	7948      	ldrb	r0, [r1, #5]
    dc62:	70e0      	strb	r0, [r4, #3]
    dc64:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    dc68:	0a00      	lsrs	r0, r0, #8
    dc6a:	7120      	strb	r0, [r4, #4]
    dc6c:	79c8      	ldrb	r0, [r1, #7]
    dc6e:	7160      	strb	r0, [r4, #5]
    dc70:	7a08      	ldrb	r0, [r1, #8]
    dc72:	71a0      	strb	r0, [r4, #6]
    dc74:	8908      	ldrh	r0, [r1, #8]
    dc76:	0a00      	lsrs	r0, r0, #8
    dc78:	71e0      	strb	r0, [r4, #7]
    dc7a:	7a88      	ldrb	r0, [r1, #10]
    dc7c:	7220      	strb	r0, [r4, #8]
    dc7e:	8948      	ldrh	r0, [r1, #10]
    dc80:	0a00      	lsrs	r0, r0, #8
    dc82:	7260      	strb	r0, [r4, #9]
    dc84:	2008      	movs	r0, #8
    dc86:	e174      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dc88:	2010      	movs	r0, #16
    dc8a:	e000      	b.n	dc8e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    dc8c:	201a      	movs	r0, #26
    dc8e:	7020      	strb	r0, [r4, #0]
    dc90:	7908      	ldrb	r0, [r1, #4]
    dc92:	70a0      	strb	r0, [r4, #2]
    dc94:	2001      	movs	r0, #1
    dc96:	e16c      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dc98:	7022      	strb	r2, [r4, #0]
    dc9a:	2001      	movs	r0, #1
    dc9c:	70a0      	strb	r0, [r4, #2]
    dc9e:	7908      	ldrb	r0, [r1, #4]
    dca0:	70e0      	strb	r0, [r4, #3]
    dca2:	7988      	ldrb	r0, [r1, #6]
    dca4:	7120      	strb	r0, [r4, #4]
    dca6:	88c8      	ldrh	r0, [r1, #6]
    dca8:	0a00      	lsrs	r0, r0, #8
    dcaa:	7160      	strb	r0, [r4, #5]
    dcac:	7a08      	ldrb	r0, [r1, #8]
    dcae:	71a0      	strb	r0, [r4, #6]
    dcb0:	7a48      	ldrb	r0, [r1, #9]
    dcb2:	71e0      	strb	r0, [r4, #7]
    dcb4:	f8d1 000a 	ldr.w	r0, [r1, #10]
    dcb8:	60a0      	str	r0, [r4, #8]
    dcba:	89c8      	ldrh	r0, [r1, #14]
    dcbc:	81a0      	strh	r0, [r4, #12]
    dcbe:	7c08      	ldrb	r0, [r1, #16]
    dcc0:	73a0      	strb	r0, [r4, #14]
    dcc2:	8a08      	ldrh	r0, [r1, #16]
    dcc4:	0a00      	lsrs	r0, r0, #8
    dcc6:	73e0      	strb	r0, [r4, #15]
    dcc8:	7c88      	ldrb	r0, [r1, #18]
    dcca:	7420      	strb	r0, [r4, #16]
    dccc:	8a48      	ldrh	r0, [r1, #18]
    dcce:	0a00      	lsrs	r0, r0, #8
    dcd0:	7460      	strb	r0, [r4, #17]
    dcd2:	7d08      	ldrb	r0, [r1, #20]
    dcd4:	74a0      	strb	r0, [r4, #18]
    dcd6:	8a88      	ldrh	r0, [r1, #20]
    dcd8:	0a00      	lsrs	r0, r0, #8
    dcda:	74e0      	strb	r0, [r4, #19]
    dcdc:	7d88      	ldrb	r0, [r1, #22]
    dcde:	7520      	strb	r0, [r4, #20]
    dce0:	4628      	mov	r0, r5
    dce2:	e146      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dce4:	7022      	strb	r2, [r4, #0]
    dce6:	200a      	movs	r0, #10
    dce8:	70a0      	strb	r0, [r4, #2]
    dcea:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    dcee:	70e0      	strb	r0, [r4, #3]
    dcf0:	7888      	ldrb	r0, [r1, #2]
    dcf2:	7120      	strb	r0, [r4, #4]
    dcf4:	8848      	ldrh	r0, [r1, #2]
    dcf6:	0a00      	lsrs	r0, r0, #8
    dcf8:	7160      	strb	r0, [r4, #5]
    dcfa:	7908      	ldrb	r0, [r1, #4]
    dcfc:	71a0      	strb	r0, [r4, #6]
    dcfe:	7948      	ldrb	r0, [r1, #5]
    dd00:	71e0      	strb	r0, [r4, #7]
    dd02:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dd06:	60a0      	str	r0, [r4, #8]
    dd08:	8948      	ldrh	r0, [r1, #10]
    dd0a:	81a0      	strh	r0, [r4, #12]
    dd0c:	68c8      	ldr	r0, [r1, #12]
    dd0e:	f8c4 000e 	str.w	r0, [r4, #14]
    dd12:	8a08      	ldrh	r0, [r1, #16]
    dd14:	8260      	strh	r0, [r4, #18]
    dd16:	f8d1 0012 	ldr.w	r0, [r1, #18]
    dd1a:	6160      	str	r0, [r4, #20]
    dd1c:	8ac8      	ldrh	r0, [r1, #22]
    dd1e:	8320      	strh	r0, [r4, #24]
    dd20:	7e08      	ldrb	r0, [r1, #24]
    dd22:	76a0      	strb	r0, [r4, #26]
    dd24:	8b08      	ldrh	r0, [r1, #24]
    dd26:	0a00      	lsrs	r0, r0, #8
    dd28:	76e0      	strb	r0, [r4, #27]
    dd2a:	7e88      	ldrb	r0, [r1, #26]
    dd2c:	7720      	strb	r0, [r4, #28]
    dd2e:	8b48      	ldrh	r0, [r1, #26]
    dd30:	0a00      	lsrs	r0, r0, #8
    dd32:	7760      	strb	r0, [r4, #29]
    dd34:	e000      	b.n	dd38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    dd36:	e097      	b.n	de68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    dd38:	7f08      	ldrb	r0, [r1, #28]
    dd3a:	77a0      	strb	r0, [r4, #30]
    dd3c:	8b88      	ldrh	r0, [r1, #28]
    dd3e:	0a00      	lsrs	r0, r0, #8
    dd40:	77e0      	strb	r0, [r4, #31]
    dd42:	7f88      	ldrb	r0, [r1, #30]
    dd44:	f884 0020 	strb.w	r0, [r4, #32]
    dd48:	201f      	movs	r0, #31
    dd4a:	e112      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dd4c:	7022      	strb	r2, [r4, #0]
    dd4e:	2014      	movs	r0, #20
    dd50:	70a0      	strb	r0, [r4, #2]
    dd52:	7908      	ldrb	r0, [r1, #4]
    dd54:	70e0      	strb	r0, [r4, #3]
    dd56:	8888      	ldrh	r0, [r1, #4]
    dd58:	0a00      	lsrs	r0, r0, #8
    dd5a:	7120      	strb	r0, [r4, #4]
    dd5c:	7988      	ldrb	r0, [r1, #6]
    dd5e:	e0a6      	b.n	deae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    dd60:	7022      	strb	r2, [r4, #0]
    dd62:	2004      	movs	r0, #4
    dd64:	70a0      	strb	r0, [r4, #2]
    dd66:	7908      	ldrb	r0, [r1, #4]
    dd68:	70e0      	strb	r0, [r4, #3]
    dd6a:	7988      	ldrb	r0, [r1, #6]
    dd6c:	7120      	strb	r0, [r4, #4]
    dd6e:	88c8      	ldrh	r0, [r1, #6]
    dd70:	0a00      	lsrs	r0, r0, #8
    dd72:	7160      	strb	r0, [r4, #5]
    dd74:	6888      	ldr	r0, [r1, #8]
    dd76:	f8c4 0006 	str.w	r0, [r4, #6]
    dd7a:	68c8      	ldr	r0, [r1, #12]
    dd7c:	f8c4 000a 	str.w	r0, [r4, #10]
    dd80:	200c      	movs	r0, #12
    dd82:	e0f6      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dd84:	7022      	strb	r2, [r4, #0]
    dd86:	2003      	movs	r0, #3
    dd88:	70a0      	strb	r0, [r4, #2]
    dd8a:	7908      	ldrb	r0, [r1, #4]
    dd8c:	70e0      	strb	r0, [r4, #3]
    dd8e:	7988      	ldrb	r0, [r1, #6]
    dd90:	7120      	strb	r0, [r4, #4]
    dd92:	88c8      	ldrh	r0, [r1, #6]
    dd94:	0a00      	lsrs	r0, r0, #8
    dd96:	7160      	strb	r0, [r4, #5]
    dd98:	7a08      	ldrb	r0, [r1, #8]
    dd9a:	71a0      	strb	r0, [r4, #6]
    dd9c:	8908      	ldrh	r0, [r1, #8]
    dd9e:	0a00      	lsrs	r0, r0, #8
    dda0:	71e0      	strb	r0, [r4, #7]
    dda2:	7a88      	ldrb	r0, [r1, #10]
    dda4:	7220      	strb	r0, [r4, #8]
    dda6:	8948      	ldrh	r0, [r1, #10]
    dda8:	0a00      	lsrs	r0, r0, #8
    ddaa:	7260      	strb	r0, [r4, #9]
    ddac:	7b08      	ldrb	r0, [r1, #12]
    ddae:	72a0      	strb	r0, [r4, #10]
    ddb0:	8988      	ldrh	r0, [r1, #12]
    ddb2:	0a00      	lsrs	r0, r0, #8
    ddb4:	72e0      	strb	r0, [r4, #11]
    ddb6:	e0b6      	b.n	df26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    ddb8:	7022      	strb	r2, [r4, #0]
    ddba:	70a7      	strb	r7, [r4, #2]
    ddbc:	7908      	ldrb	r0, [r1, #4]
    ddbe:	70e0      	strb	r0, [r4, #3]
    ddc0:	8888      	ldrh	r0, [r1, #4]
    ddc2:	0a00      	lsrs	r0, r0, #8
    ddc4:	7120      	strb	r0, [r4, #4]
    ddc6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ddca:	f8c4 0005 	str.w	r0, [r4, #5]
    ddce:	f8d1 000a 	ldr.w	r0, [r1, #10]
    ddd2:	f8c4 0009 	str.w	r0, [r4, #9]
    ddd6:	89c8      	ldrh	r0, [r1, #14]
    ddd8:	f8a4 000d 	strh.w	r0, [r4, #13]
    dddc:	e0c8      	b.n	df70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x352>
    ddde:	2011      	movs	r0, #17
    dde0:	e045      	b.n	de6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    dde2:	7027      	strb	r7, [r4, #0]
    dde4:	7908      	ldrb	r0, [r1, #4]
    dde6:	70a0      	strb	r0, [r4, #2]
    dde8:	7948      	ldrb	r0, [r1, #5]
    ddea:	70e0      	strb	r0, [r4, #3]
    ddec:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ddf0:	0a00      	lsrs	r0, r0, #8
    ddf2:	7120      	strb	r0, [r4, #4]
    ddf4:	79c8      	ldrb	r0, [r1, #7]
    ddf6:	e05a      	b.n	deae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    ddf8:	2008      	movs	r0, #8
    ddfa:	7020      	strb	r0, [r4, #0]
    ddfc:	7908      	ldrb	r0, [r1, #4]
    ddfe:	70a0      	strb	r0, [r4, #2]
    de00:	7988      	ldrb	r0, [r1, #6]
    de02:	70e0      	strb	r0, [r4, #3]
    de04:	88c8      	ldrh	r0, [r1, #6]
    de06:	0a00      	lsrs	r0, r0, #8
    de08:	7120      	strb	r0, [r4, #4]
    de0a:	7a08      	ldrb	r0, [r1, #8]
    de0c:	e04f      	b.n	deae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    de0e:	e09a      	b.n	df46 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    de10:	e06e      	b.n	def0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d2>
    de12:	e04f      	b.n	deb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x296>
    de14:	e07a      	b.n	df0c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ee>
    de16:	e088      	b.n	df2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    de18:	e041      	b.n	de9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    de1a:	e030      	b.n	de7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x260>
    de1c:	e011      	b.n	de42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    de1e:	e00d      	b.n	de3c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    de20:	e024      	b.n	de6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    de22:	e01b      	b.n	de5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23e>
    de24:	e7ff      	b.n	de26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    de26:	2030      	movs	r0, #48	; 0x30
    de28:	7020      	strb	r0, [r4, #0]
    de2a:	7908      	ldrb	r0, [r1, #4]
    de2c:	70a0      	strb	r0, [r4, #2]
    de2e:	7988      	ldrb	r0, [r1, #6]
    de30:	70e0      	strb	r0, [r4, #3]
    de32:	88c8      	ldrh	r0, [r1, #6]
    de34:	0a00      	lsrs	r0, r0, #8
    de36:	7120      	strb	r0, [r4, #4]
    de38:	2003      	movs	r0, #3
    de3a:	e09a      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    de3c:	7022      	strb	r2, [r4, #0]
    de3e:	2007      	movs	r0, #7
    de40:	e03a      	b.n	deb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29a>
    de42:	7022      	strb	r2, [r4, #0]
    de44:	70a6      	strb	r6, [r4, #2]
    de46:	7908      	ldrb	r0, [r1, #4]
    de48:	70e0      	strb	r0, [r4, #3]
    de4a:	7988      	ldrb	r0, [r1, #6]
    de4c:	7120      	strb	r0, [r4, #4]
    de4e:	88c8      	ldrh	r0, [r1, #6]
    de50:	0a00      	lsrs	r0, r0, #8
    de52:	7160      	strb	r0, [r4, #5]
    de54:	7a08      	ldrb	r0, [r1, #8]
    de56:	71a0      	strb	r0, [r4, #6]
    de58:	7a48      	ldrb	r0, [r1, #9]
    de5a:	e01d      	b.n	de98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27a>
    de5c:	4620      	mov	r0, r4
    de5e:	1d09      	adds	r1, r1, #4
    de60:	f7f7 fca4 	bl	57ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    de64:	2800      	cmp	r0, #0
    de66:	d109      	bne.n	de7c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x25e>
    de68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de6c:	2057      	movs	r0, #87	; 0x57
    de6e:	7020      	strb	r0, [r4, #0]
    de70:	7908      	ldrb	r0, [r1, #4]
    de72:	70a0      	strb	r0, [r4, #2]
    de74:	8888      	ldrh	r0, [r1, #4]
    de76:	0a00      	lsrs	r0, r0, #8
    de78:	70e0      	strb	r0, [r4, #3]
    de7a:	2002      	movs	r0, #2
    de7c:	e079      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    de7e:	7022      	strb	r2, [r4, #0]
    de80:	2012      	movs	r0, #18
    de82:	70a0      	strb	r0, [r4, #2]
    de84:	7908      	ldrb	r0, [r1, #4]
    de86:	70e0      	strb	r0, [r4, #3]
    de88:	7948      	ldrb	r0, [r1, #5]
    de8a:	7120      	strb	r0, [r4, #4]
    de8c:	7988      	ldrb	r0, [r1, #6]
    de8e:	7160      	strb	r0, [r4, #5]
    de90:	88c8      	ldrh	r0, [r1, #6]
    de92:	0a00      	lsrs	r0, r0, #8
    de94:	71a0      	strb	r0, [r4, #6]
    de96:	7a08      	ldrb	r0, [r1, #8]
    de98:	71e0      	strb	r0, [r4, #7]
    de9a:	2006      	movs	r0, #6
    de9c:	e069      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    de9e:	7023      	strb	r3, [r4, #0]
    dea0:	20a1      	movs	r0, #161	; 0xa1
    dea2:	70a0      	strb	r0, [r4, #2]
    dea4:	7908      	ldrb	r0, [r1, #4]
    dea6:	70e0      	strb	r0, [r4, #3]
    dea8:	7948      	ldrb	r0, [r1, #5]
    deaa:	7120      	strb	r0, [r4, #4]
    deac:	2000      	movs	r0, #0
    deae:	7160      	strb	r0, [r4, #5]
    deb0:	2004      	movs	r0, #4
    deb2:	e05e      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    deb4:	7023      	strb	r3, [r4, #0]
    deb6:	20a2      	movs	r0, #162	; 0xa2
    deb8:	70a0      	strb	r0, [r4, #2]
    deba:	7908      	ldrb	r0, [r1, #4]
    debc:	70e0      	strb	r0, [r4, #3]
    debe:	8888      	ldrh	r0, [r1, #4]
    dec0:	0a00      	lsrs	r0, r0, #8
    dec2:	7120      	strb	r0, [r4, #4]
    dec4:	7988      	ldrb	r0, [r1, #6]
    dec6:	7160      	strb	r0, [r4, #5]
    dec8:	88c8      	ldrh	r0, [r1, #6]
    deca:	0a00      	lsrs	r0, r0, #8
    decc:	71a0      	strb	r0, [r4, #6]
    dece:	7a08      	ldrb	r0, [r1, #8]
    ded0:	71e0      	strb	r0, [r4, #7]
    ded2:	8908      	ldrh	r0, [r1, #8]
    ded4:	0a00      	lsrs	r0, r0, #8
    ded6:	7220      	strb	r0, [r4, #8]
    ded8:	7a88      	ldrb	r0, [r1, #10]
    deda:	7260      	strb	r0, [r4, #9]
    dedc:	8948      	ldrh	r0, [r1, #10]
    dede:	0a00      	lsrs	r0, r0, #8
    dee0:	72a0      	strb	r0, [r4, #10]
    dee2:	7b08      	ldrb	r0, [r1, #12]
    dee4:	72e0      	strb	r0, [r4, #11]
    dee6:	8988      	ldrh	r0, [r1, #12]
    dee8:	0a00      	lsrs	r0, r0, #8
    deea:	7320      	strb	r0, [r4, #12]
    deec:	200b      	movs	r0, #11
    deee:	e040      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    def0:	7023      	strb	r3, [r4, #0]
    def2:	20a3      	movs	r0, #163	; 0xa3
    def4:	70a0      	strb	r0, [r4, #2]
    def6:	7908      	ldrb	r0, [r1, #4]
    def8:	70e0      	strb	r0, [r4, #3]
    defa:	8888      	ldrh	r0, [r1, #4]
    defc:	0a00      	lsrs	r0, r0, #8
    defe:	7120      	strb	r0, [r4, #4]
    df00:	7988      	ldrb	r0, [r1, #6]
    df02:	7160      	strb	r0, [r4, #5]
    df04:	79c8      	ldrb	r0, [r1, #7]
    df06:	71a0      	strb	r0, [r4, #6]
    df08:	2005      	movs	r0, #5
    df0a:	e032      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    df0c:	7022      	strb	r2, [r4, #0]
    df0e:	70a5      	strb	r5, [r4, #2]
    df10:	7908      	ldrb	r0, [r1, #4]
    df12:	70e0      	strb	r0, [r4, #3]
    df14:	7948      	ldrb	r0, [r1, #5]
    df16:	7120      	strb	r0, [r4, #4]
    df18:	f8d1 0006 	ldr.w	r0, [r1, #6]
    df1c:	f8c4 0005 	str.w	r0, [r4, #5]
    df20:	8948      	ldrh	r0, [r1, #10]
    df22:	f8a4 0009 	strh.w	r0, [r4, #9]
    df26:	200a      	movs	r0, #10
    df28:	e023      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    df2a:	7023      	strb	r3, [r4, #0]
    df2c:	20a4      	movs	r0, #164	; 0xa4
    df2e:	70a0      	strb	r0, [r4, #2]
    df30:	7908      	ldrb	r0, [r1, #4]
    df32:	70e0      	strb	r0, [r4, #3]
    df34:	8888      	ldrh	r0, [r1, #4]
    df36:	0a00      	lsrs	r0, r0, #8
    df38:	7120      	strb	r0, [r4, #4]
    df3a:	7988      	ldrb	r0, [r1, #6]
    df3c:	7160      	strb	r0, [r4, #5]
    df3e:	79c8      	ldrb	r0, [r1, #7]
    df40:	71a0      	strb	r0, [r4, #6]
    df42:	2007      	movs	r0, #7
    df44:	e015      	b.n	df72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    df46:	7023      	strb	r3, [r4, #0]
    df48:	2080      	movs	r0, #128	; 0x80
    df4a:	70a0      	strb	r0, [r4, #2]
    df4c:	888a      	ldrh	r2, [r1, #4]
    df4e:	f8a4 2003 	strh.w	r2, [r4, #3]
    df52:	88ca      	ldrh	r2, [r1, #6]
    df54:	f8a4 2005 	strh.w	r2, [r4, #5]
    df58:	7a0a      	ldrb	r2, [r1, #8]
    df5a:	71e2      	strb	r2, [r4, #7]
    df5c:	894a      	ldrh	r2, [r1, #10]
    df5e:	8122      	strh	r2, [r4, #8]
    df60:	898a      	ldrh	r2, [r1, #12]
    df62:	8162      	strh	r2, [r4, #10]
    df64:	89ca      	ldrh	r2, [r1, #14]
    df66:	81a2      	strh	r2, [r4, #12]
    df68:	7c09      	ldrb	r1, [r1, #16]
    df6a:	f001 0101 	and.w	r1, r1, #1
    df6e:	73a1      	strb	r1, [r4, #14]
    df70:	200d      	movs	r0, #13
    df72:	7060      	strb	r0, [r4, #1]
    df74:	1c80      	adds	r0, r0, #2
    df76:	e777      	b.n	de68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>

0000df78 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    df78:	223e      	movs	r2, #62	; 0x3e
    df7a:	7002      	strb	r2, [r0, #0]
    df7c:	2201      	movs	r2, #1
    df7e:	7082      	strb	r2, [r0, #2]
    df80:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    df84:	70c2      	strb	r2, [r0, #3]
    df86:	788a      	ldrb	r2, [r1, #2]
    df88:	7102      	strb	r2, [r0, #4]
    df8a:	884a      	ldrh	r2, [r1, #2]
    df8c:	0a12      	lsrs	r2, r2, #8
    df8e:	7142      	strb	r2, [r0, #5]
    df90:	790a      	ldrb	r2, [r1, #4]
    df92:	7182      	strb	r2, [r0, #6]
    df94:	794a      	ldrb	r2, [r1, #5]
    df96:	71c2      	strb	r2, [r0, #7]
    df98:	f8d1 2006 	ldr.w	r2, [r1, #6]
    df9c:	6082      	str	r2, [r0, #8]
    df9e:	894a      	ldrh	r2, [r1, #10]
    dfa0:	8182      	strh	r2, [r0, #12]
    dfa2:	7e0a      	ldrb	r2, [r1, #24]
    dfa4:	7382      	strb	r2, [r0, #14]
    dfa6:	8b0a      	ldrh	r2, [r1, #24]
    dfa8:	0a12      	lsrs	r2, r2, #8
    dfaa:	73c2      	strb	r2, [r0, #15]
    dfac:	7e8a      	ldrb	r2, [r1, #26]
    dfae:	7402      	strb	r2, [r0, #16]
    dfb0:	8b4a      	ldrh	r2, [r1, #26]
    dfb2:	0a12      	lsrs	r2, r2, #8
    dfb4:	7442      	strb	r2, [r0, #17]
    dfb6:	7f0a      	ldrb	r2, [r1, #28]
    dfb8:	7482      	strb	r2, [r0, #18]
    dfba:	8b8a      	ldrh	r2, [r1, #28]
    dfbc:	0a12      	lsrs	r2, r2, #8
    dfbe:	74c2      	strb	r2, [r0, #19]
    dfc0:	7f89      	ldrb	r1, [r1, #30]
    dfc2:	7501      	strb	r1, [r0, #20]
    dfc4:	2113      	movs	r1, #19
    dfc6:	7041      	strb	r1, [r0, #1]
    dfc8:	4608      	mov	r0, r1
    dfca:	4770      	bx	lr
    dfcc:	094a      	lsrs	r2, r1, #5
    dfce:	f001 011f 	and.w	r1, r1, #31
    dfd2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    dfd6:	40c8      	lsrs	r0, r1
    dfd8:	f000 0001 	and.w	r0, r0, #1
    dfdc:	4770      	bx	lr

0000dfde <sdc_hci_data_get>:
    dfde:	b510      	push	{r4, lr}
    dfe0:	b120      	cbz	r0, dfec <sdc_hci_data_get+0xe>
    dfe2:	f7ff fd9a 	bl	db1a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    dfe6:	b120      	cbz	r0, dff2 <sdc_hci_data_get+0x14>
    dfe8:	2000      	movs	r0, #0
    dfea:	bd10      	pop	{r4, pc}
    dfec:	f06f 0015 	mvn.w	r0, #21
    dff0:	bd10      	pop	{r4, pc}
    dff2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dff6:	bd10      	pop	{r4, pc}

0000dff8 <sdc_hci_data_put>:
    dff8:	b510      	push	{r4, lr}
    dffa:	f06f 0415 	mvn.w	r4, #21
    dffe:	b120      	cbz	r0, e00a <sdc_hci_data_put+0x12>
    e000:	f7ff fd99 	bl	db36 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    e004:	b108      	cbz	r0, e00a <sdc_hci_data_put+0x12>
    e006:	2000      	movs	r0, #0
    e008:	bd10      	pop	{r4, pc}
    e00a:	4620      	mov	r0, r4
    e00c:	bd10      	pop	{r4, pc}

0000e00e <sdc_hci_evt_get>:
    e00e:	b510      	push	{r4, lr}
    e010:	b120      	cbz	r0, e01c <sdc_hci_evt_get+0xe>
    e012:	f7ff fd99 	bl	db48 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    e016:	b120      	cbz	r0, e022 <sdc_hci_evt_get+0x14>
    e018:	2000      	movs	r0, #0
    e01a:	bd10      	pop	{r4, pc}
    e01c:	f06f 0015 	mvn.w	r0, #21
    e020:	bd10      	pop	{r4, pc}
    e022:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e026:	bd10      	pop	{r4, pc}

0000e028 <sdc_hci_get>:
    e028:	b118      	cbz	r0, e032 <sdc_hci_get+0xa>
    e02a:	b111      	cbz	r1, e032 <sdc_hci_get+0xa>
    e02c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e030:	4770      	bx	lr
    e032:	f06f 0015 	mvn.w	r0, #21
    e036:	4770      	bx	lr

0000e038 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    e038:	f002 bf30 	b.w	10e9c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000e03c <sdc_hci_cmd_cb_read_transmit_power_level>:
    e03c:	f002 bf7e 	b.w	10f3c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000e040 <sdc_hci_cmd_cb_set_event_mask>:
    e040:	b510      	push	{r4, lr}
    e042:	f7f7 fc03 	bl	584c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    e046:	2000      	movs	r0, #0
    e048:	bd10      	pop	{r4, pc}

0000e04a <sdc_hci_cmd_cb_set_event_mask_page_2>:
    e04a:	b510      	push	{r4, lr}
    e04c:	f7f7 fc0e 	bl	586c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    e050:	2000      	movs	r0, #0
    e052:	bd10      	pop	{r4, pc}

0000e054 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    e054:	f002 bf8e 	b.w	10f74 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000e058 <sdc_hci_cmd_vs_conn_event_extend>:
    e058:	b508      	push	{r3, lr}
    e05a:	7800      	ldrb	r0, [r0, #0]
    e05c:	f88d 0000 	strb.w	r0, [sp]
    e060:	4668      	mov	r0, sp
    e062:	f002 fe3c 	bl	10cde <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    e066:	bd08      	pop	{r3, pc}

0000e068 <sdc_hci_cmd_vs_conn_update>:
    e068:	2001      	movs	r0, #1
    e06a:	4770      	bx	lr

0000e06c <sdc_hci_cmd_vs_event_length_set>:
    e06c:	f7fd ba0a 	b.w	b484 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000e070 <sdc_hci_cmd_vs_llpm_mode_set>:
    e070:	2001      	movs	r0, #1
    e072:	4770      	bx	lr

0000e074 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    e074:	7881      	ldrb	r1, [r0, #2]
    e076:	8800      	ldrh	r0, [r0, #0]
    e078:	f002 bdf9 	b.w	10c6e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000e07c <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    e07c:	7800      	ldrb	r0, [r0, #0]
    e07e:	b100      	cbz	r0, e082 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    e080:	2001      	movs	r0, #1
    e082:	f002 bdef 	b.w	10c64 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000e086 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    e086:	b570      	push	{r4, r5, r6, lr}
    e088:	4605      	mov	r5, r0
    e08a:	2210      	movs	r2, #16
    e08c:	2100      	movs	r1, #0
    e08e:	f7ff fc3d 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e092:	2210      	movs	r2, #16
    e094:	2100      	movs	r1, #0
    e096:	f105 0010 	add.w	r0, r5, #16
    e09a:	f7ff fc37 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e09e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    e0a2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    e0a6:	1c40      	adds	r0, r0, #1
    e0a8:	d10b      	bne.n	e0c2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e0aa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e0ae:	1c40      	adds	r0, r0, #1
    e0b0:	d107      	bne.n	e0c2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e0b2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    e0b6:	1c40      	adds	r0, r0, #1
    e0b8:	d103      	bne.n	e0c2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e0ba:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    e0be:	1c40      	adds	r0, r0, #1
    e0c0:	d00b      	beq.n	e0da <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    e0c2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    e0c6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e0ca:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    e0ce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    e0d2:	612a      	str	r2, [r5, #16]
    e0d4:	6168      	str	r0, [r5, #20]
    e0d6:	61a9      	str	r1, [r5, #24]
    e0d8:	61eb      	str	r3, [r5, #28]
    e0da:	2000      	movs	r0, #0
    e0dc:	f7f8 f90c 	bl	62f8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    e0e0:	b918      	cbnz	r0, e0ea <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    e0e2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    e0e6:	07c0      	lsls	r0, r0, #31
    e0e8:	d118      	bne.n	e11c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e0ea:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    e0ee:	1c40      	adds	r0, r0, #1
    e0f0:	d10b      	bne.n	e10a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e0f2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    e0f6:	1c40      	adds	r0, r0, #1
    e0f8:	d107      	bne.n	e10a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e0fa:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    e0fe:	1c40      	adds	r0, r0, #1
    e100:	d103      	bne.n	e10a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e102:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e106:	1c40      	adds	r0, r0, #1
    e108:	d008      	beq.n	e11c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e10a:	f854 0f90 	ldr.w	r0, [r4, #144]!
    e10e:	6861      	ldr	r1, [r4, #4]
    e110:	68a2      	ldr	r2, [r4, #8]
    e112:	68e3      	ldr	r3, [r4, #12]
    e114:	6028      	str	r0, [r5, #0]
    e116:	6069      	str	r1, [r5, #4]
    e118:	60aa      	str	r2, [r5, #8]
    e11a:	60eb      	str	r3, [r5, #12]
    e11c:	2000      	movs	r0, #0
    e11e:	bd70      	pop	{r4, r5, r6, pc}

0000e120 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    e120:	b538      	push	{r3, r4, r5, lr}
    e122:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    e126:	4604      	mov	r4, r0
    e128:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e12c:	1c40      	adds	r0, r0, #1
    e12e:	d105      	bne.n	e13c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    e130:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    e134:	43c0      	mvns	r0, r0
    e136:	0400      	lsls	r0, r0, #16
    e138:	0c00      	lsrs	r0, r0, #16
    e13a:	d03e      	beq.n	e1ba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e13c:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    e140:	07c0      	lsls	r0, r0, #31
    e142:	d03a      	beq.n	e1ba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e144:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e148:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    e14c:	f8ad 1000 	strh.w	r1, [sp]
    e150:	f8c4 0001 	str.w	r0, [r4, #1]
    e154:	f8bd 0000 	ldrh.w	r0, [sp]
    e158:	f8a4 0005 	strh.w	r0, [r4, #5]
    e15c:	79a0      	ldrb	r0, [r4, #6]
    e15e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    e162:	71a0      	strb	r0, [r4, #6]
    e164:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    e168:	1c40      	adds	r0, r0, #1
    e16a:	d00f      	beq.n	e18c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e16c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    e170:	1c40      	adds	r0, r0, #1
    e172:	d00b      	beq.n	e18c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e174:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    e178:	1c40      	adds	r0, r0, #1
    e17a:	d007      	beq.n	e18c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e17c:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    e180:	1c40      	adds	r0, r0, #1
    e182:	d003      	beq.n	e18c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e184:	2000      	movs	r0, #0
    e186:	f7f8 f8b7 	bl	62f8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    e18a:	b140      	cbz	r0, e19e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    e18c:	2210      	movs	r2, #16
    e18e:	2100      	movs	r1, #0
    e190:	1de0      	adds	r0, r4, #7
    e192:	f7ff fbbb 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e196:	2001      	movs	r0, #1
    e198:	7020      	strb	r0, [r4, #0]
    e19a:	2000      	movs	r0, #0
    e19c:	bd38      	pop	{r3, r4, r5, pc}
    e19e:	f855 2f90 	ldr.w	r2, [r5, #144]!
    e1a2:	6869      	ldr	r1, [r5, #4]
    e1a4:	68a8      	ldr	r0, [r5, #8]
    e1a6:	68eb      	ldr	r3, [r5, #12]
    e1a8:	f8c4 2007 	str.w	r2, [r4, #7]
    e1ac:	f8c4 100b 	str.w	r1, [r4, #11]
    e1b0:	f8c4 000f 	str.w	r0, [r4, #15]
    e1b4:	f8c4 3013 	str.w	r3, [r4, #19]
    e1b8:	e7ed      	b.n	e196 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    e1ba:	2000      	movs	r0, #0
    e1bc:	e7ec      	b.n	e198 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000e1be <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    e1be:	f002 bd80 	b.w	10cc2 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000e1c2 <sdc_hci_cmd_ip_read_bd_addr>:
    e1c2:	f002 be7c 	b.w	10ebe <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000e1c6 <sdc_hci_cmd_ip_read_local_version_information>:
    e1c6:	f7fd b96b 	b.w	b4a0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000e1ca <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    e1ca:	f002 bb3e 	b.w	1084a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000e1ce <sdc_hci_cmd_le_clear_filter_accept_list>:
    e1ce:	f002 bb53 	b.w	10878 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000e1d2 <sdc_hci_cmd_le_encrypt>:
    e1d2:	f002 bb5b 	b.w	1088c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000e1d6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    e1d6:	8802      	ldrh	r2, [r0, #0]
    e1d8:	800a      	strh	r2, [r1, #0]
    e1da:	f002 bb60 	b.w	1089e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000e1de <sdc_hci_cmd_le_long_term_key_request_reply>:
    e1de:	8802      	ldrh	r2, [r0, #0]
    e1e0:	800a      	strh	r2, [r1, #0]
    e1e2:	f002 bb75 	b.w	108d0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000e1e6 <sdc_hci_cmd_le_rand>:
    e1e6:	f002 bb9d 	b.w	10924 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000e1ea <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    e1ea:	f002 bba1 	b.w	10930 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000e1ee <sdc_hci_cmd_le_read_buffer_size>:
    e1ee:	f7fd b84f 	b.w	b290 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000e1f2 <sdc_hci_cmd_le_read_channel_map>:
    e1f2:	f7fd b857 	b.w	b2a4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000e1f6 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    e1f6:	f002 bbd2 	b.w	1099e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000e1fa <sdc_hci_cmd_le_read_max_data_length>:
    e1fa:	f002 bba2 	b.w	10942 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000e1fe <sdc_hci_cmd_le_read_phy>:
    e1fe:	f7fd b879 	b.w	b2f4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000e202 <sdc_hci_cmd_le_read_remote_features>:
    e202:	f002 bba7 	b.w	10954 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000e206 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    e206:	f7fd b89b 	b.w	b340 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000e20a <sdc_hci_cmd_le_read_transmit_power>:
    e20a:	f002 bbbf 	b.w	1098c <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000e20e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    e20e:	f002 bbca 	b.w	109a6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000e212 <sdc_hci_cmd_le_set_adv_data>:
    e212:	f002 bbdd 	b.w	109d0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000e216 <sdc_hci_cmd_le_set_adv_enable>:
    e216:	f002 bbf0 	b.w	109fa <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000e21a <sdc_hci_cmd_le_set_adv_params>:
    e21a:	f002 bc21 	b.w	10a60 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000e21e <sdc_hci_cmd_le_set_data_length>:
    e21e:	f002 bcb4 	b.w	10b8a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000e222 <sdc_hci_cmd_le_set_default_phy>:
    e222:	f7fd b897 	b.w	b354 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000e226 <sdc_hci_cmd_le_set_event_mask>:
    e226:	b510      	push	{r4, lr}
    e228:	f7f7 fb08 	bl	583c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    e22c:	2000      	movs	r0, #0
    e22e:	bd10      	pop	{r4, pc}

0000e230 <sdc_hci_cmd_le_set_phy>:
    e230:	f002 bccb 	b.w	10bca <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000e234 <sdc_hci_cmd_le_set_random_address>:
    e234:	f002 bce2 	b.w	10bfc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000e238 <sdc_hci_cmd_le_set_scan_response_data>:
    e238:	f002 bcee 	b.w	10c18 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000e23c <sdc_hci_cmd_le_write_suggested_default_data_length>:
    e23c:	f002 bd01 	b.w	10c42 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000e240 <sdc_hci_cmd_lc_disconnect>:
    e240:	f002 bab5 	b.w	107ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000e244 <sdc_hci_cmd_lc_read_remote_version_information>:
    e244:	f002 be47 	b.w	10ed6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    e248:	b570      	push	{r4, r5, r6, lr}
    e24a:	880b      	ldrh	r3, [r1, #0]
    e24c:	7f04      	ldrb	r4, [r0, #28]
    e24e:	f100 0524 	add.w	r5, r0, #36	; 0x24
    e252:	f3c3 060e 	ubfx	r6, r3, #0, #15
    e256:	8802      	ldrh	r2, [r0, #0]
    e258:	4435      	add	r5, r6
    e25a:	1da4      	adds	r4, r4, #6
    e25c:	882d      	ldrh	r5, [r5, #0]
    e25e:	4422      	add	r2, r4
    e260:	b292      	uxth	r2, r2
    e262:	4425      	add	r5, r4
    e264:	1e54      	subs	r4, r2, #1
    e266:	442c      	add	r4, r5
    e268:	fb94 f4f2 	sdiv	r4, r4, r2
    e26c:	fb02 6204 	mla	r2, r2, r4, r6
    e270:	8840      	ldrh	r0, [r0, #2]
    e272:	b292      	uxth	r2, r2
    e274:	4290      	cmp	r0, r2
    e276:	d903      	bls.n	e280 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    e278:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    e27c:	4310      	orrs	r0, r2
    e27e:	e002      	b.n	e286 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    e280:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e284:	4398      	bics	r0, r3
    e286:	8008      	strh	r0, [r1, #0]
    e288:	bd70      	pop	{r4, r5, r6, pc}
    e28a:	0442      	lsls	r2, r0, #17
    e28c:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    e290:	d107      	bne.n	e2a2 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    e292:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    e296:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    e29a:	4288      	cmp	r0, r1
    e29c:	d001      	beq.n	e2a2 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    e29e:	2001      	movs	r0, #1
    e2a0:	4770      	bx	lr
    e2a2:	2000      	movs	r0, #0
    e2a4:	4770      	bx	lr

0000e2a6 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    e2a6:	b570      	push	{r4, r5, r6, lr}
    e2a8:	7f00      	ldrb	r0, [r0, #28]
    e2aa:	461c      	mov	r4, r3
    e2ac:	1d80      	adds	r0, r0, #6
    e2ae:	4408      	add	r0, r1
    e2b0:	4613      	mov	r3, r2
    e2b2:	8809      	ldrh	r1, [r1, #0]
    e2b4:	9a04      	ldr	r2, [sp, #16]
    e2b6:	1cc9      	adds	r1, r1, #3
    e2b8:	b289      	uxth	r1, r1
    e2ba:	1915      	adds	r5, r2, r4
    e2bc:	1ec0      	subs	r0, r0, #3
    e2be:	428d      	cmp	r5, r1
    e2c0:	d805      	bhi.n	e2ce <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    e2c2:	1881      	adds	r1, r0, r2
    e2c4:	4622      	mov	r2, r4
    e2c6:	4618      	mov	r0, r3
    e2c8:	f7ff faa6 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e2cc:	e000      	b.n	e2d0 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    e2ce:	2400      	movs	r4, #0
    e2d0:	4620      	mov	r0, r4
    e2d2:	bd70      	pop	{r4, r5, r6, pc}

0000e2d4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    e2d4:	b570      	push	{r4, r5, r6, lr}
    e2d6:	7f00      	ldrb	r0, [r0, #28]
    e2d8:	461c      	mov	r4, r3
    e2da:	1d80      	adds	r0, r0, #6
    e2dc:	4408      	add	r0, r1
    e2de:	4613      	mov	r3, r2
    e2e0:	8809      	ldrh	r1, [r1, #0]
    e2e2:	9a04      	ldr	r2, [sp, #16]
    e2e4:	1cc9      	adds	r1, r1, #3
    e2e6:	b289      	uxth	r1, r1
    e2e8:	1915      	adds	r5, r2, r4
    e2ea:	1ec0      	subs	r0, r0, #3
    e2ec:	428d      	cmp	r5, r1
    e2ee:	d805      	bhi.n	e2fc <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    e2f0:	4410      	add	r0, r2
    e2f2:	4622      	mov	r2, r4
    e2f4:	4619      	mov	r1, r3
    e2f6:	f7ff fa8f 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e2fa:	e000      	b.n	e2fe <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    e2fc:	2400      	movs	r4, #0
    e2fe:	4620      	mov	r0, r4
    e300:	bd70      	pop	{r4, r5, r6, pc}

0000e302 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    e302:	8881      	ldrh	r1, [r0, #4]
    e304:	88c0      	ldrh	r0, [r0, #6]
    e306:	4288      	cmp	r0, r1
    e308:	d101      	bne.n	e30e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    e30a:	2001      	movs	r0, #1
    e30c:	4770      	bx	lr
    e30e:	2000      	movs	r0, #0
    e310:	4770      	bx	lr

0000e312 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    e312:	8881      	ldrh	r1, [r0, #4]
    e314:	8900      	ldrh	r0, [r0, #8]
    e316:	4288      	cmp	r0, r1
    e318:	d101      	bne.n	e31e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    e31a:	2001      	movs	r0, #1
    e31c:	4770      	bx	lr
    e31e:	2000      	movs	r0, #0
    e320:	4770      	bx	lr

0000e322 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    e322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e326:	460f      	mov	r7, r1
    e328:	4604      	mov	r4, r0
    e32a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e32e:	8880      	ldrh	r0, [r0, #4]
    e330:	2600      	movs	r6, #0
    e332:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e336:	1845      	adds	r5, r0, r1
    e338:	603e      	str	r6, [r7, #0]
    e33a:	8a20      	ldrh	r0, [r4, #16]
    e33c:	2800      	cmp	r0, #0
    e33e:	d01a      	beq.n	e376 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
    e340:	89a1      	ldrh	r1, [r4, #12]
    e342:	4408      	add	r0, r1
    e344:	b280      	uxth	r0, r0
    e346:	81a0      	strh	r0, [r4, #12]
    e348:	8829      	ldrh	r1, [r5, #0]
    e34a:	4288      	cmp	r0, r1
    e34c:	d905      	bls.n	e35a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    e34e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e352:	f04f 0014 	mov.w	r0, #20
    e356:	f7f7 f8ed 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e35a:	d10a      	bne.n	e372 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
    e35c:	69a0      	ldr	r0, [r4, #24]
    e35e:	b108      	cbz	r0, e364 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x42>
    e360:	7f40      	ldrb	r0, [r0, #29]
    e362:	70a8      	strb	r0, [r5, #2]
    e364:	f104 0104 	add.w	r1, r4, #4
    e368:	4620      	mov	r0, r4
    e36a:	f7ff ff6d 	bl	e248 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e36e:	81a6      	strh	r6, [r4, #12]
    e370:	603d      	str	r5, [r7, #0]
    e372:	8226      	strh	r6, [r4, #16]
    e374:	2001      	movs	r0, #1
    e376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e37a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    e37a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e37c:	4604      	mov	r4, r0
    e37e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    e382:	88c0      	ldrh	r0, [r0, #6]
    e384:	460e      	mov	r6, r1
    e386:	f3c0 070e 	ubfx	r7, r0, #0, #15
    e38a:	8a60      	ldrh	r0, [r4, #18]
    e38c:	19d9      	adds	r1, r3, r7
    e38e:	b108      	cbz	r0, e394 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    e390:	42b0      	cmp	r0, r6
    e392:	d201      	bcs.n	e398 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    e394:	2000      	movs	r0, #0
    e396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e398:	89e0      	ldrh	r0, [r4, #14]
    e39a:	2500      	movs	r5, #0
    e39c:	b140      	cbz	r0, e3b0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    e39e:	f8b1 c000 	ldrh.w	ip, [r1]
    e3a2:	4560      	cmp	r0, ip
    e3a4:	d008      	beq.n	e3b8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    e3a6:	f240 2151 	movw	r1, #593	; 0x251
    e3aa:	2014      	movs	r0, #20
    e3ac:	f7f7 f8c2 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3b0:	7f60      	ldrb	r0, [r4, #29]
    e3b2:	7088      	strb	r0, [r1, #2]
    e3b4:	800d      	strh	r5, [r1, #0]
    e3b6:	e00e      	b.n	e3d6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    e3b8:	f894 c01c 	ldrb.w	ip, [r4, #28]
    e3bc:	4418      	add	r0, r3
    e3be:	f10c 0c06 	add.w	ip, ip, #6
    e3c2:	44bc      	add	ip, r7
    e3c4:	4460      	add	r0, ip
    e3c6:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    e3ca:	f820 cc03 	strh.w	ip, [r0, #-3]
    e3ce:	f894 c020 	ldrb.w	ip, [r4, #32]
    e3d2:	f800 cc01 	strb.w	ip, [r0, #-1]
    e3d6:	89e0      	ldrh	r0, [r4, #14]
    e3d8:	4430      	add	r0, r6
    e3da:	81e0      	strh	r0, [r4, #14]
    e3dc:	8808      	ldrh	r0, [r1, #0]
    e3de:	4430      	add	r0, r6
    e3e0:	8008      	strh	r0, [r1, #0]
    e3e2:	b19a      	cbz	r2, e40c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    e3e4:	1da1      	adds	r1, r4, #6
    e3e6:	4620      	mov	r0, r4
    e3e8:	f7ff ff2e 	bl	e248 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e3ec:	81e5      	strh	r5, [r4, #14]
    e3ee:	7f60      	ldrb	r0, [r4, #29]
    e3f0:	1c40      	adds	r0, r0, #1
    e3f2:	7760      	strb	r0, [r4, #29]
    e3f4:	7da0      	ldrb	r0, [r4, #22]
    e3f6:	f88d 0000 	strb.w	r0, [sp]
    e3fa:	9800      	ldr	r0, [sp, #0]
    e3fc:	9000      	str	r0, [sp, #0]
    e3fe:	f89d 0000 	ldrb.w	r0, [sp]
    e402:	b178      	cbz	r0, e424 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e404:	88e0      	ldrh	r0, [r4, #6]
    e406:	82a0      	strh	r0, [r4, #20]
    e408:	75a5      	strb	r5, [r4, #22]
    e40a:	e00b      	b.n	e424 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e40c:	7f20      	ldrb	r0, [r4, #28]
    e40e:	89e1      	ldrh	r1, [r4, #14]
    e410:	1d80      	adds	r0, r0, #6
    e412:	4438      	add	r0, r7
    e414:	4419      	add	r1, r3
    e416:	4408      	add	r0, r1
    e418:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    e41c:	83e1      	strh	r1, [r4, #30]
    e41e:	7880      	ldrb	r0, [r0, #2]
    e420:	f884 0020 	strb.w	r0, [r4, #32]
    e424:	8265      	strh	r5, [r4, #18]
    e426:	2001      	movs	r0, #1
    e428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e42a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    e42a:	1cc0      	adds	r0, r0, #3
    e42c:	4770      	bx	lr

0000e42e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    e42e:	b510      	push	{r4, lr}
    e430:	4604      	mov	r4, r0
    e432:	88c0      	ldrh	r0, [r0, #6]
    e434:	88a1      	ldrh	r1, [r4, #4]
    e436:	4281      	cmp	r1, r0
    e438:	d007      	beq.n	e44a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e43a:	89a0      	ldrh	r0, [r4, #12]
    e43c:	b928      	cbnz	r0, e44a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e43e:	8a20      	ldrh	r0, [r4, #16]
    e440:	b918      	cbnz	r0, e44a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e442:	88a0      	ldrh	r0, [r4, #4]
    e444:	8aa1      	ldrh	r1, [r4, #20]
    e446:	4288      	cmp	r0, r1
    e448:	d101      	bne.n	e44e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    e44a:	2000      	movs	r0, #0
    e44c:	bd10      	pop	{r4, pc}
    e44e:	1d21      	adds	r1, r4, #4
    e450:	4620      	mov	r0, r4
    e452:	f7ff fef9 	bl	e248 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e456:	2000      	movs	r0, #0
    e458:	8220      	strh	r0, [r4, #16]
    e45a:	2001      	movs	r0, #1
    e45c:	bd10      	pop	{r4, pc}

0000e45e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    e45e:	b510      	push	{r4, lr}
    e460:	4604      	mov	r4, r0
    e462:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e466:	88c0      	ldrh	r0, [r0, #6]
    e468:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e46c:	4402      	add	r2, r0
    e46e:	8820      	ldrh	r0, [r4, #0]
    e470:	2845      	cmp	r0, #69	; 0x45
    e472:	d200      	bcs.n	e476 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    e474:	2045      	movs	r0, #69	; 0x45
    e476:	4288      	cmp	r0, r1
    e478:	d204      	bcs.n	e484 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    e47a:	f240 1119 	movw	r1, #281	; 0x119
    e47e:	2014      	movs	r0, #20
    e480:	f7f7 f858 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e484:	7de0      	ldrb	r0, [r4, #23]
    e486:	2800      	cmp	r0, #0
    e488:	d003      	beq.n	e492 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    e48a:	8810      	ldrh	r0, [r2, #0]
    e48c:	4288      	cmp	r0, r1
    e48e:	d201      	bcs.n	e494 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    e490:	2000      	movs	r0, #0
    e492:	bd10      	pop	{r4, pc}
    e494:	8011      	strh	r1, [r2, #0]
    e496:	1da1      	adds	r1, r4, #6
    e498:	4620      	mov	r0, r4
    e49a:	f7ff fed5 	bl	e248 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e49e:	2000      	movs	r0, #0
    e4a0:	75e0      	strb	r0, [r4, #23]
    e4a2:	2001      	movs	r0, #1
    e4a4:	bd10      	pop	{r4, pc}

0000e4a6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    e4a6:	b530      	push	{r4, r5, lr}
    e4a8:	88c4      	ldrh	r4, [r0, #6]
    e4aa:	8881      	ldrh	r1, [r0, #4]
    e4ac:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e4b0:	f3c1 030e 	ubfx	r3, r1, #0, #15
    e4b4:	4413      	add	r3, r2
    e4b6:	8882      	ldrh	r2, [r0, #4]
    e4b8:	8a85      	ldrh	r5, [r0, #20]
    e4ba:	42aa      	cmp	r2, r5
    e4bc:	d012      	beq.n	e4e4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e4be:	42a1      	cmp	r1, r4
    e4c0:	d010      	beq.n	e4e4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e4c2:	8981      	ldrh	r1, [r0, #12]
    e4c4:	b971      	cbnz	r1, e4e4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e4c6:	6982      	ldr	r2, [r0, #24]
    e4c8:	b172      	cbz	r2, e4e8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e4ca:	4610      	mov	r0, r2
    e4cc:	f7ff ff21 	bl	e312 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    e4d0:	b950      	cbnz	r0, e4e8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e4d2:	8910      	ldrh	r0, [r2, #8]
    e4d4:	3224      	adds	r2, #36	; 0x24
    e4d6:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e4da:	4410      	add	r0, r2
    e4dc:	7899      	ldrb	r1, [r3, #2]
    e4de:	7880      	ldrb	r0, [r0, #2]
    e4e0:	4288      	cmp	r0, r1
    e4e2:	d101      	bne.n	e4e8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e4e4:	2000      	movs	r0, #0
    e4e6:	bd30      	pop	{r4, r5, pc}
    e4e8:	4618      	mov	r0, r3
    e4ea:	bd30      	pop	{r4, r5, pc}

0000e4ec <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    e4ec:	7f00      	ldrb	r0, [r0, #28]
    e4ee:	1d80      	adds	r0, r0, #6
    e4f0:	4408      	add	r0, r1
    e4f2:	1ec0      	subs	r0, r0, #3
    e4f4:	6010      	str	r0, [r2, #0]
    e4f6:	8808      	ldrh	r0, [r1, #0]
    e4f8:	4770      	bx	lr

0000e4fa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    e4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4fe:	460e      	mov	r6, r1
    e500:	88c1      	ldrh	r1, [r0, #6]
    e502:	8902      	ldrh	r2, [r0, #8]
    e504:	4604      	mov	r4, r0
    e506:	f100 0824 	add.w	r8, r0, #36	; 0x24
    e50a:	8800      	ldrh	r0, [r0, #0]
    e50c:	f3c1 050e 	ubfx	r5, r1, #0, #15
    e510:	f3c2 070e 	ubfx	r7, r2, #0, #15
    e514:	2845      	cmp	r0, #69	; 0x45
    e516:	d200      	bcs.n	e51a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    e518:	2045      	movs	r0, #69	; 0x45
    e51a:	42b0      	cmp	r0, r6
    e51c:	d203      	bcs.n	e526 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    e51e:	21db      	movs	r1, #219	; 0xdb
    e520:	2014      	movs	r0, #20
    e522:	f7f7 f807 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e526:	4610      	mov	r0, r2
    e528:	f7ff feaf 	bl	e28a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e52c:	b110      	cbz	r0, e534 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    e52e:	2000      	movs	r0, #0
    e530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e534:	42af      	cmp	r7, r5
    e536:	d908      	bls.n	e54a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e538:	7f21      	ldrb	r1, [r4, #28]
    e53a:	1b78      	subs	r0, r7, r5
    e53c:	1a40      	subs	r0, r0, r1
    e53e:	1f80      	subs	r0, r0, #6
    e540:	4286      	cmp	r6, r0
    e542:	dd02      	ble.n	e54a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e544:	2000      	movs	r0, #0
    e546:	75e0      	strb	r0, [r4, #23]
    e548:	e7f1      	b.n	e52e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    e54a:	eb08 0005 	add.w	r0, r8, r5
    e54e:	2101      	movs	r1, #1
    e550:	8006      	strh	r6, [r0, #0]
    e552:	75e1      	strb	r1, [r4, #23]
    e554:	e7ec      	b.n	e530 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000e556 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    e556:	b538      	push	{r3, r4, r5, lr}
    e558:	88c4      	ldrh	r4, [r0, #6]
    e55a:	8881      	ldrh	r1, [r0, #4]
    e55c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e560:	f3c1 030e 	ubfx	r3, r1, #0, #15
    e564:	441a      	add	r2, r3
    e566:	42a1      	cmp	r1, r4
    e568:	d010      	beq.n	e58c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e56a:	8983      	ldrh	r3, [r0, #12]
    e56c:	8a05      	ldrh	r5, [r0, #16]
    e56e:	8812      	ldrh	r2, [r2, #0]
    e570:	442b      	add	r3, r5
    e572:	4293      	cmp	r3, r2
    e574:	d308      	bcc.n	e588 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    e576:	f8ad 1000 	strh.w	r1, [sp]
    e57a:	4669      	mov	r1, sp
    e57c:	f7ff fe64 	bl	e248 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e580:	f8bd 0000 	ldrh.w	r0, [sp]
    e584:	42a0      	cmp	r0, r4
    e586:	d001      	beq.n	e58c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e588:	2001      	movs	r0, #1
    e58a:	bd38      	pop	{r3, r4, r5, pc}
    e58c:	2000      	movs	r0, #0
    e58e:	bd38      	pop	{r3, r4, r5, pc}

0000e590 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    e590:	b570      	push	{r4, r5, r6, lr}
    e592:	88c6      	ldrh	r6, [r0, #6]
    e594:	8885      	ldrh	r5, [r0, #4]
    e596:	4603      	mov	r3, r0
    e598:	f100 0424 	add.w	r4, r0, #36	; 0x24
    e59c:	f3c5 000e 	ubfx	r0, r5, #0, #15
    e5a0:	4420      	add	r0, r4
    e5a2:	42b5      	cmp	r5, r6
    e5a4:	d102      	bne.n	e5ac <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    e5a6:	2000      	movs	r0, #0
    e5a8:	8218      	strh	r0, [r3, #16]
    e5aa:	bd70      	pop	{r4, r5, r6, pc}
    e5ac:	8804      	ldrh	r4, [r0, #0]
    e5ae:	899d      	ldrh	r5, [r3, #12]
    e5b0:	7f1e      	ldrb	r6, [r3, #28]
    e5b2:	1b64      	subs	r4, r4, r5
    e5b4:	4435      	add	r5, r6
    e5b6:	4428      	add	r0, r5
    e5b8:	880d      	ldrh	r5, [r1, #0]
    e5ba:	b2a4      	uxth	r4, r4
    e5bc:	1cc0      	adds	r0, r0, #3
    e5be:	42a5      	cmp	r5, r4
    e5c0:	d900      	bls.n	e5c4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    e5c2:	800c      	strh	r4, [r1, #0]
    e5c4:	899c      	ldrh	r4, [r3, #12]
    e5c6:	b124      	cbz	r4, e5d2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    e5c8:	2400      	movs	r4, #0
    e5ca:	7014      	strb	r4, [r2, #0]
    e5cc:	8809      	ldrh	r1, [r1, #0]
    e5ce:	8219      	strh	r1, [r3, #16]
    e5d0:	bd70      	pop	{r4, r5, r6, pc}
    e5d2:	2401      	movs	r4, #1
    e5d4:	e7f9      	b.n	e5ca <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000e5d6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    e5d6:	b508      	push	{r3, lr}
    e5d8:	8a81      	ldrh	r1, [r0, #20]
    e5da:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e5de:	3aff      	subs	r2, #255	; 0xff
    e5e0:	d008      	beq.n	e5f4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    e5e2:	7d82      	ldrb	r2, [r0, #22]
    e5e4:	f88d 2000 	strb.w	r2, [sp]
    e5e8:	9a00      	ldr	r2, [sp, #0]
    e5ea:	9200      	str	r2, [sp, #0]
    e5ec:	f89d 2000 	ldrb.w	r2, [sp]
    e5f0:	b952      	cbnz	r2, e608 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e5f2:	e004      	b.n	e5fe <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    e5f4:	f240 318e 	movw	r1, #910	; 0x38e
    e5f8:	2014      	movs	r0, #20
    e5fa:	f7f6 ff9b 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5fe:	8880      	ldrh	r0, [r0, #4]
    e600:	4281      	cmp	r1, r0
    e602:	d101      	bne.n	e608 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e604:	2000      	movs	r0, #0
    e606:	bd08      	pop	{r3, pc}
    e608:	2001      	movs	r0, #1
    e60a:	bd08      	pop	{r3, pc}

0000e60c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    e60c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e610:	8281      	strh	r1, [r0, #20]
    e612:	2100      	movs	r1, #0
    e614:	7581      	strb	r1, [r0, #22]
    e616:	4770      	bx	lr

0000e618 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    e618:	b510      	push	{r4, lr}
    e61a:	8a81      	ldrh	r1, [r0, #20]
    e61c:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e620:	3aff      	subs	r2, #255	; 0xff
    e622:	d004      	beq.n	e62e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    e624:	f240 316a 	movw	r1, #874	; 0x36a
    e628:	2014      	movs	r0, #20
    e62a:	f7f6 ff83 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e62e:	88c1      	ldrh	r1, [r0, #6]
    e630:	8281      	strh	r1, [r0, #20]
    e632:	89c1      	ldrh	r1, [r0, #14]
    e634:	b109      	cbz	r1, e63a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    e636:	21ff      	movs	r1, #255	; 0xff
    e638:	e000      	b.n	e63c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    e63a:	2100      	movs	r1, #0
    e63c:	7581      	strb	r1, [r0, #22]
    e63e:	bd10      	pop	{r4, pc}

0000e640 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    e640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e644:	461d      	mov	r5, r3
    e646:	4616      	mov	r6, r2
    e648:	9f06      	ldr	r7, [sp, #24]
    e64a:	460b      	mov	r3, r1
    e64c:	4604      	mov	r4, r0
    e64e:	463a      	mov	r2, r7
    e650:	4629      	mov	r1, r5
    e652:	4630      	mov	r0, r6
    e654:	f000 f84f 	bl	e6f6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e658:	4283      	cmp	r3, r0
    e65a:	d201      	bcs.n	e660 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    e65c:	21a8      	movs	r1, #168	; 0xa8
    e65e:	e018      	b.n	e692 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e660:	1ce0      	adds	r0, r4, #3
    e662:	f020 0103 	bic.w	r1, r0, #3
    e666:	4620      	mov	r0, r4
    e668:	42a1      	cmp	r1, r4
    e66a:	d001      	beq.n	e670 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    e66c:	21a9      	movs	r1, #169	; 0xa9
    e66e:	e010      	b.n	e692 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e670:	2224      	movs	r2, #36	; 0x24
    e672:	2100      	movs	r1, #0
    e674:	f7ff f94a 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e678:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e67c:	82a0      	strh	r0, [r4, #20]
    e67e:	19a8      	adds	r0, r5, r6
    e680:	1d80      	adds	r0, r0, #6
    e682:	4378      	muls	r0, r7
    e684:	b280      	uxth	r0, r0
    e686:	7725      	strb	r5, [r4, #28]
    e688:	8060      	strh	r0, [r4, #2]
    e68a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    e68e:	d903      	bls.n	e698 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    e690:	21af      	movs	r1, #175	; 0xaf
    e692:	2014      	movs	r0, #20
    e694:	f7f6 ff4e 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e698:	8026      	strh	r6, [r4, #0]
    e69a:	2000      	movs	r0, #0
    e69c:	7760      	strb	r0, [r4, #29]
    e69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e6a2 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    e6a2:	6181      	str	r1, [r0, #24]
    e6a4:	6188      	str	r0, [r1, #24]
    e6a6:	4770      	bx	lr

0000e6a8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    e6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e6ac:	460b      	mov	r3, r1
    e6ae:	4604      	mov	r4, r0
    e6b0:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e6b4:	8905      	ldrh	r5, [r0, #8]
    e6b6:	8946      	ldrh	r6, [r0, #10]
    e6b8:	8880      	ldrh	r0, [r0, #4]
    e6ba:	f3c5 070e 	ubfx	r7, r5, #0, #15
    e6be:	4439      	add	r1, r7
    e6c0:	460f      	mov	r7, r1
    e6c2:	4285      	cmp	r5, r0
    e6c4:	d102      	bne.n	e6cc <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    e6c6:	2000      	movs	r0, #0
    e6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e6cc:	b10a      	cbz	r2, e6d2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    e6ce:	1cc8      	adds	r0, r1, #3
    e6d0:	6010      	str	r0, [r2, #0]
    e6d2:	b123      	cbz	r3, e6de <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    e6d4:	7f22      	ldrb	r2, [r4, #28]
    e6d6:	1cf9      	adds	r1, r7, #3
    e6d8:	4618      	mov	r0, r3
    e6da:	f7ff f89d 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e6de:	883f      	ldrh	r7, [r7, #0]
    e6e0:	f104 0108 	add.w	r1, r4, #8
    e6e4:	4620      	mov	r0, r4
    e6e6:	f7ff fdaf 	bl	e248 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e6ea:	42b5      	cmp	r5, r6
    e6ec:	d101      	bne.n	e6f2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    e6ee:	8920      	ldrh	r0, [r4, #8]
    e6f0:	8160      	strh	r0, [r4, #10]
    e6f2:	4638      	mov	r0, r7
    e6f4:	e7e8      	b.n	e6c8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000e6f6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    e6f6:	4401      	add	r1, r0
    e6f8:	1d89      	adds	r1, r1, #6
    e6fa:	4351      	muls	r1, r2
    e6fc:	b28a      	uxth	r2, r1
    e6fe:	2100      	movs	r1, #0
    e700:	2845      	cmp	r0, #69	; 0x45
    e702:	d202      	bcs.n	e70a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    e704:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    e708:	b281      	uxth	r1, r0
    e70a:	3224      	adds	r2, #36	; 0x24
    e70c:	1850      	adds	r0, r2, r1
    e70e:	b280      	uxth	r0, r0
    e710:	4770      	bx	lr

0000e712 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    e712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e716:	4688      	mov	r8, r1
    e718:	88c1      	ldrh	r1, [r0, #6]
    e71a:	4604      	mov	r4, r0
    e71c:	8900      	ldrh	r0, [r0, #8]
    e71e:	f3c1 060e 	ubfx	r6, r1, #0, #15
    e722:	f104 0524 	add.w	r5, r4, #36	; 0x24
    e726:	f3c0 070e 	ubfx	r7, r0, #0, #15
    e72a:	eb05 0906 	add.w	r9, r5, r6
    e72e:	f7ff fdac 	bl	e28a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e732:	2200      	movs	r2, #0
    e734:	b998      	cbnz	r0, e75e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e736:	8820      	ldrh	r0, [r4, #0]
    e738:	2845      	cmp	r0, #69	; 0x45
    e73a:	d200      	bcs.n	e73e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e73c:	2045      	movs	r0, #69	; 0x45
    e73e:	42b7      	cmp	r7, r6
    e740:	d906      	bls.n	e750 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e742:	7f23      	ldrb	r3, [r4, #28]
    e744:	1bb9      	subs	r1, r7, r6
    e746:	1ac9      	subs	r1, r1, r3
    e748:	1f89      	subs	r1, r1, #6
    e74a:	4281      	cmp	r1, r0
    e74c:	da00      	bge.n	e750 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e74e:	4608      	mov	r0, r1
    e750:	89e1      	ldrh	r1, [r4, #14]
    e752:	b111      	cbz	r1, e75a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e754:	f8b9 3000 	ldrh.w	r3, [r9]
    e758:	1ac0      	subs	r0, r0, r3
    e75a:	4540      	cmp	r0, r8
    e75c:	da03      	bge.n	e766 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e75e:	8262      	strh	r2, [r4, #18]
    e760:	2000      	movs	r0, #0
    e762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e766:	7f20      	ldrb	r0, [r4, #28]
    e768:	4429      	add	r1, r5
    e76a:	1d80      	adds	r0, r0, #6
    e76c:	4430      	add	r0, r6
    e76e:	4408      	add	r0, r1
    e770:	f8a4 8012 	strh.w	r8, [r4, #18]
    e774:	1ec0      	subs	r0, r0, #3
    e776:	e7f4      	b.n	e762 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000e778 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    e778:	2100      	movs	r1, #0
    e77a:	81c1      	strh	r1, [r0, #14]
    e77c:	8241      	strh	r1, [r0, #18]
    e77e:	7581      	strb	r1, [r0, #22]
    e780:	4770      	bx	lr

0000e782 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    e782:	b570      	push	{r4, r5, r6, lr}
    e784:	2300      	movs	r3, #0
    e786:	f1a1 0208 	sub.w	r2, r1, #8
    e78a:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    e78e:	42a2      	cmp	r2, r4
    e790:	d304      	bcc.n	e79c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    e792:	f240 11cd 	movw	r1, #461	; 0x1cd
    e796:	2015      	movs	r0, #21
    e798:	f7f6 fecc 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e79c:	6802      	ldr	r2, [r0, #0]
    e79e:	b90a      	cbnz	r2, e7a4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    e7a0:	e01e      	b.n	e7e0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    e7a2:	4610      	mov	r0, r2
    e7a4:	6802      	ldr	r2, [r0, #0]
    e7a6:	8893      	ldrh	r3, [r2, #4]
    e7a8:	428b      	cmp	r3, r1
    e7aa:	d002      	beq.n	e7b2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    e7ac:	6813      	ldr	r3, [r2, #0]
    e7ae:	2b00      	cmp	r3, #0
    e7b0:	d1f7      	bne.n	e7a2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    e7b2:	8894      	ldrh	r4, [r2, #4]
    e7b4:	4613      	mov	r3, r2
    e7b6:	428c      	cmp	r4, r1
    e7b8:	d101      	bne.n	e7be <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    e7ba:	6811      	ldr	r1, [r2, #0]
    e7bc:	e00d      	b.n	e7da <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    e7be:	f101 0508 	add.w	r5, r1, #8
    e7c2:	b2ae      	uxth	r6, r5
    e7c4:	2500      	movs	r5, #0
    e7c6:	42b4      	cmp	r4, r6
    e7c8:	d309      	bcc.n	e7de <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    e7ca:	1a64      	subs	r4, r4, r1
    e7cc:	4411      	add	r1, r2
    e7ce:	600d      	str	r5, [r1, #0]
    e7d0:	808c      	strh	r4, [r1, #4]
    e7d2:	6802      	ldr	r2, [r0, #0]
    e7d4:	6812      	ldr	r2, [r2, #0]
    e7d6:	6002      	str	r2, [r0, #0]
    e7d8:	600a      	str	r2, [r1, #0]
    e7da:	6001      	str	r1, [r0, #0]
    e7dc:	e000      	b.n	e7e0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    e7de:	2300      	movs	r3, #0
    e7e0:	4618      	mov	r0, r3
    e7e2:	bd70      	pop	{r4, r5, r6, pc}

0000e7e4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    e7e4:	b510      	push	{r4, lr}
    e7e6:	000c      	movs	r4, r1
    e7e8:	d004      	beq.n	e7f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    e7ea:	2c08      	cmp	r4, #8
    e7ec:	d207      	bcs.n	e7fe <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    e7ee:	f240 1195 	movw	r1, #405	; 0x195
    e7f2:	e00a      	b.n	e80a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    e7f4:	b108      	cbz	r0, e7fa <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    e7f6:	2100      	movs	r1, #0
    e7f8:	6001      	str	r1, [r0, #0]
    e7fa:	2000      	movs	r0, #0
    e7fc:	bd10      	pop	{r4, pc}
    e7fe:	b158      	cbz	r0, e818 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    e800:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    e804:	d304      	bcc.n	e810 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    e806:	f240 11a7 	movw	r1, #423	; 0x1a7
    e80a:	2015      	movs	r0, #21
    e80c:	f7f6 fe92 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e810:	b2a1      	uxth	r1, r4
    e812:	6800      	ldr	r0, [r0, #0]
    e814:	f000 f814 	bl	e840 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e818:	1d20      	adds	r0, r4, #4
    e81a:	bd10      	pop	{r4, pc}

0000e81c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e81c:	2100      	movs	r1, #0
    e81e:	6802      	ldr	r2, [r0, #0]
    e820:	e003      	b.n	e82a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e822:	8893      	ldrh	r3, [r2, #4]
    e824:	6812      	ldr	r2, [r2, #0]
    e826:	4419      	add	r1, r3
    e828:	b289      	uxth	r1, r1
    e82a:	2a00      	cmp	r2, #0
    e82c:	d1f9      	bne.n	e822 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e82e:	f000 b807 	b.w	e840 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e832 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e832:	2300      	movs	r3, #0
    e834:	600b      	str	r3, [r1, #0]
    e836:	808a      	strh	r2, [r1, #4]
    e838:	6802      	ldr	r2, [r0, #0]
    e83a:	600a      	str	r2, [r1, #0]
    e83c:	6001      	str	r1, [r0, #0]
    e83e:	4770      	bx	lr
    e840:	2300      	movs	r3, #0
    e842:	6043      	str	r3, [r0, #4]
    e844:	1d02      	adds	r2, r0, #4
    e846:	8101      	strh	r1, [r0, #8]
    e848:	6002      	str	r2, [r0, #0]
    e84a:	4770      	bx	lr

0000e84c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    e84c:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    e850:	3bff      	subs	r3, #255	; 0xff
    e852:	d001      	beq.n	e858 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    e854:	2902      	cmp	r1, #2
    e856:	d301      	bcc.n	e85c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    e858:	2000      	movs	r0, #0
    e85a:	4770      	bx	lr
    e85c:	f7f7 b930 	b.w	5ac0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000e860 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e860:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e864:	3aff      	subs	r2, #255	; 0xff
    e866:	d001      	beq.n	e86c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    e868:	2902      	cmp	r1, #2
    e86a:	d301      	bcc.n	e870 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    e86c:	2000      	movs	r0, #0
    e86e:	4770      	bx	lr
    e870:	f7f7 b960 	b.w	5b34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000e874 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e874:	b570      	push	{r4, r5, r6, lr}
    e876:	4605      	mov	r5, r0
    e878:	460c      	mov	r4, r1
    e87a:	4608      	mov	r0, r1
    e87c:	f000 f9a9 	bl	ebd2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e880:	b108      	cbz	r0, e886 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e882:	2010      	movs	r0, #16
    e884:	bd70      	pop	{r4, r5, r6, pc}
    e886:	2d02      	cmp	r5, #2
    e888:	d301      	bcc.n	e88e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    e88a:	2007      	movs	r0, #7
    e88c:	bd70      	pop	{r4, r5, r6, pc}
    e88e:	7025      	strb	r5, [r4, #0]
    e890:	2000      	movs	r0, #0
    e892:	8060      	strh	r0, [r4, #2]
    e894:	bd70      	pop	{r4, r5, r6, pc}
    e896:	b510      	push	{r4, lr}
    e898:	4604      	mov	r4, r0
    e89a:	f7f7 f997 	bl	5bcc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    e89e:	42a0      	cmp	r0, r4
    e8a0:	d901      	bls.n	e8a6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    e8a2:	2001      	movs	r0, #1
    e8a4:	bd10      	pop	{r4, pc}
    e8a6:	2000      	movs	r0, #0
    e8a8:	bd10      	pop	{r4, pc}
    e8aa:	4770      	bx	lr

0000e8ac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e8ac:	b570      	push	{r4, r5, r6, lr}
    e8ae:	460e      	mov	r6, r1
    e8b0:	461d      	mov	r5, r3
    e8b2:	4611      	mov	r1, r2
    e8b4:	f000 f813 	bl	e8de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    e8b8:	4604      	mov	r4, r0
    e8ba:	4629      	mov	r1, r5
    e8bc:	4630      	mov	r0, r6
    e8be:	f000 f804 	bl	e8ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    e8c2:	4420      	add	r0, r4
    e8c4:	1d00      	adds	r0, r0, #4
    e8c6:	b280      	uxth	r0, r0
    e8c8:	bd70      	pop	{r4, r5, r6, pc}
    e8ca:	b510      	push	{r4, lr}
    e8cc:	460a      	mov	r2, r1
    e8ce:	2101      	movs	r1, #1
    e8d0:	f7ff ff11 	bl	e6f6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e8d4:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e8d8:	1cc0      	adds	r0, r0, #3
    e8da:	4008      	ands	r0, r1
    e8dc:	bd10      	pop	{r4, pc}
    e8de:	b510      	push	{r4, lr}
    e8e0:	460a      	mov	r2, r1
    e8e2:	210a      	movs	r1, #10
    e8e4:	f7ff ff07 	bl	e6f6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e8e8:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e8ec:	1cc0      	adds	r0, r0, #3
    e8ee:	4008      	ands	r0, r1
    e8f0:	bd10      	pop	{r4, pc}
    e8f2:	b109      	cbz	r1, e8f8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    e8f4:	2100      	movs	r1, #0
    e8f6:	e000      	b.n	e8fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    e8f8:	2102      	movs	r1, #2
    e8fa:	1843      	adds	r3, r0, r1
    e8fc:	7d1a      	ldrb	r2, [r3, #20]
    e8fe:	2a02      	cmp	r2, #2
    e900:	d008      	beq.n	e914 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    e902:	7d5b      	ldrb	r3, [r3, #21]
    e904:	2b02      	cmp	r3, #2
    e906:	d009      	beq.n	e91c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    e908:	2a03      	cmp	r2, #3
    e90a:	d003      	beq.n	e914 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    e90c:	2b03      	cmp	r3, #3
    e90e:	d005      	beq.n	e91c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    e910:	2000      	movs	r0, #0
    e912:	4770      	bx	lr
    e914:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e918:	8b00      	ldrh	r0, [r0, #24]
    e91a:	4770      	bx	lr
    e91c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e920:	8b40      	ldrh	r0, [r0, #26]
    e922:	4770      	bx	lr
    e924:	b109      	cbz	r1, e92a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    e926:	2100      	movs	r1, #0
    e928:	e000      	b.n	e92c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    e92a:	2102      	movs	r1, #2
    e92c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e930:	8b01      	ldrh	r1, [r0, #24]
    e932:	b911      	cbnz	r1, e93a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    e934:	8b40      	ldrh	r0, [r0, #26]
    e936:	2800      	cmp	r0, #0
    e938:	d000      	beq.n	e93c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    e93a:	2001      	movs	r0, #1
    e93c:	4770      	bx	lr
    e93e:	b538      	push	{r3, r4, r5, lr}
    e940:	7883      	ldrb	r3, [r0, #2]
    e942:	f88d 3000 	strb.w	r3, [sp]
    e946:	9b00      	ldr	r3, [sp, #0]
    e948:	9300      	str	r3, [sp, #0]
    e94a:	f89d 3000 	ldrb.w	r3, [sp]
    e94e:	b95b      	cbnz	r3, e968 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    e950:	2400      	movs	r4, #0
    e952:	b10a      	cbz	r2, e958 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    e954:	2300      	movs	r3, #0
    e956:	e000      	b.n	e95a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    e958:	2302      	movs	r3, #2
    e95a:	18c2      	adds	r2, r0, r3
    e95c:	7d15      	ldrb	r5, [r2, #20]
    e95e:	2d02      	cmp	r5, #2
    e960:	d004      	beq.n	e96c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    e962:	7d52      	ldrb	r2, [r2, #21]
    e964:	2a02      	cmp	r2, #2
    e966:	d004      	beq.n	e972 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    e968:	2000      	movs	r0, #0
    e96a:	bd38      	pop	{r3, r4, r5, pc}
    e96c:	461a      	mov	r2, r3
    e96e:	1c5b      	adds	r3, r3, #1
    e970:	e000      	b.n	e974 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    e972:	1c5a      	adds	r2, r3, #1
    e974:	b179      	cbz	r1, e996 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    e976:	18c5      	adds	r5, r0, r3
    e978:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e97c:	752c      	strb	r4, [r5, #20]
    e97e:	831c      	strh	r4, [r3, #24]
    e980:	2303      	movs	r3, #3
    e982:	1884      	adds	r4, r0, r2
    e984:	7523      	strb	r3, [r4, #20]
    e986:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e98a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    e98e:	685b      	ldr	r3, [r3, #4]
    e990:	600b      	str	r3, [r1, #0]
    e992:	8b00      	ldrh	r0, [r0, #24]
    e994:	8088      	strh	r0, [r1, #4]
    e996:	2001      	movs	r0, #1
    e998:	bd38      	pop	{r3, r4, r5, pc}
    e99a:	b510      	push	{r4, lr}
    e99c:	b109      	cbz	r1, e9a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    e99e:	2100      	movs	r1, #0
    e9a0:	e000      	b.n	e9a4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    e9a2:	2102      	movs	r1, #2
    e9a4:	1843      	adds	r3, r0, r1
    e9a6:	7d1c      	ldrb	r4, [r3, #20]
    e9a8:	4294      	cmp	r4, r2
    e9aa:	d103      	bne.n	e9b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    e9ac:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e9b0:	8b00      	ldrh	r0, [r0, #24]
    e9b2:	bd10      	pop	{r4, pc}
    e9b4:	7d5b      	ldrb	r3, [r3, #21]
    e9b6:	4293      	cmp	r3, r2
    e9b8:	d103      	bne.n	e9c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    e9ba:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e9be:	8b40      	ldrh	r0, [r0, #26]
    e9c0:	bd10      	pop	{r4, pc}
    e9c2:	2000      	movs	r0, #0
    e9c4:	bd10      	pop	{r4, pc}
    e9c6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    e9ca:	d201      	bcs.n	e9d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    e9cc:	0841      	lsrs	r1, r0, #1
    e9ce:	e000      	b.n	e9d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    e9d0:	21ff      	movs	r1, #255	; 0xff
    e9d2:	1a40      	subs	r0, r0, r1
    e9d4:	f240 6172 	movw	r1, #1650	; 0x672
    e9d8:	4288      	cmp	r0, r1
    e9da:	db00      	blt.n	e9de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    e9dc:	4608      	mov	r0, r1
    e9de:	b280      	uxth	r0, r0
    e9e0:	4770      	bx	lr

0000e9e2 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    e9e2:	2101      	movs	r1, #1
    e9e4:	f7ff bf85 	b.w	e8f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000e9e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    e9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9ec:	4606      	mov	r6, r0
    e9ee:	f342 0780 	sbfx	r7, r2, #2, #1
    e9f2:	7848      	ldrb	r0, [r1, #1]
    e9f4:	460c      	mov	r4, r1
    e9f6:	f022 0504 	bic.w	r5, r2, #4
    e9fa:	1c7f      	adds	r7, r7, #1
    e9fc:	b100      	cbz	r0, ea00 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    e9fe:	b90d      	cbnz	r5, ea04 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    ea00:	4328      	orrs	r0, r5
    ea02:	d104      	bne.n	ea0e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    ea04:	b145      	cbz	r5, ea18 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    ea06:	2100      	movs	r1, #0
    ea08:	4620      	mov	r0, r4
    ea0a:	f7f7 f9e9 	bl	5de0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    ea0e:	20ff      	movs	r0, #255	; 0xff
    ea10:	70a0      	strb	r0, [r4, #2]
    ea12:	b11f      	cbz	r7, ea1c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    ea14:	2000      	movs	r0, #0
    ea16:	e002      	b.n	ea1e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    ea18:	2101      	movs	r1, #1
    ea1a:	e7f5      	b.n	ea08 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    ea1c:	2002      	movs	r0, #2
    ea1e:	1821      	adds	r1, r4, r0
    ea20:	7d09      	ldrb	r1, [r1, #20]
    ea22:	2903      	cmp	r1, #3
    ea24:	d102      	bne.n	ea2c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    ea26:	2d02      	cmp	r5, #2
    ea28:	d000      	beq.n	ea2c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    ea2a:	1c40      	adds	r0, r0, #1
    ea2c:	1822      	adds	r2, r4, r0
    ea2e:	2101      	movs	r1, #1
    ea30:	7511      	strb	r1, [r2, #20]
    ea32:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    ea36:	2200      	movs	r2, #0
    ea38:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    ea3c:	830a      	strh	r2, [r1, #24]
    ea3e:	6840      	ldr	r0, [r0, #4]
    ea40:	70a2      	strb	r2, [r4, #2]
    ea42:	4631      	mov	r1, r6
    ea44:	f362 010f 	bfi	r1, r2, #0, #16
    ea48:	e9c6 0100 	strd	r0, r1, [r6]
    ea4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ea50 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    ea50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea54:	461e      	mov	r6, r3
    ea56:	4613      	mov	r3, r2
    ea58:	4604      	mov	r4, r0
    ea5a:	b109      	cbz	r1, ea60 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    ea5c:	2000      	movs	r0, #0
    ea5e:	e000      	b.n	ea62 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    ea60:	2002      	movs	r0, #2
    ea62:	21ff      	movs	r1, #255	; 0xff
    ea64:	70a1      	strb	r1, [r4, #2]
    ea66:	1821      	adds	r1, r4, r0
    ea68:	7d0a      	ldrb	r2, [r1, #20]
    ea6a:	2a01      	cmp	r2, #1
    ea6c:	d003      	beq.n	ea76 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    ea6e:	7d49      	ldrb	r1, [r1, #21]
    ea70:	2901      	cmp	r1, #1
    ea72:	d10c      	bne.n	ea8e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    ea74:	1c40      	adds	r0, r0, #1
    ea76:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    ea7a:	2700      	movs	r7, #0
    ea7c:	8b29      	ldrh	r1, [r5, #24]
    ea7e:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    ea82:	198a      	adds	r2, r1, r6
    ea84:	4562      	cmp	r2, ip
    ea86:	d905      	bls.n	ea94 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    ea88:	4420      	add	r0, r4
    ea8a:	832f      	strh	r7, [r5, #24]
    ea8c:	7507      	strb	r7, [r0, #20]
    ea8e:	2000      	movs	r0, #0
    ea90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea94:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    ea98:	4632      	mov	r2, r6
    ea9a:	6840      	ldr	r0, [r0, #4]
    ea9c:	4408      	add	r0, r1
    ea9e:	4619      	mov	r1, r3
    eaa0:	f7fe feba 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eaa4:	8b28      	ldrh	r0, [r5, #24]
    eaa6:	4430      	add	r0, r6
    eaa8:	8328      	strh	r0, [r5, #24]
    eaaa:	70a7      	strb	r7, [r4, #2]
    eaac:	2001      	movs	r0, #1
    eaae:	e7ef      	b.n	ea90 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000eab0 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    eab0:	2202      	movs	r2, #2
    eab2:	2100      	movs	r1, #0
    eab4:	f7ff bf71 	b.w	e99a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000eab8 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    eab8:	b510      	push	{r4, lr}
    eaba:	2101      	movs	r1, #1
    eabc:	f7ff ff32 	bl	e924 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    eac0:	2800      	cmp	r0, #0
    eac2:	d000      	beq.n	eac6 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    eac4:	2001      	movs	r0, #1
    eac6:	bd10      	pop	{r4, pc}

0000eac8 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    eac8:	2201      	movs	r2, #1
    eaca:	f7ff bf38 	b.w	e93e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000eace <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    eace:	2200      	movs	r2, #0
    ead0:	f7ff bf35 	b.w	e93e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000ead4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    ead4:	b570      	push	{r4, r5, r6, lr}
    ead6:	b109      	cbz	r1, eadc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    ead8:	2300      	movs	r3, #0
    eada:	e000      	b.n	eade <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    eadc:	2302      	movs	r3, #2
    eade:	21ff      	movs	r1, #255	; 0xff
    eae0:	7081      	strb	r1, [r0, #2]
    eae2:	18c1      	adds	r1, r0, r3
    eae4:	2402      	movs	r4, #2
    eae6:	7d0d      	ldrb	r5, [r1, #20]
    eae8:	2d01      	cmp	r5, #1
    eaea:	d007      	beq.n	eafc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    eaec:	7d4d      	ldrb	r5, [r1, #21]
    eaee:	2d01      	cmp	r5, #1
    eaf0:	d009      	beq.n	eb06 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    eaf2:	f44f 718b 	mov.w	r1, #278	; 0x116
    eaf6:	2009      	movs	r0, #9
    eaf8:	f7f6 fd1c 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eafc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    eb00:	831a      	strh	r2, [r3, #24]
    eb02:	750c      	strb	r4, [r1, #20]
    eb04:	e003      	b.n	eb0e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    eb06:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    eb0a:	835a      	strh	r2, [r3, #26]
    eb0c:	754c      	strb	r4, [r1, #21]
    eb0e:	2100      	movs	r1, #0
    eb10:	7081      	strb	r1, [r0, #2]
    eb12:	bd70      	pop	{r4, r5, r6, pc}

0000eb14 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    eb14:	2101      	movs	r1, #1
    eb16:	7001      	strb	r1, [r0, #0]
    eb18:	4770      	bx	lr

0000eb1a <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    eb1a:	2201      	movs	r2, #1
    eb1c:	4611      	mov	r1, r2
    eb1e:	f7ff bf3c 	b.w	e99a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000eb22 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    eb22:	2201      	movs	r2, #1
    eb24:	2100      	movs	r1, #0
    eb26:	f7ff bf38 	b.w	e99a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000eb2a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    eb2a:	2100      	movs	r1, #0
    eb2c:	f7ff bee1 	b.w	e8f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    eb30:	2800      	cmp	r0, #0
    eb32:	db09      	blt.n	eb48 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    eb34:	f000 021f 	and.w	r2, r0, #31
    eb38:	2101      	movs	r1, #1
    eb3a:	4091      	lsls	r1, r2
    eb3c:	0940      	lsrs	r0, r0, #5
    eb3e:	0080      	lsls	r0, r0, #2
    eb40:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eb44:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    eb48:	4770      	bx	lr
    eb4a:	2800      	cmp	r0, #0
    eb4c:	db0d      	blt.n	eb6a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    eb4e:	f000 021f 	and.w	r2, r0, #31
    eb52:	2101      	movs	r1, #1
    eb54:	4091      	lsls	r1, r2
    eb56:	0940      	lsrs	r0, r0, #5
    eb58:	0080      	lsls	r0, r0, #2
    eb5a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eb5e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    eb62:	f3bf 8f4f 	dsb	sy
    eb66:	f3bf 8f6f 	isb	sy
    eb6a:	4770      	bx	lr
    eb6c:	b510      	push	{r4, lr}
    eb6e:	200e      	movs	r0, #14
    eb70:	f7ff ffeb 	bl	eb4a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    eb74:	200e      	movs	r0, #14
    eb76:	f7ff ffdb 	bl	eb30 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    eb7a:	200f      	movs	r0, #15
    eb7c:	f7ff ffe5 	bl	eb4a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    eb80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb84:	200f      	movs	r0, #15
    eb86:	f7ff bfd3 	b.w	eb30 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    eb8a:	2800      	cmp	r0, #0
    eb8c:	db09      	blt.n	eba2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    eb8e:	f000 021f 	and.w	r2, r0, #31
    eb92:	2101      	movs	r1, #1
    eb94:	4091      	lsls	r1, r2
    eb96:	0940      	lsrs	r0, r0, #5
    eb98:	0080      	lsls	r0, r0, #2
    eb9a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eb9e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    eba2:	4770      	bx	lr
    eba4:	5840      	ldr	r0, [r0, r1]
    eba6:	2800      	cmp	r0, #0
    eba8:	d000      	beq.n	ebac <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    ebaa:	2001      	movs	r0, #1
    ebac:	4770      	bx	lr

0000ebae <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    ebae:	b510      	push	{r4, lr}
    ebb0:	4604      	mov	r4, r0
    ebb2:	4620      	mov	r0, r4
    ebb4:	f7f7 fa14 	bl	5fe0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    ebb8:	2811      	cmp	r0, #17
    ebba:	d0fa      	beq.n	ebb2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    ebbc:	bd10      	pop	{r4, pc}

0000ebbe <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    ebbe:	b510      	push	{r4, lr}
    ebc0:	f7ff fff5 	bl	ebae <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    ebc4:	2800      	cmp	r0, #0
    ebc6:	d003      	beq.n	ebd0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    ebc8:	21a0      	movs	r1, #160	; 0xa0
    ebca:	201d      	movs	r0, #29
    ebcc:	f7f6 fcb2 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebd0:	bd10      	pop	{r4, pc}

0000ebd2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    ebd2:	b108      	cbz	r0, ebd8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    ebd4:	2000      	movs	r0, #0
    ebd6:	4770      	bx	lr
    ebd8:	2001      	movs	r0, #1
    ebda:	4770      	bx	lr

0000ebdc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    ebdc:	f7f7 bb52 	b.w	6284 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000ebe0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    ebe0:	f7f7 bb40 	b.w	6264 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000ebe4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    ebe4:	b510      	push	{r4, lr}
    ebe6:	4050      	eors	r0, r2
    ebe8:	780a      	ldrb	r2, [r1, #0]
    ebea:	781c      	ldrb	r4, [r3, #0]
    ebec:	4062      	eors	r2, r4
    ebee:	4410      	add	r0, r2
    ebf0:	784a      	ldrb	r2, [r1, #1]
    ebf2:	785c      	ldrb	r4, [r3, #1]
    ebf4:	4062      	eors	r2, r4
    ebf6:	4410      	add	r0, r2
    ebf8:	788a      	ldrb	r2, [r1, #2]
    ebfa:	789c      	ldrb	r4, [r3, #2]
    ebfc:	4062      	eors	r2, r4
    ebfe:	4410      	add	r0, r2
    ec00:	78ca      	ldrb	r2, [r1, #3]
    ec02:	78dc      	ldrb	r4, [r3, #3]
    ec04:	4062      	eors	r2, r4
    ec06:	4410      	add	r0, r2
    ec08:	790a      	ldrb	r2, [r1, #4]
    ec0a:	791c      	ldrb	r4, [r3, #4]
    ec0c:	7949      	ldrb	r1, [r1, #5]
    ec0e:	4062      	eors	r2, r4
    ec10:	4410      	add	r0, r2
    ec12:	795a      	ldrb	r2, [r3, #5]
    ec14:	4051      	eors	r1, r2
    ec16:	42c1      	cmn	r1, r0
    ec18:	d101      	bne.n	ec1e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    ec1a:	2001      	movs	r0, #1
    ec1c:	bd10      	pop	{r4, pc}
    ec1e:	2000      	movs	r0, #0
    ec20:	bd10      	pop	{r4, pc}

0000ec22 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    ec22:	b510      	push	{r4, lr}
    ec24:	2900      	cmp	r1, #0
    ec26:	4604      	mov	r4, r0
    ec28:	f04f 0106 	mov.w	r1, #6
    ec2c:	d002      	beq.n	ec34 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    ec2e:	f7f6 fd1f 	bl	5670 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ec32:	e001      	b.n	ec38 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    ec34:	f7f6 fd2a 	bl	568c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ec38:	7960      	ldrb	r0, [r4, #5]
    ec3a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ec3e:	7160      	strb	r0, [r4, #5]
    ec40:	bd10      	pop	{r4, pc}

0000ec42 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    ec42:	4770      	bx	lr

0000ec44 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    ec44:	b530      	push	{r4, r5, lr}
    ec46:	460c      	mov	r4, r1
    ec48:	4605      	mov	r5, r0
    ec4a:	b08d      	sub	sp, #52	; 0x34
    ec4c:	f04f 0103 	mov.w	r1, #3
    ec50:	f104 0003 	add.w	r0, r4, #3
    ec54:	b112      	cbz	r2, ec5c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    ec56:	f7f6 fd0b 	bl	5670 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ec5a:	e001      	b.n	ec60 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    ec5c:	f7f6 fd16 	bl	568c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ec60:	7960      	ldrb	r0, [r4, #5]
    ec62:	220d      	movs	r2, #13
    ec64:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ec68:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    ec6c:	7160      	strb	r0, [r4, #5]
    ec6e:	2100      	movs	r1, #0
    ec70:	a804      	add	r0, sp, #16
    ec72:	f7fe fe4b 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ec76:	78e0      	ldrb	r0, [r4, #3]
    ec78:	f88d 001f 	strb.w	r0, [sp, #31]
    ec7c:	7920      	ldrb	r0, [r4, #4]
    ec7e:	f88d 001e 	strb.w	r0, [sp, #30]
    ec82:	7960      	ldrb	r0, [r4, #5]
    ec84:	f88d 001d 	strb.w	r0, [sp, #29]
    ec88:	2210      	movs	r2, #16
    ec8a:	4629      	mov	r1, r5
    ec8c:	4668      	mov	r0, sp
    ec8e:	f7fe fdc3 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ec92:	4668      	mov	r0, sp
    ec94:	f7ff ff93 	bl	ebbe <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ec98:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    ec9c:	7020      	strb	r0, [r4, #0]
    ec9e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    eca2:	7060      	strb	r0, [r4, #1]
    eca4:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    eca8:	70a0      	strb	r0, [r4, #2]
    ecaa:	b00d      	add	sp, #52	; 0x34
    ecac:	bd30      	pop	{r4, r5, pc}

0000ecae <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    ecae:	f7f7 bec5 	b.w	6a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    ecb2:	07c1      	lsls	r1, r0, #31
    ecb4:	d001      	beq.n	ecba <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    ecb6:	2001      	movs	r0, #1
    ecb8:	4770      	bx	lr
    ecba:	0780      	lsls	r0, r0, #30
    ecbc:	d501      	bpl.n	ecc2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    ecbe:	2002      	movs	r0, #2
    ecc0:	4770      	bx	lr
    ecc2:	2000      	movs	r0, #0
    ecc4:	4770      	bx	lr
    ecc6:	b510      	push	{r4, lr}
    ecc8:	2801      	cmp	r0, #1
    ecca:	d008      	beq.n	ecde <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    eccc:	2802      	cmp	r0, #2
    ecce:	d004      	beq.n	ecda <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    ecd0:	f240 31f3 	movw	r1, #1011	; 0x3f3
    ecd4:	2006      	movs	r0, #6
    ecd6:	f7f6 fc2d 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ecda:	2001      	movs	r0, #1
    ecdc:	bd10      	pop	{r4, pc}
    ecde:	2000      	movs	r0, #0
    ece0:	bd10      	pop	{r4, pc}
    ece2:	2900      	cmp	r1, #0
    ece4:	d004      	beq.n	ecf0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    ece6:	2801      	cmp	r0, #1
    ece8:	d003      	beq.n	ecf2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    ecea:	2901      	cmp	r1, #1
    ecec:	d001      	beq.n	ecf2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    ecee:	2002      	movs	r0, #2
    ecf0:	4770      	bx	lr
    ecf2:	2001      	movs	r0, #1
    ecf4:	4770      	bx	lr
    ecf6:	f7ff bc4b 	b.w	e590 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000ecfa <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    ecfa:	2101      	movs	r1, #1
    ecfc:	f7f8 b998 	b.w	7030 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000ed00 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    ed00:	b510      	push	{r4, lr}
    ed02:	f002 fc2f 	bl	11564 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    ed06:	b118      	cbz	r0, ed10 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    ed08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed0c:	f7fc bf08 	b.w	bb20 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    ed10:	20ff      	movs	r0, #255	; 0xff
    ed12:	bd10      	pop	{r4, pc}

0000ed14 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    ed14:	b510      	push	{r4, lr}
    ed16:	f7f8 f9d3 	bl	70c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ed1a:	2810      	cmp	r0, #16
    ed1c:	d003      	beq.n	ed26 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    ed1e:	f7f8 f99f 	bl	7060 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    ed22:	2810      	cmp	r0, #16
    ed24:	d100      	bne.n	ed28 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    ed26:	2008      	movs	r0, #8
    ed28:	bd10      	pop	{r4, pc}

0000ed2a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    ed2a:	b510      	push	{r4, lr}
    ed2c:	f7f8 f9c8 	bl	70c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ed30:	2810      	cmp	r0, #16
    ed32:	d003      	beq.n	ed3c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    ed34:	f7f8 fa22 	bl	717c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    ed38:	2001      	movs	r0, #1
    ed3a:	bd10      	pop	{r4, pc}
    ed3c:	2000      	movs	r0, #0
    ed3e:	bd10      	pop	{r4, pc}

0000ed40 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    ed40:	b570      	push	{r4, r5, r6, lr}
    ed42:	460e      	mov	r6, r1
    ed44:	b08c      	sub	sp, #48	; 0x30
    ed46:	4614      	mov	r4, r2
    ed48:	4601      	mov	r1, r0
    ed4a:	461d      	mov	r5, r3
    ed4c:	2210      	movs	r2, #16
    ed4e:	4668      	mov	r0, sp
    ed50:	f000 f928 	bl	efa4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ed54:	2210      	movs	r2, #16
    ed56:	4631      	mov	r1, r6
    ed58:	a804      	add	r0, sp, #16
    ed5a:	f000 f923 	bl	efa4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ed5e:	4668      	mov	r0, sp
    ed60:	f7ff ff2d 	bl	ebbe <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ed64:	a908      	add	r1, sp, #32
    ed66:	f04f 0210 	mov.w	r2, #16
    ed6a:	4628      	mov	r0, r5
    ed6c:	b11c      	cbz	r4, ed76 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    ed6e:	f000 f919 	bl	efa4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ed72:	b00c      	add	sp, #48	; 0x30
    ed74:	bd70      	pop	{r4, r5, r6, pc}
    ed76:	f7fe fd4f 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ed7a:	e7fa      	b.n	ed72 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    ed7c:	b510      	push	{r4, lr}
    ed7e:	460c      	mov	r4, r1
    ed80:	2100      	movs	r1, #0
    ed82:	f7ff fd6d 	bl	e860 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ed86:	6060      	str	r0, [r4, #4]
    ed88:	b118      	cbz	r0, ed92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    ed8a:	2001      	movs	r0, #1
    ed8c:	7020      	strb	r0, [r4, #0]
    ed8e:	2000      	movs	r0, #0
    ed90:	bd10      	pop	{r4, pc}
    ed92:	2002      	movs	r0, #2
    ed94:	bd10      	pop	{r4, pc}

0000ed96 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    ed96:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ed9a:	4348      	muls	r0, r1
    ed9c:	4770      	bx	lr

0000ed9e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    ed9e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eda2:	fbb0 f0f1 	udiv	r0, r0, r1
    eda6:	b280      	uxth	r0, r0
    eda8:	4770      	bx	lr

0000edaa <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    edaa:	b570      	push	{r4, r5, r6, lr}
    edac:	4604      	mov	r4, r0
    edae:	4290      	cmp	r0, r2
    edb0:	d20b      	bcs.n	edca <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    edb2:	1b10      	subs	r0, r2, r4
    edb4:	2865      	cmp	r0, #101	; 0x65
    edb6:	d200      	bcs.n	edba <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    edb8:	2065      	movs	r0, #101	; 0x65
    edba:	1825      	adds	r5, r4, r0
    edbc:	428d      	cmp	r5, r1
    edbe:	d803      	bhi.n	edc8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    edc0:	2103      	movs	r1, #3
    edc2:	f7f3 fe31 	bl	2a28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    edc6:	b108      	cbz	r0, edcc <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    edc8:	4620      	mov	r0, r4
    edca:	bd70      	pop	{r4, r5, r6, pc}
    edcc:	4628      	mov	r0, r5
    edce:	bd70      	pop	{r4, r5, r6, pc}

0000edd0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    edd0:	b510      	push	{r4, lr}
    edd2:	f1a2 030f 	sub.w	r3, r2, #15
    edd6:	290c      	cmp	r1, #12
    edd8:	d244      	bcs.n	ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    edda:	e8df f001 	tbb	[pc, r1]
    edde:	0806      	.short	0x0806
    ede0:	1815120d 	.word	0x1815120d
    ede4:	4127241c 	.word	0x4127241c
    ede8:	312a      	.short	0x312a
    edea:	b3c2      	cbz	r2, ee5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    edec:	e03a      	b.n	ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    edee:	2a07      	cmp	r2, #7
    edf0:	d03a      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    edf2:	2a08      	cmp	r2, #8
    edf4:	d038      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    edf6:	e035      	b.n	ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    edf8:	2a0c      	cmp	r2, #12
    edfa:	d035      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    edfc:	2a0b      	cmp	r2, #11
    edfe:	d033      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee00:	e030      	b.n	ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee02:	2a0d      	cmp	r2, #13
    ee04:	d030      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee06:	e02d      	b.n	ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee08:	2b0c      	cmp	r3, #12
    ee0a:	d92d      	bls.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee0c:	e02a      	b.n	ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee0e:	3a10      	subs	r2, #16
    ee10:	2a0b      	cmp	r2, #11
    ee12:	d929      	bls.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee14:	e026      	b.n	ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee16:	2b03      	cmp	r3, #3
    ee18:	d926      	bls.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee1a:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    ee1e:	b308      	cbz	r0, ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee20:	2a1b      	cmp	r2, #27
    ee22:	d921      	bls.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee24:	e01e      	b.n	ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee26:	2a04      	cmp	r2, #4
    ee28:	d01e      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee2a:	e01b      	b.n	ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee2c:	2a06      	cmp	r2, #6
    ee2e:	d01b      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee30:	e018      	b.n	ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee32:	2a1c      	cmp	r2, #28
    ee34:	d018      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee36:	2a1d      	cmp	r2, #29
    ee38:	d016      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee3a:	2a1e      	cmp	r2, #30
    ee3c:	d014      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee3e:	e011      	b.n	ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee40:	2a1f      	cmp	r2, #31
    ee42:	d011      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee44:	2a20      	cmp	r2, #32
    ee46:	d00f      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee48:	2a21      	cmp	r2, #33	; 0x21
    ee4a:	d00d      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee4c:	2a22      	cmp	r2, #34	; 0x22
    ee4e:	d00b      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee50:	2a23      	cmp	r2, #35	; 0x23
    ee52:	d009      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee54:	2a24      	cmp	r2, #36	; 0x24
    ee56:	d007      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee58:	2a27      	cmp	r2, #39	; 0x27
    ee5a:	d005      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee5c:	e002      	b.n	ee64 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee5e:	e003      	b.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee60:	2a0e      	cmp	r2, #14
    ee62:	d001      	beq.n	ee68 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee64:	2000      	movs	r0, #0
    ee66:	bd10      	pop	{r4, pc}
    ee68:	2001      	movs	r0, #1
    ee6a:	bd10      	pop	{r4, pc}

0000ee6c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ee6c:	280c      	cmp	r0, #12
    ee6e:	d013      	beq.n	ee98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee70:	280b      	cmp	r0, #11
    ee72:	d011      	beq.n	ee98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee74:	280d      	cmp	r0, #13
    ee76:	d00f      	beq.n	ee98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee78:	281f      	cmp	r0, #31
    ee7a:	d00d      	beq.n	ee98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee7c:	2820      	cmp	r0, #32
    ee7e:	d00b      	beq.n	ee98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee80:	2821      	cmp	r0, #33	; 0x21
    ee82:	d009      	beq.n	ee98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee84:	2822      	cmp	r0, #34	; 0x22
    ee86:	d007      	beq.n	ee98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee88:	2823      	cmp	r0, #35	; 0x23
    ee8a:	d005      	beq.n	ee98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee8c:	2824      	cmp	r0, #36	; 0x24
    ee8e:	d003      	beq.n	ee98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee90:	2827      	cmp	r0, #39	; 0x27
    ee92:	d001      	beq.n	ee98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee94:	2000      	movs	r0, #0
    ee96:	4770      	bx	lr
    ee98:	2001      	movs	r0, #1
    ee9a:	4770      	bx	lr

0000ee9c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ee9c:	f011 0f0c 	tst.w	r1, #12
    eea0:	d018      	beq.n	eed4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    eea2:	074a      	lsls	r2, r1, #29
    eea4:	f44f 7116 	mov.w	r1, #600	; 0x258
    eea8:	2a00      	cmp	r2, #0
    eeaa:	da02      	bge.n	eeb2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    eeac:	f04f 0210 	mov.w	r2, #16
    eeb0:	e001      	b.n	eeb6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    eeb2:	f04f 0240 	mov.w	r2, #64	; 0x40
    eeb6:	da01      	bge.n	eebc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    eeb8:	f04f 0196 	mov.w	r1, #150	; 0x96
    eebc:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    eec0:	eba0 0301 	sub.w	r3, r0, r1
    eec4:	4288      	cmp	r0, r1
    eec6:	d903      	bls.n	eed0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    eec8:	fb93 f0f2 	sdiv	r0, r3, r2
    eecc:	b280      	uxth	r0, r0
    eece:	4770      	bx	lr
    eed0:	2000      	movs	r0, #0
    eed2:	4770      	bx	lr
    eed4:	2902      	cmp	r1, #2
    eed6:	d008      	beq.n	eeea <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    eed8:	2870      	cmp	r0, #112	; 0x70
    eeda:	d9f9      	bls.n	eed0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    eedc:	3870      	subs	r0, #112	; 0x70
    eede:	17c1      	asrs	r1, r0, #31
    eee0:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    eee4:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    eee8:	4770      	bx	lr
    eeea:	283c      	cmp	r0, #60	; 0x3c
    eeec:	d9f0      	bls.n	eed0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    eeee:	383c      	subs	r0, #60	; 0x3c
    eef0:	17c1      	asrs	r1, r0, #31
    eef2:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    eef6:	f3c0 008f 	ubfx	r0, r0, #2, #16
    eefa:	4770      	bx	lr

0000eefc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    eefc:	6809      	ldr	r1, [r1, #0]
    eefe:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    ef02:	4770      	bx	lr

0000ef04 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    ef04:	07c1      	lsls	r1, r0, #31
    ef06:	d001      	beq.n	ef0c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    ef08:	2001      	movs	r0, #1
    ef0a:	4770      	bx	lr
    ef0c:	0781      	lsls	r1, r0, #30
    ef0e:	d501      	bpl.n	ef14 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    ef10:	2002      	movs	r0, #2
    ef12:	4770      	bx	lr
    ef14:	0740      	lsls	r0, r0, #29
    ef16:	d501      	bpl.n	ef1c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    ef18:	2008      	movs	r0, #8
    ef1a:	4770      	bx	lr
    ef1c:	2000      	movs	r0, #0
    ef1e:	4770      	bx	lr

0000ef20 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    ef20:	b510      	push	{r4, lr}
    ef22:	f640 12c4 	movw	r2, #2500	; 0x9c4
    ef26:	2901      	cmp	r1, #1
    ef28:	d006      	beq.n	ef38 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    ef2a:	2902      	cmp	r1, #2
    ef2c:	d005      	beq.n	ef3a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    ef2e:	f240 31ba 	movw	r1, #954	; 0x3ba
    ef32:	2029      	movs	r0, #41	; 0x29
    ef34:	f7f6 fafe 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef38:	b108      	cbz	r0, ef3e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    ef3a:	4610      	mov	r0, r2
    ef3c:	bd10      	pop	{r4, pc}
    ef3e:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ef42:	bd10      	pop	{r4, pc}

0000ef44 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    ef44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef48:	4607      	mov	r7, r0
    ef4a:	460e      	mov	r6, r1
    ef4c:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    ef50:	f7f4 f940 	bl	31d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    ef54:	b198      	cbz	r0, ef7e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    ef56:	b31e      	cbz	r6, efa0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    ef58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    ef5c:	1b40      	subs	r0, r0, r5
    ef5e:	2300      	movs	r3, #0
    ef60:	eb61 0104 	sbc.w	r1, r1, r4
    ef64:	461a      	mov	r2, r3
    ef66:	1a1b      	subs	r3, r3, r0
    ef68:	418a      	sbcs	r2, r1
    ef6a:	da19      	bge.n	efa0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    ef6c:	1c42      	adds	r2, r0, #1
    ef6e:	f171 0100 	sbcs.w	r1, r1, #0
    ef72:	db07      	blt.n	ef84 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    ef74:	f240 2136 	movw	r1, #566	; 0x236
    ef78:	2029      	movs	r0, #41	; 0x29
    ef7a:	f7f6 fadb 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef7e:	f44f 710b 	mov.w	r1, #556	; 0x22c
    ef82:	e7f9      	b.n	ef78 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    ef84:	4430      	add	r0, r6
    ef86:	1e40      	subs	r0, r0, #1
    ef88:	fbb0 f1f6 	udiv	r1, r0, r6
    ef8c:	fb01 f006 	mul.w	r0, r1, r6
    ef90:	1828      	adds	r0, r5, r0
    ef92:	f144 0400 	adc.w	r4, r4, #0
    ef96:	e9c7 0404 	strd	r0, r4, [r7, #16]
    ef9a:	4608      	mov	r0, r1
    ef9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    efa0:	2000      	movs	r0, #0
    efa2:	e7fb      	b.n	ef9c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000efa4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    efa4:	b530      	push	{r4, r5, lr}
    efa6:	4613      	mov	r3, r2
    efa8:	e006      	b.n	efb8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    efaa:	18cc      	adds	r4, r1, r3
    efac:	1ad5      	subs	r5, r2, r3
    efae:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    efb2:	1e5b      	subs	r3, r3, #1
    efb4:	5544      	strb	r4, [r0, r5]
    efb6:	b2db      	uxtb	r3, r3
    efb8:	2b00      	cmp	r3, #0
    efba:	d1f6      	bne.n	efaa <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    efbc:	bd30      	pop	{r4, r5, pc}

0000efbe <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    efbe:	b538      	push	{r3, r4, r5, lr}
    efc0:	4605      	mov	r5, r0
    efc2:	460c      	mov	r4, r1
    efc4:	4668      	mov	r0, sp
    efc6:	f7fd fa7b 	bl	c4c0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    efca:	b310      	cbz	r0, f012 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    efcc:	f99d 0000 	ldrsb.w	r0, [sp]
    efd0:	7260      	strb	r0, [r4, #9]
    efd2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    efd6:	72a1      	strb	r1, [r4, #10]
    efd8:	f994 100b 	ldrsb.w	r1, [r4, #11]
    efdc:	2200      	movs	r2, #0
    efde:	1a41      	subs	r1, r0, r1
    efe0:	d500      	bpl.n	efe4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    efe2:	4249      	negs	r1, r1
    efe4:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    efe8:	428b      	cmp	r3, r1
    efea:	dc10      	bgt.n	f00e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    efec:	2bff      	cmp	r3, #255	; 0xff
    efee:	d00e      	beq.n	f00e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    eff0:	7b21      	ldrb	r1, [r4, #12]
    eff2:	1c49      	adds	r1, r1, #1
    eff4:	b2c9      	uxtb	r1, r1
    eff6:	7321      	strb	r1, [r4, #12]
    eff8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    effc:	4299      	cmp	r1, r3
    effe:	d802      	bhi.n	f006 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    f000:	7ae1      	ldrb	r1, [r4, #11]
    f002:	297f      	cmp	r1, #127	; 0x7f
    f004:	d103      	bne.n	f00e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    f006:	72e0      	strb	r0, [r4, #11]
    f008:	2000      	movs	r0, #0
    f00a:	7320      	strb	r0, [r4, #12]
    f00c:	2201      	movs	r2, #1
    f00e:	4610      	mov	r0, r2
    f010:	bd38      	pop	{r3, r4, r5, pc}
    f012:	207f      	movs	r0, #127	; 0x7f
    f014:	7260      	strb	r0, [r4, #9]
    f016:	2000      	movs	r0, #0
    f018:	bd38      	pop	{r3, r4, r5, pc}

0000f01a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    f01a:	2300      	movs	r3, #0
    f01c:	6303      	str	r3, [r0, #48]	; 0x30
    f01e:	8702      	strh	r2, [r0, #56]	; 0x38
    f020:	f240 2371 	movw	r3, #625	; 0x271
    f024:	435a      	muls	r2, r3
    f026:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    f02a:	1e52      	subs	r2, r2, #1
    f02c:	fbb2 f1f1 	udiv	r1, r2, r1
    f030:	6341      	str	r1, [r0, #52]	; 0x34
    f032:	4770      	bx	lr

0000f034 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    f034:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f038:	4607      	mov	r7, r0
    f03a:	4690      	mov	r8, r2
    f03c:	468b      	mov	fp, r1
    f03e:	2601      	movs	r6, #1
    f040:	4608      	mov	r0, r1
    f042:	f000 f94a 	bl	f2da <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    f046:	4682      	mov	sl, r0
    f048:	4658      	mov	r0, fp
    f04a:	f000 f952 	bl	f2f2 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    f04e:	4681      	mov	r9, r0
    f050:	f7ff ff58 	bl	ef04 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    f054:	4604      	mov	r4, r0
    f056:	4650      	mov	r0, sl
    f058:	f7ff ff54 	bl	ef04 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    f05c:	4605      	mov	r5, r0
    f05e:	ea54 0005 	orrs.w	r0, r4, r5
    f062:	d100      	bne.n	f066 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    f064:	2600      	movs	r6, #0
    f066:	f7fc fcdd 	bl	ba24 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f06a:	ea10 0f09 	tst.w	r0, r9
    f06e:	d100      	bne.n	f072 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    f070:	2400      	movs	r4, #0
    f072:	f7fc fcd7 	bl	ba24 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f076:	ea10 0f0a 	tst.w	r0, sl
    f07a:	d100      	bne.n	f07e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    f07c:	2500      	movs	r5, #0
    f07e:	f897 006e 	ldrb.w	r0, [r7, #110]	; 0x6e
    f082:	42a0      	cmp	r0, r4
    f084:	d100      	bne.n	f088 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    f086:	2400      	movs	r4, #0
    f088:	f888 4000 	strb.w	r4, [r8]
    f08c:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
    f090:	42a8      	cmp	r0, r5
    f092:	d100      	bne.n	f096 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    f094:	2500      	movs	r5, #0
    f096:	f888 5001 	strb.w	r5, [r8, #1]
    f09a:	b974      	cbnz	r4, f0ba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    f09c:	b96d      	cbnz	r5, f0ba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    f09e:	4658      	mov	r0, fp
    f0a0:	f000 f925 	bl	f2ee <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    f0a4:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
    f0a8:	1a40      	subs	r0, r0, r1
    f0aa:	b200      	sxth	r0, r0
    f0ac:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f0b0:	4288      	cmp	r0, r1
    f0b2:	dc01      	bgt.n	f0b8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    f0b4:	2800      	cmp	r0, #0
    f0b6:	dc00      	bgt.n	f0ba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    f0b8:	2600      	movs	r6, #0
    f0ba:	4630      	mov	r0, r6
    f0bc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000f0c0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    f0c0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    f0c4:	4348      	muls	r0, r1
    f0c6:	4770      	bx	lr

0000f0c8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    f0c8:	f240 2171 	movw	r1, #625	; 0x271
    f0cc:	fb10 f001 	smulbb	r0, r0, r1
    f0d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f0d4:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    f0d8:	4770      	bx	lr

0000f0da <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    f0da:	b510      	push	{r4, lr}
    f0dc:	2300      	movs	r3, #0
    f0de:	461a      	mov	r2, r3
    f0e0:	e003      	b.n	f0ea <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    f0e2:	5c84      	ldrb	r4, [r0, r2]
    f0e4:	4323      	orrs	r3, r4
    f0e6:	1c52      	adds	r2, r2, #1
    f0e8:	b2d2      	uxtb	r2, r2
    f0ea:	428a      	cmp	r2, r1
    f0ec:	d3f9      	bcc.n	f0e2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    f0ee:	b10b      	cbz	r3, f0f4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    f0f0:	2000      	movs	r0, #0
    f0f2:	bd10      	pop	{r4, pc}
    f0f4:	2001      	movs	r0, #1
    f0f6:	bd10      	pop	{r4, pc}

0000f0f8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    f0f8:	b510      	push	{r4, lr}
    f0fa:	4604      	mov	r4, r0
    f0fc:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    f100:	b108      	cbz	r0, f106 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    f102:	2825      	cmp	r0, #37	; 0x25
    f104:	d901      	bls.n	f10a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    f106:	2012      	movs	r0, #18
    f108:	bd10      	pop	{r4, pc}
    f10a:	b12a      	cbz	r2, f118 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    f10c:	7da0      	ldrb	r0, [r4, #22]
    f10e:	b128      	cbz	r0, f11c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    f110:	2801      	cmp	r0, #1
    f112:	d009      	beq.n	f128 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    f114:	201f      	movs	r0, #31
    f116:	bd10      	pop	{r4, pc}
    f118:	2000      	movs	r0, #0
    f11a:	bd10      	pop	{r4, pc}
    f11c:	4620      	mov	r0, r4
    f11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f122:	4611      	mov	r1, r2
    f124:	f7f8 b920 	b.w	7368 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    f128:	88a2      	ldrh	r2, [r4, #4]
    f12a:	6949      	ldr	r1, [r1, #20]
    f12c:	f104 0016 	add.w	r0, r4, #22
    f130:	f7f8 f8c6 	bl	72c0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    f134:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    f138:	e7ee      	b.n	f118 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000f13a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    f13a:	b530      	push	{r4, r5, lr}
    f13c:	1c42      	adds	r2, r0, #1
    f13e:	428a      	cmp	r2, r1
    f140:	d004      	beq.n	f14c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    f142:	680a      	ldr	r2, [r1, #0]
    f144:	f8c0 2001 	str.w	r2, [r0, #1]
    f148:	7909      	ldrb	r1, [r1, #4]
    f14a:	7141      	strb	r1, [r0, #5]
    f14c:	7941      	ldrb	r1, [r0, #5]
    f14e:	f001 011f 	and.w	r1, r1, #31
    f152:	7141      	strb	r1, [r0, #5]
    f154:	2100      	movs	r1, #0
    f156:	72c1      	strb	r1, [r0, #11]
    f158:	1843      	adds	r3, r0, r1
    f15a:	1c49      	adds	r1, r1, #1
    f15c:	785c      	ldrb	r4, [r3, #1]
    f15e:	b2c9      	uxtb	r1, r1
    f160:	f004 0201 	and.w	r2, r4, #1
    f164:	0864      	lsrs	r4, r4, #1
    f166:	f004 0501 	and.w	r5, r4, #1
    f16a:	4415      	add	r5, r2
    f16c:	0862      	lsrs	r2, r4, #1
    f16e:	f002 0401 	and.w	r4, r2, #1
    f172:	442c      	add	r4, r5
    f174:	0852      	lsrs	r2, r2, #1
    f176:	f002 0501 	and.w	r5, r2, #1
    f17a:	442c      	add	r4, r5
    f17c:	0852      	lsrs	r2, r2, #1
    f17e:	f002 0501 	and.w	r5, r2, #1
    f182:	442c      	add	r4, r5
    f184:	0852      	lsrs	r2, r2, #1
    f186:	f002 0501 	and.w	r5, r2, #1
    f18a:	442c      	add	r4, r5
    f18c:	0852      	lsrs	r2, r2, #1
    f18e:	f002 0501 	and.w	r5, r2, #1
    f192:	442c      	add	r4, r5
    f194:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    f198:	719a      	strb	r2, [r3, #6]
    f19a:	7ac3      	ldrb	r3, [r0, #11]
    f19c:	2905      	cmp	r1, #5
    f19e:	441a      	add	r2, r3
    f1a0:	72c2      	strb	r2, [r0, #11]
    f1a2:	d3d9      	bcc.n	f158 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    f1a4:	bd30      	pop	{r4, r5, pc}
    f1a6:	b570      	push	{r4, r5, r6, lr}
    f1a8:	f8d0 201f 	ldr.w	r2, [r0, #31]
    f1ac:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    f1b0:	f012 0fff 	tst.w	r2, #255	; 0xff
    f1b4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    f1b8:	d108      	bne.n	f1cc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f1ba:	f3c2 2407 	ubfx	r4, r2, #8, #8
    f1be:	b92c      	cbnz	r4, f1cc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f1c0:	f3c2 4407 	ubfx	r4, r2, #16, #8
    f1c4:	b914      	cbnz	r4, f1cc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f1c6:	0e12      	lsrs	r2, r2, #24
    f1c8:	d100      	bne.n	f1cc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f1ca:	b35b      	cbz	r3, f224 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f1cc:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    f1d0:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    f1d4:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    f1d8:	7d83      	ldrb	r3, [r0, #22]
    f1da:	b141      	cbz	r1, f1ee <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f1dc:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    f1e0:	d905      	bls.n	f1ee <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f1e2:	f640 5107 	movw	r1, #3335	; 0xd07
    f1e6:	428a      	cmp	r2, r1
    f1e8:	d801      	bhi.n	f1ee <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f1ea:	2101      	movs	r1, #1
    f1ec:	e000      	b.n	f1f0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    f1ee:	2100      	movs	r1, #0
    f1f0:	7846      	ldrb	r6, [r0, #1]
    f1f2:	2e22      	cmp	r6, #34	; 0x22
    f1f4:	d116      	bne.n	f224 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f1f6:	b959      	cbnz	r1, f210 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    f1f8:	1f91      	subs	r1, r2, #6
    f1fa:	f640 467a 	movw	r6, #3194	; 0xc7a
    f1fe:	42b1      	cmp	r1, r6
    f200:	d810      	bhi.n	f224 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f202:	b17b      	cbz	r3, f224 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f204:	2b08      	cmp	r3, #8
    f206:	d80d      	bhi.n	f224 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f208:	4293      	cmp	r3, r2
    f20a:	d20b      	bcs.n	f224 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f20c:	4294      	cmp	r4, r2
    f20e:	d809      	bhi.n	f224 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f210:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f214:	d206      	bcs.n	f224 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f216:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    f21a:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    f21e:	d801      	bhi.n	f224 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f220:	2001      	movs	r0, #1
    f222:	bd70      	pop	{r4, r5, r6, pc}
    f224:	2000      	movs	r0, #0
    f226:	bd70      	pop	{r4, r5, r6, pc}

0000f228 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    f228:	b570      	push	{r4, r5, r6, lr}
    f22a:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    f22e:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    f232:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    f236:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    f23a:	88c0      	ldrh	r0, [r0, #6]
    f23c:	b131      	cbz	r1, f24c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    f23e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    f242:	d903      	bls.n	f24c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    f244:	f640 5107 	movw	r1, #3335	; 0xd07
    f248:	428a      	cmp	r2, r1
    f24a:	d90b      	bls.n	f264 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    f24c:	1f91      	subs	r1, r2, #6
    f24e:	f640 467a 	movw	r6, #3194	; 0xc7a
    f252:	42b1      	cmp	r1, r6
    f254:	d80e      	bhi.n	f274 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f256:	b16b      	cbz	r3, f274 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f258:	2b08      	cmp	r3, #8
    f25a:	d80b      	bhi.n	f274 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f25c:	4293      	cmp	r3, r2
    f25e:	d209      	bcs.n	f274 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f260:	4294      	cmp	r4, r2
    f262:	d807      	bhi.n	f274 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f264:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f268:	d204      	bcs.n	f274 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f26a:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    f26e:	d801      	bhi.n	f274 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f270:	2001      	movs	r0, #1
    f272:	bd70      	pop	{r4, r5, r6, pc}
    f274:	2000      	movs	r0, #0
    f276:	bd70      	pop	{r4, r5, r6, pc}

0000f278 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    f278:	6842      	ldr	r2, [r0, #4]
    f27a:	600a      	str	r2, [r1, #0]
    f27c:	7a00      	ldrb	r0, [r0, #8]
    f27e:	7108      	strb	r0, [r1, #4]
    f280:	4770      	bx	lr

0000f282 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    f282:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    f286:	4770      	bx	lr

0000f288 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    f288:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    f28c:	4770      	bx	lr

0000f28e <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    f28e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    f292:	4770      	bx	lr

0000f294 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    f294:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    f298:	4770      	bx	lr

0000f29a <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    f29a:	8980      	ldrh	r0, [r0, #12]
    f29c:	8008      	strh	r0, [r1, #0]
    f29e:	4770      	bx	lr

0000f2a0 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    f2a0:	f8d0 0016 	ldr.w	r0, [r0, #22]
    f2a4:	6008      	str	r0, [r1, #0]
    f2a6:	4770      	bx	lr

0000f2a8 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    f2a8:	6842      	ldr	r2, [r0, #4]
    f2aa:	600a      	str	r2, [r1, #0]
    f2ac:	6880      	ldr	r0, [r0, #8]
    f2ae:	6048      	str	r0, [r1, #4]
    f2b0:	4770      	bx	lr

0000f2b2 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    f2b2:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    f2b6:	600a      	str	r2, [r1, #0]
    f2b8:	6840      	ldr	r0, [r0, #4]
    f2ba:	6048      	str	r0, [r1, #4]
    f2bc:	4770      	bx	lr

0000f2be <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    f2be:	6842      	ldr	r2, [r0, #4]
    f2c0:	600a      	str	r2, [r1, #0]
    f2c2:	6880      	ldr	r0, [r0, #8]
    f2c4:	6048      	str	r0, [r1, #4]
    f2c6:	4770      	bx	lr

0000f2c8 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    f2c8:	6842      	ldr	r2, [r0, #4]
    f2ca:	600a      	str	r2, [r1, #0]
    f2cc:	6880      	ldr	r0, [r0, #8]
    f2ce:	6048      	str	r0, [r1, #4]
    f2d0:	4770      	bx	lr

0000f2d2 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    f2d2:	7800      	ldrb	r0, [r0, #0]
    f2d4:	f000 0003 	and.w	r0, r0, #3
    f2d8:	4770      	bx	lr

0000f2da <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    f2da:	7900      	ldrb	r0, [r0, #4]
    f2dc:	4770      	bx	lr

0000f2de <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    f2de:	8880      	ldrh	r0, [r0, #4]
    f2e0:	4770      	bx	lr

0000f2e2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    f2e2:	88c0      	ldrh	r0, [r0, #6]
    f2e4:	4770      	bx	lr

0000f2e6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    f2e6:	8900      	ldrh	r0, [r0, #8]
    f2e8:	4770      	bx	lr

0000f2ea <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    f2ea:	8940      	ldrh	r0, [r0, #10]
    f2ec:	4770      	bx	lr

0000f2ee <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    f2ee:	88c0      	ldrh	r0, [r0, #6]
    f2f0:	4770      	bx	lr

0000f2f2 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    f2f2:	7940      	ldrb	r0, [r0, #5]
    f2f4:	4770      	bx	lr

0000f2f6 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    f2f6:	7900      	ldrb	r0, [r0, #4]
    f2f8:	4770      	bx	lr

0000f2fa <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    f2fa:	7900      	ldrb	r0, [r0, #4]
    f2fc:	4770      	bx	lr

0000f2fe <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    f2fe:	8901      	ldrh	r1, [r0, #8]
    f300:	291b      	cmp	r1, #27
    f302:	d30c      	bcc.n	f31e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f304:	8941      	ldrh	r1, [r0, #10]
    f306:	f44f 72a4 	mov.w	r2, #328	; 0x148
    f30a:	4291      	cmp	r1, r2
    f30c:	d307      	bcc.n	f31e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f30e:	8881      	ldrh	r1, [r0, #4]
    f310:	291b      	cmp	r1, #27
    f312:	d304      	bcc.n	f31e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f314:	88c0      	ldrh	r0, [r0, #6]
    f316:	4290      	cmp	r0, r2
    f318:	d301      	bcc.n	f31e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f31a:	2001      	movs	r0, #1
    f31c:	4770      	bx	lr
    f31e:	2000      	movs	r0, #0
    f320:	4770      	bx	lr

0000f322 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    f322:	b510      	push	{r4, lr}
    f324:	29fb      	cmp	r1, #251	; 0xfb
    f326:	d904      	bls.n	f332 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    f328:	f240 51fe 	movw	r1, #1534	; 0x5fe
    f32c:	202a      	movs	r0, #42	; 0x2a
    f32e:	f7f6 f901 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f332:	7041      	strb	r1, [r0, #1]
    f334:	bd10      	pop	{r4, pc}

0000f336 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    f336:	7901      	ldrb	r1, [r0, #4]
    f338:	0749      	lsls	r1, r1, #29
    f33a:	d004      	beq.n	f346 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f33c:	7940      	ldrb	r0, [r0, #5]
    f33e:	0740      	lsls	r0, r0, #29
    f340:	d001      	beq.n	f346 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f342:	2001      	movs	r0, #1
    f344:	4770      	bx	lr
    f346:	2000      	movs	r0, #0
    f348:	4770      	bx	lr

0000f34a <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    f34a:	7901      	ldrb	r1, [r0, #4]
    f34c:	7940      	ldrb	r0, [r0, #5]
    f34e:	f001 0107 	and.w	r1, r1, #7
    f352:	1e4a      	subs	r2, r1, #1
    f354:	f000 0007 	and.w	r0, r0, #7
    f358:	4011      	ands	r1, r2
    f35a:	1e42      	subs	r2, r0, #1
    f35c:	4010      	ands	r0, r2
    f35e:	4301      	orrs	r1, r0
    f360:	d001      	beq.n	f366 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x1c>
    f362:	2000      	movs	r0, #0
    f364:	4770      	bx	lr
    f366:	2001      	movs	r0, #1
    f368:	4770      	bx	lr

0000f36a <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    f36a:	7900      	ldrb	r0, [r0, #4]
    f36c:	4770      	bx	lr

0000f36e <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    f36e:	7940      	ldrb	r0, [r0, #5]
    f370:	4770      	bx	lr

0000f372 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    f372:	7101      	strb	r1, [r0, #4]
    f374:	4770      	bx	lr

0000f376 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    f376:	7141      	strb	r1, [r0, #5]
    f378:	4770      	bx	lr

0000f37a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    f37a:	b510      	push	{r4, lr}
    f37c:	2a1b      	cmp	r2, #27
    f37e:	d904      	bls.n	f38a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    f380:	f240 4127 	movw	r1, #1063	; 0x427
    f384:	202a      	movs	r0, #42	; 0x2a
    f386:	f7f6 f8d5 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f38a:	7042      	strb	r2, [r0, #1]
    f38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f390:	1cc0      	adds	r0, r0, #3
    f392:	f7fe ba41 	b.w	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000f396 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    f396:	6809      	ldr	r1, [r1, #0]
    f398:	60c1      	str	r1, [r0, #12]
    f39a:	4770      	bx	lr

0000f39c <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    f39c:	680a      	ldr	r2, [r1, #0]
    f39e:	6042      	str	r2, [r0, #4]
    f3a0:	6849      	ldr	r1, [r1, #4]
    f3a2:	6081      	str	r1, [r0, #8]
    f3a4:	4770      	bx	lr

0000f3a6 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    f3a6:	680a      	ldr	r2, [r1, #0]
    f3a8:	6042      	str	r2, [r0, #4]
    f3aa:	6849      	ldr	r1, [r1, #4]
    f3ac:	6081      	str	r1, [r0, #8]
    f3ae:	4770      	bx	lr

0000f3b0 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    f3b0:	680a      	ldr	r2, [r1, #0]
    f3b2:	6042      	str	r2, [r0, #4]
    f3b4:	6849      	ldr	r1, [r1, #4]
    f3b6:	6081      	str	r1, [r0, #8]
    f3b8:	4770      	bx	lr

0000f3ba <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    f3ba:	7802      	ldrb	r2, [r0, #0]
    f3bc:	f001 0103 	and.w	r1, r1, #3
    f3c0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    f3c4:	430a      	orrs	r2, r1
    f3c6:	7002      	strb	r2, [r0, #0]
    f3c8:	4770      	bx	lr

0000f3ca <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    f3ca:	7101      	strb	r1, [r0, #4]
    f3cc:	0a09      	lsrs	r1, r1, #8
    f3ce:	7141      	strb	r1, [r0, #5]
    f3d0:	4770      	bx	lr

0000f3d2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    f3d2:	7181      	strb	r1, [r0, #6]
    f3d4:	0a09      	lsrs	r1, r1, #8
    f3d6:	71c1      	strb	r1, [r0, #7]
    f3d8:	4770      	bx	lr

0000f3da <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    f3da:	7201      	strb	r1, [r0, #8]
    f3dc:	0a09      	lsrs	r1, r1, #8
    f3de:	7241      	strb	r1, [r0, #9]
    f3e0:	4770      	bx	lr

0000f3e2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    f3e2:	7281      	strb	r1, [r0, #10]
    f3e4:	0a09      	lsrs	r1, r1, #8
    f3e6:	72c1      	strb	r1, [r0, #11]
    f3e8:	4770      	bx	lr

0000f3ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    f3ea:	7802      	ldrb	r2, [r0, #0]
    f3ec:	f002 020f 	and.w	r2, r2, #15
    f3f0:	2a03      	cmp	r2, #3
    f3f2:	d003      	beq.n	f3fc <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    f3f4:	2a05      	cmp	r2, #5
    f3f6:	d104      	bne.n	f402 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    f3f8:	f7ff bed5 	b.w	f1a6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    f3fc:	7840      	ldrb	r0, [r0, #1]
    f3fe:	280c      	cmp	r0, #12
    f400:	d001      	beq.n	f406 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    f402:	2000      	movs	r0, #0
    f404:	4770      	bx	lr
    f406:	2001      	movs	r0, #1
    f408:	4770      	bx	lr

0000f40a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    f40a:	b570      	push	{r4, r5, r6, lr}
    f40c:	4614      	mov	r4, r2
    f40e:	4605      	mov	r5, r0
    f410:	2a1f      	cmp	r2, #31
    f412:	d903      	bls.n	f41c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    f414:	21b5      	movs	r1, #181	; 0xb5
    f416:	202a      	movs	r0, #42	; 0x2a
    f418:	f7f6 f88c 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f41c:	f105 0009 	add.w	r0, r5, #9
    f420:	f7fe f9fa 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f424:	1da4      	adds	r4, r4, #6
    f426:	706c      	strb	r4, [r5, #1]
    f428:	bd70      	pop	{r4, r5, r6, pc}

0000f42a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    f42a:	b510      	push	{r4, lr}
    f42c:	7802      	ldrb	r2, [r0, #0]
    f42e:	f001 030f 	and.w	r3, r1, #15
    f432:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    f436:	431a      	orrs	r2, r3
    f438:	7002      	strb	r2, [r0, #0]
    f43a:	2907      	cmp	r1, #7
    f43c:	d20c      	bcs.n	f458 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    f43e:	e8df f001 	tbb	[pc, r1]
    f442:	0604      	.short	0x0604
    f444:	08040604 	.word	0x08040604
    f448:	0004      	.short	0x0004
    f44a:	2106      	movs	r1, #6
    f44c:	e002      	b.n	f454 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f44e:	210c      	movs	r1, #12
    f450:	e000      	b.n	f454 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f452:	2122      	movs	r1, #34	; 0x22
    f454:	7041      	strb	r1, [r0, #1]
    f456:	bd10      	pop	{r4, pc}
    f458:	216f      	movs	r1, #111	; 0x6f
    f45a:	202a      	movs	r0, #42	; 0x2a
    f45c:	f7f6 f86a 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f460 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    f460:	680a      	ldr	r2, [r1, #0]
    f462:	f840 2f09 	str.w	r2, [r0, #9]!
    f466:	8889      	ldrh	r1, [r1, #4]
    f468:	8081      	strh	r1, [r0, #4]
    f46a:	4770      	bx	lr

0000f46c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    f46c:	7802      	ldrb	r2, [r0, #0]
    f46e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f472:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    f476:	7002      	strb	r2, [r0, #0]
    f478:	4770      	bx	lr

0000f47a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    f47a:	680a      	ldr	r2, [r1, #0]
    f47c:	f840 2f03 	str.w	r2, [r0, #3]!
    f480:	8889      	ldrh	r1, [r1, #4]
    f482:	8081      	strh	r1, [r0, #4]
    f484:	4770      	bx	lr

0000f486 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    f486:	7802      	ldrb	r2, [r0, #0]
    f488:	2340      	movs	r3, #64	; 0x40
    f48a:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    f48e:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    f492:	430a      	orrs	r2, r1
    f494:	7002      	strb	r2, [r0, #0]
    f496:	4770      	bx	lr

0000f498 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    f498:	b570      	push	{r4, r5, r6, lr}
    f49a:	4614      	mov	r4, r2
    f49c:	4605      	mov	r5, r0
    f49e:	2a1f      	cmp	r2, #31
    f4a0:	d903      	bls.n	f4aa <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    f4a2:	21d7      	movs	r1, #215	; 0xd7
    f4a4:	202a      	movs	r0, #42	; 0x2a
    f4a6:	f7f6 f845 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4aa:	f105 0009 	add.w	r0, r5, #9
    f4ae:	f7fe f9b3 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f4b2:	1da4      	adds	r4, r4, #6
    f4b4:	706c      	strb	r4, [r5, #1]
    f4b6:	bd70      	pop	{r4, r5, r6, pc}

0000f4b8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    f4b8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f4bc:	4604      	mov	r4, r0
    f4be:	2000      	movs	r0, #0
    f4c0:	f7f6 fa2e 	bl	5920 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f4c4:	2600      	movs	r6, #0
    f4c6:	4605      	mov	r5, r0
    f4c8:	4637      	mov	r7, r6
    f4ca:	e00e      	b.n	f4ea <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    f4cc:	8820      	ldrh	r0, [r4, #0]
    f4ce:	1c40      	adds	r0, r0, #1
    f4d0:	b280      	uxth	r0, r0
    f4d2:	8020      	strh	r0, [r4, #0]
    f4d4:	42a8      	cmp	r0, r5
    f4d6:	d300      	bcc.n	f4da <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    f4d8:	8027      	strh	r7, [r4, #0]
    f4da:	8820      	ldrh	r0, [r4, #0]
    f4dc:	4669      	mov	r1, sp
    f4de:	f7ff fc4d 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f4e2:	2800      	cmp	r0, #0
    f4e4:	d007      	beq.n	f4f6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    f4e6:	1c76      	adds	r6, r6, #1
    f4e8:	b2f6      	uxtb	r6, r6
    f4ea:	42ae      	cmp	r6, r5
    f4ec:	d3ee      	bcc.n	f4cc <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    f4ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f4f2:	8020      	strh	r0, [r4, #0]
    f4f4:	2012      	movs	r0, #18
    f4f6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000f4fa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    f4fa:	6841      	ldr	r1, [r0, #4]
    f4fc:	2200      	movs	r2, #0
    f4fe:	f891 31d2 	ldrb.w	r3, [r1, #466]	; 0x1d2
    f502:	2b00      	cmp	r3, #0
    f504:	d004      	beq.n	f510 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    f506:	f881 21d2 	strb.w	r2, [r1, #466]	; 0x1d2
    f50a:	6840      	ldr	r0, [r0, #4]
    f50c:	f000 bd08 	b.w	ff20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    f510:	4770      	bx	lr

0000f512 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    f512:	b510      	push	{r4, lr}
    f514:	7901      	ldrb	r1, [r0, #4]
    f516:	b119      	cbz	r1, f520 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    f518:	2901      	cmp	r1, #1
    f51a:	d006      	beq.n	f52a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    f51c:	2000      	movs	r0, #0
    f51e:	bd10      	pop	{r4, pc}
    f520:	8842      	ldrh	r2, [r0, #2]
    f522:	6883      	ldr	r3, [r0, #8]
    f524:	8800      	ldrh	r0, [r0, #0]
    f526:	2102      	movs	r1, #2
    f528:	e003      	b.n	f532 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    f52a:	8842      	ldrh	r2, [r0, #2]
    f52c:	6883      	ldr	r3, [r0, #8]
    f52e:	8800      	ldrh	r0, [r0, #0]
    f530:	2101      	movs	r1, #1
    f532:	f7f7 ffcb 	bl	74cc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    f536:	b908      	cbnz	r0, f53c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    f538:	f7f8 f81e 	bl	7578 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    f53c:	2001      	movs	r0, #1
    f53e:	bd10      	pop	{r4, pc}
    f540:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f544:	460e      	mov	r6, r1
    f546:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    f54a:	4617      	mov	r7, r2
    f54c:	39ff      	subs	r1, #255	; 0xff
    f54e:	d014      	beq.n	f57a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f550:	8030      	strh	r0, [r6, #0]
    f552:	2100      	movs	r1, #0
    f554:	7171      	strb	r1, [r6, #5]
    f556:	f7f6 fc15 	bl	5d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f55a:	4604      	mov	r4, r0
    f55c:	f7fe ffa3 	bl	e4a6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f560:	0005      	movs	r5, r0
    f562:	d00a      	beq.n	f57a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f564:	4620      	mov	r0, r4
    f566:	4629      	mov	r1, r5
    f568:	aa01      	add	r2, sp, #4
    f56a:	f7fe ffbf 	bl	e4ec <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f56e:	8070      	strh	r0, [r6, #2]
    f570:	b130      	cbz	r0, f580 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    f572:	28fb      	cmp	r0, #251	; 0xfb
    f574:	d906      	bls.n	f584 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    f576:	21ae      	movs	r1, #174	; 0xae
    f578:	e026      	b.n	f5c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f57a:	2000      	movs	r0, #0
    f57c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f580:	21ad      	movs	r1, #173	; 0xad
    f582:	e021      	b.n	f5c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f584:	9801      	ldr	r0, [sp, #4]
    f586:	f7ff fea4 	bl	f2d2 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    f58a:	2801      	cmp	r0, #1
    f58c:	d003      	beq.n	f596 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f58e:	2802      	cmp	r0, #2
    f590:	d001      	beq.n	f596 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f592:	21bd      	movs	r1, #189	; 0xbd
    f594:	e018      	b.n	f5c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f596:	7130      	strb	r0, [r6, #4]
    f598:	4629      	mov	r1, r5
    f59a:	8873      	ldrh	r3, [r6, #2]
    f59c:	2503      	movs	r5, #3
    f59e:	4620      	mov	r0, r4
    f5a0:	463a      	mov	r2, r7
    f5a2:	9500      	str	r5, [sp, #0]
    f5a4:	f7fe fe7f 	bl	e2a6 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    f5a8:	4620      	mov	r0, r4
    f5aa:	60b7      	str	r7, [r6, #8]
    f5ac:	f7fe ff3f 	bl	e42e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f5b0:	b138      	cbz	r0, f5c2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    f5b2:	2100      	movs	r1, #0
    f5b4:	4620      	mov	r0, r4
    f5b6:	460a      	mov	r2, r1
    f5b8:	f7ff f876 	bl	e6a8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f5bc:	b118      	cbz	r0, f5c6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    f5be:	2001      	movs	r0, #1
    f5c0:	e7dc      	b.n	f57c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    f5c2:	21cd      	movs	r1, #205	; 0xcd
    f5c4:	e000      	b.n	f5c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f5c6:	21d2      	movs	r1, #210	; 0xd2
    f5c8:	202b      	movs	r0, #43	; 0x2b
    f5ca:	f7f5 ffb3 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f5ce <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    f5ce:	f7f8 b9d1 	b.w	7974 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    f5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5d6:	460c      	mov	r4, r1
    f5d8:	b180      	cbz	r0, f5fc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    f5da:	2700      	movs	r7, #0
    f5dc:	4606      	mov	r6, r0
    f5de:	f500 7596 	add.w	r5, r0, #300	; 0x12c
    f5e2:	2a10      	cmp	r2, #16
    f5e4:	d060      	beq.n	f6a8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xda>
    f5e6:	dc0c      	bgt.n	f602 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    f5e8:	f1a2 0205 	sub.w	r2, r2, #5
    f5ec:	2a08      	cmp	r2, #8
    f5ee:	d210      	bcs.n	f612 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    f5f0:	e8df f002 	tbb	[pc, r2]
    f5f4:	0f0f124e 	.word	0x0f0f124e
    f5f8:	540f2033 	.word	0x540f2033
    f5fc:	f44f 7112 	mov.w	r1, #584	; 0x248
    f600:	e034      	b.n	f66c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f602:	2a11      	cmp	r2, #17
    f604:	d072      	beq.n	f6ec <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    f606:	2a18      	cmp	r2, #24
    f608:	d068      	beq.n	f6dc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x10e>
    f60a:	2a1a      	cmp	r2, #26
    f60c:	d057      	beq.n	f6be <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xf0>
    f60e:	2a1b      	cmp	r2, #27
    f610:	d060      	beq.n	f6d4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x106>
    f612:	f240 2175 	movw	r1, #629	; 0x275
    f616:	e029      	b.n	f66c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f618:	7067      	strb	r7, [r4, #1]
    f61a:	2007      	movs	r0, #7
    f61c:	7020      	strb	r0, [r4, #0]
    f61e:	8537      	strh	r7, [r6, #40]	; 0x28
    f620:	f855 0f80 	ldr.w	r0, [r5, #128]!
    f624:	6060      	str	r0, [r4, #4]
    f626:	6868      	ldr	r0, [r5, #4]
    f628:	60a0      	str	r0, [r4, #8]
    f62a:	8928      	ldrh	r0, [r5, #8]
    f62c:	81a0      	strh	r0, [r4, #12]
    f62e:	7127      	strb	r7, [r4, #4]
    f630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f634:	8830      	ldrh	r0, [r6, #0]
    f636:	f7f6 fba5 	bl	5d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f63a:	4680      	mov	r8, r0
    f63c:	f7fe ffcb 	bl	e5d6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    f640:	b110      	cbz	r0, f648 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x7a>
    f642:	f240 11b9 	movw	r1, #441	; 0x1b9
    f646:	e011      	b.n	f66c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f648:	7067      	strb	r7, [r4, #1]
    f64a:	200c      	movs	r0, #12
    f64c:	7020      	strb	r0, [r4, #0]
    f64e:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
    f652:	7120      	strb	r0, [r4, #4]
    f654:	8830      	ldrh	r0, [r6, #0]
    f656:	80e0      	strh	r0, [r4, #6]
    f658:	e015      	b.n	f686 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xb8>
    f65a:	8830      	ldrh	r0, [r6, #0]
    f65c:	f7f6 fb92 	bl	5d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f660:	4680      	mov	r8, r0
    f662:	f7fe ffb8 	bl	e5d6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    f666:	b120      	cbz	r0, f672 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    f668:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    f66c:	2010      	movs	r0, #16
    f66e:	f7f5 ff61 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f672:	7067      	strb	r7, [r4, #1]
    f674:	200b      	movs	r0, #11
    f676:	7020      	strb	r0, [r4, #0]
    f678:	f815 0f94 	ldrb.w	r0, [r5, #148]!
    f67c:	7120      	strb	r0, [r4, #4]
    f67e:	8830      	ldrh	r0, [r6, #0]
    f680:	80e0      	strh	r0, [r4, #6]
    f682:	7928      	ldrb	r0, [r5, #4]
    f684:	7220      	strb	r0, [r4, #8]
    f686:	4640      	mov	r0, r8
    f688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f68c:	f7fe bfbe 	b.w	e60c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    f690:	7067      	strb	r7, [r4, #1]
    f692:	2006      	movs	r0, #6
    f694:	7020      	strb	r0, [r4, #0]
    f696:	f855 0f6a 	ldr.w	r0, [r5, #106]!
    f69a:	e00a      	b.n	f6b2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe4>
    f69c:	7067      	strb	r7, [r4, #1]
    f69e:	200e      	movs	r0, #14
    f6a0:	7020      	strb	r0, [r4, #0]
    f6a2:	8830      	ldrh	r0, [r6, #0]
    f6a4:	8088      	strh	r0, [r1, #4]
    f6a6:	e7c3      	b.n	f630 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f6a8:	7067      	strb	r7, [r4, #1]
    f6aa:	2012      	movs	r0, #18
    f6ac:	7020      	strb	r0, [r4, #0]
    f6ae:	f855 0f22 	ldr.w	r0, [r5, #34]!
    f6b2:	6060      	str	r0, [r4, #4]
    f6b4:	6868      	ldr	r0, [r5, #4]
    f6b6:	60a0      	str	r0, [r4, #8]
    f6b8:	68a8      	ldr	r0, [r5, #8]
    f6ba:	60e0      	str	r0, [r4, #12]
    f6bc:	e7b8      	b.n	f630 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f6be:	7067      	strb	r7, [r4, #1]
    f6c0:	2018      	movs	r0, #24
    f6c2:	7020      	strb	r0, [r4, #0]
    f6c4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    f6c6:	6060      	str	r0, [r4, #4]
    f6c8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    f6ca:	60a0      	str	r0, [r4, #8]
    f6cc:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
    f6d0:	81a0      	strh	r0, [r4, #12]
    f6d2:	e7ad      	b.n	f630 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f6d4:	2019      	movs	r0, #25
    f6d6:	7020      	strb	r0, [r4, #0]
    f6d8:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    f6da:	e004      	b.n	f6e6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x118>
    f6dc:	7067      	strb	r7, [r4, #1]
    f6de:	2016      	movs	r0, #22
    f6e0:	7020      	strb	r0, [r4, #0]
    f6e2:	f8d5 000a 	ldr.w	r0, [r5, #10]
    f6e6:	6048      	str	r0, [r1, #4]
    f6e8:	e7a2      	b.n	f630 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f6ea:	e7ff      	b.n	f6ec <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    f6ec:	7067      	strb	r7, [r4, #1]
    f6ee:	2013      	movs	r0, #19
    f6f0:	7020      	strb	r0, [r4, #0]
    f6f2:	f855 0f5a 	ldr.w	r0, [r5, #90]!
    f6f6:	6060      	str	r0, [r4, #4]
    f6f8:	88a8      	ldrh	r0, [r5, #4]
    f6fa:	8120      	strh	r0, [r4, #8]
    f6fc:	e798      	b.n	f630 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>

0000f6fe <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    f6fe:	b4f0      	push	{r4, r5, r6, r7}
    f700:	8150      	strh	r0, [r2, #10]
    f702:	890d      	ldrh	r5, [r1, #8]
    f704:	4614      	mov	r4, r2
    f706:	8195      	strh	r5, [r2, #12]
    f708:	898a      	ldrh	r2, [r1, #12]
    f70a:	81e2      	strh	r2, [r4, #14]
    f70c:	8948      	ldrh	r0, [r1, #10]
    f70e:	8220      	strh	r0, [r4, #16]
    f710:	89ce      	ldrh	r6, [r1, #14]
    f712:	8266      	strh	r6, [r4, #18]
    f714:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    f716:	42b7      	cmp	r7, r6
    f718:	d108      	bne.n	f72c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f71a:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    f71c:	4286      	cmp	r6, r0
    f71e:	d105      	bne.n	f72c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f720:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    f722:	4296      	cmp	r6, r2
    f724:	d102      	bne.n	f72c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f726:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    f728:	42aa      	cmp	r2, r5
    f72a:	d001      	beq.n	f730 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    f72c:	2201      	movs	r2, #1
    f72e:	e000      	b.n	f732 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    f730:	2200      	movs	r2, #0
    f732:	7522      	strb	r2, [r4, #20]
    f734:	8548      	strh	r0, [r1, #42]	; 0x2a
    f736:	8a60      	ldrh	r0, [r4, #18]
    f738:	85c8      	strh	r0, [r1, #46]	; 0x2e
    f73a:	89a0      	ldrh	r0, [r4, #12]
    f73c:	8588      	strh	r0, [r1, #44]	; 0x2c
    f73e:	89e0      	ldrh	r0, [r4, #14]
    f740:	8608      	strh	r0, [r1, #48]	; 0x30
    f742:	4620      	mov	r0, r4
    f744:	bcf0      	pop	{r4, r5, r6, r7}
    f746:	2210      	movs	r2, #16
    f748:	4619      	mov	r1, r3
    f74a:	f7f7 bf1b 	b.w	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000f74e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    f74e:	b510      	push	{r4, lr}
    f750:	888c      	ldrh	r4, [r1, #4]
    f752:	890a      	ldrh	r2, [r1, #8]
    f754:	884b      	ldrh	r3, [r1, #2]
    f756:	88c9      	ldrh	r1, [r1, #6]
    f758:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    f75c:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    f760:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    f764:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    f768:	bd10      	pop	{r4, pc}

0000f76a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    f76a:	b570      	push	{r4, r5, r6, lr}
    f76c:	4615      	mov	r5, r2
    f76e:	460c      	mov	r4, r1
    f770:	f000 f8ce 	bl	f910 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    f774:	3096      	adds	r0, #150	; 0x96
    f776:	4428      	add	r0, r5
    f778:	42a0      	cmp	r0, r4
    f77a:	d801      	bhi.n	f780 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    f77c:	1a20      	subs	r0, r4, r0
    f77e:	bd70      	pop	{r4, r5, r6, pc}
    f780:	2000      	movs	r0, #0
    f782:	bd70      	pop	{r4, r5, r6, pc}

0000f784 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    f784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f788:	4604      	mov	r4, r0
    f78a:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
    f78c:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    f78e:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    f792:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    f796:	4285      	cmp	r5, r0
    f798:	d300      	bcc.n	f79c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    f79a:	4605      	mov	r5, r0
    f79c:	4620      	mov	r0, r4
    f79e:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    f7a2:	f000 f8a5 	bl	f8f0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    f7a6:	4601      	mov	r1, r0
    f7a8:	8765      	strh	r5, [r4, #58]	; 0x3a
    f7aa:	87e1      	strh	r1, [r4, #62]	; 0x3e
    f7ac:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    f7b0:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f7b4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    f7b8:	4680      	mov	r8, r0
    f7ba:	42aa      	cmp	r2, r5
    f7bc:	d200      	bcs.n	f7c0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    f7be:	462a      	mov	r2, r5
    f7c0:	428b      	cmp	r3, r1
    f7c2:	d200      	bcs.n	f7c6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    f7c4:	460b      	mov	r3, r1
    f7c6:	8202      	strh	r2, [r0, #16]
    f7c8:	f8a8 3012 	strh.w	r3, [r8, #18]
    f7cc:	42bd      	cmp	r5, r7
    f7ce:	d101      	bne.n	f7d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    f7d0:	42b1      	cmp	r1, r6
    f7d2:	d001      	beq.n	f7d8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    f7d4:	2001      	movs	r0, #1
    f7d6:	e000      	b.n	f7da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x56>
    f7d8:	2000      	movs	r0, #0
    f7da:	4681      	mov	r9, r0
    f7dc:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
    f7e0:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    f7e4:	8f27      	ldrh	r7, [r4, #56]	; 0x38
    f7e6:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    f7e8:	4285      	cmp	r5, r0
    f7ea:	d300      	bcc.n	f7ee <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6a>
    f7ec:	4605      	mov	r5, r0
    f7ee:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    f7f2:	4620      	mov	r0, r4
    f7f4:	f000 f884 	bl	f900 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f7f8:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    f7fc:	2902      	cmp	r1, #2
    f7fe:	d108      	bne.n	f812 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8e>
    f800:	42af      	cmp	r7, r5
    f802:	d200      	bcs.n	f806 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x82>
    f804:	463d      	mov	r5, r7
    f806:	4286      	cmp	r6, r0
    f808:	d200      	bcs.n	f80c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
    f80a:	4630      	mov	r0, r6
    f80c:	2100      	movs	r1, #0
    f80e:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    f812:	f8a8 5008 	strh.w	r5, [r8, #8]
    f816:	f8a8 000c 	strh.w	r0, [r8, #12]
    f81a:	42bd      	cmp	r5, r7
    f81c:	d101      	bne.n	f822 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    f81e:	42b0      	cmp	r0, r6
    f820:	d001      	beq.n	f826 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
    f822:	2001      	movs	r0, #1
    f824:	e000      	b.n	f828 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa4>
    f826:	2000      	movs	r0, #0
    f828:	ea40 0009 	orr.w	r0, r0, r9
    f82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f830 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    f830:	6840      	ldr	r0, [r0, #4]
    f832:	4770      	bx	lr

0000f834 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    f834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f838:	4616      	mov	r6, r2
    f83a:	460f      	mov	r7, r1
    f83c:	4604      	mov	r4, r0
    f83e:	f000 f867 	bl	f910 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    f842:	4605      	mov	r5, r0
    f844:	463a      	mov	r2, r7
    f846:	6921      	ldr	r1, [r4, #16]
    f848:	6b20      	ldr	r0, [r4, #48]	; 0x30
    f84a:	f000 f84c 	bl	f8e6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f84e:	19a9      	adds	r1, r5, r6
    f850:	4281      	cmp	r1, r0
    f852:	d300      	bcc.n	f856 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    f854:	4608      	mov	r0, r1
    f856:	6360      	str	r0, [r4, #52]	; 0x34
    f858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f85c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f85c:	221b      	movs	r2, #27
    f85e:	8402      	strh	r2, [r0, #32]
    f860:	8382      	strh	r2, [r0, #28]
    f862:	82c2      	strh	r2, [r0, #22]
    f864:	8282      	strh	r2, [r0, #20]
    f866:	8142      	strh	r2, [r0, #10]
    f868:	8202      	strh	r2, [r0, #16]
    f86a:	8102      	strh	r2, [r0, #8]
    f86c:	8542      	strh	r2, [r0, #42]	; 0x2a
    f86e:	8582      	strh	r2, [r0, #44]	; 0x2c
    f870:	8482      	strh	r2, [r0, #36]	; 0x24
    f872:	2900      	cmp	r1, #0
    f874:	d10a      	bne.n	f88c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f876:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f87a:	8441      	strh	r1, [r0, #34]	; 0x22
    f87c:	83c1      	strh	r1, [r0, #30]
    f87e:	8341      	strh	r1, [r0, #26]
    f880:	8301      	strh	r1, [r0, #24]
    f882:	81c1      	strh	r1, [r0, #14]
    f884:	8241      	strh	r1, [r0, #18]
    f886:	8181      	strh	r1, [r0, #12]
    f888:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f88a:	8601      	strh	r1, [r0, #48]	; 0x30
    f88c:	4770      	bx	lr

0000f88e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f88e:	6800      	ldr	r0, [r0, #0]
    f890:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f894:	4290      	cmp	r0, r2
    f896:	d903      	bls.n	f8a0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f898:	1a40      	subs	r0, r0, r1
    f89a:	389c      	subs	r0, #156	; 0x9c
    f89c:	0840      	lsrs	r0, r0, #1
    f89e:	4770      	bx	lr
    f8a0:	2000      	movs	r0, #0
    f8a2:	4770      	bx	lr

0000f8a4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f8a4:	b510      	push	{r4, lr}
    f8a6:	9c02      	ldr	r4, [sp, #8]
    f8a8:	8281      	strh	r1, [r0, #20]
    f8aa:	82c2      	strh	r2, [r0, #22]
    f8ac:	8303      	strh	r3, [r0, #24]
    f8ae:	8344      	strh	r4, [r0, #26]
    f8b0:	bd10      	pop	{r4, pc}

0000f8b2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    f8b2:	b430      	push	{r4, r5}
    f8b4:	8150      	strh	r0, [r2, #10]
    f8b6:	8a88      	ldrh	r0, [r1, #20]
    f8b8:	8190      	strh	r0, [r2, #12]
    f8ba:	8ac8      	ldrh	r0, [r1, #22]
    f8bc:	81d0      	strh	r0, [r2, #14]
    f8be:	8b08      	ldrh	r0, [r1, #24]
    f8c0:	8210      	strh	r0, [r2, #16]
    f8c2:	8b48      	ldrh	r0, [r1, #26]
    f8c4:	4614      	mov	r4, r2
    f8c6:	8250      	strh	r0, [r2, #18]
    f8c8:	4620      	mov	r0, r4
    f8ca:	bc30      	pop	{r4, r5}
    f8cc:	221a      	movs	r2, #26
    f8ce:	4619      	mov	r1, r3
    f8d0:	f7f7 be58 	b.w	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f8d4:	2902      	cmp	r1, #2
    f8d6:	d003      	beq.n	f8e0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    f8d8:	00c0      	lsls	r0, r0, #3
    f8da:	3070      	adds	r0, #112	; 0x70
    f8dc:	b280      	uxth	r0, r0
    f8de:	4770      	bx	lr
    f8e0:	0080      	lsls	r0, r0, #2
    f8e2:	303c      	adds	r0, #60	; 0x3c
    f8e4:	e7fa      	b.n	f8dc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    f8e6:	4288      	cmp	r0, r1
    f8e8:	d300      	bcc.n	f8ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    f8ea:	4608      	mov	r0, r1
    f8ec:	1a80      	subs	r0, r0, r2
    f8ee:	4770      	bx	lr
    f8f0:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    f8f4:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    f8f8:	4281      	cmp	r1, r0
    f8fa:	d200      	bcs.n	f8fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    f8fc:	4608      	mov	r0, r1
    f8fe:	4770      	bx	lr
    f900:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f904:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    f908:	4281      	cmp	r1, r0
    f90a:	d200      	bcs.n	f90e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    f90c:	4608      	mov	r0, r1
    f90e:	4770      	bx	lr
    f910:	2196      	movs	r1, #150	; 0x96
    f912:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
    f916:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
    f91a:	f000 b800 	b.w	f91e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x6c>
    f91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f922:	460d      	mov	r5, r1
    f924:	4606      	mov	r6, r0
    f926:	4698      	mov	r8, r3
    f928:	4617      	mov	r7, r2
    f92a:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    f92c:	4611      	mov	r1, r2
    f92e:	f7ff ffd1 	bl	f8d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f932:	4604      	mov	r4, r0
    f934:	4639      	mov	r1, r7
    f936:	4630      	mov	r0, r6
    f938:	f7ff ffe2 	bl	f900 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f93c:	42a0      	cmp	r0, r4
    f93e:	d200      	bcs.n	f942 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x90>
    f940:	4604      	mov	r4, r0
    f942:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
    f946:	4641      	mov	r1, r8
    f948:	f7ff ffc4 	bl	f8d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f94c:	4607      	mov	r7, r0
    f94e:	4641      	mov	r1, r8
    f950:	4630      	mov	r0, r6
    f952:	f7ff ffcd 	bl	f8f0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    f956:	42b8      	cmp	r0, r7
    f958:	d300      	bcc.n	f95c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xaa>
    f95a:	4638      	mov	r0, r7
    f95c:	4420      	add	r0, r4
    f95e:	4428      	add	r0, r5
    f960:	1d80      	adds	r0, r0, #6
    f962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f966:	b510      	push	{r4, lr}
    f968:	4604      	mov	r4, r0
    f96a:	2108      	movs	r1, #8
    f96c:	4620      	mov	r0, r4
    f96e:	f7f5 fe8d 	bl	568c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f972:	6820      	ldr	r0, [r4, #0]
    f974:	2800      	cmp	r0, #0
    f976:	d102      	bne.n	f97e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    f978:	6860      	ldr	r0, [r4, #4]
    f97a:	2800      	cmp	r0, #0
    f97c:	d0f5      	beq.n	f96a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb8>
    f97e:	bd10      	pop	{r4, pc}
    f980:	2801      	cmp	r0, #1
    f982:	d102      	bne.n	f98a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    f984:	7948      	ldrb	r0, [r1, #5]
    f986:	0980      	lsrs	r0, r0, #6
    f988:	d001      	beq.n	f98e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    f98a:	2000      	movs	r0, #0
    f98c:	4770      	bx	lr
    f98e:	2001      	movs	r0, #1
    f990:	4770      	bx	lr
    f992:	2801      	cmp	r0, #1
    f994:	d106      	bne.n	f9a4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    f996:	7948      	ldrb	r0, [r1, #5]
    f998:	2101      	movs	r1, #1
    f99a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f99e:	d101      	bne.n	f9a4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    f9a0:	2001      	movs	r0, #1
    f9a2:	4770      	bx	lr
    f9a4:	2000      	movs	r0, #0
    f9a6:	4770      	bx	lr
    f9a8:	2802      	cmp	r0, #2
    f9aa:	d003      	beq.n	f9b4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    f9ac:	2803      	cmp	r0, #3
    f9ae:	d001      	beq.n	f9b4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    f9b0:	2000      	movs	r0, #0
    f9b2:	4770      	bx	lr
    f9b4:	2001      	movs	r0, #1
    f9b6:	4770      	bx	lr

0000f9b8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    f9b8:	b510      	push	{r4, lr}
    f9ba:	4604      	mov	r4, r0
    f9bc:	7c00      	ldrb	r0, [r0, #16]
    f9be:	f7ff fff3 	bl	f9a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    f9c2:	b148      	cbz	r0, f9d8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f9c4:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    f9c8:	f104 0150 	add.w	r1, r4, #80	; 0x50
    f9cc:	f7ff f9a2 	bl	ed14 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f9d0:	2808      	cmp	r0, #8
    f9d2:	d001      	beq.n	f9d8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f9d4:	2001      	movs	r0, #1
    f9d6:	bd10      	pop	{r4, pc}
    f9d8:	7c20      	ldrb	r0, [r4, #16]
    f9da:	b118      	cbz	r0, f9e4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f9dc:	2802      	cmp	r0, #2
    f9de:	d001      	beq.n	f9e4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f9e0:	7de0      	ldrb	r0, [r4, #23]
    f9e2:	bd10      	pop	{r4, pc}
    f9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9e8:	2000      	movs	r0, #0
    f9ea:	f7f6 bc85 	b.w	62f8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000f9ee <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    f9ee:	b508      	push	{r3, lr}
    f9f0:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    f9f4:	f88d 1000 	strb.w	r1, [sp]
    f9f8:	9900      	ldr	r1, [sp, #0]
    f9fa:	9100      	str	r1, [sp, #0]
    f9fc:	f89d 1000 	ldrb.w	r1, [sp]
    fa00:	b109      	cbz	r1, fa06 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    fa02:	2001      	movs	r0, #1
    fa04:	bd08      	pop	{r3, pc}
    fa06:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    fa0a:	f88d 0000 	strb.w	r0, [sp]
    fa0e:	9800      	ldr	r0, [sp, #0]
    fa10:	9000      	str	r0, [sp, #0]
    fa12:	f89d 0000 	ldrb.w	r0, [sp]
    fa16:	2000      	movs	r0, #0
    fa18:	bd08      	pop	{r3, pc}

0000fa1a <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    fa1a:	20ff      	movs	r0, #255	; 0xff
    fa1c:	7008      	strb	r0, [r1, #0]
    fa1e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    fa20:	f7ff b878 	b.w	eb14 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000fa24 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    fa24:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fa26:	460d      	mov	r5, r1
    fa28:	4604      	mov	r4, r0
    fa2a:	f44f 7288 	mov.w	r2, #272	; 0x110
    fa2e:	2100      	movs	r1, #0
    fa30:	f7fd ff6c 	bl	d90c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    fa34:	20ff      	movs	r0, #255	; 0xff
    fa36:	7020      	strb	r0, [r4, #0]
    fa38:	207f      	movs	r0, #127	; 0x7f
    fa3a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    fa3e:	2013      	movs	r0, #19
    fa40:	8060      	strh	r0, [r4, #2]
    fa42:	f7f6 fa61 	bl	5f08 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    fa46:	4601      	mov	r1, r0
    fa48:	62e0      	str	r0, [r4, #44]	; 0x2c
    fa4a:	2200      	movs	r2, #0
    fa4c:	4668      	mov	r0, sp
    fa4e:	f7fe ffcb 	bl	e9e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fa52:	2200      	movs	r2, #0
    fa54:	2101      	movs	r1, #1
    fa56:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fa58:	f7ff f83c 	bl	ead4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fa5c:	2204      	movs	r2, #4
    fa5e:	4668      	mov	r0, sp
    fa60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fa62:	f7fe ffc1 	bl	e9e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fa66:	2200      	movs	r2, #0
    fa68:	4611      	mov	r1, r2
    fa6a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fa6c:	f7ff f832 	bl	ead4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fa70:	73a5      	strb	r5, [r4, #14]
    fa72:	f104 0020 	add.w	r0, r4, #32
    fa76:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    fa7a:	f000 b994 	b.w	fda6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000fa7e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    fa7e:	7880      	ldrb	r0, [r0, #2]
    fa80:	f3c0 0080 	ubfx	r0, r0, #2, #1
    fa84:	b108      	cbz	r0, fa8a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    fa86:	2000      	movs	r0, #0
    fa88:	4770      	bx	lr
    fa8a:	201f      	movs	r0, #31
    fa8c:	4770      	bx	lr

0000fa8e <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    fa8e:	f7f8 bcaf 	b.w	83f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>

0000fa92 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    fa92:	b570      	push	{r4, r5, r6, lr}
    fa94:	2300      	movs	r3, #0
    fa96:	2a03      	cmp	r2, #3
    fa98:	d015      	beq.n	fac6 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x34>
    fa9a:	2a0e      	cmp	r2, #14
    fa9c:	d01a      	beq.n	fad4 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x42>
    fa9e:	2a12      	cmp	r2, #18
    faa0:	d030      	beq.n	fb04 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x72>
    faa2:	2a19      	cmp	r2, #25
    faa4:	d004      	beq.n	fab0 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1e>
    faa6:	f240 21d2 	movw	r1, #722	; 0x2d2
    faaa:	202d      	movs	r0, #45	; 0x2d
    faac:	f7f5 fd42 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fab0:	704b      	strb	r3, [r1, #1]
    fab2:	2217      	movs	r2, #23
    fab4:	700a      	strb	r2, [r1, #0]
    fab6:	f850 2fb5 	ldr.w	r2, [r0, #181]!
    faba:	604a      	str	r2, [r1, #4]
    fabc:	6842      	ldr	r2, [r0, #4]
    fabe:	608a      	str	r2, [r1, #8]
    fac0:	7a00      	ldrb	r0, [r0, #8]
    fac2:	7308      	strb	r0, [r1, #12]
    fac4:	bd70      	pop	{r4, r5, r6, pc}
    fac6:	704b      	strb	r3, [r1, #1]
    fac8:	2205      	movs	r2, #5
    faca:	700a      	strb	r2, [r1, #0]
    facc:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
    fad0:	6048      	str	r0, [r1, #4]
    fad2:	bd70      	pop	{r4, r5, r6, pc}
    fad4:	4605      	mov	r5, r0
    fad6:	704b      	strb	r3, [r1, #1]
    fad8:	2011      	movs	r0, #17
    fada:	460c      	mov	r4, r1
    fadc:	7008      	strb	r0, [r1, #0]
    fade:	2220      	movs	r2, #32
    fae0:	f105 016e 	add.w	r1, r5, #110	; 0x6e
    fae4:	1d20      	adds	r0, r4, #4
    fae6:	f7fd fe97 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    faea:	2001      	movs	r0, #1
    faec:	7220      	strb	r0, [r4, #8]
    faee:	7920      	ldrb	r0, [r4, #4]
    faf0:	2800      	cmp	r0, #0
    faf2:	d1ee      	bne.n	fad2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x40>
    faf4:	69e8      	ldr	r0, [r5, #28]
    faf6:	8800      	ldrh	r0, [r0, #0]
    faf8:	f7f6 f944 	bl	5d84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    fafc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb00:	f7fe bd84 	b.w	e60c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    fb04:	704b      	strb	r3, [r1, #1]
    fb06:	2214      	movs	r2, #20
    fb08:	700a      	strb	r2, [r1, #0]
    fb0a:	f850 2f98 	ldr.w	r2, [r0, #152]!
    fb0e:	604a      	str	r2, [r1, #4]
    fb10:	8880      	ldrh	r0, [r0, #4]
    fb12:	8108      	strh	r0, [r1, #8]
    fb14:	bd70      	pop	{r4, r5, r6, pc}

0000fb16 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    fb16:	6880      	ldr	r0, [r0, #8]
    fb18:	4770      	bx	lr

0000fb1a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    fb1a:	2001      	movs	r0, #1
    fb1c:	4770      	bx	lr

0000fb1e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    fb1e:	b510      	push	{r4, lr}
    fb20:	4604      	mov	r4, r0
    fb22:	3020      	adds	r0, #32
    fb24:	f000 f8ff 	bl	fd26 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    fb28:	8861      	ldrh	r1, [r4, #2]
    fb2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb2e:	2228      	movs	r2, #40	; 0x28
    fb30:	f7f8 be46 	b.w	87c0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000fb34 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    fb34:	2200      	movs	r2, #0
    fb36:	8502      	strh	r2, [r0, #40]	; 0x28
    fb38:	8843      	ldrh	r3, [r0, #2]
    fb3a:	2b1d      	cmp	r3, #29
    fb3c:	d001      	beq.n	fb42 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    fb3e:	7341      	strb	r1, [r0, #13]
    fb40:	4770      	bx	lr
    fb42:	7342      	strb	r2, [r0, #13]
    fb44:	4770      	bx	lr

0000fb46 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    fb46:	b510      	push	{r4, lr}
    fb48:	2400      	movs	r4, #0
    fb4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    fb4c:	f7fe ffb0 	bl	eab0 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    fb50:	b100      	cbz	r0, fb54 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    fb52:	2001      	movs	r0, #1
    fb54:	4384      	bics	r4, r0
    fb56:	f084 0001 	eor.w	r0, r4, #1
    fb5a:	bd10      	pop	{r4, pc}

0000fb5c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    fb5c:	2000      	movs	r0, #0
    fb5e:	4770      	bx	lr

0000fb60 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    fb60:	7880      	ldrb	r0, [r0, #2]
    fb62:	f000 0001 	and.w	r0, r0, #1
    fb66:	4770      	bx	lr

0000fb68 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    fb68:	7880      	ldrb	r0, [r0, #2]
    fb6a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    fb6e:	4770      	bx	lr

0000fb70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    fb70:	2001      	movs	r0, #1
    fb72:	4770      	bx	lr

0000fb74 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    fb74:	7880      	ldrb	r0, [r0, #2]
    fb76:	f3c0 0040 	ubfx	r0, r0, #1, #1
    fb7a:	4770      	bx	lr

0000fb7c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    fb7c:	f990 000e 	ldrsb.w	r0, [r0, #14]
    fb80:	4770      	bx	lr

0000fb82 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    fb82:	7800      	ldrb	r0, [r0, #0]
    fb84:	28ff      	cmp	r0, #255	; 0xff
    fb86:	d001      	beq.n	fb8c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    fb88:	2001      	movs	r0, #1
    fb8a:	4770      	bx	lr
    fb8c:	2000      	movs	r0, #0
    fb8e:	4770      	bx	lr

0000fb90 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    fb90:	680a      	ldr	r2, [r1, #0]
    fb92:	f840 2f11 	str.w	r2, [r0, #17]!
    fb96:	8889      	ldrh	r1, [r1, #4]
    fb98:	8081      	strh	r1, [r0, #4]
    fb9a:	2101      	movs	r1, #1
    fb9c:	7181      	strb	r1, [r0, #6]
    fb9e:	4770      	bx	lr

0000fba0 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    fba0:	7b00      	ldrb	r0, [r0, #12]
    fba2:	4770      	bx	lr

0000fba4 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    fba4:	2001      	movs	r0, #1
    fba6:	4770      	bx	lr

0000fba8 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    fba8:	61c1      	str	r1, [r0, #28]
    fbaa:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    fbae:	724a      	strb	r2, [r1, #9]
    fbb0:	f8d0 2049 	ldr.w	r2, [r0, #73]	; 0x49
    fbb4:	f8c1 200a 	str.w	r2, [r1, #10]
    fbb8:	f8b0 004d 	ldrh.w	r0, [r0, #77]	; 0x4d
    fbbc:	81c8      	strh	r0, [r1, #14]
    fbbe:	4770      	bx	lr

0000fbc0 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    fbc0:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    fbc4:	4770      	bx	lr

0000fbc6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    fbc6:	b510      	push	{r4, lr}
    fbc8:	4604      	mov	r4, r0
    fbca:	7880      	ldrb	r0, [r0, #2]
    fbcc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    fbd0:	b158      	cbz	r0, fbea <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    fbd2:	233c      	movs	r3, #60	; 0x3c
    fbd4:	22ff      	movs	r2, #255	; 0xff
    fbd6:	4620      	mov	r0, r4
    fbd8:	69e1      	ldr	r1, [r4, #28]
    fbda:	f7f8 fc35 	bl	8448 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    fbde:	220e      	movs	r2, #14
    fbe0:	4621      	mov	r1, r4
    fbe2:	f104 0064 	add.w	r0, r4, #100	; 0x64
    fbe6:	f7f7 fccd 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    fbea:	78a0      	ldrb	r0, [r4, #2]
    fbec:	07c0      	lsls	r0, r0, #31
    fbee:	f7f7 fd9b 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fbf2:	2001      	movs	r0, #1
    fbf4:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    fbf8:	bd10      	pop	{r4, pc}

0000fbfa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    fbfa:	7bc0      	ldrb	r0, [r0, #15]
    fbfc:	2800      	cmp	r0, #0
    fbfe:	d000      	beq.n	fc02 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    fc00:	2001      	movs	r0, #1
    fc02:	4770      	bx	lr
    fc04:	b510      	push	{r4, lr}
    fc06:	f7ff f885 	bl	ed14 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    fc0a:	4604      	mov	r4, r0
    fc0c:	f7f7 f984 	bl	6f18 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    fc10:	b138      	cbz	r0, fc22 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    fc12:	4620      	mov	r0, r4
    fc14:	f7f7 f928 	bl	6e68 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    fc18:	b118      	cbz	r0, fc22 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    fc1a:	2110      	movs	r1, #16
    fc1c:	f7ff fa5d 	bl	f0da <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    fc20:	b108      	cbz	r0, fc26 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    fc22:	2000      	movs	r0, #0
    fc24:	bd10      	pop	{r4, pc}
    fc26:	2001      	movs	r0, #1
    fc28:	bd10      	pop	{r4, pc}
    fc2a:	2101      	movs	r1, #1
    fc2c:	f7f8 b872 	b.w	7d14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    fc30:	2101      	movs	r1, #1
    fc32:	f7f8 b86f 	b.w	7d14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    fc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc3a:	4604      	mov	r4, r0
    fc3c:	460f      	mov	r7, r1
    fc3e:	7e40      	ldrb	r0, [r0, #25]
    fc40:	f7f7 f8f8 	bl	6e34 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    fc44:	4606      	mov	r6, r0
    fc46:	7e20      	ldrb	r0, [r4, #24]
    fc48:	f104 0549 	add.w	r5, r4, #73	; 0x49
    fc4c:	b120      	cbz	r0, fc58 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    fc4e:	b11e      	cbz	r6, fc58 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    fc50:	7e60      	ldrb	r0, [r4, #25]
    fc52:	f7f7 f8e3 	bl	6e1c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    fc56:	b1a0      	cbz	r0, fc82 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x88>
    fc58:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    fc5c:	2800      	cmp	r0, #0
    fc5e:	d024      	beq.n	fcaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    fc60:	7ea0      	ldrb	r0, [r4, #26]
    fc62:	2800      	cmp	r0, #0
    fc64:	d021      	beq.n	fcaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    fc66:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    fc6a:	4629      	mov	r1, r5
    fc6c:	f7ff fe91 	bl	f992 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    fc70:	b1a8      	cbz	r0, fc9e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa4>
    fc72:	f7f7 f8cf 	bl	6e14 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    fc76:	463a      	mov	r2, r7
    fc78:	4629      	mov	r1, r5
    fc7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fc7e:	f7fe bfe1 	b.w	ec44 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    fc82:	2001      	movs	r0, #1
    fc84:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    fc88:	463a      	mov	r2, r7
    fc8a:	4629      	mov	r1, r5
    fc8c:	4630      	mov	r0, r6
    fc8e:	f7fe ffd9 	bl	ec44 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    fc92:	7e61      	ldrb	r1, [r4, #25]
    fc94:	4628      	mov	r0, r5
    fc96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fc9a:	f7f7 b8d7 	b.w	6e4c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    fc9e:	4639      	mov	r1, r7
    fca0:	4628      	mov	r0, r5
    fca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fca6:	f7fe bfbc 	b.w	ec22 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    fcaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fcae:	b510      	push	{r4, lr}
    fcb0:	4604      	mov	r4, r0
    fcb2:	4608      	mov	r0, r1
    fcb4:	f7fc fc4e 	bl	c554 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    fcb8:	7921      	ldrb	r1, [r4, #4]
    fcba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fcbe:	2025      	movs	r0, #37	; 0x25
    fcc0:	f7fc bc1e 	b.w	c500 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    fcc4:	b510      	push	{r4, lr}
    fcc6:	4604      	mov	r4, r0
    fcc8:	3026      	adds	r0, #38	; 0x26
    fcca:	f7fc fbf9 	bl	c4c0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    fcce:	2800      	cmp	r0, #0
    fcd0:	d102      	bne.n	fcd8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xde>
    fcd2:	207f      	movs	r0, #127	; 0x7f
    fcd4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    fcd8:	bd10      	pop	{r4, pc}
    fcda:	b570      	push	{r4, r5, r6, lr}
    fcdc:	4614      	mov	r4, r2
    fcde:	461d      	mov	r5, r3
    fce0:	4606      	mov	r6, r0
    fce2:	f7f4 f84f 	bl	3d84 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    fce6:	1900      	adds	r0, r0, r4
    fce8:	4169      	adcs	r1, r5
    fcea:	e9c6 0100 	strd	r0, r1, [r6]
    fcee:	bd70      	pop	{r4, r5, r6, pc}
    fcf0:	7802      	ldrb	r2, [r0, #0]
    fcf2:	2320      	movs	r3, #32
    fcf4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    fcf8:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    fcfc:	430a      	orrs	r2, r1
    fcfe:	7002      	strb	r2, [r0, #0]
    fd00:	4770      	bx	lr

0000fd02 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    fd02:	b570      	push	{r4, r5, r6, lr}
    fd04:	7001      	strb	r1, [r0, #0]
    fd06:	7042      	strb	r2, [r0, #1]
    fd08:	4614      	mov	r4, r2
    fd0a:	460d      	mov	r5, r1
    fd0c:	7880      	ldrb	r0, [r0, #2]
    fd0e:	f000 f87f 	bl	fe10 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fd12:	fb10 f005 	smulbb	r0, r0, r5
    fd16:	4360      	muls	r0, r4
    fd18:	28ff      	cmp	r0, #255	; 0xff
    fd1a:	d303      	bcc.n	fd24 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    fd1c:	215c      	movs	r1, #92	; 0x5c
    fd1e:	202e      	movs	r0, #46	; 0x2e
    fd20:	f7f5 fc08 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd24:	bd70      	pop	{r4, r5, r6, pc}

0000fd26 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    fd26:	b510      	push	{r4, lr}
    fd28:	4604      	mov	r4, r0
    fd2a:	7880      	ldrb	r0, [r0, #2]
    fd2c:	f000 f870 	bl	fe10 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fd30:	7861      	ldrb	r1, [r4, #1]
    fd32:	7822      	ldrb	r2, [r4, #0]
    fd34:	fb11 f102 	smulbb	r1, r1, r2
    fd38:	4348      	muls	r0, r1
    fd3a:	b2c0      	uxtb	r0, r0
    fd3c:	bd10      	pop	{r4, pc}

0000fd3e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    fd3e:	b510      	push	{r4, lr}
    fd40:	4604      	mov	r4, r0
    fd42:	f000 f84d 	bl	fde0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    fd46:	7961      	ldrb	r1, [r4, #5]
    fd48:	1c49      	adds	r1, r1, #1
    fd4a:	b2c9      	uxtb	r1, r1
    fd4c:	7161      	strb	r1, [r4, #5]
    fd4e:	7862      	ldrb	r2, [r4, #1]
    fd50:	4291      	cmp	r1, r2
    fd52:	d10b      	bne.n	fd6c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    fd54:	2200      	movs	r2, #0
    fd56:	7162      	strb	r2, [r4, #5]
    fd58:	78e1      	ldrb	r1, [r4, #3]
    fd5a:	4301      	orrs	r1, r0
    fd5c:	70e1      	strb	r1, [r4, #3]
    fd5e:	78a3      	ldrb	r3, [r4, #2]
    fd60:	4299      	cmp	r1, r3
    fd62:	d103      	bne.n	fd6c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    fd64:	70e2      	strb	r2, [r4, #3]
    fd66:	7921      	ldrb	r1, [r4, #4]
    fd68:	1c49      	adds	r1, r1, #1
    fd6a:	7121      	strb	r1, [r4, #4]
    fd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd70:	f000 b825 	b.w	fdbe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000fd74 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    fd74:	7081      	strb	r1, [r0, #2]
    fd76:	4770      	bx	lr

0000fd78 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    fd78:	b570      	push	{r4, r5, r6, lr}
    fd7a:	4604      	mov	r4, r0
    fd7c:	7880      	ldrb	r0, [r0, #2]
    fd7e:	f000 f847 	bl	fe10 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fd82:	7861      	ldrb	r1, [r4, #1]
    fd84:	fb11 f500 	smulbb	r5, r1, r0
    fd88:	78e0      	ldrb	r0, [r4, #3]
    fd8a:	f000 f841 	bl	fe10 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fd8e:	7861      	ldrb	r1, [r4, #1]
    fd90:	7962      	ldrb	r2, [r4, #5]
    fd92:	fb10 2001 	smlabb	r0, r0, r1, r2
    fd96:	7821      	ldrb	r1, [r4, #0]
    fd98:	7922      	ldrb	r2, [r4, #4]
    fd9a:	1a89      	subs	r1, r1, r2
    fd9c:	fb11 f105 	smulbb	r1, r1, r5
    fda0:	1a08      	subs	r0, r1, r0
    fda2:	b2c0      	uxtb	r0, r0
    fda4:	bd70      	pop	{r4, r5, r6, pc}

0000fda6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    fda6:	2100      	movs	r1, #0
    fda8:	6001      	str	r1, [r0, #0]
    fdaa:	8081      	strh	r1, [r0, #4]
    fdac:	2101      	movs	r1, #1
    fdae:	7041      	strb	r1, [r0, #1]
    fdb0:	7001      	strb	r1, [r0, #0]
    fdb2:	4770      	bx	lr

0000fdb4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    fdb4:	2100      	movs	r1, #0
    fdb6:	70c1      	strb	r1, [r0, #3]
    fdb8:	7141      	strb	r1, [r0, #5]
    fdba:	7101      	strb	r1, [r0, #4]
    fdbc:	4770      	bx	lr
    fdbe:	b510      	push	{r4, lr}
    fdc0:	2801      	cmp	r0, #1
    fdc2:	d007      	beq.n	fdd4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    fdc4:	2802      	cmp	r0, #2
    fdc6:	d007      	beq.n	fdd8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    fdc8:	2804      	cmp	r0, #4
    fdca:	d007      	beq.n	fddc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    fdcc:	2139      	movs	r1, #57	; 0x39
    fdce:	202e      	movs	r0, #46	; 0x2e
    fdd0:	f7f5 fbb0 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fdd4:	2025      	movs	r0, #37	; 0x25
    fdd6:	bd10      	pop	{r4, pc}
    fdd8:	2026      	movs	r0, #38	; 0x26
    fdda:	bd10      	pop	{r4, pc}
    fddc:	2027      	movs	r0, #39	; 0x27
    fdde:	bd10      	pop	{r4, pc}
    fde0:	4601      	mov	r1, r0
    fde2:	2000      	movs	r0, #0
    fde4:	788a      	ldrb	r2, [r1, #2]
    fde6:	07d3      	lsls	r3, r2, #31
    fde8:	d002      	beq.n	fdf0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    fdea:	78cb      	ldrb	r3, [r1, #3]
    fdec:	07db      	lsls	r3, r3, #31
    fdee:	d006      	beq.n	fdfe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    fdf0:	0793      	lsls	r3, r2, #30
    fdf2:	d506      	bpl.n	fe02 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    fdf4:	78cb      	ldrb	r3, [r1, #3]
    fdf6:	079b      	lsls	r3, r3, #30
    fdf8:	d403      	bmi.n	fe02 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    fdfa:	2002      	movs	r0, #2
    fdfc:	4770      	bx	lr
    fdfe:	2001      	movs	r0, #1
    fe00:	4770      	bx	lr
    fe02:	0752      	lsls	r2, r2, #29
    fe04:	d5fc      	bpl.n	fe00 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    fe06:	78c9      	ldrb	r1, [r1, #3]
    fe08:	0749      	lsls	r1, r1, #29
    fe0a:	d4f9      	bmi.n	fe00 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    fe0c:	2004      	movs	r0, #4
    fe0e:	4770      	bx	lr
    fe10:	f3c0 0180 	ubfx	r1, r0, #2, #1
    fe14:	f3c0 0240 	ubfx	r2, r0, #1, #1
    fe18:	4411      	add	r1, r2
    fe1a:	f000 0001 	and.w	r0, r0, #1
    fe1e:	4408      	add	r0, r1
    fe20:	4770      	bx	lr

0000fe22 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    fe22:	f240 315a 	movw	r1, #858	; 0x35a
    fe26:	4348      	muls	r0, r1
    fe28:	4770      	bx	lr

0000fe2a <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    fe2a:	f240 20ef 	movw	r0, #751	; 0x2ef
    fe2e:	4770      	bx	lr
    fe30:	041c020e 	.word	0x041c020e
    fe34:	0c600630 	.word	0x0c600630
    fe38:	06b4035a 	.word	0x06b4035a
    fe3c:	0bf505c5 	.word	0x0bf505c5
    fe40:	01a31225 	.word	0x01a31225
    fe44:	05bf03b1 	.word	0x05bf03b1
    fe48:	064902ef 	.word	0x064902ef
    fe4c:	09a3      	.short	0x09a3

0000fe4e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    fe4e:	b510      	push	{r4, lr}
    fe50:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    fe54:	b109      	cbz	r1, fe5a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    fe56:	2000      	movs	r0, #0
    fe58:	bd10      	pop	{r4, pc}
    fe5a:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
    fe5e:	b131      	cbz	r1, fe6e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    fe60:	e9d0 1233 	ldrd	r1, r2, [r0, #204]	; 0xcc
    fe64:	428a      	cmp	r2, r1
    fe66:	d902      	bls.n	fe6e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    fe68:	f7ff fead 	bl	fbc6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    fe6c:	e7f3      	b.n	fe56 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    fe6e:	2001      	movs	r0, #1
    fe70:	bd10      	pop	{r4, pc}

0000fe72 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    fe72:	b510      	push	{r4, lr}
    fe74:	b131      	cbz	r1, fe84 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    fe76:	2901      	cmp	r1, #1
    fe78:	d008      	beq.n	fe8c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    fe7a:	f240 7195 	movw	r1, #1941	; 0x795
    fe7e:	2030      	movs	r0, #48	; 0x30
    fe80:	f7f5 fb58 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe88:	f000 b9ec 	b.w	10264 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x344>
    fe8c:	2100      	movs	r1, #0
    fe8e:	f880 10c8 	strb.w	r1, [r0, #200]	; 0xc8
    fe92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe96:	f000 b948 	b.w	1012a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>

0000fe9a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    fe9a:	b510      	push	{r4, lr}
    fe9c:	4604      	mov	r4, r0
    fe9e:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    fea2:	2800      	cmp	r0, #0
    fea4:	d019      	beq.n	feda <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    fea6:	2001      	movs	r0, #1
    fea8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
    feac:	4601      	mov	r1, r0
    feae:	4620      	mov	r0, r4
    feb0:	f7ff fe86 	bl	fbc0 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    feb4:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    feb8:	b170      	cbz	r0, fed8 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    feba:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
    febe:	f7f3 fb2f 	bl	3520 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    fec2:	7820      	ldrb	r0, [r4, #0]
    fec4:	f7f3 fc94 	bl	37f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    fec8:	f814 09c0 	ldrb.w	r0, [r4], #-192
    fecc:	f7f3 fc6e 	bl	37ac <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    fed0:	b120      	cbz	r0, fedc <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    fed2:	2000      	movs	r0, #0
    fed4:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
    fed8:	2000      	movs	r0, #0
    feda:	bd10      	pop	{r4, pc}
    fedc:	f240 2109 	movw	r1, #521	; 0x209
    fee0:	2030      	movs	r0, #48	; 0x30
    fee2:	f7f5 fb27 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fee6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    fee6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
    feea:	4770      	bx	lr

0000feec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    feec:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    fef0:	4770      	bx	lr

0000fef2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    fef2:	b50e      	push	{r1, r2, r3, lr}
    fef4:	4669      	mov	r1, sp
    fef6:	2001      	movs	r0, #1
    fef8:	f7fe fcbc 	bl	e874 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fefc:	b138      	cbz	r0, ff0e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    fefe:	f240 1137 	movw	r1, #311	; 0x137
    ff02:	2030      	movs	r0, #48	; 0x30
    ff04:	f7f5 fb16 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff08:	9802      	ldr	r0, [sp, #8]
    ff0a:	f7ff ffc6 	bl	fe9a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    ff0e:	4668      	mov	r0, sp
    ff10:	f7f5 fd54 	bl	59bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ff14:	2800      	cmp	r0, #0
    ff16:	d0f7      	beq.n	ff08 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    ff18:	f7f8 fdf6 	bl	8b08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    ff1c:	2000      	movs	r0, #0
    ff1e:	bd0e      	pop	{r1, r2, r3, pc}

0000ff20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    ff20:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ff22:	4604      	mov	r4, r0
    ff24:	f890 01d3 	ldrb.w	r0, [r0, #467]	; 0x1d3
    ff28:	2800      	cmp	r0, #0
    ff2a:	d15f      	bne.n	ffec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ff2c:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    ff30:	2803      	cmp	r0, #3
    ff32:	d15b      	bne.n	ffec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ff34:	f7f3 ff26 	bl	3d84 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ff38:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
    ff3c:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
    ff40:	1ac0      	subs	r0, r0, r3
    ff42:	eb61 0102 	sbc.w	r1, r1, r2
    ff46:	2300      	movs	r3, #0
    ff48:	461a      	mov	r2, r3
    ff4a:	1a1b      	subs	r3, r3, r0
    ff4c:	418a      	sbcs	r2, r1
    ff4e:	da4d      	bge.n	ffec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ff50:	1c42      	adds	r2, r0, #1
    ff52:	f171 0100 	sbcs.w	r1, r1, #0
    ff56:	db02      	blt.n	ff5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    ff58:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    ff5c:	e036      	b.n	ffcc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    ff5e:	6921      	ldr	r1, [r4, #16]
    ff60:	b111      	cbz	r1, ff68 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    ff62:	fbb0 f0f1 	udiv	r0, r0, r1
    ff66:	e000      	b.n	ff6a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    ff68:	2000      	movs	r0, #0
    ff6a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    ff6e:	1c40      	adds	r0, r0, #1
    ff70:	4408      	add	r0, r1
    ff72:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
    ff76:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    ff7a:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    ff7e:	1a08      	subs	r0, r1, r0
    ff80:	b200      	sxth	r0, r0
    ff82:	2800      	cmp	r0, #0
    ff84:	dd32      	ble.n	ffec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ff86:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    ff8a:	f7f3 fac9 	bl	3520 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ff8e:	2800      	cmp	r0, #0
    ff90:	d02c      	beq.n	ffec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ff92:	20ff      	movs	r0, #255	; 0xff
    ff94:	f884 0219 	strb.w	r0, [r4, #537]	; 0x219
    ff98:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
    ff9c:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
    ffa0:	ae01      	add	r6, sp, #4
    ffa2:	1a40      	subs	r0, r0, r1
    ffa4:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    ffa8:	1e40      	subs	r0, r0, #1
    ffaa:	4408      	add	r0, r1
    ffac:	b285      	uxth	r5, r0
    ffae:	e017      	b.n	ffe0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    ffb0:	9600      	str	r6, [sp, #0]
    ffb2:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    ffb6:	2300      	movs	r3, #0
    ffb8:	2201      	movs	r2, #1
    ffba:	4620      	mov	r0, r4
    ffbc:	f7f8 fe78 	bl	8cb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    ffc0:	2800      	cmp	r0, #0
    ffc2:	d013      	beq.n	ffec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ffc4:	2801      	cmp	r0, #1
    ffc6:	d004      	beq.n	ffd2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    ffc8:	f240 6101 	movw	r1, #1537	; 0x601
    ffcc:	2030      	movs	r0, #48	; 0x30
    ffce:	f7f5 fab1 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffd2:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    ffd6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ffda:	4408      	add	r0, r1
    ffdc:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
    ffe0:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    ffe4:	1a28      	subs	r0, r5, r0
    ffe6:	b200      	sxth	r0, r0
    ffe8:	2800      	cmp	r0, #0
    ffea:	dae1      	bge.n	ffb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    ffec:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ffee:	2000      	movs	r0, #0
    fff0:	4770      	bx	lr
    fff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fff6:	4604      	mov	r4, r0
    fff8:	2501      	movs	r5, #1
    fffa:	f000 f90c 	bl	10216 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    fffe:	2600      	movs	r6, #0
   10000:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
   10004:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
   10008:	2701      	movs	r7, #1
   1000a:	f884 70eb 	strb.w	r7, [r4, #235]	; 0xeb
   1000e:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
   10012:	f104 08e0 	add.w	r8, r4, #224	; 0xe0
   10016:	b169      	cbz	r1, 10034 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x114>
   10018:	e9f4 013c 	ldrd	r0, r1, [r4, #240]!	; 0xf0
   1001c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10020:	1880      	adds	r0, r0, r2
   10022:	f141 0100 	adc.w	r1, r1, #0
   10026:	e864 013c 	strd	r0, r1, [r4], #-240	; 0xf0
   1002a:	2100      	movs	r1, #0
   1002c:	4640      	mov	r0, r8
   1002e:	f7fe ff89 	bl	ef44 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   10032:	e00d      	b.n	10050 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x130>
   10034:	4620      	mov	r0, r4
   10036:	f7ff fd6e 	bl	fb16 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   1003a:	4601      	mov	r1, r0
   1003c:	e9f4 203c 	ldrd	r2, r0, [r4, #240]!	; 0xf0
   10040:	1852      	adds	r2, r2, r1
   10042:	4170      	adcs	r0, r6
   10044:	e864 203c 	strd	r2, r0, [r4], #-240	; 0xf0
   10048:	4640      	mov	r0, r8
   1004a:	f7fe ff7b 	bl	ef44 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   1004e:	1c45      	adds	r5, r0, #1
   10050:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
   10054:	1c41      	adds	r1, r0, #1
   10056:	290a      	cmp	r1, #10
   10058:	d202      	bcs.n	10060 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
   1005a:	4428      	add	r0, r5
   1005c:	f8a4 00f8 	strh.w	r0, [r4, #248]	; 0xf8
   10060:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   10064:	b138      	cbz	r0, 10076 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
   10066:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
   1006a:	1c40      	adds	r0, r0, #1
   1006c:	280a      	cmp	r0, #10
   1006e:	d302      	bcc.n	10076 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
   10070:	f884 70ea 	strb.w	r7, [r4, #234]	; 0xea
   10074:	e002      	b.n	1007c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15c>
   10076:	2002      	movs	r0, #2
   10078:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
   1007c:	4620      	mov	r0, r4
   1007e:	f000 f823 	bl	100c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
   10082:	b120      	cbz	r0, 1008e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
   10084:	4620      	mov	r0, r4
   10086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1008a:	f000 b80e 	b.w	100aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18a>
   1008e:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
   10092:	4641      	mov	r1, r8
   10094:	f000 f8bd 	bl	10212 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
   10098:	2800      	cmp	r0, #0
   1009a:	d104      	bne.n	100a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x186>
   1009c:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
   100a0:	2030      	movs	r0, #48	; 0x30
   100a2:	f7f5 fa47 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100aa:	b510      	push	{r4, lr}
   100ac:	4604      	mov	r4, r0
   100ae:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
   100b2:	f7f3 fb7b 	bl	37ac <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   100b6:	2000      	movs	r0, #0
   100b8:	7620      	strb	r0, [r4, #24]
   100ba:	bd10      	pop	{r4, pc}
   100bc:	b510      	push	{r4, lr}
   100be:	f7ff fd2e 	bl	fb1e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   100c2:	f500 7088 	add.w	r0, r0, #272	; 0x110
   100c6:	bd10      	pop	{r4, pc}
   100c8:	b570      	push	{r4, r5, r6, lr}
   100ca:	4605      	mov	r5, r0
   100cc:	f890 0108 	ldrb.w	r0, [r0, #264]	; 0x108
   100d0:	b108      	cbz	r0, 100d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b6>
   100d2:	2001      	movs	r0, #1
   100d4:	bd70      	pop	{r4, r5, r6, pc}
   100d6:	e9d5 1040 	ldrd	r1, r0, [r5, #256]	; 0x100
   100da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   100de:	4050      	eors	r0, r2
   100e0:	ea70 0101 	orns	r1, r0, r1
   100e4:	d011      	beq.n	1010a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ea>
   100e6:	2400      	movs	r4, #0
   100e8:	4628      	mov	r0, r5
   100ea:	f7ff ffe7 	bl	100bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
   100ee:	e9f5 123c 	ldrd	r1, r2, [r5, #240]!	; 0xf0
   100f2:	1840      	adds	r0, r0, r1
   100f4:	4154      	adcs	r4, r2
   100f6:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
   100fa:	3df0      	subs	r5, #240	; 0xf0
   100fc:	1a10      	subs	r0, r2, r0
   100fe:	41a1      	sbcs	r1, r4
   10100:	d503      	bpl.n	1010a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ea>
   10102:	4628      	mov	r0, r5
   10104:	f7ff fd5f 	bl	fbc6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   10108:	e7e3      	b.n	100d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
   1010a:	2000      	movs	r0, #0
   1010c:	bd70      	pop	{r4, r5, r6, pc}
   1010e:	b510      	push	{r4, lr}
   10110:	4604      	mov	r4, r0
   10112:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
   10116:	f000 f9f2 	bl	104fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5de>
   1011a:	4602      	mov	r2, r0
   1011c:	4620      	mov	r0, r4
   1011e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10122:	f240 111b 	movw	r1, #283	; 0x11b
   10126:	f7ff bb85 	b.w	f834 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   1012a:	b510      	push	{r4, lr}
   1012c:	f7fc f850 	bl	c1d0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   10130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10134:	f7f3 bc9c 	b.w	3a70 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   10138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1013c:	4604      	mov	r4, r0
   1013e:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
   10142:	2800      	cmp	r0, #0
   10144:	d051      	beq.n	101ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ca>
   10146:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   1014a:	2803      	cmp	r0, #3
   1014c:	d14d      	bne.n	101ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ca>
   1014e:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
   10152:	f001 f9e2 	bl	1151a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   10156:	4605      	mov	r5, r0
   10158:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
   1015c:	f7f8 fcc6 	bl	8aec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   10160:	4428      	add	r0, r5
   10162:	b286      	uxth	r6, r0
   10164:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
   10168:	f7f8 fcc0 	bl	8aec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   1016c:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   10170:	fa1f f880 	uxth.w	r8, r0
   10174:	4648      	mov	r0, r9
   10176:	f7fc f8e9 	bl	c34c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1017a:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
   1017e:	1a0d      	subs	r5, r1, r0
   10180:	4648      	mov	r0, r9
   10182:	f7fc f90f 	bl	c3a4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10186:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   1018a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1018e:	fbb0 f0fa 	udiv	r0, r0, sl
   10192:	1a2d      	subs	r5, r5, r0
   10194:	4648      	mov	r0, r9
   10196:	f7fc f8d9 	bl	c34c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1019a:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   1019e:	1a0f      	subs	r7, r1, r0
   101a0:	4648      	mov	r0, r9
   101a2:	f7fc f8ff 	bl	c3a4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   101a6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   101aa:	4401      	add	r1, r0
   101ac:	fbb1 f0fa 	udiv	r0, r1, sl
   101b0:	1a39      	subs	r1, r7, r0
   101b2:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
   101b6:	4370      	muls	r0, r6
   101b8:	fbb0 f2f8 	udiv	r2, r0, r8
   101bc:	2029      	movs	r0, #41	; 0x29
   101be:	eb00 0051 	add.w	r0, r0, r1, lsr #1
   101c2:	3260      	adds	r2, #96	; 0x60
   101c4:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
   101c8:	eb00 0052 	add.w	r0, r0, r2, lsr #1
   101cc:	42a9      	cmp	r1, r5
   101ce:	d801      	bhi.n	101d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
   101d0:	4285      	cmp	r5, r0
   101d2:	d901      	bls.n	101d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b8>
   101d4:	f7f4 fdec 	bl	4db0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
   101d8:	4631      	mov	r1, r6
   101da:	6920      	ldr	r0, [r4, #16]
   101dc:	f7fd f9ed 	bl	d5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   101e0:	2100      	movs	r1, #0
   101e2:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
   101e6:	f884 121a 	strb.w	r1, [r4, #538]	; 0x21a
   101ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101ee:	b570      	push	{r4, r5, r6, lr}
   101f0:	460c      	mov	r4, r1
   101f2:	4605      	mov	r5, r0
   101f4:	f7fc f8d6 	bl	c3a4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   101f8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   101fc:	4408      	add	r0, r1
   101fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10202:	fbb0 f6f1 	udiv	r6, r0, r1
   10206:	4628      	mov	r0, r5
   10208:	f7fc f8a0 	bl	c34c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1020c:	4430      	add	r0, r6
   1020e:	4420      	add	r0, r4
   10210:	bd70      	pop	{r4, r5, r6, pc}
   10212:	f7f2 bdeb 	b.w	2dec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   10216:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10218:	4604      	mov	r4, r0
   1021a:	f7ff fca9 	bl	fb70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1021e:	b1f8      	cbz	r0, 10260 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
   10220:	4620      	mov	r0, r4
   10222:	f7ff fc9d 	bl	fb60 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10226:	b918      	cbnz	r0, 10230 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
   10228:	4620      	mov	r0, r4
   1022a:	f7ff fca3 	bl	fb74 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1022e:	b140      	cbz	r0, 10242 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x322>
   10230:	2449      	movs	r4, #73	; 0x49
   10232:	4668      	mov	r0, sp
   10234:	f7f5 f858 	bl	52e8 <mpsl_fem_pa_is_configured>
   10238:	f89d 0000 	ldrb.w	r0, [sp]
   1023c:	b118      	cbz	r0, 10246 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x326>
   1023e:	2501      	movs	r5, #1
   10240:	e002      	b.n	10248 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
   10242:	2442      	movs	r4, #66	; 0x42
   10244:	e7f5      	b.n	10232 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x312>
   10246:	2500      	movs	r5, #0
   10248:	a801      	add	r0, sp, #4
   1024a:	f7f5 f835 	bl	52b8 <mpsl_fem_lna_is_configured>
   1024e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10252:	b100      	cbz	r0, 10256 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x336>
   10254:	2001      	movs	r0, #1
   10256:	4305      	orrs	r5, r0
   10258:	d000      	beq.n	1025c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x33c>
   1025a:	3409      	adds	r4, #9
   1025c:	4620      	mov	r0, r4
   1025e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10260:	206b      	movs	r0, #107	; 0x6b
   10262:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10264:	b570      	push	{r4, r5, r6, lr}
   10266:	4604      	mov	r4, r0
   10268:	f890 00c1 	ldrb.w	r0, [r0, #193]	; 0xc1
   1026c:	2500      	movs	r5, #0
   1026e:	b138      	cbz	r0, 10280 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x360>
   10270:	f7f7 fbd0 	bl	7a14 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   10274:	f242 7110 	movw	r1, #10000	; 0x2710
   10278:	fbb0 f2f1 	udiv	r2, r0, r1
   1027c:	fb01 0512 	mls	r5, r1, r2, r0
   10280:	4620      	mov	r0, r4
   10282:	f7ff fc48 	bl	fb16 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   10286:	e9d4 213c 	ldrd	r2, r1, [r4, #240]	; 0xf0
   1028a:	4428      	add	r0, r5
   1028c:	34e0      	adds	r4, #224	; 0xe0
   1028e:	2500      	movs	r5, #0
   10290:	1882      	adds	r2, r0, r2
   10292:	eb45 0001 	adc.w	r0, r5, r1
   10296:	e9c4 2004 	strd	r2, r0, [r4, #16]
   1029a:	f804 5b0b 	strb.w	r5, [r4], #11
   1029e:	2001      	movs	r0, #1
   102a0:	f804 0901 	strb.w	r0, [r4], #-1
   102a4:	2002      	movs	r0, #2
   102a6:	f804 09ea 	strb.w	r0, [r4], #-234
   102aa:	4620      	mov	r0, r4
   102ac:	f7ff ffb3 	bl	10216 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
   102b0:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
   102b4:	4620      	mov	r0, r4
   102b6:	f7ff ff07 	bl	100c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
   102ba:	b930      	cbnz	r0, 102ca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3aa>
   102bc:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
   102c0:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
   102c4:	f7ff ffa5 	bl	10212 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
   102c8:	b128      	cbz	r0, 102d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3b6>
   102ca:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
   102ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   102d2:	f7ff bf2a 	b.w	1012a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
   102d6:	f240 61ef 	movw	r1, #1775	; 0x6ef
   102da:	2030      	movs	r0, #48	; 0x30
   102dc:	f7f5 f92a 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   102e0:	b510      	push	{r4, lr}
   102e2:	4604      	mov	r4, r0
   102e4:	2000      	movs	r0, #0
   102e6:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
   102ea:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
   102ee:	f7f3 fa5d 	bl	37ac <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   102f2:	2020      	movs	r0, #32
   102f4:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
   102f8:	bd10      	pop	{r4, pc}
   102fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   102fe:	4604      	mov	r4, r0
   10300:	2500      	movs	r5, #0
   10302:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
   10306:	e9d4 673c 	ldrd	r6, r7, [r4, #240]	; 0xf0
   1030a:	4689      	mov	r9, r1
   1030c:	f880 50d8 	strb.w	r5, [r0, #216]	; 0xd8
   10310:	f04f 0801 	mov.w	r8, #1
   10314:	f880 80d9 	strb.w	r8, [r0, #217]	; 0xd9
   10318:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
   1031c:	4641      	mov	r1, r8
   1031e:	34c0      	adds	r4, #192	; 0xc0
   10320:	f7f6 ff3a 	bl	7198 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   10324:	6860      	ldr	r0, [r4, #4]
   10326:	f8c0 6238 	str.w	r6, [r0, #568]	; 0x238
   1032a:	f8c0 723c 	str.w	r7, [r0, #572]	; 0x23c
   1032e:	6861      	ldr	r1, [r4, #4]
   10330:	7820      	ldrb	r0, [r4, #0]
   10332:	f881 024c 	strb.w	r0, [r1, #588]	; 0x24c
   10336:	6861      	ldr	r1, [r4, #4]
   10338:	f8c1 9250 	str.w	r9, [r1, #592]	; 0x250
   1033c:	6860      	ldr	r0, [r4, #4]
   1033e:	e9c0 6790 	strd	r6, r7, [r0, #576]	; 0x240
   10342:	6864      	ldr	r4, [r4, #4]
   10344:	f884 5204 	strb.w	r5, [r4, #516]	; 0x204
   10348:	2300      	movs	r3, #0
   1034a:	f8a4 5248 	strh.w	r5, [r4, #584]	; 0x248
   1034e:	461a      	mov	r2, r3
   10350:	4619      	mov	r1, r3
   10352:	4620      	mov	r0, r4
   10354:	9500      	str	r5, [sp, #0]
   10356:	f7f8 fcab 	bl	8cb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
   1035a:	b120      	cbz	r0, 10366 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x446>
   1035c:	f240 211d 	movw	r1, #541	; 0x21d
   10360:	2030      	movs	r0, #48	; 0x30
   10362:	f7f5 f8e7 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10366:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
   1036a:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
   1036e:	f884 8204 	strb.w	r8, [r4, #516]	; 0x204
   10372:	f8a4 5216 	strh.w	r5, [r4, #534]	; 0x216
   10376:	f8a4 5214 	strh.w	r5, [r4, #532]	; 0x214
   1037a:	347c      	adds	r4, #124	; 0x7c
   1037c:	f884 519d 	strb.w	r5, [r4, #413]	; 0x19d
   10380:	8820      	ldrh	r0, [r4, #0]
   10382:	1e40      	subs	r0, r0, #1
   10384:	8020      	strh	r0, [r4, #0]
   10386:	f8a4 51ce 	strh.w	r5, [r4, #462]	; 0x1ce
   1038a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1038e:	f7ff becc 	b.w	1012a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
   10392:	b570      	push	{r4, r5, r6, lr}
   10394:	b140      	cbz	r0, 103a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x488>
   10396:	2909      	cmp	r1, #9
   10398:	d248      	bcs.n	1042c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
   1039a:	e8df f001 	tbb	[pc, r1]
   1039e:	1507      	.short	0x1507
   103a0:	47373b3b 	.word	0x47373b3b
   103a4:	00433f29 	.word	0x00433f29
   103a8:	21ca      	movs	r1, #202	; 0xca
   103aa:	e03c      	b.n	10426 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
   103ac:	4604      	mov	r4, r0
   103ae:	f7f7 fc81 	bl	7cb4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   103b2:	b110      	cbz	r0, 103ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
   103b4:	f240 2179 	movw	r1, #633	; 0x279
   103b8:	e035      	b.n	10426 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
   103ba:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   103be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   103c2:	38ff      	subs	r0, #255	; 0xff
   103c4:	f7f3 bc24 	b.w	3c10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   103c8:	4605      	mov	r5, r0
   103ca:	f7ff fbcd 	bl	fb68 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   103ce:	b9a8      	cbnz	r0, 103fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   103d0:	4628      	mov	r0, r5
   103d2:	f7ff fe73 	bl	100bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
   103d6:	4604      	mov	r4, r0
   103d8:	f8d5 00e4 	ldr.w	r0, [r5, #228]	; 0xe4
   103dc:	42a0      	cmp	r0, r4
   103de:	d20b      	bcs.n	103f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d8>
   103e0:	1a20      	subs	r0, r4, r0
   103e2:	2103      	movs	r1, #3
   103e4:	f7f2 fb20 	bl	2a28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   103e8:	b130      	cbz	r0, 103f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d8>
   103ea:	4628      	mov	r0, r5
   103ec:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
   103f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   103f4:	f7ff bb4b 	b.w	fa8e <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   103f8:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
   103fc:	4628      	mov	r0, r5
   103fe:	f7f7 fc75 	bl	7cec <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   10402:	2800      	cmp	r0, #0
   10404:	d014      	beq.n	10430 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x510>
   10406:	f44f 712b 	mov.w	r1, #684	; 0x2ac
   1040a:	e00c      	b.n	10426 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
   1040c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10410:	f7fc b8a6 	b.w	c560 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   10414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10418:	f7ff bdeb 	b.w	fff2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
   1041c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10420:	f7ff be43 	b.w	100aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18a>
   10424:	21ea      	movs	r1, #234	; 0xea
   10426:	2030      	movs	r0, #48	; 0x30
   10428:	f7f5 f884 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1042c:	21ee      	movs	r1, #238	; 0xee
   1042e:	e7fa      	b.n	10426 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
   10430:	bd70      	pop	{r4, r5, r6, pc}
   10432:	b510      	push	{r4, lr}
   10434:	0004      	movs	r4, r0
   10436:	d008      	beq.n	1044a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52a>
   10438:	2909      	cmp	r1, #9
   1043a:	d25e      	bcs.n	104fa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5da>
   1043c:	e8df f001 	tbb	[pc, r1]
   10440:	40403807 	.word	0x40403807
   10444:	4c455d3c 	.word	0x4c455d3c
   10448:	0059      	.short	0x0059
   1044a:	2193      	movs	r1, #147	; 0x93
   1044c:	e052      	b.n	104f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
   1044e:	2100      	movs	r1, #0
   10450:	f8c4 1254 	str.w	r1, [r4, #596]	; 0x254
   10454:	f894 1218 	ldrb.w	r1, [r4, #536]	; 0x218
   10458:	4620      	mov	r0, r4
   1045a:	b189      	cbz	r1, 10480 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x560>
   1045c:	f8b0 2216 	ldrh.w	r2, [r0, #534]	; 0x216
   10460:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
   10464:	428a      	cmp	r2, r1
   10466:	d106      	bne.n	10476 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x556>
   10468:	f8b0 21cc 	ldrh.w	r2, [r0, #460]	; 0x1cc
   1046c:	1a51      	subs	r1, r2, r1
   1046e:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
   10472:	4611      	mov	r1, r2
   10474:	e00d      	b.n	10492 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x572>
   10476:	1a51      	subs	r1, r2, r1
   10478:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
   1047c:	b291      	uxth	r1, r2
   1047e:	e008      	b.n	10492 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x572>
   10480:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
   10484:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
   10488:	1a89      	subs	r1, r1, r2
   1048a:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
   1048e:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
   10492:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
   10496:	e9d0 128c 	ldrd	r1, r2, [r0, #560]	; 0x230
   1049a:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
   1049e:	f8c0 223c 	str.w	r2, [r0, #572]	; 0x23c
   104a2:	f7f8 feed 	bl	9280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
   104a6:	4620      	mov	r0, r4
   104a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104ac:	f7f8 be0a 	b.w	90c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
   104b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104b4:	f000 b925 	b.w	10702 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
   104b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104bc:	f7fc b850 	b.w	c560 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   104c0:	4620      	mov	r0, r4
   104c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104c6:	f000 b827 	b.w	10518 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5f8>
   104ca:	2001      	movs	r0, #1
   104cc:	f7f2 fa9c 	bl	2a08 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   104d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104d4:	f7fe bbeb 	b.w	ecae <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
   104d8:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   104dc:	2804      	cmp	r0, #4
   104de:	d001      	beq.n	104e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5c4>
   104e0:	21b5      	movs	r1, #181	; 0xb5
   104e2:	e007      	b.n	104f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
   104e4:	4620      	mov	r0, r4
   104e6:	f7ff fefb 	bl	102e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
   104ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104ee:	f7f7 b91b 	b.w	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   104f2:	21be      	movs	r1, #190	; 0xbe
   104f4:	2030      	movs	r0, #48	; 0x30
   104f6:	f7f5 f81d 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104fa:	21c2      	movs	r1, #194	; 0xc2
   104fc:	e7fa      	b.n	104f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
   104fe:	b510      	push	{r4, lr}
   10500:	f7fb ff50 	bl	c3a4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10504:	f64d 7141 	movw	r1, #57153	; 0xdf41
   10508:	4408      	add	r0, r1
   1050a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1050e:	fbb0 f0f1 	udiv	r0, r0, r1
   10512:	f200 1079 	addw	r0, r0, #377	; 0x179
   10516:	bd10      	pop	{r4, pc}
   10518:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1051a:	4604      	mov	r4, r0
   1051c:	f7f3 fc32 	bl	3d84 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   10520:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
   10524:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
   10528:	1ac0      	subs	r0, r0, r3
   1052a:	eb61 0102 	sbc.w	r1, r1, r2
   1052e:	2200      	movs	r2, #0
   10530:	4613      	mov	r3, r2
   10532:	1a12      	subs	r2, r2, r0
   10534:	418b      	sbcs	r3, r1
   10536:	db02      	blt.n	1053e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x61e>
   10538:	f240 6111 	movw	r1, #1553	; 0x611
   1053c:	e052      	b.n	105e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6c4>
   1053e:	1c42      	adds	r2, r0, #1
   10540:	f171 0100 	sbcs.w	r1, r1, #0
   10544:	db02      	blt.n	1054c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x62c>
   10546:	f240 6112 	movw	r1, #1554	; 0x612
   1054a:	e04b      	b.n	105e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6c4>
   1054c:	6922      	ldr	r2, [r4, #16]
   1054e:	2100      	movs	r1, #0
   10550:	b10a      	cbz	r2, 10556 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
   10552:	fbb0 f1f2 	udiv	r1, r0, r2
   10556:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   1055a:	280d      	cmp	r0, #13
   1055c:	d00c      	beq.n	10578 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x658>
   1055e:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
   10562:	f8b4 2216 	ldrh.w	r2, [r4, #534]	; 0x216
   10566:	1843      	adds	r3, r0, r1
   10568:	1ad3      	subs	r3, r2, r3
   1056a:	b21b      	sxth	r3, r3
   1056c:	2b00      	cmp	r3, #0
   1056e:	db06      	blt.n	1057e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65e>
   10570:	1c52      	adds	r2, r2, #1
   10572:	f8a4 2216 	strh.w	r2, [r4, #534]	; 0x216
   10576:	e006      	b.n	10586 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x666>
   10578:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
   1057c:	e012      	b.n	105a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x684>
   1057e:	1c49      	adds	r1, r1, #1
   10580:	4408      	add	r0, r1
   10582:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   10586:	f894 0219 	ldrb.w	r0, [r4, #537]	; 0x219
   1058a:	f88d 0000 	strb.w	r0, [sp]
   1058e:	9800      	ldr	r0, [sp, #0]
   10590:	9000      	str	r0, [sp, #0]
   10592:	f89d 0000 	ldrb.w	r0, [sp]
   10596:	b940      	cbnz	r0, 105aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x68a>
   10598:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
   1059c:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
   105a0:	4288      	cmp	r0, r1
   105a2:	d102      	bne.n	105aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x68a>
   105a4:	1c40      	adds	r0, r0, #1
   105a6:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   105aa:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
   105ae:	1c40      	adds	r0, r0, #1
   105b0:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
   105b4:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
   105b8:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
   105bc:	1a40      	subs	r0, r0, r1
   105be:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   105c2:	1e40      	subs	r0, r0, #1
   105c4:	4408      	add	r0, r1
   105c6:	b285      	uxth	r5, r0
   105c8:	e026      	b.n	10618 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f8>
   105ca:	a801      	add	r0, sp, #4
   105cc:	2300      	movs	r3, #0
   105ce:	9000      	str	r0, [sp, #0]
   105d0:	461a      	mov	r2, r3
   105d2:	4620      	mov	r0, r4
   105d4:	f7f8 fb6c 	bl	8cb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
   105d8:	2800      	cmp	r0, #0
   105da:	d03b      	beq.n	10654 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x734>
   105dc:	2801      	cmp	r0, #1
   105de:	d004      	beq.n	105ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ca>
   105e0:	f240 6151 	movw	r1, #1617	; 0x651
   105e4:	2030      	movs	r0, #48	; 0x30
   105e6:	f7f4 ffa5 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105ea:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
   105ee:	f8b4 11c8 	ldrh.w	r1, [r4, #456]	; 0x1c8
   105f2:	1a42      	subs	r2, r0, r1
   105f4:	b212      	sxth	r2, r2
   105f6:	2a00      	cmp	r2, #0
   105f8:	da09      	bge.n	1060e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
   105fa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   105fe:	4402      	add	r2, r0
   10600:	1aaa      	subs	r2, r5, r2
   10602:	b212      	sxth	r2, r2
   10604:	2a00      	cmp	r2, #0
   10606:	da02      	bge.n	1060e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
   10608:	f8a4 1216 	strh.w	r1, [r4, #534]	; 0x216
   1060c:	e004      	b.n	10618 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f8>
   1060e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   10612:	4408      	add	r0, r1
   10614:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   10618:	f8b4 1216 	ldrh.w	r1, [r4, #534]	; 0x216
   1061c:	1a68      	subs	r0, r5, r1
   1061e:	b200      	sxth	r0, r0
   10620:	2800      	cmp	r0, #0
   10622:	dad2      	bge.n	105ca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
   10624:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
   10628:	b190      	cbz	r0, 10650 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x730>
   1062a:	2008      	movs	r0, #8
   1062c:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
   10630:	2208      	movs	r2, #8
   10632:	4621      	mov	r1, r4
   10634:	f104 009d 	add.w	r0, r4, #157	; 0x9d
   10638:	f7f6 ffa4 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1063c:	4620      	mov	r0, r4
   1063e:	f000 f862 	bl	10706 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   10642:	4620      	mov	r0, r4
   10644:	f7ff fe4c 	bl	102e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
   10648:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
   1064c:	f7f7 b86c 	b.w	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   10650:	203e      	movs	r0, #62	; 0x3e
   10652:	e7eb      	b.n	1062c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x70c>
   10654:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10656:	01f4      	.short	0x01f4
   10658:	009600fa 	.word	0x009600fa
   1065c:	004b0064 	.word	0x004b0064
   10660:	001e0032 	.word	0x001e0032
   10664:	000a0014 	.word	0x000a0014
   10668:	00020005 	.word	0x00020005
   1066c:	0001      	.short	0x0001
   1066e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10672:	f001 0307 	and.w	r3, r1, #7
   10676:	7802      	ldrb	r2, [r0, #0]
   10678:	2101      	movs	r1, #1
   1067a:	4099      	lsls	r1, r3
   1067c:	438a      	bics	r2, r1
   1067e:	7002      	strb	r2, [r0, #0]
   10680:	4770      	bx	lr
   10682:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10686:	f001 0307 	and.w	r3, r1, #7
   1068a:	7802      	ldrb	r2, [r0, #0]
   1068c:	2101      	movs	r1, #1
   1068e:	4099      	lsls	r1, r3
   10690:	430a      	orrs	r2, r1
   10692:	7002      	strb	r2, [r0, #0]
   10694:	4770      	bx	lr

00010696 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
   10696:	b510      	push	{r4, lr}
   10698:	4604      	mov	r4, r0
   1069a:	f8d0 027c 	ldr.w	r0, [r0, #636]	; 0x27c
   1069e:	6921      	ldr	r1, [r4, #16]
   106a0:	4288      	cmp	r0, r1
   106a2:	d109      	bne.n	106b8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   106a4:	f8b4 1280 	ldrh.w	r1, [r4, #640]	; 0x280
   106a8:	8b22      	ldrh	r2, [r4, #24]
   106aa:	4291      	cmp	r1, r2
   106ac:	d104      	bne.n	106b8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   106ae:	f8b4 1282 	ldrh.w	r1, [r4, #642]	; 0x282
   106b2:	8b62      	ldrh	r2, [r4, #26]
   106b4:	4291      	cmp	r1, r2
   106b6:	d016      	beq.n	106e6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x50>
   106b8:	8821      	ldrh	r1, [r4, #0]
   106ba:	f8a4 11ae 	strh.w	r1, [r4, #430]	; 0x1ae
   106be:	f7fe fb6e 	bl	ed9e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   106c2:	f8a4 01b0 	strh.w	r0, [r4, #432]	; 0x1b0
   106c6:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
   106ca:	f8a4 01b2 	strh.w	r0, [r4, #434]	; 0x1b2
   106ce:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
   106d2:	f8a4 01b4 	strh.w	r0, [r4, #436]	; 0x1b4
   106d6:	2206      	movs	r2, #6
   106d8:	4621      	mov	r1, r4
   106da:	f504 70d1 	add.w	r0, r4, #418	; 0x1a2
   106de:	f7f6 ff51 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   106e2:	f7f7 f821 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   106e6:	2102      	movs	r1, #2
   106e8:	4620      	mov	r0, r4
   106ea:	f7f6 fd55 	bl	7198 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   106ee:	2000      	movs	r0, #0
   106f0:	f804 0f86 	strb.w	r0, [r4, #134]!
   106f4:	2003      	movs	r0, #3
   106f6:	7120      	strb	r0, [r4, #4]
   106f8:	bd10      	pop	{r4, pc}

000106fa <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   106fa:	f7f5 bacf 	b.w	5c9c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

000106fe <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
   106fe:	2000      	movs	r0, #0
   10700:	4770      	bx	lr

00010702 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
   10702:	f7f5 bf8b 	b.w	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

00010706 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   10706:	2100      	movs	r1, #0
   10708:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   1070c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
   10710:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
   10714:	f890 11d3 	ldrb.w	r1, [r0, #467]	; 0x1d3
   10718:	b109      	cbz	r1, 1071e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
   1071a:	2102      	movs	r1, #2
   1071c:	e000      	b.n	10720 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   1071e:	2103      	movs	r1, #3
   10720:	f7f8 b98c 	b.w	8a3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   10724:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   10728:	28fe      	cmp	r0, #254	; 0xfe
   1072a:	d001      	beq.n	10730 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
   1072c:	2001      	movs	r0, #1
   1072e:	4770      	bx	lr
   10730:	2000      	movs	r0, #0
   10732:	4770      	bx	lr
   10734:	b510      	push	{r4, lr}
   10736:	2801      	cmp	r0, #1
   10738:	d006      	beq.n	10748 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   1073a:	2802      	cmp	r0, #2
   1073c:	d004      	beq.n	10748 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   1073e:	f240 21a9 	movw	r1, #681	; 0x2a9
   10742:	2006      	movs	r0, #6
   10744:	f7f4 fef6 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10748:	bd10      	pop	{r4, pc}
   1074a:	2801      	cmp	r0, #1
   1074c:	d002      	beq.n	10754 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
   1074e:	2802      	cmp	r0, #2
   10750:	d105      	bne.n	1075e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   10752:	e002      	b.n	1075a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
   10754:	2901      	cmp	r1, #1
   10756:	d004      	beq.n	10762 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   10758:	e001      	b.n	1075e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   1075a:	2902      	cmp	r1, #2
   1075c:	d001      	beq.n	10762 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   1075e:	2000      	movs	r0, #0
   10760:	4770      	bx	lr
   10762:	2001      	movs	r0, #1
   10764:	4770      	bx	lr
   10766:	1a40      	subs	r0, r0, r1
   10768:	b200      	sxth	r0, r0
   1076a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   1076e:	4288      	cmp	r0, r1
   10770:	dc01      	bgt.n	10776 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
   10772:	2800      	cmp	r0, #0
   10774:	dc01      	bgt.n	1077a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
   10776:	2001      	movs	r0, #1
   10778:	4770      	bx	lr
   1077a:	2000      	movs	r0, #0
   1077c:	4770      	bx	lr
   1077e:	4602      	mov	r2, r0
   10780:	2000      	movs	r0, #0
   10782:	2a16      	cmp	r2, #22
   10784:	d102      	bne.n	1078c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
   10786:	4608      	mov	r0, r1
   10788:	f7f9 bd52 	b.w	a230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
   1078c:	4770      	bx	lr
   1078e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10792:	f001 0107 	and.w	r1, r1, #7
   10796:	7800      	ldrb	r0, [r0, #0]
   10798:	40c8      	lsrs	r0, r1
   1079a:	f000 0001 	and.w	r0, r0, #1
   1079e:	4770      	bx	lr
   107a0:	b118      	cbz	r0, 107aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
   107a2:	2802      	cmp	r0, #2
   107a4:	d001      	beq.n	107aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
   107a6:	2001      	movs	r0, #1
   107a8:	4770      	bx	lr
   107aa:	2000      	movs	r0, #0
   107ac:	4770      	bx	lr

000107ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   107ae:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   107b0:	7881      	ldrb	r1, [r0, #2]
   107b2:	4604      	mov	r4, r0
   107b4:	291a      	cmp	r1, #26
   107b6:	d025      	beq.n	10804 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   107b8:	dc0e      	bgt.n	107d8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
   107ba:	2916      	cmp	r1, #22
   107bc:	d22c      	bcs.n	10818 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   107be:	e8df f001 	tbb	[pc, r1]
   107c2:	2b2b      	.short	0x2b2b
   107c4:	212b2b2b 	.word	0x212b2b2b
   107c8:	2b2b2b2b 	.word	0x2b2b2b2b
   107cc:	2b2b2b2b 	.word	0x2b2b2b2b
   107d0:	2b2b2b2b 	.word	0x2b2b2b2b
   107d4:	2121212b 	.word	0x2121212b
   107d8:	292a      	cmp	r1, #42	; 0x2a
   107da:	d01d      	beq.n	10818 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   107dc:	dc0b      	bgt.n	107f6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
   107de:	f1a1 011e 	sub.w	r1, r1, #30
   107e2:	290c      	cmp	r1, #12
   107e4:	d218      	bcs.n	10818 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   107e6:	e8df f001 	tbb	[pc, r1]
   107ea:	1717      	.short	0x1717
   107ec:	17171717 	.word	0x17171717
   107f0:	17171717 	.word	0x17171717
   107f4:	0d17      	.short	0x0d17
   107f6:	393a      	subs	r1, #58	; 0x3a
   107f8:	2904      	cmp	r1, #4
   107fa:	d20d      	bcs.n	10818 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   107fc:	e8df f001 	tbb	[pc, r1]
   10800:	020c020c 	.word	0x020c020c
   10804:	8820      	ldrh	r0, [r4, #0]
   10806:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   1080a:	d205      	bcs.n	10818 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   1080c:	4669      	mov	r1, sp
   1080e:	f7fe fab5 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10812:	b118      	cbz	r0, 1081c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
   10814:	2002      	movs	r0, #2
   10816:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10818:	2012      	movs	r0, #18
   1081a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1081c:	9801      	ldr	r0, [sp, #4]
   1081e:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   10822:	f88d 1008 	strb.w	r1, [sp, #8]
   10826:	9902      	ldr	r1, [sp, #8]
   10828:	9102      	str	r1, [sp, #8]
   1082a:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1082e:	f500 708c 	add.w	r0, r0, #280	; 0x118
   10832:	b109      	cbz	r1, 10838 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   10834:	200c      	movs	r0, #12
   10836:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10838:	21ff      	movs	r1, #255	; 0xff
   1083a:	7001      	strb	r1, [r0, #0]
   1083c:	78a1      	ldrb	r1, [r4, #2]
   1083e:	7041      	strb	r1, [r0, #1]
   10840:	4668      	mov	r0, sp
   10842:	f7fe fe5a 	bl	f4fa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10846:	2000      	movs	r0, #0
   10848:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001084a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   1084a:	b510      	push	{r4, lr}
   1084c:	4604      	mov	r4, r0
   1084e:	f000 fe01 	bl	11454 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   10852:	b108      	cbz	r0, 10858 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   10854:	200c      	movs	r0, #12
   10856:	bd10      	pop	{r4, pc}
   10858:	7820      	ldrb	r0, [r4, #0]
   1085a:	b118      	cbz	r0, 10864 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   1085c:	2801      	cmp	r0, #1
   1085e:	d001      	beq.n	10864 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   10860:	2012      	movs	r0, #18
   10862:	bd10      	pop	{r4, pc}
   10864:	f7ff ff9c 	bl	107a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   10868:	1c61      	adds	r1, r4, #1
   1086a:	f7f6 fb63 	bl	6f34 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   1086e:	b108      	cbz	r0, 10874 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   10870:	2000      	movs	r0, #0
   10872:	bd10      	pop	{r4, pc}
   10874:	2007      	movs	r0, #7
   10876:	bd10      	pop	{r4, pc}

00010878 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   10878:	b510      	push	{r4, lr}
   1087a:	f000 fdeb 	bl	11454 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   1087e:	b108      	cbz	r0, 10884 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   10880:	200c      	movs	r0, #12
   10882:	bd10      	pop	{r4, pc}
   10884:	f7f6 fb7e 	bl	6f84 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   10888:	2000      	movs	r0, #0
   1088a:	bd10      	pop	{r4, pc}

0001088c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   1088c:	b510      	push	{r4, lr}
   1088e:	460b      	mov	r3, r1
   10890:	2201      	movs	r2, #1
   10892:	f100 0110 	add.w	r1, r0, #16
   10896:	f7fe fa53 	bl	ed40 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   1089a:	2000      	movs	r0, #0
   1089c:	bd10      	pop	{r4, pc}

0001089e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   1089e:	b510      	push	{r4, lr}
   108a0:	8800      	ldrh	r0, [r0, #0]
   108a2:	2100      	movs	r1, #0
   108a4:	f7fd ffdc 	bl	e860 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   108a8:	b118      	cbz	r0, 108b2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   108aa:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
   108ae:	b111      	cbz	r1, 108b6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   108b0:	e007      	b.n	108c2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   108b2:	2002      	movs	r0, #2
   108b4:	bd10      	pop	{r4, pc}
   108b6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   108ba:	2914      	cmp	r1, #20
   108bc:	d003      	beq.n	108c6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   108be:	2915      	cmp	r1, #21
   108c0:	d001      	beq.n	108c6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   108c2:	200c      	movs	r0, #12
   108c4:	bd10      	pop	{r4, pc}
   108c6:	2102      	movs	r1, #2
   108c8:	f880 1258 	strb.w	r1, [r0, #600]	; 0x258
   108cc:	2000      	movs	r0, #0
   108ce:	bd10      	pop	{r4, pc}

000108d0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   108d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108d2:	4605      	mov	r5, r0
   108d4:	8800      	ldrh	r0, [r0, #0]
   108d6:	2100      	movs	r1, #0
   108d8:	f7fd ffc2 	bl	e860 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   108dc:	0004      	movs	r4, r0
   108de:	d003      	beq.n	108e8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   108e0:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
   108e4:	b110      	cbz	r0, 108ec <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   108e6:	e011      	b.n	1090c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   108e8:	2002      	movs	r0, #2
   108ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108ec:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   108f0:	2814      	cmp	r0, #20
   108f2:	d001      	beq.n	108f8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   108f4:	2815      	cmp	r0, #21
   108f6:	d109      	bne.n	1090c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   108f8:	f894 028c 	ldrb.w	r0, [r4, #652]	; 0x28c
   108fc:	f88d 0000 	strb.w	r0, [sp]
   10900:	9800      	ldr	r0, [sp, #0]
   10902:	9000      	str	r0, [sp, #0]
   10904:	f89d 0000 	ldrb.w	r0, [sp]
   10908:	2601      	movs	r6, #1
   1090a:	b108      	cbz	r0, 10910 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   1090c:	200c      	movs	r0, #12
   1090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10910:	2210      	movs	r2, #16
   10912:	1ca9      	adds	r1, r5, #2
   10914:	f204 2059 	addw	r0, r4, #601	; 0x259
   10918:	f7fc ff7e 	bl	d818 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1091c:	f884 6258 	strb.w	r6, [r4, #600]	; 0x258
   10920:	2000      	movs	r0, #0
   10922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010924 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   10924:	b510      	push	{r4, lr}
   10926:	2108      	movs	r1, #8
   10928:	f7f4 feb0 	bl	568c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1092c:	2000      	movs	r0, #0
   1092e:	bd10      	pop	{r4, pc}

00010930 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   10930:	b510      	push	{r4, lr}
   10932:	4604      	mov	r4, r0
   10934:	f7fa fe5a 	bl	b5ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10938:	f7ff f920 	bl	fb7c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   1093c:	7020      	strb	r0, [r4, #0]
   1093e:	2000      	movs	r0, #0
   10940:	bd10      	pop	{r4, pc}

00010942 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   10942:	21fb      	movs	r1, #251	; 0xfb
   10944:	8001      	strh	r1, [r0, #0]
   10946:	f640 0248 	movw	r2, #2120	; 0x848
   1094a:	8042      	strh	r2, [r0, #2]
   1094c:	8081      	strh	r1, [r0, #4]
   1094e:	80c2      	strh	r2, [r0, #6]
   10950:	2000      	movs	r0, #0
   10952:	4770      	bx	lr

00010954 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   10954:	b51c      	push	{r2, r3, r4, lr}
   10956:	8800      	ldrh	r0, [r0, #0]
   10958:	4669      	mov	r1, sp
   1095a:	f7fe fa0f 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1095e:	2800      	cmp	r0, #0
   10960:	d10d      	bne.n	1097e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
   10962:	f89d 0000 	ldrb.w	r0, [sp]
   10966:	9c01      	ldr	r4, [sp, #4]
   10968:	2801      	cmp	r0, #1
   1096a:	f504 748c 	add.w	r4, r4, #280	; 0x118
   1096e:	d103      	bne.n	10978 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
   10970:	9801      	ldr	r0, [sp, #4]
   10972:	f000 fcf0 	bl	11356 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   10976:	b118      	cbz	r0, 10980 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
   10978:	7ce0      	ldrb	r0, [r4, #19]
   1097a:	b118      	cbz	r0, 10984 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
   1097c:	203a      	movs	r0, #58	; 0x3a
   1097e:	bd1c      	pop	{r2, r3, r4, pc}
   10980:	2002      	movs	r0, #2
   10982:	bd1c      	pop	{r2, r3, r4, pc}
   10984:	2001      	movs	r0, #1
   10986:	74e0      	strb	r0, [r4, #19]
   10988:	2000      	movs	r0, #0
   1098a:	bd1c      	pop	{r2, r3, r4, pc}

0001098c <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   1098c:	b510      	push	{r4, lr}
   1098e:	4604      	mov	r4, r0
   10990:	20d8      	movs	r0, #216	; 0xd8
   10992:	7020      	strb	r0, [r4, #0]
   10994:	f000 fcdc 	bl	11350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   10998:	7060      	strb	r0, [r4, #1]
   1099a:	2000      	movs	r0, #0
   1099c:	bd10      	pop	{r4, pc}

0001099e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   1099e:	2108      	movs	r1, #8
   109a0:	7001      	strb	r1, [r0, #0]
   109a2:	2000      	movs	r0, #0
   109a4:	4770      	bx	lr

000109a6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   109a6:	b510      	push	{r4, lr}
   109a8:	4604      	mov	r4, r0
   109aa:	f000 fd53 	bl	11454 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   109ae:	b108      	cbz	r0, 109b4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   109b0:	200c      	movs	r0, #12
   109b2:	bd10      	pop	{r4, pc}
   109b4:	7820      	ldrb	r0, [r4, #0]
   109b6:	b108      	cbz	r0, 109bc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   109b8:	2801      	cmp	r0, #1
   109ba:	d107      	bne.n	109cc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   109bc:	f7ff fef0 	bl	107a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   109c0:	1c61      	adds	r1, r4, #1
   109c2:	f7fe f9b2 	bl	ed2a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   109c6:	b108      	cbz	r0, 109cc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   109c8:	2000      	movs	r0, #0
   109ca:	bd10      	pop	{r4, pc}
   109cc:	2012      	movs	r0, #18
   109ce:	bd10      	pop	{r4, pc}

000109d0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   109d0:	b51c      	push	{r2, r3, r4, lr}
   109d2:	4604      	mov	r4, r0
   109d4:	f7fa fe0a 	bl	b5ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   109d8:	2000      	movs	r0, #0
   109da:	f88d 0002 	strb.w	r0, [sp, #2]
   109de:	2103      	movs	r1, #3
   109e0:	f88d 1001 	strb.w	r1, [sp, #1]
   109e4:	f814 1b01 	ldrb.w	r1, [r4], #1
   109e8:	f88d 1003 	strb.w	r1, [sp, #3]
   109ec:	f88d 0000 	strb.w	r0, [sp]
   109f0:	4668      	mov	r0, sp
   109f2:	9401      	str	r4, [sp, #4]
   109f4:	f000 f97d 	bl	10cf2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   109f8:	bd1c      	pop	{r2, r3, r4, pc}

000109fa <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   109fa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   109fc:	4605      	mov	r5, r0
   109fe:	f7fa fdf5 	bl	b5ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10a02:	4606      	mov	r6, r0
   10a04:	7828      	ldrb	r0, [r5, #0]
   10a06:	2400      	movs	r4, #0
   10a08:	b160      	cbz	r0, 10a24 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   10a0a:	f88d 4000 	strb.w	r4, [sp]
   10a0e:	2001      	movs	r0, #1
   10a10:	f10d 0101 	add.w	r1, sp, #1
   10a14:	f7f5 fc44 	bl	62a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10a18:	b120      	cbz	r0, 10a24 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   10a1a:	4668      	mov	r0, sp
   10a1c:	f000 f897 	bl	10b4e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   10a20:	2800      	cmp	r0, #0
   10a22:	d112      	bne.n	10a4a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   10a24:	f88d 400c 	strb.w	r4, [sp, #12]
   10a28:	4630      	mov	r0, r6
   10a2a:	f7ff f89d 	bl	fb68 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   10a2e:	b118      	cbz	r0, 10a38 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   10a30:	2080      	movs	r0, #128	; 0x80
   10a32:	f8ad 000d 	strh.w	r0, [sp, #13]
   10a36:	e001      	b.n	10a3c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   10a38:	f8ad 400d 	strh.w	r4, [sp, #13]
   10a3c:	f88d 400f 	strb.w	r4, [sp, #15]
   10a40:	7828      	ldrb	r0, [r5, #0]
   10a42:	2801      	cmp	r0, #1
   10a44:	d003      	beq.n	10a4e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   10a46:	b138      	cbz	r0, 10a58 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   10a48:	2012      	movs	r0, #18
   10a4a:	b004      	add	sp, #16
   10a4c:	bd70      	pop	{r4, r5, r6, pc}
   10a4e:	a903      	add	r1, sp, #12
   10a50:	4630      	mov	r0, r6
   10a52:	f7fa fde9 	bl	b628 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   10a56:	e7f8      	b.n	10a4a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   10a58:	4630      	mov	r0, r6
   10a5a:	f000 fc92 	bl	11382 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10a5e:	e7f4      	b.n	10a4a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00010a60 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   10a60:	b530      	push	{r4, r5, lr}
   10a62:	b08b      	sub	sp, #44	; 0x2c
   10a64:	4604      	mov	r4, r0
   10a66:	f7fa fdc1 	bl	b5ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10a6a:	4602      	mov	r2, r0
   10a6c:	7920      	ldrb	r0, [r4, #4]
   10a6e:	2804      	cmp	r0, #4
   10a70:	d803      	bhi.n	10a7a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   10a72:	8860      	ldrh	r0, [r4, #2]
   10a74:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   10a78:	d902      	bls.n	10a80 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   10a7a:	2012      	movs	r0, #18
   10a7c:	b00b      	add	sp, #44	; 0x2c
   10a7e:	bd30      	pop	{r4, r5, pc}
   10a80:	2500      	movs	r5, #0
   10a82:	f88d 5004 	strb.w	r5, [sp, #4]
   10a86:	7921      	ldrb	r1, [r4, #4]
   10a88:	9500      	str	r5, [sp, #0]
   10a8a:	f89d 0000 	ldrb.w	r0, [sp]
   10a8e:	2905      	cmp	r1, #5
   10a90:	f040 0010 	orr.w	r0, r0, #16
   10a94:	f88d 0000 	strb.w	r0, [sp]
   10a98:	d254      	bcs.n	10b44 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   10a9a:	e8df f001 	tbb	[pc, r1]
   10a9e:	0803      	.short	0x0803
   10aa0:	000b1105 	.word	0x000b1105
   10aa4:	f040 0001 	orr.w	r0, r0, #1
   10aa8:	f040 0002 	orr.w	r0, r0, #2
   10aac:	e006      	b.n	10abc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   10aae:	f040 0009 	orr.w	r0, r0, #9
   10ab2:	e001      	b.n	10ab8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   10ab4:	f040 0001 	orr.w	r0, r0, #1
   10ab8:	f040 0004 	orr.w	r0, r0, #4
   10abc:	f88d 0000 	strb.w	r0, [sp]
   10ac0:	f8bd 0000 	ldrh.w	r0, [sp]
   10ac4:	9000      	str	r0, [sp, #0]
   10ac6:	f8bd 0000 	ldrh.w	r0, [sp]
   10aca:	f8ad 0005 	strh.w	r0, [sp, #5]
   10ace:	8821      	ldrh	r1, [r4, #0]
   10ad0:	f8dd 0006 	ldr.w	r0, [sp, #6]
   10ad4:	f361 201f 	bfi	r0, r1, #8, #24
   10ad8:	f8cd 0006 	str.w	r0, [sp, #6]
   10adc:	8861      	ldrh	r1, [r4, #2]
   10ade:	f8dd 0009 	ldr.w	r0, [sp, #9]
   10ae2:	f361 201f 	bfi	r0, r1, #8, #24
   10ae6:	f8cd 0009 	str.w	r0, [sp, #9]
   10aea:	7b60      	ldrb	r0, [r4, #13]
   10aec:	f88d 000d 	strb.w	r0, [sp, #13]
   10af0:	7960      	ldrb	r0, [r4, #5]
   10af2:	f88d 000e 	strb.w	r0, [sp, #14]
   10af6:	79a0      	ldrb	r0, [r4, #6]
   10af8:	f88d 000f 	strb.w	r0, [sp, #15]
   10afc:	f8d4 0007 	ldr.w	r0, [r4, #7]
   10b00:	9004      	str	r0, [sp, #16]
   10b02:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   10b06:	f8ad 0014 	strh.w	r0, [sp, #20]
   10b0a:	7ba0      	ldrb	r0, [r4, #14]
   10b0c:	f88d 0016 	strb.w	r0, [sp, #22]
   10b10:	207f      	movs	r0, #127	; 0x7f
   10b12:	f88d 0017 	strb.w	r0, [sp, #23]
   10b16:	2001      	movs	r0, #1
   10b18:	f88d 0018 	strb.w	r0, [sp, #24]
   10b1c:	f88d 5019 	strb.w	r5, [sp, #25]
   10b20:	f88d 001a 	strb.w	r0, [sp, #26]
   10b24:	f88d 501b 	strb.w	r5, [sp, #27]
   10b28:	4610      	mov	r0, r2
   10b2a:	f7ff f839 	bl	fba0 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   10b2e:	f88d 001c 	strb.w	r0, [sp, #28]
   10b32:	f88d 501d 	strb.w	r5, [sp, #29]
   10b36:	f88d 501e 	strb.w	r5, [sp, #30]
   10b3a:	a909      	add	r1, sp, #36	; 0x24
   10b3c:	a801      	add	r0, sp, #4
   10b3e:	f7fa fc31 	bl	b3a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   10b42:	e79b      	b.n	10a7c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   10b44:	f241 01cf 	movw	r1, #4303	; 0x10cf
   10b48:	2039      	movs	r0, #57	; 0x39
   10b4a:	f7f4 fcf3 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010b4e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   10b4e:	b570      	push	{r4, r5, r6, lr}
   10b50:	4604      	mov	r4, r0
   10b52:	7800      	ldrb	r0, [r0, #0]
   10b54:	2101      	movs	r1, #1
   10b56:	f7fd fe83 	bl	e860 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10b5a:	0005      	movs	r5, r0
   10b5c:	d007      	beq.n	10b6e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   10b5e:	f7ff f9c5 	bl	feec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10b62:	b160      	cbz	r0, 10b7e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10b64:	4628      	mov	r0, r5
   10b66:	f7ff f805 	bl	fb74 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10b6a:	b110      	cbz	r0, 10b72 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   10b6c:	e005      	b.n	10b7a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   10b6e:	2042      	movs	r0, #66	; 0x42
   10b70:	bd70      	pop	{r4, r5, r6, pc}
   10b72:	4628      	mov	r0, r5
   10b74:	f7fe fff4 	bl	fb60 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10b78:	b108      	cbz	r0, 10b7e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10b7a:	200c      	movs	r0, #12
   10b7c:	bd70      	pop	{r4, r5, r6, pc}
   10b7e:	1c61      	adds	r1, r4, #1
   10b80:	4628      	mov	r0, r5
   10b82:	f7ff f805 	bl	fb90 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   10b86:	2000      	movs	r0, #0
   10b88:	bd70      	pop	{r4, r5, r6, pc}

00010b8a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   10b8a:	b50e      	push	{r1, r2, r3, lr}
   10b8c:	8882      	ldrh	r2, [r0, #4]
   10b8e:	f244 2390 	movw	r3, #17040	; 0x4290
   10b92:	429a      	cmp	r2, r3
   10b94:	d901      	bls.n	10b9a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   10b96:	2012      	movs	r0, #18
   10b98:	bd0e      	pop	{r1, r2, r3, pc}
   10b9a:	f640 0348 	movw	r3, #2120	; 0x848
   10b9e:	429a      	cmp	r2, r3
   10ba0:	d300      	bcc.n	10ba4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   10ba2:	461a      	mov	r2, r3
   10ba4:	8803      	ldrh	r3, [r0, #0]
   10ba6:	f8ad 3000 	strh.w	r3, [sp]
   10baa:	8843      	ldrh	r3, [r0, #2]
   10bac:	f8ad 3002 	strh.w	r3, [sp, #2]
   10bb0:	f8ad 2004 	strh.w	r2, [sp, #4]
   10bb4:	8843      	ldrh	r3, [r0, #2]
   10bb6:	f8ad 3006 	strh.w	r3, [sp, #6]
   10bba:	f8ad 2008 	strh.w	r2, [sp, #8]
   10bbe:	8800      	ldrh	r0, [r0, #0]
   10bc0:	8008      	strh	r0, [r1, #0]
   10bc2:	4668      	mov	r0, sp
   10bc4:	f7fa fe02 	bl	b7cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>
   10bc8:	bd0e      	pop	{r1, r2, r3, pc}

00010bca <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   10bca:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10bcc:	4604      	mov	r4, r0
   10bce:	f10d 0007 	add.w	r0, sp, #7
   10bd2:	9000      	str	r0, [sp, #0]
   10bd4:	7922      	ldrb	r2, [r4, #4]
   10bd6:	78e1      	ldrb	r1, [r4, #3]
   10bd8:	78a0      	ldrb	r0, [r4, #2]
   10bda:	f10d 0306 	add.w	r3, sp, #6
   10bde:	f000 fbfd 	bl	113dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   10be2:	2800      	cmp	r0, #0
   10be4:	d109      	bne.n	10bfa <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   10be6:	8820      	ldrh	r0, [r4, #0]
   10be8:	f8ad 0004 	strh.w	r0, [sp, #4]
   10bec:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   10bf0:	f8ad 0008 	strh.w	r0, [sp, #8]
   10bf4:	a801      	add	r0, sp, #4
   10bf6:	f000 f937 	bl	10e68 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   10bfa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010bfc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   10bfc:	b510      	push	{r4, lr}
   10bfe:	4604      	mov	r4, r0
   10c00:	2001      	movs	r0, #1
   10c02:	f000 fa83 	bl	1110c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   10c06:	b128      	cbz	r0, 10c14 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   10c08:	4621      	mov	r1, r4
   10c0a:	2001      	movs	r0, #1
   10c0c:	f7f5 fb60 	bl	62d0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10c10:	2000      	movs	r0, #0
   10c12:	bd10      	pop	{r4, pc}
   10c14:	200c      	movs	r0, #12
   10c16:	bd10      	pop	{r4, pc}

00010c18 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   10c18:	b51c      	push	{r2, r3, r4, lr}
   10c1a:	4604      	mov	r4, r0
   10c1c:	f7fa fce6 	bl	b5ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10c20:	2000      	movs	r0, #0
   10c22:	f88d 0000 	strb.w	r0, [sp]
   10c26:	f88d 0002 	strb.w	r0, [sp, #2]
   10c2a:	2003      	movs	r0, #3
   10c2c:	f88d 0001 	strb.w	r0, [sp, #1]
   10c30:	f814 0b01 	ldrb.w	r0, [r4], #1
   10c34:	f88d 0003 	strb.w	r0, [sp, #3]
   10c38:	4668      	mov	r0, sp
   10c3a:	9401      	str	r4, [sp, #4]
   10c3c:	f000 f8c2 	bl	10dc4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   10c40:	bd1c      	pop	{r2, r3, r4, pc}

00010c42 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10c42:	b51c      	push	{r2, r3, r4, lr}
   10c44:	8801      	ldrh	r1, [r0, #0]
   10c46:	f8ad 1000 	strh.w	r1, [sp]
   10c4a:	8841      	ldrh	r1, [r0, #2]
   10c4c:	f8ad 1002 	strh.w	r1, [sp, #2]
   10c50:	8801      	ldrh	r1, [r0, #0]
   10c52:	f8ad 1004 	strh.w	r1, [sp, #4]
   10c56:	8840      	ldrh	r0, [r0, #2]
   10c58:	f8ad 0006 	strh.w	r0, [sp, #6]
   10c5c:	4668      	mov	r0, sp
   10c5e:	f7fa fe39 	bl	b8d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ac>
   10c62:	bd1c      	pop	{r2, r3, r4, pc}

00010c64 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10c64:	b510      	push	{r4, lr}
   10c66:	f7f5 fb57 	bl	6318 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   10c6a:	2000      	movs	r0, #0
   10c6c:	bd10      	pop	{r4, pc}

00010c6e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   10c6e:	b510      	push	{r4, lr}
   10c70:	460c      	mov	r4, r1
   10c72:	2100      	movs	r1, #0
   10c74:	f7fd fdf4 	bl	e860 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10c78:	b118      	cbz	r0, 10c82 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   10c7a:	2c02      	cmp	r4, #2
   10c7c:	d903      	bls.n	10c86 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   10c7e:	2012      	movs	r0, #18
   10c80:	bd10      	pop	{r4, pc}
   10c82:	2002      	movs	r0, #2
   10c84:	bd10      	pop	{r4, pc}
   10c86:	f014 0101 	ands.w	r1, r4, #1
   10c8a:	f880 11d5 	strb.w	r1, [r0, #469]	; 0x1d5
   10c8e:	f3c4 0240 	ubfx	r2, r4, #1, #1
   10c92:	f880 21d4 	strb.w	r2, [r0, #468]	; 0x1d4
   10c96:	d004      	beq.n	10ca2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   10c98:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
   10c9c:	b109      	cbz	r1, 10ca2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   10c9e:	f7ff f93f 	bl	ff20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   10ca2:	2000      	movs	r0, #0
   10ca4:	bd10      	pop	{r4, pc}

00010ca6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   10ca6:	b51c      	push	{r2, r3, r4, lr}
   10ca8:	460c      	mov	r4, r1
   10caa:	4669      	mov	r1, sp
   10cac:	f7fe f866 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10cb0:	2800      	cmp	r0, #0
   10cb2:	d105      	bne.n	10cc0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   10cb4:	2100      	movs	r1, #0
   10cb6:	4622      	mov	r2, r4
   10cb8:	9801      	ldr	r0, [sp, #4]
   10cba:	f000 faf3 	bl	112a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
   10cbe:	2000      	movs	r0, #0
   10cc0:	bd1c      	pop	{r2, r3, r4, pc}

00010cc2 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   10cc2:	b510      	push	{r4, lr}
   10cc4:	4604      	mov	r4, r0
   10cc6:	2000      	movs	r0, #0
   10cc8:	f000 fa20 	bl	1110c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   10ccc:	b128      	cbz	r0, 10cda <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   10cce:	4621      	mov	r1, r4
   10cd0:	2000      	movs	r0, #0
   10cd2:	f7f5 fafd 	bl	62d0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10cd6:	2000      	movs	r0, #0
   10cd8:	bd10      	pop	{r4, pc}
   10cda:	200c      	movs	r0, #12
   10cdc:	bd10      	pop	{r4, pc}

00010cde <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   10cde:	b510      	push	{r4, lr}
   10ce0:	7800      	ldrb	r0, [r0, #0]
   10ce2:	b100      	cbz	r0, 10ce6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   10ce4:	2001      	movs	r0, #1
   10ce6:	f7f7 fe69 	bl	89bc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   10cea:	2000      	movs	r0, #0
   10cec:	bd10      	pop	{r4, pc}

00010cee <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   10cee:	f7fa bd6d 	b.w	b7cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>

00010cf2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   10cf2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10cf6:	4606      	mov	r6, r0
   10cf8:	7845      	ldrb	r5, [r0, #1]
   10cfa:	7800      	ldrb	r0, [r0, #0]
   10cfc:	2101      	movs	r1, #1
   10cfe:	f7fd fdaf 	bl	e860 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10d02:	0004      	movs	r4, r0
   10d04:	d01e      	beq.n	10d44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   10d06:	f7fe feba 	bl	fa7e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   10d0a:	78f1      	ldrb	r1, [r6, #3]
   10d0c:	4281      	cmp	r1, r0
   10d0e:	d800      	bhi.n	10d12 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   10d10:	4608      	mov	r0, r1
   10d12:	4607      	mov	r7, r0
   10d14:	2d04      	cmp	r5, #4
   10d16:	d018      	beq.n	10d4a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   10d18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10d1a:	f7fd fefe 	bl	eb1a <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10d1e:	4438      	add	r0, r7
   10d20:	b281      	uxth	r1, r0
   10d22:	4620      	mov	r0, r4
   10d24:	2201      	movs	r2, #1
   10d26:	f000 fa03 	bl	11130 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   10d2a:	2800      	cmp	r0, #0
   10d2c:	d10b      	bne.n	10d46 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10d2e:	2d03      	cmp	r5, #3
   10d30:	d000      	beq.n	10d34 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10d32:	b1df      	cbz	r7, 10d6c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d34:	4620      	mov	r0, r4
   10d36:	f7fe ff1b 	bl	fb70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10d3a:	7871      	ldrb	r1, [r6, #1]
   10d3c:	2903      	cmp	r1, #3
   10d3e:	d010      	beq.n	10d62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10d40:	b9a0      	cbnz	r0, 10d6c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d42:	e004      	b.n	10d4e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   10d44:	2042      	movs	r0, #66	; 0x42
   10d46:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10d4a:	b97f      	cbnz	r7, 10d6c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d4c:	e7f2      	b.n	10d34 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10d4e:	2904      	cmp	r1, #4
   10d50:	d107      	bne.n	10d62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10d52:	4620      	mov	r0, r4
   10d54:	f7ff f8ca 	bl	feec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10d58:	b140      	cbz	r0, 10d6c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10d5c:	f7fd feac 	bl	eab8 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   10d60:	b120      	cbz	r0, 10d6c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d62:	2d01      	cmp	r5, #1
   10d64:	d004      	beq.n	10d70 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10d66:	2d03      	cmp	r5, #3
   10d68:	d002      	beq.n	10d70 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10d6a:	e00e      	b.n	10d8a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   10d6c:	2012      	movs	r0, #18
   10d6e:	e7ea      	b.n	10d46 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10d70:	4620      	mov	r0, r4
   10d72:	f7fe fefd 	bl	fb70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10d76:	b108      	cbz	r0, 10d7c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   10d78:	2200      	movs	r2, #0
   10d7a:	e002      	b.n	10d82 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10d7c:	2d01      	cmp	r5, #1
   10d7e:	d013      	beq.n	10da8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   10d80:	2201      	movs	r2, #1
   10d82:	4668      	mov	r0, sp
   10d84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10d86:	f7fd fe2f 	bl	e9e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10d8a:	2d04      	cmp	r5, #4
   10d8c:	d018      	beq.n	10dc0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10d8e:	6872      	ldr	r2, [r6, #4]
   10d90:	463b      	mov	r3, r7
   10d92:	2101      	movs	r1, #1
   10d94:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10d96:	f7fd fe5b 	bl	ea50 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10d9a:	b138      	cbz	r0, 10dac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   10d9c:	7870      	ldrb	r0, [r6, #1]
   10d9e:	2802      	cmp	r0, #2
   10da0:	d006      	beq.n	10db0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10da2:	2803      	cmp	r0, #3
   10da4:	d004      	beq.n	10db0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10da6:	e00b      	b.n	10dc0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10da8:	2202      	movs	r2, #2
   10daa:	e7ea      	b.n	10d82 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10dac:	2007      	movs	r0, #7
   10dae:	e7ca      	b.n	10d46 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10db0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10db2:	f7fd feb2 	bl	eb1a <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10db6:	4602      	mov	r2, r0
   10db8:	2101      	movs	r1, #1
   10dba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10dbc:	f7fd fe8a 	bl	ead4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10dc0:	2000      	movs	r0, #0
   10dc2:	e7c0      	b.n	10d46 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00010dc4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   10dc4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10dc8:	4607      	mov	r7, r0
   10dca:	7845      	ldrb	r5, [r0, #1]
   10dcc:	78c6      	ldrb	r6, [r0, #3]
   10dce:	7800      	ldrb	r0, [r0, #0]
   10dd0:	2101      	movs	r1, #1
   10dd2:	f7fd fd45 	bl	e860 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10dd6:	0004      	movs	r4, r0
   10dd8:	d003      	beq.n	10de2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   10dda:	f7fe fecb 	bl	fb74 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10dde:	b118      	cbz	r0, 10de8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10de0:	e003      	b.n	10dea <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   10de2:	2042      	movs	r0, #66	; 0x42
   10de4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10de8:	2600      	movs	r6, #0
   10dea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10dec:	f7fd fe99 	bl	eb22 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10df0:	4430      	add	r0, r6
   10df2:	b281      	uxth	r1, r0
   10df4:	4688      	mov	r8, r1
   10df6:	4620      	mov	r0, r4
   10df8:	2201      	movs	r2, #1
   10dfa:	f000 f999 	bl	11130 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   10dfe:	2800      	cmp	r0, #0
   10e00:	d1f0      	bne.n	10de4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10e02:	2d04      	cmp	r5, #4
   10e04:	d008      	beq.n	10e18 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10e06:	2d03      	cmp	r5, #3
   10e08:	d00a      	beq.n	10e20 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   10e0a:	b12e      	cbz	r6, 10e18 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10e0c:	4620      	mov	r0, r4
   10e0e:	f7ff f86d 	bl	feec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10e12:	b118      	cbz	r0, 10e1c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   10e14:	200c      	movs	r0, #12
   10e16:	e7e5      	b.n	10de4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10e18:	2012      	movs	r0, #18
   10e1a:	e7e3      	b.n	10de4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10e1c:	2d01      	cmp	r5, #1
   10e1e:	d10c      	bne.n	10e3a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10e20:	4620      	mov	r0, r4
   10e22:	f7fe fea5 	bl	fb70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10e26:	b108      	cbz	r0, 10e2c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   10e28:	2204      	movs	r2, #4
   10e2a:	e002      	b.n	10e32 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10e2c:	2d01      	cmp	r5, #1
   10e2e:	d010      	beq.n	10e52 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10e30:	2205      	movs	r2, #5
   10e32:	4668      	mov	r0, sp
   10e34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10e36:	f7fd fdd7 	bl	e9e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10e3a:	687a      	ldr	r2, [r7, #4]
   10e3c:	4633      	mov	r3, r6
   10e3e:	2100      	movs	r1, #0
   10e40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10e42:	f7fd fe05 	bl	ea50 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10e46:	b130      	cbz	r0, 10e56 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   10e48:	2d02      	cmp	r5, #2
   10e4a:	d006      	beq.n	10e5a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10e4c:	2d03      	cmp	r5, #3
   10e4e:	d004      	beq.n	10e5a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10e50:	e008      	b.n	10e64 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   10e52:	2206      	movs	r2, #6
   10e54:	e7ed      	b.n	10e32 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10e56:	2007      	movs	r0, #7
   10e58:	e7c4      	b.n	10de4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10e5a:	4642      	mov	r2, r8
   10e5c:	2100      	movs	r1, #0
   10e5e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10e60:	f7fd fe38 	bl	ead4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10e64:	2000      	movs	r0, #0
   10e66:	e7bd      	b.n	10de4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00010e68 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   10e68:	b510      	push	{r4, lr}
   10e6a:	4604      	mov	r4, r0
   10e6c:	8880      	ldrh	r0, [r0, #4]
   10e6e:	b128      	cbz	r0, 10e7c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10e70:	2801      	cmp	r0, #1
   10e72:	d003      	beq.n	10e7c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10e74:	2802      	cmp	r0, #2
   10e76:	d001      	beq.n	10e7c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10e78:	2012      	movs	r0, #18
   10e7a:	bd10      	pop	{r4, pc}
   10e7c:	78e0      	ldrb	r0, [r4, #3]
   10e7e:	f000 f9ee 	bl	1125e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   10e82:	b148      	cbz	r0, 10e98 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10e84:	78a0      	ldrb	r0, [r4, #2]
   10e86:	f000 f9ea 	bl	1125e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   10e8a:	b128      	cbz	r0, 10e98 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10e8c:	4620      	mov	r0, r4
   10e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10e92:	2101      	movs	r1, #1
   10e94:	f000 b890 	b.w	10fb8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   10e98:	2011      	movs	r0, #17
   10e9a:	bd10      	pop	{r4, pc}

00010e9c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10e9c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10e9e:	460c      	mov	r4, r1
   10ea0:	4605      	mov	r5, r0
   10ea2:	8800      	ldrh	r0, [r0, #0]
   10ea4:	4669      	mov	r1, sp
   10ea6:	f7fd ff69 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10eaa:	2800      	cmp	r0, #0
   10eac:	d106      	bne.n	10ebc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10eae:	9801      	ldr	r0, [sp, #4]
   10eb0:	8829      	ldrh	r1, [r5, #0]
   10eb2:	8021      	strh	r1, [r4, #0]
   10eb4:	f8b0 00b0 	ldrh.w	r0, [r0, #176]	; 0xb0
   10eb8:	8060      	strh	r0, [r4, #2]
   10eba:	2000      	movs	r0, #0
   10ebc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010ebe <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10ebe:	b510      	push	{r4, lr}
   10ec0:	4604      	mov	r4, r0
   10ec2:	4601      	mov	r1, r0
   10ec4:	2000      	movs	r0, #0
   10ec6:	f7f5 f9eb 	bl	62a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10eca:	b910      	cbnz	r0, 10ed2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10ecc:	2000      	movs	r0, #0
   10ece:	6020      	str	r0, [r4, #0]
   10ed0:	80a0      	strh	r0, [r4, #4]
   10ed2:	2000      	movs	r0, #0
   10ed4:	bd10      	pop	{r4, pc}

00010ed6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   10ed6:	b50e      	push	{r1, r2, r3, lr}
   10ed8:	8800      	ldrh	r0, [r0, #0]
   10eda:	4669      	mov	r1, sp
   10edc:	f7fd ff4e 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10ee0:	b960      	cbnz	r0, 10efc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   10ee2:	9801      	ldr	r0, [sp, #4]
   10ee4:	f000 fa37 	bl	11356 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   10ee8:	b140      	cbz	r0, 10efc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   10eea:	9801      	ldr	r0, [sp, #4]
   10eec:	4601      	mov	r1, r0
   10eee:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
   10ef2:	3078      	adds	r0, #120	; 0x78
   10ef4:	f501 7195 	add.w	r1, r1, #298	; 0x12a
   10ef8:	b962      	cbnz	r2, 10f14 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   10efa:	e001      	b.n	10f00 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
   10efc:	2002      	movs	r0, #2
   10efe:	bd0e      	pop	{r1, r2, r3, pc}
   10f00:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
   10f04:	f88d 2008 	strb.w	r2, [sp, #8]
   10f08:	9a02      	ldr	r2, [sp, #8]
   10f0a:	9202      	str	r2, [sp, #8]
   10f0c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10f10:	2201      	movs	r2, #1
   10f12:	b10b      	cbz	r3, 10f18 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   10f14:	203a      	movs	r0, #58	; 0x3a
   10f16:	bd0e      	pop	{r1, r2, r3, pc}
   10f18:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
   10f1c:	079b      	lsls	r3, r3, #30
   10f1e:	d008      	beq.n	10f32 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>
   10f20:	2201      	movs	r2, #1
   10f22:	304e      	adds	r0, #78	; 0x4e
   10f24:	9901      	ldr	r1, [sp, #4]
   10f26:	f7f6 fb2d 	bl	7584 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   10f2a:	f7f6 fbfd 	bl	7728 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   10f2e:	2000      	movs	r0, #0
   10f30:	bd0e      	pop	{r1, r2, r3, pc}
   10f32:	700a      	strb	r2, [r1, #0]
   10f34:	4668      	mov	r0, sp
   10f36:	f7fe fae0 	bl	f4fa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10f3a:	e7f8      	b.n	10f2e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>

00010f3c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10f3c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10f3e:	460c      	mov	r4, r1
   10f40:	4605      	mov	r5, r0
   10f42:	8800      	ldrh	r0, [r0, #0]
   10f44:	4669      	mov	r1, sp
   10f46:	f7fd ff19 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10f4a:	b108      	cbz	r0, 10f50 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10f4c:	2002      	movs	r0, #2
   10f4e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10f50:	78a8      	ldrb	r0, [r5, #2]
   10f52:	b130      	cbz	r0, 10f62 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   10f54:	f000 f9fc 	bl	11350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   10f58:	70a0      	strb	r0, [r4, #2]
   10f5a:	8828      	ldrh	r0, [r5, #0]
   10f5c:	8020      	strh	r0, [r4, #0]
   10f5e:	2000      	movs	r0, #0
   10f60:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10f62:	9801      	ldr	r0, [sp, #4]
   10f64:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   10f68:	e7f6      	b.n	10f58 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00010f6a <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   10f6a:	b510      	push	{r4, lr}
   10f6c:	f7fa fce2 	bl	b934 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10f70:	2000      	movs	r0, #0
   10f72:	bd10      	pop	{r4, pc}

00010f74 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10f74:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10f78:	4604      	mov	r4, r0
   10f7a:	8840      	ldrh	r0, [r0, #2]
   10f7c:	460d      	mov	r5, r1
   10f7e:	b1b8      	cbz	r0, 10fb0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10f80:	8820      	ldrh	r0, [r4, #0]
   10f82:	4669      	mov	r1, sp
   10f84:	f7fd fefa 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10f88:	2800      	cmp	r0, #0
   10f8a:	d10f      	bne.n	10fac <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10f8c:	8820      	ldrh	r0, [r4, #0]
   10f8e:	8028      	strh	r0, [r5, #0]
   10f90:	9e01      	ldr	r6, [sp, #4]
   10f92:	f106 0510 	add.w	r5, r6, #16
   10f96:	3678      	adds	r6, #120	; 0x78
   10f98:	682f      	ldr	r7, [r5, #0]
   10f9a:	8862      	ldrh	r2, [r4, #2]
   10f9c:	4639      	mov	r1, r7
   10f9e:	4630      	mov	r0, r6
   10fa0:	f7fe f83b 	bl	f01a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10fa4:	6828      	ldr	r0, [r5, #0]
   10fa6:	42b8      	cmp	r0, r7
   10fa8:	d1f6      	bne.n	10f98 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10faa:	2000      	movs	r0, #0
   10fac:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10fb0:	2012      	movs	r0, #18
   10fb2:	e7fb      	b.n	10fac <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010fb4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10fb4:	f000 b863 	b.w	1107e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010fb8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10fbc:	b086      	sub	sp, #24
   10fbe:	4689      	mov	r9, r1
   10fc0:	4607      	mov	r7, r0
   10fc2:	8800      	ldrh	r0, [r0, #0]
   10fc4:	a901      	add	r1, sp, #4
   10fc6:	f7fd fed9 	bl	ed7c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10fca:	2800      	cmp	r0, #0
   10fcc:	d136      	bne.n	1103c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10fce:	9802      	ldr	r0, [sp, #8]
   10fd0:	4601      	mov	r1, r0
   10fd2:	4688      	mov	r8, r1
   10fd4:	f890 1176 	ldrb.w	r1, [r0, #374]	; 0x176
   10fd8:	f500 748c 	add.w	r4, r0, #280	; 0x118
   10fdc:	f88d 1000 	strb.w	r1, [sp]
   10fe0:	9900      	ldr	r1, [sp, #0]
   10fe2:	9100      	str	r1, [sp, #0]
   10fe4:	f89d 1000 	ldrb.w	r1, [sp]
   10fe8:	3078      	adds	r0, #120	; 0x78
   10fea:	b109      	cbz	r1, 10ff0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   10fec:	2601      	movs	r6, #1
   10fee:	e000      	b.n	10ff2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   10ff0:	2600      	movs	r6, #0
   10ff2:	7b81      	ldrb	r1, [r0, #14]
   10ff4:	2921      	cmp	r1, #33	; 0x21
   10ff6:	d100      	bne.n	10ffa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10ff8:	b13e      	cbz	r6, 1100a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   10ffa:	2500      	movs	r5, #0
   10ffc:	305c      	adds	r0, #92	; 0x5c
   10ffe:	2108      	movs	r1, #8
   11000:	4682      	mov	sl, r0
   11002:	f7ff fbc4 	bl	1078e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   11006:	b110      	cbz	r0, 1100e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   11008:	e007      	b.n	1101a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   1100a:	2501      	movs	r5, #1
   1100c:	e7f6      	b.n	10ffc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   1100e:	210b      	movs	r1, #11
   11010:	4650      	mov	r0, sl
   11012:	f7ff fbbc 	bl	1078e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   11016:	b900      	cbnz	r0, 1101a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   11018:	b17d      	cbz	r5, 1103a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   1101a:	a804      	add	r0, sp, #16
   1101c:	9000      	str	r0, [sp, #0]
   1101e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   11022:	ab03      	add	r3, sp, #12
   11024:	463a      	mov	r2, r7
   11026:	4641      	mov	r1, r8
   11028:	f000 f972 	bl	11310 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
   1102c:	0005      	movs	r5, r0
   1102e:	d105      	bne.n	1103c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   11030:	340c      	adds	r4, #12
   11032:	20ff      	movs	r0, #255	; 0xff
   11034:	7060      	strb	r0, [r4, #1]
   11036:	b936      	cbnz	r6, 11046 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   11038:	e003      	b.n	11042 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   1103a:	201a      	movs	r0, #26
   1103c:	b006      	add	sp, #24
   1103e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11042:	7820      	ldrb	r0, [r4, #0]
   11044:	b108      	cbz	r0, 1104a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   11046:	253a      	movs	r5, #58	; 0x3a
   11048:	e012      	b.n	11070 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   1104a:	f884 9000 	strb.w	r9, [r4]
   1104e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   11052:	70a0      	strb	r0, [r4, #2]
   11054:	f89d 1010 	ldrb.w	r1, [sp, #16]
   11058:	70e1      	strb	r1, [r4, #3]
   1105a:	f88d 0000 	strb.w	r0, [sp]
   1105e:	f88d 1001 	strb.w	r1, [sp, #1]
   11062:	88b8      	ldrh	r0, [r7, #4]
   11064:	f8ad 0002 	strh.w	r0, [sp, #2]
   11068:	4669      	mov	r1, sp
   1106a:	4640      	mov	r0, r8
   1106c:	f7fd ff46 	bl	eefc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   11070:	2000      	movs	r0, #0
   11072:	7060      	strb	r0, [r4, #1]
   11074:	4628      	mov	r0, r5
   11076:	e7e1      	b.n	1103c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

00011078 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   11078:	2008      	movs	r0, #8
   1107a:	f7fa bcc1 	b.w	ba00 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0001107e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   1107e:	b510      	push	{r4, lr}
   11080:	f7fd fddf 	bl	ec42 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   11084:	f7f5 fefc 	bl	6e80 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   11088:	f7fa fcdc 	bl	ba44 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   1108c:	f7fe fa9f 	bl	f5ce <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   11090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11094:	f7fa ba88 	b.w	b5a8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf4>

00011098 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   11098:	f7f8 b8da 	b.w	9250 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   1109c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   110a0:	4288      	cmp	r0, r1
   110a2:	d303      	bcc.n	110ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   110a4:	f640 0148 	movw	r1, #2120	; 0x848
   110a8:	4288      	cmp	r0, r1
   110aa:	d300      	bcc.n	110ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   110ac:	4608      	mov	r0, r1
   110ae:	b280      	uxth	r0, r0
   110b0:	4770      	bx	lr
   110b2:	07c1      	lsls	r1, r0, #31
   110b4:	d001      	beq.n	110ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   110b6:	2001      	movs	r0, #1
   110b8:	4770      	bx	lr
   110ba:	0780      	lsls	r0, r0, #30
   110bc:	d501      	bpl.n	110c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   110be:	2002      	movs	r0, #2
   110c0:	4770      	bx	lr
   110c2:	2000      	movs	r0, #0
   110c4:	4770      	bx	lr
   110c6:	b510      	push	{r4, lr}
   110c8:	2801      	cmp	r0, #1
   110ca:	d006      	beq.n	110da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   110cc:	2802      	cmp	r0, #2
   110ce:	d004      	beq.n	110da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   110d0:	f240 21a9 	movw	r1, #681	; 0x2a9
   110d4:	2006      	movs	r0, #6
   110d6:	f7f4 fa2d 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   110da:	bd10      	pop	{r4, pc}
   110dc:	b50e      	push	{r1, r2, r3, lr}
   110de:	4669      	mov	r1, sp
   110e0:	2001      	movs	r0, #1
   110e2:	f7fd fbc7 	bl	e874 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   110e6:	b150      	cbz	r0, 110fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   110e8:	f44f 71a3 	mov.w	r1, #326	; 0x146
   110ec:	2039      	movs	r0, #57	; 0x39
   110ee:	f7f4 fa21 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   110f2:	9802      	ldr	r0, [sp, #8]
   110f4:	f7fe fefa 	bl	feec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   110f8:	b108      	cbz	r0, 110fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   110fa:	2001      	movs	r0, #1
   110fc:	bd0e      	pop	{r1, r2, r3, pc}
   110fe:	4668      	mov	r0, sp
   11100:	f7f4 fc5c 	bl	59bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   11104:	2800      	cmp	r0, #0
   11106:	d0f4      	beq.n	110f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a>
   11108:	2000      	movs	r0, #0
   1110a:	bd0e      	pop	{r1, r2, r3, pc}
   1110c:	b510      	push	{r4, lr}
   1110e:	f7ff ffe5 	bl	110dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   11112:	b158      	cbz	r0, 1112c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   11114:	f7fa fa6a 	bl	b5ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   11118:	4604      	mov	r4, r0
   1111a:	f7fe fd2b 	bl	fb74 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1111e:	b918      	cbnz	r0, 11128 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x90>
   11120:	4620      	mov	r0, r4
   11122:	f7fe fd1d 	bl	fb60 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   11126:	b108      	cbz	r0, 1112c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   11128:	2000      	movs	r0, #0
   1112a:	bd10      	pop	{r4, pc}
   1112c:	2001      	movs	r0, #1
   1112e:	bd10      	pop	{r4, pc}
   11130:	b570      	push	{r4, r5, r6, lr}
   11132:	460c      	mov	r4, r1
   11134:	4605      	mov	r5, r0
   11136:	b112      	cbz	r2, 1113e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa6>
   11138:	291f      	cmp	r1, #31
   1113a:	d80c      	bhi.n	11156 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbe>
   1113c:	e016      	b.n	1116c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd4>
   1113e:	f7f4 ff07 	bl	5f50 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   11142:	42a0      	cmp	r0, r4
   11144:	d201      	bcs.n	1114a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb2>
   11146:	2007      	movs	r0, #7
   11148:	bd70      	pop	{r4, r5, r6, pc}
   1114a:	4628      	mov	r0, r5
   1114c:	f7fe fd10 	bl	fb70 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   11150:	b118      	cbz	r0, 1115a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   11152:	2c1f      	cmp	r4, #31
   11154:	d901      	bls.n	1115a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   11156:	2012      	movs	r0, #18
   11158:	bd70      	pop	{r4, r5, r6, pc}
   1115a:	4628      	mov	r0, r5
   1115c:	f7fe fd11 	bl	fb82 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   11160:	b130      	cbz	r0, 11170 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd8>
   11162:	4621      	mov	r1, r4
   11164:	4628      	mov	r0, r5
   11166:	f7fe fcd8 	bl	fb1a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1116a:	b118      	cbz	r0, 11174 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xdc>
   1116c:	2000      	movs	r0, #0
   1116e:	bd70      	pop	{r4, r5, r6, pc}
   11170:	2042      	movs	r0, #66	; 0x42
   11172:	bd70      	pop	{r4, r5, r6, pc}
   11174:	2045      	movs	r0, #69	; 0x45
   11176:	bd70      	pop	{r4, r5, r6, pc}
   11178:	b510      	push	{r4, lr}
   1117a:	4604      	mov	r4, r0
   1117c:	7840      	ldrb	r0, [r0, #1]
   1117e:	06c1      	lsls	r1, r0, #27
   11180:	d51c      	bpl.n	111bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   11182:	07c0      	lsls	r0, r0, #31
   11184:	d00b      	beq.n	1119e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   11186:	f7fa fc0f 	bl	b9a8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   1118a:	b1b8      	cbz	r0, 111bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   1118c:	7860      	ldrb	r0, [r4, #1]
   1118e:	06c1      	lsls	r1, r0, #27
   11190:	d405      	bmi.n	1119e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   11192:	0700      	lsls	r0, r0, #28
   11194:	d503      	bpl.n	1119e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   11196:	7d20      	ldrb	r0, [r4, #20]
   11198:	2802      	cmp	r0, #2
   1119a:	d10f      	bne.n	111bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   1119c:	e010      	b.n	111c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   1119e:	7d20      	ldrb	r0, [r4, #20]
   111a0:	2802      	cmp	r0, #2
   111a2:	d001      	beq.n	111a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x110>
   111a4:	7ea0      	ldrb	r0, [r4, #26]
   111a6:	b948      	cbnz	r0, 111bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   111a8:	7860      	ldrb	r0, [r4, #1]
   111aa:	0700      	lsls	r0, r0, #28
   111ac:	d408      	bmi.n	111c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   111ae:	f8d4 0005 	ldr.w	r0, [r4, #5]
   111b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   111b6:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   111ba:	d201      	bcs.n	111c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   111bc:	2011      	movs	r0, #17
   111be:	bd10      	pop	{r4, pc}
   111c0:	2000      	movs	r0, #0
   111c2:	bd10      	pop	{r4, pc}
   111c4:	b538      	push	{r3, r4, r5, lr}
   111c6:	4604      	mov	r4, r0
   111c8:	7800      	ldrb	r0, [r0, #0]
   111ca:	28ef      	cmp	r0, #239	; 0xef
   111cc:	d843      	bhi.n	11256 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   111ce:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   111d2:	f8ad 0000 	strh.w	r0, [sp]
   111d6:	9800      	ldr	r0, [sp, #0]
   111d8:	f000 f917 	bl	1140a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   111dc:	b3a0      	cbz	r0, 11248 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   111de:	7861      	ldrb	r1, [r4, #1]
   111e0:	0708      	lsls	r0, r1, #28
   111e2:	d40b      	bmi.n	111fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   111e4:	f8d4 0002 	ldr.w	r0, [r4, #2]
   111e8:	f8d4 3005 	ldr.w	r3, [r4, #5]
   111ec:	0a02      	lsrs	r2, r0, #8
   111ee:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   111f2:	d830      	bhi.n	11256 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   111f4:	2220      	movs	r2, #32
   111f6:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   111fa:	d82c      	bhi.n	11256 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   111fc:	7a60      	ldrb	r0, [r4, #9]
   111fe:	b318      	cbz	r0, 11248 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   11200:	2807      	cmp	r0, #7
   11202:	d828      	bhi.n	11256 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   11204:	7aa0      	ldrb	r0, [r4, #10]
   11206:	b128      	cbz	r0, 11214 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   11208:	2801      	cmp	r0, #1
   1120a:	d003      	beq.n	11214 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   1120c:	2802      	cmp	r0, #2
   1120e:	d001      	beq.n	11214 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   11210:	2803      	cmp	r0, #3
   11212:	d120      	bne.n	11256 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   11214:	074a      	lsls	r2, r1, #29
   11216:	d403      	bmi.n	11220 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   11218:	2802      	cmp	r0, #2
   1121a:	d001      	beq.n	11220 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   1121c:	2803      	cmp	r0, #3
   1121e:	d105      	bne.n	1122c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x194>
   11220:	7ae0      	ldrb	r0, [r4, #11]
   11222:	b108      	cbz	r0, 11228 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x190>
   11224:	2801      	cmp	r0, #1
   11226:	d116      	bne.n	11256 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   11228:	0748      	lsls	r0, r1, #29
   1122a:	d407      	bmi.n	1123c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   1122c:	7ca0      	ldrb	r0, [r4, #18]
   1122e:	b128      	cbz	r0, 1123c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   11230:	2801      	cmp	r0, #1
   11232:	d003      	beq.n	1123c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   11234:	2802      	cmp	r0, #2
   11236:	d001      	beq.n	1123c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   11238:	2803      	cmp	r0, #3
   1123a:	d10c      	bne.n	11256 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1123c:	06c8      	lsls	r0, r1, #27
   1123e:	7d20      	ldrb	r0, [r4, #20]
   11240:	d503      	bpl.n	1124a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b2>
   11242:	2801      	cmp	r0, #1
   11244:	d107      	bne.n	11256 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   11246:	e002      	b.n	1124e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b6>
   11248:	e005      	b.n	11256 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1124a:	2802      	cmp	r0, #2
   1124c:	d003      	beq.n	11256 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1124e:	7e20      	ldrb	r0, [r4, #24]
   11250:	b118      	cbz	r0, 1125a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   11252:	2801      	cmp	r0, #1
   11254:	d001      	beq.n	1125a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   11256:	2012      	movs	r0, #18
   11258:	bd38      	pop	{r3, r4, r5, pc}
   1125a:	2000      	movs	r0, #0
   1125c:	bd38      	pop	{r3, r4, r5, pc}
   1125e:	b510      	push	{r4, lr}
   11260:	0004      	movs	r4, r0
   11262:	d005      	beq.n	11270 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   11264:	f7fa fbde 	bl	ba24 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11268:	4384      	bics	r4, r0
   1126a:	d001      	beq.n	11270 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   1126c:	2000      	movs	r0, #0
   1126e:	bd10      	pop	{r4, pc}
   11270:	2001      	movs	r0, #1
   11272:	bd10      	pop	{r4, pc}
   11274:	28fb      	cmp	r0, #251	; 0xfb
   11276:	d803      	bhi.n	11280 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1e8>
   11278:	f640 0048 	movw	r0, #2120	; 0x848
   1127c:	4281      	cmp	r1, r0
   1127e:	d901      	bls.n	11284 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ec>
   11280:	2011      	movs	r0, #17
   11282:	4770      	bx	lr
   11284:	2000      	movs	r0, #0
   11286:	4770      	bx	lr
   11288:	381b      	subs	r0, #27
   1128a:	28e1      	cmp	r0, #225	; 0xe1
   1128c:	d206      	bcs.n	1129c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   1128e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   11292:	d303      	bcc.n	1129c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   11294:	f244 2090 	movw	r0, #17040	; 0x4290
   11298:	4281      	cmp	r1, r0
   1129a:	d901      	bls.n	112a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x208>
   1129c:	2012      	movs	r0, #18
   1129e:	4770      	bx	lr
   112a0:	2000      	movs	r0, #0
   112a2:	4770      	bx	lr
   112a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112a8:	4606      	mov	r6, r0
   112aa:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   112ae:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   112b2:	4615      	mov	r5, r2
   112b4:	3030      	adds	r0, #48	; 0x30
   112b6:	f7f7 fb87 	bl	89c8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   112ba:	4680      	mov	r8, r0
   112bc:	2102      	movs	r1, #2
   112be:	f7fd fded 	bl	ee9c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   112c2:	4287      	cmp	r7, r0
   112c4:	d200      	bcs.n	112c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x230>
   112c6:	4638      	mov	r0, r7
   112c8:	4607      	mov	r7, r0
   112ca:	2102      	movs	r1, #2
   112cc:	4640      	mov	r0, r8
   112ce:	f7fd fde5 	bl	ee9c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   112d2:	4284      	cmp	r4, r0
   112d4:	d200      	bcs.n	112d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   112d6:	4620      	mov	r0, r4
   112d8:	8831      	ldrh	r1, [r6, #0]
   112da:	8029      	strh	r1, [r5, #0]
   112dc:	2f1b      	cmp	r7, #27
   112de:	d913      	bls.n	11308 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x270>
   112e0:	2ffb      	cmp	r7, #251	; 0xfb
   112e2:	d300      	bcc.n	112e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   112e4:	27fb      	movs	r7, #251	; 0xfb
   112e6:	806f      	strh	r7, [r5, #2]
   112e8:	281b      	cmp	r0, #27
   112ea:	d90f      	bls.n	1130c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x274>
   112ec:	28fb      	cmp	r0, #251	; 0xfb
   112ee:	d300      	bcc.n	112f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   112f0:	20fb      	movs	r0, #251	; 0xfb
   112f2:	80e8      	strh	r0, [r5, #6]
   112f4:	4640      	mov	r0, r8
   112f6:	f7ff fed1 	bl	1109c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   112fa:	80a8      	strh	r0, [r5, #4]
   112fc:	4640      	mov	r0, r8
   112fe:	f7ff fecd 	bl	1109c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   11302:	8128      	strh	r0, [r5, #8]
   11304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11308:	271b      	movs	r7, #27
   1130a:	e7ec      	b.n	112e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   1130c:	201b      	movs	r0, #27
   1130e:	e7f0      	b.n	112f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   11310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11314:	7890      	ldrb	r0, [r2, #2]
   11316:	9e06      	ldr	r6, [sp, #24]
   11318:	461d      	mov	r5, r3
   1131a:	4614      	mov	r4, r2
   1131c:	b908      	cbnz	r0, 11322 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28a>
   1131e:	f7fa fb81 	bl	ba24 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11322:	78e4      	ldrb	r4, [r4, #3]
   11324:	4607      	mov	r7, r0
   11326:	b914      	cbnz	r4, 1132e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x296>
   11328:	f7fa fb7c 	bl	ba24 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1132c:	4604      	mov	r4, r0
   1132e:	b16f      	cbz	r7, 1134c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   11330:	b164      	cbz	r4, 1134c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   11332:	4638      	mov	r0, r7
   11334:	f7ff febd 	bl	110b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   11338:	4620      	mov	r0, r4
   1133a:	f7ff feba 	bl	110b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   1133e:	b12f      	cbz	r7, 1134c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   11340:	b124      	cbz	r4, 1134c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   11342:	702f      	strb	r7, [r5, #0]
   11344:	7034      	strb	r4, [r6, #0]
   11346:	2000      	movs	r0, #0
   11348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1134c:	2009      	movs	r0, #9
   1134e:	e7fb      	b.n	11348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b0>
   11350:	207f      	movs	r0, #127	; 0x7f
   11352:	f000 b83c 	b.w	113ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   11356:	b508      	push	{r3, lr}
   11358:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
   1135c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
   11360:	f88d 0000 	strb.w	r0, [sp]
   11364:	9800      	ldr	r0, [sp, #0]
   11366:	9000      	str	r0, [sp, #0]
   11368:	f89d 0000 	ldrb.w	r0, [sp]
   1136c:	b100      	cbz	r0, 11370 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d8>
   1136e:	2001      	movs	r0, #1
   11370:	1e40      	subs	r0, r0, #1
   11372:	4208      	tst	r0, r1
   11374:	d003      	beq.n	1137e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   11376:	2904      	cmp	r1, #4
   11378:	d001      	beq.n	1137e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   1137a:	2001      	movs	r0, #1
   1137c:	bd08      	pop	{r3, pc}
   1137e:	2000      	movs	r0, #0
   11380:	bd08      	pop	{r3, pc}
   11382:	b570      	push	{r4, r5, r6, lr}
   11384:	4605      	mov	r5, r0
   11386:	f7fe fbfc 	bl	fb82 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1138a:	b170      	cbz	r0, 113aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x312>
   1138c:	4628      	mov	r0, r5
   1138e:	f7fe fdad 	bl	feec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   11392:	2800      	cmp	r0, #0
   11394:	d008      	beq.n	113a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   11396:	4628      	mov	r0, r5
   11398:	f7fe fda5 	bl	fee6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   1139c:	4604      	mov	r4, r0
   1139e:	4628      	mov	r0, r5
   113a0:	f7fe fd7b 	bl	fe9a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   113a4:	b118      	cbz	r0, 113ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
   113a6:	200c      	movs	r0, #12
   113a8:	bd70      	pop	{r4, r5, r6, pc}
   113aa:	2042      	movs	r0, #66	; 0x42
   113ac:	bd70      	pop	{r4, r5, r6, pc}
   113ae:	b164      	cbz	r4, 113ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   113b0:	8820      	ldrh	r0, [r4, #0]
   113b2:	f7fd fc13 	bl	ebdc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   113b6:	8820      	ldrh	r0, [r4, #0]
   113b8:	2100      	movs	r1, #0
   113ba:	f7f4 fb4f 	bl	5a5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   113be:	b120      	cbz	r0, 113ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   113c0:	f241 41fd 	movw	r1, #5373	; 0x14fd
   113c4:	2039      	movs	r0, #57	; 0x39
   113c6:	f7f4 f8b5 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   113ca:	2000      	movs	r0, #0
   113cc:	bd70      	pop	{r4, r5, r6, pc}
   113ce:	b508      	push	{r3, lr}
   113d0:	f640 1288 	movw	r2, #2440	; 0x988
   113d4:	4669      	mov	r1, sp
   113d6:	f7f3 ff8d 	bl	52f4 <mpsl_fem_tx_power_split>
   113da:	bd08      	pop	{r3, pc}
   113dc:	b530      	push	{r4, r5, lr}
   113de:	f340 0400 	sbfx	r4, r0, #0, #1
   113e2:	f340 0040 	sbfx	r0, r0, #1, #1
   113e6:	1c40      	adds	r0, r0, #1
   113e8:	9d03      	ldr	r5, [sp, #12]
   113ea:	1c64      	adds	r4, r4, #1
   113ec:	d000      	beq.n	113f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x358>
   113ee:	b119      	cbz	r1, 113f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x360>
   113f0:	b100      	cbz	r0, 113f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35c>
   113f2:	b10a      	cbz	r2, 113f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x360>
   113f4:	b91c      	cbnz	r4, 113fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x366>
   113f6:	e001      	b.n	113fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
   113f8:	2011      	movs	r0, #17
   113fa:	bd30      	pop	{r4, r5, pc}
   113fc:	2100      	movs	r1, #0
   113fe:	7019      	strb	r1, [r3, #0]
   11400:	b900      	cbnz	r0, 11404 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36c>
   11402:	2200      	movs	r2, #0
   11404:	702a      	strb	r2, [r5, #0]
   11406:	2000      	movs	r0, #0
   11408:	bd30      	pop	{r4, r5, pc}
   1140a:	b2c0      	uxtb	r0, r0
   1140c:	06c1      	lsls	r1, r0, #27
   1140e:	d40c      	bmi.n	1142a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x392>
   11410:	0681      	lsls	r1, r0, #26
   11412:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   11416:	d503      	bpl.n	11420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   11418:	b9d1      	cbnz	r1, 11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   1141a:	0781      	lsls	r1, r0, #30
   1141c:	d418      	bmi.n	11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   1141e:	e001      	b.n	11424 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   11420:	2900      	cmp	r1, #0
   11422:	d1fa      	bne.n	1141a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x382>
   11424:	0700      	lsls	r0, r0, #28
   11426:	d413      	bmi.n	11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   11428:	e010      	b.n	1144c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
   1142a:	0641      	lsls	r1, r0, #25
   1142c:	d410      	bmi.n	11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   1142e:	0681      	lsls	r1, r0, #26
   11430:	d40e      	bmi.n	11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   11432:	07c1      	lsls	r1, r0, #31
   11434:	ea4f 7180 	mov.w	r1, r0, lsl #30
   11438:	d004      	beq.n	11444 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ac>
   1143a:	2900      	cmp	r1, #0
   1143c:	db02      	blt.n	11444 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ac>
   1143e:	0740      	lsls	r0, r0, #29
   11440:	d404      	bmi.n	1144c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
   11442:	e005      	b.n	11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   11444:	0701      	lsls	r1, r0, #28
   11446:	d403      	bmi.n	11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   11448:	0740      	lsls	r0, r0, #29
   1144a:	d401      	bmi.n	11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   1144c:	2001      	movs	r0, #1
   1144e:	4770      	bx	lr
   11450:	2000      	movs	r0, #0
   11452:	4770      	bx	lr
   11454:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   11456:	4669      	mov	r1, sp
   11458:	2001      	movs	r0, #1
   1145a:	f7fd fa0b 	bl	e874 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1145e:	b178      	cbz	r0, 11480 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e8>
   11460:	f44f 71b2 	mov.w	r1, #356	; 0x164
   11464:	2039      	movs	r0, #57	; 0x39
   11466:	f7f4 f865 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1146a:	9c02      	ldr	r4, [sp, #8]
   1146c:	4620      	mov	r0, r4
   1146e:	f7fe fd3d 	bl	feec <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   11472:	b128      	cbz	r0, 11480 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e8>
   11474:	4620      	mov	r0, r4
   11476:	f7fe fbc0 	bl	fbfa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   1147a:	b108      	cbz	r0, 11480 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e8>
   1147c:	2001      	movs	r0, #1
   1147e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11480:	4668      	mov	r0, sp
   11482:	f7f4 fa9b 	bl	59bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   11486:	2800      	cmp	r0, #0
   11488:	d0ef      	beq.n	1146a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d2>
   1148a:	2000      	movs	r0, #0
   1148c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1148e:	b510      	push	{r4, lr}
   11490:	f7fe fd2f 	bl	fef2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   11494:	b108      	cbz	r0, 1149a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x402>
   11496:	21e7      	movs	r1, #231	; 0xe7
   11498:	e003      	b.n	114a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x40a>
   1149a:	f7f6 fc13 	bl	7cc4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1149e:	b118      	cbz	r0, 114a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
   114a0:	21ec      	movs	r1, #236	; 0xec
   114a2:	2001      	movs	r0, #1
   114a4:	f7f4 f846 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   114a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   114ac:	2001      	movs	r0, #1
   114ae:	f7f4 ba1b 	b.w	58e8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   114b2:	6802      	ldr	r2, [r0, #0]
   114b4:	b912      	cbnz	r2, 114bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x424>
   114b6:	6001      	str	r1, [r0, #0]
   114b8:	4770      	bx	lr
   114ba:	4602      	mov	r2, r0
   114bc:	6850      	ldr	r0, [r2, #4]
   114be:	b108      	cbz	r0, 114c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42c>
   114c0:	428a      	cmp	r2, r1
   114c2:	d1fa      	bne.n	114ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x422>
   114c4:	428a      	cmp	r2, r1
   114c6:	d0f7      	beq.n	114b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x420>
   114c8:	6051      	str	r1, [r2, #4]
   114ca:	4770      	bx	lr
   114cc:	b510      	push	{r4, lr}
   114ce:	4604      	mov	r4, r0
   114d0:	e002      	b.n	114d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x440>
   114d2:	6820      	ldr	r0, [r4, #0]
   114d4:	4780      	blx	r0
   114d6:	6864      	ldr	r4, [r4, #4]
   114d8:	2c00      	cmp	r4, #0
   114da:	d1fa      	bne.n	114d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x43a>
   114dc:	bd10      	pop	{r4, pc}
   114de:	b510      	push	{r4, lr}
   114e0:	2000      	movs	r0, #0
   114e2:	f7f4 fa01 	bl	58e8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   114e6:	f7f4 fc39 	bl	5d5c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   114ea:	f7f4 febb 	bl	6264 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   114ee:	f7f5 f887 	bl	6600 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   114f2:	2800      	cmp	r0, #0
   114f4:	d003      	beq.n	114fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x466>
   114f6:	21c6      	movs	r1, #198	; 0xc6
   114f8:	2001      	movs	r0, #1
   114fa:	f7f4 f81b 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   114fe:	bd10      	pop	{r4, pc}
   11500:	b510      	push	{r4, lr}
   11502:	f7ff ffc4 	bl	1148e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   11506:	f7ff f8fa 	bl	106fe <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   1150a:	2800      	cmp	r0, #0
   1150c:	d004      	beq.n	11518 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x480>
   1150e:	f240 1103 	movw	r1, #259	; 0x103
   11512:	2001      	movs	r0, #1
   11514:	f7f4 f80e 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11518:	bd10      	pop	{r4, pc}

0001151a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   1151a:	f7f3 bc43 	b.w	4da4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   1151e:	0001      	.short	0x0001
   11520:	0002000b 	.word	0x0002000b
   11524:	0005000a 	.word	0x0005000a
   11528:	000a0009 	.word	0x000a0009
   1152c:	00140008 	.word	0x00140008
   11530:	001e0007 	.word	0x001e0007
   11534:	00320006 	.word	0x00320006
   11538:	004b0005 	.word	0x004b0005
   1153c:	00640004 	.word	0x00640004
   11540:	00960003 	.word	0x00960003
   11544:	00fa0002 	.word	0x00fa0002
   11548:	01f40001 	.word	0x01f40001
	...

0001154e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1154e:	b510      	push	{r4, lr}
   11550:	f7fa fe02 	bl	c158 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   11554:	f000 f81d 	bl	11592 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   11558:	f7fa fad8 	bl	bb0c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1155c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11560:	f7fa bbd2 	b.w	bd08 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00011564 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   11564:	b510      	push	{r4, lr}
   11566:	24c8      	movs	r4, #200	; 0xc8
   11568:	1e64      	subs	r4, r4, #1
   1156a:	b2e4      	uxtb	r4, r4
   1156c:	f7fa faec 	bl	bb48 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   11570:	2802      	cmp	r0, #2
   11572:	d003      	beq.n	1157c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   11574:	2801      	cmp	r0, #1
   11576:	d000      	beq.n	1157a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   11578:	2000      	movs	r0, #0
   1157a:	bd10      	pop	{r4, pc}
   1157c:	2c00      	cmp	r4, #0
   1157e:	d1f3      	bne.n	11568 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   11580:	219e      	movs	r1, #158	; 0x9e
   11582:	203b      	movs	r0, #59	; 0x3b
   11584:	f7f3 ffd6 	bl	5534 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11588:	5840      	ldr	r0, [r0, r1]
   1158a:	2800      	cmp	r0, #0
   1158c:	d000      	beq.n	11590 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   1158e:	2001      	movs	r0, #1
   11590:	4770      	bx	lr

00011592 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   11592:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   11596:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1159a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1159e:	f3bf 8f4f 	dsb	sy
   115a2:	f3bf 8f6f 	isb	sy
   115a6:	f7fa bc49 	b.w	be3c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   115aa:	2800      	cmp	r0, #0
   115ac:	db09      	blt.n	115c2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   115ae:	f000 021f 	and.w	r2, r0, #31
   115b2:	2101      	movs	r1, #1
   115b4:	4091      	lsls	r1, r2
   115b6:	0940      	lsrs	r0, r0, #5
   115b8:	0080      	lsls	r0, r0, #2
   115ba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   115be:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   115c2:	4770      	bx	lr
   115c4:	2800      	cmp	r0, #0
   115c6:	db0d      	blt.n	115e4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   115c8:	f000 021f 	and.w	r2, r0, #31
   115cc:	2101      	movs	r1, #1
   115ce:	4091      	lsls	r1, r2
   115d0:	0940      	lsrs	r0, r0, #5
   115d2:	0080      	lsls	r0, r0, #2
   115d4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   115d8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   115dc:	f3bf 8f4f 	dsb	sy
   115e0:	f3bf 8f6f 	isb	sy
   115e4:	4770      	bx	lr
   115e6:	5840      	ldr	r0, [r0, r1]
   115e8:	2800      	cmp	r0, #0
   115ea:	d000      	beq.n	115ee <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   115ec:	2001      	movs	r0, #1
   115ee:	4770      	bx	lr
   115f0:	5840      	ldr	r0, [r0, r1]
   115f2:	2800      	cmp	r0, #0
   115f4:	d000      	beq.n	115f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   115f6:	2001      	movs	r0, #1
   115f8:	4770      	bx	lr

000115fa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   115fa:	b510      	push	{r4, lr}
   115fc:	4604      	mov	r4, r0
   115fe:	4608      	mov	r0, r1
   11600:	f7fa fed0 	bl	c3a4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11604:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11608:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1160c:	fbb0 f0f1 	udiv	r0, r0, r1
   11610:	1a20      	subs	r0, r4, r0
   11612:	1e80      	subs	r0, r0, #2
   11614:	bd10      	pop	{r4, pc}

00011616 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   11616:	b510      	push	{r4, lr}
   11618:	4604      	mov	r4, r0
   1161a:	4608      	mov	r0, r1
   1161c:	f7fa fec2 	bl	c3a4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11620:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   11624:	fbb0 f0f1 	udiv	r0, r0, r1
   11628:	1a20      	subs	r0, r4, r0
   1162a:	bd10      	pop	{r4, pc}
   1162c:	d8d8d8d8 	.word	0xd8d8d8d8
   11630:	d8d8d8d8 	.word	0xd8d8d8d8
   11634:	d8d8d8d8 	.word	0xd8d8d8d8
   11638:	d8d8d8d8 	.word	0xd8d8d8d8
   1163c:	d8d8d8d8 	.word	0xd8d8d8d8
   11640:	ecececec 	.word	0xecececec
   11644:	f0f0f0f0 	.word	0xf0f0f0f0
   11648:	f4f4f4f4 	.word	0xf4f4f4f4
   1164c:	f8f8f8f8 	.word	0xf8f8f8f8
   11650:	fcfcfcfc 	.word	0xfcfcfcfc
   11654:	03020000 	.word	0x03020000
   11658:	07060504 	.word	0x07060504
   1165c:	d8d8d808 	.word	0xd8d8d808
   11660:	d8d8d8d8 	.word	0xd8d8d8d8
   11664:	d8d8d8d8 	.word	0xd8d8d8d8
   11668:	d8d8d8d8 	.word	0xd8d8d8d8
   1166c:	d8d8d8d8 	.word	0xd8d8d8d8
   11670:	ecececd8 	.word	0xecececd8
   11674:	f0f0f0ec 	.word	0xf0f0f0ec
   11678:	f4f4f4f0 	.word	0xf4f4f4f0
   1167c:	f8f8f8f4 	.word	0xf8f8f8f4
   11680:	fcfcfcf8 	.word	0xfcfcfcf8
   11684:	000000fc 	.word	0x000000fc
   11688:	0403      	.short	0x0403
   1168a:	080c      	.short	0x080c
   1168c:	010d1702 	.word	0x010d1702
   11690:	09090201 	.word	0x09090201
   11694:	02060101 	.word	0x02060101
   11698:	03181809 	.word	0x03181809
   1169c:	09090101 	.word	0x09090101
   116a0:	03050303 	.word	0x03050303
   116a4:	02220102 	.word	0x02220102
   116a8:	10092402 	.word	0x10092402
   116ac:	05050404 	.word	0x05050404

000116b0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   116b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   116b2:	4d40      	ldr	r5, [pc, #256]	; (117b4 <bt_init+0x104>)
   116b4:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   116b8:	6899      	ldr	r1, [r3, #8]
   116ba:	f011 0101 	ands.w	r1, r1, #1
   116be:	d121      	bne.n	11704 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   116c0:	aa01      	add	r2, sp, #4
   116c2:	f640 4003 	movw	r0, #3075	; 0xc03
   116c6:	f004 f85d 	bl	15784 <bt_hci_cmd_send_sync>
		if (err) {
   116ca:	4604      	mov	r4, r0
   116cc:	2800      	cmp	r0, #0
   116ce:	d16d      	bne.n	117ac <bt_init+0xfc>
	uint8_t status = buf->data[0];
   116d0:	9b01      	ldr	r3, [sp, #4]
   116d2:	689b      	ldr	r3, [r3, #8]
	if (status) {
   116d4:	781b      	ldrb	r3, [r3, #0]
   116d6:	b993      	cbnz	r3, 116fe <bt_init+0x4e>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   116d8:	f3bf 8f5b 	dmb	ish
   116dc:	462b      	mov	r3, r5
   116de:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   116e2:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   116e6:	f002 0209 	and.w	r2, r2, #9
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   116ea:	f3bf 8f5b 	dmb	ish
   116ee:	e853 1f00 	ldrex	r1, [r3]
   116f2:	e843 2000 	strex	r0, r2, [r3]
   116f6:	2800      	cmp	r0, #0
   116f8:	d1f9      	bne.n	116ee <bt_init+0x3e>
   116fa:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   116fe:	9801      	ldr	r0, [sp, #4]
   11700:	f00b f87c 	bl	1c7fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   11704:	aa01      	add	r2, sp, #4
   11706:	2100      	movs	r1, #0
   11708:	f241 0003 	movw	r0, #4099	; 0x1003
   1170c:	f004 f83a 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   11710:	4604      	mov	r4, r0
   11712:	2800      	cmp	r0, #0
   11714:	d14a      	bne.n	117ac <bt_init+0xfc>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   11716:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   11718:	4827      	ldr	r0, [pc, #156]	; (117b8 <bt_init+0x108>)
   1171a:	6899      	ldr	r1, [r3, #8]
   1171c:	2208      	movs	r2, #8
   1171e:	3101      	adds	r1, #1
   11720:	f015 fd81 	bl	27226 <memcpy>
	net_buf_unref(rsp);
   11724:	9801      	ldr	r0, [sp, #4]
   11726:	f00b f869 	bl	1c7fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1172a:	4621      	mov	r1, r4
   1172c:	aa01      	add	r2, sp, #4
   1172e:	f241 0001 	movw	r0, #4097	; 0x1001
   11732:	f004 f827 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   11736:	4604      	mov	r4, r0
   11738:	2800      	cmp	r0, #0
   1173a:	d137      	bne.n	117ac <bt_init+0xfc>
	read_local_ver_complete(rsp);
   1173c:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1173e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   11740:	785a      	ldrb	r2, [r3, #1]
   11742:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   11746:	78d9      	ldrb	r1, [r3, #3]
   11748:	789a      	ldrb	r2, [r3, #2]
   1174a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1174e:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   11752:	791a      	ldrb	r2, [r3, #4]
   11754:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   11758:	7a19      	ldrb	r1, [r3, #8]
   1175a:	79da      	ldrb	r2, [r3, #7]
   1175c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   11760:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   11764:	795a      	ldrb	r2, [r3, #5]
   11766:	799b      	ldrb	r3, [r3, #6]
   11768:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1176c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   11770:	f00b f844 	bl	1c7fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   11774:	4621      	mov	r1, r4
   11776:	aa01      	add	r2, sp, #4
   11778:	f241 0002 	movw	r0, #4098	; 0x1002
   1177c:	f004 f802 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   11780:	4604      	mov	r4, r0
   11782:	b998      	cbnz	r0, 117ac <bt_init+0xfc>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   11784:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   11786:	480d      	ldr	r0, [pc, #52]	; (117bc <bt_init+0x10c>)
   11788:	6899      	ldr	r1, [r3, #8]
   1178a:	2240      	movs	r2, #64	; 0x40
   1178c:	3101      	adds	r1, #1
   1178e:	f015 fd4a 	bl	27226 <memcpy>
	net_buf_unref(rsp);
   11792:	9801      	ldr	r0, [sp, #4]
   11794:	f00b f832 	bl	1c7fc <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   11798:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1179c:	065a      	lsls	r2, r3, #25
   1179e:	d411      	bmi.n	117c4 <bt_init+0x114>
		BT_ERR("Non-LE capable controller detected!");
   117a0:	4807      	ldr	r0, [pc, #28]	; (117c0 <bt_init+0x110>)
   117a2:	2145      	movs	r1, #69	; 0x45
   117a4:	f014 feb9 	bl	2651a <z_log_minimal_printk>
		return -ENODEV;
   117a8:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   117ac:	4620      	mov	r0, r4
   117ae:	b002      	add	sp, #8
   117b0:	bd70      	pop	{r4, r5, r6, pc}
   117b2:	bf00      	nop
   117b4:	20000350 	.word	0x20000350
   117b8:	200003c0 	.word	0x200003c0
   117bc:	200003c8 	.word	0x200003c8
   117c0:	0002bbc8 	.word	0x0002bbc8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   117c4:	4621      	mov	r1, r4
   117c6:	aa01      	add	r2, sp, #4
   117c8:	f242 0003 	movw	r0, #8195	; 0x2003
   117cc:	f003 ffda 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   117d0:	4604      	mov	r4, r0
   117d2:	2800      	cmp	r0, #0
   117d4:	d1ea      	bne.n	117ac <bt_init+0xfc>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   117d6:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   117d8:	48bf      	ldr	r0, [pc, #764]	; (11ad8 <bt_init+0x428>)
   117da:	6899      	ldr	r1, [r3, #8]
   117dc:	2208      	movs	r2, #8
   117de:	3101      	adds	r1, #1
   117e0:	f015 fd21 	bl	27226 <memcpy>
	net_buf_unref(rsp);
   117e4:	9801      	ldr	r0, [sp, #4]
   117e6:	f00b f809 	bl	1c7fc <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   117ea:	4621      	mov	r1, r4
   117ec:	aa01      	add	r2, sp, #4
   117ee:	f242 0002 	movw	r0, #8194	; 0x2002
   117f2:	f003 ffc7 	bl	15784 <bt_hci_cmd_send_sync>
		if (err) {
   117f6:	4604      	mov	r4, r0
   117f8:	2800      	cmp	r0, #0
   117fa:	d1d7      	bne.n	117ac <bt_init+0xfc>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   117fc:	9b01      	ldr	r3, [sp, #4]
   117fe:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   11800:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   11804:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   11808:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1180a:	b121      	cbz	r1, 11816 <bt_init+0x166>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1180c:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   1180e:	48b3      	ldr	r0, [pc, #716]	; (11adc <bt_init+0x42c>)
   11810:	4611      	mov	r1, r2
   11812:	f018 f883 	bl	2991c <z_impl_k_sem_init>
		net_buf_unref(rsp);
   11816:	9801      	ldr	r0, [sp, #4]
   11818:	f00a fff0 	bl	1c7fc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1181c:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   11820:	f016 0620 	ands.w	r6, r6, #32
   11824:	f000 80f8 	beq.w	11a18 <bt_init+0x368>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   11828:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   1182c:	071b      	lsls	r3, r3, #28
   1182e:	d512      	bpl.n	11856 <bt_init+0x1a6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   11830:	aa01      	add	r2, sp, #4
   11832:	2100      	movs	r1, #0
   11834:	f242 001c 	movw	r0, #8220	; 0x201c
   11838:	f003 ffa4 	bl	15784 <bt_hci_cmd_send_sync>
		if (err) {
   1183c:	4604      	mov	r4, r0
   1183e:	2800      	cmp	r0, #0
   11840:	d1b4      	bne.n	117ac <bt_init+0xfc>
		le_read_supp_states_complete(rsp);
   11842:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11844:	6883      	ldr	r3, [r0, #8]
   11846:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1184a:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1184e:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   11852:	f00a ffd3 	bl	1c7fc <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   11856:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1185a:	069e      	lsls	r6, r3, #26
   1185c:	d523      	bpl.n	118a6 <bt_init+0x1f6>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1185e:	f10d 0102 	add.w	r1, sp, #2
   11862:	4668      	mov	r0, sp
   11864:	f003 fff0 	bl	15848 <hci_le_read_max_data_len>
		if (err) {
   11868:	4604      	mov	r4, r0
   1186a:	2800      	cmp	r0, #0
   1186c:	d19e      	bne.n	117ac <bt_init+0xfc>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1186e:	2104      	movs	r1, #4
   11870:	f242 0024 	movw	r0, #8228	; 0x2024
   11874:	f003 ff3e 	bl	156f4 <bt_hci_cmd_create>
		if (!buf) {
   11878:	4606      	mov	r6, r0
   1187a:	2800      	cmp	r0, #0
   1187c:	f000 80d3 	beq.w	11a26 <bt_init+0x376>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   11880:	2104      	movs	r1, #4
   11882:	3008      	adds	r0, #8
   11884:	f00b f8d0 	bl	1ca28 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   11888:	f8bd 3000 	ldrh.w	r3, [sp]
   1188c:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1188e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11892:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11894:	4622      	mov	r2, r4
   11896:	4631      	mov	r1, r6
   11898:	f242 0024 	movw	r0, #8228	; 0x2024
   1189c:	f003 ff72 	bl	15784 <bt_hci_cmd_send_sync>
		if (err) {
   118a0:	4604      	mov	r4, r0
   118a2:	2800      	cmp	r0, #0
   118a4:	d182      	bne.n	117ac <bt_init+0xfc>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   118a6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   118aa:	065c      	lsls	r4, r3, #25
   118ac:	d510      	bpl.n	118d0 <bt_init+0x220>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   118ae:	aa01      	add	r2, sp, #4
   118b0:	2100      	movs	r1, #0
   118b2:	f242 002a 	movw	r0, #8234	; 0x202a
   118b6:	f003 ff65 	bl	15784 <bt_hci_cmd_send_sync>
		if (err) {
   118ba:	4604      	mov	r4, r0
   118bc:	2800      	cmp	r0, #0
   118be:	f47f af75 	bne.w	117ac <bt_init+0xfc>
		le_read_resolving_list_size_complete(rsp);
   118c2:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   118c4:	6883      	ldr	r3, [r0, #8]
   118c6:	785b      	ldrb	r3, [r3, #1]
   118c8:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   118cc:	f00a ff96 	bl	1c7fc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   118d0:	2108      	movs	r1, #8
   118d2:	f242 0001 	movw	r0, #8193	; 0x2001
   118d6:	f003 ff0d 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   118da:	4604      	mov	r4, r0
   118dc:	2800      	cmp	r0, #0
   118de:	f000 80a2 	beq.w	11a26 <bt_init+0x376>
   118e2:	2108      	movs	r1, #8
   118e4:	4408      	add	r0, r1
   118e6:	f00b f89f 	bl	1ca28 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   118ea:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   118ee:	f011 0f40 	tst.w	r1, #64	; 0x40
   118f2:	4602      	mov	r2, r0
   118f4:	f240 2302 	movw	r3, #514	; 0x202
   118f8:	bf08      	it	eq
   118fa:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   118fc:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   118fe:	bf4c      	ite	mi
   11900:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   11904:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   11908:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1190a:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1190e:	bf48      	it	mi
   11910:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   11914:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11918:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1191c:	bf18      	it	ne
   1191e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11922:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   11926:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   11928:	bf48      	it	mi
   1192a:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1192e:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   11930:	bf08      	it	eq
   11932:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   11936:	2100      	movs	r1, #0
   11938:	f015 fd85 	bl	27446 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1193c:	4621      	mov	r1, r4
   1193e:	2200      	movs	r2, #0
   11940:	f242 0001 	movw	r0, #8193	; 0x2001
   11944:	f003 ff1e 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   11948:	4604      	mov	r4, r0
   1194a:	2800      	cmp	r0, #0
   1194c:	f47f af2e 	bne.w	117ac <bt_init+0xfc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11950:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   11954:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11958:	0698      	lsls	r0, r3, #26
   1195a:	d479      	bmi.n	11a50 <bt_init+0x3a0>
	if (bt_dev.le.acl_mtu) {
   1195c:	b9d9      	cbnz	r1, 11996 <bt_init+0x2e6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1195e:	aa01      	add	r2, sp, #4
   11960:	f241 0005 	movw	r0, #4101	; 0x1005
   11964:	f003 ff0e 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   11968:	4604      	mov	r4, r0
   1196a:	2800      	cmp	r0, #0
   1196c:	f47f af1e 	bne.w	117ac <bt_init+0xfc>
	if (bt_dev.le.acl_mtu) {
   11970:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   11974:	b963      	cbnz	r3, 11990 <bt_init+0x2e0>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   11976:	9b01      	ldr	r3, [sp, #4]
   11978:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1197a:	785a      	ldrb	r2, [r3, #1]
   1197c:	7899      	ldrb	r1, [r3, #2]
   1197e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   11982:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   11986:	889a      	ldrh	r2, [r3, #4]
   11988:	4854      	ldr	r0, [pc, #336]	; (11adc <bt_init+0x42c>)
   1198a:	4611      	mov	r1, r2
   1198c:	f017 ffc6 	bl	2991c <z_impl_k_sem_init>
	net_buf_unref(rsp);
   11990:	9801      	ldr	r0, [sp, #4]
   11992:	f00a ff33 	bl	1c7fc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   11996:	2108      	movs	r1, #8
   11998:	f640 4001 	movw	r0, #3073	; 0xc01
   1199c:	f003 feaa 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   119a0:	4604      	mov	r4, r0
   119a2:	2800      	cmp	r0, #0
   119a4:	d03f      	beq.n	11a26 <bt_init+0x376>
   119a6:	2108      	movs	r1, #8
   119a8:	4408      	add	r0, r1
   119aa:	f00b f83d 	bl	1ca28 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   119ae:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   119b2:	07d9      	lsls	r1, r3, #31
   119b4:	4602      	mov	r2, r0
   119b6:	d554      	bpl.n	11a62 <bt_init+0x3b2>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   119b8:	a145      	add	r1, pc, #276	; (adr r1, 11ad0 <bt_init+0x420>)
   119ba:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   119be:	f015 fd42 	bl	27446 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   119c2:	4621      	mov	r1, r4
   119c4:	2200      	movs	r2, #0
   119c6:	f640 4001 	movw	r0, #3073	; 0xc01
   119ca:	f003 fedb 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   119ce:	4604      	mov	r4, r0
   119d0:	2800      	cmp	r0, #0
   119d2:	f47f aeeb 	bne.w	117ac <bt_init+0xfc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   119d6:	4601      	mov	r1, r0
   119d8:	aa01      	add	r2, sp, #4
   119da:	f64f 4001 	movw	r0, #64513	; 0xfc01
   119de:	f003 fed1 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   119e2:	4604      	mov	r4, r0
   119e4:	2800      	cmp	r0, #0
   119e6:	d040      	beq.n	11a6a <bt_init+0x3ba>
		BT_WARN("Vendor HCI extensions not available");
   119e8:	483d      	ldr	r0, [pc, #244]	; (11ae0 <bt_init+0x430>)
   119ea:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
   119ec:	f014 fd95 	bl	2651a <z_log_minimal_printk>
	err = bt_id_init();
   119f0:	f015 feb8 	bl	27764 <bt_id_init>
	if (err) {
   119f4:	4604      	mov	r4, r0
   119f6:	2800      	cmp	r0, #0
   119f8:	f47f aed8 	bne.w	117ac <bt_init+0xfc>
		err = bt_conn_init();
   119fc:	f006 fa4a 	bl	17e94 <bt_conn_init>
		if (err) {
   11a00:	4604      	mov	r4, r0
   11a02:	2800      	cmp	r0, #0
   11a04:	f47f aed2 	bne.w	117ac <bt_init+0xfc>
		if (!bt_dev.id_count) {
   11a08:	79eb      	ldrb	r3, [r5, #7]
   11a0a:	2b00      	cmp	r3, #0
   11a0c:	d178      	bne.n	11b00 <bt_init+0x450>
			BT_INFO("No ID address. App must call settings_load()");
   11a0e:	4835      	ldr	r0, [pc, #212]	; (11ae4 <bt_init+0x434>)
   11a10:	2149      	movs	r1, #73	; 0x49
   11a12:	f014 fd82 	bl	2651a <z_log_minimal_printk>
			return 0;
   11a16:	e6c9      	b.n	117ac <bt_init+0xfc>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   11a18:	2102      	movs	r1, #2
   11a1a:	f640 406d 	movw	r0, #3181	; 0xc6d
   11a1e:	f003 fe69 	bl	156f4 <bt_hci_cmd_create>
		if (!buf) {
   11a22:	4604      	mov	r4, r0
   11a24:	b910      	cbnz	r0, 11a2c <bt_init+0x37c>
		return -ENOBUFS;
   11a26:	f06f 0468 	mvn.w	r4, #104	; 0x68
   11a2a:	e6bf      	b.n	117ac <bt_init+0xfc>
   11a2c:	2102      	movs	r1, #2
   11a2e:	3008      	adds	r0, #8
   11a30:	f00a fffa 	bl	1ca28 <net_buf_simple_add>
		cp_le->le = 0x01;
   11a34:	2301      	movs	r3, #1
   11a36:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   11a38:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   11a3a:	4621      	mov	r1, r4
   11a3c:	4632      	mov	r2, r6
   11a3e:	f640 406d 	movw	r0, #3181	; 0xc6d
   11a42:	f003 fe9f 	bl	15784 <bt_hci_cmd_send_sync>
		if (err) {
   11a46:	4604      	mov	r4, r0
   11a48:	2800      	cmp	r0, #0
   11a4a:	f43f aeed 	beq.w	11828 <bt_init+0x178>
   11a4e:	e6ad      	b.n	117ac <bt_init+0xfc>
	else if (!bt_dev.le.acl_mtu) {
   11a50:	2900      	cmp	r1, #0
   11a52:	d1a0      	bne.n	11996 <bt_init+0x2e6>
		BT_ERR("ACL BR/EDR buffers not initialized");
   11a54:	4824      	ldr	r0, [pc, #144]	; (11ae8 <bt_init+0x438>)
   11a56:	2145      	movs	r1, #69	; 0x45
   11a58:	f014 fd5f 	bl	2651a <z_log_minimal_printk>
		return -EIO;
   11a5c:	f06f 0404 	mvn.w	r4, #4
   11a60:	e6a4      	b.n	117ac <bt_init+0xfc>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   11a62:	4822      	ldr	r0, [pc, #136]	; (11aec <bt_init+0x43c>)
   11a64:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   11a68:	e7a9      	b.n	119be <bt_init+0x30e>
	net_buf_unref(rsp);
   11a6a:	9801      	ldr	r0, [sp, #4]
   11a6c:	f00a fec6 	bl	1c7fc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   11a70:	4621      	mov	r1, r4
   11a72:	aa01      	add	r2, sp, #4
   11a74:	f64f 4002 	movw	r0, #64514	; 0xfc02
   11a78:	f003 fe84 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   11a7c:	4604      	mov	r4, r0
   11a7e:	b110      	cbz	r0, 11a86 <bt_init+0x3d6>
		BT_WARN("Failed to read supported vendor commands");
   11a80:	481b      	ldr	r0, [pc, #108]	; (11af0 <bt_init+0x440>)
   11a82:	2157      	movs	r1, #87	; 0x57
   11a84:	e7b2      	b.n	119ec <bt_init+0x33c>
	rp.cmds = (void *)rsp->data;
   11a86:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   11a88:	481a      	ldr	r0, [pc, #104]	; (11af4 <bt_init+0x444>)
   11a8a:	6899      	ldr	r1, [r3, #8]
   11a8c:	2202      	movs	r2, #2
   11a8e:	3101      	adds	r1, #1
   11a90:	f015 fbc9 	bl	27226 <memcpy>
	net_buf_unref(rsp);
   11a94:	9801      	ldr	r0, [sp, #4]
   11a96:	f00a feb1 	bl	1c7fc <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   11a9a:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   11a9e:	075b      	lsls	r3, r3, #29
   11aa0:	d5a6      	bpl.n	119f0 <bt_init+0x340>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   11aa2:	aa01      	add	r2, sp, #4
   11aa4:	4621      	mov	r1, r4
   11aa6:	f64f 4003 	movw	r0, #64515	; 0xfc03
   11aaa:	f003 fe6b 	bl	15784 <bt_hci_cmd_send_sync>
		if (err) {
   11aae:	b110      	cbz	r0, 11ab6 <bt_init+0x406>
			BT_WARN("Failed to read supported vendor features");
   11ab0:	4811      	ldr	r0, [pc, #68]	; (11af8 <bt_init+0x448>)
   11ab2:	2157      	movs	r1, #87	; 0x57
   11ab4:	e79a      	b.n	119ec <bt_init+0x33c>
		rp.feat = (void *)rsp->data;
   11ab6:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   11ab8:	4810      	ldr	r0, [pc, #64]	; (11afc <bt_init+0x44c>)
   11aba:	6899      	ldr	r1, [r3, #8]
   11abc:	2201      	movs	r2, #1
   11abe:	4411      	add	r1, r2
   11ac0:	f015 fbb1 	bl	27226 <memcpy>
		net_buf_unref(rsp);
   11ac4:	9801      	ldr	r0, [sp, #4]
   11ac6:	f00a fe99 	bl	1c7fc <net_buf_unref>
   11aca:	e791      	b.n	119f0 <bt_init+0x340>
   11acc:	f3af 8000 	nop.w
   11ad0:	02008890 	.word	0x02008890
   11ad4:	20008000 	.word	0x20008000
   11ad8:	20000420 	.word	0x20000420
   11adc:	20000450 	.word	0x20000450
   11ae0:	0002bc19 	.word	0x0002bc19
   11ae4:	0002bc9e 	.word	0x0002bc9e
   11ae8:	0002bbf1 	.word	0x0002bbf1
   11aec:	02008810 	.word	0x02008810
   11af0:	0002bc42 	.word	0x0002bc42
   11af4:	20000409 	.word	0x20000409
   11af8:	0002bc70 	.word	0x0002bc70
   11afc:	20000408 	.word	0x20000408
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11b00:	2108      	movs	r1, #8
   11b02:	4803      	ldr	r0, [pc, #12]	; (11b10 <bt_init+0x460>)
   11b04:	f015 fc84 	bl	27410 <atomic_or>
	bt_finalize_init();
   11b08:	f004 fae4 	bl	160d4 <bt_finalize_init>
	return 0;
   11b0c:	e64e      	b.n	117ac <bt_init+0xfc>
   11b0e:	bf00      	nop
   11b10:	2000041c 	.word	0x2000041c

00011b14 <app_button_cb>:
static struct bt_conn_auth_info_cb conn_auth_info_callbacks;

static uint32_t app_button_cb(void)
{
	return app_keystate;
}
   11b14:	4b01      	ldr	r3, [pc, #4]	; (11b1c <app_button_cb+0x8>)
   11b16:	6818      	ldr	r0, [r3, #0]
   11b18:	4770      	bx	lr
   11b1a:	bf00      	nop
   11b1c:	20001f18 	.word	0x20001f18

00011b20 <gpio_pin_get>:
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	gpio_port_value_t value;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11b20:	6843      	ldr	r3, [r0, #4]
{
   11b22:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11b24:	681b      	ldr	r3, [r3, #0]
   11b26:	2501      	movs	r5, #1
   11b28:	408d      	lsls	r5, r1
   11b2a:	421d      	tst	r5, r3
{
   11b2c:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11b2e:	d10a      	bne.n	11b46 <gpio_pin_get+0x26>
   11b30:	490d      	ldr	r1, [pc, #52]	; (11b68 <gpio_pin_get+0x48>)
   11b32:	480e      	ldr	r0, [pc, #56]	; (11b6c <gpio_pin_get+0x4c>)
   11b34:	f240 42cc 	movw	r2, #1228	; 0x4cc
   11b38:	f014 fce1 	bl	264fe <assert_print>
   11b3c:	480a      	ldr	r0, [pc, #40]	; (11b68 <gpio_pin_get+0x48>)
   11b3e:	f240 41cc 	movw	r1, #1228	; 0x4cc
   11b42:	f014 fcd5 	bl	264f0 <assert_post_action>
	const struct gpio_driver_data *const data =
   11b46:	6926      	ldr	r6, [r4, #16]
	return api->port_get_raw(port, value);
   11b48:	68a3      	ldr	r3, [r4, #8]
   11b4a:	a901      	add	r1, sp, #4
   11b4c:	685b      	ldr	r3, [r3, #4]
   11b4e:	4620      	mov	r0, r4
   11b50:	4798      	blx	r3
	if (ret == 0) {
   11b52:	b930      	cbnz	r0, 11b62 <gpio_pin_get+0x42>
		*value ^= data->invert;
   11b54:	6832      	ldr	r2, [r6, #0]
   11b56:	9b01      	ldr	r3, [sp, #4]
   11b58:	4053      	eors	r3, r2
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   11b5a:	422b      	tst	r3, r5
   11b5c:	bf14      	ite	ne
   11b5e:	2001      	movne	r0, #1
   11b60:	2000      	moveq	r0, #0
	}

	return ret;
}
   11b62:	b002      	add	sp, #8
   11b64:	bd70      	pop	{r4, r5, r6, pc}
   11b66:	bf00      	nop
   11b68:	0002aa44 	.word	0x0002aa44
   11b6c:	0002aa75 	.word	0x0002aa75

00011b70 <gpio_pin_configure_dt>:
{
   11b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				  spec->dt_flags | extra_flags);
   11b74:	88c4      	ldrh	r4, [r0, #6]
	return gpio_pin_configure(spec->port,
   11b76:	6806      	ldr	r6, [r0, #0]
   11b78:	7907      	ldrb	r7, [r0, #4]
   11b7a:	430c      	orrs	r4, r1
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   11b7c:	f004 0330 	and.w	r3, r4, #48	; 0x30
   11b80:	2b30      	cmp	r3, #48	; 0x30
	__unused const struct gpio_driver_config *const cfg =
   11b82:	e9d6 a901 	ldrd	sl, r9, [r6, #4]
	struct gpio_driver_data *data =
   11b86:	f8d6 8010 	ldr.w	r8, [r6, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   11b8a:	d10a      	bne.n	11ba2 <gpio_pin_configure_dt+0x32>
   11b8c:	4925      	ldr	r1, [pc, #148]	; (11c24 <gpio_pin_configure_dt+0xb4>)
   11b8e:	4826      	ldr	r0, [pc, #152]	; (11c28 <gpio_pin_configure_dt+0xb8>)
   11b90:	f240 22bf 	movw	r2, #703	; 0x2bf
   11b94:	f014 fcb3 	bl	264fe <assert_print>
   11b98:	4822      	ldr	r0, [pc, #136]	; (11c24 <gpio_pin_configure_dt+0xb4>)
   11b9a:	f240 21bf 	movw	r1, #703	; 0x2bf
   11b9e:	f014 fca7 	bl	264f0 <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   11ba2:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
   11ba6:	2b02      	cmp	r3, #2
   11ba8:	d10a      	bne.n	11bc0 <gpio_pin_configure_dt+0x50>
   11baa:	491e      	ldr	r1, [pc, #120]	; (11c24 <gpio_pin_configure_dt+0xb4>)
   11bac:	481e      	ldr	r0, [pc, #120]	; (11c28 <gpio_pin_configure_dt+0xb8>)
   11bae:	f240 22c3 	movw	r2, #707	; 0x2c3
   11bb2:	f014 fca4 	bl	264fe <assert_print>
   11bb6:	481b      	ldr	r0, [pc, #108]	; (11c24 <gpio_pin_configure_dt+0xb4>)
   11bb8:	f240 21c3 	movw	r1, #707	; 0x2c3
   11bbc:	f014 fc98 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   11bc0:	f004 0306 	and.w	r3, r4, #6
   11bc4:	2b04      	cmp	r3, #4
   11bc6:	d10a      	bne.n	11bde <gpio_pin_configure_dt+0x6e>
   11bc8:	4916      	ldr	r1, [pc, #88]	; (11c24 <gpio_pin_configure_dt+0xb4>)
   11bca:	4817      	ldr	r0, [pc, #92]	; (11c28 <gpio_pin_configure_dt+0xb8>)
   11bcc:	f240 22c7 	movw	r2, #711	; 0x2c7
   11bd0:	f014 fc95 	bl	264fe <assert_print>
   11bd4:	4813      	ldr	r0, [pc, #76]	; (11c24 <gpio_pin_configure_dt+0xb4>)
   11bd6:	f240 21c7 	movw	r1, #711	; 0x2c7
   11bda:	f014 fc89 	bl	264f0 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11bde:	2301      	movs	r3, #1
   11be0:	fa03 f507 	lsl.w	r5, r3, r7
   11be4:	f8da 3000 	ldr.w	r3, [sl]
   11be8:	421d      	tst	r5, r3
   11bea:	d10a      	bne.n	11c02 <gpio_pin_configure_dt+0x92>
   11bec:	490d      	ldr	r1, [pc, #52]	; (11c24 <gpio_pin_configure_dt+0xb4>)
   11bee:	480e      	ldr	r0, [pc, #56]	; (11c28 <gpio_pin_configure_dt+0xb8>)
   11bf0:	f240 22da 	movw	r2, #730	; 0x2da
   11bf4:	f014 fc83 	bl	264fe <assert_print>
   11bf8:	480a      	ldr	r0, [pc, #40]	; (11c24 <gpio_pin_configure_dt+0xb4>)
   11bfa:	f240 21da 	movw	r1, #730	; 0x2da
   11bfe:	f014 fc77 	bl	264f0 <assert_post_action>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11c02:	f8d8 3000 	ldr.w	r3, [r8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   11c06:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11c08:	bf4c      	ite	mi
   11c0a:	432b      	orrmi	r3, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11c0c:	43ab      	bicpl	r3, r5
   11c0e:	f8c8 3000 	str.w	r3, [r8]
	return api->pin_configure(port, pin, flags);
   11c12:	4622      	mov	r2, r4
   11c14:	f8d9 3000 	ldr.w	r3, [r9]
   11c18:	4639      	mov	r1, r7
   11c1a:	4630      	mov	r0, r6
}
   11c1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_configure(port, pin, flags);
   11c20:	4718      	bx	r3
   11c22:	bf00      	nop
   11c24:	0002aa44 	.word	0x0002aa44
   11c28:	0002aa75 	.word	0x0002aa75

00011c2c <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   11c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	return gpio_pin_set(spec->port, spec->pin, value);
   11c30:	6804      	ldr	r4, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11c32:	7903      	ldrb	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   11c34:	6927      	ldr	r7, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11c36:	2501      	movs	r5, #1
   11c38:	409d      	lsls	r5, r3
   11c3a:	6863      	ldr	r3, [r4, #4]
   11c3c:	681b      	ldr	r3, [r3, #0]
   11c3e:	421d      	tst	r5, r3
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   11c40:	460e      	mov	r6, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11c42:	d10a      	bne.n	11c5a <gpio_pin_set_dt.isra.0+0x2e>
   11c44:	4914      	ldr	r1, [pc, #80]	; (11c98 <gpio_pin_set_dt.isra.0+0x6c>)
   11c46:	4815      	ldr	r0, [pc, #84]	; (11c9c <gpio_pin_set_dt.isra.0+0x70>)
   11c48:	f240 5225 	movw	r2, #1317	; 0x525
   11c4c:	f014 fc57 	bl	264fe <assert_print>
   11c50:	4811      	ldr	r0, [pc, #68]	; (11c98 <gpio_pin_set_dt.isra.0+0x6c>)
   11c52:	f240 5125 	movw	r1, #1317	; 0x525
   11c56:	f014 fc4b 	bl	264f0 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11c5a:	683b      	ldr	r3, [r7, #0]
   11c5c:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11c5e:	6863      	ldr	r3, [r4, #4]
   11c60:	681b      	ldr	r3, [r3, #0]
   11c62:	bf18      	it	ne
   11c64:	f086 0601 	eorne.w	r6, r6, #1
   11c68:	421d      	tst	r5, r3
   11c6a:	d10a      	bne.n	11c82 <gpio_pin_set_dt.isra.0+0x56>
   11c6c:	490a      	ldr	r1, [pc, #40]	; (11c98 <gpio_pin_set_dt.isra.0+0x6c>)
   11c6e:	480b      	ldr	r0, [pc, #44]	; (11c9c <gpio_pin_set_dt.isra.0+0x70>)
   11c70:	f240 42fc 	movw	r2, #1276	; 0x4fc
   11c74:	f014 fc43 	bl	264fe <assert_print>
   11c78:	4807      	ldr	r0, [pc, #28]	; (11c98 <gpio_pin_set_dt.isra.0+0x6c>)
   11c7a:	f240 41fc 	movw	r1, #1276	; 0x4fc
   11c7e:	f014 fc37 	bl	264f0 <assert_post_action>
	if (value != 0)	{
   11c82:	b136      	cbz	r6, 11c92 <gpio_pin_set_dt.isra.0+0x66>
	return api->port_set_bits_raw(port, pins);
   11c84:	68a3      	ldr	r3, [r4, #8]
   11c86:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   11c88:	4629      	mov	r1, r5
   11c8a:	4620      	mov	r0, r4
}
   11c8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   11c90:	4718      	bx	r3
   11c92:	68a3      	ldr	r3, [r4, #8]
   11c94:	691b      	ldr	r3, [r3, #16]
   11c96:	e7f7      	b.n	11c88 <gpio_pin_set_dt.isra.0+0x5c>
   11c98:	0002aa44 	.word	0x0002aa44
   11c9c:	0002aa75 	.word	0x0002aa75

00011ca0 <connected>:
{
   11ca0:	b508      	push	{r3, lr}
	if (err) {
   11ca2:	b121      	cbz	r1, 11cae <connected+0xe>
}
   11ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connection failed (err %u)\n", err);
   11ca8:	4805      	ldr	r0, [pc, #20]	; (11cc0 <connected+0x20>)
   11caa:	f014 ba37 	b.w	2611c <printk>
	printk("Connected\n");
   11cae:	4805      	ldr	r0, [pc, #20]	; (11cc4 <connected+0x24>)
   11cb0:	f014 fa34 	bl	2611c <printk>
}
   11cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_set_dt(conn_led,1);
   11cb8:	4803      	ldr	r0, [pc, #12]	; (11cc8 <connected+0x28>)
   11cba:	2101      	movs	r1, #1
   11cbc:	f7ff bfb6 	b.w	11c2c <gpio_pin_set_dt.isra.0>
   11cc0:	0002aa8d 	.word	0x0002aa8d
   11cc4:	0002aaa9 	.word	0x0002aaa9
   11cc8:	0002a1c8 	.word	0x0002a1c8

00011ccc <disconnected>:
{
   11ccc:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
   11cce:	4804      	ldr	r0, [pc, #16]	; (11ce0 <disconnected+0x14>)
   11cd0:	f014 fa24 	bl	2611c <printk>
}
   11cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_set_dt(conn_led,0);
   11cd8:	4802      	ldr	r0, [pc, #8]	; (11ce4 <disconnected+0x18>)
   11cda:	2100      	movs	r1, #0
   11cdc:	f7ff bfa6 	b.w	11c2c <gpio_pin_set_dt.isra.0>
   11ce0:	0002aab4 	.word	0x0002aab4
   11ce4:	0002a1c8 	.word	0x0002a1c8

00011ce8 <get_keystate>:
	}
	return val;
	*/
}

uint32_t get_keystate(uint32_t last_button_state){
   11ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint32_t has_changed, button_state;
	button_state = 0;
   11cec:	4c17      	ldr	r4, [pc, #92]	; (11d4c <get_keystate+0x64>)
   11cee:	4e18      	ldr	r6, [pc, #96]	; (11d50 <get_keystate+0x68>)
   11cf0:	2300      	movs	r3, #0
uint32_t get_keystate(uint32_t last_button_state){
   11cf2:	4680      	mov	r8, r0
	button_state = 0;
   11cf4:	6023      	str	r3, [r4, #0]
   11cf6:	2512      	movs	r5, #18

	for(int i = 0; i<NUM_OF_ROW; i++){
		gpio_pin_set_dt(&row[i],1); //set pin to GND
   11cf8:	2101      	movs	r1, #1
   11cfa:	4630      	mov	r0, r6
   11cfc:	f7ff ff96 	bl	11c2c <gpio_pin_set_dt.isra.0>
		for(int j = 0; j<NUM_OF_COL; j++){
   11d00:	f8df 9050 	ldr.w	r9, [pc, #80]	; 11d54 <get_keystate+0x6c>
		gpio_pin_set_dt(&row[i],1); //set pin to GND
   11d04:	2705      	movs	r7, #5
	return gpio_pin_get(spec->port, spec->pin);
   11d06:	f899 1004 	ldrb.w	r1, [r9, #4]
   11d0a:	f859 0b08 	ldr.w	r0, [r9], #8
   11d0e:	f7ff ff07 	bl	11b20 <gpio_pin_get>
			button_state |= gpio_pin_get_dt(&col[j]) << (NUM_OF_BUT + (NUM_OF_ROW - 1 -i )*
   11d12:	197b      	adds	r3, r7, r5
   11d14:	fa00 f303 	lsl.w	r3, r0, r3
   11d18:	6820      	ldr	r0, [r4, #0]
		for(int j = 0; j<NUM_OF_COL; j++){
   11d1a:	3f01      	subs	r7, #1
			button_state |= gpio_pin_get_dt(&col[j]) << (NUM_OF_BUT + (NUM_OF_ROW - 1 -i )*
   11d1c:	ea43 0300 	orr.w	r3, r3, r0
   11d20:	6023      	str	r3, [r4, #0]
		for(int j = 0; j<NUM_OF_COL; j++){
   11d22:	d2f0      	bcs.n	11d06 <get_keystate+0x1e>
														NUM_OF_COL + (NUM_OF_COL-1 -j));
		}
		gpio_pin_set_dt(&row[i],0); //set pin to VCC
   11d24:	4630      	mov	r0, r6
   11d26:	2100      	movs	r1, #0
	for(int i = 0; i<NUM_OF_ROW; i++){
   11d28:	3d06      	subs	r5, #6
		gpio_pin_set_dt(&row[i],0); //set pin to VCC
   11d2a:	f7ff ff7f 	bl	11c2c <gpio_pin_set_dt.isra.0>
	for(int i = 0; i<NUM_OF_ROW; i++){
   11d2e:	1dab      	adds	r3, r5, #6
   11d30:	f106 0608 	add.w	r6, r6, #8
   11d34:	d1e0      	bne.n	11cf8 <get_keystate+0x10>
	}

	has_changed = button_state ^ last_button_state;
   11d36:	6820      	ldr	r0, [r4, #0]
	//if you want to analyse the button_state, do it between these 2 operations of has_changed 
	app_keystate = button_state;
   11d38:	4b07      	ldr	r3, [pc, #28]	; (11d58 <get_keystate+0x70>)
	if(has_changed != 0){
   11d3a:	4540      	cmp	r0, r8
	app_keystate = button_state;
   11d3c:	6018      	str	r0, [r3, #0]
	if(has_changed != 0){
   11d3e:	d001      	beq.n	11d44 <get_keystate+0x5c>
		bt_kbds_send_keystate(button_state);
   11d40:	f000 f908 	bl	11f54 <bt_kbds_send_keystate>
	}
	return button_state;
}
   11d44:	6820      	ldr	r0, [r4, #0]
   11d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11d4a:	bf00      	nop
   11d4c:	20001f1c 	.word	0x20001f1c
   11d50:	0002a1d0 	.word	0x0002a1d0
   11d54:	0002a198 	.word	0x0002a198
   11d58:	20001f18 	.word	0x20001f18

00011d5c <gpio_init>:

int gpio_init(void){
   11d5c:	b570      	push	{r4, r5, r6, lr}
	int err;
	err = gpio_pin_configure_dt(user_led,GPIO_OUTPUT);
   11d5e:	4830      	ldr	r0, [pc, #192]	; (11e20 <gpio_init+0xc4>)
   11d60:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   11d64:	f7ff ff04 	bl	11b70 <gpio_pin_configure_dt>
	if(err != 0){
   11d68:	4604      	mov	r4, r0
   11d6a:	2800      	cmp	r0, #0
   11d6c:	d139      	bne.n	11de2 <gpio_init+0x86>
		return err;
	}
	err = gpio_pin_configure_dt(conn_led,GPIO_OUTPUT);
   11d6e:	482d      	ldr	r0, [pc, #180]	; (11e24 <gpio_init+0xc8>)
   11d70:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   11d74:	f7ff fefc 	bl	11b70 <gpio_pin_configure_dt>
	if(err != 0){
   11d78:	4604      	mov	r4, r0
   11d7a:	bb90      	cbnz	r0, 11de2 <gpio_init+0x86>
		return err;
	}
	err = gpio_pin_configure_dt(run_led,GPIO_OUTPUT);
   11d7c:	482a      	ldr	r0, [pc, #168]	; (11e28 <gpio_init+0xcc>)
   11d7e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   11d82:	f7ff fef5 	bl	11b70 <gpio_pin_configure_dt>
	if(err != 0){
   11d86:	4604      	mov	r4, r0
   11d88:	bb58      	cbnz	r0, 11de2 <gpio_init+0x86>
		return err;
	}
	err = gpio_pin_configure_dt(test_led,GPIO_OUTPUT);
   11d8a:	4828      	ldr	r0, [pc, #160]	; (11e2c <gpio_init+0xd0>)
   11d8c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   11d90:	f7ff feee 	bl	11b70 <gpio_pin_configure_dt>
	if(err != 0){
   11d94:	4604      	mov	r4, r0
   11d96:	bb20      	cbnz	r0, 11de2 <gpio_init+0x86>
		return err;
	}
	gpio_pin_set_dt(user_led, 0);
   11d98:	4601      	mov	r1, r0
   11d9a:	4821      	ldr	r0, [pc, #132]	; (11e20 <gpio_init+0xc4>)
   11d9c:	f7ff ff46 	bl	11c2c <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(conn_led, 0);
   11da0:	4621      	mov	r1, r4
   11da2:	4820      	ldr	r0, [pc, #128]	; (11e24 <gpio_init+0xc8>)
   11da4:	f7ff ff42 	bl	11c2c <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(run_led, 0);
   11da8:	4621      	mov	r1, r4
   11daa:	481f      	ldr	r0, [pc, #124]	; (11e28 <gpio_init+0xcc>)
   11dac:	f7ff ff3e 	bl	11c2c <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(test_led, 0);
   11db0:	4621      	mov	r1, r4
   11db2:	481e      	ldr	r0, [pc, #120]	; (11e2c <gpio_init+0xd0>)
   11db4:	f7ff ff3a 	bl	11c2c <gpio_pin_set_dt.isra.0>
	
	err = gpio_pin_configure_dt(test_but,GPIO_INPUT);
   11db8:	481d      	ldr	r0, [pc, #116]	; (11e30 <gpio_init+0xd4>)
   11dba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   11dbe:	f7ff fed7 	bl	11b70 <gpio_pin_configure_dt>
	if(err != 0){
   11dc2:	4604      	mov	r4, r0
   11dc4:	b968      	cbnz	r0, 11de2 <gpio_init+0x86>
   11dc6:	4e1b      	ldr	r6, [pc, #108]	; (11e34 <gpio_init+0xd8>)
		return err;
	}

	for(int i = 0; i < NUM_OF_ROW; i++){
		err = gpio_pin_configure_dt(&row[i], GPIO_OUTPUT);
   11dc8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   11dcc:	4630      	mov	r0, r6
   11dce:	f7ff fecf 	bl	11b70 <gpio_pin_configure_dt>
		if(err){
   11dd2:	4605      	mov	r5, r0
   11dd4:	b138      	cbz	r0, 11de6 <gpio_init+0x8a>
			printk("problem with row %d (err %d)\n",i,err);
   11dd6:	4602      	mov	r2, r0
   11dd8:	4621      	mov	r1, r4
   11dda:	4817      	ldr	r0, [pc, #92]	; (11e38 <gpio_init+0xdc>)
   11ddc:	f014 f99e 	bl	2611c <printk>
		err = gpio_pin_configure_dt(&row[i], GPIO_OUTPUT);
   11de0:	462c      	mov	r4, r5
			return err;
		}
	}

	return err;
}
   11de2:	4620      	mov	r0, r4
   11de4:	bd70      	pop	{r4, r5, r6, pc}
		gpio_pin_set_dt(&row[i],0);//VCC aka 5v
   11de6:	4601      	mov	r1, r0
	for(int i = 0; i < NUM_OF_ROW; i++){
   11de8:	3401      	adds	r4, #1
		gpio_pin_set_dt(&row[i],0);//VCC aka 5v
   11dea:	4630      	mov	r0, r6
   11dec:	f7ff ff1e 	bl	11c2c <gpio_pin_set_dt.isra.0>
	for(int i = 0; i < NUM_OF_ROW; i++){
   11df0:	2c04      	cmp	r4, #4
   11df2:	f106 0608 	add.w	r6, r6, #8
   11df6:	d1e7      	bne.n	11dc8 <gpio_init+0x6c>
   11df8:	4e10      	ldr	r6, [pc, #64]	; (11e3c <gpio_init+0xe0>)
		err = gpio_pin_configure_dt(&col[i], GPIO_INPUT);
   11dfa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   11dfe:	4630      	mov	r0, r6
   11e00:	f7ff feb6 	bl	11b70 <gpio_pin_configure_dt>
		if(err){
   11e04:	4604      	mov	r4, r0
   11e06:	b128      	cbz	r0, 11e14 <gpio_init+0xb8>
			printk("problem with row %d (err %d)\n",i,err);
   11e08:	4602      	mov	r2, r0
   11e0a:	4629      	mov	r1, r5
   11e0c:	480a      	ldr	r0, [pc, #40]	; (11e38 <gpio_init+0xdc>)
   11e0e:	f014 f985 	bl	2611c <printk>
			return err;
   11e12:	e7e6      	b.n	11de2 <gpio_init+0x86>
	for(int i = 0; i < NUM_OF_COL; i++){
   11e14:	3501      	adds	r5, #1
   11e16:	2d06      	cmp	r5, #6
   11e18:	f106 0608 	add.w	r6, r6, #8
   11e1c:	d1ed      	bne.n	11dfa <gpio_init+0x9e>
   11e1e:	e7e0      	b.n	11de2 <gpio_init+0x86>
   11e20:	0002a210 	.word	0x0002a210
   11e24:	0002a1c8 	.word	0x0002a1c8
   11e28:	0002a1f0 	.word	0x0002a1f0
   11e2c:	0002a208 	.word	0x0002a208
   11e30:	0002a200 	.word	0x0002a200
   11e34:	0002a1d0 	.word	0x0002a1d0
   11e38:	0002aace 	.word	0x0002aace
   11e3c:	0002a198 	.word	0x0002a198

00011e40 <main>:

void main(void)
{
   11e40:	b570      	push	{r4, r5, r6, lr}
	int blink_status = 0;
	int err;

	printk("Starting Bluetooth Peripheral KBDS example\n");
   11e42:	4820      	ldr	r0, [pc, #128]	; (11ec4 <main+0x84>)
{
   11e44:	b088      	sub	sp, #32
	printk("Starting Bluetooth Peripheral KBDS example\n");
   11e46:	f014 f969 	bl	2611c <printk>

	err = gpio_init();
   11e4a:	f7ff ff87 	bl	11d5c <gpio_init>
   11e4e:	4601      	mov	r1, r0
	if (err) {
   11e50:	b128      	cbz	r0, 11e5e <main+0x1e>
		printk("Button init failed (err %d)\n", err);
   11e52:	481d      	ldr	r0, [pc, #116]	; (11ec8 <main+0x88>)
		//gpio_pin_set_dt(run_led,(++blink_status) % 2);
		button_state = get_keystate(button_state);
		//button_state = test_func(button_state);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
   11e54:	b008      	add	sp, #32
   11e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Failed to init KBDS (err:%d)\n", err);
   11e5a:	f014 b95f 	b.w	2611c <printk>
	err = bt_enable(NULL);
   11e5e:	f004 f94b 	bl	160f8 <bt_enable>
	if (err) {
   11e62:	4601      	mov	r1, r0
   11e64:	b108      	cbz	r0, 11e6a <main+0x2a>
		printk("Bluetooth init failed (err %d)\n", err);
   11e66:	4819      	ldr	r0, [pc, #100]	; (11ecc <main+0x8c>)
   11e68:	e7f4      	b.n	11e54 <main+0x14>
	printk("Bluetooth initialized\n");
   11e6a:	4819      	ldr	r0, [pc, #100]	; (11ed0 <main+0x90>)
   11e6c:	f014 f956 	bl	2611c <printk>
		settings_load();
   11e70:	f014 fdc9 	bl	26a06 <settings_load>
	err = bt_kbds_init(&kbds_callbacs);
   11e74:	4817      	ldr	r0, [pc, #92]	; (11ed4 <main+0x94>)
   11e76:	f000 f865 	bl	11f44 <bt_kbds_init>
	if (err) {
   11e7a:	4601      	mov	r1, r0
   11e7c:	b108      	cbz	r0, 11e82 <main+0x42>
		printk("Failed to init KBDS (err:%d)\n", err);
   11e7e:	4816      	ldr	r0, [pc, #88]	; (11ed8 <main+0x98>)
   11e80:	e7e8      	b.n	11e54 <main+0x14>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   11e82:	4d16      	ldr	r5, [pc, #88]	; (11edc <main+0x9c>)
   11e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11e86:	ac03      	add	r4, sp, #12
   11e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11e8a:	682b      	ldr	r3, [r5, #0]
   11e8c:	6023      	str	r3, [r4, #0]
   11e8e:	2301      	movs	r3, #1
   11e90:	4913      	ldr	r1, [pc, #76]	; (11ee0 <main+0xa0>)
   11e92:	9300      	str	r3, [sp, #0]
   11e94:	2202      	movs	r2, #2
   11e96:	4b13      	ldr	r3, [pc, #76]	; (11ee4 <main+0xa4>)
   11e98:	a803      	add	r0, sp, #12
   11e9a:	f004 ff2d 	bl	16cf8 <bt_le_adv_start>
	if (err) {
   11e9e:	4601      	mov	r1, r0
   11ea0:	b120      	cbz	r0, 11eac <main+0x6c>
		printk("Advertising failed to start (err %d)\n", err);
   11ea2:	4811      	ldr	r0, [pc, #68]	; (11ee8 <main+0xa8>)
   11ea4:	f014 f93a 	bl	2611c <printk>
}
   11ea8:	b008      	add	sp, #32
   11eaa:	bd70      	pop	{r4, r5, r6, pc}
	printk("Advertising successfully started\n");
   11eac:	480f      	ldr	r0, [pc, #60]	; (11eec <main+0xac>)
   11eae:	f014 f935 	bl	2611c <printk>
		button_state = get_keystate(button_state);
   11eb2:	4630      	mov	r0, r6
   11eb4:	f7ff ff18 	bl	11ce8 <get_keystate>
   11eb8:	4606      	mov	r6, r0
	return z_impl_k_sleep(timeout);
   11eba:	2100      	movs	r1, #0
   11ebc:	2063      	movs	r0, #99	; 0x63
   11ebe:	f010 f971 	bl	221a4 <z_impl_k_sleep>
	for (;;) {
   11ec2:	e7f6      	b.n	11eb2 <main+0x72>
   11ec4:	0002aaec 	.word	0x0002aaec
   11ec8:	0002ab18 	.word	0x0002ab18
   11ecc:	0002ab35 	.word	0x0002ab35
   11ed0:	0002ab55 	.word	0x0002ab55
   11ed4:	200004b8 	.word	0x200004b8
   11ed8:	0002ab6c 	.word	0x0002ab6c
   11edc:	0002a0e0 	.word	0x0002a0e0
   11ee0:	0002a188 	.word	0x0002a188
   11ee4:	0002a1f8 	.word	0x0002a1f8
   11ee8:	0002ab8a 	.word	0x0002ab8a
   11eec:	0002abb0 	.word	0x0002abb0

00011ef0 <kbdslc_ccc_cfg_changed>:
static struct bt_kbds_cb       kbds_cb;

static void kbdslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   11ef0:	1e4b      	subs	r3, r1, #1
   11ef2:	4259      	negs	r1, r3
   11ef4:	4159      	adcs	r1, r3
   11ef6:	4b01      	ldr	r3, [pc, #4]	; (11efc <kbdslc_ccc_cfg_changed+0xc>)
   11ef8:	6019      	str	r1, [r3, #0]
}
   11efa:	4770      	bx	lr
   11efc:	20001f28 	.word	0x20001f28

00011f00 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
   11f00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11f04:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	//LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle,
		//(void *)conn);

	if (kbds_cb.button_cb) {
   11f06:	4b0d      	ldr	r3, [pc, #52]	; (11f3c <read_button+0x3c>)
{
   11f08:	4605      	mov	r5, r0
	if (kbds_cb.button_cb) {
   11f0a:	6818      	ldr	r0, [r3, #0]
{
   11f0c:	460c      	mov	r4, r1
   11f0e:	4616      	mov	r6, r2
	if (kbds_cb.button_cb) {
   11f10:	b180      	cbz	r0, 11f34 <read_button+0x34>
	const char *value = attr->user_data;
   11f12:	f8d1 800c 	ldr.w	r8, [r1, #12]
		keystate = kbds_cb.button_cb();
   11f16:	4780      	blx	r0
   11f18:	4b09      	ldr	r3, [pc, #36]	; (11f40 <read_button+0x40>)
   11f1a:	6018      	str	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   11f1c:	2301      	movs	r3, #1
   11f1e:	e9cd 8301 	strd	r8, r3, [sp, #4]
   11f22:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11f26:	9300      	str	r3, [sp, #0]
   11f28:	4632      	mov	r2, r6
   11f2a:	463b      	mov	r3, r7
   11f2c:	4621      	mov	r1, r4
   11f2e:	4628      	mov	r0, r5
   11f30:	f016 fd1f 	bl	28972 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
   11f34:	b004      	add	sp, #16
   11f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f3a:	bf00      	nop
   11f3c:	20001f20 	.word	0x20001f20
   11f40:	20001f24 	.word	0x20001f24

00011f44 <bt_kbds_init>:
		    BT_GATT_PERM_READ | BT_GATT_PERM_WRITE),
);

int bt_kbds_init(struct bt_kbds_cb *callbacks)
{
	if (callbacks) {
   11f44:	b110      	cbz	r0, 11f4c <bt_kbds_init+0x8>
		kbds_cb.button_cb = callbacks->button_cb;
   11f46:	4b02      	ldr	r3, [pc, #8]	; (11f50 <bt_kbds_init+0xc>)
   11f48:	6802      	ldr	r2, [r0, #0]
   11f4a:	601a      	str	r2, [r3, #0]
	}

	return 0;
}
   11f4c:	2000      	movs	r0, #0
   11f4e:	4770      	bx	lr
   11f50:	20001f20 	.word	0x20001f20

00011f54 <bt_kbds_send_keystate>:

int bt_kbds_send_keystate(uint32_t keystate)
{
   11f54:	b500      	push	{lr}
	if (!notify_enabled) {
   11f56:	4b0d      	ldr	r3, [pc, #52]	; (11f8c <bt_kbds_send_keystate+0x38>)
{
   11f58:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
   11f5a:	681b      	ldr	r3, [r3, #0]
{
   11f5c:	9001      	str	r0, [sp, #4]
	if (!notify_enabled) {
   11f5e:	b193      	cbz	r3, 11f86 <bt_kbds_send_keystate+0x32>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   11f60:	2100      	movs	r1, #0
   11f62:	2218      	movs	r2, #24
   11f64:	a802      	add	r0, sp, #8
   11f66:	f015 f969 	bl	2723c <memset>

	params.attr = attr;
   11f6a:	4b09      	ldr	r3, [pc, #36]	; (11f90 <bt_kbds_send_keystate+0x3c>)
   11f6c:	9303      	str	r3, [sp, #12]
	params.data = data;
   11f6e:	ab01      	add	r3, sp, #4
   11f70:	9304      	str	r3, [sp, #16]
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   11f72:	a902      	add	r1, sp, #8
	params.len = len;
   11f74:	2304      	movs	r3, #4
	return bt_gatt_notify_cb(conn, &params);
   11f76:	2000      	movs	r0, #0
	params.len = len;
   11f78:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   11f7c:	f008 fa9c 	bl	1a4b8 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &kbds_svc.attrs[2],
			      &keystate,
			      sizeof(keystate));
}
   11f80:	b009      	add	sp, #36	; 0x24
   11f82:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   11f86:	f06f 000c 	mvn.w	r0, #12
   11f8a:	e7f9      	b.n	11f80 <bt_kbds_send_keystate+0x2c>
   11f8c:	20001f28 	.word	0x20001f28
   11f90:	0002a240 	.word	0x0002a240

00011f94 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   11f94:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   11f96:	4c0a      	ldr	r4, [pc, #40]	; (11fc0 <crc8_ccitt+0x2c>)
   11f98:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   11f9a:	4291      	cmp	r1, r2
   11f9c:	d100      	bne.n	11fa0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   11f9e:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   11fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
   11fa4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   11fa6:	0903      	lsrs	r3, r0, #4
   11fa8:	5ce3      	ldrb	r3, [r4, r3]
   11faa:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   11fae:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   11fb0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   11fb4:	5ce0      	ldrb	r0, [r4, r3]
   11fb6:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   11fba:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   11fbc:	e7ed      	b.n	11f9a <crc8_ccitt+0x6>
   11fbe:	bf00      	nop
   11fc0:	0002abdf 	.word	0x0002abdf

00011fc4 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11fc4:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   11fc6:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   11fca:	2b02      	cmp	r3, #2
{
   11fcc:	b570      	push	{r4, r5, r6, lr}
   11fce:	4604      	mov	r4, r0
   11fd0:	460e      	mov	r6, r1
	notify->result = res;
   11fd2:	6081      	str	r1, [r0, #8]
	switch (method) {
   11fd4:	d010      	beq.n	11ff8 <sys_notify_finalize+0x34>
   11fd6:	2b03      	cmp	r3, #3
   11fd8:	d004      	beq.n	11fe4 <sys_notify_finalize+0x20>
   11fda:	2b01      	cmp	r3, #1
   11fdc:	d10f      	bne.n	11ffe <sys_notify_finalize+0x3a>
   11fde:	2500      	movs	r5, #0
   11fe0:	4628      	mov	r0, r5
   11fe2:	e001      	b.n	11fe8 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   11fe4:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   11fe6:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11fe8:	2300      	movs	r3, #0
   11fea:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   11fec:	b110      	cbz	r0, 11ff4 <sys_notify_finalize+0x30>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11fee:	4631      	mov	r1, r6
   11ff0:	f010 ff56 	bl	22ea0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11ff4:	4628      	mov	r0, r5
   11ff6:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   11ff8:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   11ffa:	2500      	movs	r5, #0
		break;
   11ffc:	e7f4      	b.n	11fe8 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   11ffe:	4905      	ldr	r1, [pc, #20]	; (12014 <sys_notify_finalize+0x50>)
   12000:	4805      	ldr	r0, [pc, #20]	; (12018 <sys_notify_finalize+0x54>)
   12002:	2245      	movs	r2, #69	; 0x45
   12004:	f014 fa7b 	bl	264fe <assert_print>
   12008:	4802      	ldr	r0, [pc, #8]	; (12014 <sys_notify_finalize+0x50>)
   1200a:	2145      	movs	r1, #69	; 0x45
   1200c:	f014 fa70 	bl	264f0 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   12010:	2500      	movs	r5, #0
   12012:	e7e8      	b.n	11fe6 <sys_notify_finalize+0x22>
   12014:	0002abef 	.word	0x0002abef
   12018:	0002aa75 	.word	0x0002aa75

0001201c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   1201c:	4b01      	ldr	r3, [pc, #4]	; (12024 <char_out+0x8>)
   1201e:	681b      	ldr	r3, [r3, #0]
   12020:	4718      	bx	r3
   12022:	bf00      	nop
   12024:	200004dc 	.word	0x200004dc

00012028 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   12028:	b507      	push	{r0, r1, r2, lr}
   1202a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1202c:	2100      	movs	r1, #0
   1202e:	4602      	mov	r2, r0
   12030:	9100      	str	r1, [sp, #0]
   12032:	4803      	ldr	r0, [pc, #12]	; (12040 <vprintk+0x18>)
   12034:	f000 fbae 	bl	12794 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   12038:	b003      	add	sp, #12
   1203a:	f85d fb04 	ldr.w	pc, [sp], #4
   1203e:	bf00      	nop
   12040:	0001201d 	.word	0x0001201d

00012044 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12044:	b530      	push	{r4, r5, lr}
   12046:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   12048:	2500      	movs	r5, #0
   1204a:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   1204e:	4604      	mov	r4, r0
   12050:	9500      	str	r5, [sp, #0]
   12052:	a903      	add	r1, sp, #12
   12054:	4805      	ldr	r0, [pc, #20]	; (1206c <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   12056:	9505      	str	r5, [sp, #20]
   12058:	f000 fb9c 	bl	12794 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   1205c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   12060:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12062:	bfb8      	it	lt
   12064:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12066:	b007      	add	sp, #28
   12068:	bd30      	pop	{r4, r5, pc}
   1206a:	bf00      	nop
   1206c:	000260f7 	.word	0x000260f7

00012070 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12074:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12078:	f01a 0f08 	tst.w	sl, #8
{
   1207c:	4604      	mov	r4, r0
   1207e:	4693      	mov	fp, r2
	if (processing) {
   12080:	d01c      	beq.n	120bc <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
   12082:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12084:	bf0c      	ite	eq
   12086:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1208a:	f04a 0a20 	orrne.w	sl, sl, #32
   1208e:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12092:	f104 0014 	add.w	r0, r4, #20
   12096:	f00e f987 	bl	203a8 <z_spin_unlock_valid>
   1209a:	b940      	cbnz	r0, 120ae <process_event+0x3e>
   1209c:	4992      	ldr	r1, [pc, #584]	; (122e8 <process_event+0x278>)
   1209e:	4893      	ldr	r0, [pc, #588]	; (122ec <process_event+0x27c>)
   120a0:	22b9      	movs	r2, #185	; 0xb9
   120a2:	f014 fa2c 	bl	264fe <assert_print>
   120a6:	4890      	ldr	r0, [pc, #576]	; (122e8 <process_event+0x278>)
   120a8:	21b9      	movs	r1, #185	; 0xb9
   120aa:	f014 fa21 	bl	264f0 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   120ae:	f38b 8811 	msr	BASEPRI, fp
   120b2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   120b6:	b003      	add	sp, #12
   120b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   120bc:	4f8c      	ldr	r7, [pc, #560]	; (122f0 <process_event+0x280>)
   120be:	f8df 822c 	ldr.w	r8, [pc, #556]	; 122ec <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   120c2:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
   120c6:	2902      	cmp	r1, #2
   120c8:	d106      	bne.n	120d8 <process_event+0x68>
			evt = process_recheck(mgr);
   120ca:	4620      	mov	r0, r4
   120cc:	f014 f840 	bl	26150 <process_recheck>
		if (evt == EVT_NOP) {
   120d0:	2800      	cmp	r0, #0
   120d2:	d0de      	beq.n	12092 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   120d4:	2801      	cmp	r0, #1
   120d6:	d163      	bne.n	121a0 <process_event+0x130>
			res = mgr->last_res;
   120d8:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   120dc:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   120de:	f1b9 0f00 	cmp.w	r9, #0
   120e2:	da19      	bge.n	12118 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   120e4:	2600      	movs	r6, #0
		*clients = mgr->clients;
   120e6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   120e8:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   120ec:	e9c4 6600 	strd	r6, r6, [r4]
   120f0:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   120f4:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   120f6:	8ba3      	ldrh	r3, [r4, #28]
   120f8:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   120fc:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   120fe:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
   12100:	d003      	beq.n	1210a <process_event+0x9a>
		if (do_monitors
   12102:	68a2      	ldr	r2, [r4, #8]
   12104:	2a00      	cmp	r2, #0
   12106:	f040 80f5 	bne.w	122f4 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
   1210a:	b915      	cbnz	r5, 12112 <process_event+0xa2>
		    || (transit != NULL)) {
   1210c:	2e00      	cmp	r6, #0
   1210e:	f000 812f 	beq.w	12370 <process_event+0x300>
   12112:	f04f 0a00 	mov.w	sl, #0
   12116:	e0ef      	b.n	122f8 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12118:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1211c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1211e:	2901      	cmp	r1, #1
   12120:	d820      	bhi.n	12164 <process_event+0xf4>
	list->head = NULL;
   12122:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12124:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   12128:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   1212a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1212c:	b29b      	uxth	r3, r3
	list->tail = NULL;
   1212e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12132:	d10a      	bne.n	1214a <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12134:	b13d      	cbz	r5, 12146 <process_event+0xd6>
   12136:	8be2      	ldrh	r2, [r4, #30]
   12138:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   1213a:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
   1213c:	3201      	adds	r2, #1
   1213e:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12140:	2900      	cmp	r1, #0
   12142:	d1fa      	bne.n	1213a <process_event+0xca>
   12144:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12146:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   1214a:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1214c:	4620      	mov	r0, r4
   1214e:	f013 ffff 	bl	26150 <process_recheck>
   12152:	4606      	mov	r6, r0
   12154:	2800      	cmp	r0, #0
   12156:	d0ce      	beq.n	120f6 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12158:	8ba3      	ldrh	r3, [r4, #28]
   1215a:	f043 0320 	orr.w	r3, r3, #32
   1215e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   12160:	2600      	movs	r6, #0
   12162:	e7c8      	b.n	120f6 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12164:	2a04      	cmp	r2, #4
   12166:	d10d      	bne.n	12184 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12168:	f023 0307 	bic.w	r3, r3, #7
   1216c:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1216e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   12170:	4620      	mov	r0, r4
   12172:	f013 ffed 	bl	26150 <process_recheck>
   12176:	4605      	mov	r5, r0
   12178:	b180      	cbz	r0, 1219c <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1217a:	f042 0220 	orr.w	r2, r2, #32
   1217e:	83a2      	strh	r2, [r4, #28]
   12180:	2500      	movs	r5, #0
   12182:	e7ed      	b.n	12160 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
   12184:	f240 121b 	movw	r2, #283	; 0x11b
   12188:	4639      	mov	r1, r7
   1218a:	4640      	mov	r0, r8
   1218c:	f014 f9b7 	bl	264fe <assert_print>
   12190:	f240 111b 	movw	r1, #283	; 0x11b
   12194:	4638      	mov	r0, r7
   12196:	f014 f9ab 	bl	264f0 <assert_post_action>
   1219a:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1219c:	462e      	mov	r6, r5
   1219e:	e7aa      	b.n	120f6 <process_event+0x86>
		} else if (evt == EVT_START) {
   121a0:	2803      	cmp	r0, #3
   121a2:	d131      	bne.n	12208 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   121a4:	f1ba 0f00 	cmp.w	sl, #0
   121a8:	d00a      	beq.n	121c0 <process_event+0x150>
   121aa:	4639      	mov	r1, r7
   121ac:	4640      	mov	r0, r8
   121ae:	f44f 72ab 	mov.w	r2, #342	; 0x156
   121b2:	f014 f9a4 	bl	264fe <assert_print>
   121b6:	f44f 71ab 	mov.w	r1, #342	; 0x156
   121ba:	4638      	mov	r0, r7
   121bc:	f014 f998 	bl	264f0 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   121c0:	6823      	ldr	r3, [r4, #0]
   121c2:	b953      	cbnz	r3, 121da <process_event+0x16a>
   121c4:	4639      	mov	r1, r7
   121c6:	4640      	mov	r0, r8
   121c8:	f240 1257 	movw	r2, #343	; 0x157
   121cc:	f014 f997 	bl	264fe <assert_print>
   121d0:	f240 1157 	movw	r1, #343	; 0x157
   121d4:	4638      	mov	r0, r7
   121d6:	f014 f98b 	bl	264f0 <assert_post_action>
			transit = mgr->transitions->start;
   121da:	6923      	ldr	r3, [r4, #16]
   121dc:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   121de:	b956      	cbnz	r6, 121f6 <process_event+0x186>
   121e0:	4639      	mov	r1, r7
   121e2:	4640      	mov	r0, r8
   121e4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   121e8:	f014 f989 	bl	264fe <assert_print>
   121ec:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   121f0:	4638      	mov	r0, r7
   121f2:	f014 f97d 	bl	264f0 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   121f6:	8ba3      	ldrh	r3, [r4, #28]
   121f8:	f023 0307 	bic.w	r3, r3, #7
   121fc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   12200:	83a3      	strh	r3, [r4, #28]
}
   12202:	2500      	movs	r5, #0
		res = 0;
   12204:	46a9      	mov	r9, r5
}
   12206:	e776      	b.n	120f6 <process_event+0x86>
		} else if (evt == EVT_STOP) {
   12208:	2804      	cmp	r0, #4
   1220a:	d12e      	bne.n	1226a <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   1220c:	f1ba 0f02 	cmp.w	sl, #2
   12210:	d00a      	beq.n	12228 <process_event+0x1b8>
   12212:	4639      	mov	r1, r7
   12214:	4640      	mov	r0, r8
   12216:	f240 125d 	movw	r2, #349	; 0x15d
   1221a:	f014 f970 	bl	264fe <assert_print>
   1221e:	f240 115d 	movw	r1, #349	; 0x15d
   12222:	4638      	mov	r0, r7
   12224:	f014 f964 	bl	264f0 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   12228:	8be3      	ldrh	r3, [r4, #30]
   1222a:	b153      	cbz	r3, 12242 <process_event+0x1d2>
   1222c:	4639      	mov	r1, r7
   1222e:	4640      	mov	r0, r8
   12230:	f44f 72af 	mov.w	r2, #350	; 0x15e
   12234:	f014 f963 	bl	264fe <assert_print>
   12238:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1223c:	4638      	mov	r0, r7
   1223e:	f014 f957 	bl	264f0 <assert_post_action>
			transit = mgr->transitions->stop;
   12242:	6923      	ldr	r3, [r4, #16]
   12244:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   12246:	b956      	cbnz	r6, 1225e <process_event+0x1ee>
   12248:	4639      	mov	r1, r7
   1224a:	4640      	mov	r0, r8
   1224c:	f240 1261 	movw	r2, #353	; 0x161
   12250:	f014 f955 	bl	264fe <assert_print>
   12254:	f240 1161 	movw	r1, #353	; 0x161
   12258:	4638      	mov	r0, r7
   1225a:	f014 f949 	bl	264f0 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1225e:	8ba3      	ldrh	r3, [r4, #28]
   12260:	f023 0307 	bic.w	r3, r3, #7
   12264:	f043 0304 	orr.w	r3, r3, #4
   12268:	e7ca      	b.n	12200 <process_event+0x190>
		} else if (evt == EVT_RESET) {
   1226a:	2805      	cmp	r0, #5
   1226c:	d12e      	bne.n	122cc <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1226e:	f1ba 0f01 	cmp.w	sl, #1
   12272:	d00a      	beq.n	1228a <process_event+0x21a>
   12274:	4639      	mov	r1, r7
   12276:	4640      	mov	r0, r8
   12278:	f44f 72b2 	mov.w	r2, #356	; 0x164
   1227c:	f014 f93f 	bl	264fe <assert_print>
   12280:	f44f 71b2 	mov.w	r1, #356	; 0x164
   12284:	4638      	mov	r0, r7
   12286:	f014 f933 	bl	264f0 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1228a:	6823      	ldr	r3, [r4, #0]
   1228c:	b953      	cbnz	r3, 122a4 <process_event+0x234>
   1228e:	4639      	mov	r1, r7
   12290:	4640      	mov	r0, r8
   12292:	f240 1265 	movw	r2, #357	; 0x165
   12296:	f014 f932 	bl	264fe <assert_print>
   1229a:	f240 1165 	movw	r1, #357	; 0x165
   1229e:	4638      	mov	r0, r7
   122a0:	f014 f926 	bl	264f0 <assert_post_action>
			transit = mgr->transitions->reset;
   122a4:	6923      	ldr	r3, [r4, #16]
   122a6:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   122a8:	b956      	cbnz	r6, 122c0 <process_event+0x250>
   122aa:	4639      	mov	r1, r7
   122ac:	4640      	mov	r0, r8
   122ae:	f44f 72b4 	mov.w	r2, #360	; 0x168
   122b2:	f014 f924 	bl	264fe <assert_print>
   122b6:	f44f 71b4 	mov.w	r1, #360	; 0x168
   122ba:	4638      	mov	r0, r7
   122bc:	f014 f918 	bl	264f0 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   122c0:	8ba3      	ldrh	r3, [r4, #28]
   122c2:	f023 0307 	bic.w	r3, r3, #7
   122c6:	f043 0305 	orr.w	r3, r3, #5
   122ca:	e799      	b.n	12200 <process_event+0x190>
			__ASSERT_NO_MSG(false);
   122cc:	f240 126b 	movw	r2, #363	; 0x16b
   122d0:	4639      	mov	r1, r7
   122d2:	4640      	mov	r0, r8
   122d4:	f014 f913 	bl	264fe <assert_print>
   122d8:	2500      	movs	r5, #0
   122da:	f240 116b 	movw	r1, #363	; 0x16b
   122de:	4638      	mov	r0, r7
   122e0:	f014 f906 	bl	264f0 <assert_post_action>
		onoff_transition_fn transit = NULL;
   122e4:	462e      	mov	r6, r5
   122e6:	e78d      	b.n	12204 <process_event+0x194>
   122e8:	0002ac34 	.word	0x0002ac34
   122ec:	0002aa75 	.word	0x0002aa75
   122f0:	0002ac12 	.word	0x0002ac12
				   && !sys_slist_is_empty(&mgr->monitors);
   122f4:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   122f8:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   122fc:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   122fe:	f104 0314 	add.w	r3, r4, #20
   12302:	4618      	mov	r0, r3
   12304:	9301      	str	r3, [sp, #4]
   12306:	f00e f84f 	bl	203a8 <z_spin_unlock_valid>
   1230a:	b940      	cbnz	r0, 1231e <process_event+0x2ae>
   1230c:	4931      	ldr	r1, [pc, #196]	; (123d4 <process_event+0x364>)
   1230e:	4640      	mov	r0, r8
   12310:	22b9      	movs	r2, #185	; 0xb9
   12312:	f014 f8f4 	bl	264fe <assert_print>
   12316:	482f      	ldr	r0, [pc, #188]	; (123d4 <process_event+0x364>)
   12318:	21b9      	movs	r1, #185	; 0xb9
   1231a:	f014 f8e9 	bl	264f0 <assert_post_action>
   1231e:	f38b 8811 	msr	BASEPRI, fp
   12322:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12326:	f1ba 0f00 	cmp.w	sl, #0
   1232a:	d130      	bne.n	1238e <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
   1232c:	2d00      	cmp	r5, #0
   1232e:	d140      	bne.n	123b2 <process_event+0x342>
			if (transit != NULL) {
   12330:	b116      	cbz	r6, 12338 <process_event+0x2c8>
				transit(mgr, transition_complete);
   12332:	4929      	ldr	r1, [pc, #164]	; (123d8 <process_event+0x368>)
   12334:	4620      	mov	r0, r4
   12336:	47b0      	blx	r6
	__asm__ volatile(
   12338:	f04f 0340 	mov.w	r3, #64	; 0x40
   1233c:	f3ef 8b11 	mrs	fp, BASEPRI
   12340:	f383 8812 	msr	BASEPRI_MAX, r3
   12344:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12348:	9801      	ldr	r0, [sp, #4]
   1234a:	f00e f81f 	bl	2038c <z_spin_lock_valid>
   1234e:	b940      	cbnz	r0, 12362 <process_event+0x2f2>
   12350:	4920      	ldr	r1, [pc, #128]	; (123d4 <process_event+0x364>)
   12352:	4640      	mov	r0, r8
   12354:	228e      	movs	r2, #142	; 0x8e
   12356:	f014 f8d2 	bl	264fe <assert_print>
   1235a:	481e      	ldr	r0, [pc, #120]	; (123d4 <process_event+0x364>)
   1235c:	218e      	movs	r1, #142	; 0x8e
   1235e:	f014 f8c7 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   12362:	9801      	ldr	r0, [sp, #4]
   12364:	f00e f830 	bl	203c8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12368:	8ba3      	ldrh	r3, [r4, #28]
   1236a:	f023 0308 	bic.w	r3, r3, #8
   1236e:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12370:	8ba3      	ldrh	r3, [r4, #28]
   12372:	06da      	lsls	r2, r3, #27
   12374:	d525      	bpl.n	123c2 <process_event+0x352>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12376:	f023 0310 	bic.w	r3, r3, #16
   1237a:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   1237c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1237e:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
   12382:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
   12386:	2900      	cmp	r1, #0
   12388:	f47f ae9d 	bne.w	120c6 <process_event+0x56>
out:
   1238c:	e681      	b.n	12092 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1238e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12390:	2900      	cmp	r1, #0
   12392:	d0cb      	beq.n	1232c <process_event+0x2bc>
	return node->next;
   12394:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
   12398:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1239c:	9a00      	ldr	r2, [sp, #0]
   1239e:	464b      	mov	r3, r9
   123a0:	4620      	mov	r0, r4
   123a2:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   123a4:	f1ba 0f00 	cmp.w	sl, #0
   123a8:	d0c0      	beq.n	1232c <process_event+0x2bc>
   123aa:	4651      	mov	r1, sl
   123ac:	f8da a000 	ldr.w	sl, [sl]
   123b0:	e7f2      	b.n	12398 <process_event+0x328>
   123b2:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   123b4:	9a00      	ldr	r2, [sp, #0]
   123b6:	682d      	ldr	r5, [r5, #0]
   123b8:	464b      	mov	r3, r9
   123ba:	4620      	mov	r0, r4
   123bc:	f013 fee4 	bl	26188 <notify_one>
   123c0:	e7b4      	b.n	1232c <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   123c2:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   123c6:	bf1e      	ittt	ne
   123c8:	f023 0320 	bicne.w	r3, r3, #32
   123cc:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   123ce:	2102      	movne	r1, #2
   123d0:	e7d5      	b.n	1237e <process_event+0x30e>
   123d2:	bf00      	nop
   123d4:	0002ac34 	.word	0x0002ac34
   123d8:	000123dd 	.word	0x000123dd

000123dc <transition_complete>:
{
   123dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   123de:	4604      	mov	r4, r0
   123e0:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   123e2:	f100 0614 	add.w	r6, r0, #20
   123e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   123ea:	f3ef 8711 	mrs	r7, BASEPRI
   123ee:	f383 8812 	msr	BASEPRI_MAX, r3
   123f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   123f6:	4630      	mov	r0, r6
   123f8:	f00d ffc8 	bl	2038c <z_spin_lock_valid>
   123fc:	b940      	cbnz	r0, 12410 <transition_complete+0x34>
   123fe:	490a      	ldr	r1, [pc, #40]	; (12428 <transition_complete+0x4c>)
   12400:	480a      	ldr	r0, [pc, #40]	; (1242c <transition_complete+0x50>)
   12402:	228e      	movs	r2, #142	; 0x8e
   12404:	f014 f87b 	bl	264fe <assert_print>
   12408:	4807      	ldr	r0, [pc, #28]	; (12428 <transition_complete+0x4c>)
   1240a:	218e      	movs	r1, #142	; 0x8e
   1240c:	f014 f870 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   12410:	4630      	mov	r0, r6
   12412:	f00d ffd9 	bl	203c8 <z_spin_lock_set_owner>
	mgr->last_res = res;
   12416:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   12418:	463a      	mov	r2, r7
   1241a:	4620      	mov	r0, r4
   1241c:	2101      	movs	r1, #1
}
   1241e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   12422:	f7ff be25 	b.w	12070 <process_event>
   12426:	bf00      	nop
   12428:	0002ac34 	.word	0x0002ac34
   1242c:	0002aa75 	.word	0x0002aa75

00012430 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   12430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12434:	4604      	mov	r4, r0
   12436:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   12438:	f013 febc 	bl	261b4 <validate_args>

	if (rv < 0) {
   1243c:	1e05      	subs	r5, r0, #0
   1243e:	db54      	blt.n	124ea <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   12440:	f104 0914 	add.w	r9, r4, #20
   12444:	f04f 0340 	mov.w	r3, #64	; 0x40
   12448:	f3ef 8a11 	mrs	sl, BASEPRI
   1244c:	f383 8812 	msr	BASEPRI_MAX, r3
   12450:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12454:	4648      	mov	r0, r9
   12456:	f00d ff99 	bl	2038c <z_spin_lock_valid>
   1245a:	b940      	cbnz	r0, 1246e <onoff_request+0x3e>
   1245c:	4933      	ldr	r1, [pc, #204]	; (1252c <onoff_request+0xfc>)
   1245e:	4834      	ldr	r0, [pc, #208]	; (12530 <onoff_request+0x100>)
   12460:	228e      	movs	r2, #142	; 0x8e
   12462:	f014 f84c 	bl	264fe <assert_print>
   12466:	4831      	ldr	r0, [pc, #196]	; (1252c <onoff_request+0xfc>)
   12468:	218e      	movs	r1, #142	; 0x8e
   1246a:	f014 f841 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   1246e:	4648      	mov	r0, r9
   12470:	f00d ffaa 	bl	203c8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   12474:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12476:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   12478:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1247c:	428b      	cmp	r3, r1
   1247e:	f002 0607 	and.w	r6, r2, #7
   12482:	d04a      	beq.n	1251a <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   12484:	2e02      	cmp	r6, #2
   12486:	d11f      	bne.n	124c8 <onoff_request+0x98>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   12488:	3301      	adds	r3, #1
   1248a:	83e3      	strh	r3, [r4, #30]
	rv = state;
   1248c:	4635      	mov	r5, r6
		notify = true;
   1248e:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12492:	4648      	mov	r0, r9
   12494:	f00d ff88 	bl	203a8 <z_spin_unlock_valid>
   12498:	b940      	cbnz	r0, 124ac <onoff_request+0x7c>
   1249a:	4924      	ldr	r1, [pc, #144]	; (1252c <onoff_request+0xfc>)
   1249c:	4824      	ldr	r0, [pc, #144]	; (12530 <onoff_request+0x100>)
   1249e:	22b9      	movs	r2, #185	; 0xb9
   124a0:	f014 f82d 	bl	264fe <assert_print>
   124a4:	4821      	ldr	r0, [pc, #132]	; (1252c <onoff_request+0xfc>)
   124a6:	21b9      	movs	r1, #185	; 0xb9
   124a8:	f014 f822 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   124ac:	f38a 8811 	msr	BASEPRI, sl
   124b0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   124b4:	f1b8 0f00 	cmp.w	r8, #0
   124b8:	d017      	beq.n	124ea <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   124ba:	2300      	movs	r3, #0
   124bc:	4632      	mov	r2, r6
   124be:	4639      	mov	r1, r7
   124c0:	4620      	mov	r0, r4
   124c2:	f013 fe61 	bl	26188 <notify_one>
   124c6:	e010      	b.n	124ea <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   124c8:	0793      	lsls	r3, r2, #30
   124ca:	d001      	beq.n	124d0 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   124cc:	2e06      	cmp	r6, #6
   124ce:	d10f      	bne.n	124f0 <onoff_request+0xc0>
	parent->next = child;
   124d0:	2300      	movs	r3, #0
   124d2:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   124d4:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   124d6:	b9eb      	cbnz	r3, 12514 <onoff_request+0xe4>
	list->head = node;
   124d8:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   124dc:	4635      	mov	r5, r6
   124de:	b9f6      	cbnz	r6, 1251e <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   124e0:	4652      	mov	r2, sl
   124e2:	2102      	movs	r1, #2
   124e4:	4620      	mov	r0, r4
   124e6:	f7ff fdc3 	bl	12070 <process_event>
		}
	}

	return rv;
}
   124ea:	4628      	mov	r0, r5
   124ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   124f0:	2e05      	cmp	r6, #5
   124f2:	d017      	beq.n	12524 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   124f4:	2e01      	cmp	r6, #1
   124f6:	d00a      	beq.n	1250e <onoff_request+0xde>
   124f8:	490e      	ldr	r1, [pc, #56]	; (12534 <onoff_request+0x104>)
   124fa:	480d      	ldr	r0, [pc, #52]	; (12530 <onoff_request+0x100>)
   124fc:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   12500:	f013 fffd 	bl	264fe <assert_print>
   12504:	480b      	ldr	r0, [pc, #44]	; (12534 <onoff_request+0x104>)
   12506:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1250a:	f013 fff1 	bl	264f0 <assert_post_action>
		rv = -EIO;
   1250e:	f06f 0504 	mvn.w	r5, #4
   12512:	e004      	b.n	1251e <onoff_request+0xee>
	parent->next = child;
   12514:	601f      	str	r7, [r3, #0]
	list->tail = node;
   12516:	6067      	str	r7, [r4, #4]
}
   12518:	e7e0      	b.n	124dc <onoff_request+0xac>
		rv = -EAGAIN;
   1251a:	f06f 050a 	mvn.w	r5, #10
   1251e:	f04f 0800 	mov.w	r8, #0
   12522:	e7b6      	b.n	12492 <onoff_request+0x62>
		rv = -ENOTSUP;
   12524:	f06f 0585 	mvn.w	r5, #133	; 0x85
   12528:	e7f9      	b.n	1251e <onoff_request+0xee>
   1252a:	bf00      	nop
   1252c:	0002ac34 	.word	0x0002ac34
   12530:	0002aa75 	.word	0x0002aa75
   12534:	0002ac12 	.word	0x0002ac12

00012538 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12538:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   1253a:	b379      	cbz	r1, 1259c <sys_heap_free+0x64>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   1253c:	6805      	ldr	r5, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1253e:	1f0c      	subs	r4, r1, #4
   12540:	1b64      	subs	r4, r4, r5
   12542:	08e6      	lsrs	r6, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   12544:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   12548:	442c      	add	r4, r5
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1254a:	8863      	ldrh	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   1254c:	07db      	lsls	r3, r3, #31
   1254e:	d408      	bmi.n	12562 <sys_heap_free+0x2a>
   12550:	4913      	ldr	r1, [pc, #76]	; (125a0 <sys_heap_free+0x68>)
   12552:	4814      	ldr	r0, [pc, #80]	; (125a4 <sys_heap_free+0x6c>)
   12554:	22ac      	movs	r2, #172	; 0xac
   12556:	f013 ffd2 	bl	264fe <assert_print>
   1255a:	4811      	ldr	r0, [pc, #68]	; (125a0 <sys_heap_free+0x68>)
   1255c:	21ac      	movs	r1, #172	; 0xac
   1255e:	f013 ffc7 	bl	264f0 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   12562:	4631      	mov	r1, r6
   12564:	4628      	mov	r0, r5
   12566:	f013 fe51 	bl	2620c <chunk_size>
   1256a:	4430      	add	r0, r6
		return ((uint16_t *)cmem)[f];
   1256c:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   12570:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   12572:	4286      	cmp	r6, r0
   12574:	d008      	beq.n	12588 <sys_heap_free+0x50>
   12576:	490a      	ldr	r1, [pc, #40]	; (125a0 <sys_heap_free+0x68>)
   12578:	480a      	ldr	r0, [pc, #40]	; (125a4 <sys_heap_free+0x6c>)
   1257a:	22b4      	movs	r2, #180	; 0xb4
   1257c:	f013 ffbf 	bl	264fe <assert_print>
   12580:	4807      	ldr	r0, [pc, #28]	; (125a0 <sys_heap_free+0x68>)
   12582:	21b4      	movs	r1, #180	; 0xb4
   12584:	f013 ffb4 	bl	264f0 <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   12588:	8863      	ldrh	r3, [r4, #2]
   1258a:	f023 0301 	bic.w	r3, r3, #1
   1258e:	8063      	strh	r3, [r4, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   12590:	4631      	mov	r1, r6
   12592:	4628      	mov	r0, r5
}
   12594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   12598:	f013 bef4 	b.w	26384 <free_chunk>
}
   1259c:	bd70      	pop	{r4, r5, r6, pc}
   1259e:	bf00      	nop
   125a0:	0002ac61 	.word	0x0002ac61
   125a4:	0002aa75 	.word	0x0002aa75

000125a8 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   125a8:	424b      	negs	r3, r1
{
   125aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   125ae:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   125b2:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
   125b6:	6806      	ldr	r6, [r0, #0]
{
   125b8:	4614      	mov	r4, r2
	if (align != rew) {
   125ba:	d01b      	beq.n	125f4 <sys_heap_aligned_alloc+0x4c>
		return false;
   125bc:	2f04      	cmp	r7, #4
   125be:	463d      	mov	r5, r7
   125c0:	46b9      	mov	r9, r7
   125c2:	bf28      	it	cs
   125c4:	2504      	movcs	r5, #4
		align -= rew;
   125c6:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   125c8:	f107 3aff 	add.w	sl, r7, #4294967295
   125cc:	ea1a 0f07 	tst.w	sl, r7
   125d0:	d00a      	beq.n	125e8 <sys_heap_aligned_alloc+0x40>
   125d2:	4931      	ldr	r1, [pc, #196]	; (12698 <sys_heap_aligned_alloc+0xf0>)
   125d4:	4831      	ldr	r0, [pc, #196]	; (1269c <sys_heap_aligned_alloc+0xf4>)
   125d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   125da:	f013 ff90 	bl	264fe <assert_print>
   125de:	482e      	ldr	r0, [pc, #184]	; (12698 <sys_heap_aligned_alloc+0xf0>)
   125e0:	f44f 71a0 	mov.w	r1, #320	; 0x140
   125e4:	f013 ff84 	bl	264f0 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   125e8:	b97c      	cbnz	r4, 1260a <sys_heap_aligned_alloc+0x62>
		return NULL;
   125ea:	f04f 0900 	mov.w	r9, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   125ee:	4648      	mov	r0, r9
   125f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   125f4:	2904      	cmp	r1, #4
   125f6:	d804      	bhi.n	12602 <sys_heap_aligned_alloc+0x5a>
}
   125f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   125fc:	4611      	mov	r1, r2
   125fe:	f013 bef2 	b.w	263e6 <sys_heap_alloc>
		rew = 0;
   12602:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   12606:	2504      	movs	r5, #4
   12608:	e7de      	b.n	125c8 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1260a:	68b3      	ldr	r3, [r6, #8]
   1260c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   12610:	d9eb      	bls.n	125ea <sys_heap_aligned_alloc+0x42>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12612:	f104 010b 	add.w	r1, r4, #11
   12616:	4439      	add	r1, r7
   12618:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1261a:	08c9      	lsrs	r1, r1, #3
   1261c:	4630      	mov	r0, r6
   1261e:	f013 fe4b 	bl	262b8 <alloc_chunk>
	if (c0 == 0) {
   12622:	4680      	mov	r8, r0
   12624:	2800      	cmp	r0, #0
   12626:	d0e0      	beq.n	125ea <sys_heap_aligned_alloc+0x42>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   12628:	f109 0504 	add.w	r5, r9, #4
   1262c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   12630:	4435      	add	r5, r6
   12632:	4455      	add	r5, sl
   12634:	427f      	negs	r7, r7
   12636:	402f      	ands	r7, r5
   12638:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1263c:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1263e:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12642:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12644:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12646:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1264a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1264c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12650:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   12654:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   12658:	d208      	bcs.n	1266c <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c0, c);
   1265a:	4601      	mov	r1, r0
   1265c:	463a      	mov	r2, r7
   1265e:	4630      	mov	r0, r6
   12660:	f013 fe76 	bl	26350 <split_chunks>
		free_list_add(h, c0);
   12664:	4641      	mov	r1, r8
   12666:	4630      	mov	r0, r6
   12668:	f013 fdd5 	bl	26216 <free_list_add>
	return c + chunk_size(h, c);
   1266c:	4639      	mov	r1, r7
   1266e:	4630      	mov	r0, r6
   12670:	f013 fdcc 	bl	2620c <chunk_size>
   12674:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   12676:	4284      	cmp	r4, r0
   12678:	d207      	bcs.n	1268a <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c, c_end);
   1267a:	4630      	mov	r0, r6
   1267c:	4622      	mov	r2, r4
   1267e:	f013 fe67 	bl	26350 <split_chunks>
		free_list_add(h, c_end);
   12682:	4621      	mov	r1, r4
   12684:	4630      	mov	r0, r6
   12686:	f013 fdc6 	bl	26216 <free_list_add>
	void *cmem = &buf[c];
   1268a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1268e:	8873      	ldrh	r3, [r6, #2]
   12690:	f043 0301 	orr.w	r3, r3, #1
   12694:	8073      	strh	r3, [r6, #2]
   12696:	e7aa      	b.n	125ee <sys_heap_aligned_alloc+0x46>
   12698:	0002ac61 	.word	0x0002ac61
   1269c:	0002aa75 	.word	0x0002aa75

000126a0 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   126a0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   126a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   126a8:	4604      	mov	r4, r0
   126aa:	460e      	mov	r6, r1
   126ac:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   126ae:	d35e      	bcc.n	1276e <sys_heap_init+0xce>
   126b0:	4936      	ldr	r1, [pc, #216]	; (1278c <sys_heap_init+0xec>)
   126b2:	4837      	ldr	r0, [pc, #220]	; (12790 <sys_heap_init+0xf0>)
   126b4:	f240 12e3 	movw	r2, #483	; 0x1e3
   126b8:	f013 ff21 	bl	264fe <assert_print>
   126bc:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   126c0:	4832      	ldr	r0, [pc, #200]	; (1278c <sys_heap_init+0xec>)
   126c2:	f013 ff15 	bl	264f0 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   126c6:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   126c8:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   126ca:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   126cc:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   126d0:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   126d4:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   126d6:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   126d8:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   126dc:	d80a      	bhi.n	126f4 <sys_heap_init+0x54>
   126de:	492b      	ldr	r1, [pc, #172]	; (1278c <sys_heap_init+0xec>)
   126e0:	482b      	ldr	r0, [pc, #172]	; (12790 <sys_heap_init+0xf0>)
   126e2:	f240 12f3 	movw	r2, #499	; 0x1f3
   126e6:	f013 ff0a 	bl	264fe <assert_print>
   126ea:	4828      	ldr	r0, [pc, #160]	; (1278c <sys_heap_init+0xec>)
   126ec:	f240 11f3 	movw	r1, #499	; 0x1f3
   126f0:	f013 fefe 	bl	264f0 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   126f4:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   126f6:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   126fa:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   126fe:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
   12702:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12704:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   12706:	2300      	movs	r3, #0
   12708:	08e4      	lsrs	r4, r4, #3
   1270a:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1270c:	1c63      	adds	r3, r4, #1
   1270e:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   12710:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12712:	d90a      	bls.n	1272a <sys_heap_init+0x8a>
   12714:	491d      	ldr	r1, [pc, #116]	; (1278c <sys_heap_init+0xec>)
   12716:	481e      	ldr	r0, [pc, #120]	; (12790 <sys_heap_init+0xf0>)
   12718:	f44f 7201 	mov.w	r2, #516	; 0x204
   1271c:	f013 feef 	bl	264fe <assert_print>
   12720:	481a      	ldr	r0, [pc, #104]	; (1278c <sys_heap_init+0xec>)
   12722:	f44f 7101 	mov.w	r1, #516	; 0x204
   12726:	f013 fee3 	bl	264f0 <assert_post_action>
   1272a:	f105 0310 	add.w	r3, r5, #16
   1272e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   12732:	2200      	movs	r2, #0

	for (int i = 0; i < nb_buckets; i++) {
   12734:	4598      	cmp	r8, r3
   12736:	d125      	bne.n	12784 <sys_heap_init+0xe4>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12738:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1273a:	f043 0301 	orr.w	r3, r3, #1
   1273e:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
   12740:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   12744:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12746:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
   12748:	802a      	strh	r2, [r5, #0]
   1274a:	8048      	strh	r0, [r1, #2]
   1274c:	19a9      	adds	r1, r5, r6
   1274e:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
   12752:	804a      	strh	r2, [r1, #2]
   12754:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
   12756:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1275a:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1275c:	885a      	ldrh	r2, [r3, #2]
   1275e:	f042 0201 	orr.w	r2, r2, #1
   12762:	4628      	mov	r0, r5
   12764:	805a      	strh	r2, [r3, #2]
}
   12766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   1276a:	f013 bd54 	b.w	26216 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1276e:	2a04      	cmp	r2, #4
   12770:	d8a9      	bhi.n	126c6 <sys_heap_init+0x26>
   12772:	4906      	ldr	r1, [pc, #24]	; (1278c <sys_heap_init+0xec>)
   12774:	4806      	ldr	r0, [pc, #24]	; (12790 <sys_heap_init+0xf0>)
   12776:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   1277a:	f013 fec0 	bl	264fe <assert_print>
   1277e:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   12782:	e79d      	b.n	126c0 <sys_heap_init+0x20>
		h->buckets[i].next = 0;
   12784:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
   12788:	e7d4      	b.n	12734 <sys_heap_init+0x94>
   1278a:	bf00      	nop
   1278c:	0002ac61 	.word	0x0002ac61
   12790:	0002aa75 	.word	0x0002aa75

00012794 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   12794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12798:	b091      	sub	sp, #68	; 0x44
   1279a:	468b      	mov	fp, r1
   1279c:	9002      	str	r0, [sp, #8]
   1279e:	4692      	mov	sl, r2
   127a0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   127a2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   127a4:	f89a 0000 	ldrb.w	r0, [sl]
   127a8:	b908      	cbnz	r0, 127ae <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   127aa:	4628      	mov	r0, r5
   127ac:	e363      	b.n	12e76 <z_cbvprintf_impl+0x6e2>
		if (*fp != '%') {
   127ae:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   127b0:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
   127b4:	d007      	beq.n	127c6 <z_cbvprintf_impl+0x32>
			OUTC('%');
   127b6:	9b02      	ldr	r3, [sp, #8]
   127b8:	4659      	mov	r1, fp
   127ba:	4798      	blx	r3
   127bc:	2800      	cmp	r0, #0
   127be:	f2c0 835a 	blt.w	12e76 <z_cbvprintf_impl+0x6e2>
   127c2:	3501      	adds	r5, #1
			break;
   127c4:	e212      	b.n	12bec <z_cbvprintf_impl+0x458>
		} state = {
   127c6:	2218      	movs	r2, #24
   127c8:	2100      	movs	r1, #0
   127ca:	a80a      	add	r0, sp, #40	; 0x28
   127cc:	f014 fd36 	bl	2723c <memset>
	if (*sp == '%') {
   127d0:	f89a 3001 	ldrb.w	r3, [sl, #1]
   127d4:	2b25      	cmp	r3, #37	; 0x25
   127d6:	d078      	beq.n	128ca <z_cbvprintf_impl+0x136>
   127d8:	2200      	movs	r2, #0
   127da:	4610      	mov	r0, r2
   127dc:	4696      	mov	lr, r2
   127de:	4694      	mov	ip, r2
   127e0:	4616      	mov	r6, r2
   127e2:	4639      	mov	r1, r7
		switch (*sp) {
   127e4:	f817 3b01 	ldrb.w	r3, [r7], #1
   127e8:	2b2b      	cmp	r3, #43	; 0x2b
   127ea:	f000 809d 	beq.w	12928 <z_cbvprintf_impl+0x194>
   127ee:	f200 8094 	bhi.w	1291a <z_cbvprintf_impl+0x186>
   127f2:	2b20      	cmp	r3, #32
   127f4:	f000 809b 	beq.w	1292e <z_cbvprintf_impl+0x19a>
   127f8:	2b23      	cmp	r3, #35	; 0x23
   127fa:	f000 809b 	beq.w	12934 <z_cbvprintf_impl+0x1a0>
   127fe:	b12e      	cbz	r6, 1280c <z_cbvprintf_impl+0x78>
   12800:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   12804:	f046 0604 	orr.w	r6, r6, #4
   12808:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   1280c:	f1bc 0f00 	cmp.w	ip, #0
   12810:	d005      	beq.n	1281e <z_cbvprintf_impl+0x8a>
   12812:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   12816:	f046 0608 	orr.w	r6, r6, #8
   1281a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   1281e:	f1be 0f00 	cmp.w	lr, #0
   12822:	d005      	beq.n	12830 <z_cbvprintf_impl+0x9c>
   12824:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   12828:	f046 0610 	orr.w	r6, r6, #16
   1282c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   12830:	b128      	cbz	r0, 1283e <z_cbvprintf_impl+0xaa>
   12832:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   12836:	f040 0020 	orr.w	r0, r0, #32
   1283a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1283e:	b12a      	cbz	r2, 1284c <z_cbvprintf_impl+0xb8>
   12840:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12848:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   1284c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12850:	f002 0044 	and.w	r0, r2, #68	; 0x44
   12854:	2844      	cmp	r0, #68	; 0x44
   12856:	d103      	bne.n	12860 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   12858:	f36f 1286 	bfc	r2, #6, #1
   1285c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   12860:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   12864:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   12866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1286a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1286e:	d17b      	bne.n	12968 <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
   12870:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12874:	f042 0201 	orr.w	r2, r2, #1
			++sp;
   12878:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   1287a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   1287e:	781a      	ldrb	r2, [r3, #0]
   12880:	2a2e      	cmp	r2, #46	; 0x2e
   12882:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12886:	bf0c      	ite	eq
   12888:	2101      	moveq	r1, #1
   1288a:	2100      	movne	r1, #0
   1288c:	f361 0241 	bfi	r2, r1, #1, #1
   12890:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   12894:	d174      	bne.n	12980 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
   12896:	785a      	ldrb	r2, [r3, #1]
   12898:	2a2a      	cmp	r2, #42	; 0x2a
   1289a:	d06a      	beq.n	12972 <z_cbvprintf_impl+0x1de>
	++sp;
   1289c:	3301      	adds	r3, #1
	size_t val = 0;
   1289e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   128a0:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   128a2:	4618      	mov	r0, r3
   128a4:	f810 2b01 	ldrb.w	r2, [r0], #1
   128a8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   128ac:	2f09      	cmp	r7, #9
   128ae:	f240 808e 	bls.w	129ce <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   128b2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   128b6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   128b8:	f3c2 0040 	ubfx	r0, r2, #1, #1
   128bc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   128c0:	f361 0241 	bfi	r2, r1, #1, #1
   128c4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   128c8:	e05a      	b.n	12980 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
   128ca:	f10a 0702 	add.w	r7, sl, #2
   128ce:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   128d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   128d6:	07d9      	lsls	r1, r3, #31
   128d8:	f140 8149 	bpl.w	12b6e <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
   128dc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   128e0:	f1b9 0f00 	cmp.w	r9, #0
   128e4:	da07      	bge.n	128f6 <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
   128e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   128ea:	f042 0204 	orr.w	r2, r2, #4
   128ee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   128f2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   128f6:	075a      	lsls	r2, r3, #29
   128f8:	f140 8142 	bpl.w	12b80 <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
   128fc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   12900:	f1b8 0f00 	cmp.w	r8, #0
   12904:	f280 8141 	bge.w	12b8a <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
   12908:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1290c:	f36f 0341 	bfc	r3, #1, #1
   12910:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   12914:	f04f 38ff 	mov.w	r8, #4294967295
   12918:	e137      	b.n	12b8a <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
   1291a:	2b2d      	cmp	r3, #45	; 0x2d
   1291c:	d00c      	beq.n	12938 <z_cbvprintf_impl+0x1a4>
   1291e:	2b30      	cmp	r3, #48	; 0x30
   12920:	f47f af6d 	bne.w	127fe <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
   12924:	2201      	movs	r2, #1
	} while (loop);
   12926:	e75c      	b.n	127e2 <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
   12928:	f04f 0c01 	mov.w	ip, #1
   1292c:	e759      	b.n	127e2 <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
   1292e:	f04f 0e01 	mov.w	lr, #1
   12932:	e756      	b.n	127e2 <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
   12934:	2001      	movs	r0, #1
   12936:	e754      	b.n	127e2 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
   12938:	2601      	movs	r6, #1
   1293a:	e752      	b.n	127e2 <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
   1293c:	fb0c 0202 	mla	r2, ip, r2, r0
   12940:	3a30      	subs	r2, #48	; 0x30
   12942:	4633      	mov	r3, r6
   12944:	461e      	mov	r6, r3
   12946:	f816 0b01 	ldrb.w	r0, [r6], #1
   1294a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1294e:	2f09      	cmp	r7, #9
   12950:	d9f4      	bls.n	1293c <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
   12952:	4299      	cmp	r1, r3
   12954:	d093      	beq.n	1287e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   12956:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   1295a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   1295c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1295e:	f362 0141 	bfi	r1, r2, #1, #1
   12962:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   12966:	e78a      	b.n	1287e <z_cbvprintf_impl+0xea>
   12968:	460b      	mov	r3, r1
	size_t val = 0;
   1296a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1296c:	f04f 0c0a 	mov.w	ip, #10
   12970:	e7e8      	b.n	12944 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
   12972:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12976:	f042 0204 	orr.w	r2, r2, #4
   1297a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   1297e:	3302      	adds	r3, #2
	switch (*sp) {
   12980:	461f      	mov	r7, r3
   12982:	f817 2b01 	ldrb.w	r2, [r7], #1
   12986:	2a6c      	cmp	r2, #108	; 0x6c
   12988:	d041      	beq.n	12a0e <z_cbvprintf_impl+0x27a>
   1298a:	d825      	bhi.n	129d8 <z_cbvprintf_impl+0x244>
   1298c:	2a68      	cmp	r2, #104	; 0x68
   1298e:	d02b      	beq.n	129e8 <z_cbvprintf_impl+0x254>
   12990:	2a6a      	cmp	r2, #106	; 0x6a
   12992:	d046      	beq.n	12a22 <z_cbvprintf_impl+0x28e>
   12994:	2a4c      	cmp	r2, #76	; 0x4c
   12996:	d04c      	beq.n	12a32 <z_cbvprintf_impl+0x29e>
   12998:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   1299a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1299e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
   129a2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   129a6:	2a78      	cmp	r2, #120	; 0x78
   129a8:	f200 80d9 	bhi.w	12b5e <z_cbvprintf_impl+0x3ca>
   129ac:	2a57      	cmp	r2, #87	; 0x57
   129ae:	d84d      	bhi.n	12a4c <z_cbvprintf_impl+0x2b8>
   129b0:	2a41      	cmp	r2, #65	; 0x41
   129b2:	d003      	beq.n	129bc <z_cbvprintf_impl+0x228>
   129b4:	3a45      	subs	r2, #69	; 0x45
   129b6:	2a02      	cmp	r2, #2
   129b8:	f200 80d1 	bhi.w	12b5e <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   129bc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   129c0:	2204      	movs	r2, #4
   129c2:	f362 0302 	bfi	r3, r2, #0, #3
   129c6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   129ca:	2301      	movs	r3, #1
			break;
   129cc:	e09e      	b.n	12b0c <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
   129ce:	fb06 2101 	mla	r1, r6, r1, r2
   129d2:	3930      	subs	r1, #48	; 0x30
   129d4:	4603      	mov	r3, r0
   129d6:	e764      	b.n	128a2 <z_cbvprintf_impl+0x10e>
	switch (*sp) {
   129d8:	2a74      	cmp	r2, #116	; 0x74
   129da:	d026      	beq.n	12a2a <z_cbvprintf_impl+0x296>
   129dc:	2a7a      	cmp	r2, #122	; 0x7a
   129de:	d1db      	bne.n	12998 <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
   129e0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   129e4:	2206      	movs	r2, #6
   129e6:	e00d      	b.n	12a04 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
   129e8:	785a      	ldrb	r2, [r3, #1]
   129ea:	2a68      	cmp	r2, #104	; 0x68
   129ec:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   129f0:	d106      	bne.n	12a00 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
   129f2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   129f4:	f361 02c6 	bfi	r2, r1, #3, #4
   129f8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   129fc:	1c9f      	adds	r7, r3, #2
   129fe:	e7cc      	b.n	1299a <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
   12a00:	4613      	mov	r3, r2
   12a02:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   12a04:	f362 03c6 	bfi	r3, r2, #3, #4
   12a08:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   12a0c:	e7c5      	b.n	1299a <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
   12a0e:	785a      	ldrb	r2, [r3, #1]
   12a10:	2a6c      	cmp	r2, #108	; 0x6c
   12a12:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12a16:	d101      	bne.n	12a1c <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
   12a18:	2104      	movs	r1, #4
   12a1a:	e7eb      	b.n	129f4 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
   12a1c:	4613      	mov	r3, r2
   12a1e:	2203      	movs	r2, #3
   12a20:	e7f0      	b.n	12a04 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
   12a22:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12a26:	2205      	movs	r2, #5
   12a28:	e7ec      	b.n	12a04 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
   12a2a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12a2e:	2207      	movs	r2, #7
   12a30:	e7e8      	b.n	12a04 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
   12a32:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   12a36:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   12a3a:	f023 0302 	bic.w	r3, r3, #2
   12a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   12a42:	f043 0302 	orr.w	r3, r3, #2
   12a46:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   12a4a:	e7a6      	b.n	1299a <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
   12a4c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   12a50:	2920      	cmp	r1, #32
   12a52:	f200 8084 	bhi.w	12b5e <z_cbvprintf_impl+0x3ca>
   12a56:	a001      	add	r0, pc, #4	; (adr r0, 12a5c <z_cbvprintf_impl+0x2c8>)
   12a58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12a5c:	00012b21 	.word	0x00012b21
   12a60:	00012b5f 	.word	0x00012b5f
   12a64:	00012b5f 	.word	0x00012b5f
   12a68:	00012b5f 	.word	0x00012b5f
   12a6c:	00012b5f 	.word	0x00012b5f
   12a70:	00012b5f 	.word	0x00012b5f
   12a74:	00012b5f 	.word	0x00012b5f
   12a78:	00012b5f 	.word	0x00012b5f
   12a7c:	00012b5f 	.word	0x00012b5f
   12a80:	000129bd 	.word	0x000129bd
   12a84:	00012b5f 	.word	0x00012b5f
   12a88:	00012b21 	.word	0x00012b21
   12a8c:	00012ae1 	.word	0x00012ae1
   12a90:	000129bd 	.word	0x000129bd
   12a94:	000129bd 	.word	0x000129bd
   12a98:	000129bd 	.word	0x000129bd
   12a9c:	00012b5f 	.word	0x00012b5f
   12aa0:	00012ae1 	.word	0x00012ae1
   12aa4:	00012b5f 	.word	0x00012b5f
   12aa8:	00012b5f 	.word	0x00012b5f
   12aac:	00012b5f 	.word	0x00012b5f
   12ab0:	00012b5f 	.word	0x00012b5f
   12ab4:	00012b29 	.word	0x00012b29
   12ab8:	00012b21 	.word	0x00012b21
   12abc:	00012b45 	.word	0x00012b45
   12ac0:	00012b5f 	.word	0x00012b5f
   12ac4:	00012b5f 	.word	0x00012b5f
   12ac8:	00012b45 	.word	0x00012b45
   12acc:	00012b5f 	.word	0x00012b5f
   12ad0:	00012b21 	.word	0x00012b21
   12ad4:	00012b5f 	.word	0x00012b5f
   12ad8:	00012b5f 	.word	0x00012b5f
   12adc:	00012b21 	.word	0x00012b21
		conv->specifier_cat = SPECIFIER_SINT;
   12ae0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   12ae4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   12ae6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   12aea:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12aee:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12af0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   12af4:	bf02      	ittt	eq
   12af6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   12afa:	f041 0101 	orreq.w	r1, r1, #1
   12afe:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   12b02:	2a63      	cmp	r2, #99	; 0x63
   12b04:	d131      	bne.n	12b6a <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12b06:	3b00      	subs	r3, #0
   12b08:	bf18      	it	ne
   12b0a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   12b0c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12b10:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12b14:	430b      	orrs	r3, r1
   12b16:	f363 0241 	bfi	r2, r3, #1, #1
   12b1a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   12b1e:	e6d8      	b.n	128d2 <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   12b20:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   12b24:	2002      	movs	r0, #2
   12b26:	e7de      	b.n	12ae6 <z_cbvprintf_impl+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   12b28:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12b2c:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12b30:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   12b34:	2103      	movs	r1, #3
   12b36:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12b3a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   12b3c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12b40:	4143      	adcs	r3, r0
   12b42:	e7e3      	b.n	12b0c <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   12b44:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   12b48:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   12b4a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12b4e:	f361 0202 	bfi	r2, r1, #0, #3
   12b52:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   12b56:	bf14      	ite	ne
   12b58:	2301      	movne	r3, #1
   12b5a:	2300      	moveq	r3, #0
   12b5c:	e7d6      	b.n	12b0c <z_cbvprintf_impl+0x378>
		conv->invalid = true;
   12b5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12b62:	f043 0301 	orr.w	r3, r3, #1
   12b66:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   12b6a:	2300      	movs	r3, #0
   12b6c:	e7ce      	b.n	12b0c <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
   12b6e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   12b72:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12b74:	bfb4      	ite	lt
   12b76:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   12b7a:	f04f 39ff 	movge.w	r9, #4294967295
   12b7e:	e6ba      	b.n	128f6 <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
   12b80:	079b      	lsls	r3, r3, #30
   12b82:	f57f aec7 	bpl.w	12914 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
   12b86:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   12b8a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   12b8e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12b90:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   12b94:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   12b98:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12b9c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12b9e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12ba2:	d135      	bne.n	12c10 <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
   12ba4:	1ecb      	subs	r3, r1, #3
   12ba6:	2b04      	cmp	r3, #4
   12ba8:	d822      	bhi.n	12bf0 <z_cbvprintf_impl+0x45c>
   12baa:	e8df f003 	tbb	[pc, r3]
   12bae:	0903      	.short	0x0903
   12bb0:	2109      	.short	0x2109
   12bb2:	21          	.byte	0x21
   12bb3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   12bb4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   12bb8:	17da      	asrs	r2, r3, #31
   12bba:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   12bbe:	e006      	b.n	12bce <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
   12bc0:	3407      	adds	r4, #7
   12bc2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   12bc6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   12bca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   12bce:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12bd2:	f013 0603 	ands.w	r6, r3, #3
   12bd6:	d059      	beq.n	12c8c <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
   12bd8:	9802      	ldr	r0, [sp, #8]
   12bda:	463b      	mov	r3, r7
   12bdc:	4652      	mov	r2, sl
   12bde:	4659      	mov	r1, fp
   12be0:	f013 fc70 	bl	264c4 <outs>
   12be4:	2800      	cmp	r0, #0
   12be6:	f2c0 8146 	blt.w	12e76 <z_cbvprintf_impl+0x6e2>
   12bea:	4405      	add	r5, r0
			continue;
   12bec:	46ba      	mov	sl, r7
   12bee:	e5d9      	b.n	127a4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12bf0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12bf4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12bf6:	ea4f 72e3 	mov.w	r2, r3, asr #31
   12bfa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   12bfe:	d102      	bne.n	12c06 <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
   12c00:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
   12c04:	e7d8      	b.n	12bb8 <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
   12c06:	2902      	cmp	r1, #2
   12c08:	d1e1      	bne.n	12bce <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
   12c0a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   12c0e:	e7d3      	b.n	12bb8 <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12c10:	2b02      	cmp	r3, #2
   12c12:	d129      	bne.n	12c68 <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
   12c14:	1ecb      	subs	r3, r1, #3
   12c16:	2b04      	cmp	r3, #4
   12c18:	d813      	bhi.n	12c42 <z_cbvprintf_impl+0x4ae>
   12c1a:	e8df f003 	tbb	[pc, r3]
   12c1e:	0a03      	.short	0x0a03
   12c20:	120a      	.short	0x120a
   12c22:	12          	.byte	0x12
   12c23:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   12c24:	6822      	ldr	r2, [r4, #0]
   12c26:	920a      	str	r2, [sp, #40]	; 0x28
   12c28:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   12c2a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   12c2c:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   12c2e:	4604      	mov	r4, r0
   12c30:	e7cd      	b.n	12bce <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
   12c32:	1de0      	adds	r0, r4, #7
   12c34:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   12c38:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   12c3c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   12c40:	e7f5      	b.n	12c2e <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
   12c42:	f854 3b04 	ldr.w	r3, [r4], #4
   12c46:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   12c48:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   12c4a:	f04f 0300 	mov.w	r3, #0
   12c4e:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   12c50:	d105      	bne.n	12c5e <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
   12c52:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   12c56:	930a      	str	r3, [sp, #40]	; 0x28
   12c58:	2300      	movs	r3, #0
   12c5a:	930b      	str	r3, [sp, #44]	; 0x2c
   12c5c:	e7b7      	b.n	12bce <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
   12c5e:	2902      	cmp	r1, #2
   12c60:	d1b5      	bne.n	12bce <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
   12c62:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12c66:	e7f6      	b.n	12c56 <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
   12c68:	2b04      	cmp	r3, #4
   12c6a:	d109      	bne.n	12c80 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
   12c6c:	1de3      	adds	r3, r4, #7
   12c6e:	f023 0307 	bic.w	r3, r3, #7
   12c72:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   12c76:	e9d3 2300 	ldrd	r2, r3, [r3]
   12c7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   12c7e:	e7a6      	b.n	12bce <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12c80:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   12c82:	bf04      	itt	eq
   12c84:	f854 3b04 	ldreq.w	r3, [r4], #4
   12c88:	930a      	streq	r3, [sp, #40]	; 0x28
   12c8a:	e7a0      	b.n	12bce <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
   12c8c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12c90:	2878      	cmp	r0, #120	; 0x78
   12c92:	d8ab      	bhi.n	12bec <z_cbvprintf_impl+0x458>
   12c94:	2862      	cmp	r0, #98	; 0x62
   12c96:	d822      	bhi.n	12cde <z_cbvprintf_impl+0x54a>
   12c98:	2825      	cmp	r0, #37	; 0x25
   12c9a:	f43f ad8c 	beq.w	127b6 <z_cbvprintf_impl+0x22>
   12c9e:	2858      	cmp	r0, #88	; 0x58
   12ca0:	d1a4      	bne.n	12bec <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12ca2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   12ca6:	9300      	str	r3, [sp, #0]
   12ca8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   12cac:	ab04      	add	r3, sp, #16
   12cae:	aa0c      	add	r2, sp, #48	; 0x30
   12cb0:	f013 fbc2 	bl	26438 <encode_uint>
   12cb4:	4682      	mov	sl, r0
			if (precision >= 0) {
   12cb6:	f1b8 0f00 	cmp.w	r8, #0
   12cba:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   12cbe:	db0c      	blt.n	12cda <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
   12cc0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   12cc4:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   12cc8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12ccc:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   12cce:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   12cd2:	d902      	bls.n	12cda <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
   12cd4:	eba8 0303 	sub.w	r3, r8, r3
   12cd8:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   12cda:	4680      	mov	r8, r0
   12cdc:	e03e      	b.n	12d5c <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
   12cde:	3863      	subs	r0, #99	; 0x63
   12ce0:	2815      	cmp	r0, #21
   12ce2:	d883      	bhi.n	12bec <z_cbvprintf_impl+0x458>
   12ce4:	a201      	add	r2, pc, #4	; (adr r2, 12cec <z_cbvprintf_impl+0x558>)
   12ce6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   12cea:	bf00      	nop
   12cec:	00012d6d 	.word	0x00012d6d
   12cf0:	00012dd1 	.word	0x00012dd1
   12cf4:	00012bed 	.word	0x00012bed
   12cf8:	00012bed 	.word	0x00012bed
   12cfc:	00012bed 	.word	0x00012bed
   12d00:	00012bed 	.word	0x00012bed
   12d04:	00012dd1 	.word	0x00012dd1
   12d08:	00012bed 	.word	0x00012bed
   12d0c:	00012bed 	.word	0x00012bed
   12d10:	00012bed 	.word	0x00012bed
   12d14:	00012bed 	.word	0x00012bed
   12d18:	00012e2b 	.word	0x00012e2b
   12d1c:	00012df9 	.word	0x00012df9
   12d20:	00012dfd 	.word	0x00012dfd
   12d24:	00012bed 	.word	0x00012bed
   12d28:	00012bed 	.word	0x00012bed
   12d2c:	00012d45 	.word	0x00012d45
   12d30:	00012bed 	.word	0x00012bed
   12d34:	00012df9 	.word	0x00012df9
   12d38:	00012bed 	.word	0x00012bed
   12d3c:	00012bed 	.word	0x00012bed
   12d40:	00012df9 	.word	0x00012df9
			if (precision >= 0) {
   12d44:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   12d48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   12d4c:	db0a      	blt.n	12d64 <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
   12d4e:	4641      	mov	r1, r8
   12d50:	4650      	mov	r0, sl
   12d52:	f014 fa19 	bl	27188 <strnlen>
			bpe = bps + len;
   12d56:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   12d5a:	2600      	movs	r6, #0
		if (bps == NULL) {
   12d5c:	f1ba 0f00 	cmp.w	sl, #0
   12d60:	d10c      	bne.n	12d7c <z_cbvprintf_impl+0x5e8>
   12d62:	e743      	b.n	12bec <z_cbvprintf_impl+0x458>
				len = strlen(bps);
   12d64:	4650      	mov	r0, sl
   12d66:	f014 fa08 	bl	2717a <strlen>
   12d6a:	e7f4      	b.n	12d56 <z_cbvprintf_impl+0x5c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12d6e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   12d72:	2600      	movs	r6, #0
			bps = buf;
   12d74:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
   12d78:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
   12d7c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   12d80:	b106      	cbz	r6, 12d84 <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
   12d82:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12d84:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   12d88:	06d0      	lsls	r0, r2, #27
   12d8a:	d568      	bpl.n	12e5e <z_cbvprintf_impl+0x6ca>
			nj_len += 2U;
   12d8c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   12d8e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   12d90:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   12d92:	bf48      	it	mi
   12d94:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   12d96:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   12d98:	bf48      	it	mi
   12d9a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   12d9c:	f1b9 0f00 	cmp.w	r9, #0
   12da0:	dd76      	ble.n	12e90 <z_cbvprintf_impl+0x6fc>
			if (!conv->flag_dash) {
   12da2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   12da6:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   12daa:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12dae:	9303      	str	r3, [sp, #12]
   12db0:	0753      	lsls	r3, r2, #29
   12db2:	d46d      	bmi.n	12e90 <z_cbvprintf_impl+0x6fc>
				if (conv->flag_zero) {
   12db4:	0650      	lsls	r0, r2, #25
   12db6:	d561      	bpl.n	12e7c <z_cbvprintf_impl+0x6e8>
					if (sign != 0) {
   12db8:	b146      	cbz	r6, 12dcc <z_cbvprintf_impl+0x638>
						OUTC(sign);
   12dba:	9b02      	ldr	r3, [sp, #8]
   12dbc:	4659      	mov	r1, fp
   12dbe:	4630      	mov	r0, r6
   12dc0:	4798      	blx	r3
   12dc2:	2800      	cmp	r0, #0
   12dc4:	db57      	blt.n	12e76 <z_cbvprintf_impl+0x6e2>
						sign = 0;
   12dc6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   12dc8:	3501      	adds	r5, #1
						sign = 0;
   12dca:	461e      	mov	r6, r3
					pad = '0';
   12dcc:	2330      	movs	r3, #48	; 0x30
   12dce:	e056      	b.n	12e7e <z_cbvprintf_impl+0x6ea>
			if (conv->flag_plus) {
   12dd0:	071e      	lsls	r6, r3, #28
   12dd2:	d40f      	bmi.n	12df4 <z_cbvprintf_impl+0x660>
				sign = ' ';
   12dd4:	f013 0610 	ands.w	r6, r3, #16
   12dd8:	bf18      	it	ne
   12dda:	2620      	movne	r6, #32
			sint = value->sint;
   12ddc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   12de0:	2b00      	cmp	r3, #0
   12de2:	f6bf af5e 	bge.w	12ca2 <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
   12de6:	4252      	negs	r2, r2
   12de8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12dec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   12df0:	262d      	movs	r6, #45	; 0x2d
   12df2:	e756      	b.n	12ca2 <z_cbvprintf_impl+0x50e>
				sign = '+';
   12df4:	262b      	movs	r6, #43	; 0x2b
   12df6:	e7f1      	b.n	12ddc <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
   12df8:	2600      	movs	r6, #0
   12dfa:	e752      	b.n	12ca2 <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
   12dfc:	980a      	ldr	r0, [sp, #40]	; 0x28
   12dfe:	b340      	cbz	r0, 12e52 <z_cbvprintf_impl+0x6be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12e00:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   12e04:	9300      	str	r3, [sp, #0]
   12e06:	aa0c      	add	r2, sp, #48	; 0x30
   12e08:	ab04      	add	r3, sp, #16
   12e0a:	2100      	movs	r1, #0
   12e0c:	f013 fb14 	bl	26438 <encode_uint>
				conv->altform_0c = true;
   12e10:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   12e14:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12e18:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12e1c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12e20:	4682      	mov	sl, r0
				conv->altform_0c = true;
   12e22:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   12e26:	2600      	movs	r6, #0
				goto prec_int_pad0;
   12e28:	e745      	b.n	12cb6 <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
   12e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   12e2c:	2907      	cmp	r1, #7
   12e2e:	f63f aedd 	bhi.w	12bec <z_cbvprintf_impl+0x458>
   12e32:	e8df f001 	tbb	[pc, r1]
   12e36:	040c      	.short	0x040c
   12e38:	08080c06 	.word	0x08080c06
   12e3c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   12e3e:	701d      	strb	r5, [r3, #0]
		break;
   12e40:	e6d4      	b.n	12bec <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
   12e42:	801d      	strh	r5, [r3, #0]
		break;
   12e44:	e6d2      	b.n	12bec <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
   12e46:	17ea      	asrs	r2, r5, #31
   12e48:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   12e4c:	e6ce      	b.n	12bec <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12e4e:	601d      	str	r5, [r3, #0]
		break;
   12e50:	e6cc      	b.n	12bec <z_cbvprintf_impl+0x458>
			bps = "(nil)";
   12e52:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 12f1c <z_cbvprintf_impl+0x788>
   12e56:	4606      	mov	r6, r0
			bpe = bps + 5;
   12e58:	f10a 0805 	add.w	r8, sl, #5
   12e5c:	e78e      	b.n	12d7c <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
   12e5e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   12e60:	bf48      	it	mi
   12e62:	3301      	addmi	r3, #1
   12e64:	e793      	b.n	12d8e <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
   12e66:	4618      	mov	r0, r3
   12e68:	9303      	str	r3, [sp, #12]
   12e6a:	4659      	mov	r1, fp
   12e6c:	9b02      	ldr	r3, [sp, #8]
   12e6e:	4798      	blx	r3
   12e70:	2800      	cmp	r0, #0
   12e72:	9b03      	ldr	r3, [sp, #12]
   12e74:	da04      	bge.n	12e80 <z_cbvprintf_impl+0x6ec>
#undef OUTS
#undef OUTC
}
   12e76:	b011      	add	sp, #68	; 0x44
   12e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   12e7c:	2320      	movs	r3, #32
   12e7e:	444d      	add	r5, r9
   12e80:	464a      	mov	r2, r9
				while (width-- > 0) {
   12e82:	2a00      	cmp	r2, #0
   12e84:	eba5 0109 	sub.w	r1, r5, r9
   12e88:	f109 39ff 	add.w	r9, r9, #4294967295
   12e8c:	dceb      	bgt.n	12e66 <z_cbvprintf_impl+0x6d2>
   12e8e:	460d      	mov	r5, r1
		if (sign != 0) {
   12e90:	b136      	cbz	r6, 12ea0 <z_cbvprintf_impl+0x70c>
			OUTC(sign);
   12e92:	9b02      	ldr	r3, [sp, #8]
   12e94:	4659      	mov	r1, fp
   12e96:	4630      	mov	r0, r6
   12e98:	4798      	blx	r3
   12e9a:	2800      	cmp	r0, #0
   12e9c:	dbeb      	blt.n	12e76 <z_cbvprintf_impl+0x6e2>
   12e9e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   12ea0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12ea4:	06d9      	lsls	r1, r3, #27
   12ea6:	d401      	bmi.n	12eac <z_cbvprintf_impl+0x718>
   12ea8:	071a      	lsls	r2, r3, #28
   12eaa:	d506      	bpl.n	12eba <z_cbvprintf_impl+0x726>
				OUTC('0');
   12eac:	9b02      	ldr	r3, [sp, #8]
   12eae:	4659      	mov	r1, fp
   12eb0:	2030      	movs	r0, #48	; 0x30
   12eb2:	4798      	blx	r3
   12eb4:	2800      	cmp	r0, #0
   12eb6:	dbde      	blt.n	12e76 <z_cbvprintf_impl+0x6e2>
   12eb8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12eba:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12ebe:	06db      	lsls	r3, r3, #27
   12ec0:	d507      	bpl.n	12ed2 <z_cbvprintf_impl+0x73e>
				OUTC(conv->specifier);
   12ec2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12ec6:	9b02      	ldr	r3, [sp, #8]
   12ec8:	4659      	mov	r1, fp
   12eca:	4798      	blx	r3
   12ecc:	2800      	cmp	r0, #0
   12ece:	dbd2      	blt.n	12e76 <z_cbvprintf_impl+0x6e2>
   12ed0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12ed2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   12ed4:	442e      	add	r6, r5
   12ed6:	1b73      	subs	r3, r6, r5
   12ed8:	2b00      	cmp	r3, #0
   12eda:	dc16      	bgt.n	12f0a <z_cbvprintf_impl+0x776>
			OUTS(bps, bpe);
   12edc:	9802      	ldr	r0, [sp, #8]
   12ede:	4643      	mov	r3, r8
   12ee0:	4652      	mov	r2, sl
   12ee2:	4659      	mov	r1, fp
   12ee4:	f013 faee 	bl	264c4 <outs>
   12ee8:	2800      	cmp	r0, #0
   12eea:	dbc4      	blt.n	12e76 <z_cbvprintf_impl+0x6e2>
   12eec:	4405      	add	r5, r0
		while (width > 0) {
   12eee:	44a9      	add	r9, r5
   12ef0:	eba9 0305 	sub.w	r3, r9, r5
   12ef4:	2b00      	cmp	r3, #0
   12ef6:	f77f ae79 	ble.w	12bec <z_cbvprintf_impl+0x458>
			OUTC(' ');
   12efa:	9b02      	ldr	r3, [sp, #8]
   12efc:	4659      	mov	r1, fp
   12efe:	2020      	movs	r0, #32
   12f00:	4798      	blx	r3
   12f02:	2800      	cmp	r0, #0
   12f04:	dbb7      	blt.n	12e76 <z_cbvprintf_impl+0x6e2>
   12f06:	3501      	adds	r5, #1
			--width;
   12f08:	e7f2      	b.n	12ef0 <z_cbvprintf_impl+0x75c>
				OUTC('0');
   12f0a:	9b02      	ldr	r3, [sp, #8]
   12f0c:	4659      	mov	r1, fp
   12f0e:	2030      	movs	r0, #48	; 0x30
   12f10:	4798      	blx	r3
   12f12:	2800      	cmp	r0, #0
   12f14:	dbaf      	blt.n	12e76 <z_cbvprintf_impl+0x6e2>
   12f16:	3501      	adds	r5, #1
   12f18:	e7dd      	b.n	12ed6 <z_cbvprintf_impl+0x742>
   12f1a:	bf00      	nop
   12f1c:	0002ac82 	.word	0x0002ac82

00012f20 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   12f20:	b508      	push	{r3, lr}
	__asm__ volatile(
   12f22:	f04f 0240 	mov.w	r2, #64	; 0x40
   12f26:	f3ef 8311 	mrs	r3, BASEPRI
   12f2a:	f382 8812 	msr	BASEPRI_MAX, r2
   12f2e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   12f32:	f001 fe25 	bl	14b80 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   12f36:	4803      	ldr	r0, [pc, #12]	; (12f44 <sys_reboot+0x24>)
   12f38:	f013 f8f0 	bl	2611c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12f3c:	f001 f87c 	bl	14038 <arch_cpu_idle>
   12f40:	e7fc      	b.n	12f3c <sys_reboot+0x1c>
   12f42:	bf00      	nop
   12f44:	0002ac88 	.word	0x0002ac88

00012f48 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   12f48:	f00c b856 	b.w	1eff8 <SystemInit>

00012f4c <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   12f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f50:	e9cd 0100 	strd	r0, r1, [sp]
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
		printk("%c: ", z_log_minimal_level_to_char(level));
   12f54:	f8df 8094 	ldr.w	r8, [pc, #148]	; 12fec <z_log_minimal_hexdump_print+0xa0>
			printk("   ");
   12f58:	f8df 9094 	ldr.w	r9, [pc, #148]	; 12ff0 <z_log_minimal_hexdump_print+0xa4>
{
   12f5c:	4616      	mov	r6, r2
	while (size > 0U) {
   12f5e:	4614      	mov	r4, r2
   12f60:	9b01      	ldr	r3, [sp, #4]
   12f62:	199d      	adds	r5, r3, r6
   12f64:	1b2d      	subs	r5, r5, r4
   12f66:	b914      	cbnz	r4, 12f6e <z_log_minimal_hexdump_print+0x22>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   12f68:	b003      	add	sp, #12
   12f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   12f6e:	9b00      	ldr	r3, [sp, #0]
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   12f70:	4f20      	ldr	r7, [pc, #128]	; (12ff4 <z_log_minimal_hexdump_print+0xa8>)
   12f72:	3b01      	subs	r3, #1
   12f74:	2b03      	cmp	r3, #3
   12f76:	bf96      	itet	ls
   12f78:	4a1f      	ldrls	r2, [pc, #124]	; (12ff8 <z_log_minimal_hexdump_print+0xac>)
   12f7a:	213f      	movhi	r1, #63	; 0x3f
   12f7c:	5cd1      	ldrbls	r1, [r2, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   12f7e:	4640      	mov	r0, r8
   12f80:	f013 f8cc 	bl	2611c <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12f84:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   12f88:	455c      	cmp	r4, fp
   12f8a:	d926      	bls.n	12fda <z_log_minimal_hexdump_print+0x8e>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   12f8c:	f815 100b 	ldrb.w	r1, [r5, fp]
   12f90:	4638      	mov	r0, r7
   12f92:	f013 f8c3 	bl	2611c <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12f96:	f10b 0b01 	add.w	fp, fp, #1
   12f9a:	f1bb 0f08 	cmp.w	fp, #8
   12f9e:	d1f3      	bne.n	12f88 <z_log_minimal_hexdump_print+0x3c>
	printk("|");
   12fa0:	4816      	ldr	r0, [pc, #88]	; (12ffc <z_log_minimal_hexdump_print+0xb0>)
			printk(" ");
   12fa2:	f8df a05c 	ldr.w	sl, [pc, #92]	; 13000 <z_log_minimal_hexdump_print+0xb4>
			printk("%c", isprint((int)c) != 0 ? c : '.');
   12fa6:	f8df b05c 	ldr.w	fp, [pc, #92]	; 13004 <z_log_minimal_hexdump_print+0xb8>
	printk("|");
   12faa:	f013 f8b7 	bl	2611c <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12fae:	2700      	movs	r7, #0
		if (i < length) {
   12fb0:	42bc      	cmp	r4, r7
   12fb2:	d916      	bls.n	12fe2 <z_log_minimal_hexdump_print+0x96>
			unsigned char c = data[i];
   12fb4:	5de9      	ldrb	r1, [r5, r7]
	return (int)((((unsigned)c) >= ' ') &&
   12fb6:	f1a1 0220 	sub.w	r2, r1, #32
   12fba:	2a5f      	cmp	r2, #95	; 0x5f
			printk("%c", isprint((int)c) != 0 ? c : '.');
   12fbc:	bf28      	it	cs
   12fbe:	212e      	movcs	r1, #46	; 0x2e
   12fc0:	4658      	mov	r0, fp
   12fc2:	f013 f8ab 	bl	2611c <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12fc6:	3701      	adds	r7, #1
   12fc8:	2f08      	cmp	r7, #8
   12fca:	d1f1      	bne.n	12fb0 <z_log_minimal_hexdump_print+0x64>
	printk("\n");
   12fcc:	480e      	ldr	r0, [pc, #56]	; (13008 <z_log_minimal_hexdump_print+0xbc>)
   12fce:	f013 f8a5 	bl	2611c <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   12fd2:	2c07      	cmp	r4, #7
   12fd4:	d9c8      	bls.n	12f68 <z_log_minimal_hexdump_print+0x1c>
		size -= HEXDUMP_BYTES_IN_LINE;
   12fd6:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   12fd8:	e7c2      	b.n	12f60 <z_log_minimal_hexdump_print+0x14>
			printk("   ");
   12fda:	4648      	mov	r0, r9
   12fdc:	f013 f89e 	bl	2611c <printk>
   12fe0:	e7d9      	b.n	12f96 <z_log_minimal_hexdump_print+0x4a>
			printk(" ");
   12fe2:	4650      	mov	r0, sl
   12fe4:	f013 f89a 	bl	2611c <printk>
   12fe8:	e7ed      	b.n	12fc6 <z_log_minimal_hexdump_print+0x7a>
   12fea:	bf00      	nop
   12fec:	0002acb1 	.word	0x0002acb1
   12ff0:	0002acbc 	.word	0x0002acbc
   12ff4:	0002acb6 	.word	0x0002acb6
   12ff8:	0002acc5 	.word	0x0002acc5
   12ffc:	0002acc0 	.word	0x0002acc0
   13000:	0002acbe 	.word	0x0002acbe
   13004:	0002acc2 	.word	0x0002acc2
   13008:	0002d6e0 	.word	0x0002d6e0

0001300c <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   1300c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13010:	460f      	mov	r7, r1
   13012:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13014:	2108      	movs	r1, #8
   13016:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   13018:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1306c <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1301c:	f013 fb15 	bl	2664a <nvs_al_size.isra.0>
	*addr -= ate_size;
   13020:	683c      	ldr	r4, [r7, #0]
   13022:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13024:	4680      	mov	r8, r0
	*addr -= ate_size;
   13026:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   13028:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   1302c:	42ac      	cmp	r4, r5
   1302e:	d803      	bhi.n	13038 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   13030:	2000      	movs	r0, #0
}
   13032:	b003      	add	sp, #12
   13034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13038:	2308      	movs	r3, #8
   1303a:	466a      	mov	r2, sp
   1303c:	4621      	mov	r1, r4
   1303e:	4630      	mov	r0, r6
   13040:	f013 fa78 	bl	26534 <nvs_flash_rd>
		if (rc) {
   13044:	2800      	cmp	r0, #0
   13046:	d1f4      	bne.n	13032 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   13048:	4669      	mov	r1, sp
   1304a:	4630      	mov	r0, r6
   1304c:	f013 fb07 	bl	2665e <nvs_ate_valid>
   13050:	b140      	cbz	r0, 13064 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   13052:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   13056:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   1305a:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   1305c:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   13060:	4413      	add	r3, r2
   13062:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   13064:	eba4 0408 	sub.w	r4, r4, r8
   13068:	e7e0      	b.n	1302c <nvs_recover_last_ate+0x20>
   1306a:	bf00      	nop
   1306c:	ffff0000 	.word	0xffff0000

00013070 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   13070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13074:	4604      	mov	r4, r0
   13076:	b089      	sub	sp, #36	; 0x24

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   13078:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   1307c:	4638      	mov	r0, r7
   1307e:	f016 fc18 	bl	298b2 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   13082:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   13084:	6883      	ldr	r3, [r0, #8]
   13086:	68db      	ldr	r3, [r3, #12]
   13088:	4798      	blx	r3
   1308a:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   1308c:	b948      	cbnz	r0, 130a2 <nvs_mount+0x32>
		LOG_ERR("Could not obtain flash parameters");
   1308e:	48a8      	ldr	r0, [pc, #672]	; (13330 <nvs_mount+0x2c0>)
   13090:	2145      	movs	r1, #69	; 0x45
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
   13092:	f013 fa42 	bl	2651a <z_log_minimal_printk>
		return -EINVAL;
   13096:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1309a:	4628      	mov	r0, r5
   1309c:	b009      	add	sp, #36	; 0x24
   1309e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   130a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   130a4:	6883      	ldr	r3, [r0, #8]
   130a6:	68db      	ldr	r3, [r3, #12]
   130a8:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   130aa:	6803      	ldr	r3, [r0, #0]
   130ac:	3b01      	subs	r3, #1
   130ae:	2b1f      	cmp	r3, #31
   130b0:	d902      	bls.n	130b8 <nvs_mount+0x48>
		LOG_ERR("Unsupported write block size");
   130b2:	48a0      	ldr	r0, [pc, #640]	; (13334 <nvs_mount+0x2c4>)
   130b4:	2145      	movs	r1, #69	; 0x45
   130b6:	e7ec      	b.n	13092 <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   130b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   130ba:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   130bc:	aa05      	add	r2, sp, #20
   130be:	f016 fa13 	bl	294e8 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   130c2:	b110      	cbz	r0, 130ca <nvs_mount+0x5a>
		LOG_ERR("Unable to get page info");
   130c4:	489c      	ldr	r0, [pc, #624]	; (13338 <nvs_mount+0x2c8>)
   130c6:	2145      	movs	r1, #69	; 0x45
   130c8:	e7e3      	b.n	13092 <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
   130ca:	89a5      	ldrh	r5, [r4, #12]
   130cc:	b12d      	cbz	r5, 130da <nvs_mount+0x6a>
   130ce:	9b06      	ldr	r3, [sp, #24]
   130d0:	fbb5 f2f3 	udiv	r2, r5, r3
   130d4:	fb03 5512 	mls	r5, r3, r2, r5
   130d8:	b115      	cbz	r5, 130e0 <nvs_mount+0x70>
		LOG_ERR("Invalid sector size");
   130da:	4898      	ldr	r0, [pc, #608]	; (1333c <nvs_mount+0x2cc>)
   130dc:	2145      	movs	r1, #69	; 0x45
   130de:	e7d8      	b.n	13092 <nvs_mount+0x22>
	if (fs->sector_count < 2) {
   130e0:	89e3      	ldrh	r3, [r4, #14]
   130e2:	2b01      	cmp	r3, #1
   130e4:	d802      	bhi.n	130ec <nvs_mount+0x7c>
		LOG_ERR("Configuration error - sector count");
   130e6:	4896      	ldr	r0, [pc, #600]	; (13340 <nvs_mount+0x2d0>)
   130e8:	2145      	movs	r1, #69	; 0x45
   130ea:	e7d2      	b.n	13092 <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   130ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   130ee:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   130f0:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   130f4:	f04f 33ff 	mov.w	r3, #4294967295
   130f8:	f04f 32ff 	mov.w	r2, #4294967295
   130fc:	4638      	mov	r0, r7
   130fe:	f00d f999 	bl	20434 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13102:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13104:	2108      	movs	r1, #8
   13106:	f013 faa0 	bl	2664a <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   1310a:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1310c:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   1310e:	89e3      	ldrh	r3, [r4, #14]
   13110:	fa1f fa85 	uxth.w	sl, r5
   13114:	4553      	cmp	r3, sl
   13116:	d845      	bhi.n	131a4 <nvs_mount+0x134>
	if (closed_sectors == fs->sector_count) {
   13118:	89e3      	ldrh	r3, [r4, #14]
   1311a:	454b      	cmp	r3, r9
   1311c:	f000 80d7 	beq.w	132ce <nvs_mount+0x25e>
	if (i == fs->sector_count) {
   13120:	4553      	cmp	r3, sl
   13122:	d10b      	bne.n	1313c <nvs_mount+0xcc>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   13124:	9900      	ldr	r1, [sp, #0]
   13126:	2308      	movs	r3, #8
   13128:	4642      	mov	r2, r8
   1312a:	1b89      	subs	r1, r1, r6
   1312c:	4620      	mov	r0, r4
   1312e:	f013 fa39 	bl	265a4 <nvs_flash_cmp_const>
		if (!rc) {
   13132:	b918      	cbnz	r0, 1313c <nvs_mount+0xcc>
			nvs_sector_advance(fs, &addr);
   13134:	89e0      	ldrh	r0, [r4, #14]
   13136:	4669      	mov	r1, sp
   13138:	f013 fa7c 	bl	26634 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   1313c:	4669      	mov	r1, sp
   1313e:	4620      	mov	r0, r4
   13140:	f7ff ff64 	bl	1300c <nvs_recover_last_ate>
	if (rc) {
   13144:	4605      	mov	r5, r0
   13146:	2800      	cmp	r0, #0
   13148:	f040 80c3 	bne.w	132d2 <nvs_mount+0x262>
	fs->ate_wra = addr;
   1314c:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1314e:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 13344 <nvs_mount+0x2d4>
	fs->ate_wra = addr;
   13152:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   13154:	ea03 0309 	and.w	r3, r3, r9
   13158:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   1315a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   1315e:	4299      	cmp	r1, r3
   13160:	d30e      	bcc.n	13180 <nvs_mount+0x110>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13162:	2308      	movs	r3, #8
   13164:	aa01      	add	r2, sp, #4
   13166:	4620      	mov	r0, r4
   13168:	f013 f9e4 	bl	26534 <nvs_flash_rd>
		if (rc) {
   1316c:	b9c0      	cbnz	r0, 131a0 <nvs_mount+0x130>
   1316e:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   13170:	f813 2b01 	ldrb.w	r2, [r3], #1
   13174:	4590      	cmp	r8, r2
   13176:	f040 80f1 	bne.w	1335c <nvs_mount+0x2ec>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1317a:	3001      	adds	r0, #1
   1317c:	2808      	cmp	r0, #8
   1317e:	d1f7      	bne.n	13170 <nvs_mount+0x100>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13180:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   13182:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13184:	0c1b      	lsrs	r3, r3, #16
   13186:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   13188:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1318a:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   1318c:	f013 fa52 	bl	26634 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   13190:	89a3      	ldrh	r3, [r4, #12]
   13192:	9900      	ldr	r1, [sp, #0]
   13194:	4642      	mov	r2, r8
   13196:	4620      	mov	r0, r4
   13198:	f013 fa04 	bl	265a4 <nvs_flash_cmp_const>
	if (rc < 0) {
   1319c:	2800      	cmp	r0, #0
   1319e:	da26      	bge.n	131ee <nvs_mount+0x17e>
   131a0:	4605      	mov	r5, r0
   131a2:	e096      	b.n	132d2 <nvs_mount+0x262>
		       (uint16_t)(fs->sector_size - ate_size);
   131a4:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   131a6:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   131a8:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   131aa:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   131ae:	4642      	mov	r2, r8
   131b0:	2308      	movs	r3, #8
   131b2:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   131b4:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   131b6:	f013 f9f5 	bl	265a4 <nvs_flash_cmp_const>
		if (rc) {
   131ba:	b178      	cbz	r0, 131dc <nvs_mount+0x16c>
			nvs_sector_advance(fs, &addr);
   131bc:	89e0      	ldrh	r0, [r4, #14]
   131be:	4669      	mov	r1, sp
   131c0:	f013 fa38 	bl	26634 <nvs_sector_advance.isra.0>
			closed_sectors++;
   131c4:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   131c8:	9900      	ldr	r1, [sp, #0]
   131ca:	2308      	movs	r3, #8
   131cc:	4642      	mov	r2, r8
   131ce:	4620      	mov	r0, r4
			closed_sectors++;
   131d0:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   131d4:	f013 f9e6 	bl	265a4 <nvs_flash_cmp_const>
			if (!rc) {
   131d8:	2800      	cmp	r0, #0
   131da:	d09d      	beq.n	13118 <nvs_mount+0xa8>
	for (i = 0; i < fs->sector_count; i++) {
   131dc:	3501      	adds	r5, #1
   131de:	e796      	b.n	1310e <nvs_mount+0x9e>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   131e0:	f1ba 0f00 	cmp.w	sl, #0
   131e4:	f000 80d2 	beq.w	1338c <nvs_mount+0x31c>
				rc = -ESPIPE;
   131e8:	f06f 051c 	mvn.w	r5, #28
   131ec:	e071      	b.n	132d2 <nvs_mount+0x262>
	if (rc) {
   131ee:	d049      	beq.n	13284 <nvs_mount+0x214>
		addr = fs->ate_wra + ate_size;
   131f0:	6863      	ldr	r3, [r4, #4]
   131f2:	4433      	add	r3, r6
   131f4:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   131f6:	f64f 78ff 	movw	r8, #65535	; 0xffff
   131fa:	9900      	ldr	r1, [sp, #0]
   131fc:	89a3      	ldrh	r3, [r4, #12]
   131fe:	b28a      	uxth	r2, r1
   13200:	1b9b      	subs	r3, r3, r6
   13202:	429a      	cmp	r2, r3
   13204:	d319      	bcc.n	1323a <nvs_mount+0x1ca>
		LOG_INF("No GC Done marker found: restarting gc");
   13206:	4850      	ldr	r0, [pc, #320]	; (13348 <nvs_mount+0x2d8>)
   13208:	2149      	movs	r1, #73	; 0x49
   1320a:	f013 f986 	bl	2651a <z_log_minimal_printk>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1320e:	6861      	ldr	r1, [r4, #4]
   13210:	4620      	mov	r0, r4
   13212:	f013 f9ec 	bl	265ee <nvs_flash_erase_sector>
		if (rc) {
   13216:	2800      	cmp	r0, #0
   13218:	d1c2      	bne.n	131a0 <nvs_mount+0x130>
		fs->ate_wra &= ADDR_SECT_MASK;
   1321a:	6863      	ldr	r3, [r4, #4]
   1321c:	4a49      	ldr	r2, [pc, #292]	; (13344 <nvs_mount+0x2d4>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   1321e:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   13220:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   13222:	440b      	add	r3, r1
   13224:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   13228:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   1322a:	4013      	ands	r3, r2
   1322c:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   1322e:	4620      	mov	r0, r4
   13230:	f013 fb0a 	bl	26848 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13234:	2800      	cmp	r0, #0
   13236:	d040      	beq.n	132ba <nvs_mount+0x24a>
   13238:	e7b2      	b.n	131a0 <nvs_mount+0x130>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1323a:	2308      	movs	r3, #8
   1323c:	aa03      	add	r2, sp, #12
   1323e:	4620      	mov	r0, r4
   13240:	f013 f978 	bl	26534 <nvs_flash_rd>
			if (rc) {
   13244:	2800      	cmp	r0, #0
   13246:	d1ab      	bne.n	131a0 <nvs_mount+0x130>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   13248:	a903      	add	r1, sp, #12
   1324a:	4620      	mov	r0, r4
   1324c:	f013 fa07 	bl	2665e <nvs_ate_valid>
   13250:	b138      	cbz	r0, 13262 <nvs_mount+0x1f2>
   13252:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   13256:	4543      	cmp	r3, r8
   13258:	d103      	bne.n	13262 <nvs_mount+0x1f2>
			    (gc_done_ate.id == 0xffff) &&
   1325a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1325e:	2b00      	cmp	r3, #0
   13260:	d054      	beq.n	1330c <nvs_mount+0x29c>
			addr += ate_size;
   13262:	9b00      	ldr	r3, [sp, #0]
   13264:	4433      	add	r3, r6
   13266:	9300      	str	r3, [sp, #0]
   13268:	e7c7      	b.n	131fa <nvs_mount+0x18a>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   1326a:	1a5b      	subs	r3, r3, r1
   1326c:	4642      	mov	r2, r8
   1326e:	4620      	mov	r0, r4
   13270:	f013 f998 	bl	265a4 <nvs_flash_cmp_const>
		if (rc < 0) {
   13274:	2800      	cmp	r0, #0
   13276:	db93      	blt.n	131a0 <nvs_mount+0x130>
		if (!rc) {
   13278:	d008      	beq.n	1328c <nvs_mount+0x21c>
		fs->data_wra += fs->flash_parameters->write_block_size;
   1327a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1327c:	68a3      	ldr	r3, [r4, #8]
   1327e:	6812      	ldr	r2, [r2, #0]
   13280:	4413      	add	r3, r2
   13282:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   13284:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   13288:	428b      	cmp	r3, r1
   1328a:	d8ee      	bhi.n	1326a <nvs_mount+0x1fa>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1328c:	6861      	ldr	r1, [r4, #4]
   1328e:	89a3      	ldrh	r3, [r4, #12]
   13290:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   13294:	429a      	cmp	r2, r3
   13296:	d1cd      	bne.n	13234 <nvs_mount+0x1c4>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13298:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 13344 <nvs_mount+0x2d4>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1329c:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1329e:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   132a2:	4293      	cmp	r3, r2
   132a4:	d0c6      	beq.n	13234 <nvs_mount+0x1c4>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   132a6:	4620      	mov	r0, r4
   132a8:	f013 f9a1 	bl	265ee <nvs_flash_erase_sector>
		if (rc) {
   132ac:	2800      	cmp	r0, #0
   132ae:	f47f af77 	bne.w	131a0 <nvs_mount+0x130>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   132b2:	6863      	ldr	r3, [r4, #4]
   132b4:	ea03 0308 	and.w	r3, r3, r8
   132b8:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   132ba:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   132bc:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   132be:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   132c2:	42b3      	cmp	r3, r6
   132c4:	d105      	bne.n	132d2 <nvs_mount+0x262>
		rc = nvs_add_gc_done_ate(fs);
   132c6:	4620      	mov	r0, r4
   132c8:	f013 faa9 	bl	2681e <nvs_add_gc_done_ate>
   132cc:	e768      	b.n	131a0 <nvs_mount+0x130>
		rc = -EDEADLK;
   132ce:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   132d2:	4638      	mov	r0, r7
   132d4:	f00d f980 	bl	205d8 <z_impl_k_mutex_unlock>
	if (rc) {
   132d8:	2d00      	cmp	r5, #0
   132da:	f47f aede 	bne.w	1309a <nvs_mount+0x2a>
	fs->ready = true;
   132de:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   132e0:	89e2      	ldrh	r2, [r4, #14]
	fs->ready = true;
   132e2:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   132e4:	4819      	ldr	r0, [pc, #100]	; (1334c <nvs_mount+0x2dc>)
   132e6:	89a3      	ldrh	r3, [r4, #12]
   132e8:	2149      	movs	r1, #73	; 0x49
   132ea:	f013 f916 	bl	2651a <z_log_minimal_printk>
	LOG_INF("alloc wra: %d, %x",
   132ee:	6862      	ldr	r2, [r4, #4]
   132f0:	4817      	ldr	r0, [pc, #92]	; (13350 <nvs_mount+0x2e0>)
   132f2:	b293      	uxth	r3, r2
   132f4:	2149      	movs	r1, #73	; 0x49
   132f6:	0c12      	lsrs	r2, r2, #16
   132f8:	f013 f90f 	bl	2651a <z_log_minimal_printk>
	LOG_INF("data wra: %d, %x",
   132fc:	68a2      	ldr	r2, [r4, #8]
   132fe:	4815      	ldr	r0, [pc, #84]	; (13354 <nvs_mount+0x2e4>)
   13300:	b293      	uxth	r3, r2
   13302:	2149      	movs	r1, #73	; 0x49
   13304:	0c12      	lsrs	r2, r2, #16
   13306:	f013 f908 	bl	2651a <z_log_minimal_printk>
	return 0;
   1330a:	e6c6      	b.n	1309a <nvs_mount+0x2a>
			LOG_INF("GC Done marker found");
   1330c:	4812      	ldr	r0, [pc, #72]	; (13358 <nvs_mount+0x2e8>)
   1330e:	2149      	movs	r1, #73	; 0x49
   13310:	f013 f903 	bl	2651a <z_log_minimal_printk>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   13314:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   13316:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   13318:	0c1b      	lsrs	r3, r3, #16
   1331a:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   1331c:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1331e:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   13320:	f013 f988 	bl	26634 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   13324:	9900      	ldr	r1, [sp, #0]
   13326:	4620      	mov	r0, r4
   13328:	f013 f961 	bl	265ee <nvs_flash_erase_sector>
			goto end;
   1332c:	e782      	b.n	13234 <nvs_mount+0x1c4>
   1332e:	bf00      	nop
   13330:	0002ace2 	.word	0x0002ace2
   13334:	0002ad09 	.word	0x0002ad09
   13338:	0002ad2b 	.word	0x0002ad2b
   1333c:	0002ad48 	.word	0x0002ad48
   13340:	0002ad61 	.word	0x0002ad61
   13344:	ffff0000 	.word	0xffff0000
   13348:	0002adec 	.word	0x0002adec
   1334c:	0002ad89 	.word	0x0002ad89
   13350:	0002ada5 	.word	0x0002ada5
   13354:	0002adbc 	.word	0x0002adbc
   13358:	0002add2 	.word	0x0002add2
		if (nvs_ate_valid(fs, &last_ate)) {
   1335c:	a901      	add	r1, sp, #4
   1335e:	4620      	mov	r0, r4
   13360:	f013 f97d 	bl	2665e <nvs_ate_valid>
   13364:	f8d4 b004 	ldr.w	fp, [r4, #4]
   13368:	b180      	cbz	r0, 1338c <nvs_mount+0x31c>
			fs->data_wra = addr & ADDR_SECT_MASK;
   1336a:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1336c:	f8bd a008 	ldrh.w	sl, [sp, #8]
   13370:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   13374:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   13376:	ea02 0209 	and.w	r2, r2, r9
   1337a:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1337c:	4451      	add	r1, sl
   1337e:	f013 f964 	bl	2664a <nvs_al_size.isra.0>
   13382:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   13384:	455a      	cmp	r2, fp
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13386:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   13388:	f43f af2a 	beq.w	131e0 <nvs_mount+0x170>
		fs->ate_wra -= ate_size;
   1338c:	ebab 0306 	sub.w	r3, fp, r6
   13390:	6063      	str	r3, [r4, #4]
   13392:	e6e2      	b.n	1315a <nvs_mount+0xea>

00013394 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   13394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13398:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   1339a:	7c03      	ldrb	r3, [r0, #16]
{
   1339c:	b089      	sub	sp, #36	; 0x24
   1339e:	4604      	mov	r4, r0
   133a0:	4689      	mov	r9, r1
   133a2:	4690      	mov	r8, r2
	if (!fs->ready) {
   133a4:	b94b      	cbnz	r3, 133ba <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
   133a6:	485e      	ldr	r0, [pc, #376]	; (13520 <nvs_write+0x18c>)
   133a8:	2145      	movs	r1, #69	; 0x45
   133aa:	f013 f8b6 	bl	2651a <z_log_minimal_printk>
		return -EACCES;
   133ae:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   133b2:	4628      	mov	r0, r5
   133b4:	b009      	add	sp, #36	; 0x24
   133b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   133ba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   133bc:	2108      	movs	r1, #8
   133be:	4610      	mov	r0, r2
   133c0:	f013 f943 	bl	2664a <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   133c4:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   133c6:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   133c8:	4610      	mov	r0, r2
   133ca:	f013 f93e 	bl	2664a <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   133ce:	89a3      	ldrh	r3, [r4, #12]
   133d0:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   133d4:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   133d6:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   133d8:	f200 809e 	bhi.w	13518 <nvs_write+0x184>
   133dc:	b11e      	cbz	r6, 133e6 <nvs_write+0x52>
	    ((len > 0) && (data == NULL))) {
   133de:	f1b8 0f00 	cmp.w	r8, #0
   133e2:	f000 8099 	beq.w	13518 <nvs_write+0x184>
	wlk_addr = fs->ate_wra;
   133e6:	6863      	ldr	r3, [r4, #4]
   133e8:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   133ea:	aa04      	add	r2, sp, #16
   133ec:	a903      	add	r1, sp, #12
   133ee:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   133f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   133f4:	f013 f96b 	bl	266ce <nvs_prev_ate>
		if (rc) {
   133f8:	4605      	mov	r5, r0
   133fa:	2800      	cmp	r0, #0
   133fc:	d1d9      	bne.n	133b2 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   133fe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   13402:	454b      	cmp	r3, r9
   13404:	d005      	beq.n	13412 <nvs_write+0x7e>
		if (wlk_addr == fs->ate_wra) {
   13406:	6862      	ldr	r2, [r4, #4]
   13408:	9b03      	ldr	r3, [sp, #12]
   1340a:	429a      	cmp	r2, r3
   1340c:	d1ed      	bne.n	133ea <nvs_write+0x56>
		if (len == 0) {
   1340e:	b9e6      	cbnz	r6, 1344a <nvs_write+0xb6>
   13410:	e7cf      	b.n	133b2 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   13412:	a904      	add	r1, sp, #16
   13414:	4620      	mov	r0, r4
   13416:	f013 f922 	bl	2665e <nvs_ate_valid>
   1341a:	2800      	cmp	r0, #0
   1341c:	d0f3      	beq.n	13406 <nvs_write+0x72>
			if (wlk_ate.len == 0U) {
   1341e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   13422:	b186      	cbz	r6, 13446 <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
   13424:	429e      	cmp	r6, r3
   13426:	d110      	bne.n	1344a <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
   13428:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   1342c:	ea4f 411b 	mov.w	r1, fp, lsr #16
   13430:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   13432:	4401      	add	r1, r0
   13434:	4633      	mov	r3, r6
   13436:	4642      	mov	r2, r8
   13438:	4620      	mov	r0, r4
   1343a:	f013 f889 	bl	26550 <nvs_flash_block_cmp>
			if (rc <= 0) {
   1343e:	2800      	cmp	r0, #0
   13440:	dc03      	bgt.n	1344a <nvs_write+0xb6>
   13442:	4605      	mov	r5, r0
   13444:	e7b5      	b.n	133b2 <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
   13446:	2b00      	cmp	r3, #0
   13448:	d0b3      	beq.n	133b2 <nvs_write+0x1e>
	if (data_size) {
   1344a:	bba7      	cbnz	r7, 134b6 <nvs_write+0x122>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   1344c:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   13450:	f04f 32ff 	mov.w	r2, #4294967295
   13454:	f04f 33ff 	mov.w	r3, #4294967295
   13458:	4650      	mov	r0, sl
   1345a:	f00c ffeb 	bl	20434 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   1345e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 13524 <nvs_write+0x190>
		if (gc_count == fs->sector_count) {
   13462:	89e3      	ldrh	r3, [r4, #14]
   13464:	429d      	cmp	r5, r3
   13466:	d054      	beq.n	13512 <nvs_write+0x17e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   13468:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1346c:	18f9      	adds	r1, r7, r3
   1346e:	428a      	cmp	r2, r1
   13470:	d324      	bcc.n	134bc <nvs_write+0x128>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   13472:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   13476:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   13478:	23ff      	movs	r3, #255	; 0xff
   1347a:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   1347e:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   13482:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
   13486:	f013 f8cc 	bl	26622 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   1348a:	4632      	mov	r2, r6
   1348c:	4641      	mov	r1, r8
   1348e:	4620      	mov	r0, r4
   13490:	f013 f9a1 	bl	267d6 <nvs_flash_data_wrt>
	if (rc) {
   13494:	4603      	mov	r3, r0
   13496:	b938      	cbnz	r0, 134a8 <nvs_write+0x114>
	rc = nvs_flash_ate_wrt(fs, &entry);
   13498:	a906      	add	r1, sp, #24
   1349a:	4620      	mov	r0, r4
   1349c:	f013 f9ae 	bl	267fc <nvs_flash_ate_wrt>
	rc = len;
   134a0:	2800      	cmp	r0, #0
   134a2:	bf14      	ite	ne
   134a4:	4603      	movne	r3, r0
   134a6:	4633      	moveq	r3, r6
   134a8:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   134aa:	4650      	mov	r0, sl
   134ac:	f00d f894 	bl	205d8 <z_impl_k_mutex_unlock>
	return rc;
   134b0:	9b01      	ldr	r3, [sp, #4]
   134b2:	461d      	mov	r5, r3
   134b4:	e77d      	b.n	133b2 <nvs_write+0x1e>
		required_space = data_size + ate_size;
   134b6:	4457      	add	r7, sl
   134b8:	b2bf      	uxth	r7, r7
   134ba:	e7c7      	b.n	1344c <nvs_write+0xb8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   134bc:	2108      	movs	r1, #8
   134be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   134c0:	f013 f8c3 	bl	2664a <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   134c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   134c8:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   134cc:	2300      	movs	r3, #0
   134ce:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   134d2:	1813      	adds	r3, r2, r0
   134d4:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   134d8:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   134da:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   134de:	441a      	add	r2, r3
   134e0:	1a12      	subs	r2, r2, r0
   134e2:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   134e4:	a806      	add	r0, sp, #24
   134e6:	f013 f89c 	bl	26622 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   134ea:	a906      	add	r1, sp, #24
   134ec:	4620      	mov	r0, r4
   134ee:	f013 f985 	bl	267fc <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   134f2:	89e0      	ldrh	r0, [r4, #14]
   134f4:	1d21      	adds	r1, r4, #4
   134f6:	f013 f89d 	bl	26634 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   134fa:	6863      	ldr	r3, [r4, #4]
   134fc:	ea03 030b 	and.w	r3, r3, fp
   13500:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   13502:	4620      	mov	r0, r4
   13504:	f013 f9a0 	bl	26848 <nvs_gc>
		if (rc) {
   13508:	4603      	mov	r3, r0
   1350a:	2800      	cmp	r0, #0
   1350c:	d1cc      	bne.n	134a8 <nvs_write+0x114>
		gc_count++;
   1350e:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   13510:	e7a7      	b.n	13462 <nvs_write+0xce>
			rc = -ENOSPC;
   13512:	f06f 031b 	mvn.w	r3, #27
   13516:	e7c7      	b.n	134a8 <nvs_write+0x114>
		return -EINVAL;
   13518:	f06f 0515 	mvn.w	r5, #21
   1351c:	e749      	b.n	133b2 <nvs_write+0x1e>
   1351e:	bf00      	nop
   13520:	0002acc9 	.word	0x0002acc9
   13524:	ffff0000 	.word	0xffff0000

00013528 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   13528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1352c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   1352e:	7c03      	ldrb	r3, [r0, #16]
{
   13530:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   13534:	4604      	mov	r4, r0
   13536:	460f      	mov	r7, r1
   13538:	4690      	mov	r8, r2
	if (!fs->ready) {
   1353a:	b943      	cbnz	r3, 1354e <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
   1353c:	4828      	ldr	r0, [pc, #160]	; (135e0 <nvs_read_hist+0xb8>)
   1353e:	2145      	movs	r1, #69	; 0x45
   13540:	f012 ffeb 	bl	2651a <z_log_minimal_printk>
		return -EACCES;
   13544:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   13548:	b004      	add	sp, #16
   1354a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1354e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   13550:	2108      	movs	r1, #8
   13552:	f013 f87a 	bl	2664a <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   13556:	89a3      	ldrh	r3, [r4, #12]
   13558:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   1355c:	429e      	cmp	r6, r3
   1355e:	d83c      	bhi.n	135da <nvs_read_hist+0xb2>
	wlk_addr = fs->ate_wra;
   13560:	6863      	ldr	r3, [r4, #4]
   13562:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   13564:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13568:	aa02      	add	r2, sp, #8
   1356a:	a901      	add	r1, sp, #4
   1356c:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   1356e:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13570:	f013 f8ad 	bl	266ce <nvs_prev_ate>
		if (rc) {
   13574:	2800      	cmp	r0, #0
   13576:	d1e7      	bne.n	13548 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   13578:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1357c:	42bb      	cmp	r3, r7
   1357e:	d108      	bne.n	13592 <nvs_read_hist+0x6a>
   13580:	a902      	add	r1, sp, #8
   13582:	4620      	mov	r0, r4
   13584:	f013 f86b 	bl	2665e <nvs_ate_valid>
   13588:	b118      	cbz	r0, 13592 <nvs_read_hist+0x6a>
			cnt_his++;
   1358a:	f10a 0a01 	add.w	sl, sl, #1
   1358e:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   13592:	6862      	ldr	r2, [r4, #4]
   13594:	9b01      	ldr	r3, [sp, #4]
   13596:	429a      	cmp	r2, r3
   13598:	d018      	beq.n	135cc <nvs_read_hist+0xa4>
	while (cnt_his <= cnt) {
   1359a:	45d1      	cmp	r9, sl
   1359c:	d2e4      	bcs.n	13568 <nvs_read_hist+0x40>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1359e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   135a2:	b1bb      	cbz	r3, 135d4 <nvs_read_hist+0xac>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   135a4:	45d1      	cmp	r9, sl
   135a6:	d815      	bhi.n	135d4 <nvs_read_hist+0xac>
	rd_addr += wlk_ate.offset;
   135a8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   135ac:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   135ae:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   135b0:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   135b4:	bf28      	it	cs
   135b6:	4633      	movcs	r3, r6
   135b8:	4642      	mov	r2, r8
   135ba:	4429      	add	r1, r5
   135bc:	4620      	mov	r0, r4
   135be:	f012 ffb9 	bl	26534 <nvs_flash_rd>
	if (rc) {
   135c2:	2800      	cmp	r0, #0
   135c4:	d1c0      	bne.n	13548 <nvs_read_hist+0x20>
	return wlk_ate.len;
   135c6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   135ca:	e7bd      	b.n	13548 <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   135cc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   135d0:	42bb      	cmp	r3, r7
   135d2:	d0e4      	beq.n	1359e <nvs_read_hist+0x76>
		return -ENOENT;
   135d4:	f06f 0001 	mvn.w	r0, #1
   135d8:	e7b6      	b.n	13548 <nvs_read_hist+0x20>
		return -EINVAL;
   135da:	f06f 0015 	mvn.w	r0, #21
   135de:	e7b3      	b.n	13548 <nvs_read_hist+0x20>
   135e0:	0002acc9 	.word	0x0002acc9

000135e4 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   135e4:	4b11      	ldr	r3, [pc, #68]	; (1362c <flash_area_open+0x48>)
   135e6:	681b      	ldr	r3, [r3, #0]
{
   135e8:	b570      	push	{r4, r5, r6, lr}
   135ea:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   135ec:	b18b      	cbz	r3, 13612 <flash_area_open+0x2e>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   135ee:	4a10      	ldr	r2, [pc, #64]	; (13630 <flash_area_open+0x4c>)
   135f0:	6811      	ldr	r1, [r2, #0]
   135f2:	2200      	movs	r2, #0
   135f4:	428a      	cmp	r2, r1
   135f6:	db02      	blt.n	135fe <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   135f8:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   135fc:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   135fe:	461d      	mov	r5, r3
   13600:	f813 6b10 	ldrb.w	r6, [r3], #16
   13604:	4286      	cmp	r6, r0
   13606:	d007      	beq.n	13618 <flash_area_open+0x34>
	for (int i = 0; i < flash_map_entries; i++) {
   13608:	3201      	adds	r2, #1
   1360a:	e7f3      	b.n	135f4 <flash_area_open+0x10>
	*fap = area;
   1360c:	6025      	str	r5, [r4, #0]
	return 0;
   1360e:	2000      	movs	r0, #0
   13610:	e7f4      	b.n	135fc <flash_area_open+0x18>
		return -EACCES;
   13612:	f06f 000c 	mvn.w	r0, #12
   13616:	e7f1      	b.n	135fc <flash_area_open+0x18>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   13618:	68e8      	ldr	r0, [r5, #12]
   1361a:	b118      	cbz	r0, 13624 <flash_area_open+0x40>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1361c:	f016 f8fb 	bl	29816 <z_device_is_ready>
   13620:	2800      	cmp	r0, #0
   13622:	d1f3      	bne.n	1360c <flash_area_open+0x28>
		return -ENODEV;
   13624:	f06f 0012 	mvn.w	r0, #18
   13628:	e7e8      	b.n	135fc <flash_area_open+0x18>
   1362a:	bf00      	nop
   1362c:	200004e0 	.word	0x200004e0
   13630:	0002a2b8 	.word	0x0002a2b8

00013634 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   13634:	b570      	push	{r4, r5, r6, lr}
   13636:	b088      	sub	sp, #32
   13638:	4605      	mov	r5, r0
   1363a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   1363c:	b2c0      	uxtb	r0, r0
   1363e:	4669      	mov	r1, sp
{
   13640:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   13642:	f7ff ffcf 	bl	135e4 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   13646:	2800      	cmp	r0, #0
   13648:	db1b      	blt.n	13682 <flash_area_get_sectors+0x4e>
   1364a:	9800      	ldr	r0, [sp, #0]
   1364c:	b1c8      	cbz	r0, 13682 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   1364e:	6843      	ldr	r3, [r0, #4]
   13650:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   13652:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   13654:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   13656:	9501      	str	r5, [sp, #4]
	flash_dev = fa->fa_dev;
   13658:	68c5      	ldr	r5, [r0, #12]
	cb_data->ret = ret;
   1365a:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   1365e:	2300      	movs	r3, #0
	cb_data->status = 0;
   13660:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   13664:	9305      	str	r3, [sp, #20]
	flash_area_close(fa);
   13666:	f013 f9af 	bl	269c8 <flash_area_close>
	if (flash_dev == NULL) {
   1366a:	b16d      	cbz	r5, 13688 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   1366c:	4628      	mov	r0, r5
   1366e:	4908      	ldr	r1, [pc, #32]	; (13690 <flash_area_get_sectors+0x5c>)
   13670:	aa01      	add	r2, sp, #4
   13672:	f015 ff3d 	bl	294f0 <flash_page_foreach>
	if (cb_data->status == 0) {
   13676:	9807      	ldr	r0, [sp, #28]
   13678:	b908      	cbnz	r0, 1367e <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   1367a:	9b05      	ldr	r3, [sp, #20]
   1367c:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   1367e:	b008      	add	sp, #32
   13680:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   13682:	f06f 0015 	mvn.w	r0, #21
   13686:	e7fa      	b.n	1367e <flash_area_get_sectors+0x4a>
		return -ENODEV;
   13688:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   1368c:	e7f7      	b.n	1367e <flash_area_get_sectors+0x4a>
   1368e:	bf00      	nop
   13690:	000269cb 	.word	0x000269cb

00013694 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   13694:	4b10      	ldr	r3, [pc, #64]	; (136d8 <settings_save_one+0x44>)
{
   13696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   1369a:	681c      	ldr	r4, [r3, #0]
{
   1369c:	4605      	mov	r5, r0
   1369e:	460e      	mov	r6, r1
   136a0:	4617      	mov	r7, r2
	if (!cs) {
   136a2:	b1ac      	cbz	r4, 136d0 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   136a4:	f04f 32ff 	mov.w	r2, #4294967295
   136a8:	f04f 33ff 	mov.w	r3, #4294967295
   136ac:	480b      	ldr	r0, [pc, #44]	; (136dc <settings_save_one+0x48>)
   136ae:	f00c fec1 	bl	20434 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   136b2:	6863      	ldr	r3, [r4, #4]
   136b4:	4632      	mov	r2, r6
   136b6:	f8d3 8008 	ldr.w	r8, [r3, #8]
   136ba:	4629      	mov	r1, r5
   136bc:	463b      	mov	r3, r7
   136be:	4620      	mov	r0, r4
   136c0:	47c0      	blx	r8
   136c2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   136c4:	4805      	ldr	r0, [pc, #20]	; (136dc <settings_save_one+0x48>)
   136c6:	f00c ff87 	bl	205d8 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   136ca:	4620      	mov	r0, r4
   136cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   136d0:	f06f 0401 	mvn.w	r4, #1
   136d4:	e7f9      	b.n	136ca <settings_save_one+0x36>
   136d6:	bf00      	nop
   136d8:	20001f34 	.word	0x20001f34
   136dc:	20000878 	.word	0x20000878

000136e0 <settings_src_register>:
	parent->next = child;
   136e0:	2300      	movs	r3, #0
   136e2:	6003      	str	r3, [r0, #0]
	return list->tail;
   136e4:	4b04      	ldr	r3, [pc, #16]	; (136f8 <settings_src_register+0x18>)
   136e6:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   136e8:	b912      	cbnz	r2, 136f0 <settings_src_register+0x10>
	list->head = node;
   136ea:	e9c3 0000 	strd	r0, r0, [r3]
}
   136ee:	4770      	bx	lr
	parent->next = child;
   136f0:	6010      	str	r0, [r2, #0]
	list->tail = node;
   136f2:	6058      	str	r0, [r3, #4]
}
   136f4:	4770      	bx	lr
   136f6:	bf00      	nop
   136f8:	20001f2c 	.word	0x20001f2c

000136fc <settings_dst_register>:
	settings_save_dst = cs;
   136fc:	4b01      	ldr	r3, [pc, #4]	; (13704 <settings_dst_register+0x8>)
   136fe:	6018      	str	r0, [r3, #0]
}
   13700:	4770      	bx	lr
   13702:	bf00      	nop
   13704:	20001f34 	.word	0x20001f34

00013708 <settings_load_subtree>:
{
   13708:	b530      	push	{r4, r5, lr}
   1370a:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   1370c:	2300      	movs	r3, #0
{
   1370e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   13710:	e9cd 3302 	strd	r3, r3, [sp, #8]
   13714:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   13716:	f04f 33ff 	mov.w	r3, #4294967295
   1371a:	480c      	ldr	r0, [pc, #48]	; (1374c <settings_load_subtree+0x44>)
   1371c:	f04f 32ff 	mov.w	r2, #4294967295
   13720:	f00c fe88 	bl	20434 <z_impl_k_mutex_lock>
	return list->head;
   13724:	4b0a      	ldr	r3, [pc, #40]	; (13750 <settings_load_subtree+0x48>)
   13726:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13728:	b134      	cbz	r4, 13738 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   1372a:	6863      	ldr	r3, [r4, #4]
   1372c:	4620      	mov	r0, r4
   1372e:	681b      	ldr	r3, [r3, #0]
   13730:	a901      	add	r1, sp, #4
   13732:	4798      	blx	r3
	return node->next;
   13734:	6824      	ldr	r4, [r4, #0]
   13736:	e7f7      	b.n	13728 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   13738:	4628      	mov	r0, r5
   1373a:	f000 f8d1 	bl	138e0 <settings_commit_subtree>
   1373e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13740:	4802      	ldr	r0, [pc, #8]	; (1374c <settings_load_subtree+0x44>)
   13742:	f00c ff49 	bl	205d8 <z_impl_k_mutex_unlock>
}
   13746:	4620      	mov	r0, r4
   13748:	b005      	add	sp, #20
   1374a:	bd30      	pop	{r4, r5, pc}
   1374c:	20000878 	.word	0x20000878
   13750:	20001f2c 	.word	0x20001f2c

00013754 <settings_load_subtree_direct>:
{
   13754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   13756:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1375a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1375c:	f04f 33ff 	mov.w	r3, #4294967295
   13760:	480a      	ldr	r0, [pc, #40]	; (1378c <settings_load_subtree_direct+0x38>)
   13762:	f04f 32ff 	mov.w	r2, #4294967295
   13766:	f00c fe65 	bl	20434 <z_impl_k_mutex_lock>
	return list->head;
   1376a:	4b09      	ldr	r3, [pc, #36]	; (13790 <settings_load_subtree_direct+0x3c>)
   1376c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1376e:	b134      	cbz	r4, 1377e <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   13770:	6863      	ldr	r3, [r4, #4]
   13772:	4620      	mov	r0, r4
   13774:	681b      	ldr	r3, [r3, #0]
   13776:	a901      	add	r1, sp, #4
   13778:	4798      	blx	r3
	return node->next;
   1377a:	6824      	ldr	r4, [r4, #0]
   1377c:	e7f7      	b.n	1376e <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   1377e:	4803      	ldr	r0, [pc, #12]	; (1378c <settings_load_subtree_direct+0x38>)
   13780:	f00c ff2a 	bl	205d8 <z_impl_k_mutex_unlock>
}
   13784:	2000      	movs	r0, #0
   13786:	b004      	add	sp, #16
   13788:	bd10      	pop	{r4, pc}
   1378a:	bf00      	nop
   1378c:	20000878 	.word	0x20000878
   13790:	20001f2c 	.word	0x20001f2c

00013794 <settings_store_init>:
	list->head = NULL;
   13794:	4b02      	ldr	r3, [pc, #8]	; (137a0 <settings_store_init+0xc>)
   13796:	2200      	movs	r2, #0
	list->tail = NULL;
   13798:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   1379c:	4770      	bx	lr
   1379e:	bf00      	nop
   137a0:	20001f2c 	.word	0x20001f2c

000137a4 <settings_init>:
	list->head = NULL;
   137a4:	4b02      	ldr	r3, [pc, #8]	; (137b0 <settings_init+0xc>)
   137a6:	2200      	movs	r2, #0
	list->tail = NULL;
   137a8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   137ac:	f7ff bff2 	b.w	13794 <settings_store_init>
   137b0:	20001f38 	.word	0x20001f38

000137b4 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   137b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   137b8:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   137ba:	460e      	mov	r6, r1
   137bc:	b109      	cbz	r1, 137c2 <settings_parse_and_lookup+0xe>
		*next = NULL;
   137be:	2300      	movs	r3, #0
   137c0:	600b      	str	r3, [r1, #0]
   137c2:	4c23      	ldr	r4, [pc, #140]	; (13850 <settings_parse_and_lookup+0x9c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   137c4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 13854 <settings_parse_and_lookup+0xa0>
   137c8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 13858 <settings_parse_and_lookup+0xa4>
   137cc:	2500      	movs	r5, #0
   137ce:	4544      	cmp	r4, r8
   137d0:	d908      	bls.n	137e4 <settings_parse_and_lookup+0x30>
   137d2:	4822      	ldr	r0, [pc, #136]	; (1385c <settings_parse_and_lookup+0xa8>)
   137d4:	4649      	mov	r1, r9
   137d6:	2294      	movs	r2, #148	; 0x94
   137d8:	f012 fe91 	bl	264fe <assert_print>
   137dc:	2194      	movs	r1, #148	; 0x94
   137de:	4648      	mov	r0, r9
   137e0:	f012 fe86 	bl	264f0 <assert_post_action>
   137e4:	4544      	cmp	r4, r8
   137e6:	d310      	bcc.n	1380a <settings_parse_and_lookup+0x56>
	return list->head;
   137e8:	4b1d      	ldr	r3, [pc, #116]	; (13860 <settings_parse_and_lookup+0xac>)
   137ea:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   137ec:	b35c      	cbz	r4, 13846 <settings_parse_and_lookup+0x92>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   137ee:	aa01      	add	r2, sp, #4
   137f0:	4638      	mov	r0, r7
   137f2:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   137f6:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   137f8:	f013 f90c 	bl	26a14 <settings_name_steq>
   137fc:	b308      	cbz	r0, 13842 <settings_parse_and_lookup+0x8e>
			continue;
		}
		if (!bestmatch) {
   137fe:	b9cd      	cbnz	r5, 13834 <settings_parse_and_lookup+0x80>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   13800:	b10e      	cbz	r6, 13806 <settings_parse_and_lookup+0x52>
				*next = tmpnext;
   13802:	9b01      	ldr	r3, [sp, #4]
   13804:	6033      	str	r3, [r6, #0]
   13806:	4625      	mov	r5, r4
   13808:	e01b      	b.n	13842 <settings_parse_and_lookup+0x8e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   1380a:	6821      	ldr	r1, [r4, #0]
   1380c:	aa01      	add	r2, sp, #4
   1380e:	4638      	mov	r0, r7
   13810:	f013 f900 	bl	26a14 <settings_name_steq>
   13814:	b160      	cbz	r0, 13830 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   13816:	b925      	cbnz	r5, 13822 <settings_parse_and_lookup+0x6e>
			if (next) {
   13818:	b10e      	cbz	r6, 1381e <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   1381a:	9b01      	ldr	r3, [sp, #4]
   1381c:	6033      	str	r3, [r6, #0]
   1381e:	4625      	mov	r5, r4
   13820:	e006      	b.n	13830 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   13822:	6829      	ldr	r1, [r5, #0]
   13824:	6820      	ldr	r0, [r4, #0]
   13826:	2200      	movs	r2, #0
   13828:	f013 f8f4 	bl	26a14 <settings_name_steq>
   1382c:	2800      	cmp	r0, #0
   1382e:	d1f3      	bne.n	13818 <settings_parse_and_lookup+0x64>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13830:	3414      	adds	r4, #20
   13832:	e7cc      	b.n	137ce <settings_parse_and_lookup+0x1a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   13834:	6829      	ldr	r1, [r5, #0]
   13836:	6820      	ldr	r0, [r4, #0]
   13838:	2200      	movs	r2, #0
   1383a:	f013 f8eb 	bl	26a14 <settings_name_steq>
   1383e:	2800      	cmp	r0, #0
   13840:	d1de      	bne.n	13800 <settings_parse_and_lookup+0x4c>
	return node->next;
   13842:	6964      	ldr	r4, [r4, #20]
   13844:	e7d2      	b.n	137ec <settings_parse_and_lookup+0x38>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   13846:	4628      	mov	r0, r5
   13848:	b003      	add	sp, #12
   1384a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1384e:	bf00      	nop
   13850:	0002a060 	.word	0x0002a060
   13854:	0002a0d8 	.word	0x0002a0d8
   13858:	0002ae1f 	.word	0x0002ae1f
   1385c:	0002aa75 	.word	0x0002aa75
   13860:	20001f38 	.word	0x20001f38

00013864 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   13864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13868:	b085      	sub	sp, #20
   1386a:	4604      	mov	r4, r0
   1386c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   13870:	9003      	str	r0, [sp, #12]
{
   13872:	460d      	mov	r5, r1
   13874:	4616      	mov	r6, r2
   13876:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   13878:	f1b8 0f00 	cmp.w	r8, #0
   1387c:	d018      	beq.n	138b0 <settings_call_set_handler+0x4c>
   1387e:	f8d8 1000 	ldr.w	r1, [r8]
   13882:	b181      	cbz	r1, 138a6 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   13884:	aa03      	add	r2, sp, #12
   13886:	f013 f8c5 	bl	26a14 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   1388a:	b960      	cbnz	r0, 138a6 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				name, rc);
			/* Ignoring the error */
			rc = 0;
   1388c:	2000      	movs	r0, #0
   1388e:	e007      	b.n	138a0 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   13890:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13894:	9300      	str	r3, [sp, #0]
   13896:	9803      	ldr	r0, [sp, #12]
   13898:	463b      	mov	r3, r7
   1389a:	4632      	mov	r2, r6
   1389c:	4629      	mov	r1, r5
   1389e:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   138a0:	b005      	add	sp, #20
   138a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   138a6:	f8d8 9004 	ldr.w	r9, [r8, #4]
   138aa:	f1b9 0f00 	cmp.w	r9, #0
   138ae:	d1ef      	bne.n	13890 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   138b0:	a903      	add	r1, sp, #12
   138b2:	4620      	mov	r0, r4
   138b4:	f7ff ff7e 	bl	137b4 <settings_parse_and_lookup>
		if (!ch) {
   138b8:	2800      	cmp	r0, #0
   138ba:	d0e7      	beq.n	1388c <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   138bc:	f8d0 8008 	ldr.w	r8, [r0, #8]
   138c0:	9803      	ldr	r0, [sp, #12]
   138c2:	463b      	mov	r3, r7
   138c4:	4632      	mov	r2, r6
   138c6:	4629      	mov	r1, r5
   138c8:	47c0      	blx	r8
		if (rc != 0) {
   138ca:	4603      	mov	r3, r0
   138cc:	2800      	cmp	r0, #0
   138ce:	d0dd      	beq.n	1388c <settings_call_set_handler+0x28>
			LOG_ERR("set-value failure. key: %s error(%d)",
   138d0:	4802      	ldr	r0, [pc, #8]	; (138dc <settings_call_set_handler+0x78>)
   138d2:	4622      	mov	r2, r4
   138d4:	2145      	movs	r1, #69	; 0x45
   138d6:	f012 fe20 	bl	2651a <z_log_minimal_printk>
   138da:	e7d7      	b.n	1388c <settings_call_set_handler+0x28>
   138dc:	0002ae51 	.word	0x0002ae51

000138e0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   138e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   138e4:	4c1e      	ldr	r4, [pc, #120]	; (13960 <settings_commit_subtree+0x80>)
   138e6:	4f1f      	ldr	r7, [pc, #124]	; (13964 <settings_commit_subtree+0x84>)
   138e8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 13968 <settings_commit_subtree+0x88>
{
   138ec:	4606      	mov	r6, r0
	rc = 0;
   138ee:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   138f0:	42bc      	cmp	r4, r7
   138f2:	d908      	bls.n	13906 <settings_commit_subtree+0x26>
   138f4:	481d      	ldr	r0, [pc, #116]	; (1396c <settings_commit_subtree+0x8c>)
   138f6:	4641      	mov	r1, r8
   138f8:	22f4      	movs	r2, #244	; 0xf4
   138fa:	f012 fe00 	bl	264fe <assert_print>
   138fe:	21f4      	movs	r1, #244	; 0xf4
   13900:	4640      	mov	r0, r8
   13902:	f012 fdf5 	bl	264f0 <assert_post_action>
   13906:	42bc      	cmp	r4, r7
   13908:	d308      	bcc.n	1391c <settings_commit_subtree+0x3c>
	return list->head;
   1390a:	4b19      	ldr	r3, [pc, #100]	; (13970 <settings_commit_subtree+0x90>)
   1390c:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1390e:	b324      	cbz	r4, 1395a <settings_commit_subtree+0x7a>
   13910:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13912:	b9ae      	cbnz	r6, 13940 <settings_commit_subtree+0x60>
			continue;
		}
		if (ch->h_commit) {
   13914:	68e3      	ldr	r3, [r4, #12]
   13916:	b9db      	cbnz	r3, 13950 <settings_commit_subtree+0x70>
	return node->next;
   13918:	6964      	ldr	r4, [r4, #20]
   1391a:	e7f8      	b.n	1390e <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1391c:	b91e      	cbnz	r6, 13926 <settings_commit_subtree+0x46>
		if (ch->h_commit) {
   1391e:	68e3      	ldr	r3, [r4, #12]
   13920:	b94b      	cbnz	r3, 13936 <settings_commit_subtree+0x56>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13922:	3414      	adds	r4, #20
   13924:	e7e4      	b.n	138f0 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13926:	6820      	ldr	r0, [r4, #0]
   13928:	2200      	movs	r2, #0
   1392a:	4631      	mov	r1, r6
   1392c:	f013 f872 	bl	26a14 <settings_name_steq>
   13930:	2800      	cmp	r0, #0
   13932:	d1f4      	bne.n	1391e <settings_commit_subtree+0x3e>
   13934:	e7f5      	b.n	13922 <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
   13936:	4798      	blx	r3
				rc = rc2;
   13938:	2d00      	cmp	r5, #0
   1393a:	bf08      	it	eq
   1393c:	4605      	moveq	r5, r0
   1393e:	e7f0      	b.n	13922 <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13940:	6820      	ldr	r0, [r4, #0]
   13942:	2200      	movs	r2, #0
   13944:	4631      	mov	r1, r6
   13946:	f013 f865 	bl	26a14 <settings_name_steq>
   1394a:	2800      	cmp	r0, #0
   1394c:	d1e2      	bne.n	13914 <settings_commit_subtree+0x34>
   1394e:	e7e3      	b.n	13918 <settings_commit_subtree+0x38>
			rc2 = ch->h_commit();
   13950:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   13952:	2d00      	cmp	r5, #0
   13954:	bf08      	it	eq
   13956:	4605      	moveq	r5, r0
   13958:	e7de      	b.n	13918 <settings_commit_subtree+0x38>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   1395a:	4628      	mov	r0, r5
   1395c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13960:	0002a060 	.word	0x0002a060
   13964:	0002a0d8 	.word	0x0002a0d8
   13968:	0002ae1f 	.word	0x0002ae1f
   1396c:	0002aa75 	.word	0x0002aa75
   13970:	20001f38 	.word	0x20001f38

00013974 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   13974:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   13976:	4c06      	ldr	r4, [pc, #24]	; (13990 <settings_subsys_init+0x1c>)
   13978:	7823      	ldrb	r3, [r4, #0]
   1397a:	b93b      	cbnz	r3, 1398c <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   1397c:	f7ff ff12 	bl	137a4 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   13980:	f000 f864 	bl	13a4c <settings_backend_init>

	if (!err) {
   13984:	b908      	cbnz	r0, 1398a <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   13986:	2301      	movs	r3, #1
   13988:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   1398a:	bd10      	pop	{r4, pc}
		return 0;
   1398c:	2000      	movs	r0, #0
   1398e:	e7fc      	b.n	1398a <settings_subsys_init+0x16>
   13990:	200033d0 	.word	0x200033d0

00013994 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   13994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   13998:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   1399a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 13a48 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   1399e:	3401      	adds	r4, #1
{
   139a0:	b098      	sub	sp, #96	; 0x60
   139a2:	4680      	mov	r8, r0
   139a4:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   139a6:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   139a8:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   139ac:	1e65      	subs	r5, r4, #1
   139ae:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   139b0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   139b4:	d045      	beq.n	13a42 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   139b6:	234a      	movs	r3, #74	; 0x4a
   139b8:	aa05      	add	r2, sp, #20
   139ba:	4629      	mov	r1, r5
   139bc:	4630      	mov	r0, r6
   139be:	f012 fffc 	bl	269ba <nvs_read>
   139c2:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   139c6:	343f      	adds	r4, #63	; 0x3f
   139c8:	b2a4      	uxth	r4, r4
   139ca:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   139cc:	4621      	mov	r1, r4
   139ce:	2301      	movs	r3, #1
   139d0:	f10d 020b 	add.w	r2, sp, #11
   139d4:	4630      	mov	r0, r6
   139d6:	f012 fff0 	bl	269ba <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   139da:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   139dc:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   139de:	dc03      	bgt.n	139e8 <settings_nvs_load+0x54>
   139e0:	2800      	cmp	r0, #0
   139e2:	dc03      	bgt.n	139ec <settings_nvs_load+0x58>
{
   139e4:	462c      	mov	r4, r5
   139e6:	e7e1      	b.n	139ac <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   139e8:	2800      	cmp	r0, #0
   139ea:	dc16      	bgt.n	13a1a <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   139ec:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   139f0:	42ab      	cmp	r3, r5
   139f2:	d109      	bne.n	13a08 <settings_nvs_load+0x74>
				cf->last_name_id--;
   139f4:	4642      	mov	r2, r8
   139f6:	1e6b      	subs	r3, r5, #1
   139f8:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   139fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13a00:	2302      	movs	r3, #2
   13a02:	4630      	mov	r0, r6
   13a04:	f7ff fcc6 	bl	13394 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   13a08:	4629      	mov	r1, r5
   13a0a:	4630      	mov	r0, r6
   13a0c:	f012 ffd1 	bl	269b2 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   13a10:	4621      	mov	r1, r4
   13a12:	4630      	mov	r0, r6
   13a14:	f012 ffcd 	bl	269b2 <nvs_delete>
			continue;
   13a18:	e7e4      	b.n	139e4 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   13a1a:	ab18      	add	r3, sp, #96	; 0x60
   13a1c:	441f      	add	r7, r3
   13a1e:	2300      	movs	r3, #0
   13a20:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   13a24:	4652      	mov	r2, sl
   13a26:	f8cd 9000 	str.w	r9, [sp]
   13a2a:	ab03      	add	r3, sp, #12
   13a2c:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   13a2e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   13a30:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   13a34:	f7ff ff16 	bl	13864 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   13a38:	2800      	cmp	r0, #0
   13a3a:	d0d3      	beq.n	139e4 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   13a3c:	b018      	add	sp, #96	; 0x60
   13a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13a42:	2000      	movs	r0, #0
	return ret;
   13a44:	e7fa      	b.n	13a3c <settings_nvs_load+0xa8>
   13a46:	bf00      	nop
   13a48:	00026a8b 	.word	0x00026a8b

00013a4c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   13a4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   13a4e:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   13a50:	4669      	mov	r1, sp
   13a52:	2003      	movs	r0, #3
	uint32_t sector_cnt = 1;
   13a54:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   13a56:	f7ff fdc5 	bl	135e4 <flash_area_open>
	if (rc) {
   13a5a:	4604      	mov	r4, r0
   13a5c:	2800      	cmp	r0, #0
   13a5e:	d136      	bne.n	13ace <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   13a60:	aa02      	add	r2, sp, #8
   13a62:	a901      	add	r1, sp, #4
   13a64:	2003      	movs	r0, #3
   13a66:	f7ff fde5 	bl	13634 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   13a6a:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   13a6e:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   13a70:	d02d      	beq.n	13ace <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   13a72:	b138      	cbz	r0, 13a84 <settings_backend_init+0x38>
   13a74:	340c      	adds	r4, #12
   13a76:	d005      	beq.n	13a84 <settings_backend_init+0x38>
		k_panic();
   13a78:	4040      	eors	r0, r0
   13a7a:	f380 8811 	msr	BASEPRI, r0
   13a7e:	f04f 0004 	mov.w	r0, #4
   13a82:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   13a84:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   13a86:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   13a8a:	d223      	bcs.n	13ad4 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   13a8c:	9a00      	ldr	r2, [sp, #0]
   13a8e:	2300      	movs	r3, #0
   13a90:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   13a92:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   13a94:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   13a96:	4285      	cmp	r5, r0
   13a98:	b29c      	uxth	r4, r3
   13a9a:	d303      	bcc.n	13aa4 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   13a9c:	3301      	adds	r3, #1
   13a9e:	2b08      	cmp	r3, #8
   13aa0:	d1f8      	bne.n	13a94 <settings_backend_init+0x48>
   13aa2:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   13aa4:	4d0d      	ldr	r5, [pc, #52]	; (13adc <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   13aa6:	6853      	ldr	r3, [r2, #4]
   13aa8:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   13aaa:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   13aac:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   13aae:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   13ab0:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev = fa->fa_dev;
   13ab2:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   13ab4:	f013 f880 	bl	26bb8 <settings_nvs_backend_init>
	if (rc) {
   13ab8:	4604      	mov	r4, r0
   13aba:	b940      	cbnz	r0, 13ace <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13abc:	4e08      	ldr	r6, [pc, #32]	; (13ae0 <settings_backend_init+0x94>)
   13abe:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   13ac0:	4628      	mov	r0, r5
   13ac2:	f7ff fe0d 	bl	136e0 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   13ac6:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13ac8:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   13aca:	f7ff fe17 	bl	136fc <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   13ace:	4620      	mov	r0, r4
   13ad0:	b004      	add	sp, #16
   13ad2:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   13ad4:	f06f 0420 	mvn.w	r4, #32
   13ad8:	e7f9      	b.n	13ace <settings_backend_init+0x82>
   13ada:	bf00      	nop
   13adc:	20001f40 	.word	0x20001f40
   13ae0:	200004e4 	.word	0x200004e4

00013ae4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   13ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13ae8:	4605      	mov	r5, r0
   13aea:	f04f 0340 	mov.w	r3, #64	; 0x40
   13aee:	f3ef 8611 	mrs	r6, BASEPRI
   13af2:	f383 8812 	msr	BASEPRI_MAX, r3
   13af6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13afa:	481d      	ldr	r0, [pc, #116]	; (13b70 <pm_state_notify+0x8c>)
   13afc:	f00c fc46 	bl	2038c <z_spin_lock_valid>
   13b00:	b940      	cbnz	r0, 13b14 <pm_state_notify+0x30>
   13b02:	491c      	ldr	r1, [pc, #112]	; (13b74 <pm_state_notify+0x90>)
   13b04:	481c      	ldr	r0, [pc, #112]	; (13b78 <pm_state_notify+0x94>)
   13b06:	228e      	movs	r2, #142	; 0x8e
   13b08:	f012 fcf9 	bl	264fe <assert_print>
   13b0c:	4819      	ldr	r0, [pc, #100]	; (13b74 <pm_state_notify+0x90>)
   13b0e:	218e      	movs	r1, #142	; 0x8e
   13b10:	f012 fcee 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   13b14:	4816      	ldr	r0, [pc, #88]	; (13b70 <pm_state_notify+0x8c>)
   13b16:	f00c fc57 	bl	203c8 <z_spin_lock_set_owner>
	return list->head;
   13b1a:	4b18      	ldr	r3, [pc, #96]	; (13b7c <pm_state_notify+0x98>)
   13b1c:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13b1e:	b19c      	cbz	r4, 13b48 <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13b20:	4f17      	ldr	r7, [pc, #92]	; (13b80 <pm_state_notify+0x9c>)
   13b22:	f8df 8060 	ldr.w	r8, [pc, #96]	; 13b84 <pm_state_notify+0xa0>
   13b26:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   13b2a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   13b2e:	2d00      	cmp	r5, #0
   13b30:	bf08      	it	eq
   13b32:	4613      	moveq	r3, r2
		if (callback) {
   13b34:	b12b      	cbz	r3, 13b42 <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13b36:	f898 2014 	ldrb.w	r2, [r8, #20]
   13b3a:	fb09 f202 	mul.w	r2, r9, r2
   13b3e:	5cb8      	ldrb	r0, [r7, r2]
   13b40:	4798      	blx	r3
	return node->next;
   13b42:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13b44:	2c00      	cmp	r4, #0
   13b46:	d1f0      	bne.n	13b2a <pm_state_notify+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13b48:	4809      	ldr	r0, [pc, #36]	; (13b70 <pm_state_notify+0x8c>)
   13b4a:	f00c fc2d 	bl	203a8 <z_spin_unlock_valid>
   13b4e:	b940      	cbnz	r0, 13b62 <pm_state_notify+0x7e>
   13b50:	4908      	ldr	r1, [pc, #32]	; (13b74 <pm_state_notify+0x90>)
   13b52:	4809      	ldr	r0, [pc, #36]	; (13b78 <pm_state_notify+0x94>)
   13b54:	22b9      	movs	r2, #185	; 0xb9
   13b56:	f012 fcd2 	bl	264fe <assert_print>
   13b5a:	4806      	ldr	r0, [pc, #24]	; (13b74 <pm_state_notify+0x90>)
   13b5c:	21b9      	movs	r1, #185	; 0xb9
   13b5e:	f012 fcc7 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   13b62:	f386 8811 	msr	BASEPRI, r6
   13b66:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13b6e:	bf00      	nop
   13b70:	20001f84 	.word	0x20001f84
   13b74:	0002ac34 	.word	0x0002ac34
   13b78:	0002aa75 	.word	0x0002aa75
   13b7c:	20001f88 	.word	0x20001f88
   13b80:	20001f9c 	.word	0x20001f9c
   13b84:	20002894 	.word	0x20002894

00013b88 <pm_system_resume>:

void pm_system_resume(void)
{
   13b88:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
   13b8a:	4b1a      	ldr	r3, [pc, #104]	; (13bf4 <pm_system_resume+0x6c>)
   13b8c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13b8e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   13b92:	f004 031f 	and.w	r3, r4, #31
   13b96:	2201      	movs	r2, #1
   13b98:	409a      	lsls	r2, r3
   13b9a:	4b17      	ldr	r3, [pc, #92]	; (13bf8 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13b9c:	0961      	lsrs	r1, r4, #5
   13b9e:	43d0      	mvns	r0, r2
   13ba0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13ba4:	e853 1f00 	ldrex	r1, [r3]
   13ba8:	ea01 0500 	and.w	r5, r1, r0
   13bac:	e843 5c00 	strex	ip, r5, [r3]
   13bb0:	f1bc 0f00 	cmp.w	ip, #0
   13bb4:	d1f6      	bne.n	13ba4 <pm_system_resume+0x1c>
   13bb6:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   13bba:	4211      	tst	r1, r2
   13bbc:	d013      	beq.n	13be6 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   13bbe:	4b0f      	ldr	r3, [pc, #60]	; (13bfc <pm_system_resume+0x74>)
   13bc0:	4d0f      	ldr	r5, [pc, #60]	; (13c00 <pm_system_resume+0x78>)
   13bc2:	b18b      	cbz	r3, 13be8 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   13bc4:	230c      	movs	r3, #12
   13bc6:	4363      	muls	r3, r4
   13bc8:	18ea      	adds	r2, r5, r3
   13bca:	5ce8      	ldrb	r0, [r5, r3]
   13bcc:	7851      	ldrb	r1, [r2, #1]
   13bce:	f013 fb4a 	bl	27266 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   13bd2:	2000      	movs	r0, #0
   13bd4:	f7ff ff86 	bl	13ae4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   13bd8:	230c      	movs	r3, #12
   13bda:	435c      	muls	r4, r3
   13bdc:	192a      	adds	r2, r5, r4
   13bde:	2300      	movs	r3, #0
   13be0:	512b      	str	r3, [r5, r4]
   13be2:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   13be6:	bd38      	pop	{r3, r4, r5, pc}
   13be8:	f383 8811 	msr	BASEPRI, r3
   13bec:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   13bf0:	e7ef      	b.n	13bd2 <pm_system_resume+0x4a>
   13bf2:	bf00      	nop
   13bf4:	20002894 	.word	0x20002894
   13bf8:	20001fa8 	.word	0x20001fa8
   13bfc:	00027267 	.word	0x00027267
   13c00:	20001f9c 	.word	0x20001f9c

00013c04 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   13c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   13c08:	4b42      	ldr	r3, [pc, #264]	; (13d14 <pm_system_suspend+0x110>)
{
   13c0a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   13c0c:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   13c0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13c12:	f3ef 8811 	mrs	r8, BASEPRI
   13c16:	f383 8812 	msr	BASEPRI_MAX, r3
   13c1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13c1e:	483e      	ldr	r0, [pc, #248]	; (13d18 <pm_system_suspend+0x114>)
   13c20:	f00c fbb4 	bl	2038c <z_spin_lock_valid>
   13c24:	b940      	cbnz	r0, 13c38 <pm_system_suspend+0x34>
   13c26:	493d      	ldr	r1, [pc, #244]	; (13d1c <pm_system_suspend+0x118>)
   13c28:	483d      	ldr	r0, [pc, #244]	; (13d20 <pm_system_suspend+0x11c>)
   13c2a:	228e      	movs	r2, #142	; 0x8e
   13c2c:	f012 fc67 	bl	264fe <assert_print>
   13c30:	483a      	ldr	r0, [pc, #232]	; (13d1c <pm_system_suspend+0x118>)
   13c32:	218e      	movs	r1, #142	; 0x8e
   13c34:	f012 fc5c 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   13c38:	4837      	ldr	r0, [pc, #220]	; (13d18 <pm_system_suspend+0x114>)
   13c3a:	4e3a      	ldr	r6, [pc, #232]	; (13d24 <pm_system_suspend+0x120>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   13c3c:	240c      	movs	r4, #12
   13c3e:	f00c fbc3 	bl	203c8 <z_spin_lock_set_owner>
   13c42:	436c      	muls	r4, r5
   13c44:	4b38      	ldr	r3, [pc, #224]	; (13d28 <pm_system_suspend+0x124>)
   13c46:	5d19      	ldrb	r1, [r3, r4]
   13c48:	191a      	adds	r2, r3, r4
   13c4a:	2900      	cmp	r1, #0
   13c4c:	d056      	beq.n	13cfc <pm_system_suspend+0xf8>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   13c4e:	ca07      	ldmia	r2, {r0, r1, r2}
   13c50:	eb06 0c04 	add.w	ip, r6, r4
   13c54:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   13c58:	2200      	movs	r2, #0
   13c5a:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13c5c:	482e      	ldr	r0, [pc, #184]	; (13d18 <pm_system_suspend+0x114>)
   13c5e:	f00c fba3 	bl	203a8 <z_spin_unlock_valid>
   13c62:	b940      	cbnz	r0, 13c76 <pm_system_suspend+0x72>
   13c64:	492d      	ldr	r1, [pc, #180]	; (13d1c <pm_system_suspend+0x118>)
   13c66:	482e      	ldr	r0, [pc, #184]	; (13d20 <pm_system_suspend+0x11c>)
   13c68:	22b9      	movs	r2, #185	; 0xb9
   13c6a:	f012 fc48 	bl	264fe <assert_print>
   13c6e:	482b      	ldr	r0, [pc, #172]	; (13d1c <pm_system_suspend+0x118>)
   13c70:	21b9      	movs	r1, #185	; 0xb9
   13c72:	f012 fc3d 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   13c76:	f388 8811 	msr	BASEPRI, r8
   13c7a:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   13c7e:	230c      	movs	r3, #12
   13c80:	436b      	muls	r3, r5
   13c82:	18f2      	adds	r2, r6, r3
   13c84:	5cf0      	ldrb	r0, [r6, r3]
   13c86:	b3b8      	cbz	r0, 13cf8 <pm_system_suspend+0xf4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   13c88:	1c7b      	adds	r3, r7, #1
   13c8a:	d00f      	beq.n	13cac <pm_system_suspend+0xa8>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   13c8c:	f8d2 c008 	ldr.w	ip, [r2, #8]
   13c90:	4826      	ldr	r0, [pc, #152]	; (13d2c <pm_system_suspend+0x128>)
   13c92:	4a27      	ldr	r2, [pc, #156]	; (13d30 <pm_system_suspend+0x12c>)
   13c94:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   13c98:	2100      	movs	r1, #0
   13c9a:	2300      	movs	r3, #0
   13c9c:	fbec 0104 	umlal	r0, r1, ip, r4
   13ca0:	f7ed fa2e 	bl	1100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   13ca4:	2101      	movs	r1, #1
   13ca6:	1a38      	subs	r0, r7, r0
   13ca8:	f00e fd48 	bl	2273c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   13cac:	f00d fc68 	bl	21580 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   13cb0:	2001      	movs	r0, #1
   13cb2:	f7ff ff17 	bl	13ae4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13cb6:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   13cba:	f005 021f 	and.w	r2, r5, #31
   13cbe:	2101      	movs	r1, #1
   13cc0:	4091      	lsls	r1, r2
   13cc2:	4a1c      	ldr	r2, [pc, #112]	; (13d34 <pm_system_suspend+0x130>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13cc4:	096b      	lsrs	r3, r5, #5
   13cc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13cca:	e853 2f00 	ldrex	r2, [r3]
   13cce:	430a      	orrs	r2, r1
   13cd0:	e843 2000 	strex	r0, r2, [r3]
   13cd4:	2800      	cmp	r0, #0
   13cd6:	d1f8      	bne.n	13cca <pm_system_suspend+0xc6>
   13cd8:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   13cdc:	4b16      	ldr	r3, [pc, #88]	; (13d38 <pm_system_suspend+0x134>)
   13cde:	b133      	cbz	r3, 13cee <pm_system_suspend+0xea>
		pm_state_set(info->state, info->substate_id);
   13ce0:	200c      	movs	r0, #12
   13ce2:	4368      	muls	r0, r5
   13ce4:	1833      	adds	r3, r6, r0
   13ce6:	5c30      	ldrb	r0, [r6, r0]
   13ce8:	7859      	ldrb	r1, [r3, #1]
   13cea:	f013 fab0 	bl	2724e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   13cee:	f7ff ff4b 	bl	13b88 <pm_system_resume>
	k_sched_unlock();
   13cf2:	f00e f8a3 	bl	21e3c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   13cf6:	2001      	movs	r0, #1
}
   13cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   13cfc:	4639      	mov	r1, r7
   13cfe:	4628      	mov	r0, r5
   13d00:	f000 f81c 	bl	13d3c <pm_policy_next_state>
		if (info != NULL) {
   13d04:	2800      	cmp	r0, #0
   13d06:	d0a9      	beq.n	13c5c <pm_system_suspend+0x58>
			z_cpus_pm_state[id] = *info;
   13d08:	c807      	ldmia	r0, {r0, r1, r2}
   13d0a:	4434      	add	r4, r6
   13d0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   13d10:	e7a4      	b.n	13c5c <pm_system_suspend+0x58>
   13d12:	bf00      	nop
   13d14:	20002894 	.word	0x20002894
   13d18:	20001f80 	.word	0x20001f80
   13d1c:	0002ac34 	.word	0x0002ac34
   13d20:	0002aa75 	.word	0x0002aa75
   13d24:	20001f9c 	.word	0x20001f9c
   13d28:	20001f90 	.word	0x20001f90
   13d2c:	000f423f 	.word	0x000f423f
   13d30:	000f4240 	.word	0x000f4240
   13d34:	20001fa8 	.word	0x20001fa8
   13d38:	0002724f 	.word	0x0002724f

00013d3c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   13d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d40:	b085      	sub	sp, #20
   13d42:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13d44:	a903      	add	r1, sp, #12
   13d46:	f000 f841 	bl	13dcc <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
   13d4a:	9b03      	ldr	r3, [sp, #12]
   13d4c:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13d4e:	4b1c      	ldr	r3, [pc, #112]	; (13dc0 <pm_policy_next_state+0x84>)
   13d50:	f8df 8070 	ldr.w	r8, [pc, #112]	; 13dc4 <pm_policy_next_state+0x88>
   13d54:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13d58:	1e44      	subs	r4, r0, #1
   13d5a:	b224      	sxth	r4, r4
   13d5c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   13d60:	f04f 0b00 	mov.w	fp, #0
   13d64:	1c63      	adds	r3, r4, #1
   13d66:	d104      	bne.n	13d72 <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   13d68:	2500      	movs	r5, #0
}
   13d6a:	4628      	mov	r0, r5
   13d6c:	b005      	add	sp, #20
   13d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   13d72:	9b01      	ldr	r3, [sp, #4]
   13d74:	4a14      	ldr	r2, [pc, #80]	; (13dc8 <pm_policy_next_state+0x8c>)
   13d76:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   13d7a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   13d7e:	46c4      	mov	ip, r8
   13d80:	6868      	ldr	r0, [r5, #4]
   13d82:	4659      	mov	r1, fp
   13d84:	fbe0 c107 	umlal	ip, r1, r0, r7
   13d88:	2300      	movs	r3, #0
   13d8a:	4660      	mov	r0, ip
   13d8c:	f7ed f9b8 	bl	1100 <__aeabi_uldivmod>
   13d90:	4681      	mov	r9, r0
   13d92:	68a8      	ldr	r0, [r5, #8]
   13d94:	4a0c      	ldr	r2, [pc, #48]	; (13dc8 <pm_policy_next_state+0x8c>)
   13d96:	46c4      	mov	ip, r8
   13d98:	4659      	mov	r1, fp
   13d9a:	fbe0 c107 	umlal	ip, r1, r0, r7
   13d9e:	2300      	movs	r3, #0
   13da0:	4660      	mov	r0, ip
   13da2:	f7ed f9ad 	bl	1100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13da6:	f1ba 3fff 	cmp.w	sl, #4294967295
   13daa:	d001      	beq.n	13db0 <pm_policy_next_state+0x74>
   13dac:	4582      	cmp	sl, r0
   13dae:	d904      	bls.n	13dba <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   13db0:	1c72      	adds	r2, r6, #1
   13db2:	d0da      	beq.n	13d6a <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
   13db4:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
   13db6:	42b0      	cmp	r0, r6
   13db8:	d9d7      	bls.n	13d6a <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13dba:	3c01      	subs	r4, #1
   13dbc:	b224      	sxth	r4, r4
   13dbe:	e7d1      	b.n	13d64 <pm_policy_next_state+0x28>
   13dc0:	200004f8 	.word	0x200004f8
   13dc4:	000f423f 	.word	0x000f423f
   13dc8:	000f4240 	.word	0x000f4240

00013dcc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   13dcc:	b908      	cbnz	r0, 13dd2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   13dce:	4b02      	ldr	r3, [pc, #8]	; (13dd8 <pm_state_cpu_get_all+0xc>)
   13dd0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   13dd2:	2000      	movs	r0, #0
   13dd4:	4770      	bx	lr
   13dd6:	bf00      	nop
   13dd8:	0002a2bc 	.word	0x0002a2bc

00013ddc <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   13ddc:	4904      	ldr	r1, [pc, #16]	; (13df0 <sub_bytes+0x14>)
   13dde:	1e43      	subs	r3, r0, #1
   13de0:	300f      	adds	r0, #15
   13de2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   13de6:	5c8a      	ldrb	r2, [r1, r2]
   13de8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   13dea:	4283      	cmp	r3, r0
   13dec:	d1f9      	bne.n	13de2 <sub_bytes+0x6>
	}
}
   13dee:	4770      	bx	lr
   13df0:	0002ae7e 	.word	0x0002ae7e

00013df4 <tc_aes128_set_encrypt_key>:
{
   13df4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   13df6:	4e26      	ldr	r6, [pc, #152]	; (13e90 <tc_aes128_set_encrypt_key+0x9c>)
{
   13df8:	4607      	mov	r7, r0
   13dfa:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   13dfc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   13dfe:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   13e00:	ad01      	add	r5, sp, #4
   13e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13e04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13e08:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13e0c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   13e10:	4638      	mov	r0, r7
   13e12:	2f00      	cmp	r7, #0
   13e14:	d038      	beq.n	13e88 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   13e16:	2c00      	cmp	r4, #0
   13e18:	d038      	beq.n	13e8c <tc_aes128_set_encrypt_key+0x98>
   13e1a:	1f38      	subs	r0, r7, #4
   13e1c:	4621      	mov	r1, r4
   13e1e:	4602      	mov	r2, r0
   13e20:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13e22:	784b      	ldrb	r3, [r1, #1]
   13e24:	780d      	ldrb	r5, [r1, #0]
   13e26:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13e28:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   13e2c:	78cd      	ldrb	r5, [r1, #3]
   13e2e:	432b      	orrs	r3, r5
   13e30:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   13e32:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13e34:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   13e38:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13e3a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   13e3e:	d1f0      	bne.n	13e22 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13e40:	4c14      	ldr	r4, [pc, #80]	; (13e94 <tc_aes128_set_encrypt_key+0xa0>)
   13e42:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   13e44:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   13e46:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   13e48:	d116      	bne.n	13e78 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13e4a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13e4e:	5ca5      	ldrb	r5, [r4, r2]
   13e50:	0e1a      	lsrs	r2, r3, #24
   13e52:	5ca2      	ldrb	r2, [r4, r2]
   13e54:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   13e58:	f3c3 2507 	ubfx	r5, r3, #8, #8
   13e5c:	b2db      	uxtb	r3, r3
   13e5e:	5d65      	ldrb	r5, [r4, r5]
   13e60:	5ce3      	ldrb	r3, [r4, r3]
   13e62:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   13e66:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   13e6a:	ad0c      	add	r5, sp, #48	; 0x30
   13e6c:	f021 0303 	bic.w	r3, r1, #3
   13e70:	442b      	add	r3, r5
   13e72:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   13e76:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   13e78:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   13e7c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   13e7e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   13e80:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   13e82:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   13e84:	d1de      	bne.n	13e44 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   13e86:	2001      	movs	r0, #1
}
   13e88:	b00d      	add	sp, #52	; 0x34
   13e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   13e8c:	4620      	mov	r0, r4
   13e8e:	e7fb      	b.n	13e88 <tc_aes128_set_encrypt_key+0x94>
   13e90:	0002a0f4 	.word	0x0002a0f4
   13e94:	0002ae7e 	.word	0x0002ae7e

00013e98 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   13e98:	4801      	ldr	r0, [pc, #4]	; (13ea0 <nrf_cc3xx_platform_abort_init+0x8>)
   13e9a:	f00f bc3b 	b.w	23714 <nrf_cc3xx_platform_set_abort>
   13e9e:	bf00      	nop
   13ea0:	0002a2bc 	.word	0x0002a2bc

00013ea4 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13ea4:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   13ea6:	4604      	mov	r4, r0
   13ea8:	b918      	cbnz	r0, 13eb2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   13eaa:	4b0d      	ldr	r3, [pc, #52]	; (13ee0 <mutex_free_platform+0x3c>)
   13eac:	480d      	ldr	r0, [pc, #52]	; (13ee4 <mutex_free_platform+0x40>)
   13eae:	685b      	ldr	r3, [r3, #4]
   13eb0:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13eb2:	6861      	ldr	r1, [r4, #4]
   13eb4:	2908      	cmp	r1, #8
   13eb6:	d00d      	beq.n	13ed4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13eb8:	f031 0304 	bics.w	r3, r1, #4
   13ebc:	d00a      	beq.n	13ed4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   13ebe:	f011 0102 	ands.w	r1, r1, #2
   13ec2:	d008      	beq.n	13ed6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   13ec4:	4808      	ldr	r0, [pc, #32]	; (13ee8 <mutex_free_platform+0x44>)
   13ec6:	4621      	mov	r1, r4
   13ec8:	f00c f8f2 	bl	200b0 <k_mem_slab_free>
        mutex->mutex = NULL;
   13ecc:	2300      	movs	r3, #0
   13ece:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   13ed0:	2300      	movs	r3, #0
   13ed2:	6063      	str	r3, [r4, #4]
}
   13ed4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   13ed6:	6820      	ldr	r0, [r4, #0]
   13ed8:	2214      	movs	r2, #20
   13eda:	f013 f9af 	bl	2723c <memset>
   13ede:	e7f7      	b.n	13ed0 <mutex_free_platform+0x2c>
   13ee0:	2000068c 	.word	0x2000068c
   13ee4:	0002af7e 	.word	0x0002af7e
   13ee8:	20001fac 	.word	0x20001fac

00013eec <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13eec:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   13eee:	b308      	cbz	r0, 13f34 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   13ef0:	6843      	ldr	r3, [r0, #4]
   13ef2:	2b04      	cmp	r3, #4
   13ef4:	d110      	bne.n	13f18 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13ef6:	2201      	movs	r2, #1
   13ef8:	6803      	ldr	r3, [r0, #0]
   13efa:	f3bf 8f5b 	dmb	ish
   13efe:	e853 1f00 	ldrex	r1, [r3]
   13f02:	2900      	cmp	r1, #0
   13f04:	d103      	bne.n	13f0e <mutex_lock_platform+0x22>
   13f06:	e843 2000 	strex	r0, r2, [r3]
   13f0a:	2800      	cmp	r0, #0
   13f0c:	d1f7      	bne.n	13efe <mutex_lock_platform+0x12>
   13f0e:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13f12:	d10b      	bne.n	13f2c <mutex_lock_platform+0x40>
   13f14:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   13f16:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13f18:	b153      	cbz	r3, 13f30 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13f1a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13f1c:	f04f 32ff 	mov.w	r2, #4294967295
   13f20:	f04f 33ff 	mov.w	r3, #4294967295
   13f24:	f00c fa86 	bl	20434 <z_impl_k_mutex_lock>
        if (ret == 0) {
   13f28:	2800      	cmp	r0, #0
   13f2a:	d0f3      	beq.n	13f14 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13f2c:	4803      	ldr	r0, [pc, #12]	; (13f3c <mutex_lock_platform+0x50>)
   13f2e:	e7f2      	b.n	13f16 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13f30:	4803      	ldr	r0, [pc, #12]	; (13f40 <mutex_lock_platform+0x54>)
   13f32:	e7f0      	b.n	13f16 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13f34:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13f38:	e7ed      	b.n	13f16 <mutex_lock_platform+0x2a>
   13f3a:	bf00      	nop
   13f3c:	ffff8fe9 	.word	0xffff8fe9
   13f40:	ffff8fea 	.word	0xffff8fea

00013f44 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13f44:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   13f46:	b1d0      	cbz	r0, 13f7e <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   13f48:	6843      	ldr	r3, [r0, #4]
   13f4a:	2b04      	cmp	r3, #4
   13f4c:	d111      	bne.n	13f72 <mutex_unlock_platform+0x2e>
   13f4e:	2200      	movs	r2, #0
   13f50:	6803      	ldr	r3, [r0, #0]
   13f52:	f3bf 8f5b 	dmb	ish
   13f56:	e853 1f00 	ldrex	r1, [r3]
   13f5a:	2901      	cmp	r1, #1
   13f5c:	d103      	bne.n	13f66 <mutex_unlock_platform+0x22>
   13f5e:	e843 2000 	strex	r0, r2, [r3]
   13f62:	2800      	cmp	r0, #0
   13f64:	d1f7      	bne.n	13f56 <mutex_unlock_platform+0x12>
   13f66:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13f6a:	4807      	ldr	r0, [pc, #28]	; (13f88 <mutex_unlock_platform+0x44>)
   13f6c:	bf08      	it	eq
   13f6e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   13f70:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13f72:	b13b      	cbz	r3, 13f84 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13f74:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   13f76:	f00c fb2f 	bl	205d8 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   13f7a:	2000      	movs	r0, #0
   13f7c:	e7f8      	b.n	13f70 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13f7e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13f82:	e7f5      	b.n	13f70 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13f84:	4801      	ldr	r0, [pc, #4]	; (13f8c <mutex_unlock_platform+0x48>)
   13f86:	e7f3      	b.n	13f70 <mutex_unlock_platform+0x2c>
   13f88:	ffff8fe9 	.word	0xffff8fe9
   13f8c:	ffff8fea 	.word	0xffff8fea

00013f90 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13f90:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   13f92:	4604      	mov	r4, r0
   13f94:	b918      	cbnz	r0, 13f9e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   13f96:	4b16      	ldr	r3, [pc, #88]	; (13ff0 <mutex_init_platform+0x60>)
   13f98:	4816      	ldr	r0, [pc, #88]	; (13ff4 <mutex_init_platform+0x64>)
   13f9a:	685b      	ldr	r3, [r3, #4]
   13f9c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13f9e:	6863      	ldr	r3, [r4, #4]
   13fa0:	2b04      	cmp	r3, #4
   13fa2:	d023      	beq.n	13fec <mutex_init_platform+0x5c>
   13fa4:	2b08      	cmp	r3, #8
   13fa6:	d021      	beq.n	13fec <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   13fa8:	b9cb      	cbnz	r3, 13fde <mutex_init_platform+0x4e>
   13faa:	6823      	ldr	r3, [r4, #0]
   13fac:	b9bb      	cbnz	r3, 13fde <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   13fae:	4812      	ldr	r0, [pc, #72]	; (13ff8 <mutex_init_platform+0x68>)
   13fb0:	f04f 32ff 	mov.w	r2, #4294967295
   13fb4:	f04f 33ff 	mov.w	r3, #4294967295
   13fb8:	4621      	mov	r1, r4
   13fba:	f00c f81f 	bl	1fffc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   13fbe:	b908      	cbnz	r0, 13fc4 <mutex_init_platform+0x34>
   13fc0:	6823      	ldr	r3, [r4, #0]
   13fc2:	b91b      	cbnz	r3, 13fcc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   13fc4:	4b0a      	ldr	r3, [pc, #40]	; (13ff0 <mutex_init_platform+0x60>)
   13fc6:	480d      	ldr	r0, [pc, #52]	; (13ffc <mutex_init_platform+0x6c>)
   13fc8:	685b      	ldr	r3, [r3, #4]
   13fca:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   13fcc:	6820      	ldr	r0, [r4, #0]
   13fce:	2214      	movs	r2, #20
   13fd0:	2100      	movs	r1, #0
   13fd2:	f013 f933 	bl	2723c <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   13fd6:	6863      	ldr	r3, [r4, #4]
   13fd8:	f043 0302 	orr.w	r3, r3, #2
   13fdc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   13fde:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   13fe0:	f015 fc67 	bl	298b2 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   13fe4:	6863      	ldr	r3, [r4, #4]
   13fe6:	f043 0301 	orr.w	r3, r3, #1
   13fea:	6063      	str	r3, [r4, #4]
}
   13fec:	bd10      	pop	{r4, pc}
   13fee:	bf00      	nop
   13ff0:	2000068c 	.word	0x2000068c
   13ff4:	0002af7e 	.word	0x0002af7e
   13ff8:	20001fac 	.word	0x20001fac
   13ffc:	0002afa4 	.word	0x0002afa4

00014000 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   14000:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   14002:	4906      	ldr	r1, [pc, #24]	; (1401c <nrf_cc3xx_platform_mutex_init+0x1c>)
   14004:	4806      	ldr	r0, [pc, #24]	; (14020 <nrf_cc3xx_platform_mutex_init+0x20>)
   14006:	2340      	movs	r3, #64	; 0x40
   14008:	2214      	movs	r2, #20
   1400a:	f015 fc1a 	bl	29842 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1400e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   14012:	4904      	ldr	r1, [pc, #16]	; (14024 <nrf_cc3xx_platform_mutex_init+0x24>)
   14014:	4804      	ldr	r0, [pc, #16]	; (14028 <nrf_cc3xx_platform_mutex_init+0x28>)
   14016:	f00f bc31 	b.w	2387c <nrf_cc3xx_platform_set_mutexes>
   1401a:	bf00      	nop
   1401c:	20001fcc 	.word	0x20001fcc
   14020:	20001fac 	.word	0x20001fac
   14024:	0002a2d4 	.word	0x0002a2d4
   14028:	0002a2c4 	.word	0x0002a2c4

0001402c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1402c:	4901      	ldr	r1, [pc, #4]	; (14034 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1402e:	2210      	movs	r2, #16
	str	r2, [r1]
   14030:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14032:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14034:	e000ed10 	.word	0xe000ed10

00014038 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14038:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1403a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1403c:	f380 8811 	msr	BASEPRI, r0
	isb
   14040:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   14044:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   14048:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1404a:	b662      	cpsie	i
	isb
   1404c:	f3bf 8f6f 	isb	sy

	bx	lr
   14050:	4770      	bx	lr
   14052:	bf00      	nop

00014054 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14054:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14056:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14058:	f381 8811 	msr	BASEPRI, r1

	wfe
   1405c:	bf20      	wfe

	msr	BASEPRI, r0
   1405e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14062:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14064:	4770      	bx	lr
   14066:	bf00      	nop

00014068 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14068:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1406a:	4605      	mov	r5, r0

	if (esf != NULL) {
   1406c:	460c      	mov	r4, r1
   1406e:	b1c9      	cbz	r1, 140a4 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14070:	688b      	ldr	r3, [r1, #8]
   14072:	9300      	str	r3, [sp, #0]
   14074:	e9d1 2300 	ldrd	r2, r3, [r1]
   14078:	480e      	ldr	r0, [pc, #56]	; (140b4 <z_arm_fatal_error+0x4c>)
   1407a:	2145      	movs	r1, #69	; 0x45
   1407c:	f012 fa4d 	bl	2651a <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14080:	6963      	ldr	r3, [r4, #20]
   14082:	9300      	str	r3, [sp, #0]
   14084:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   14088:	480b      	ldr	r0, [pc, #44]	; (140b8 <z_arm_fatal_error+0x50>)
   1408a:	2145      	movs	r1, #69	; 0x45
   1408c:	f012 fa45 	bl	2651a <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14090:	69e2      	ldr	r2, [r4, #28]
   14092:	480a      	ldr	r0, [pc, #40]	; (140bc <z_arm_fatal_error+0x54>)
   14094:	2145      	movs	r1, #69	; 0x45
   14096:	f012 fa40 	bl	2651a <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1409a:	69a2      	ldr	r2, [r4, #24]
   1409c:	4808      	ldr	r0, [pc, #32]	; (140c0 <z_arm_fatal_error+0x58>)
   1409e:	2145      	movs	r1, #69	; 0x45
   140a0:	f012 fa3b 	bl	2651a <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   140a4:	4621      	mov	r1, r4
   140a6:	4628      	mov	r0, r5
}
   140a8:	b003      	add	sp, #12
   140aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   140ae:	f00b bd61 	b.w	1fb74 <z_fatal_error>
   140b2:	bf00      	nop
   140b4:	0002afd1 	.word	0x0002afd1
   140b8:	0002b005 	.word	0x0002b005
   140bc:	0002b039 	.word	0x0002b039
   140c0:	0002b04d 	.word	0x0002b04d

000140c4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   140c4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   140c6:	2b00      	cmp	r3, #0
   140c8:	db08      	blt.n	140dc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   140ca:	2201      	movs	r2, #1
   140cc:	f000 001f 	and.w	r0, r0, #31
   140d0:	fa02 f000 	lsl.w	r0, r2, r0
   140d4:	095b      	lsrs	r3, r3, #5
   140d6:	4a02      	ldr	r2, [pc, #8]	; (140e0 <arch_irq_enable+0x1c>)
   140d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   140dc:	4770      	bx	lr
   140de:	bf00      	nop
   140e0:	e000e100 	.word	0xe000e100

000140e4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   140e4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   140e6:	2b00      	cmp	r3, #0
   140e8:	db0d      	blt.n	14106 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   140ea:	2201      	movs	r2, #1
   140ec:	095b      	lsrs	r3, r3, #5
   140ee:	f000 001f 	and.w	r0, r0, #31
   140f2:	fa02 f000 	lsl.w	r0, r2, r0
   140f6:	3320      	adds	r3, #32
   140f8:	4a03      	ldr	r2, [pc, #12]	; (14108 <arch_irq_disable+0x24>)
   140fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   140fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14102:	f3bf 8f6f 	isb	sy
}
   14106:	4770      	bx	lr
   14108:	e000e100 	.word	0xe000e100

0001410c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1410c:	4b05      	ldr	r3, [pc, #20]	; (14124 <arch_irq_is_enabled+0x18>)
   1410e:	0942      	lsrs	r2, r0, #5
   14110:	f000 001f 	and.w	r0, r0, #31
   14114:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14118:	2301      	movs	r3, #1
   1411a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1411e:	4010      	ands	r0, r2
   14120:	4770      	bx	lr
   14122:	bf00      	nop
   14124:	e000e100 	.word	0xe000e100

00014128 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   14128:	b538      	push	{r3, r4, r5, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1412a:	07d3      	lsls	r3, r2, #31
{
   1412c:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1412e:	d41e      	bmi.n	1416e <z_arm_irq_priority_set+0x46>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   14130:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   14132:	2c07      	cmp	r4, #7
   14134:	d908      	bls.n	14148 <z_arm_irq_priority_set+0x20>
   14136:	490f      	ldr	r1, [pc, #60]	; (14174 <z_arm_irq_priority_set+0x4c>)
   14138:	480f      	ldr	r0, [pc, #60]	; (14178 <z_arm_irq_priority_set+0x50>)
   1413a:	225b      	movs	r2, #91	; 0x5b
   1413c:	f012 f9df 	bl	264fe <assert_print>
   14140:	480c      	ldr	r0, [pc, #48]	; (14174 <z_arm_irq_priority_set+0x4c>)
   14142:	215b      	movs	r1, #91	; 0x5b
   14144:	f012 f9d4 	bl	264f0 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14148:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1414a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1414c:	bfac      	ite	ge
   1414e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14152:	4b0a      	ldrlt	r3, [pc, #40]	; (1417c <z_arm_irq_priority_set+0x54>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14154:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14158:	bfb8      	it	lt
   1415a:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1415e:	b2e4      	uxtb	r4, r4
   14160:	bfaa      	itet	ge
   14162:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14166:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14168:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   1416c:	bd38      	pop	{r3, r4, r5, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1416e:	2400      	movs	r4, #0
   14170:	e7ea      	b.n	14148 <z_arm_irq_priority_set+0x20>
   14172:	bf00      	nop
   14174:	0002b080 	.word	0x0002b080
   14178:	0002aa75 	.word	0x0002aa75
   1417c:	e000ed14 	.word	0xe000ed14

00014180 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14180:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14182:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14184:	4b04      	ldr	r3, [pc, #16]	; (14198 <_arch_isr_direct_pm+0x18>)
   14186:	699a      	ldr	r2, [r3, #24]
   14188:	b11a      	cbz	r2, 14192 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   1418a:	2200      	movs	r2, #0
   1418c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1418e:	f015 fb81 	bl	29894 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14192:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14194:	bd08      	pop	{r3, pc}
   14196:	bf00      	nop
   14198:	20002894 	.word	0x20002894

0001419c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1419c:	bf30      	wfi
    b z_SysNmiOnReset
   1419e:	f7ff bffd 	b.w	1419c <z_SysNmiOnReset>
   141a2:	bf00      	nop

000141a4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   141a4:	4a0b      	ldr	r2, [pc, #44]	; (141d4 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   141a6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   141a8:	4b0b      	ldr	r3, [pc, #44]	; (141d8 <z_arm_prep_c+0x34>)
   141aa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   141ae:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   141b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   141b4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   141b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   141bc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   141c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   141c4:	f00b fd4c 	bl	1fc60 <z_bss_zero>
	z_data_copy();
   141c8:	f00e f934 	bl	22434 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   141cc:	f000 fafe 	bl	147cc <z_arm_interrupt_init>
	z_cstart();
   141d0:	f00b fd8a 	bl	1fce8 <z_cstart>
   141d4:	00001000 	.word	0x00001000
   141d8:	e000ed00 	.word	0xe000ed00

000141dc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   141dc:	4a09      	ldr	r2, [pc, #36]	; (14204 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   141de:	490a      	ldr	r1, [pc, #40]	; (14208 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   141e0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   141e2:	6809      	ldr	r1, [r1, #0]
   141e4:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   141e6:	4909      	ldr	r1, [pc, #36]	; (1420c <arch_swap+0x30>)
	_current->arch.basepri = key;
   141e8:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   141ea:	684b      	ldr	r3, [r1, #4]
   141ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   141f0:	604b      	str	r3, [r1, #4]
   141f2:	2300      	movs	r3, #0
   141f4:	f383 8811 	msr	BASEPRI, r3
   141f8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   141fc:	6893      	ldr	r3, [r2, #8]
}
   141fe:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14200:	4770      	bx	lr
   14202:	bf00      	nop
   14204:	20002894 	.word	0x20002894
   14208:	0002a7a4 	.word	0x0002a7a4
   1420c:	e000ed00 	.word	0xe000ed00

00014210 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14210:	4912      	ldr	r1, [pc, #72]	; (1425c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14212:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14214:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14218:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1421a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1421e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14222:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14224:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14228:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1422c:	4f0c      	ldr	r7, [pc, #48]	; (14260 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1422e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14232:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   14234:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14236:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14238:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1423a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1423c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1423e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   14242:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   14244:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   14246:	f000 fb5d 	bl	14904 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1424a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1424e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14252:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14256:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1425a:	4770      	bx	lr
    ldr r1, =_kernel
   1425c:	20002894 	.word	0x20002894
    ldr v4, =_SCS_ICSR
   14260:	e000ed04 	.word	0xe000ed04

00014264 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14264:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14268:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1426a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1426e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14272:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14274:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14278:	2902      	cmp	r1, #2
    beq _oops
   1427a:	d0ff      	beq.n	1427c <_oops>

0001427c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1427c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1427e:	f012 feea 	bl	27056 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14282:	bd01      	pop	{r0, pc}

00014284 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14284:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14288:	9b00      	ldr	r3, [sp, #0]
   1428a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1428e:	490a      	ldr	r1, [pc, #40]	; (142b8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   14290:	9b01      	ldr	r3, [sp, #4]
   14292:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14296:	9b02      	ldr	r3, [sp, #8]
   14298:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   1429c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   142a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   142a4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   142a8:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   142ac:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   142ae:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   142b0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   142b2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   142b4:	4770      	bx	lr
   142b6:	bf00      	nop
   142b8:	000261f9 	.word	0x000261f9

000142bc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   142bc:	4a09      	ldr	r2, [pc, #36]	; (142e4 <z_check_thread_stack_fail+0x28>)
{
   142be:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   142c0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   142c2:	b170      	cbz	r0, 142e2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   142c4:	f113 0f16 	cmn.w	r3, #22
   142c8:	6e80      	ldr	r0, [r0, #104]	; 0x68
   142ca:	d005      	beq.n	142d8 <z_check_thread_stack_fail+0x1c>
   142cc:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   142d0:	429a      	cmp	r2, r3
   142d2:	d805      	bhi.n	142e0 <z_check_thread_stack_fail+0x24>
   142d4:	4283      	cmp	r3, r0
   142d6:	d203      	bcs.n	142e0 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   142d8:	4281      	cmp	r1, r0
   142da:	bf28      	it	cs
   142dc:	2000      	movcs	r0, #0
   142de:	4770      	bx	lr
   142e0:	2000      	movs	r0, #0
}
   142e2:	4770      	bx	lr
   142e4:	20002894 	.word	0x20002894

000142e8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   142e8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   142ea:	4b09      	ldr	r3, [pc, #36]	; (14310 <arch_switch_to_main_thread+0x28>)
   142ec:	6098      	str	r0, [r3, #8]
{
   142ee:	460d      	mov	r5, r1
   142f0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   142f2:	f000 fb07 	bl	14904 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   142f6:	4620      	mov	r0, r4
   142f8:	f385 8809 	msr	PSP, r5
   142fc:	2100      	movs	r1, #0
   142fe:	b663      	cpsie	if
   14300:	f381 8811 	msr	BASEPRI, r1
   14304:	f3bf 8f6f 	isb	sy
   14308:	2200      	movs	r2, #0
   1430a:	2300      	movs	r3, #0
   1430c:	f011 ff74 	bl	261f8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14310:	20002894 	.word	0x20002894

00014314 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14314:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14316:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14318:	4a0b      	ldr	r2, [pc, #44]	; (14348 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1431a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   1431c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1431e:	bf1e      	ittt	ne
	movne	r1, #0
   14320:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14322:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   14324:	f015 fab6 	blne	29894 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14328:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1432a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1432e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14332:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14336:	4905      	ldr	r1, [pc, #20]	; (1434c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14338:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1433a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1433c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1433e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14342:	4903      	ldr	r1, [pc, #12]	; (14350 <_isr_wrapper+0x3c>)
	bx r1
   14344:	4708      	bx	r1
   14346:	0000      	.short	0x0000
	ldr r2, =_kernel
   14348:	20002894 	.word	0x20002894
	ldr r1, =_sw_isr_table
   1434c:	00029d74 	.word	0x00029d74
	ldr r1, =z_arm_int_exit
   14350:	00014355 	.word	0x00014355

00014354 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14354:	4b04      	ldr	r3, [pc, #16]	; (14368 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14356:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14358:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1435a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1435c:	d003      	beq.n	14366 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1435e:	4903      	ldr	r1, [pc, #12]	; (1436c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14364:	600a      	str	r2, [r1, #0]

00014366 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14366:	4770      	bx	lr
	ldr r3, =_kernel
   14368:	20002894 	.word	0x20002894
	ldr r1, =_SCS_ICSR
   1436c:	e000ed04 	.word	0xe000ed04

00014370 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   14370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14374:	4c39      	ldr	r4, [pc, #228]	; (1445c <mem_manage_fault+0xec>)
{
   14376:	4680      	mov	r8, r0
   14378:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1437a:	4839      	ldr	r0, [pc, #228]	; (14460 <mem_manage_fault+0xf0>)
   1437c:	2145      	movs	r1, #69	; 0x45
{
   1437e:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   14380:	f012 f8cb 	bl	2651a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14384:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14386:	06da      	lsls	r2, r3, #27
   14388:	d503      	bpl.n	14392 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1438a:	4836      	ldr	r0, [pc, #216]	; (14464 <mem_manage_fault+0xf4>)
   1438c:	2145      	movs	r1, #69	; 0x45
   1438e:	f012 f8c4 	bl	2651a <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14392:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14394:	071b      	lsls	r3, r3, #28
   14396:	d503      	bpl.n	143a0 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
   14398:	4833      	ldr	r0, [pc, #204]	; (14468 <mem_manage_fault+0xf8>)
   1439a:	2145      	movs	r1, #69	; 0x45
   1439c:	f012 f8bd 	bl	2651a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   143a0:	4c2e      	ldr	r4, [pc, #184]	; (1445c <mem_manage_fault+0xec>)
   143a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   143a4:	079f      	lsls	r7, r3, #30
   143a6:	d429      	bmi.n	143fc <mem_manage_fault+0x8c>
	uint32_t mmfar = -EINVAL;
   143a8:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   143ac:	4c2b      	ldr	r4, [pc, #172]	; (1445c <mem_manage_fault+0xec>)
   143ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   143b0:	07d9      	lsls	r1, r3, #31
   143b2:	d503      	bpl.n	143bc <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
   143b4:	482d      	ldr	r0, [pc, #180]	; (1446c <mem_manage_fault+0xfc>)
   143b6:	2145      	movs	r1, #69	; 0x45
   143b8:	f012 f8af 	bl	2651a <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   143bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   143be:	069a      	lsls	r2, r3, #26
   143c0:	d503      	bpl.n	143ca <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
   143c2:	482b      	ldr	r0, [pc, #172]	; (14470 <mem_manage_fault+0x100>)
   143c4:	2145      	movs	r1, #69	; 0x45
   143c6:	f012 f8a8 	bl	2651a <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   143ca:	4d24      	ldr	r5, [pc, #144]	; (1445c <mem_manage_fault+0xec>)
   143cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   143ce:	06db      	lsls	r3, r3, #27
   143d0:	d428      	bmi.n	14424 <mem_manage_fault+0xb4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   143d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   143d4:	079c      	lsls	r4, r3, #30
   143d6:	d425      	bmi.n	14424 <mem_manage_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   143d8:	2400      	movs	r4, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   143da:	4b20      	ldr	r3, [pc, #128]	; (1445c <mem_manage_fault+0xec>)
   143dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   143de:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   143e0:	bf42      	ittt	mi
   143e2:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   143e4:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   143e8:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   143ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   143ec:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   143f0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   143f2:	2300      	movs	r3, #0
   143f4:	7033      	strb	r3, [r6, #0]

	return reason;
}
   143f6:	4620      	mov	r0, r4
   143f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   143fc:	481d      	ldr	r0, [pc, #116]	; (14474 <mem_manage_fault+0x104>)
   143fe:	2145      	movs	r1, #69	; 0x45
   14400:	f012 f88b 	bl	2651a <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   14404:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14406:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14408:	0618      	lsls	r0, r3, #24
   1440a:	d5cd      	bpl.n	143a8 <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1440c:	481a      	ldr	r0, [pc, #104]	; (14478 <mem_manage_fault+0x108>)
   1440e:	463a      	mov	r2, r7
   14410:	2145      	movs	r1, #69	; 0x45
   14412:	f012 f882 	bl	2651a <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   14416:	2d00      	cmp	r5, #0
   14418:	d0c8      	beq.n	143ac <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1441a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1441c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14420:	62a3      	str	r3, [r4, #40]	; 0x28
   14422:	e7c3      	b.n	143ac <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   14424:	686b      	ldr	r3, [r5, #4]
   14426:	0518      	lsls	r0, r3, #20
   14428:	d5d6      	bpl.n	143d8 <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1442a:	4641      	mov	r1, r8
   1442c:	4638      	mov	r0, r7
   1442e:	f7ff ff45 	bl	142bc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   14432:	4604      	mov	r4, r0
   14434:	b118      	cbz	r0, 1443e <mem_manage_fault+0xce>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   14436:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1443a:	2402      	movs	r4, #2
   1443c:	e7cd      	b.n	143da <mem_manage_fault+0x6a>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   1443e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14440:	06d9      	lsls	r1, r3, #27
   14442:	d5c9      	bpl.n	143d8 <mem_manage_fault+0x68>
   14444:	490d      	ldr	r1, [pc, #52]	; (1447c <mem_manage_fault+0x10c>)
   14446:	480e      	ldr	r0, [pc, #56]	; (14480 <mem_manage_fault+0x110>)
   14448:	f240 1253 	movw	r2, #339	; 0x153
   1444c:	f012 f857 	bl	264fe <assert_print>
   14450:	480a      	ldr	r0, [pc, #40]	; (1447c <mem_manage_fault+0x10c>)
   14452:	f240 1153 	movw	r1, #339	; 0x153
   14456:	f012 f84b 	bl	264f0 <assert_post_action>
   1445a:	e7be      	b.n	143da <mem_manage_fault+0x6a>
   1445c:	e000ed00 	.word	0xe000ed00
   14460:	0002b0b6 	.word	0x0002b0b6
   14464:	0002b0d1 	.word	0x0002b0d1
   14468:	0002b109 	.word	0x0002b109
   1446c:	0002b159 	.word	0x0002b159
   14470:	0002b17d 	.word	0x0002b17d
   14474:	0002b121 	.word	0x0002b121
   14478:	0002b13e 	.word	0x0002b13e
   1447c:	0002b1b1 	.word	0x0002b1b1
   14480:	0002aa75 	.word	0x0002aa75

00014484 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14484:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14486:	4c1d      	ldr	r4, [pc, #116]	; (144fc <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   14488:	481d      	ldr	r0, [pc, #116]	; (14500 <usage_fault.constprop.0+0x7c>)
   1448a:	2145      	movs	r1, #69	; 0x45
   1448c:	f012 f845 	bl	2651a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14490:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14492:	019b      	lsls	r3, r3, #6
   14494:	d503      	bpl.n	1449e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   14496:	481b      	ldr	r0, [pc, #108]	; (14504 <usage_fault.constprop.0+0x80>)
   14498:	2145      	movs	r1, #69	; 0x45
   1449a:	f012 f83e 	bl	2651a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1449e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   144a0:	01dc      	lsls	r4, r3, #7
   144a2:	d503      	bpl.n	144ac <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   144a4:	4818      	ldr	r0, [pc, #96]	; (14508 <usage_fault.constprop.0+0x84>)
   144a6:	2145      	movs	r1, #69	; 0x45
   144a8:	f012 f837 	bl	2651a <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   144ac:	4c13      	ldr	r4, [pc, #76]	; (144fc <usage_fault.constprop.0+0x78>)
   144ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   144b0:	0318      	lsls	r0, r3, #12
   144b2:	d503      	bpl.n	144bc <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
   144b4:	4815      	ldr	r0, [pc, #84]	; (1450c <usage_fault.constprop.0+0x88>)
   144b6:	2145      	movs	r1, #69	; 0x45
   144b8:	f012 f82f 	bl	2651a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   144bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   144be:	0359      	lsls	r1, r3, #13
   144c0:	d503      	bpl.n	144ca <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   144c2:	4813      	ldr	r0, [pc, #76]	; (14510 <usage_fault.constprop.0+0x8c>)
   144c4:	2145      	movs	r1, #69	; 0x45
   144c6:	f012 f828 	bl	2651a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   144ca:	4c0c      	ldr	r4, [pc, #48]	; (144fc <usage_fault.constprop.0+0x78>)
   144cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   144ce:	039a      	lsls	r2, r3, #14
   144d0:	d503      	bpl.n	144da <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   144d2:	4810      	ldr	r0, [pc, #64]	; (14514 <usage_fault.constprop.0+0x90>)
   144d4:	2145      	movs	r1, #69	; 0x45
   144d6:	f012 f820 	bl	2651a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   144da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   144dc:	03db      	lsls	r3, r3, #15
   144de:	d503      	bpl.n	144e8 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   144e0:	480d      	ldr	r0, [pc, #52]	; (14518 <usage_fault.constprop.0+0x94>)
   144e2:	2145      	movs	r1, #69	; 0x45
   144e4:	f012 f819 	bl	2651a <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   144e8:	4a04      	ldr	r2, [pc, #16]	; (144fc <usage_fault.constprop.0+0x78>)
   144ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
   144ec:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   144f0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   144f4:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   144f6:	2000      	movs	r0, #0
   144f8:	bd10      	pop	{r4, pc}
   144fa:	bf00      	nop
   144fc:	e000ed00 	.word	0xe000ed00
   14500:	0002b1eb 	.word	0x0002b1eb
   14504:	0002b208 	.word	0x0002b208
   14508:	0002b220 	.word	0x0002b220
   1450c:	0002b23f 	.word	0x0002b23f
   14510:	0002b262 	.word	0x0002b262
   14514:	0002b28c 	.word	0x0002b28c
   14518:	0002b2ab 	.word	0x0002b2ab

0001451c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1451c:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1451e:	4c23      	ldr	r4, [pc, #140]	; (145ac <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14520:	4606      	mov	r6, r0
   14522:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   14524:	4822      	ldr	r0, [pc, #136]	; (145b0 <bus_fault.constprop.0+0x94>)
   14526:	2145      	movs	r1, #69	; 0x45
   14528:	f011 fff7 	bl	2651a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1452c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1452e:	04d9      	lsls	r1, r3, #19
   14530:	d503      	bpl.n	1453a <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   14532:	4820      	ldr	r0, [pc, #128]	; (145b4 <bus_fault.constprop.0+0x98>)
   14534:	2145      	movs	r1, #69	; 0x45
   14536:	f011 fff0 	bl	2651a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1453a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1453c:	051a      	lsls	r2, r3, #20
   1453e:	d503      	bpl.n	14548 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   14540:	481d      	ldr	r0, [pc, #116]	; (145b8 <bus_fault.constprop.0+0x9c>)
   14542:	2145      	movs	r1, #69	; 0x45
   14544:	f011 ffe9 	bl	2651a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14548:	4c18      	ldr	r4, [pc, #96]	; (145ac <bus_fault.constprop.0+0x90>)
   1454a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1454c:	059b      	lsls	r3, r3, #22
   1454e:	d510      	bpl.n	14572 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   14550:	481a      	ldr	r0, [pc, #104]	; (145bc <bus_fault.constprop.0+0xa0>)
   14552:	2145      	movs	r1, #69	; 0x45
   14554:	f011 ffe1 	bl	2651a <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   14558:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1455a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1455c:	0418      	lsls	r0, r3, #16
   1455e:	d508      	bpl.n	14572 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14560:	4817      	ldr	r0, [pc, #92]	; (145c0 <bus_fault.constprop.0+0xa4>)
   14562:	2145      	movs	r1, #69	; 0x45
   14564:	f011 ffd9 	bl	2651a <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   14568:	b11e      	cbz	r6, 14572 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1456a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1456c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14570:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14572:	4c0e      	ldr	r4, [pc, #56]	; (145ac <bus_fault.constprop.0+0x90>)
   14574:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14576:	0559      	lsls	r1, r3, #21
   14578:	d503      	bpl.n	14582 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   1457a:	4812      	ldr	r0, [pc, #72]	; (145c4 <bus_fault.constprop.0+0xa8>)
   1457c:	2145      	movs	r1, #69	; 0x45
   1457e:	f011 ffcc 	bl	2651a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14582:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14584:	05da      	lsls	r2, r3, #23
   14586:	d50b      	bpl.n	145a0 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   14588:	480f      	ldr	r0, [pc, #60]	; (145c8 <bus_fault.constprop.0+0xac>)
   1458a:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1458c:	f011 ffc5 	bl	2651a <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14590:	4a06      	ldr	r2, [pc, #24]	; (145ac <bus_fault.constprop.0+0x90>)
   14592:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14594:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14596:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1459a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1459c:	7028      	strb	r0, [r5, #0]
}
   1459e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   145a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   145a2:	049b      	lsls	r3, r3, #18
   145a4:	d5f4      	bpl.n	14590 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   145a6:	4809      	ldr	r0, [pc, #36]	; (145cc <bus_fault.constprop.0+0xb0>)
   145a8:	2145      	movs	r1, #69	; 0x45
   145aa:	e7ef      	b.n	1458c <bus_fault.constprop.0+0x70>
   145ac:	e000ed00 	.word	0xe000ed00
   145b0:	0002b2db 	.word	0x0002b2db
   145b4:	0002b2f6 	.word	0x0002b2f6
   145b8:	0002b109 	.word	0x0002b109
   145bc:	0002b30c 	.word	0x0002b30c
   145c0:	0002b32a 	.word	0x0002b32a
   145c4:	0002b344 	.word	0x0002b344
   145c8:	0002b364 	.word	0x0002b364
   145cc:	0002b17d 	.word	0x0002b17d

000145d0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   145d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   145d4:	4b67      	ldr	r3, [pc, #412]	; (14774 <z_arm_fault+0x1a4>)
   145d6:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   145da:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   145dc:	f3c8 0708 	ubfx	r7, r8, #0, #9
   145e0:	2600      	movs	r6, #0
   145e2:	f386 8811 	msr	BASEPRI, r6
   145e6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   145ea:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   145ee:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   145f2:	d107      	bne.n	14604 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   145f4:	f002 030c 	and.w	r3, r2, #12
   145f8:	2b08      	cmp	r3, #8
   145fa:	d110      	bne.n	1461e <z_arm_fault+0x4e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   145fc:	485e      	ldr	r0, [pc, #376]	; (14778 <z_arm_fault+0x1a8>)
   145fe:	2145      	movs	r1, #69	; 0x45
   14600:	f011 ff8b 	bl	2651a <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   14604:	495d      	ldr	r1, [pc, #372]	; (1477c <z_arm_fault+0x1ac>)
   14606:	485e      	ldr	r0, [pc, #376]	; (14780 <z_arm_fault+0x1b0>)
   14608:	f240 4205 	movw	r2, #1029	; 0x405
   1460c:	f011 ff77 	bl	264fe <assert_print>
   14610:	485a      	ldr	r0, [pc, #360]	; (1477c <z_arm_fault+0x1ac>)
   14612:	f240 4105 	movw	r1, #1029	; 0x405
   14616:	f011 ff6b 	bl	264f0 <assert_post_action>
   1461a:	2500      	movs	r5, #0
   1461c:	e006      	b.n	1462c <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1461e:	0713      	lsls	r3, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   14620:	bf4e      	itee	mi
   14622:	460d      	movmi	r5, r1
			ptr_esf = (z_arch_esf_t *)msp;
   14624:	4605      	movpl	r5, r0
			*nested_exc = true;
   14626:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   14628:	2d00      	cmp	r5, #0
   1462a:	d0eb      	beq.n	14604 <z_arm_fault+0x34>
	*recoverable = false;
   1462c:	2400      	movs	r4, #0
	switch (fault) {
   1462e:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   14630:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   14634:	2b09      	cmp	r3, #9
   14636:	f200 808b 	bhi.w	14750 <z_arm_fault+0x180>
   1463a:	e8df f003 	tbb	[pc, r3]
   1463e:	7e05      	.short	0x7e05
   14640:	89896682 	.word	0x89896682
   14644:	86898989 	.word	0x86898989
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14648:	4f4a      	ldr	r7, [pc, #296]	; (14774 <z_arm_fault+0x1a4>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   1464a:	484e      	ldr	r0, [pc, #312]	; (14784 <z_arm_fault+0x1b4>)
   1464c:	2145      	movs	r1, #69	; 0x45
   1464e:	f011 ff64 	bl	2651a <z_log_minimal_printk>
	*recoverable = false;
   14652:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14656:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   14658:	f014 0402 	ands.w	r4, r4, #2
   1465c:	d005      	beq.n	1466a <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
   1465e:	484a      	ldr	r0, [pc, #296]	; (14788 <z_arm_fault+0x1b8>)
   14660:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
   14662:	f011 ff5a 	bl	2651a <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14666:	2400      	movs	r4, #0
}
   14668:	e006      	b.n	14678 <z_arm_fault+0xa8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1466c:	2b00      	cmp	r3, #0
   1466e:	da1d      	bge.n	146ac <z_arm_fault+0xdc>
		PR_EXC("  Debug event");
   14670:	4846      	ldr	r0, [pc, #280]	; (1478c <z_arm_fault+0x1bc>)
   14672:	2145      	movs	r1, #69	; 0x45
   14674:	f011 ff51 	bl	2651a <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   14678:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1467c:	b99b      	cbnz	r3, 146a6 <z_arm_fault+0xd6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1467e:	2220      	movs	r2, #32
   14680:	4629      	mov	r1, r5
   14682:	a802      	add	r0, sp, #8
   14684:	f012 fdcf 	bl	27226 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   14688:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1468a:	2e00      	cmp	r6, #0
   1468c:	d06d      	beq.n	1476a <z_arm_fault+0x19a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1468e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14692:	b922      	cbnz	r2, 1469e <z_arm_fault+0xce>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14694:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14698:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1469c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1469e:	a902      	add	r1, sp, #8
   146a0:	4620      	mov	r0, r4
   146a2:	f7ff fce1 	bl	14068 <z_arm_fatal_error>
}
   146a6:	b00a      	add	sp, #40	; 0x28
   146a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   146ac:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   146ae:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   146b2:	d039      	beq.n	14728 <z_arm_fault+0x158>
		PR_EXC("  Fault escalation (see below)");
   146b4:	4836      	ldr	r0, [pc, #216]	; (14790 <z_arm_fault+0x1c0>)
   146b6:	2145      	movs	r1, #69	; 0x45
   146b8:	f011 ff2f 	bl	2651a <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   146bc:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   146be:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   146c2:	f64d 7302 	movw	r3, #57090	; 0xdf02
   146c6:	429a      	cmp	r2, r3
   146c8:	d106      	bne.n	146d8 <z_arm_fault+0x108>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   146ca:	682a      	ldr	r2, [r5, #0]
   146cc:	4831      	ldr	r0, [pc, #196]	; (14794 <z_arm_fault+0x1c4>)
   146ce:	2145      	movs	r1, #69	; 0x45
   146d0:	f011 ff23 	bl	2651a <z_log_minimal_printk>
			reason = esf->basic.r0;
   146d4:	682c      	ldr	r4, [r5, #0]
   146d6:	e7cf      	b.n	14678 <z_arm_fault+0xa8>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   146d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   146da:	b2db      	uxtb	r3, r3
   146dc:	b13b      	cbz	r3, 146ee <z_arm_fault+0x11e>
			reason = mem_manage_fault(esf, 1, recoverable);
   146de:	f10d 0207 	add.w	r2, sp, #7
   146e2:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   146e4:	4628      	mov	r0, r5
   146e6:	f7ff fe43 	bl	14370 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   146ea:	4604      	mov	r4, r0
		break;
   146ec:	e7c4      	b.n	14678 <z_arm_fault+0xa8>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   146ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   146f0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   146f4:	d005      	beq.n	14702 <z_arm_fault+0x132>
			reason = bus_fault(esf, 1, recoverable);
   146f6:	f10d 0107 	add.w	r1, sp, #7
   146fa:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   146fc:	f7ff ff0e 	bl	1451c <bus_fault.constprop.0>
   14700:	e7f3      	b.n	146ea <z_arm_fault+0x11a>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   14702:	6abc      	ldr	r4, [r7, #40]	; 0x28
   14704:	0c24      	lsrs	r4, r4, #16
   14706:	0424      	lsls	r4, r4, #16
   14708:	b114      	cbz	r4, 14710 <z_arm_fault+0x140>
		reason = usage_fault(esf);
   1470a:	f7ff febb 	bl	14484 <usage_fault.constprop.0>
   1470e:	e7ec      	b.n	146ea <z_arm_fault+0x11a>
			__ASSERT(0,
   14710:	491a      	ldr	r1, [pc, #104]	; (1477c <z_arm_fault+0x1ac>)
   14712:	481b      	ldr	r0, [pc, #108]	; (14780 <z_arm_fault+0x1b0>)
   14714:	f240 22d7 	movw	r2, #727	; 0x2d7
   14718:	f011 fef1 	bl	264fe <assert_print>
   1471c:	f240 21d7 	movw	r1, #727	; 0x2d7
		__ASSERT(0,
   14720:	4816      	ldr	r0, [pc, #88]	; (1477c <z_arm_fault+0x1ac>)
   14722:	f011 fee5 	bl	264f0 <assert_post_action>
   14726:	e7a7      	b.n	14678 <z_arm_fault+0xa8>
   14728:	4914      	ldr	r1, [pc, #80]	; (1477c <z_arm_fault+0x1ac>)
   1472a:	4815      	ldr	r0, [pc, #84]	; (14780 <z_arm_fault+0x1b0>)
   1472c:	f240 22db 	movw	r2, #731	; 0x2db
   14730:	f011 fee5 	bl	264fe <assert_print>
   14734:	f240 21db 	movw	r1, #731	; 0x2db
   14738:	e7f2      	b.n	14720 <z_arm_fault+0x150>
		reason = mem_manage_fault(esf, 0, recoverable);
   1473a:	f10d 0207 	add.w	r2, sp, #7
   1473e:	2100      	movs	r1, #0
   14740:	e7d0      	b.n	146e4 <z_arm_fault+0x114>
		reason = bus_fault(esf, 0, recoverable);
   14742:	f10d 0107 	add.w	r1, sp, #7
   14746:	2000      	movs	r0, #0
   14748:	e7d8      	b.n	146fc <z_arm_fault+0x12c>
	PR_FAULT_INFO(
   1474a:	4813      	ldr	r0, [pc, #76]	; (14798 <z_arm_fault+0x1c8>)
   1474c:	2145      	movs	r1, #69	; 0x45
   1474e:	e788      	b.n	14662 <z_arm_fault+0x92>
	PR_FAULT_INFO("***** %s %d) *****",
   14750:	4912      	ldr	r1, [pc, #72]	; (1479c <z_arm_fault+0x1cc>)
   14752:	4a13      	ldr	r2, [pc, #76]	; (147a0 <z_arm_fault+0x1d0>)
   14754:	4813      	ldr	r0, [pc, #76]	; (147a4 <z_arm_fault+0x1d4>)
   14756:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1475a:	bf08      	it	eq
   1475c:	460a      	moveq	r2, r1
   1475e:	f1a7 0310 	sub.w	r3, r7, #16
   14762:	2145      	movs	r1, #69	; 0x45
   14764:	f011 fed9 	bl	2651a <z_log_minimal_printk>
   14768:	e77d      	b.n	14666 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1476a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1476e:	f023 0301 	bic.w	r3, r3, #1
   14772:	e793      	b.n	1469c <z_arm_fault+0xcc>
   14774:	e000ed00 	.word	0xe000ed00
   14778:	0002b3af 	.word	0x0002b3af
   1477c:	0002b1b1 	.word	0x0002b1b1
   14780:	0002aa75 	.word	0x0002aa75
   14784:	0002b3df 	.word	0x0002b3df
   14788:	0002b3fb 	.word	0x0002b3fb
   1478c:	0002b421 	.word	0x0002b421
   14790:	0002b434 	.word	0x0002b434
   14794:	0002b458 	.word	0x0002b458
   14798:	0002b479 	.word	0x0002b479
   1479c:	0002b381 	.word	0x0002b381
   147a0:	0002b396 	.word	0x0002b396
   147a4:	0002b4a2 	.word	0x0002b4a2

000147a8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   147a8:	4a02      	ldr	r2, [pc, #8]	; (147b4 <z_arm_fault_init+0xc>)
   147aa:	6953      	ldr	r3, [r2, #20]
   147ac:	f043 0310 	orr.w	r3, r3, #16
   147b0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   147b2:	4770      	bx	lr
   147b4:	e000ed00 	.word	0xe000ed00

000147b8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   147b8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   147bc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   147c0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   147c2:	4672      	mov	r2, lr
	bl z_arm_fault
   147c4:	f7ff ff04 	bl	145d0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   147c8:	bd01      	pop	{r0, pc}
   147ca:	bf00      	nop

000147cc <z_arm_interrupt_init>:
   147cc:	4804      	ldr	r0, [pc, #16]	; (147e0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   147ce:	2300      	movs	r3, #0
   147d0:	2140      	movs	r1, #64	; 0x40
   147d2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   147d4:	3301      	adds	r3, #1
   147d6:	2b30      	cmp	r3, #48	; 0x30
   147d8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   147dc:	d1f9      	bne.n	147d2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   147de:	4770      	bx	lr
   147e0:	e000e100 	.word	0xe000e100

000147e4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   147e4:	2000      	movs	r0, #0
    msr CONTROL, r0
   147e6:	f380 8814 	msr	CONTROL, r0
    isb
   147ea:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   147ee:	f7fe fbab 	bl	12f48 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   147f2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   147f4:	490d      	ldr	r1, [pc, #52]	; (1482c <__start+0x48>)
    str r0, [r1]
   147f6:	6008      	str	r0, [r1, #0]
    dsb
   147f8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   147fc:	480c      	ldr	r0, [pc, #48]	; (14830 <__start+0x4c>)
    msr msp, r0
   147fe:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   14802:	f000 f82b 	bl	1485c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14806:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   14808:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1480c:	4809      	ldr	r0, [pc, #36]	; (14834 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1480e:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   14812:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14814:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14818:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1481c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1481e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   14820:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14824:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14828:	f7ff fcbc 	bl	141a4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   1482c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14830:	200061c0 	.word	0x200061c0
    ldr r0, =z_interrupt_stacks
   14834:	20006380 	.word	0x20006380

00014838 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   14838:	4907      	ldr	r1, [pc, #28]	; (14858 <z_arm_clear_arm_mpu_config+0x20>)
   1483a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1483e:	2300      	movs	r3, #0
	int num_regions =
   14840:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   14844:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   14846:	4293      	cmp	r3, r2
   14848:	d100      	bne.n	1484c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1484a:	4770      	bx	lr
  MPU->RNR = rnr;
   1484c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   14850:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   14854:	3301      	adds	r3, #1
   14856:	e7f6      	b.n	14846 <z_arm_clear_arm_mpu_config+0xe>
   14858:	e000ed00 	.word	0xe000ed00

0001485c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1485c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1485e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   14860:	2300      	movs	r3, #0
   14862:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   14866:	f7ff ffe7 	bl	14838 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1486a:	4b14      	ldr	r3, [pc, #80]	; (148bc <z_arm_init_arch_hw_at_boot+0x60>)
   1486c:	f04f 32ff 	mov.w	r2, #4294967295
   14870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   14874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   14878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1487c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   14880:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   14884:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   14888:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   1488c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   14890:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   14894:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14898:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   1489c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   148a0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   148a4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   148a8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   148ac:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   148b0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   148b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   148b6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   148ba:	bd08      	pop	{r3, pc}
   148bc:	e000e100 	.word	0xe000e100

000148c0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   148c0:	4b08      	ldr	r3, [pc, #32]	; (148e4 <z_impl_k_thread_abort+0x24>)
   148c2:	689b      	ldr	r3, [r3, #8]
   148c4:	4283      	cmp	r3, r0
   148c6:	d10b      	bne.n	148e0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   148c8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   148cc:	b143      	cbz	r3, 148e0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   148ce:	4b06      	ldr	r3, [pc, #24]	; (148e8 <z_impl_k_thread_abort+0x28>)
   148d0:	685a      	ldr	r2, [r3, #4]
   148d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   148d6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   148d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   148da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   148de:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   148e0:	f00d bc96 	b.w	22210 <z_thread_abort>
   148e4:	20002894 	.word	0x20002894
   148e8:	e000ed00 	.word	0xe000ed00

000148ec <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   148ec:	4b02      	ldr	r3, [pc, #8]	; (148f8 <z_arm_configure_static_mpu_regions+0xc>)
   148ee:	4a03      	ldr	r2, [pc, #12]	; (148fc <z_arm_configure_static_mpu_regions+0x10>)
   148f0:	4803      	ldr	r0, [pc, #12]	; (14900 <z_arm_configure_static_mpu_regions+0x14>)
   148f2:	2101      	movs	r1, #1
   148f4:	f000 b87c 	b.w	149f0 <arm_core_mpu_configure_static_mpu_regions>
   148f8:	20040000 	.word	0x20040000
   148fc:	20000000 	.word	0x20000000
   14900:	0002a2e8 	.word	0x0002a2e8

00014904 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   14904:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   14906:	4b05      	ldr	r3, [pc, #20]	; (1491c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   14908:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   1490a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   1490c:	4a04      	ldr	r2, [pc, #16]	; (14920 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   1490e:	2140      	movs	r1, #64	; 0x40
   14910:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   14914:	4618      	mov	r0, r3
   14916:	2101      	movs	r1, #1
   14918:	f000 b888 	b.w	14a2c <arm_core_mpu_configure_dynamic_mpu_regions>
   1491c:	200024cc 	.word	0x200024cc
   14920:	150b0000 	.word	0x150b0000

00014924 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   14926:	4f24      	ldr	r7, [pc, #144]	; (149b8 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;
   14928:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   1492a:	2200      	movs	r2, #0
   1492c:	428a      	cmp	r2, r1
   1492e:	da0e      	bge.n	1494e <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
   14930:	6844      	ldr	r4, [r0, #4]
   14932:	2c00      	cmp	r4, #0
   14934:	d03c      	beq.n	149b0 <mpu_configure_regions+0x8c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   14936:	b193      	cbz	r3, 1495e <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   14938:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   1493c:	ea14 0f0c 	tst.w	r4, ip
   14940:	d007      	beq.n	14952 <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   14942:	481e      	ldr	r0, [pc, #120]	; (149bc <mpu_configure_regions+0x98>)
   14944:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14946:	f011 fde8 	bl	2651a <z_log_minimal_printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1494a:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   1494e:	4628      	mov	r0, r5
   14950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   14952:	2c1f      	cmp	r4, #31
   14954:	d9f5      	bls.n	14942 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   14956:	6806      	ldr	r6, [r0, #0]
		&&
   14958:	ea1c 0f06 	tst.w	ip, r6
   1495c:	d1f1      	bne.n	14942 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   1495e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   14960:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14962:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14966:	b2ed      	uxtb	r5, r5
	if (size <= 32U) {
   14968:	d910      	bls.n	1498c <mpu_configure_regions+0x68>
	if (size > (1UL << 31)) {
   1496a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   1496e:	d80f      	bhi.n	14990 <mpu_configure_regions+0x6c>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   14970:	3c01      	subs	r4, #1
   14972:	fab4 f484 	clz	r4, r4
   14976:	f1c4 041f 	rsb	r4, r4, #31
   1497a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   1497c:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1497e:	ea4c 0404 	orr.w	r4, ip, r4
   14982:	d907      	bls.n	14994 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14984:	480e      	ldr	r0, [pc, #56]	; (149c0 <mpu_configure_regions+0x9c>)
   14986:	462a      	mov	r2, r5
   14988:	2145      	movs	r1, #69	; 0x45
   1498a:	e7dc      	b.n	14946 <mpu_configure_regions+0x22>
		return REGION_32B;
   1498c:	2408      	movs	r4, #8
   1498e:	e7f5      	b.n	1497c <mpu_configure_regions+0x58>
		return REGION_4G;
   14990:	243e      	movs	r4, #62	; 0x3e
   14992:	e7f3      	b.n	1497c <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14994:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
   14998:	432e      	orrs	r6, r5
   1499a:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1499e:	f044 0401 	orr.w	r4, r4, #1
   149a2:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   149a6:	f8c7 609c 	str.w	r6, [r7, #156]	; 0x9c
		reg_index++;
   149aa:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   149ac:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   149b0:	3201      	adds	r2, #1
   149b2:	300c      	adds	r0, #12
   149b4:	e7ba      	b.n	1492c <mpu_configure_regions+0x8>
   149b6:	bf00      	nop
   149b8:	e000ed00 	.word	0xe000ed00
   149bc:	0002b4be 	.word	0x0002b4be
   149c0:	0002b4e6 	.word	0x0002b4e6

000149c4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   149c4:	4b04      	ldr	r3, [pc, #16]	; (149d8 <arm_core_mpu_enable+0x14>)
   149c6:	2205      	movs	r2, #5
   149c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   149cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   149d0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   149d4:	4770      	bx	lr
   149d6:	bf00      	nop
   149d8:	e000ed00 	.word	0xe000ed00

000149dc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   149dc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   149e0:	4b02      	ldr	r3, [pc, #8]	; (149ec <arm_core_mpu_disable+0x10>)
   149e2:	2200      	movs	r2, #0
   149e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   149e8:	4770      	bx	lr
   149ea:	bf00      	nop
   149ec:	e000ed00 	.word	0xe000ed00

000149f0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   149f0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   149f2:	4c0b      	ldr	r4, [pc, #44]	; (14a20 <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   149f4:	2301      	movs	r3, #1
   149f6:	7822      	ldrb	r2, [r4, #0]
   149f8:	f7ff ff94 	bl	14924 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   149fc:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   149fe:	3016      	adds	r0, #22
   14a00:	d10c      	bne.n	14a1c <arm_core_mpu_configure_static_mpu_regions+0x2c>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14a02:	4908      	ldr	r1, [pc, #32]	; (14a24 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   14a04:	4808      	ldr	r0, [pc, #32]	; (14a28 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   14a06:	f44f 728b 	mov.w	r2, #278	; 0x116
   14a0a:	f011 fd78 	bl	264fe <assert_print>
			regions_num);
	}
}
   14a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14a12:	4804      	ldr	r0, [pc, #16]	; (14a24 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   14a14:	f44f 718b 	mov.w	r1, #278	; 0x116
   14a18:	f011 bd6a 	b.w	264f0 <assert_post_action>
}
   14a1c:	bd10      	pop	{r4, pc}
   14a1e:	bf00      	nop
   14a20:	200033d1 	.word	0x200033d1
   14a24:	0002b511 	.word	0x0002b511
   14a28:	0002aa75 	.word	0x0002aa75

00014a2c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   14a2c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   14a2e:	4a10      	ldr	r2, [pc, #64]	; (14a70 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
   14a30:	2300      	movs	r3, #0
   14a32:	7812      	ldrb	r2, [r2, #0]
   14a34:	f7ff ff76 	bl	14924 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   14a38:	f110 0f16 	cmn.w	r0, #22
   14a3c:	d00a      	beq.n	14a54 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>
  MPU->RNR = rnr;
   14a3e:	4b0d      	ldr	r3, [pc, #52]	; (14a74 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
  MPU->RASR = 0U;
   14a40:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   14a42:	2807      	cmp	r0, #7
   14a44:	dd00      	ble.n	14a48 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   14a46:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   14a48:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   14a4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   14a50:	3001      	adds	r0, #1
   14a52:	e7f6      	b.n	14a42 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   14a54:	4908      	ldr	r1, [pc, #32]	; (14a78 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   14a56:	4809      	ldr	r0, [pc, #36]	; (14a7c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
   14a58:	f240 1235 	movw	r2, #309	; 0x135
   14a5c:	f011 fd4f 	bl	264fe <assert_print>
}
   14a60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   14a64:	4804      	ldr	r0, [pc, #16]	; (14a78 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   14a66:	f240 1135 	movw	r1, #309	; 0x135
   14a6a:	f011 bd41 	b.w	264f0 <assert_post_action>
   14a6e:	bf00      	nop
   14a70:	200033d1 	.word	0x200033d1
   14a74:	e000ed00 	.word	0xe000ed00
   14a78:	0002b511 	.word	0x0002b511
   14a7c:	0002aa75 	.word	0x0002aa75

00014a80 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14a80:	4922      	ldr	r1, [pc, #136]	; (14b0c <z_arm_mpu_init+0x8c>)
{
   14a82:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   14a84:	680c      	ldr	r4, [r1, #0]
   14a86:	2c08      	cmp	r4, #8
   14a88:	d90d      	bls.n	14aa6 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   14a8a:	4921      	ldr	r1, [pc, #132]	; (14b10 <z_arm_mpu_init+0x90>)
   14a8c:	4821      	ldr	r0, [pc, #132]	; (14b14 <z_arm_mpu_init+0x94>)
   14a8e:	f240 124d 	movw	r2, #333	; 0x14d
   14a92:	f011 fd34 	bl	264fe <assert_print>
   14a96:	481e      	ldr	r0, [pc, #120]	; (14b10 <z_arm_mpu_init+0x90>)
   14a98:	f240 114d 	movw	r1, #333	; 0x14d
   14a9c:	f011 fd28 	bl	264f0 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   14aa0:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   14aa4:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   14aa6:	f7ff ff99 	bl	149dc <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14aaa:	6848      	ldr	r0, [r1, #4]
   14aac:	491a      	ldr	r1, [pc, #104]	; (14b18 <z_arm_mpu_init+0x98>)
   14aae:	2200      	movs	r2, #0
   14ab0:	4294      	cmp	r4, r2
   14ab2:	f100 000c 	add.w	r0, r0, #12
   14ab6:	d116      	bne.n	14ae6 <z_arm_mpu_init+0x66>
	static_regions_num = mpu_config.num_regions;
   14ab8:	4b18      	ldr	r3, [pc, #96]	; (14b1c <z_arm_mpu_init+0x9c>)
   14aba:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   14abc:	f7ff ff82 	bl	149c4 <arm_core_mpu_enable>
	__ASSERT(
   14ac0:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   14ac4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14ac8:	2b08      	cmp	r3, #8
   14aca:	d00a      	beq.n	14ae2 <z_arm_mpu_init+0x62>
   14acc:	4910      	ldr	r1, [pc, #64]	; (14b10 <z_arm_mpu_init+0x90>)
   14ace:	4811      	ldr	r0, [pc, #68]	; (14b14 <z_arm_mpu_init+0x94>)
   14ad0:	f240 12ad 	movw	r2, #429	; 0x1ad
   14ad4:	f011 fd13 	bl	264fe <assert_print>
   14ad8:	480d      	ldr	r0, [pc, #52]	; (14b10 <z_arm_mpu_init+0x90>)
   14ada:	f240 11ad 	movw	r1, #429	; 0x1ad
   14ade:	f011 fd07 	bl	264f0 <assert_post_action>
	return 0;
   14ae2:	2000      	movs	r0, #0
   14ae4:	e7de      	b.n	14aa4 <z_arm_mpu_init+0x24>
   14ae6:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14aea:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   14aee:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   14af2:	4313      	orrs	r3, r2
   14af4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14af8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14afc:	f850 3c04 	ldr.w	r3, [r0, #-4]
   14b00:	f043 0301 	orr.w	r3, r3, #1
   14b04:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14b08:	3201      	adds	r2, #1
   14b0a:	e7d1      	b.n	14ab0 <z_arm_mpu_init+0x30>
   14b0c:	0002a2f4 	.word	0x0002a2f4
   14b10:	0002b511 	.word	0x0002b511
   14b14:	0002aa75 	.word	0x0002aa75
   14b18:	e000ed00 	.word	0xe000ed00
   14b1c:	200033d1 	.word	0x200033d1

00014b20 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   14b20:	b510      	push	{r4, lr}
	__asm__ volatile(
   14b22:	f04f 0340 	mov.w	r3, #64	; 0x40
   14b26:	f3ef 8011 	mrs	r0, BASEPRI
   14b2a:	f383 8812 	msr	BASEPRI_MAX, r3
   14b2e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14b32:	4a11      	ldr	r2, [pc, #68]	; (14b78 <nordicsemi_nrf52_init+0x58>)
   14b34:	2301      	movs	r3, #1
   14b36:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   14b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14b3e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   14b42:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   14b46:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   14b4a:	2c08      	cmp	r4, #8
   14b4c:	d108      	bne.n	14b60 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   14b4e:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   14b52:	2905      	cmp	r1, #5
   14b54:	d804      	bhi.n	14b60 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   14b56:	4c09      	ldr	r4, [pc, #36]	; (14b7c <nordicsemi_nrf52_init+0x5c>)
   14b58:	5c61      	ldrb	r1, [r4, r1]
   14b5a:	b109      	cbz	r1, 14b60 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   14b5c:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   14b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14b64:	2201      	movs	r2, #1
   14b66:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   14b6a:	f380 8811 	msr	BASEPRI, r0
   14b6e:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14b72:	2000      	movs	r0, #0
   14b74:	bd10      	pop	{r4, pc}
   14b76:	bf00      	nop
   14b78:	4001e000 	.word	0x4001e000
   14b7c:	0002b55b 	.word	0x0002b55b

00014b80 <sys_arch_reboot>:
    *p_gpregret = val;
   14b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14b84:	b2c0      	uxtb	r0, r0
   14b86:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   14b8a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14b8e:	4905      	ldr	r1, [pc, #20]	; (14ba4 <sys_arch_reboot+0x24>)
   14b90:	4b05      	ldr	r3, [pc, #20]	; (14ba8 <sys_arch_reboot+0x28>)
   14b92:	68ca      	ldr	r2, [r1, #12]
   14b94:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14b98:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14b9a:	60cb      	str	r3, [r1, #12]
   14b9c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14ba0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14ba2:	e7fd      	b.n	14ba0 <sys_arch_reboot+0x20>
   14ba4:	e000ed00 	.word	0xe000ed00
   14ba8:	05fa0004 	.word	0x05fa0004

00014bac <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14bac:	b120      	cbz	r0, 14bb8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   14bae:	4b03      	ldr	r3, [pc, #12]	; (14bbc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14bb0:	0180      	lsls	r0, r0, #6
   14bb2:	f043 0301 	orr.w	r3, r3, #1
   14bb6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   14bb8:	4770      	bx	lr
   14bba:	bf00      	nop
   14bbc:	0002a180 	.word	0x0002a180

00014bc0 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
   14bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14bc4:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
   14bc8:	07db      	lsls	r3, r3, #31
   14bca:	d52e      	bpl.n	14c2a <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
   14bcc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   14bd0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   14bd4:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
   14bd8:	2b07      	cmp	r3, #7
   14bda:	d126      	bne.n	14c2a <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   14bdc:	4a14      	ldr	r2, [pc, #80]	; (14c30 <board_nrf52840dongle_nrf52840_init+0x70>)
   14bde:	2301      	movs	r3, #1
   14be0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   14be4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   14be8:	2b00      	cmp	r3, #0
   14bea:	d0fb      	beq.n	14be4 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
   14bec:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   14bf0:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
   14bf4:	f023 0307 	bic.w	r3, r3, #7
   14bf8:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
   14bfc:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   14c00:	2300      	movs	r3, #0
   14c02:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   14c06:	4a0a      	ldr	r2, [pc, #40]	; (14c30 <board_nrf52840dongle_nrf52840_init+0x70>)
   14c08:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   14c0c:	2b00      	cmp	r3, #0
   14c0e:	d0fb      	beq.n	14c08 <board_nrf52840dongle_nrf52840_init+0x48>
   14c10:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14c14:	4907      	ldr	r1, [pc, #28]	; (14c34 <board_nrf52840dongle_nrf52840_init+0x74>)
   14c16:	4b08      	ldr	r3, [pc, #32]	; (14c38 <board_nrf52840dongle_nrf52840_init+0x78>)
   14c18:	68ca      	ldr	r2, [r1, #12]
   14c1a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14c1e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14c20:	60cb      	str	r3, [r1, #12]
   14c22:	f3bf 8f4f 	dsb	sy
    __NOP();
   14c26:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14c28:	e7fd      	b.n	14c26 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
   14c2a:	2000      	movs	r0, #0
   14c2c:	4770      	bx	lr
   14c2e:	bf00      	nop
   14c30:	4001e000 	.word	0x4001e000
   14c34:	e000ed00 	.word	0xe000ed00
   14c38:	05fa0004 	.word	0x05fa0004

00014c3c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   14c3c:	4b0e      	ldr	r3, [pc, #56]	; (14c78 <bt_hex_real+0x3c>)
   14c3e:	2940      	cmp	r1, #64	; 0x40
{
   14c40:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   14c42:	bf28      	it	cs
   14c44:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   14c46:	4c0d      	ldr	r4, [pc, #52]	; (14c7c <bt_hex_real+0x40>)
   14c48:	1846      	adds	r6, r0, r1
   14c4a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   14c4c:	42b0      	cmp	r0, r6
   14c4e:	f103 0302 	add.w	r3, r3, #2
   14c52:	d104      	bne.n	14c5e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   14c54:	2300      	movs	r3, #0
   14c56:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   14c5a:	4807      	ldr	r0, [pc, #28]	; (14c78 <bt_hex_real+0x3c>)
   14c5c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   14c5e:	7802      	ldrb	r2, [r0, #0]
   14c60:	0912      	lsrs	r2, r2, #4
   14c62:	5ca2      	ldrb	r2, [r4, r2]
   14c64:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14c68:	f810 2b01 	ldrb.w	r2, [r0], #1
   14c6c:	f002 020f 	and.w	r2, r2, #15
   14c70:	5ca2      	ldrb	r2, [r4, r2]
   14c72:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   14c76:	e7e9      	b.n	14c4c <bt_hex_real+0x10>
   14c78:	200033f0 	.word	0x200033f0
   14c7c:	0002b5ad 	.word	0x0002b5ad

00014c80 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   14c80:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   14c82:	7803      	ldrb	r3, [r0, #0]
   14c84:	b08b      	sub	sp, #44	; 0x2c
   14c86:	4604      	mov	r4, r0
   14c88:	ad07      	add	r5, sp, #28
   14c8a:	2b03      	cmp	r3, #3
   14c8c:	d821      	bhi.n	14cd2 <bt_addr_le_str_real+0x52>
   14c8e:	e8df f003 	tbb	[pc, r3]
   14c92:	1a02      	.short	0x1a02
   14c94:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   14c96:	4912      	ldr	r1, [pc, #72]	; (14ce0 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   14c98:	4628      	mov	r0, r5
   14c9a:	f012 fa64 	bl	27166 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   14c9e:	7863      	ldrb	r3, [r4, #1]
   14ca0:	9304      	str	r3, [sp, #16]
   14ca2:	78a3      	ldrb	r3, [r4, #2]
   14ca4:	9303      	str	r3, [sp, #12]
   14ca6:	78e3      	ldrb	r3, [r4, #3]
   14ca8:	9302      	str	r3, [sp, #8]
   14caa:	7923      	ldrb	r3, [r4, #4]
   14cac:	9301      	str	r3, [sp, #4]
   14cae:	7963      	ldrb	r3, [r4, #5]
   14cb0:	9300      	str	r3, [sp, #0]
   14cb2:	4a0c      	ldr	r2, [pc, #48]	; (14ce4 <bt_addr_le_str_real+0x64>)
   14cb4:	79a3      	ldrb	r3, [r4, #6]
   14cb6:	9505      	str	r5, [sp, #20]
   14cb8:	211e      	movs	r1, #30
   14cba:	480b      	ldr	r0, [pc, #44]	; (14ce8 <bt_addr_le_str_real+0x68>)
   14cbc:	f011 fa3b 	bl	26136 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   14cc0:	4809      	ldr	r0, [pc, #36]	; (14ce8 <bt_addr_le_str_real+0x68>)
   14cc2:	b00b      	add	sp, #44	; 0x2c
   14cc4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   14cc6:	4909      	ldr	r1, [pc, #36]	; (14cec <bt_addr_le_str_real+0x6c>)
   14cc8:	e7e6      	b.n	14c98 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   14cca:	4909      	ldr	r1, [pc, #36]	; (14cf0 <bt_addr_le_str_real+0x70>)
   14ccc:	e7e4      	b.n	14c98 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   14cce:	4909      	ldr	r1, [pc, #36]	; (14cf4 <bt_addr_le_str_real+0x74>)
   14cd0:	e7e2      	b.n	14c98 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   14cd2:	4a09      	ldr	r2, [pc, #36]	; (14cf8 <bt_addr_le_str_real+0x78>)
   14cd4:	210a      	movs	r1, #10
   14cd6:	4628      	mov	r0, r5
   14cd8:	f011 fa2d 	bl	26136 <snprintk>
		break;
   14cdc:	e7df      	b.n	14c9e <bt_addr_le_str_real+0x1e>
   14cde:	bf00      	nop
   14ce0:	0002b561 	.word	0x0002b561
   14ce4:	0002b58a 	.word	0x0002b58a
   14ce8:	200033d2 	.word	0x200033d2
   14cec:	0002b568 	.word	0x0002b568
   14cf0:	0002b56f 	.word	0x0002b56f
   14cf4:	0002b579 	.word	0x0002b579
   14cf8:	0002b583 	.word	0x0002b583

00014cfc <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   14cfc:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
   14cfe:	480a      	ldr	r0, [pc, #40]	; (14d28 <save_id+0x2c>)
   14d00:	2149      	movs	r1, #73	; 0x49
   14d02:	f011 fc0a 	bl	2651a <z_log_minimal_printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   14d06:	4909      	ldr	r1, [pc, #36]	; (14d2c <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   14d08:	4809      	ldr	r0, [pc, #36]	; (14d30 <save_id+0x34>)
   14d0a:	79ca      	ldrb	r2, [r1, #7]
   14d0c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   14d10:	f7fe fcc0 	bl	13694 <settings_save_one>
	if (err) {
   14d14:	4602      	mov	r2, r0
   14d16:	b128      	cbz	r0, 14d24 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   14d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
   14d1c:	4805      	ldr	r0, [pc, #20]	; (14d34 <save_id+0x38>)
   14d1e:	2145      	movs	r1, #69	; 0x45
   14d20:	f011 bbfb 	b.w	2651a <z_log_minimal_printk>
}
   14d24:	bd08      	pop	{r3, pc}
   14d26:	bf00      	nop
   14d28:	0002b5c5 	.word	0x0002b5c5
   14d2c:	20000350 	.word	0x20000350
   14d30:	0002b5d4 	.word	0x0002b5d4
   14d34:	0002b5da 	.word	0x0002b5da

00014d38 <set>:
{
   14d38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14d3c:	4d22      	ldr	r5, [pc, #136]	; (14dc8 <set+0x90>)
   14d3e:	f3bf 8f5b 	dmb	ish
   14d42:	682c      	ldr	r4, [r5, #0]
   14d44:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14d48:	f014 0401 	ands.w	r4, r4, #1
{
   14d4c:	4606      	mov	r6, r0
   14d4e:	4617      	mov	r7, r2
   14d50:	4698      	mov	r8, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14d52:	d01d      	beq.n	14d90 <set+0x58>
	if (!name) {
   14d54:	b930      	cbnz	r0, 14d64 <set+0x2c>
		BT_ERR("Insufficient number of arguments");
   14d56:	481d      	ldr	r0, [pc, #116]	; (14dcc <set+0x94>)
   14d58:	2145      	movs	r1, #69	; 0x45
   14d5a:	f011 fbde 	bl	2651a <z_log_minimal_printk>
	return -ENOENT;
   14d5e:	f06f 0401 	mvn.w	r4, #1
   14d62:	e015      	b.n	14d90 <set+0x58>
	len = settings_name_next(name, &next);
   14d64:	a901      	add	r1, sp, #4
   14d66:	f011 fe78 	bl	26a5a <settings_name_next>
	if (!strncmp(name, "id", len)) {
   14d6a:	4919      	ldr	r1, [pc, #100]	; (14dd0 <set+0x98>)
	len = settings_name_next(name, &next);
   14d6c:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   14d6e:	4630      	mov	r0, r6
   14d70:	f012 fa1f 	bl	271b2 <strncmp>
   14d74:	4604      	mov	r4, r0
   14d76:	2800      	cmp	r0, #0
   14d78:	d1f1      	bne.n	14d5e <set+0x26>
   14d7a:	f3bf 8f5b 	dmb	ish
   14d7e:	682b      	ldr	r3, [r5, #0]
   14d80:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   14d84:	071b      	lsls	r3, r3, #28
   14d86:	d507      	bpl.n	14d98 <set+0x60>
			BT_WARN("Ignoring identities stored in flash");
   14d88:	4812      	ldr	r0, [pc, #72]	; (14dd4 <set+0x9c>)
   14d8a:	2157      	movs	r1, #87	; 0x57
   14d8c:	f011 fbc5 	bl	2651a <z_log_minimal_printk>
}
   14d90:	4620      	mov	r0, r4
   14d92:	b002      	add	sp, #8
   14d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   14d98:	3dcc      	subs	r5, #204	; 0xcc
   14d9a:	2207      	movs	r2, #7
   14d9c:	4629      	mov	r1, r5
   14d9e:	4640      	mov	r0, r8
   14da0:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   14da2:	2806      	cmp	r0, #6
   14da4:	d80a      	bhi.n	14dbc <set+0x84>
				BT_ERR("Invalid length ID address in storage");
   14da6:	480c      	ldr	r0, [pc, #48]	; (14dd8 <set+0xa0>)
   14da8:	2145      	movs	r1, #69	; 0x45
   14daa:	f011 fbb6 	bl	2651a <z_log_minimal_printk>
			(void)memset(bt_dev.id_addr, 0,
   14dae:	2207      	movs	r2, #7
   14db0:	4621      	mov	r1, r4
   14db2:	4628      	mov	r0, r5
   14db4:	f012 fa42 	bl	2723c <memset>
			bt_dev.id_count = 0U;
   14db8:	71ec      	strb	r4, [r5, #7]
   14dba:	e7e9      	b.n	14d90 <set+0x58>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   14dbc:	2307      	movs	r3, #7
   14dbe:	fbb0 f0f3 	udiv	r0, r0, r3
   14dc2:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   14dc4:	e7e4      	b.n	14d90 <set+0x58>
   14dc6:	bf00      	nop
   14dc8:	2000041c 	.word	0x2000041c
   14dcc:	0002b5fa 	.word	0x0002b5fa
   14dd0:	0002b576 	.word	0x0002b576
   14dd4:	0002b620 	.word	0x0002b620
   14dd8:	0002b649 	.word	0x0002b649

00014ddc <bt_settings_encode_key>:
{
   14ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14de0:	b088      	sub	sp, #32
		snprintk(path, path_size,
   14de2:	799c      	ldrb	r4, [r3, #6]
{
   14de4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   14de8:	795d      	ldrb	r5, [r3, #5]
   14dea:	791e      	ldrb	r6, [r3, #4]
   14dec:	78df      	ldrb	r7, [r3, #3]
   14dee:	f893 c002 	ldrb.w	ip, [r3, #2]
   14df2:	f893 e001 	ldrb.w	lr, [r3, #1]
   14df6:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   14df8:	f1b8 0f00 	cmp.w	r8, #0
   14dfc:	d00e      	beq.n	14e1c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   14dfe:	e9cd 3806 	strd	r3, r8, [sp, #24]
   14e02:	e9cd ce04 	strd	ip, lr, [sp, #16]
   14e06:	4613      	mov	r3, r2
   14e08:	e9cd 6702 	strd	r6, r7, [sp, #8]
   14e0c:	e9cd 4500 	strd	r4, r5, [sp]
   14e10:	4a08      	ldr	r2, [pc, #32]	; (14e34 <bt_settings_encode_key+0x58>)
   14e12:	f011 f990 	bl	26136 <snprintk>
}
   14e16:	b008      	add	sp, #32
   14e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   14e1c:	e9cd e305 	strd	lr, r3, [sp, #20]
   14e20:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   14e24:	4613      	mov	r3, r2
   14e26:	e9cd 5601 	strd	r5, r6, [sp, #4]
   14e2a:	4a03      	ldr	r2, [pc, #12]	; (14e38 <bt_settings_encode_key+0x5c>)
   14e2c:	9400      	str	r4, [sp, #0]
   14e2e:	f011 f982 	bl	26136 <snprintk>
}
   14e32:	e7f0      	b.n	14e16 <bt_settings_encode_key+0x3a>
   14e34:	0002b673 	.word	0x0002b673
   14e38:	0002b697 	.word	0x0002b697

00014e3c <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   14e3c:	4801      	ldr	r0, [pc, #4]	; (14e44 <bt_settings_save_id+0x8>)
   14e3e:	f00c b8bb 	b.w	20fb8 <k_work_submit>
   14e42:	bf00      	nop
   14e44:	2000051c 	.word	0x2000051c

00014e48 <commit>:
}

static int commit(void)
{
   14e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e4a:	4d1e      	ldr	r5, [pc, #120]	; (14ec4 <commit+0x7c>)
   14e4c:	f3bf 8f5b 	dmb	ish
   14e50:	682b      	ldr	r3, [r5, #0]
   14e52:	f3bf 8f5b 	dmb	ish
	int err;

	BT_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14e56:	f013 0f01 	tst.w	r3, #1
   14e5a:	462e      	mov	r6, r5
   14e5c:	d101      	bne.n	14e62 <commit+0x1a>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
   14e5e:	2400      	movs	r4, #0
   14e60:	e00c      	b.n	14e7c <commit+0x34>
	if (!bt_dev.id_count) {
   14e62:	f815 3cc5 	ldrb.w	r3, [r5, #-197]
   14e66:	f1a5 07cc 	sub.w	r7, r5, #204	; 0xcc
   14e6a:	b983      	cbnz	r3, 14e8e <commit+0x46>
		err = bt_setup_public_id_addr();
   14e6c:	f001 fc4a 	bl	16704 <bt_setup_public_id_addr>
		if (err) {
   14e70:	4604      	mov	r4, r0
   14e72:	b128      	cbz	r0, 14e80 <commit+0x38>
			BT_ERR("Unable to setup an identity address");
   14e74:	4814      	ldr	r0, [pc, #80]	; (14ec8 <commit+0x80>)
   14e76:	2145      	movs	r1, #69	; 0x45
   14e78:	f011 fb4f 	bl	2651a <z_log_minimal_printk>
}
   14e7c:	4620      	mov	r0, r4
   14e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_dev.id_count) {
   14e80:	79fb      	ldrb	r3, [r7, #7]
   14e82:	b923      	cbnz	r3, 14e8e <commit+0x46>
		err = bt_setup_random_id_addr();
   14e84:	f001 fc92 	bl	167ac <bt_setup_random_id_addr>
		if (err) {
   14e88:	4604      	mov	r4, r0
   14e8a:	2800      	cmp	r0, #0
   14e8c:	d1f2      	bne.n	14e74 <commit+0x2c>
   14e8e:	f3bf 8f5b 	dmb	ish
   14e92:	682b      	ldr	r3, [r5, #0]
   14e94:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14e98:	075a      	lsls	r2, r3, #29
   14e9a:	d401      	bmi.n	14ea0 <commit+0x58>
		bt_finalize_init();
   14e9c:	f001 f91a 	bl	160d4 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14ea0:	f3bf 8f5b 	dmb	ish
   14ea4:	e856 3f00 	ldrex	r3, [r6]
   14ea8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   14eac:	e846 2100 	strex	r1, r2, [r6]
   14eb0:	2900      	cmp	r1, #0
   14eb2:	d1f7      	bne.n	14ea4 <commit+0x5c>
   14eb4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   14eb8:	03db      	lsls	r3, r3, #15
   14eba:	d5d0      	bpl.n	14e5e <commit+0x16>
		bt_settings_save_id();
   14ebc:	f7ff ffbe 	bl	14e3c <bt_settings_save_id>
   14ec0:	e7cd      	b.n	14e5e <commit+0x16>
   14ec2:	bf00      	nop
   14ec4:	2000041c 	.word	0x2000041c
   14ec8:	0002b6b8 	.word	0x0002b6b8

00014ecc <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   14ecc:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   14ece:	f7fe fd51 	bl	13974 <settings_subsys_init>
	if (err) {
   14ed2:	4604      	mov	r4, r0
   14ed4:	b120      	cbz	r0, 14ee0 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
   14ed6:	4602      	mov	r2, r0
   14ed8:	2145      	movs	r1, #69	; 0x45
   14eda:	4802      	ldr	r0, [pc, #8]	; (14ee4 <bt_settings_init+0x18>)
   14edc:	f011 fb1d 	bl	2651a <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   14ee0:	4620      	mov	r0, r4
   14ee2:	bd10      	pop	{r4, pc}
   14ee4:	0002b6e1 	.word	0x0002b6e1

00014ee8 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   14ee8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   14eea:	4d0a      	ldr	r5, [pc, #40]	; (14f14 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   14eec:	4b0a      	ldr	r3, [pc, #40]	; (14f18 <long_wq_init+0x30>)
{
   14eee:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   14ef0:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   14ef2:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   14ef4:	9302      	str	r3, [sp, #8]
   14ef6:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   14ef8:	f00c f864 	bl	20fc4 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   14efc:	ab02      	add	r3, sp, #8
   14efe:	9300      	str	r3, [sp, #0]
   14f00:	4628      	mov	r0, r5
   14f02:	4906      	ldr	r1, [pc, #24]	; (14f1c <long_wq_init+0x34>)
   14f04:	230a      	movs	r3, #10
   14f06:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   14f0a:	f00c f873 	bl	20ff4 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   14f0e:	4620      	mov	r0, r4
   14f10:	b005      	add	sp, #20
   14f12:	bd30      	pop	{r4, r5, pc}
   14f14:	200016e8 	.word	0x200016e8
   14f18:	0002b71a 	.word	0x0002b71a
   14f1c:	20003cc0 	.word	0x20003cc0

00014f20 <bt_long_wq_schedule>:
{
   14f20:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   14f22:	4801      	ldr	r0, [pc, #4]	; (14f28 <bt_long_wq_schedule+0x8>)
   14f24:	f00c b8fa 	b.w	2111c <k_work_schedule_for_queue>
   14f28:	200016e8 	.word	0x200016e8

00014f2c <bt_long_wq_reschedule>:
{
   14f2c:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   14f2e:	4801      	ldr	r0, [pc, #4]	; (14f34 <bt_long_wq_reschedule+0x8>)
   14f30:	f00c b95e 	b.w	211f0 <k_work_reschedule_for_queue>
   14f34:	200016e8 	.word	0x200016e8

00014f38 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   14f38:	b430      	push	{r4, r5}
   14f3a:	4603      	mov	r3, r0
   14f3c:	4608      	mov	r0, r1
	switch (src->type) {
   14f3e:	781a      	ldrb	r2, [r3, #0]
   14f40:	2a01      	cmp	r2, #1
   14f42:	d013      	beq.n	14f6c <uuid_to_uuid128+0x34>
   14f44:	2a02      	cmp	r2, #2
   14f46:	d026      	beq.n	14f96 <uuid_to_uuid128+0x5e>
   14f48:	b972      	cbnz	r2, 14f68 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   14f4a:	4a15      	ldr	r2, [pc, #84]	; (14fa0 <uuid_to_uuid128+0x68>)
   14f4c:	f102 0410 	add.w	r4, r2, #16
   14f50:	f852 5b04 	ldr.w	r5, [r2], #4
   14f54:	f841 5b04 	str.w	r5, [r1], #4
   14f58:	42a2      	cmp	r2, r4
   14f5a:	d1f9      	bne.n	14f50 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   14f5c:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   14f5e:	7812      	ldrb	r2, [r2, #0]
   14f60:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   14f62:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   14f64:	0a1b      	lsrs	r3, r3, #8
   14f66:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   14f68:	bc30      	pop	{r4, r5}
   14f6a:	4770      	bx	lr
		*dst = uuid128_base;
   14f6c:	4a0c      	ldr	r2, [pc, #48]	; (14fa0 <uuid_to_uuid128+0x68>)
   14f6e:	f102 0410 	add.w	r4, r2, #16
   14f72:	f852 5b04 	ldr.w	r5, [r2], #4
   14f76:	f841 5b04 	str.w	r5, [r1], #4
   14f7a:	42a2      	cmp	r2, r4
   14f7c:	d1f9      	bne.n	14f72 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   14f7e:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   14f80:	7812      	ldrb	r2, [r2, #0]
   14f82:	700a      	strb	r2, [r1, #0]
   14f84:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   14f88:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   14f8a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   14f8c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   14f8e:	0a1b      	lsrs	r3, r3, #8
   14f90:	7382      	strb	r2, [r0, #14]
   14f92:	7403      	strb	r3, [r0, #16]
}
   14f94:	e7e8      	b.n	14f68 <uuid_to_uuid128+0x30>
}
   14f96:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   14f98:	2211      	movs	r2, #17
   14f9a:	4619      	mov	r1, r3
   14f9c:	f012 b943 	b.w	27226 <memcpy>
   14fa0:	0002b723 	.word	0x0002b723

00014fa4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   14fa4:	b570      	push	{r4, r5, r6, lr}
   14fa6:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   14fa8:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   14fac:	2b01      	cmp	r3, #1
{
   14fae:	4605      	mov	r5, r0
   14fb0:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   14fb2:	d00a      	beq.n	14fca <bt_buf_get_rx+0x26>
   14fb4:	2805      	cmp	r0, #5
   14fb6:	d008      	beq.n	14fca <bt_buf_get_rx+0x26>
   14fb8:	490b      	ldr	r1, [pc, #44]	; (14fe8 <bt_buf_get_rx+0x44>)
   14fba:	480c      	ldr	r0, [pc, #48]	; (14fec <bt_buf_get_rx+0x48>)
   14fbc:	2241      	movs	r2, #65	; 0x41
   14fbe:	f011 fa9e 	bl	264fe <assert_print>
   14fc2:	4809      	ldr	r0, [pc, #36]	; (14fe8 <bt_buf_get_rx+0x44>)
   14fc4:	2141      	movs	r1, #65	; 0x41
   14fc6:	f011 fa93 	bl	264f0 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   14fca:	4623      	mov	r3, r4
   14fcc:	4808      	ldr	r0, [pc, #32]	; (14ff0 <bt_buf_get_rx+0x4c>)
   14fce:	4632      	mov	r2, r6
   14fd0:	f014 f981 	bl	292d6 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   14fd4:	4604      	mov	r4, r0
   14fd6:	b120      	cbz	r0, 14fe2 <bt_buf_get_rx+0x3e>
	net_buf_simple_reserve(&buf->b, reserve);
   14fd8:	2100      	movs	r1, #0
   14fda:	3008      	adds	r0, #8
   14fdc:	f007 faee 	bl	1c5bc <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14fe0:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   14fe2:	4620      	mov	r0, r4
   14fe4:	bd70      	pop	{r4, r5, r6, pc}
   14fe6:	bf00      	nop
   14fe8:	0002b734 	.word	0x0002b734
   14fec:	0002aa75 	.word	0x0002aa75
   14ff0:	200009c0 	.word	0x200009c0

00014ff4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   14ff4:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   14ff6:	490b      	ldr	r1, [pc, #44]	; (15024 <bt_buf_get_cmd_complete+0x30>)
{
   14ff8:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   14ffa:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   14ffe:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   15000:	b920      	cbnz	r0, 1500c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15006:	2001      	movs	r0, #1
   15008:	f7ff bfcc 	b.w	14fa4 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   1500c:	f007 fc3a 	bl	1c884 <net_buf_ref>
   15010:	2301      	movs	r3, #1
		buf->len = 0U;
   15012:	2100      	movs	r1, #0
   15014:	7503      	strb	r3, [r0, #20]
   15016:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   15018:	4604      	mov	r4, r0
   1501a:	3008      	adds	r0, #8
   1501c:	f007 face 	bl	1c5bc <net_buf_simple_reserve>
}
   15020:	4620      	mov	r0, r4
   15022:	bd10      	pop	{r4, pc}
   15024:	20000350 	.word	0x20000350

00015028 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15028:	b570      	push	{r4, r5, r6, lr}
   1502a:	4604      	mov	r4, r0
	switch (evt) {
   1502c:	2c0f      	cmp	r4, #15
{
   1502e:	460d      	mov	r5, r1
   15030:	4610      	mov	r0, r2
   15032:	4619      	mov	r1, r3
	switch (evt) {
   15034:	d805      	bhi.n	15042 <bt_buf_get_evt+0x1a>
   15036:	2c0d      	cmp	r4, #13
   15038:	d912      	bls.n	15060 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1503a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1503e:	f7ff bfd9 	b.w	14ff4 <bt_buf_get_cmd_complete>
	switch (evt) {
   15042:	2c13      	cmp	r4, #19
   15044:	d10c      	bne.n	15060 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   15046:	480b      	ldr	r0, [pc, #44]	; (15074 <bt_buf_get_evt+0x4c>)
   15048:	f014 f945 	bl	292d6 <net_buf_alloc_fixed>
			if (buf) {
   1504c:	4604      	mov	r4, r0
   1504e:	b128      	cbz	r0, 1505c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   15050:	2100      	movs	r1, #0
   15052:	3008      	adds	r0, #8
   15054:	f007 fab2 	bl	1c5bc <net_buf_simple_reserve>
   15058:	2301      	movs	r3, #1
   1505a:	7523      	strb	r3, [r4, #20]
}
   1505c:	4620      	mov	r0, r4
   1505e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   15060:	4602      	mov	r2, r0
   15062:	460b      	mov	r3, r1
		if (discardable) {
   15064:	b10d      	cbz	r5, 1506a <bt_buf_get_evt+0x42>
   15066:	4804      	ldr	r0, [pc, #16]	; (15078 <bt_buf_get_evt+0x50>)
   15068:	e7ee      	b.n	15048 <bt_buf_get_evt+0x20>
}
   1506a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1506e:	2001      	movs	r0, #1
   15070:	f7ff bf98 	b.w	14fa4 <bt_buf_get_rx>
   15074:	200009f4 	.word	0x200009f4
   15078:	20000924 	.word	0x20000924

0001507c <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1507c:	6883      	ldr	r3, [r0, #8]
   1507e:	4802      	ldr	r0, [pc, #8]	; (15088 <hci_data_buf_overflow+0xc>)
   15080:	781a      	ldrb	r2, [r3, #0]
   15082:	2157      	movs	r1, #87	; 0x57
   15084:	f011 ba49 	b.w	2651a <z_log_minimal_printk>
   15088:	0002b76a 	.word	0x0002b76a

0001508c <hci_disconn_complete_prio>:
{
   1508c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1508e:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   15090:	781a      	ldrb	r2, [r3, #0]
   15092:	b972      	cbnz	r2, 150b2 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15094:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15098:	4620      	mov	r0, r4
   1509a:	f002 fae3 	bl	17664 <bt_conn_lookup_handle>
	if (!conn) {
   1509e:	4605      	mov	r5, r0
   150a0:	b940      	cbnz	r0, 150b4 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   150a2:	4b08      	ldr	r3, [pc, #32]	; (150c4 <hci_disconn_complete_prio+0x38>)
   150a4:	881a      	ldrh	r2, [r3, #0]
   150a6:	b922      	cbnz	r2, 150b2 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   150a8:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   150ac:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   150b0:	8018      	strh	r0, [r3, #0]
}
   150b2:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   150b4:	2101      	movs	r1, #1
   150b6:	f002 fadd 	bl	17674 <bt_conn_set_state>
	bt_conn_unref(conn);
   150ba:	4628      	mov	r0, r5
}
   150bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   150c0:	f002 baa0 	b.w	17604 <bt_conn_unref>
   150c4:	200033b4 	.word	0x200033b4

000150c8 <hci_disconn_complete>:
{
   150c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   150ca:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   150cc:	782e      	ldrb	r6, [r5, #0]
   150ce:	b9be      	cbnz	r6, 15100 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   150d0:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   150d4:	4638      	mov	r0, r7
   150d6:	f002 fac5 	bl	17664 <bt_conn_lookup_handle>
	if (!conn) {
   150da:	4604      	mov	r4, r0
   150dc:	b930      	cbnz	r0, 150ec <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
   150de:	463a      	mov	r2, r7
   150e0:	4808      	ldr	r0, [pc, #32]	; (15104 <hci_disconn_complete+0x3c>)
}
   150e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   150e6:	2145      	movs	r1, #69	; 0x45
   150e8:	f011 ba17 	b.w	2651a <z_log_minimal_printk>
	conn->err = evt->reason;
   150ec:	78eb      	ldrb	r3, [r5, #3]
   150ee:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   150f0:	4631      	mov	r1, r6
   150f2:	f002 fabf 	bl	17674 <bt_conn_set_state>
		bt_conn_unref(conn);
   150f6:	4620      	mov	r0, r4
}
   150f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   150fc:	f002 ba82 	b.w	17604 <bt_conn_unref>
}
   15100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15102:	bf00      	nop
   15104:	0002b797 	.word	0x0002b797

00015108 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15108:	6883      	ldr	r3, [r0, #8]
{
   1510a:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1510c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15110:	4620      	mov	r0, r4
   15112:	f002 faa7 	bl	17664 <bt_conn_lookup_handle>
	if (!conn) {
   15116:	b930      	cbnz	r0, 15126 <le_phy_update_complete+0x1e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15118:	4622      	mov	r2, r4
   1511a:	4805      	ldr	r0, [pc, #20]	; (15130 <le_phy_update_complete+0x28>)
}
   1511c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15120:	2145      	movs	r1, #69	; 0x45
   15122:	f011 b9fa 	b.w	2651a <z_log_minimal_printk>
}
   15126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1512a:	f002 ba6b 	b.w	17604 <bt_conn_unref>
   1512e:	bf00      	nop
   15130:	0002b7c2 	.word	0x0002b7c2

00015134 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15134:	6883      	ldr	r3, [r0, #8]
{
   15136:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15138:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1513a:	4620      	mov	r0, r4
   1513c:	f002 fa92 	bl	17664 <bt_conn_lookup_handle>
	if (!conn) {
   15140:	b930      	cbnz	r0, 15150 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15142:	4622      	mov	r2, r4
   15144:	4804      	ldr	r0, [pc, #16]	; (15158 <le_data_len_change+0x24>)
}
   15146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1514a:	2145      	movs	r1, #69	; 0x45
   1514c:	f011 b9e5 	b.w	2651a <z_log_minimal_printk>
}
   15150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   15154:	f002 ba56 	b.w	17604 <bt_conn_unref>
   15158:	0002b7c2 	.word	0x0002b7c2

0001515c <hci_hardware_error>:
{
   1515c:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1515e:	2101      	movs	r1, #1
   15160:	3008      	adds	r0, #8
   15162:	f007 fc43 	bl	1c9ec <net_buf_simple_pull_mem>
}
   15166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1516a:	7802      	ldrb	r2, [r0, #0]
   1516c:	4801      	ldr	r0, [pc, #4]	; (15174 <hci_hardware_error+0x18>)
   1516e:	2145      	movs	r1, #69	; 0x45
   15170:	f011 b9d3 	b.w	2651a <z_log_minimal_printk>
   15174:	0002b7eb 	.word	0x0002b7eb

00015178 <rx_queue_put>:
{
   15178:	4601      	mov	r1, r0
   1517a:	b508      	push	{r3, lr}
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   1517c:	4807      	ldr	r0, [pc, #28]	; (1519c <rx_queue_put+0x24>)
   1517e:	f007 fa41 	bl	1c604 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15182:	4907      	ldr	r1, [pc, #28]	; (151a0 <rx_queue_put+0x28>)
   15184:	4807      	ldr	r0, [pc, #28]	; (151a4 <rx_queue_put+0x2c>)
   15186:	f014 fc2a 	bl	299de <k_work_submit_to_queue>
	if (err < 0) {
   1518a:	1e02      	subs	r2, r0, #0
   1518c:	da05      	bge.n	1519a <rx_queue_put+0x22>
}
   1518e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Could not submit rx_work: %d", err);
   15192:	4805      	ldr	r0, [pc, #20]	; (151a8 <rx_queue_put+0x30>)
   15194:	2145      	movs	r1, #69	; 0x45
   15196:	f011 b9c0 	b.w	2651a <z_log_minimal_printk>
}
   1519a:	bd08      	pop	{r3, pc}
   1519c:	2000048c 	.word	0x2000048c
   151a0:	20000568 	.word	0x20000568
   151a4:	20001788 	.word	0x20001788
   151a8:	0002b812 	.word	0x0002b812

000151ac <le_conn_update_complete>:
{
   151ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   151ae:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   151b0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   151b4:	4630      	mov	r0, r6
   151b6:	f002 fa55 	bl	17664 <bt_conn_lookup_handle>
	if (!conn) {
   151ba:	4604      	mov	r4, r0
   151bc:	b938      	cbnz	r0, 151ce <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   151be:	4822      	ldr	r0, [pc, #136]	; (15248 <le_conn_update_complete+0x9c>)
   151c0:	4632      	mov	r2, r6
   151c2:	2145      	movs	r1, #69	; 0x45
}
   151c4:	b002      	add	sp, #8
   151c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   151ca:	f011 b9a6 	b.w	2651a <z_log_minimal_printk>
	if (!evt->status) {
   151ce:	782b      	ldrb	r3, [r5, #0]
   151d0:	b9cb      	cbnz	r3, 15206 <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   151d2:	792a      	ldrb	r2, [r5, #4]
   151d4:	78eb      	ldrb	r3, [r5, #3]
   151d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   151da:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   151de:	79aa      	ldrb	r2, [r5, #6]
   151e0:	796b      	ldrb	r3, [r5, #5]
   151e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   151e6:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   151ea:	79eb      	ldrb	r3, [r5, #7]
   151ec:	7a2a      	ldrb	r2, [r5, #8]
   151ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   151f2:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   151f6:	f002 fb63 	bl	178c0 <notify_le_param_updated>
	bt_conn_unref(conn);
   151fa:	4620      	mov	r0, r4
}
   151fc:	b002      	add	sp, #8
   151fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15202:	f002 b9ff 	b.w	17604 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   15206:	2b1a      	cmp	r3, #26
   15208:	d1f7      	bne.n	151fa <le_conn_update_complete+0x4e>
   1520a:	78c3      	ldrb	r3, [r0, #3]
   1520c:	2b01      	cmp	r3, #1
   1520e:	d1f4      	bne.n	151fa <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15210:	f44f 7100 	mov.w	r1, #512	; 0x200
   15214:	3004      	adds	r0, #4
   15216:	f012 f8fb 	bl	27410 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1521a:	0583      	lsls	r3, r0, #22
   1521c:	d4ed      	bmi.n	151fa <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
   1521e:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   15222:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   15226:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   1522a:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   1522e:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
   15232:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   15236:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   15238:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
   1523c:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   15240:	4620      	mov	r0, r4
   15242:	f002 ff59 	bl	180f8 <bt_l2cap_update_conn_param>
   15246:	e7d8      	b.n	151fa <le_conn_update_complete+0x4e>
   15248:	0002b7c2 	.word	0x0002b7c2

0001524c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   1524c:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1524e:	4c0c      	ldr	r4, [pc, #48]	; (15280 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15250:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15252:	2205      	movs	r2, #5
   15254:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   15258:	f002 fca8 	bl	17bac <bt_conn_lookup_state_le>
		if (!conn) {
   1525c:	b970      	cbnz	r0, 1527c <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   1525e:	4b09      	ldr	r3, [pc, #36]	; (15284 <find_pending_connect.part.0+0x38>)
   15260:	6818      	ldr	r0, [r3, #0]
   15262:	889a      	ldrh	r2, [r3, #4]
   15264:	9000      	str	r0, [sp, #0]
   15266:	799b      	ldrb	r3, [r3, #6]
   15268:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1526c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   15270:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15274:	2204      	movs	r2, #4
   15276:	4669      	mov	r1, sp
   15278:	f002 fc98 	bl	17bac <bt_conn_lookup_state_le>
}
   1527c:	b002      	add	sp, #8
   1527e:	bd10      	pop	{r4, pc}
   15280:	20000350 	.word	0x20000350
   15284:	0002a134 	.word	0x0002a134

00015288 <handle_event>:
{
   15288:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1528a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1528e:	4605      	mov	r5, r0
   15290:	4614      	mov	r4, r2
   15292:	4608      	mov	r0, r1
		if (handler->event != event) {
   15294:	7822      	ldrb	r2, [r4, #0]
   15296:	42aa      	cmp	r2, r5
   15298:	d010      	beq.n	152bc <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
   1529a:	3408      	adds	r4, #8
   1529c:	429c      	cmp	r4, r3
   1529e:	d1f9      	bne.n	15294 <handle_event+0xc>
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   152a0:	8984      	ldrh	r4, [r0, #12]
   152a2:	6880      	ldr	r0, [r0, #8]
   152a4:	4621      	mov	r1, r4
   152a6:	f7ff fcc9 	bl	14c3c <bt_hex_real>
   152aa:	4623      	mov	r3, r4
   152ac:	9000      	str	r0, [sp, #0]
   152ae:	462a      	mov	r2, r5
   152b0:	480b      	ldr	r0, [pc, #44]	; (152e0 <handle_event+0x58>)
   152b2:	2157      	movs	r1, #87	; 0x57
   152b4:	f011 f931 	bl	2651a <z_log_minimal_printk>
}
   152b8:	b003      	add	sp, #12
   152ba:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
   152bc:	8982      	ldrh	r2, [r0, #12]
   152be:	7863      	ldrb	r3, [r4, #1]
   152c0:	4293      	cmp	r3, r2
   152c2:	d907      	bls.n	152d4 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   152c4:	4807      	ldr	r0, [pc, #28]	; (152e4 <handle_event+0x5c>)
   152c6:	462b      	mov	r3, r5
   152c8:	2145      	movs	r1, #69	; 0x45
}
   152ca:	b003      	add	sp, #12
   152cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   152d0:	f011 b923 	b.w	2651a <z_log_minimal_printk>
		handler->handler(buf);
   152d4:	6863      	ldr	r3, [r4, #4]
}
   152d6:	b003      	add	sp, #12
   152d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   152dc:	4718      	bx	r3
   152de:	bf00      	nop
   152e0:	0002b85b 	.word	0x0002b85b
   152e4:	0002b834 	.word	0x0002b834

000152e8 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   152e8:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   152ea:	4844      	ldr	r0, [pc, #272]	; (153fc <rx_work_handler+0x114>)
   152ec:	f007 f9e8 	bl	1c6c0 <net_buf_slist_get>
	if (!buf) {
   152f0:	4604      	mov	r4, r0
   152f2:	2800      	cmp	r0, #0
   152f4:	f000 8081 	beq.w	153fa <rx_work_handler+0x112>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   152f8:	7d02      	ldrb	r2, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   152fa:	2a01      	cmp	r2, #1
   152fc:	d04d      	beq.n	1539a <rx_work_handler+0xb2>
   152fe:	2a03      	cmp	r2, #3
   15300:	d178      	bne.n	153f4 <rx_work_handler+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15302:	8983      	ldrh	r3, [r0, #12]
   15304:	2b03      	cmp	r3, #3
   15306:	d80b      	bhi.n	15320 <rx_work_handler+0x38>
   15308:	493d      	ldr	r1, [pc, #244]	; (15400 <rx_work_handler+0x118>)
   1530a:	483e      	ldr	r0, [pc, #248]	; (15404 <rx_work_handler+0x11c>)
   1530c:	f240 12eb 	movw	r2, #491	; 0x1eb
   15310:	f011 f8f5 	bl	264fe <assert_print>
   15314:	4040      	eors	r0, r0
   15316:	f380 8811 	msr	BASEPRI, r0
   1531a:	f04f 0003 	mov.w	r0, #3
   1531e:	df02      	svc	2
   15320:	2104      	movs	r1, #4
   15322:	f104 0008 	add.w	r0, r4, #8
   15326:	f007 fb61 	bl	1c9ec <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1532a:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   1532c:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1532e:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15330:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   15332:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   15334:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   15338:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   1533a:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   1533c:	d007      	beq.n	1534e <rx_work_handler+0x66>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1533e:	4832      	ldr	r0, [pc, #200]	; (15408 <rx_work_handler+0x120>)
   15340:	2145      	movs	r1, #69	; 0x45
   15342:	f011 f8ea 	bl	2651a <z_log_minimal_printk>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   15346:	4620      	mov	r0, r4
   15348:	f007 fa58 	bl	1c7fc <net_buf_unref>
		break;
   1534c:	e014      	b.n	15378 <rx_work_handler+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1534e:	f002 f989 	bl	17664 <bt_conn_lookup_handle>
	if (!conn) {
   15352:	4605      	mov	r5, r0
   15354:	b928      	cbnz	r0, 15362 <rx_work_handler+0x7a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   15356:	8ae2      	ldrh	r2, [r4, #22]
   15358:	482c      	ldr	r0, [pc, #176]	; (1540c <rx_work_handler+0x124>)
   1535a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1535c:	f011 f8dd 	bl	2651a <z_log_minimal_printk>
   15360:	e7f1      	b.n	15346 <rx_work_handler+0x5e>
	acl(buf)->index = bt_conn_index(conn);
   15362:	f002 fa5f 	bl	17824 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   15366:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   15368:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   1536a:	4621      	mov	r1, r4
   1536c:	4628      	mov	r0, r5
   1536e:	f002 f84f 	bl	17410 <bt_conn_recv>
	bt_conn_unref(conn);
   15372:	4628      	mov	r0, r5
   15374:	f002 f946 	bl	17604 <bt_conn_unref>
	return list->head;
   15378:	4b25      	ldr	r3, [pc, #148]	; (15410 <rx_work_handler+0x128>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1537a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1537e:	2b00      	cmp	r3, #0
   15380:	d03b      	beq.n	153fa <rx_work_handler+0x112>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15382:	4924      	ldr	r1, [pc, #144]	; (15414 <rx_work_handler+0x12c>)
   15384:	4824      	ldr	r0, [pc, #144]	; (15418 <rx_work_handler+0x130>)
   15386:	f014 fb2a 	bl	299de <k_work_submit_to_queue>
#endif
		if (err < 0) {
   1538a:	1e02      	subs	r2, r0, #0
   1538c:	da35      	bge.n	153fa <rx_work_handler+0x112>
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   1538e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Could not submit rx_work: %d", err);
   15392:	4822      	ldr	r0, [pc, #136]	; (1541c <rx_work_handler+0x134>)
   15394:	2145      	movs	r1, #69	; 0x45
   15396:	f011 b8c0 	b.w	2651a <z_log_minimal_printk>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1539a:	8983      	ldrh	r3, [r0, #12]
   1539c:	2b01      	cmp	r3, #1
   1539e:	d80b      	bhi.n	153b8 <rx_work_handler+0xd0>
   153a0:	4917      	ldr	r1, [pc, #92]	; (15400 <rx_work_handler+0x118>)
   153a2:	4818      	ldr	r0, [pc, #96]	; (15404 <rx_work_handler+0x11c>)
   153a4:	f640 1259 	movw	r2, #2393	; 0x959
   153a8:	f011 f8a9 	bl	264fe <assert_print>
   153ac:	4040      	eors	r0, r0
   153ae:	f380 8811 	msr	BASEPRI, r0
   153b2:	f04f 0003 	mov.w	r0, #3
   153b6:	df02      	svc	2
   153b8:	2102      	movs	r1, #2
   153ba:	f104 0008 	add.w	r0, r4, #8
   153be:	f007 fb15 	bl	1c9ec <net_buf_simple_pull_mem>
   153c2:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   153c4:	7800      	ldrb	r0, [r0, #0]
   153c6:	f011 fff5 	bl	273b4 <bt_hci_evt_get_flags>
   153ca:	0783      	lsls	r3, r0, #30
   153cc:	d40b      	bmi.n	153e6 <rx_work_handler+0xfe>
   153ce:	490c      	ldr	r1, [pc, #48]	; (15400 <rx_work_handler+0x118>)
   153d0:	480c      	ldr	r0, [pc, #48]	; (15404 <rx_work_handler+0x11c>)
   153d2:	f640 125d 	movw	r2, #2397	; 0x95d
   153d6:	f011 f892 	bl	264fe <assert_print>
   153da:	4040      	eors	r0, r0
   153dc:	f380 8811 	msr	BASEPRI, r0
   153e0:	f04f 0003 	mov.w	r0, #3
   153e4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   153e6:	4a0e      	ldr	r2, [pc, #56]	; (15420 <rx_work_handler+0x138>)
   153e8:	7828      	ldrb	r0, [r5, #0]
   153ea:	2306      	movs	r3, #6
   153ec:	4621      	mov	r1, r4
   153ee:	f7ff ff4b 	bl	15288 <handle_event>
	net_buf_unref(buf);
   153f2:	e7a8      	b.n	15346 <rx_work_handler+0x5e>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   153f4:	480b      	ldr	r0, [pc, #44]	; (15424 <rx_work_handler+0x13c>)
   153f6:	2145      	movs	r1, #69	; 0x45
   153f8:	e7b0      	b.n	1535c <rx_work_handler+0x74>
}
   153fa:	bd70      	pop	{r4, r5, r6, pc}
   153fc:	2000048c 	.word	0x2000048c
   15400:	0002b882 	.word	0x0002b882
   15404:	0002aa75 	.word	0x0002aa75
   15408:	0002b8b6 	.word	0x0002b8b6
   1540c:	0002b8df 	.word	0x0002b8df
   15410:	20000350 	.word	0x20000350
   15414:	20000568 	.word	0x20000568
   15418:	20001788 	.word	0x20001788
   1541c:	0002b812 	.word	0x0002b812
   15420:	0002a3a4 	.word	0x0002a3a4
   15424:	0002b906 	.word	0x0002b906

00015428 <hci_le_meta_event>:
{
   15428:	b510      	push	{r4, lr}
   1542a:	2101      	movs	r1, #1
   1542c:	4604      	mov	r4, r0
   1542e:	3008      	adds	r0, #8
   15430:	f007 fadc 	bl	1c9ec <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15434:	4621      	mov	r1, r4
   15436:	4a03      	ldr	r2, [pc, #12]	; (15444 <hci_le_meta_event+0x1c>)
   15438:	7800      	ldrb	r0, [r0, #0]
}
   1543a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1543e:	230a      	movs	r3, #10
   15440:	f7ff bf22 	b.w	15288 <handle_event>
   15444:	0002a344 	.word	0x0002a344

00015448 <le_remote_feat_complete>:
{
   15448:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1544a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1544c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15450:	4630      	mov	r0, r6
   15452:	f002 f907 	bl	17664 <bt_conn_lookup_handle>
	if (!conn) {
   15456:	4604      	mov	r4, r0
   15458:	b930      	cbnz	r0, 15468 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1545a:	4632      	mov	r2, r6
   1545c:	480b      	ldr	r0, [pc, #44]	; (1548c <le_remote_feat_complete+0x44>)
}
   1545e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15462:	2145      	movs	r1, #69	; 0x45
   15464:	f011 b859 	b.w	2651a <z_log_minimal_printk>
	if (!evt->status) {
   15468:	782b      	ldrb	r3, [r5, #0]
   1546a:	b923      	cbnz	r3, 15476 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
   1546c:	2208      	movs	r2, #8
   1546e:	1ce9      	adds	r1, r5, #3
   15470:	30b4      	adds	r0, #180	; 0xb4
   15472:	f011 fed8 	bl	27226 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15476:	1d20      	adds	r0, r4, #4
   15478:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1547c:	f011 ffc8 	bl	27410 <atomic_or>
	bt_conn_unref(conn);
   15480:	4620      	mov	r0, r4
}
   15482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15486:	f002 b8bd 	b.w	17604 <bt_conn_unref>
   1548a:	bf00      	nop
   1548c:	0002b7c2 	.word	0x0002b7c2

00015490 <hci_cmd_done>:
{
   15490:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15494:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15496:	7990      	ldrb	r0, [r2, #6]
   15498:	4d39      	ldr	r5, [pc, #228]	; (15580 <hci_cmd_done+0xf0>)
{
   1549a:	460f      	mov	r7, r1
   1549c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1549e:	f006 ff1b 	bl	1c2d8 <net_buf_pool_get>
   154a2:	4285      	cmp	r5, r0
   154a4:	d00e      	beq.n	154c4 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   154a6:	79a4      	ldrb	r4, [r4, #6]
   154a8:	4620      	mov	r0, r4
   154aa:	f006 ff15 	bl	1c2d8 <net_buf_pool_get>
   154ae:	4623      	mov	r3, r4
   154b0:	e9cd 0500 	strd	r0, r5, [sp]
   154b4:	4632      	mov	r2, r6
   154b6:	4833      	ldr	r0, [pc, #204]	; (15584 <hci_cmd_done+0xf4>)
   154b8:	2157      	movs	r1, #87	; 0x57
   154ba:	f011 f82e 	bl	2651a <z_log_minimal_printk>
}
   154be:	b002      	add	sp, #8
   154c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   154c4:	4620      	mov	r0, r4
   154c6:	f006 ff0f 	bl	1c2e8 <net_buf_id>
   154ca:	4d2f      	ldr	r5, [pc, #188]	; (15588 <hci_cmd_done+0xf8>)
   154cc:	f04f 080c 	mov.w	r8, #12
   154d0:	fb08 5000 	mla	r0, r8, r0, r5
   154d4:	8843      	ldrh	r3, [r0, #2]
   154d6:	42b3      	cmp	r3, r6
   154d8:	d00d      	beq.n	154f6 <hci_cmd_done+0x66>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   154da:	4620      	mov	r0, r4
   154dc:	f006 ff04 	bl	1c2e8 <net_buf_id>
   154e0:	fb08 5500 	mla	r5, r8, r0, r5
   154e4:	4829      	ldr	r0, [pc, #164]	; (1558c <hci_cmd_done+0xfc>)
   154e6:	886b      	ldrh	r3, [r5, #2]
   154e8:	4632      	mov	r2, r6
   154ea:	2157      	movs	r1, #87	; 0x57
}
   154ec:	b002      	add	sp, #8
   154ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   154f2:	f011 b812 	b.w	2651a <z_log_minimal_printk>
	if (bt_dev.sent_cmd) {
   154f6:	4e26      	ldr	r6, [pc, #152]	; (15590 <hci_cmd_done+0x100>)
   154f8:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   154fc:	b120      	cbz	r0, 15508 <hci_cmd_done+0x78>
		net_buf_unref(bt_dev.sent_cmd);
   154fe:	f007 f97d 	bl	1c7fc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15502:	2300      	movs	r3, #0
   15504:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   15508:	4620      	mov	r0, r4
   1550a:	f006 feed 	bl	1c2e8 <net_buf_id>
   1550e:	260c      	movs	r6, #12
   15510:	fb06 5000 	mla	r0, r6, r0, r5
   15514:	6843      	ldr	r3, [r0, #4]
   15516:	b19b      	cbz	r3, 15540 <hci_cmd_done+0xb0>
   15518:	b997      	cbnz	r7, 15540 <hci_cmd_done+0xb0>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1551a:	4620      	mov	r0, r4
   1551c:	f006 fee4 	bl	1c2e8 <net_buf_id>
   15520:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   15524:	2101      	movs	r1, #1
   15526:	6842      	ldr	r2, [r0, #4]
   15528:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   1552c:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1552e:	f003 061f 	and.w	r6, r3, #31
   15532:	40b1      	lsls	r1, r6
	if (val) {
   15534:	095b      	lsrs	r3, r3, #5
   15536:	b1e2      	cbz	r2, 15572 <hci_cmd_done+0xe2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15538:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1553c:	f011 ff68 	bl	27410 <atomic_or>
	if (cmd(buf)->sync) {
   15540:	4620      	mov	r0, r4
   15542:	f006 fed1 	bl	1c2e8 <net_buf_id>
   15546:	260c      	movs	r6, #12
   15548:	fb06 5000 	mla	r0, r6, r0, r5
   1554c:	6883      	ldr	r3, [r0, #8]
   1554e:	2b00      	cmp	r3, #0
   15550:	d0b5      	beq.n	154be <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
   15552:	4620      	mov	r0, r4
   15554:	f006 fec8 	bl	1c2e8 <net_buf_id>
   15558:	4370      	muls	r0, r6
   1555a:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1555c:	4620      	mov	r0, r4
   1555e:	f006 fec3 	bl	1c2e8 <net_buf_id>
   15562:	fb06 5500 	mla	r5, r6, r0, r5
   15566:	68a8      	ldr	r0, [r5, #8]
}
   15568:	b002      	add	sp, #8
   1556a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   1556e:	f00b b9e1 	b.w	20934 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15572:	43c9      	mvns	r1, r1
   15574:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15578:	f011 ff59 	bl	2742e <atomic_and.isra.0>
   1557c:	e7e0      	b.n	15540 <hci_cmd_done+0xb0>
   1557e:	bf00      	nop
   15580:	2000098c 	.word	0x2000098c
   15584:	0002b91f 	.word	0x0002b91f
   15588:	200024d8 	.word	0x200024d8
   1558c:	0002b959 	.word	0x0002b959
   15590:	20000350 	.word	0x20000350

00015594 <hci_cmd_status>:
{
   15594:	b538      	push	{r3, r4, r5, lr}
   15596:	2104      	movs	r1, #4
   15598:	4604      	mov	r4, r0
   1559a:	3008      	adds	r0, #8
   1559c:	f007 fa26 	bl	1c9ec <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   155a0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   155a2:	7801      	ldrb	r1, [r0, #0]
   155a4:	8840      	ldrh	r0, [r0, #2]
   155a6:	4622      	mov	r2, r4
   155a8:	f7ff ff72 	bl	15490 <hci_cmd_done>
	if (ncmd) {
   155ac:	b125      	cbz	r5, 155b8 <hci_cmd_status+0x24>
   155ae:	4803      	ldr	r0, [pc, #12]	; (155bc <hci_cmd_status+0x28>)
}
   155b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   155b4:	f00b b9be 	b.w	20934 <z_impl_k_sem_give>
   155b8:	bd38      	pop	{r3, r4, r5, pc}
   155ba:	bf00      	nop
   155bc:	20000470 	.word	0x20000470

000155c0 <hci_cmd_complete>:
{
   155c0:	b538      	push	{r3, r4, r5, lr}
   155c2:	2103      	movs	r1, #3
   155c4:	4604      	mov	r4, r0
   155c6:	3008      	adds	r0, #8
   155c8:	f007 fa10 	bl	1c9ec <net_buf_simple_pull_mem>
	status = buf->data[0];
   155cc:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   155ce:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   155d0:	7819      	ldrb	r1, [r3, #0]
   155d2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   155d6:	4622      	mov	r2, r4
   155d8:	f7ff ff5a 	bl	15490 <hci_cmd_done>
	if (ncmd) {
   155dc:	b125      	cbz	r5, 155e8 <hci_cmd_complete+0x28>
   155de:	4803      	ldr	r0, [pc, #12]	; (155ec <hci_cmd_complete+0x2c>)
}
   155e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   155e4:	f00b b9a6 	b.w	20934 <z_impl_k_sem_give>
   155e8:	bd38      	pop	{r3, r4, r5, pc}
   155ea:	bf00      	nop
   155ec:	20000470 	.word	0x20000470

000155f0 <hci_num_completed_packets>:
{
   155f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   155f4:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   155f6:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
   155f8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 156c8 <hci_num_completed_packets+0xd8>
			tx->pending_no_cb = 0U;
   155fc:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   155fe:	783b      	ldrb	r3, [r7, #0]
   15600:	429d      	cmp	r5, r3
   15602:	db01      	blt.n	15608 <hci_num_completed_packets+0x18>
}
   15604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   15608:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   1560c:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   15610:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   15614:	4650      	mov	r0, sl
   15616:	f002 f825 	bl	17664 <bt_conn_lookup_handle>
		if (!conn) {
   1561a:	4604      	mov	r4, r0
   1561c:	b1d0      	cbz	r0, 15654 <hci_num_completed_packets+0x64>
			k_work_submit(&conn->tx_complete_work);
   1561e:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   15622:	b37e      	cbz	r6, 15684 <hci_num_completed_packets+0x94>
	__asm__ volatile(
   15624:	f04f 0340 	mov.w	r3, #64	; 0x40
   15628:	f3ef 8211 	mrs	r2, BASEPRI
   1562c:	f383 8812 	msr	BASEPRI_MAX, r3
   15630:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   15634:	69e3      	ldr	r3, [r4, #28]
   15636:	b1a3      	cbz	r3, 15662 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
   15638:	3b01      	subs	r3, #1
   1563a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1563c:	f382 8811 	msr	BASEPRI, r2
   15640:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   15644:	4620      	mov	r0, r4
   15646:	f001 fe69 	bl	1731c <bt_conn_get_pkts>
   1564a:	3e01      	subs	r6, #1
   1564c:	f00b f972 	bl	20934 <z_impl_k_sem_give>
   15650:	b2b6      	uxth	r6, r6
   15652:	e7e6      	b.n	15622 <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
   15654:	481d      	ldr	r0, [pc, #116]	; (156cc <hci_num_completed_packets+0xdc>)
   15656:	4652      	mov	r2, sl
   15658:	2145      	movs	r1, #69	; 0x45
   1565a:	f010 ff5e 	bl	2651a <z_log_minimal_printk>
	for (i = 0; i < evt->num_handles; i++) {
   1565e:	3501      	adds	r5, #1
   15660:	e7cd      	b.n	155fe <hci_num_completed_packets+0xe>
   15662:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   15664:	b12b      	cbz	r3, 15672 <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15666:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   15668:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1566a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1566c:	428b      	cmp	r3, r1
	list->tail = node;
   1566e:	bf08      	it	eq
   15670:	61a0      	streq	r0, [r4, #24]
   15672:	f382 8811 	msr	BASEPRI, r2
   15676:	f3bf 8f6f 	isb	sy
			if (!node) {
   1567a:	b93b      	cbnz	r3, 1568c <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
   1567c:	2145      	movs	r1, #69	; 0x45
   1567e:	4648      	mov	r0, r9
   15680:	f010 ff4b 	bl	2651a <z_log_minimal_printk>
		bt_conn_unref(conn);
   15684:	4620      	mov	r0, r4
   15686:	f001 ffbd 	bl	17604 <bt_conn_unref>
   1568a:	e7e8      	b.n	1565e <hci_num_completed_packets+0x6e>
	__asm__ volatile(
   1568c:	f04f 0240 	mov.w	r2, #64	; 0x40
   15690:	f3ef 8111 	mrs	r1, BASEPRI
   15694:	f382 8812 	msr	BASEPRI_MAX, r2
   15698:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1569c:	68da      	ldr	r2, [r3, #12]
   1569e:	61e2      	str	r2, [r4, #28]
	return list->tail;
   156a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   156a2:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   156a6:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   156aa:	b94a      	cbnz	r2, 156c0 <hci_num_completed_packets+0xd0>
	list->head = node;
   156ac:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   156b0:	f381 8811 	msr	BASEPRI, r1
   156b4:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   156b8:	4650      	mov	r0, sl
   156ba:	f00b fc7d 	bl	20fb8 <k_work_submit>
   156be:	e7c1      	b.n	15644 <hci_num_completed_packets+0x54>
	parent->next = child;
   156c0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   156c2:	6263      	str	r3, [r4, #36]	; 0x24
}
   156c4:	e7f4      	b.n	156b0 <hci_num_completed_packets+0xc0>
   156c6:	bf00      	nop
   156c8:	0002b9b2 	.word	0x0002b9b2
   156cc:	0002b991 	.word	0x0002b991

000156d0 <bt_hci_cmd_state_set_init>:
{
   156d0:	b510      	push	{r4, lr}
	state->bit = bit;
   156d2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   156d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   156da:	720b      	strb	r3, [r1, #8]
{
   156dc:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   156de:	f006 fe03 	bl	1c2e8 <net_buf_id>
   156e2:	4b03      	ldr	r3, [pc, #12]	; (156f0 <bt_hci_cmd_state_set_init+0x20>)
   156e4:	220c      	movs	r2, #12
   156e6:	fb02 3300 	mla	r3, r2, r0, r3
   156ea:	605c      	str	r4, [r3, #4]
}
   156ec:	bd10      	pop	{r4, pc}
   156ee:	bf00      	nop
   156f0:	200024d8 	.word	0x200024d8

000156f4 <bt_hci_cmd_create>:
{
   156f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   156f8:	f04f 32ff 	mov.w	r2, #4294967295
   156fc:	4606      	mov	r6, r0
   156fe:	f04f 33ff 	mov.w	r3, #4294967295
   15702:	481c      	ldr	r0, [pc, #112]	; (15774 <bt_hci_cmd_create+0x80>)
   15704:	460f      	mov	r7, r1
   15706:	f013 fde6 	bl	292d6 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   1570a:	4604      	mov	r4, r0
   1570c:	b940      	cbnz	r0, 15720 <bt_hci_cmd_create+0x2c>
   1570e:	491a      	ldr	r1, [pc, #104]	; (15778 <bt_hci_cmd_create+0x84>)
   15710:	481a      	ldr	r0, [pc, #104]	; (1577c <bt_hci_cmd_create+0x88>)
   15712:	22ff      	movs	r2, #255	; 0xff
   15714:	f010 fef3 	bl	264fe <assert_print>
   15718:	4817      	ldr	r0, [pc, #92]	; (15778 <bt_hci_cmd_create+0x84>)
   1571a:	21ff      	movs	r1, #255	; 0xff
   1571c:	f010 fee8 	bl	264f0 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   15720:	f104 0a08 	add.w	sl, r4, #8
   15724:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15726:	f04f 0800 	mov.w	r8, #0
   1572a:	4650      	mov	r0, sl
   1572c:	f006 ff46 	bl	1c5bc <net_buf_simple_reserve>
   15730:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   15734:	4620      	mov	r0, r4
   15736:	f006 fdd7 	bl	1c2e8 <net_buf_id>
   1573a:	4d11      	ldr	r5, [pc, #68]	; (15780 <bt_hci_cmd_create+0x8c>)
   1573c:	f04f 090c 	mov.w	r9, #12
   15740:	fb09 5000 	mla	r0, r9, r0, r5
   15744:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   15746:	4620      	mov	r0, r4
   15748:	f006 fdce 	bl	1c2e8 <net_buf_id>
   1574c:	fb09 5000 	mla	r0, r9, r0, r5
   15750:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   15754:	4620      	mov	r0, r4
   15756:	f006 fdc7 	bl	1c2e8 <net_buf_id>
   1575a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   1575e:	2103      	movs	r1, #3
   15760:	f8c5 8004 	str.w	r8, [r5, #4]
   15764:	4650      	mov	r0, sl
   15766:	f007 f95f 	bl	1ca28 <net_buf_simple_add>
	hdr->param_len = param_len;
   1576a:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   1576c:	8006      	strh	r6, [r0, #0]
}
   1576e:	4620      	mov	r0, r4
   15770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15774:	2000098c 	.word	0x2000098c
   15778:	0002b882 	.word	0x0002b882
   1577c:	0002aa75 	.word	0x0002aa75
   15780:	200024d8 	.word	0x200024d8

00015784 <bt_hci_cmd_send_sync>:
{
   15784:	b5f0      	push	{r4, r5, r6, r7, lr}
   15786:	4607      	mov	r7, r0
   15788:	b087      	sub	sp, #28
   1578a:	4615      	mov	r5, r2
	if (!buf) {
   1578c:	460c      	mov	r4, r1
   1578e:	b921      	cbnz	r1, 1579a <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
   15790:	f7ff ffb0 	bl	156f4 <bt_hci_cmd_create>
		if (!buf) {
   15794:	4604      	mov	r4, r0
   15796:	2800      	cmp	r0, #0
   15798:	d048      	beq.n	1582c <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1579a:	2201      	movs	r2, #1
   1579c:	2100      	movs	r1, #0
   1579e:	4668      	mov	r0, sp
   157a0:	f014 f8bc 	bl	2991c <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   157a4:	4620      	mov	r0, r4
   157a6:	f006 fd9f 	bl	1c2e8 <net_buf_id>
   157aa:	4e22      	ldr	r6, [pc, #136]	; (15834 <bt_hci_cmd_send_sync+0xb0>)
   157ac:	230c      	movs	r3, #12
   157ae:	fb03 6000 	mla	r0, r3, r0, r6
   157b2:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   157b6:	4620      	mov	r0, r4
   157b8:	f007 f864 	bl	1c884 <net_buf_ref>
   157bc:	4601      	mov	r1, r0
   157be:	481e      	ldr	r0, [pc, #120]	; (15838 <bt_hci_cmd_send_sync+0xb4>)
   157c0:	f006 ffee 	bl	1c7a0 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   157c4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   157c8:	2300      	movs	r3, #0
   157ca:	4668      	mov	r0, sp
   157cc:	f00b f8ec 	bl	209a8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   157d0:	b158      	cbz	r0, 157ea <bt_hci_cmd_send_sync+0x66>
   157d2:	491a      	ldr	r1, [pc, #104]	; (1583c <bt_hci_cmd_send_sync+0xb8>)
   157d4:	481a      	ldr	r0, [pc, #104]	; (15840 <bt_hci_cmd_send_sync+0xbc>)
   157d6:	f240 1247 	movw	r2, #327	; 0x147
   157da:	f010 fe90 	bl	264fe <assert_print>
   157de:	4040      	eors	r0, r0
   157e0:	f380 8811 	msr	BASEPRI, r0
   157e4:	f04f 0003 	mov.w	r0, #3
   157e8:	df02      	svc	2
	status = cmd(buf)->status;
   157ea:	4620      	mov	r0, r4
   157ec:	f006 fd7c 	bl	1c2e8 <net_buf_id>
   157f0:	230c      	movs	r3, #12
   157f2:	4358      	muls	r0, r3
   157f4:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   157f6:	b186      	cbz	r6, 1581a <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   157f8:	4812      	ldr	r0, [pc, #72]	; (15844 <bt_hci_cmd_send_sync+0xc0>)
   157fa:	4633      	mov	r3, r6
   157fc:	463a      	mov	r2, r7
   157fe:	2157      	movs	r1, #87	; 0x57
   15800:	f010 fe8b 	bl	2651a <z_log_minimal_printk>
		net_buf_unref(buf);
   15804:	4620      	mov	r0, r4
   15806:	f006 fff9 	bl	1c7fc <net_buf_unref>
			return -EIO;
   1580a:	2e09      	cmp	r6, #9
   1580c:	bf0c      	ite	eq
   1580e:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   15812:	f06f 0004 	mvnne.w	r0, #4
}
   15816:	b007      	add	sp, #28
   15818:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   1581a:	b115      	cbz	r5, 15822 <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
   1581c:	602c      	str	r4, [r5, #0]
	return 0;
   1581e:	4630      	mov	r0, r6
   15820:	e7f9      	b.n	15816 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
   15822:	4620      	mov	r0, r4
   15824:	f006 ffea 	bl	1c7fc <net_buf_unref>
	return 0;
   15828:	4628      	mov	r0, r5
   1582a:	e7f4      	b.n	15816 <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
   1582c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15830:	e7f1      	b.n	15816 <bt_hci_cmd_send_sync+0x92>
   15832:	bf00      	nop
   15834:	200024d8 	.word	0x200024d8
   15838:	20000494 	.word	0x20000494
   1583c:	0002b882 	.word	0x0002b882
   15840:	0002aa75 	.word	0x0002aa75
   15844:	0002b9ce 	.word	0x0002b9ce

00015848 <hci_le_read_max_data_len>:
{
   15848:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1584a:	4606      	mov	r6, r0
   1584c:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1584e:	aa01      	add	r2, sp, #4
   15850:	2100      	movs	r1, #0
   15852:	f242 002f 	movw	r0, #8239	; 0x202f
   15856:	f7ff ff95 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   1585a:	4604      	mov	r4, r0
   1585c:	b130      	cbz	r0, 1586c <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
   1585e:	4809      	ldr	r0, [pc, #36]	; (15884 <hci_le_read_max_data_len+0x3c>)
   15860:	2145      	movs	r1, #69	; 0x45
   15862:	f010 fe5a 	bl	2651a <z_log_minimal_printk>
}
   15866:	4620      	mov	r0, r4
   15868:	b002      	add	sp, #8
   1586a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1586c:	9801      	ldr	r0, [sp, #4]
   1586e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   15870:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15874:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   15876:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1587a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1587c:	f006 ffbe 	bl	1c7fc <net_buf_unref>
	return 0;
   15880:	e7f1      	b.n	15866 <hci_le_read_max_data_len+0x1e>
   15882:	bf00      	nop
   15884:	0002b9ef 	.word	0x0002b9ef

00015888 <bt_hci_le_rand>:
{
   15888:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1588a:	4b14      	ldr	r3, [pc, #80]	; (158dc <bt_hci_le_rand+0x54>)
   1588c:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   15890:	2b00      	cmp	r3, #0
{
   15892:	4605      	mov	r5, r0
   15894:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   15896:	da1d      	bge.n	158d4 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   15898:	b914      	cbnz	r4, 158a0 <bt_hci_le_rand+0x18>
	return 0;
   1589a:	4620      	mov	r0, r4
}
   1589c:	b002      	add	sp, #8
   1589e:	bd70      	pop	{r4, r5, r6, pc}
		count = MIN(len, sizeof(rp->rand));
   158a0:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   158a2:	aa01      	add	r2, sp, #4
   158a4:	f04f 0100 	mov.w	r1, #0
   158a8:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   158ac:	4626      	mov	r6, r4
   158ae:	bf28      	it	cs
   158b0:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   158b2:	f7ff ff67 	bl	15784 <bt_hci_cmd_send_sync>
		if (err) {
   158b6:	2800      	cmp	r0, #0
   158b8:	d1f0      	bne.n	1589c <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   158ba:	9b01      	ldr	r3, [sp, #4]
		memcpy(buffer, rp->rand, count);
   158bc:	6899      	ldr	r1, [r3, #8]
   158be:	4632      	mov	r2, r6
   158c0:	3101      	adds	r1, #1
   158c2:	4628      	mov	r0, r5
   158c4:	f011 fcaf 	bl	27226 <memcpy>
		net_buf_unref(rsp);
   158c8:	9801      	ldr	r0, [sp, #4]
   158ca:	f006 ff97 	bl	1c7fc <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   158ce:	4435      	add	r5, r6
		len -= count;
   158d0:	1ba4      	subs	r4, r4, r6
   158d2:	e7e1      	b.n	15898 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   158d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   158d8:	e7e0      	b.n	1589c <bt_hci_le_rand+0x14>
   158da:	bf00      	nop
   158dc:	20000350 	.word	0x20000350

000158e0 <bt_hci_le_enh_conn_complete>:
{
   158e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   158e4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   158e8:	4a96      	ldr	r2, [pc, #600]	; (15b44 <bt_hci_le_enh_conn_complete+0x264>)
	handle |= ~BT_ACL_HANDLE_MASK;
   158ea:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   158ee:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   158f0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   158f4:	b29b      	uxth	r3, r3
   158f6:	4299      	cmp	r1, r3
{
   158f8:	4605      	mov	r5, r0
   158fa:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   158fe:	bf08      	it	eq
   15900:	8016      	strheq	r6, [r2, #0]
{
   15902:	b088      	sub	sp, #32
			return true;
   15904:	bf08      	it	eq
   15906:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   15908:	f000 fd0e 	bl	16328 <bt_id_pending_keys_update>
	if (evt->status) {
   1590c:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1590e:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   15912:	b334      	cbz	r4, 15962 <bt_hci_le_enh_conn_complete+0x82>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15914:	2c3c      	cmp	r4, #60	; 0x3c
   15916:	d11c      	bne.n	15952 <bt_hci_le_enh_conn_complete+0x72>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15918:	f001 f8be 	bl	16a98 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1591c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15920:	3010      	adds	r0, #16
   15922:	f011 fd84 	bl	2742e <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   15926:	2000      	movs	r0, #0
   15928:	f7ff fc90 	bl	1524c <find_pending_connect.part.0>
		if (!conn) {
   1592c:	4605      	mov	r5, r0
   1592e:	b930      	cbnz	r0, 1593e <bt_hci_le_enh_conn_complete+0x5e>
			BT_ERR("No pending peripheral connection");
   15930:	4885      	ldr	r0, [pc, #532]	; (15b48 <bt_hci_le_enh_conn_complete+0x268>)
   15932:	2145      	movs	r1, #69	; 0x45
}
   15934:	b008      	add	sp, #32
   15936:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			BT_ERR("No pending peripheral connection");
   1593a:	f010 bdee 	b.w	2651a <z_log_minimal_printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   1593e:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15940:	2100      	movs	r1, #0
   15942:	f001 fe97 	bl	17674 <bt_conn_set_state>
		bt_conn_unref(conn);
   15946:	4628      	mov	r0, r5
}
   15948:	b008      	add	sp, #32
   1594a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   1594e:	f001 be59 	b.w	17604 <bt_conn_unref>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   15952:	487e      	ldr	r0, [pc, #504]	; (15b4c <bt_hci_le_enh_conn_complete+0x26c>)
   15954:	4622      	mov	r2, r4
   15956:	2157      	movs	r1, #87	; 0x57
}
   15958:	b008      	add	sp, #32
   1595a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1595e:	f010 bddc 	b.w	2651a <z_log_minimal_printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   15962:	792b      	ldrb	r3, [r5, #4]
   15964:	3b02      	subs	r3, #2
   15966:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   15968:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1596c:	d837      	bhi.n	159de <bt_hci_le_enh_conn_complete+0xfe>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   1596e:	4649      	mov	r1, r9
   15970:	a806      	add	r0, sp, #24
   15972:	f011 fd4a 	bl	2740a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15976:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
   1597a:	2206      	movs	r2, #6
   1597c:	3b02      	subs	r3, #2
   1597e:	f105 0111 	add.w	r1, r5, #17
   15982:	f10d 0011 	add.w	r0, sp, #17
   15986:	f88d 3018 	strb.w	r3, [sp, #24]
   1598a:	f011 fc4c 	bl	27226 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1598e:	2301      	movs	r3, #1
   15990:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   15994:	78eb      	ldrb	r3, [r5, #3]
   15996:	2b01      	cmp	r3, #1
   15998:	d112      	bne.n	159c0 <bt_hci_le_enh_conn_complete+0xe0>
   1599a:	a806      	add	r0, sp, #24
   1599c:	f7ff fc56 	bl	1524c <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   159a0:	78eb      	ldrb	r3, [r5, #3]
   159a2:	2b01      	cmp	r3, #1
   159a4:	4604      	mov	r4, r0
   159a6:	d10a      	bne.n	159be <bt_hci_le_enh_conn_complete+0xde>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   159a8:	f001 f876 	bl	16a98 <bt_le_adv_lookup_legacy>
   159ac:	f06f 0140 	mvn.w	r1, #64	; 0x40
   159b0:	4682      	mov	sl, r0
   159b2:	3010      	adds	r0, #16
   159b4:	f011 fd3b 	bl	2742e <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   159b8:	4650      	mov	r0, sl
   159ba:	f011 ffbe 	bl	2793a <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   159be:	bb0c      	cbnz	r4, 15a04 <bt_hci_le_enh_conn_complete+0x124>
		BT_ERR("No pending conn for peer %s",
   159c0:	4648      	mov	r0, r9
   159c2:	f7ff f95d 	bl	14c80 <bt_addr_le_str_real>
   159c6:	2145      	movs	r1, #69	; 0x45
   159c8:	4602      	mov	r2, r0
   159ca:	4861      	ldr	r0, [pc, #388]	; (15b50 <bt_hci_le_enh_conn_complete+0x270>)
   159cc:	f010 fda5 	bl	2651a <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   159d0:	211f      	movs	r1, #31
   159d2:	4640      	mov	r0, r8
   159d4:	f011 fd47 	bl	27466 <bt_hci_disconnect>
}
   159d8:	b008      	add	sp, #32
   159da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   159de:	78eb      	ldrb	r3, [r5, #3]
   159e0:	2b01      	cmp	r3, #1
   159e2:	bf04      	itt	eq
   159e4:	4b5b      	ldreq	r3, [pc, #364]	; (15b54 <bt_hci_le_enh_conn_complete+0x274>)
   159e6:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   159ea:	4649      	mov	r1, r9
   159ec:	4620      	mov	r0, r4
   159ee:	f011 fe8d 	bl	2770c <bt_lookup_id_addr>
   159f2:	4601      	mov	r1, r0
   159f4:	a806      	add	r0, sp, #24
   159f6:	f011 fd08 	bl	2740a <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   159fa:	4649      	mov	r1, r9
   159fc:	a804      	add	r0, sp, #16
   159fe:	f011 fd04 	bl	2740a <bt_addr_le_copy>
   15a02:	e7c7      	b.n	15994 <bt_hci_le_enh_conn_complete+0xb4>
	conn->handle = handle;
   15a04:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15a06:	a906      	add	r1, sp, #24
	conn->handle = handle;
   15a08:	f820 7b90 	strh.w	r7, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15a0c:	f011 fcfd 	bl	2740a <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   15a10:	7e2a      	ldrb	r2, [r5, #24]
   15a12:	7deb      	ldrb	r3, [r5, #23]
   15a14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15a18:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   15a1c:	7eaa      	ldrb	r2, [r5, #26]
   15a1e:	7e6b      	ldrb	r3, [r5, #25]
   15a20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15a24:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15a28:	7f2a      	ldrb	r2, [r5, #28]
   15a2a:	7eeb      	ldrb	r3, [r5, #27]
   15a2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15a30:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   15a34:	78eb      	ldrb	r3, [r5, #3]
   15a36:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   15a38:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15a3a:	2b01      	cmp	r3, #1
	conn->err = 0U;
   15a3c:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15a3e:	d115      	bne.n	15a6c <bt_hci_le_enh_conn_complete+0x18c>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   15a40:	a904      	add	r1, sp, #16
   15a42:	f104 0097 	add.w	r0, r4, #151	; 0x97
   15a46:	f011 fce0 	bl	2740a <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15a4a:	f001 f825 	bl	16a98 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   15a4e:	7a21      	ldrb	r1, [r4, #8]
   15a50:	4d40      	ldr	r5, [pc, #256]	; (15b54 <bt_hci_le_enh_conn_complete+0x274>)
   15a52:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   15a56:	4429      	add	r1, r5
   15a58:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   15a5c:	f011 fcd5 	bl	2740a <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   15a60:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   15a64:	065d      	lsls	r5, r3, #25
   15a66:	d501      	bpl.n	15a6c <bt_hci_le_enh_conn_complete+0x18c>
			bt_le_adv_resume();
   15a68:	f001 f9d4 	bl	16e14 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   15a6c:	2107      	movs	r1, #7
   15a6e:	4620      	mov	r0, r4
   15a70:	f001 fe00 	bl	17674 <bt_conn_set_state>
	if (is_disconnected) {
   15a74:	b11e      	cbz	r6, 15a7e <bt_hci_le_enh_conn_complete+0x19e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15a76:	2101      	movs	r1, #1
   15a78:	4620      	mov	r0, r4
   15a7a:	f001 fdfb 	bl	17674 <bt_conn_set_state>
	bt_conn_connected(conn);
   15a7e:	4620      	mov	r0, r4
   15a80:	f011 ffd0 	bl	27a24 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   15a84:	7b63      	ldrb	r3, [r4, #13]
   15a86:	2b07      	cmp	r3, #7
   15a88:	d155      	bne.n	15b36 <bt_hci_le_enh_conn_complete+0x256>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15a8a:	f3bf 8f5b 	dmb	ish
   15a8e:	6863      	ldr	r3, [r4, #4]
   15a90:	4e30      	ldr	r6, [pc, #192]	; (15b54 <bt_hci_le_enh_conn_complete+0x274>)
   15a92:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   15a96:	f413 6f00 	tst.w	r3, #2048	; 0x800
   15a9a:	d11f      	bne.n	15adc <bt_hci_le_enh_conn_complete+0x1fc>
   15a9c:	78e3      	ldrb	r3, [r4, #3]
   15a9e:	b11b      	cbz	r3, 15aa8 <bt_hci_le_enh_conn_complete+0x1c8>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   15aa0:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   15aa4:	0718      	lsls	r0, r3, #28
   15aa6:	d519      	bpl.n	15adc <bt_hci_le_enh_conn_complete+0x1fc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   15aa8:	2102      	movs	r1, #2
   15aaa:	f242 0016 	movw	r0, #8214	; 0x2016
   15aae:	f7ff fe21 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   15ab2:	4605      	mov	r5, r0
   15ab4:	2800      	cmp	r0, #0
   15ab6:	d042      	beq.n	15b3e <bt_hci_le_enh_conn_complete+0x25e>
   15ab8:	2102      	movs	r1, #2
   15aba:	3008      	adds	r0, #8
   15abc:	f006 ffb4 	bl	1ca28 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   15ac0:	8823      	ldrh	r3, [r4, #0]
   15ac2:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   15ac4:	2200      	movs	r2, #0
   15ac6:	4629      	mov	r1, r5
   15ac8:	f242 0016 	movw	r0, #8214	; 0x2016
   15acc:	f7ff fe5a 	bl	15784 <bt_hci_cmd_send_sync>
		if (err) {
   15ad0:	4602      	mov	r2, r0
   15ad2:	b118      	cbz	r0, 15adc <bt_hci_le_enh_conn_complete+0x1fc>
			BT_ERR("Failed read remote features (%d)", err);
   15ad4:	4820      	ldr	r0, [pc, #128]	; (15b58 <bt_hci_le_enh_conn_complete+0x278>)
   15ad6:	2145      	movs	r1, #69	; 0x45
   15ad8:	f010 fd1f 	bl	2651a <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   15adc:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   15ae0:	07d9      	lsls	r1, r3, #31
   15ae2:	d50c      	bpl.n	15afe <bt_hci_le_enh_conn_complete+0x21e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   15ae4:	2100      	movs	r1, #0
   15ae6:	2302      	movs	r3, #2
   15ae8:	461a      	mov	r2, r3
   15aea:	9100      	str	r1, [sp, #0]
   15aec:	4620      	mov	r0, r4
   15aee:	f011 fcf3 	bl	274d8 <bt_le_set_phy>
		if (err) {
   15af2:	4602      	mov	r2, r0
   15af4:	b118      	cbz	r0, 15afe <bt_hci_le_enh_conn_complete+0x21e>
			BT_ERR("Failed LE Set PHY (%d)", err);
   15af6:	4819      	ldr	r0, [pc, #100]	; (15b5c <bt_hci_le_enh_conn_complete+0x27c>)
   15af8:	2145      	movs	r1, #69	; 0x45
   15afa:	f010 fd0e 	bl	2651a <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   15afe:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   15b02:	069a      	lsls	r2, r3, #26
   15b04:	d517      	bpl.n	15b36 <bt_hci_le_enh_conn_complete+0x256>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   15b06:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   15b0a:	689b      	ldr	r3, [r3, #8]
   15b0c:	079b      	lsls	r3, r3, #30
   15b0e:	d512      	bpl.n	15b36 <bt_hci_le_enh_conn_complete+0x256>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15b10:	f10d 010e 	add.w	r1, sp, #14
   15b14:	a803      	add	r0, sp, #12
   15b16:	f7ff fe97 	bl	15848 <hci_le_read_max_data_len>
			if (!err) {
   15b1a:	b960      	cbnz	r0, 15b36 <bt_hci_le_enh_conn_complete+0x256>
				err = bt_le_set_data_len(conn,
   15b1c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   15b20:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   15b24:	4620      	mov	r0, r4
   15b26:	f011 fcb9 	bl	2749c <bt_le_set_data_len>
				if (err) {
   15b2a:	4602      	mov	r2, r0
   15b2c:	b118      	cbz	r0, 15b36 <bt_hci_le_enh_conn_complete+0x256>
					BT_ERR("Failed to set data len (%d)", err);
   15b2e:	480c      	ldr	r0, [pc, #48]	; (15b60 <bt_hci_le_enh_conn_complete+0x280>)
   15b30:	2145      	movs	r1, #69	; 0x45
   15b32:	f010 fcf2 	bl	2651a <z_log_minimal_printk>
	bt_conn_unref(conn);
   15b36:	4620      	mov	r0, r4
   15b38:	f001 fd64 	bl	17604 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15b3c:	e74c      	b.n	159d8 <bt_hci_le_enh_conn_complete+0xf8>
		return -ENOBUFS;
   15b3e:	f06f 0268 	mvn.w	r2, #104	; 0x68
   15b42:	e7c7      	b.n	15ad4 <bt_hci_le_enh_conn_complete+0x1f4>
   15b44:	200033b4 	.word	0x200033b4
   15b48:	0002ba14 	.word	0x0002ba14
   15b4c:	0002ba3a 	.word	0x0002ba3a
   15b50:	0002ba58 	.word	0x0002ba58
   15b54:	20000350 	.word	0x20000350
   15b58:	0002ba79 	.word	0x0002ba79
   15b5c:	0002ba9f 	.word	0x0002ba9f
   15b60:	0002babb 	.word	0x0002babb

00015b64 <bt_security_err_get>:
	switch (hci_err) {
   15b64:	2829      	cmp	r0, #41	; 0x29
   15b66:	bf9a      	itte	ls
   15b68:	4b01      	ldrls	r3, [pc, #4]	; (15b70 <bt_security_err_get+0xc>)
   15b6a:	5c18      	ldrbls	r0, [r3, r0]
{
   15b6c:	2009      	movhi	r0, #9
}
   15b6e:	4770      	bx	lr
   15b70:	0002bd27 	.word	0x0002bd27

00015b74 <hci_encrypt_key_refresh_complete>:
{
   15b74:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   15b76:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15b78:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   15b7c:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   15b7e:	4630      	mov	r0, r6
   15b80:	f001 fd70 	bl	17664 <bt_conn_lookup_handle>
	if (!conn) {
   15b84:	4604      	mov	r4, r0
   15b86:	b930      	cbnz	r0, 15b96 <hci_encrypt_key_refresh_complete+0x22>
		BT_ERR("Unable to look up conn with handle %u", handle);
   15b88:	4632      	mov	r2, r6
   15b8a:	4819      	ldr	r0, [pc, #100]	; (15bf0 <hci_encrypt_key_refresh_complete+0x7c>)
}
   15b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   15b90:	2145      	movs	r1, #69	; 0x45
   15b92:	f010 bcc2 	b.w	2651a <z_log_minimal_printk>
	if (status) {
   15b96:	b165      	cbz	r5, 15bb2 <hci_encrypt_key_refresh_complete+0x3e>
		bt_conn_security_changed(conn, status,
   15b98:	4628      	mov	r0, r5
   15b9a:	f7ff ffe3 	bl	15b64 <bt_security_err_get>
   15b9e:	4629      	mov	r1, r5
   15ba0:	4602      	mov	r2, r0
   15ba2:	4620      	mov	r0, r4
   15ba4:	f001 ff72 	bl	17a8c <bt_conn_security_changed>
	bt_conn_unref(conn);
   15ba8:	4620      	mov	r0, r4
}
   15baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15bae:	f001 bd29 	b.w	17604 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   15bb2:	7883      	ldrb	r3, [r0, #2]
   15bb4:	2b01      	cmp	r3, #1
   15bb6:	d107      	bne.n	15bc8 <hci_encrypt_key_refresh_complete+0x54>
		bt_smp_update_keys(conn);
   15bb8:	f006 f990 	bl	1bedc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   15bbc:	4620      	mov	r0, r4
   15bbe:	f011 fc0b 	bl	273d8 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   15bc2:	2800      	cmp	r0, #0
   15bc4:	bf08      	it	eq
   15bc6:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   15bc8:	4628      	mov	r0, r5
   15bca:	f7ff ffcb 	bl	15b64 <bt_security_err_get>
   15bce:	4629      	mov	r1, r5
   15bd0:	4602      	mov	r2, r0
   15bd2:	4620      	mov	r0, r4
   15bd4:	f001 ff5a 	bl	17a8c <bt_conn_security_changed>
	if (status) {
   15bd8:	2d00      	cmp	r5, #0
   15bda:	d0e5      	beq.n	15ba8 <hci_encrypt_key_refresh_complete+0x34>
		BT_ERR("Failed to set required security level");
   15bdc:	4805      	ldr	r0, [pc, #20]	; (15bf4 <hci_encrypt_key_refresh_complete+0x80>)
   15bde:	2145      	movs	r1, #69	; 0x45
   15be0:	f010 fc9b 	bl	2651a <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   15be4:	4629      	mov	r1, r5
   15be6:	4620      	mov	r0, r4
   15be8:	f011 ff25 	bl	27a36 <bt_conn_disconnect>
   15bec:	e7dc      	b.n	15ba8 <hci_encrypt_key_refresh_complete+0x34>
   15bee:	bf00      	nop
   15bf0:	0002b797 	.word	0x0002b797
   15bf4:	0002badc 	.word	0x0002badc

00015bf8 <hci_encrypt_change>:
{
   15bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   15bfa:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15bfc:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   15c00:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   15c02:	4638      	mov	r0, r7
   15c04:	f001 fd2e 	bl	17664 <bt_conn_lookup_handle>
	if (!conn) {
   15c08:	4604      	mov	r4, r0
   15c0a:	b930      	cbnz	r0, 15c1a <hci_encrypt_change+0x22>
		BT_ERR("Unable to look up conn with handle %u", handle);
   15c0c:	463a      	mov	r2, r7
   15c0e:	481a      	ldr	r0, [pc, #104]	; (15c78 <hci_encrypt_change+0x80>)
}
   15c10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   15c14:	2145      	movs	r1, #69	; 0x45
   15c16:	f010 bc80 	b.w	2651a <z_log_minimal_printk>
	if (status) {
   15c1a:	b165      	cbz	r5, 15c36 <hci_encrypt_change+0x3e>
		bt_conn_security_changed(conn, status,
   15c1c:	4628      	mov	r0, r5
   15c1e:	f7ff ffa1 	bl	15b64 <bt_security_err_get>
   15c22:	4629      	mov	r1, r5
   15c24:	4602      	mov	r2, r0
   15c26:	4620      	mov	r0, r4
   15c28:	f001 ff30 	bl	17a8c <bt_conn_security_changed>
	bt_conn_unref(conn);
   15c2c:	4620      	mov	r0, r4
}
   15c2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   15c32:	f001 bce7 	b.w	17604 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   15c36:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   15c38:	78f3      	ldrb	r3, [r6, #3]
   15c3a:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   15c3c:	2a01      	cmp	r2, #1
   15c3e:	d108      	bne.n	15c52 <hci_encrypt_change+0x5a>
		if (conn->encrypt) {
   15c40:	b10b      	cbz	r3, 15c46 <hci_encrypt_change+0x4e>
			bt_smp_update_keys(conn);
   15c42:	f006 f94b 	bl	1bedc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   15c46:	4620      	mov	r0, r4
   15c48:	f011 fbc6 	bl	273d8 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   15c4c:	2800      	cmp	r0, #0
   15c4e:	bf08      	it	eq
   15c50:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   15c52:	4628      	mov	r0, r5
   15c54:	f7ff ff86 	bl	15b64 <bt_security_err_get>
   15c58:	4629      	mov	r1, r5
   15c5a:	4602      	mov	r2, r0
   15c5c:	4620      	mov	r0, r4
   15c5e:	f001 ff15 	bl	17a8c <bt_conn_security_changed>
	if (status) {
   15c62:	2d00      	cmp	r5, #0
   15c64:	d0e2      	beq.n	15c2c <hci_encrypt_change+0x34>
		BT_ERR("Failed to set required security level");
   15c66:	4805      	ldr	r0, [pc, #20]	; (15c7c <hci_encrypt_change+0x84>)
   15c68:	2145      	movs	r1, #69	; 0x45
   15c6a:	f010 fc56 	bl	2651a <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   15c6e:	4629      	mov	r1, r5
   15c70:	4620      	mov	r0, r4
   15c72:	f011 fee0 	bl	27a36 <bt_conn_disconnect>
   15c76:	e7d9      	b.n	15c2c <hci_encrypt_change+0x34>
   15c78:	0002b797 	.word	0x0002b797
   15c7c:	0002badc 	.word	0x0002badc

00015c80 <bt_send>:
	return bt_dev.drv->send(buf);
   15c80:	4b02      	ldr	r3, [pc, #8]	; (15c8c <bt_send+0xc>)
   15c82:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   15c86:	695b      	ldr	r3, [r3, #20]
   15c88:	4718      	bx	r3
   15c8a:	bf00      	nop
   15c8c:	20000350 	.word	0x20000350

00015c90 <bt_hci_cmd_send>:
{
   15c90:	b538      	push	{r3, r4, r5, lr}
   15c92:	4605      	mov	r5, r0
	if (!buf) {
   15c94:	460c      	mov	r4, r1
   15c96:	b919      	cbnz	r1, 15ca0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   15c98:	f7ff fd2c 	bl	156f4 <bt_hci_cmd_create>
		if (!buf) {
   15c9c:	4604      	mov	r4, r0
   15c9e:	b1c0      	cbz	r0, 15cd2 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   15ca0:	f640 4335 	movw	r3, #3125	; 0xc35
   15ca4:	429d      	cmp	r5, r3
   15ca6:	d10e      	bne.n	15cc6 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
   15ca8:	4620      	mov	r0, r4
   15caa:	f7ff ffe9 	bl	15c80 <bt_send>
		if (err) {
   15cae:	4605      	mov	r5, r0
   15cb0:	b138      	cbz	r0, 15cc2 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
   15cb2:	4602      	mov	r2, r0
   15cb4:	2145      	movs	r1, #69	; 0x45
   15cb6:	4808      	ldr	r0, [pc, #32]	; (15cd8 <bt_hci_cmd_send+0x48>)
   15cb8:	f010 fc2f 	bl	2651a <z_log_minimal_printk>
			net_buf_unref(buf);
   15cbc:	4620      	mov	r0, r4
   15cbe:	f006 fd9d 	bl	1c7fc <net_buf_unref>
}
   15cc2:	4628      	mov	r0, r5
   15cc4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   15cc6:	4805      	ldr	r0, [pc, #20]	; (15cdc <bt_hci_cmd_send+0x4c>)
   15cc8:	4621      	mov	r1, r4
   15cca:	f006 fd69 	bl	1c7a0 <net_buf_put>
	return 0;
   15cce:	2500      	movs	r5, #0
   15cd0:	e7f7      	b.n	15cc2 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
   15cd2:	f06f 0568 	mvn.w	r5, #104	; 0x68
   15cd6:	e7f4      	b.n	15cc2 <bt_hci_cmd_send+0x32>
   15cd8:	0002bb07 	.word	0x0002bb07
   15cdc:	20000494 	.word	0x20000494

00015ce0 <le_ltk_request>:
{
   15ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   15ce2:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15ce4:	8826      	ldrh	r6, [r4, #0]
   15ce6:	b2b7      	uxth	r7, r6
{
   15ce8:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   15cea:	4638      	mov	r0, r7
   15cec:	f001 fcba 	bl	17664 <bt_conn_lookup_handle>
	if (!conn) {
   15cf0:	4605      	mov	r5, r0
   15cf2:	b938      	cbnz	r0, 15d04 <le_ltk_request+0x24>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15cf4:	4821      	ldr	r0, [pc, #132]	; (15d7c <le_ltk_request+0x9c>)
   15cf6:	463a      	mov	r2, r7
   15cf8:	2145      	movs	r1, #69	; 0x45
}
   15cfa:	b007      	add	sp, #28
   15cfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15d00:	f010 bc0b 	b.w	2651a <z_log_minimal_printk>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   15d04:	af02      	add	r7, sp, #8
   15d06:	f8d4 2002 	ldr.w	r2, [r4, #2]
   15d0a:	f8d4 3006 	ldr.w	r3, [r4, #6]
   15d0e:	9701      	str	r7, [sp, #4]
   15d10:	8961      	ldrh	r1, [r4, #10]
   15d12:	9100      	str	r1, [sp, #0]
   15d14:	f013 f97b 	bl	2900e <bt_smp_request_ltk>
   15d18:	b1f8      	cbz	r0, 15d5a <le_ltk_request+0x7a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   15d1a:	2112      	movs	r1, #18
   15d1c:	f242 001a 	movw	r0, #8218	; 0x201a
   15d20:	f7ff fce8 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   15d24:	4604      	mov	r4, r0
   15d26:	b940      	cbnz	r0, 15d3a <le_ltk_request+0x5a>
		BT_ERR("Out of command buffers");
   15d28:	4815      	ldr	r0, [pc, #84]	; (15d80 <le_ltk_request+0xa0>)
   15d2a:	2145      	movs	r1, #69	; 0x45
   15d2c:	f010 fbf5 	bl	2651a <z_log_minimal_printk>
	bt_conn_unref(conn);
   15d30:	4628      	mov	r0, r5
   15d32:	f001 fc67 	bl	17604 <bt_conn_unref>
}
   15d36:	b007      	add	sp, #28
   15d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15d3a:	2112      	movs	r1, #18
   15d3c:	3008      	adds	r0, #8
   15d3e:	f006 fe73 	bl	1ca28 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   15d42:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   15d44:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   15d48:	2210      	movs	r2, #16
   15d4a:	f011 fa6c 	bl	27226 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   15d4e:	4621      	mov	r1, r4
   15d50:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   15d54:	f7ff ff9c 	bl	15c90 <bt_hci_cmd_send>
   15d58:	e7ea      	b.n	15d30 <le_ltk_request+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   15d5a:	2102      	movs	r1, #2
   15d5c:	f242 001b 	movw	r0, #8219	; 0x201b
   15d60:	f7ff fcc8 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   15d64:	4604      	mov	r4, r0
   15d66:	2800      	cmp	r0, #0
   15d68:	d0de      	beq.n	15d28 <le_ltk_request+0x48>
   15d6a:	2102      	movs	r1, #2
   15d6c:	3008      	adds	r0, #8
   15d6e:	f006 fe5b 	bl	1ca28 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   15d72:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   15d74:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   15d76:	f242 001b 	movw	r0, #8219	; 0x201b
   15d7a:	e7eb      	b.n	15d54 <le_ltk_request+0x74>
   15d7c:	0002b7c2 	.word	0x0002b7c2
   15d80:	0002bb2e 	.word	0x0002bb2e

00015d84 <le_conn_param_neg_reply>:
{
   15d84:	b570      	push	{r4, r5, r6, lr}
   15d86:	4606      	mov	r6, r0
   15d88:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   15d8a:	f242 0021 	movw	r0, #8225	; 0x2021
   15d8e:	2103      	movs	r1, #3
   15d90:	f7ff fcb0 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   15d94:	4604      	mov	r4, r0
   15d96:	b928      	cbnz	r0, 15da4 <le_conn_param_neg_reply+0x20>
}
   15d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   15d9c:	4808      	ldr	r0, [pc, #32]	; (15dc0 <le_conn_param_neg_reply+0x3c>)
   15d9e:	2145      	movs	r1, #69	; 0x45
   15da0:	f010 bbbb 	b.w	2651a <z_log_minimal_printk>
   15da4:	2103      	movs	r1, #3
   15da6:	3008      	adds	r0, #8
   15da8:	f006 fe3e 	bl	1ca28 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   15dac:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   15dae:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   15db0:	4621      	mov	r1, r4
   15db2:	f242 0021 	movw	r0, #8225	; 0x2021
}
   15db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   15dba:	f7ff bf69 	b.w	15c90 <bt_hci_cmd_send>
   15dbe:	bf00      	nop
   15dc0:	0002bb4a 	.word	0x0002bb4a

00015dc4 <le_conn_param_req>:
{
   15dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   15dc6:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   15dc8:	78d9      	ldrb	r1, [r3, #3]
   15dca:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   15dcc:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   15dce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15dd2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   15dd6:	7959      	ldrb	r1, [r3, #5]
   15dd8:	791a      	ldrb	r2, [r3, #4]
   15dda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15dde:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   15de2:	799a      	ldrb	r2, [r3, #6]
   15de4:	79d9      	ldrb	r1, [r3, #7]
   15de6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15dea:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   15dee:	7a1a      	ldrb	r2, [r3, #8]
   15df0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   15df2:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   15df4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   15df8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   15dfa:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   15dfe:	f001 fc31 	bl	17664 <bt_conn_lookup_handle>
	if (!conn) {
   15e02:	4606      	mov	r6, r0
   15e04:	b950      	cbnz	r0, 15e1c <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15e06:	481d      	ldr	r0, [pc, #116]	; (15e7c <le_conn_param_req+0xb8>)
   15e08:	2145      	movs	r1, #69	; 0x45
   15e0a:	4622      	mov	r2, r4
   15e0c:	f010 fb85 	bl	2651a <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   15e10:	2102      	movs	r1, #2
   15e12:	4620      	mov	r0, r4
   15e14:	f7ff ffb6 	bl	15d84 <le_conn_param_neg_reply>
}
   15e18:	b003      	add	sp, #12
   15e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   15e1c:	4669      	mov	r1, sp
   15e1e:	f001 fda9 	bl	17974 <le_param_req>
   15e22:	b938      	cbnz	r0, 15e34 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   15e24:	211e      	movs	r1, #30
   15e26:	4620      	mov	r0, r4
   15e28:	f7ff ffac 	bl	15d84 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   15e2c:	4630      	mov	r0, r6
   15e2e:	f001 fbe9 	bl	17604 <bt_conn_unref>
   15e32:	e7f1      	b.n	15e18 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   15e34:	210e      	movs	r1, #14
   15e36:	f242 0020 	movw	r0, #8224	; 0x2020
   15e3a:	f7ff fc5b 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   15e3e:	4605      	mov	r5, r0
   15e40:	2800      	cmp	r0, #0
   15e42:	d0f3      	beq.n	15e2c <le_conn_param_req+0x68>
   15e44:	210e      	movs	r1, #14
   15e46:	3008      	adds	r0, #8
   15e48:	f006 fdee 	bl	1ca28 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   15e4c:	220e      	movs	r2, #14
   15e4e:	4604      	mov	r4, r0
   15e50:	2100      	movs	r1, #0
   15e52:	f011 f9f3 	bl	2723c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   15e56:	f8bd 3000 	ldrh.w	r3, [sp]
   15e5a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   15e5c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   15e60:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   15e62:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   15e66:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   15e68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   15e6c:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   15e6e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   15e70:	4629      	mov	r1, r5
   15e72:	f242 0020 	movw	r0, #8224	; 0x2020
   15e76:	f7ff ff0b 	bl	15c90 <bt_hci_cmd_send>
   15e7a:	e7d7      	b.n	15e2c <le_conn_param_req+0x68>
   15e7c:	0002b7c2 	.word	0x0002b7c2

00015e80 <hci_tx_thread>:
{
   15e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   15e84:	f8df 8118 	ldr.w	r8, [pc, #280]	; 15fa0 <hci_tx_thread+0x120>
		BT_ASSERT(err == 0);
   15e88:	f8df 9118 	ldr.w	r9, [pc, #280]	; 15fa4 <hci_tx_thread+0x124>
			ev_count += bt_conn_prepare_events(&events[1]);
   15e8c:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   15e90:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15e94:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   15e96:	f36f 3352 	bfc	r3, #13, #6
   15e9a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15e9e:	f001 fb79 	bl	17594 <bt_conn_prepare_events>
   15ea2:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   15ea4:	483e      	ldr	r0, [pc, #248]	; (15fa0 <hci_tx_thread+0x120>)
   15ea6:	f04f 32ff 	mov.w	r2, #4294967295
   15eaa:	f04f 33ff 	mov.w	r3, #4294967295
   15eae:	4629      	mov	r1, r5
   15eb0:	f00c ff20 	bl	22cf4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   15eb4:	b158      	cbz	r0, 15ece <hci_tx_thread+0x4e>
   15eb6:	483c      	ldr	r0, [pc, #240]	; (15fa8 <hci_tx_thread+0x128>)
   15eb8:	f640 12d3 	movw	r2, #2515	; 0x9d3
   15ebc:	4649      	mov	r1, r9
   15ebe:	f010 fb1e 	bl	264fe <assert_print>
   15ec2:	4040      	eors	r0, r0
   15ec4:	f380 8811 	msr	BASEPRI, r0
   15ec8:	f04f 0003 	mov.w	r0, #3
   15ecc:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   15ece:	4f37      	ldr	r7, [pc, #220]	; (15fac <hci_tx_thread+0x12c>)
{
   15ed0:	4e33      	ldr	r6, [pc, #204]	; (15fa0 <hci_tx_thread+0x120>)
   15ed2:	f507 7b90 	add.w	fp, r7, #288	; 0x120
	for (; count; ev++, count--) {
   15ed6:	b915      	cbnz	r5, 15ede <hci_tx_thread+0x5e>
	z_impl_k_yield();
   15ed8:	f00c f856 	bl	21f88 <z_impl_k_yield>
	while (1) {
   15edc:	e7d8      	b.n	15e90 <hci_tx_thread+0x10>
		switch (ev->state) {
   15ede:	68f2      	ldr	r2, [r6, #12]
   15ee0:	f3c2 3245 	ubfx	r2, r2, #13, #6
   15ee4:	2a01      	cmp	r2, #1
   15ee6:	d94c      	bls.n	15f82 <hci_tx_thread+0x102>
   15ee8:	2a04      	cmp	r2, #4
   15eea:	d154      	bne.n	15f96 <hci_tx_thread+0x116>
			if (ev->tag == BT_EVENT_CMD_TX) {
   15eec:	7b33      	ldrb	r3, [r6, #12]
   15eee:	2b00      	cmp	r3, #0
   15ef0:	d14a      	bne.n	15f88 <hci_tx_thread+0x108>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   15ef2:	482f      	ldr	r0, [pc, #188]	; (15fb0 <hci_tx_thread+0x130>)
   15ef4:	2200      	movs	r2, #0
   15ef6:	2300      	movs	r3, #0
   15ef8:	f006 fb30 	bl	1c55c <net_buf_get>
	BT_ASSERT(buf);
   15efc:	4604      	mov	r4, r0
   15efe:	b958      	cbnz	r0, 15f18 <hci_tx_thread+0x98>
   15f00:	4829      	ldr	r0, [pc, #164]	; (15fa8 <hci_tx_thread+0x128>)
   15f02:	f640 126c 	movw	r2, #2412	; 0x96c
   15f06:	4649      	mov	r1, r9
   15f08:	f010 faf9 	bl	264fe <assert_print>
   15f0c:	4040      	eors	r0, r0
   15f0e:	f380 8811 	msr	BASEPRI, r0
   15f12:	f04f 0003 	mov.w	r0, #3
   15f16:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   15f18:	f04f 33ff 	mov.w	r3, #4294967295
   15f1c:	f04f 32ff 	mov.w	r2, #4294967295
   15f20:	4658      	mov	r0, fp
   15f22:	f00a fd41 	bl	209a8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   15f26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   15f2a:	b153      	cbz	r3, 15f42 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
   15f2c:	4821      	ldr	r0, [pc, #132]	; (15fb4 <hci_tx_thread+0x134>)
   15f2e:	2145      	movs	r1, #69	; 0x45
   15f30:	f010 faf3 	bl	2651a <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   15f34:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   15f38:	f006 fc60 	bl	1c7fc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15f3c:	2300      	movs	r3, #0
   15f3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   15f42:	4620      	mov	r0, r4
   15f44:	f006 fc9e 	bl	1c884 <net_buf_ref>
   15f48:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	err = bt_send(buf);
   15f4c:	4620      	mov	r0, r4
   15f4e:	f7ff fe97 	bl	15c80 <bt_send>
	if (err) {
   15f52:	4602      	mov	r2, r0
   15f54:	b1a8      	cbz	r0, 15f82 <hci_tx_thread+0x102>
		BT_ERR("Unable to send to driver (err %d)", err);
   15f56:	4818      	ldr	r0, [pc, #96]	; (15fb8 <hci_tx_thread+0x138>)
   15f58:	2145      	movs	r1, #69	; 0x45
   15f5a:	f010 fade 	bl	2651a <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   15f5e:	4817      	ldr	r0, [pc, #92]	; (15fbc <hci_tx_thread+0x13c>)
   15f60:	f00a fce8 	bl	20934 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   15f64:	4620      	mov	r0, r4
   15f66:	f006 f9bf 	bl	1c2e8 <net_buf_id>
   15f6a:	4b15      	ldr	r3, [pc, #84]	; (15fc0 <hci_tx_thread+0x140>)
   15f6c:	220c      	movs	r2, #12
   15f6e:	fb02 3000 	mla	r0, r2, r0, r3
   15f72:	211f      	movs	r1, #31
   15f74:	8840      	ldrh	r0, [r0, #2]
   15f76:	4622      	mov	r2, r4
   15f78:	f7ff fa8a 	bl	15490 <hci_cmd_done>
		net_buf_unref(buf);
   15f7c:	4620      	mov	r0, r4
   15f7e:	f006 fc3d 	bl	1c7fc <net_buf_unref>
	for (; count; ev++, count--) {
   15f82:	3614      	adds	r6, #20
   15f84:	3d01      	subs	r5, #1
   15f86:	e7a6      	b.n	15ed6 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   15f88:	2b01      	cmp	r3, #1
   15f8a:	d1fa      	bne.n	15f82 <hci_tx_thread+0x102>
					conn = CONTAINER_OF(ev->fifo,
   15f8c:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   15f8e:	3838      	subs	r0, #56	; 0x38
   15f90:	f001 ff1a 	bl	17dc8 <bt_conn_process_tx>
   15f94:	e7f5      	b.n	15f82 <hci_tx_thread+0x102>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   15f96:	480b      	ldr	r0, [pc, #44]	; (15fc4 <hci_tx_thread+0x144>)
   15f98:	2157      	movs	r1, #87	; 0x57
   15f9a:	f010 fabe 	bl	2651a <z_log_minimal_printk>
   15f9e:	e7f0      	b.n	15f82 <hci_tx_thread+0x102>
   15fa0:	2000052c 	.word	0x2000052c
   15fa4:	0002b882 	.word	0x0002b882
   15fa8:	0002aa75 	.word	0x0002aa75
   15fac:	20000350 	.word	0x20000350
   15fb0:	20000494 	.word	0x20000494
   15fb4:	0002bb69 	.word	0x0002bb69
   15fb8:	0002bb07 	.word	0x0002bb07
   15fbc:	20000470 	.word	0x20000470
   15fc0:	200024d8 	.word	0x200024d8
   15fc4:	0002bb89 	.word	0x0002bb89

00015fc8 <hci_event_prio>:
{
   15fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fcc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   15fce:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   15fd2:	4630      	mov	r0, r6
   15fd4:	f013 f98c 	bl	292f0 <net_buf_simple_headroom>
	state->len = buf->len;
   15fd8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15fdc:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   15fe0:	4605      	mov	r5, r0
   15fe2:	d80b      	bhi.n	15ffc <hci_event_prio+0x34>
   15fe4:	491b      	ldr	r1, [pc, #108]	; (16054 <hci_event_prio+0x8c>)
   15fe6:	481c      	ldr	r0, [pc, #112]	; (16058 <hci_event_prio+0x90>)
   15fe8:	f640 526f 	movw	r2, #3439	; 0xd6f
   15fec:	f010 fa87 	bl	264fe <assert_print>
   15ff0:	4040      	eors	r0, r0
   15ff2:	f380 8811 	msr	BASEPRI, r0
   15ff6:	f04f 0003 	mov.w	r0, #3
   15ffa:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   15ffc:	4630      	mov	r0, r6
   15ffe:	2102      	movs	r1, #2
   16000:	f006 fcf4 	bl	1c9ec <net_buf_simple_pull_mem>
   16004:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16006:	7800      	ldrb	r0, [r0, #0]
   16008:	f011 f9d4 	bl	273b4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1600c:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1600e:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16010:	d40b      	bmi.n	1602a <hci_event_prio+0x62>
   16012:	4910      	ldr	r1, [pc, #64]	; (16054 <hci_event_prio+0x8c>)
   16014:	4810      	ldr	r0, [pc, #64]	; (16058 <hci_event_prio+0x90>)
   16016:	f640 5273 	movw	r2, #3443	; 0xd73
   1601a:	f010 fa70 	bl	264fe <assert_print>
   1601e:	4040      	eors	r0, r0
   16020:	f380 8811 	msr	BASEPRI, r0
   16024:	f04f 0003 	mov.w	r0, #3
   16028:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1602a:	2305      	movs	r3, #5
   1602c:	4a0b      	ldr	r2, [pc, #44]	; (1605c <hci_event_prio+0x94>)
   1602e:	7838      	ldrb	r0, [r7, #0]
   16030:	4621      	mov	r1, r4
   16032:	f7ff f929 	bl	15288 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16036:	07b3      	lsls	r3, r6, #30
   16038:	d507      	bpl.n	1604a <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   1603a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1603c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16040:	fa10 f585 	uxtah	r5, r0, r5
   16044:	60a5      	str	r5, [r4, #8]
}
   16046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1604a:	4620      	mov	r0, r4
}
   1604c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16050:	f006 bbd4 	b.w	1c7fc <net_buf_unref>
   16054:	0002b882 	.word	0x0002b882
   16058:	0002aa75 	.word	0x0002aa75
   1605c:	0002a3d4 	.word	0x0002a3d4

00016060 <bt_recv>:
{
   16060:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16062:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   16064:	2a01      	cmp	r2, #1
{
   16066:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   16068:	d005      	beq.n	16076 <bt_recv+0x16>
   1606a:	2a03      	cmp	r2, #3
   1606c:	d112      	bne.n	16094 <bt_recv+0x34>
			rx_queue_put(buf);
   1606e:	f7ff f883 	bl	15178 <rx_queue_put>
		return 0;
   16072:	2000      	movs	r0, #0
}
   16074:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16076:	6883      	ldr	r3, [r0, #8]
   16078:	7818      	ldrb	r0, [r3, #0]
   1607a:	f011 f99b 	bl	273b4 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1607e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16080:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16082:	d502      	bpl.n	1608a <bt_recv+0x2a>
			hci_event_prio(buf);
   16084:	4628      	mov	r0, r5
   16086:	f7ff ff9f 	bl	15fc8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1608a:	f014 0002 	ands.w	r0, r4, #2
   1608e:	d0f1      	beq.n	16074 <bt_recv+0x14>
			rx_queue_put(buf);
   16090:	4628      	mov	r0, r5
   16092:	e7ec      	b.n	1606e <bt_recv+0xe>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16094:	4804      	ldr	r0, [pc, #16]	; (160a8 <bt_recv+0x48>)
   16096:	2145      	movs	r1, #69	; 0x45
   16098:	f010 fa3f 	bl	2651a <z_log_minimal_printk>
		net_buf_unref(buf);
   1609c:	4628      	mov	r0, r5
   1609e:	f006 fbad 	bl	1c7fc <net_buf_unref>
		return -EINVAL;
   160a2:	f06f 0015 	mvn.w	r0, #21
   160a6:	e7e5      	b.n	16074 <bt_recv+0x14>
   160a8:	0002bbaf 	.word	0x0002bbaf

000160ac <bt_hci_driver_register>:
	if (bt_dev.drv) {
   160ac:	4a08      	ldr	r2, [pc, #32]	; (160d0 <bt_hci_driver_register+0x24>)
{
   160ae:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   160b0:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   160b4:	b930      	cbnz	r0, 160c4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   160b6:	68d9      	ldr	r1, [r3, #12]
   160b8:	b139      	cbz	r1, 160ca <bt_hci_driver_register+0x1e>
   160ba:	6959      	ldr	r1, [r3, #20]
   160bc:	b129      	cbz	r1, 160ca <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   160be:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   160c2:	4770      	bx	lr
		return -EALREADY;
   160c4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   160c8:	4770      	bx	lr
		return -EINVAL;
   160ca:	f06f 0015 	mvn.w	r0, #21
}
   160ce:	4770      	bx	lr
   160d0:	20000350 	.word	0x20000350

000160d4 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   160d4:	4801      	ldr	r0, [pc, #4]	; (160dc <bt_finalize_init+0x8>)
   160d6:	2104      	movs	r1, #4
   160d8:	f011 b99a 	b.w	27410 <atomic_or>
   160dc:	2000041c 	.word	0x2000041c

000160e0 <init_work>:
{
   160e0:	b510      	push	{r4, lr}
	err = bt_init();
   160e2:	f7fb fae5 	bl	116b0 <bt_init>
	if (ready_cb) {
   160e6:	4b03      	ldr	r3, [pc, #12]	; (160f4 <init_work+0x14>)
   160e8:	681b      	ldr	r3, [r3, #0]
   160ea:	b113      	cbz	r3, 160f2 <init_work+0x12>
}
   160ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   160f0:	4718      	bx	r3
}
   160f2:	bd10      	pop	{r4, pc}
   160f4:	200024f0 	.word	0x200024f0

000160f8 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   160f8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   160fa:	4d34      	ldr	r5, [pc, #208]	; (161cc <bt_enable+0xd4>)
   160fc:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   16100:	b088      	sub	sp, #32
   16102:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   16104:	b943      	cbnz	r3, 16118 <bt_enable+0x20>
		BT_ERR("No HCI driver registered");
   16106:	4832      	ldr	r0, [pc, #200]	; (161d0 <bt_enable+0xd8>)
   16108:	2145      	movs	r1, #69	; 0x45
   1610a:	f010 fa06 	bl	2651a <z_log_minimal_printk>
		return -ENODEV;
   1610e:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   16112:	4620      	mov	r0, r4
   16114:	b008      	add	sp, #32
   16116:	bd70      	pop	{r4, r5, r6, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16118:	f06f 0102 	mvn.w	r1, #2
   1611c:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   16120:	f011 f985 	bl	2742e <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16124:	2101      	movs	r1, #1
   16126:	f011 f973 	bl	27410 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1612a:	07c3      	lsls	r3, r0, #31
   1612c:	d44a      	bmi.n	161c4 <bt_enable+0xcc>
		err = bt_settings_init();
   1612e:	f7fe fecd 	bl	14ecc <bt_settings_init>
		if (err) {
   16132:	4604      	mov	r4, r0
   16134:	2800      	cmp	r0, #0
   16136:	d1ec      	bne.n	16112 <bt_enable+0x1a>
	ready_cb = cb;
   16138:	4b26      	ldr	r3, [pc, #152]	; (161d4 <bt_enable+0xdc>)
   1613a:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1613c:	2201      	movs	r2, #1
   1613e:	4611      	mov	r1, r2
   16140:	f505 7090 	add.w	r0, r5, #288	; 0x120
   16144:	f013 fbea 	bl	2991c <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   16148:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   1614c:	f013 fbc4 	bl	298d8 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16150:	2200      	movs	r2, #0
   16152:	2300      	movs	r3, #0
   16154:	e9cd 2306 	strd	r2, r3, [sp, #24]
   16158:	f06f 0308 	mvn.w	r3, #8
   1615c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16160:	e9cd 4400 	strd	r4, r4, [sp]
   16164:	4b1c      	ldr	r3, [pc, #112]	; (161d8 <bt_enable+0xe0>)
   16166:	491d      	ldr	r1, [pc, #116]	; (161dc <bt_enable+0xe4>)
   16168:	9404      	str	r4, [sp, #16]
   1616a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1616e:	481c      	ldr	r0, [pc, #112]	; (161e0 <bt_enable+0xe8>)
   16170:	f00a f848 	bl	20204 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16174:	491b      	ldr	r1, [pc, #108]	; (161e4 <bt_enable+0xec>)
   16176:	481a      	ldr	r0, [pc, #104]	; (161e0 <bt_enable+0xe8>)
   16178:	f013 fb85 	bl	29886 <z_impl_k_thread_name_set>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1617c:	491a      	ldr	r1, [pc, #104]	; (161e8 <bt_enable+0xf0>)
   1617e:	481b      	ldr	r0, [pc, #108]	; (161ec <bt_enable+0xf4>)
   16180:	9400      	str	r4, [sp, #0]
   16182:	f06f 0307 	mvn.w	r3, #7
   16186:	f640 0298 	movw	r2, #2200	; 0x898
   1618a:	f00a ff33 	bl	20ff4 <k_work_queue_start>
   1618e:	4918      	ldr	r1, [pc, #96]	; (161f0 <bt_enable+0xf8>)
   16190:	4816      	ldr	r0, [pc, #88]	; (161ec <bt_enable+0xf4>)
   16192:	f013 fb78 	bl	29886 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   16196:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   1619a:	68db      	ldr	r3, [r3, #12]
   1619c:	4798      	blx	r3
	if (err) {
   1619e:	4604      	mov	r4, r0
   161a0:	b128      	cbz	r0, 161ae <bt_enable+0xb6>
		BT_ERR("HCI driver open failed (%d)", err);
   161a2:	4602      	mov	r2, r0
   161a4:	2145      	movs	r1, #69	; 0x45
   161a6:	4813      	ldr	r0, [pc, #76]	; (161f4 <bt_enable+0xfc>)
   161a8:	f010 f9b7 	bl	2651a <z_log_minimal_printk>
		return err;
   161ac:	e7b1      	b.n	16112 <bt_enable+0x1a>
	if (!cb) {
   161ae:	b926      	cbnz	r6, 161ba <bt_enable+0xc2>
}
   161b0:	b008      	add	sp, #32
   161b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   161b6:	f7fb ba7b 	b.w	116b0 <bt_init>
	k_work_submit(&bt_dev.init);
   161ba:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   161be:	f00a fefb 	bl	20fb8 <k_work_submit>
	return 0;
   161c2:	e7a6      	b.n	16112 <bt_enable+0x1a>
		return -EALREADY;
   161c4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   161c8:	e7a3      	b.n	16112 <bt_enable+0x1a>
   161ca:	bf00      	nop
   161cc:	20000350 	.word	0x20000350
   161d0:	0002bcd0 	.word	0x0002bcd0
   161d4:	200024f0 	.word	0x200024f0
   161d8:	00015e81 	.word	0x00015e81
   161dc:	20004b40 	.word	0x20004b40
   161e0:	20001828 	.word	0x20001828
   161e4:	0002bcee 	.word	0x0002bcee
   161e8:	20004240 	.word	0x20004240
   161ec:	20001788 	.word	0x20001788
   161f0:	0002bcf4 	.word	0x0002bcf4
   161f4:	0002bcfa 	.word	0x0002bcfa

000161f8 <bt_is_ready>:
   161f8:	4b04      	ldr	r3, [pc, #16]	; (1620c <bt_is_ready+0x14>)
   161fa:	f3bf 8f5b 	dmb	ish
   161fe:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
   16202:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   16206:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1620a:	4770      	bx	lr
   1620c:	20000350 	.word	0x20000350

00016210 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   16210:	4800      	ldr	r0, [pc, #0]	; (16214 <bt_get_name+0x4>)
   16212:	4770      	bx	lr
   16214:	0002abd2 	.word	0x0002abd2

00016218 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   16218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1621a:	4f0b      	ldr	r7, [pc, #44]	; (16248 <id_find+0x30>)
{
   1621c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1621e:	2500      	movs	r5, #0
   16220:	79fb      	ldrb	r3, [r7, #7]
   16222:	b2ec      	uxtb	r4, r5
   16224:	42a3      	cmp	r3, r4
   16226:	d802      	bhi.n	1622e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   16228:	f06f 0401 	mvn.w	r4, #1
   1622c:	e009      	b.n	16242 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1622e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   16232:	2207      	movs	r2, #7
   16234:	4439      	add	r1, r7
   16236:	4630      	mov	r0, r6
   16238:	f010 ffcc 	bl	271d4 <memcmp>
   1623c:	3501      	adds	r5, #1
   1623e:	2800      	cmp	r0, #0
   16240:	d1ee      	bne.n	16220 <id_find+0x8>
}
   16242:	4620      	mov	r0, r4
   16244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16246:	bf00      	nop
   16248:	20000350 	.word	0x20000350

0001624c <set_random_address>:
{
   1624c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1624e:	4914      	ldr	r1, [pc, #80]	; (162a0 <set_random_address+0x54>)
   16250:	2206      	movs	r2, #6
   16252:	4605      	mov	r5, r0
   16254:	f010 ffbe 	bl	271d4 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   16258:	4604      	mov	r4, r0
   1625a:	b1e0      	cbz	r0, 16296 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1625c:	2106      	movs	r1, #6
   1625e:	f242 0005 	movw	r0, #8197	; 0x2005
   16262:	f7ff fa47 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   16266:	4604      	mov	r4, r0
   16268:	b1b8      	cbz	r0, 1629a <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1626a:	2206      	movs	r2, #6
   1626c:	4629      	mov	r1, r5
   1626e:	3008      	adds	r0, #8
   16270:	f013 f84a 	bl	29308 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   16274:	4621      	mov	r1, r4
   16276:	2200      	movs	r2, #0
   16278:	f242 0005 	movw	r0, #8197	; 0x2005
   1627c:	f7ff fa82 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   16280:	4604      	mov	r4, r0
   16282:	b940      	cbnz	r0, 16296 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   16284:	2206      	movs	r2, #6
   16286:	4806      	ldr	r0, [pc, #24]	; (162a0 <set_random_address+0x54>)
   16288:	4629      	mov	r1, r5
   1628a:	f010 ffcc 	bl	27226 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1628e:	4b05      	ldr	r3, [pc, #20]	; (162a4 <set_random_address+0x58>)
   16290:	2201      	movs	r2, #1
   16292:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   16296:	4620      	mov	r0, r4
   16298:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1629a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1629e:	e7fa      	b.n	16296 <set_random_address+0x4a>
   162a0:	200003b1 	.word	0x200003b1
   162a4:	20000350 	.word	0x20000350

000162a8 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   162a8:	b530      	push	{r4, r5, lr}
   162aa:	4604      	mov	r4, r0
   162ac:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   162ae:	460d      	mov	r5, r1
   162b0:	b1e1      	cbz	r1, 162ec <id_create.constprop.0+0x44>
   162b2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   162b4:	2207      	movs	r2, #7
   162b6:	a902      	add	r1, sp, #8
   162b8:	4628      	mov	r0, r5
   162ba:	9302      	str	r3, [sp, #8]
   162bc:	f8cd 300b 	str.w	r3, [sp, #11]
   162c0:	f010 ff88 	bl	271d4 <memcmp>
   162c4:	b190      	cbz	r0, 162ec <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   162c6:	4816      	ldr	r0, [pc, #88]	; (16320 <id_create.constprop.0+0x78>)
   162c8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   162cc:	4629      	mov	r1, r5
   162ce:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   162d0:	f011 f990 	bl	275f4 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   162d4:	4813      	ldr	r0, [pc, #76]	; (16324 <id_create.constprop.0+0x7c>)
   162d6:	f011 f990 	bl	275fa <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   162da:	0742      	lsls	r2, r0, #29
   162dc:	f3c0 0380 	ubfx	r3, r0, #2, #1
   162e0:	d51b      	bpl.n	1631a <id_create.constprop.0+0x72>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   162e2:	f7fe fdab 	bl	14e3c <bt_settings_save_id>
	}

	return 0;
   162e6:	2000      	movs	r0, #0
}
   162e8:	b005      	add	sp, #20
   162ea:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   162ec:	4668      	mov	r0, sp
   162ee:	f011 f853 	bl	27398 <bt_addr_le_create_static>
			if (err) {
   162f2:	2800      	cmp	r0, #0
   162f4:	d1f8      	bne.n	162e8 <id_create.constprop.0+0x40>
		} while (id_find(&new_addr) >= 0);
   162f6:	4668      	mov	r0, sp
   162f8:	f7ff ff8e 	bl	16218 <id_find>
   162fc:	2800      	cmp	r0, #0
   162fe:	daf5      	bge.n	162ec <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   16300:	4807      	ldr	r0, [pc, #28]	; (16320 <id_create.constprop.0+0x78>)
   16302:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16306:	4404      	add	r4, r0
   16308:	4669      	mov	r1, sp
   1630a:	4620      	mov	r0, r4
   1630c:	f011 f972 	bl	275f4 <bt_addr_le_copy>
		if (addr) {
   16310:	2d00      	cmp	r5, #0
   16312:	d0df      	beq.n	162d4 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   16314:	4621      	mov	r1, r4
   16316:	4628      	mov	r0, r5
   16318:	e7da      	b.n	162d0 <id_create.constprop.0+0x28>
	return 0;
   1631a:	4618      	mov	r0, r3
   1631c:	e7e4      	b.n	162e8 <id_create.constprop.0+0x40>
   1631e:	bf00      	nop
   16320:	20000350 	.word	0x20000350
   16324:	2000041c 	.word	0x2000041c

00016328 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16328:	4b0a      	ldr	r3, [pc, #40]	; (16354 <bt_id_pending_keys_update+0x2c>)
   1632a:	f3bf 8f5b 	dmb	ish
   1632e:	e853 2f00 	ldrex	r2, [r3]
   16332:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   16336:	e843 1000 	strex	r0, r1, [r3]
   1633a:	2800      	cmp	r0, #0
   1633c:	d1f7      	bne.n	1632e <bt_id_pending_keys_update+0x6>
   1633e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   16342:	0413      	lsls	r3, r2, #16
   16344:	d504      	bpl.n	16350 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   16346:	4904      	ldr	r1, [pc, #16]	; (16358 <bt_id_pending_keys_update+0x30>)
   16348:	2200      	movs	r2, #0
   1634a:	2002      	movs	r0, #2
   1634c:	f005 be82 	b.w	1c054 <bt_keys_foreach>
}
   16350:	4770      	bx	lr
   16352:	bf00      	nop
   16354:	2000041c 	.word	0x2000041c
   16358:	00027745 	.word	0x00027745

0001635c <bt_id_add>:
{
   1635c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1635e:	4c50      	ldr	r4, [pc, #320]	; (164a0 <bt_id_add+0x144>)
   16360:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   16364:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   16368:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1636a:	b10a      	cbz	r2, 16370 <bt_id_add+0x14>
   1636c:	429a      	cmp	r2, r3
   1636e:	d208      	bcs.n	16382 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   16370:	3301      	adds	r3, #1
   16372:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   16376:	7a2b      	ldrb	r3, [r5, #8]
   16378:	f043 0304 	orr.w	r3, r3, #4
   1637c:	722b      	strb	r3, [r5, #8]
}
   1637e:	b003      	add	sp, #12
   16380:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16382:	2100      	movs	r1, #0
   16384:	2206      	movs	r2, #6
   16386:	4608      	mov	r0, r1
   16388:	f001 fc10 	bl	17bac <bt_conn_lookup_state_le>
	if (conn) {
   1638c:	4606      	mov	r6, r0
   1638e:	b1a8      	cbz	r0, 163bc <bt_id_add+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16390:	f3bf 8f5b 	dmb	ish
   16394:	34cc      	adds	r4, #204	; 0xcc
   16396:	e854 3f00 	ldrex	r3, [r4]
   1639a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1639e:	e844 3200 	strex	r2, r3, [r4]
   163a2:	2a00      	cmp	r2, #0
   163a4:	d1f7      	bne.n	16396 <bt_id_add+0x3a>
   163a6:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   163aa:	7a2b      	ldrb	r3, [r5, #8]
   163ac:	f043 0301 	orr.w	r3, r3, #1
   163b0:	722b      	strb	r3, [r5, #8]
}
   163b2:	b003      	add	sp, #12
   163b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   163b8:	f001 b924 	b.w	17604 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   163bc:	4601      	mov	r1, r0
   163be:	4839      	ldr	r0, [pc, #228]	; (164a4 <bt_id_add+0x148>)
   163c0:	f000 fb64 	bl	16a8c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   163c4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   163c8:	b143      	cbz	r3, 163dc <bt_id_add+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   163ca:	4630      	mov	r0, r6
   163cc:	f011 f96a 	bl	276a4 <addr_res_enable>
		if (err) {
   163d0:	b120      	cbz	r0, 163dc <bt_id_add+0x80>
			BT_WARN("Failed to disable address resolution");
   163d2:	4835      	ldr	r0, [pc, #212]	; (164a8 <bt_id_add+0x14c>)
   163d4:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Set privacy mode command is not supported");
   163d6:	f010 f8a0 	bl	2651a <z_log_minimal_printk>
	if (err) {
   163da:	e01c      	b.n	16416 <bt_id_add+0xba>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   163dc:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   163e0:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   163e4:	429a      	cmp	r2, r3
   163e6:	d120      	bne.n	1642a <bt_id_add+0xce>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   163e8:	4830      	ldr	r0, [pc, #192]	; (164ac <bt_id_add+0x150>)
   163ea:	2157      	movs	r1, #87	; 0x57
   163ec:	f010 f895 	bl	2651a <z_log_minimal_printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   163f0:	2200      	movs	r2, #0
   163f2:	4611      	mov	r1, r2
   163f4:	f242 0029 	movw	r0, #8233	; 0x2029
   163f8:	f7ff f9c4 	bl	15784 <bt_hci_cmd_send_sync>
		if (err) {
   163fc:	b110      	cbz	r0, 16404 <bt_id_add+0xa8>
			BT_ERR("Failed to clear resolution list");
   163fe:	482c      	ldr	r0, [pc, #176]	; (164b0 <bt_id_add+0x154>)
   16400:	2145      	movs	r1, #69	; 0x45
   16402:	e7e8      	b.n	163d6 <bt_id_add+0x7a>
		bt_dev.le.rl_entries++;
   16404:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   16408:	3301      	adds	r3, #1
   1640a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1640e:	7a2b      	ldrb	r3, [r5, #8]
   16410:	f043 0304 	orr.w	r3, r3, #4
   16414:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   16416:	2001      	movs	r0, #1
   16418:	f011 f944 	bl	276a4 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1641c:	4825      	ldr	r0, [pc, #148]	; (164b4 <bt_id_add+0x158>)
   1641e:	2100      	movs	r1, #0
}
   16420:	b003      	add	sp, #12
   16422:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16426:	f000 bb31 	b.w	16a8c <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1642a:	462a      	mov	r2, r5
   1642c:	1c6f      	adds	r7, r5, #1
   1642e:	f812 0b2a 	ldrb.w	r0, [r2], #42
   16432:	4639      	mov	r1, r7
   16434:	f011 f8fc 	bl	27630 <hci_id_add>
	if (err) {
   16438:	4606      	mov	r6, r0
   1643a:	b110      	cbz	r0, 16442 <bt_id_add+0xe6>
		BT_ERR("Failed to add IRK to controller");
   1643c:	481e      	ldr	r0, [pc, #120]	; (164b8 <bt_id_add+0x15c>)
   1643e:	2145      	movs	r1, #69	; 0x45
   16440:	e7c9      	b.n	163d6 <bt_id_add+0x7a>
	bt_dev.le.rl_entries++;
   16442:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   16446:	3301      	adds	r3, #1
   16448:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   1644c:	7a2b      	ldrb	r3, [r5, #8]
   1644e:	f043 0304 	orr.w	r3, r3, #4
   16452:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   16454:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   16458:	075b      	lsls	r3, r3, #29
   1645a:	d402      	bmi.n	16462 <bt_id_add+0x106>
		BT_WARN("Set privacy mode command is not supported");
   1645c:	4817      	ldr	r0, [pc, #92]	; (164bc <bt_id_add+0x160>)
   1645e:	2157      	movs	r1, #87	; 0x57
   16460:	e7b9      	b.n	163d6 <bt_id_add+0x7a>
	bt_addr_le_copy(&cp.id_addr, addr);
   16462:	4639      	mov	r1, r7
   16464:	4668      	mov	r0, sp
   16466:	f011 f8c5 	bl	275f4 <bt_addr_le_copy>
	cp.mode = mode;
   1646a:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1646c:	2108      	movs	r1, #8
   1646e:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   16472:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   16476:	f7ff f93d 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   1647a:	4604      	mov	r4, r0
   1647c:	b910      	cbnz	r0, 16484 <bt_id_add+0x128>
		BT_ERR("Failed to set privacy mode");
   1647e:	4810      	ldr	r0, [pc, #64]	; (164c0 <bt_id_add+0x164>)
   16480:	2145      	movs	r1, #69	; 0x45
   16482:	e7a8      	b.n	163d6 <bt_id_add+0x7a>
   16484:	2208      	movs	r2, #8
   16486:	4669      	mov	r1, sp
   16488:	4410      	add	r0, r2
   1648a:	f012 ff3d 	bl	29308 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   1648e:	4632      	mov	r2, r6
   16490:	4621      	mov	r1, r4
   16492:	f242 004e 	movw	r0, #8270	; 0x204e
   16496:	f7ff f975 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   1649a:	2800      	cmp	r0, #0
   1649c:	d0bb      	beq.n	16416 <bt_id_add+0xba>
   1649e:	e7ee      	b.n	1647e <bt_id_add+0x122>
   164a0:	20000350 	.word	0x20000350
   164a4:	000276d5 	.word	0x000276d5
   164a8:	0002bd51 	.word	0x0002bd51
   164ac:	0002bd7b 	.word	0x0002bd7b
   164b0:	0002bdb1 	.word	0x0002bdb1
   164b4:	00027607 	.word	0x00027607
   164b8:	0002bdd6 	.word	0x0002bdd6
   164bc:	0002bdfb 	.word	0x0002bdfb
   164c0:	0002be2a 	.word	0x0002be2a

000164c4 <bt_id_del>:
{
   164c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   164c8:	4c41      	ldr	r4, [pc, #260]	; (165d0 <bt_id_del+0x10c>)
   164ca:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   164ce:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   164d2:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
   164d4:	b112      	cbz	r2, 164dc <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   164d6:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   164d8:	4293      	cmp	r3, r2
   164da:	dd08      	ble.n	164ee <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   164dc:	3b01      	subs	r3, #1
   164de:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   164e2:	7a2b      	ldrb	r3, [r5, #8]
   164e4:	f023 0304 	bic.w	r3, r3, #4
   164e8:	722b      	strb	r3, [r5, #8]
}
   164ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   164ee:	2100      	movs	r1, #0
   164f0:	2206      	movs	r2, #6
   164f2:	4608      	mov	r0, r1
   164f4:	f001 fb5a 	bl	17bac <bt_conn_lookup_state_le>
	if (conn) {
   164f8:	4606      	mov	r6, r0
   164fa:	b1a0      	cbz	r0, 16526 <bt_id_del+0x62>
   164fc:	f3bf 8f5b 	dmb	ish
   16500:	34cc      	adds	r4, #204	; 0xcc
   16502:	e854 3f00 	ldrex	r3, [r4]
   16506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1650a:	e844 3200 	strex	r2, r3, [r4]
   1650e:	2a00      	cmp	r2, #0
   16510:	d1f7      	bne.n	16502 <bt_id_del+0x3e>
   16512:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   16516:	7a2b      	ldrb	r3, [r5, #8]
   16518:	f043 0302 	orr.w	r3, r3, #2
   1651c:	722b      	strb	r3, [r5, #8]
}
   1651e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   16522:	f001 b86f 	b.w	17604 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   16526:	4601      	mov	r1, r0
   16528:	482a      	ldr	r0, [pc, #168]	; (165d4 <bt_id_del+0x110>)
   1652a:	f000 faaf 	bl	16a8c <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1652e:	4630      	mov	r0, r6
   16530:	f011 f8b8 	bl	276a4 <addr_res_enable>
	if (err) {
   16534:	4606      	mov	r6, r0
   16536:	b180      	cbz	r0, 1655a <bt_id_del+0x96>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   16538:	4602      	mov	r2, r0
   1653a:	2145      	movs	r1, #69	; 0x45
   1653c:	4826      	ldr	r0, [pc, #152]	; (165d8 <bt_id_del+0x114>)
   1653e:	f00f ffec 	bl	2651a <z_log_minimal_printk>
	if (bt_dev.le.rl_entries) {
   16542:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   16546:	b113      	cbz	r3, 1654e <bt_id_del+0x8a>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   16548:	2001      	movs	r0, #1
   1654a:	f011 f8ab 	bl	276a4 <addr_res_enable>
}
   1654e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16552:	4822      	ldr	r0, [pc, #136]	; (165dc <bt_id_del+0x118>)
   16554:	2100      	movs	r1, #0
   16556:	f000 ba99 	b.w	16a8c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1655a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1655e:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   16562:	429a      	cmp	r2, r3
   16564:	d20c      	bcs.n	16580 <bt_id_del+0xbc>
		bt_dev.le.rl_entries--;
   16566:	3b01      	subs	r3, #1
   16568:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1656c:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1656e:	491c      	ldr	r1, [pc, #112]	; (165e0 <bt_id_del+0x11c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   16570:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16574:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   16576:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16578:	2002      	movs	r0, #2
   1657a:	f005 fd6b 	bl	1c054 <bt_keys_foreach>
		goto done;
   1657e:	e7e0      	b.n	16542 <bt_id_del+0x7e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   16580:	2107      	movs	r1, #7
   16582:	f242 0028 	movw	r0, #8232	; 0x2028
   16586:	f7ff f8b5 	bl	156f4 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1658a:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   1658e:	4607      	mov	r7, r0
   16590:	b920      	cbnz	r0, 1659c <bt_id_del+0xd8>
		BT_ERR("Failed to remove IRK from controller");
   16592:	4814      	ldr	r0, [pc, #80]	; (165e4 <bt_id_del+0x120>)
   16594:	2145      	movs	r1, #69	; 0x45
   16596:	f00f ffc0 	bl	2651a <z_log_minimal_printk>
		goto done;
   1659a:	e7d2      	b.n	16542 <bt_id_del+0x7e>
	return net_buf_simple_add(&buf->b, len);
   1659c:	2107      	movs	r1, #7
   1659e:	3008      	adds	r0, #8
   165a0:	f006 fa42 	bl	1ca28 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   165a4:	4641      	mov	r1, r8
   165a6:	f011 f825 	bl	275f4 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   165aa:	4632      	mov	r2, r6
   165ac:	4639      	mov	r1, r7
   165ae:	f242 0028 	movw	r0, #8232	; 0x2028
   165b2:	f7ff f8e7 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   165b6:	2800      	cmp	r0, #0
   165b8:	d1eb      	bne.n	16592 <bt_id_del+0xce>
	bt_dev.le.rl_entries--;
   165ba:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   165be:	3b01      	subs	r3, #1
   165c0:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   165c4:	7a2b      	ldrb	r3, [r5, #8]
   165c6:	f023 0304 	bic.w	r3, r3, #4
   165ca:	722b      	strb	r3, [r5, #8]
   165cc:	e7b9      	b.n	16542 <bt_id_del+0x7e>
   165ce:	bf00      	nop
   165d0:	20000350 	.word	0x20000350
   165d4:	000276d5 	.word	0x000276d5
   165d8:	0002be4a 	.word	0x0002be4a
   165dc:	00027607 	.word	0x00027607
   165e0:	0002768f 	.word	0x0002768f
   165e4:	0002be7c 	.word	0x0002be7c

000165e8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   165e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   165ea:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   165ec:	4605      	mov	r5, r0
   165ee:	b918      	cbnz	r0, 165f8 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   165f0:	b314      	cbz	r4, 16638 <bt_id_create+0x50>
		return -EINVAL;
   165f2:	f06f 0015 	mvn.w	r0, #21
   165f6:	e01d      	b.n	16634 <bt_id_create+0x4c>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   165f8:	2300      	movs	r3, #0
   165fa:	2207      	movs	r2, #7
   165fc:	4669      	mov	r1, sp
   165fe:	9300      	str	r3, [sp, #0]
   16600:	f8cd 3003 	str.w	r3, [sp, #3]
   16604:	f010 fde6 	bl	271d4 <memcmp>
   16608:	2800      	cmp	r0, #0
   1660a:	d0f1      	beq.n	165f0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1660c:	782b      	ldrb	r3, [r5, #0]
   1660e:	2b01      	cmp	r3, #1
   16610:	d104      	bne.n	1661c <bt_id_create+0x34>
   16612:	79ab      	ldrb	r3, [r5, #6]
   16614:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16618:	2bc0      	cmp	r3, #192	; 0xc0
   1661a:	d004      	beq.n	16626 <bt_id_create+0x3e>
			BT_ERR("Only static random identity address supported");
   1661c:	4818      	ldr	r0, [pc, #96]	; (16680 <bt_id_create+0x98>)
   1661e:	2145      	movs	r1, #69	; 0x45
   16620:	f00f ff7b 	bl	2651a <z_log_minimal_printk>
			return -EINVAL;
   16624:	e7e5      	b.n	165f2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   16626:	4628      	mov	r0, r5
   16628:	f7ff fdf6 	bl	16218 <id_find>
   1662c:	2800      	cmp	r0, #0
   1662e:	dbdf      	blt.n	165f0 <bt_id_create+0x8>
			return -EALREADY;
   16630:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   16634:	b002      	add	sp, #8
   16636:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   16638:	4e12      	ldr	r6, [pc, #72]	; (16684 <bt_id_create+0x9c>)
   1663a:	79f3      	ldrb	r3, [r6, #7]
   1663c:	2b01      	cmp	r3, #1
   1663e:	d01c      	beq.n	1667a <bt_id_create+0x92>
   16640:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   16644:	f010 ffd9 	bl	275fa <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16648:	07c3      	lsls	r3, r0, #31
   1664a:	d40b      	bmi.n	16664 <bt_id_create+0x7c>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1664c:	2d00      	cmp	r5, #0
   1664e:	d0d0      	beq.n	165f2 <bt_id_create+0xa>
   16650:	2207      	movs	r2, #7
   16652:	4669      	mov	r1, sp
   16654:	4628      	mov	r0, r5
   16656:	9400      	str	r4, [sp, #0]
   16658:	f8cd 4003 	str.w	r4, [sp, #3]
   1665c:	f010 fdba 	bl	271d4 <memcmp>
   16660:	2800      	cmp	r0, #0
   16662:	d0c6      	beq.n	165f2 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   16664:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   16666:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   16668:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   1666a:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   1666c:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   1666e:	f7ff fe1b 	bl	162a8 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   16672:	2800      	cmp	r0, #0
   16674:	bf08      	it	eq
   16676:	4620      	moveq	r0, r4
   16678:	e7dc      	b.n	16634 <bt_id_create+0x4c>
		return -ENOMEM;
   1667a:	f06f 000b 	mvn.w	r0, #11
   1667e:	e7d9      	b.n	16634 <bt_id_create+0x4c>
   16680:	0002bea6 	.word	0x0002bea6
   16684:	20000350 	.word	0x20000350

00016688 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   16688:	b570      	push	{r4, r5, r6, lr}
   1668a:	b086      	sub	sp, #24
   1668c:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1668e:	aa01      	add	r2, sp, #4
   16690:	2100      	movs	r1, #0
   16692:	f241 0009 	movw	r0, #4105	; 0x1009
   16696:	f7ff f875 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   1669a:	4604      	mov	r4, r0
   1669c:	b130      	cbz	r0, 166ac <bt_id_read_public_addr+0x24>
		BT_WARN("Failed to read public address");
   1669e:	4817      	ldr	r0, [pc, #92]	; (166fc <bt_id_read_public_addr+0x74>)
   166a0:	2157      	movs	r1, #87	; 0x57
   166a2:	f00f ff3a 	bl	2651a <z_log_minimal_printk>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   166a6:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   166a8:	b006      	add	sp, #24
   166aa:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   166ac:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   166ae:	9002      	str	r0, [sp, #8]
   166b0:	689d      	ldr	r5, [r3, #8]
   166b2:	f8ad 000c 	strh.w	r0, [sp, #12]
   166b6:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   166b8:	2206      	movs	r2, #6
   166ba:	a902      	add	r1, sp, #8
   166bc:	4628      	mov	r0, r5
   166be:	f010 fd89 	bl	271d4 <memcmp>
   166c2:	b918      	cbnz	r0, 166cc <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
   166c4:	9801      	ldr	r0, [sp, #4]
   166c6:	f006 f899 	bl	1c7fc <net_buf_unref>
   166ca:	e7ec      	b.n	166a6 <bt_id_read_public_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   166cc:	4b0c      	ldr	r3, [pc, #48]	; (16700 <bt_id_read_public_addr+0x78>)
   166ce:	6818      	ldr	r0, [r3, #0]
   166d0:	9004      	str	r0, [sp, #16]
   166d2:	889b      	ldrh	r3, [r3, #4]
   166d4:	f8ad 3014 	strh.w	r3, [sp, #20]
   166d8:	2206      	movs	r2, #6
   166da:	a904      	add	r1, sp, #16
   166dc:	4628      	mov	r0, r5
   166de:	f010 fd79 	bl	271d4 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   166e2:	2800      	cmp	r0, #0
   166e4:	d0ee      	beq.n	166c4 <bt_id_read_public_addr+0x3c>
	memcpy(dst, src, sizeof(*dst));
   166e6:	2206      	movs	r2, #6
   166e8:	4629      	mov	r1, r5
   166ea:	1c70      	adds	r0, r6, #1
   166ec:	f010 fd9b 	bl	27226 <memcpy>
	net_buf_unref(rsp);
   166f0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   166f2:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   166f4:	f006 f882 	bl	1c7fc <net_buf_unref>
	return 1U;
   166f8:	2001      	movs	r0, #1
   166fa:	e7d5      	b.n	166a8 <bt_id_read_public_addr+0x20>
   166fc:	0002bed9 	.word	0x0002bed9
   16700:	0002a13b 	.word	0x0002a13b

00016704 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   16704:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   16706:	4668      	mov	r0, sp
   16708:	f7ff ffbe 	bl	16688 <bt_id_read_public_addr>
   1670c:	4b04      	ldr	r3, [pc, #16]	; (16720 <bt_setup_public_id_addr+0x1c>)
   1670e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   16710:	b118      	cbz	r0, 1671a <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   16712:	4669      	mov	r1, sp
   16714:	2000      	movs	r0, #0
   16716:	f7ff fdc7 	bl	162a8 <id_create.constprop.0>
}
   1671a:	b003      	add	sp, #12
   1671c:	f85d fb04 	ldr.w	pc, [sp], #4
   16720:	20000350 	.word	0x20000350

00016724 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   16724:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16728:	4b1c      	ldr	r3, [pc, #112]	; (1679c <bt_read_static_addr+0x78>)
   1672a:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   1672e:	f014 0401 	ands.w	r4, r4, #1
{
   16732:	4607      	mov	r7, r0
   16734:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16736:	d104      	bne.n	16742 <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   16738:	4819      	ldr	r0, [pc, #100]	; (167a0 <bt_read_static_addr+0x7c>)
   1673a:	2157      	movs	r1, #87	; 0x57
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   1673c:	f00f feed 	bl	2651a <z_log_minimal_printk>
   16740:	e00c      	b.n	1675c <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   16742:	aa01      	add	r2, sp, #4
   16744:	2100      	movs	r1, #0
   16746:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1674a:	f7ff f81b 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   1674e:	4605      	mov	r5, r0
   16750:	b140      	cbz	r0, 16764 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   16752:	4814      	ldr	r0, [pc, #80]	; (167a4 <bt_read_static_addr+0x80>)
   16754:	2157      	movs	r1, #87	; 0x57
   16756:	f00f fee0 	bl	2651a <z_log_minimal_printk>
		return 0;
   1675a:	2400      	movs	r4, #0
	}

	return cnt;
}
   1675c:	4620      	mov	r0, r4
   1675e:	b002      	add	sp, #8
   16760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   16764:	9b01      	ldr	r3, [sp, #4]
   16766:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   16768:	785c      	ldrb	r4, [r3, #1]
   1676a:	42b4      	cmp	r4, r6
   1676c:	bf28      	it	cs
   1676e:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   16770:	f04f 0816 	mov.w	r8, #22
   16774:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   16776:	42a5      	cmp	r5, r4
   16778:	db07      	blt.n	1678a <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   1677a:	9801      	ldr	r0, [sp, #4]
   1677c:	f006 f83e 	bl	1c7fc <net_buf_unref>
	if (!cnt) {
   16780:	2c00      	cmp	r4, #0
   16782:	d1eb      	bne.n	1675c <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   16784:	4808      	ldr	r0, [pc, #32]	; (167a8 <bt_read_static_addr+0x84>)
   16786:	2157      	movs	r1, #87	; 0x57
   16788:	e7d8      	b.n	1673c <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1678a:	fb08 7005 	mla	r0, r8, r5, r7
   1678e:	2216      	movs	r2, #22
   16790:	4631      	mov	r1, r6
   16792:	f010 fd48 	bl	27226 <memcpy>
	for (i = 0; i < cnt; i++) {
   16796:	3501      	adds	r5, #1
   16798:	e7ed      	b.n	16776 <bt_read_static_addr+0x52>
   1679a:	bf00      	nop
   1679c:	20000350 	.word	0x20000350
   167a0:	0002befc 	.word	0x0002befc
   167a4:	0002bf2d 	.word	0x0002bf2d
   167a8:	0002bf52 	.word	0x0002bf52

000167ac <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   167ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   167ae:	4e15      	ldr	r6, [pc, #84]	; (16804 <bt_setup_random_id_addr+0x58>)
   167b0:	79f4      	ldrb	r4, [r6, #7]
{
   167b2:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   167b4:	b9f4      	cbnz	r4, 167f4 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   167b6:	2101      	movs	r1, #1
   167b8:	a802      	add	r0, sp, #8
   167ba:	f7ff ffb3 	bl	16724 <bt_read_static_addr>
   167be:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   167c0:	b1c0      	cbz	r0, 167f4 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   167c2:	2716      	movs	r7, #22
   167c4:	ab02      	add	r3, sp, #8
   167c6:	b2e5      	uxtb	r5, r4
   167c8:	fb07 3105 	mla	r1, r7, r5, r3
   167cc:	2206      	movs	r2, #6
   167ce:	f10d 0001 	add.w	r0, sp, #1
   167d2:	f010 fd28 	bl	27226 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   167d6:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   167d8:	4669      	mov	r1, sp
   167da:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   167dc:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   167e0:	f7ff fd62 	bl	162a8 <id_create.constprop.0>
				if (err) {
   167e4:	b920      	cbnz	r0, 167f0 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   167e6:	79f2      	ldrb	r2, [r6, #7]
   167e8:	3401      	adds	r4, #1
   167ea:	b2e3      	uxtb	r3, r4
   167ec:	429a      	cmp	r2, r3
   167ee:	d8e9      	bhi.n	167c4 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   167f0:	b009      	add	sp, #36	; 0x24
   167f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   167f4:	2100      	movs	r1, #0
   167f6:	4608      	mov	r0, r1
}
   167f8:	b009      	add	sp, #36	; 0x24
   167fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   167fe:	f7ff bef3 	b.w	165e8 <bt_id_create>
   16802:	bf00      	nop
   16804:	20000350 	.word	0x20000350

00016808 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   16808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1680c:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   16810:	7805      	ldrb	r5, [r0, #0]
{
   16812:	460e      	mov	r6, r1
   16814:	4690      	mov	r8, r2
   16816:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16818:	d026      	beq.n	16868 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1681a:	4c23      	ldr	r4, [pc, #140]	; (168a8 <bt_id_set_adv_own_addr+0xa0>)
   1681c:	b12a      	cbz	r2, 1682a <bt_id_set_adv_own_addr+0x22>
   1681e:	0688      	lsls	r0, r1, #26
   16820:	d503      	bpl.n	1682a <bt_id_set_adv_own_addr+0x22>
   16822:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   16826:	0659      	lsls	r1, r3, #25
   16828:	d53a      	bpl.n	168a0 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1682a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   1682e:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   16832:	5ce3      	ldrb	r3, [r4, r3]
   16834:	2b01      	cmp	r3, #1
   16836:	d008      	beq.n	1684a <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   16838:	eba9 0505 	sub.w	r5, r9, r5
   1683c:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1683e:	f1b8 0f00 	cmp.w	r8, #0
   16842:	d10c      	bne.n	1685e <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   16844:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   16846:	2000      	movs	r0, #0
   16848:	e007      	b.n	1685a <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1684a:	2007      	movs	r0, #7
   1684c:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   16850:	4420      	add	r0, r4
   16852:	f7ff fcfb 	bl	1624c <set_random_address>
				if (err) {
   16856:	2800      	cmp	r0, #0
   16858:	d0ee      	beq.n	16838 <bt_id_set_adv_own_addr+0x30>
}
   1685a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1685e:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   16860:	bf48      	it	mi
   16862:	f043 0302 	orrmi.w	r3, r3, #2
   16866:	e7ed      	b.n	16844 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   16868:	074b      	lsls	r3, r1, #29
   1686a:	d515      	bpl.n	16898 <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1686c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 168a8 <bt_id_set_adv_own_addr+0xa0>
   16870:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   16874:	00ee      	lsls	r6, r5, #3
   16876:	f818 3003 	ldrb.w	r3, [r8, r3]
   1687a:	2b01      	cmp	r3, #1
   1687c:	d10a      	bne.n	16894 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1687e:	2007      	movs	r0, #7
   16880:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   16884:	4440      	add	r0, r8
   16886:	f7ff fce1 	bl	1624c <set_random_address>
			*own_addr_type = id_addr->type;
   1688a:	1b75      	subs	r5, r6, r5
   1688c:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   16890:	703b      	strb	r3, [r7, #0]
		if (err) {
   16892:	e7e2      	b.n	1685a <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   16894:	4620      	mov	r0, r4
   16896:	e7f8      	b.n	1688a <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   16898:	f010 ff40 	bl	2771c <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1689c:	2301      	movs	r3, #1
   1689e:	e7f7      	b.n	16890 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
   168a0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   168a4:	e7d9      	b.n	1685a <bt_id_set_adv_own_addr+0x52>
   168a6:	bf00      	nop
   168a8:	20000350 	.word	0x20000350

000168ac <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   168ac:	6843      	ldr	r3, [r0, #4]
{
   168ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   168b0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   168b2:	0558      	lsls	r0, r3, #21
   168b4:	d502      	bpl.n	168bc <valid_adv_param+0x10>
		return false;
   168b6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   168b8:	b003      	add	sp, #12
   168ba:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   168bc:	6922      	ldr	r2, [r4, #16]
   168be:	b10a      	cbz	r2, 168c4 <valid_adv_param+0x18>
   168c0:	07d9      	lsls	r1, r3, #31
   168c2:	d5f8      	bpl.n	168b6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   168c4:	4d1a      	ldr	r5, [pc, #104]	; (16930 <valid_adv_param+0x84>)
   168c6:	7820      	ldrb	r0, [r4, #0]
   168c8:	79eb      	ldrb	r3, [r5, #7]
   168ca:	4283      	cmp	r3, r0
   168cc:	d9f3      	bls.n	168b6 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   168ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   168d2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   168d4:	2207      	movs	r2, #7
   168d6:	4669      	mov	r1, sp
   168d8:	4428      	add	r0, r5
   168da:	9300      	str	r3, [sp, #0]
   168dc:	f8cd 3003 	str.w	r3, [sp, #3]
   168e0:	f010 fc78 	bl	271d4 <memcmp>
	if (param->id >= bt_dev.id_count ||
   168e4:	2800      	cmp	r0, #0
   168e6:	d0e6      	beq.n	168b6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   168e8:	6860      	ldr	r0, [r4, #4]
   168ea:	07c2      	lsls	r2, r0, #31
   168ec:	d406      	bmi.n	168fc <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   168ee:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   168f2:	2b08      	cmp	r3, #8
   168f4:	d802      	bhi.n	168fc <valid_adv_param+0x50>
   168f6:	68a3      	ldr	r3, [r4, #8]
   168f8:	2b9f      	cmp	r3, #159	; 0x9f
   168fa:	d9dc      	bls.n	168b6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   168fc:	f010 0f30 	tst.w	r0, #48	; 0x30
   16900:	d002      	beq.n	16908 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   16902:	6923      	ldr	r3, [r4, #16]
   16904:	2b00      	cmp	r3, #0
   16906:	d0d6      	beq.n	168b6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   16908:	06c3      	lsls	r3, r0, #27
   1690a:	d401      	bmi.n	16910 <valid_adv_param+0x64>
   1690c:	6923      	ldr	r3, [r4, #16]
   1690e:	b943      	cbnz	r3, 16922 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   16910:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   16914:	429a      	cmp	r2, r3
   16916:	d8ce      	bhi.n	168b6 <valid_adv_param+0xa>
   16918:	2a1f      	cmp	r2, #31
   1691a:	d9cc      	bls.n	168b6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1691c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   16920:	d8c9      	bhi.n	168b6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   16922:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   16926:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1692a:	bf18      	it	ne
   1692c:	2001      	movne	r0, #1
   1692e:	e7c3      	b.n	168b8 <valid_adv_param+0xc>
   16930:	20000350 	.word	0x20000350

00016934 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   16934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16938:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1693a:	2120      	movs	r1, #32
{
   1693c:	4682      	mov	sl, r0
   1693e:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   16940:	f7fe fed8 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   16944:	4605      	mov	r5, r0
   16946:	2800      	cmp	r0, #0
   16948:	d056      	beq.n	169f8 <hci_set_ad+0xc4>
   1694a:	2120      	movs	r1, #32
   1694c:	3008      	adds	r0, #8
   1694e:	f006 f86b 	bl	1ca28 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   16952:	2220      	movs	r2, #32
   16954:	2100      	movs	r1, #0
   16956:	4681      	mov	r9, r0
   16958:	f010 fc70 	bl	2723c <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1695c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   16960:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   16964:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   16966:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   16968:	f8d4 8000 	ldr.w	r8, [r4]
   1696c:	2300      	movs	r3, #0
   1696e:	6862      	ldr	r2, [r4, #4]
   16970:	4293      	cmp	r3, r2
   16972:	d30d      	bcc.n	16990 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   16974:	9b00      	ldr	r3, [sp, #0]
   16976:	3408      	adds	r4, #8
   16978:	429c      	cmp	r4, r3
   1697a:	d1f5      	bne.n	16968 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1697c:	2200      	movs	r2, #0
   1697e:	4629      	mov	r1, r5
   16980:	4650      	mov	r0, sl
	*data_len = set_data_len;
   16982:	f889 6000 	strb.w	r6, [r9]
}
   16986:	b003      	add	sp, #12
   16988:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1698c:	f7fe befa 	b.w	15784 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   16990:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   16994:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   16998:	1cb0      	adds	r0, r6, #2
   1699a:	1881      	adds	r1, r0, r2
   1699c:	291f      	cmp	r1, #31
   1699e:	d914      	bls.n	169ca <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   169a0:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   169a4:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   169a8:	d101      	bne.n	169ae <hci_set_ad+0x7a>
   169aa:	2a00      	cmp	r2, #0
   169ac:	dc0b      	bgt.n	169c6 <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
   169ae:	4814      	ldr	r0, [pc, #80]	; (16a00 <hci_set_ad+0xcc>)
   169b0:	2145      	movs	r1, #69	; 0x45
   169b2:	f00f fdb2 	bl	2651a <z_log_minimal_printk>
		net_buf_unref(buf);
   169b6:	4628      	mov	r0, r5
   169b8:	f005 ff20 	bl	1c7fc <net_buf_unref>
					return -EINVAL;
   169bc:	f06f 0015 	mvn.w	r0, #21
}
   169c0:	b003      	add	sp, #12
   169c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   169c6:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   169ca:	b2d7      	uxtb	r7, r2
   169cc:	1c79      	adds	r1, r7, #1
   169ce:	f80b 1006 	strb.w	r1, [fp, r6]
   169d2:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   169d4:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   169d6:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   169da:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   169de:	f8d8 1004 	ldr.w	r1, [r8, #4]
   169e2:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   169e4:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   169e6:	f010 fc1e 	bl	27226 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   169ea:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   169ec:	443e      	add	r6, r7
   169ee:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   169f0:	3301      	adds	r3, #1
   169f2:	f108 0808 	add.w	r8, r8, #8
   169f6:	e7ba      	b.n	1696e <hci_set_ad+0x3a>
		return -ENOBUFS;
   169f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   169fc:	e7e0      	b.n	169c0 <hci_set_ad+0x8c>
   169fe:	bf00      	nop
   16a00:	0002bf86 	.word	0x0002bf86

00016a04 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   16a04:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   16a06:	4606      	mov	r6, r0
   16a08:	4b1e      	ldr	r3, [pc, #120]	; (16a84 <le_adv_start_add_conn+0x80>)
   16a0a:	f816 2b09 	ldrb.w	r2, [r6], #9
   16a0e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   16a12:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16a14:	2300      	movs	r3, #0
{
   16a16:	4605      	mov	r5, r0
   16a18:	2207      	movs	r2, #7
   16a1a:	460f      	mov	r7, r1
   16a1c:	4630      	mov	r0, r6
   16a1e:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16a20:	9300      	str	r3, [sp, #0]
   16a22:	f8cd 3003 	str.w	r3, [sp, #3]
   16a26:	f010 fbd5 	bl	271d4 <memcmp>
   16a2a:	782a      	ldrb	r2, [r5, #0]
   16a2c:	4604      	mov	r4, r0
   16a2e:	b9a8      	cbnz	r0, 16a5c <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   16a30:	4b15      	ldr	r3, [pc, #84]	; (16a88 <le_adv_start_add_conn+0x84>)
   16a32:	6818      	ldr	r0, [r3, #0]
   16a34:	8899      	ldrh	r1, [r3, #4]
   16a36:	9002      	str	r0, [sp, #8]
   16a38:	799b      	ldrb	r3, [r3, #6]
   16a3a:	f8ad 100c 	strh.w	r1, [sp, #12]
   16a3e:	4610      	mov	r0, r2
   16a40:	a902      	add	r1, sp, #8
   16a42:	f88d 300e 	strb.w	r3, [sp, #14]
   16a46:	f001 f85b 	bl	17b00 <bt_conn_add_le>
		if (!conn) {
   16a4a:	4605      	mov	r5, r0
   16a4c:	b1b8      	cbz	r0, 16a7e <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   16a4e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   16a50:	f000 fe10 	bl	17674 <bt_conn_set_state>
	*out_conn = conn;
   16a54:	603d      	str	r5, [r7, #0]
	return 0;
}
   16a56:	4620      	mov	r0, r4
   16a58:	b005      	add	sp, #20
   16a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   16a5c:	4631      	mov	r1, r6
   16a5e:	4610      	mov	r0, r2
   16a60:	f001 f888 	bl	17b74 <bt_conn_exists_le>
   16a64:	4604      	mov	r4, r0
   16a66:	b938      	cbnz	r0, 16a78 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   16a68:	7828      	ldrb	r0, [r5, #0]
   16a6a:	4631      	mov	r1, r6
   16a6c:	f001 f848 	bl	17b00 <bt_conn_add_le>
	if (!conn) {
   16a70:	4605      	mov	r5, r0
   16a72:	b120      	cbz	r0, 16a7e <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   16a74:	2105      	movs	r1, #5
   16a76:	e7eb      	b.n	16a50 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   16a78:	f06f 0415 	mvn.w	r4, #21
   16a7c:	e7eb      	b.n	16a56 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   16a7e:	f06f 040b 	mvn.w	r4, #11
   16a82:	e7e8      	b.n	16a56 <le_adv_start_add_conn+0x52>
   16a84:	20000350 	.word	0x20000350
   16a88:	0002a141 	.word	0x0002a141

00016a8c <bt_le_ext_adv_foreach>:
{
   16a8c:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   16a8e:	4801      	ldr	r0, [pc, #4]	; (16a94 <bt_le_ext_adv_foreach+0x8>)
   16a90:	4718      	bx	r3
   16a92:	bf00      	nop
   16a94:	20000368 	.word	0x20000368

00016a98 <bt_le_adv_lookup_legacy>:
}
   16a98:	4800      	ldr	r0, [pc, #0]	; (16a9c <bt_le_adv_lookup_legacy+0x4>)
   16a9a:	4770      	bx	lr
   16a9c:	20000368 	.word	0x20000368

00016aa0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   16aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   16aa4:	690e      	ldr	r6, [r1, #16]
{
   16aa6:	b08f      	sub	sp, #60	; 0x3c
   16aa8:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   16aaa:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   16aac:	ebb6 0903 	subs.w	r9, r6, r3
{
   16ab0:	4605      	mov	r5, r0
   16ab2:	488e      	ldr	r0, [pc, #568]	; (16cec <bt_le_adv_start_legacy+0x24c>)
   16ab4:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   16ab6:	bf18      	it	ne
   16ab8:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
   16abc:	9307      	str	r3, [sp, #28]
   16abe:	f010 fe62 	bl	27786 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16ac2:	0747      	lsls	r7, r0, #29
{
   16ac4:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16ac6:	f140 8106 	bpl.w	16cd6 <bt_le_adv_start_legacy+0x236>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   16aca:	4608      	mov	r0, r1
   16acc:	f7ff feee 	bl	168ac <valid_adv_param>
   16ad0:	b928      	cbnz	r0, 16ade <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   16ad2:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   16ad6:	4658      	mov	r0, fp
   16ad8:	b00f      	add	sp, #60	; 0x3c
   16ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   16ade:	4620      	mov	r0, r4
   16ae0:	f010 fe2e 	bl	27740 <bt_id_adv_random_addr_check>
   16ae4:	4680      	mov	r8, r0
   16ae6:	2800      	cmp	r0, #0
   16ae8:	d0f3      	beq.n	16ad2 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   16aea:	f105 0710 	add.w	r7, r5, #16
   16aee:	4638      	mov	r0, r7
   16af0:	f010 fe49 	bl	27786 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16af4:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   16af8:	0640      	lsls	r0, r0, #25
   16afa:	f100 80ef 	bmi.w	16cdc <bt_le_adv_start_legacy+0x23c>
	(void)memset(&set_param, 0, sizeof(set_param));
   16afe:	220f      	movs	r2, #15
   16b00:	4659      	mov	r1, fp
   16b02:	a80a      	add	r0, sp, #40	; 0x28
   16b04:	f010 fb9a 	bl	2723c <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   16b08:	68a3      	ldr	r3, [r4, #8]
   16b0a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   16b0e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   16b10:	68e3      	ldr	r3, [r4, #12]
   16b12:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   16b16:	f010 fe27 	bl	27768 <get_adv_channel_map>
	if (adv->id != param->id) {
   16b1a:	782a      	ldrb	r2, [r5, #0]
   16b1c:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   16b1e:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   16b22:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   16b24:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   16b28:	d004      	beq.n	16b34 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16b2a:	4870      	ldr	r0, [pc, #448]	; (16cec <bt_le_adv_start_legacy+0x24c>)
   16b2c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   16b30:	f010 fe2f 	bl	27792 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   16b34:	4a6e      	ldr	r2, [pc, #440]	; (16cf0 <bt_le_adv_start_legacy+0x250>)
	adv->id = param->id;
   16b36:	7823      	ldrb	r3, [r4, #0]
   16b38:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   16b3a:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   16b3e:	6861      	ldr	r1, [r4, #4]
   16b40:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   16b44:	464a      	mov	r2, r9
   16b46:	4628      	mov	r0, r5
   16b48:	f7ff fe5e 	bl	16808 <bt_id_set_adv_own_addr>
	if (err) {
   16b4c:	4683      	mov	fp, r0
   16b4e:	2800      	cmp	r0, #0
   16b50:	d1c1      	bne.n	16ad6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   16b52:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   16b56:	2e00      	cmp	r6, #0
   16b58:	d04c      	beq.n	16bf4 <bt_le_adv_start_legacy+0x154>
	memcpy(dst, src, sizeof(*dst));
   16b5a:	6921      	ldr	r1, [r4, #16]
   16b5c:	2207      	movs	r2, #7
   16b5e:	f010 fb62 	bl	27226 <memcpy>
	name_type = get_adv_name_type_param(param);
   16b62:	4620      	mov	r0, r4
   16b64:	f010 feb2 	bl	278cc <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16b68:	6863      	ldr	r3, [r4, #4]
   16b6a:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   16b6c:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16b6e:	d54a      	bpl.n	16c06 <bt_le_adv_start_legacy+0x166>
		if (dir_adv) {
   16b70:	2e00      	cmp	r6, #0
   16b72:	d045      	beq.n	16c00 <bt_le_adv_start_legacy+0x160>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   16b74:	f013 0f10 	tst.w	r3, #16
   16b78:	bf14      	ite	ne
   16b7a:	2304      	movne	r3, #4
   16b7c:	2301      	moveq	r3, #1
   16b7e:	6921      	ldr	r1, [r4, #16]
   16b80:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   16b84:	2207      	movs	r2, #7
   16b86:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   16b8a:	f010 fb4c 	bl	27226 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   16b8e:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   16b92:	210f      	movs	r1, #15
   16b94:	f242 0006 	movw	r0, #8198	; 0x2006
   16b98:	f7fe fdac 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   16b9c:	4683      	mov	fp, r0
   16b9e:	2800      	cmp	r0, #0
   16ba0:	f000 809f 	beq.w	16ce2 <bt_le_adv_start_legacy+0x242>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16ba4:	220f      	movs	r2, #15
   16ba6:	a90a      	add	r1, sp, #40	; 0x28
   16ba8:	3008      	adds	r0, #8
   16baa:	f012 fbad 	bl	29308 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   16bae:	2200      	movs	r2, #0
   16bb0:	4659      	mov	r1, fp
   16bb2:	f242 0006 	movw	r0, #8198	; 0x2006
   16bb6:	f7fe fde5 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   16bba:	2800      	cmp	r0, #0
   16bbc:	f040 8094 	bne.w	16ce8 <bt_le_adv_start_legacy+0x248>
	if (!dir_adv) {
   16bc0:	b38e      	cbz	r6, 16c26 <bt_le_adv_start_legacy+0x186>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16bc2:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16bc4:	07db      	lsls	r3, r3, #31
   16bc6:	d43c      	bmi.n	16c42 <bt_le_adv_start_legacy+0x1a2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   16bc8:	2101      	movs	r1, #1
   16bca:	4628      	mov	r0, r5
   16bcc:	f010 fe8e 	bl	278ec <bt_le_adv_set_enable_legacy>
	if (err) {
   16bd0:	4683      	mov	fp, r0
   16bd2:	2800      	cmp	r0, #0
   16bd4:	d078      	beq.n	16cc8 <bt_le_adv_start_legacy+0x228>
		BT_ERR("Failed to start advertiser");
   16bd6:	4847      	ldr	r0, [pc, #284]	; (16cf4 <bt_le_adv_start_legacy+0x254>)
   16bd8:	2145      	movs	r1, #69	; 0x45
   16bda:	f00f fc9e 	bl	2651a <z_log_minimal_printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16bde:	9807      	ldr	r0, [sp, #28]
   16be0:	2800      	cmp	r0, #0
   16be2:	f43f af78 	beq.w	16ad6 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16be6:	2100      	movs	r1, #0
   16be8:	f000 fd44 	bl	17674 <bt_conn_set_state>
			bt_conn_unref(conn);
   16bec:	9807      	ldr	r0, [sp, #28]
   16bee:	f000 fd09 	bl	17604 <bt_conn_unref>
   16bf2:	e770      	b.n	16ad6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   16bf4:	9608      	str	r6, [sp, #32]
   16bf6:	2207      	movs	r2, #7
   16bf8:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   16bfc:	a908      	add	r1, sp, #32
   16bfe:	e7ae      	b.n	16b5e <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
   16c00:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   16c04:	e7c5      	b.n	16b92 <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   16c06:	059a      	lsls	r2, r3, #22
   16c08:	d403      	bmi.n	16c12 <bt_le_adv_start_legacy+0x172>
   16c0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16c0c:	b90b      	cbnz	r3, 16c12 <bt_le_adv_start_legacy+0x172>
   16c0e:	2802      	cmp	r0, #2
   16c10:	d103      	bne.n	16c1a <bt_le_adv_start_legacy+0x17a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   16c12:	2302      	movs	r3, #2
   16c14:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   16c18:	e7bb      	b.n	16b92 <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   16c1a:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   16c1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   16c20:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   16c24:	e7b5      	b.n	16b92 <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   16c26:	9b19      	ldr	r3, [sp, #100]	; 0x64
   16c28:	9300      	str	r3, [sp, #0]
   16c2a:	e9cd 8901 	strd	r8, r9, [sp, #4]
   16c2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16c30:	9905      	ldr	r1, [sp, #20]
   16c32:	4652      	mov	r2, sl
   16c34:	4628      	mov	r0, r5
   16c36:	f010 fdd2 	bl	277de <le_adv_update.constprop.0>
		if (err) {
   16c3a:	4683      	mov	fp, r0
   16c3c:	2800      	cmp	r0, #0
   16c3e:	d0c0      	beq.n	16bc2 <bt_le_adv_start_legacy+0x122>
   16c40:	e749      	b.n	16ad6 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   16c42:	a907      	add	r1, sp, #28
   16c44:	4628      	mov	r0, r5
   16c46:	f7ff fedd 	bl	16a04 <le_adv_start_add_conn>
		if (err) {
   16c4a:	4683      	mov	fp, r0
   16c4c:	2800      	cmp	r0, #0
   16c4e:	d0bb      	beq.n	16bc8 <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
   16c50:	f110 0f0c 	cmn.w	r0, #12
   16c54:	f47f af3f 	bne.w	16ad6 <bt_le_adv_start_legacy+0x36>
   16c58:	2e00      	cmp	r6, #0
   16c5a:	f47f af3c 	bne.w	16ad6 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   16c5e:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   16c60:	0798      	lsls	r0, r3, #30
   16c62:	f53f af38 	bmi.w	16ad6 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   16c66:	6862      	ldr	r2, [r4, #4]
   16c68:	f082 0202 	eor.w	r2, r2, #2
   16c6c:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   16c70:	f00b 0201 	and.w	r2, fp, #1
   16c74:	210d      	movs	r1, #13
   16c76:	4638      	mov	r0, r7
   16c78:	f010 fd9a 	bl	277b0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   16c7c:	f109 33ff 	add.w	r3, r9, #4294967295
   16c80:	425a      	negs	r2, r3
   16c82:	415a      	adcs	r2, r3
   16c84:	2107      	movs	r1, #7
   16c86:	4638      	mov	r0, r7
   16c88:	f010 fd92 	bl	277b0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   16c8c:	f1a9 0102 	sub.w	r1, r9, #2
   16c90:	424a      	negs	r2, r1
   16c92:	414a      	adcs	r2, r1
   16c94:	4638      	mov	r0, r7
   16c96:	2108      	movs	r1, #8
   16c98:	f010 fd8a 	bl	277b0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   16c9c:	6862      	ldr	r2, [r4, #4]
   16c9e:	2109      	movs	r1, #9
   16ca0:	f002 0201 	and.w	r2, r2, #1
   16ca4:	4638      	mov	r0, r7
   16ca6:	f010 fd83 	bl	277b0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   16caa:	4642      	mov	r2, r8
   16cac:	210a      	movs	r1, #10
   16cae:	4638      	mov	r0, r7
   16cb0:	f010 fd7e 	bl	277b0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   16cb4:	6862      	ldr	r2, [r4, #4]
   16cb6:	210c      	movs	r1, #12
   16cb8:	f3c2 0280 	ubfx	r2, r2, #2, #1
   16cbc:	4638      	mov	r0, r7
   16cbe:	f010 fd77 	bl	277b0 <atomic_set_bit_to>
	return 0;
   16cc2:	f04f 0b00 	mov.w	fp, #0
   16cc6:	e706      	b.n	16ad6 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16cc8:	9807      	ldr	r0, [sp, #28]
   16cca:	b108      	cbz	r0, 16cd0 <bt_le_adv_start_legacy+0x230>
		bt_conn_unref(conn);
   16ccc:	f000 fc9a 	bl	17604 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   16cd0:	2e00      	cmp	r6, #0
   16cd2:	d1cd      	bne.n	16c70 <bt_le_adv_start_legacy+0x1d0>
   16cd4:	e7c7      	b.n	16c66 <bt_le_adv_start_legacy+0x1c6>
		return -EAGAIN;
   16cd6:	f06f 0b0a 	mvn.w	fp, #10
   16cda:	e6fc      	b.n	16ad6 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   16cdc:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   16ce0:	e6f9      	b.n	16ad6 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   16ce2:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   16ce6:	e6f6      	b.n	16ad6 <bt_le_adv_start_legacy+0x36>
   16ce8:	4683      	mov	fp, r0
   16cea:	e6f4      	b.n	16ad6 <bt_le_adv_start_legacy+0x36>
   16cec:	2000041c 	.word	0x2000041c
   16cf0:	20000350 	.word	0x20000350
   16cf4:	0002bfa4 	.word	0x0002bfa4

00016cf8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   16cf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16cfa:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   16cfc:	9a06      	ldr	r2, [sp, #24]
{
   16cfe:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   16d00:	e9cd 3200 	strd	r3, r2, [sp]
   16d04:	462b      	mov	r3, r5
   16d06:	460a      	mov	r2, r1
   16d08:	4601      	mov	r1, r0
   16d0a:	4811      	ldr	r0, [pc, #68]	; (16d50 <bt_le_adv_start+0x58>)
   16d0c:	f7ff fec8 	bl	16aa0 <bt_le_adv_start_legacy>
   16d10:	4621      	mov	r1, r4
   16d12:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   16d14:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   16d16:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   16d1a:	429d      	cmp	r5, r3
   16d1c:	d102      	bne.n	16d24 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   16d1e:	4630      	mov	r0, r6
   16d20:	b002      	add	sp, #8
   16d22:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   16d24:	880a      	ldrh	r2, [r1, #0]
   16d26:	4282      	cmp	r2, r0
   16d28:	d104      	bne.n	16d34 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   16d2a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   16d2c:	b112      	cbz	r2, 16d34 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   16d2e:	7812      	ldrb	r2, [r2, #0]
   16d30:	07d2      	lsls	r2, r2, #31
   16d32:	d402      	bmi.n	16d3a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   16d34:	3301      	adds	r3, #1
   16d36:	3108      	adds	r1, #8
   16d38:	e7ef      	b.n	16d1a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   16d3a:	4906      	ldr	r1, [pc, #24]	; (16d54 <bt_le_adv_start+0x5c>)
   16d3c:	4806      	ldr	r0, [pc, #24]	; (16d58 <bt_le_adv_start+0x60>)
   16d3e:	f00a f9c3 	bl	210c8 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   16d42:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16d46:	2300      	movs	r3, #0
   16d48:	4803      	ldr	r0, [pc, #12]	; (16d58 <bt_le_adv_start+0x60>)
   16d4a:	f00a fab3 	bl	212b4 <k_work_reschedule>
   16d4e:	e7e6      	b.n	16d1e <bt_le_adv_start+0x26>
   16d50:	20000368 	.word	0x20000368
   16d54:	00016dfd 	.word	0x00016dfd
   16d58:	20000380 	.word	0x20000380

00016d5c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   16d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   16d5e:	4822      	ldr	r0, [pc, #136]	; (16de8 <bt_le_adv_stop+0x8c>)
   16d60:	f010 fdeb 	bl	2793a <bt_le_lim_adv_cancel_timeout>
   16d64:	4821      	ldr	r0, [pc, #132]	; (16dec <bt_le_adv_stop+0x90>)
   16d66:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   16d6a:	f010 fd12 	bl	27792 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16d6e:	481f      	ldr	r0, [pc, #124]	; (16dec <bt_le_adv_stop+0x90>)
   16d70:	f010 fd09 	bl	27786 <atomic_get>
   16d74:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   16d76:	065a      	lsls	r2, r3, #25
   16d78:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16d7c:	d531      	bpl.n	16de2 <bt_le_adv_stop+0x86>
   16d7e:	481b      	ldr	r0, [pc, #108]	; (16dec <bt_le_adv_stop+0x90>)
   16d80:	f010 fd01 	bl	27786 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16d84:	0583      	lsls	r3, r0, #22
   16d86:	d521      	bpl.n	16dcc <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16d88:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   16d8a:	4819      	ldr	r0, [pc, #100]	; (16df0 <bt_le_adv_stop+0x94>)
   16d8c:	9300      	str	r3, [sp, #0]
   16d8e:	2207      	movs	r2, #7
   16d90:	4669      	mov	r1, sp
   16d92:	f8cd 3003 	str.w	r3, [sp, #3]
   16d96:	f010 fa1d 	bl	271d4 <memcmp>
   16d9a:	4b16      	ldr	r3, [pc, #88]	; (16df4 <bt_le_adv_stop+0x98>)
   16d9c:	b9e8      	cbnz	r0, 16dda <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   16d9e:	4a16      	ldr	r2, [pc, #88]	; (16df8 <bt_le_adv_stop+0x9c>)
   16da0:	8891      	ldrh	r1, [r2, #4]
   16da2:	6810      	ldr	r0, [r2, #0]
   16da4:	7992      	ldrb	r2, [r2, #6]
   16da6:	f8ad 100c 	strh.w	r1, [sp, #12]
   16daa:	f88d 200e 	strb.w	r2, [sp, #14]
   16dae:	9002      	str	r0, [sp, #8]
   16db0:	2204      	movs	r2, #4
   16db2:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16db4:	7e18      	ldrb	r0, [r3, #24]
   16db6:	f000 fef9 	bl	17bac <bt_conn_lookup_state_le>
   16dba:	4604      	mov	r4, r0
	if (conn) {
   16dbc:	b130      	cbz	r0, 16dcc <bt_le_adv_stop+0x70>
		conn->err = status;
   16dbe:	2100      	movs	r1, #0
   16dc0:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16dc2:	f000 fc57 	bl	17674 <bt_conn_set_state>
		bt_conn_unref(conn);
   16dc6:	4620      	mov	r0, r4
   16dc8:	f000 fc1c 	bl	17604 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   16dcc:	4806      	ldr	r0, [pc, #24]	; (16de8 <bt_le_adv_stop+0x8c>)
   16dce:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   16dd0:	b004      	add	sp, #16
   16dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   16dd6:	f010 bd89 	b.w	278ec <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16dda:	2205      	movs	r2, #5
   16ddc:	f103 0121 	add.w	r1, r3, #33	; 0x21
   16de0:	e7e8      	b.n	16db4 <bt_le_adv_stop+0x58>
}
   16de2:	b004      	add	sp, #16
   16de4:	bd10      	pop	{r4, pc}
   16de6:	bf00      	nop
   16de8:	20000368 	.word	0x20000368
   16dec:	20000378 	.word	0x20000378
   16df0:	20000371 	.word	0x20000371
   16df4:	20000350 	.word	0x20000350
   16df8:	0002a141 	.word	0x0002a141

00016dfc <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   16dfc:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   16dfe:	f7ff ffad 	bl	16d5c <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
}
   16e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = bt_le_adv_stop();
   16e06:	4602      	mov	r2, r0
	BT_WARN("Failed to stop advertising: %d", err);
   16e08:	2157      	movs	r1, #87	; 0x57
   16e0a:	4801      	ldr	r0, [pc, #4]	; (16e10 <adv_timeout+0x14>)
   16e0c:	f00f bb85 	b.w	2651a <z_log_minimal_printk>
   16e10:	0002bfc4 	.word	0x0002bfc4

00016e14 <bt_le_adv_resume>:
{
   16e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16e16:	481e      	ldr	r0, [pc, #120]	; (16e90 <bt_le_adv_resume+0x7c>)
   16e18:	4c1d      	ldr	r4, [pc, #116]	; (16e90 <bt_le_adv_resume+0x7c>)
   16e1a:	f010 fcb4 	bl	27786 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   16e1e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   16e22:	d032      	beq.n	16e8a <bt_le_adv_resume+0x76>
   16e24:	4620      	mov	r0, r4
   16e26:	f010 fcae 	bl	27786 <atomic_get>
   16e2a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16e2c:	f3c0 1580 	ubfx	r5, r0, #6, #1
   16e30:	d42b      	bmi.n	16e8a <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16e32:	4620      	mov	r0, r4
   16e34:	f010 fca7 	bl	27786 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   16e38:	0583      	lsls	r3, r0, #22
   16e3a:	d526      	bpl.n	16e8a <bt_le_adv_resume+0x76>
	err = le_adv_start_add_conn(adv, &conn);
   16e3c:	a901      	add	r1, sp, #4
   16e3e:	f1a4 0010 	sub.w	r0, r4, #16
   16e42:	f7ff fddf 	bl	16a04 <le_adv_start_add_conn>
	if (err) {
   16e46:	bb00      	cbnz	r0, 16e8a <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   16e48:	2101      	movs	r1, #1
   16e4a:	f1a4 0010 	sub.w	r0, r4, #16
   16e4e:	f010 fd4d 	bl	278ec <bt_le_adv_set_enable_legacy>
	if (err) {
   16e52:	b150      	cbz	r0, 16e6a <bt_le_adv_resume+0x56>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16e54:	4629      	mov	r1, r5
   16e56:	9801      	ldr	r0, [sp, #4]
   16e58:	f000 fc0c 	bl	17674 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16e5c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   16e60:	4620      	mov	r0, r4
   16e62:	f010 fc96 	bl	27792 <atomic_and>
	return (old & mask) != 0;
   16e66:	f3c0 3540 	ubfx	r5, r0, #13, #1
	bt_conn_unref(conn);
   16e6a:	9801      	ldr	r0, [sp, #4]
   16e6c:	f000 fbca 	bl	17604 <bt_conn_unref>
	if (persist_paused) {
   16e70:	b15d      	cbz	r5, 16e8a <bt_le_adv_resume+0x76>
   16e72:	f3bf 8f5b 	dmb	ish
   16e76:	e854 3f00 	ldrex	r3, [r4]
   16e7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   16e7e:	e844 3200 	strex	r2, r3, [r4]
   16e82:	2a00      	cmp	r2, #0
   16e84:	d1f7      	bne.n	16e76 <bt_le_adv_resume+0x62>
   16e86:	f3bf 8f5b 	dmb	ish
}
   16e8a:	b003      	add	sp, #12
   16e8c:	bd30      	pop	{r4, r5, pc}
   16e8e:	bf00      	nop
   16e90:	20000378 	.word	0x20000378

00016e94 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   16e94:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   16e96:	4904      	ldr	r1, [pc, #16]	; (16ea8 <bt_pub_key_is_debug+0x14>)
   16e98:	2240      	movs	r2, #64	; 0x40
   16e9a:	f010 f99b 	bl	271d4 <memcmp>
}
   16e9e:	fab0 f080 	clz	r0, r0
   16ea2:	0940      	lsrs	r0, r0, #5
   16ea4:	bd08      	pop	{r3, pc}
   16ea6:	bf00      	nop
   16ea8:	0002c091 	.word	0x0002c091

00016eac <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   16eac:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   16eae:	4b37      	ldr	r3, [pc, #220]	; (16f8c <bt_pub_key_gen+0xe0>)
   16eb0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   16eb4:	f003 0306 	and.w	r3, r3, #6
   16eb8:	2b06      	cmp	r3, #6
   16eba:	d007      	beq.n	16ecc <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   16ebc:	4834      	ldr	r0, [pc, #208]	; (16f90 <bt_pub_key_gen+0xe4>)
   16ebe:	2157      	movs	r1, #87	; 0x57
   16ec0:	f00f fb2b 	bl	2651a <z_log_minimal_printk>
		return -ENOTSUP;
   16ec4:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   16ec8:	4628      	mov	r0, r5
   16eca:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   16ecc:	2800      	cmp	r0, #0
   16ece:	d05a      	beq.n	16f86 <bt_pub_key_gen+0xda>
	return list->head;
   16ed0:	4e30      	ldr	r6, [pc, #192]	; (16f94 <bt_pub_key_gen+0xe8>)
   16ed2:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16ed4:	b16a      	cbz	r2, 16ef2 <bt_pub_key_gen+0x46>
   16ed6:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   16ed8:	4298      	cmp	r0, r3
   16eda:	d106      	bne.n	16eea <bt_pub_key_gen+0x3e>
			BT_WARN("Callback already registered");
   16edc:	482e      	ldr	r0, [pc, #184]	; (16f98 <bt_pub_key_gen+0xec>)
   16ede:	2157      	movs	r1, #87	; 0x57
   16ee0:	f00f fb1b 	bl	2651a <z_log_minimal_printk>
			return -EALREADY;
   16ee4:	f06f 0577 	mvn.w	r5, #119	; 0x77
   16ee8:	e7ee      	b.n	16ec8 <bt_pub_key_gen+0x1c>
	return node->next;
   16eea:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16eec:	b10b      	cbz	r3, 16ef2 <bt_pub_key_gen+0x46>
   16eee:	3b04      	subs	r3, #4
   16ef0:	e7f2      	b.n	16ed8 <bt_pub_key_gen+0x2c>
	parent->next = child;
   16ef2:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   16ef4:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   16ef6:	1d03      	adds	r3, r0, #4
	list->head = node;
   16ef8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   16efa:	b902      	cbnz	r2, 16efe <bt_pub_key_gen+0x52>
	list->tail = node;
   16efc:	6073      	str	r3, [r6, #4]
   16efe:	4c27      	ldr	r4, [pc, #156]	; (16f9c <bt_pub_key_gen+0xf0>)
   16f00:	f3bf 8f5b 	dmb	ish
   16f04:	e854 2f00 	ldrex	r2, [r4]
   16f08:	f042 0320 	orr.w	r3, r2, #32
   16f0c:	e844 3100 	strex	r1, r3, [r4]
   16f10:	2900      	cmp	r1, #0
   16f12:	d1f7      	bne.n	16f04 <bt_pub_key_gen+0x58>
   16f14:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16f18:	f012 0220 	ands.w	r2, r2, #32
   16f1c:	d001      	beq.n	16f22 <bt_pub_key_gen+0x76>
		return 0;
   16f1e:	2500      	movs	r5, #0
   16f20:	e7d2      	b.n	16ec8 <bt_pub_key_gen+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16f22:	f3bf 8f5b 	dmb	ish
   16f26:	e854 3f00 	ldrex	r3, [r4]
   16f2a:	f023 0310 	bic.w	r3, r3, #16
   16f2e:	e844 3100 	strex	r1, r3, [r4]
   16f32:	2900      	cmp	r1, #0
   16f34:	d1f7      	bne.n	16f26 <bt_pub_key_gen+0x7a>
   16f36:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   16f3a:	4611      	mov	r1, r2
   16f3c:	f242 0025 	movw	r0, #8229	; 0x2025
   16f40:	f7fe fc20 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   16f44:	4605      	mov	r5, r0
   16f46:	2800      	cmp	r0, #0
   16f48:	d0e9      	beq.n	16f1e <bt_pub_key_gen+0x72>
		BT_ERR("Sending LE P256 Public Key command failed");
   16f4a:	4815      	ldr	r0, [pc, #84]	; (16fa0 <bt_pub_key_gen+0xf4>)
   16f4c:	2145      	movs	r1, #69	; 0x45
   16f4e:	f00f fae4 	bl	2651a <z_log_minimal_printk>
   16f52:	f3bf 8f5b 	dmb	ish
   16f56:	e854 3f00 	ldrex	r3, [r4]
   16f5a:	f023 0320 	bic.w	r3, r3, #32
   16f5e:	e844 3200 	strex	r2, r3, [r4]
   16f62:	2a00      	cmp	r2, #0
   16f64:	d1f7      	bne.n	16f56 <bt_pub_key_gen+0xaa>
   16f66:	f3bf 8f5b 	dmb	ish
	return list->head;
   16f6a:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f6c:	b13c      	cbz	r4, 16f7e <bt_pub_key_gen+0xd2>
			if (cb->func) {
   16f6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f72:	3c04      	subs	r4, #4
			if (cb->func) {
   16f74:	b10b      	cbz	r3, 16f7a <bt_pub_key_gen+0xce>
				cb->func(NULL);
   16f76:	2000      	movs	r0, #0
   16f78:	4798      	blx	r3
	return node->next;
   16f7a:	6864      	ldr	r4, [r4, #4]
   16f7c:	e7f6      	b.n	16f6c <bt_pub_key_gen+0xc0>
	list->head = NULL;
   16f7e:	2300      	movs	r3, #0
	list->tail = NULL;
   16f80:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   16f84:	e7a0      	b.n	16ec8 <bt_pub_key_gen+0x1c>
		return -EINVAL;
   16f86:	f06f 0515 	mvn.w	r5, #21
   16f8a:	e79d      	b.n	16ec8 <bt_pub_key_gen+0x1c>
   16f8c:	20000350 	.word	0x20000350
   16f90:	0002bfef 	.word	0x0002bfef
   16f94:	200024f8 	.word	0x200024f8
   16f98:	0002c013 	.word	0x0002c013
   16f9c:	2000041c 	.word	0x2000041c
   16fa0:	0002c034 	.word	0x0002c034

00016fa4 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16fa4:	4b05      	ldr	r3, [pc, #20]	; (16fbc <bt_pub_key_get+0x18>)
   16fa6:	f3bf 8f5b 	dmb	ish
   16faa:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   16fac:	4804      	ldr	r0, [pc, #16]	; (16fc0 <bt_pub_key_get+0x1c>)
   16fae:	f3bf 8f5b 	dmb	ish
		return pub_key;
   16fb2:	f013 0f10 	tst.w	r3, #16
}
   16fb6:	bf08      	it	eq
   16fb8:	2000      	moveq	r0, #0
   16fba:	4770      	bx	lr
   16fbc:	2000041c 	.word	0x2000041c
   16fc0:	20003471 	.word	0x20003471

00016fc4 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   16fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   16fc6:	4d22      	ldr	r5, [pc, #136]	; (17050 <bt_dh_key_gen+0x8c>)
   16fc8:	682b      	ldr	r3, [r5, #0]
   16fca:	428b      	cmp	r3, r1
{
   16fcc:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   16fce:	d039      	beq.n	17044 <bt_dh_key_gen+0x80>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16fd0:	b11b      	cbz	r3, 16fda <bt_dh_key_gen+0x16>
		return -EBUSY;
   16fd2:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   16fd6:	4620      	mov	r0, r4
   16fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16fda:	4b1e      	ldr	r3, [pc, #120]	; (17054 <bt_dh_key_gen+0x90>)
   16fdc:	f3bf 8f5b 	dmb	ish
   16fe0:	681a      	ldr	r2, [r3, #0]
   16fe2:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16fe6:	f3c2 1740 	ubfx	r7, r2, #5, #1
   16fea:	0692      	lsls	r2, r2, #26
   16fec:	d4f1      	bmi.n	16fd2 <bt_dh_key_gen+0xe>
   16fee:	f3bf 8f5b 	dmb	ish
   16ff2:	681b      	ldr	r3, [r3, #0]
   16ff4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   16ff8:	06db      	lsls	r3, r3, #27
   16ffa:	d526      	bpl.n	1704a <bt_dh_key_gen+0x86>
	dh_key_cb = cb;
   16ffc:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   16ffe:	f242 0026 	movw	r0, #8230	; 0x2026
   17002:	2140      	movs	r1, #64	; 0x40
   17004:	f7fe fb76 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   17008:	4604      	mov	r4, r0
   1700a:	b1c0      	cbz	r0, 1703e <bt_dh_key_gen+0x7a>
	return net_buf_simple_add(&buf->b, len);
   1700c:	2140      	movs	r1, #64	; 0x40
   1700e:	3008      	adds	r0, #8
   17010:	f005 fd0a 	bl	1ca28 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   17014:	2240      	movs	r2, #64	; 0x40
   17016:	4631      	mov	r1, r6
   17018:	f010 f905 	bl	27226 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   1701c:	4621      	mov	r1, r4
   1701e:	463a      	mov	r2, r7
   17020:	f242 0026 	movw	r0, #8230	; 0x2026
   17024:	f7fe fbae 	bl	15784 <bt_hci_cmd_send_sync>
	if (err) {
   17028:	4604      	mov	r4, r0
   1702a:	2800      	cmp	r0, #0
   1702c:	d0d3      	beq.n	16fd6 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   1702e:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
   17030:	4809      	ldr	r0, [pc, #36]	; (17058 <bt_dh_key_gen+0x94>)
		dh_key_cb = NULL;
   17032:	602b      	str	r3, [r5, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   17034:	4622      	mov	r2, r4
   17036:	2157      	movs	r1, #87	; 0x57
   17038:	f00f fa6f 	bl	2651a <z_log_minimal_printk>
		return err;
   1703c:	e7cb      	b.n	16fd6 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   1703e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17042:	e7f4      	b.n	1702e <bt_dh_key_gen+0x6a>
		return -EALREADY;
   17044:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17048:	e7c5      	b.n	16fd6 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   1704a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1704e:	e7c2      	b.n	16fd6 <bt_dh_key_gen+0x12>
   17050:	200024f4 	.word	0x200024f4
   17054:	2000041c 	.word	0x2000041c
   17058:	0002c063 	.word	0x0002c063

0001705c <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   1705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1705e:	4c1b      	ldr	r4, [pc, #108]	; (170cc <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   17060:	6886      	ldr	r6, [r0, #8]
   17062:	f3bf 8f5b 	dmb	ish
   17066:	e854 3f00 	ldrex	r3, [r4]
   1706a:	f023 0320 	bic.w	r3, r3, #32
   1706e:	e844 3200 	strex	r2, r3, [r4]
   17072:	2a00      	cmp	r2, #0
   17074:	d1f7      	bne.n	17066 <bt_hci_evt_le_pkey_complete+0xa>
   17076:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1707a:	7833      	ldrb	r3, [r6, #0]
   1707c:	b983      	cbnz	r3, 170a0 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   1707e:	4814      	ldr	r0, [pc, #80]	; (170d0 <bt_hci_evt_le_pkey_complete+0x74>)
   17080:	2240      	movs	r2, #64	; 0x40
   17082:	1c71      	adds	r1, r6, #1
   17084:	f010 f8cf 	bl	27226 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17088:	f3bf 8f5b 	dmb	ish
   1708c:	e854 3f00 	ldrex	r3, [r4]
   17090:	f043 0310 	orr.w	r3, r3, #16
   17094:	e844 3200 	strex	r2, r3, [r4]
   17098:	2a00      	cmp	r2, #0
   1709a:	d1f7      	bne.n	1708c <bt_hci_evt_le_pkey_complete+0x30>
   1709c:	f3bf 8f5b 	dmb	ish
	return list->head;
   170a0:	4d0c      	ldr	r5, [pc, #48]	; (170d4 <bt_hci_evt_le_pkey_complete+0x78>)
   170a2:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   170a4:	b16c      	cbz	r4, 170c2 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   170a6:	4f0a      	ldr	r7, [pc, #40]	; (170d0 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   170a8:	3c04      	subs	r4, #4
		if (cb->func) {
   170aa:	6823      	ldr	r3, [r4, #0]
   170ac:	b12b      	cbz	r3, 170ba <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   170ae:	7832      	ldrb	r2, [r6, #0]
   170b0:	2a00      	cmp	r2, #0
   170b2:	bf0c      	ite	eq
   170b4:	4638      	moveq	r0, r7
   170b6:	2000      	movne	r0, #0
   170b8:	4798      	blx	r3
	return node->next;
   170ba:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   170bc:	b10c      	cbz	r4, 170c2 <bt_hci_evt_le_pkey_complete+0x66>
   170be:	3c04      	subs	r4, #4
   170c0:	e7f3      	b.n	170aa <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   170c2:	2300      	movs	r3, #0
	list->tail = NULL;
   170c4:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   170c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   170ca:	bf00      	nop
   170cc:	2000041c 	.word	0x2000041c
   170d0:	20003471 	.word	0x20003471
   170d4:	200024f8 	.word	0x200024f8

000170d8 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   170d8:	4905      	ldr	r1, [pc, #20]	; (170f0 <bt_hci_evt_le_dhkey_complete+0x18>)
   170da:	680b      	ldr	r3, [r1, #0]
   170dc:	b133      	cbz	r3, 170ec <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   170de:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   170e0:	2000      	movs	r0, #0
   170e2:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   170e4:	7811      	ldrb	r1, [r2, #0]
   170e6:	b901      	cbnz	r1, 170ea <bt_hci_evt_le_dhkey_complete+0x12>
   170e8:	1c50      	adds	r0, r2, #1
   170ea:	4718      	bx	r3
	}
}
   170ec:	4770      	bx	lr
   170ee:	bf00      	nop
   170f0:	200024f4 	.word	0x200024f4

000170f4 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   170f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   170f6:	4b12      	ldr	r3, [pc, #72]	; (17140 <notify_connected+0x4c>)
   170f8:	681d      	ldr	r5, [r3, #0]
{
   170fa:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   170fc:	b995      	cbnz	r5, 17124 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   170fe:	4d11      	ldr	r5, [pc, #68]	; (17144 <notify_connected+0x50>)
   17100:	4e11      	ldr	r6, [pc, #68]	; (17148 <notify_connected+0x54>)
   17102:	4f12      	ldr	r7, [pc, #72]	; (1714c <notify_connected+0x58>)
   17104:	42b5      	cmp	r5, r6
   17106:	d90a      	bls.n	1711e <notify_connected+0x2a>
   17108:	4811      	ldr	r0, [pc, #68]	; (17150 <notify_connected+0x5c>)
   1710a:	4639      	mov	r1, r7
   1710c:	f240 5241 	movw	r2, #1345	; 0x541
   17110:	f00f f9f5 	bl	264fe <assert_print>
   17114:	f240 5141 	movw	r1, #1345	; 0x541
   17118:	4638      	mov	r0, r7
   1711a:	f00f f9e9 	bl	264f0 <assert_post_action>
   1711e:	42b5      	cmp	r5, r6
   17120:	d307      	bcc.n	17132 <notify_connected+0x3e>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   17122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->connected) {
   17124:	682b      	ldr	r3, [r5, #0]
   17126:	b113      	cbz	r3, 1712e <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   17128:	7b21      	ldrb	r1, [r4, #12]
   1712a:	4620      	mov	r0, r4
   1712c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1712e:	69ad      	ldr	r5, [r5, #24]
   17130:	e7e4      	b.n	170fc <notify_connected+0x8>
		if (cb->connected) {
   17132:	682b      	ldr	r3, [r5, #0]
   17134:	b113      	cbz	r3, 1713c <notify_connected+0x48>
			cb->connected(conn, conn->err);
   17136:	7b21      	ldrb	r1, [r4, #12]
   17138:	4620      	mov	r0, r4
   1713a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1713c:	351c      	adds	r5, #28
   1713e:	e7e1      	b.n	17104 <notify_connected+0x10>
   17140:	2000250c 	.word	0x2000250c
   17144:	00029f44 	.word	0x00029f44
   17148:	00029f60 	.word	0x00029f60
   1714c:	0002c0d1 	.word	0x0002c0d1
   17150:	0002aa75 	.word	0x0002aa75

00017154 <tx_notify>:
{
   17154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   17158:	f8df 804c 	ldr.w	r8, [pc, #76]	; 171a8 <tx_notify+0x54>
{
   1715c:	4604      	mov	r4, r0
	tx->cb = NULL;
   1715e:	2700      	movs	r7, #0
	__asm__ volatile(
   17160:	f04f 0340 	mov.w	r3, #64	; 0x40
   17164:	f3ef 8211 	mrs	r2, BASEPRI
   17168:	f383 8812 	msr	BASEPRI_MAX, r3
   1716c:	f3bf 8f6f 	isb	sy
	return list->head;
   17170:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   17172:	b129      	cbz	r1, 17180 <tx_notify+0x2c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17174:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   17176:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   17178:	6223      	str	r3, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1717a:	4281      	cmp	r1, r0
	list->tail = node;
   1717c:	bf08      	it	eq
   1717e:	6263      	streq	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   17180:	f382 8811 	msr	BASEPRI, r2
   17184:	f3bf 8f6f 	isb	sy
		if (!tx) {
   17188:	b161      	cbz	r1, 171a4 <tx_notify+0x50>
		user_data = tx->user_data;
   1718a:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   1718e:	60cf      	str	r7, [r1, #12]
	tx->user_data = NULL;
   17190:	e9c1 7701 	strd	r7, r7, [r1, #4]
	k_fifo_put(&free_tx, tx);
   17194:	4640      	mov	r0, r8
   17196:	f012 fbac 	bl	298f2 <k_queue_append>
		cb(conn, user_data, 0);
   1719a:	2200      	movs	r2, #0
   1719c:	4631      	mov	r1, r6
   1719e:	4620      	mov	r0, r4
   171a0:	47a8      	blx	r5
	while (1) {
   171a2:	e7dd      	b.n	17160 <tx_notify+0xc>
}
   171a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   171a8:	200008d4 	.word	0x200008d4

000171ac <conn_tx_destroy>:
{
   171ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171b0:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(tx);
   171b2:	460c      	mov	r4, r1
   171b4:	b941      	cbnz	r1, 171c8 <conn_tx_destroy+0x1c>
   171b6:	490d      	ldr	r1, [pc, #52]	; (171ec <conn_tx_destroy+0x40>)
   171b8:	480d      	ldr	r0, [pc, #52]	; (171f0 <conn_tx_destroy+0x44>)
   171ba:	2237      	movs	r2, #55	; 0x37
   171bc:	f00f f99f 	bl	264fe <assert_print>
   171c0:	480a      	ldr	r0, [pc, #40]	; (171ec <conn_tx_destroy+0x40>)
   171c2:	2137      	movs	r1, #55	; 0x37
   171c4:	f00f f994 	bl	264f0 <assert_post_action>
	void *user_data = tx->user_data;
   171c8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
	tx->cb = NULL;
   171cc:	2300      	movs	r3, #0
	tx->user_data = NULL;
   171ce:	e9c4 3301 	strd	r3, r3, [r4, #4]
	tx->pending_no_cb = 0U;
   171d2:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   171d4:	4621      	mov	r1, r4
   171d6:	4807      	ldr	r0, [pc, #28]	; (171f4 <conn_tx_destroy+0x48>)
   171d8:	f012 fb8b 	bl	298f2 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   171dc:	4639      	mov	r1, r7
   171de:	4628      	mov	r0, r5
   171e0:	4633      	mov	r3, r6
   171e2:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   171e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	cb(conn, user_data, -ESHUTDOWN);
   171ea:	4718      	bx	r3
   171ec:	0002c0d1 	.word	0x0002c0d1
   171f0:	0002aa75 	.word	0x0002aa75
   171f4:	200008d4 	.word	0x200008d4

000171f8 <send_frag>:
{
   171f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   171fc:	694d      	ldr	r5, [r1, #20]
{
   171fe:	4604      	mov	r4, r0
   17200:	460e      	mov	r6, r1
   17202:	4691      	mov	r9, r2
   17204:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   17206:	f04f 33ff 	mov.w	r3, #4294967295
   1720a:	4840      	ldr	r0, [pc, #256]	; (1730c <send_frag+0x114>)
   1720c:	f04f 32ff 	mov.w	r2, #4294967295
   17210:	f009 fbca 	bl	209a8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   17214:	7b63      	ldrb	r3, [r4, #13]
   17216:	2b07      	cmp	r3, #7
   17218:	d141      	bne.n	1729e <send_frag+0xa6>
	__asm__ volatile(
   1721a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1721e:	f3ef 8211 	mrs	r2, BASEPRI
   17222:	f383 8812 	msr	BASEPRI_MAX, r3
   17226:	f3bf 8f6f 	isb	sy
	if (tx) {
   1722a:	69a3      	ldr	r3, [r4, #24]
   1722c:	2d00      	cmp	r5, #0
   1722e:	d04b      	beq.n	172c8 <send_frag+0xd0>
	parent->next = child;
   17230:	2100      	movs	r1, #0
   17232:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   17234:	2b00      	cmp	r3, #0
   17236:	d144      	bne.n	172c2 <send_frag+0xca>
	list->head = node;
   17238:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1723c:	f382 8811 	msr	BASEPRI, r2
   17240:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   17244:	2104      	movs	r1, #4
   17246:	f106 0008 	add.w	r0, r6, #8
   1724a:	f005 fb95 	bl	1c978 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1724e:	8823      	ldrh	r3, [r4, #0]
   17250:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   17254:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17258:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1725a:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1725e:	3b04      	subs	r3, #4
   17260:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17262:	2302      	movs	r3, #2
   17264:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   17266:	4630      	mov	r0, r6
   17268:	f7fe fd0a 	bl	15c80 <bt_send>
	if (err) {
   1726c:	4602      	mov	r2, r0
   1726e:	2800      	cmp	r0, #0
   17270:	d04a      	beq.n	17308 <send_frag+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
   17272:	4827      	ldr	r0, [pc, #156]	; (17310 <send_frag+0x118>)
   17274:	2145      	movs	r1, #69	; 0x45
   17276:	f00f f950 	bl	2651a <z_log_minimal_printk>
	__asm__ volatile(
   1727a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1727e:	f3ef 8911 	mrs	r9, BASEPRI
   17282:	f383 8812 	msr	BASEPRI_MAX, r3
   17286:	f3bf 8f6f 	isb	sy
		if (tx) {
   1728a:	b34d      	cbz	r5, 172e0 <send_frag+0xe8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1728c:	4629      	mov	r1, r5
   1728e:	f104 0014 	add.w	r0, r4, #20
   17292:	f010 fb55 	bl	27940 <sys_slist_find_and_remove>
	__asm__ volatile(
   17296:	f389 8811 	msr	BASEPRI, r9
   1729a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1729e:	481b      	ldr	r0, [pc, #108]	; (1730c <send_frag+0x114>)
   172a0:	f009 fb48 	bl	20934 <z_impl_k_sem_give>
	if (tx) {
   172a4:	b12d      	cbz	r5, 172b2 <send_frag+0xba>
		tx_data(buf)->tx = NULL;
   172a6:	2300      	movs	r3, #0
   172a8:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   172aa:	4629      	mov	r1, r5
   172ac:	4620      	mov	r0, r4
   172ae:	f7ff ff7d 	bl	171ac <conn_tx_destroy>
	if (always_consume) {
   172b2:	b11f      	cbz	r7, 172bc <send_frag+0xc4>
		net_buf_unref(buf);
   172b4:	4630      	mov	r0, r6
   172b6:	f005 faa1 	bl	1c7fc <net_buf_unref>
	return false;
   172ba:	2700      	movs	r7, #0
}
   172bc:	4638      	mov	r0, r7
   172be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	parent->next = child;
   172c2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   172c4:	61a5      	str	r5, [r4, #24]
}
   172c6:	e7b9      	b.n	1723c <send_frag+0x44>
		if (tail_tx) {
   172c8:	b133      	cbz	r3, 172d8 <send_frag+0xe0>
			pending_no_cb = &tail_tx->pending_no_cb;
   172ca:	f103 080c 	add.w	r8, r3, #12
   172ce:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   172d0:	3301      	adds	r3, #1
   172d2:	f8c8 3000 	str.w	r3, [r8]
   172d6:	e7b1      	b.n	1723c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   172d8:	69e3      	ldr	r3, [r4, #28]
   172da:	f104 081c 	add.w	r8, r4, #28
   172de:	e7f7      	b.n	172d0 <send_frag+0xd8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   172e0:	f8d8 3000 	ldr.w	r3, [r8]
   172e4:	b953      	cbnz	r3, 172fc <send_frag+0x104>
   172e6:	490b      	ldr	r1, [pc, #44]	; (17314 <send_frag+0x11c>)
   172e8:	480b      	ldr	r0, [pc, #44]	; (17318 <send_frag+0x120>)
   172ea:	f44f 720a 	mov.w	r2, #552	; 0x228
   172ee:	f00f f906 	bl	264fe <assert_print>
   172f2:	4808      	ldr	r0, [pc, #32]	; (17314 <send_frag+0x11c>)
   172f4:	f44f 710a 	mov.w	r1, #552	; 0x228
   172f8:	f00f f8fa 	bl	264f0 <assert_post_action>
			(*pending_no_cb)--;
   172fc:	f8d8 3000 	ldr.w	r3, [r8]
   17300:	3b01      	subs	r3, #1
   17302:	f8c8 3000 	str.w	r3, [r8]
   17306:	e7c6      	b.n	17296 <send_frag+0x9e>
	return true;
   17308:	2701      	movs	r7, #1
   1730a:	e7d7      	b.n	172bc <send_frag+0xc4>
   1730c:	20000450 	.word	0x20000450
   17310:	0002bb07 	.word	0x0002bb07
   17314:	0002c0d1 	.word	0x0002c0d1
   17318:	0002aa75 	.word	0x0002aa75

0001731c <bt_conn_get_pkts>:
}
   1731c:	4800      	ldr	r0, [pc, #0]	; (17320 <bt_conn_get_pkts+0x4>)
   1731e:	4770      	bx	lr
   17320:	20000450 	.word	0x20000450

00017324 <bt_conn_new>:
{
   17324:	b538      	push	{r3, r4, r5, lr}
   17326:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   17328:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1732a:	2501      	movs	r5, #1
   1732c:	428b      	cmp	r3, r1
   1732e:	d102      	bne.n	17336 <bt_conn_new+0x12>
		return NULL;
   17330:	2400      	movs	r4, #0
}
   17332:	4620      	mov	r0, r4
   17334:	bd38      	pop	{r3, r4, r5, pc}
   17336:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   1733a:	f3bf 8f5b 	dmb	ish
   1733e:	e852 0f00 	ldrex	r0, [r2]
   17342:	2800      	cmp	r0, #0
   17344:	d104      	bne.n	17350 <bt_conn_new+0x2c>
   17346:	e842 5c00 	strex	ip, r5, [r2]
   1734a:	f1bc 0f00 	cmp.w	ip, #0
   1734e:	d1f6      	bne.n	1733e <bt_conn_new+0x1a>
   17350:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   17354:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   17358:	d002      	beq.n	17360 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   1735a:	3301      	adds	r3, #1
   1735c:	4604      	mov	r4, r0
   1735e:	e7e5      	b.n	1732c <bt_conn_new+0x8>
	if (!conn) {
   17360:	2c00      	cmp	r4, #0
   17362:	d0e6      	beq.n	17332 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   17364:	22c0      	movs	r2, #192	; 0xc0
   17366:	2100      	movs	r1, #0
   17368:	4620      	mov	r0, r4
   1736a:	f00f ff67 	bl	2723c <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1736e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17372:	4904      	ldr	r1, [pc, #16]	; (17384 <bt_conn_new+0x60>)
   17374:	f009 fea8 	bl	210c8 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   17378:	4903      	ldr	r1, [pc, #12]	; (17388 <bt_conn_new+0x64>)
   1737a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1737e:	f009 fd7b 	bl	20e78 <k_work_init>
	return conn;
   17382:	e7d6      	b.n	17332 <bt_conn_new+0xe>
   17384:	00017c5d 	.word	0x00017c5d
   17388:	00027993 	.word	0x00027993

0001738c <conn_cleanup>:
{
   1738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17390:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   17392:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   17394:	f104 0638 	add.w	r6, r4, #56	; 0x38
   17398:	2300      	movs	r3, #0
   1739a:	2200      	movs	r2, #0
   1739c:	4630      	mov	r0, r6
   1739e:	f005 f8dd 	bl	1c55c <net_buf_get>
   173a2:	4603      	mov	r3, r0
   173a4:	bb20      	cbnz	r0, 173f0 <conn_cleanup+0x64>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   173a6:	6963      	ldr	r3, [r4, #20]
   173a8:	b153      	cbz	r3, 173c0 <conn_cleanup+0x34>
   173aa:	4917      	ldr	r1, [pc, #92]	; (17408 <conn_cleanup+0x7c>)
   173ac:	4817      	ldr	r0, [pc, #92]	; (1740c <conn_cleanup+0x80>)
   173ae:	f240 22b5 	movw	r2, #693	; 0x2b5
   173b2:	f00f f8a4 	bl	264fe <assert_print>
   173b6:	4814      	ldr	r0, [pc, #80]	; (17408 <conn_cleanup+0x7c>)
   173b8:	f240 21b5 	movw	r1, #693	; 0x2b5
   173bc:	f00f f898 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   173c0:	69e3      	ldr	r3, [r4, #28]
   173c2:	b153      	cbz	r3, 173da <conn_cleanup+0x4e>
   173c4:	4910      	ldr	r1, [pc, #64]	; (17408 <conn_cleanup+0x7c>)
   173c6:	4811      	ldr	r0, [pc, #68]	; (1740c <conn_cleanup+0x80>)
   173c8:	f240 22b6 	movw	r2, #694	; 0x2b6
   173cc:	f00f f897 	bl	264fe <assert_print>
   173d0:	480d      	ldr	r0, [pc, #52]	; (17408 <conn_cleanup+0x7c>)
   173d2:	f240 21b6 	movw	r1, #694	; 0x2b6
   173d6:	f00f f88b 	bl	264f0 <assert_post_action>
	bt_conn_reset_rx_state(conn);
   173da:	4620      	mov	r0, r4
   173dc:	f010 fadc 	bl	27998 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   173e0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   173e4:	2200      	movs	r2, #0
}
   173e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   173ea:	2300      	movs	r3, #0
   173ec:	f009 bf62 	b.w	212b4 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   173f0:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   173f2:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   173f4:	f005 fa02 	bl	1c7fc <net_buf_unref>
		if (tx) {
   173f8:	2d00      	cmp	r5, #0
   173fa:	d0cd      	beq.n	17398 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   173fc:	4629      	mov	r1, r5
   173fe:	4620      	mov	r0, r4
   17400:	f7ff fed4 	bl	171ac <conn_tx_destroy>
   17404:	e7c6      	b.n	17394 <conn_cleanup+0x8>
   17406:	bf00      	nop
   17408:	0002c0d1 	.word	0x0002c0d1
   1740c:	0002aa75 	.word	0x0002aa75

00017410 <bt_conn_recv>:
{
   17410:	b570      	push	{r4, r5, r6, lr}
   17412:	4616      	mov	r6, r2
   17414:	4604      	mov	r4, r0
   17416:	460d      	mov	r5, r1
	tx_notify(conn);
   17418:	f7ff fe9c 	bl	17154 <tx_notify>
	switch (flags) {
   1741c:	2e01      	cmp	r6, #1
   1741e:	d01f      	beq.n	17460 <bt_conn_recv+0x50>
   17420:	2e02      	cmp	r6, #2
   17422:	d149      	bne.n	174b8 <bt_conn_recv+0xa8>
		if (conn->rx) {
   17424:	6923      	ldr	r3, [r4, #16]
   17426:	b133      	cbz	r3, 17436 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   17428:	482b      	ldr	r0, [pc, #172]	; (174d8 <bt_conn_recv+0xc8>)
   1742a:	2145      	movs	r1, #69	; 0x45
   1742c:	f00f f875 	bl	2651a <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   17430:	4620      	mov	r0, r4
   17432:	f010 fab1 	bl	27998 <bt_conn_reset_rx_state>
		conn->rx = buf;
   17436:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   17438:	6921      	ldr	r1, [r4, #16]
   1743a:	898a      	ldrh	r2, [r1, #12]
   1743c:	2a01      	cmp	r2, #1
   1743e:	d949      	bls.n	174d4 <bt_conn_recv+0xc4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   17440:	688b      	ldr	r3, [r1, #8]
   17442:	881b      	ldrh	r3, [r3, #0]
   17444:	3304      	adds	r3, #4
   17446:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   17448:	429a      	cmp	r2, r3
   1744a:	d343      	bcc.n	174d4 <bt_conn_recv+0xc4>
	if (conn->rx->len > acl_total_len) {
   1744c:	d93a      	bls.n	174c4 <bt_conn_recv+0xb4>
		BT_ERR("ACL len mismatch (%u > %u)",
   1744e:	4823      	ldr	r0, [pc, #140]	; (174dc <bt_conn_recv+0xcc>)
   17450:	2145      	movs	r1, #69	; 0x45
   17452:	f00f f862 	bl	2651a <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   17456:	4620      	mov	r0, r4
}
   17458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1745c:	f010 ba9c 	b.w	27998 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   17460:	6920      	ldr	r0, [r4, #16]
   17462:	b938      	cbnz	r0, 17474 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   17464:	481e      	ldr	r0, [pc, #120]	; (174e0 <bt_conn_recv+0xd0>)
   17466:	2145      	movs	r1, #69	; 0x45
   17468:	f00f f857 	bl	2651a <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   1746c:	4620      	mov	r0, r4
   1746e:	f010 fa93 	bl	27998 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   17472:	e001      	b.n	17478 <bt_conn_recv+0x68>
		if (!buf->len) {
   17474:	89ae      	ldrh	r6, [r5, #12]
   17476:	b926      	cbnz	r6, 17482 <bt_conn_recv+0x72>
			net_buf_unref(buf);
   17478:	4628      	mov	r0, r5
}
   1747a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1747e:	f005 b9bd 	b.w	1c7fc <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   17482:	3008      	adds	r0, #8
   17484:	f011 ff38 	bl	292f8 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   17488:	4286      	cmp	r6, r0
   1748a:	d90b      	bls.n	174a4 <bt_conn_recv+0x94>
			BT_ERR("Not enough buffer space for L2CAP data");
   1748c:	4815      	ldr	r0, [pc, #84]	; (174e4 <bt_conn_recv+0xd4>)
   1748e:	2145      	movs	r1, #69	; 0x45
   17490:	f00f f843 	bl	2651a <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   17494:	6921      	ldr	r1, [r4, #16]
   17496:	2200      	movs	r2, #0
   17498:	4620      	mov	r0, r4
   1749a:	f000 fe05 	bl	180a8 <bt_l2cap_recv>
			conn->rx = NULL;
   1749e:	2300      	movs	r3, #0
   174a0:	6123      	str	r3, [r4, #16]
   174a2:	e7e9      	b.n	17478 <bt_conn_recv+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   174a4:	6920      	ldr	r0, [r4, #16]
   174a6:	89aa      	ldrh	r2, [r5, #12]
   174a8:	68a9      	ldr	r1, [r5, #8]
   174aa:	3008      	adds	r0, #8
   174ac:	f011 ff2c 	bl	29308 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   174b0:	4628      	mov	r0, r5
   174b2:	f005 f9a3 	bl	1c7fc <net_buf_unref>
		break;
   174b6:	e7bf      	b.n	17438 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   174b8:	480b      	ldr	r0, [pc, #44]	; (174e8 <bt_conn_recv+0xd8>)
   174ba:	4632      	mov	r2, r6
   174bc:	2145      	movs	r1, #69	; 0x45
   174be:	f00f f82c 	bl	2651a <z_log_minimal_printk>
   174c2:	e7d3      	b.n	1746c <bt_conn_recv+0x5c>
	conn->rx = NULL;
   174c4:	2300      	movs	r3, #0
   174c6:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   174c8:	4620      	mov	r0, r4
   174ca:	2201      	movs	r2, #1
}
   174cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   174d0:	f000 bdea 	b.w	180a8 <bt_l2cap_recv>
}
   174d4:	bd70      	pop	{r4, r5, r6, pc}
   174d6:	bf00      	nop
   174d8:	0002c101 	.word	0x0002c101
   174dc:	0002c195 	.word	0x0002c195
   174e0:	0002c123 	.word	0x0002c123
   174e4:	0002c146 	.word	0x0002c146
   174e8:	0002c172 	.word	0x0002c172

000174ec <bt_conn_send_cb>:
{
   174ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   174f0:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   174f2:	7b43      	ldrb	r3, [r0, #13]
   174f4:	2b07      	cmp	r3, #7
{
   174f6:	4605      	mov	r5, r0
   174f8:	460e      	mov	r6, r1
   174fa:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   174fc:	d006      	beq.n	1750c <bt_conn_send_cb+0x20>
		BT_ERR("not connected!");
   174fe:	4820      	ldr	r0, [pc, #128]	; (17580 <bt_conn_send_cb+0x94>)
   17500:	2145      	movs	r1, #69	; 0x45
   17502:	f00f f80a 	bl	2651a <z_log_minimal_printk>
			return -ENOTCONN;
   17506:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1750a:	e017      	b.n	1753c <bt_conn_send_cb+0x50>
	if (cb) {
   1750c:	2a00      	cmp	r2, #0
   1750e:	d035      	beq.n	1757c <bt_conn_send_cb+0x90>
	return z_impl_z_current_get();
   17510:	f00a fe78 	bl	22204 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   17514:	4b1b      	ldr	r3, [pc, #108]	; (17584 <bt_conn_send_cb+0x98>)
   17516:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   17518:	481b      	ldr	r0, [pc, #108]	; (17588 <bt_conn_send_cb+0x9c>)
   1751a:	bf07      	ittee	eq
   1751c:	2200      	moveq	r2, #0
   1751e:	2300      	moveq	r3, #0
   17520:	f04f 32ff 	movne.w	r2, #4294967295
   17524:	f04f 33ff 	movne.w	r3, #4294967295
   17528:	f009 f9aa 	bl	20880 <z_impl_k_queue_get>
   1752c:	4604      	mov	r4, r0
		if (!tx) {
   1752e:	b938      	cbnz	r0, 17540 <bt_conn_send_cb+0x54>
			BT_ERR("Unable to allocate TX context");
   17530:	4816      	ldr	r0, [pc, #88]	; (1758c <bt_conn_send_cb+0xa0>)
   17532:	2145      	movs	r1, #69	; 0x45
   17534:	f00e fff1 	bl	2651a <z_log_minimal_printk>
			return -ENOBUFS;
   17538:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1753c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   17540:	7b6b      	ldrb	r3, [r5, #13]
   17542:	2b07      	cmp	r3, #7
   17544:	f04f 0800 	mov.w	r8, #0
   17548:	d00c      	beq.n	17564 <bt_conn_send_cb+0x78>
			BT_WARN("Disconnected while allocating context");
   1754a:	4811      	ldr	r0, [pc, #68]	; (17590 <bt_conn_send_cb+0xa4>)
   1754c:	2157      	movs	r1, #87	; 0x57
   1754e:	f00e ffe4 	bl	2651a <z_log_minimal_printk>
	tx->user_data = NULL;
   17552:	e9c4 8801 	strd	r8, r8, [r4, #4]
	k_fifo_put(&free_tx, tx);
   17556:	480c      	ldr	r0, [pc, #48]	; (17588 <bt_conn_send_cb+0x9c>)
	tx->pending_no_cb = 0U;
   17558:	f8c4 800c 	str.w	r8, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1755c:	4621      	mov	r1, r4
   1755e:	f012 f9c8 	bl	298f2 <k_queue_append>
   17562:	e7d0      	b.n	17506 <bt_conn_send_cb+0x1a>
		tx->user_data = user_data;
   17564:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   17568:	f8c0 800c 	str.w	r8, [r0, #12]
		tx_data(buf)->tx = tx;
   1756c:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   1756e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17572:	4631      	mov	r1, r6
   17574:	f005 f914 	bl	1c7a0 <net_buf_put>
	return 0;
   17578:	2000      	movs	r0, #0
   1757a:	e7df      	b.n	1753c <bt_conn_send_cb+0x50>
		tx_data(buf)->tx = NULL;
   1757c:	614a      	str	r2, [r1, #20]
   1757e:	e7f6      	b.n	1756e <bt_conn_send_cb+0x82>
   17580:	0002c1b5 	.word	0x0002c1b5
   17584:	20001e70 	.word	0x20001e70
   17588:	200008d4 	.word	0x200008d4
   1758c:	0002c1c9 	.word	0x0002c1c9
   17590:	0002c1ec 	.word	0x0002c1ec

00017594 <bt_conn_prepare_events>:
{
   17594:	b570      	push	{r4, r5, r6, lr}
   17596:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   17598:	4817      	ldr	r0, [pc, #92]	; (175f8 <bt_conn_prepare_events+0x64>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1759a:	4d18      	ldr	r5, [pc, #96]	; (175fc <bt_conn_prepare_events+0x68>)
   1759c:	f012 fb31 	bl	29c02 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   175a0:	4b15      	ldr	r3, [pc, #84]	; (175f8 <bt_conn_prepare_events+0x64>)
   175a2:	2200      	movs	r2, #0
   175a4:	2101      	movs	r1, #1
   175a6:	4620      	mov	r0, r4
   175a8:	f00b fb6e 	bl	22c88 <k_poll_event_init>
   175ac:	f3bf 8f5b 	dmb	ish
   175b0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   175b4:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   175b8:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   175bc:	b90b      	cbnz	r3, 175c2 <bt_conn_prepare_events+0x2e>
		conn_cleanup(conn);
   175be:	2001      	movs	r0, #1
}
   175c0:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   175c2:	7b6b      	ldrb	r3, [r5, #13]
   175c4:	b953      	cbnz	r3, 175dc <bt_conn_prepare_events+0x48>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   175c6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   175ca:	1d28      	adds	r0, r5, #4
   175cc:	f010 f9d2 	bl	27974 <atomic_and>
   175d0:	0643      	lsls	r3, r0, #25
   175d2:	d503      	bpl.n	175dc <bt_conn_prepare_events+0x48>
		conn_cleanup(conn);
   175d4:	4628      	mov	r0, r5
   175d6:	f7ff fed9 	bl	1738c <conn_cleanup>
   175da:	e7f0      	b.n	175be <bt_conn_prepare_events+0x2a>
	if (conn->state != BT_CONN_CONNECTED) {
   175dc:	7b6b      	ldrb	r3, [r5, #13]
   175de:	2b07      	cmp	r3, #7
   175e0:	d1ed      	bne.n	175be <bt_conn_prepare_events+0x2a>
	k_poll_event_init(&events[0],
   175e2:	4b07      	ldr	r3, [pc, #28]	; (17600 <bt_conn_prepare_events+0x6c>)
   175e4:	4630      	mov	r0, r6
   175e6:	2200      	movs	r2, #0
   175e8:	2104      	movs	r1, #4
   175ea:	f00b fb4d 	bl	22c88 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   175ee:	2301      	movs	r3, #1
   175f0:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   175f4:	2002      	movs	r0, #2
	return ev_count;
   175f6:	e7e3      	b.n	175c0 <bt_conn_prepare_events+0x2c>
   175f8:	20000578 	.word	0x20000578
   175fc:	200018a8 	.word	0x200018a8
   17600:	200018e0 	.word	0x200018e0

00017604 <bt_conn_unref>:
{
   17604:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   17606:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
{
   1760a:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1760c:	f3bf 8f5b 	dmb	ish
   17610:	e853 2f00 	ldrex	r2, [r3]
   17614:	1e51      	subs	r1, r2, #1
   17616:	e843 1000 	strex	r0, r1, [r3]
   1761a:	2800      	cmp	r0, #0
   1761c:	d1f8      	bne.n	17610 <bt_conn_unref+0xc>
   1761e:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   17622:	2a00      	cmp	r2, #0
   17624:	dc0a      	bgt.n	1763c <bt_conn_unref+0x38>
   17626:	490d      	ldr	r1, [pc, #52]	; (1765c <bt_conn_unref+0x58>)
   17628:	480d      	ldr	r0, [pc, #52]	; (17660 <bt_conn_unref+0x5c>)
   1762a:	f240 427e 	movw	r2, #1150	; 0x47e
   1762e:	f00e ff66 	bl	264fe <assert_print>
   17632:	480a      	ldr	r0, [pc, #40]	; (1765c <bt_conn_unref+0x58>)
   17634:	f240 417e 	movw	r1, #1150	; 0x47e
   17638:	f00e ff5a 	bl	264f0 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1763c:	78a3      	ldrb	r3, [r4, #2]
   1763e:	2b01      	cmp	r3, #1
   17640:	d10a      	bne.n	17658 <bt_conn_unref+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17642:	f3bf 8f5b 	dmb	ish
   17646:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1764a:	f3bf 8f5b 	dmb	ish
   1764e:	b91b      	cbnz	r3, 17658 <bt_conn_unref+0x54>
}
   17650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   17654:	f7ff bbde 	b.w	16e14 <bt_le_adv_resume>
}
   17658:	bd10      	pop	{r4, pc}
   1765a:	bf00      	nop
   1765c:	0002c0d1 	.word	0x0002c0d1
   17660:	0002aa75 	.word	0x0002aa75

00017664 <bt_conn_lookup_handle>:
{
   17664:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   17666:	2101      	movs	r1, #1
   17668:	4801      	ldr	r0, [pc, #4]	; (17670 <bt_conn_lookup_handle+0xc>)
   1766a:	f010 b9b9 	b.w	279e0 <conn_lookup_handle>
   1766e:	bf00      	nop
   17670:	200018a8 	.word	0x200018a8

00017674 <bt_conn_set_state>:
{
   17674:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   17676:	7b46      	ldrb	r6, [r0, #13]
   17678:	428e      	cmp	r6, r1
{
   1767a:	4604      	mov	r4, r0
   1767c:	460d      	mov	r5, r1
	if (conn->state == state) {
   1767e:	d10b      	bne.n	17698 <bt_conn_set_state+0x24>
	switch (state) {
   17680:	2e08      	cmp	r6, #8
   17682:	bf96      	itet	ls
   17684:	4b60      	ldrls	r3, [pc, #384]	; (17808 <bt_conn_set_state+0x194>)
	if (conn->state == state) {
   17686:	4a61      	ldrhi	r2, [pc, #388]	; (1780c <bt_conn_set_state+0x198>)
   17688:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   1768c:	4860      	ldr	r0, [pc, #384]	; (17810 <bt_conn_set_state+0x19c>)
   1768e:	2157      	movs	r1, #87	; 0x57
}
   17690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   17694:	f00e bf41 	b.w	2651a <z_log_minimal_printk>
	conn->state = state;
   17698:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1769a:	b926      	cbnz	r6, 176a6 <bt_conn_set_state+0x32>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1769c:	7883      	ldrb	r3, [r0, #2]
   1769e:	2b08      	cmp	r3, #8
   176a0:	d001      	beq.n	176a6 <bt_conn_set_state+0x32>
			bt_conn_ref(conn);
   176a2:	f010 f982 	bl	279aa <bt_conn_ref>
	switch (conn->state) {
   176a6:	7b63      	ldrb	r3, [r4, #13]
   176a8:	2b08      	cmp	r3, #8
   176aa:	f200 80a8 	bhi.w	177fe <bt_conn_set_state+0x18a>
   176ae:	e8df f003 	tbb	[pc, r3]
   176b2:	0537      	.short	0x0537
   176b4:	aaaaaaaa 	.word	0xaaaaaaaa
   176b8:	1caa      	.short	0x1caa
   176ba:	aa          	.byte	0xaa
   176bb:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   176bc:	4d55      	ldr	r5, [pc, #340]	; (17814 <bt_conn_set_state+0x1a0>)
		tx->pending_no_cb = 0U;
   176be:	2600      	movs	r6, #0
	__asm__ volatile(
   176c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   176c4:	f3ef 8211 	mrs	r2, BASEPRI
   176c8:	f383 8812 	msr	BASEPRI_MAX, r3
   176cc:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   176d0:	69e3      	ldr	r3, [r4, #28]
   176d2:	2b00      	cmp	r3, #0
   176d4:	d073      	beq.n	177be <bt_conn_set_state+0x14a>
			conn->pending_no_cb--;
   176d6:	3b01      	subs	r3, #1
   176d8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   176da:	f382 8811 	msr	BASEPRI, r2
   176de:	f3bf 8f6f 	isb	sy
   176e2:	4628      	mov	r0, r5
   176e4:	f009 f926 	bl	20934 <z_impl_k_sem_give>
}
   176e8:	e7ea      	b.n	176c0 <bt_conn_set_state+0x4c>
		if (conn->type == BT_CONN_TYPE_SCO) {
   176ea:	78a3      	ldrb	r3, [r4, #2]
   176ec:	2b04      	cmp	r3, #4
   176ee:	f000 808a 	beq.w	17806 <bt_conn_set_state+0x192>
	z_impl_k_queue_init(queue);
   176f2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   176f6:	f012 f8ef 	bl	298d8 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   176fa:	4847      	ldr	r0, [pc, #284]	; (17818 <bt_conn_set_state+0x1a4>)
   176fc:	2100      	movs	r1, #0
   176fe:	f00b fbcf 	bl	22ea0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   17702:	2300      	movs	r3, #0
	list->tail = NULL;
   17704:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17708:	78e3      	ldrb	r3, [r4, #3]
   1770a:	2b01      	cmp	r3, #1
   1770c:	d17b      	bne.n	17806 <bt_conn_set_state+0x192>
			k_work_schedule(&conn->deferred_work,
   1770e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17712:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   17716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   1771a:	2300      	movs	r3, #0
   1771c:	f009 bd62 	b.w	211e4 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17720:	78a3      	ldrb	r3, [r4, #2]
   17722:	2b04      	cmp	r3, #4
   17724:	d104      	bne.n	17730 <bt_conn_set_state+0xbc>
			bt_conn_unref(conn);
   17726:	4620      	mov	r0, r4
}
   17728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   1772c:	f7ff bf6a 	b.w	17604 <bt_conn_unref>
		switch (old_state) {
   17730:	2e08      	cmp	r6, #8
   17732:	d868      	bhi.n	17806 <bt_conn_set_state+0x192>
   17734:	a301      	add	r3, pc, #4	; (adr r3, 1773c <bt_conn_set_state+0xc8>)
   17736:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1773a:	bf00      	nop
   1773c:	000177b7 	.word	0x000177b7
   17740:	00017761 	.word	0x00017761
   17744:	000177a9 	.word	0x000177a9
   17748:	00017727 	.word	0x00017727
   1774c:	00017727 	.word	0x00017727
   17750:	000177a9 	.word	0x000177a9
   17754:	000177a9 	.word	0x000177a9
   17758:	000177b7 	.word	0x000177b7
   1775c:	000177b7 	.word	0x000177b7
			tx_notify(conn);
   17760:	4620      	mov	r0, r4
   17762:	f7ff fcf7 	bl	17154 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   17766:	78a3      	ldrb	r3, [r4, #2]
   17768:	2b01      	cmp	r3, #1
   1776a:	d10a      	bne.n	17782 <bt_conn_set_state+0x10e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1776c:	f104 0560 	add.w	r5, r4, #96	; 0x60
   17770:	4628      	mov	r0, r5
   17772:	f012 f945 	bl	29a00 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   17776:	f010 0f0c 	tst.w	r0, #12
   1777a:	d002      	beq.n	17782 <bt_conn_set_state+0x10e>
				k_work_cancel_delayable(&conn->deferred_work);
   1777c:	4628      	mov	r0, r5
   1777e:	f009 fd9f 	bl	212c0 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17782:	f3bf 8f5b 	dmb	ish
   17786:	3404      	adds	r4, #4
   17788:	e854 3f00 	ldrex	r3, [r4]
   1778c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17790:	e844 3200 	strex	r2, r3, [r4]
   17794:	2a00      	cmp	r2, #0
   17796:	d1f7      	bne.n	17788 <bt_conn_set_state+0x114>
   17798:	f3bf 8f5b 	dmb	ish
   1779c:	481e      	ldr	r0, [pc, #120]	; (17818 <bt_conn_set_state+0x1a4>)
}
   1779e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   177a2:	2100      	movs	r1, #0
   177a4:	f00b bb7c 	b.w	22ea0 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   177a8:	7b23      	ldrb	r3, [r4, #12]
   177aa:	2b00      	cmp	r3, #0
   177ac:	d0bb      	beq.n	17726 <bt_conn_set_state+0xb2>
				notify_connected(conn);
   177ae:	4620      	mov	r0, r4
   177b0:	f7ff fca0 	bl	170f4 <notify_connected>
   177b4:	e7b7      	b.n	17726 <bt_conn_set_state+0xb2>
			BT_WARN("Invalid (%u) old state", state);
   177b6:	4819      	ldr	r0, [pc, #100]	; (1781c <bt_conn_set_state+0x1a8>)
   177b8:	462a      	mov	r2, r5
   177ba:	2157      	movs	r1, #87	; 0x57
   177bc:	e768      	b.n	17690 <bt_conn_set_state+0x1c>
	return list->head;
   177be:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   177c0:	b129      	cbz	r1, 177ce <bt_conn_set_state+0x15a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   177c2:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   177c4:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   177c6:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   177c8:	4281      	cmp	r1, r0
	list->tail = node;
   177ca:	bf08      	it	eq
   177cc:	61a3      	streq	r3, [r4, #24]
   177ce:	f382 8811 	msr	BASEPRI, r2
   177d2:	f3bf 8f6f 	isb	sy
		if (!node) {
   177d6:	b1b1      	cbz	r1, 17806 <bt_conn_set_state+0x192>
	__asm__ volatile(
   177d8:	f04f 0240 	mov.w	r2, #64	; 0x40
   177dc:	f3ef 8311 	mrs	r3, BASEPRI
   177e0:	f382 8812 	msr	BASEPRI_MAX, r2
   177e4:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   177e8:	68ca      	ldr	r2, [r1, #12]
   177ea:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   177ec:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   177ee:	f383 8811 	msr	BASEPRI, r3
   177f2:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   177f6:	4620      	mov	r0, r4
   177f8:	f7ff fcd8 	bl	171ac <conn_tx_destroy>
   177fc:	e771      	b.n	176e2 <bt_conn_set_state+0x6e>
		BT_WARN("no valid (%u) state was set", state);
   177fe:	4808      	ldr	r0, [pc, #32]	; (17820 <bt_conn_set_state+0x1ac>)
   17800:	462a      	mov	r2, r5
   17802:	2157      	movs	r1, #87	; 0x57
   17804:	e744      	b.n	17690 <bt_conn_set_state+0x1c>
}
   17806:	bd70      	pop	{r4, r5, r6, pc}
   17808:	0002a3fc 	.word	0x0002a3fc
   1780c:	0002c217 	.word	0x0002c217
   17810:	0002c221 	.word	0x0002c221
   17814:	20000450 	.word	0x20000450
   17818:	20000578 	.word	0x20000578
   1781c:	0002c237 	.word	0x0002c237
   17820:	0002c253 	.word	0x0002c253

00017824 <bt_conn_index>:
		index = conn - acl_conns;
   17824:	4b0a      	ldr	r3, [pc, #40]	; (17850 <bt_conn_index+0x2c>)
   17826:	4a0b      	ldr	r2, [pc, #44]	; (17854 <bt_conn_index+0x30>)
{
   17828:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   1782a:	1ac4      	subs	r4, r0, r3
   1782c:	10e4      	asrs	r4, r4, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1782e:	4298      	cmp	r0, r3
		index = conn - acl_conns;
   17830:	fb02 f404 	mul.w	r4, r2, r4
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   17834:	d00a      	beq.n	1784c <bt_conn_index+0x28>
   17836:	4908      	ldr	r1, [pc, #32]	; (17858 <bt_conn_index+0x34>)
   17838:	4808      	ldr	r0, [pc, #32]	; (1785c <bt_conn_index+0x38>)
   1783a:	f240 429c 	movw	r2, #1180	; 0x49c
   1783e:	f00e fe5e 	bl	264fe <assert_print>
   17842:	4805      	ldr	r0, [pc, #20]	; (17858 <bt_conn_index+0x34>)
   17844:	f240 419c 	movw	r1, #1180	; 0x49c
   17848:	f00e fe52 	bl	264f0 <assert_post_action>
}
   1784c:	b2e0      	uxtb	r0, r4
   1784e:	bd10      	pop	{r4, pc}
   17850:	200018a8 	.word	0x200018a8
   17854:	c28f5c29 	.word	0xc28f5c29
   17858:	0002c0d1 	.word	0x0002c0d1
   1785c:	0002aa75 	.word	0x0002aa75

00017860 <bt_conn_create_pdu_timeout>:
{
   17860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17862:	4604      	mov	r4, r0
   17864:	460d      	mov	r5, r1
   17866:	4617      	mov	r7, r2
   17868:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   1786a:	f012 f806 	bl	2987a <k_is_in_isr>
   1786e:	b150      	cbz	r0, 17886 <bt_conn_create_pdu_timeout+0x26>
   17870:	490f      	ldr	r1, [pc, #60]	; (178b0 <bt_conn_create_pdu_timeout+0x50>)
   17872:	4810      	ldr	r0, [pc, #64]	; (178b4 <bt_conn_create_pdu_timeout+0x54>)
   17874:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
   17878:	f00e fe41 	bl	264fe <assert_print>
   1787c:	480c      	ldr	r0, [pc, #48]	; (178b0 <bt_conn_create_pdu_timeout+0x50>)
   1787e:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
   17882:	f00e fe35 	bl	264f0 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   17886:	480c      	ldr	r0, [pc, #48]	; (178b8 <bt_conn_create_pdu_timeout+0x58>)
   17888:	463a      	mov	r2, r7
   1788a:	2c00      	cmp	r4, #0
   1788c:	bf18      	it	ne
   1788e:	4620      	movne	r0, r4
   17890:	4633      	mov	r3, r6
   17892:	f011 fd20 	bl	292d6 <net_buf_alloc_fixed>
	if (!buf) {
   17896:	4604      	mov	r4, r0
   17898:	b928      	cbnz	r0, 178a6 <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   1789a:	4808      	ldr	r0, [pc, #32]	; (178bc <bt_conn_create_pdu_timeout+0x5c>)
   1789c:	2157      	movs	r1, #87	; 0x57
   1789e:	f00e fe3c 	bl	2651a <z_log_minimal_printk>
}
   178a2:	4620      	mov	r0, r4
   178a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   178a6:	1d29      	adds	r1, r5, #4
   178a8:	3008      	adds	r0, #8
   178aa:	f004 fe87 	bl	1c5bc <net_buf_simple_reserve>
	return buf;
   178ae:	e7f8      	b.n	178a2 <bt_conn_create_pdu_timeout+0x42>
   178b0:	0002c0d1 	.word	0x0002c0d1
   178b4:	0002aa75 	.word	0x0002aa75
   178b8:	200008f0 	.word	0x200008f0
   178bc:	0002c274 	.word	0x0002c274

000178c0 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   178c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178c4:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   178c6:	f3bf 8f5b 	dmb	ish
   178ca:	6863      	ldr	r3, [r4, #4]
   178cc:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   178d0:	05db      	lsls	r3, r3, #23
   178d2:	f100 0004 	add.w	r0, r0, #4
   178d6:	d511      	bpl.n	178fc <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   178d8:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   178dc:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   178e0:	429a      	cmp	r2, r3
   178e2:	d80b      	bhi.n	178fc <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   178e4:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   178e8:	429a      	cmp	r2, r3
   178ea:	d307      	bcc.n	178fc <notify_le_param_updated+0x3c>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   178ec:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   178f0:	429a      	cmp	r2, r3
   178f2:	d103      	bne.n	178fc <notify_le_param_updated+0x3c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   178f4:	f46f 7180 	mvn.w	r1, #256	; 0x100
   178f8:	f010 f83c 	bl	27974 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   178fc:	4b18      	ldr	r3, [pc, #96]	; (17960 <notify_le_param_updated+0xa0>)
   178fe:	681d      	ldr	r5, [r3, #0]
   17900:	b99d      	cbnz	r5, 1792a <notify_le_param_updated+0x6a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17902:	4d18      	ldr	r5, [pc, #96]	; (17964 <notify_le_param_updated+0xa4>)
   17904:	4e18      	ldr	r6, [pc, #96]	; (17968 <notify_le_param_updated+0xa8>)
   17906:	4f19      	ldr	r7, [pc, #100]	; (1796c <notify_le_param_updated+0xac>)
   17908:	42b5      	cmp	r5, r6
   1790a:	d90a      	bls.n	17922 <notify_le_param_updated+0x62>
   1790c:	4818      	ldr	r0, [pc, #96]	; (17970 <notify_le_param_updated+0xb0>)
   1790e:	4639      	mov	r1, r7
   17910:	f240 528b 	movw	r2, #1419	; 0x58b
   17914:	f00e fdf3 	bl	264fe <assert_print>
   17918:	f240 518b 	movw	r1, #1419	; 0x58b
   1791c:	4638      	mov	r0, r7
   1791e:	f00e fde7 	bl	264f0 <assert_post_action>
   17922:	42b5      	cmp	r5, r6
   17924:	d30d      	bcc.n	17942 <notify_le_param_updated+0x82>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   17926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->le_param_updated) {
   1792a:	68ee      	ldr	r6, [r5, #12]
   1792c:	b13e      	cbz	r6, 1793e <notify_le_param_updated+0x7e>
			cb->le_param_updated(conn, conn->le.interval,
   1792e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   17932:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   17936:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1793a:	4620      	mov	r0, r4
   1793c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1793e:	69ad      	ldr	r5, [r5, #24]
   17940:	e7de      	b.n	17900 <notify_le_param_updated+0x40>
		if (cb->le_param_updated) {
   17942:	f8d5 800c 	ldr.w	r8, [r5, #12]
   17946:	f1b8 0f00 	cmp.w	r8, #0
   1794a:	d007      	beq.n	1795c <notify_le_param_updated+0x9c>
			cb->le_param_updated(conn, conn->le.interval,
   1794c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   17950:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   17954:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   17958:	4620      	mov	r0, r4
   1795a:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1795c:	351c      	adds	r5, #28
   1795e:	e7d3      	b.n	17908 <notify_le_param_updated+0x48>
   17960:	2000250c 	.word	0x2000250c
   17964:	00029f44 	.word	0x00029f44
   17968:	00029f60 	.word	0x00029f60
   1796c:	0002c0d1 	.word	0x0002c0d1
   17970:	0002aa75 	.word	0x0002aa75

00017974 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   17974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17978:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1797a:	4608      	mov	r0, r1
{
   1797c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1797e:	f00f fe0d 	bl	2759c <bt_le_conn_params_valid>
   17982:	4605      	mov	r5, r0
   17984:	b918      	cbnz	r0, 1798e <le_param_req+0x1a>
		return false;
   17986:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   17988:	4628      	mov	r0, r5
   1798a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1798e:	4b1a      	ldr	r3, [pc, #104]	; (179f8 <le_param_req+0x84>)
   17990:	681e      	ldr	r6, [r3, #0]
   17992:	b9be      	cbnz	r6, 179c4 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17994:	4e19      	ldr	r6, [pc, #100]	; (179fc <le_param_req+0x88>)
   17996:	f8df 8068 	ldr.w	r8, [pc, #104]	; 17a00 <le_param_req+0x8c>
   1799a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 17a04 <le_param_req+0x90>
   1799e:	4546      	cmp	r6, r8
   179a0:	d90a      	bls.n	179b8 <le_param_req+0x44>
   179a2:	4819      	ldr	r0, [pc, #100]	; (17a08 <le_param_req+0x94>)
   179a4:	4649      	mov	r1, r9
   179a6:	f240 52d3 	movw	r2, #1491	; 0x5d3
   179aa:	f00e fda8 	bl	264fe <assert_print>
   179ae:	f240 51d3 	movw	r1, #1491	; 0x5d3
   179b2:	4648      	mov	r0, r9
   179b4:	f00e fd9c 	bl	264f0 <assert_post_action>
   179b8:	4546      	cmp	r6, r8
   179ba:	d2e5      	bcs.n	17988 <le_param_req+0x14>
		if (!cb->le_param_req) {
   179bc:	68b3      	ldr	r3, [r6, #8]
   179be:	b983      	cbnz	r3, 179e2 <le_param_req+0x6e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   179c0:	361c      	adds	r6, #28
   179c2:	e7ec      	b.n	1799e <le_param_req+0x2a>
		if (!cb->le_param_req) {
   179c4:	68b3      	ldr	r3, [r6, #8]
   179c6:	b90b      	cbnz	r3, 179cc <le_param_req+0x58>
	for (cb = callback_list; cb; cb = cb->_next) {
   179c8:	69b6      	ldr	r6, [r6, #24]
   179ca:	e7e2      	b.n	17992 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   179cc:	4621      	mov	r1, r4
   179ce:	4638      	mov	r0, r7
   179d0:	4798      	blx	r3
   179d2:	2800      	cmp	r0, #0
   179d4:	d0d7      	beq.n	17986 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   179d6:	4620      	mov	r0, r4
   179d8:	f00f fde0 	bl	2759c <bt_le_conn_params_valid>
   179dc:	2800      	cmp	r0, #0
   179de:	d1f3      	bne.n	179c8 <le_param_req+0x54>
   179e0:	e7d1      	b.n	17986 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   179e2:	4621      	mov	r1, r4
   179e4:	4638      	mov	r0, r7
   179e6:	4798      	blx	r3
   179e8:	2800      	cmp	r0, #0
   179ea:	d0cc      	beq.n	17986 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   179ec:	4620      	mov	r0, r4
   179ee:	f00f fdd5 	bl	2759c <bt_le_conn_params_valid>
   179f2:	2800      	cmp	r0, #0
   179f4:	d1e4      	bne.n	179c0 <le_param_req+0x4c>
   179f6:	e7c6      	b.n	17986 <le_param_req+0x12>
   179f8:	2000250c 	.word	0x2000250c
   179fc:	00029f44 	.word	0x00029f44
   17a00:	00029f60 	.word	0x00029f60
   17a04:	0002c0d1 	.word	0x0002c0d1
   17a08:	0002aa75 	.word	0x0002aa75

00017a0c <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   17a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   17a10:	78c3      	ldrb	r3, [r0, #3]
{
   17a12:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   17a14:	b9db      	cbnz	r3, 17a4e <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   17a16:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   17a1a:	4b17      	ldr	r3, [pc, #92]	; (17a78 <bt_conn_identity_resolved+0x6c>)
   17a1c:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17a1e:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   17a22:	b9bd      	cbnz	r5, 17a54 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17a24:	4d15      	ldr	r5, [pc, #84]	; (17a7c <bt_conn_identity_resolved+0x70>)
   17a26:	4f16      	ldr	r7, [pc, #88]	; (17a80 <bt_conn_identity_resolved+0x74>)
   17a28:	f8df 8058 	ldr.w	r8, [pc, #88]	; 17a84 <bt_conn_identity_resolved+0x78>
   17a2c:	42bd      	cmp	r5, r7
   17a2e:	d90a      	bls.n	17a46 <bt_conn_identity_resolved+0x3a>
   17a30:	4815      	ldr	r0, [pc, #84]	; (17a88 <bt_conn_identity_resolved+0x7c>)
   17a32:	4641      	mov	r1, r8
   17a34:	f44f 62f2 	mov.w	r2, #1936	; 0x790
   17a38:	f00e fd61 	bl	264fe <assert_print>
   17a3c:	f44f 61f2 	mov.w	r1, #1936	; 0x790
   17a40:	4640      	mov	r0, r8
   17a42:	f00e fd55 	bl	264f0 <assert_post_action>
   17a46:	42bd      	cmp	r5, r7
   17a48:	d30c      	bcc.n	17a64 <bt_conn_identity_resolved+0x58>
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
		}
	}
}
   17a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   17a4e:	f100 0697 	add.w	r6, r0, #151	; 0x97
   17a52:	e7e2      	b.n	17a1a <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   17a54:	692b      	ldr	r3, [r5, #16]
   17a56:	b11b      	cbz	r3, 17a60 <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17a58:	463a      	mov	r2, r7
   17a5a:	4631      	mov	r1, r6
   17a5c:	4620      	mov	r0, r4
   17a5e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17a60:	69ad      	ldr	r5, [r5, #24]
   17a62:	e7de      	b.n	17a22 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   17a64:	692b      	ldr	r3, [r5, #16]
   17a66:	b123      	cbz	r3, 17a72 <bt_conn_identity_resolved+0x66>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17a68:	f104 0290 	add.w	r2, r4, #144	; 0x90
   17a6c:	4631      	mov	r1, r6
   17a6e:	4620      	mov	r0, r4
   17a70:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17a72:	351c      	adds	r5, #28
   17a74:	e7da      	b.n	17a2c <bt_conn_identity_resolved+0x20>
   17a76:	bf00      	nop
   17a78:	2000250c 	.word	0x2000250c
   17a7c:	00029f44 	.word	0x00029f44
   17a80:	00029f60 	.word	0x00029f60
   17a84:	0002c0d1 	.word	0x0002c0d1
   17a88:	0002aa75 	.word	0x0002aa75

00017a8c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   17a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn->required_sec_level = conn->sec_level;
   17a90:	7a43      	ldrb	r3, [r0, #9]
   17a92:	7283      	strb	r3, [r0, #10]
{
   17a94:	4604      	mov	r4, r0
   17a96:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   17a98:	f010 f893 	bl	27bc2 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   17a9c:	4b13      	ldr	r3, [pc, #76]	; (17aec <bt_conn_security_changed+0x60>)
   17a9e:	681d      	ldr	r5, [r3, #0]
   17aa0:	b9a5      	cbnz	r5, 17acc <bt_conn_security_changed+0x40>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17aa2:	4d13      	ldr	r5, [pc, #76]	; (17af0 <bt_conn_security_changed+0x64>)
   17aa4:	4f13      	ldr	r7, [pc, #76]	; (17af4 <bt_conn_security_changed+0x68>)
   17aa6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 17af8 <bt_conn_security_changed+0x6c>
   17aaa:	42bd      	cmp	r5, r7
   17aac:	d90a      	bls.n	17ac4 <bt_conn_security_changed+0x38>
   17aae:	4813      	ldr	r0, [pc, #76]	; (17afc <bt_conn_security_changed+0x70>)
   17ab0:	4641      	mov	r1, r8
   17ab2:	f240 72fc 	movw	r2, #2044	; 0x7fc
   17ab6:	f00e fd22 	bl	264fe <assert_print>
   17aba:	f240 71fc 	movw	r1, #2044	; 0x7fc
   17abe:	4640      	mov	r0, r8
   17ac0:	f00e fd16 	bl	264f0 <assert_post_action>
   17ac4:	42bd      	cmp	r5, r7
   17ac6:	d309      	bcc.n	17adc <bt_conn_security_changed+0x50>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   17ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->security_changed) {
   17acc:	696b      	ldr	r3, [r5, #20]
   17ace:	b11b      	cbz	r3, 17ad8 <bt_conn_security_changed+0x4c>
			cb->security_changed(conn, conn->sec_level, err);
   17ad0:	7a61      	ldrb	r1, [r4, #9]
   17ad2:	4632      	mov	r2, r6
   17ad4:	4620      	mov	r0, r4
   17ad6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17ad8:	69ad      	ldr	r5, [r5, #24]
   17ada:	e7e1      	b.n	17aa0 <bt_conn_security_changed+0x14>
		if (cb->security_changed) {
   17adc:	696b      	ldr	r3, [r5, #20]
   17ade:	b11b      	cbz	r3, 17ae8 <bt_conn_security_changed+0x5c>
			cb->security_changed(conn, conn->sec_level, err);
   17ae0:	7a61      	ldrb	r1, [r4, #9]
   17ae2:	4632      	mov	r2, r6
   17ae4:	4620      	mov	r0, r4
   17ae6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17ae8:	351c      	adds	r5, #28
   17aea:	e7de      	b.n	17aaa <bt_conn_security_changed+0x1e>
   17aec:	2000250c 	.word	0x2000250c
   17af0:	00029f44 	.word	0x00029f44
   17af4:	00029f60 	.word	0x00029f60
   17af8:	0002c0d1 	.word	0x0002c0d1
   17afc:	0002aa75 	.word	0x0002aa75

00017b00 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   17b00:	b570      	push	{r4, r5, r6, lr}
   17b02:	4606      	mov	r6, r0
   17b04:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   17b06:	480a      	ldr	r0, [pc, #40]	; (17b30 <bt_conn_add_le+0x30>)
   17b08:	2101      	movs	r1, #1
   17b0a:	f7ff fc0b 	bl	17324 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   17b0e:	4604      	mov	r4, r0
   17b10:	b160      	cbz	r0, 17b2c <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   17b12:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   17b14:	2207      	movs	r2, #7
   17b16:	4629      	mov	r1, r5
   17b18:	3090      	adds	r0, #144	; 0x90
   17b1a:	f00f fb84 	bl	27226 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   17b1e:	2301      	movs	r3, #1
   17b20:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   17b22:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   17b24:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   17b26:	4b03      	ldr	r3, [pc, #12]	; (17b34 <bt_conn_add_le+0x34>)
   17b28:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   17b2c:	4620      	mov	r0, r4
   17b2e:	bd70      	pop	{r4, r5, r6, pc}
   17b30:	200018a8 	.word	0x200018a8
   17b34:	00280018 	.word	0x00280018

00017b38 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   17b38:	b570      	push	{r4, r5, r6, lr}
   17b3a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17b3c:	480c      	ldr	r0, [pc, #48]	; (17b70 <bt_conn_lookup_addr_le+0x38>)
{
   17b3e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17b40:	f00f ff33 	bl	279aa <bt_conn_ref>

		if (!conn) {
   17b44:	4604      	mov	r4, r0
   17b46:	b128      	cbz	r0, 17b54 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17b48:	7883      	ldrb	r3, [r0, #2]
   17b4a:	2b01      	cmp	r3, #1
   17b4c:	d004      	beq.n	17b58 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   17b4e:	f7ff fd59 	bl	17604 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   17b52:	2400      	movs	r4, #0
}
   17b54:	4620      	mov	r0, r4
   17b56:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   17b58:	4629      	mov	r1, r5
   17b5a:	4632      	mov	r2, r6
   17b5c:	f00f ffc1 	bl	27ae2 <bt_conn_is_peer_addr_le>
   17b60:	4605      	mov	r5, r0
   17b62:	2800      	cmp	r0, #0
   17b64:	d1f6      	bne.n	17b54 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   17b66:	4620      	mov	r0, r4
   17b68:	f7ff fd4c 	bl	17604 <bt_conn_unref>
	return NULL;
   17b6c:	462c      	mov	r4, r5
			continue;
   17b6e:	e7f1      	b.n	17b54 <bt_conn_lookup_addr_le+0x1c>
   17b70:	200018a8 	.word	0x200018a8

00017b74 <bt_conn_exists_le>:
{
   17b74:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   17b76:	f7ff ffdf 	bl	17b38 <bt_conn_lookup_addr_le>
	if (conn) {
   17b7a:	4604      	mov	r4, r0
   17b7c:	b170      	cbz	r0, 17b9c <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   17b7e:	7b43      	ldrb	r3, [r0, #13]
   17b80:	4807      	ldr	r0, [pc, #28]	; (17ba0 <bt_conn_exists_le+0x2c>)
   17b82:	2b08      	cmp	r3, #8
   17b84:	bf96      	itet	ls
   17b86:	4a07      	ldrls	r2, [pc, #28]	; (17ba4 <bt_conn_exists_le+0x30>)
   17b88:	4a07      	ldrhi	r2, [pc, #28]	; (17ba8 <bt_conn_exists_le+0x34>)
   17b8a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   17b8e:	2157      	movs	r1, #87	; 0x57
   17b90:	f00e fcc3 	bl	2651a <z_log_minimal_printk>
		bt_conn_unref(conn);
   17b94:	4620      	mov	r0, r4
   17b96:	f7ff fd35 	bl	17604 <bt_conn_unref>
		return true;
   17b9a:	2001      	movs	r0, #1
}
   17b9c:	bd10      	pop	{r4, pc}
   17b9e:	bf00      	nop
   17ba0:	0002c2a2 	.word	0x0002c2a2
   17ba4:	0002a3fc 	.word	0x0002a3fc
   17ba8:	0002c217 	.word	0x0002c217

00017bac <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   17bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17bae:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17bb0:	480e      	ldr	r0, [pc, #56]	; (17bec <bt_conn_lookup_state_le+0x40>)
{
   17bb2:	460e      	mov	r6, r1
   17bb4:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17bb6:	f00f fef8 	bl	279aa <bt_conn_ref>

		if (!conn) {
   17bba:	4604      	mov	r4, r0
   17bbc:	b1a0      	cbz	r0, 17be8 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17bbe:	7883      	ldrb	r3, [r0, #2]
   17bc0:	2b01      	cmp	r3, #1
   17bc2:	d003      	beq.n	17bcc <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   17bc4:	f7ff fd1e 	bl	17604 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   17bc8:	2400      	movs	r4, #0
			continue;
   17bca:	e00d      	b.n	17be8 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   17bcc:	b136      	cbz	r6, 17bdc <bt_conn_lookup_state_le+0x30>
   17bce:	4632      	mov	r2, r6
   17bd0:	4629      	mov	r1, r5
   17bd2:	f00f ff86 	bl	27ae2 <bt_conn_is_peer_addr_le>
   17bd6:	b908      	cbnz	r0, 17bdc <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   17bd8:	4620      	mov	r0, r4
   17bda:	e7f3      	b.n	17bc4 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   17bdc:	7b63      	ldrb	r3, [r4, #13]
   17bde:	42bb      	cmp	r3, r7
   17be0:	d1fa      	bne.n	17bd8 <bt_conn_lookup_state_le+0x2c>
   17be2:	7a23      	ldrb	r3, [r4, #8]
   17be4:	42ab      	cmp	r3, r5
   17be6:	d1f7      	bne.n	17bd8 <bt_conn_lookup_state_le+0x2c>
}
   17be8:	4620      	mov	r0, r4
   17bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17bec:	200018a8 	.word	0x200018a8

00017bf0 <send_conn_le_param_update>:
{
   17bf0:	b538      	push	{r3, r4, r5, lr}
   17bf2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   17bf4:	4608      	mov	r0, r1
{
   17bf6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   17bf8:	f00f fcd0 	bl	2759c <bt_le_conn_params_valid>
   17bfc:	b348      	cbz	r0, 17c52 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17bfe:	4b16      	ldr	r3, [pc, #88]	; (17c58 <send_conn_le_param_update+0x68>)
   17c00:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   17c04:	0799      	lsls	r1, r3, #30
   17c06:	d407      	bmi.n	17c18 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   17c08:	78e3      	ldrb	r3, [r4, #3]
   17c0a:	b183      	cbz	r3, 17c2e <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   17c0c:	4629      	mov	r1, r5
   17c0e:	4620      	mov	r0, r4
}
   17c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   17c14:	f000 ba70 	b.w	180f8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17c18:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   17c1c:	079a      	lsls	r2, r3, #30
   17c1e:	d5f3      	bpl.n	17c08 <send_conn_le_param_update+0x18>
   17c20:	f3bf 8f5b 	dmb	ish
   17c24:	6863      	ldr	r3, [r4, #4]
   17c26:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   17c2a:	059b      	lsls	r3, r3, #22
   17c2c:	d4ec      	bmi.n	17c08 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   17c2e:	4629      	mov	r1, r5
   17c30:	4620      	mov	r0, r4
   17c32:	f00f ff76 	bl	27b22 <bt_conn_le_conn_update>
		if (rc == 0) {
   17c36:	b958      	cbnz	r0, 17c50 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   17c38:	882b      	ldrh	r3, [r5, #0]
   17c3a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   17c3e:	886b      	ldrh	r3, [r5, #2]
   17c40:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   17c44:	88ab      	ldrh	r3, [r5, #4]
   17c46:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   17c4a:	88eb      	ldrh	r3, [r5, #6]
   17c4c:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   17c50:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17c52:	f06f 0015 	mvn.w	r0, #21
   17c56:	e7fb      	b.n	17c50 <send_conn_le_param_update+0x60>
   17c58:	20000350 	.word	0x20000350

00017c5c <deferred_work>:
{
   17c5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   17c60:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   17c64:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   17c66:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   17c6a:	bb73      	cbnz	r3, 17cca <deferred_work+0x6e>
		bt_l2cap_disconnected(conn);
   17c6c:	4628      	mov	r0, r5
   17c6e:	f00f ff97 	bl	27ba0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   17c72:	4b31      	ldr	r3, [pc, #196]	; (17d38 <deferred_work+0xdc>)
   17c74:	681e      	ldr	r6, [r3, #0]
   17c76:	b9c6      	cbnz	r6, 17caa <deferred_work+0x4e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17c78:	4e30      	ldr	r6, [pc, #192]	; (17d3c <deferred_work+0xe0>)
   17c7a:	4f31      	ldr	r7, [pc, #196]	; (17d40 <deferred_work+0xe4>)
   17c7c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 17d44 <deferred_work+0xe8>
   17c80:	42be      	cmp	r6, r7
   17c82:	d90a      	bls.n	17c9a <deferred_work+0x3e>
   17c84:	4830      	ldr	r0, [pc, #192]	; (17d48 <deferred_work+0xec>)
   17c86:	4641      	mov	r1, r8
   17c88:	f240 5252 	movw	r2, #1362	; 0x552
   17c8c:	f00e fc37 	bl	264fe <assert_print>
   17c90:	f240 5152 	movw	r1, #1362	; 0x552
   17c94:	4640      	mov	r0, r8
   17c96:	f00e fc2b 	bl	264f0 <assert_post_action>
   17c9a:	42be      	cmp	r6, r7
   17c9c:	d30d      	bcc.n	17cba <deferred_work+0x5e>
		bt_conn_unref(conn);
   17c9e:	4628      	mov	r0, r5
}
   17ca0:	b002      	add	sp, #8
   17ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   17ca6:	f7ff bcad 	b.w	17604 <bt_conn_unref>
		if (cb->disconnected) {
   17caa:	6873      	ldr	r3, [r6, #4]
   17cac:	b11b      	cbz	r3, 17cb6 <deferred_work+0x5a>
			cb->disconnected(conn, conn->err);
   17cae:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   17cb2:	4628      	mov	r0, r5
   17cb4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17cb6:	69b6      	ldr	r6, [r6, #24]
   17cb8:	e7dd      	b.n	17c76 <deferred_work+0x1a>
		if (cb->disconnected) {
   17cba:	6873      	ldr	r3, [r6, #4]
   17cbc:	b11b      	cbz	r3, 17cc6 <deferred_work+0x6a>
			cb->disconnected(conn, conn->err);
   17cbe:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   17cc2:	4628      	mov	r0, r5
   17cc4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17cc6:	361c      	adds	r6, #28
   17cc8:	e7da      	b.n	17c80 <deferred_work+0x24>
	if (conn->type != BT_CONN_TYPE_LE) {
   17cca:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   17cce:	2b01      	cmp	r3, #1
   17cd0:	d128      	bne.n	17d24 <deferred_work+0xc8>
	if (atomic_test_and_clear_bit(conn->flags,
   17cd2:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17cd6:	f46f 7180 	mvn.w	r1, #256	; 0x100
   17cda:	4630      	mov	r0, r6
   17cdc:	f00f fe4a 	bl	27974 <atomic_and>
   17ce0:	05c3      	lsls	r3, r0, #23
   17ce2:	d522      	bpl.n	17d2a <deferred_work+0xce>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17ce4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   17ce8:	f8ad 3000 	strh.w	r3, [sp]
   17cec:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   17cf0:	f8ad 3002 	strh.w	r3, [sp, #2]
   17cf4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   17cf8:	f8ad 3004 	strh.w	r3, [sp, #4]
   17cfc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   17d00:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   17d04:	4669      	mov	r1, sp
   17d06:	4628      	mov	r0, r5
   17d08:	f7ff ff72 	bl	17bf0 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17d0c:	f3bf 8f5b 	dmb	ish
   17d10:	e856 3f00 	ldrex	r3, [r6]
   17d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17d18:	e846 3200 	strex	r2, r3, [r6]
   17d1c:	2a00      	cmp	r2, #0
   17d1e:	d1f7      	bne.n	17d10 <deferred_work+0xb4>
   17d20:	f3bf 8f5b 	dmb	ish
}
   17d24:	b002      	add	sp, #8
   17d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		param = BT_LE_CONN_PARAM(
   17d2a:	4a08      	ldr	r2, [pc, #32]	; (17d4c <deferred_work+0xf0>)
   17d2c:	6810      	ldr	r0, [r2, #0]
   17d2e:	6851      	ldr	r1, [r2, #4]
   17d30:	466b      	mov	r3, sp
   17d32:	c303      	stmia	r3!, {r0, r1}
   17d34:	e7e6      	b.n	17d04 <deferred_work+0xa8>
   17d36:	bf00      	nop
   17d38:	2000250c 	.word	0x2000250c
   17d3c:	00029f44 	.word	0x00029f44
   17d40:	00029f60 	.word	0x00029f60
   17d44:	0002c0d1 	.word	0x0002c0d1
   17d48:	0002aa75 	.word	0x0002aa75
   17d4c:	0002a12c 	.word	0x0002a12c

00017d50 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   17d50:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   17d52:	4801      	ldr	r0, [pc, #4]	; (17d58 <bt_conn_create_frag_timeout+0x8>)
   17d54:	f7ff bd84 	b.w	17860 <bt_conn_create_pdu_timeout>
   17d58:	20000958 	.word	0x20000958

00017d5c <create_frag>:
{
   17d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d60:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   17d62:	f04f 33ff 	mov.w	r3, #4294967295
   17d66:	f04f 32ff 	mov.w	r2, #4294967295
   17d6a:	2000      	movs	r0, #0
{
   17d6c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   17d6e:	f7ff ffef 	bl	17d50 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   17d72:	7b73      	ldrb	r3, [r6, #13]
   17d74:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   17d76:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   17d78:	f04f 0600 	mov.w	r6, #0
   17d7c:	d005      	beq.n	17d8a <create_frag+0x2e>
		net_buf_unref(frag);
   17d7e:	f004 fd3d 	bl	1c7fc <net_buf_unref>
		return NULL;
   17d82:	4635      	mov	r5, r6
}
   17d84:	4628      	mov	r0, r5
   17d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   17d8a:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   17d8c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   17d90:	4e0c      	ldr	r6, [pc, #48]	; (17dc4 <create_frag+0x68>)
   17d92:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17d94:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   17d98:	f011 faae 	bl	292f8 <net_buf_simple_tailroom>
   17d9c:	4580      	cmp	r8, r0
   17d9e:	d20c      	bcs.n	17dba <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   17da0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17da4:	f854 1f08 	ldr.w	r1, [r4, #8]!
   17da8:	4632      	mov	r2, r6
   17daa:	4638      	mov	r0, r7
   17dac:	f011 faac 	bl	29308 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   17db0:	4631      	mov	r1, r6
   17db2:	4620      	mov	r0, r4
   17db4:	f004 fdfe 	bl	1c9b4 <net_buf_simple_pull>
   17db8:	e7e4      	b.n	17d84 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   17dba:	4638      	mov	r0, r7
   17dbc:	f011 fa9c 	bl	292f8 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   17dc0:	b286      	uxth	r6, r0
   17dc2:	e7ef      	b.n	17da4 <create_frag+0x48>
   17dc4:	20000350 	.word	0x20000350

00017dc8 <bt_conn_process_tx>:
{
   17dc8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   17dca:	7b43      	ldrb	r3, [r0, #13]
{
   17dcc:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   17dce:	b95b      	cbnz	r3, 17de8 <bt_conn_process_tx+0x20>
   17dd0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   17dd4:	3004      	adds	r0, #4
   17dd6:	f00f fdcd 	bl	27974 <atomic_and>
   17dda:	0643      	lsls	r3, r0, #25
   17ddc:	d504      	bpl.n	17de8 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   17dde:	4620      	mov	r0, r4
}
   17de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   17de4:	f7ff bad2 	b.w	1738c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   17de8:	2200      	movs	r2, #0
   17dea:	2300      	movs	r3, #0
   17dec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17df0:	f004 fbb4 	bl	1c55c <net_buf_get>
	BT_ASSERT(buf);
   17df4:	4605      	mov	r5, r0
   17df6:	b958      	cbnz	r0, 17e10 <bt_conn_process_tx+0x48>
   17df8:	4923      	ldr	r1, [pc, #140]	; (17e88 <bt_conn_process_tx+0xc0>)
   17dfa:	4824      	ldr	r0, [pc, #144]	; (17e8c <bt_conn_process_tx+0xc4>)
   17dfc:	f240 320b 	movw	r2, #779	; 0x30b
   17e00:	f00e fb7d 	bl	264fe <assert_print>
   17e04:	4040      	eors	r0, r0
   17e06:	f380 8811 	msr	BASEPRI, r0
   17e0a:	f04f 0003 	mov.w	r0, #3
   17e0e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   17e10:	4e1f      	ldr	r6, [pc, #124]	; (17e90 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   17e12:	89aa      	ldrh	r2, [r5, #12]
   17e14:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   17e18:	429a      	cmp	r2, r3
   17e1a:	d807      	bhi.n	17e2c <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   17e1c:	2300      	movs	r3, #0
   17e1e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   17e20:	4629      	mov	r1, r5
   17e22:	4620      	mov	r0, r4
   17e24:	f7ff f9e8 	bl	171f8 <send_frag>
	if (!send_buf(conn, buf)) {
   17e28:	b968      	cbnz	r0, 17e46 <bt_conn_process_tx+0x7e>
   17e2a:	e005      	b.n	17e38 <bt_conn_process_tx+0x70>
	frag = create_frag(conn, buf);
   17e2c:	4629      	mov	r1, r5
   17e2e:	4620      	mov	r0, r4
   17e30:	f7ff ff94 	bl	17d5c <create_frag>
	if (!frag) {
   17e34:	4601      	mov	r1, r0
   17e36:	b938      	cbnz	r0, 17e48 <bt_conn_process_tx+0x80>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   17e38:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   17e3a:	2300      	movs	r3, #0
   17e3c:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   17e3e:	4628      	mov	r0, r5
   17e40:	f004 fcdc 	bl	1c7fc <net_buf_unref>
		if (tx) {
   17e44:	b9ce      	cbnz	r6, 17e7a <bt_conn_process_tx+0xb2>
}
   17e46:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   17e48:	2301      	movs	r3, #1
   17e4a:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17e4c:	4620      	mov	r0, r4
   17e4e:	f7ff f9d3 	bl	171f8 <send_frag>
   17e52:	2800      	cmp	r0, #0
   17e54:	d0f0      	beq.n	17e38 <bt_conn_process_tx+0x70>
	while (buf->len > conn_mtu(conn)) {
   17e56:	89aa      	ldrh	r2, [r5, #12]
   17e58:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   17e5c:	429a      	cmp	r2, r3
   17e5e:	d802      	bhi.n	17e66 <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   17e60:	2300      	movs	r3, #0
   17e62:	2203      	movs	r2, #3
   17e64:	e7dc      	b.n	17e20 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
   17e66:	4629      	mov	r1, r5
   17e68:	4620      	mov	r0, r4
   17e6a:	f7ff ff77 	bl	17d5c <create_frag>
		if (!frag) {
   17e6e:	4601      	mov	r1, r0
   17e70:	2800      	cmp	r0, #0
   17e72:	d0e1      	beq.n	17e38 <bt_conn_process_tx+0x70>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17e74:	2301      	movs	r3, #1
   17e76:	461a      	mov	r2, r3
   17e78:	e7e8      	b.n	17e4c <bt_conn_process_tx+0x84>
			conn_tx_destroy(conn, tx);
   17e7a:	4631      	mov	r1, r6
   17e7c:	4620      	mov	r0, r4
}
   17e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   17e82:	f7ff b993 	b.w	171ac <conn_tx_destroy>
   17e86:	bf00      	nop
   17e88:	0002c0d1 	.word	0x0002c0d1
   17e8c:	0002aa75 	.word	0x0002aa75
   17e90:	20000350 	.word	0x20000350

00017e94 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   17e94:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   17e96:	490b      	ldr	r1, [pc, #44]	; (17ec4 <bt_conn_init+0x30>)
   17e98:	480b      	ldr	r0, [pc, #44]	; (17ec8 <bt_conn_init+0x34>)
   17e9a:	f011 fd2a 	bl	298f2 <k_queue_append>
   17e9e:	490b      	ldr	r1, [pc, #44]	; (17ecc <bt_conn_init+0x38>)
   17ea0:	4809      	ldr	r0, [pc, #36]	; (17ec8 <bt_conn_init+0x34>)
   17ea2:	f011 fd26 	bl	298f2 <k_queue_append>
   17ea6:	490a      	ldr	r1, [pc, #40]	; (17ed0 <bt_conn_init+0x3c>)
   17ea8:	4807      	ldr	r0, [pc, #28]	; (17ec8 <bt_conn_init+0x34>)
   17eaa:	f011 fd22 	bl	298f2 <k_queue_append>
	}

	bt_att_init();
   17eae:	f001 f82d 	bl	18f0c <bt_att_init>

	err = bt_smp_init();
   17eb2:	f004 f891 	bl	1bfd8 <bt_smp_init>
	if (err) {
   17eb6:	4604      	mov	r4, r0
   17eb8:	b908      	cbnz	r0, 17ebe <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   17eba:	f00f fec7 	bl	27c4c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   17ebe:	4620      	mov	r0, r4
   17ec0:	bd10      	pop	{r4, pc}
   17ec2:	bf00      	nop
   17ec4:	20002510 	.word	0x20002510
   17ec8:	200008d4 	.word	0x200008d4
   17ecc:	20002520 	.word	0x20002520
   17ed0:	20002530 	.word	0x20002530

00017ed4 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   17ed4:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   17ed6:	4b07      	ldr	r3, [pc, #28]	; (17ef4 <l2cap_accept+0x20>)
{
   17ed8:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
   17eda:	6818      	ldr	r0, [r3, #0]
   17edc:	b918      	cbnz	r0, 17ee6 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   17ede:	4a06      	ldr	r2, [pc, #24]	; (17ef8 <l2cap_accept+0x24>)
   17ee0:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   17ee2:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   17ee4:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
   17ee6:	4805      	ldr	r0, [pc, #20]	; (17efc <l2cap_accept+0x28>)
   17ee8:	2145      	movs	r1, #69	; 0x45
   17eea:	f00e fb16 	bl	2651a <z_log_minimal_printk>
   17eee:	f06f 000b 	mvn.w	r0, #11
   17ef2:	e7f7      	b.n	17ee4 <l2cap_accept+0x10>
   17ef4:	20002540 	.word	0x20002540
   17ef8:	0002a440 	.word	0x0002a440
   17efc:	0002c343 	.word	0x0002c343

00017f00 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   17f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f02:	4605      	mov	r5, r0
   17f04:	460f      	mov	r7, r1
   17f06:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   17f08:	2300      	movs	r3, #0
   17f0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17f0e:	2104      	movs	r1, #4
   17f10:	2000      	movs	r0, #0
   17f12:	f7ff fca5 	bl	17860 <bt_conn_create_pdu_timeout>
	if (!buf) {
   17f16:	4604      	mov	r4, r0
   17f18:	b930      	cbnz	r0, 17f28 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   17f1a:	4807      	ldr	r0, [pc, #28]	; (17f38 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   17f1c:	462a      	mov	r2, r5
   17f1e:	2145      	movs	r1, #69	; 0x45
   17f20:	f00e fafb 	bl	2651a <z_log_minimal_printk>
}
   17f24:	4620      	mov	r0, r4
   17f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   17f28:	2104      	movs	r1, #4
   17f2a:	3008      	adds	r0, #8
   17f2c:	f004 fd7c 	bl	1ca28 <net_buf_simple_add>
	hdr->code = code;
   17f30:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   17f32:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   17f34:	8046      	strh	r6, [r0, #2]
	return buf;
   17f36:	e7f5      	b.n	17f24 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   17f38:	0002c36f 	.word	0x0002c36f

00017f3c <bt_l2cap_connected>:
{
   17f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17f3e:	4d2b      	ldr	r5, [pc, #172]	; (17fec <bt_l2cap_connected+0xb0>)
   17f40:	4e2b      	ldr	r6, [pc, #172]	; (17ff0 <bt_l2cap_connected+0xb4>)
   17f42:	4f2c      	ldr	r7, [pc, #176]	; (17ff4 <bt_l2cap_connected+0xb8>)
{
   17f44:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17f46:	42b5      	cmp	r5, r6
   17f48:	d90a      	bls.n	17f60 <bt_l2cap_connected+0x24>
   17f4a:	482b      	ldr	r0, [pc, #172]	; (17ff8 <bt_l2cap_connected+0xbc>)
   17f4c:	4639      	mov	r1, r7
   17f4e:	f240 1281 	movw	r2, #385	; 0x181
   17f52:	f00e fad4 	bl	264fe <assert_print>
   17f56:	f240 1181 	movw	r1, #385	; 0x181
   17f5a:	4638      	mov	r0, r7
   17f5c:	f00e fac8 	bl	264f0 <assert_post_action>
   17f60:	42b5      	cmp	r5, r6
   17f62:	d301      	bcc.n	17f68 <bt_l2cap_connected+0x2c>
}
   17f64:	b003      	add	sp, #12
   17f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   17f68:	686b      	ldr	r3, [r5, #4]
   17f6a:	a901      	add	r1, sp, #4
   17f6c:	4620      	mov	r0, r4
   17f6e:	4798      	blx	r3
   17f70:	2800      	cmp	r0, #0
   17f72:	db35      	blt.n	17fe0 <bt_l2cap_connected+0xa4>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   17f74:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   17f76:	882a      	ldrh	r2, [r5, #0]
   17f78:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   17f7a:	849a      	strh	r2, [r3, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17f7c:	2100      	movs	r1, #0
   17f7e:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   17f82:	68a8      	ldr	r0, [r5, #8]
   17f84:	f3bf 8f5b 	dmb	ish
   17f88:	e852 cf00 	ldrex	ip, [r2]
   17f8c:	e842 1e00 	strex	lr, r1, [r2]
   17f90:	f1be 0f00 	cmp.w	lr, #0
   17f94:	d1f8      	bne.n	17f88 <bt_l2cap_connected+0x4c>
   17f96:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   17f9a:	6099      	str	r1, [r3, #8]
	return list->tail;
   17f9c:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   17f9e:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   17fa2:	b9f9      	cbnz	r1, 17fe4 <bt_l2cap_connected+0xa8>
	list->head = node;
   17fa4:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->destroy = destroy;
   17fa8:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   17faa:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   17fac:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
   17fae:	6843      	ldr	r3, [r0, #4]
   17fb0:	681b      	ldr	r3, [r3, #0]
   17fb2:	b103      	cbz	r3, 17fb6 <bt_l2cap_connected+0x7a>
			chan->ops->connected(chan);
   17fb4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17fb6:	9b01      	ldr	r3, [sp, #4]
   17fb8:	f3bf 8f5b 	dmb	ish
   17fbc:	3310      	adds	r3, #16
   17fbe:	e853 2f00 	ldrex	r2, [r3]
   17fc2:	f042 0201 	orr.w	r2, r2, #1
   17fc6:	e843 2100 	strex	r1, r2, [r3]
   17fca:	2900      	cmp	r1, #0
   17fcc:	d1f7      	bne.n	17fbe <bt_l2cap_connected+0x82>
   17fce:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   17fd2:	9801      	ldr	r0, [sp, #4]
   17fd4:	6843      	ldr	r3, [r0, #4]
   17fd6:	699b      	ldr	r3, [r3, #24]
   17fd8:	b113      	cbz	r3, 17fe0 <bt_l2cap_connected+0xa4>
			chan->ops->status(chan, chan->status);
   17fda:	f100 0110 	add.w	r1, r0, #16
   17fde:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17fe0:	350c      	adds	r5, #12
   17fe2:	e7b0      	b.n	17f46 <bt_l2cap_connected+0xa>
	parent->next = child;
   17fe4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   17fe6:	65a2      	str	r2, [r4, #88]	; 0x58
}
   17fe8:	e7de      	b.n	17fa8 <bt_l2cap_connected+0x6c>
   17fea:	bf00      	nop
   17fec:	00029f20 	.word	0x00029f20
   17ff0:	00029f44 	.word	0x00029f44
   17ff4:	0002c39c 	.word	0x0002c39c
   17ff8:	0002aa75 	.word	0x0002aa75

00017ffc <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   17ffc:	898b      	ldrh	r3, [r1, #12]
   17ffe:	2b03      	cmp	r3, #3
{
   18000:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18002:	4606      	mov	r6, r0
   18004:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   18006:	d804      	bhi.n	18012 <l2cap_recv+0x16>
		BT_ERR("Too small L2CAP signaling PDU");
   18008:	4822      	ldr	r0, [pc, #136]	; (18094 <l2cap_recv+0x98>)
   1800a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
   1800c:	f00e fa85 	bl	2651a <z_log_minimal_printk>
		return 0;
   18010:	e00d      	b.n	1802e <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   18012:	2104      	movs	r1, #4
   18014:	f105 0008 	add.w	r0, r5, #8
   18018:	f004 fce8 	bl	1c9ec <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1801c:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1801e:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   18020:	4293      	cmp	r3, r2
   18022:	4604      	mov	r4, r0
   18024:	d006      	beq.n	18034 <l2cap_recv+0x38>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   18026:	481c      	ldr	r0, [pc, #112]	; (18098 <l2cap_recv+0x9c>)
   18028:	2145      	movs	r1, #69	; 0x45
   1802a:	f00e fa76 	bl	2651a <z_log_minimal_printk>
}
   1802e:	2000      	movs	r0, #0
   18030:	b002      	add	sp, #8
   18032:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   18034:	7842      	ldrb	r2, [r0, #1]
   18036:	b912      	cbnz	r2, 1803e <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
   18038:	4818      	ldr	r0, [pc, #96]	; (1809c <l2cap_recv+0xa0>)
   1803a:	2145      	movs	r1, #69	; 0x45
   1803c:	e7e6      	b.n	1800c <l2cap_recv+0x10>
	switch (hdr->code) {
   1803e:	7802      	ldrb	r2, [r0, #0]
   18040:	2a01      	cmp	r2, #1
   18042:	d0f4      	beq.n	1802e <l2cap_recv+0x32>
   18044:	2a13      	cmp	r2, #19
   18046:	d104      	bne.n	18052 <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
   18048:	2b01      	cmp	r3, #1
   1804a:	d8f0      	bhi.n	1802e <l2cap_recv+0x32>
		BT_ERR("Too small LE conn param rsp");
   1804c:	4814      	ldr	r0, [pc, #80]	; (180a0 <l2cap_recv+0xa4>)
   1804e:	2145      	movs	r1, #69	; 0x45
   18050:	e7dc      	b.n	1800c <l2cap_recv+0x10>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   18052:	4814      	ldr	r0, [pc, #80]	; (180a4 <l2cap_recv+0xa8>)
   18054:	2157      	movs	r1, #87	; 0x57
   18056:	f00e fa60 	bl	2651a <z_log_minimal_printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1805a:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   1805c:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1805e:	2202      	movs	r2, #2
   18060:	2001      	movs	r0, #1
   18062:	f7ff ff4d 	bl	17f00 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18066:	4604      	mov	r4, r0
   18068:	2800      	cmp	r0, #0
   1806a:	d0e0      	beq.n	1802e <l2cap_recv+0x32>
	return net_buf_simple_add(&buf->b, len);
   1806c:	2102      	movs	r1, #2
   1806e:	3008      	adds	r0, #8
   18070:	f004 fcda 	bl	1ca28 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   18074:	2300      	movs	r3, #0
   18076:	7003      	strb	r3, [r0, #0]
   18078:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1807a:	4622      	mov	r2, r4
   1807c:	9300      	str	r3, [sp, #0]
   1807e:	2105      	movs	r1, #5
   18080:	4628      	mov	r0, r5
   18082:	f00f fdb6 	bl	27bf2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   18086:	2800      	cmp	r0, #0
   18088:	d0d1      	beq.n	1802e <l2cap_recv+0x32>
		net_buf_unref(buf);
   1808a:	4620      	mov	r0, r4
   1808c:	f004 fbb6 	bl	1c7fc <net_buf_unref>
   18090:	e7cd      	b.n	1802e <l2cap_recv+0x32>
   18092:	bf00      	nop
   18094:	0002c3cd 	.word	0x0002c3cd
   18098:	0002c3f0 	.word	0x0002c3f0
   1809c:	0002c416 	.word	0x0002c416
   180a0:	0002c43c 	.word	0x0002c43c
   180a4:	0002c45d 	.word	0x0002c45d

000180a8 <bt_l2cap_recv>:
{
   180a8:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   180aa:	898b      	ldrh	r3, [r1, #12]
   180ac:	2b03      	cmp	r3, #3
{
   180ae:	4605      	mov	r5, r0
   180b0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   180b2:	d808      	bhi.n	180c6 <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   180b4:	480e      	ldr	r0, [pc, #56]	; (180f0 <bt_l2cap_recv+0x48>)
   180b6:	2145      	movs	r1, #69	; 0x45
   180b8:	f00e fa2f 	bl	2651a <z_log_minimal_printk>
	net_buf_unref(buf);
   180bc:	4620      	mov	r0, r4
}
   180be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   180c2:	f004 bb9b 	b.w	1c7fc <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   180c6:	2104      	movs	r1, #4
   180c8:	f104 0008 	add.w	r0, r4, #8
   180cc:	f004 fc8e 	bl	1c9ec <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   180d0:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   180d2:	4628      	mov	r0, r5
   180d4:	4611      	mov	r1, r2
   180d6:	f00f fdaf 	bl	27c38 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   180da:	b920      	cbnz	r0, 180e6 <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   180dc:	4805      	ldr	r0, [pc, #20]	; (180f4 <bt_l2cap_recv+0x4c>)
   180de:	2157      	movs	r1, #87	; 0x57
   180e0:	f00e fa1b 	bl	2651a <z_log_minimal_printk>
		net_buf_unref(buf);
   180e4:	e7ea      	b.n	180bc <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   180e6:	6843      	ldr	r3, [r0, #4]
   180e8:	4621      	mov	r1, r4
   180ea:	691b      	ldr	r3, [r3, #16]
   180ec:	4798      	blx	r3
   180ee:	e7e5      	b.n	180bc <bt_l2cap_recv+0x14>
   180f0:	0002c480 	.word	0x0002c480
   180f4:	0002c4a2 	.word	0x0002c4a2

000180f8 <bt_l2cap_update_conn_param>:
{
   180f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   180fa:	460d      	mov	r5, r1
	ident++;
   180fc:	4916      	ldr	r1, [pc, #88]	; (18158 <bt_l2cap_update_conn_param+0x60>)
   180fe:	780b      	ldrb	r3, [r1, #0]
   18100:	3301      	adds	r3, #1
	if (!ident) {
   18102:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   18106:	bf08      	it	eq
   18108:	2301      	moveq	r3, #1
   1810a:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1810c:	7809      	ldrb	r1, [r1, #0]
{
   1810e:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18110:	2208      	movs	r2, #8
   18112:	2012      	movs	r0, #18
   18114:	f7ff fef4 	bl	17f00 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18118:	4604      	mov	r4, r0
   1811a:	b1d0      	cbz	r0, 18152 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   1811c:	2108      	movs	r1, #8
   1811e:	4408      	add	r0, r1
   18120:	f004 fc82 	bl	1ca28 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   18124:	882b      	ldrh	r3, [r5, #0]
   18126:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   18128:	886b      	ldrh	r3, [r5, #2]
   1812a:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1812c:	88ab      	ldrh	r3, [r5, #4]
   1812e:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   18130:	88eb      	ldrh	r3, [r5, #6]
   18132:	80c3      	strh	r3, [r0, #6]
   18134:	2300      	movs	r3, #0
   18136:	9300      	str	r3, [sp, #0]
   18138:	4622      	mov	r2, r4
   1813a:	2105      	movs	r1, #5
   1813c:	4630      	mov	r0, r6
   1813e:	f00f fd58 	bl	27bf2 <bt_l2cap_send_cb>
	if (err) {
   18142:	4605      	mov	r5, r0
   18144:	b110      	cbz	r0, 1814c <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   18146:	4620      	mov	r0, r4
   18148:	f004 fb58 	bl	1c7fc <net_buf_unref>
}
   1814c:	4628      	mov	r0, r5
   1814e:	b002      	add	sp, #8
   18150:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   18152:	f06f 050b 	mvn.w	r5, #11
   18156:	e7f9      	b.n	1814c <bt_l2cap_update_conn_param+0x54>
   18158:	200034b1 	.word	0x200034b1

0001815c <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1815c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1815e:	7b43      	ldrb	r3, [r0, #13]
   18160:	2b07      	cmp	r3, #7
   18162:	d006      	beq.n	18172 <att_get+0x16>
		BT_WARN("Not connected");
   18164:	4811      	ldr	r0, [pc, #68]	; (181ac <att_get+0x50>)
   18166:	2157      	movs	r1, #87	; 0x57
   18168:	f00e f9d7 	bl	2651a <z_log_minimal_printk>
		return NULL;
   1816c:	2400      	movs	r4, #0
	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
}
   1816e:	4620      	mov	r0, r4
   18170:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   18172:	2104      	movs	r1, #4
   18174:	f00f fd60 	bl	27c38 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18178:	4604      	mov	r4, r0
   1817a:	b920      	cbnz	r0, 18186 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   1817c:	480c      	ldr	r0, [pc, #48]	; (181b0 <att_get+0x54>)
   1817e:	2145      	movs	r1, #69	; 0x45
   18180:	f00e f9cb 	bl	2651a <z_log_minimal_printk>
		return NULL;
   18184:	e7f3      	b.n	1816e <att_get+0x12>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   18186:	2102      	movs	r1, #2
   18188:	3094      	adds	r0, #148	; 0x94
   1818a:	f00f fdc9 	bl	27d20 <atomic_test_bit>
   1818e:	b950      	cbnz	r0, 181a6 <att_get+0x4a>
   18190:	4908      	ldr	r1, [pc, #32]	; (181b4 <att_get+0x58>)
   18192:	4809      	ldr	r0, [pc, #36]	; (181b8 <att_get+0x5c>)
   18194:	f640 322d 	movw	r2, #2861	; 0xb2d
   18198:	f00e f9b1 	bl	264fe <assert_print>
   1819c:	4805      	ldr	r0, [pc, #20]	; (181b4 <att_get+0x58>)
   1819e:	f640 312d 	movw	r1, #2861	; 0xb2d
   181a2:	f00e f9a5 	bl	264f0 <assert_post_action>
	return att_chan->att;
   181a6:	f854 4c04 	ldr.w	r4, [r4, #-4]
   181aa:	e7e0      	b.n	1816e <att_get+0x12>
   181ac:	0002c4e3 	.word	0x0002c4e3
   181b0:	0002c4f6 	.word	0x0002c4f6
   181b4:	0002c516 	.word	0x0002c516
   181b8:	0002aa75 	.word	0x0002aa75

000181bc <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   181bc:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   181be:	3804      	subs	r0, #4
   181c0:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   181c2:	a901      	add	r1, sp, #4
   181c4:	4802      	ldr	r0, [pc, #8]	; (181d0 <bt_att_released+0x14>)
   181c6:	f007 ff73 	bl	200b0 <k_mem_slab_free>
}
   181ca:	b003      	add	sp, #12
   181cc:	f85d fb04 	ldr.w	pc, [sp], #4
   181d0:	200007e8 	.word	0x200007e8

000181d4 <tx_meta_data_free>:
{
   181d4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   181d6:	4604      	mov	r4, r0
   181d8:	b940      	cbnz	r0, 181ec <tx_meta_data_free+0x18>
   181da:	490a      	ldr	r1, [pc, #40]	; (18204 <tx_meta_data_free+0x30>)
   181dc:	480a      	ldr	r0, [pc, #40]	; (18208 <tx_meta_data_free+0x34>)
   181de:	22a4      	movs	r2, #164	; 0xa4
   181e0:	f00e f98d 	bl	264fe <assert_print>
   181e4:	4807      	ldr	r0, [pc, #28]	; (18204 <tx_meta_data_free+0x30>)
   181e6:	21a4      	movs	r1, #164	; 0xa4
   181e8:	f00e f982 	bl	264f0 <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   181ec:	2100      	movs	r1, #0
   181ee:	4620      	mov	r0, r4
   181f0:	2214      	movs	r2, #20
   181f2:	f00f f823 	bl	2723c <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   181f6:	4621      	mov	r1, r4
   181f8:	4804      	ldr	r0, [pc, #16]	; (1820c <tx_meta_data_free+0x38>)
}
   181fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   181fe:	f011 bb78 	b.w	298f2 <k_queue_append>
   18202:	bf00      	nop
   18204:	0002c516 	.word	0x0002c516
   18208:	0002aa75 	.word	0x0002aa75
   1820c:	200008b8 	.word	0x200008b8

00018210 <find_type_cb>:
{
   18210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   18214:	f8d2 9000 	ldr.w	r9, [r2]
{
   18218:	b091      	sub	sp, #68	; 0x44
   1821a:	4607      	mov	r7, r0
   1821c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1821e:	2500      	movs	r5, #0
   18220:	f642 0301 	movw	r3, #10241	; 0x2801
   18224:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   18226:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1822a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1822e:	a90b      	add	r1, sp, #44	; 0x2c
{
   18230:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18232:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18236:	f00f f866 	bl	27306 <bt_uuid_cmp>
   1823a:	2800      	cmp	r0, #0
   1823c:	d060      	beq.n	18300 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1823e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18242:	6838      	ldr	r0, [r7, #0]
   18244:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18248:	a90b      	add	r1, sp, #44	; 0x2c
   1824a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1824e:	f00f f85a 	bl	27306 <bt_uuid_cmp>
   18252:	b138      	cbz	r0, 18264 <find_type_cb+0x54>
		if (data->group &&
   18254:	68a3      	ldr	r3, [r4, #8]
   18256:	b11b      	cbz	r3, 18260 <find_type_cb+0x50>
   18258:	885a      	ldrh	r2, [r3, #2]
   1825a:	42b2      	cmp	r2, r6
   1825c:	d200      	bcs.n	18260 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1825e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   18260:	2001      	movs	r0, #1
   18262:	e009      	b.n	18278 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   18264:	6861      	ldr	r1, [r4, #4]
   18266:	4608      	mov	r0, r1
   18268:	f00f fcfb 	bl	27c62 <net_buf_frags_len>
   1826c:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   18270:	1a1b      	subs	r3, r3, r0
   18272:	2b03      	cmp	r3, #3
   18274:	d803      	bhi.n	1827e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   18276:	2000      	movs	r0, #0
}
   18278:	b011      	add	sp, #68	; 0x44
   1827a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1827e:	4608      	mov	r0, r1
   18280:	f004 fb18 	bl	1c8b4 <net_buf_frag_last>
   18284:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   18286:	6860      	ldr	r0, [r4, #4]
   18288:	f00f fceb 	bl	27c62 <net_buf_frags_len>
   1828c:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   18290:	f105 0b08 	add.w	fp, r5, #8
   18294:	ebaa 0a00 	sub.w	sl, sl, r0
   18298:	4658      	mov	r0, fp
   1829a:	f011 f82d 	bl	292f8 <net_buf_simple_tailroom>
   1829e:	4582      	cmp	sl, r0
   182a0:	d231      	bcs.n	18306 <find_type_cb+0xf6>
   182a2:	6860      	ldr	r0, [r4, #4]
   182a4:	f00f fcdd 	bl	27c62 <net_buf_frags_len>
   182a8:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   182ac:	1a18      	subs	r0, r3, r0
	if (!len) {
   182ae:	b970      	cbnz	r0, 182ce <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   182b0:	6863      	ldr	r3, [r4, #4]
   182b2:	7998      	ldrb	r0, [r3, #6]
   182b4:	f004 f810 	bl	1c2d8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   182b8:	2200      	movs	r2, #0
   182ba:	2300      	movs	r3, #0
   182bc:	f011 f80b 	bl	292d6 <net_buf_alloc_fixed>
		if (!frag) {
   182c0:	4605      	mov	r5, r0
   182c2:	2800      	cmp	r0, #0
   182c4:	d0d7      	beq.n	18276 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   182c6:	4601      	mov	r1, r0
   182c8:	6860      	ldr	r0, [r4, #4]
   182ca:	f004 fb33 	bl	1c934 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   182ce:	2300      	movs	r3, #0
   182d0:	9300      	str	r3, [sp, #0]
   182d2:	f8d7 9004 	ldr.w	r9, [r7, #4]
   182d6:	4639      	mov	r1, r7
   182d8:	2310      	movs	r3, #16
   182da:	aa02      	add	r2, sp, #8
   182dc:	4640      	mov	r0, r8
   182de:	47c8      	blx	r9
	if (read < 0) {
   182e0:	1e07      	subs	r7, r0, #0
   182e2:	db0d      	blt.n	18300 <find_type_cb+0xf0>
	if (read != data->value_len) {
   182e4:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   182e6:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   182e8:	42ba      	cmp	r2, r7
   182ea:	d02b      	beq.n	18344 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   182ec:	4601      	mov	r1, r0
   182ee:	a80b      	add	r0, sp, #44	; 0x2c
   182f0:	f00f f837 	bl	27362 <bt_uuid_create>
   182f4:	b958      	cbnz	r0, 1830e <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   182f6:	7c22      	ldrb	r2, [r4, #16]
   182f8:	4814      	ldr	r0, [pc, #80]	; (1834c <find_type_cb+0x13c>)
   182fa:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
   182fc:	f00e f90d 	bl	2651a <z_log_minimal_printk>
	data->group = NULL;
   18300:	2300      	movs	r3, #0
   18302:	60a3      	str	r3, [r4, #8]
   18304:	e7ac      	b.n	18260 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   18306:	4658      	mov	r0, fp
   18308:	f010 fff6 	bl	292f8 <net_buf_simple_tailroom>
   1830c:	e7cf      	b.n	182ae <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1830e:	b2fa      	uxtb	r2, r7
   18310:	a902      	add	r1, sp, #8
   18312:	a806      	add	r0, sp, #24
   18314:	f00f f825 	bl	27362 <bt_uuid_create>
   18318:	b918      	cbnz	r0, 18322 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   1831a:	480d      	ldr	r0, [pc, #52]	; (18350 <find_type_cb+0x140>)
   1831c:	463a      	mov	r2, r7
   1831e:	2157      	movs	r1, #87	; 0x57
   18320:	e7ec      	b.n	182fc <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18322:	a906      	add	r1, sp, #24
   18324:	a80b      	add	r0, sp, #44	; 0x2c
   18326:	f00e ffee 	bl	27306 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1832a:	2800      	cmp	r0, #0
   1832c:	d1e8      	bne.n	18300 <find_type_cb+0xf0>
	data->err = 0x00;
   1832e:	2300      	movs	r3, #0
   18330:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   18332:	2104      	movs	r1, #4
   18334:	f105 0008 	add.w	r0, r5, #8
   18338:	f004 fb76 	bl	1ca28 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1833c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1833e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18340:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   18342:	e78d      	b.n	18260 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   18344:	a902      	add	r1, sp, #8
   18346:	f00e ff45 	bl	271d4 <memcmp>
   1834a:	e7ee      	b.n	1832a <find_type_cb+0x11a>
   1834c:	0002c545 	.word	0x0002c545
   18350:	0002c569 	.word	0x0002c569

00018354 <bt_att_connected>:
{
   18354:	b510      	push	{r4, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   18356:	1f02      	subs	r2, r0, #4
{
   18358:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   1835a:	3094      	adds	r0, #148	; 0x94
   1835c:	f3bf 8f5b 	dmb	ish
   18360:	e850 3f00 	ldrex	r3, [r0]
   18364:	f043 0304 	orr.w	r3, r3, #4
   18368:	e840 3100 	strex	r1, r3, [r0]
   1836c:	2900      	cmp	r1, #0
   1836e:	d1f7      	bne.n	18360 <bt_att_connected+0xc>
   18370:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   18374:	2103      	movs	r1, #3
   18376:	f00f fcd3 	bl	27d20 <atomic_test_bit>
   1837a:	b910      	cbnz	r0, 18382 <bt_att_connected+0x2e>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1837c:	2317      	movs	r3, #23
   1837e:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18380:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   18382:	4610      	mov	r0, r2
   18384:	f00f fd2a 	bl	27ddc <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   18388:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1838c:	4903      	ldr	r1, [pc, #12]	; (1839c <bt_att_connected+0x48>)
   1838e:	f008 fe9b 	bl	210c8 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   18392:	6820      	ldr	r0, [r4, #0]
}
   18394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   18398:	f002 b9ae 	b.w	1a6f8 <bt_gatt_connected>
   1839c:	000190ed 	.word	0x000190ed

000183a0 <read_group_cb>:
{
   183a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   183a4:	4605      	mov	r5, r0
   183a6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   183a8:	f04f 0800 	mov.w	r8, #0
   183ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   183b0:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   183b2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   183b4:	f88d 8008 	strb.w	r8, [sp, #8]
   183b8:	a902      	add	r1, sp, #8
{
   183ba:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   183bc:	f8ad 300a 	strh.w	r3, [sp, #10]
   183c0:	f00e ffa1 	bl	27306 <bt_uuid_cmp>
   183c4:	b1a0      	cbz	r0, 183f0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   183c6:	f642 0301 	movw	r3, #10241	; 0x2801
   183ca:	6828      	ldr	r0, [r5, #0]
   183cc:	f88d 800c 	strb.w	r8, [sp, #12]
   183d0:	a903      	add	r1, sp, #12
   183d2:	f8ad 300e 	strh.w	r3, [sp, #14]
   183d6:	f00e ff96 	bl	27306 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   183da:	b148      	cbz	r0, 183f0 <read_group_cb+0x50>
		if (data->group &&
   183dc:	6923      	ldr	r3, [r4, #16]
   183de:	b11b      	cbz	r3, 183e8 <read_group_cb+0x48>
   183e0:	885a      	ldrh	r2, [r3, #2]
   183e2:	42b2      	cmp	r2, r6
   183e4:	d200      	bcs.n	183e8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   183e6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   183e8:	2001      	movs	r0, #1
}
   183ea:	b004      	add	sp, #16
   183ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   183f0:	6861      	ldr	r1, [r4, #4]
   183f2:	6828      	ldr	r0, [r5, #0]
   183f4:	f00e ff87 	bl	27306 <bt_uuid_cmp>
   183f8:	b110      	cbz	r0, 18400 <read_group_cb+0x60>
		data->group = NULL;
   183fa:	2300      	movs	r3, #0
   183fc:	6123      	str	r3, [r4, #16]
   183fe:	e7f3      	b.n	183e8 <read_group_cb+0x48>
	if (data->rsp->len &&
   18400:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18402:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   18404:	781a      	ldrb	r2, [r3, #0]
   18406:	b132      	cbz	r2, 18416 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18408:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1840a:	8981      	ldrh	r1, [r0, #12]
   1840c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1840e:	4293      	cmp	r3, r2
   18410:	da01      	bge.n	18416 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   18412:	2000      	movs	r0, #0
   18414:	e7e9      	b.n	183ea <read_group_cb+0x4a>
   18416:	2104      	movs	r1, #4
   18418:	3008      	adds	r0, #8
   1841a:	f004 fb05 	bl	1ca28 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1841e:	4b09      	ldr	r3, [pc, #36]	; (18444 <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   18420:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18422:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18424:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18426:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18428:	4629      	mov	r1, r5
   1842a:	9300      	str	r3, [sp, #0]
   1842c:	9401      	str	r4, [sp, #4]
   1842e:	2300      	movs	r3, #0
   18430:	4638      	mov	r0, r7
   18432:	f00f fd46 	bl	27ec2 <att_chan_read>
	if (read < 0) {
   18436:	2800      	cmp	r0, #0
   18438:	dbeb      	blt.n	18412 <read_group_cb+0x72>
	if (!data->group) {
   1843a:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1843c:	3800      	subs	r0, #0
   1843e:	bf18      	it	ne
   18440:	2001      	movne	r0, #1
   18442:	e7d2      	b.n	183ea <read_group_cb+0x4a>
   18444:	00027e3d 	.word	0x00027e3d

00018448 <chan_send>:
{
   18448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   1844c:	688b      	ldr	r3, [r1, #8]
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1844e:	f8d1 8014 	ldr.w	r8, [r1, #20]
{
   18452:	4606      	mov	r6, r0
   18454:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   18456:	3098      	adds	r0, #152	; 0x98
   18458:	2102      	movs	r1, #2
   1845a:	f00f fc61 	bl	27d20 <atomic_test_bit>
   1845e:	2800      	cmp	r0, #0
   18460:	d049      	beq.n	184f6 <chan_send+0xae>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18462:	781b      	ldrb	r3, [r3, #0]
   18464:	2bd2      	cmp	r3, #210	; 0xd2
   18466:	d114      	bne.n	18492 <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
   18468:	6833      	ldr	r3, [r6, #0]
   1846a:	4621      	mov	r1, r4
   1846c:	6818      	ldr	r0, [r3, #0]
   1846e:	f010 fe6d 	bl	2914c <bt_smp_sign>
		if (err) {
   18472:	4605      	mov	r5, r0
   18474:	b168      	cbz	r0, 18492 <chan_send+0x4a>
			BT_ERR("Error signing data");
   18476:	4821      	ldr	r0, [pc, #132]	; (184fc <chan_send+0xb4>)
   18478:	2145      	movs	r1, #69	; 0x45
   1847a:	f00e f84e 	bl	2651a <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1847e:	6960      	ldr	r0, [r4, #20]
   18480:	f7ff fea8 	bl	181d4 <tx_meta_data_free>
			net_buf_unref(buf);
   18484:	4620      	mov	r0, r4
   18486:	f004 f9b9 	bl	1c7fc <net_buf_unref>
}
   1848a:	4628      	mov	r0, r5
   1848c:	b003      	add	sp, #12
   1848e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   18492:	f104 0008 	add.w	r0, r4, #8
   18496:	f010 ff2b 	bl	292f0 <net_buf_simple_headroom>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1849a:	6833      	ldr	r3, [r6, #0]
	state->len = buf->len;
   1849c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   184a0:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   184a2:	68a3      	ldr	r3, [r4, #8]
	data->att_chan = chan;
   184a4:	f8c8 6000 	str.w	r6, [r8]
	state->offset = net_buf_simple_headroom(buf);
   184a8:	4607      	mov	r7, r0
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   184aa:	7818      	ldrb	r0, [r3, #0]
   184ac:	f00f fbf3 	bl	27c96 <att_op_get_type>
	switch (op_type) {
   184b0:	2805      	cmp	r0, #5
   184b2:	d813      	bhi.n	184dc <chan_send+0x94>
   184b4:	4b12      	ldr	r3, [pc, #72]	; (18500 <chan_send+0xb8>)
   184b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   184ba:	f8cd 8000 	str.w	r8, [sp]
   184be:	4628      	mov	r0, r5
   184c0:	4622      	mov	r2, r4
   184c2:	2104      	movs	r1, #4
   184c4:	f00f fb95 	bl	27bf2 <bt_l2cap_send_cb>
	if (err) {
   184c8:	4605      	mov	r5, r0
   184ca:	2800      	cmp	r0, #0
   184cc:	d0dd      	beq.n	1848a <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
   184ce:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   184d0:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   184d4:	fa10 f787 	uxtah	r7, r0, r7
   184d8:	60a7      	str	r7, [r4, #8]
}
   184da:	e7d6      	b.n	1848a <chan_send+0x42>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   184dc:	4909      	ldr	r1, [pc, #36]	; (18504 <chan_send+0xbc>)
   184de:	480a      	ldr	r0, [pc, #40]	; (18508 <chan_send+0xc0>)
   184e0:	f240 2256 	movw	r2, #598	; 0x256
   184e4:	f00e f80b 	bl	264fe <assert_print>
   184e8:	4806      	ldr	r0, [pc, #24]	; (18504 <chan_send+0xbc>)
   184ea:	f240 2156 	movw	r1, #598	; 0x256
   184ee:	f00d ffff 	bl	264f0 <assert_post_action>
	return att_unknown;
   184f2:	4b06      	ldr	r3, [pc, #24]	; (1850c <chan_send+0xc4>)
   184f4:	e7e1      	b.n	184ba <chan_send+0x72>
		return -EINVAL;
   184f6:	f06f 0515 	mvn.w	r5, #21
   184fa:	e7c6      	b.n	1848a <chan_send+0x42>
   184fc:	0002c58d 	.word	0x0002c58d
   18500:	0002a464 	.word	0x0002a464
   18504:	0002c516 	.word	0x0002c516
   18508:	0002aa75 	.word	0x0002aa75
   1850c:	000282b7 	.word	0x000282b7

00018510 <bt_att_chan_req_send>:
{
   18510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18512:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   18514:	4604      	mov	r4, r0
   18516:	b950      	cbnz	r0, 1852e <bt_att_chan_req_send+0x1e>
   18518:	4924      	ldr	r1, [pc, #144]	; (185ac <bt_att_chan_req_send+0x9c>)
   1851a:	4825      	ldr	r0, [pc, #148]	; (185b0 <bt_att_chan_req_send+0xa0>)
   1851c:	f240 3217 	movw	r2, #791	; 0x317
   18520:	f00d ffed 	bl	264fe <assert_print>
   18524:	4821      	ldr	r0, [pc, #132]	; (185ac <bt_att_chan_req_send+0x9c>)
   18526:	f240 3117 	movw	r1, #791	; 0x317
   1852a:	f00d ffe1 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1852e:	b955      	cbnz	r5, 18546 <bt_att_chan_req_send+0x36>
   18530:	491e      	ldr	r1, [pc, #120]	; (185ac <bt_att_chan_req_send+0x9c>)
   18532:	481f      	ldr	r0, [pc, #124]	; (185b0 <bt_att_chan_req_send+0xa0>)
   18534:	f44f 7246 	mov.w	r2, #792	; 0x318
   18538:	f00d ffe1 	bl	264fe <assert_print>
   1853c:	481b      	ldr	r0, [pc, #108]	; (185ac <bt_att_chan_req_send+0x9c>)
   1853e:	f44f 7146 	mov.w	r1, #792	; 0x318
   18542:	f00d ffd5 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   18546:	686b      	ldr	r3, [r5, #4]
   18548:	b953      	cbnz	r3, 18560 <bt_att_chan_req_send+0x50>
   1854a:	4918      	ldr	r1, [pc, #96]	; (185ac <bt_att_chan_req_send+0x9c>)
   1854c:	4818      	ldr	r0, [pc, #96]	; (185b0 <bt_att_chan_req_send+0xa0>)
   1854e:	f240 3219 	movw	r2, #793	; 0x319
   18552:	f00d ffd4 	bl	264fe <assert_print>
   18556:	4815      	ldr	r0, [pc, #84]	; (185ac <bt_att_chan_req_send+0x9c>)
   18558:	f240 3119 	movw	r1, #793	; 0x319
   1855c:	f00d ffc8 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   18560:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   18564:	b153      	cbz	r3, 1857c <bt_att_chan_req_send+0x6c>
   18566:	4911      	ldr	r1, [pc, #68]	; (185ac <bt_att_chan_req_send+0x9c>)
   18568:	4811      	ldr	r0, [pc, #68]	; (185b0 <bt_att_chan_req_send+0xa0>)
   1856a:	f240 321a 	movw	r2, #794	; 0x31a
   1856e:	f00d ffc6 	bl	264fe <assert_print>
   18572:	480e      	ldr	r0, [pc, #56]	; (185ac <bt_att_chan_req_send+0x9c>)
   18574:	f240 311a 	movw	r1, #794	; 0x31a
   18578:	f00d ffba 	bl	264f0 <assert_post_action>
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1857c:	68ae      	ldr	r6, [r5, #8]
   1857e:	4630      	mov	r0, r6
   18580:	f00f fb6f 	bl	27c62 <net_buf_frags_len>
   18584:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   18586:	4283      	cmp	r3, r0
   18588:	d30c      	bcc.n	185a4 <bt_att_chan_req_send+0x94>
	req->buf = NULL;
   1858a:	2700      	movs	r7, #0
	chan->req = req;
   1858c:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
	return chan_send(chan, buf);
   18590:	4631      	mov	r1, r6
	req->buf = NULL;
   18592:	60af      	str	r7, [r5, #8]
	return chan_send(chan, buf);
   18594:	4620      	mov	r0, r4
   18596:	f7ff ff57 	bl	18448 <chan_send>
	if (err) {
   1859a:	b110      	cbz	r0, 185a2 <bt_att_chan_req_send+0x92>
		req->buf = buf;
   1859c:	60ae      	str	r6, [r5, #8]
		chan->req = NULL;
   1859e:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
}
   185a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   185a4:	f06f 0079 	mvn.w	r0, #121	; 0x79
	return chan_req_send(chan, req);
   185a8:	e7fb      	b.n	185a2 <bt_att_chan_req_send+0x92>
   185aa:	bf00      	nop
   185ac:	0002c516 	.word	0x0002c516
   185b0:	0002aa75 	.word	0x0002aa75

000185b4 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   185b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   185b6:	2300      	movs	r3, #0
{
   185b8:	4607      	mov	r7, r0
   185ba:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   185bc:	482d      	ldr	r0, [pc, #180]	; (18674 <bt_att_accept+0xc0>)
   185be:	2200      	movs	r2, #0
   185c0:	4669      	mov	r1, sp
   185c2:	f007 fd1b 	bl	1fffc <k_mem_slab_alloc>
   185c6:	4605      	mov	r5, r0
   185c8:	b138      	cbz	r0, 185da <bt_att_accept+0x26>
		BT_ERR("No available ATT context for conn %p", conn);
   185ca:	482b      	ldr	r0, [pc, #172]	; (18678 <bt_att_accept+0xc4>)
   185cc:	463a      	mov	r2, r7
   185ce:	2145      	movs	r1, #69	; 0x45
		BT_WARN("No available ATT channel for conn %p", att->conn);
   185d0:	f00d ffa3 	bl	2651a <z_log_minimal_printk>
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   185d4:	f06f 050b 	mvn.w	r5, #11
   185d8:	e048      	b.n	1866c <bt_att_accept+0xb8>
	return z_impl_z_current_get();
   185da:	f009 fe13 	bl	22204 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   185de:	4b27      	ldr	r3, [pc, #156]	; (1867c <bt_att_accept+0xc8>)
	(void)memset(att, 0, sizeof(*att));
   185e0:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   185e2:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   185e4:	2230      	movs	r2, #48	; 0x30
   185e6:	9800      	ldr	r0, [sp, #0]
   185e8:	f00e fe28 	bl	2723c <memset>
	att->conn = conn;
   185ec:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   185ee:	4824      	ldr	r0, [pc, #144]	; (18680 <bt_att_accept+0xcc>)
	list->tail = NULL;
   185f0:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   185f2:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
   185f6:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   185fa:	2200      	movs	r2, #0
   185fc:	2300      	movs	r3, #0
   185fe:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   18600:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18602:	f007 fcfb 	bl	1fffc <k_mem_slab_alloc>
   18606:	4605      	mov	r5, r0
   18608:	b118      	cbz	r0, 18612 <bt_att_accept+0x5e>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   1860a:	6822      	ldr	r2, [r4, #0]
   1860c:	481d      	ldr	r0, [pc, #116]	; (18684 <bt_att_accept+0xd0>)
   1860e:	2157      	movs	r1, #87	; 0x57
   18610:	e7de      	b.n	185d0 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   18612:	4601      	mov	r1, r0
   18614:	22f8      	movs	r2, #248	; 0xf8
   18616:	9801      	ldr	r0, [sp, #4]
   18618:	f00e fe10 	bl	2723c <memset>
	chan->chan.chan.ops = &ops;
   1861c:	9801      	ldr	r0, [sp, #4]
   1861e:	4b1a      	ldr	r3, [pc, #104]	; (18688 <bt_att_accept+0xd4>)
   18620:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   18622:	30a0      	adds	r0, #160	; 0xa0
   18624:	f011 f958 	bl	298d8 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18628:	9b01      	ldr	r3, [sp, #4]
   1862a:	f3bf 8f5b 	dmb	ish
   1862e:	3398      	adds	r3, #152	; 0x98
   18630:	e853 2f00 	ldrex	r2, [r3]
   18634:	e843 5100 	strex	r1, r5, [r3]
   18638:	2900      	cmp	r1, #0
   1863a:	d1f9      	bne.n	18630 <bt_att_accept+0x7c>
   1863c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   18640:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   18642:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	chan->att = att;
   18644:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
   18646:	b91b      	cbnz	r3, 18650 <bt_att_accept+0x9c>
   18648:	f104 000c 	add.w	r0, r4, #12
   1864c:	f011 f944 	bl	298d8 <z_impl_k_queue_init>
	parent->next = child;
   18650:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   18652:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   18656:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   18658:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	list->head = node;
   1865c:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1865e:	b902      	cbnz	r2, 18662 <bt_att_accept+0xae>
	list->tail = node;
   18660:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   18662:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   18664:	2b00      	cmp	r3, #0
   18666:	d0b5      	beq.n	185d4 <bt_att_accept+0x20>
	}

	*ch = &chan->chan.chan;
   18668:	3304      	adds	r3, #4
   1866a:	6033      	str	r3, [r6, #0]

	return 0;
}
   1866c:	4628      	mov	r0, r5
   1866e:	b003      	add	sp, #12
   18670:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18672:	bf00      	nop
   18674:	200007c8 	.word	0x200007c8
   18678:	0002c5a5 	.word	0x0002c5a5
   1867c:	200025d4 	.word	0x200025d4
   18680:	200007e8 	.word	0x200007e8
   18684:	0002c5cf 	.word	0x0002c5cf
   18688:	20000588 	.word	0x20000588

0001868c <read_type_cb>:
{
   1868c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   18690:	f8d2 8000 	ldr.w	r8, [r2]
{
   18694:	4606      	mov	r6, r0
   18696:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18698:	6800      	ldr	r0, [r0, #0]
   1869a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1869c:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
   186a0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   186a2:	f00e fe30 	bl	27306 <bt_uuid_cmp>
   186a6:	4607      	mov	r7, r0
   186a8:	2800      	cmp	r0, #0
   186aa:	d13e      	bne.n	1872a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   186ac:	4628      	mov	r0, r5
   186ae:	2295      	movs	r2, #149	; 0x95
   186b0:	4631      	mov	r1, r6
   186b2:	f010 f9ce 	bl	28a52 <bt_gatt_check_perm>
   186b6:	4605      	mov	r5, r0
   186b8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   186ba:	b148      	cbz	r0, 186d0 <read_type_cb+0x44>
		if (data->rsp->len) {
   186bc:	68e3      	ldr	r3, [r4, #12]
   186be:	781b      	ldrb	r3, [r3, #0]
   186c0:	b923      	cbnz	r3, 186cc <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   186c2:	2500      	movs	r5, #0
}
   186c4:	4628      	mov	r0, r5
   186c6:	b003      	add	sp, #12
   186c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   186cc:	7527      	strb	r7, [r4, #20]
   186ce:	e7f8      	b.n	186c2 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   186d0:	68a0      	ldr	r0, [r4, #8]
   186d2:	f004 f8ef 	bl	1c8b4 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   186d6:	2102      	movs	r1, #2
   186d8:	3008      	adds	r0, #8
   186da:	f004 f9a5 	bl	1ca28 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   186de:	4b14      	ldr	r3, [pc, #80]	; (18730 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   186e0:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   186e2:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   186e4:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   186e8:	4631      	mov	r1, r6
   186ea:	9300      	str	r3, [sp, #0]
   186ec:	9401      	str	r4, [sp, #4]
   186ee:	462b      	mov	r3, r5
   186f0:	4640      	mov	r0, r8
   186f2:	f00f fbe6 	bl	27ec2 <att_chan_read>
	if (read < 0) {
   186f6:	2800      	cmp	r0, #0
   186f8:	da07      	bge.n	1870a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   186fa:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   186fe:	bf26      	itte	cs
   18700:	4240      	negcs	r0, r0
   18702:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   18704:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   18706:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18708:	e7dc      	b.n	186c4 <read_type_cb+0x38>
	if (!data->item) {
   1870a:	6923      	ldr	r3, [r4, #16]
   1870c:	2b00      	cmp	r3, #0
   1870e:	d0d8      	beq.n	186c2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18710:	68a0      	ldr	r0, [r4, #8]
   18712:	f00f faa6 	bl	27c62 <net_buf_frags_len>
   18716:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1871a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1871c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1871e:	7818      	ldrb	r0, [r3, #0]
   18720:	4285      	cmp	r5, r0
   18722:	bf94      	ite	ls
   18724:	2500      	movls	r5, #0
   18726:	2501      	movhi	r5, #1
   18728:	e7cc      	b.n	186c4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1872a:	2501      	movs	r5, #1
   1872c:	e7ca      	b.n	186c4 <read_type_cb+0x38>
   1872e:	bf00      	nop
   18730:	00027c73 	.word	0x00027c73

00018734 <bt_att_chan_create_pdu>:
{
   18734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18736:	1c53      	adds	r3, r2, #1
   18738:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   1873a:	4293      	cmp	r3, r2
{
   1873c:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1873e:	d906      	bls.n	1874e <bt_att_chan_create_pdu+0x1a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   18740:	481c      	ldr	r0, [pc, #112]	; (187b4 <bt_att_chan_create_pdu+0x80>)
   18742:	2157      	movs	r1, #87	; 0x57
   18744:	f00d fee9 	bl	2651a <z_log_minimal_printk>
		return NULL;
   18748:	2400      	movs	r4, #0
}
   1874a:	4620      	mov	r0, r4
   1874c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   1874e:	4608      	mov	r0, r1
   18750:	f00f faa1 	bl	27c96 <att_op_get_type>
   18754:	2802      	cmp	r0, #2
   18756:	d001      	beq.n	1875c <bt_att_chan_create_pdu+0x28>
   18758:	2804      	cmp	r0, #4
   1875a:	d110      	bne.n	1877e <bt_att_chan_create_pdu+0x4a>
   1875c:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   18760:	2700      	movs	r7, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   18762:	2100      	movs	r1, #0
   18764:	4632      	mov	r2, r6
   18766:	463b      	mov	r3, r7
   18768:	4608      	mov	r0, r1
   1876a:	f00f fa3f 	bl	27bec <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1876e:	4604      	mov	r4, r0
   18770:	b950      	cbnz	r0, 18788 <bt_att_chan_create_pdu+0x54>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   18772:	4811      	ldr	r0, [pc, #68]	; (187b8 <bt_att_chan_create_pdu+0x84>)
   18774:	462a      	mov	r2, r5
   18776:	2145      	movs	r1, #69	; 0x45
   18778:	f00d fecf 	bl	2651a <z_log_minimal_printk>
		return NULL;
   1877c:	e7e5      	b.n	1874a <bt_att_chan_create_pdu+0x16>
		timeout = K_FOREVER;
   1877e:	f04f 36ff 	mov.w	r6, #4294967295
   18782:	f04f 37ff 	mov.w	r7, #4294967295
   18786:	e7ec      	b.n	18762 <bt_att_chan_create_pdu+0x2e>
	return z_impl_k_queue_get(queue, timeout);
   18788:	480c      	ldr	r0, [pc, #48]	; (187bc <bt_att_chan_create_pdu+0x88>)
   1878a:	4632      	mov	r2, r6
   1878c:	463b      	mov	r3, r7
   1878e:	f008 f877 	bl	20880 <z_impl_k_queue_get>
	if (!data) {
   18792:	b938      	cbnz	r0, 187a4 <bt_att_chan_create_pdu+0x70>
		BT_WARN("Unable to allocate ATT TX meta");
   18794:	480a      	ldr	r0, [pc, #40]	; (187c0 <bt_att_chan_create_pdu+0x8c>)
   18796:	2157      	movs	r1, #87	; 0x57
   18798:	f00d febf 	bl	2651a <z_log_minimal_printk>
		net_buf_unref(buf);
   1879c:	4620      	mov	r0, r4
   1879e:	f004 f82d 	bl	1c7fc <net_buf_unref>
		return NULL;
   187a2:	e7d1      	b.n	18748 <bt_att_chan_create_pdu+0x14>
	bt_att_tx_meta_data(buf) = data;
   187a4:	6160      	str	r0, [r4, #20]
   187a6:	2101      	movs	r1, #1
   187a8:	f104 0008 	add.w	r0, r4, #8
   187ac:	f004 f93c 	bl	1ca28 <net_buf_simple_add>
	hdr->code = op;
   187b0:	7005      	strb	r5, [r0, #0]
	return buf;
   187b2:	e7ca      	b.n	1874a <bt_att_chan_create_pdu+0x16>
   187b4:	0002c5f9 	.word	0x0002c5f9
   187b8:	0002c36f 	.word	0x0002c36f
   187bc:	200008b8 	.word	0x200008b8
   187c0:	0002c623 	.word	0x0002c623

000187c4 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   187c4:	898b      	ldrh	r3, [r1, #12]
{
   187c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   187ca:	4607      	mov	r7, r0
   187cc:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   187ce:	b933      	cbnz	r3, 187de <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   187d0:	4835      	ldr	r0, [pc, #212]	; (188a8 <bt_att_recv+0xe4>)
   187d2:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected indication");
   187d4:	f00d fea1 	bl	2651a <z_log_minimal_printk>
}
   187d8:	2000      	movs	r0, #0
   187da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   187de:	2101      	movs	r1, #1
   187e0:	f105 0008 	add.w	r0, r5, #8
   187e4:	f004 f902 	bl	1c9ec <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   187e8:	f857 3c04 	ldr.w	r3, [r7, #-4]
   187ec:	4604      	mov	r4, r0
   187ee:	2b00      	cmp	r3, #0
   187f0:	d0f2      	beq.n	187d8 <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
   187f2:	7802      	ldrb	r2, [r0, #0]
   187f4:	4e2d      	ldr	r6, [pc, #180]	; (188ac <bt_att_recv+0xe8>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   187f6:	f1a7 0804 	sub.w	r8, r7, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   187fa:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   187fc:	f816 1033 	ldrb.w	r1, [r6, r3, lsl #3]
   18800:	4291      	cmp	r1, r2
   18802:	d111      	bne.n	18828 <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   18804:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   18808:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   1880c:	f893 a002 	ldrb.w	sl, [r3, #2]
   18810:	f1ba 0f01 	cmp.w	sl, #1
   18814:	d11f      	bne.n	18856 <bt_att_recv+0x92>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   18816:	2100      	movs	r1, #0
   18818:	f107 0094 	add.w	r0, r7, #148	; 0x94
   1881c:	f00f fc1d 	bl	2805a <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   18820:	b328      	cbz	r0, 1886e <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected request");
   18822:	4823      	ldr	r0, [pc, #140]	; (188b0 <bt_att_recv+0xec>)
   18824:	2157      	movs	r1, #87	; 0x57
   18826:	e7d5      	b.n	187d4 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18828:	3301      	adds	r3, #1
   1882a:	2b0e      	cmp	r3, #14
   1882c:	d1e6      	bne.n	187fc <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1882e:	4821      	ldr	r0, [pc, #132]	; (188b4 <bt_att_recv+0xf0>)
   18830:	2157      	movs	r1, #87	; 0x57
   18832:	f00d fe72 	bl	2651a <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   18836:	7821      	ldrb	r1, [r4, #0]
   18838:	4608      	mov	r0, r1
   1883a:	f00f fa2c 	bl	27c96 <att_op_get_type>
   1883e:	2800      	cmp	r0, #0
   18840:	d0ca      	beq.n	187d8 <bt_att_recv+0x14>
   18842:	2805      	cmp	r0, #5
   18844:	d0c8      	beq.n	187d8 <bt_att_recv+0x14>
	if (!req) {
   18846:	2900      	cmp	r1, #0
   18848:	d0c6      	beq.n	187d8 <bt_att_recv+0x14>
   1884a:	2306      	movs	r3, #6
   1884c:	2200      	movs	r2, #0
   1884e:	4640      	mov	r0, r8
   18850:	f00f fd9b 	bl	2838a <send_err_rsp.part.0>
   18854:	e7c0      	b.n	187d8 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   18856:	f1ba 0f05 	cmp.w	sl, #5
   1885a:	d108      	bne.n	1886e <bt_att_recv+0xaa>
			   atomic_test_and_set_bit(att_chan->flags,
   1885c:	2101      	movs	r1, #1
   1885e:	f107 0094 	add.w	r0, r7, #148	; 0x94
   18862:	f00f fbfa 	bl	2805a <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   18866:	b110      	cbz	r0, 1886e <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected indication");
   18868:	4813      	ldr	r0, [pc, #76]	; (188b8 <bt_att_recv+0xf4>)
   1886a:	2157      	movs	r1, #87	; 0x57
   1886c:	e7b2      	b.n	187d4 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   1886e:	444e      	add	r6, r9
   18870:	89aa      	ldrh	r2, [r5, #12]
   18872:	7873      	ldrb	r3, [r6, #1]
   18874:	4293      	cmp	r3, r2
   18876:	d909      	bls.n	1888c <bt_att_recv+0xc8>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   18878:	7823      	ldrb	r3, [r4, #0]
   1887a:	4810      	ldr	r0, [pc, #64]	; (188bc <bt_att_recv+0xf8>)
   1887c:	2145      	movs	r1, #69	; 0x45
   1887e:	f00d fe4c 	bl	2651a <z_log_minimal_printk>
	if (handler->type == ATT_REQUEST && err) {
   18882:	f1ba 0f01 	cmp.w	sl, #1
   18886:	d1a7      	bne.n	187d8 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   18888:	2304      	movs	r3, #4
   1888a:	e009      	b.n	188a0 <bt_att_recv+0xdc>
		err = handler->func(att_chan, buf);
   1888c:	6873      	ldr	r3, [r6, #4]
   1888e:	4629      	mov	r1, r5
   18890:	4640      	mov	r0, r8
   18892:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   18894:	f1ba 0f01 	cmp.w	sl, #1
		err = handler->func(att_chan, buf);
   18898:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1889a:	d19d      	bne.n	187d8 <bt_att_recv+0x14>
   1889c:	2800      	cmp	r0, #0
   1889e:	d09b      	beq.n	187d8 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   188a0:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   188a2:	2900      	cmp	r1, #0
   188a4:	d098      	beq.n	187d8 <bt_att_recv+0x14>
   188a6:	e7d1      	b.n	1884c <bt_att_recv+0x88>
   188a8:	0002c647 	.word	0x0002c647
   188ac:	0002a47c 	.word	0x0002a47c
   188b0:	0002c667 	.word	0x0002c667
   188b4:	0002c6d0 	.word	0x0002c6d0
   188b8:	0002c688 	.word	0x0002c688
   188bc:	0002c6ac 	.word	0x0002c6ac

000188c0 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   188c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   188c4:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   188c6:	6803      	ldr	r3, [r0, #0]
   188c8:	460e      	mov	r6, r1
   188ca:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   188cc:	b087      	sub	sp, #28
   188ce:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   188d0:	bf18      	it	ne
   188d2:	2101      	movne	r1, #1
   188d4:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   188d6:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   188d8:	f010 f8ee 	bl	28ab8 <bt_gatt_change_aware>
   188dc:	b958      	cbnz	r0, 188f6 <att_write_rsp.constprop.0+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   188de:	2105      	movs	r1, #5
   188e0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   188e4:	f00f fbb9 	bl	2805a <atomic_test_and_set_bit>
   188e8:	2800      	cmp	r0, #0
   188ea:	d04e      	beq.n	1898a <att_write_rsp.constprop.0+0xca>
			return 0;
   188ec:	2500      	movs	r5, #0
}
   188ee:	4628      	mov	r0, r5
   188f0:	b007      	add	sp, #28
   188f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!handle) {
   188f6:	2f00      	cmp	r7, #0
   188f8:	d049      	beq.n	1898e <att_write_rsp.constprop.0+0xce>
	(void)memset(&data, 0, sizeof(data));
   188fa:	2218      	movs	r2, #24
   188fc:	2100      	movs	r1, #0
   188fe:	4668      	mov	r0, sp
   18900:	f00e fc9c 	bl	2723c <memset>
	if (rsp) {
   18904:	f1b8 0f00 	cmp.w	r8, #0
   18908:	d12e      	bne.n	18968 <att_write_rsp.constprop.0+0xa8>
	data.conn = chan->att->conn;
   1890a:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1890c:	4a21      	ldr	r2, [pc, #132]	; (18994 <att_write_rsp.constprop.0+0xd4>)
	data.conn = chan->att->conn;
   1890e:	681b      	ldr	r3, [r3, #0]
   18910:	9300      	str	r3, [sp, #0]
	data.value = value;
   18912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18914:	9303      	str	r3, [sp, #12]
	data.len = len;
   18916:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   1891a:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1891e:	2301      	movs	r3, #1
   18920:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   18924:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18928:	466b      	mov	r3, sp
   1892a:	4639      	mov	r1, r7
   1892c:	4638      	mov	r0, r7
	data.req = req;
   1892e:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   18932:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18936:	f00f f9fc 	bl	27d32 <bt_gatt_foreach_attr>
	if (data.err) {
   1893a:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1893e:	b1ed      	cbz	r5, 1897c <att_write_rsp.constprop.0+0xbc>
		if (rsp) {
   18940:	f1b8 0f00 	cmp.w	r8, #0
   18944:	d0d2      	beq.n	188ec <att_write_rsp.constprop.0+0x2c>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18946:	9b01      	ldr	r3, [sp, #4]
   18948:	6958      	ldr	r0, [r3, #20]
   1894a:	f7ff fc43 	bl	181d4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1894e:	9801      	ldr	r0, [sp, #4]
   18950:	f003 ff54 	bl	1c7fc <net_buf_unref>
	if (!req) {
   18954:	2e00      	cmp	r6, #0
   18956:	d0c9      	beq.n	188ec <att_write_rsp.constprop.0+0x2c>
   18958:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1895c:	463a      	mov	r2, r7
   1895e:	4631      	mov	r1, r6
   18960:	4620      	mov	r0, r4
   18962:	f00f fd12 	bl	2838a <send_err_rsp.part.0>
   18966:	e7c1      	b.n	188ec <att_write_rsp.constprop.0+0x2c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   18968:	2200      	movs	r2, #0
   1896a:	4641      	mov	r1, r8
   1896c:	4620      	mov	r0, r4
   1896e:	f7ff fee1 	bl	18734 <bt_att_chan_create_pdu>
   18972:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   18974:	2800      	cmp	r0, #0
   18976:	d1c8      	bne.n	1890a <att_write_rsp.constprop.0+0x4a>
			return BT_ATT_ERR_UNLIKELY;
   18978:	250e      	movs	r5, #14
   1897a:	e7b8      	b.n	188ee <att_write_rsp.constprop.0+0x2e>
	if (data.buf) {
   1897c:	9901      	ldr	r1, [sp, #4]
   1897e:	2900      	cmp	r1, #0
   18980:	d0b4      	beq.n	188ec <att_write_rsp.constprop.0+0x2c>
		bt_att_chan_send_rsp(chan, data.buf);
   18982:	4620      	mov	r0, r4
   18984:	f00f fb41 	bl	2800a <bt_att_chan_send_rsp>
   18988:	e7b1      	b.n	188ee <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1898a:	2512      	movs	r5, #18
   1898c:	e7af      	b.n	188ee <att_write_rsp.constprop.0+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1898e:	2501      	movs	r5, #1
   18990:	e7ad      	b.n	188ee <att_write_rsp.constprop.0+0x2e>
   18992:	bf00      	nop
   18994:	00027e5d 	.word	0x00027e5d

00018998 <bt_att_create_pdu>:
{
   18998:	b570      	push	{r4, r5, r6, lr}
   1899a:	460e      	mov	r6, r1
   1899c:	4615      	mov	r5, r2
	att = att_get(conn);
   1899e:	f7ff fbdd 	bl	1815c <att_get>
	if (!att) {
   189a2:	b170      	cbz	r0, 189c2 <bt_att_create_pdu+0x2a>
	return list->head;
   189a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   189a6:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   189a8:	b138      	cbz	r0, 189ba <bt_att_create_pdu+0x22>
	return node->next;
   189aa:	f850 39f0 	ldr.w	r3, [r0], #-240
   189ae:	b103      	cbz	r3, 189b2 <bt_att_create_pdu+0x1a>
   189b0:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   189b2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   189b4:	428a      	cmp	r2, r1
   189b6:	d906      	bls.n	189c6 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   189b8:	b95b      	cbnz	r3, 189d2 <bt_att_create_pdu+0x3a>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   189ba:	4809      	ldr	r0, [pc, #36]	; (189e0 <bt_att_create_pdu+0x48>)
   189bc:	2157      	movs	r1, #87	; 0x57
   189be:	f00d fdac 	bl	2651a <z_log_minimal_printk>
}
   189c2:	2000      	movs	r0, #0
   189c4:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   189c6:	462a      	mov	r2, r5
   189c8:	4631      	mov	r1, r6
}
   189ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   189ce:	f7ff beb1 	b.w	18734 <bt_att_chan_create_pdu>
   189d2:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   189d6:	b104      	cbz	r4, 189da <bt_att_create_pdu+0x42>
   189d8:	3cf0      	subs	r4, #240	; 0xf0
{
   189da:	4618      	mov	r0, r3
   189dc:	4623      	mov	r3, r4
   189de:	e7e8      	b.n	189b2 <bt_att_create_pdu+0x1a>
   189e0:	0002c6ef 	.word	0x0002c6ef

000189e4 <att_read_group_req>:
{
   189e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   189e8:	898c      	ldrh	r4, [r1, #12]
   189ea:	3c04      	subs	r4, #4
   189ec:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   189ee:	2c02      	cmp	r4, #2
{
   189f0:	4605      	mov	r5, r0
   189f2:	b08c      	sub	sp, #48	; 0x30
   189f4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   189f6:	d001      	beq.n	189fc <att_read_group_req+0x18>
   189f8:	2c10      	cmp	r4, #16
   189fa:	d172      	bne.n	18ae2 <att_read_group_req+0xfe>
   189fc:	2104      	movs	r1, #4
   189fe:	3008      	adds	r0, #8
   18a00:	f003 fff4 	bl	1c9ec <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18a04:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   18a08:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18a0a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18a0c:	1d01      	adds	r1, r0, #4
   18a0e:	4622      	mov	r2, r4
   18a10:	4640      	mov	r0, r8
   18a12:	f00e fca6 	bl	27362 <bt_uuid_create>
   18a16:	2800      	cmp	r0, #0
   18a18:	d065      	beq.n	18ae6 <att_read_group_req+0x102>
	if (!start || !end) {
   18a1a:	2e00      	cmp	r6, #0
   18a1c:	d03e      	beq.n	18a9c <att_read_group_req+0xb8>
   18a1e:	2400      	movs	r4, #0
   18a20:	2f00      	cmp	r7, #0
   18a22:	d03a      	beq.n	18a9a <att_read_group_req+0xb6>
	if (start > end) {
   18a24:	42b7      	cmp	r7, r6
   18a26:	d339      	bcc.n	18a9c <att_read_group_req+0xb8>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18a28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18a2c:	a901      	add	r1, sp, #4
   18a2e:	4640      	mov	r0, r8
   18a30:	f88d 4004 	strb.w	r4, [sp, #4]
   18a34:	f8ad 3006 	strh.w	r3, [sp, #6]
   18a38:	f00e fc65 	bl	27306 <bt_uuid_cmp>
   18a3c:	2800      	cmp	r0, #0
   18a3e:	d138      	bne.n	18ab2 <att_read_group_req+0xce>
	struct bt_conn *conn = chan->chan.chan.conn;
   18a40:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   18a42:	2214      	movs	r2, #20
   18a44:	2100      	movs	r1, #0
   18a46:	a807      	add	r0, sp, #28
   18a48:	f00e fbf8 	bl	2723c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   18a4c:	2201      	movs	r2, #1
   18a4e:	2111      	movs	r1, #17
   18a50:	4620      	mov	r0, r4
   18a52:	f7ff ffa1 	bl	18998 <bt_att_create_pdu>
   18a56:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   18a58:	2800      	cmp	r0, #0
   18a5a:	d044      	beq.n	18ae6 <att_read_group_req+0x102>
	return net_buf_simple_add(&buf->b, len);
   18a5c:	2101      	movs	r1, #1
   18a5e:	3008      	adds	r0, #8
	data.uuid = uuid;
   18a60:	e9cd 5807 	strd	r5, r8, [sp, #28]
   18a64:	f003 ffe0 	bl	1ca28 <net_buf_simple_add>
	data.rsp->len = 0U;
   18a68:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18a6c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18a6e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   18a70:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18a74:	4a1d      	ldr	r2, [pc, #116]	; (18aec <att_read_group_req+0x108>)
	data.group = NULL;
   18a76:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18a7a:	4639      	mov	r1, r7
   18a7c:	4630      	mov	r0, r6
   18a7e:	f00f f958 	bl	27d32 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   18a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18a84:	781c      	ldrb	r4, [r3, #0]
   18a86:	bb3c      	cbnz	r4, 18ad8 <att_read_group_req+0xf4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18a8a:	6958      	ldr	r0, [r3, #20]
   18a8c:	f7ff fba2 	bl	181d4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18a90:	9809      	ldr	r0, [sp, #36]	; 0x24
   18a92:	f003 feb3 	bl	1c7fc <net_buf_unref>
	if (!req) {
   18a96:	230a      	movs	r3, #10
   18a98:	e018      	b.n	18acc <att_read_group_req+0xe8>
			*err = 0U;
   18a9a:	463e      	mov	r6, r7
	if (!req) {
   18a9c:	2301      	movs	r3, #1
   18a9e:	4632      	mov	r2, r6
   18aa0:	2110      	movs	r1, #16
   18aa2:	4628      	mov	r0, r5
   18aa4:	f00f fc71 	bl	2838a <send_err_rsp.part.0>
		return 0;
   18aa8:	2400      	movs	r4, #0
}
   18aaa:	4620      	mov	r0, r4
   18aac:	b00c      	add	sp, #48	; 0x30
   18aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   18ab2:	f642 0301 	movw	r3, #10241	; 0x2801
   18ab6:	a907      	add	r1, sp, #28
   18ab8:	4640      	mov	r0, r8
   18aba:	f88d 401c 	strb.w	r4, [sp, #28]
   18abe:	f8ad 301e 	strh.w	r3, [sp, #30]
   18ac2:	f00e fc20 	bl	27306 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18ac6:	2800      	cmp	r0, #0
   18ac8:	d0ba      	beq.n	18a40 <att_read_group_req+0x5c>
	if (!req) {
   18aca:	2310      	movs	r3, #16
   18acc:	4632      	mov	r2, r6
   18ace:	2110      	movs	r1, #16
   18ad0:	4628      	mov	r0, r5
   18ad2:	f00f fc5a 	bl	2838a <send_err_rsp.part.0>
		return 0;
   18ad6:	e7e8      	b.n	18aaa <att_read_group_req+0xc6>
	bt_att_chan_send_rsp(chan, data.buf);
   18ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
   18ada:	4628      	mov	r0, r5
   18adc:	f00f fa95 	bl	2800a <bt_att_chan_send_rsp>
	return 0;
   18ae0:	e7e2      	b.n	18aa8 <att_read_group_req+0xc4>
		return BT_ATT_ERR_INVALID_PDU;
   18ae2:	2404      	movs	r4, #4
   18ae4:	e7e1      	b.n	18aaa <att_read_group_req+0xc6>
		return BT_ATT_ERR_UNLIKELY;
   18ae6:	240e      	movs	r4, #14
   18ae8:	e7df      	b.n	18aaa <att_read_group_req+0xc6>
   18aea:	bf00      	nop
   18aec:	000183a1 	.word	0x000183a1

00018af0 <att_read_mult_vl_req>:
{
   18af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18af4:	6846      	ldr	r6, [r0, #4]
{
   18af6:	b085      	sub	sp, #20
   18af8:	4604      	mov	r4, r0
   18afa:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18afc:	4630      	mov	r0, r6
   18afe:	2101      	movs	r1, #1
   18b00:	f00f ffda 	bl	28ab8 <bt_gatt_change_aware>
   18b04:	b958      	cbnz	r0, 18b1e <att_read_mult_vl_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18b06:	2105      	movs	r1, #5
   18b08:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18b0c:	f00f faa5 	bl	2805a <atomic_test_and_set_bit>
			return 0;
   18b10:	2800      	cmp	r0, #0
   18b12:	bf0c      	ite	eq
   18b14:	2012      	moveq	r0, #18
   18b16:	2000      	movne	r0, #0
}
   18b18:	b005      	add	sp, #20
   18b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   18b1e:	2210      	movs	r2, #16
   18b20:	2100      	movs	r1, #0
   18b22:	4668      	mov	r0, sp
   18b24:	f00e fb8a 	bl	2723c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   18b28:	2200      	movs	r2, #0
   18b2a:	2121      	movs	r1, #33	; 0x21
   18b2c:	4630      	mov	r0, r6
   18b2e:	f7ff ff33 	bl	18998 <bt_att_create_pdu>
   18b32:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18b34:	b368      	cbz	r0, 18b92 <att_read_mult_vl_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18b36:	f8df 9060 	ldr.w	r9, [pc, #96]	; 18b98 <att_read_mult_vl_req+0xa8>
	data.chan = chan;
   18b3a:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   18b3c:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18b40:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   18b44:	89ab      	ldrh	r3, [r5, #12]
   18b46:	2b01      	cmp	r3, #1
   18b48:	d804      	bhi.n	18b54 <att_read_mult_vl_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   18b4a:	9902      	ldr	r1, [sp, #8]
   18b4c:	4620      	mov	r0, r4
   18b4e:	f00f fa5c 	bl	2800a <bt_att_chan_send_rsp>
   18b52:	e01c      	b.n	18b8e <att_read_mult_vl_req+0x9e>
   18b54:	4638      	mov	r0, r7
   18b56:	f010 fbc3 	bl	292e0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18b5a:	466b      	mov	r3, sp
   18b5c:	464a      	mov	r2, r9
   18b5e:	4601      	mov	r1, r0
   18b60:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18b62:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18b66:	f00f f8e4 	bl	27d32 <bt_gatt_foreach_attr>
		if (data.err) {
   18b6a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18b6e:	2b00      	cmp	r3, #0
   18b70:	d0e8      	beq.n	18b44 <att_read_mult_vl_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18b72:	9b02      	ldr	r3, [sp, #8]
   18b74:	6958      	ldr	r0, [r3, #20]
   18b76:	f7ff fb2d 	bl	181d4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   18b7a:	9802      	ldr	r0, [sp, #8]
   18b7c:	f003 fe3e 	bl	1c7fc <net_buf_unref>
	if (!req) {
   18b80:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18b84:	4632      	mov	r2, r6
   18b86:	2120      	movs	r1, #32
   18b88:	4620      	mov	r0, r4
   18b8a:	f00f fbfe 	bl	2838a <send_err_rsp.part.0>
	return 0;
   18b8e:	2000      	movs	r0, #0
   18b90:	e7c2      	b.n	18b18 <att_read_mult_vl_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   18b92:	200e      	movs	r0, #14
   18b94:	e7c0      	b.n	18b18 <att_read_mult_vl_req+0x28>
   18b96:	bf00      	nop
   18b98:	000280d9 	.word	0x000280d9

00018b9c <att_read_mult_req>:
{
   18b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18ba0:	6846      	ldr	r6, [r0, #4]
{
   18ba2:	b085      	sub	sp, #20
   18ba4:	4604      	mov	r4, r0
   18ba6:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18ba8:	4630      	mov	r0, r6
   18baa:	2101      	movs	r1, #1
   18bac:	f00f ff84 	bl	28ab8 <bt_gatt_change_aware>
   18bb0:	b958      	cbnz	r0, 18bca <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18bb2:	2105      	movs	r1, #5
   18bb4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18bb8:	f00f fa4f 	bl	2805a <atomic_test_and_set_bit>
			return 0;
   18bbc:	2800      	cmp	r0, #0
   18bbe:	bf0c      	ite	eq
   18bc0:	2012      	moveq	r0, #18
   18bc2:	2000      	movne	r0, #0
}
   18bc4:	b005      	add	sp, #20
   18bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   18bca:	2210      	movs	r2, #16
   18bcc:	2100      	movs	r1, #0
   18bce:	4668      	mov	r0, sp
   18bd0:	f00e fb34 	bl	2723c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   18bd4:	2200      	movs	r2, #0
   18bd6:	210f      	movs	r1, #15
   18bd8:	4630      	mov	r0, r6
   18bda:	f7ff fedd 	bl	18998 <bt_att_create_pdu>
   18bde:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18be0:	b368      	cbz	r0, 18c3e <att_read_mult_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18be2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 18c44 <att_read_mult_req+0xa8>
	data.chan = chan;
   18be6:	9400      	str	r4, [sp, #0]
   18be8:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18bec:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   18bf0:	89ab      	ldrh	r3, [r5, #12]
   18bf2:	2b01      	cmp	r3, #1
   18bf4:	d804      	bhi.n	18c00 <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   18bf6:	9902      	ldr	r1, [sp, #8]
   18bf8:	4620      	mov	r0, r4
   18bfa:	f00f fa06 	bl	2800a <bt_att_chan_send_rsp>
   18bfe:	e01c      	b.n	18c3a <att_read_mult_req+0x9e>
   18c00:	4638      	mov	r0, r7
   18c02:	f010 fb6d 	bl	292e0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18c06:	466b      	mov	r3, sp
   18c08:	464a      	mov	r2, r9
   18c0a:	4601      	mov	r1, r0
   18c0c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18c0e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18c12:	f00f f88e 	bl	27d32 <bt_gatt_foreach_attr>
		if (data.err) {
   18c16:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18c1a:	2b00      	cmp	r3, #0
   18c1c:	d0e8      	beq.n	18bf0 <att_read_mult_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18c1e:	9b02      	ldr	r3, [sp, #8]
   18c20:	6958      	ldr	r0, [r3, #20]
   18c22:	f7ff fad7 	bl	181d4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   18c26:	9802      	ldr	r0, [sp, #8]
   18c28:	f003 fde8 	bl	1c7fc <net_buf_unref>
	if (!req) {
   18c2c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18c30:	4632      	mov	r2, r6
   18c32:	210e      	movs	r1, #14
   18c34:	4620      	mov	r0, r4
   18c36:	f00f fba8 	bl	2838a <send_err_rsp.part.0>
	return 0;
   18c3a:	2000      	movs	r0, #0
   18c3c:	e7c2      	b.n	18bc4 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   18c3e:	200e      	movs	r0, #14
   18c40:	e7c0      	b.n	18bc4 <att_read_mult_req+0x28>
   18c42:	bf00      	nop
   18c44:	00028085 	.word	0x00028085

00018c48 <att_read_rsp>:
{
   18c48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18c4c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   18c50:	4604      	mov	r4, r0
   18c52:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18c54:	4640      	mov	r0, r8
   18c56:	2101      	movs	r1, #1
{
   18c58:	4615      	mov	r5, r2
   18c5a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   18c5c:	f00f ff2c 	bl	28ab8 <bt_gatt_change_aware>
   18c60:	b960      	cbnz	r0, 18c7c <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18c62:	2105      	movs	r1, #5
   18c64:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18c68:	f00f f9f7 	bl	2805a <atomic_test_and_set_bit>
			return 0;
   18c6c:	2800      	cmp	r0, #0
   18c6e:	bf0c      	ite	eq
   18c70:	2512      	moveq	r5, #18
   18c72:	2500      	movne	r5, #0
}
   18c74:	4628      	mov	r0, r5
   18c76:	b004      	add	sp, #16
   18c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   18c7c:	b38e      	cbz	r6, 18ce2 <att_read_rsp+0x9a>
	(void)memset(&data, 0, sizeof(data));
   18c7e:	2210      	movs	r2, #16
   18c80:	2100      	movs	r1, #0
   18c82:	4668      	mov	r0, sp
   18c84:	f00e fada 	bl	2723c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   18c88:	2200      	movs	r2, #0
   18c8a:	4629      	mov	r1, r5
   18c8c:	4640      	mov	r0, r8
   18c8e:	f7ff fe83 	bl	18998 <bt_att_create_pdu>
   18c92:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18c94:	b338      	cbz	r0, 18ce6 <att_read_rsp+0x9e>
	data.offset = offset;
   18c96:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   18c9a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18c9e:	2301      	movs	r3, #1
   18ca0:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18ca4:	4a11      	ldr	r2, [pc, #68]	; (18cec <att_read_rsp+0xa4>)
	data.chan = chan;
   18ca6:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18ca8:	466b      	mov	r3, sp
   18caa:	4631      	mov	r1, r6
   18cac:	4630      	mov	r0, r6
   18cae:	f00f f840 	bl	27d32 <bt_gatt_foreach_attr>
	if (data.err) {
   18cb2:	f89d 500c 	ldrb.w	r5, [sp, #12]
   18cb6:	b17d      	cbz	r5, 18cd8 <att_read_rsp+0x90>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18cb8:	9b02      	ldr	r3, [sp, #8]
   18cba:	6958      	ldr	r0, [r3, #20]
   18cbc:	f7ff fa8a 	bl	181d4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18cc0:	9802      	ldr	r0, [sp, #8]
   18cc2:	f003 fd9b 	bl	1c7fc <net_buf_unref>
	if (!req) {
   18cc6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18cca:	4632      	mov	r2, r6
   18ccc:	4639      	mov	r1, r7
   18cce:	4620      	mov	r0, r4
   18cd0:	f00f fb5b 	bl	2838a <send_err_rsp.part.0>
		return 0;
   18cd4:	2500      	movs	r5, #0
   18cd6:	e7cd      	b.n	18c74 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf);
   18cd8:	9902      	ldr	r1, [sp, #8]
   18cda:	4620      	mov	r0, r4
   18cdc:	f00f f995 	bl	2800a <bt_att_chan_send_rsp>
	return 0;
   18ce0:	e7c8      	b.n	18c74 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   18ce2:	2501      	movs	r5, #1
   18ce4:	e7c6      	b.n	18c74 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
   18ce6:	250e      	movs	r5, #14
   18ce8:	e7c4      	b.n	18c74 <att_read_rsp+0x2c>
   18cea:	bf00      	nop
   18cec:	00028085 	.word	0x00028085

00018cf0 <att_read_type_req>:
{
   18cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18cf4:	898c      	ldrh	r4, [r1, #12]
   18cf6:	3c04      	subs	r4, #4
   18cf8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   18cfa:	2c02      	cmp	r4, #2
{
   18cfc:	4605      	mov	r5, r0
   18cfe:	b08c      	sub	sp, #48	; 0x30
   18d00:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   18d02:	d001      	beq.n	18d08 <att_read_type_req+0x18>
   18d04:	2c10      	cmp	r4, #16
   18d06:	d153      	bne.n	18db0 <att_read_type_req+0xc0>
	return net_buf_simple_pull_mem(&buf->b, len);
   18d08:	2104      	movs	r1, #4
   18d0a:	3008      	adds	r0, #8
   18d0c:	f003 fe6e 	bl	1c9ec <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18d10:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   18d14:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18d16:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18d18:	1d01      	adds	r1, r0, #4
   18d1a:	4622      	mov	r2, r4
   18d1c:	4640      	mov	r0, r8
   18d1e:	f00e fb20 	bl	27362 <bt_uuid_create>
   18d22:	b188      	cbz	r0, 18d48 <att_read_type_req+0x58>
	if (!start || !end) {
   18d24:	b19e      	cbz	r6, 18d4e <att_read_type_req+0x5e>
   18d26:	b18f      	cbz	r7, 18d4c <att_read_type_req+0x5c>
	if (start > end) {
   18d28:	42b7      	cmp	r7, r6
   18d2a:	d310      	bcc.n	18d4e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   18d2c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   18d2e:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   18d30:	2100      	movs	r1, #0
   18d32:	eb0d 0002 	add.w	r0, sp, r2
   18d36:	f00e fa81 	bl	2723c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   18d3a:	2201      	movs	r2, #1
   18d3c:	2109      	movs	r1, #9
   18d3e:	4620      	mov	r0, r4
   18d40:	f7ff fe2a 	bl	18998 <bt_att_create_pdu>
   18d44:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   18d46:	b968      	cbnz	r0, 18d64 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   18d48:	240e      	movs	r4, #14
   18d4a:	e007      	b.n	18d5c <att_read_type_req+0x6c>
			*err = 0U;
   18d4c:	463e      	mov	r6, r7
	if (!req) {
   18d4e:	2301      	movs	r3, #1
   18d50:	4632      	mov	r2, r6
   18d52:	2108      	movs	r1, #8
   18d54:	4628      	mov	r0, r5
   18d56:	f00f fb18 	bl	2838a <send_err_rsp.part.0>
		return 0;
   18d5a:	2400      	movs	r4, #0
}
   18d5c:	4620      	mov	r0, r4
   18d5e:	b00c      	add	sp, #48	; 0x30
   18d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   18d64:	2101      	movs	r1, #1
   18d66:	3008      	adds	r0, #8
	data.uuid = uuid;
   18d68:	e9cd 5806 	strd	r5, r8, [sp, #24]
   18d6c:	f003 fe5c 	bl	1ca28 <net_buf_simple_add>
	data.rsp->len = 0U;
   18d70:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18d74:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18d76:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18d78:	4a0e      	ldr	r2, [pc, #56]	; (18db4 <att_read_type_req+0xc4>)
	data.rsp->len = 0U;
   18d7a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18d7e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18d80:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18d84:	4630      	mov	r0, r6
   18d86:	ab06      	add	r3, sp, #24
   18d88:	f00e ffd3 	bl	27d32 <bt_gatt_foreach_attr>
	if (data.err) {
   18d8c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   18d90:	b14c      	cbz	r4, 18da6 <att_read_type_req+0xb6>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18d92:	9b08      	ldr	r3, [sp, #32]
   18d94:	6958      	ldr	r0, [r3, #20]
   18d96:	f7ff fa1d 	bl	181d4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18d9a:	9808      	ldr	r0, [sp, #32]
   18d9c:	f003 fd2e 	bl	1c7fc <net_buf_unref>
	if (!req) {
   18da0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   18da4:	e7d4      	b.n	18d50 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   18da6:	9908      	ldr	r1, [sp, #32]
   18da8:	4628      	mov	r0, r5
   18daa:	f00f f92e 	bl	2800a <bt_att_chan_send_rsp>
	return 0;
   18dae:	e7d5      	b.n	18d5c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   18db0:	2404      	movs	r4, #4
   18db2:	e7d3      	b.n	18d5c <att_read_type_req+0x6c>
   18db4:	0001868d 	.word	0x0001868d

00018db8 <att_find_type_req>:
{
   18db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18dbc:	4688      	mov	r8, r1
   18dbe:	b086      	sub	sp, #24
   18dc0:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   18dc2:	2106      	movs	r1, #6
   18dc4:	f108 0008 	add.w	r0, r8, #8
   18dc8:	f003 fe10 	bl	1c9ec <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   18dcc:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   18dce:	b317      	cbz	r7, 18e16 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   18dd0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   18dd4:	f1b9 0f00 	cmp.w	r9, #0
   18dd8:	d01c      	beq.n	18e14 <att_find_type_req+0x5c>
	if (start > end) {
   18dda:	454f      	cmp	r7, r9
   18ddc:	d81b      	bhi.n	18e16 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   18dde:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   18de0:	f8ad 3002 	strh.w	r3, [sp, #2]
   18de4:	2400      	movs	r4, #0
   18de6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18dea:	a901      	add	r1, sp, #4
   18dec:	4668      	mov	r0, sp
	value = buf->data;
   18dee:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   18df2:	f88d 4000 	strb.w	r4, [sp]
   18df6:	f88d 4004 	strb.w	r4, [sp, #4]
   18dfa:	f8ad 3006 	strh.w	r3, [sp, #6]
   18dfe:	f00e fa82 	bl	27306 <bt_uuid_cmp>
   18e02:	4606      	mov	r6, r0
   18e04:	b190      	cbz	r0, 18e2c <att_find_type_req+0x74>
	if (!req) {
   18e06:	230a      	movs	r3, #10
   18e08:	463a      	mov	r2, r7
   18e0a:	2106      	movs	r1, #6
   18e0c:	4628      	mov	r0, r5
   18e0e:	f00f fabc 	bl	2838a <send_err_rsp.part.0>
		return 0;
   18e12:	e007      	b.n	18e24 <att_find_type_req+0x6c>
			*err = 0U;
   18e14:	464f      	mov	r7, r9
	if (!req) {
   18e16:	2301      	movs	r3, #1
   18e18:	463a      	mov	r2, r7
   18e1a:	2106      	movs	r1, #6
   18e1c:	4628      	mov	r0, r5
   18e1e:	f00f fab4 	bl	2838a <send_err_rsp.part.0>
		return 0;
   18e22:	2400      	movs	r4, #0
}
   18e24:	4620      	mov	r0, r4
   18e26:	b006      	add	sp, #24
   18e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18e2c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   18e30:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   18e34:	4601      	mov	r1, r0
   18e36:	2214      	movs	r2, #20
   18e38:	a801      	add	r0, sp, #4
   18e3a:	f00e f9ff 	bl	2723c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   18e3e:	4632      	mov	r2, r6
   18e40:	2107      	movs	r1, #7
   18e42:	4640      	mov	r0, r8
   18e44:	f7ff fda8 	bl	18998 <bt_att_create_pdu>
   18e48:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18e4a:	b1f8      	cbz	r0, 18e8c <att_find_type_req+0xd4>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18e4c:	230a      	movs	r3, #10
   18e4e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18e52:	4a0f      	ldr	r2, [pc, #60]	; (18e90 <att_find_type_req+0xd8>)
	data.value_len = value_len;
   18e54:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18e58:	ab01      	add	r3, sp, #4
   18e5a:	4649      	mov	r1, r9
   18e5c:	4638      	mov	r0, r7
	data.value = value;
   18e5e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   18e62:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18e64:	f00e ff65 	bl	27d32 <bt_gatt_foreach_attr>
	if (data.err) {
   18e68:	f89d 4015 	ldrb.w	r4, [sp, #21]
   18e6c:	b14c      	cbz	r4, 18e82 <att_find_type_req+0xca>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18e6e:	9b02      	ldr	r3, [sp, #8]
   18e70:	6958      	ldr	r0, [r3, #20]
   18e72:	f7ff f9af 	bl	181d4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18e76:	9802      	ldr	r0, [sp, #8]
   18e78:	f003 fcc0 	bl	1c7fc <net_buf_unref>
	if (!req) {
   18e7c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18e80:	e7ca      	b.n	18e18 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   18e82:	9902      	ldr	r1, [sp, #8]
   18e84:	4628      	mov	r0, r5
   18e86:	f00f f8c0 	bl	2800a <bt_att_chan_send_rsp>
	return 0;
   18e8a:	e7cb      	b.n	18e24 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   18e8c:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18e8e:	e7c9      	b.n	18e24 <att_find_type_req+0x6c>
   18e90:	00018211 	.word	0x00018211

00018e94 <att_find_info_req>:
{
   18e94:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   18e96:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   18e98:	881e      	ldrh	r6, [r3, #0]
{
   18e9a:	b085      	sub	sp, #20
   18e9c:	4605      	mov	r5, r0
	if (!start || !end) {
   18e9e:	b19e      	cbz	r6, 18ec8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   18ea0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   18ea2:	b184      	cbz	r4, 18ec6 <att_find_info_req+0x32>
	if (start > end) {
   18ea4:	42a6      	cmp	r6, r4
   18ea6:	d80f      	bhi.n	18ec8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   18ea8:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   18eaa:	2210      	movs	r2, #16
   18eac:	2100      	movs	r1, #0
   18eae:	4668      	mov	r0, sp
   18eb0:	f00e f9c4 	bl	2723c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   18eb4:	2200      	movs	r2, #0
   18eb6:	2105      	movs	r1, #5
   18eb8:	4638      	mov	r0, r7
   18eba:	f7ff fd6d 	bl	18998 <bt_att_create_pdu>
   18ebe:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   18ec0:	b958      	cbnz	r0, 18eda <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   18ec2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   18ec4:	e007      	b.n	18ed6 <att_find_info_req+0x42>
			*err = 0U;
   18ec6:	4626      	mov	r6, r4
	if (!req) {
   18ec8:	2301      	movs	r3, #1
   18eca:	4632      	mov	r2, r6
   18ecc:	2104      	movs	r1, #4
   18ece:	4628      	mov	r0, r5
   18ed0:	f00f fa5b 	bl	2838a <send_err_rsp.part.0>
	return 0;
   18ed4:	2000      	movs	r0, #0
}
   18ed6:	b005      	add	sp, #20
   18ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18eda:	4621      	mov	r1, r4
   18edc:	4a0a      	ldr	r2, [pc, #40]	; (18f08 <att_find_info_req+0x74>)
	data.chan = chan;
   18ede:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18ee0:	466b      	mov	r3, sp
   18ee2:	4630      	mov	r0, r6
   18ee4:	f00e ff25 	bl	27d32 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   18ee8:	9c02      	ldr	r4, [sp, #8]
   18eea:	b944      	cbnz	r4, 18efe <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18eec:	9b01      	ldr	r3, [sp, #4]
   18eee:	6958      	ldr	r0, [r3, #20]
   18ef0:	f7ff f970 	bl	181d4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18ef4:	9801      	ldr	r0, [sp, #4]
   18ef6:	f003 fc81 	bl	1c7fc <net_buf_unref>
	if (!req) {
   18efa:	230a      	movs	r3, #10
   18efc:	e7e5      	b.n	18eca <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   18efe:	9901      	ldr	r1, [sp, #4]
   18f00:	4628      	mov	r0, r5
   18f02:	f00f f882 	bl	2800a <bt_att_chan_send_rsp>
   18f06:	e7e5      	b.n	18ed4 <att_find_info_req+0x40>
   18f08:	00027d49 	.word	0x00027d49

00018f0c <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   18f0c:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   18f0e:	4d0a      	ldr	r5, [pc, #40]	; (18f38 <bt_att_init+0x2c>)
   18f10:	4c0a      	ldr	r4, [pc, #40]	; (18f3c <bt_att_init+0x30>)
   18f12:	4629      	mov	r1, r5
   18f14:	4620      	mov	r0, r4
   18f16:	f010 fcec 	bl	298f2 <k_queue_append>
   18f1a:	f105 0114 	add.w	r1, r5, #20
   18f1e:	4620      	mov	r0, r4
   18f20:	f010 fce7 	bl	298f2 <k_queue_append>
   18f24:	f105 0128 	add.w	r1, r5, #40	; 0x28
   18f28:	4620      	mov	r0, r4
   18f2a:	f010 fce2 	bl	298f2 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   18f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   18f32:	f000 bd6d 	b.w	19a10 <bt_gatt_init>
   18f36:	bf00      	nop
   18f38:	200025f4 	.word	0x200025f4
   18f3c:	200008b8 	.word	0x200008b8

00018f40 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   18f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   18f42:	2300      	movs	r3, #0
{
   18f44:	4605      	mov	r5, r0
   18f46:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   18f48:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   18f4a:	f009 f95b 	bl	22204 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   18f4e:	4b0b      	ldr	r3, [pc, #44]	; (18f7c <bt_att_req_alloc+0x3c>)
   18f50:	681b      	ldr	r3, [r3, #0]
   18f52:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   18f54:	bf04      	itt	eq
   18f56:	2500      	moveq	r5, #0
   18f58:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   18f5a:	a901      	add	r1, sp, #4
   18f5c:	4808      	ldr	r0, [pc, #32]	; (18f80 <bt_att_req_alloc+0x40>)
   18f5e:	462a      	mov	r2, r5
   18f60:	4623      	mov	r3, r4
   18f62:	f007 f84b 	bl	1fffc <k_mem_slab_alloc>
   18f66:	4601      	mov	r1, r0
   18f68:	b930      	cbnz	r0, 18f78 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   18f6a:	9801      	ldr	r0, [sp, #4]
   18f6c:	221c      	movs	r2, #28
   18f6e:	f00e f965 	bl	2723c <memset>

	return req;
   18f72:	9801      	ldr	r0, [sp, #4]
}
   18f74:	b003      	add	sp, #12
   18f76:	bd30      	pop	{r4, r5, pc}
		return NULL;
   18f78:	2000      	movs	r0, #0
   18f7a:	e7fb      	b.n	18f74 <bt_att_req_alloc+0x34>
   18f7c:	200025d4 	.word	0x200025d4
   18f80:	20000808 	.word	0x20000808

00018f84 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   18f84:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   18f86:	6883      	ldr	r3, [r0, #8]
{
   18f88:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   18f8a:	b14b      	cbz	r3, 18fa0 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   18f8c:	6958      	ldr	r0, [r3, #20]
   18f8e:	f7ff f921 	bl	181d4 <tx_meta_data_free>
		net_buf_unref(req->buf);
   18f92:	9b01      	ldr	r3, [sp, #4]
   18f94:	6898      	ldr	r0, [r3, #8]
   18f96:	f003 fc31 	bl	1c7fc <net_buf_unref>
		req->buf = NULL;
   18f9a:	9b01      	ldr	r3, [sp, #4]
   18f9c:	2200      	movs	r2, #0
   18f9e:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   18fa0:	4803      	ldr	r0, [pc, #12]	; (18fb0 <bt_att_req_free+0x2c>)
   18fa2:	a901      	add	r1, sp, #4
   18fa4:	f007 f884 	bl	200b0 <k_mem_slab_free>
}
   18fa8:	b003      	add	sp, #12
   18faa:	f85d fb04 	ldr.w	pc, [sp], #4
   18fae:	bf00      	nop
   18fb0:	20000808 	.word	0x20000808

00018fb4 <att_handle_rsp>:
{
   18fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fb8:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   18fba:	30c0      	adds	r0, #192	; 0xc0
{
   18fbc:	4689      	mov	r9, r1
   18fbe:	4692      	mov	sl, r2
   18fc0:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
   18fc2:	f008 f97d 	bl	212c0 <k_work_cancel_delayable>
	if (!chan->req) {
   18fc6:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
   18fca:	2700      	movs	r7, #0
   18fcc:	b9a5      	cbnz	r5, 18ff8 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   18fce:	4813      	ldr	r0, [pc, #76]	; (1901c <att_handle_rsp+0x68>)
   18fd0:	2157      	movs	r1, #87	; 0x57
   18fd2:	f00d faa2 	bl	2651a <z_log_minimal_printk>
	bt_att_func_t func = NULL;
   18fd6:	462e      	mov	r6, r5
	att_req_send_process(chan->att);
   18fd8:	6820      	ldr	r0, [r4, #0]
   18fda:	f00f f900 	bl	281de <att_req_send_process>
	if (func) {
   18fde:	b13e      	cbz	r6, 18ff0 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   18fe0:	6820      	ldr	r0, [r4, #0]
   18fe2:	f8cd b000 	str.w	fp, [sp]
   18fe6:	6800      	ldr	r0, [r0, #0]
   18fe8:	4653      	mov	r3, sl
   18fea:	464a      	mov	r2, r9
   18fec:	4641      	mov	r1, r8
   18fee:	47b0      	blx	r6
}
   18ff0:	2000      	movs	r0, #0
   18ff2:	b003      	add	sp, #12
   18ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   18ff8:	4b09      	ldr	r3, [pc, #36]	; (19020 <att_handle_rsp+0x6c>)
   18ffa:	429d      	cmp	r5, r3
   18ffc:	d103      	bne.n	19006 <att_handle_rsp+0x52>
		chan->req = NULL;
   18ffe:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
	bt_att_func_t func = NULL;
   19002:	463e      	mov	r6, r7
		goto process;
   19004:	e7e8      	b.n	18fd8 <att_handle_rsp+0x24>
	func = chan->req->func;
   19006:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
   19008:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
   1900a:	4628      	mov	r0, r5
	params = chan->req->user_data;
   1900c:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
   19010:	f7ff ffb8 	bl	18f84 <bt_att_req_free>
	chan->req = NULL;
   19014:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
   19018:	e7de      	b.n	18fd8 <att_handle_rsp+0x24>
   1901a:	bf00      	nop
   1901c:	0002c70f 	.word	0x0002c70f
   19020:	200025d8 	.word	0x200025d8

00019024 <bt_att_disconnected>:
{
   19024:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   19028:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1902c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1902e:	2e00      	cmp	r6, #0
   19030:	d056      	beq.n	190e0 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   19032:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   19036:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1903a:	f00e fff4 	bl	28026 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1903e:	1f27      	subs	r7, r4, #4
   19040:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   19044:	2200      	movs	r2, #0
   19046:	2300      	movs	r3, #0
   19048:	4640      	mov	r0, r8
   1904a:	f003 fa87 	bl	1c55c <net_buf_get>
   1904e:	4605      	mov	r5, r0
   19050:	bb28      	cbnz	r0, 1909e <bt_att_disconnected+0x7a>
	if (chan->req) {
   19052:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   19056:	b12b      	cbz	r3, 19064 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   19058:	4602      	mov	r2, r0
   1905a:	4601      	mov	r1, r0
   1905c:	230e      	movs	r3, #14
   1905e:	4638      	mov	r0, r7
   19060:	f7ff ffa8 	bl	18fb4 <att_handle_rsp>
	chan->att = NULL;
   19064:	2300      	movs	r3, #0
   19066:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1906a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1906c:	2b00      	cmp	r3, #0
   1906e:	d137      	bne.n	190e0 <bt_att_disconnected+0xbc>
	att_reset(att);
   19070:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   19072:	9803      	ldr	r0, [sp, #12]
   19074:	2200      	movs	r2, #0
   19076:	2300      	movs	r3, #0
   19078:	300c      	adds	r0, #12
   1907a:	f003 fa6f 	bl	1c55c <net_buf_get>
   1907e:	4605      	mov	r5, r0
   19080:	b9a0      	cbnz	r0, 190ac <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   19082:	9803      	ldr	r0, [sp, #12]
	return list->head;
   19084:	6845      	ldr	r5, [r0, #4]
   19086:	b9c5      	cbnz	r5, 190ba <bt_att_disconnected+0x96>
	att->conn = NULL;
   19088:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1908a:	a903      	add	r1, sp, #12
   1908c:	4816      	ldr	r0, [pc, #88]	; (190e8 <bt_att_disconnected+0xc4>)
   1908e:	f007 f80f 	bl	200b0 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   19092:	6820      	ldr	r0, [r4, #0]
}
   19094:	b004      	add	sp, #16
   19096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1909a:	f001 bbcf 	b.w	1a83c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1909e:	6968      	ldr	r0, [r5, #20]
   190a0:	f7ff f898 	bl	181d4 <tx_meta_data_free>
		net_buf_unref(buf);
   190a4:	4628      	mov	r0, r5
   190a6:	f003 fba9 	bl	1c7fc <net_buf_unref>
   190aa:	e7cb      	b.n	19044 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   190ac:	6968      	ldr	r0, [r5, #20]
   190ae:	f7ff f891 	bl	181d4 <tx_meta_data_free>
		net_buf_unref(buf);
   190b2:	4628      	mov	r0, r5
   190b4:	f003 fba2 	bl	1c7fc <net_buf_unref>
   190b8:	e7db      	b.n	19072 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   190ba:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   190bc:	686e      	ldr	r6, [r5, #4]
	return node->next;
   190be:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   190c0:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   190c2:	4295      	cmp	r5, r2
	list->tail = node;
   190c4:	bf08      	it	eq
   190c6:	6083      	streq	r3, [r0, #8]
   190c8:	b136      	cbz	r6, 190d8 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   190ca:	69ab      	ldr	r3, [r5, #24]
   190cc:	9300      	str	r3, [sp, #0]
   190ce:	2300      	movs	r3, #0
   190d0:	6800      	ldr	r0, [r0, #0]
   190d2:	461a      	mov	r2, r3
   190d4:	210e      	movs	r1, #14
   190d6:	47b0      	blx	r6
		bt_att_req_free(req);
   190d8:	4628      	mov	r0, r5
   190da:	f7ff ff53 	bl	18f84 <bt_att_req_free>
   190de:	e7d0      	b.n	19082 <bt_att_disconnected+0x5e>
}
   190e0:	b004      	add	sp, #16
   190e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   190e6:	bf00      	nop
   190e8:	200007c8 	.word	0x200007c8

000190ec <att_timeout>:
{
   190ec:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
   190ee:	2145      	movs	r1, #69	; 0x45
{
   190f0:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   190f2:	4804      	ldr	r0, [pc, #16]	; (19104 <att_timeout+0x18>)
   190f4:	f00d fa11 	bl	2651a <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   190f8:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   190fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   19100:	f7ff bf90 	b.w	19024 <bt_att_disconnected>
   19104:	0002c72b 	.word	0x0002c72b

00019108 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   19108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1910a:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1910c:	4605      	mov	r5, r0
   1910e:	b950      	cbnz	r0, 19126 <bt_att_send+0x1e>
   19110:	492c      	ldr	r1, [pc, #176]	; (191c4 <bt_att_send+0xbc>)
   19112:	482d      	ldr	r0, [pc, #180]	; (191c8 <bt_att_send+0xc0>)
   19114:	f640 6288 	movw	r2, #3720	; 0xe88
   19118:	f00d f9f1 	bl	264fe <assert_print>
   1911c:	4829      	ldr	r0, [pc, #164]	; (191c4 <bt_att_send+0xbc>)
   1911e:	f640 6188 	movw	r1, #3720	; 0xe88
   19122:	f00d f9e5 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   19126:	b954      	cbnz	r4, 1913e <bt_att_send+0x36>
   19128:	4926      	ldr	r1, [pc, #152]	; (191c4 <bt_att_send+0xbc>)
   1912a:	4827      	ldr	r0, [pc, #156]	; (191c8 <bt_att_send+0xc0>)
   1912c:	f640 6289 	movw	r2, #3721	; 0xe89
   19130:	f00d f9e5 	bl	264fe <assert_print>
   19134:	4823      	ldr	r0, [pc, #140]	; (191c4 <bt_att_send+0xbc>)
   19136:	f640 6189 	movw	r1, #3721	; 0xe89
   1913a:	f00d f9d9 	bl	264f0 <assert_post_action>

	att = att_get(conn);
   1913e:	4628      	mov	r0, r5
   19140:	f7ff f80c 	bl	1815c <att_get>
	if (!att) {
   19144:	4605      	mov	r5, r0
   19146:	b940      	cbnz	r0, 1915a <bt_att_send+0x52>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19148:	6960      	ldr	r0, [r4, #20]
   1914a:	f7ff f843 	bl	181d4 <tx_meta_data_free>
		net_buf_unref(buf);
   1914e:	4620      	mov	r0, r4
   19150:	f003 fb54 	bl	1c7fc <net_buf_unref>
		return -ENOTCONN;
   19154:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   19158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1915a:	f100 060c 	add.w	r6, r0, #12
   1915e:	4621      	mov	r1, r4
   19160:	4630      	mov	r0, r6
   19162:	f003 fb1d 	bl	1c7a0 <net_buf_put>
	return list->head;
   19166:	6aac      	ldr	r4, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19168:	4625      	mov	r5, r4
   1916a:	b11c      	cbz	r4, 19174 <bt_att_send+0x6c>
	return node->next;
   1916c:	f855 49f0 	ldr.w	r4, [r5], #-240
   19170:	b104      	cbz	r4, 19174 <bt_att_send+0x6c>
   19172:	3cf0      	subs	r4, #240	; 0xf0
   19174:	2300      	movs	r3, #0
   19176:	461f      	mov	r7, r3
   19178:	b13d      	cbz	r5, 1918a <bt_att_send+0x82>
		if (err == -ENOENT && prev &&
   1917a:	1c9a      	adds	r2, r3, #2
   1917c:	d007      	beq.n	1918e <bt_att_send+0x86>
		err = process_queue(chan, &att->tx_queue);
   1917e:	4631      	mov	r1, r6
   19180:	4628      	mov	r0, r5
   19182:	f00e ff29 	bl	27fd8 <process_queue>
		if (!err) {
   19186:	4603      	mov	r3, r0
   19188:	b980      	cbnz	r0, 191ac <bt_att_send+0xa4>
	return 0;
   1918a:	2000      	movs	r0, #0
   1918c:	e7e4      	b.n	19158 <bt_att_send+0x50>
		if (err == -ENOENT && prev &&
   1918e:	2f00      	cmp	r7, #0
   19190:	d0f5      	beq.n	1917e <bt_att_send+0x76>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   19192:	2103      	movs	r1, #3
   19194:	f105 0098 	add.w	r0, r5, #152	; 0x98
   19198:	f00e fdc2 	bl	27d20 <atomic_test_bit>
   1919c:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1919e:	f107 0098 	add.w	r0, r7, #152	; 0x98
   191a2:	f00e fdbd 	bl	27d20 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   191a6:	4282      	cmp	r2, r0
   191a8:	d1e9      	bne.n	1917e <bt_att_send+0x76>
   191aa:	463d      	mov	r5, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   191ac:	b13c      	cbz	r4, 191be <bt_att_send+0xb6>
   191ae:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   191b2:	b102      	cbz	r2, 191b6 <bt_att_send+0xae>
   191b4:	3af0      	subs	r2, #240	; 0xf0
   191b6:	462f      	mov	r7, r5
   191b8:	4625      	mov	r5, r4
   191ba:	4614      	mov	r4, r2
   191bc:	e7dc      	b.n	19178 <bt_att_send+0x70>
   191be:	4622      	mov	r2, r4
   191c0:	e7f9      	b.n	191b6 <bt_att_send+0xae>
   191c2:	bf00      	nop
   191c4:	0002c516 	.word	0x0002c516
   191c8:	0002aa75 	.word	0x0002aa75

000191cc <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   191cc:	b538      	push	{r3, r4, r5, lr}
   191ce:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   191d0:	4605      	mov	r5, r0
   191d2:	b950      	cbnz	r0, 191ea <bt_att_req_send+0x1e>
   191d4:	4915      	ldr	r1, [pc, #84]	; (1922c <bt_att_req_send+0x60>)
   191d6:	4816      	ldr	r0, [pc, #88]	; (19230 <bt_att_req_send+0x64>)
   191d8:	f640 629e 	movw	r2, #3742	; 0xe9e
   191dc:	f00d f98f 	bl	264fe <assert_print>
   191e0:	4812      	ldr	r0, [pc, #72]	; (1922c <bt_att_req_send+0x60>)
   191e2:	f640 619e 	movw	r1, #3742	; 0xe9e
   191e6:	f00d f983 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(req);
   191ea:	b954      	cbnz	r4, 19202 <bt_att_req_send+0x36>
   191ec:	490f      	ldr	r1, [pc, #60]	; (1922c <bt_att_req_send+0x60>)
   191ee:	4810      	ldr	r0, [pc, #64]	; (19230 <bt_att_req_send+0x64>)
   191f0:	f640 629f 	movw	r2, #3743	; 0xe9f
   191f4:	f00d f983 	bl	264fe <assert_print>
   191f8:	480c      	ldr	r0, [pc, #48]	; (1922c <bt_att_req_send+0x60>)
   191fa:	f640 619f 	movw	r1, #3743	; 0xe9f
   191fe:	f00d f977 	bl	264f0 <assert_post_action>

	att = att_get(conn);
   19202:	4628      	mov	r0, r5
   19204:	f7fe ffaa 	bl	1815c <att_get>
	if (!att) {
   19208:	b160      	cbz	r0, 19224 <bt_att_req_send+0x58>
	parent->next = child;
   1920a:	2300      	movs	r3, #0
   1920c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1920e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   19210:	b92b      	cbnz	r3, 1921e <bt_att_req_send+0x52>
	list->head = node;
   19212:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   19216:	f00e ffe2 	bl	281de <att_req_send_process>

	return 0;
   1921a:	2000      	movs	r0, #0
}
   1921c:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1921e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19220:	6084      	str	r4, [r0, #8]
}
   19222:	e7f8      	b.n	19216 <bt_att_req_send+0x4a>
		return -ENOTCONN;
   19224:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19228:	e7f8      	b.n	1921c <bt_att_req_send+0x50>
   1922a:	bf00      	nop
   1922c:	0002c516 	.word	0x0002c516
   19230:	0002aa75 	.word	0x0002aa75

00019234 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   19234:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   19236:	4908      	ldr	r1, [pc, #32]	; (19258 <db_hash_set+0x24>)
{
   19238:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1923a:	4618      	mov	r0, r3
   1923c:	2210      	movs	r2, #16
   1923e:	47a0      	blx	r4
	if (len < 0) {
   19240:	1e04      	subs	r4, r0, #0
   19242:	da06      	bge.n	19252 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   19244:	4805      	ldr	r0, [pc, #20]	; (1925c <db_hash_set+0x28>)
   19246:	4622      	mov	r2, r4
   19248:	2145      	movs	r1, #69	; 0x45
   1924a:	f00d f966 	bl	2651a <z_log_minimal_printk>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   1924e:	4620      	mov	r0, r4
   19250:	bd10      	pop	{r4, pc}
	return 0;
   19252:	2400      	movs	r4, #0
   19254:	e7fb      	b.n	1924e <db_hash_set+0x1a>
   19256:	bf00      	nop
   19258:	20001980 	.word	0x20001980
   1925c:	0002c743 	.word	0x0002c743

00019260 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   19260:	2210      	movs	r2, #16
{
   19262:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   19264:	4906      	ldr	r1, [pc, #24]	; (19280 <db_hash_store+0x20>)
   19266:	4807      	ldr	r0, [pc, #28]	; (19284 <db_hash_store+0x24>)
   19268:	f7fa fa14 	bl	13694 <settings_save_one>
	if (err) {
   1926c:	4602      	mov	r2, r0
   1926e:	b128      	cbz	r0, 1927c <db_hash_store+0x1c>
}
   19270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   19274:	4804      	ldr	r0, [pc, #16]	; (19288 <db_hash_store+0x28>)
   19276:	2145      	movs	r1, #69	; 0x45
   19278:	f00d b94f 	b.w	2651a <z_log_minimal_printk>
}
   1927c:	bd08      	pop	{r3, pc}
   1927e:	bf00      	nop
   19280:	20001970 	.word	0x20001970
   19284:	0002c769 	.word	0x0002c769
   19288:	0002c771 	.word	0x0002c771

0001928c <find_cf_cfg>:
{
   1928c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1928e:	4d0f      	ldr	r5, [pc, #60]	; (192cc <find_cf_cfg+0x40>)
   19290:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   19292:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19294:	462e      	mov	r6, r5
		if (!conn) {
   19296:	1c68      	adds	r0, r5, #1
   19298:	b964      	cbnz	r4, 192b4 <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
   1929a:	2207      	movs	r2, #7
   1929c:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1929e:	9400      	str	r4, [sp, #0]
   192a0:	f8cd 4003 	str.w	r4, [sp, #3]
   192a4:	f00d ff96 	bl	271d4 <memcmp>
   192a8:	b958      	cbnz	r0, 192c2 <find_cf_cfg+0x36>
}
   192aa:	4630      	mov	r0, r6
   192ac:	b003      	add	sp, #12
   192ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   192b0:	2701      	movs	r7, #1
   192b2:	e7ef      	b.n	19294 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   192b4:	4602      	mov	r2, r0
   192b6:	7829      	ldrb	r1, [r5, #0]
   192b8:	4620      	mov	r0, r4
   192ba:	f00e fc12 	bl	27ae2 <bt_conn_is_peer_addr_le>
   192be:	2800      	cmp	r0, #0
   192c0:	d1f3      	bne.n	192aa <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   192c2:	3510      	adds	r5, #16
   192c4:	2f00      	cmp	r7, #0
   192c6:	d0f3      	beq.n	192b0 <find_cf_cfg+0x24>
	return NULL;
   192c8:	2600      	movs	r6, #0
   192ca:	e7ee      	b.n	192aa <find_cf_cfg+0x1e>
   192cc:	20002638 	.word	0x20002638

000192d0 <cf_write>:
{
   192d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192d4:	4698      	mov	r8, r3
   192d6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   192da:	2b01      	cmp	r3, #1
{
   192dc:	4606      	mov	r6, r0
   192de:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   192e0:	d837      	bhi.n	19352 <cf_write+0x82>
	if (offset + len > sizeof(cfg->data)) {
   192e2:	4443      	add	r3, r8
   192e4:	2b01      	cmp	r3, #1
   192e6:	4645      	mov	r5, r8
   192e8:	dc36      	bgt.n	19358 <cf_write+0x88>
	cfg = find_cf_cfg(conn);
   192ea:	f7ff ffcf 	bl	1928c <find_cf_cfg>
	if (!cfg) {
   192ee:	4604      	mov	r4, r0
   192f0:	b918      	cbnz	r0, 192fa <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   192f2:	f7ff ffcb 	bl	1928c <find_cf_cfg>
	if (!cfg) {
   192f6:	4604      	mov	r4, r0
   192f8:	b180      	cbz	r0, 1931c <cf_write+0x4c>
{
   192fa:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   192fc:	f1b8 0f00 	cmp.w	r8, #0
   19300:	d115      	bne.n	1932e <cf_write+0x5e>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19302:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19306:	1c60      	adds	r0, r4, #1
   19308:	f00f f9cf 	bl	286aa <bt_addr_le_copy>
	cfg->id = conn->id;
   1930c:	4620      	mov	r0, r4
   1930e:	7a33      	ldrb	r3, [r6, #8]
   19310:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19314:	2101      	movs	r1, #1
   19316:	f00f f9b9 	bl	2868c <atomic_or>
}
   1931a:	e005      	b.n	19328 <cf_write+0x58>
		BT_WARN("No space to store Client Supported Features");
   1931c:	4811      	ldr	r0, [pc, #68]	; (19364 <cf_write+0x94>)
   1931e:	2157      	movs	r1, #87	; 0x57
   19320:	f00d f8fb 	bl	2651a <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19324:	f06f 0510 	mvn.w	r5, #16
}
   19328:	4628      	mov	r0, r5
   1932a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1932e:	7a20      	ldrb	r0, [r4, #8]
   19330:	fa20 f301 	lsr.w	r3, r0, r1
   19334:	07da      	lsls	r2, r3, #31
   19336:	d503      	bpl.n	19340 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   19338:	783b      	ldrb	r3, [r7, #0]
   1933a:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1933c:	07db      	lsls	r3, r3, #31
   1933e:	d50e      	bpl.n	1935e <cf_write+0x8e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19340:	3101      	adds	r1, #1
   19342:	2903      	cmp	r1, #3
   19344:	d1da      	bne.n	192fc <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   19346:	783b      	ldrb	r3, [r7, #0]
   19348:	f003 0307 	and.w	r3, r3, #7
   1934c:	4318      	orrs	r0, r3
   1934e:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   19350:	e7d7      	b.n	19302 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19352:	f06f 0506 	mvn.w	r5, #6
   19356:	e7e7      	b.n	19328 <cf_write+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19358:	f06f 050c 	mvn.w	r5, #12
   1935c:	e7e4      	b.n	19328 <cf_write+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1935e:	f06f 0512 	mvn.w	r5, #18
   19362:	e7e1      	b.n	19328 <cf_write+0x58>
   19364:	0002c79c 	.word	0x0002c79c

00019368 <sc_store>:
{
   19368:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1936a:	4605      	mov	r5, r0
{
   1936c:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1936e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   19372:	4604      	mov	r4, r0
	if (cfg->id) {
   19374:	b1ca      	cbz	r2, 193aa <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   19376:	ae02      	add	r6, sp, #8
   19378:	2104      	movs	r1, #4
   1937a:	4630      	mov	r0, r6
   1937c:	f00c fe34 	bl	25fe8 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   19380:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   19382:	4a0b      	ldr	r2, [pc, #44]	; (193b0 <sc_store+0x48>)
   19384:	462b      	mov	r3, r5
   19386:	2124      	movs	r1, #36	; 0x24
   19388:	a803      	add	r0, sp, #12
   1938a:	f7fb fd27 	bl	14ddc <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1938e:	2204      	movs	r2, #4
   19390:	f104 0108 	add.w	r1, r4, #8
   19394:	a803      	add	r0, sp, #12
   19396:	f7fa f97d 	bl	13694 <settings_save_one>
	if (err) {
   1939a:	4602      	mov	r2, r0
   1939c:	b118      	cbz	r0, 193a6 <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   1939e:	4805      	ldr	r0, [pc, #20]	; (193b4 <sc_store+0x4c>)
   193a0:	2145      	movs	r1, #69	; 0x45
   193a2:	f00d f8ba 	bl	2651a <z_log_minimal_printk>
}
   193a6:	b00c      	add	sp, #48	; 0x30
   193a8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   193aa:	9200      	str	r2, [sp, #0]
   193ac:	e7e9      	b.n	19382 <sc_store+0x1a>
   193ae:	bf00      	nop
   193b0:	0002cb25 	.word	0x0002cb25
   193b4:	0002c7cd 	.word	0x0002c7cd

000193b8 <db_hash_commit>:

static int db_hash_commit(void)
{
   193b8:	b510      	push	{r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   193ba:	2108      	movs	r1, #8
   193bc:	4809      	ldr	r0, [pc, #36]	; (193e4 <db_hash_commit+0x2c>)
   193be:	f00f f965 	bl	2868c <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   193c2:	4809      	ldr	r0, [pc, #36]	; (193e8 <db_hash_commit+0x30>)
   193c4:	2200      	movs	r2, #0
   193c6:	2300      	movs	r3, #0
   193c8:	f7fb fdb0 	bl	14f2c <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   193cc:	1e04      	subs	r4, r0, #0
   193ce:	da06      	bge.n	193de <db_hash_commit+0x26>
		BT_ERR("Unable to reschedule database hash process (err %d)", err);
   193d0:	4806      	ldr	r0, [pc, #24]	; (193ec <db_hash_commit+0x34>)
   193d2:	4622      	mov	r2, r4
   193d4:	2145      	movs	r1, #69	; 0x45
   193d6:	f00d f8a0 	bl	2651a <z_log_minimal_printk>
	}

	return err;
}
   193da:	4620      	mov	r0, r4
   193dc:	bd10      	pop	{r4, pc}
	if (err) {
   193de:	2400      	movs	r4, #0
	return err;
   193e0:	e7fb      	b.n	193da <db_hash_commit+0x22>
   193e2:	bf00      	nop
   193e4:	20001a70 	.word	0x20001a70
   193e8:	20001990 	.word	0x20001990
   193ec:	0002c7ee 	.word	0x0002c7ee

000193f0 <sc_commit>:
{
   193f0:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   193f2:	4809      	ldr	r0, [pc, #36]	; (19418 <sc_commit+0x28>)
   193f4:	f06f 0102 	mvn.w	r1, #2
   193f8:	f00f f968 	bl	286cc <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   193fc:	4806      	ldr	r0, [pc, #24]	; (19418 <sc_commit+0x28>)
   193fe:	f00f f93f 	bl	28680 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19402:	07c3      	lsls	r3, r0, #31
   19404:	d505      	bpl.n	19412 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   19406:	4805      	ldr	r0, [pc, #20]	; (1941c <sc_commit+0x2c>)
   19408:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1940c:	2300      	movs	r3, #0
   1940e:	f007 ff51 	bl	212b4 <k_work_reschedule>
}
   19412:	2000      	movs	r0, #0
   19414:	bd08      	pop	{r3, pc}
   19416:	bf00      	nop
   19418:	20001a70 	.word	0x20001a70
   1941c:	20001a40 	.word	0x20001a40

00019420 <find_cf_cfg_by_addr>:
{
   19420:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   19422:	4c0e      	ldr	r4, [pc, #56]	; (1945c <find_cf_cfg_by_addr+0x3c>)
   19424:	7823      	ldrb	r3, [r4, #0]
   19426:	4283      	cmp	r3, r0
{
   19428:	4606      	mov	r6, r0
   1942a:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1942c:	d00a      	beq.n	19444 <find_cf_cfg_by_addr+0x24>
   1942e:	7c23      	ldrb	r3, [r4, #16]
   19430:	42b3      	cmp	r3, r6
   19432:	d111      	bne.n	19458 <find_cf_cfg_by_addr+0x38>
   19434:	490a      	ldr	r1, [pc, #40]	; (19460 <find_cf_cfg_by_addr+0x40>)
   19436:	2207      	movs	r2, #7
   19438:	4628      	mov	r0, r5
   1943a:	f00d fecb 	bl	271d4 <memcmp>
   1943e:	b958      	cbnz	r0, 19458 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   19440:	2001      	movs	r0, #1
   19442:	e006      	b.n	19452 <find_cf_cfg_by_addr+0x32>
   19444:	2207      	movs	r2, #7
   19446:	1c61      	adds	r1, r4, #1
   19448:	4628      	mov	r0, r5
   1944a:	f00d fec3 	bl	271d4 <memcmp>
			if (id == cf_cfg[i].id &&
   1944e:	2800      	cmp	r0, #0
   19450:	d1ed      	bne.n	1942e <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   19452:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   19456:	e000      	b.n	1945a <find_cf_cfg_by_addr+0x3a>
	return NULL;
   19458:	2000      	movs	r0, #0
}
   1945a:	bd70      	pop	{r4, r5, r6, pc}
   1945c:	20002638 	.word	0x20002638
   19460:	20002649 	.word	0x20002649

00019464 <cf_set>:
{
   19464:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19468:	4688      	mov	r8, r1
   1946a:	4616      	mov	r6, r2
   1946c:	461f      	mov	r7, r3
	if (!name) {
   1946e:	4605      	mov	r5, r0
   19470:	b948      	cbnz	r0, 19486 <cf_set+0x22>
		BT_ERR("Insufficient number of arguments");
   19472:	4828      	ldr	r0, [pc, #160]	; (19514 <cf_set+0xb0>)
   19474:	2145      	movs	r1, #69	; 0x45
   19476:	f00d f850 	bl	2651a <z_log_minimal_printk>
		return -EINVAL;
   1947a:	f06f 0415 	mvn.w	r4, #21
}
   1947e:	4620      	mov	r0, r4
   19480:	b004      	add	sp, #16
   19482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   19486:	a902      	add	r1, sp, #8
   19488:	f00d ff19 	bl	272be <bt_settings_decode_key>
	if (err) {
   1948c:	4604      	mov	r4, r0
   1948e:	b128      	cbz	r0, 1949c <cf_set+0x38>
		BT_ERR("Unable to decode address %s", name);
   19490:	4821      	ldr	r0, [pc, #132]	; (19518 <cf_set+0xb4>)
   19492:	462a      	mov	r2, r5
   19494:	2145      	movs	r1, #69	; 0x45
   19496:	f00d f840 	bl	2651a <z_log_minimal_printk>
   1949a:	e7ee      	b.n	1947a <cf_set+0x16>
	settings_name_next(name, &next);
   1949c:	a901      	add	r1, sp, #4
   1949e:	4628      	mov	r0, r5
   194a0:	f00d fadb 	bl	26a5a <settings_name_next>
	if (!next) {
   194a4:	9801      	ldr	r0, [sp, #4]
   194a6:	b140      	cbz	r0, 194ba <cf_set+0x56>
		unsigned long next_id = strtoul(next, NULL, 10);
   194a8:	220a      	movs	r2, #10
   194aa:	4621      	mov	r1, r4
   194ac:	f00d fde2 	bl	27074 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   194b0:	4602      	mov	r2, r0
   194b2:	b110      	cbz	r0, 194ba <cf_set+0x56>
			BT_ERR("Invalid local identity %lu", next_id);
   194b4:	4819      	ldr	r0, [pc, #100]	; (1951c <cf_set+0xb8>)
   194b6:	2145      	movs	r1, #69	; 0x45
   194b8:	e7ed      	b.n	19496 <cf_set+0x32>
	cfg = find_cf_cfg_by_addr(id, &addr);
   194ba:	a902      	add	r1, sp, #8
   194bc:	2000      	movs	r0, #0
   194be:	f7ff ffaf 	bl	19420 <find_cf_cfg_by_addr>
	if (!cfg) {
   194c2:	4605      	mov	r5, r0
   194c4:	b980      	cbnz	r0, 194e8 <cf_set+0x84>
		cfg = find_cf_cfg(NULL);
   194c6:	f7ff fee1 	bl	1928c <find_cf_cfg>
		if (!cfg) {
   194ca:	4605      	mov	r5, r0
   194cc:	b930      	cbnz	r0, 194dc <cf_set+0x78>
			BT_ERR("Unable to restore CF: no cfg left");
   194ce:	4814      	ldr	r0, [pc, #80]	; (19520 <cf_set+0xbc>)
   194d0:	2145      	movs	r1, #69	; 0x45
   194d2:	f00d f822 	bl	2651a <z_log_minimal_printk>
			return -ENOMEM;
   194d6:	f06f 040b 	mvn.w	r4, #11
   194da:	e7d0      	b.n	1947e <cf_set+0x1a>
		cfg->id = id;
   194dc:	2300      	movs	r3, #0
   194de:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   194e2:	a902      	add	r1, sp, #8
   194e4:	f00f f8e1 	bl	286aa <bt_addr_le_copy>
	if (len_rd) {
   194e8:	f1b8 0f00 	cmp.w	r8, #0
   194ec:	d00d      	beq.n	1950a <cf_set+0xa6>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   194ee:	f105 0108 	add.w	r1, r5, #8
   194f2:	2201      	movs	r2, #1
   194f4:	4638      	mov	r0, r7
   194f6:	47b0      	blx	r6
		if (len < 0) {
   194f8:	1e05      	subs	r5, r0, #0
   194fa:	dac0      	bge.n	1947e <cf_set+0x1a>
			BT_ERR("Failed to decode value (err %zd)", len);
   194fc:	4809      	ldr	r0, [pc, #36]	; (19524 <cf_set+0xc0>)
   194fe:	462a      	mov	r2, r5
   19500:	2145      	movs	r1, #69	; 0x45
   19502:	f00d f80a 	bl	2651a <z_log_minimal_printk>
			return len;
   19506:	462c      	mov	r4, r5
   19508:	e7b9      	b.n	1947e <cf_set+0x1a>
		clear_cf_cfg(cfg);
   1950a:	4628      	mov	r0, r5
   1950c:	f00f f8ed 	bl	286ea <clear_cf_cfg>
   19510:	e7b5      	b.n	1947e <cf_set+0x1a>
   19512:	bf00      	nop
   19514:	0002b5fa 	.word	0x0002b5fa
   19518:	0002c827 	.word	0x0002c827
   1951c:	0002c848 	.word	0x0002c848
   19520:	0002c868 	.word	0x0002c868
   19524:	0002c743 	.word	0x0002c743

00019528 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   19528:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1952a:	6881      	ldr	r1, [r0, #8]
{
   1952c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1952e:	4a07      	ldr	r2, [pc, #28]	; (1954c <remove_peer_from_attr+0x24>)
   19530:	4291      	cmp	r1, r2
   19532:	d109      	bne.n	19548 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   19534:	791a      	ldrb	r2, [r3, #4]
   19536:	6819      	ldr	r1, [r3, #0]
   19538:	68c0      	ldr	r0, [r0, #12]
   1953a:	f00f f99e 	bl	2887a <ccc_find_cfg>
	if (cfg) {
   1953e:	b118      	cbz	r0, 19548 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   19540:	220a      	movs	r2, #10
   19542:	2100      	movs	r1, #0
   19544:	f00d fe7a 	bl	2723c <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   19548:	2001      	movs	r0, #1
   1954a:	bd08      	pop	{r3, pc}
   1954c:	00019615 	.word	0x00019615

00019550 <ccc_load>:
{
   19550:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19552:	4b21      	ldr	r3, [pc, #132]	; (195d8 <ccc_load+0x88>)
{
   19554:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19556:	6882      	ldr	r2, [r0, #8]
   19558:	429a      	cmp	r2, r3
   1955a:	d002      	beq.n	19562 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   1955c:	2001      	movs	r0, #1
}
   1955e:	b002      	add	sp, #8
   19560:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   19562:	68a3      	ldr	r3, [r4, #8]
   19564:	68c6      	ldr	r6, [r0, #12]
   19566:	b94b      	cbnz	r3, 1957c <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   19568:	7922      	ldrb	r2, [r4, #4]
   1956a:	6821      	ldr	r1, [r4, #0]
   1956c:	4630      	mov	r0, r6
   1956e:	f00f f984 	bl	2887a <ccc_find_cfg>
	if (!cfg) {
   19572:	2800      	cmp	r0, #0
   19574:	d0f2      	beq.n	1955c <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   19576:	f00f f89b 	bl	286b0 <clear_ccc_cfg>
   1957a:	e7ef      	b.n	1955c <ccc_load+0xc>
	} else if (!load->count) {
   1957c:	68e0      	ldr	r0, [r4, #12]
   1957e:	2800      	cmp	r0, #0
   19580:	d0ed      	beq.n	1955e <ccc_load+0xe>
	if (load->entry->handle != handle) {
   19582:	881b      	ldrh	r3, [r3, #0]
   19584:	4299      	cmp	r1, r3
   19586:	d00a      	beq.n	1959e <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   19588:	d9e8      	bls.n	1955c <ccc_load+0xc>
	load->count--;
   1958a:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1958c:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1958e:	3801      	subs	r0, #1
	load->entry++;
   19590:	3304      	adds	r3, #4
	load->count--;
   19592:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19594:	3800      	subs	r0, #0
	load->entry++;
   19596:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19598:	bf18      	it	ne
   1959a:	2001      	movne	r0, #1
   1959c:	e7df      	b.n	1955e <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1959e:	7922      	ldrb	r2, [r4, #4]
   195a0:	6821      	ldr	r1, [r4, #0]
   195a2:	4630      	mov	r0, r6
   195a4:	f00f f969 	bl	2887a <ccc_find_cfg>
	if (!cfg) {
   195a8:	4605      	mov	r5, r0
   195aa:	b980      	cbnz	r0, 195ce <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   195ac:	9000      	str	r0, [sp, #0]
   195ae:	4602      	mov	r2, r0
   195b0:	f8cd 0003 	str.w	r0, [sp, #3]
   195b4:	4669      	mov	r1, sp
   195b6:	4630      	mov	r0, r6
   195b8:	f00f f95f 	bl	2887a <ccc_find_cfg>
		if (!cfg) {
   195bc:	4605      	mov	r5, r0
   195be:	2800      	cmp	r0, #0
   195c0:	d0e3      	beq.n	1958a <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   195c2:	6821      	ldr	r1, [r4, #0]
   195c4:	3001      	adds	r0, #1
   195c6:	f00f f870 	bl	286aa <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   195ca:	7923      	ldrb	r3, [r4, #4]
   195cc:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   195ce:	68a3      	ldr	r3, [r4, #8]
   195d0:	885b      	ldrh	r3, [r3, #2]
   195d2:	812b      	strh	r3, [r5, #8]
   195d4:	e7d9      	b.n	1958a <ccc_load+0x3a>
   195d6:	bf00      	nop
   195d8:	00019615 	.word	0x00019615

000195dc <ccc_save>:
{
   195dc:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   195de:	4b0c      	ldr	r3, [pc, #48]	; (19610 <ccc_save+0x34>)
{
   195e0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   195e2:	6882      	ldr	r2, [r0, #8]
   195e4:	429a      	cmp	r2, r3
{
   195e6:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   195e8:	d10f      	bne.n	1960a <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   195ea:	7922      	ldrb	r2, [r4, #4]
   195ec:	6821      	ldr	r1, [r4, #0]
   195ee:	68c0      	ldr	r0, [r0, #12]
   195f0:	f00f f943 	bl	2887a <ccc_find_cfg>
	if (!cfg) {
   195f4:	b148      	cbz	r0, 1960a <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   195f6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   195fa:	8901      	ldrh	r1, [r0, #8]
   195fc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   19600:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   19602:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   19604:	8151      	strh	r1, [r2, #10]
	save->count++;
   19606:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1960a:	2001      	movs	r0, #1
   1960c:	bd38      	pop	{r3, r4, r5, pc}
   1960e:	bf00      	nop
   19610:	00019615 	.word	0x00019615

00019614 <bt_gatt_attr_write_ccc>:
{
   19614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19618:	4698      	mov	r8, r3
   1961a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1961e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   19622:	4606      	mov	r6, r0
   19624:	4689      	mov	r9, r1
	if (offset) {
   19626:	2b00      	cmp	r3, #0
   19628:	d164      	bne.n	196f4 <bt_gatt_attr_write_ccc+0xe0>
	if (!len || len > sizeof(uint16_t)) {
   1962a:	f108 33ff 	add.w	r3, r8, #4294967295
   1962e:	2b01      	cmp	r3, #1
   19630:	d863      	bhi.n	196fa <bt_gatt_attr_write_ccc+0xe6>
		value = *(uint8_t *)buf;
   19632:	7817      	ldrb	r7, [r2, #0]
	if (len < sizeof(uint16_t)) {
   19634:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   19638:	4651      	mov	r1, sl
   1963a:	bf14      	ite	ne
   1963c:	8817      	ldrhne	r7, [r2, #0]
		value = *(uint8_t *)buf;
   1963e:	b2bf      	uxtheq	r7, r7
	cfg = find_ccc_cfg(conn, ccc);
   19640:	f00f f92a 	bl	28898 <find_ccc_cfg>
	if (!cfg) {
   19644:	4605      	mov	r5, r0
   19646:	b9b0      	cbnz	r0, 19676 <bt_gatt_attr_write_ccc+0x62>
		if (!value) {
   19648:	b917      	cbnz	r7, 19650 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   1964a:	4640      	mov	r0, r8
}
   1964c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   19650:	4651      	mov	r1, sl
   19652:	f00f f921 	bl	28898 <find_ccc_cfg>
		if (!cfg) {
   19656:	4605      	mov	r5, r0
   19658:	b930      	cbnz	r0, 19668 <bt_gatt_attr_write_ccc+0x54>
			BT_WARN("No space to store CCC cfg");
   1965a:	4829      	ldr	r0, [pc, #164]	; (19700 <bt_gatt_attr_write_ccc+0xec>)
   1965c:	2157      	movs	r1, #87	; 0x57
   1965e:	f00c ff5c 	bl	2651a <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19662:	f06f 0010 	mvn.w	r0, #16
   19666:	e7f1      	b.n	1964c <bt_gatt_attr_write_ccc+0x38>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19668:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1966c:	3001      	adds	r0, #1
   1966e:	f00f f81c 	bl	286aa <bt_addr_le_copy>
		cfg->id = conn->id;
   19672:	7a33      	ldrb	r3, [r6, #8]
   19674:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   19676:	f8da 3010 	ldr.w	r3, [sl, #16]
   1967a:	bb7b      	cbnz	r3, 196dc <bt_gatt_attr_write_ccc+0xc8>
	if (cfg->value != ccc->value) {
   1967c:	f8ba 300a 	ldrh.w	r3, [sl, #10]
	value_changed = cfg->value != value;
   19680:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   19682:	812f      	strh	r7, [r5, #8]
	if (cfg->value != ccc->value) {
   19684:	42bb      	cmp	r3, r7
   19686:	d003      	beq.n	19690 <bt_gatt_attr_write_ccc+0x7c>
		gatt_ccc_changed(attr, ccc);
   19688:	4651      	mov	r1, sl
   1968a:	4648      	mov	r0, r9
   1968c:	f00e ff80 	bl	28590 <gatt_ccc_changed>
	if (value_changed) {
   19690:	42bc      	cmp	r4, r7
   19692:	d01d      	beq.n	196d0 <bt_gatt_attr_write_ccc+0xbc>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   19694:	4630      	mov	r0, r6
   19696:	f7fe f8c5 	bl	17824 <bt_conn_index>
   1969a:	4c1a      	ldr	r4, [pc, #104]	; (19704 <bt_gatt_attr_write_ccc+0xf0>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1969c:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   196a0:	429e      	cmp	r6, r3
   196a2:	d015      	beq.n	196d0 <bt_gatt_attr_write_ccc+0xbc>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   196a4:	7a30      	ldrb	r0, [r6, #8]
   196a6:	f106 0190 	add.w	r1, r6, #144	; 0x90
   196aa:	f00d ff9a 	bl	275e2 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   196ae:	b178      	cbz	r0, 196d0 <bt_gatt_attr_write_ccc+0xbc>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   196b0:	4630      	mov	r0, r6
   196b2:	f7fe f8b7 	bl	17824 <bt_conn_index>
   196b6:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   196b8:	4630      	mov	r0, r6
   196ba:	f00e f976 	bl	279aa <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   196be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   196c2:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   196c6:	2300      	movs	r3, #0
   196c8:	f104 0008 	add.w	r0, r4, #8
   196cc:	f007 fdf2 	bl	212b4 <k_work_reschedule>
	if (!value) {
   196d0:	2f00      	cmp	r7, #0
   196d2:	d1ba      	bne.n	1964a <bt_gatt_attr_write_ccc+0x36>
		clear_ccc_cfg(cfg);
   196d4:	4628      	mov	r0, r5
   196d6:	f00e ffeb 	bl	286b0 <clear_ccc_cfg>
   196da:	e7b6      	b.n	1964a <bt_gatt_attr_write_ccc+0x36>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   196dc:	463a      	mov	r2, r7
   196de:	4649      	mov	r1, r9
   196e0:	4630      	mov	r0, r6
   196e2:	4798      	blx	r3
		if (write < 0) {
   196e4:	2800      	cmp	r0, #0
   196e6:	dbb1      	blt.n	1964c <bt_gatt_attr_write_ccc+0x38>
		if (write != sizeof(value) && write != 1) {
   196e8:	1e44      	subs	r4, r0, #1
   196ea:	2c01      	cmp	r4, #1
   196ec:	d9c6      	bls.n	1967c <bt_gatt_attr_write_ccc+0x68>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   196ee:	f06f 000d 	mvn.w	r0, #13
   196f2:	e7ab      	b.n	1964c <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   196f4:	f06f 0006 	mvn.w	r0, #6
   196f8:	e7a8      	b.n	1964c <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   196fa:	f06f 000c 	mvn.w	r0, #12
   196fe:	e7a5      	b.n	1964c <bt_gatt_attr_write_ccc+0x38>
   19700:	0002c88f 	.word	0x0002c88f
   19704:	200019e8 	.word	0x200019e8

00019708 <find_sc_cfg>:
{
   19708:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1970a:	4c0e      	ldr	r4, [pc, #56]	; (19744 <find_sc_cfg+0x3c>)
   1970c:	7823      	ldrb	r3, [r4, #0]
   1970e:	4283      	cmp	r3, r0
{
   19710:	4605      	mov	r5, r0
   19712:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   19714:	d00a      	beq.n	1972c <find_sc_cfg+0x24>
   19716:	7b23      	ldrb	r3, [r4, #12]
   19718:	42ab      	cmp	r3, r5
   1971a:	d111      	bne.n	19740 <find_sc_cfg+0x38>
   1971c:	480a      	ldr	r0, [pc, #40]	; (19748 <find_sc_cfg+0x40>)
   1971e:	2207      	movs	r2, #7
   19720:	4631      	mov	r1, r6
   19722:	f00d fd57 	bl	271d4 <memcmp>
   19726:	b958      	cbnz	r0, 19740 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19728:	2001      	movs	r0, #1
   1972a:	e005      	b.n	19738 <find_sc_cfg+0x30>
   1972c:	2207      	movs	r2, #7
   1972e:	1c60      	adds	r0, r4, #1
   19730:	f00d fd50 	bl	271d4 <memcmp>
		if (id == sc_cfg[i].id &&
   19734:	2800      	cmp	r0, #0
   19736:	d1ee      	bne.n	19716 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   19738:	230c      	movs	r3, #12
   1973a:	fb03 4000 	mla	r0, r3, r0, r4
   1973e:	e000      	b.n	19742 <find_sc_cfg+0x3a>
	return NULL;
   19740:	2000      	movs	r0, #0
}
   19742:	bd70      	pop	{r4, r5, r6, pc}
   19744:	200033b8 	.word	0x200033b8
   19748:	200033c5 	.word	0x200033c5

0001974c <sc_save>:
{
   1974c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19750:	4680      	mov	r8, r0
   19752:	460f      	mov	r7, r1
   19754:	4616      	mov	r6, r2
   19756:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   19758:	f7ff ffd6 	bl	19708 <find_sc_cfg>
	if (!cfg) {
   1975c:	4604      	mov	r4, r0
   1975e:	b998      	cbnz	r0, 19788 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   19760:	4669      	mov	r1, sp
   19762:	9000      	str	r0, [sp, #0]
   19764:	f8cd 0003 	str.w	r0, [sp, #3]
   19768:	f7ff ffce 	bl	19708 <find_sc_cfg>
		if (!cfg) {
   1976c:	4604      	mov	r4, r0
   1976e:	b930      	cbnz	r0, 1977e <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   19770:	4813      	ldr	r0, [pc, #76]	; (197c0 <sc_save+0x74>)
   19772:	2145      	movs	r1, #69	; 0x45
   19774:	f00c fed1 	bl	2651a <z_log_minimal_printk>
}
   19778:	b002      	add	sp, #8
   1977a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1977e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   19782:	4639      	mov	r1, r7
   19784:	f00e ff91 	bl	286aa <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   19788:	8922      	ldrh	r2, [r4, #8]
   1978a:	8963      	ldrh	r3, [r4, #10]
   1978c:	b97a      	cbnz	r2, 197ae <sc_save+0x62>
   1978e:	b983      	cbnz	r3, 197b2 <sc_save+0x66>
		cfg->data.start = start;
   19790:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   19792:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   19794:	4621      	mov	r1, r4
   19796:	f811 0b01 	ldrb.w	r0, [r1], #1
   1979a:	f00d ff22 	bl	275e2 <bt_addr_le_is_bonded>
   1979e:	2800      	cmp	r0, #0
   197a0:	d0ea      	beq.n	19778 <sc_save+0x2c>
		sc_store(cfg);
   197a2:	4620      	mov	r0, r4
}
   197a4:	b002      	add	sp, #8
   197a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   197aa:	f7ff bddd 	b.w	19368 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   197ae:	4296      	cmp	r6, r2
   197b0:	d302      	bcc.n	197b8 <sc_save+0x6c>
   197b2:	429d      	cmp	r5, r3
   197b4:	d8ed      	bhi.n	19792 <sc_save+0x46>
   197b6:	e7df      	b.n	19778 <sc_save+0x2c>
	if (*end < new_end) {
   197b8:	429d      	cmp	r5, r3
		*start = new_start;
   197ba:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   197bc:	d9ea      	bls.n	19794 <sc_save+0x48>
   197be:	e7e8      	b.n	19792 <sc_save+0x46>
   197c0:	0002c8ae 	.word	0x0002c8ae

000197c4 <bt_gatt_clear_sc>:
{
   197c4:	b570      	push	{r4, r5, r6, lr}
   197c6:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   197c8:	f7ff ff9e 	bl	19708 <find_sc_cfg>
	if (!cfg) {
   197cc:	4604      	mov	r4, r0
   197ce:	b1e8      	cbz	r0, 1980c <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   197d0:	4605      	mov	r5, r0
   197d2:	f815 2b01 	ldrb.w	r2, [r5], #1
   197d6:	b1e2      	cbz	r2, 19812 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   197d8:	ae02      	add	r6, sp, #8
   197da:	2104      	movs	r1, #4
   197dc:	4630      	mov	r0, r6
   197de:	f00c fc03 	bl	25fe8 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   197e2:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   197e4:	4a0c      	ldr	r2, [pc, #48]	; (19818 <bt_gatt_clear_sc+0x54>)
   197e6:	462b      	mov	r3, r5
   197e8:	2124      	movs	r1, #36	; 0x24
   197ea:	a803      	add	r0, sp, #12
   197ec:	f7fb faf6 	bl	14ddc <bt_settings_encode_key>
		err = settings_delete(key);
   197f0:	a803      	add	r0, sp, #12
   197f2:	f00d f90b 	bl	26a0c <settings_delete>
		if (err) {
   197f6:	4602      	mov	r2, r0
   197f8:	b118      	cbz	r0, 19802 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   197fa:	4808      	ldr	r0, [pc, #32]	; (1981c <bt_gatt_clear_sc+0x58>)
   197fc:	2145      	movs	r1, #69	; 0x45
   197fe:	f00c fe8c 	bl	2651a <z_log_minimal_printk>
	memset(cfg, 0, sizeof(*cfg));
   19802:	220c      	movs	r2, #12
   19804:	2100      	movs	r1, #0
   19806:	4620      	mov	r0, r4
   19808:	f00d fd18 	bl	2723c <memset>
}
   1980c:	2000      	movs	r0, #0
   1980e:	b00c      	add	sp, #48	; 0x30
   19810:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   19812:	9200      	str	r2, [sp, #0]
   19814:	e7e6      	b.n	197e4 <bt_gatt_clear_sc+0x20>
   19816:	bf00      	nop
   19818:	0002cb25 	.word	0x0002cb25
   1981c:	0002c8d2 	.word	0x0002c8d2

00019820 <sc_clear>:
{
   19820:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19822:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   19826:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19828:	4631      	mov	r1, r6
   1982a:	7a00      	ldrb	r0, [r0, #8]
   1982c:	f00d fed9 	bl	275e2 <bt_addr_le_is_bonded>
   19830:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   19832:	4631      	mov	r1, r6
   19834:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19836:	b14d      	cbz	r5, 1984c <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   19838:	f7ff ffc4 	bl	197c4 <bt_gatt_clear_sc>
		if (err) {
   1983c:	4602      	mov	r2, r0
   1983e:	b170      	cbz	r0, 1985e <sc_clear+0x3e>
}
   19840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   19844:	4806      	ldr	r0, [pc, #24]	; (19860 <sc_clear+0x40>)
   19846:	2145      	movs	r1, #69	; 0x45
   19848:	f00c be67 	b.w	2651a <z_log_minimal_printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1984c:	f7ff ff5c 	bl	19708 <find_sc_cfg>
		if (cfg) {
   19850:	b128      	cbz	r0, 1985e <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   19852:	4629      	mov	r1, r5
   19854:	220c      	movs	r2, #12
}
   19856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1985a:	f00d bcef 	b.w	2723c <memset>
}
   1985e:	bd70      	pop	{r4, r5, r6, pc}
   19860:	0002c8f4 	.word	0x0002c8f4

00019864 <disconnected_cb>:
{
   19864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19868:	4b1f      	ldr	r3, [pc, #124]	; (198e8 <disconnected_cb+0x84>)
{
   1986a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1986c:	6882      	ldr	r2, [r0, #8]
   1986e:	429a      	cmp	r2, r3
{
   19870:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19872:	d102      	bne.n	1987a <disconnected_cb+0x16>
	ccc = attr->user_data;
   19874:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   19876:	8963      	ldrh	r3, [r4, #10]
   19878:	b9c3      	cbnz	r3, 198ac <disconnected_cb+0x48>
}
   1987a:	2001      	movs	r0, #1
   1987c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19880:	f105 0890 	add.w	r8, r5, #144	; 0x90
   19884:	7a28      	ldrb	r0, [r5, #8]
   19886:	4641      	mov	r1, r8
   19888:	f00d feab 	bl	275e2 <bt_addr_le_is_bonded>
   1988c:	b948      	cbnz	r0, 198a2 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   1988e:	4b17      	ldr	r3, [pc, #92]	; (198ec <disconnected_cb+0x88>)
   19890:	429c      	cmp	r4, r3
   19892:	d102      	bne.n	1989a <disconnected_cb+0x36>
					sc_clear(conn);
   19894:	4628      	mov	r0, r5
   19896:	f7ff ffc3 	bl	19820 <sc_clear>
				clear_ccc_cfg(cfg);
   1989a:	4620      	mov	r0, r4
   1989c:	f00e ff08 	bl	286b0 <clear_ccc_cfg>
	if (!value_used) {
   198a0:	e019      	b.n	198d6 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   198a2:	4641      	mov	r1, r8
   198a4:	4638      	mov	r0, r7
   198a6:	f00e ff00 	bl	286aa <bt_addr_le_copy>
	if (!value_used) {
   198aa:	e014      	b.n	198d6 <disconnected_cb+0x72>
		if (!cfg->value) {
   198ac:	8923      	ldrh	r3, [r4, #8]
   198ae:	b193      	cbz	r3, 198d6 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   198b0:	4627      	mov	r7, r4
   198b2:	4628      	mov	r0, r5
   198b4:	f817 1b01 	ldrb.w	r1, [r7], #1
   198b8:	463a      	mov	r2, r7
   198ba:	f00e f912 	bl	27ae2 <bt_conn_is_peer_addr_le>
   198be:	2800      	cmp	r0, #0
   198c0:	d1de      	bne.n	19880 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   198c2:	7820      	ldrb	r0, [r4, #0]
   198c4:	4639      	mov	r1, r7
   198c6:	f7fe f937 	bl	17b38 <bt_conn_lookup_addr_le>
			if (tmp) {
   198ca:	b120      	cbz	r0, 198d6 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   198cc:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   198ce:	f7fd fe99 	bl	17604 <bt_conn_unref>
	if (!value_used) {
   198d2:	2d07      	cmp	r5, #7
   198d4:	d0d1      	beq.n	1987a <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   198d6:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   198d8:	2100      	movs	r1, #0
   198da:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   198dc:	2b00      	cmp	r3, #0
   198de:	d0cc      	beq.n	1987a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   198e0:	4630      	mov	r0, r6
   198e2:	4798      	blx	r3
   198e4:	e7c9      	b.n	1987a <disconnected_cb+0x16>
   198e6:	bf00      	nop
   198e8:	00019615 	.word	0x00019615
   198ec:	200005dc 	.word	0x200005dc

000198f0 <sc_set>:
{
   198f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   198f4:	460e      	mov	r6, r1
   198f6:	b086      	sub	sp, #24
   198f8:	4617      	mov	r7, r2
   198fa:	4698      	mov	r8, r3
	if (!name) {
   198fc:	4605      	mov	r5, r0
   198fe:	b948      	cbnz	r0, 19914 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   19900:	482a      	ldr	r0, [pc, #168]	; (199ac <sc_set+0xbc>)
   19902:	2145      	movs	r1, #69	; 0x45
   19904:	f00c fe09 	bl	2651a <z_log_minimal_printk>
		return -EINVAL;
   19908:	f06f 0415 	mvn.w	r4, #21
}
   1990c:	4620      	mov	r0, r4
   1990e:	b006      	add	sp, #24
   19910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   19914:	a902      	add	r1, sp, #8
   19916:	f00d fcd2 	bl	272be <bt_settings_decode_key>
	if (err) {
   1991a:	4604      	mov	r4, r0
   1991c:	b128      	cbz	r0, 1992a <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", name);
   1991e:	4824      	ldr	r0, [pc, #144]	; (199b0 <sc_set+0xc0>)
   19920:	462a      	mov	r2, r5
   19922:	2145      	movs	r1, #69	; 0x45
   19924:	f00c fdf9 	bl	2651a <z_log_minimal_printk>
   19928:	e7ee      	b.n	19908 <sc_set+0x18>
	settings_name_next(name, &next);
   1992a:	a901      	add	r1, sp, #4
   1992c:	4628      	mov	r0, r5
   1992e:	f00d f894 	bl	26a5a <settings_name_next>
	if (!next) {
   19932:	9801      	ldr	r0, [sp, #4]
   19934:	b140      	cbz	r0, 19948 <sc_set+0x58>
		unsigned long next_id = strtoul(next, NULL, 10);
   19936:	220a      	movs	r2, #10
   19938:	4621      	mov	r1, r4
   1993a:	f00d fb9b 	bl	27074 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1993e:	4602      	mov	r2, r0
   19940:	b110      	cbz	r0, 19948 <sc_set+0x58>
			BT_ERR("Invalid local identity %lu", next_id);
   19942:	481c      	ldr	r0, [pc, #112]	; (199b4 <sc_set+0xc4>)
   19944:	2145      	movs	r1, #69	; 0x45
   19946:	e7ed      	b.n	19924 <sc_set+0x34>
	cfg = find_sc_cfg(id, &addr);
   19948:	a902      	add	r1, sp, #8
   1994a:	2000      	movs	r0, #0
   1994c:	f7ff fedc 	bl	19708 <find_sc_cfg>
	if (!cfg && len_rd) {
   19950:	4605      	mov	r5, r0
   19952:	bb20      	cbnz	r0, 1999e <sc_set+0xae>
   19954:	2e00      	cmp	r6, #0
   19956:	d0d9      	beq.n	1990c <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   19958:	a904      	add	r1, sp, #16
   1995a:	9004      	str	r0, [sp, #16]
   1995c:	4606      	mov	r6, r0
   1995e:	f8cd 0013 	str.w	r0, [sp, #19]
   19962:	f7ff fed1 	bl	19708 <find_sc_cfg>
		if (!cfg) {
   19966:	4605      	mov	r5, r0
   19968:	b930      	cbnz	r0, 19978 <sc_set+0x88>
			BT_ERR("Unable to restore SC: no cfg left");
   1996a:	4813      	ldr	r0, [pc, #76]	; (199b8 <sc_set+0xc8>)
   1996c:	2145      	movs	r1, #69	; 0x45
   1996e:	f00c fdd4 	bl	2651a <z_log_minimal_printk>
			return -ENOMEM;
   19972:	f06f 040b 	mvn.w	r4, #11
   19976:	e7c9      	b.n	1990c <sc_set+0x1c>
		cfg->id = id;
   19978:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1997c:	a902      	add	r1, sp, #8
   1997e:	f00e fe94 	bl	286aa <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   19982:	f105 0108 	add.w	r1, r5, #8
   19986:	2204      	movs	r2, #4
   19988:	4640      	mov	r0, r8
   1998a:	47b8      	blx	r7
		if (len < 0) {
   1998c:	1e05      	subs	r5, r0, #0
   1998e:	dabd      	bge.n	1990c <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   19990:	480a      	ldr	r0, [pc, #40]	; (199bc <sc_set+0xcc>)
   19992:	462a      	mov	r2, r5
   19994:	2145      	movs	r1, #69	; 0x45
   19996:	f00c fdc0 	bl	2651a <z_log_minimal_printk>
			return len;
   1999a:	462c      	mov	r4, r5
   1999c:	e7b6      	b.n	1990c <sc_set+0x1c>
	if (len_rd) {
   1999e:	2e00      	cmp	r6, #0
   199a0:	d1ef      	bne.n	19982 <sc_set+0x92>
		memset(cfg, 0, sizeof(*cfg));
   199a2:	220c      	movs	r2, #12
   199a4:	4631      	mov	r1, r6
   199a6:	f00d fc49 	bl	2723c <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   199aa:	e7af      	b.n	1990c <sc_set+0x1c>
   199ac:	0002b5fa 	.word	0x0002b5fa
   199b0:	0002c827 	.word	0x0002c827
   199b4:	0002c848 	.word	0x0002c848
   199b8:	0002c90f 	.word	0x0002c90f
   199bc:	0002c743 	.word	0x0002c743

000199c0 <sc_indicate_rsp>:
{
   199c0:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   199c2:	f06f 0102 	mvn.w	r1, #2
   199c6:	4604      	mov	r4, r0
   199c8:	480f      	ldr	r0, [pc, #60]	; (19a08 <sc_indicate_rsp+0x48>)
   199ca:	f00e fe7f 	bl	286cc <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   199ce:	480e      	ldr	r0, [pc, #56]	; (19a08 <sc_indicate_rsp+0x48>)
   199d0:	f00e fe56 	bl	28680 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   199d4:	07c2      	lsls	r2, r0, #31
   199d6:	d504      	bpl.n	199e2 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   199d8:	480c      	ldr	r0, [pc, #48]	; (19a0c <sc_indicate_rsp+0x4c>)
   199da:	2200      	movs	r2, #0
   199dc:	2300      	movs	r3, #0
   199de:	f007 fc69 	bl	212b4 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   199e2:	4620      	mov	r0, r4
   199e4:	f00e fda3 	bl	2852e <bt_att_fixed_chan_only>
   199e8:	b160      	cbz	r0, 19a04 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   199ea:	4620      	mov	r0, r4
   199ec:	f7ff fc4e 	bl	1928c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   199f0:	b140      	cbz	r0, 19a04 <sc_indicate_rsp+0x44>
   199f2:	7a03      	ldrb	r3, [r0, #8]
   199f4:	07db      	lsls	r3, r3, #31
   199f6:	d505      	bpl.n	19a04 <sc_indicate_rsp+0x44>
}
   199f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   199fc:	2101      	movs	r1, #1
   199fe:	300c      	adds	r0, #12
   19a00:	f00e be44 	b.w	2868c <atomic_or>
   19a04:	bd10      	pop	{r4, pc}
   19a06:	bf00      	nop
   19a08:	20001a70 	.word	0x20001a70
   19a0c:	20001a40 	.word	0x20001a40

00019a10 <bt_gatt_init>:
{
   19a10:	b570      	push	{r4, r5, r6, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19a12:	4b2a      	ldr	r3, [pc, #168]	; (19abc <bt_gatt_init+0xac>)
   19a14:	f3bf 8f5b 	dmb	ish
   19a18:	2201      	movs	r2, #1
   19a1a:	e853 1f00 	ldrex	r1, [r3]
   19a1e:	2900      	cmp	r1, #0
   19a20:	d103      	bne.n	19a2a <bt_gatt_init+0x1a>
   19a22:	e843 2000 	strex	r0, r2, [r3]
   19a26:	2800      	cmp	r0, #0
   19a28:	d1f7      	bne.n	19a1a <bt_gatt_init+0xa>
   19a2a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   19a2e:	d143      	bne.n	19ab8 <bt_gatt_init+0xa8>
   19a30:	f3bf 8f5b 	dmb	ish
   19a34:	4b22      	ldr	r3, [pc, #136]	; (19ac0 <bt_gatt_init+0xb0>)
   19a36:	e853 1f00 	ldrex	r1, [r3]
   19a3a:	2900      	cmp	r1, #0
   19a3c:	d103      	bne.n	19a46 <bt_gatt_init+0x36>
   19a3e:	e843 2000 	strex	r0, r2, [r3]
   19a42:	2800      	cmp	r0, #0
   19a44:	d1f7      	bne.n	19a36 <bt_gatt_init+0x26>
   19a46:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   19a4a:	d031      	beq.n	19ab0 <bt_gatt_init+0xa0>
	list->head = NULL;
   19a4c:	4b1d      	ldr	r3, [pc, #116]	; (19ac4 <bt_gatt_init+0xb4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   19a4e:	491e      	ldr	r1, [pc, #120]	; (19ac8 <bt_gatt_init+0xb8>)
   19a50:	481e      	ldr	r0, [pc, #120]	; (19acc <bt_gatt_init+0xbc>)
   19a52:	2200      	movs	r2, #0
	list->tail = NULL;
   19a54:	e9c3 2200 	strd	r2, r2, [r3]
   19a58:	f007 fb36 	bl	210c8 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   19a5c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19a60:	2300      	movs	r3, #0
   19a62:	481a      	ldr	r0, [pc, #104]	; (19acc <bt_gatt_init+0xbc>)
   19a64:	f7fb fa5c 	bl	14f20 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   19a68:	4919      	ldr	r1, [pc, #100]	; (19ad0 <bt_gatt_init+0xc0>)
   19a6a:	481a      	ldr	r0, [pc, #104]	; (19ad4 <bt_gatt_init+0xc4>)
   19a6c:	f007 fb2c 	bl	210c8 <k_work_init_delayable>
   19a70:	2102      	movs	r1, #2
   19a72:	4819      	ldr	r0, [pc, #100]	; (19ad8 <bt_gatt_init+0xc8>)
   19a74:	f00e fe0a 	bl	2868c <atomic_or>
}
   19a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   19a7c:	4917      	ldr	r1, [pc, #92]	; (19adc <bt_gatt_init+0xcc>)
   19a7e:	4818      	ldr	r0, [pc, #96]	; (19ae0 <bt_gatt_init+0xd0>)
   19a80:	f007 bb22 	b.w	210c8 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   19a84:	4a17      	ldr	r2, [pc, #92]	; (19ae4 <bt_gatt_init+0xd4>)
   19a86:	6863      	ldr	r3, [r4, #4]
   19a88:	8811      	ldrh	r1, [r2, #0]
   19a8a:	440b      	add	r3, r1
   19a8c:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19a8e:	3408      	adds	r4, #8
   19a90:	42ac      	cmp	r4, r5
   19a92:	d90a      	bls.n	19aaa <bt_gatt_init+0x9a>
   19a94:	4814      	ldr	r0, [pc, #80]	; (19ae8 <bt_gatt_init+0xd8>)
   19a96:	4631      	mov	r1, r6
   19a98:	f240 520e 	movw	r2, #1294	; 0x50e
   19a9c:	f00c fd2f 	bl	264fe <assert_print>
   19aa0:	f240 510e 	movw	r1, #1294	; 0x50e
   19aa4:	4630      	mov	r0, r6
   19aa6:	f00c fd23 	bl	264f0 <assert_post_action>
   19aaa:	42ac      	cmp	r4, r5
   19aac:	d3ea      	bcc.n	19a84 <bt_gatt_init+0x74>
   19aae:	e7cd      	b.n	19a4c <bt_gatt_init+0x3c>
   19ab0:	4c0e      	ldr	r4, [pc, #56]	; (19aec <bt_gatt_init+0xdc>)
   19ab2:	4d0f      	ldr	r5, [pc, #60]	; (19af0 <bt_gatt_init+0xe0>)
   19ab4:	4e0f      	ldr	r6, [pc, #60]	; (19af4 <bt_gatt_init+0xe4>)
   19ab6:	e7eb      	b.n	19a90 <bt_gatt_init+0x80>
}
   19ab8:	bd70      	pop	{r4, r5, r6, pc}
   19aba:	bf00      	nop
   19abc:	20002658 	.word	0x20002658
   19ac0:	20002674 	.word	0x20002674
   19ac4:	20002630 	.word	0x20002630
   19ac8:	00019d5d 	.word	0x00019d5d
   19acc:	20001990 	.word	0x20001990
   19ad0:	0001a295 	.word	0x0001a295
   19ad4:	20001a40 	.word	0x20001a40
   19ad8:	20001a70 	.word	0x20001a70
   19adc:	00028b27 	.word	0x00028b27
   19ae0:	200019f0 	.word	0x200019f0
   19ae4:	200033b6 	.word	0x200033b6
   19ae8:	0002aa75 	.word	0x0002aa75
   19aec:	00029f60 	.word	0x00029f60
   19af0:	00029f78 	.word	0x00029f78
   19af4:	0002c936 	.word	0x0002c936

00019af8 <bt_gatt_attr_get_handle>:
{
   19af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   19afc:	4604      	mov	r4, r0
   19afe:	b910      	cbnz	r0, 19b06 <bt_gatt_attr_get_handle+0xe>
		return 0;
   19b00:	2000      	movs	r0, #0
}
   19b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   19b06:	8a00      	ldrh	r0, [r0, #16]
   19b08:	2800      	cmp	r0, #0
   19b0a:	d1fa      	bne.n	19b02 <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19b0c:	4d18      	ldr	r5, [pc, #96]	; (19b70 <bt_gatt_attr_get_handle+0x78>)
   19b0e:	4e19      	ldr	r6, [pc, #100]	; (19b74 <bt_gatt_attr_get_handle+0x7c>)
   19b10:	4f19      	ldr	r7, [pc, #100]	; (19b78 <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
   19b12:	f04f 0801 	mov.w	r8, #1
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19b16:	42b5      	cmp	r5, r6
   19b18:	d90a      	bls.n	19b30 <bt_gatt_attr_get_handle+0x38>
   19b1a:	4818      	ldr	r0, [pc, #96]	; (19b7c <bt_gatt_attr_get_handle+0x84>)
   19b1c:	4639      	mov	r1, r7
   19b1e:	f240 6265 	movw	r2, #1637	; 0x665
   19b22:	f00c fcec 	bl	264fe <assert_print>
   19b26:	f240 6165 	movw	r1, #1637	; 0x665
   19b2a:	4638      	mov	r0, r7
   19b2c:	f00c fce0 	bl	264f0 <assert_post_action>
   19b30:	42b5      	cmp	r5, r6
   19b32:	d2e5      	bcs.n	19b00 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19b34:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   19b38:	4564      	cmp	r4, ip
   19b3a:	d306      	bcc.n	19b4a <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19b3c:	f04f 0e14 	mov.w	lr, #20
   19b40:	fb0e c301 	mla	r3, lr, r1, ip
   19b44:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   19b46:	429c      	cmp	r4, r3
   19b48:	d910      	bls.n	19b6c <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   19b4a:	eb08 0001 	add.w	r0, r8, r1
   19b4e:	b280      	uxth	r0, r0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19b50:	3508      	adds	r5, #8
   19b52:	4680      	mov	r8, r0
   19b54:	e7df      	b.n	19b16 <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   19b56:	fb0e c302 	mla	r3, lr, r2, ip
   19b5a:	429c      	cmp	r4, r3
   19b5c:	d0d1      	beq.n	19b02 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   19b5e:	3201      	adds	r2, #1
   19b60:	eb08 0302 	add.w	r3, r8, r2
   19b64:	4291      	cmp	r1, r2
   19b66:	b298      	uxth	r0, r3
   19b68:	d1f5      	bne.n	19b56 <bt_gatt_attr_get_handle+0x5e>
   19b6a:	e7f1      	b.n	19b50 <bt_gatt_attr_get_handle+0x58>
   19b6c:	2200      	movs	r2, #0
   19b6e:	e7f7      	b.n	19b60 <bt_gatt_attr_get_handle+0x68>
   19b70:	00029f60 	.word	0x00029f60
   19b74:	00029f78 	.word	0x00029f78
   19b78:	0002c936 	.word	0x0002c936
   19b7c:	0002aa75 	.word	0x0002aa75

00019b80 <bt_gatt_foreach_attr_type>:
{
   19b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b84:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   19b88:	9100      	str	r1, [sp, #0]
   19b8a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   19b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19b90:	2d00      	cmp	r5, #0
   19b92:	bf08      	it	eq
   19b94:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   19b96:	4b2b      	ldr	r3, [pc, #172]	; (19c44 <bt_gatt_foreach_attr_type+0xc4>)
   19b98:	881b      	ldrh	r3, [r3, #0]
   19b9a:	4283      	cmp	r3, r0
{
   19b9c:	4607      	mov	r7, r0
   19b9e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   19ba0:	d24b      	bcs.n	19c3a <bt_gatt_foreach_attr_type+0xba>
}
   19ba2:	b003      	add	sp, #12
   19ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   19ba8:	6873      	ldr	r3, [r6, #4]
   19baa:	4423      	add	r3, r4
   19bac:	42bb      	cmp	r3, r7
   19bae:	d241      	bcs.n	19c34 <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   19bb0:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19bb2:	3608      	adds	r6, #8
   19bb4:	4b24      	ldr	r3, [pc, #144]	; (19c48 <bt_gatt_foreach_attr_type+0xc8>)
   19bb6:	429e      	cmp	r6, r3
   19bb8:	d90a      	bls.n	19bd0 <bt_gatt_foreach_attr_type+0x50>
   19bba:	4824      	ldr	r0, [pc, #144]	; (19c4c <bt_gatt_foreach_attr_type+0xcc>)
   19bbc:	4659      	mov	r1, fp
   19bbe:	f240 7229 	movw	r2, #1833	; 0x729
   19bc2:	f00c fc9c 	bl	264fe <assert_print>
   19bc6:	f240 7129 	movw	r1, #1833	; 0x729
   19bca:	4658      	mov	r0, fp
   19bcc:	f00c fc90 	bl	264f0 <assert_post_action>
   19bd0:	4b1d      	ldr	r3, [pc, #116]	; (19c48 <bt_gatt_foreach_attr_type+0xc8>)
   19bd2:	429e      	cmp	r6, r3
   19bd4:	d3e8      	bcc.n	19ba8 <bt_gatt_foreach_attr_type+0x28>
   19bd6:	e7e4      	b.n	19ba2 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   19bd8:	5889      	ldr	r1, [r1, r2]
   19bda:	9301      	str	r3, [sp, #4]
   19bdc:	4640      	mov	r0, r8
   19bde:	f00d fb92 	bl	27306 <bt_uuid_cmp>
   19be2:	9b01      	ldr	r3, [sp, #4]
   19be4:	b198      	cbz	r0, 19c0e <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   19be6:	3401      	adds	r4, #1
   19be8:	f10a 0a01 	add.w	sl, sl, #1
   19bec:	b2a4      	uxth	r4, r4
   19bee:	6873      	ldr	r3, [r6, #4]
   19bf0:	4553      	cmp	r3, sl
   19bf2:	d9de      	bls.n	19bb2 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   19bf4:	9b00      	ldr	r3, [sp, #0]
   19bf6:	429c      	cmp	r4, r3
   19bf8:	d8d3      	bhi.n	19ba2 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   19bfa:	42bc      	cmp	r4, r7
   19bfc:	d3f3      	bcc.n	19be6 <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19bfe:	2314      	movs	r3, #20
   19c00:	6831      	ldr	r1, [r6, #0]
   19c02:	fb03 f20a 	mul.w	r2, r3, sl
   19c06:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   19c08:	f1b8 0f00 	cmp.w	r8, #0
   19c0c:	d1e4      	bne.n	19bd8 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   19c0e:	f1b9 0f00 	cmp.w	r9, #0
   19c12:	d10b      	bne.n	19c2c <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   19c14:	3d01      	subs	r5, #1
   19c16:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   19c18:	4618      	mov	r0, r3
   19c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19c1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19c1e:	4621      	mov	r1, r4
   19c20:	4798      	blx	r3
	if (!*num_matches) {
   19c22:	2d00      	cmp	r5, #0
   19c24:	d0bd      	beq.n	19ba2 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19c26:	2800      	cmp	r0, #0
   19c28:	d1dd      	bne.n	19be6 <bt_gatt_foreach_attr_type+0x66>
   19c2a:	e7ba      	b.n	19ba2 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   19c2c:	68da      	ldr	r2, [r3, #12]
   19c2e:	4591      	cmp	r9, r2
   19c30:	d1d9      	bne.n	19be6 <bt_gatt_foreach_attr_type+0x66>
   19c32:	e7ef      	b.n	19c14 <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   19c34:	f04f 0a00 	mov.w	sl, #0
   19c38:	e7d9      	b.n	19bee <bt_gatt_foreach_attr_type+0x6e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19c3a:	4e05      	ldr	r6, [pc, #20]	; (19c50 <bt_gatt_foreach_attr_type+0xd0>)
   19c3c:	f8df b014 	ldr.w	fp, [pc, #20]	; 19c54 <bt_gatt_foreach_attr_type+0xd4>
		uint16_t handle = 1;
   19c40:	2401      	movs	r4, #1
   19c42:	e7b7      	b.n	19bb4 <bt_gatt_foreach_attr_type+0x34>
   19c44:	200033b6 	.word	0x200033b6
   19c48:	00029f78 	.word	0x00029f78
   19c4c:	0002aa75 	.word	0x0002aa75
   19c50:	00029f60 	.word	0x00029f60
   19c54:	0002c936 	.word	0x0002c936

00019c58 <db_hash_gen>:
{
   19c58:	b530      	push	{r4, r5, lr}
   19c5a:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   19c5c:	2300      	movs	r3, #0
{
   19c5e:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   19c60:	aa1c      	add	r2, sp, #112	; 0x70
   19c62:	4669      	mov	r1, sp
   19c64:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   19c66:	e9cd 3300 	strd	r3, r3, [sp]
   19c6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   19c6e:	f00d f923 	bl	26eb8 <tc_cmac_setup>
   19c72:	b928      	cbnz	r0, 19c80 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   19c74:	4814      	ldr	r0, [pc, #80]	; (19cc8 <db_hash_gen+0x70>)
   19c76:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
   19c78:	f00c fc4f 	bl	2651a <z_log_minimal_printk>
}
   19c7c:	b049      	add	sp, #292	; 0x124
   19c7e:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   19c80:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19c84:	2001      	movs	r0, #1
   19c86:	4a11      	ldr	r2, [pc, #68]	; (19ccc <db_hash_gen+0x74>)
   19c88:	ab04      	add	r3, sp, #16
   19c8a:	f00e fed7 	bl	28a3c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   19c8e:	4810      	ldr	r0, [pc, #64]	; (19cd0 <db_hash_gen+0x78>)
   19c90:	a904      	add	r1, sp, #16
   19c92:	f00d f9a7 	bl	26fe4 <tc_cmac_final>
   19c96:	b910      	cbnz	r0, 19c9e <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   19c98:	480e      	ldr	r0, [pc, #56]	; (19cd4 <db_hash_gen+0x7c>)
   19c9a:	2145      	movs	r1, #69	; 0x45
   19c9c:	e7ec      	b.n	19c78 <db_hash_gen+0x20>
   19c9e:	4b0c      	ldr	r3, [pc, #48]	; (19cd0 <db_hash_gen+0x78>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   19ca0:	2208      	movs	r2, #8
   19ca2:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   19ca6:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   19ca8:	780d      	ldrb	r5, [r1, #0]
   19caa:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   19cae:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   19cb0:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   19cb4:	d1f7      	bne.n	19ca6 <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   19cb6:	b10c      	cbz	r4, 19cbc <db_hash_gen+0x64>
		db_hash_store();
   19cb8:	f7ff fad2 	bl	19260 <db_hash_store>
   19cbc:	2104      	movs	r1, #4
   19cbe:	4806      	ldr	r0, [pc, #24]	; (19cd8 <db_hash_gen+0x80>)
   19cc0:	f00e fce4 	bl	2868c <atomic_or>
   19cc4:	e7da      	b.n	19c7c <db_hash_gen+0x24>
   19cc6:	bf00      	nop
   19cc8:	0002c966 	.word	0x0002c966
   19ccc:	000285d7 	.word	0x000285d7
   19cd0:	20001970 	.word	0x20001970
   19cd4:	0002c984 	.word	0x0002c984
   19cd8:	20001a70 	.word	0x20001a70

00019cdc <db_hash_read>:
{
   19cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19ce0:	491b      	ldr	r1, [pc, #108]	; (19d50 <db_hash_read+0x74>)
{
   19ce2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   19ce6:	4680      	mov	r8, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19ce8:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   19cec:	4615      	mov	r5, r2
   19cee:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19cf0:	f007 fb2e 	bl	21350 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19cf4:	4817      	ldr	r0, [pc, #92]	; (19d54 <db_hash_read+0x78>)
   19cf6:	f00e fcc3 	bl	28680 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   19cfa:	0741      	lsls	r1, r0, #29
   19cfc:	d402      	bmi.n	19d04 <db_hash_read+0x28>
		db_hash_gen(true);
   19cfe:	2001      	movs	r0, #1
   19d00:	f7ff ffaa 	bl	19c58 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   19d04:	4640      	mov	r0, r8
   19d06:	f7ff fac1 	bl	1928c <find_cf_cfg>
	if (cfg &&
   19d0a:	b168      	cbz	r0, 19d28 <db_hash_read+0x4c>
   19d0c:	7a03      	ldrb	r3, [r0, #8]
   19d0e:	07da      	lsls	r2, r3, #31
   19d10:	d50a      	bpl.n	19d28 <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   19d12:	f100 040c 	add.w	r4, r0, #12
   19d16:	4620      	mov	r0, r4
   19d18:	f00e fcb2 	bl	28680 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   19d1c:	07c3      	lsls	r3, r0, #31
   19d1e:	d403      	bmi.n	19d28 <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19d20:	2102      	movs	r1, #2
   19d22:	4620      	mov	r0, r4
   19d24:	f00e fcb2 	bl	2868c <atomic_or>
	if (offset > value_len) {
   19d28:	2e10      	cmp	r6, #16
   19d2a:	d80d      	bhi.n	19d48 <db_hash_read+0x6c>
	len = MIN(buf_len, value_len - offset);
   19d2c:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   19d30:	4909      	ldr	r1, [pc, #36]	; (19d58 <db_hash_read+0x7c>)
	len = MIN(buf_len, value_len - offset);
   19d32:	42bc      	cmp	r4, r7
   19d34:	bfa8      	it	ge
   19d36:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   19d38:	4622      	mov	r2, r4
   19d3a:	4431      	add	r1, r6
   19d3c:	4628      	mov	r0, r5
   19d3e:	f00d fa72 	bl	27226 <memcpy>
}
   19d42:	4620      	mov	r0, r4
   19d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19d48:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   19d4c:	e7f9      	b.n	19d42 <db_hash_read+0x66>
   19d4e:	bf00      	nop
   19d50:	200019c0 	.word	0x200019c0
   19d54:	20001a70 	.word	0x20001a70
   19d58:	20001970 	.word	0x20001970

00019d5c <db_hash_process>:
{
   19d5c:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19d5e:	4827      	ldr	r0, [pc, #156]	; (19dfc <db_hash_process+0xa0>)
   19d60:	f06f 0108 	mvn.w	r1, #8
   19d64:	f00e fcb2 	bl	286cc <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   19d68:	0700      	lsls	r0, r0, #28
   19d6a:	d542      	bpl.n	19df2 <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19d6c:	4823      	ldr	r0, [pc, #140]	; (19dfc <db_hash_process+0xa0>)
   19d6e:	f00e fc87 	bl	28680 <atomic_get>
   19d72:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   19d74:	0759      	lsls	r1, r3, #29
   19d76:	f3c0 0080 	ubfx	r0, r0, #2, #1
   19d7a:	d401      	bmi.n	19d80 <db_hash_process+0x24>
			db_hash_gen(false);
   19d7c:	f7ff ff6c 	bl	19c58 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   19d80:	491f      	ldr	r1, [pc, #124]	; (19e00 <db_hash_process+0xa4>)
   19d82:	2210      	movs	r2, #16
   19d84:	1888      	adds	r0, r1, r2
   19d86:	f00d fa25 	bl	271d4 <memcmp>
   19d8a:	b948      	cbnz	r0, 19da0 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   19d8c:	481d      	ldr	r0, [pc, #116]	; (19e04 <db_hash_process+0xa8>)
   19d8e:	f007 fa97 	bl	212c0 <k_work_cancel_delayable>
}
   19d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19d96:	4819      	ldr	r0, [pc, #100]	; (19dfc <db_hash_process+0xa0>)
   19d98:	f06f 0101 	mvn.w	r1, #1
   19d9c:	f00e bc96 	b.w	286cc <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19da0:	4c19      	ldr	r4, [pc, #100]	; (19e08 <db_hash_process+0xac>)
   19da2:	2101      	movs	r1, #1
   19da4:	f104 0050 	add.w	r0, r4, #80	; 0x50
   19da8:	f00e fc70 	bl	2868c <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19dac:	07c2      	lsls	r2, r0, #31
   19dae:	d410      	bmi.n	19dd2 <db_hash_process+0x76>
		gatt_sc.start = start;
   19db0:	4b16      	ldr	r3, [pc, #88]	; (19e0c <db_hash_process+0xb0>)
   19db2:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19db4:	4811      	ldr	r0, [pc, #68]	; (19dfc <db_hash_process+0xa0>)
   19db6:	f00e fc63 	bl	28680 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   19dba:	0783      	lsls	r3, r0, #30
   19dbc:	d405      	bmi.n	19dca <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   19dbe:	4811      	ldr	r0, [pc, #68]	; (19e04 <db_hash_process+0xa8>)
   19dc0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19dc4:	2300      	movs	r3, #0
   19dc6:	f007 fa75 	bl	212b4 <k_work_reschedule>
}
   19dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   19dce:	f7ff ba47 	b.w	19260 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   19dd2:	8b23      	ldrh	r3, [r4, #24]
   19dd4:	8b62      	ldrh	r2, [r4, #26]
   19dd6:	2b01      	cmp	r3, #1
   19dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19ddc:	d805      	bhi.n	19dea <db_hash_process+0x8e>
   19dde:	429a      	cmp	r2, r3
   19de0:	d0f3      	beq.n	19dca <db_hash_process+0x6e>
		*end = new_end;
   19de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19de6:	8363      	strh	r3, [r4, #26]
   19de8:	e7e4      	b.n	19db4 <db_hash_process+0x58>
	if (*end < new_end) {
   19dea:	429a      	cmp	r2, r3
		*start = new_start;
   19dec:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   19dee:	d0e1      	beq.n	19db4 <db_hash_process+0x58>
   19df0:	e7f7      	b.n	19de2 <db_hash_process+0x86>
}
   19df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   19df6:	2001      	movs	r0, #1
   19df8:	f7ff bf2e 	b.w	19c58 <db_hash_gen>
   19dfc:	20001a70 	.word	0x20001a70
   19e00:	20001970 	.word	0x20001970
   19e04:	20001a40 	.word	0x20001a40
   19e08:	20001a20 	.word	0x20001a20
   19e0c:	ffff0001 	.word	0xffff0001

00019e10 <ccc_set_direct>:
{
   19e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19e14:	b0b9      	sub	sp, #228	; 0xe4
   19e16:	4688      	mov	r8, r1
   19e18:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   19e1a:	492f      	ldr	r1, [pc, #188]	; (19ed8 <ccc_set_direct+0xc8>)
   19e1c:	9840      	ldr	r0, [sp, #256]	; 0x100
   19e1e:	466a      	mov	r2, sp
{
   19e20:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   19e22:	f00c fdf7 	bl	26a14 <settings_name_steq>
   19e26:	b948      	cbnz	r0, 19e3c <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   19e28:	482c      	ldr	r0, [pc, #176]	; (19edc <ccc_set_direct+0xcc>)
   19e2a:	2145      	movs	r1, #69	; 0x45
   19e2c:	f00c fb75 	bl	2651a <z_log_minimal_printk>
   19e30:	f06f 0515 	mvn.w	r5, #21
}
   19e34:	4628      	mov	r0, r5
   19e36:	b039      	add	sp, #228	; 0xe4
   19e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   19e3c:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   19e3e:	a901      	add	r1, sp, #4
   19e40:	4620      	mov	r0, r4
   19e42:	f00c fe0a 	bl	26a5a <settings_name_next>
		if (!name) {
   19e46:	b93c      	cbnz	r4, 19e58 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   19e48:	4825      	ldr	r0, [pc, #148]	; (19ee0 <ccc_set_direct+0xd0>)
   19e4a:	2145      	movs	r1, #69	; 0x45
   19e4c:	f00c fb65 	bl	2651a <z_log_minimal_printk>
			return -EINVAL;
   19e50:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   19e54:	4625      	mov	r5, r4
   19e56:	e7ed      	b.n	19e34 <ccc_set_direct+0x24>
		} else if (!next) {
   19e58:	9801      	ldr	r0, [sp, #4]
   19e5a:	b970      	cbnz	r0, 19e7a <ccc_set_direct+0x6a>
		err = bt_settings_decode_key(name, &addr);
   19e5c:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   19e60:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   19e62:	4649      	mov	r1, r9
   19e64:	4620      	mov	r0, r4
			load.addr_with_id.id = BT_ID_DEFAULT;
   19e66:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   19e6a:	f00d fa28 	bl	272be <bt_settings_decode_key>
		if (err) {
   19e6e:	4605      	mov	r5, r0
   19e70:	b178      	cbz	r0, 19e92 <ccc_set_direct+0x82>
			BT_ERR("Unable to decode address %s", name);
   19e72:	481c      	ldr	r0, [pc, #112]	; (19ee4 <ccc_set_direct+0xd4>)
   19e74:	4622      	mov	r2, r4
   19e76:	2145      	movs	r1, #69	; 0x45
   19e78:	e008      	b.n	19e8c <ccc_set_direct+0x7c>
			unsigned long next_id = strtoul(next, NULL, 10);
   19e7a:	220a      	movs	r2, #10
   19e7c:	2100      	movs	r1, #0
   19e7e:	f00d f8f9 	bl	27074 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   19e82:	4602      	mov	r2, r0
   19e84:	2800      	cmp	r0, #0
   19e86:	d0e9      	beq.n	19e5c <ccc_set_direct+0x4c>
				BT_ERR("Invalid local identity %lu", next_id);
   19e88:	4817      	ldr	r0, [pc, #92]	; (19ee8 <ccc_set_direct+0xd8>)
   19e8a:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to decode address %s", name);
   19e8c:	f00c fb45 	bl	2651a <z_log_minimal_printk>
   19e90:	e7de      	b.n	19e50 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   19e92:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   19e96:	f1b8 0f00 	cmp.w	r8, #0
   19e9a:	d019      	beq.n	19ed0 <ccc_set_direct+0xc0>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   19e9c:	f10d 0820 	add.w	r8, sp, #32
   19ea0:	22c0      	movs	r2, #192	; 0xc0
   19ea2:	4641      	mov	r1, r8
   19ea4:	4638      	mov	r0, r7
   19ea6:	47b0      	blx	r6
			if (len < 0) {
   19ea8:	1e04      	subs	r4, r0, #0
   19eaa:	da05      	bge.n	19eb8 <ccc_set_direct+0xa8>
				BT_ERR("Failed to decode value (err %zd)", len);
   19eac:	480f      	ldr	r0, [pc, #60]	; (19eec <ccc_set_direct+0xdc>)
   19eae:	4622      	mov	r2, r4
   19eb0:	2145      	movs	r1, #69	; 0x45
   19eb2:	f00c fb32 	bl	2651a <z_log_minimal_printk>
				return len;
   19eb6:	e7cd      	b.n	19e54 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   19eb8:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   19eba:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   19ebe:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   19ec0:	4a0b      	ldr	r2, [pc, #44]	; (19ef0 <ccc_set_direct+0xe0>)
   19ec2:	ab04      	add	r3, sp, #16
   19ec4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19ec8:	2001      	movs	r0, #1
   19eca:	f00e fdb7 	bl	28a3c <bt_gatt_foreach_attr>
	return 0;
   19ece:	e7b1      	b.n	19e34 <ccc_set_direct+0x24>
			load.count = 0;
   19ed0:	e9cd 0006 	strd	r0, r0, [sp, #24]
   19ed4:	e7f4      	b.n	19ec0 <ccc_set_direct+0xb0>
   19ed6:	bf00      	nop
   19ed8:	0002c9a2 	.word	0x0002c9a2
   19edc:	0002c9a9 	.word	0x0002c9a9
   19ee0:	0002b5fa 	.word	0x0002b5fa
   19ee4:	0002c827 	.word	0x0002c827
   19ee8:	0002c848 	.word	0x0002c848
   19eec:	0002c743 	.word	0x0002c743
   19ef0:	00019551 	.word	0x00019551

00019ef4 <bt_gatt_attr_next>:
{
   19ef4:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   19ef6:	2300      	movs	r3, #0
   19ef8:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   19efa:	f7ff fdfd 	bl	19af8 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   19efe:	1c41      	adds	r1, r0, #1
   19f00:	b289      	uxth	r1, r1
   19f02:	4608      	mov	r0, r1
   19f04:	4a03      	ldr	r2, [pc, #12]	; (19f14 <bt_gatt_attr_next+0x20>)
   19f06:	ab01      	add	r3, sp, #4
   19f08:	f00e fd98 	bl	28a3c <bt_gatt_foreach_attr>
}
   19f0c:	9801      	ldr	r0, [sp, #4]
   19f0e:	b003      	add	sp, #12
   19f10:	f85d fb04 	ldr.w	pc, [sp], #4
   19f14:	0002858b 	.word	0x0002858b

00019f18 <bt_gatt_is_subscribed>:
{
   19f18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19f1c:	460c      	mov	r4, r1
   19f1e:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   19f20:	4606      	mov	r6, r0
   19f22:	b950      	cbnz	r0, 19f3a <bt_gatt_is_subscribed+0x22>
   19f24:	4957      	ldr	r1, [pc, #348]	; (1a084 <bt_gatt_is_subscribed+0x16c>)
   19f26:	4858      	ldr	r0, [pc, #352]	; (1a088 <bt_gatt_is_subscribed+0x170>)
   19f28:	f640 424b 	movw	r2, #3147	; 0xc4b
   19f2c:	f00c fae7 	bl	264fe <assert_print>
   19f30:	4854      	ldr	r0, [pc, #336]	; (1a084 <bt_gatt_is_subscribed+0x16c>)
   19f32:	f640 414b 	movw	r1, #3147	; 0xc4b
   19f36:	f00c fadb 	bl	264f0 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   19f3a:	b954      	cbnz	r4, 19f52 <bt_gatt_is_subscribed+0x3a>
   19f3c:	4951      	ldr	r1, [pc, #324]	; (1a084 <bt_gatt_is_subscribed+0x16c>)
   19f3e:	4852      	ldr	r0, [pc, #328]	; (1a088 <bt_gatt_is_subscribed+0x170>)
   19f40:	f640 424c 	movw	r2, #3148	; 0xc4c
   19f44:	f00c fadb 	bl	264fe <assert_print>
   19f48:	484e      	ldr	r0, [pc, #312]	; (1a084 <bt_gatt_is_subscribed+0x16c>)
   19f4a:	f640 414c 	movw	r1, #3148	; 0xc4c
   19f4e:	f00c facf 	bl	264f0 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   19f52:	7b73      	ldrb	r3, [r6, #13]
   19f54:	2b07      	cmp	r3, #7
   19f56:	d003      	beq.n	19f60 <bt_gatt_is_subscribed+0x48>
		return false;
   19f58:	2000      	movs	r0, #0
}
   19f5a:	b004      	add	sp, #16
   19f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   19f60:	2300      	movs	r3, #0
   19f62:	f88d 300c 	strb.w	r3, [sp, #12]
   19f66:	6820      	ldr	r0, [r4, #0]
   19f68:	f642 0303 	movw	r3, #10243	; 0x2803
   19f6c:	a903      	add	r1, sp, #12
   19f6e:	f8ad 300e 	strh.w	r3, [sp, #14]
   19f72:	f00d f9c8 	bl	27306 <bt_uuid_cmp>
   19f76:	b9b0      	cbnz	r0, 19fa6 <bt_gatt_is_subscribed+0x8e>
		if (!(chrc->properties &
   19f78:	68e3      	ldr	r3, [r4, #12]
   19f7a:	7999      	ldrb	r1, [r3, #6]
   19f7c:	f011 0030 	ands.w	r0, r1, #48	; 0x30
   19f80:	d0eb      	beq.n	19f5a <bt_gatt_is_subscribed+0x42>
		attr = bt_gatt_attr_next(attr);
   19f82:	4620      	mov	r0, r4
   19f84:	f7ff ffb6 	bl	19ef4 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   19f88:	4604      	mov	r4, r0
   19f8a:	b960      	cbnz	r0, 19fa6 <bt_gatt_is_subscribed+0x8e>
   19f8c:	f640 425d 	movw	r2, #3165	; 0xc5d
   19f90:	493c      	ldr	r1, [pc, #240]	; (1a084 <bt_gatt_is_subscribed+0x16c>)
   19f92:	483d      	ldr	r0, [pc, #244]	; (1a088 <bt_gatt_is_subscribed+0x170>)
   19f94:	f00c fab3 	bl	264fe <assert_print>
   19f98:	483a      	ldr	r0, [pc, #232]	; (1a084 <bt_gatt_is_subscribed+0x16c>)
   19f9a:	f640 415d 	movw	r1, #3165	; 0xc5d
   19f9e:	f00c faa7 	bl	264f0 <assert_post_action>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   19fa2:	6823      	ldr	r3, [r4, #0]
   19fa4:	deff      	udf	#255	; 0xff
   19fa6:	2300      	movs	r3, #0
   19fa8:	6820      	ldr	r0, [r4, #0]
   19faa:	f88d 300c 	strb.w	r3, [sp, #12]
   19fae:	a903      	add	r1, sp, #12
   19fb0:	f642 1302 	movw	r3, #10498	; 0x2902
   19fb4:	f8ad 300e 	strh.w	r3, [sp, #14]
   19fb8:	f00d f9a5 	bl	27306 <bt_uuid_cmp>
   19fbc:	b178      	cbz	r0, 19fde <bt_gatt_is_subscribed+0xc6>
		attr = bt_gatt_attr_next(attr);
   19fbe:	4620      	mov	r0, r4
   19fc0:	f7ff ff98 	bl	19ef4 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   19fc4:	4604      	mov	r4, r0
   19fc6:	b950      	cbnz	r0, 19fde <bt_gatt_is_subscribed+0xc6>
   19fc8:	492e      	ldr	r1, [pc, #184]	; (1a084 <bt_gatt_is_subscribed+0x16c>)
   19fca:	482f      	ldr	r0, [pc, #188]	; (1a088 <bt_gatt_is_subscribed+0x170>)
   19fcc:	f640 4263 	movw	r2, #3171	; 0xc63
   19fd0:	f00c fa95 	bl	264fe <assert_print>
   19fd4:	482b      	ldr	r0, [pc, #172]	; (1a084 <bt_gatt_is_subscribed+0x16c>)
   19fd6:	f640 4163 	movw	r1, #3171	; 0xc63
   19fda:	f00c fa89 	bl	264f0 <assert_post_action>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   19fde:	2500      	movs	r5, #0
   19fe0:	f642 1802 	movw	r8, #10498	; 0x2902
   19fe4:	6820      	ldr	r0, [r4, #0]
   19fe6:	f88d 5000 	strb.w	r5, [sp]
   19fea:	4669      	mov	r1, sp
   19fec:	f8ad 8002 	strh.w	r8, [sp, #2]
   19ff0:	f00d f989 	bl	27306 <bt_uuid_cmp>
   19ff4:	b9d8      	cbnz	r0, 1a02e <bt_gatt_is_subscribed+0x116>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   19ff6:	6820      	ldr	r0, [r4, #0]
   19ff8:	2500      	movs	r5, #0
   19ffa:	f642 1302 	movw	r3, #10498	; 0x2902
   19ffe:	a903      	add	r1, sp, #12
   1a000:	f88d 500c 	strb.w	r5, [sp, #12]
   1a004:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a008:	f00d f97d 	bl	27306 <bt_uuid_cmp>
   1a00c:	2800      	cmp	r0, #0
   1a00e:	d1a3      	bne.n	19f58 <bt_gatt_is_subscribed+0x40>
	ccc = attr->user_data;
   1a010:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1a012:	4622      	mov	r2, r4
   1a014:	4630      	mov	r0, r6
   1a016:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a01a:	f00d fd62 	bl	27ae2 <bt_conn_is_peer_addr_le>
   1a01e:	2800      	cmp	r0, #0
   1a020:	d09a      	beq.n	19f58 <bt_gatt_is_subscribed+0x40>
   1a022:	8923      	ldrh	r3, [r4, #8]
   1a024:	421f      	tst	r7, r3
   1a026:	bf14      	ite	ne
   1a028:	2001      	movne	r0, #1
   1a02a:	2000      	moveq	r0, #0
   1a02c:	e795      	b.n	19f5a <bt_gatt_is_subscribed+0x42>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1a02e:	6820      	ldr	r0, [r4, #0]
   1a030:	f88d 5004 	strb.w	r5, [sp, #4]
   1a034:	f642 0303 	movw	r3, #10243	; 0x2803
   1a038:	a901      	add	r1, sp, #4
   1a03a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a03e:	f00d f962 	bl	27306 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1a042:	2800      	cmp	r0, #0
   1a044:	d0d7      	beq.n	19ff6 <bt_gatt_is_subscribed+0xde>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a046:	6820      	ldr	r0, [r4, #0]
   1a048:	f88d 5008 	strb.w	r5, [sp, #8]
   1a04c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a050:	a902      	add	r1, sp, #8
   1a052:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a056:	f00d f956 	bl	27306 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1a05a:	2800      	cmp	r0, #0
   1a05c:	d0cb      	beq.n	19ff6 <bt_gatt_is_subscribed+0xde>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a05e:	6820      	ldr	r0, [r4, #0]
   1a060:	f88d 500c 	strb.w	r5, [sp, #12]
   1a064:	f642 0301 	movw	r3, #10241	; 0x2801
   1a068:	a903      	add	r1, sp, #12
   1a06a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a06e:	f00d f94a 	bl	27306 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a072:	2800      	cmp	r0, #0
   1a074:	d0bf      	beq.n	19ff6 <bt_gatt_is_subscribed+0xde>
		attr = bt_gatt_attr_next(attr);
   1a076:	4620      	mov	r0, r4
   1a078:	f7ff ff3c 	bl	19ef4 <bt_gatt_attr_next>
		if (!attr) {
   1a07c:	4604      	mov	r4, r0
   1a07e:	2800      	cmp	r0, #0
   1a080:	d1b0      	bne.n	19fe4 <bt_gatt_is_subscribed+0xcc>
   1a082:	e769      	b.n	19f58 <bt_gatt_is_subscribed+0x40>
   1a084:	0002c936 	.word	0x0002c936
   1a088:	0002aa75 	.word	0x0002aa75

0001a08c <gatt_indicate>:
{
   1a08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a090:	4615      	mov	r5, r2
   1a092:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a094:	2294      	movs	r2, #148	; 0x94
   1a096:	6869      	ldr	r1, [r5, #4]
{
   1a098:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a09a:	f00e fcda 	bl	28a52 <bt_gatt_check_perm>
   1a09e:	4680      	mov	r8, r0
   1a0a0:	b140      	cbz	r0, 1a0b4 <gatt_indicate+0x28>
		BT_WARN("Link is not encrypted");
   1a0a2:	482d      	ldr	r0, [pc, #180]	; (1a158 <gatt_indicate+0xcc>)
   1a0a4:	2157      	movs	r1, #87	; 0x57
   1a0a6:	f00c fa38 	bl	2651a <z_log_minimal_printk>
		return -EPERM;
   1a0aa:	f04f 35ff 	mov.w	r5, #4294967295
}
   1a0ae:	4628      	mov	r0, r5
   1a0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1a0b4:	6869      	ldr	r1, [r5, #4]
   1a0b6:	2202      	movs	r2, #2
   1a0b8:	4630      	mov	r0, r6
   1a0ba:	f7ff ff2d 	bl	19f18 <bt_gatt_is_subscribed>
   1a0be:	b930      	cbnz	r0, 1a0ce <gatt_indicate+0x42>
			BT_WARN("Device is not subscribed to characteristic");
   1a0c0:	4826      	ldr	r0, [pc, #152]	; (1a15c <gatt_indicate+0xd0>)
   1a0c2:	2157      	movs	r1, #87	; 0x57
   1a0c4:	f00c fa29 	bl	2651a <z_log_minimal_printk>
			return -EINVAL;
   1a0c8:	f06f 0515 	mvn.w	r5, #21
   1a0cc:	e7ef      	b.n	1a0ae <gatt_indicate+0x22>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1a0ce:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1a0d2:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1a0d4:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1a0d6:	f7fe ff33 	bl	18f40 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1a0da:	3702      	adds	r7, #2
	if (!req) {
   1a0dc:	4604      	mov	r4, r0
   1a0de:	b910      	cbnz	r0, 1a0e6 <gatt_indicate+0x5a>
		return -ENOMEM;
   1a0e0:	f06f 050b 	mvn.w	r5, #11
   1a0e4:	e7e3      	b.n	1a0ae <gatt_indicate+0x22>
	req->func = func;
   1a0e6:	4b1e      	ldr	r3, [pc, #120]	; (1a160 <gatt_indicate+0xd4>)
	req->len = len;
   1a0e8:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   1a0ea:	211d      	movs	r1, #29
   1a0ec:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1a0ee:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1a0f2:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1a0f4:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1a0f6:	463a      	mov	r2, r7
   1a0f8:	4630      	mov	r0, r6
   1a0fa:	f7fe fc4d 	bl	18998 <bt_att_create_pdu>
	if (!buf) {
   1a0fe:	4607      	mov	r7, r0
   1a100:	b938      	cbnz	r0, 1a112 <gatt_indicate+0x86>
		BT_WARN("No buffer available to send indication");
   1a102:	4818      	ldr	r0, [pc, #96]	; (1a164 <gatt_indicate+0xd8>)
   1a104:	2157      	movs	r1, #87	; 0x57
   1a106:	f00c fa08 	bl	2651a <z_log_minimal_printk>
		bt_att_req_free(req);
   1a10a:	4620      	mov	r0, r4
   1a10c:	f7fe ff3a 	bl	18f84 <bt_att_req_free>
   1a110:	e7e6      	b.n	1a0e0 <gatt_indicate+0x54>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1a112:	2301      	movs	r3, #1
   1a114:	4642      	mov	r2, r8
   1a116:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1a118:	f107 0a08 	add.w	sl, r7, #8
   1a11c:	f00e fa2e 	bl	2857c <bt_att_set_tx_meta_data>
   1a120:	2102      	movs	r1, #2
   1a122:	4650      	mov	r0, sl
   1a124:	f002 fc80 	bl	1ca28 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1a128:	4680      	mov	r8, r0
   1a12a:	8aa9      	ldrh	r1, [r5, #20]
   1a12c:	f828 9b02 	strh.w	r9, [r8], #2
   1a130:	4650      	mov	r0, sl
   1a132:	f002 fc79 	bl	1ca28 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1a136:	8aaa      	ldrh	r2, [r5, #20]
   1a138:	6929      	ldr	r1, [r5, #16]
   1a13a:	4640      	mov	r0, r8
   1a13c:	f00d f873 	bl	27226 <memcpy>
	req->buf = buf;
   1a140:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1a142:	4621      	mov	r1, r4
   1a144:	4630      	mov	r0, r6
   1a146:	f7ff f841 	bl	191cc <bt_att_req_send>
	if (err) {
   1a14a:	4605      	mov	r5, r0
   1a14c:	2800      	cmp	r0, #0
   1a14e:	d0ae      	beq.n	1a0ae <gatt_indicate+0x22>
		bt_att_req_free(req);
   1a150:	4620      	mov	r0, r4
   1a152:	f7fe ff17 	bl	18f84 <bt_att_req_free>
   1a156:	e7aa      	b.n	1a0ae <gatt_indicate+0x22>
   1a158:	0002c9ba 	.word	0x0002c9ba
   1a15c:	0002c9d5 	.word	0x0002c9d5
   1a160:	000285a5 	.word	0x000285a5
   1a164:	0002ca05 	.word	0x0002ca05

0001a168 <bt_gatt_indicate>:
{
   1a168:	b530      	push	{r4, r5, lr}
   1a16a:	4605      	mov	r5, r0
   1a16c:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1a16e:	460c      	mov	r4, r1
   1a170:	b951      	cbnz	r1, 1a188 <bt_gatt_indicate+0x20>
   1a172:	4943      	ldr	r1, [pc, #268]	; (1a280 <bt_gatt_indicate+0x118>)
   1a174:	4843      	ldr	r0, [pc, #268]	; (1a284 <bt_gatt_indicate+0x11c>)
   1a176:	f640 320b 	movw	r2, #2827	; 0xb0b
   1a17a:	f00c f9c0 	bl	264fe <assert_print>
   1a17e:	4840      	ldr	r0, [pc, #256]	; (1a280 <bt_gatt_indicate+0x118>)
   1a180:	f640 310b 	movw	r1, #2827	; 0xb0b
   1a184:	f00c f9b4 	bl	264f0 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1a188:	6863      	ldr	r3, [r4, #4]
   1a18a:	b963      	cbnz	r3, 1a1a6 <bt_gatt_indicate+0x3e>
   1a18c:	6823      	ldr	r3, [r4, #0]
   1a18e:	b953      	cbnz	r3, 1a1a6 <bt_gatt_indicate+0x3e>
   1a190:	493b      	ldr	r1, [pc, #236]	; (1a280 <bt_gatt_indicate+0x118>)
   1a192:	483c      	ldr	r0, [pc, #240]	; (1a284 <bt_gatt_indicate+0x11c>)
   1a194:	f640 320c 	movw	r2, #2828	; 0xb0c
   1a198:	f00c f9b1 	bl	264fe <assert_print>
   1a19c:	4838      	ldr	r0, [pc, #224]	; (1a280 <bt_gatt_indicate+0x118>)
   1a19e:	f640 310c 	movw	r1, #2828	; 0xb0c
   1a1a2:	f00c f9a5 	bl	264f0 <assert_post_action>
   1a1a6:	4838      	ldr	r0, [pc, #224]	; (1a288 <bt_gatt_indicate+0x120>)
   1a1a8:	f00e fa6a 	bl	28680 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a1ac:	0742      	lsls	r2, r0, #29
   1a1ae:	d561      	bpl.n	1a274 <bt_gatt_indicate+0x10c>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a1b0:	b115      	cbz	r5, 1a1b8 <bt_gatt_indicate+0x50>
   1a1b2:	7b6b      	ldrb	r3, [r5, #13]
   1a1b4:	2b07      	cmp	r3, #7
   1a1b6:	d160      	bne.n	1a27a <bt_gatt_indicate+0x112>
	data.attr = params->attr;
   1a1b8:	6860      	ldr	r0, [r4, #4]
   1a1ba:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a1bc:	f7ff fc9c 	bl	19af8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1a1c0:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a1c2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1a1c6:	b33a      	cbz	r2, 1a218 <bt_gatt_indicate+0xb0>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a1c8:	a905      	add	r1, sp, #20
   1a1ca:	9102      	str	r1, [sp, #8]
   1a1cc:	492f      	ldr	r1, [pc, #188]	; (1a28c <bt_gatt_indicate+0x124>)
   1a1ce:	9101      	str	r1, [sp, #4]
   1a1d0:	2101      	movs	r1, #1
	found->attr = NULL;
   1a1d2:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a1d4:	9100      	str	r1, [sp, #0]
   1a1d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1a1da:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a1dc:	f7ff fcd0 	bl	19b80 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1a1e0:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a1e2:	b91b      	cbnz	r3, 1a1ec <bt_gatt_indicate+0x84>
			return -ENOENT;
   1a1e4:	f06f 0001 	mvn.w	r0, #1
}
   1a1e8:	b00b      	add	sp, #44	; 0x2c
   1a1ea:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1a1ec:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a1ee:	9b05      	ldr	r3, [sp, #20]
   1a1f0:	6818      	ldr	r0, [r3, #0]
   1a1f2:	2300      	movs	r3, #0
   1a1f4:	f88d 3010 	strb.w	r3, [sp, #16]
   1a1f8:	a904      	add	r1, sp, #16
   1a1fa:	f642 0303 	movw	r3, #10243	; 0x2803
   1a1fe:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a202:	f00d f880 	bl	27306 <bt_uuid_cmp>
   1a206:	b970      	cbnz	r0, 1a226 <bt_gatt_indicate+0xbe>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a208:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1a20a:	68c3      	ldr	r3, [r0, #12]
   1a20c:	799b      	ldrb	r3, [r3, #6]
   1a20e:	069b      	lsls	r3, r3, #26
   1a210:	d405      	bmi.n	1a21e <bt_gatt_indicate+0xb6>
			return -EINVAL;
   1a212:	f06f 0015 	mvn.w	r0, #21
   1a216:	e7e7      	b.n	1a1e8 <bt_gatt_indicate+0x80>
		if (!data.handle) {
   1a218:	2800      	cmp	r0, #0
   1a21a:	d1e8      	bne.n	1a1ee <bt_gatt_indicate+0x86>
   1a21c:	e7e2      	b.n	1a1e4 <bt_gatt_indicate+0x7c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a21e:	f00e fbbf 	bl	289a0 <bt_gatt_attr_value_handle>
   1a222:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1a226:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1a22a:	b13d      	cbz	r5, 1a23c <bt_gatt_indicate+0xd4>
		params->_ref = 1;
   1a22c:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1a22e:	4601      	mov	r1, r0
		params->_ref = 1;
   1a230:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1a232:	4622      	mov	r2, r4
   1a234:	4628      	mov	r0, r5
   1a236:	f7ff ff29 	bl	1a08c <gatt_indicate>
   1a23a:	e7d5      	b.n	1a1e8 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1a23c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1a240:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1a242:	2302      	movs	r3, #2
   1a244:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a248:	f642 1302 	movw	r3, #10498	; 0x2902
   1a24c:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a250:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1a252:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a254:	9302      	str	r3, [sp, #8]
   1a256:	4b0e      	ldr	r3, [pc, #56]	; (1a290 <bt_gatt_indicate+0x128>)
   1a258:	9301      	str	r3, [sp, #4]
   1a25a:	2301      	movs	r3, #1
   1a25c:	9300      	str	r3, [sp, #0]
   1a25e:	aa04      	add	r2, sp, #16
   1a260:	462b      	mov	r3, r5
   1a262:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1a266:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a268:	f88d 5010 	strb.w	r5, [sp, #16]
   1a26c:	f7ff fc88 	bl	19b80 <bt_gatt_foreach_attr_type>
	return data.err;
   1a270:	9807      	ldr	r0, [sp, #28]
   1a272:	e7b9      	b.n	1a1e8 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   1a274:	f06f 000a 	mvn.w	r0, #10
   1a278:	e7b6      	b.n	1a1e8 <bt_gatt_indicate+0x80>
		return -ENOTCONN;
   1a27a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a27e:	e7b3      	b.n	1a1e8 <bt_gatt_indicate+0x80>
   1a280:	0002c936 	.word	0x0002c936
   1a284:	0002aa75 	.word	0x0002aa75
   1a288:	2000041c 	.word	0x2000041c
   1a28c:	000285cb 	.word	0x000285cb
   1a290:	0001a5dd 	.word	0x0001a5dd

0001a294 <sc_process>:
{
   1a294:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1a296:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1a29a:	4604      	mov	r4, r0
   1a29c:	4628      	mov	r0, r5
   1a29e:	f00e f9ef 	bl	28680 <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1a2a2:	0783      	lsls	r3, r0, #30
   1a2a4:	d50a      	bpl.n	1a2bc <sc_process+0x28>
   1a2a6:	491a      	ldr	r1, [pc, #104]	; (1a310 <sc_process+0x7c>)
   1a2a8:	481a      	ldr	r0, [pc, #104]	; (1a314 <sc_process+0x80>)
   1a2aa:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
   1a2ae:	f00c f926 	bl	264fe <assert_print>
   1a2b2:	4817      	ldr	r0, [pc, #92]	; (1a310 <sc_process+0x7c>)
   1a2b4:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   1a2b8:	f00c f91a 	bl	264f0 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1a2bc:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   1a2c0:	f8ad 3004 	strh.w	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a2c4:	f06f 0101 	mvn.w	r1, #1
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1a2c8:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   1a2cc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a2d0:	4628      	mov	r0, r5
   1a2d2:	f00e f9fb 	bl	286cc <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1a2d6:	4b10      	ldr	r3, [pc, #64]	; (1a318 <sc_process+0x84>)
   1a2d8:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1a2dc:	4b0f      	ldr	r3, [pc, #60]	; (1a31c <sc_process+0x88>)
   1a2de:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1a2e2:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1a2e4:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1a2e6:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1a2ea:	2304      	movs	r3, #4
	sc->start = 0U;
   1a2ec:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1a2f0:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1a2f4:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1a2f8:	f1a4 0120 	sub.w	r1, r4, #32
   1a2fc:	f7ff ff34 	bl	1a168 <bt_gatt_indicate>
   1a300:	b918      	cbnz	r0, 1a30a <sc_process+0x76>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a302:	2102      	movs	r1, #2
   1a304:	4628      	mov	r0, r5
   1a306:	f00e f9c1 	bl	2868c <atomic_or>
}
   1a30a:	b003      	add	sp, #12
   1a30c:	bd30      	pop	{r4, r5, pc}
   1a30e:	bf00      	nop
   1a310:	0002c936 	.word	0x0002c936
   1a314:	0002aa75 	.word	0x0002aa75
   1a318:	0002a514 	.word	0x0002a514
   1a31c:	000199c1 	.word	0x000199c1

0001a320 <update_ccc>:
{
   1a320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a324:	4b34      	ldr	r3, [pc, #208]	; (1a3f8 <update_ccc+0xd8>)
	struct bt_conn *conn = data->conn;
   1a326:	6814      	ldr	r4, [r2, #0]
{
   1a328:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a32a:	6882      	ldr	r2, [r0, #8]
   1a32c:	429a      	cmp	r2, r3
{
   1a32e:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a330:	d117      	bne.n	1a362 <update_ccc+0x42>
	ccc = attr->user_data;
   1a332:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   1a334:	893b      	ldrh	r3, [r7, #8]
   1a336:	b1a3      	cbz	r3, 1a362 <update_ccc+0x42>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a338:	463a      	mov	r2, r7
   1a33a:	4620      	mov	r0, r4
   1a33c:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a340:	f00d fbcf 	bl	27ae2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1a344:	b168      	cbz	r0, 1a362 <update_ccc+0x42>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1a346:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1a34a:	4629      	mov	r1, r5
   1a34c:	4620      	mov	r0, r4
   1a34e:	f00e fb80 	bl	28a52 <bt_gatt_check_perm>
		if (err) {
   1a352:	b1d8      	cbz	r0, 1a38c <update_ccc+0x6c>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1a354:	2803      	cmp	r0, #3
   1a356:	d108      	bne.n	1a36a <update_ccc+0x4a>
				BT_WARN("CCC %p not writable", attr);
   1a358:	4828      	ldr	r0, [pc, #160]	; (1a3fc <update_ccc+0xdc>)
   1a35a:	462a      	mov	r2, r5
   1a35c:	2157      	movs	r1, #87	; 0x57
   1a35e:	f00c f8dc 	bl	2651a <z_log_minimal_printk>
}
   1a362:	2001      	movs	r0, #1
   1a364:	b002      	add	sp, #8
   1a366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
   1a36a:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1a36c:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   1a36e:	bf14      	ite	ne
   1a370:	f04f 0802 	movne.w	r8, #2
   1a374:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   1a378:	f00d fbb1 	bl	27ade <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a37c:	4580      	cmp	r8, r0
   1a37e:	d905      	bls.n	1a38c <update_ccc+0x6c>
				if (data->sec < sec) {
   1a380:	7933      	ldrb	r3, [r6, #4]
   1a382:	4543      	cmp	r3, r8
   1a384:	d2ed      	bcs.n	1a362 <update_ccc+0x42>
					data->sec = sec;
   1a386:	f886 8004 	strb.w	r8, [r6, #4]
   1a38a:	e7ea      	b.n	1a362 <update_ccc+0x42>
		gatt_ccc_changed(attr, ccc);
   1a38c:	4639      	mov	r1, r7
   1a38e:	4628      	mov	r0, r5
   1a390:	f00e f8fe 	bl	28590 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1a394:	4b1a      	ldr	r3, [pc, #104]	; (1a400 <update_ccc+0xe0>)
   1a396:	429f      	cmp	r7, r3
   1a398:	d1e3      	bne.n	1a362 <update_ccc+0x42>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a39a:	7a20      	ldrb	r0, [r4, #8]
   1a39c:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1a3a0:	f7ff f9b2 	bl	19708 <find_sc_cfg>
	if (!cfg) {
   1a3a4:	2800      	cmp	r0, #0
   1a3a6:	d0dc      	beq.n	1a362 <update_ccc+0x42>
	if (!(cfg->data.start || cfg->data.end)) {
   1a3a8:	8902      	ldrh	r2, [r0, #8]
   1a3aa:	8943      	ldrh	r3, [r0, #10]
   1a3ac:	ea52 0103 	orrs.w	r1, r2, r3
   1a3b0:	d0d7      	beq.n	1a362 <update_ccc+0x42>
	index = bt_conn_index(conn);
   1a3b2:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1a3b4:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1a3b8:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1a3bc:	f7fd fa32 	bl	17824 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a3c0:	4910      	ldr	r1, [pc, #64]	; (1a404 <update_ccc+0xe4>)
   1a3c2:	4a11      	ldr	r2, [pc, #68]	; (1a408 <update_ccc+0xe8>)
   1a3c4:	2318      	movs	r3, #24
   1a3c6:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a3ca:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a3cc:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1a3ce:	4a0f      	ldr	r2, [pc, #60]	; (1a40c <update_ccc+0xec>)
   1a3d0:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1a3d2:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a3d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1a3d8:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1a3da:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a3dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1a3e0:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a3e2:	4620      	mov	r0, r4
   1a3e4:	f7ff fec0 	bl	1a168 <bt_gatt_indicate>
   1a3e8:	2800      	cmp	r0, #0
   1a3ea:	d0ba      	beq.n	1a362 <update_ccc+0x42>
		BT_ERR("SC restore indication failed");
   1a3ec:	4808      	ldr	r0, [pc, #32]	; (1a410 <update_ccc+0xf0>)
   1a3ee:	2145      	movs	r1, #69	; 0x45
   1a3f0:	f00c f893 	bl	2651a <z_log_minimal_printk>
   1a3f4:	e7b5      	b.n	1a362 <update_ccc+0x42>
   1a3f6:	bf00      	nop
   1a3f8:	00019615 	.word	0x00019615
   1a3fc:	0002ca31 	.word	0x0002ca31
   1a400:	200005dc 	.word	0x200005dc
   1a404:	2000265c 	.word	0x2000265c
   1a408:	0002a514 	.word	0x0002a514
   1a40c:	0002892b 	.word	0x0002892b
   1a410:	0002ca4a 	.word	0x0002ca4a

0001a414 <gatt_notify>:
{
   1a414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a418:	4614      	mov	r4, r2
   1a41a:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a41c:	2294      	movs	r2, #148	; 0x94
   1a41e:	6861      	ldr	r1, [r4, #4]
{
   1a420:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a422:	f00e fb16 	bl	28a52 <bt_gatt_check_perm>
   1a426:	b138      	cbz	r0, 1a438 <gatt_notify+0x24>
		BT_WARN("Link is not encrypted");
   1a428:	4820      	ldr	r0, [pc, #128]	; (1a4ac <gatt_notify+0x98>)
   1a42a:	2157      	movs	r1, #87	; 0x57
   1a42c:	f00c f875 	bl	2651a <z_log_minimal_printk>
		return -EPERM;
   1a430:	f04f 30ff 	mov.w	r0, #4294967295
}
   1a434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1a438:	6861      	ldr	r1, [r4, #4]
   1a43a:	2201      	movs	r2, #1
   1a43c:	4630      	mov	r0, r6
   1a43e:	f7ff fd6b 	bl	19f18 <bt_gatt_is_subscribed>
   1a442:	b930      	cbnz	r0, 1a452 <gatt_notify+0x3e>
			BT_WARN("Device is not subscribed to characteristic");
   1a444:	481a      	ldr	r0, [pc, #104]	; (1a4b0 <gatt_notify+0x9c>)
   1a446:	2157      	movs	r1, #87	; 0x57
   1a448:	f00c f867 	bl	2651a <z_log_minimal_printk>
			return -EINVAL;
   1a44c:	f06f 0015 	mvn.w	r0, #21
   1a450:	e7f0      	b.n	1a434 <gatt_notify+0x20>
				sizeof(*nfy) + params->len);
   1a452:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1a454:	211b      	movs	r1, #27
   1a456:	3202      	adds	r2, #2
   1a458:	4630      	mov	r0, r6
   1a45a:	f7fe fa9d 	bl	18998 <bt_att_create_pdu>
	if (!buf) {
   1a45e:	4605      	mov	r5, r0
   1a460:	b930      	cbnz	r0, 1a470 <gatt_notify+0x5c>
		BT_WARN("No buffer available to send notification");
   1a462:	4814      	ldr	r0, [pc, #80]	; (1a4b4 <gatt_notify+0xa0>)
   1a464:	2157      	movs	r1, #87	; 0x57
   1a466:	f00c f858 	bl	2651a <z_log_minimal_printk>
		return -ENOMEM;
   1a46a:	f06f 000b 	mvn.w	r0, #11
   1a46e:	e7e1      	b.n	1a434 <gatt_notify+0x20>
   1a470:	f100 0908 	add.w	r9, r0, #8
   1a474:	2102      	movs	r1, #2
   1a476:	4648      	mov	r0, r9
   1a478:	f002 fad6 	bl	1ca28 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1a47c:	4607      	mov	r7, r0
   1a47e:	89a1      	ldrh	r1, [r4, #12]
   1a480:	f827 8b02 	strh.w	r8, [r7], #2
   1a484:	4648      	mov	r0, r9
   1a486:	f002 facf 	bl	1ca28 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1a48a:	89a2      	ldrh	r2, [r4, #12]
   1a48c:	68a1      	ldr	r1, [r4, #8]
   1a48e:	4638      	mov	r0, r7
   1a490:	f00c fec9 	bl	27226 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1a494:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1a498:	4628      	mov	r0, r5
   1a49a:	2301      	movs	r3, #1
   1a49c:	f00e f86e 	bl	2857c <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1a4a0:	4629      	mov	r1, r5
   1a4a2:	4630      	mov	r0, r6
}
   1a4a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1a4a8:	f7fe be2e 	b.w	19108 <bt_att_send>
   1a4ac:	0002c9ba 	.word	0x0002c9ba
   1a4b0:	0002c9d5 	.word	0x0002c9d5
   1a4b4:	0002ca6c 	.word	0x0002ca6c

0001a4b8 <bt_gatt_notify_cb>:
{
   1a4b8:	b530      	push	{r4, r5, lr}
   1a4ba:	4605      	mov	r5, r0
   1a4bc:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1a4be:	460c      	mov	r4, r1
   1a4c0:	b951      	cbnz	r1, 1a4d8 <bt_gatt_notify_cb+0x20>
   1a4c2:	4941      	ldr	r1, [pc, #260]	; (1a5c8 <bt_gatt_notify_cb+0x110>)
   1a4c4:	4841      	ldr	r0, [pc, #260]	; (1a5cc <bt_gatt_notify_cb+0x114>)
   1a4c6:	f640 222b 	movw	r2, #2603	; 0xa2b
   1a4ca:	f00c f818 	bl	264fe <assert_print>
   1a4ce:	483e      	ldr	r0, [pc, #248]	; (1a5c8 <bt_gatt_notify_cb+0x110>)
   1a4d0:	f640 212b 	movw	r1, #2603	; 0xa2b
   1a4d4:	f00c f80c 	bl	264f0 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1a4d8:	6863      	ldr	r3, [r4, #4]
   1a4da:	b963      	cbnz	r3, 1a4f6 <bt_gatt_notify_cb+0x3e>
   1a4dc:	6823      	ldr	r3, [r4, #0]
   1a4de:	b953      	cbnz	r3, 1a4f6 <bt_gatt_notify_cb+0x3e>
   1a4e0:	4939      	ldr	r1, [pc, #228]	; (1a5c8 <bt_gatt_notify_cb+0x110>)
   1a4e2:	483a      	ldr	r0, [pc, #232]	; (1a5cc <bt_gatt_notify_cb+0x114>)
   1a4e4:	f640 222c 	movw	r2, #2604	; 0xa2c
   1a4e8:	f00c f809 	bl	264fe <assert_print>
   1a4ec:	4836      	ldr	r0, [pc, #216]	; (1a5c8 <bt_gatt_notify_cb+0x110>)
   1a4ee:	f640 212c 	movw	r1, #2604	; 0xa2c
   1a4f2:	f00b fffd 	bl	264f0 <assert_post_action>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a4f6:	4836      	ldr	r0, [pc, #216]	; (1a5d0 <bt_gatt_notify_cb+0x118>)
   1a4f8:	f00e f8c2 	bl	28680 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a4fc:	0742      	lsls	r2, r0, #29
   1a4fe:	d55d      	bpl.n	1a5bc <bt_gatt_notify_cb+0x104>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a500:	b115      	cbz	r5, 1a508 <bt_gatt_notify_cb+0x50>
   1a502:	7b6b      	ldrb	r3, [r5, #13]
   1a504:	2b07      	cmp	r3, #7
   1a506:	d15c      	bne.n	1a5c2 <bt_gatt_notify_cb+0x10a>
	data.attr = params->attr;
   1a508:	6860      	ldr	r0, [r4, #4]
   1a50a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a50c:	f7ff faf4 	bl	19af8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1a510:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a512:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1a516:	b33a      	cbz	r2, 1a568 <bt_gatt_notify_cb+0xb0>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a518:	a905      	add	r1, sp, #20
   1a51a:	9102      	str	r1, [sp, #8]
   1a51c:	492d      	ldr	r1, [pc, #180]	; (1a5d4 <bt_gatt_notify_cb+0x11c>)
   1a51e:	9101      	str	r1, [sp, #4]
   1a520:	2101      	movs	r1, #1
	found->attr = NULL;
   1a522:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a524:	9100      	str	r1, [sp, #0]
   1a526:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1a52a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a52c:	f7ff fb28 	bl	19b80 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1a530:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a532:	b91b      	cbnz	r3, 1a53c <bt_gatt_notify_cb+0x84>
			return -ENOENT;
   1a534:	f06f 0001 	mvn.w	r0, #1
}
   1a538:	b00b      	add	sp, #44	; 0x2c
   1a53a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1a53c:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a53e:	9b05      	ldr	r3, [sp, #20]
   1a540:	6818      	ldr	r0, [r3, #0]
   1a542:	2300      	movs	r3, #0
   1a544:	f88d 3010 	strb.w	r3, [sp, #16]
   1a548:	a904      	add	r1, sp, #16
   1a54a:	f642 0303 	movw	r3, #10243	; 0x2803
   1a54e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a552:	f00c fed8 	bl	27306 <bt_uuid_cmp>
   1a556:	b970      	cbnz	r0, 1a576 <bt_gatt_notify_cb+0xbe>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a558:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1a55a:	68c3      	ldr	r3, [r0, #12]
   1a55c:	799b      	ldrb	r3, [r3, #6]
   1a55e:	06db      	lsls	r3, r3, #27
   1a560:	d405      	bmi.n	1a56e <bt_gatt_notify_cb+0xb6>
			return -EINVAL;
   1a562:	f06f 0015 	mvn.w	r0, #21
   1a566:	e7e7      	b.n	1a538 <bt_gatt_notify_cb+0x80>
		if (!data.handle) {
   1a568:	2800      	cmp	r0, #0
   1a56a:	d1e8      	bne.n	1a53e <bt_gatt_notify_cb+0x86>
   1a56c:	e7e2      	b.n	1a534 <bt_gatt_notify_cb+0x7c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a56e:	f00e fa17 	bl	289a0 <bt_gatt_attr_value_handle>
   1a572:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1a576:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1a57a:	b12d      	cbz	r5, 1a588 <bt_gatt_notify_cb+0xd0>
		return gatt_notify(conn, data.handle, params);
   1a57c:	4601      	mov	r1, r0
   1a57e:	4622      	mov	r2, r4
   1a580:	4628      	mov	r0, r5
   1a582:	f7ff ff47 	bl	1a414 <gatt_notify>
   1a586:	e7d7      	b.n	1a538 <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a588:	f642 1202 	movw	r2, #10498	; 0x2902
   1a58c:	f8ad 2012 	strh.w	r2, [sp, #18]
   1a590:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1a592:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a596:	9202      	str	r2, [sp, #8]
   1a598:	4a0f      	ldr	r2, [pc, #60]	; (1a5d8 <bt_gatt_notify_cb+0x120>)
	data.err = -ENOTCONN;
   1a59a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1a59c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a59e:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1a5a2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a5a6:	aa04      	add	r2, sp, #16
   1a5a8:	462b      	mov	r3, r5
   1a5aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1a5ae:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a5b0:	f88d 5010 	strb.w	r5, [sp, #16]
   1a5b4:	f7ff fae4 	bl	19b80 <bt_gatt_foreach_attr_type>
	return data.err;
   1a5b8:	9807      	ldr	r0, [sp, #28]
   1a5ba:	e7bd      	b.n	1a538 <bt_gatt_notify_cb+0x80>
		return -EAGAIN;
   1a5bc:	f06f 000a 	mvn.w	r0, #10
   1a5c0:	e7ba      	b.n	1a538 <bt_gatt_notify_cb+0x80>
		return -ENOTCONN;
   1a5c2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a5c6:	e7b7      	b.n	1a538 <bt_gatt_notify_cb+0x80>
   1a5c8:	0002c936 	.word	0x0002c936
   1a5cc:	0002aa75 	.word	0x0002aa75
   1a5d0:	2000041c 	.word	0x2000041c
   1a5d4:	000285cb 	.word	0x000285cb
   1a5d8:	0001a5dd 	.word	0x0001a5dd

0001a5dc <notify_cb>:
{
   1a5dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a5e0:	4b41      	ldr	r3, [pc, #260]	; (1a6e8 <notify_cb+0x10c>)
{
   1a5e2:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a5e4:	6882      	ldr	r2, [r0, #8]
   1a5e6:	429a      	cmp	r2, r3
{
   1a5e8:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a5ea:	d12f      	bne.n	1a64c <notify_cb+0x70>
	ccc = attr->user_data;
   1a5ec:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1a5f0:	4b3e      	ldr	r3, [pc, #248]	; (1a6ec <notify_cb+0x110>)
   1a5f2:	4598      	cmp	r8, r3
   1a5f4:	d11e      	bne.n	1a634 <notify_cb+0x58>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a5f6:	2600      	movs	r6, #0
   1a5f8:	4d3d      	ldr	r5, [pc, #244]	; (1a6f0 <notify_cb+0x114>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a5fa:	46b1      	mov	r9, r6
   1a5fc:	2207      	movs	r2, #7
   1a5fe:	4669      	mov	r1, sp
   1a600:	4628      	mov	r0, r5
   1a602:	f8cd 9000 	str.w	r9, [sp]
   1a606:	f8cd 9003 	str.w	r9, [sp, #3]
   1a60a:	f00c fde3 	bl	271d4 <memcmp>
   1a60e:	b178      	cbz	r0, 1a630 <notify_cb+0x54>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1a610:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1a614:	2207      	movs	r2, #7
   1a616:	4629      	mov	r1, r5
   1a618:	f7fd fac8 	bl	17bac <bt_conn_lookup_state_le>
			if (!conn) {
   1a61c:	b9e8      	cbnz	r0, 1a65a <notify_cb+0x7e>
				sc = (struct sc_data *)data->ind_params->data;
   1a61e:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1a620:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1a624:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1a626:	4629      	mov	r1, r5
   1a628:	8853      	ldrh	r3, [r2, #2]
   1a62a:	8812      	ldrh	r2, [r2, #0]
   1a62c:	f7ff f88e 	bl	1974c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a630:	350c      	adds	r5, #12
   1a632:	b186      	cbz	r6, 1a656 <notify_cb+0x7a>
		if (cfg->value != data->type) {
   1a634:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   1a638:	89a3      	ldrh	r3, [r4, #12]
   1a63a:	429a      	cmp	r2, r3
   1a63c:	d106      	bne.n	1a64c <notify_cb+0x70>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a63e:	4641      	mov	r1, r8
   1a640:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a644:	f7fd fa78 	bl	17b38 <bt_conn_lookup_addr_le>
		if (!conn) {
   1a648:	4606      	mov	r6, r0
   1a64a:	b948      	cbnz	r0, 1a660 <notify_cb+0x84>
	return BT_GATT_ITER_CONTINUE;
   1a64c:	2701      	movs	r7, #1
}
   1a64e:	4638      	mov	r0, r7
   1a650:	b003      	add	sp, #12
   1a652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a656:	2601      	movs	r6, #1
   1a658:	e7d0      	b.n	1a5fc <notify_cb+0x20>
			bt_conn_unref(conn);
   1a65a:	f7fc ffd3 	bl	17604 <bt_conn_unref>
   1a65e:	e7e7      	b.n	1a630 <notify_cb+0x54>
		if (conn->state != BT_CONN_CONNECTED) {
   1a660:	7b43      	ldrb	r3, [r0, #13]
   1a662:	2b07      	cmp	r3, #7
   1a664:	d002      	beq.n	1a66c <notify_cb+0x90>
			bt_conn_unref(conn);
   1a666:	f7fc ffcd 	bl	17604 <bt_conn_unref>
			continue;
   1a66a:	e7ef      	b.n	1a64c <notify_cb+0x70>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1a66c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1a670:	b123      	cbz	r3, 1a67c <notify_cb+0xa0>
   1a672:	4639      	mov	r1, r7
   1a674:	4798      	blx	r3
   1a676:	b908      	cbnz	r0, 1a67c <notify_cb+0xa0>
			bt_conn_unref(conn);
   1a678:	4630      	mov	r0, r6
   1a67a:	e7f4      	b.n	1a666 <notify_cb+0x8a>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a67c:	4639      	mov	r1, r7
   1a67e:	2294      	movs	r2, #148	; 0x94
   1a680:	4630      	mov	r0, r6
   1a682:	f00e f9e6 	bl	28a52 <bt_gatt_check_perm>
   1a686:	4607      	mov	r7, r0
   1a688:	b120      	cbz	r0, 1a694 <notify_cb+0xb8>
			BT_WARN("Link is not encrypted");
   1a68a:	481a      	ldr	r0, [pc, #104]	; (1a6f4 <notify_cb+0x118>)
   1a68c:	2157      	movs	r1, #87	; 0x57
   1a68e:	f00b ff44 	bl	2651a <z_log_minimal_printk>
   1a692:	e7f1      	b.n	1a678 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1a694:	89a3      	ldrh	r3, [r4, #12]
   1a696:	2b02      	cmp	r3, #2
   1a698:	d116      	bne.n	1a6c8 <notify_cb+0xec>
   1a69a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1a69e:	079a      	lsls	r2, r3, #30
   1a6a0:	d51f      	bpl.n	1a6e2 <notify_cb+0x106>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1a6a2:	6922      	ldr	r2, [r4, #16]
   1a6a4:	88a1      	ldrh	r1, [r4, #4]
   1a6a6:	4630      	mov	r0, r6
   1a6a8:	f7ff fcf0 	bl	1a08c <gatt_indicate>
			if (err == 0) {
   1a6ac:	4605      	mov	r5, r0
   1a6ae:	b918      	cbnz	r0, 1a6b8 <notify_cb+0xdc>
				data->ind_params->_ref++;
   1a6b0:	6922      	ldr	r2, [r4, #16]
   1a6b2:	7d93      	ldrb	r3, [r2, #22]
   1a6b4:	3301      	adds	r3, #1
   1a6b6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1a6b8:	4630      	mov	r0, r6
   1a6ba:	f7fc ffa3 	bl	17604 <bt_conn_unref>
		if (err < 0) {
   1a6be:	2d00      	cmp	r5, #0
   1a6c0:	dbc5      	blt.n	1a64e <notify_cb+0x72>
		data->err = 0;
   1a6c2:	2300      	movs	r3, #0
   1a6c4:	60a3      	str	r3, [r4, #8]
   1a6c6:	e7c1      	b.n	1a64c <notify_cb+0x70>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1a6c8:	2b01      	cmp	r3, #1
   1a6ca:	d10a      	bne.n	1a6e2 <notify_cb+0x106>
   1a6cc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1a6d0:	07db      	lsls	r3, r3, #31
   1a6d2:	d506      	bpl.n	1a6e2 <notify_cb+0x106>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1a6d4:	6922      	ldr	r2, [r4, #16]
   1a6d6:	88a1      	ldrh	r1, [r4, #4]
   1a6d8:	4630      	mov	r0, r6
   1a6da:	f7ff fe9b 	bl	1a414 <gatt_notify>
   1a6de:	4605      	mov	r5, r0
   1a6e0:	e7ea      	b.n	1a6b8 <notify_cb+0xdc>
			err = 0;
   1a6e2:	463d      	mov	r5, r7
   1a6e4:	e7e8      	b.n	1a6b8 <notify_cb+0xdc>
   1a6e6:	bf00      	nop
   1a6e8:	00019615 	.word	0x00019615
   1a6ec:	200005dc 	.word	0x200005dc
   1a6f0:	200033b9 	.word	0x200033b9
   1a6f4:	0002c9ba 	.word	0x0002c9ba

0001a6f8 <bt_gatt_connected>:
{
   1a6f8:	b570      	push	{r4, r5, r6, lr}
   1a6fa:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a6fc:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   1a700:	4604      	mov	r4, r0
	data.conn = conn;
   1a702:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   1a704:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a706:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1a708:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a70c:	4629      	mov	r1, r5
   1a70e:	f00c ff68 	bl	275e2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1a712:	b190      	cbz	r0, 1a73a <bt_gatt_connected+0x42>
		if (conn->id) {
   1a714:	7a22      	ldrb	r2, [r4, #8]
   1a716:	b34a      	cbz	r2, 1a76c <bt_gatt_connected+0x74>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1a718:	ae02      	add	r6, sp, #8
   1a71a:	2104      	movs	r1, #4
   1a71c:	4630      	mov	r0, r6
   1a71e:	f00b fc63 	bl	25fe8 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a722:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a724:	4a12      	ldr	r2, [pc, #72]	; (1a770 <bt_gatt_connected+0x78>)
   1a726:	2124      	movs	r1, #36	; 0x24
   1a728:	a805      	add	r0, sp, #20
   1a72a:	462b      	mov	r3, r5
   1a72c:	f7fa fb56 	bl	14ddc <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1a730:	aa05      	add	r2, sp, #20
   1a732:	4910      	ldr	r1, [pc, #64]	; (1a774 <bt_gatt_connected+0x7c>)
   1a734:	4610      	mov	r0, r2
   1a736:	f7f9 f80d 	bl	13754 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a73a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a73e:	4a0e      	ldr	r2, [pc, #56]	; (1a778 <bt_gatt_connected+0x80>)
   1a740:	ab03      	add	r3, sp, #12
   1a742:	2001      	movs	r0, #1
   1a744:	f00e f97a 	bl	28a3c <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1a748:	4620      	mov	r0, r4
   1a74a:	f00d f9c8 	bl	27ade <bt_conn_get_security>
   1a74e:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a752:	4288      	cmp	r0, r1
   1a754:	d208      	bcs.n	1a768 <bt_gatt_connected+0x70>
		int err = bt_conn_set_security(conn, data.sec);
   1a756:	4620      	mov	r0, r4
   1a758:	f00d f991 	bl	27a7e <bt_conn_set_security>
		if (err) {
   1a75c:	4602      	mov	r2, r0
   1a75e:	b118      	cbz	r0, 1a768 <bt_gatt_connected+0x70>
			BT_WARN("Failed to set security for bonded peer (%d)",
   1a760:	4806      	ldr	r0, [pc, #24]	; (1a77c <bt_gatt_connected+0x84>)
   1a762:	2157      	movs	r1, #87	; 0x57
   1a764:	f00b fed9 	bl	2651a <z_log_minimal_printk>
}
   1a768:	b00e      	add	sp, #56	; 0x38
   1a76a:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1a76c:	9200      	str	r2, [sp, #0]
   1a76e:	e7d9      	b.n	1a724 <bt_gatt_connected+0x2c>
   1a770:	0002c9a5 	.word	0x0002c9a5
   1a774:	00019e11 	.word	0x00019e11
   1a778:	0001a321 	.word	0x0001a321
   1a77c:	0002ca9a 	.word	0x0002ca9a

0001a780 <bt_gatt_att_max_mtu_changed>:
{
   1a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1a782:	4b08      	ldr	r3, [pc, #32]	; (1a7a4 <bt_gatt_att_max_mtu_changed+0x24>)
   1a784:	681c      	ldr	r4, [r3, #0]
   1a786:	4605      	mov	r5, r0
   1a788:	460e      	mov	r6, r1
   1a78a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1a78c:	b14c      	cbz	r4, 1a7a2 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1a78e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1a792:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1a794:	b11b      	cbz	r3, 1a79e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1a796:	463a      	mov	r2, r7
   1a798:	4631      	mov	r1, r6
   1a79a:	4628      	mov	r0, r5
   1a79c:	4798      	blx	r3
	return node->next;
   1a79e:	6864      	ldr	r4, [r4, #4]
   1a7a0:	e7f4      	b.n	1a78c <bt_gatt_att_max_mtu_changed+0xc>
}
   1a7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a7a4:	20002630 	.word	0x20002630

0001a7a8 <bt_gatt_encrypt_change>:
{
   1a7a8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a7aa:	4a06      	ldr	r2, [pc, #24]	; (1a7c4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1a7ac:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a7ae:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1a7b0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a7b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1a7b6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1a7ba:	f00e f93f 	bl	28a3c <bt_gatt_foreach_attr>
}
   1a7be:	b003      	add	sp, #12
   1a7c0:	f85d fb04 	ldr.w	pc, [sp], #4
   1a7c4:	0001a321 	.word	0x0001a321

0001a7c8 <bt_gatt_store_ccc>:
{
   1a7c8:	b570      	push	{r4, r5, r6, lr}
   1a7ca:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   1a7cc:	2300      	movs	r3, #0
{
   1a7ce:	4604      	mov	r4, r0
   1a7d0:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1a7d2:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   1a7d4:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1a7d8:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1a7da:	4a15      	ldr	r2, [pc, #84]	; (1a830 <bt_gatt_store_ccc+0x68>)
   1a7dc:	ab0d      	add	r3, sp, #52	; 0x34
   1a7de:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a7e2:	2001      	movs	r0, #1
   1a7e4:	f00e f92a 	bl	28a3c <bt_gatt_foreach_attr>
	if (id) {
   1a7e8:	b1ec      	cbz	r4, 1a826 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1a7ea:	ae03      	add	r6, sp, #12
   1a7ec:	4622      	mov	r2, r4
   1a7ee:	2104      	movs	r1, #4
   1a7f0:	4630      	mov	r0, r6
   1a7f2:	f00b fbf9 	bl	25fe8 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1a7f6:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1a7f8:	4a0e      	ldr	r2, [pc, #56]	; (1a834 <bt_gatt_store_ccc+0x6c>)
   1a7fa:	462b      	mov	r3, r5
   1a7fc:	2124      	movs	r1, #36	; 0x24
   1a7fe:	a804      	add	r0, sp, #16
   1a800:	f7fa faec 	bl	14ddc <bt_settings_encode_key>
	if (save.count) {
   1a804:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1a806:	b182      	cbz	r2, 1a82a <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   1a808:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1a80a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1a80c:	a804      	add	r0, sp, #16
   1a80e:	f7f8 ff41 	bl	13694 <settings_save_one>
	if (err) {
   1a812:	4604      	mov	r4, r0
   1a814:	b120      	cbz	r0, 1a820 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1a816:	4602      	mov	r2, r0
   1a818:	2145      	movs	r1, #69	; 0x45
   1a81a:	4807      	ldr	r0, [pc, #28]	; (1a838 <bt_gatt_store_ccc+0x70>)
   1a81c:	f00b fe7d 	bl	2651a <z_log_minimal_printk>
}
   1a820:	4620      	mov	r0, r4
   1a822:	b040      	add	sp, #256	; 0x100
   1a824:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1a826:	9400      	str	r4, [sp, #0]
   1a828:	e7e6      	b.n	1a7f8 <bt_gatt_store_ccc+0x30>
		str = NULL;
   1a82a:	4611      	mov	r1, r2
   1a82c:	e7ee      	b.n	1a80c <bt_gatt_store_ccc+0x44>
   1a82e:	bf00      	nop
   1a830:	000195dd 	.word	0x000195dd
   1a834:	0002c9a5 	.word	0x0002c9a5
   1a838:	0002cacb 	.word	0x0002cacb

0001a83c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1a83c:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1a83e:	4603      	mov	r3, r0
   1a840:	4a3d      	ldr	r2, [pc, #244]	; (1a938 <bt_gatt_disconnected+0xfc>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1a842:	4e3e      	ldr	r6, [pc, #248]	; (1a93c <bt_gatt_disconnected+0x100>)
{
   1a844:	b08d      	sub	sp, #52	; 0x34
   1a846:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1a848:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a84c:	2001      	movs	r0, #1
   1a84e:	f00e f8f5 	bl	28a3c <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   1a852:	4620      	mov	r0, r4
   1a854:	f7fc ffe6 	bl	17824 <bt_conn_index>
   1a858:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1a85a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1a85e:	b120      	cbz	r0, 1a86a <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1a860:	f7fc fed0 	bl	17604 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1a864:	2300      	movs	r3, #0
   1a866:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1a86a:	4835      	ldr	r0, [pc, #212]	; (1a940 <bt_gatt_disconnected+0x104>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a86c:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1a870:	f006 fd26 	bl	212c0 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a874:	7a20      	ldrb	r0, [r4, #8]
   1a876:	4629      	mov	r1, r5
   1a878:	f00c feb3 	bl	275e2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1a87c:	b378      	cbz	r0, 1a8de <bt_gatt_disconnected+0xa2>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1a87e:	4629      	mov	r1, r5
   1a880:	7a20      	ldrb	r0, [r4, #8]
   1a882:	f7ff ffa1 	bl	1a7c8 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1a886:	4620      	mov	r0, r4
   1a888:	f7fe fd00 	bl	1928c <find_cf_cfg>
	if (!cfg) {
   1a88c:	4606      	mov	r6, r0
   1a88e:	2800      	cmp	r0, #0
   1a890:	d045      	beq.n	1a91e <bt_gatt_disconnected+0xe2>
		if (conn->id) {
   1a892:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1a894:	3608      	adds	r6, #8
		if (conn->id) {
   1a896:	2a00      	cmp	r2, #0
   1a898:	d043      	beq.n	1a922 <bt_gatt_disconnected+0xe6>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1a89a:	af02      	add	r7, sp, #8
   1a89c:	2104      	movs	r1, #4
   1a89e:	4638      	mov	r0, r7
   1a8a0:	f00b fba2 	bl	25fe8 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1a8a4:	9700      	str	r7, [sp, #0]
   1a8a6:	462b      	mov	r3, r5
   1a8a8:	4a26      	ldr	r2, [pc, #152]	; (1a944 <bt_gatt_disconnected+0x108>)
   1a8aa:	2124      	movs	r1, #36	; 0x24
   1a8ac:	a803      	add	r0, sp, #12
   1a8ae:	f7fa fa95 	bl	14ddc <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1a8b2:	7a23      	ldrb	r3, [r4, #8]
   1a8b4:	2701      	movs	r7, #1
   1a8b6:	b93b      	cbnz	r3, 1a8c8 <bt_gatt_disconnected+0x8c>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1a8b8:	2300      	movs	r3, #0
   1a8ba:	9300      	str	r3, [sp, #0]
   1a8bc:	4a21      	ldr	r2, [pc, #132]	; (1a944 <bt_gatt_disconnected+0x108>)
   1a8be:	462b      	mov	r3, r5
   1a8c0:	2124      	movs	r1, #36	; 0x24
   1a8c2:	a803      	add	r0, sp, #12
   1a8c4:	f7fa fa8a 	bl	14ddc <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1a8c8:	463a      	mov	r2, r7
   1a8ca:	4631      	mov	r1, r6
   1a8cc:	a803      	add	r0, sp, #12
   1a8ce:	f7f8 fee1 	bl	13694 <settings_save_one>
	if (err) {
   1a8d2:	4602      	mov	r2, r0
   1a8d4:	b118      	cbz	r0, 1a8de <bt_gatt_disconnected+0xa2>
		BT_ERR("Failed to store Client Features (err %d)", err);
   1a8d6:	481c      	ldr	r0, [pc, #112]	; (1a948 <bt_gatt_disconnected+0x10c>)
   1a8d8:	2145      	movs	r1, #69	; 0x45
   1a8da:	f00b fe1e 	bl	2651a <z_log_minimal_printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a8de:	7a20      	ldrb	r0, [r4, #8]
   1a8e0:	4629      	mov	r1, r5
   1a8e2:	f00c fe7e 	bl	275e2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1a8e6:	b150      	cbz	r0, 1a8fe <bt_gatt_disconnected+0xc2>
		struct addr_with_id addr_with_id = {
   1a8e8:	7a23      	ldrb	r3, [r4, #8]
   1a8ea:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1a8ee:	4a17      	ldr	r2, [pc, #92]	; (1a94c <bt_gatt_disconnected+0x110>)
		struct addr_with_id addr_with_id = {
   1a8f0:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1a8f2:	ab03      	add	r3, sp, #12
   1a8f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a8f8:	2001      	movs	r0, #1
   1a8fa:	f00e f89f 	bl	28a3c <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1a8fe:	4620      	mov	r0, r4
   1a900:	f7fe fcc4 	bl	1928c <find_cf_cfg>
	if (!cfg) {
   1a904:	4606      	mov	r6, r0
   1a906:	b1a8      	cbz	r0, 1a934 <bt_gatt_disconnected+0xf8>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a908:	7a20      	ldrb	r0, [r4, #8]
   1a90a:	4629      	mov	r1, r5
   1a90c:	f00c fe69 	bl	275e2 <bt_addr_le_is_bonded>
   1a910:	b948      	cbnz	r0, 1a926 <bt_gatt_disconnected+0xea>
		clear_cf_cfg(cfg);
   1a912:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1a914:	b00d      	add	sp, #52	; 0x34
   1a916:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
   1a91a:	f00d bee6 	b.w	286ea <clear_cf_cfg>
		len = 0;
   1a91e:	4607      	mov	r7, r0
   1a920:	e7ca      	b.n	1a8b8 <bt_gatt_disconnected+0x7c>
   1a922:	2701      	movs	r7, #1
   1a924:	e7c8      	b.n	1a8b8 <bt_gatt_disconnected+0x7c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a926:	4629      	mov	r1, r5
   1a928:	1c70      	adds	r0, r6, #1
}
   1a92a:	b00d      	add	sp, #52	; 0x34
   1a92c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a930:	f00d bebb 	b.w	286aa <bt_addr_le_copy>
}
   1a934:	b00d      	add	sp, #52	; 0x34
   1a936:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a938:	00019865 	.word	0x00019865
   1a93c:	200019e8 	.word	0x200019e8
   1a940:	200019f0 	.word	0x200019f0
   1a944:	0002cb1f 	.word	0x0002cb1f
   1a948:	0002caee 	.word	0x0002caee
   1a94c:	00019529 	.word	0x00019529

0001a950 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1a950:	4601      	mov	r1, r0
   1a952:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1a954:	4803      	ldr	r0, [pc, #12]	; (1a964 <smp_find+0x14>)
   1a956:	f00e f901 	bl	28b5c <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1a95a:	2800      	cmp	r0, #0
}
   1a95c:	4802      	ldr	r0, [pc, #8]	; (1a968 <smp_find+0x18>)
   1a95e:	bf08      	it	eq
   1a960:	2000      	moveq	r0, #0
   1a962:	bd08      	pop	{r3, pc}
   1a964:	20001a7c 	.word	0x20001a7c
   1a968:	20001a78 	.word	0x20001a78

0001a96c <latch_auth_cb>:
{
   1a96c:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1a96e:	4a0c      	ldr	r2, [pc, #48]	; (1a9a0 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a970:	6811      	ldr	r1, [r2, #0]
   1a972:	4a0c      	ldr	r2, [pc, #48]	; (1a9a4 <latch_auth_cb+0x38>)
   1a974:	f3bf 8f5b 	dmb	ish
   1a978:	f500 73d8 	add.w	r3, r0, #432	; 0x1b0
   1a97c:	e853 4f00 	ldrex	r4, [r3]
   1a980:	4294      	cmp	r4, r2
   1a982:	d104      	bne.n	1a98e <latch_auth_cb+0x22>
   1a984:	e843 1c00 	strex	ip, r1, [r3]
   1a988:	f1bc 0f00 	cmp.w	ip, #0
   1a98c:	d1f6      	bne.n	1a97c <latch_auth_cb+0x10>
   1a98e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a992:	f3bf 8f5b 	dmb	ish
   1a996:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
   1a99a:	f3bf 8f5b 	dmb	ish
}
   1a99e:	bd10      	pop	{r4, pc}
   1a9a0:	20002500 	.word	0x20002500
   1a9a4:	20001a78 	.word	0x20001a78

0001a9a8 <get_io_capa>:
{
   1a9a8:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a9aa:	f7ff ffdf 	bl	1a96c <latch_auth_cb>
	if (!smp_auth_cb) {
   1a9ae:	b1b8      	cbz	r0, 1a9e0 <get_io_capa+0x38>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1a9b0:	6803      	ldr	r3, [r0, #0]
   1a9b2:	b143      	cbz	r3, 1a9c6 <get_io_capa+0x1e>
   1a9b4:	6842      	ldr	r2, [r0, #4]
   1a9b6:	b132      	cbz	r2, 1a9c6 <get_io_capa+0x1e>
   1a9b8:	6882      	ldr	r2, [r0, #8]
   1a9ba:	b912      	cbnz	r2, 1a9c2 <get_io_capa+0x1a>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1a9bc:	4a0b      	ldr	r2, [pc, #44]	; (1a9ec <get_io_capa+0x44>)
   1a9be:	7812      	ldrb	r2, [r2, #0]
   1a9c0:	b93a      	cbnz	r2, 1a9d2 <get_io_capa+0x2a>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1a9c2:	2004      	movs	r0, #4
   1a9c4:	e00b      	b.n	1a9de <get_io_capa+0x36>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1a9c6:	4a09      	ldr	r2, [pc, #36]	; (1a9ec <get_io_capa+0x44>)
   1a9c8:	7812      	ldrb	r2, [r2, #0]
   1a9ca:	b112      	cbz	r2, 1a9d2 <get_io_capa+0x2a>
   1a9cc:	b10b      	cbz	r3, 1a9d2 <get_io_capa+0x2a>
   1a9ce:	6882      	ldr	r2, [r0, #8]
   1a9d0:	b942      	cbnz	r2, 1a9e4 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_entry) {
   1a9d2:	6842      	ldr	r2, [r0, #4]
   1a9d4:	b942      	cbnz	r2, 1a9e8 <get_io_capa+0x40>
		return BT_SMP_IO_DISPLAY_ONLY;
   1a9d6:	2b00      	cmp	r3, #0
   1a9d8:	bf0c      	ite	eq
   1a9da:	2003      	moveq	r0, #3
   1a9dc:	2000      	movne	r0, #0
}
   1a9de:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1a9e0:	2003      	movs	r0, #3
   1a9e2:	e7fc      	b.n	1a9de <get_io_capa+0x36>
		return BT_SMP_IO_DISPLAY_YESNO;
   1a9e4:	2001      	movs	r0, #1
   1a9e6:	e7fa      	b.n	1a9de <get_io_capa+0x36>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1a9e8:	2002      	movs	r0, #2
   1a9ea:	e7f8      	b.n	1a9de <get_io_capa+0x36>
   1a9ec:	200034b3 	.word	0x200034b3

0001a9f0 <get_auth>:
	if (sc_supported) {
   1a9f0:	4b0c      	ldr	r3, [pc, #48]	; (1aa24 <get_auth+0x34>)
   1a9f2:	781b      	ldrb	r3, [r3, #0]
{
   1a9f4:	b510      	push	{r4, lr}
	if (sc_supported) {
   1a9f6:	b17b      	cbz	r3, 1aa18 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1a9f8:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1a9fc:	f7ff ffd4 	bl	1a9a8 <get_io_capa>
	if (bondable) {
   1aa00:	4b09      	ldr	r3, [pc, #36]	; (1aa28 <get_auth+0x38>)
   1aa02:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1aa04:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1aa06:	bf0c      	ite	eq
   1aa08:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1aa0c:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1aa10:	b12b      	cbz	r3, 1aa1e <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1aa12:	f044 0001 	orr.w	r0, r4, #1
}
   1aa16:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1aa18:	f001 0407 	and.w	r4, r1, #7
   1aa1c:	e7ee      	b.n	1a9fc <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1aa1e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1aa22:	e7f8      	b.n	1aa16 <get_auth+0x26>
   1aa24:	200034b3 	.word	0x200034b3
   1aa28:	200007a8 	.word	0x200007a8

0001aa2c <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1aa2c:	4288      	cmp	r0, r1
{
   1aa2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa30:	4604      	mov	r4, r0
   1aa32:	460d      	mov	r5, r1
   1aa34:	4616      	mov	r6, r2
   1aa36:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1aa3a:	d916      	bls.n	1aa6a <sys_memcpy_swap+0x3e>
   1aa3c:	188b      	adds	r3, r1, r2
   1aa3e:	4298      	cmp	r0, r3
   1aa40:	d20a      	bcs.n	1aa58 <sys_memcpy_swap+0x2c>
   1aa42:	490b      	ldr	r1, [pc, #44]	; (1aa70 <sys_memcpy_swap+0x44>)
   1aa44:	480b      	ldr	r0, [pc, #44]	; (1aa74 <sys_memcpy_swap+0x48>)
   1aa46:	f240 2217 	movw	r2, #535	; 0x217
   1aa4a:	f00b fd58 	bl	264fe <assert_print>
   1aa4e:	4808      	ldr	r0, [pc, #32]	; (1aa70 <sys_memcpy_swap+0x44>)
   1aa50:	f240 2117 	movw	r1, #535	; 0x217
   1aa54:	f00b fd4c 	bl	264f0 <assert_post_action>
	psrc += length - 1;
   1aa58:	3e01      	subs	r6, #1
   1aa5a:	4435      	add	r5, r6
		*pdst++ = *psrc--;
   1aa5c:	f815 3901 	ldrb.w	r3, [r5], #-1
   1aa60:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
   1aa64:	42bc      	cmp	r4, r7
   1aa66:	d1f9      	bne.n	1aa5c <sys_memcpy_swap+0x30>
}
   1aa68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1aa6a:	d0ea      	beq.n	1aa42 <sys_memcpy_swap+0x16>
   1aa6c:	42b9      	cmp	r1, r7
   1aa6e:	e7e7      	b.n	1aa40 <sys_memcpy_swap+0x14>
   1aa70:	0002cb30 	.word	0x0002cb30
   1aa74:	0002aa75 	.word	0x0002aa75

0001aa78 <smp_chan_get>:
{
   1aa78:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1aa7a:	2106      	movs	r1, #6
   1aa7c:	f00d f8dc 	bl	27c38 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1aa80:	4604      	mov	r4, r0
   1aa82:	b928      	cbnz	r0, 1aa90 <smp_chan_get+0x18>
		BT_ERR("Unable to find SMP channel");
   1aa84:	4804      	ldr	r0, [pc, #16]	; (1aa98 <smp_chan_get+0x20>)
   1aa86:	2145      	movs	r1, #69	; 0x45
   1aa88:	f00b fd47 	bl	2651a <z_log_minimal_printk>
}
   1aa8c:	4620      	mov	r0, r4
   1aa8e:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1aa90:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   1aa94:	e7fa      	b.n	1aa8c <smp_chan_get+0x14>
   1aa96:	bf00      	nop
   1aa98:	0002cb62 	.word	0x0002cb62

0001aa9c <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1aa9c:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1aa9e:	4b09      	ldr	r3, [pc, #36]	; (1aac4 <bt_smp_accept+0x28>)
{
   1aaa0:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1aaa2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1aaa6:	b928      	cbnz	r0, 1aab4 <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1aaa8:	4a07      	ldr	r2, [pc, #28]	; (1aac8 <bt_smp_accept+0x2c>)
   1aaaa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

		*chan = &smp->chan.chan;
   1aaae:	33ec      	adds	r3, #236	; 0xec
   1aab0:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1aab2:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
   1aab4:	4805      	ldr	r0, [pc, #20]	; (1aacc <bt_smp_accept+0x30>)
   1aab6:	2145      	movs	r1, #69	; 0x45
   1aab8:	f00b fd2f 	bl	2651a <z_log_minimal_printk>
   1aabc:	f06f 000b 	mvn.w	r0, #11
   1aac0:	e7f7      	b.n	1aab2 <bt_smp_accept+0x16>
   1aac2:	bf00      	nop
   1aac4:	20001a78 	.word	0x20001a78
   1aac8:	0002a690 	.word	0x0002a690
   1aacc:	0002cb82 	.word	0x0002cb82

0001aad0 <smp_init>:
{
   1aad0:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1aad2:	22ec      	movs	r2, #236	; 0xec
{
   1aad4:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1aad6:	2100      	movs	r1, #0
   1aad8:	f00c fbb0 	bl	2723c <memset>
	if (bt_rand(smp->prnd, 16)) {
   1aadc:	2110      	movs	r1, #16
   1aade:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1aae2:	f003 fe9d 	bl	1e820 <bt_rand>
   1aae6:	4604      	mov	r4, r0
   1aae8:	b948      	cbnz	r0, 1aafe <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1aaea:	2105      	movs	r1, #5
   1aaec:	4628      	mov	r0, r5
   1aaee:	f00e f928 	bl	28d42 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1aaf2:	f7fc fa57 	bl	16fa4 <bt_pub_key_get>
   1aaf6:	4b03      	ldr	r3, [pc, #12]	; (1ab04 <smp_init+0x34>)
   1aaf8:	6018      	str	r0, [r3, #0]
}
   1aafa:	4620      	mov	r0, r4
   1aafc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1aafe:	2408      	movs	r4, #8
   1ab00:	e7fb      	b.n	1aafa <smp_init+0x2a>
   1ab02:	bf00      	nop
   1ab04:	20002678 	.word	0x20002678

0001ab08 <smp_dhkey_generate>:
{
   1ab08:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ab0a:	1d05      	adds	r5, r0, #4
{
   1ab0c:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ab0e:	2108      	movs	r1, #8
   1ab10:	4628      	mov	r0, r5
   1ab12:	f00e f916 	bl	28d42 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1ab16:	4908      	ldr	r1, [pc, #32]	; (1ab38 <smp_dhkey_generate+0x30>)
   1ab18:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ab1c:	f7fc fa52 	bl	16fc4 <bt_dh_key_gen>
	if (err) {
   1ab20:	b140      	cbz	r0, 1ab34 <smp_dhkey_generate+0x2c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ab22:	2108      	movs	r1, #8
   1ab24:	4628      	mov	r0, r5
   1ab26:	f00e f843 	bl	28bb0 <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   1ab2a:	4804      	ldr	r0, [pc, #16]	; (1ab3c <smp_dhkey_generate+0x34>)
   1ab2c:	2145      	movs	r1, #69	; 0x45
   1ab2e:	f00b fcf4 	bl	2651a <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1ab32:	2008      	movs	r0, #8
}
   1ab34:	bd38      	pop	{r3, r4, r5, pc}
   1ab36:	bf00      	nop
   1ab38:	000291c3 	.word	0x000291c3
   1ab3c:	0002cbac 	.word	0x0002cbac

0001ab40 <smp_ident_info>:
{
   1ab40:	b570      	push	{r4, r5, r6, lr}
   1ab42:	460b      	mov	r3, r1
   1ab44:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ab46:	210d      	movs	r1, #13
   1ab48:	3004      	adds	r0, #4
   1ab4a:	f00e f807 	bl	28b5c <atomic_test_bit>
   1ab4e:	b1c8      	cbz	r0, 1ab84 <smp_ident_info+0x44>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1ab50:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1ab52:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1ab56:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1ab5a:	7a19      	ldrb	r1, [r3, #8]
   1ab5c:	462a      	mov	r2, r5
   1ab5e:	2002      	movs	r0, #2
   1ab60:	f00e fba4 	bl	292ac <bt_keys_get_type>
		if (!keys) {
   1ab64:	b948      	cbnz	r0, 1ab7a <smp_ident_info+0x3a>
			BT_ERR("Unable to get keys for %s",
   1ab66:	4628      	mov	r0, r5
   1ab68:	f7fa f88a 	bl	14c80 <bt_addr_le_str_real>
   1ab6c:	2145      	movs	r1, #69	; 0x45
   1ab6e:	4602      	mov	r2, r0
   1ab70:	4807      	ldr	r0, [pc, #28]	; (1ab90 <smp_ident_info+0x50>)
   1ab72:	f00b fcd2 	bl	2651a <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1ab76:	2008      	movs	r0, #8
}
   1ab78:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1ab7a:	2210      	movs	r2, #16
   1ab7c:	4631      	mov	r1, r6
   1ab7e:	302a      	adds	r0, #42	; 0x2a
   1ab80:	f00c fb51 	bl	27226 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1ab84:	4620      	mov	r0, r4
   1ab86:	2109      	movs	r1, #9
   1ab88:	f00e f8db 	bl	28d42 <atomic_set_bit>
	return 0;
   1ab8c:	2000      	movs	r0, #0
   1ab8e:	e7f3      	b.n	1ab78 <smp_ident_info+0x38>
   1ab90:	0002cbca 	.word	0x0002cbca

0001ab94 <smp_encrypt_info>:
{
   1ab94:	b570      	push	{r4, r5, r6, lr}
   1ab96:	460b      	mov	r3, r1
   1ab98:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ab9a:	210d      	movs	r1, #13
   1ab9c:	3004      	adds	r0, #4
   1ab9e:	f00d ffdd 	bl	28b5c <atomic_test_bit>
   1aba2:	b1c8      	cbz	r0, 1abd8 <smp_encrypt_info+0x44>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1aba4:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1aba6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1abaa:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1abae:	7a19      	ldrb	r1, [r3, #8]
   1abb0:	462a      	mov	r2, r5
   1abb2:	2004      	movs	r0, #4
   1abb4:	f00e fb7a 	bl	292ac <bt_keys_get_type>
		if (!keys) {
   1abb8:	b948      	cbnz	r0, 1abce <smp_encrypt_info+0x3a>
			BT_ERR("Unable to get keys for %s",
   1abba:	4628      	mov	r0, r5
   1abbc:	f7fa f860 	bl	14c80 <bt_addr_le_str_real>
   1abc0:	2145      	movs	r1, #69	; 0x45
   1abc2:	4602      	mov	r2, r0
   1abc4:	4807      	ldr	r0, [pc, #28]	; (1abe4 <smp_encrypt_info+0x50>)
   1abc6:	f00b fca8 	bl	2651a <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1abca:	2008      	movs	r0, #8
}
   1abcc:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1abce:	2210      	movs	r2, #16
   1abd0:	4631      	mov	r1, r6
   1abd2:	301a      	adds	r0, #26
   1abd4:	f00c fb27 	bl	27226 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1abd8:	4620      	mov	r0, r4
   1abda:	2107      	movs	r1, #7
   1abdc:	f00e f8b1 	bl	28d42 <atomic_set_bit>
	return 0;
   1abe0:	2000      	movs	r0, #0
   1abe2:	e7f3      	b.n	1abcc <smp_encrypt_info+0x38>
   1abe4:	0002cbca 	.word	0x0002cbca

0001abe8 <smp_send_pairing_confirm>:
{
   1abe8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1abea:	7a04      	ldrb	r4, [r0, #8]
   1abec:	2c02      	cmp	r4, #2
{
   1abee:	4605      	mov	r5, r0
	switch (smp->method) {
   1abf0:	d823      	bhi.n	1ac3a <smp_send_pairing_confirm+0x52>
   1abf2:	b144      	cbz	r4, 1ac06 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1abf4:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   1abf8:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1abfc:	40d4      	lsrs	r4, r2
   1abfe:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1ac02:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1ac06:	2103      	movs	r1, #3
   1ac08:	4628      	mov	r0, r5
   1ac0a:	f00e f8ae 	bl	28d6a <smp_create_pdu.constprop.0>
	if (!buf) {
   1ac0e:	4606      	mov	r6, r0
   1ac10:	b1d0      	cbz	r0, 1ac48 <smp_send_pairing_confirm+0x60>
   1ac12:	2110      	movs	r1, #16
   1ac14:	3008      	adds	r0, #8
   1ac16:	f001 ff07 	bl	1ca28 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1ac1a:	9000      	str	r0, [sp, #0]
   1ac1c:	4812      	ldr	r0, [pc, #72]	; (1ac68 <smp_send_pairing_confirm+0x80>)
   1ac1e:	4623      	mov	r3, r4
   1ac20:	6800      	ldr	r0, [r0, #0]
   1ac22:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1ac26:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1ac2a:	f00e f865 	bl	28cf8 <smp_f4>
   1ac2e:	4604      	mov	r4, r0
   1ac30:	b170      	cbz	r0, 1ac50 <smp_send_pairing_confirm+0x68>
		net_buf_unref(buf);
   1ac32:	4630      	mov	r0, r6
   1ac34:	f001 fde2 	bl	1c7fc <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1ac38:	e006      	b.n	1ac48 <smp_send_pairing_confirm+0x60>
	switch (smp->method) {
   1ac3a:	2c03      	cmp	r4, #3
   1ac3c:	d006      	beq.n	1ac4c <smp_send_pairing_confirm+0x64>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1ac3e:	480b      	ldr	r0, [pc, #44]	; (1ac6c <smp_send_pairing_confirm+0x84>)
   1ac40:	4622      	mov	r2, r4
   1ac42:	2145      	movs	r1, #69	; 0x45
   1ac44:	f00b fc69 	bl	2651a <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1ac48:	2008      	movs	r0, #8
   1ac4a:	e00b      	b.n	1ac64 <smp_send_pairing_confirm+0x7c>
	switch (smp->method) {
   1ac4c:	2400      	movs	r4, #0
   1ac4e:	e7da      	b.n	1ac06 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   1ac50:	4602      	mov	r2, r0
   1ac52:	4631      	mov	r1, r6
   1ac54:	4628      	mov	r0, r5
   1ac56:	f00d ffd8 	bl	28c0a <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1ac5a:	1d28      	adds	r0, r5, #4
   1ac5c:	4621      	mov	r1, r4
   1ac5e:	f00d ffa7 	bl	28bb0 <atomic_clear_bit>
	return 0;
   1ac62:	4620      	mov	r0, r4
}
   1ac64:	b002      	add	sp, #8
   1ac66:	bd70      	pop	{r4, r5, r6, pc}
   1ac68:	20002678 	.word	0x20002678
   1ac6c:	0002cbe9 	.word	0x0002cbe9

0001ac70 <smp_public_key_periph>:
{
   1ac70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ac74:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ac76:	f7ff fe79 	bl	1a96c <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ac7a:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ac7c:	4607      	mov	r7, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ac7e:	210e      	movs	r1, #14
   1ac80:	4630      	mov	r0, r6
   1ac82:	f00d ff6b 	bl	28b5c <atomic_test_bit>
   1ac86:	b968      	cbnz	r0, 1aca4 <smp_public_key_periph+0x34>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1ac88:	4b48      	ldr	r3, [pc, #288]	; (1adac <smp_public_key_periph+0x13c>)
   1ac8a:	2220      	movs	r2, #32
   1ac8c:	6819      	ldr	r1, [r3, #0]
   1ac8e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ac92:	f00c fa9f 	bl	271d4 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ac96:	b928      	cbnz	r0, 1aca4 <smp_public_key_periph+0x34>
		BT_WARN("Remote public key rejected");
   1ac98:	4845      	ldr	r0, [pc, #276]	; (1adb0 <smp_public_key_periph+0x140>)
   1ac9a:	2157      	movs	r1, #87	; 0x57
   1ac9c:	f00b fc3d 	bl	2651a <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1aca0:	2008      	movs	r0, #8
   1aca2:	e02f      	b.n	1ad04 <smp_public_key_periph+0x94>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1aca4:	210c      	movs	r1, #12
   1aca6:	4620      	mov	r0, r4
   1aca8:	f00e f85f 	bl	28d6a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1acac:	4605      	mov	r5, r0
   1acae:	2800      	cmp	r0, #0
   1acb0:	d0f6      	beq.n	1aca0 <smp_public_key_periph+0x30>
   1acb2:	2140      	movs	r1, #64	; 0x40
   1acb4:	3008      	adds	r0, #8
   1acb6:	f001 feb7 	bl	1ca28 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1acba:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 1adac <smp_public_key_periph+0x13c>
   1acbe:	2220      	movs	r2, #32
   1acc0:	f8d9 1000 	ldr.w	r1, [r9]
   1acc4:	4680      	mov	r8, r0
   1acc6:	f00c faae 	bl	27226 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1acca:	f8d9 1000 	ldr.w	r1, [r9]
   1acce:	2220      	movs	r2, #32
   1acd0:	4411      	add	r1, r2
   1acd2:	eb08 0002 	add.w	r0, r8, r2
   1acd6:	f00c faa6 	bl	27226 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1acda:	2200      	movs	r2, #0
   1acdc:	4629      	mov	r1, r5
   1acde:	4620      	mov	r0, r4
   1ace0:	f00d ff93 	bl	28c0a <smp_send.constprop.0>
	switch (smp->method) {
   1ace4:	7a22      	ldrb	r2, [r4, #8]
   1ace6:	2a05      	cmp	r2, #5
   1ace8:	d859      	bhi.n	1ad9e <smp_public_key_periph+0x12e>
   1acea:	e8df f002 	tbb	[pc, r2]
   1acee:	3903      	.short	0x3903
   1acf0:	5558030d 	.word	0x5558030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1acf4:	2104      	movs	r1, #4
   1acf6:	4620      	mov	r0, r4
   1acf8:	f00e f823 	bl	28d42 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1acfc:	f7ff ff74 	bl	1abe8 <smp_send_pairing_confirm>
		if (err) {
   1ad00:	2800      	cmp	r0, #0
   1ad02:	d03c      	beq.n	1ad7e <smp_public_key_periph+0x10e>
}
   1ad04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ad08:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1ad0a:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ad0e:	f7ff fe2d 	bl	1a96c <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1ad12:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ad14:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1ad16:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1ad1a:	f003 fd81 	bl	1e820 <bt_rand>
   1ad1e:	2800      	cmp	r0, #0
   1ad20:	d1be      	bne.n	1aca0 <smp_public_key_periph+0x30>
		smp->passkey %= 1000000;
   1ad22:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1ad26:	4a23      	ldr	r2, [pc, #140]	; (1adb4 <smp_public_key_periph+0x144>)
   1ad28:	fbb3 f1f2 	udiv	r1, r3, r2
   1ad2c:	fb02 3311 	mls	r3, r2, r1, r3
   1ad30:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1ad34:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1ad38:	b155      	cbz	r5, 1ad50 <smp_public_key_periph+0xe0>
   1ad3a:	682b      	ldr	r3, [r5, #0]
   1ad3c:	b143      	cbz	r3, 1ad50 <smp_public_key_periph+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ad3e:	210b      	movs	r1, #11
   1ad40:	4630      	mov	r0, r6
   1ad42:	f00d fffe 	bl	28d42 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1ad46:	682b      	ldr	r3, [r5, #0]
   1ad48:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1ad4c:	4638      	mov	r0, r7
   1ad4e:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ad50:	2103      	movs	r1, #3
   1ad52:	4620      	mov	r0, r4
   1ad54:	f00d fff5 	bl	28d42 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ad58:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ad5a:	f00d fff2 	bl	28d42 <atomic_set_bit>
		break;
   1ad5e:	e00e      	b.n	1ad7e <smp_public_key_periph+0x10e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ad60:	4620      	mov	r0, r4
   1ad62:	2103      	movs	r1, #3
   1ad64:	f00d ffed 	bl	28d42 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ad68:	210e      	movs	r1, #14
   1ad6a:	f00d ffea 	bl	28d42 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ad6e:	4630      	mov	r0, r6
   1ad70:	210a      	movs	r1, #10
   1ad72:	f00d ffe6 	bl	28d42 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1ad76:	687b      	ldr	r3, [r7, #4]
   1ad78:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ad7c:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1ad7e:	4630      	mov	r0, r6
   1ad80:	2107      	movs	r1, #7
   1ad82:	f00d ffde 	bl	28d42 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1ad86:	2008      	movs	r0, #8
   1ad88:	f7ff fde2 	bl	1a950 <smp_find>
   1ad8c:	b960      	cbnz	r0, 1ada8 <smp_public_key_periph+0x138>
		return smp_dhkey_generate(smp);
   1ad8e:	4620      	mov	r0, r4
}
   1ad90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return smp_dhkey_generate(smp);
   1ad94:	f7ff beb8 	b.w	1ab08 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ad98:	2104      	movs	r1, #4
   1ad9a:	4620      	mov	r0, r4
   1ad9c:	e7dd      	b.n	1ad5a <smp_public_key_periph+0xea>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1ad9e:	4806      	ldr	r0, [pc, #24]	; (1adb8 <smp_public_key_periph+0x148>)
   1ada0:	2145      	movs	r1, #69	; 0x45
   1ada2:	f00b fbba 	bl	2651a <z_log_minimal_printk>
   1ada6:	e77b      	b.n	1aca0 <smp_public_key_periph+0x30>
	return 0;
   1ada8:	2000      	movs	r0, #0
   1adaa:	e7ab      	b.n	1ad04 <smp_public_key_periph+0x94>
   1adac:	20002678 	.word	0x20002678
   1adb0:	0002cc0a 	.word	0x0002cc0a
   1adb4:	000f4240 	.word	0x000f4240
   1adb8:	0002cbe9 	.word	0x0002cbe9

0001adbc <smp_public_key>:
{
   1adbc:	b570      	push	{r4, r5, r6, lr}
   1adbe:	460d      	mov	r5, r1
   1adc0:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1adc2:	f7ff fdd3 	bl	1a96c <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1adc6:	68ae      	ldr	r6, [r5, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1adc8:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1adcc:	2220      	movs	r2, #32
   1adce:	4631      	mov	r1, r6
   1add0:	4628      	mov	r0, r5
   1add2:	f00c fa28 	bl	27226 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1add6:	2220      	movs	r2, #32
   1add8:	18b1      	adds	r1, r6, r2
   1adda:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1adde:	f00c fa22 	bl	27226 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1ade2:	4628      	mov	r0, r5
   1ade4:	f7fc f856 	bl	16e94 <bt_pub_key_is_debug>
   1ade8:	b940      	cbnz	r0, 1adfc <smp_public_key+0x40>
	if (!sc_public_key) {
   1adea:	4b18      	ldr	r3, [pc, #96]	; (1ae4c <smp_public_key+0x90>)
   1adec:	681d      	ldr	r5, [r3, #0]
   1adee:	bb3d      	cbnz	r5, 1ae40 <smp_public_key+0x84>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1adf0:	1d20      	adds	r0, r4, #4
   1adf2:	2106      	movs	r1, #6
   1adf4:	f00d ffa5 	bl	28d42 <atomic_set_bit>
		return 0;
   1adf8:	4628      	mov	r0, r5
   1adfa:	e020      	b.n	1ae3e <smp_public_key+0x82>
		BT_INFO("Remote is using Debug Public key");
   1adfc:	4814      	ldr	r0, [pc, #80]	; (1ae50 <smp_public_key+0x94>)
   1adfe:	2149      	movs	r1, #73	; 0x49
   1ae00:	f00b fb8b 	bl	2651a <z_log_minimal_printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1ae04:	210e      	movs	r1, #14
   1ae06:	1d20      	adds	r0, r4, #4
   1ae08:	f00d ff9b 	bl	28d42 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1ae0c:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1ae10:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1ae14:	b933      	cbnz	r3, 1ae24 <smp_public_key+0x68>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ae16:	7a28      	ldrb	r0, [r5, #8]
   1ae18:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1ae1c:	f001 f8f2 	bl	1c004 <bt_keys_get_addr>
   1ae20:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1ae24:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1ae28:	2b00      	cmp	r3, #0
   1ae2a:	d0de      	beq.n	1adea <smp_public_key+0x2e>
   1ae2c:	89da      	ldrh	r2, [r3, #14]
   1ae2e:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1ae32:	2a00      	cmp	r2, #0
   1ae34:	d0d9      	beq.n	1adea <smp_public_key+0x2e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1ae36:	7b5b      	ldrb	r3, [r3, #13]
   1ae38:	079b      	lsls	r3, r3, #30
   1ae3a:	d4d6      	bmi.n	1adea <smp_public_key+0x2e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1ae3c:	2003      	movs	r0, #3
}
   1ae3e:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   1ae40:	4620      	mov	r0, r4
}
   1ae42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   1ae46:	f7ff bf13 	b.w	1ac70 <smp_public_key_periph>
   1ae4a:	bf00      	nop
   1ae4c:	20002678 	.word	0x20002678
   1ae50:	0002cc2a 	.word	0x0002cc2a

0001ae54 <smp_pairing_req>:
{
   1ae54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ae58:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1ae5a:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1ae5e:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ae60:	f7ff fd84 	bl	1a96c <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1ae64:	f8d5 8008 	ldr.w	r8, [r5, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1ae68:	f898 3003 	ldrb.w	r3, [r8, #3]
   1ae6c:	3b07      	subs	r3, #7
   1ae6e:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ae70:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1ae72:	d905      	bls.n	1ae80 <smp_pairing_req+0x2c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1ae74:	f04f 0806 	mov.w	r8, #6
}
   1ae78:	4640      	mov	r0, r8
   1ae7a:	b002      	add	sp, #8
   1ae7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   1ae80:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1ae84:	b163      	cbz	r3, 1aea0 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1ae86:	1d25      	adds	r5, r4, #4
   1ae88:	210f      	movs	r1, #15
   1ae8a:	4628      	mov	r0, r5
   1ae8c:	f00d fe66 	bl	28b5c <atomic_test_bit>
   1ae90:	b990      	cbnz	r0, 1aeb8 <smp_pairing_req+0x64>
		int ret = smp_init(smp);
   1ae92:	4620      	mov	r0, r4
   1ae94:	f7ff fe1c 	bl	1aad0 <smp_init>
		if (ret) {
   1ae98:	b170      	cbz	r0, 1aeb8 <smp_pairing_req+0x64>
			return ret;
   1ae9a:	fa5f f880 	uxtb.w	r8, r0
   1ae9e:	e7eb      	b.n	1ae78 <smp_pairing_req+0x24>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1aea0:	7a30      	ldrb	r0, [r6, #8]
   1aea2:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1aea6:	f001 f8ad 	bl	1c004 <bt_keys_get_addr>
   1aeaa:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
		if (!conn->le.keys) {
   1aeae:	2800      	cmp	r0, #0
   1aeb0:	d1e9      	bne.n	1ae86 <smp_pairing_req+0x32>
	switch (sec) {
   1aeb2:	f04f 0808 	mov.w	r8, #8
   1aeb6:	e7df      	b.n	1ae78 <smp_pairing_req+0x24>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1aeb8:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1aeba:	2206      	movs	r2, #6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1aebc:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1aebe:	4641      	mov	r1, r8
   1aec0:	f104 000a 	add.w	r0, r4, #10
   1aec4:	f00c f9af 	bl	27226 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1aec8:	2302      	movs	r3, #2
   1aeca:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1aecc:	f898 1002 	ldrb.w	r1, [r8, #2]
   1aed0:	4620      	mov	r0, r4
   1aed2:	f7ff fd8d 	bl	1a9f0 <get_auth>
   1aed6:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1aed8:	4620      	mov	r0, r4
   1aeda:	f7ff fd65 	bl	1a9a8 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1aede:	4ba5      	ldr	r3, [pc, #660]	; (1b174 <smp_pairing_req+0x320>)
	rsp->io_capability = get_io_capa(smp);
   1aee0:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1aee2:	781b      	ldrb	r3, [r3, #0]
   1aee4:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1aee6:	2310      	movs	r3, #16
   1aee8:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1aeea:	f898 3004 	ldrb.w	r3, [r8, #4]
   1aeee:	f003 0303 	and.w	r3, r3, #3
   1aef2:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1aef4:	f898 3005 	ldrb.w	r3, [r8, #5]
   1aef8:	f003 0301 	and.w	r3, r3, #1
   1aefc:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1aefe:	7ce3      	ldrb	r3, [r4, #19]
   1af00:	071b      	lsls	r3, r3, #28
   1af02:	d50d      	bpl.n	1af20 <smp_pairing_req+0xcc>
   1af04:	f898 3002 	ldrb.w	r3, [r8, #2]
   1af08:	0718      	lsls	r0, r3, #28
   1af0a:	d509      	bpl.n	1af20 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1af0c:	2105      	movs	r1, #5
   1af0e:	4628      	mov	r0, r5
   1af10:	f00d ff17 	bl	28d42 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1af14:	7d63      	ldrb	r3, [r4, #21]
   1af16:	f003 0302 	and.w	r3, r3, #2
   1af1a:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1af1c:	2300      	movs	r3, #0
   1af1e:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1af20:	7ce3      	ldrb	r3, [r4, #19]
   1af22:	0699      	lsls	r1, r3, #26
   1af24:	d507      	bpl.n	1af36 <smp_pairing_req+0xe2>
   1af26:	f898 3002 	ldrb.w	r3, [r8, #2]
   1af2a:	069a      	lsls	r2, r3, #26
   1af2c:	d503      	bpl.n	1af36 <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1af2e:	2114      	movs	r1, #20
   1af30:	4628      	mov	r0, r5
   1af32:	f00d ff06 	bl	28d42 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1af36:	7da3      	ldrb	r3, [r4, #22]
   1af38:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1af3c:	7d63      	ldrb	r3, [r4, #21]
   1af3e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1af42:	7ce3      	ldrb	r3, [r4, #19]
   1af44:	07db      	lsls	r3, r3, #31
   1af46:	d507      	bpl.n	1af58 <smp_pairing_req+0x104>
   1af48:	f898 3002 	ldrb.w	r3, [r8, #2]
   1af4c:	07d8      	lsls	r0, r3, #31
   1af4e:	d503      	bpl.n	1af58 <smp_pairing_req+0x104>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1af50:	210d      	movs	r1, #13
   1af52:	4628      	mov	r0, r5
   1af54:	f00d fef5 	bl	28d42 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1af58:	2103      	movs	r1, #3
   1af5a:	4628      	mov	r0, r5
   1af5c:	f00d fef1 	bl	28d42 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1af60:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1af62:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1af66:	f00d fdf9 	bl	28b5c <atomic_test_bit>
   1af6a:	bb48      	cbnz	r0, 1afc0 <smp_pairing_req+0x16c>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1af6c:	f1b8 0f04 	cmp.w	r8, #4
   1af70:	d847      	bhi.n	1b002 <smp_pairing_req+0x1ae>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1af72:	7ae3      	ldrb	r3, [r4, #11]
   1af74:	7ca2      	ldrb	r2, [r4, #18]
   1af76:	4013      	ands	r3, r2
   1af78:	07d9      	lsls	r1, r3, #31
   1af7a:	d440      	bmi.n	1affe <smp_pairing_req+0x1aa>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1af7c:	7b21      	ldrb	r1, [r4, #12]
   1af7e:	7ce0      	ldrb	r0, [r4, #19]
   1af80:	4301      	orrs	r1, r0
   1af82:	f011 0104 	ands.w	r1, r1, #4
   1af86:	d011      	beq.n	1afac <smp_pairing_req+0x158>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1af88:	4620      	mov	r0, r4
   1af8a:	f7ff fd0d 	bl	1a9a8 <get_io_capa>
   1af8e:	4b7a      	ldr	r3, [pc, #488]	; (1b178 <smp_pairing_req+0x324>)
   1af90:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1af94:	4498      	add	r8, r3
   1af96:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   1af9a:	2904      	cmp	r1, #4
   1af9c:	d106      	bne.n	1afac <smp_pairing_req+0x158>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1af9e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1afa2:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1afa4:	2b00      	cmp	r3, #0
   1afa6:	bf0c      	ite	eq
   1afa8:	2102      	moveq	r1, #2
   1afaa:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
   1afac:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1afae:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
   1afb2:	4620      	mov	r0, r4
   1afb4:	f00d fddb 	bl	28b6e <update_keys_check>
   1afb8:	bb28      	cbnz	r0, 1b006 <smp_pairing_req+0x1b2>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1afba:	f04f 0803 	mov.w	r8, #3
   1afbe:	e75b      	b.n	1ae78 <smp_pairing_req+0x24>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1afc0:	7b23      	ldrb	r3, [r4, #12]
   1afc2:	7ce0      	ldrb	r0, [r4, #19]
   1afc4:	ea03 0200 	and.w	r2, r3, r0
   1afc8:	0712      	lsls	r2, r2, #28
   1afca:	d506      	bpl.n	1afda <smp_pairing_req+0x186>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1afcc:	7ae2      	ldrb	r2, [r4, #11]
   1afce:	f894 c012 	ldrb.w	ip, [r4, #18]
   1afd2:	ea42 020c 	orr.w	r2, r2, ip
   1afd6:	07d2      	lsls	r2, r2, #31
   1afd8:	d4e8      	bmi.n	1afac <smp_pairing_req+0x158>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1afda:	f1b8 0f04 	cmp.w	r8, #4
   1afde:	d810      	bhi.n	1b002 <smp_pairing_req+0x1ae>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1afe0:	ea43 0100 	orr.w	r1, r3, r0
   1afe4:	f011 0104 	ands.w	r1, r1, #4
   1afe8:	d0e0      	beq.n	1afac <smp_pairing_req+0x158>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1afea:	4620      	mov	r0, r4
   1afec:	f7ff fcdc 	bl	1a9a8 <get_io_capa>
   1aff0:	4b62      	ldr	r3, [pc, #392]	; (1b17c <smp_pairing_req+0x328>)
   1aff2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1aff6:	4498      	add	r8, r3
   1aff8:	f818 1000 	ldrb.w	r1, [r8, r0]
   1affc:	e7d6      	b.n	1afac <smp_pairing_req+0x158>
		return LEGACY_OOB;
   1affe:	2106      	movs	r1, #6
   1b000:	e7d4      	b.n	1afac <smp_pairing_req+0x158>
		return JUST_WORKS;
   1b002:	2100      	movs	r1, #0
   1b004:	e7d2      	b.n	1afac <smp_pairing_req+0x158>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1b006:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1b00a:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1b00c:	2b03      	cmp	r3, #3
   1b00e:	d037      	beq.n	1b080 <smp_pairing_req+0x22c>
   1b010:	d825      	bhi.n	1b05e <smp_pairing_req+0x20a>
   1b012:	3b01      	subs	r3, #1
   1b014:	2b01      	cmp	r3, #1
   1b016:	f63f af4c 	bhi.w	1aeb2 <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b01a:	2105      	movs	r1, #5
   1b01c:	4628      	mov	r0, r5
   1b01e:	f00d fd9d 	bl	28b5c <atomic_test_bit>
   1b022:	2800      	cmp	r0, #0
   1b024:	f040 80b2 	bne.w	1b18c <smp_pairing_req+0x338>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b028:	4620      	mov	r0, r4
   1b02a:	f7ff fc9f 	bl	1a96c <latch_auth_cb>
   1b02e:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b030:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1b032:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b036:	f7ff fc99 	bl	1a96c <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1b03a:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b03e:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1b040:	f898 0008 	ldrb.w	r0, [r8, #8]
   1b044:	f001 f86c 	bl	1c120 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1b048:	7a22      	ldrb	r2, [r4, #8]
   1b04a:	b1e8      	cbz	r0, 1b088 <smp_pairing_req+0x234>
   1b04c:	7b43      	ldrb	r3, [r0, #13]
   1b04e:	07db      	lsls	r3, r3, #31
   1b050:	d51a      	bpl.n	1b088 <smp_pairing_req+0x234>
   1b052:	b9ca      	cbnz	r2, 1b088 <smp_pairing_req+0x234>
		BT_ERR("JustWorks failed, authenticated keys present");
   1b054:	484a      	ldr	r0, [pc, #296]	; (1b180 <smp_pairing_req+0x32c>)
   1b056:	2145      	movs	r1, #69	; 0x45
   1b058:	f00b fa5f 	bl	2651a <z_log_minimal_printk>
	if (ret) {
   1b05c:	e729      	b.n	1aeb2 <smp_pairing_req+0x5e>
	switch (sec) {
   1b05e:	2b04      	cmp	r3, #4
   1b060:	f47f af27 	bne.w	1aeb2 <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1b064:	7d23      	ldrb	r3, [r4, #20]
   1b066:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1b068:	4293      	cmp	r3, r2
   1b06a:	bf28      	it	cs
   1b06c:	4613      	movcs	r3, r2
   1b06e:	2b10      	cmp	r3, #16
   1b070:	f47f af00 	bne.w	1ae74 <smp_pairing_req+0x20>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b074:	2105      	movs	r1, #5
   1b076:	4628      	mov	r0, r5
   1b078:	f00d fd70 	bl	28b5c <atomic_test_bit>
   1b07c:	2800      	cmp	r0, #0
   1b07e:	d09c      	beq.n	1afba <smp_pairing_req+0x166>
		if (smp->method == JUST_WORKS) {
   1b080:	7a23      	ldrb	r3, [r4, #8]
   1b082:	2b00      	cmp	r3, #0
   1b084:	d1c9      	bne.n	1b01a <smp_pairing_req+0x1c6>
   1b086:	e798      	b.n	1afba <smp_pairing_req+0x166>
	switch (smp->method) {
   1b088:	2a06      	cmp	r2, #6
   1b08a:	d85e      	bhi.n	1b14a <smp_pairing_req+0x2f6>
   1b08c:	e8df f002 	tbb	[pc, r2]
   1b090:	5d2d5518 	.word	0x5d2d5518
   1b094:	5d5d      	.short	0x5d5d
   1b096:	04          	.byte	0x04
   1b097:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1b098:	2e00      	cmp	r6, #0
   1b09a:	d05b      	beq.n	1b154 <smp_pairing_req+0x300>
   1b09c:	68f3      	ldr	r3, [r6, #12]
   1b09e:	2b00      	cmp	r3, #0
   1b0a0:	d058      	beq.n	1b154 <smp_pairing_req+0x300>
			struct bt_conn_oob_info info = {
   1b0a2:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b0a4:	210a      	movs	r1, #10
   1b0a6:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1b0a8:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b0ac:	f00d fe49 	bl	28d42 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1b0b0:	68f3      	ldr	r3, [r6, #12]
   1b0b2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b0b6:	a901      	add	r1, sp, #4
   1b0b8:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b0ba:	7a23      	ldrb	r3, [r4, #8]
   1b0bc:	2b00      	cmp	r3, #0
   1b0be:	d14c      	bne.n	1b15a <smp_pairing_req+0x306>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b0c0:	210f      	movs	r1, #15
   1b0c2:	4628      	mov	r0, r5
   1b0c4:	f00d fd4a 	bl	28b5c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b0c8:	4680      	mov	r8, r0
   1b0ca:	2800      	cmp	r0, #0
   1b0cc:	d145      	bne.n	1b15a <smp_pairing_req+0x306>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b0ce:	2f00      	cmp	r7, #0
   1b0d0:	d043      	beq.n	1b15a <smp_pairing_req+0x306>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1b0d2:	697b      	ldr	r3, [r7, #20]
   1b0d4:	2b00      	cmp	r3, #0
   1b0d6:	d040      	beq.n	1b15a <smp_pairing_req+0x306>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b0d8:	4628      	mov	r0, r5
   1b0da:	210a      	movs	r1, #10
   1b0dc:	f00d fe31 	bl	28d42 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1b0e0:	697b      	ldr	r3, [r7, #20]
   1b0e2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1b0e6:	4798      	blx	r3
		return 0;
   1b0e8:	e6c6      	b.n	1ae78 <smp_pairing_req+0x24>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1b0ea:	2104      	movs	r1, #4
   1b0ec:	eb0d 0001 	add.w	r0, sp, r1
   1b0f0:	f003 fb96 	bl	1e820 <bt_rand>
   1b0f4:	2800      	cmp	r0, #0
   1b0f6:	f47f aedc 	bne.w	1aeb2 <smp_pairing_req+0x5e>
			passkey %= 1000000;
   1b0fa:	9b01      	ldr	r3, [sp, #4]
   1b0fc:	4a21      	ldr	r2, [pc, #132]	; (1b184 <smp_pairing_req+0x330>)
   1b0fe:	fbb3 f1f2 	udiv	r1, r3, r2
   1b102:	fb02 3311 	mls	r3, r2, r1, r3
   1b106:	9301      	str	r3, [sp, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1b108:	b14e      	cbz	r6, 1b11e <smp_pairing_req+0x2ca>
   1b10a:	6833      	ldr	r3, [r6, #0]
   1b10c:	b13b      	cbz	r3, 1b11e <smp_pairing_req+0x2ca>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b10e:	210b      	movs	r1, #11
   1b110:	4628      	mov	r0, r5
   1b112:	f00d fe16 	bl	28d42 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1b116:	6833      	ldr	r3, [r6, #0]
   1b118:	9901      	ldr	r1, [sp, #4]
   1b11a:	4640      	mov	r0, r8
   1b11c:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1b11e:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1b120:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1b124:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1b128:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1b12a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1b12e:	0a1b      	lsrs	r3, r3, #8
   1b130:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1b134:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1b138:	e7bf      	b.n	1b0ba <smp_pairing_req+0x266>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b13a:	4628      	mov	r0, r5
   1b13c:	210a      	movs	r1, #10
   1b13e:	f00d fe00 	bl	28d42 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1b142:	6873      	ldr	r3, [r6, #4]
   1b144:	4640      	mov	r0, r8
   1b146:	4798      	blx	r3
	if (ret) {
   1b148:	e7b7      	b.n	1b0ba <smp_pairing_req+0x266>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b14a:	480f      	ldr	r0, [pc, #60]	; (1b188 <smp_pairing_req+0x334>)
   1b14c:	2145      	movs	r1, #69	; 0x45
   1b14e:	f00b f9e4 	bl	2651a <z_log_minimal_printk>
	if (ret) {
   1b152:	e6ae      	b.n	1aeb2 <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1b154:	f04f 0802 	mov.w	r8, #2
   1b158:	e68e      	b.n	1ae78 <smp_pairing_req+0x24>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1b15a:	2103      	movs	r1, #3
   1b15c:	4620      	mov	r0, r4
   1b15e:	f00d fdf0 	bl	28d42 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1b162:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1b164:	f00d fded 	bl	28d42 <atomic_set_bit>
}
   1b168:	b002      	add	sp, #8
   1b16a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   1b16e:	f00d be1b 	b.w	28da8 <send_pairing_rsp>
   1b172:	bf00      	nop
   1b174:	200034b2 	.word	0x200034b2
   1b178:	0002cf30 	.word	0x0002cf30
   1b17c:	0002cf49 	.word	0x0002cf49
   1b180:	0002cc50 	.word	0x0002cc50
   1b184:	000f4240 	.word	0x000f4240
   1b188:	0002cbe9 	.word	0x0002cbe9
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b18c:	f894 8008 	ldrb.w	r8, [r4, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1b190:	f1b8 0f00 	cmp.w	r8, #0
   1b194:	d10e      	bne.n	1b1b4 <smp_pairing_req+0x360>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b196:	210f      	movs	r1, #15
   1b198:	4628      	mov	r0, r5
   1b19a:	f00d fcdf 	bl	28b5c <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b19e:	b948      	cbnz	r0, 1b1b4 <smp_pairing_req+0x360>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b1a0:	b147      	cbz	r7, 1b1b4 <smp_pairing_req+0x360>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1b1a2:	697b      	ldr	r3, [r7, #20]
   1b1a4:	b133      	cbz	r3, 1b1b4 <smp_pairing_req+0x360>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b1a6:	4628      	mov	r0, r5
   1b1a8:	210a      	movs	r1, #10
   1b1aa:	f00d fdca 	bl	28d42 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1b1ae:	697b      	ldr	r3, [r7, #20]
   1b1b0:	4630      	mov	r0, r6
   1b1b2:	e798      	b.n	1b0e6 <smp_pairing_req+0x292>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1b1b4:	210c      	movs	r1, #12
   1b1b6:	4620      	mov	r0, r4
   1b1b8:	e7d4      	b.n	1b164 <smp_pairing_req+0x310>
   1b1ba:	bf00      	nop

0001b1bc <compute_and_check_and_send_periph_dhcheck>:
{
   1b1bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   1b1c0:	2210      	movs	r2, #16
{
   1b1c2:	b0a3      	sub	sp, #140	; 0x8c
   1b1c4:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1b1c6:	2100      	movs	r1, #0
   1b1c8:	eb0d 0002 	add.w	r0, sp, r2
   1b1cc:	f00c f836 	bl	2723c <memset>
	switch (smp->method) {
   1b1d0:	7a22      	ldrb	r2, [r4, #8]
   1b1d2:	2a05      	cmp	r2, #5
   1b1d4:	f200 8092 	bhi.w	1b2fc <compute_and_check_and_send_periph_dhcheck+0x140>
   1b1d8:	e8df f002 	tbb	[pc, r2]
   1b1dc:	09030309 	.word	0x09030309
   1b1e0:	8790      	.short	0x8790
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1b1e2:	2204      	movs	r2, #4
   1b1e4:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1b1e8:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1b1ea:	f00c f81c 	bl	27226 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1b1ee:	4b6c      	ldr	r3, [pc, #432]	; (1b3a0 <compute_and_check_and_send_periph_dhcheck+0x1e4>)
		   &smp->chan.chan.conn->le.init_addr,
   1b1f0:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   1b1f4:	aa14      	add	r2, sp, #80	; 0x50
   1b1f6:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1b1fa:	6818      	ldr	r0, [r3, #0]
   1b1fc:	6859      	ldr	r1, [r3, #4]
   1b1fe:	4615      	mov	r5, r2
   1b200:	c503      	stmia	r5!, {r0, r1}
   1b202:	3308      	adds	r3, #8
   1b204:	42b3      	cmp	r3, r6
   1b206:	462a      	mov	r2, r5
   1b208:	d1f7      	bne.n	1b1fa <compute_and_check_and_send_periph_dhcheck+0x3e>
   1b20a:	6818      	ldr	r0, [r3, #0]
   1b20c:	791b      	ldrb	r3, [r3, #4]
   1b20e:	6028      	str	r0, [r5, #0]
   1b210:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1b212:	ad0c      	add	r5, sp, #48	; 0x30
   1b214:	2220      	movs	r2, #32
   1b216:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1b21a:	4628      	mov	r0, r5
   1b21c:	f7ff fc06 	bl	1aa2c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1b220:	4860      	ldr	r0, [pc, #384]	; (1b3a4 <compute_and_check_and_send_periph_dhcheck+0x1e8>)
   1b222:	ab08      	add	r3, sp, #32
   1b224:	2220      	movs	r2, #32
   1b226:	4629      	mov	r1, r5
   1b228:	f00d fcd1 	bl	28bce <bt_smp_aes_cmac>
	if (err) {
   1b22c:	2800      	cmp	r0, #0
   1b22e:	f040 80b4 	bne.w	1b39a <compute_and_check_and_send_periph_dhcheck+0x1de>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1b232:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1b236:	2210      	movs	r2, #16
   1b238:	4639      	mov	r1, r7
   1b23a:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1b23e:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1b242:	f7ff fbf3 	bl	1aa2c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1b246:	2210      	movs	r2, #16
   1b248:	4641      	mov	r1, r8
   1b24a:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1b24e:	f7ff fbed 	bl	1aa2c <sys_memcpy_swap>
	m[37] = a1->type;
   1b252:	f899 3097 	ldrb.w	r3, [r9, #151]	; 0x97
   1b256:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1b25a:	2206      	movs	r2, #6
   1b25c:	f109 0198 	add.w	r1, r9, #152	; 0x98
   1b260:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1b264:	f7ff fbe2 	bl	1aa2c <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1b268:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1b26c:	f899 309e 	ldrb.w	r3, [r9, #158]	; 0x9e
   1b270:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1b274:	2206      	movs	r2, #6
   1b276:	f109 019f 	add.w	r1, r9, #159	; 0x9f
   1b27a:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1b27e:	f7ff fbd5 	bl	1aa2c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1b282:	4633      	mov	r3, r6
   1b284:	2235      	movs	r2, #53	; 0x35
   1b286:	a914      	add	r1, sp, #80	; 0x50
   1b288:	a808      	add	r0, sp, #32
   1b28a:	f00d fca0 	bl	28bce <bt_smp_aes_cmac>
	if (err) {
   1b28e:	2800      	cmp	r0, #0
   1b290:	f040 8083 	bne.w	1b39a <compute_and_check_and_send_periph_dhcheck+0x1de>
	sys_mem_swap(mackey, 16);
   1b294:	4630      	mov	r0, r6
   1b296:	f00d fcd5 	bl	28c44 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1b29a:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   1b29e:	2301      	movs	r3, #1
   1b2a0:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1b2a4:	2235      	movs	r2, #53	; 0x35
   1b2a6:	464b      	mov	r3, r9
   1b2a8:	a914      	add	r1, sp, #80	; 0x50
   1b2aa:	a808      	add	r0, sp, #32
   1b2ac:	f00d fc8f 	bl	28bce <bt_smp_aes_cmac>
	if (err) {
   1b2b0:	2800      	cmp	r0, #0
   1b2b2:	d172      	bne.n	1b39a <compute_and_check_and_send_periph_dhcheck+0x1de>
	sys_mem_swap(ltk, 16);
   1b2b4:	4648      	mov	r0, r9
   1b2b6:	f00d fcc5 	bl	28c44 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   1b2ba:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1b2be:	aa14      	add	r2, sp, #80	; 0x50
   1b2c0:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1b2c2:	f103 0297 	add.w	r2, r3, #151	; 0x97
		   &smp->chan.chan.conn->le.resp_addr,
   1b2c6:	339e      	adds	r3, #158	; 0x9e
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1b2c8:	9301      	str	r3, [sp, #4]
   1b2ca:	f104 0311 	add.w	r3, r4, #17
   1b2ce:	9202      	str	r2, [sp, #8]
   1b2d0:	9300      	str	r3, [sp, #0]
   1b2d2:	463a      	mov	r2, r7
   1b2d4:	ab04      	add	r3, sp, #16
   1b2d6:	4641      	mov	r1, r8
   1b2d8:	4630      	mov	r0, r6
   1b2da:	f00d fcc1 	bl	28c60 <smp_f6>
   1b2de:	b198      	cbz	r0, 1b308 <compute_and_check_and_send_periph_dhcheck+0x14c>
		BT_ERR("Calculate local DHKey check failed");
   1b2e0:	4831      	ldr	r0, [pc, #196]	; (1b3a8 <compute_and_check_and_send_periph_dhcheck+0x1ec>)
   1b2e2:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Calculate LTK failed");
   1b2e4:	f00b f919 	bl	2651a <z_log_minimal_printk>
   1b2e8:	e00c      	b.n	1b304 <compute_and_check_and_send_periph_dhcheck+0x148>
		if (smp->oobd_remote) {
   1b2ea:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1b2ee:	2900      	cmp	r1, #0
   1b2f0:	f43f af7d 	beq.w	1b1ee <compute_and_check_and_send_periph_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1b2f4:	2210      	movs	r2, #16
   1b2f6:	eb0d 0002 	add.w	r0, sp, r2
   1b2fa:	e776      	b.n	1b1ea <compute_and_check_and_send_periph_dhcheck+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b2fc:	482b      	ldr	r0, [pc, #172]	; (1b3ac <compute_and_check_and_send_periph_dhcheck+0x1f0>)
   1b2fe:	2145      	movs	r1, #69	; 0x45
   1b300:	f00b f90b 	bl	2651a <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b304:	2008      	movs	r0, #8
   1b306:	e043      	b.n	1b390 <compute_and_check_and_send_periph_dhcheck+0x1d4>
	if (smp->method == LE_SC_OOB) {
   1b308:	7a23      	ldrb	r3, [r4, #8]
   1b30a:	2b05      	cmp	r3, #5
   1b30c:	d107      	bne.n	1b31e <compute_and_check_and_send_periph_dhcheck+0x162>
		if (smp->oobd_local) {
   1b30e:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1b312:	2210      	movs	r2, #16
   1b314:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   1b318:	b1b1      	cbz	r1, 1b348 <compute_and_check_and_send_periph_dhcheck+0x18c>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1b31a:	f00b ff84 	bl	27226 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1b31e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1b322:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1b324:	f103 029e 	add.w	r2, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr,
   1b328:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1b32a:	9301      	str	r3, [sp, #4]
   1b32c:	f104 030a 	add.w	r3, r4, #10
   1b330:	9202      	str	r2, [sp, #8]
   1b332:	9300      	str	r3, [sp, #0]
   1b334:	4642      	mov	r2, r8
   1b336:	ab04      	add	r3, sp, #16
   1b338:	4639      	mov	r1, r7
   1b33a:	4630      	mov	r0, r6
   1b33c:	f00d fc90 	bl	28c60 <smp_f6>
   1b340:	b128      	cbz	r0, 1b34e <compute_and_check_and_send_periph_dhcheck+0x192>
		BT_ERR("Calculate remote DHKey check failed");
   1b342:	481b      	ldr	r0, [pc, #108]	; (1b3b0 <compute_and_check_and_send_periph_dhcheck+0x1f4>)
   1b344:	2145      	movs	r1, #69	; 0x45
   1b346:	e7cd      	b.n	1b2e4 <compute_and_check_and_send_periph_dhcheck+0x128>
			memset(r, 0, sizeof(r));
   1b348:	f00b ff78 	bl	2723c <memset>
   1b34c:	e7e7      	b.n	1b31e <compute_and_check_and_send_periph_dhcheck+0x162>
	if (memcmp(smp->e, re, 16)) {
   1b34e:	4629      	mov	r1, r5
   1b350:	2210      	movs	r2, #16
   1b352:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1b356:	f00b ff3d 	bl	271d4 <memcmp>
   1b35a:	4605      	mov	r5, r0
   1b35c:	b9d8      	cbnz	r0, 1b396 <compute_and_check_and_send_periph_dhcheck+0x1da>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1b35e:	210d      	movs	r1, #13
   1b360:	4620      	mov	r0, r4
   1b362:	f00d fd02 	bl	28d6a <smp_create_pdu.constprop.0>
	if (!buf) {
   1b366:	4606      	mov	r6, r0
   1b368:	2800      	cmp	r0, #0
   1b36a:	d0cb      	beq.n	1b304 <compute_and_check_and_send_periph_dhcheck+0x148>
   1b36c:	2110      	movs	r1, #16
   1b36e:	3008      	adds	r0, #8
   1b370:	f001 fb5a 	bl	1ca28 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1b374:	2210      	movs	r2, #16
   1b376:	a914      	add	r1, sp, #80	; 0x50
   1b378:	f00b ff55 	bl	27226 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1b37c:	462a      	mov	r2, r5
   1b37e:	4631      	mov	r1, r6
   1b380:	4620      	mov	r0, r4
   1b382:	f00d fc42 	bl	28c0a <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1b386:	1d20      	adds	r0, r4, #4
   1b388:	2101      	movs	r1, #1
   1b38a:	f00d fcda 	bl	28d42 <atomic_set_bit>
	return 0;
   1b38e:	4628      	mov	r0, r5
}
   1b390:	b023      	add	sp, #140	; 0x8c
   1b392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1b396:	200b      	movs	r0, #11
   1b398:	e7fa      	b.n	1b390 <compute_and_check_and_send_periph_dhcheck+0x1d4>
		BT_ERR("Calculate LTK failed");
   1b39a:	4806      	ldr	r0, [pc, #24]	; (1b3b4 <compute_and_check_and_send_periph_dhcheck+0x1f8>)
   1b39c:	2145      	movs	r1, #69	; 0x45
   1b39e:	e7a1      	b.n	1b2e4 <compute_and_check_and_send_periph_dhcheck+0x128>
   1b3a0:	0002a148 	.word	0x0002a148
   1b3a4:	0002cf62 	.word	0x0002cf62
   1b3a8:	0002cc82 	.word	0x0002cc82
   1b3ac:	0002cbe9 	.word	0x0002cbe9
   1b3b0:	0002ccaa 	.word	0x0002ccaa
   1b3b4:	0002ccd3 	.word	0x0002ccd3

0001b3b8 <bt_smp_connected>:
{
   1b3b8:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1b3ba:	490b      	ldr	r1, [pc, #44]	; (1b3e8 <bt_smp_connected+0x30>)
{
   1b3bc:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1b3be:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1b3c2:	3094      	adds	r0, #148	; 0x94
   1b3c4:	f005 fe80 	bl	210c8 <k_work_init_delayable>
	smp_reset(smp);
   1b3c8:	4628      	mov	r0, r5
   1b3ca:	f00d fd62 	bl	28e92 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b3ce:	f3bf 8f5b 	dmb	ish
   1b3d2:	4b06      	ldr	r3, [pc, #24]	; (1b3ec <bt_smp_connected+0x34>)
   1b3d4:	34c4      	adds	r4, #196	; 0xc4
   1b3d6:	e854 2f00 	ldrex	r2, [r4]
   1b3da:	e844 3100 	strex	r1, r3, [r4]
   1b3de:	2900      	cmp	r1, #0
   1b3e0:	d1f9      	bne.n	1b3d6 <bt_smp_connected+0x1e>
   1b3e2:	f3bf 8f5b 	dmb	ish
}
   1b3e6:	bd38      	pop	{r3, r4, r5, pc}
   1b3e8:	0001be61 	.word	0x0001be61
   1b3ec:	20001a78 	.word	0x20001a78

0001b3f0 <smp_pairing_confirm>:
{
   1b3f0:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1b3f2:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b3f4:	1d05      	adds	r5, r0, #4
{
   1b3f6:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b3f8:	210b      	movs	r1, #11
   1b3fa:	4628      	mov	r0, r5
   1b3fc:	f00d fbd8 	bl	28bb0 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1b400:	4631      	mov	r1, r6
   1b402:	2210      	movs	r2, #16
   1b404:	f104 0017 	add.w	r0, r4, #23
   1b408:	f00b ff0d 	bl	27226 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b40c:	2105      	movs	r1, #5
   1b40e:	4628      	mov	r0, r5
   1b410:	f00d fba4 	bl	28b5c <atomic_test_bit>
   1b414:	b920      	cbnz	r0, 1b420 <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
   1b416:	4620      	mov	r0, r4
}
   1b418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1b41c:	f00d bdb7 	b.w	28f8e <legacy_pairing_confirm>
	switch (smp->method) {
   1b420:	7a22      	ldrb	r2, [r4, #8]
   1b422:	2a01      	cmp	r2, #1
   1b424:	d009      	beq.n	1b43a <smp_pairing_confirm+0x4a>
   1b426:	2a02      	cmp	r2, #2
   1b428:	d113      	bne.n	1b452 <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b42a:	4620      	mov	r0, r4
   1b42c:	2104      	movs	r1, #4
   1b42e:	f00d fc88 	bl	28d42 <atomic_set_bit>
}
   1b432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1b436:	f7ff bbd7 	b.w	1abe8 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1b43a:	210a      	movs	r1, #10
   1b43c:	4628      	mov	r0, r5
   1b43e:	f00d fb8d 	bl	28b5c <atomic_test_bit>
   1b442:	2800      	cmp	r0, #0
   1b444:	d0f1      	beq.n	1b42a <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1b446:	4628      	mov	r0, r5
   1b448:	2100      	movs	r1, #0
   1b44a:	f00d fc7a 	bl	28d42 <atomic_set_bit>
			return 0;
   1b44e:	2000      	movs	r0, #0
}
   1b450:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b452:	4803      	ldr	r0, [pc, #12]	; (1b460 <smp_pairing_confirm+0x70>)
   1b454:	2145      	movs	r1, #69	; 0x45
   1b456:	f00b f860 	bl	2651a <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b45a:	2008      	movs	r0, #8
   1b45c:	e7f8      	b.n	1b450 <smp_pairing_confirm+0x60>
   1b45e:	bf00      	nop
   1b460:	0002cbe9 	.word	0x0002cbe9

0001b464 <smp_pairing_random>:
{
   1b464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b468:	b09e      	sub	sp, #120	; 0x78
   1b46a:	4604      	mov	r4, r0
   1b46c:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b46e:	f7ff fa7d 	bl	1a96c <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1b472:	f104 0837 	add.w	r8, r4, #55	; 0x37
   1b476:	68a9      	ldr	r1, [r5, #8]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b478:	4607      	mov	r7, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1b47a:	2210      	movs	r2, #16
   1b47c:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b47e:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1b480:	f00b fed1 	bl	27226 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b484:	2105      	movs	r1, #5
   1b486:	4630      	mov	r0, r6
   1b488:	f00d fb68 	bl	28b5c <atomic_test_bit>
   1b48c:	2800      	cmp	r0, #0
   1b48e:	d141      	bne.n	1b514 <smp_pairing_random+0xb0>
	struct bt_conn *conn = smp->chan.chan.conn;
   1b490:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1b494:	f104 0747 	add.w	r7, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1b498:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1b49c:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1b49e:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1b4a0:	9201      	str	r2, [sp, #4]
   1b4a2:	9300      	str	r3, [sp, #0]
   1b4a4:	9502      	str	r5, [sp, #8]
   1b4a6:	f104 0310 	add.w	r3, r4, #16
   1b4aa:	f104 0209 	add.w	r2, r4, #9
   1b4ae:	4641      	mov	r1, r8
   1b4b0:	4638      	mov	r0, r7
   1b4b2:	f00d fd11 	bl	28ed8 <smp_c1>
	if (err) {
   1b4b6:	b9e8      	cbnz	r0, 1b4f4 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1b4b8:	2210      	movs	r2, #16
   1b4ba:	4629      	mov	r1, r5
   1b4bc:	f104 0017 	add.w	r0, r4, #23
   1b4c0:	f00b fe88 	bl	271d4 <memcmp>
   1b4c4:	2800      	cmp	r0, #0
   1b4c6:	f040 8087 	bne.w	1b5d8 <smp_pairing_random+0x174>
	memcpy(out, r2, 8);
   1b4ca:	2208      	movs	r2, #8
   1b4cc:	4641      	mov	r1, r8
   1b4ce:	4628      	mov	r0, r5
   1b4d0:	f00b fea9 	bl	27226 <memcpy>
	memcpy(out + 8, r1, 8);
   1b4d4:	2208      	movs	r2, #8
   1b4d6:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1b4da:	a80c      	add	r0, sp, #48	; 0x30
   1b4dc:	f00b fea3 	bl	27226 <memcpy>
	return bt_encrypt_le(k, out, out);
   1b4e0:	462a      	mov	r2, r5
   1b4e2:	4629      	mov	r1, r5
   1b4e4:	4638      	mov	r0, r7
   1b4e6:	f00e f884 	bl	295f2 <bt_encrypt_le>
		if (err) {
   1b4ea:	b128      	cbz	r0, 1b4f8 <smp_pairing_random+0x94>
			BT_ERR("Calculate STK failed");
   1b4ec:	4868      	ldr	r0, [pc, #416]	; (1b690 <smp_pairing_random+0x22c>)
   1b4ee:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Calculate confirm failed");
   1b4f0:	f00b f813 	bl	2651a <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b4f4:	2508      	movs	r5, #8
   1b4f6:	e070      	b.n	1b5da <smp_pairing_random+0x176>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1b4f8:	4629      	mov	r1, r5
   1b4fa:	2210      	movs	r2, #16
   1b4fc:	4638      	mov	r0, r7
   1b4fe:	f00b fe92 	bl	27226 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1b502:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1b504:	4630      	mov	r0, r6
   1b506:	f00d fc1c 	bl	28d42 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1b50a:	4620      	mov	r0, r4
   1b50c:	f00d fc65 	bl	28dda <smp_send_pairing_random>
   1b510:	4605      	mov	r5, r0
   1b512:	e062      	b.n	1b5da <smp_pairing_random+0x176>
	switch (smp->method) {
   1b514:	7a22      	ldrb	r2, [r4, #8]
   1b516:	2a05      	cmp	r2, #5
   1b518:	f200 80a0 	bhi.w	1b65c <smp_pairing_random+0x1f8>
   1b51c:	e8df f002 	tbb	[pc, r2]
   1b520:	033f3f39 	.word	0x033f3f39
   1b524:	839e      	.short	0x839e
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1b526:	4b5b      	ldr	r3, [pc, #364]	; (1b694 <smp_pairing_random+0x230>)
   1b528:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   1b52a:	2220      	movs	r2, #32
   1b52c:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1b530:	a80a      	add	r0, sp, #40	; 0x28
   1b532:	f7ff fa7b 	bl	1aa2c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1b536:	2220      	movs	r2, #32
   1b538:	4629      	mov	r1, r5
   1b53a:	a812      	add	r0, sp, #72	; 0x48
   1b53c:	f7ff fa76 	bl	1aa2c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1b540:	2210      	movs	r2, #16
   1b542:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1b546:	a81a      	add	r0, sp, #104	; 0x68
   1b548:	f7ff fa70 	bl	1aa2c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1b54c:	2210      	movs	r2, #16
   1b54e:	4641      	mov	r1, r8
   1b550:	a806      	add	r0, sp, #24
   1b552:	f7ff fa6b 	bl	1aa2c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1b556:	ab06      	add	r3, sp, #24
   1b558:	2250      	movs	r2, #80	; 0x50
   1b55a:	a90a      	add	r1, sp, #40	; 0x28
   1b55c:	4618      	mov	r0, r3
   1b55e:	f00d fb36 	bl	28bce <bt_smp_aes_cmac>
	if (err) {
   1b562:	2800      	cmp	r0, #0
   1b564:	d1c6      	bne.n	1b4f4 <smp_pairing_random+0x90>
	memcpy(passkey, xs + 12, 4);
   1b566:	2204      	movs	r2, #4
   1b568:	a909      	add	r1, sp, #36	; 0x24
   1b56a:	a805      	add	r0, sp, #20
   1b56c:	f00b fe5b 	bl	27226 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1b570:	9b05      	ldr	r3, [sp, #20]
   1b572:	4a49      	ldr	r2, [pc, #292]	; (1b698 <smp_pairing_random+0x234>)
   1b574:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b576:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1b578:	fbb3 f1f2 	udiv	r1, r3, r2
   1b57c:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b580:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1b582:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b584:	f00d fbdd 	bl	28d42 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1b588:	68bb      	ldr	r3, [r7, #8]
   1b58a:	9905      	ldr	r1, [sp, #20]
   1b58c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b590:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1b592:	210d      	movs	r1, #13
   1b594:	4620      	mov	r0, r4
   1b596:	f00d fbd4 	bl	28d42 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1b59a:	2110      	movs	r1, #16
   1b59c:	e7b2      	b.n	1b504 <smp_pairing_random+0xa0>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b59e:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1b5a2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1b5a6:	493b      	ldr	r1, [pc, #236]	; (1b694 <smp_pairing_random+0x230>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b5a8:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1b5aa:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b5ac:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1b5b0:	9500      	str	r5, [sp, #0]
   1b5b2:	6809      	ldr	r1, [r1, #0]
   1b5b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b5b8:	4642      	mov	r2, r8
   1b5ba:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b5be:	f00d fb9b 	bl	28cf8 <smp_f4>
   1b5c2:	b110      	cbz	r0, 1b5ca <smp_pairing_random+0x166>
		BT_ERR("Calculate confirm failed");
   1b5c4:	4835      	ldr	r0, [pc, #212]	; (1b69c <smp_pairing_random+0x238>)
   1b5c6:	2145      	movs	r1, #69	; 0x45
   1b5c8:	e792      	b.n	1b4f0 <smp_pairing_random+0x8c>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1b5ca:	2210      	movs	r2, #16
   1b5cc:	4629      	mov	r1, r5
   1b5ce:	f104 0017 	add.w	r0, r4, #23
   1b5d2:	f00b fdff 	bl	271d4 <memcmp>
   1b5d6:	b120      	cbz	r0, 1b5e2 <smp_pairing_random+0x17e>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1b5d8:	2504      	movs	r5, #4
}
   1b5da:	4628      	mov	r0, r5
   1b5dc:	b01e      	add	sp, #120	; 0x78
   1b5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
   1b5e2:	2103      	movs	r1, #3
   1b5e4:	4620      	mov	r0, r4
   1b5e6:	f00d fbac 	bl	28d42 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1b5ea:	f00d fbf6 	bl	28dda <smp_send_pairing_random>
		if (err) {
   1b5ee:	4605      	mov	r5, r0
   1b5f0:	2800      	cmp	r0, #0
   1b5f2:	d1f2      	bne.n	1b5da <smp_pairing_random+0x176>
		smp->passkey_round++;
   1b5f4:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1b5f8:	3301      	adds	r3, #1
   1b5fa:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1b5fc:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1b5fe:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1b602:	d108      	bne.n	1b616 <smp_pairing_random+0x1b2>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1b604:	4620      	mov	r0, r4
   1b606:	210d      	movs	r1, #13
   1b608:	f00d fb9b 	bl	28d42 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1b60c:	2110      	movs	r1, #16
   1b60e:	4630      	mov	r0, r6
   1b610:	f00d fb97 	bl	28d42 <atomic_set_bit>
			return 0;
   1b614:	e7e1      	b.n	1b5da <smp_pairing_random+0x176>
		if (bt_rand(smp->prnd, 16)) {
   1b616:	2110      	movs	r1, #16
   1b618:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1b61c:	f003 f900 	bl	1e820 <bt_rand>
   1b620:	2800      	cmp	r0, #0
   1b622:	d0da      	beq.n	1b5da <smp_pairing_random+0x176>
   1b624:	e766      	b.n	1b4f4 <smp_pairing_random+0x90>
		if (bt_rand(smp->prnd, 16)) {
   1b626:	2110      	movs	r1, #16
   1b628:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1b62c:	f003 f8f8 	bl	1e820 <bt_rand>
   1b630:	2800      	cmp	r0, #0
   1b632:	f47f af5f 	bne.w	1b4f4 <smp_pairing_random+0x90>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1b636:	b1b7      	cbz	r7, 1b666 <smp_pairing_random+0x202>
   1b638:	68fb      	ldr	r3, [r7, #12]
   1b63a:	b1a3      	cbz	r3, 1b666 <smp_pairing_random+0x202>
			struct bt_conn_oob_info info = {
   1b63c:	4b18      	ldr	r3, [pc, #96]	; (1b6a0 <smp_pairing_random+0x23c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1b63e:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1b640:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   1b644:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1b648:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1b64a:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1b64c:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1b650:	d40b      	bmi.n	1b66a <smp_pairing_random+0x206>
				     BT_CONN_OOB_BOTH_PEERS :
   1b652:	2b00      	cmp	r3, #0
   1b654:	bf0c      	ite	eq
   1b656:	2003      	moveq	r0, #3
   1b658:	2001      	movne	r0, #1
   1b65a:	e009      	b.n	1b670 <smp_pairing_random+0x20c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b65c:	4811      	ldr	r0, [pc, #68]	; (1b6a4 <smp_pairing_random+0x240>)
   1b65e:	2145      	movs	r1, #69	; 0x45
   1b660:	f00a ff5b 	bl	2651a <z_log_minimal_printk>
   1b664:	e746      	b.n	1b4f4 <smp_pairing_random+0x90>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1b666:	2502      	movs	r5, #2
   1b668:	e7b7      	b.n	1b5da <smp_pairing_random+0x176>
				     BT_CONN_OOB_BOTH_PEERS :
   1b66a:	2b00      	cmp	r3, #0
   1b66c:	bf18      	it	ne
   1b66e:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1b670:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1b672:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   1b676:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1b67a:	4630      	mov	r0, r6
   1b67c:	210c      	movs	r1, #12
   1b67e:	f00d fb60 	bl	28d42 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1b682:	68fb      	ldr	r3, [r7, #12]
   1b684:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b688:	a90a      	add	r1, sp, #40	; 0x28
   1b68a:	4798      	blx	r3
			return 0;
   1b68c:	e7a5      	b.n	1b5da <smp_pairing_random+0x176>
   1b68e:	bf00      	nop
   1b690:	0002cced 	.word	0x0002cced
   1b694:	20002678 	.word	0x20002678
   1b698:	000f4240 	.word	0x000f4240
   1b69c:	0002cd07 	.word	0x0002cd07
   1b6a0:	0002a148 	.word	0x0002a148
   1b6a4:	0002cbe9 	.word	0x0002cbe9

0001b6a8 <bt_smp_start_security>:
{
   1b6a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1b6ac:	f890 8003 	ldrb.w	r8, [r0, #3]
   1b6b0:	f1b8 0f01 	cmp.w	r8, #1
{
   1b6b4:	4605      	mov	r5, r0
	switch (conn->role) {
   1b6b6:	d005      	beq.n	1b6c4 <bt_smp_start_security+0x1c>
		return -EINVAL;
   1b6b8:	f06f 0415 	mvn.w	r4, #21
}
   1b6bc:	4620      	mov	r0, r4
   1b6be:	b003      	add	sp, #12
   1b6c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1b6c4:	f7ff f9d8 	bl	1aa78 <smp_chan_get>
	if (!smp) {
   1b6c8:	4606      	mov	r6, r0
   1b6ca:	2800      	cmp	r0, #0
   1b6cc:	f000 80b1 	beq.w	1b832 <bt_smp_start_security+0x18a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1b6d0:	1d07      	adds	r7, r0, #4
   1b6d2:	2104      	movs	r1, #4
   1b6d4:	4638      	mov	r0, r7
   1b6d6:	f00d fa41 	bl	28b5c <atomic_test_bit>
   1b6da:	2800      	cmp	r0, #0
   1b6dc:	f040 80ac 	bne.w	1b838 <bt_smp_start_security+0x190>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b6e0:	2103      	movs	r1, #3
   1b6e2:	4638      	mov	r0, r7
   1b6e4:	f00d fa3a 	bl	28b5c <atomic_test_bit>
   1b6e8:	b110      	cbz	r0, 1b6f0 <bt_smp_start_security+0x48>
		return -EBUSY;
   1b6ea:	f06f 040f 	mvn.w	r4, #15
   1b6ee:	e7e5      	b.n	1b6bc <bt_smp_start_security+0x14>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b6f0:	4641      	mov	r1, r8
   1b6f2:	4638      	mov	r0, r7
   1b6f4:	f00d fa32 	bl	28b5c <atomic_test_bit>
   1b6f8:	2800      	cmp	r0, #0
   1b6fa:	d1f6      	bne.n	1b6ea <bt_smp_start_security+0x42>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b6fc:	4630      	mov	r0, r6
   1b6fe:	f7ff f935 	bl	1a96c <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1b702:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
   1b706:	7a9b      	ldrb	r3, [r3, #10]
   1b708:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b70a:	4604      	mov	r4, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1b70c:	d042      	beq.n	1b794 <bt_smp_start_security+0xec>
   1b70e:	d832      	bhi.n	1b776 <bt_smp_start_security+0xce>
   1b710:	3b01      	subs	r3, #1
   1b712:	2b01      	cmp	r3, #1
   1b714:	d94a      	bls.n	1b7ac <bt_smp_start_security+0x104>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1b716:	210a      	movs	r1, #10
   1b718:	1d28      	adds	r0, r5, #4
   1b71a:	f00d fa1f 	bl	28b5c <atomic_test_bit>
   1b71e:	2800      	cmp	r0, #0
   1b720:	d1ca      	bne.n	1b6b8 <bt_smp_start_security+0x10>
	if (!conn->le.keys) {
   1b722:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1b726:	b983      	cbnz	r3, 1b74a <bt_smp_start_security+0xa2>
						     conn->id, &conn->le.dst);
   1b728:	f105 0490 	add.w	r4, r5, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1b72c:	7a29      	ldrb	r1, [r5, #8]
   1b72e:	4622      	mov	r2, r4
   1b730:	2020      	movs	r0, #32
   1b732:	f000 fca7 	bl	1c084 <bt_keys_find>
   1b736:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1b73a:	b930      	cbnz	r0, 1b74a <bt_smp_start_security+0xa2>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1b73c:	7a29      	ldrb	r1, [r5, #8]
   1b73e:	4622      	mov	r2, r4
   1b740:	2004      	movs	r0, #4
   1b742:	f000 fc9f 	bl	1c084 <bt_keys_find>
   1b746:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1b74a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1b74e:	2b00      	cmp	r3, #0
   1b750:	d0b2      	beq.n	1b6b8 <bt_smp_start_security+0x10>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1b752:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1b754:	f012 0f24 	tst.w	r2, #36	; 0x24
   1b758:	d0ae      	beq.n	1b6b8 <bt_smp_start_security+0x10>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1b75a:	7aa9      	ldrb	r1, [r5, #10]
   1b75c:	2902      	cmp	r1, #2
   1b75e:	d925      	bls.n	1b7ac <bt_smp_start_security+0x104>
   1b760:	7b58      	ldrb	r0, [r3, #13]
   1b762:	07c0      	lsls	r0, r0, #31
   1b764:	d5a8      	bpl.n	1b6b8 <bt_smp_start_security+0x10>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1b766:	2903      	cmp	r1, #3
   1b768:	d020      	beq.n	1b7ac <bt_smp_start_security+0x104>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1b76a:	0692      	lsls	r2, r2, #26
   1b76c:	d5a4      	bpl.n	1b6b8 <bt_smp_start_security+0x10>
   1b76e:	7b1b      	ldrb	r3, [r3, #12]
   1b770:	2b10      	cmp	r3, #16
   1b772:	d1a1      	bne.n	1b6b8 <bt_smp_start_security+0x10>
   1b774:	e01a      	b.n	1b7ac <bt_smp_start_security+0x104>
	switch (smp->chan.chan.conn->required_sec_level) {
   1b776:	2b04      	cmp	r3, #4
   1b778:	d1cd      	bne.n	1b716 <bt_smp_start_security+0x6e>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1b77a:	4630      	mov	r0, r6
   1b77c:	f7ff f914 	bl	1a9a8 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1b780:	2803      	cmp	r0, #3
   1b782:	d102      	bne.n	1b78a <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1b784:	b1fc      	cbz	r4, 1b7c6 <bt_smp_start_security+0x11e>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1b786:	68e4      	ldr	r4, [r4, #12]
   1b788:	b10c      	cbz	r4, 1b78e <bt_smp_start_security+0xe6>
   1b78a:	4b2d      	ldr	r3, [pc, #180]	; (1b840 <bt_smp_start_security+0x198>)
   1b78c:	781c      	ldrb	r4, [r3, #0]
   1b78e:	f004 0401 	and.w	r4, r4, #1
   1b792:	e009      	b.n	1b7a8 <bt_smp_start_security+0x100>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1b794:	4630      	mov	r0, r6
   1b796:	f7ff f907 	bl	1a9a8 <get_io_capa>
   1b79a:	2803      	cmp	r0, #3
   1b79c:	d111      	bne.n	1b7c2 <bt_smp_start_security+0x11a>
   1b79e:	b11c      	cbz	r4, 1b7a8 <bt_smp_start_security+0x100>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1b7a0:	68e4      	ldr	r4, [r4, #12]
   1b7a2:	3c00      	subs	r4, #0
   1b7a4:	bf18      	it	ne
   1b7a6:	2401      	movne	r4, #1
	if (!(sec_level_reachable(smp) || smp_keys_check(conn))) {
   1b7a8:	2c00      	cmp	r4, #0
   1b7aa:	d0b4      	beq.n	1b716 <bt_smp_start_security+0x6e>
	if (!conn->le.keys) {
   1b7ac:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1b7b0:	b15b      	cbz	r3, 1b7ca <bt_smp_start_security+0x122>
	if (smp_init(smp) != 0) {
   1b7b2:	4630      	mov	r0, r6
   1b7b4:	f7ff f98c 	bl	1aad0 <smp_init>
   1b7b8:	4604      	mov	r4, r0
   1b7ba:	b190      	cbz	r0, 1b7e2 <bt_smp_start_security+0x13a>
		return -ENOBUFS;
   1b7bc:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1b7c0:	e77c      	b.n	1b6bc <bt_smp_start_security+0x14>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1b7c2:	4644      	mov	r4, r8
   1b7c4:	e7f0      	b.n	1b7a8 <bt_smp_start_security+0x100>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1b7c6:	2400      	movs	r4, #0
   1b7c8:	e7e1      	b.n	1b78e <bt_smp_start_security+0xe6>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b7ca:	7a28      	ldrb	r0, [r5, #8]
   1b7cc:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1b7d0:	f000 fc18 	bl	1c004 <bt_keys_get_addr>
   1b7d4:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1b7d8:	2800      	cmp	r0, #0
   1b7da:	d1ea      	bne.n	1b7b2 <bt_smp_start_security+0x10a>
			return -ENOMEM;
   1b7dc:	f06f 040b 	mvn.w	r4, #11
   1b7e0:	e76c      	b.n	1b6bc <bt_smp_start_security+0x14>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1b7e2:	210b      	movs	r1, #11
   1b7e4:	4630      	mov	r0, r6
   1b7e6:	f00d fac0 	bl	28d6a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1b7ea:	4680      	mov	r8, r0
   1b7ec:	2800      	cmp	r0, #0
   1b7ee:	d0e5      	beq.n	1b7bc <bt_smp_start_security+0x114>
   1b7f0:	2101      	movs	r1, #1
   1b7f2:	3008      	adds	r0, #8
   1b7f4:	f001 f918 	bl	1ca28 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1b7f8:	2109      	movs	r1, #9
   1b7fa:	4681      	mov	r9, r0
   1b7fc:	4630      	mov	r0, r6
   1b7fe:	f7ff f8f7 	bl	1a9f0 <get_auth>
   1b802:	4623      	mov	r3, r4
   1b804:	f889 0000 	strb.w	r0, [r9]
   1b808:	4642      	mov	r2, r8
   1b80a:	9400      	str	r4, [sp, #0]
   1b80c:	2106      	movs	r1, #6
   1b80e:	4628      	mov	r0, r5
   1b810:	f00c f9ef 	bl	27bf2 <bt_l2cap_send_cb>
	if (err) {
   1b814:	4604      	mov	r4, r0
   1b816:	b118      	cbz	r0, 1b820 <bt_smp_start_security+0x178>
		net_buf_unref(req_buf);
   1b818:	4640      	mov	r0, r8
   1b81a:	f000 ffef 	bl	1c7fc <net_buf_unref>
		return err;
   1b81e:	e74d      	b.n	1b6bc <bt_smp_start_security+0x14>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1b820:	4638      	mov	r0, r7
   1b822:	210f      	movs	r1, #15
   1b824:	f00d fa8d 	bl	28d42 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1b828:	2101      	movs	r1, #1
   1b82a:	4630      	mov	r0, r6
   1b82c:	f00d fa89 	bl	28d42 <atomic_set_bit>
	return 0;
   1b830:	e744      	b.n	1b6bc <bt_smp_start_security+0x14>
		return -ENOTCONN;
   1b832:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1b836:	e741      	b.n	1b6bc <bt_smp_start_security+0x14>
		return -EIO;
   1b838:	f06f 0404 	mvn.w	r4, #4
   1b83c:	e73e      	b.n	1b6bc <bt_smp_start_security+0x14>
   1b83e:	bf00      	nop
   1b840:	200034b3 	.word	0x200034b3

0001b844 <smp_pairing_complete>:
{
   1b844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1b846:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   1b84a:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1b84c:	1d05      	adds	r5, r0, #4
	if (!status) {
   1b84e:	b9f1      	cbnz	r1, 1b88e <smp_pairing_complete+0x4a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1b850:	210d      	movs	r1, #13
   1b852:	4628      	mov	r0, r5
   1b854:	f00d f982 	bl	28b5c <atomic_test_bit>
		if (bond_flag) {
   1b858:	4607      	mov	r7, r0
   1b85a:	b118      	cbz	r0, 1b864 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1b85c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1b860:	f000 fd10 	bl	1c284 <bt_keys_store>
	return list->head;
   1b864:	4b31      	ldr	r3, [pc, #196]	; (1b92c <smp_pairing_complete+0xe8>)
   1b866:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1b868:	2b00      	cmp	r3, #0
   1b86a:	d051      	beq.n	1b910 <smp_pairing_complete+0xcc>
	return node->next;
   1b86c:	f853 590c 	ldr.w	r5, [r3], #-12
   1b870:	b105      	cbz	r5, 1b874 <smp_pairing_complete+0x30>
   1b872:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1b874:	681b      	ldr	r3, [r3, #0]
   1b876:	b113      	cbz	r3, 1b87e <smp_pairing_complete+0x3a>
				listener->pairing_complete(conn, bond_flag);
   1b878:	4639      	mov	r1, r7
   1b87a:	4620      	mov	r0, r4
   1b87c:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1b87e:	2d00      	cmp	r5, #0
   1b880:	d046      	beq.n	1b910 <smp_pairing_complete+0xcc>
   1b882:	68ea      	ldr	r2, [r5, #12]
   1b884:	b102      	cbz	r2, 1b888 <smp_pairing_complete+0x44>
   1b886:	3a0c      	subs	r2, #12
{
   1b888:	462b      	mov	r3, r5
   1b88a:	4615      	mov	r5, r2
   1b88c:	e7f2      	b.n	1b874 <smp_pairing_complete+0x30>
	switch (smp_err) {
   1b88e:	3901      	subs	r1, #1
   1b890:	b2c9      	uxtb	r1, r1
   1b892:	290e      	cmp	r1, #14
   1b894:	bf9c      	itt	ls
   1b896:	4b26      	ldrls	r3, [pc, #152]	; (1b930 <smp_pairing_complete+0xec>)
   1b898:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1b89a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (!status) {
   1b89e:	bf88      	it	hi
   1b8a0:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1b8a2:	b143      	cbz	r3, 1b8b6 <smp_pairing_complete+0x72>
   1b8a4:	7b1b      	ldrb	r3, [r3, #12]
   1b8a6:	bb63      	cbnz	r3, 1b902 <smp_pairing_complete+0xbe>
			bt_keys_clear(conn->le.keys);
   1b8a8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1b8ac:	f000 fc48 	bl	1c140 <bt_keys_clear>
			conn->le.keys = NULL;
   1b8b0:	2300      	movs	r3, #0
   1b8b2:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1b8b6:	2102      	movs	r1, #2
   1b8b8:	4628      	mov	r0, r5
   1b8ba:	f00d f94f 	bl	28b5c <atomic_test_bit>
   1b8be:	b940      	cbnz	r0, 1b8d2 <smp_pairing_complete+0x8e>
	switch (err) {
   1b8c0:	2f07      	cmp	r7, #7
   1b8c2:	bf96      	itet	ls
   1b8c4:	4b1b      	ldrls	r3, [pc, #108]	; (1b934 <smp_pairing_complete+0xf0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1b8c6:	211f      	movhi	r1, #31
   1b8c8:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1b8ca:	463a      	mov	r2, r7
   1b8cc:	4620      	mov	r0, r4
   1b8ce:	f7fc f8dd 	bl	17a8c <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b8d2:	2103      	movs	r1, #3
   1b8d4:	4628      	mov	r0, r5
   1b8d6:	f00d f941 	bl	28b5c <atomic_test_bit>
   1b8da:	b1c8      	cbz	r0, 1b910 <smp_pairing_complete+0xcc>
	return list->head;
   1b8dc:	4b13      	ldr	r3, [pc, #76]	; (1b92c <smp_pairing_complete+0xe8>)
   1b8de:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1b8e0:	b1b3      	cbz	r3, 1b910 <smp_pairing_complete+0xcc>
	return node->next;
   1b8e2:	f853 590c 	ldr.w	r5, [r3], #-12
   1b8e6:	b105      	cbz	r5, 1b8ea <smp_pairing_complete+0xa6>
   1b8e8:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1b8ea:	685b      	ldr	r3, [r3, #4]
   1b8ec:	b113      	cbz	r3, 1b8f4 <smp_pairing_complete+0xb0>
					listener->pairing_failed(conn, security_err);
   1b8ee:	4639      	mov	r1, r7
   1b8f0:	4620      	mov	r0, r4
   1b8f2:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1b8f4:	b165      	cbz	r5, 1b910 <smp_pairing_complete+0xcc>
   1b8f6:	68ea      	ldr	r2, [r5, #12]
   1b8f8:	b102      	cbz	r2, 1b8fc <smp_pairing_complete+0xb8>
   1b8fa:	3a0c      	subs	r2, #12
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1b8fc:	462b      	mov	r3, r5
   1b8fe:	4615      	mov	r5, r2
   1b900:	e7f3      	b.n	1b8ea <smp_pairing_complete+0xa6>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1b902:	2102      	movs	r1, #2
   1b904:	4628      	mov	r0, r5
   1b906:	f00d f929 	bl	28b5c <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1b90a:	2800      	cmp	r0, #0
   1b90c:	d1cc      	bne.n	1b8a8 <smp_pairing_complete+0x64>
   1b90e:	e7d2      	b.n	1b8b6 <smp_pairing_complete+0x72>
	smp_reset(smp);
   1b910:	4630      	mov	r0, r6
   1b912:	f00d fabe 	bl	28e92 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1b916:	7a62      	ldrb	r2, [r4, #9]
   1b918:	7aa3      	ldrb	r3, [r4, #10]
   1b91a:	429a      	cmp	r2, r3
   1b91c:	d004      	beq.n	1b928 <smp_pairing_complete+0xe4>
		bt_smp_start_security(conn);
   1b91e:	4620      	mov	r0, r4
}
   1b920:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1b924:	f7ff bec0 	b.w	1b6a8 <bt_smp_start_security>
}
   1b928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b92a:	bf00      	nop
   1b92c:	20002504 	.word	0x20002504
   1b930:	0002cf10 	.word	0x0002cf10
   1b934:	0002cf28 	.word	0x0002cf28

0001b938 <bt_smp_recv>:
{
   1b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1b93a:	898b      	ldrh	r3, [r1, #12]
{
   1b93c:	4607      	mov	r7, r0
   1b93e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1b940:	b92b      	cbnz	r3, 1b94e <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
   1b942:	4828      	ldr	r0, [pc, #160]	; (1b9e4 <bt_smp_recv+0xac>)
   1b944:	2145      	movs	r1, #69	; 0x45
   1b946:	f00a fde8 	bl	2651a <z_log_minimal_printk>
}
   1b94a:	2000      	movs	r0, #0
   1b94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1b94e:	2101      	movs	r1, #1
   1b950:	f105 0008 	add.w	r0, r5, #8
   1b954:	f001 f84a 	bl	1c9ec <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1b958:	2104      	movs	r1, #4
   1b95a:	4606      	mov	r6, r0
   1b95c:	f1a7 00e8 	sub.w	r0, r7, #232	; 0xe8
   1b960:	f00d f8fc 	bl	28b5c <atomic_test_bit>
   1b964:	f1a7 04ec 	sub.w	r4, r7, #236	; 0xec
   1b968:	7832      	ldrb	r2, [r6, #0]
   1b96a:	b120      	cbz	r0, 1b976 <bt_smp_recv+0x3e>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1b96c:	481e      	ldr	r0, [pc, #120]	; (1b9e8 <bt_smp_recv+0xb0>)
   1b96e:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1b970:	f00a fdd3 	bl	2651a <z_log_minimal_printk>
		return 0;
   1b974:	e7e9      	b.n	1b94a <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1b976:	2a0e      	cmp	r2, #14
   1b978:	d902      	bls.n	1b980 <bt_smp_recv+0x48>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1b97a:	481c      	ldr	r0, [pc, #112]	; (1b9ec <bt_smp_recv+0xb4>)
   1b97c:	2157      	movs	r1, #87	; 0x57
   1b97e:	e7f7      	b.n	1b970 <bt_smp_recv+0x38>
	if (!handlers[hdr->code].func) {
   1b980:	4f1b      	ldr	r7, [pc, #108]	; (1b9f0 <bt_smp_recv+0xb8>)
   1b982:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   1b986:	b943      	cbnz	r3, 1b99a <bt_smp_recv+0x62>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1b988:	2157      	movs	r1, #87	; 0x57
   1b98a:	481a      	ldr	r0, [pc, #104]	; (1b9f4 <bt_smp_recv+0xbc>)
   1b98c:	f00a fdc5 	bl	2651a <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1b990:	2107      	movs	r1, #7
		smp_error(smp, err);
   1b992:	4620      	mov	r0, r4
   1b994:	f00d fbdd 	bl	29152 <smp_error>
   1b998:	e7d7      	b.n	1b94a <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1b99a:	4611      	mov	r1, r2
   1b99c:	4620      	mov	r0, r4
   1b99e:	f00d fa60 	bl	28e62 <atomic_test_and_clear_bit>
   1b9a2:	7833      	ldrb	r3, [r6, #0]
   1b9a4:	b948      	cbnz	r0, 1b9ba <bt_smp_recv+0x82>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1b9a6:	461a      	mov	r2, r3
   1b9a8:	4813      	ldr	r0, [pc, #76]	; (1b9f8 <bt_smp_recv+0xc0>)
   1b9aa:	2157      	movs	r1, #87	; 0x57
   1b9ac:	f00a fdb5 	bl	2651a <z_log_minimal_printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1b9b0:	7833      	ldrb	r3, [r6, #0]
   1b9b2:	2b05      	cmp	r3, #5
   1b9b4:	d0c9      	beq.n	1b94a <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1b9b6:	2108      	movs	r1, #8
   1b9b8:	e7eb      	b.n	1b992 <bt_smp_recv+0x5a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1b9ba:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1b9be:	89aa      	ldrh	r2, [r5, #12]
   1b9c0:	7909      	ldrb	r1, [r1, #4]
   1b9c2:	4291      	cmp	r1, r2
   1b9c4:	d005      	beq.n	1b9d2 <bt_smp_recv+0x9a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1b9c6:	2145      	movs	r1, #69	; 0x45
   1b9c8:	480c      	ldr	r0, [pc, #48]	; (1b9fc <bt_smp_recv+0xc4>)
   1b9ca:	f00a fda6 	bl	2651a <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1b9ce:	210a      	movs	r1, #10
   1b9d0:	e7df      	b.n	1b992 <bt_smp_recv+0x5a>
	err = handlers[hdr->code].func(smp, buf);
   1b9d2:	4629      	mov	r1, r5
   1b9d4:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   1b9d8:	4620      	mov	r0, r4
   1b9da:	4798      	blx	r3
	if (err) {
   1b9dc:	4601      	mov	r1, r0
   1b9de:	2800      	cmp	r0, #0
   1b9e0:	d0b3      	beq.n	1b94a <bt_smp_recv+0x12>
   1b9e2:	e7d6      	b.n	1b992 <bt_smp_recv+0x5a>
   1b9e4:	0002cd25 	.word	0x0002cd25
   1b9e8:	0002cd45 	.word	0x0002cd45
   1b9ec:	0002cd7b 	.word	0x0002cd7b
   1b9f0:	0002a618 	.word	0x0002a618
   1b9f4:	0002cda2 	.word	0x0002cda2
   1b9f8:	0002cdc1 	.word	0x0002cdc1
   1b9fc:	0002c6ac 	.word	0x0002c6ac

0001ba00 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1ba00:	4b0f      	ldr	r3, [pc, #60]	; (1ba40 <bt_smp_pkey_ready+0x40>)
{
   1ba02:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1ba04:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1ba06:	b928      	cbnz	r0, 1ba14 <bt_smp_pkey_ready+0x14>
}
   1ba08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   1ba0c:	480d      	ldr	r0, [pc, #52]	; (1ba44 <bt_smp_pkey_ready+0x44>)
   1ba0e:	2157      	movs	r1, #87	; 0x57
   1ba10:	f00a bd83 	b.w	2651a <z_log_minimal_printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ba14:	4c0c      	ldr	r4, [pc, #48]	; (1ba48 <bt_smp_pkey_ready+0x48>)
	z_impl_k_sem_give(sem);
   1ba16:	480d      	ldr	r0, [pc, #52]	; (1ba4c <bt_smp_pkey_ready+0x4c>)
   1ba18:	f004 ff8c 	bl	20934 <z_impl_k_sem_give>
   1ba1c:	f3bf 8f5b 	dmb	ish
   1ba20:	6863      	ldr	r3, [r4, #4]
   1ba22:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1ba26:	065b      	lsls	r3, r3, #25
   1ba28:	d509      	bpl.n	1ba3e <bt_smp_pkey_ready+0x3e>
		err = smp_public_key_periph(smp);
   1ba2a:	4620      	mov	r0, r4
   1ba2c:	f7ff f920 	bl	1ac70 <smp_public_key_periph>
		if (err) {
   1ba30:	4601      	mov	r1, r0
   1ba32:	b120      	cbz	r0, 1ba3e <bt_smp_pkey_ready+0x3e>
			smp_error(smp, err);
   1ba34:	4620      	mov	r0, r4
}
   1ba36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1ba3a:	f00d bb8a 	b.w	29152 <smp_error>
}
   1ba3e:	bd10      	pop	{r4, pc}
   1ba40:	20002678 	.word	0x20002678
   1ba44:	0002cde1 	.word	0x0002cde1
   1ba48:	20001a78 	.word	0x20001a78
   1ba4c:	200008a0 	.word	0x200008a0

0001ba50 <smp_ident_addr_info>:
{
   1ba50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1ba54:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1ba56:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1ba5a:	7833      	ldrb	r3, [r6, #0]
{
   1ba5c:	4604      	mov	r4, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1ba5e:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1ba62:	b1bb      	cbz	r3, 1ba94 <smp_ident_addr_info+0x44>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1ba64:	79b3      	ldrb	r3, [r6, #6]
   1ba66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ba6a:	2bc0      	cmp	r3, #192	; 0xc0
   1ba6c:	d012      	beq.n	1ba94 <smp_ident_addr_info+0x44>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1ba6e:	4630      	mov	r0, r6
   1ba70:	f7f9 f906 	bl	14c80 <bt_addr_le_str_real>
   1ba74:	2145      	movs	r1, #69	; 0x45
   1ba76:	4602      	mov	r2, r0
   1ba78:	483e      	ldr	r0, [pc, #248]	; (1bb74 <smp_ident_addr_info+0x124>)
   1ba7a:	f00a fd4e 	bl	2651a <z_log_minimal_printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1ba7e:	4640      	mov	r0, r8
   1ba80:	f7f9 f8fe 	bl	14c80 <bt_addr_le_str_real>
   1ba84:	2145      	movs	r1, #69	; 0x45
   1ba86:	4602      	mov	r2, r0
   1ba88:	483b      	ldr	r0, [pc, #236]	; (1bb78 <smp_ident_addr_info+0x128>)
   1ba8a:	f00a fd46 	bl	2651a <z_log_minimal_printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1ba8e:	200a      	movs	r0, #10
}
   1ba90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1ba94:	2207      	movs	r2, #7
   1ba96:	4631      	mov	r1, r6
   1ba98:	4640      	mov	r0, r8
   1ba9a:	f00b fb9b 	bl	271d4 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1ba9e:	b168      	cbz	r0, 1babc <smp_ident_addr_info+0x6c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1baa0:	7a28      	ldrb	r0, [r5, #8]
   1baa2:	4631      	mov	r1, r6
   1baa4:	f000 fb3c 	bl	1c120 <bt_keys_find_addr>
		if (keys) {
   1baa8:	4607      	mov	r7, r0
   1baaa:	b138      	cbz	r0, 1babc <smp_ident_addr_info+0x6c>
			if (!update_keys_check(smp, keys)) {
   1baac:	4601      	mov	r1, r0
   1baae:	4620      	mov	r0, r4
   1bab0:	f00d f85d 	bl	28b6e <update_keys_check>
   1bab4:	b1b8      	cbz	r0, 1bae6 <smp_ident_addr_info+0x96>
			bt_keys_clear(keys);
   1bab6:	4638      	mov	r0, r7
   1bab8:	f000 fb42 	bl	1c140 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1babc:	210d      	movs	r1, #13
   1babe:	1d20      	adds	r0, r4, #4
   1bac0:	f00d f84c 	bl	28b5c <atomic_test_bit>
   1bac4:	2800      	cmp	r0, #0
   1bac6:	d03c      	beq.n	1bb42 <smp_ident_addr_info+0xf2>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1bac8:	7a29      	ldrb	r1, [r5, #8]
   1baca:	4642      	mov	r2, r8
   1bacc:	2002      	movs	r0, #2
   1bace:	f00d fbed 	bl	292ac <bt_keys_get_type>
		if (!keys) {
   1bad2:	4607      	mov	r7, r0
   1bad4:	b948      	cbnz	r0, 1baea <smp_ident_addr_info+0x9a>
			BT_ERR("Unable to get keys for %s",
   1bad6:	4640      	mov	r0, r8
   1bad8:	f7f9 f8d2 	bl	14c80 <bt_addr_le_str_real>
   1badc:	2145      	movs	r1, #69	; 0x45
   1bade:	4602      	mov	r2, r0
   1bae0:	4826      	ldr	r0, [pc, #152]	; (1bb7c <smp_ident_addr_info+0x12c>)
   1bae2:	f00a fd1a 	bl	2651a <z_log_minimal_printk>
				return BT_SMP_ERR_UNSPECIFIED;
   1bae6:	2008      	movs	r0, #8
   1bae8:	e7d2      	b.n	1ba90 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1baea:	78eb      	ldrb	r3, [r5, #3]
   1baec:	2b00      	cmp	r3, #0
   1baee:	d13d      	bne.n	1bb6c <smp_ident_addr_info+0x11c>
			dst = &conn->le.resp_addr;
   1baf0:	f105 019e 	add.w	r1, r5, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1baf4:	780b      	ldrb	r3, [r1, #0]
   1baf6:	2b01      	cmp	r3, #1
   1baf8:	d120      	bne.n	1bb3c <smp_ident_addr_info+0xec>
		if (bt_addr_le_is_rpa(dst)) {
   1bafa:	798b      	ldrb	r3, [r1, #6]
   1bafc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1bb00:	2b40      	cmp	r3, #64	; 0x40
   1bb02:	d11b      	bne.n	1bb3c <smp_ident_addr_info+0xec>
	memcpy(dst, src, sizeof(*dst));
   1bb04:	2206      	movs	r2, #6
   1bb06:	3101      	adds	r1, #1
   1bb08:	f107 003a 	add.w	r0, r7, #58	; 0x3a
   1bb0c:	f00b fb8b 	bl	27226 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1bb10:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   1bb14:	b193      	cbz	r3, 1bb3c <smp_ident_addr_info+0xec>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1bb16:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
   1bb1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1bb1e:	2bc0      	cmp	r3, #192	; 0xc0
   1bb20:	d00c      	beq.n	1bb3c <smp_ident_addr_info+0xec>
	memcpy(dst, src, sizeof(*dst));
   1bb22:	2207      	movs	r2, #7
   1bb24:	4631      	mov	r1, r6
   1bb26:	1c78      	adds	r0, r7, #1
   1bb28:	f00b fb7d 	bl	27226 <memcpy>
   1bb2c:	2207      	movs	r2, #7
   1bb2e:	4631      	mov	r1, r6
   1bb30:	4640      	mov	r0, r8
   1bb32:	f00b fb78 	bl	27226 <memcpy>
				bt_conn_identity_resolved(conn);
   1bb36:	4628      	mov	r0, r5
   1bb38:	f7fb ff68 	bl	17a0c <bt_conn_identity_resolved>
		bt_id_add(keys);
   1bb3c:	4638      	mov	r0, r7
   1bb3e:	f7fa fc0d 	bl	1635c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1bb42:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1bb46:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1bb4a:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1bb4c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1bb50:	d503      	bpl.n	1bb5a <smp_ident_addr_info+0x10a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1bb52:	210a      	movs	r1, #10
   1bb54:	4620      	mov	r0, r4
   1bb56:	f00d f8f4 	bl	28d42 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1bb5a:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1bb5e:	b91d      	cbnz	r5, 1bb68 <smp_ident_addr_info+0x118>
		smp_pairing_complete(smp, 0);
   1bb60:	4629      	mov	r1, r5
   1bb62:	4620      	mov	r0, r4
   1bb64:	f7ff fe6e 	bl	1b844 <smp_pairing_complete>
	return 0;
   1bb68:	2000      	movs	r0, #0
   1bb6a:	e791      	b.n	1ba90 <smp_ident_addr_info+0x40>
			dst = &conn->le.init_addr;
   1bb6c:	f105 0197 	add.w	r1, r5, #151	; 0x97
   1bb70:	e7c0      	b.n	1baf4 <smp_ident_addr_info+0xa4>
   1bb72:	bf00      	nop
   1bb74:	0002cdff 	.word	0x0002cdff
   1bb78:	0002ce18 	.word	0x0002ce18
   1bb7c:	0002cbca 	.word	0x0002cbca

0001bb80 <smp_central_ident>:
{
   1bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1bb82:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1bb86:	4604      	mov	r4, r0
   1bb88:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1bb8a:	3004      	adds	r0, #4
   1bb8c:	210d      	movs	r1, #13
   1bb8e:	f00c ffe5 	bl	28b5c <atomic_test_bit>
   1bb92:	b1f0      	cbz	r0, 1bbd2 <smp_central_ident+0x52>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1bb94:	f105 0790 	add.w	r7, r5, #144	; 0x90
   1bb98:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1bb9a:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1bb9c:	463a      	mov	r2, r7
   1bb9e:	2004      	movs	r0, #4
   1bba0:	f00d fb84 	bl	292ac <bt_keys_get_type>
		if (!keys) {
   1bba4:	4605      	mov	r5, r0
   1bba6:	b948      	cbnz	r0, 1bbbc <smp_central_ident+0x3c>
			BT_ERR("Unable to get keys for %s",
   1bba8:	4638      	mov	r0, r7
   1bbaa:	f7f9 f869 	bl	14c80 <bt_addr_le_str_real>
   1bbae:	2145      	movs	r1, #69	; 0x45
   1bbb0:	4602      	mov	r2, r0
   1bbb2:	4814      	ldr	r0, [pc, #80]	; (1bc04 <smp_central_ident+0x84>)
   1bbb4:	f00a fcb1 	bl	2651a <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1bbb8:	2008      	movs	r0, #8
}
   1bbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1bbbc:	2202      	movs	r2, #2
   1bbbe:	4631      	mov	r1, r6
   1bbc0:	3018      	adds	r0, #24
   1bbc2:	f00b fb30 	bl	27226 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1bbc6:	2208      	movs	r2, #8
   1bbc8:	1cb1      	adds	r1, r6, #2
   1bbca:	f105 0010 	add.w	r0, r5, #16
   1bbce:	f00b fb2a 	bl	27226 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1bbd2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1bbd6:	f023 0201 	bic.w	r2, r3, #1
   1bbda:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1bbde:	079a      	lsls	r2, r3, #30
   1bbe0:	d50c      	bpl.n	1bbfc <smp_central_ident+0x7c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1bbe2:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1bbe4:	4620      	mov	r0, r4
   1bbe6:	f00d f8ac 	bl	28d42 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1bbea:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1bbee:	b91d      	cbnz	r5, 1bbf8 <smp_central_ident+0x78>
		smp_pairing_complete(smp, 0);
   1bbf0:	4629      	mov	r1, r5
   1bbf2:	4620      	mov	r0, r4
   1bbf4:	f7ff fe26 	bl	1b844 <smp_pairing_complete>
	return 0;
   1bbf8:	2000      	movs	r0, #0
   1bbfa:	e7de      	b.n	1bbba <smp_central_ident+0x3a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1bbfc:	075b      	lsls	r3, r3, #29
   1bbfe:	d5f4      	bpl.n	1bbea <smp_central_ident+0x6a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1bc00:	210a      	movs	r1, #10
   1bc02:	e7ef      	b.n	1bbe4 <smp_central_ident+0x64>
   1bc04:	0002cbca 	.word	0x0002cbca

0001bc08 <smp_pairing_failed>:
{
   1bc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc0c:	460e      	mov	r6, r1
   1bc0e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1bc10:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bc14:	f7fe feaa 	bl	1a96c <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1bc18:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("reason 0x%x", req->reason);
   1bc1a:	2145      	movs	r1, #69	; 0x45
   1bc1c:	7832      	ldrb	r2, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bc1e:	4605      	mov	r5, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1bc20:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   1bc22:	480e      	ldr	r0, [pc, #56]	; (1bc5c <smp_pairing_failed+0x54>)
   1bc24:	f00a fc79 	bl	2651a <z_log_minimal_printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1bc28:	210a      	movs	r1, #10
   1bc2a:	4638      	mov	r0, r7
   1bc2c:	f00d f919 	bl	28e62 <atomic_test_and_clear_bit>
   1bc30:	b138      	cbz	r0, 1bc42 <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1bc32:	b96d      	cbnz	r5, 1bc50 <smp_pairing_failed+0x48>
	smp_pairing_complete(smp, req->reason);
   1bc34:	4620      	mov	r0, r4
   1bc36:	7831      	ldrb	r1, [r6, #0]
   1bc38:	f7ff fe04 	bl	1b844 <smp_pairing_complete>
}
   1bc3c:	2000      	movs	r0, #0
   1bc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1bc42:	210b      	movs	r1, #11
   1bc44:	4638      	mov	r0, r7
   1bc46:	f00d f90c 	bl	28e62 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1bc4a:	2800      	cmp	r0, #0
   1bc4c:	d1f1      	bne.n	1bc32 <smp_pairing_failed+0x2a>
   1bc4e:	e7f1      	b.n	1bc34 <smp_pairing_failed+0x2c>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1bc50:	692b      	ldr	r3, [r5, #16]
   1bc52:	2b00      	cmp	r3, #0
   1bc54:	d0ee      	beq.n	1bc34 <smp_pairing_failed+0x2c>
			smp_auth_cb->cancel(conn);
   1bc56:	4640      	mov	r0, r8
   1bc58:	4798      	blx	r3
   1bc5a:	e7eb      	b.n	1bc34 <smp_pairing_failed+0x2c>
   1bc5c:	0002ce25 	.word	0x0002ce25

0001bc60 <bt_smp_encrypt_change>:
{
   1bc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   1bc64:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1bc66:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1bc6a:	b088      	sub	sp, #32
   1bc6c:	4604      	mov	r4, r0
   1bc6e:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1bc70:	4630      	mov	r0, r6
   1bc72:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1bc74:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1bc78:	f00d f8f3 	bl	28e62 <atomic_test_and_clear_bit>
   1bc7c:	2800      	cmp	r0, #0
   1bc7e:	f000 8085 	beq.w	1bd8c <bt_smp_encrypt_change+0x12c>
	if (hci_status) {
   1bc82:	b1d7      	cbz	r7, 1bcba <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1bc84:	2103      	movs	r1, #3
   1bc86:	4630      	mov	r0, r6
   1bc88:	f00c ff68 	bl	28b5c <atomic_test_bit>
   1bc8c:	2800      	cmp	r0, #0
   1bc8e:	d07d      	beq.n	1bd8c <bt_smp_encrypt_change+0x12c>
			uint8_t smp_err = smp_err_get(
   1bc90:	4638      	mov	r0, r7
   1bc92:	f7f9 ff67 	bl	15b64 <bt_security_err_get>
	switch (auth_err) {
   1bc96:	3801      	subs	r0, #1
   1bc98:	b2c0      	uxtb	r0, r0
   1bc9a:	2808      	cmp	r0, #8
   1bc9c:	bf9a      	itte	ls
   1bc9e:	4b6a      	ldrls	r3, [pc, #424]	; (1be48 <bt_smp_encrypt_change+0x1e8>)
   1bca0:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1bca2:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1bca4:	2102      	movs	r1, #2
   1bca6:	4630      	mov	r0, r6
   1bca8:	f00d f84b 	bl	28d42 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1bcac:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1bcae:	4628      	mov	r0, r5
}
   1bcb0:	b008      	add	sp, #32
   1bcb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   1bcb6:	f7ff bdc5 	b.w	1b844 <smp_pairing_complete>
	if (!conn->encrypt) {
   1bcba:	f898 300b 	ldrb.w	r3, [r8, #11]
   1bcbe:	2b00      	cmp	r3, #0
   1bcc0:	d064      	beq.n	1bd8c <bt_smp_encrypt_change+0x12c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1bcc2:	2103      	movs	r1, #3
   1bcc4:	4630      	mov	r0, r6
   1bcc6:	f00c ff49 	bl	28b5c <atomic_test_bit>
   1bcca:	b928      	cbnz	r0, 1bcd8 <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   1bccc:	4628      	mov	r0, r5
}
   1bcce:	b008      	add	sp, #32
   1bcd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   1bcd4:	f00d b8dd 	b.w	28e92 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bcd8:	2105      	movs	r1, #5
   1bcda:	4630      	mov	r0, r6
   1bcdc:	f00c ff3e 	bl	28b5c <atomic_test_bit>
   1bce0:	b1b8      	cbz	r0, 1bd12 <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1bce2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1bce6:	071b      	lsls	r3, r3, #28
   1bce8:	d507      	bpl.n	1bcfa <bt_smp_encrypt_change+0x9a>
   1bcea:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1bcee:	071f      	lsls	r7, r3, #28
   1bcf0:	d503      	bpl.n	1bcfa <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1bcf2:	2111      	movs	r1, #17
   1bcf4:	4630      	mov	r0, r6
   1bcf6:	f00d f824 	bl	28d42 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1bcfa:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1bcfe:	f023 0308 	bic.w	r3, r3, #8
   1bd02:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1bd06:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1bd0a:	f023 0308 	bic.w	r3, r3, #8
   1bd0e:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1bd12:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1bd16:	07d8      	lsls	r0, r3, #31
   1bd18:	d517      	bpl.n	1bd4a <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1bd1a:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1bd1c:	4628      	mov	r0, r5
   1bd1e:	f00d f810 	bl	28d42 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1bd22:	2102      	movs	r1, #2
   1bd24:	4630      	mov	r0, r6
   1bd26:	f00d f80c 	bl	28d42 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1bd2a:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1bd2c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   1bd30:	b99a      	cbnz	r2, 1bd5a <bt_smp_encrypt_change+0xfa>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1bd32:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1bd36:	f7f8 ffa3 	bl	14c80 <bt_addr_le_str_real>
   1bd3a:	4602      	mov	r2, r0
   1bd3c:	4843      	ldr	r0, [pc, #268]	; (1be4c <bt_smp_encrypt_change+0x1ec>)
   1bd3e:	2145      	movs	r1, #69	; 0x45
}
   1bd40:	b008      	add	sp, #32
   1bd42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1bd46:	f00a bbe8 	b.w	2651a <z_log_minimal_printk>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1bd4a:	0799      	lsls	r1, r3, #30
   1bd4c:	d501      	bpl.n	1bd52 <bt_smp_encrypt_change+0xf2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1bd4e:	2108      	movs	r1, #8
   1bd50:	e7e4      	b.n	1bd1c <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1bd52:	075a      	lsls	r2, r3, #29
   1bd54:	d5e5      	bpl.n	1bd22 <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1bd56:	210a      	movs	r1, #10
   1bd58:	e7e0      	b.n	1bd1c <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bd5a:	2105      	movs	r1, #5
   1bd5c:	f00c fefe 	bl	28b5c <atomic_test_bit>
   1bd60:	b980      	cbnz	r0, 1bd84 <bt_smp_encrypt_change+0x124>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1bd62:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1bd66:	07db      	lsls	r3, r3, #31
   1bd68:	d50c      	bpl.n	1bd84 <bt_smp_encrypt_change+0x124>
	struct bt_keys *keys = conn->le.keys;
   1bd6a:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1bd6c:	211a      	movs	r1, #26
   1bd6e:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1bd70:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1bd74:	f002 fd54 	bl	1e820 <bt_rand>
   1bd78:	4681      	mov	r9, r0
   1bd7a:	b150      	cbz	r0, 1bd92 <bt_smp_encrypt_change+0x132>
			BT_ERR("Unable to get random bytes");
   1bd7c:	4834      	ldr	r0, [pc, #208]	; (1be50 <bt_smp_encrypt_change+0x1f0>)
   1bd7e:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1bd80:	f00a fbcb 	bl	2651a <z_log_minimal_printk>
	if (!smp->local_dist && !smp->remote_dist) {
   1bd84:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1bd88:	2900      	cmp	r1, #0
   1bd8a:	d090      	beq.n	1bcae <bt_smp_encrypt_change+0x4e>
}
   1bd8c:	b008      	add	sp, #32
   1bd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1bd92:	2106      	movs	r1, #6
   1bd94:	4628      	mov	r0, r5
   1bd96:	f00c ffe8 	bl	28d6a <smp_create_pdu.constprop.0>
		if (!buf) {
   1bd9a:	4680      	mov	r8, r0
   1bd9c:	b910      	cbnz	r0, 1bda4 <bt_smp_encrypt_change+0x144>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1bd9e:	482d      	ldr	r0, [pc, #180]	; (1be54 <bt_smp_encrypt_change+0x1f4>)
   1bda0:	2145      	movs	r1, #69	; 0x45
   1bda2:	e7ed      	b.n	1bd80 <bt_smp_encrypt_change+0x120>
	return net_buf_simple_add(&buf->b, len);
   1bda4:	2110      	movs	r1, #16
   1bda6:	3008      	adds	r0, #8
   1bda8:	f000 fe3e 	bl	1ca28 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1bdac:	7b3a      	ldrb	r2, [r7, #12]
   1bdae:	a901      	add	r1, sp, #4
   1bdb0:	4682      	mov	sl, r0
   1bdb2:	f00b fa38 	bl	27226 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1bdb6:	7b38      	ldrb	r0, [r7, #12]
   1bdb8:	280f      	cmp	r0, #15
   1bdba:	d805      	bhi.n	1bdc8 <bt_smp_encrypt_change+0x168>
			(void)memset(info->ltk + keys->enc_size, 0,
   1bdbc:	f1c0 0210 	rsb	r2, r0, #16
   1bdc0:	4649      	mov	r1, r9
   1bdc2:	4450      	add	r0, sl
   1bdc4:	f00b fa3a 	bl	2723c <memset>
		smp_send(smp, buf, NULL, NULL);
   1bdc8:	4641      	mov	r1, r8
   1bdca:	2200      	movs	r2, #0
   1bdcc:	4628      	mov	r0, r5
   1bdce:	f00c ff1c 	bl	28c0a <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1bdd2:	2107      	movs	r1, #7
   1bdd4:	4628      	mov	r0, r5
   1bdd6:	f00c ffc8 	bl	28d6a <smp_create_pdu.constprop.0>
		if (!buf) {
   1bdda:	4680      	mov	r8, r0
   1bddc:	b910      	cbnz	r0, 1bde4 <bt_smp_encrypt_change+0x184>
			BT_ERR("Unable to allocate Central Ident buffer");
   1bdde:	481e      	ldr	r0, [pc, #120]	; (1be58 <bt_smp_encrypt_change+0x1f8>)
   1bde0:	2145      	movs	r1, #69	; 0x45
   1bde2:	e7cd      	b.n	1bd80 <bt_smp_encrypt_change+0x120>
   1bde4:	210a      	movs	r1, #10
   1bde6:	3008      	adds	r0, #8
   1bde8:	f000 fe1e 	bl	1ca28 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1bdec:	2208      	movs	r2, #8
   1bdee:	4681      	mov	r9, r0
   1bdf0:	a905      	add	r1, sp, #20
   1bdf2:	3002      	adds	r0, #2
   1bdf4:	f00b fa17 	bl	27226 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1bdf8:	2202      	movs	r2, #2
   1bdfa:	a907      	add	r1, sp, #28
   1bdfc:	4648      	mov	r0, r9
   1bdfe:	f00b fa12 	bl	27226 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1be02:	4641      	mov	r1, r8
   1be04:	4628      	mov	r0, r5
   1be06:	4a15      	ldr	r2, [pc, #84]	; (1be5c <bt_smp_encrypt_change+0x1fc>)
   1be08:	f00c feff 	bl	28c0a <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1be0c:	210d      	movs	r1, #13
   1be0e:	4630      	mov	r0, r6
   1be10:	f00c fea4 	bl	28b5c <atomic_test_bit>
   1be14:	2800      	cmp	r0, #0
   1be16:	d0b5      	beq.n	1bd84 <bt_smp_encrypt_change+0x124>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1be18:	4638      	mov	r0, r7
   1be1a:	2101      	movs	r1, #1
   1be1c:	f00d fa56 	bl	292cc <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1be20:	a901      	add	r1, sp, #4
   1be22:	2210      	movs	r2, #16
   1be24:	f107 004a 	add.w	r0, r7, #74	; 0x4a
   1be28:	f00b f9fd 	bl	27226 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1be2c:	a905      	add	r1, sp, #20
   1be2e:	2208      	movs	r2, #8
   1be30:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1be34:	f00b f9f7 	bl	27226 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1be38:	2202      	movs	r2, #2
   1be3a:	a907      	add	r1, sp, #28
   1be3c:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1be40:	f00b f9f1 	bl	27226 <memcpy>
   1be44:	e79e      	b.n	1bd84 <bt_smp_encrypt_change+0x124>
   1be46:	bf00      	nop
   1be48:	0002cf1f 	.word	0x0002cf1f
   1be4c:	0002ce36 	.word	0x0002ce36
   1be50:	0002ce50 	.word	0x0002ce50
   1be54:	0002ce70 	.word	0x0002ce70
   1be58:	0002ce9c 	.word	0x0002ce9c
   1be5c:	0001be89 	.word	0x0001be89

0001be60 <smp_timeout>:
{
   1be60:	b510      	push	{r4, lr}
	BT_ERR("SMP Timeout");
   1be62:	2145      	movs	r1, #69	; 0x45
{
   1be64:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1be66:	4807      	ldr	r0, [pc, #28]	; (1be84 <smp_timeout+0x24>)
   1be68:	f00a fb57 	bl	2651a <z_log_minimal_printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1be6c:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1be70:	2108      	movs	r1, #8
   1be72:	f7ff fce7 	bl	1b844 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1be76:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
   1be7a:	2104      	movs	r1, #4
}
   1be7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1be80:	f00c bf5f 	b.w	28d42 <atomic_set_bit>
   1be84:	0002cec9 	.word	0x0002cec9

0001be88 <smp_ident_sent>:
{
   1be88:	b510      	push	{r4, lr}
	if (!err) {
   1be8a:	bb0a      	cbnz	r2, 1bed0 <smp_ident_sent+0x48>
	if (conn->type == BT_CONN_TYPE_LE) {
   1be8c:	7883      	ldrb	r3, [r0, #2]
   1be8e:	2b01      	cmp	r3, #1
   1be90:	d11e      	bne.n	1bed0 <smp_ident_sent+0x48>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1be92:	2106      	movs	r1, #6
   1be94:	f00b fec6 	bl	27c24 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1be98:	4604      	mov	r4, r0
   1be9a:	b950      	cbnz	r0, 1beb2 <smp_ident_sent+0x2a>
   1be9c:	490d      	ldr	r1, [pc, #52]	; (1bed4 <smp_ident_sent+0x4c>)
   1be9e:	480e      	ldr	r0, [pc, #56]	; (1bed8 <smp_ident_sent+0x50>)
   1bea0:	f44f 7250 	mov.w	r2, #832	; 0x340
   1bea4:	f00a fb2b 	bl	264fe <assert_print>
   1bea8:	480a      	ldr	r0, [pc, #40]	; (1bed4 <smp_ident_sent+0x4c>)
   1beaa:	f44f 7150 	mov.w	r1, #832	; 0x340
   1beae:	f00a fb1f 	bl	264f0 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1beb2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1beb6:	f023 0301 	bic.w	r3, r3, #1
   1beba:	f804 3c04 	strb.w	r3, [r4, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1bebe:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1bec2:	b929      	cbnz	r1, 1bed0 <smp_ident_sent+0x48>
			smp_pairing_complete(smp, 0);
   1bec4:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
}
   1bec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1becc:	f7ff bcba 	b.w	1b844 <smp_pairing_complete>
}
   1bed0:	bd10      	pop	{r4, pc}
   1bed2:	bf00      	nop
   1bed4:	0002ceda 	.word	0x0002ceda
   1bed8:	0002aa75 	.word	0x0002aa75

0001bedc <bt_smp_update_keys>:
{
   1bedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bede:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1bee0:	f7fe fdca 	bl	1aa78 <smp_chan_get>
	if (!smp) {
   1bee4:	4605      	mov	r5, r0
   1bee6:	2800      	cmp	r0, #0
   1bee8:	d073      	beq.n	1bfd2 <bt_smp_update_keys+0xf6>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1beea:	1d06      	adds	r6, r0, #4
   1beec:	2103      	movs	r1, #3
   1beee:	4630      	mov	r0, r6
   1bef0:	f00c fe34 	bl	28b5c <atomic_test_bit>
   1bef4:	2800      	cmp	r0, #0
   1bef6:	d06c      	beq.n	1bfd2 <bt_smp_update_keys+0xf6>
	if (conn->le.keys) {
   1bef8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1befc:	b108      	cbz	r0, 1bf02 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1befe:	f000 f91f 	bl	1c140 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1bf02:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1bf06:	7a20      	ldrb	r0, [r4, #8]
   1bf08:	4639      	mov	r1, r7
   1bf0a:	f000 f87b 	bl	1c004 <bt_keys_get_addr>
   1bf0e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1bf12:	b968      	cbnz	r0, 1bf30 <bt_smp_update_keys+0x54>
		BT_ERR("Unable to get keys for %s",
   1bf14:	4638      	mov	r0, r7
   1bf16:	f7f8 feb3 	bl	14c80 <bt_addr_le_str_real>
   1bf1a:	2145      	movs	r1, #69	; 0x45
   1bf1c:	4602      	mov	r2, r0
   1bf1e:	482d      	ldr	r0, [pc, #180]	; (1bfd4 <bt_smp_update_keys+0xf8>)
   1bf20:	f00a fafb 	bl	2651a <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1bf24:	4628      	mov	r0, r5
   1bf26:	2108      	movs	r1, #8
}
   1bf28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1bf2c:	f00d b911 	b.w	29152 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1bf30:	210e      	movs	r1, #14
   1bf32:	4630      	mov	r0, r6
   1bf34:	f00c fe12 	bl	28b5c <atomic_test_bit>
   1bf38:	b128      	cbz	r0, 1bf46 <bt_smp_update_keys+0x6a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1bf3a:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1bf3e:	7b53      	ldrb	r3, [r2, #13]
   1bf40:	f043 0302 	orr.w	r3, r3, #2
   1bf44:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1bf46:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1bf48:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	switch (smp->method) {
   1bf4c:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1bf4e:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1bf50:	d836      	bhi.n	1bfc0 <bt_smp_update_keys+0xe4>
   1bf52:	b3c2      	cbz	r2, 1bfc6 <bt_smp_update_keys+0xea>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1bf54:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1bf58:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1bf5a:	7b6b      	ldrb	r3, [r5, #13]
   1bf5c:	7d2a      	ldrb	r2, [r5, #20]
   1bf5e:	4293      	cmp	r3, r2
   1bf60:	bf28      	it	cs
   1bf62:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1bf64:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bf66:	4630      	mov	r0, r6
   1bf68:	2105      	movs	r1, #5
   1bf6a:	f00c fdf7 	bl	28b5c <atomic_test_bit>
   1bf6e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1bf72:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bf74:	b350      	cbz	r0, 1bfcc <bt_smp_update_keys+0xf0>
		conn->le.keys->flags |= BT_KEYS_SC;
   1bf76:	f042 0210 	orr.w	r2, r2, #16
   1bf7a:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1bf7c:	210d      	movs	r1, #13
   1bf7e:	4630      	mov	r0, r6
   1bf80:	f00c fdec 	bl	28b5c <atomic_test_bit>
   1bf84:	b328      	cbz	r0, 1bfd2 <bt_smp_update_keys+0xf6>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1bf86:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1bf8a:	2120      	movs	r1, #32
   1bf8c:	f00d f99e 	bl	292cc <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1bf90:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1bf94:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1bf98:	2210      	movs	r2, #16
   1bf9a:	301a      	adds	r0, #26
   1bf9c:	f00b f943 	bl	27226 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1bfa0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1bfa4:	2208      	movs	r2, #8
   1bfa6:	2100      	movs	r1, #0
   1bfa8:	3010      	adds	r0, #16
   1bfaa:	f00b f947 	bl	2723c <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1bfae:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1bfb2:	2202      	movs	r2, #2
}
   1bfb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1bfb8:	2100      	movs	r1, #0
   1bfba:	3018      	adds	r0, #24
   1bfbc:	f00b b93e 	b.w	2723c <memset>
	switch (smp->method) {
   1bfc0:	3a05      	subs	r2, #5
   1bfc2:	2a01      	cmp	r2, #1
   1bfc4:	d9c6      	bls.n	1bf54 <bt_smp_update_keys+0x78>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1bfc6:	f023 0301 	bic.w	r3, r3, #1
   1bfca:	e7c5      	b.n	1bf58 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1bfcc:	f022 0210 	bic.w	r2, r2, #16
   1bfd0:	735a      	strb	r2, [r3, #13]
}
   1bfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bfd4:	0002cbca 	.word	0x0002cbca

0001bfd8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1bfd8:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1bfda:	4b07      	ldr	r3, [pc, #28]	; (1bff8 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1bfdc:	4807      	ldr	r0, [pc, #28]	; (1bffc <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1bfde:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1bfe2:	f003 0306 	and.w	r3, r3, #6
   1bfe6:	1f9a      	subs	r2, r3, #6
   1bfe8:	4253      	negs	r3, r2
   1bfea:	4153      	adcs	r3, r2
   1bfec:	4a04      	ldr	r2, [pc, #16]	; (1c000 <bt_smp_init+0x28>)
   1bfee:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1bff0:	f7fa ff5c 	bl	16eac <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1bff4:	2000      	movs	r0, #0
   1bff6:	bd08      	pop	{r3, pc}
   1bff8:	20000350 	.word	0x20000350
   1bffc:	200005f4 	.word	0x200005f4
   1c000:	200034b3 	.word	0x200034b3

0001c004 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1c004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1c006:	4d11      	ldr	r5, [pc, #68]	; (1c04c <bt_keys_get_addr+0x48>)
   1c008:	782b      	ldrb	r3, [r5, #0]
   1c00a:	4283      	cmp	r3, r0
{
   1c00c:	4606      	mov	r6, r0
   1c00e:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1c010:	d00b      	beq.n	1c02a <bt_keys_get_addr+0x26>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1c012:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1c014:	480e      	ldr	r0, [pc, #56]	; (1c050 <bt_keys_get_addr+0x4c>)
   1c016:	9400      	str	r4, [sp, #0]
   1c018:	2207      	movs	r2, #7
   1c01a:	4669      	mov	r1, sp
   1c01c:	f8cd 4003 	str.w	r4, [sp, #3]
   1c020:	f00b f8d8 	bl	271d4 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1c024:	b150      	cbz	r0, 1c03c <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1c026:	4620      	mov	r0, r4
   1c028:	e006      	b.n	1c038 <bt_keys_get_addr+0x34>
   1c02a:	2207      	movs	r2, #7
   1c02c:	1c68      	adds	r0, r5, #1
   1c02e:	f00b f8d1 	bl	271d4 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1c032:	2800      	cmp	r0, #0
   1c034:	d1ed      	bne.n	1c012 <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
   1c036:	4628      	mov	r0, r5
}
   1c038:	b003      	add	sp, #12
   1c03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
   1c03c:	4804      	ldr	r0, [pc, #16]	; (1c050 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   1c03e:	702e      	strb	r6, [r5, #0]
   1c040:	2207      	movs	r2, #7
   1c042:	4639      	mov	r1, r7
   1c044:	f00b f8ef 	bl	27226 <memcpy>
		return keys;
   1c048:	4800      	ldr	r0, [pc, #0]	; (1c04c <bt_keys_get_addr+0x48>)
}
   1c04a:	e7f5      	b.n	1c038 <bt_keys_get_addr+0x34>
   1c04c:	2000267c 	.word	0x2000267c
   1c050:	2000267d 	.word	0x2000267d

0001c054 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1c054:	460b      	mov	r3, r1
   1c056:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1c058:	4a04      	ldr	r2, [pc, #16]	; (1c06c <bt_keys_foreach+0x18>)
{
   1c05a:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1c05c:	89d4      	ldrh	r4, [r2, #14]
   1c05e:	4204      	tst	r4, r0
   1c060:	d002      	beq.n	1c068 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1c062:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1c064:	4610      	mov	r0, r2
   1c066:	4718      	bx	r3
}
   1c068:	bc10      	pop	{r4}
   1c06a:	4770      	bx	lr
   1c06c:	2000267c 	.word	0x2000267c

0001c070 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1c070:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1c072:	4903      	ldr	r1, [pc, #12]	; (1c080 <keys_commit+0x10>)
   1c074:	2200      	movs	r2, #0
   1c076:	2002      	movs	r0, #2
   1c078:	f7ff ffec 	bl	1c054 <bt_keys_foreach>
	}

	return 0;
}
   1c07c:	2000      	movs	r0, #0
   1c07e:	bd08      	pop	{r3, pc}
   1c080:	000292a9 	.word	0x000292a9

0001c084 <bt_keys_find>:
{
   1c084:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1c086:	4c09      	ldr	r4, [pc, #36]	; (1c0ac <bt_keys_find+0x28>)
{
   1c088:	460b      	mov	r3, r1
   1c08a:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1c08c:	89e2      	ldrh	r2, [r4, #14]
   1c08e:	4202      	tst	r2, r0
   1c090:	d007      	beq.n	1c0a2 <bt_keys_find+0x1e>
   1c092:	7822      	ldrb	r2, [r4, #0]
   1c094:	429a      	cmp	r2, r3
   1c096:	d104      	bne.n	1c0a2 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1c098:	2207      	movs	r2, #7
   1c09a:	1c60      	adds	r0, r4, #1
   1c09c:	f00b f89a 	bl	271d4 <memcmp>
   1c0a0:	b108      	cbz	r0, 1c0a6 <bt_keys_find+0x22>
	return NULL;
   1c0a2:	2000      	movs	r0, #0
}
   1c0a4:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1c0a6:	4620      	mov	r0, r4
   1c0a8:	e7fc      	b.n	1c0a4 <bt_keys_find+0x20>
   1c0aa:	bf00      	nop
   1c0ac:	2000267c 	.word	0x2000267c

0001c0b0 <bt_keys_find_irk>:
{
   1c0b0:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1c0b2:	780b      	ldrb	r3, [r1, #0]
   1c0b4:	2b01      	cmp	r3, #1
   1c0b6:	4606      	mov	r6, r0
   1c0b8:	460d      	mov	r5, r1
   1c0ba:	d001      	beq.n	1c0c0 <bt_keys_find_irk+0x10>
		return NULL;
   1c0bc:	2000      	movs	r0, #0
}
   1c0be:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1c0c0:	798b      	ldrb	r3, [r1, #6]
   1c0c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c0c6:	2b40      	cmp	r3, #64	; 0x40
   1c0c8:	d1f8      	bne.n	1c0bc <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1c0ca:	4c12      	ldr	r4, [pc, #72]	; (1c114 <bt_keys_find_irk+0x64>)
   1c0cc:	89e3      	ldrh	r3, [r4, #14]
   1c0ce:	079b      	lsls	r3, r3, #30
   1c0d0:	d5f4      	bpl.n	1c0bc <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1c0d2:	7823      	ldrb	r3, [r4, #0]
   1c0d4:	42b3      	cmp	r3, r6
   1c0d6:	d10b      	bne.n	1c0f0 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   1c0d8:	2206      	movs	r2, #6
   1c0da:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   1c0de:	1c68      	adds	r0, r5, #1
   1c0e0:	f00b f878 	bl	271d4 <memcmp>
   1c0e4:	b908      	cbnz	r0, 1c0ea <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   1c0e6:	4620      	mov	r0, r4
   1c0e8:	e7e9      	b.n	1c0be <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1c0ea:	89e3      	ldrh	r3, [r4, #14]
   1c0ec:	079a      	lsls	r2, r3, #30
   1c0ee:	d5e5      	bpl.n	1c0bc <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1c0f0:	7823      	ldrb	r3, [r4, #0]
   1c0f2:	42b3      	cmp	r3, r6
   1c0f4:	d1e2      	bne.n	1c0bc <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1c0f6:	3501      	adds	r5, #1
   1c0f8:	4807      	ldr	r0, [pc, #28]	; (1c118 <bt_keys_find_irk+0x68>)
   1c0fa:	4629      	mov	r1, r5
   1c0fc:	f00b f8b9 	bl	27272 <bt_rpa_irk_matches>
   1c100:	2800      	cmp	r0, #0
   1c102:	d0db      	beq.n	1c0bc <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1c104:	4805      	ldr	r0, [pc, #20]	; (1c11c <bt_keys_find_irk+0x6c>)
   1c106:	2206      	movs	r2, #6
   1c108:	4629      	mov	r1, r5
   1c10a:	f00b f88c 	bl	27226 <memcpy>
			return &key_pool[i];
   1c10e:	4801      	ldr	r0, [pc, #4]	; (1c114 <bt_keys_find_irk+0x64>)
}
   1c110:	e7d5      	b.n	1c0be <bt_keys_find_irk+0xe>
   1c112:	bf00      	nop
   1c114:	2000267c 	.word	0x2000267c
   1c118:	200026a6 	.word	0x200026a6
   1c11c:	200026b6 	.word	0x200026b6

0001c120 <bt_keys_find_addr>:
{
   1c120:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1c122:	4c06      	ldr	r4, [pc, #24]	; (1c13c <bt_keys_find_addr+0x1c>)
   1c124:	7823      	ldrb	r3, [r4, #0]
   1c126:	4283      	cmp	r3, r0
   1c128:	d104      	bne.n	1c134 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1c12a:	2207      	movs	r2, #7
   1c12c:	1c60      	adds	r0, r4, #1
   1c12e:	f00b f851 	bl	271d4 <memcmp>
   1c132:	b108      	cbz	r0, 1c138 <bt_keys_find_addr+0x18>
	return NULL;
   1c134:	2000      	movs	r0, #0
}
   1c136:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1c138:	4620      	mov	r0, r4
   1c13a:	e7fc      	b.n	1c136 <bt_keys_find_addr+0x16>
   1c13c:	2000267c 	.word	0x2000267c

0001c140 <bt_keys_clear>:
{
   1c140:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1c142:	7a03      	ldrb	r3, [r0, #8]
   1c144:	075b      	lsls	r3, r3, #29
{
   1c146:	b08c      	sub	sp, #48	; 0x30
   1c148:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1c14a:	d501      	bpl.n	1c150 <bt_keys_clear+0x10>
		bt_id_del(keys);
   1c14c:	f7fa f9ba 	bl	164c4 <bt_id_del>
		if (keys->id) {
   1c150:	4625      	mov	r5, r4
   1c152:	f815 2b01 	ldrb.w	r2, [r5], #1
   1c156:	b1b2      	cbz	r2, 1c186 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   1c158:	ae02      	add	r6, sp, #8
   1c15a:	2104      	movs	r1, #4
   1c15c:	4630      	mov	r0, r6
   1c15e:	f009 ff43 	bl	25fe8 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1c162:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1c164:	4a09      	ldr	r2, [pc, #36]	; (1c18c <bt_keys_clear+0x4c>)
   1c166:	462b      	mov	r3, r5
   1c168:	2124      	movs	r1, #36	; 0x24
   1c16a:	a803      	add	r0, sp, #12
   1c16c:	f7f8 fe36 	bl	14ddc <bt_settings_encode_key>
		settings_delete(key);
   1c170:	a803      	add	r0, sp, #12
   1c172:	f00a fc4b 	bl	26a0c <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1c176:	225c      	movs	r2, #92	; 0x5c
   1c178:	2100      	movs	r1, #0
   1c17a:	4620      	mov	r0, r4
}
   1c17c:	b00c      	add	sp, #48	; 0x30
   1c17e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1c182:	f00b b85b 	b.w	2723c <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1c186:	9200      	str	r2, [sp, #0]
   1c188:	e7ec      	b.n	1c164 <bt_keys_clear+0x24>
   1c18a:	bf00      	nop
   1c18c:	0002d02a 	.word	0x0002d02a

0001c190 <keys_set>:
{
   1c190:	b570      	push	{r4, r5, r6, lr}
   1c192:	4605      	mov	r5, r0
   1c194:	b098      	sub	sp, #96	; 0x60
   1c196:	4614      	mov	r4, r2
   1c198:	4618      	mov	r0, r3
	if (!name) {
   1c19a:	b945      	cbnz	r5, 1c1ae <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
   1c19c:	4832      	ldr	r0, [pc, #200]	; (1c268 <keys_set+0xd8>)
   1c19e:	2145      	movs	r1, #69	; 0x45
   1c1a0:	f00a f9bb 	bl	2651a <z_log_minimal_printk>
		return -EINVAL;
   1c1a4:	f06f 0415 	mvn.w	r4, #21
}
   1c1a8:	4620      	mov	r0, r4
   1c1aa:	b018      	add	sp, #96	; 0x60
   1c1ac:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1c1ae:	2250      	movs	r2, #80	; 0x50
   1c1b0:	a904      	add	r1, sp, #16
   1c1b2:	47a0      	blx	r4
	if (len < 0) {
   1c1b4:	1e04      	subs	r4, r0, #0
   1c1b6:	da05      	bge.n	1c1c4 <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
   1c1b8:	482c      	ldr	r0, [pc, #176]	; (1c26c <keys_set+0xdc>)
   1c1ba:	4622      	mov	r2, r4
   1c1bc:	2145      	movs	r1, #69	; 0x45
   1c1be:	f00a f9ac 	bl	2651a <z_log_minimal_printk>
   1c1c2:	e7ef      	b.n	1c1a4 <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
   1c1c4:	a902      	add	r1, sp, #8
   1c1c6:	4628      	mov	r0, r5
   1c1c8:	f00b f879 	bl	272be <bt_settings_decode_key>
	if (err) {
   1c1cc:	4606      	mov	r6, r0
   1c1ce:	b118      	cbz	r0, 1c1d8 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
   1c1d0:	4827      	ldr	r0, [pc, #156]	; (1c270 <keys_set+0xe0>)
   1c1d2:	462a      	mov	r2, r5
   1c1d4:	2145      	movs	r1, #69	; 0x45
   1c1d6:	e7f2      	b.n	1c1be <keys_set+0x2e>
	settings_name_next(name, &next);
   1c1d8:	a901      	add	r1, sp, #4
   1c1da:	4628      	mov	r0, r5
   1c1dc:	f00a fc3d 	bl	26a5a <settings_name_next>
	if (!next) {
   1c1e0:	9801      	ldr	r0, [sp, #4]
   1c1e2:	b140      	cbz	r0, 1c1f6 <keys_set+0x66>
		unsigned long next_id = strtoul(next, NULL, 10);
   1c1e4:	220a      	movs	r2, #10
   1c1e6:	4631      	mov	r1, r6
   1c1e8:	f00a ff44 	bl	27074 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1c1ec:	4602      	mov	r2, r0
   1c1ee:	b110      	cbz	r0, 1c1f6 <keys_set+0x66>
			BT_ERR("Invalid local identity %lu", next_id);
   1c1f0:	4820      	ldr	r0, [pc, #128]	; (1c274 <keys_set+0xe4>)
   1c1f2:	2145      	movs	r1, #69	; 0x45
   1c1f4:	e7e3      	b.n	1c1be <keys_set+0x2e>
	if (!len) {
   1c1f6:	b99c      	cbnz	r4, 1c220 <keys_set+0x90>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1c1f8:	aa02      	add	r2, sp, #8
   1c1fa:	4621      	mov	r1, r4
   1c1fc:	203f      	movs	r0, #63	; 0x3f
   1c1fe:	f7ff ff41 	bl	1c084 <bt_keys_find>
		if (keys) {
   1c202:	b120      	cbz	r0, 1c20e <keys_set+0x7e>
			(void)memset(keys, 0, sizeof(*keys));
   1c204:	225c      	movs	r2, #92	; 0x5c
   1c206:	4621      	mov	r1, r4
   1c208:	f00b f818 	bl	2723c <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1c20c:	e7cc      	b.n	1c1a8 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
   1c20e:	a802      	add	r0, sp, #8
   1c210:	f7f8 fd36 	bl	14c80 <bt_addr_le_str_real>
   1c214:	2157      	movs	r1, #87	; 0x57
   1c216:	4602      	mov	r2, r0
   1c218:	4817      	ldr	r0, [pc, #92]	; (1c278 <keys_set+0xe8>)
   1c21a:	f00a f97e 	bl	2651a <z_log_minimal_printk>
   1c21e:	e7c3      	b.n	1c1a8 <keys_set+0x18>
	keys = bt_keys_get_addr(id, &addr);
   1c220:	a902      	add	r1, sp, #8
   1c222:	2000      	movs	r0, #0
   1c224:	f7ff feee 	bl	1c004 <bt_keys_get_addr>
	if (!keys) {
   1c228:	4605      	mov	r5, r0
   1c22a:	b950      	cbnz	r0, 1c242 <keys_set+0xb2>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1c22c:	a802      	add	r0, sp, #8
   1c22e:	f7f8 fd27 	bl	14c80 <bt_addr_le_str_real>
   1c232:	2145      	movs	r1, #69	; 0x45
   1c234:	4602      	mov	r2, r0
   1c236:	4811      	ldr	r0, [pc, #68]	; (1c27c <keys_set+0xec>)
   1c238:	f00a f96f 	bl	2651a <z_log_minimal_printk>
		return -ENOMEM;
   1c23c:	f06f 040b 	mvn.w	r4, #11
   1c240:	e7b2      	b.n	1c1a8 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
   1c242:	2c50      	cmp	r4, #80	; 0x50
   1c244:	d009      	beq.n	1c25a <keys_set+0xca>
			BT_ERR("Invalid key length %zd != %zu", len,
   1c246:	480e      	ldr	r0, [pc, #56]	; (1c280 <keys_set+0xf0>)
   1c248:	2350      	movs	r3, #80	; 0x50
   1c24a:	4622      	mov	r2, r4
   1c24c:	2145      	movs	r1, #69	; 0x45
   1c24e:	f00a f964 	bl	2651a <z_log_minimal_printk>
			bt_keys_clear(keys);
   1c252:	4628      	mov	r0, r5
   1c254:	f7ff ff74 	bl	1c140 <bt_keys_clear>
			return -EINVAL;
   1c258:	e7a4      	b.n	1c1a4 <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
   1c25a:	4622      	mov	r2, r4
   1c25c:	a904      	add	r1, sp, #16
   1c25e:	300c      	adds	r0, #12
   1c260:	f00a ffe1 	bl	27226 <memcpy>
	return 0;
   1c264:	2400      	movs	r4, #0
   1c266:	e79f      	b.n	1c1a8 <keys_set+0x18>
   1c268:	0002b5fa 	.word	0x0002b5fa
   1c26c:	0002cf72 	.word	0x0002cf72
   1c270:	0002c827 	.word	0x0002c827
   1c274:	0002c848 	.word	0x0002c848
   1c278:	0002cf96 	.word	0x0002cf96
   1c27c:	0002cfbe 	.word	0x0002cfbe
   1c280:	0002cfe2 	.word	0x0002cfe2

0001c284 <bt_keys_store>:
{
   1c284:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1c286:	4605      	mov	r5, r0
{
   1c288:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1c28a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1c28e:	4604      	mov	r4, r0
	if (keys->id) {
   1c290:	b1da      	cbz	r2, 1c2ca <bt_keys_store+0x46>
		u8_to_dec(id, sizeof(id), keys->id);
   1c292:	ae02      	add	r6, sp, #8
   1c294:	2104      	movs	r1, #4
   1c296:	4630      	mov	r0, r6
   1c298:	f009 fea6 	bl	25fe8 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1c29c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1c29e:	4a0c      	ldr	r2, [pc, #48]	; (1c2d0 <bt_keys_store+0x4c>)
   1c2a0:	462b      	mov	r3, r5
   1c2a2:	2124      	movs	r1, #36	; 0x24
   1c2a4:	a803      	add	r0, sp, #12
   1c2a6:	f7f8 fd99 	bl	14ddc <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1c2aa:	f104 010c 	add.w	r1, r4, #12
   1c2ae:	2250      	movs	r2, #80	; 0x50
   1c2b0:	a803      	add	r0, sp, #12
   1c2b2:	f7f7 f9ef 	bl	13694 <settings_save_one>
	if (err) {
   1c2b6:	4604      	mov	r4, r0
   1c2b8:	b120      	cbz	r0, 1c2c4 <bt_keys_store+0x40>
		BT_ERR("Failed to save keys (err %d)", err);
   1c2ba:	4602      	mov	r2, r0
   1c2bc:	2145      	movs	r1, #69	; 0x45
   1c2be:	4805      	ldr	r0, [pc, #20]	; (1c2d4 <bt_keys_store+0x50>)
   1c2c0:	f00a f92b 	bl	2651a <z_log_minimal_printk>
}
   1c2c4:	4620      	mov	r0, r4
   1c2c6:	b00c      	add	sp, #48	; 0x30
   1c2c8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1c2ca:	9200      	str	r2, [sp, #0]
   1c2cc:	e7e7      	b.n	1c29e <bt_keys_store+0x1a>
   1c2ce:	bf00      	nop
   1c2d0:	0002d02a 	.word	0x0002d02a
   1c2d4:	0002d005 	.word	0x0002d005

0001c2d8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1c2d8:	4b02      	ldr	r3, [pc, #8]	; (1c2e4 <net_buf_pool_get+0xc>)
   1c2da:	2234      	movs	r2, #52	; 0x34
   1c2dc:	fb02 3000 	mla	r0, r2, r0, r3
   1c2e0:	4770      	bx	lr
   1c2e2:	bf00      	nop
   1c2e4:	200008f0 	.word	0x200008f0

0001c2e8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c2e8:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1c2ea:	4b07      	ldr	r3, [pc, #28]	; (1c308 <net_buf_id+0x20>)
   1c2ec:	2134      	movs	r1, #52	; 0x34
   1c2ee:	fb01 3302 	mla	r3, r1, r2, r3
   1c2f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c2f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c2f8:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1c2fa:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c2fc:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1c300:	fbb0 f0f3 	udiv	r0, r0, r3
   1c304:	4770      	bx	lr
   1c306:	bf00      	nop
   1c308:	200008f0 	.word	0x200008f0

0001c30c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1c30c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c30e:	4b0a      	ldr	r3, [pc, #40]	; (1c338 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c310:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c312:	2434      	movs	r4, #52	; 0x34
   1c314:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1c318:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c31c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1c31e:	6823      	ldr	r3, [r4, #0]
   1c320:	429a      	cmp	r2, r3
   1c322:	bf94      	ite	ls
   1c324:	600a      	strls	r2, [r1, #0]
   1c326:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1c328:	f7ff ffde 	bl	1c2e8 <net_buf_id>
   1c32c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1c330:	fb02 3000 	mla	r0, r2, r0, r3
   1c334:	bd10      	pop	{r4, pc}
   1c336:	bf00      	nop
   1c338:	200008f0 	.word	0x200008f0

0001c33c <net_buf_reset>:
{
   1c33c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1c33e:	7943      	ldrb	r3, [r0, #5]
{
   1c340:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1c342:	b143      	cbz	r3, 1c356 <net_buf_reset+0x1a>
   1c344:	490c      	ldr	r1, [pc, #48]	; (1c378 <net_buf_reset+0x3c>)
   1c346:	480d      	ldr	r0, [pc, #52]	; (1c37c <net_buf_reset+0x40>)
   1c348:	2256      	movs	r2, #86	; 0x56
   1c34a:	f00a f8d8 	bl	264fe <assert_print>
   1c34e:	480a      	ldr	r0, [pc, #40]	; (1c378 <net_buf_reset+0x3c>)
   1c350:	2156      	movs	r1, #86	; 0x56
   1c352:	f00a f8cd 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1c356:	6823      	ldr	r3, [r4, #0]
   1c358:	b143      	cbz	r3, 1c36c <net_buf_reset+0x30>
   1c35a:	4907      	ldr	r1, [pc, #28]	; (1c378 <net_buf_reset+0x3c>)
   1c35c:	4807      	ldr	r0, [pc, #28]	; (1c37c <net_buf_reset+0x40>)
   1c35e:	2257      	movs	r2, #87	; 0x57
   1c360:	f00a f8cd 	bl	264fe <assert_print>
   1c364:	4804      	ldr	r0, [pc, #16]	; (1c378 <net_buf_reset+0x3c>)
   1c366:	2157      	movs	r1, #87	; 0x57
   1c368:	f00a f8c2 	bl	264f0 <assert_post_action>
	buf->len  = 0U;
   1c36c:	2300      	movs	r3, #0
   1c36e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1c370:	6923      	ldr	r3, [r4, #16]
   1c372:	60a3      	str	r3, [r4, #8]
}
   1c374:	bd10      	pop	{r4, pc}
   1c376:	bf00      	nop
   1c378:	0002d037 	.word	0x0002d037
   1c37c:	0002aa75 	.word	0x0002aa75

0001c380 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1c380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c384:	b085      	sub	sp, #20
   1c386:	4605      	mov	r5, r0
   1c388:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1c38a:	4610      	mov	r0, r2
   1c38c:	4619      	mov	r1, r3
{
   1c38e:	4691      	mov	r9, r2
   1c390:	4698      	mov	r8, r3
   1c392:	4617      	mov	r7, r2
   1c394:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1c396:	f00d fb72 	bl	29a7e <sys_clock_timeout_end_calc>
   1c39a:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1c39e:	b945      	cbnz	r5, 1c3b2 <net_buf_alloc_len+0x32>
   1c3a0:	4969      	ldr	r1, [pc, #420]	; (1c548 <net_buf_alloc_len+0x1c8>)
   1c3a2:	486a      	ldr	r0, [pc, #424]	; (1c54c <net_buf_alloc_len+0x1cc>)
   1c3a4:	22f4      	movs	r2, #244	; 0xf4
   1c3a6:	f00a f8aa 	bl	264fe <assert_print>
   1c3aa:	4867      	ldr	r0, [pc, #412]	; (1c548 <net_buf_alloc_len+0x1c8>)
   1c3ac:	21f4      	movs	r1, #244	; 0xf4
   1c3ae:	f00a f89f 	bl	264f0 <assert_post_action>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1c3b2:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   1c3b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c3ba:	f3ef 8b11 	mrs	fp, BASEPRI
   1c3be:	f383 8812 	msr	BASEPRI_MAX, r3
   1c3c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c3c6:	4650      	mov	r0, sl
   1c3c8:	f003 ffe0 	bl	2038c <z_spin_lock_valid>
   1c3cc:	b940      	cbnz	r0, 1c3e0 <net_buf_alloc_len+0x60>
   1c3ce:	4960      	ldr	r1, [pc, #384]	; (1c550 <net_buf_alloc_len+0x1d0>)
   1c3d0:	485e      	ldr	r0, [pc, #376]	; (1c54c <net_buf_alloc_len+0x1cc>)
   1c3d2:	228e      	movs	r2, #142	; 0x8e
   1c3d4:	f00a f893 	bl	264fe <assert_print>
   1c3d8:	485d      	ldr	r0, [pc, #372]	; (1c550 <net_buf_alloc_len+0x1d0>)
   1c3da:	218e      	movs	r1, #142	; 0x8e
   1c3dc:	f00a f888 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c3e0:	4650      	mov	r0, sl
   1c3e2:	f003 fff1 	bl	203c8 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1c3e6:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1c3e8:	2b00      	cmp	r3, #0
   1c3ea:	d076      	beq.n	1c4da <net_buf_alloc_len+0x15a>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1c3ec:	8c2a      	ldrh	r2, [r5, #32]
   1c3ee:	429a      	cmp	r2, r3
   1c3f0:	d94c      	bls.n	1c48c <net_buf_alloc_len+0x10c>
	return z_impl_k_queue_get(queue, timeout);
   1c3f2:	2200      	movs	r2, #0
   1c3f4:	2300      	movs	r3, #0
   1c3f6:	4628      	mov	r0, r5
   1c3f8:	f004 fa42 	bl	20880 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1c3fc:	4604      	mov	r4, r0
   1c3fe:	2800      	cmp	r0, #0
   1c400:	d044      	beq.n	1c48c <net_buf_alloc_len+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c402:	4650      	mov	r0, sl
   1c404:	f003 ffd0 	bl	203a8 <z_spin_unlock_valid>
   1c408:	b940      	cbnz	r0, 1c41c <net_buf_alloc_len+0x9c>
   1c40a:	4951      	ldr	r1, [pc, #324]	; (1c550 <net_buf_alloc_len+0x1d0>)
   1c40c:	484f      	ldr	r0, [pc, #316]	; (1c54c <net_buf_alloc_len+0x1cc>)
   1c40e:	22b9      	movs	r2, #185	; 0xb9
   1c410:	f00a f875 	bl	264fe <assert_print>
   1c414:	484e      	ldr	r0, [pc, #312]	; (1c550 <net_buf_alloc_len+0x1d0>)
   1c416:	21b9      	movs	r1, #185	; 0xb9
   1c418:	f00a f86a 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   1c41c:	f38b 8811 	msr	BASEPRI, fp
   1c420:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1c424:	9d03      	ldr	r5, [sp, #12]
   1c426:	2d00      	cmp	r5, #0
   1c428:	f000 808c 	beq.w	1c544 <net_buf_alloc_len+0x1c4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c42c:	ea58 0309 	orrs.w	r3, r8, r9
   1c430:	d010      	beq.n	1c454 <net_buf_alloc_len+0xd4>
   1c432:	f1b8 3fff 	cmp.w	r8, #4294967295
   1c436:	bf08      	it	eq
   1c438:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1c43c:	d00a      	beq.n	1c454 <net_buf_alloc_len+0xd4>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1c43e:	f006 fa5f 	bl	22900 <sys_clock_tick_get>
   1c442:	9b01      	ldr	r3, [sp, #4]
   1c444:	1a1f      	subs	r7, r3, r0
   1c446:	9b02      	ldr	r3, [sp, #8]
   1c448:	eb63 0601 	sbc.w	r6, r3, r1
   1c44c:	2e00      	cmp	r6, #0
   1c44e:	bfbc      	itt	lt
   1c450:	2700      	movlt	r7, #0
   1c452:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c454:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1c456:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1c554 <net_buf_alloc_len+0x1d4>
   1c45a:	f04f 0934 	mov.w	r9, #52	; 0x34
   1c45e:	fb09 8303 	mla	r3, r9, r3, r8
   1c462:	463a      	mov	r2, r7
   1c464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c466:	681b      	ldr	r3, [r3, #0]
   1c468:	a903      	add	r1, sp, #12
   1c46a:	f8d3 a000 	ldr.w	sl, [r3]
   1c46e:	4620      	mov	r0, r4
   1c470:	4633      	mov	r3, r6
   1c472:	47d0      	blx	sl
   1c474:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1c476:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1c478:	2800      	cmp	r0, #0
   1c47a:	d14b      	bne.n	1c514 <net_buf_alloc_len+0x194>
	k_lifo_put(&pool->free, buf);
   1c47c:	79a0      	ldrb	r0, [r4, #6]
   1c47e:	4621      	mov	r1, r4
   1c480:	fb00 8009 	mla	r0, r0, r9, r8
   1c484:	f00d fa40 	bl	29908 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1c488:	4634      	mov	r4, r6
}
   1c48a:	e03f      	b.n	1c50c <net_buf_alloc_len+0x18c>
		uninit_count = pool->uninit_count--;
   1c48c:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1c48e:	1e63      	subs	r3, r4, #1
   1c490:	846b      	strh	r3, [r5, #34]	; 0x22
   1c492:	4650      	mov	r0, sl
   1c494:	f003 ff88 	bl	203a8 <z_spin_unlock_valid>
   1c498:	b940      	cbnz	r0, 1c4ac <net_buf_alloc_len+0x12c>
   1c49a:	492d      	ldr	r1, [pc, #180]	; (1c550 <net_buf_alloc_len+0x1d0>)
   1c49c:	482b      	ldr	r0, [pc, #172]	; (1c54c <net_buf_alloc_len+0x1cc>)
   1c49e:	22b9      	movs	r2, #185	; 0xb9
   1c4a0:	f00a f82d 	bl	264fe <assert_print>
   1c4a4:	482a      	ldr	r0, [pc, #168]	; (1c550 <net_buf_alloc_len+0x1d0>)
   1c4a6:	21b9      	movs	r1, #185	; 0xb9
   1c4a8:	f00a f822 	bl	264f0 <assert_post_action>
   1c4ac:	f38b 8811 	msr	BASEPRI, fp
   1c4b0:	f3bf 8f6f 	isb	sy
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1c4b4:	8c28      	ldrh	r0, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c4b6:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1c4ba:	1b04      	subs	r4, r0, r4
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c4bc:	f102 0317 	add.w	r3, r2, #23
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1c4c0:	6b28      	ldr	r0, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c4c2:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1c4c6:	fb04 0403 	mla	r4, r4, r3, r0
	return pool - _net_buf_pool_list;
   1c4ca:	4822      	ldr	r0, [pc, #136]	; (1c554 <net_buf_alloc_len+0x1d4>)
   1c4cc:	4b22      	ldr	r3, [pc, #136]	; (1c558 <net_buf_alloc_len+0x1d8>)
	buf->user_data_size = pool->user_data_size;
   1c4ce:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1c4d0:	1a2d      	subs	r5, r5, r0
   1c4d2:	10ad      	asrs	r5, r5, #2
   1c4d4:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1c4d6:	71a5      	strb	r5, [r4, #6]
		goto success;
   1c4d8:	e7a4      	b.n	1c424 <net_buf_alloc_len+0xa4>
   1c4da:	4650      	mov	r0, sl
   1c4dc:	f003 ff64 	bl	203a8 <z_spin_unlock_valid>
   1c4e0:	b940      	cbnz	r0, 1c4f4 <net_buf_alloc_len+0x174>
   1c4e2:	491b      	ldr	r1, [pc, #108]	; (1c550 <net_buf_alloc_len+0x1d0>)
   1c4e4:	4819      	ldr	r0, [pc, #100]	; (1c54c <net_buf_alloc_len+0x1cc>)
   1c4e6:	22b9      	movs	r2, #185	; 0xb9
   1c4e8:	f00a f809 	bl	264fe <assert_print>
   1c4ec:	4818      	ldr	r0, [pc, #96]	; (1c550 <net_buf_alloc_len+0x1d0>)
   1c4ee:	21b9      	movs	r1, #185	; 0xb9
   1c4f0:	f009 fffe 	bl	264f0 <assert_post_action>
   1c4f4:	f38b 8811 	msr	BASEPRI, fp
   1c4f8:	f3bf 8f6f 	isb	sy
   1c4fc:	464a      	mov	r2, r9
   1c4fe:	4643      	mov	r3, r8
   1c500:	4628      	mov	r0, r5
   1c502:	f004 f9bd 	bl	20880 <z_impl_k_queue_get>
	if (!buf) {
   1c506:	4604      	mov	r4, r0
   1c508:	2800      	cmp	r0, #0
   1c50a:	d18b      	bne.n	1c424 <net_buf_alloc_len+0xa4>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1c50c:	4620      	mov	r0, r4
   1c50e:	b005      	add	sp, #20
   1c510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1c514:	9b03      	ldr	r3, [sp, #12]
   1c516:	429d      	cmp	r5, r3
   1c518:	d90a      	bls.n	1c530 <net_buf_alloc_len+0x1b0>
   1c51a:	490b      	ldr	r1, [pc, #44]	; (1c548 <net_buf_alloc_len+0x1c8>)
   1c51c:	480b      	ldr	r0, [pc, #44]	; (1c54c <net_buf_alloc_len+0x1cc>)
   1c51e:	f240 1255 	movw	r2, #341	; 0x155
   1c522:	f009 ffec 	bl	264fe <assert_print>
   1c526:	4808      	ldr	r0, [pc, #32]	; (1c548 <net_buf_alloc_len+0x1c8>)
   1c528:	f240 1155 	movw	r1, #341	; 0x155
   1c52c:	f009 ffe0 	bl	264f0 <assert_post_action>
	buf->frags = NULL;
   1c530:	2300      	movs	r3, #0
   1c532:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1c534:	2301      	movs	r3, #1
   1c536:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1c538:	9b03      	ldr	r3, [sp, #12]
   1c53a:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1c53c:	4620      	mov	r0, r4
   1c53e:	f7ff fefd 	bl	1c33c <net_buf_reset>
	return buf;
   1c542:	e7e3      	b.n	1c50c <net_buf_alloc_len+0x18c>
		buf->__buf = NULL;
   1c544:	6125      	str	r5, [r4, #16]
   1c546:	e7f3      	b.n	1c530 <net_buf_alloc_len+0x1b0>
   1c548:	0002d037 	.word	0x0002d037
   1c54c:	0002aa75 	.word	0x0002aa75
   1c550:	0002ac34 	.word	0x0002ac34
   1c554:	200008f0 	.word	0x200008f0
   1c558:	c4ec4ec5 	.word	0xc4ec4ec5

0001c55c <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1c55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c560:	4606      	mov	r6, r0
   1c562:	f004 f98d 	bl	20880 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1c566:	4605      	mov	r5, r0
   1c568:	b140      	cbz	r0, 1c57c <net_buf_get+0x20>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1c56a:	4f12      	ldr	r7, [pc, #72]	; (1c5b4 <net_buf_get+0x58>)
   1c56c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1c5b8 <net_buf_get+0x5c>
   1c570:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c572:	7963      	ldrb	r3, [r4, #5]
   1c574:	f013 0301 	ands.w	r3, r3, #1
   1c578:	d103      	bne.n	1c582 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1c57a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1c57c:	4628      	mov	r0, r5
   1c57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c582:	2200      	movs	r2, #0
   1c584:	2300      	movs	r3, #0
   1c586:	4630      	mov	r0, r6
   1c588:	f004 f97a 	bl	20880 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1c58c:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1c58e:	b950      	cbnz	r0, 1c5a6 <net_buf_get+0x4a>
   1c590:	4639      	mov	r1, r7
   1c592:	4640      	mov	r0, r8
   1c594:	f240 12ad 	movw	r2, #429	; 0x1ad
   1c598:	f009 ffb1 	bl	264fe <assert_print>
   1c59c:	f240 11ad 	movw	r1, #429	; 0x1ad
   1c5a0:	4638      	mov	r0, r7
   1c5a2:	f009 ffa5 	bl	264f0 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1c5a6:	7963      	ldrb	r3, [r4, #5]
   1c5a8:	f023 0301 	bic.w	r3, r3, #1
   1c5ac:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c5ae:	6824      	ldr	r4, [r4, #0]
   1c5b0:	e7df      	b.n	1c572 <net_buf_get+0x16>
   1c5b2:	bf00      	nop
   1c5b4:	0002d037 	.word	0x0002d037
   1c5b8:	0002aa75 	.word	0x0002aa75

0001c5bc <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1c5bc:	b538      	push	{r3, r4, r5, lr}
   1c5be:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1c5c0:	4604      	mov	r4, r0
   1c5c2:	b950      	cbnz	r0, 1c5da <net_buf_simple_reserve+0x1e>
   1c5c4:	490d      	ldr	r1, [pc, #52]	; (1c5fc <net_buf_simple_reserve+0x40>)
   1c5c6:	480e      	ldr	r0, [pc, #56]	; (1c600 <net_buf_simple_reserve+0x44>)
   1c5c8:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   1c5cc:	f009 ff97 	bl	264fe <assert_print>
   1c5d0:	480a      	ldr	r0, [pc, #40]	; (1c5fc <net_buf_simple_reserve+0x40>)
   1c5d2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1c5d6:	f009 ff8b 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1c5da:	88a3      	ldrh	r3, [r4, #4]
   1c5dc:	b153      	cbz	r3, 1c5f4 <net_buf_simple_reserve+0x38>
   1c5de:	4907      	ldr	r1, [pc, #28]	; (1c5fc <net_buf_simple_reserve+0x40>)
   1c5e0:	4807      	ldr	r0, [pc, #28]	; (1c600 <net_buf_simple_reserve+0x44>)
   1c5e2:	f240 12c5 	movw	r2, #453	; 0x1c5
   1c5e6:	f009 ff8a 	bl	264fe <assert_print>
   1c5ea:	4804      	ldr	r0, [pc, #16]	; (1c5fc <net_buf_simple_reserve+0x40>)
   1c5ec:	f240 11c5 	movw	r1, #453	; 0x1c5
   1c5f0:	f009 ff7e 	bl	264f0 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1c5f4:	68a3      	ldr	r3, [r4, #8]
   1c5f6:	442b      	add	r3, r5
   1c5f8:	6023      	str	r3, [r4, #0]
}
   1c5fa:	bd38      	pop	{r3, r4, r5, pc}
   1c5fc:	0002d037 	.word	0x0002d037
   1c600:	0002aa75 	.word	0x0002aa75

0001c604 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1c604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c606:	460c      	mov	r4, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1c608:	4605      	mov	r5, r0
   1c60a:	b950      	cbnz	r0, 1c622 <net_buf_slist_put+0x1e>
   1c60c:	4928      	ldr	r1, [pc, #160]	; (1c6b0 <net_buf_slist_put+0xac>)
   1c60e:	4829      	ldr	r0, [pc, #164]	; (1c6b4 <net_buf_slist_put+0xb0>)
   1c610:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1c614:	f009 ff73 	bl	264fe <assert_print>
   1c618:	4825      	ldr	r0, [pc, #148]	; (1c6b0 <net_buf_slist_put+0xac>)
   1c61a:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1c61e:	f009 ff67 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1c622:	b954      	cbnz	r4, 1c63a <net_buf_slist_put+0x36>
   1c624:	4922      	ldr	r1, [pc, #136]	; (1c6b0 <net_buf_slist_put+0xac>)
   1c626:	4823      	ldr	r0, [pc, #140]	; (1c6b4 <net_buf_slist_put+0xb0>)
   1c628:	f240 12d3 	movw	r2, #467	; 0x1d3
   1c62c:	f009 ff67 	bl	264fe <assert_print>
   1c630:	481f      	ldr	r0, [pc, #124]	; (1c6b0 <net_buf_slist_put+0xac>)
   1c632:	f240 11d3 	movw	r1, #467	; 0x1d3
   1c636:	f009 ff5b 	bl	264f0 <assert_post_action>
{
   1c63a:	4626      	mov	r6, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1c63c:	6832      	ldr	r2, [r6, #0]
   1c63e:	bb72      	cbnz	r2, 1c69e <net_buf_slist_put+0x9a>
	__asm__ volatile(
   1c640:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c644:	f3ef 8711 	mrs	r7, BASEPRI
   1c648:	f383 8812 	msr	BASEPRI_MAX, r3
   1c64c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c650:	4819      	ldr	r0, [pc, #100]	; (1c6b8 <net_buf_slist_put+0xb4>)
   1c652:	f003 fe9b 	bl	2038c <z_spin_lock_valid>
   1c656:	b940      	cbnz	r0, 1c66a <net_buf_slist_put+0x66>
   1c658:	4918      	ldr	r1, [pc, #96]	; (1c6bc <net_buf_slist_put+0xb8>)
   1c65a:	4816      	ldr	r0, [pc, #88]	; (1c6b4 <net_buf_slist_put+0xb0>)
   1c65c:	228e      	movs	r2, #142	; 0x8e
   1c65e:	f009 ff4e 	bl	264fe <assert_print>
   1c662:	4816      	ldr	r0, [pc, #88]	; (1c6bc <net_buf_slist_put+0xb8>)
   1c664:	218e      	movs	r1, #142	; 0x8e
   1c666:	f009 ff43 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c66a:	4813      	ldr	r0, [pc, #76]	; (1c6b8 <net_buf_slist_put+0xb4>)
   1c66c:	f003 feac 	bl	203c8 <z_spin_lock_set_owner>
Z_GENLIST_APPEND_LIST(slist, snode)
   1c670:	b11c      	cbz	r4, 1c67a <net_buf_slist_put+0x76>
	return list->tail;
   1c672:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1c674:	b9cb      	cbnz	r3, 1c6aa <net_buf_slist_put+0xa6>
	list->head = node;
   1c676:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1c678:	606e      	str	r6, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c67a:	480f      	ldr	r0, [pc, #60]	; (1c6b8 <net_buf_slist_put+0xb4>)
   1c67c:	f003 fe94 	bl	203a8 <z_spin_unlock_valid>
   1c680:	b940      	cbnz	r0, 1c694 <net_buf_slist_put+0x90>
   1c682:	490e      	ldr	r1, [pc, #56]	; (1c6bc <net_buf_slist_put+0xb8>)
   1c684:	480b      	ldr	r0, [pc, #44]	; (1c6b4 <net_buf_slist_put+0xb0>)
   1c686:	22b9      	movs	r2, #185	; 0xb9
   1c688:	f009 ff39 	bl	264fe <assert_print>
   1c68c:	480b      	ldr	r0, [pc, #44]	; (1c6bc <net_buf_slist_put+0xb8>)
   1c68e:	21b9      	movs	r1, #185	; 0xb9
   1c690:	f009 ff2e 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   1c694:	f387 8811 	msr	BASEPRI, r7
   1c698:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1c69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tail->flags |= NET_BUF_FRAGS;
   1c69e:	7973      	ldrb	r3, [r6, #5]
   1c6a0:	f043 0301 	orr.w	r3, r3, #1
   1c6a4:	7173      	strb	r3, [r6, #5]
   1c6a6:	4616      	mov	r6, r2
   1c6a8:	e7c8      	b.n	1c63c <net_buf_slist_put+0x38>
	parent->next = child;
   1c6aa:	601c      	str	r4, [r3, #0]
}
   1c6ac:	e7e4      	b.n	1c678 <net_buf_slist_put+0x74>
   1c6ae:	bf00      	nop
   1c6b0:	0002d037 	.word	0x0002d037
   1c6b4:	0002aa75 	.word	0x0002aa75
   1c6b8:	200026d8 	.word	0x200026d8
   1c6bc:	0002ac34 	.word	0x0002ac34

0001c6c0 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1c6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1c6c4:	4604      	mov	r4, r0
   1c6c6:	b950      	cbnz	r0, 1c6de <net_buf_slist_get+0x1e>
   1c6c8:	4931      	ldr	r1, [pc, #196]	; (1c790 <net_buf_slist_get+0xd0>)
   1c6ca:	4832      	ldr	r0, [pc, #200]	; (1c794 <net_buf_slist_get+0xd4>)
   1c6cc:	f240 12e3 	movw	r2, #483	; 0x1e3
   1c6d0:	f009 ff15 	bl	264fe <assert_print>
   1c6d4:	482e      	ldr	r0, [pc, #184]	; (1c790 <net_buf_slist_get+0xd0>)
   1c6d6:	f240 11e3 	movw	r1, #483	; 0x1e3
   1c6da:	f009 ff09 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   1c6de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c6e2:	f3ef 8811 	mrs	r8, BASEPRI
   1c6e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c6ee:	482a      	ldr	r0, [pc, #168]	; (1c798 <net_buf_slist_get+0xd8>)
   1c6f0:	f003 fe4c 	bl	2038c <z_spin_lock_valid>
   1c6f4:	b940      	cbnz	r0, 1c708 <net_buf_slist_get+0x48>
   1c6f6:	4929      	ldr	r1, [pc, #164]	; (1c79c <net_buf_slist_get+0xdc>)
   1c6f8:	4826      	ldr	r0, [pc, #152]	; (1c794 <net_buf_slist_get+0xd4>)
   1c6fa:	228e      	movs	r2, #142	; 0x8e
   1c6fc:	f009 feff 	bl	264fe <assert_print>
   1c700:	4826      	ldr	r0, [pc, #152]	; (1c79c <net_buf_slist_get+0xdc>)
   1c702:	218e      	movs	r1, #142	; 0x8e
   1c704:	f009 fef4 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c708:	4823      	ldr	r0, [pc, #140]	; (1c798 <net_buf_slist_get+0xd8>)
   1c70a:	f003 fe5d 	bl	203c8 <z_spin_lock_set_owner>
	return list->head;
   1c70e:	6826      	ldr	r6, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1c710:	b176      	cbz	r6, 1c730 <net_buf_slist_get+0x70>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c712:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1c714:	6833      	ldr	r3, [r6, #0]

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   1c716:	4f1e      	ldr	r7, [pc, #120]	; (1c790 <net_buf_slist_get+0xd0>)
   1c718:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1c794 <net_buf_slist_get+0xd4>
	list->head = node;
   1c71c:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c71e:	4296      	cmp	r6, r2
	list->tail = node;
   1c720:	bf08      	it	eq
   1c722:	6063      	streq	r3, [r4, #4]
{
   1c724:	4635      	mov	r5, r6
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c726:	796b      	ldrb	r3, [r5, #5]
   1c728:	f013 0301 	ands.w	r3, r3, #1
   1c72c:	d114      	bne.n	1c758 <net_buf_slist_get+0x98>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   1c72e:	602b      	str	r3, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c730:	4819      	ldr	r0, [pc, #100]	; (1c798 <net_buf_slist_get+0xd8>)
   1c732:	f003 fe39 	bl	203a8 <z_spin_unlock_valid>
   1c736:	b940      	cbnz	r0, 1c74a <net_buf_slist_get+0x8a>
   1c738:	4918      	ldr	r1, [pc, #96]	; (1c79c <net_buf_slist_get+0xdc>)
   1c73a:	4816      	ldr	r0, [pc, #88]	; (1c794 <net_buf_slist_get+0xd4>)
   1c73c:	22b9      	movs	r2, #185	; 0xb9
   1c73e:	f009 fede 	bl	264fe <assert_print>
   1c742:	4816      	ldr	r0, [pc, #88]	; (1c79c <net_buf_slist_get+0xdc>)
   1c744:	21b9      	movs	r1, #185	; 0xb9
   1c746:	f009 fed3 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   1c74a:	f388 8811 	msr	BASEPRI, r8
   1c74e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1c752:	4630      	mov	r0, r6
   1c754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return list->head;
   1c758:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1c75a:	b98b      	cbnz	r3, 1c780 <net_buf_slist_get+0xc0>
			__ASSERT_NO_MSG(frag->frags);
   1c75c:	4639      	mov	r1, r7
   1c75e:	4648      	mov	r0, r9
			frag->frags = (void *)sys_slist_get(list);
   1c760:	602b      	str	r3, [r5, #0]
			__ASSERT_NO_MSG(frag->frags);
   1c762:	f240 12ed 	movw	r2, #493	; 0x1ed
   1c766:	f009 feca 	bl	264fe <assert_print>
   1c76a:	f240 11ed 	movw	r1, #493	; 0x1ed
   1c76e:	4638      	mov	r0, r7
   1c770:	f009 febe 	bl	264f0 <assert_post_action>
			frag->flags &= ~NET_BUF_FRAGS;
   1c774:	796b      	ldrb	r3, [r5, #5]
   1c776:	f023 0301 	bic.w	r3, r3, #1
   1c77a:	716b      	strb	r3, [r5, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c77c:	682d      	ldr	r5, [r5, #0]
   1c77e:	e7d2      	b.n	1c726 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c780:	6861      	ldr	r1, [r4, #4]
	return node->next;
   1c782:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1c784:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c786:	428b      	cmp	r3, r1
	list->tail = node;
   1c788:	bf08      	it	eq
   1c78a:	6062      	streq	r2, [r4, #4]
			frag->frags = (void *)sys_slist_get(list);
   1c78c:	602b      	str	r3, [r5, #0]
			__ASSERT_NO_MSG(frag->frags);
   1c78e:	e7f1      	b.n	1c774 <net_buf_slist_get+0xb4>
   1c790:	0002d037 	.word	0x0002d037
   1c794:	0002aa75 	.word	0x0002aa75
   1c798:	200026d8 	.word	0x200026d8
   1c79c:	0002ac34 	.word	0x0002ac34

0001c7a0 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1c7a0:	b538      	push	{r3, r4, r5, lr}
   1c7a2:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1c7a4:	4605      	mov	r5, r0
   1c7a6:	b950      	cbnz	r0, 1c7be <net_buf_put+0x1e>
   1c7a8:	4912      	ldr	r1, [pc, #72]	; (1c7f4 <net_buf_put+0x54>)
   1c7aa:	4813      	ldr	r0, [pc, #76]	; (1c7f8 <net_buf_put+0x58>)
   1c7ac:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c7b0:	f009 fea5 	bl	264fe <assert_print>
   1c7b4:	480f      	ldr	r0, [pc, #60]	; (1c7f4 <net_buf_put+0x54>)
   1c7b6:	f44f 7100 	mov.w	r1, #512	; 0x200
   1c7ba:	f009 fe99 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1c7be:	b954      	cbnz	r4, 1c7d6 <net_buf_put+0x36>
   1c7c0:	490c      	ldr	r1, [pc, #48]	; (1c7f4 <net_buf_put+0x54>)
   1c7c2:	480d      	ldr	r0, [pc, #52]	; (1c7f8 <net_buf_put+0x58>)
   1c7c4:	f240 2201 	movw	r2, #513	; 0x201
   1c7c8:	f009 fe99 	bl	264fe <assert_print>
   1c7cc:	4809      	ldr	r0, [pc, #36]	; (1c7f4 <net_buf_put+0x54>)
   1c7ce:	f240 2101 	movw	r1, #513	; 0x201
   1c7d2:	f009 fe8d 	bl	264f0 <assert_post_action>
{
   1c7d6:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1c7d8:	6811      	ldr	r1, [r2, #0]
   1c7da:	b929      	cbnz	r1, 1c7e8 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1c7dc:	4621      	mov	r1, r4
   1c7de:	4628      	mov	r0, r5
}
   1c7e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1c7e4:	f003 bff8 	b.w	207d8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1c7e8:	7953      	ldrb	r3, [r2, #5]
   1c7ea:	f043 0301 	orr.w	r3, r3, #1
   1c7ee:	7153      	strb	r3, [r2, #5]
   1c7f0:	460a      	mov	r2, r1
   1c7f2:	e7f1      	b.n	1c7d8 <net_buf_put+0x38>
   1c7f4:	0002d037 	.word	0x0002d037
   1c7f8:	0002aa75 	.word	0x0002aa75

0001c7fc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1c7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1c800:	4605      	mov	r5, r0
   1c802:	b328      	cbz	r0, 1c850 <net_buf_unref+0x54>
   1c804:	4e1c      	ldr	r6, [pc, #112]	; (1c878 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1c806:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1c808:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1c80c:	462c      	mov	r4, r5
   1c80e:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1c810:	7923      	ldrb	r3, [r4, #4]
   1c812:	3b01      	subs	r3, #1
   1c814:	b2db      	uxtb	r3, r3
   1c816:	7123      	strb	r3, [r4, #4]
   1c818:	b9c3      	cbnz	r3, 1c84c <net_buf_unref+0x50>
		if (buf->__buf) {
   1c81a:	6921      	ldr	r1, [r4, #16]
   1c81c:	b159      	cbz	r1, 1c836 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1c81e:	7963      	ldrb	r3, [r4, #5]
   1c820:	079b      	lsls	r3, r3, #30
   1c822:	d407      	bmi.n	1c834 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c824:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1c826:	fb08 6303 	mla	r3, r8, r3, r6
   1c82a:	4620      	mov	r0, r4
   1c82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c82e:	681b      	ldr	r3, [r3, #0]
   1c830:	689b      	ldr	r3, [r3, #8]
   1c832:	4798      	blx	r3
			buf->__buf = NULL;
   1c834:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1c836:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1c838:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1c83a:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1c83e:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1c840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c842:	b193      	cbz	r3, 1c86a <net_buf_unref+0x6e>
			pool->destroy(buf);
   1c844:	4620      	mov	r0, r4
   1c846:	4798      	blx	r3
	while (buf) {
   1c848:	2d00      	cmp	r5, #0
   1c84a:	d1df      	bne.n	1c80c <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1c84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1c850:	490a      	ldr	r1, [pc, #40]	; (1c87c <net_buf_unref+0x80>)
   1c852:	480b      	ldr	r0, [pc, #44]	; (1c880 <net_buf_unref+0x84>)
   1c854:	f44f 7204 	mov.w	r2, #528	; 0x210
   1c858:	f009 fe51 	bl	264fe <assert_print>
}
   1c85c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1c860:	4806      	ldr	r0, [pc, #24]	; (1c87c <net_buf_unref+0x80>)
   1c862:	f44f 7104 	mov.w	r1, #528	; 0x210
   1c866:	f009 be43 	b.w	264f0 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1c86a:	4621      	mov	r1, r4
   1c86c:	fb00 6008 	mla	r0, r0, r8, r6
   1c870:	f00d f84a 	bl	29908 <k_queue_prepend>
}
   1c874:	e7e8      	b.n	1c848 <net_buf_unref+0x4c>
   1c876:	bf00      	nop
   1c878:	200008f0 	.word	0x200008f0
   1c87c:	0002d037 	.word	0x0002d037
   1c880:	0002aa75 	.word	0x0002aa75

0001c884 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1c884:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1c886:	4604      	mov	r4, r0
   1c888:	b950      	cbnz	r0, 1c8a0 <net_buf_ref+0x1c>
   1c88a:	4908      	ldr	r1, [pc, #32]	; (1c8ac <net_buf_ref+0x28>)
   1c88c:	4808      	ldr	r0, [pc, #32]	; (1c8b0 <net_buf_ref+0x2c>)
   1c88e:	f240 223f 	movw	r2, #575	; 0x23f
   1c892:	f009 fe34 	bl	264fe <assert_print>
   1c896:	4805      	ldr	r0, [pc, #20]	; (1c8ac <net_buf_ref+0x28>)
   1c898:	f240 213f 	movw	r1, #575	; 0x23f
   1c89c:	f009 fe28 	bl	264f0 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1c8a0:	7923      	ldrb	r3, [r4, #4]
   1c8a2:	3301      	adds	r3, #1
   1c8a4:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1c8a6:	4620      	mov	r0, r4
   1c8a8:	bd10      	pop	{r4, pc}
   1c8aa:	bf00      	nop
   1c8ac:	0002d037 	.word	0x0002d037
   1c8b0:	0002aa75 	.word	0x0002aa75

0001c8b4 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1c8b4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1c8b6:	4604      	mov	r4, r0
   1c8b8:	b950      	cbnz	r0, 1c8d0 <net_buf_frag_last+0x1c>
   1c8ba:	4908      	ldr	r1, [pc, #32]	; (1c8dc <net_buf_frag_last+0x28>)
   1c8bc:	4808      	ldr	r0, [pc, #32]	; (1c8e0 <net_buf_frag_last+0x2c>)
   1c8be:	f44f 721f 	mov.w	r2, #636	; 0x27c
   1c8c2:	f009 fe1c 	bl	264fe <assert_print>
   1c8c6:	4805      	ldr	r0, [pc, #20]	; (1c8dc <net_buf_frag_last+0x28>)
   1c8c8:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1c8cc:	f009 fe10 	bl	264f0 <assert_post_action>

	while (buf->frags) {
   1c8d0:	4620      	mov	r0, r4
   1c8d2:	6824      	ldr	r4, [r4, #0]
   1c8d4:	2c00      	cmp	r4, #0
   1c8d6:	d1fb      	bne.n	1c8d0 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   1c8d8:	bd10      	pop	{r4, pc}
   1c8da:	bf00      	nop
   1c8dc:	0002d037 	.word	0x0002d037
   1c8e0:	0002aa75 	.word	0x0002aa75

0001c8e4 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1c8e4:	b538      	push	{r3, r4, r5, lr}
   1c8e6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1c8e8:	4604      	mov	r4, r0
   1c8ea:	b950      	cbnz	r0, 1c902 <net_buf_frag_insert+0x1e>
   1c8ec:	490f      	ldr	r1, [pc, #60]	; (1c92c <net_buf_frag_insert+0x48>)
   1c8ee:	4810      	ldr	r0, [pc, #64]	; (1c930 <net_buf_frag_insert+0x4c>)
   1c8f0:	f240 2287 	movw	r2, #647	; 0x287
   1c8f4:	f009 fe03 	bl	264fe <assert_print>
   1c8f8:	480c      	ldr	r0, [pc, #48]	; (1c92c <net_buf_frag_insert+0x48>)
   1c8fa:	f240 2187 	movw	r1, #647	; 0x287
   1c8fe:	f009 fdf7 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1c902:	b955      	cbnz	r5, 1c91a <net_buf_frag_insert+0x36>
   1c904:	4909      	ldr	r1, [pc, #36]	; (1c92c <net_buf_frag_insert+0x48>)
   1c906:	480a      	ldr	r0, [pc, #40]	; (1c930 <net_buf_frag_insert+0x4c>)
   1c908:	f44f 7222 	mov.w	r2, #648	; 0x288
   1c90c:	f009 fdf7 	bl	264fe <assert_print>
   1c910:	4806      	ldr	r0, [pc, #24]	; (1c92c <net_buf_frag_insert+0x48>)
   1c912:	f44f 7122 	mov.w	r1, #648	; 0x288
   1c916:	f009 fdeb 	bl	264f0 <assert_post_action>

	if (parent->frags) {
   1c91a:	6823      	ldr	r3, [r4, #0]
   1c91c:	b123      	cbz	r3, 1c928 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1c91e:	4628      	mov	r0, r5
   1c920:	f7ff ffc8 	bl	1c8b4 <net_buf_frag_last>
   1c924:	6823      	ldr	r3, [r4, #0]
   1c926:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1c928:	6025      	str	r5, [r4, #0]
}
   1c92a:	bd38      	pop	{r3, r4, r5, pc}
   1c92c:	0002d037 	.word	0x0002d037
   1c930:	0002aa75 	.word	0x0002aa75

0001c934 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1c934:	b538      	push	{r3, r4, r5, lr}
   1c936:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1c938:	460d      	mov	r5, r1
   1c93a:	b951      	cbnz	r1, 1c952 <net_buf_frag_add+0x1e>
   1c93c:	490c      	ldr	r1, [pc, #48]	; (1c970 <net_buf_frag_add+0x3c>)
   1c93e:	480d      	ldr	r0, [pc, #52]	; (1c974 <net_buf_frag_add+0x40>)
   1c940:	f240 2293 	movw	r2, #659	; 0x293
   1c944:	f009 fddb 	bl	264fe <assert_print>
   1c948:	4809      	ldr	r0, [pc, #36]	; (1c970 <net_buf_frag_add+0x3c>)
   1c94a:	f240 2193 	movw	r1, #659	; 0x293
   1c94e:	f009 fdcf 	bl	264f0 <assert_post_action>

	if (!head) {
   1c952:	b924      	cbnz	r4, 1c95e <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   1c954:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1c956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1c95a:	f7ff bf93 	b.w	1c884 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1c95e:	4620      	mov	r0, r4
   1c960:	f7ff ffa8 	bl	1c8b4 <net_buf_frag_last>
   1c964:	4629      	mov	r1, r5
   1c966:	f7ff ffbd 	bl	1c8e4 <net_buf_frag_insert>
}
   1c96a:	4620      	mov	r0, r4
   1c96c:	bd38      	pop	{r3, r4, r5, pc}
   1c96e:	bf00      	nop
   1c970:	0002d037 	.word	0x0002d037
   1c974:	0002aa75 	.word	0x0002aa75

0001c978 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1c978:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1c97a:	6882      	ldr	r2, [r0, #8]
   1c97c:	6803      	ldr	r3, [r0, #0]
   1c97e:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1c980:	4299      	cmp	r1, r3
{
   1c982:	4604      	mov	r4, r0
   1c984:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1c986:	d90a      	bls.n	1c99e <net_buf_simple_push+0x26>
   1c988:	4908      	ldr	r1, [pc, #32]	; (1c9ac <net_buf_simple_push+0x34>)
   1c98a:	4809      	ldr	r0, [pc, #36]	; (1c9b0 <net_buf_simple_push+0x38>)
   1c98c:	f240 4217 	movw	r2, #1047	; 0x417
   1c990:	f009 fdb5 	bl	264fe <assert_print>
   1c994:	4805      	ldr	r0, [pc, #20]	; (1c9ac <net_buf_simple_push+0x34>)
   1c996:	f240 4117 	movw	r1, #1047	; 0x417
   1c99a:	f009 fda9 	bl	264f0 <assert_post_action>
	buf->data -= len;
   1c99e:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1c9a0:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1c9a2:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1c9a4:	440d      	add	r5, r1
	buf->data -= len;
   1c9a6:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1c9a8:	80a5      	strh	r5, [r4, #4]
}
   1c9aa:	bd38      	pop	{r3, r4, r5, pc}
   1c9ac:	0002d037 	.word	0x0002d037
   1c9b0:	0002aa75 	.word	0x0002aa75

0001c9b4 <net_buf_simple_pull>:
{
   1c9b4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1c9b6:	8883      	ldrh	r3, [r0, #4]
   1c9b8:	428b      	cmp	r3, r1
{
   1c9ba:	4604      	mov	r4, r0
   1c9bc:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1c9be:	d20a      	bcs.n	1c9d6 <net_buf_simple_pull+0x22>
   1c9c0:	4908      	ldr	r1, [pc, #32]	; (1c9e4 <net_buf_simple_pull+0x30>)
   1c9c2:	4809      	ldr	r0, [pc, #36]	; (1c9e8 <net_buf_simple_pull+0x34>)
   1c9c4:	f240 4277 	movw	r2, #1143	; 0x477
   1c9c8:	f009 fd99 	bl	264fe <assert_print>
   1c9cc:	4805      	ldr	r0, [pc, #20]	; (1c9e4 <net_buf_simple_pull+0x30>)
   1c9ce:	f240 4177 	movw	r1, #1143	; 0x477
   1c9d2:	f009 fd8d 	bl	264f0 <assert_post_action>
	buf->len -= len;
   1c9d6:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1c9d8:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1c9da:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1c9dc:	4428      	add	r0, r5
	buf->len -= len;
   1c9de:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1c9e0:	6020      	str	r0, [r4, #0]
}
   1c9e2:	bd38      	pop	{r3, r4, r5, pc}
   1c9e4:	0002d037 	.word	0x0002d037
   1c9e8:	0002aa75 	.word	0x0002aa75

0001c9ec <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1c9ec:	8883      	ldrh	r3, [r0, #4]
   1c9ee:	428b      	cmp	r3, r1
{
   1c9f0:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   1c9f2:	6806      	ldr	r6, [r0, #0]
{
   1c9f4:	4604      	mov	r4, r0
   1c9f6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1c9f8:	d20a      	bcs.n	1ca10 <net_buf_simple_pull_mem+0x24>
   1c9fa:	4909      	ldr	r1, [pc, #36]	; (1ca20 <net_buf_simple_pull_mem+0x34>)
   1c9fc:	4809      	ldr	r0, [pc, #36]	; (1ca24 <net_buf_simple_pull_mem+0x38>)
   1c9fe:	f240 4283 	movw	r2, #1155	; 0x483
   1ca02:	f009 fd7c 	bl	264fe <assert_print>
   1ca06:	4806      	ldr	r0, [pc, #24]	; (1ca20 <net_buf_simple_pull_mem+0x34>)
   1ca08:	f240 4183 	movw	r1, #1155	; 0x483
   1ca0c:	f009 fd70 	bl	264f0 <assert_post_action>
	buf->len -= len;
   1ca10:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1ca12:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1ca14:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1ca16:	4429      	add	r1, r5
	buf->len -= len;
   1ca18:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1ca1a:	6021      	str	r1, [r4, #0]
}
   1ca1c:	4630      	mov	r0, r6
   1ca1e:	bd70      	pop	{r4, r5, r6, pc}
   1ca20:	0002d037 	.word	0x0002d037
   1ca24:	0002aa75 	.word	0x0002aa75

0001ca28 <net_buf_simple_add>:
{
   1ca28:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1ca2a:	6803      	ldr	r3, [r0, #0]
   1ca2c:	8886      	ldrh	r6, [r0, #4]
   1ca2e:	4604      	mov	r4, r0
   1ca30:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1ca32:	f00c fc61 	bl	292f8 <net_buf_simple_tailroom>
   1ca36:	4288      	cmp	r0, r1
{
   1ca38:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1ca3a:	d20a      	bcs.n	1ca52 <net_buf_simple_add+0x2a>
   1ca3c:	4907      	ldr	r1, [pc, #28]	; (1ca5c <net_buf_simple_add+0x34>)
   1ca3e:	4808      	ldr	r0, [pc, #32]	; (1ca60 <net_buf_simple_add+0x38>)
   1ca40:	f44f 724a 	mov.w	r2, #808	; 0x328
   1ca44:	f009 fd5b 	bl	264fe <assert_print>
   1ca48:	4804      	ldr	r0, [pc, #16]	; (1ca5c <net_buf_simple_add+0x34>)
   1ca4a:	f44f 714a 	mov.w	r1, #808	; 0x328
   1ca4e:	f009 fd4f 	bl	264f0 <assert_post_action>
	buf->len += len;
   1ca52:	88a1      	ldrh	r1, [r4, #4]
   1ca54:	440d      	add	r5, r1
   1ca56:	80a5      	strh	r5, [r4, #4]
}
   1ca58:	4630      	mov	r0, r6
   1ca5a:	bd70      	pop	{r4, r5, r6, pc}
   1ca5c:	0002d037 	.word	0x0002d037
   1ca60:	0002aa75 	.word	0x0002aa75

0001ca64 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1ca64:	b508      	push	{r3, lr}
	entropy_driver = DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));
   1ca66:	4b05      	ldr	r3, [pc, #20]	; (1ca7c <xoshiro128_initialize+0x18>)
   1ca68:	4805      	ldr	r0, [pc, #20]	; (1ca80 <xoshiro128_initialize+0x1c>)
   1ca6a:	6018      	str	r0, [r3, #0]
   1ca6c:	f00c fed3 	bl	29816 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
   1ca70:	2800      	cmp	r0, #0
	}
	return 0;
}
   1ca72:	bf0c      	ite	eq
   1ca74:	f06f 0012 	mvneq.w	r0, #18
   1ca78:	2000      	movne	r0, #0
   1ca7a:	bd08      	pop	{r3, pc}
   1ca7c:	200026dc 	.word	0x200026dc
   1ca80:	00029d44 	.word	0x00029d44

0001ca84 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1ca84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ca86:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1ca88:	490a      	ldr	r1, [pc, #40]	; (1cab4 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ca8a:	4a0b      	ldr	r2, [pc, #44]	; (1cab8 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1ca8c:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ca8e:	2340      	movs	r3, #64	; 0x40
   1ca90:	9300      	str	r3, [sp, #0]
   1ca92:	1149      	asrs	r1, r1, #5
{
   1ca94:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ca96:	4623      	mov	r3, r4
   1ca98:	4808      	ldr	r0, [pc, #32]	; (1cabc <onoff_start+0x38>)
   1ca9a:	f00c fc5b 	bl	29354 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1ca9e:	1e01      	subs	r1, r0, #0
   1caa0:	da05      	bge.n	1caae <onoff_start+0x2a>
		notify(mgr, err);
   1caa2:	4628      	mov	r0, r5
   1caa4:	4623      	mov	r3, r4
	}
}
   1caa6:	b003      	add	sp, #12
   1caa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1caac:	4718      	bx	r3
}
   1caae:	b003      	add	sp, #12
   1cab0:	bd30      	pop	{r4, r5, pc}
   1cab2:	bf00      	nop
   1cab4:	200026f0 	.word	0x200026f0
   1cab8:	000293c3 	.word	0x000293c3
   1cabc:	00029ccc 	.word	0x00029ccc

0001cac0 <get_status>:
{
   1cac0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cac2:	b2cc      	uxtb	r4, r1
   1cac4:	2c01      	cmp	r4, #1
{
   1cac6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cac8:	d908      	bls.n	1cadc <get_status+0x1c>
   1caca:	4908      	ldr	r1, [pc, #32]	; (1caec <get_status+0x2c>)
   1cacc:	4808      	ldr	r0, [pc, #32]	; (1caf0 <get_status+0x30>)
   1cace:	2279      	movs	r2, #121	; 0x79
   1cad0:	f009 fd15 	bl	264fe <assert_print>
   1cad4:	4805      	ldr	r0, [pc, #20]	; (1caec <get_status+0x2c>)
   1cad6:	2179      	movs	r1, #121	; 0x79
   1cad8:	f009 fd0a 	bl	264f0 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1cadc:	6929      	ldr	r1, [r5, #16]
   1cade:	230c      	movs	r3, #12
   1cae0:	fb04 1403 	mla	r4, r4, r3, r1
   1cae4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   1cae6:	f000 0007 	and.w	r0, r0, #7
   1caea:	bd38      	pop	{r3, r4, r5, pc}
   1caec:	0002d063 	.word	0x0002d063
   1caf0:	0002aa75 	.word	0x0002aa75

0001caf4 <stop>:
{
   1caf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1caf6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1caf8:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
   1cafa:	6906      	ldr	r6, [r0, #16]
{
   1cafc:	4605      	mov	r5, r0
   1cafe:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1cb00:	d90a      	bls.n	1cb18 <stop+0x24>
   1cb02:	4918      	ldr	r1, [pc, #96]	; (1cb64 <stop+0x70>)
   1cb04:	4818      	ldr	r0, [pc, #96]	; (1cb68 <stop+0x74>)
   1cb06:	f240 124d 	movw	r2, #333	; 0x14d
   1cb0a:	f009 fcf8 	bl	264fe <assert_print>
   1cb0e:	4815      	ldr	r0, [pc, #84]	; (1cb64 <stop+0x70>)
   1cb10:	f240 114d 	movw	r1, #333	; 0x14d
   1cb14:	f009 fcec 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   1cb18:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb1c:	f3ef 8111 	mrs	r1, BASEPRI
   1cb20:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb24:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1cb28:	220c      	movs	r2, #12
   1cb2a:	fb02 6304 	mla	r3, r2, r4, r6
   1cb2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1cb30:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1cb34:	d001      	beq.n	1cb3a <stop+0x46>
   1cb36:	429f      	cmp	r7, r3
   1cb38:	d111      	bne.n	1cb5e <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1cb3a:	fb02 6604 	mla	r6, r2, r4, r6
   1cb3e:	2301      	movs	r3, #1
   1cb40:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
   1cb42:	2000      	movs	r0, #0
	__asm__ volatile(
   1cb44:	f381 8811 	msr	BASEPRI, r1
   1cb48:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1cb4c:	b930      	cbnz	r0, 1cb5c <stop+0x68>
	get_sub_config(dev, type)->stop();
   1cb4e:	6869      	ldr	r1, [r5, #4]
   1cb50:	230c      	movs	r3, #12
   1cb52:	fb03 1404 	mla	r4, r3, r4, r1
   1cb56:	6863      	ldr	r3, [r4, #4]
   1cb58:	4798      	blx	r3
	return 0;
   1cb5a:	2000      	movs	r0, #0
}
   1cb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   1cb5e:	f04f 30ff 	mov.w	r0, #4294967295
   1cb62:	e7ef      	b.n	1cb44 <stop+0x50>
   1cb64:	0002d063 	.word	0x0002d063
   1cb68:	0002aa75 	.word	0x0002aa75

0001cb6c <onoff_stop>:
{
   1cb6c:	b570      	push	{r4, r5, r6, lr}
   1cb6e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1cb70:	4906      	ldr	r1, [pc, #24]	; (1cb8c <onoff_stop+0x20>)
   1cb72:	1a41      	subs	r1, r0, r1
{
   1cb74:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1cb76:	1149      	asrs	r1, r1, #5
   1cb78:	4805      	ldr	r0, [pc, #20]	; (1cb90 <onoff_stop+0x24>)
   1cb7a:	2240      	movs	r2, #64	; 0x40
   1cb7c:	f7ff ffba 	bl	1caf4 <stop>
	notify(mgr, res);
   1cb80:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1cb82:	4601      	mov	r1, r0
	notify(mgr, res);
   1cb84:	4620      	mov	r0, r4
}
   1cb86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1cb8a:	4718      	bx	r3
   1cb8c:	200026f0 	.word	0x200026f0
   1cb90:	00029ccc 	.word	0x00029ccc

0001cb94 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1cb94:	2200      	movs	r2, #0
{
   1cb96:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1cb98:	2101      	movs	r1, #1
{
   1cb9a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1cb9c:	4610      	mov	r0, r2
   1cb9e:	f7f7 fac3 	bl	14128 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1cba2:	480f      	ldr	r0, [pc, #60]	; (1cbe0 <clk_init+0x4c>)
   1cba4:	f002 f8aa 	bl	1ecfc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1cba8:	4b0e      	ldr	r3, [pc, #56]	; (1cbe4 <clk_init+0x50>)
   1cbaa:	4298      	cmp	r0, r3
   1cbac:	d115      	bne.n	1cbda <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1cbae:	f00c fd7a 	bl	296a6 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1cbb2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1cbb4:	490c      	ldr	r1, [pc, #48]	; (1cbe8 <clk_init+0x54>)
   1cbb6:	4630      	mov	r0, r6
   1cbb8:	f009 fb0b 	bl	261d2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1cbbc:	2800      	cmp	r0, #0
   1cbbe:	db0b      	blt.n	1cbd8 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   1cbc0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1cbc2:	4909      	ldr	r1, [pc, #36]	; (1cbe8 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1cbc4:	2501      	movs	r5, #1
   1cbc6:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1cbc8:	f104 0020 	add.w	r0, r4, #32
   1cbcc:	f009 fb01 	bl	261d2 <onoff_manager_init>
		if (err < 0) {
   1cbd0:	2800      	cmp	r0, #0
   1cbd2:	db01      	blt.n	1cbd8 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1cbd4:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1cbd6:	2000      	movs	r0, #0
}
   1cbd8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1cbda:	f06f 0004 	mvn.w	r0, #4
   1cbde:	e7fb      	b.n	1cbd8 <clk_init+0x44>
   1cbe0:	0001cc21 	.word	0x0001cc21
   1cbe4:	0bad0000 	.word	0x0bad0000
   1cbe8:	0002a6f4 	.word	0x0002a6f4

0001cbec <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1cbec:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1cbee:	230c      	movs	r3, #12
   1cbf0:	4809      	ldr	r0, [pc, #36]	; (1cc18 <clkstarted_handle.constprop.0+0x2c>)
   1cbf2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1cbf4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1cbf6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1cbf8:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1cbfc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1cbfe:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1cc00:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1cc02:	4418      	add	r0, r3
   1cc04:	f00c fb93 	bl	2932e <set_on_state>
	if (callback) {
   1cc08:	b12d      	cbz	r5, 1cc16 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1cc0a:	4632      	mov	r2, r6
   1cc0c:	462b      	mov	r3, r5
   1cc0e:	4803      	ldr	r0, [pc, #12]	; (1cc1c <clkstarted_handle.constprop.0+0x30>)
}
   1cc10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1cc14:	4718      	bx	r3
}
   1cc16:	bd70      	pop	{r4, r5, r6, pc}
   1cc18:	200026f0 	.word	0x200026f0
   1cc1c:	00029ccc 	.word	0x00029ccc

0001cc20 <clock_event_handler>:
	switch (event) {
   1cc20:	2801      	cmp	r0, #1
{
   1cc22:	b508      	push	{r3, lr}
	switch (event) {
   1cc24:	d006      	beq.n	1cc34 <clock_event_handler+0x14>
   1cc26:	2803      	cmp	r0, #3
   1cc28:	d008      	beq.n	1cc3c <clock_event_handler+0x1c>
   1cc2a:	b9a0      	cbnz	r0, 1cc56 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1cc2c:	4b0f      	ldr	r3, [pc, #60]	; (1cc6c <clock_event_handler+0x4c>)
   1cc2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cc30:	075b      	lsls	r3, r3, #29
   1cc32:	d119      	bne.n	1cc68 <clock_event_handler+0x48>
}
   1cc34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1cc38:	f7ff bfd8 	b.w	1cbec <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1cc3c:	490c      	ldr	r1, [pc, #48]	; (1cc70 <clock_event_handler+0x50>)
   1cc3e:	480d      	ldr	r0, [pc, #52]	; (1cc74 <clock_event_handler+0x54>)
   1cc40:	f240 225e 	movw	r2, #606	; 0x25e
   1cc44:	f009 fc5b 	bl	264fe <assert_print>
   1cc48:	f240 215e 	movw	r1, #606	; 0x25e
}
   1cc4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1cc50:	4807      	ldr	r0, [pc, #28]	; (1cc70 <clock_event_handler+0x50>)
   1cc52:	f009 bc4d 	b.w	264f0 <assert_post_action>
   1cc56:	4906      	ldr	r1, [pc, #24]	; (1cc70 <clock_event_handler+0x50>)
   1cc58:	4806      	ldr	r0, [pc, #24]	; (1cc74 <clock_event_handler+0x54>)
   1cc5a:	f240 2262 	movw	r2, #610	; 0x262
   1cc5e:	f009 fc4e 	bl	264fe <assert_print>
   1cc62:	f240 2162 	movw	r1, #610	; 0x262
   1cc66:	e7f1      	b.n	1cc4c <clock_event_handler+0x2c>
}
   1cc68:	bd08      	pop	{r3, pc}
   1cc6a:	bf00      	nop
   1cc6c:	200026f0 	.word	0x200026f0
   1cc70:	0002d063 	.word	0x0002d063
   1cc74:	0002aa75 	.word	0x0002aa75

0001cc78 <generic_hfclk_start>:
{
   1cc78:	b508      	push	{r3, lr}
	__asm__ volatile(
   1cc7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc7e:	f3ef 8111 	mrs	r1, BASEPRI
   1cc82:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc86:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1cc8a:	4a12      	ldr	r2, [pc, #72]	; (1ccd4 <generic_hfclk_start+0x5c>)
   1cc8c:	6813      	ldr	r3, [r2, #0]
   1cc8e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1cc92:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1cc96:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1cc98:	d00c      	beq.n	1ccb4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1cc9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cc9e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1cca2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1cca6:	f013 0301 	ands.w	r3, r3, #1
   1ccaa:	d003      	beq.n	1ccb4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1ccac:	480a      	ldr	r0, [pc, #40]	; (1ccd8 <generic_hfclk_start+0x60>)
   1ccae:	f00c fb3e 	bl	2932e <set_on_state>
			already_started = true;
   1ccb2:	2301      	movs	r3, #1
	__asm__ volatile(
   1ccb4:	f381 8811 	msr	BASEPRI, r1
   1ccb8:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1ccbc:	b123      	cbz	r3, 1ccc8 <generic_hfclk_start+0x50>
}
   1ccbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1ccc2:	2000      	movs	r0, #0
   1ccc4:	f7ff bf92 	b.w	1cbec <clkstarted_handle.constprop.0>
}
   1ccc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1cccc:	2001      	movs	r0, #1
   1ccce:	f001 bfdb 	b.w	1ec88 <nrfx_clock_start>
   1ccd2:	bf00      	nop
   1ccd4:	20002748 	.word	0x20002748
   1ccd8:	20002738 	.word	0x20002738

0001ccdc <api_blocking_start>:
{
   1ccdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ccde:	2200      	movs	r2, #0
   1cce0:	2301      	movs	r3, #1
   1cce2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1cce6:	ab04      	add	r3, sp, #16
   1cce8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ccec:	4a09      	ldr	r2, [pc, #36]	; (1cd14 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ccee:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ccf2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ccf4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ccf8:	f00c fb5c 	bl	293b4 <api_start>
	if (err < 0) {
   1ccfc:	2800      	cmp	r0, #0
   1ccfe:	db05      	blt.n	1cd0c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1cd00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1cd04:	2300      	movs	r3, #0
   1cd06:	4668      	mov	r0, sp
   1cd08:	f003 fe4e 	bl	209a8 <z_impl_k_sem_take>
}
   1cd0c:	b007      	add	sp, #28
   1cd0e:	f85d fb04 	ldr.w	pc, [sp], #4
   1cd12:	bf00      	nop
   1cd14:	000293e1 	.word	0x000293e1

0001cd18 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cd18:	4b09      	ldr	r3, [pc, #36]	; (1cd40 <generic_hfclk_stop+0x28>)
   1cd1a:	f3bf 8f5b 	dmb	ish
   1cd1e:	e853 2f00 	ldrex	r2, [r3]
   1cd22:	f022 0102 	bic.w	r1, r2, #2
   1cd26:	e843 1000 	strex	r0, r1, [r3]
   1cd2a:	2800      	cmp	r0, #0
   1cd2c:	d1f7      	bne.n	1cd1e <generic_hfclk_stop+0x6>
   1cd2e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1cd32:	07d3      	lsls	r3, r2, #31
   1cd34:	d402      	bmi.n	1cd3c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1cd36:	2001      	movs	r0, #1
   1cd38:	f001 bfc8 	b.w	1eccc <nrfx_clock_stop>
}
   1cd3c:	4770      	bx	lr
   1cd3e:	bf00      	nop
   1cd40:	20002748 	.word	0x20002748

0001cd44 <z_nrf_clock_control_lf_on>:
{
   1cd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cd48:	4946      	ldr	r1, [pc, #280]	; (1ce64 <z_nrf_clock_control_lf_on+0x120>)
   1cd4a:	f3bf 8f5b 	dmb	ish
   1cd4e:	4606      	mov	r6, r0
   1cd50:	2201      	movs	r2, #1
   1cd52:	e851 3f00 	ldrex	r3, [r1]
   1cd56:	e841 2000 	strex	r0, r2, [r1]
   1cd5a:	2800      	cmp	r0, #0
   1cd5c:	d1f9      	bne.n	1cd52 <z_nrf_clock_control_lf_on+0xe>
   1cd5e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1cd62:	b99b      	cbnz	r3, 1cd8c <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1cd64:	4940      	ldr	r1, [pc, #256]	; (1ce68 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   1cd66:	4841      	ldr	r0, [pc, #260]	; (1ce6c <z_nrf_clock_control_lf_on+0x128>)
   1cd68:	604b      	str	r3, [r1, #4]
   1cd6a:	60cb      	str	r3, [r1, #12]
   1cd6c:	608a      	str	r2, [r1, #8]
   1cd6e:	f7f5 fb5f 	bl	12430 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1cd72:	2800      	cmp	r0, #0
   1cd74:	da0a      	bge.n	1cd8c <z_nrf_clock_control_lf_on+0x48>
   1cd76:	493e      	ldr	r1, [pc, #248]	; (1ce70 <z_nrf_clock_control_lf_on+0x12c>)
   1cd78:	483e      	ldr	r0, [pc, #248]	; (1ce74 <z_nrf_clock_control_lf_on+0x130>)
   1cd7a:	f44f 7208 	mov.w	r2, #544	; 0x220
   1cd7e:	f009 fbbe 	bl	264fe <assert_print>
   1cd82:	483b      	ldr	r0, [pc, #236]	; (1ce70 <z_nrf_clock_control_lf_on+0x12c>)
   1cd84:	f44f 7108 	mov.w	r1, #544	; 0x220
   1cd88:	f009 fbb2 	bl	264f0 <assert_post_action>
	switch (start_mode) {
   1cd8c:	b396      	cbz	r6, 1cdf4 <z_nrf_clock_control_lf_on+0xb0>
   1cd8e:	1e73      	subs	r3, r6, #1
   1cd90:	2b01      	cmp	r3, #1
   1cd92:	d853      	bhi.n	1ce3c <z_nrf_clock_control_lf_on+0xf8>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1cd94:	2e01      	cmp	r6, #1
   1cd96:	d107      	bne.n	1cda8 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1cd98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cd9c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1cda0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1cda4:	2b01      	cmp	r3, #1
   1cda6:	d025      	beq.n	1cdf4 <z_nrf_clock_control_lf_on+0xb0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1cda8:	f00c fd67 	bl	2987a <k_is_in_isr>
   1cdac:	4604      	mov	r4, r0
   1cdae:	b918      	cbnz	r0, 1cdb8 <z_nrf_clock_control_lf_on+0x74>
	return !z_sys_post_kernel;
   1cdb0:	4b31      	ldr	r3, [pc, #196]	; (1ce78 <z_nrf_clock_control_lf_on+0x134>)
	int key = isr_mode ? irq_lock() : 0;
   1cdb2:	781b      	ldrb	r3, [r3, #0]
   1cdb4:	2b00      	cmp	r3, #0
   1cdb6:	d14e      	bne.n	1ce56 <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   1cdb8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cdbc:	f3ef 8711 	mrs	r7, BASEPRI
   1cdc0:	f383 8812 	msr	BASEPRI_MAX, r3
   1cdc4:	f3bf 8f6f 	isb	sy
   1cdc8:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cdca:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1ce7c <z_nrf_clock_control_lf_on+0x138>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1cdce:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1cdd2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1cdd6:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1cdda:	03d2      	lsls	r2, r2, #15
   1cddc:	d50c      	bpl.n	1cdf8 <z_nrf_clock_control_lf_on+0xb4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1cdde:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1cde2:	2b01      	cmp	r3, #1
   1cde4:	d001      	beq.n	1cdea <z_nrf_clock_control_lf_on+0xa6>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1cde6:	2e01      	cmp	r6, #1
   1cde8:	d106      	bne.n	1cdf8 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1cdea:	b30c      	cbz	r4, 1ce30 <z_nrf_clock_control_lf_on+0xec>
	__asm__ volatile(
   1cdec:	f387 8811 	msr	BASEPRI, r7
   1cdf0:	f3bf 8f6f 	isb	sy
}
   1cdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1cdf8:	b1ac      	cbz	r4, 1ce26 <z_nrf_clock_control_lf_on+0xe2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1cdfa:	4638      	mov	r0, r7
   1cdfc:	f7f7 f92a 	bl	14054 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1ce00:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1ce04:	2b00      	cmp	r3, #0
   1ce06:	d1e4      	bne.n	1cdd2 <z_nrf_clock_control_lf_on+0x8e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ce08:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1ce0c:	2a00      	cmp	r2, #0
   1ce0e:	d0e0      	beq.n	1cdd2 <z_nrf_clock_control_lf_on+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ce10:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1ce14:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ce18:	2301      	movs	r3, #1
   1ce1a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   1ce1e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ce22:	60ab      	str	r3, [r5, #8]
}
   1ce24:	e7d5      	b.n	1cdd2 <z_nrf_clock_control_lf_on+0x8e>
	return z_impl_k_sleep(timeout);
   1ce26:	2100      	movs	r1, #0
   1ce28:	2021      	movs	r0, #33	; 0x21
   1ce2a:	f005 f9bb 	bl	221a4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1ce2e:	e7e7      	b.n	1ce00 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1ce30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ce34:	2202      	movs	r2, #2
   1ce36:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1ce3a:	e7db      	b.n	1cdf4 <z_nrf_clock_control_lf_on+0xb0>
		__ASSERT_NO_MSG(false);
   1ce3c:	490c      	ldr	r1, [pc, #48]	; (1ce70 <z_nrf_clock_control_lf_on+0x12c>)
   1ce3e:	480d      	ldr	r0, [pc, #52]	; (1ce74 <z_nrf_clock_control_lf_on+0x130>)
   1ce40:	f240 2232 	movw	r2, #562	; 0x232
   1ce44:	f009 fb5b 	bl	264fe <assert_print>
}
   1ce48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
   1ce4c:	4808      	ldr	r0, [pc, #32]	; (1ce70 <z_nrf_clock_control_lf_on+0x12c>)
   1ce4e:	f240 2132 	movw	r1, #562	; 0x232
   1ce52:	f009 bb4d 	b.w	264f0 <assert_post_action>
    p_reg->INTENCLR = mask;
   1ce56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ce5a:	2202      	movs	r2, #2
   1ce5c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1ce60:	4607      	mov	r7, r0
}
   1ce62:	e7b2      	b.n	1cdca <z_nrf_clock_control_lf_on+0x86>
   1ce64:	2000274c 	.word	0x2000274c
   1ce68:	200026e0 	.word	0x200026e0
   1ce6c:	20002710 	.word	0x20002710
   1ce70:	0002d063 	.word	0x0002d063
   1ce74:	0002aa75 	.word	0x0002aa75
   1ce78:	20003cb9 	.word	0x20003cb9
   1ce7c:	e000e100 	.word	0xe000e100

0001ce80 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1ce80:	b570      	push	{r4, r5, r6, lr}
	return port->data;
   1ce82:	6905      	ldr	r5, [r0, #16]
{
   1ce84:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1ce86:	460c      	mov	r4, r1
   1ce88:	b941      	cbnz	r1, 1ce9c <gpio_nrfx_manage_callback+0x1c>
   1ce8a:	491e      	ldr	r1, [pc, #120]	; (1cf04 <gpio_nrfx_manage_callback+0x84>)
   1ce8c:	481e      	ldr	r0, [pc, #120]	; (1cf08 <gpio_nrfx_manage_callback+0x88>)
   1ce8e:	2224      	movs	r2, #36	; 0x24
   1ce90:	f009 fb35 	bl	264fe <assert_print>
   1ce94:	481b      	ldr	r0, [pc, #108]	; (1cf04 <gpio_nrfx_manage_callback+0x84>)
   1ce96:	2124      	movs	r1, #36	; 0x24
   1ce98:	f009 fb2a 	bl	264f0 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1ce9c:	6863      	ldr	r3, [r4, #4]
   1ce9e:	b943      	cbnz	r3, 1ceb2 <gpio_nrfx_manage_callback+0x32>
   1cea0:	4918      	ldr	r1, [pc, #96]	; (1cf04 <gpio_nrfx_manage_callback+0x84>)
   1cea2:	4819      	ldr	r0, [pc, #100]	; (1cf08 <gpio_nrfx_manage_callback+0x88>)
   1cea4:	2225      	movs	r2, #37	; 0x25
   1cea6:	f009 fb2a 	bl	264fe <assert_print>
   1ceaa:	4816      	ldr	r0, [pc, #88]	; (1cf04 <gpio_nrfx_manage_callback+0x84>)
   1ceac:	2125      	movs	r1, #37	; 0x25
   1ceae:	f009 fb1f 	bl	264f0 <assert_post_action>
	return list->head;
   1ceb2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1ceb4:	b15b      	cbz	r3, 1cece <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ceb6:	2200      	movs	r2, #0
   1ceb8:	429c      	cmp	r4, r3
   1ceba:	d112      	bne.n	1cee2 <gpio_nrfx_manage_callback+0x62>
	return node->next;
   1cebc:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1cebe:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   1cec0:	b952      	cbnz	r2, 1ced8 <gpio_nrfx_manage_callback+0x58>
   1cec2:	42a1      	cmp	r1, r4
	list->head = node;
   1cec4:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1cec6:	d100      	bne.n	1ceca <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1cec8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1ceca:	2300      	movs	r3, #0
   1cecc:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1cece:	b96e      	cbnz	r6, 1ceec <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1ced0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   1ced2:	bd70      	pop	{r4, r5, r6, pc}
   1ced4:	460b      	mov	r3, r1
   1ced6:	e7ef      	b.n	1ceb8 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   1ced8:	42a1      	cmp	r1, r4
	parent->next = child;
   1ceda:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1cedc:	bf08      	it	eq
   1cede:	60aa      	streq	r2, [r5, #8]
}
   1cee0:	e7f3      	b.n	1ceca <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   1cee2:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cee4:	461a      	mov	r2, r3
   1cee6:	2900      	cmp	r1, #0
   1cee8:	d1f4      	bne.n	1ced4 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1ceea:	b13e      	cbz	r6, 1cefc <gpio_nrfx_manage_callback+0x7c>
Z_GENLIST_PREPEND(slist, snode)
   1ceec:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   1ceee:	686b      	ldr	r3, [r5, #4]
   1cef0:	6023      	str	r3, [r4, #0]
	list->head = node;
   1cef2:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cef4:	2800      	cmp	r0, #0
   1cef6:	d1eb      	bne.n	1ced0 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1cef8:	60ac      	str	r4, [r5, #8]
}
   1cefa:	e7ea      	b.n	1ced2 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   1cefc:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1cf00:	e7e7      	b.n	1ced2 <gpio_nrfx_manage_callback+0x52>
   1cf02:	bf00      	nop
   1cf04:	0002d0c9 	.word	0x0002d0c9
   1cf08:	0002aa75 	.word	0x0002aa75

0001cf0c <gpio_nrfx_pin_interrupt_configure>:
{
   1cf0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
   1cf0e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1cf10:	7b05      	ldrb	r5, [r0, #12]
   1cf12:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1cf16:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1cf1a:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1cf1e:	f04f 0500 	mov.w	r5, #0
   1cf22:	d105      	bne.n	1cf30 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   1cf24:	4620      	mov	r0, r4
   1cf26:	f002 fc63 	bl	1f7f0 <nrfx_gpiote_trigger_disable>
	return 0;
   1cf2a:	2000      	movs	r0, #0
}
   1cf2c:	b004      	add	sp, #16
   1cf2e:	bd70      	pop	{r4, r5, r6, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
   1cf30:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cf34:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1cf38:	d154      	bne.n	1cfe4 <gpio_nrfx_pin_interrupt_configure+0xd8>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1cf3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1cf3e:	bf0c      	ite	eq
   1cf40:	2304      	moveq	r3, #4
   1cf42:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cf44:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1cf48:	6883      	ldr	r3, [r0, #8]
   1cf4a:	fa23 f101 	lsr.w	r1, r3, r1
   1cf4e:	f011 0101 	ands.w	r1, r1, #1
   1cf52:	d139      	bne.n	1cfc8 <gpio_nrfx_pin_interrupt_configure+0xbc>
   1cf54:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1cf58:	d136      	bne.n	1cfc8 <gpio_nrfx_pin_interrupt_configure+0xbc>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1cf5a:	0966      	lsrs	r6, r4, #5
   1cf5c:	d04d      	beq.n	1cffa <gpio_nrfx_pin_interrupt_configure+0xee>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
   1cf5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cf62:	2e01      	cmp	r6, #1
   1cf64:	bf08      	it	eq
   1cf66:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
   1cf68:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1cf6c:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cf6e:	07ca      	lsls	r2, r1, #31
   1cf70:	d40a      	bmi.n	1cf88 <gpio_nrfx_pin_interrupt_configure+0x7c>
   1cf72:	492a      	ldr	r1, [pc, #168]	; (1d01c <gpio_nrfx_pin_interrupt_configure+0x110>)
   1cf74:	482a      	ldr	r0, [pc, #168]	; (1d020 <gpio_nrfx_pin_interrupt_configure+0x114>)
   1cf76:	f240 2247 	movw	r2, #583	; 0x247
   1cf7a:	f009 fac0 	bl	264fe <assert_print>
   1cf7e:	4827      	ldr	r0, [pc, #156]	; (1d01c <gpio_nrfx_pin_interrupt_configure+0x110>)
   1cf80:	f240 2147 	movw	r1, #583	; 0x247
   1cf84:	f009 fab4 	bl	264f0 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cf88:	b166      	cbz	r6, 1cfa4 <gpio_nrfx_pin_interrupt_configure+0x98>
   1cf8a:	2e01      	cmp	r6, #1
   1cf8c:	d038      	beq.n	1d000 <gpio_nrfx_pin_interrupt_configure+0xf4>
            NRFX_ASSERT(0);
   1cf8e:	4923      	ldr	r1, [pc, #140]	; (1d01c <gpio_nrfx_pin_interrupt_configure+0x110>)
   1cf90:	4823      	ldr	r0, [pc, #140]	; (1d020 <gpio_nrfx_pin_interrupt_configure+0x114>)
   1cf92:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1cf96:	f009 fab2 	bl	264fe <assert_print>
   1cf9a:	4820      	ldr	r0, [pc, #128]	; (1d01c <gpio_nrfx_pin_interrupt_configure+0x110>)
   1cf9c:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1cfa0:	f009 faa6 	bl	264f0 <assert_post_action>
        case 0: return NRF_P0;
   1cfa4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1cfa8:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1cfac:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1cfb0:	07db      	lsls	r3, r3, #31
   1cfb2:	d409      	bmi.n	1cfc8 <gpio_nrfx_pin_interrupt_configure+0xbc>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1cfb4:	f10d 0507 	add.w	r5, sp, #7
   1cfb8:	4629      	mov	r1, r5
   1cfba:	4620      	mov	r0, r4
   1cfbc:	f002 fb44 	bl	1f648 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1cfc0:	4b18      	ldr	r3, [pc, #96]	; (1d024 <gpio_nrfx_pin_interrupt_configure+0x118>)
   1cfc2:	4298      	cmp	r0, r3
   1cfc4:	d01e      	beq.n	1d004 <gpio_nrfx_pin_interrupt_configure+0xf8>
		trigger_config.p_in_channel = &ch;
   1cfc6:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1cfc8:	2300      	movs	r3, #0
   1cfca:	4619      	mov	r1, r3
   1cfcc:	aa02      	add	r2, sp, #8
   1cfce:	4620      	mov	r0, r4
   1cfd0:	f002 fa12 	bl	1f3f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1cfd4:	4b14      	ldr	r3, [pc, #80]	; (1d028 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1cfd6:	4298      	cmp	r0, r3
   1cfd8:	d11d      	bne.n	1d016 <gpio_nrfx_pin_interrupt_configure+0x10a>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1cfda:	2101      	movs	r1, #1
   1cfdc:	4620      	mov	r0, r4
   1cfde:	f002 fb99 	bl	1f714 <nrfx_gpiote_trigger_enable>
   1cfe2:	e7a2      	b.n	1cf2a <gpio_nrfx_pin_interrupt_configure+0x1e>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1cfe4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1cfe8:	d005      	beq.n	1cff6 <gpio_nrfx_pin_interrupt_configure+0xea>
   1cfea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1cfee:	bf0c      	ite	eq
   1cff0:	2302      	moveq	r3, #2
   1cff2:	2301      	movne	r3, #1
   1cff4:	e7a6      	b.n	1cf44 <gpio_nrfx_pin_interrupt_configure+0x38>
   1cff6:	2303      	movs	r3, #3
   1cff8:	e7a4      	b.n	1cf44 <gpio_nrfx_pin_interrupt_configure+0x38>
            mask = P0_FEATURE_PINS_PRESENT;
   1cffa:	f04f 31ff 	mov.w	r1, #4294967295
   1cffe:	e7b3      	b.n	1cf68 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d000:	4b0a      	ldr	r3, [pc, #40]	; (1d02c <gpio_nrfx_pin_interrupt_configure+0x120>)
   1d002:	e7d1      	b.n	1cfa8 <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1d004:	4628      	mov	r0, r5
   1d006:	f002 fb7f 	bl	1f708 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1d00a:	4b07      	ldr	r3, [pc, #28]	; (1d028 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1d00c:	4298      	cmp	r0, r3
   1d00e:	d0da      	beq.n	1cfc6 <gpio_nrfx_pin_interrupt_configure+0xba>
				return -ENOMEM;
   1d010:	f06f 000b 	mvn.w	r0, #11
   1d014:	e78a      	b.n	1cf2c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EINVAL;
   1d016:	f06f 0015 	mvn.w	r0, #21
   1d01a:	e787      	b.n	1cf2c <gpio_nrfx_pin_interrupt_configure+0x20>
   1d01c:	0002d0f6 	.word	0x0002d0f6
   1d020:	0002aa75 	.word	0x0002aa75
   1d024:	0bad0004 	.word	0x0bad0004
   1d028:	0bad0000 	.word	0x0bad0000
   1d02c:	50000300 	.word	0x50000300

0001d030 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d030:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1d032:	f002 fb59 	bl	1f6e8 <nrfx_gpiote_is_init>
   1d036:	4604      	mov	r4, r0
   1d038:	b968      	cbnz	r0, 1d056 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1d03a:	f002 fb2d 	bl	1f698 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1d03e:	4b08      	ldr	r3, [pc, #32]	; (1d060 <gpio_nrfx_init+0x30>)
   1d040:	4298      	cmp	r0, r3
   1d042:	d10a      	bne.n	1d05a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1d044:	4807      	ldr	r0, [pc, #28]	; (1d064 <gpio_nrfx_init+0x34>)
   1d046:	4621      	mov	r1, r4
   1d048:	f002 faf8 	bl	1f63c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d04c:	4622      	mov	r2, r4
   1d04e:	2105      	movs	r1, #5
   1d050:	2006      	movs	r0, #6
   1d052:	f7f7 f869 	bl	14128 <z_arm_irq_priority_set>
		return 0;
   1d056:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1d058:	bd10      	pop	{r4, pc}
		return -EIO;
   1d05a:	f06f 0004 	mvn.w	r0, #4
   1d05e:	e7fb      	b.n	1d058 <gpio_nrfx_init+0x28>
   1d060:	0bad0000 	.word	0x0bad0000
   1d064:	0001d069 	.word	0x0001d069

0001d068 <nrfx_gpio_handler>:
{
   1d068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d06c:	0943      	lsrs	r3, r0, #5
   1d06e:	d003      	beq.n	1d078 <nrfx_gpio_handler+0x10>
   1d070:	2b01      	cmp	r3, #1
   1d072:	d028      	beq.n	1d0c6 <nrfx_gpio_handler+0x5e>
}
   1d074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d078:	4f14      	ldr	r7, [pc, #80]	; (1d0cc <nrfx_gpio_handler+0x64>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1d07a:	693b      	ldr	r3, [r7, #16]
   1d07c:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d07e:	2c00      	cmp	r4, #0
   1d080:	d0f8      	beq.n	1d074 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1d082:	f000 001f 	and.w	r0, r0, #31
   1d086:	2601      	movs	r6, #1
	return node->next;
   1d088:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   1d08a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1d0d0 <nrfx_gpio_handler+0x68>
   1d08e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1d0d4 <nrfx_gpio_handler+0x6c>
   1d092:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
   1d094:	68a3      	ldr	r3, [r4, #8]
   1d096:	421e      	tst	r6, r3
   1d098:	d010      	beq.n	1d0bc <nrfx_gpio_handler+0x54>
			__ASSERT(cb->handler, "No callback handler!");
   1d09a:	6863      	ldr	r3, [r4, #4]
   1d09c:	b943      	cbnz	r3, 1d0b0 <nrfx_gpio_handler+0x48>
   1d09e:	4641      	mov	r1, r8
   1d0a0:	4648      	mov	r0, r9
   1d0a2:	2245      	movs	r2, #69	; 0x45
   1d0a4:	f009 fa2b 	bl	264fe <assert_print>
   1d0a8:	2145      	movs	r1, #69	; 0x45
   1d0aa:	4640      	mov	r0, r8
   1d0ac:	f009 fa20 	bl	264f0 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1d0b0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1d0b4:	4621      	mov	r1, r4
   1d0b6:	4032      	ands	r2, r6
   1d0b8:	4638      	mov	r0, r7
   1d0ba:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d0bc:	2d00      	cmp	r5, #0
   1d0be:	d0d9      	beq.n	1d074 <nrfx_gpio_handler+0xc>
   1d0c0:	462c      	mov	r4, r5
   1d0c2:	682d      	ldr	r5, [r5, #0]
   1d0c4:	e7e6      	b.n	1d094 <nrfx_gpio_handler+0x2c>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d0c6:	4f04      	ldr	r7, [pc, #16]	; (1d0d8 <nrfx_gpio_handler+0x70>)
   1d0c8:	e7d7      	b.n	1d07a <nrfx_gpio_handler+0x12>
   1d0ca:	bf00      	nop
   1d0cc:	00029ce4 	.word	0x00029ce4
   1d0d0:	0002d0c9 	.word	0x0002d0c9
   1d0d4:	0002aa75 	.word	0x0002aa75
   1d0d8:	00029cfc 	.word	0x00029cfc

0001d0dc <gpio_nrfx_pin_configure>:
{
   1d0dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1d0e0:	f8d0 9004 	ldr.w	r9, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d0e4:	f899 300c 	ldrb.w	r3, [r9, #12]
   1d0e8:	f001 061f 	and.w	r6, r1, #31
{
   1d0ec:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d0ee:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
   1d0f2:	4688      	mov	r8, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d0f4:	4630      	mov	r0, r6
   1d0f6:	f10d 0103 	add.w	r1, sp, #3
{
   1d0fa:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d0fc:	f002 faa4 	bl	1f648 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1d100:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d104:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1d106:	d116      	bne.n	1d136 <gpio_nrfx_pin_configure+0x5a>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1d108:	4630      	mov	r0, r6
   1d10a:	f002 fb9b 	bl	1f844 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1d10e:	4b4e      	ldr	r3, [pc, #312]	; (1d248 <gpio_nrfx_pin_configure+0x16c>)
   1d110:	429f      	cmp	r7, r3
   1d112:	d10e      	bne.n	1d132 <gpio_nrfx_pin_configure+0x56>
			err = nrfx_gpiote_channel_free(ch);
   1d114:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d118:	f002 faf0 	bl	1f6fc <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1d11c:	42b8      	cmp	r0, r7
   1d11e:	d008      	beq.n	1d132 <gpio_nrfx_pin_configure+0x56>
   1d120:	494a      	ldr	r1, [pc, #296]	; (1d24c <gpio_nrfx_pin_configure+0x170>)
   1d122:	484b      	ldr	r0, [pc, #300]	; (1d250 <gpio_nrfx_pin_configure+0x174>)
   1d124:	2268      	movs	r2, #104	; 0x68
   1d126:	f009 f9ea 	bl	264fe <assert_print>
   1d12a:	4848      	ldr	r0, [pc, #288]	; (1d24c <gpio_nrfx_pin_configure+0x170>)
   1d12c:	2168      	movs	r1, #104	; 0x68
   1d12e:	f009 f9df 	bl	264f0 <assert_post_action>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d132:	2000      	movs	r0, #0
   1d134:	e062      	b.n	1d1fc <gpio_nrfx_pin_configure+0x120>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d136:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d138:	4619      	mov	r1, r3
   1d13a:	aa02      	add	r2, sp, #8
   1d13c:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d13e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d142:	f002 f959 	bl	1f3f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d146:	4b40      	ldr	r3, [pc, #256]	; (1d248 <gpio_nrfx_pin_configure+0x16c>)
   1d148:	4298      	cmp	r0, r3
   1d14a:	d002      	beq.n	1d152 <gpio_nrfx_pin_configure+0x76>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d14c:	f06f 0015 	mvn.w	r0, #21
   1d150:	e054      	b.n	1d1fc <gpio_nrfx_pin_configure+0x120>
	if (free_ch) {
   1d152:	4287      	cmp	r7, r0
   1d154:	d10e      	bne.n	1d174 <gpio_nrfx_pin_configure+0x98>
		err = nrfx_gpiote_channel_free(ch);
   1d156:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d15a:	f002 facf 	bl	1f6fc <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1d15e:	42b8      	cmp	r0, r7
   1d160:	d008      	beq.n	1d174 <gpio_nrfx_pin_configure+0x98>
   1d162:	493a      	ldr	r1, [pc, #232]	; (1d24c <gpio_nrfx_pin_configure+0x170>)
   1d164:	483a      	ldr	r0, [pc, #232]	; (1d250 <gpio_nrfx_pin_configure+0x174>)
   1d166:	227a      	movs	r2, #122	; 0x7a
   1d168:	f009 f9c9 	bl	264fe <assert_print>
   1d16c:	4837      	ldr	r0, [pc, #220]	; (1d24c <gpio_nrfx_pin_configure+0x170>)
   1d16e:	217a      	movs	r1, #122	; 0x7a
   1d170:	f009 f9be 	bl	264f0 <assert_post_action>
	if (flags & GPIO_OUTPUT) {
   1d174:	03a5      	lsls	r5, r4, #14
   1d176:	d554      	bpl.n	1d222 <gpio_nrfx_pin_configure+0x146>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d178:	f240 3306 	movw	r3, #774	; 0x306
   1d17c:	4023      	ands	r3, r4
   1d17e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1d182:	d03e      	beq.n	1d202 <gpio_nrfx_pin_configure+0x126>
   1d184:	d80c      	bhi.n	1d1a0 <gpio_nrfx_pin_configure+0xc4>
   1d186:	2b06      	cmp	r3, #6
   1d188:	d015      	beq.n	1d1b6 <gpio_nrfx_pin_configure+0xda>
   1d18a:	d804      	bhi.n	1d196 <gpio_nrfx_pin_configure+0xba>
   1d18c:	b19b      	cbz	r3, 1d1b6 <gpio_nrfx_pin_configure+0xda>
   1d18e:	2b02      	cmp	r3, #2
   1d190:	d1dc      	bne.n	1d14c <gpio_nrfx_pin_configure+0x70>
   1d192:	2304      	movs	r3, #4
   1d194:	e00f      	b.n	1d1b6 <gpio_nrfx_pin_configure+0xda>
   1d196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1d19a:	d1d7      	bne.n	1d14c <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_H0S1;
   1d19c:	2301      	movs	r3, #1
   1d19e:	e00a      	b.n	1d1b6 <gpio_nrfx_pin_configure+0xda>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d1a0:	f240 2202 	movw	r2, #514	; 0x202
   1d1a4:	4293      	cmp	r3, r2
   1d1a6:	d02e      	beq.n	1d206 <gpio_nrfx_pin_configure+0x12a>
   1d1a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1d1ac:	d02d      	beq.n	1d20a <gpio_nrfx_pin_configure+0x12e>
   1d1ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1d1b2:	d1cb      	bne.n	1d14c <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_S0H1;
   1d1b4:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1d1b6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1d1ba:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1d1be:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1d1c2:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1d1c4:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1d1c8:	bf54      	ite	pl
   1d1ca:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1d1ce:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d1d0:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1d1d2:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d1d6:	d51a      	bpl.n	1d20e <gpio_nrfx_pin_configure+0x132>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1d1d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d1dc:	2101      	movs	r1, #1
   1d1de:	fa01 f108 	lsl.w	r1, r1, r8
    p_reg->OUTSET = set_mask;
   1d1e2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1d1e6:	2200      	movs	r2, #0
   1d1e8:	a901      	add	r1, sp, #4
   1d1ea:	4630      	mov	r0, r6
   1d1ec:	f002 f9b2 	bl	1f554 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d1f0:	4b15      	ldr	r3, [pc, #84]	; (1d248 <gpio_nrfx_pin_configure+0x16c>)
   1d1f2:	4298      	cmp	r0, r3
   1d1f4:	bf14      	ite	ne
   1d1f6:	f06f 0015 	mvnne.w	r0, #21
   1d1fa:	2000      	moveq	r0, #0
}
   1d1fc:	b005      	add	sp, #20
   1d1fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
   1d202:	2307      	movs	r3, #7
   1d204:	e7d7      	b.n	1d1b6 <gpio_nrfx_pin_configure+0xda>
		*drive = NRF_GPIO_PIN_D0H1;
   1d206:	2305      	movs	r3, #5
   1d208:	e7d5      	b.n	1d1b6 <gpio_nrfx_pin_configure+0xda>
		*drive = NRF_GPIO_PIN_H0H1;
   1d20a:	2303      	movs	r3, #3
   1d20c:	e7d3      	b.n	1d1b6 <gpio_nrfx_pin_configure+0xda>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1d20e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1d210:	bf41      	itttt	mi
   1d212:	2101      	movmi	r1, #1
   1d214:	f8d9 3004 	ldrmi.w	r3, [r9, #4]
   1d218:	fa01 f108 	lslmi.w	r1, r1, r8
    p_reg->OUTCLR = clr_mask;
   1d21c:	f8c3 150c 	strmi.w	r1, [r3, #1292]	; 0x50c
}
   1d220:	e7e1      	b.n	1d1e6 <gpio_nrfx_pin_configure+0x10a>
	if (flags & GPIO_PULL_UP) {
   1d222:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d224:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1d228:	bf54      	ite	pl
   1d22a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1d22e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d230:	461a      	mov	r2, r3
   1d232:	a901      	add	r1, sp, #4
   1d234:	4630      	mov	r0, r6
	nrfx_gpiote_input_config_t input_config = {
   1d236:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d23a:	f002 f8dd 	bl	1f3f8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d23e:	4b02      	ldr	r3, [pc, #8]	; (1d248 <gpio_nrfx_pin_configure+0x16c>)
   1d240:	4298      	cmp	r0, r3
   1d242:	f43f af76 	beq.w	1d132 <gpio_nrfx_pin_configure+0x56>
   1d246:	e781      	b.n	1d14c <gpio_nrfx_pin_configure+0x70>
   1d248:	0bad0000 	.word	0x0bad0000
   1d24c:	0002d129 	.word	0x0002d129
   1d250:	0002aa75 	.word	0x0002aa75

0001d254 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1d254:	4b02      	ldr	r3, [pc, #8]	; (1d260 <flash_nrf_pages_layout+0xc>)
   1d256:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1d258:	2301      	movs	r3, #1
   1d25a:	6013      	str	r3, [r2, #0]
}
   1d25c:	4770      	bx	lr
   1d25e:	bf00      	nop
   1d260:	20002768 	.word	0x20002768

0001d264 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1d264:	4800      	ldr	r0, [pc, #0]	; (1d268 <flash_nrf_get_parameters+0x4>)
   1d266:	4770      	bx	lr
   1d268:	0002a758 	.word	0x0002a758

0001d26c <flash_nrf_read>:
{
   1d26c:	b570      	push	{r4, r5, r6, lr}
   1d26e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1d270:	4628      	mov	r0, r5
   1d272:	4619      	mov	r1, r3
{
   1d274:	4616      	mov	r6, r2
   1d276:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1d278:	f00c f8e1 	bl	2943e <is_regular_addr_valid>
   1d27c:	b940      	cbnz	r0, 1d290 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d27e:	4809      	ldr	r0, [pc, #36]	; (1d2a4 <flash_nrf_read+0x38>)
   1d280:	4623      	mov	r3, r4
   1d282:	462a      	mov	r2, r5
   1d284:	2145      	movs	r1, #69	; 0x45
   1d286:	f009 f948 	bl	2651a <z_log_minimal_printk>
   1d28a:	f06f 0015 	mvn.w	r0, #21
}
   1d28e:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1d290:	b134      	cbz	r4, 1d2a0 <flash_nrf_read+0x34>
	memcpy(data, (void *)addr, len);
   1d292:	4622      	mov	r2, r4
   1d294:	4629      	mov	r1, r5
   1d296:	4630      	mov	r0, r6
   1d298:	f009 ffc5 	bl	27226 <memcpy>
	return 0;
   1d29c:	2000      	movs	r0, #0
   1d29e:	e7f6      	b.n	1d28e <flash_nrf_read+0x22>
		return 0;
   1d2a0:	4620      	mov	r0, r4
   1d2a2:	e7f4      	b.n	1d28e <flash_nrf_read+0x22>
   1d2a4:	0002d171 	.word	0x0002d171

0001d2a8 <restore_pofwarn.part.0>:
	}

	return 0;
}

static void restore_pofwarn(void)
   1d2a8:	b508      	push	{r3, lr}
    uint32_t pofcon = p_reg->POFCON;
   1d2aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1d2ae:	2001      	movs	r0, #1
   1d2b0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1d2b4:	f3c1 0143 	ubfx	r1, r1, #1, #4
   1d2b8:	f00c f8d2 	bl	29460 <nrf_power_pofcon_set.constprop.0>
		pofcon_enabled = false;
   1d2bc:	4b01      	ldr	r3, [pc, #4]	; (1d2c4 <restore_pofwarn.part.0+0x1c>)
   1d2be:	2200      	movs	r2, #0
   1d2c0:	701a      	strb	r2, [r3, #0]
	}
}
   1d2c2:	bd08      	pop	{r3, pc}
   1d2c4:	200034b4 	.word	0x200034b4

0001d2c8 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d2c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   1d2cc:	b510      	push	{r4, lr}
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1d2ce:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1d2d2:	2b08      	cmp	r3, #8
   1d2d4:	d118      	bne.n	1d308 <suspend_pofwarn+0x40>
   1d2d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1d2da:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
	if (enabled) {
   1d2de:	f011 0001 	ands.w	r0, r1, #1
   1d2e2:	d00c      	beq.n	1d2fe <suspend_pofwarn+0x36>
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);
   1d2e4:	2000      	movs	r0, #0
   1d2e6:	f3c1 0143 	ubfx	r1, r1, #1, #4
   1d2ea:	f00c f8b9 	bl	29460 <nrf_power_pofcon_set.constprop.0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d2ee:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1d2f2:	b128      	cbz	r0, 1d300 <suspend_pofwarn+0x38>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1d2f4:	2001      	movs	r0, #1
   1d2f6:	f00c f8b3 	bl	29460 <nrf_power_pofcon_set.constprop.0>
			return -ECANCELED;
   1d2fa:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1d2fe:	bd10      	pop	{r4, pc}
		pofcon_enabled = enabled;
   1d300:	4b02      	ldr	r3, [pc, #8]	; (1d30c <suspend_pofwarn+0x44>)
   1d302:	2201      	movs	r2, #1
   1d304:	701a      	strb	r2, [r3, #0]
   1d306:	e7fa      	b.n	1d2fe <suspend_pofwarn+0x36>
		return 0;
   1d308:	2000      	movs	r0, #0
   1d30a:	e7f8      	b.n	1d2fe <suspend_pofwarn+0x36>
   1d30c:	200034b4 	.word	0x200034b4

0001d310 <nrf_flash_init>:
{
   1d310:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d312:	2201      	movs	r2, #1
   1d314:	4611      	mov	r1, r2
   1d316:	4807      	ldr	r0, [pc, #28]	; (1d334 <nrf_flash_init+0x24>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d318:	4c07      	ldr	r4, [pc, #28]	; (1d338 <nrf_flash_init+0x28>)
   1d31a:	f00c faff 	bl	2991c <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1d31e:	f001 fd69 	bl	1edf4 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d322:	f00c fa73 	bl	2980c <nrfx_nvmc_flash_page_count_get>
   1d326:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1d328:	f00c fa6c 	bl	29804 <nrfx_nvmc_flash_page_size_get>
   1d32c:	6060      	str	r0, [r4, #4]
}
   1d32e:	2000      	movs	r0, #0
   1d330:	bd10      	pop	{r4, pc}
   1d332:	bf00      	nop
   1d334:	20002770 	.word	0x20002770
   1d338:	20002768 	.word	0x20002768

0001d33c <erase_op>:
{
   1d33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d33e:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d340:	f00c fa60 	bl	29804 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1d344:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d346:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1d348:	b10b      	cbz	r3, 1d34e <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   1d34a:	f00c f9b1 	bl	296b0 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1d34e:	4f13      	ldr	r7, [pc, #76]	; (1d39c <erase_op+0x60>)
{
   1d350:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   1d352:	f7ff ffb9 	bl	1d2c8 <suspend_pofwarn>
   1d356:	b9e8      	cbnz	r0, 1d394 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1d358:	6860      	ldr	r0, [r4, #4]
   1d35a:	f002 fb7b 	bl	1fa54 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1d35e:	68a3      	ldr	r3, [r4, #8]
   1d360:	1b5b      	subs	r3, r3, r5
   1d362:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1d364:	6863      	ldr	r3, [r4, #4]
   1d366:	442b      	add	r3, r5
   1d368:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1d36a:	783b      	ldrb	r3, [r7, #0]
   1d36c:	b10b      	cbz	r3, 1d372 <erase_op+0x36>
   1d36e:	f7ff ff9b 	bl	1d2a8 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   1d372:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1d374:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1d376:	b93b      	cbnz	r3, 1d388 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   1d378:	68a3      	ldr	r3, [r4, #8]
   1d37a:	2b00      	cmp	r3, #0
   1d37c:	d1e9      	bne.n	1d352 <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1d37e:	68a0      	ldr	r0, [r4, #8]
   1d380:	3800      	subs	r0, #0
   1d382:	bf18      	it	ne
   1d384:	2001      	movne	r0, #1
}
   1d386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   1d388:	4630      	mov	r0, r6
   1d38a:	f001 fdf5 	bl	1ef78 <nrf_flash_sync_check_time_limit>
   1d38e:	2800      	cmp	r0, #0
   1d390:	d0f2      	beq.n	1d378 <erase_op+0x3c>
   1d392:	e7f4      	b.n	1d37e <erase_op+0x42>
			return -ECANCELED;
   1d394:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1d398:	e7f5      	b.n	1d386 <erase_op+0x4a>
   1d39a:	bf00      	nop
   1d39c:	200034b4 	.word	0x200034b4

0001d3a0 <flash_nrf_erase>:
{
   1d3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d3a2:	b087      	sub	sp, #28
   1d3a4:	460e      	mov	r6, r1
   1d3a6:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d3a8:	f00c fa2c 	bl	29804 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1d3ac:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d3ae:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1d3b0:	4630      	mov	r0, r6
   1d3b2:	f00c f844 	bl	2943e <is_regular_addr_valid>
   1d3b6:	b358      	cbz	r0, 1d410 <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d3b8:	fbb6 f3f7 	udiv	r3, r6, r7
   1d3bc:	fb07 6313 	mls	r3, r7, r3, r6
   1d3c0:	b923      	cbnz	r3, 1d3cc <flash_nrf_erase+0x2c>
   1d3c2:	fbb5 f4f7 	udiv	r4, r5, r7
   1d3c6:	fb07 5414 	mls	r4, r7, r4, r5
   1d3ca:	b154      	cbz	r4, 1d3e2 <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1d3cc:	481f      	ldr	r0, [pc, #124]	; (1d44c <flash_nrf_erase+0xac>)
   1d3ce:	462b      	mov	r3, r5
   1d3d0:	4632      	mov	r2, r6
   1d3d2:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d3d4:	f009 f8a1 	bl	2651a <z_log_minimal_printk>
		return -EINVAL;
   1d3d8:	f06f 0415 	mvn.w	r4, #21
}
   1d3dc:	4620      	mov	r0, r4
   1d3de:	b007      	add	sp, #28
   1d3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1d3e2:	42bd      	cmp	r5, r7
   1d3e4:	d3fa      	bcc.n	1d3dc <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1d3e6:	f04f 33ff 	mov.w	r3, #4294967295
   1d3ea:	f04f 32ff 	mov.w	r2, #4294967295
   1d3ee:	4818      	ldr	r0, [pc, #96]	; (1d450 <flash_nrf_erase+0xb0>)
   1d3f0:	f003 fada 	bl	209a8 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1d3f4:	f00c f95a 	bl	296ac <nrf_flash_sync_is_required>
   1d3f8:	ab02      	add	r3, sp, #8
   1d3fa:	4601      	mov	r1, r0
   1d3fc:	b968      	cbnz	r0, 1d41a <flash_nrf_erase+0x7a>
	struct flash_context context = {
   1d3fe:	2210      	movs	r2, #16
   1d400:	4618      	mov	r0, r3
   1d402:	f009 ff1b 	bl	2723c <memset>
   1d406:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   1d40a:	f7ff ff97 	bl	1d33c <erase_op>
   1d40e:	e017      	b.n	1d440 <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d410:	4810      	ldr	r0, [pc, #64]	; (1d454 <flash_nrf_erase+0xb4>)
   1d412:	462b      	mov	r3, r5
   1d414:	4632      	mov	r2, r6
   1d416:	2145      	movs	r1, #69	; 0x45
   1d418:	e7dc      	b.n	1d3d4 <flash_nrf_erase+0x34>
	struct flash_context context = {
   1d41a:	2210      	movs	r2, #16
   1d41c:	4621      	mov	r1, r4
   1d41e:	4618      	mov	r0, r3
   1d420:	f009 ff0c 	bl	2723c <memset>
   1d424:	2201      	movs	r2, #1
   1d426:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1d42a:	4a0b      	ldr	r2, [pc, #44]	; (1d458 <flash_nrf_erase+0xb8>)
   1d42c:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1d430:	480a      	ldr	r0, [pc, #40]	; (1d45c <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   1d432:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1d436:	f001 fce5 	bl	1ee04 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1d43a:	4668      	mov	r0, sp
   1d43c:	f001 fce8 	bl	1ee10 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1d440:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1d442:	4803      	ldr	r0, [pc, #12]	; (1d450 <flash_nrf_erase+0xb0>)
   1d444:	f003 fa76 	bl	20934 <z_impl_k_sem_give>
}
   1d448:	e7c8      	b.n	1d3dc <flash_nrf_erase+0x3c>
   1d44a:	bf00      	nop
   1d44c:	0002d193 	.word	0x0002d193
   1d450:	20002770 	.word	0x20002770
   1d454:	0002d171 	.word	0x0002d171
   1d458:	0001d33d 	.word	0x0001d33d
   1d45c:	00015e64 	.word	0x00015e64

0001d460 <write_op>:
{
   1d460:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   1d462:	7b03      	ldrb	r3, [r0, #12]
{
   1d464:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1d466:	b10b      	cbz	r3, 1d46c <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1d468:	f00c f922 	bl	296b0 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1d46c:	4e19      	ldr	r6, [pc, #100]	; (1d4d4 <write_op+0x74>)
{
   1d46e:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1d470:	68a3      	ldr	r3, [r4, #8]
   1d472:	2b03      	cmp	r3, #3
   1d474:	d806      	bhi.n	1d484 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1d476:	4a18      	ldr	r2, [pc, #96]	; (1d4d8 <write_op+0x78>)
   1d478:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d47c:	07db      	lsls	r3, r3, #31
   1d47e:	d5fb      	bpl.n	1d478 <write_op+0x18>
	return FLASH_OP_DONE;
   1d480:	2000      	movs	r0, #0
}
   1d482:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   1d484:	f7ff ff20 	bl	1d2c8 <suspend_pofwarn>
   1d488:	bb08      	cbnz	r0, 1d4ce <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1d48a:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1d48c:	6860      	ldr	r0, [r4, #4]
   1d48e:	6819      	ldr	r1, [r3, #0]
   1d490:	f002 fb18 	bl	1fac4 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1d494:	7833      	ldrb	r3, [r6, #0]
   1d496:	b10b      	cbz	r3, 1d49c <write_op+0x3c>
   1d498:	f7ff ff06 	bl	1d2a8 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   1d49c:	6863      	ldr	r3, [r4, #4]
   1d49e:	3304      	adds	r3, #4
   1d4a0:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1d4a2:	6823      	ldr	r3, [r4, #0]
   1d4a4:	3304      	adds	r3, #4
   1d4a6:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1d4a8:	68a3      	ldr	r3, [r4, #8]
   1d4aa:	3b04      	subs	r3, #4
   1d4ac:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1d4ae:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1d4b0:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1d4b2:	2b00      	cmp	r3, #0
   1d4b4:	d0dc      	beq.n	1d470 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   1d4b6:	4628      	mov	r0, r5
   1d4b8:	f001 fd5e 	bl	1ef78 <nrf_flash_sync_check_time_limit>
   1d4bc:	2800      	cmp	r0, #0
   1d4be:	d0d7      	beq.n	1d470 <write_op+0x10>
   1d4c0:	4a05      	ldr	r2, [pc, #20]	; (1d4d8 <write_op+0x78>)
   1d4c2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d4c6:	07d9      	lsls	r1, r3, #31
   1d4c8:	d5fb      	bpl.n	1d4c2 <write_op+0x62>
				return FLASH_OP_ONGOING;
   1d4ca:	2001      	movs	r0, #1
   1d4cc:	e7d9      	b.n	1d482 <write_op+0x22>
			return -ECANCELED;
   1d4ce:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1d4d2:	e7d6      	b.n	1d482 <write_op+0x22>
   1d4d4:	200034b4 	.word	0x200034b4
   1d4d8:	4001e000 	.word	0x4001e000

0001d4dc <flash_nrf_write>:
{
   1d4dc:	b570      	push	{r4, r5, r6, lr}
   1d4de:	460d      	mov	r5, r1
   1d4e0:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1d4e2:	4619      	mov	r1, r3
   1d4e4:	4628      	mov	r0, r5
{
   1d4e6:	4616      	mov	r6, r2
   1d4e8:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1d4ea:	f00b ffa8 	bl	2943e <is_regular_addr_valid>
   1d4ee:	b950      	cbnz	r0, 1d506 <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d4f0:	481d      	ldr	r0, [pc, #116]	; (1d568 <flash_nrf_write+0x8c>)
   1d4f2:	4623      	mov	r3, r4
   1d4f4:	462a      	mov	r2, r5
   1d4f6:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1d4f8:	f009 f80f 	bl	2651a <z_log_minimal_printk>
		return -EINVAL;
   1d4fc:	f06f 0415 	mvn.w	r4, #21
}
   1d500:	4620      	mov	r0, r4
   1d502:	b006      	add	sp, #24
   1d504:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1d506:	ea45 0304 	orr.w	r3, r5, r4
   1d50a:	079b      	lsls	r3, r3, #30
   1d50c:	d004      	beq.n	1d518 <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1d50e:	4817      	ldr	r0, [pc, #92]	; (1d56c <flash_nrf_write+0x90>)
   1d510:	4623      	mov	r3, r4
   1d512:	462a      	mov	r2, r5
   1d514:	2145      	movs	r1, #69	; 0x45
   1d516:	e7ef      	b.n	1d4f8 <flash_nrf_write+0x1c>
	if (!len) {
   1d518:	2c00      	cmp	r4, #0
   1d51a:	d0f1      	beq.n	1d500 <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   1d51c:	f04f 33ff 	mov.w	r3, #4294967295
   1d520:	f04f 32ff 	mov.w	r2, #4294967295
   1d524:	4812      	ldr	r0, [pc, #72]	; (1d570 <flash_nrf_write+0x94>)
   1d526:	f003 fa3f 	bl	209a8 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1d52a:	f00c f8bf 	bl	296ac <nrf_flash_sync_is_required>
   1d52e:	4603      	mov	r3, r0
	struct flash_context context = {
   1d530:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1d534:	a802      	add	r0, sp, #8
   1d536:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1d538:	b18b      	cbz	r3, 1d55e <flash_nrf_write+0x82>
	struct flash_context context = {
   1d53a:	2301      	movs	r3, #1
   1d53c:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1d540:	4b0c      	ldr	r3, [pc, #48]	; (1d574 <flash_nrf_write+0x98>)
   1d542:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1d546:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1d54a:	f001 fc5b 	bl	1ee04 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1d54e:	4668      	mov	r0, sp
   1d550:	f001 fc5e 	bl	1ee10 <nrf_flash_sync_exe>
	return write_op(&context);
   1d554:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1d556:	4806      	ldr	r0, [pc, #24]	; (1d570 <flash_nrf_write+0x94>)
   1d558:	f003 f9ec 	bl	20934 <z_impl_k_sem_give>
}
   1d55c:	e7d0      	b.n	1d500 <flash_nrf_write+0x24>
	struct flash_context context = {
   1d55e:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1d562:	f7ff ff7d 	bl	1d460 <write_op>
   1d566:	e7f5      	b.n	1d554 <flash_nrf_write+0x78>
   1d568:	0002d171 	.word	0x0002d171
   1d56c:	0002d1b7 	.word	0x0002d1b7
   1d570:	20002770 	.word	0x20002770
   1d574:	0001d461 	.word	0x0001d461

0001d578 <random_byte_get>:
	__asm__ volatile(
   1d578:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d57c:	f3ef 8211 	mrs	r2, BASEPRI
   1d580:	f383 8812 	msr	BASEPRI_MAX, r3
   1d584:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1d588:	4b09      	ldr	r3, [pc, #36]	; (1d5b0 <random_byte_get+0x38>)
   1d58a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1d58e:	b161      	cbz	r1, 1d5aa <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d590:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1d592:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d596:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1d59a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1d59e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1d5a0:	f382 8811 	msr	BASEPRI, r2
   1d5a4:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1d5a8:	4770      	bx	lr
	int retval = -EAGAIN;
   1d5aa:	f06f 000a 	mvn.w	r0, #10
   1d5ae:	e7f7      	b.n	1d5a0 <random_byte_get+0x28>
   1d5b0:	4000d000 	.word	0x4000d000

0001d5b4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1d5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d5b6:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1d5b8:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1d5ba:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1d5bc:	f04f 0040 	mov.w	r0, #64	; 0x40
   1d5c0:	f3ef 8e11 	mrs	lr, BASEPRI
   1d5c4:	f380 8812 	msr	BASEPRI_MAX, r0
   1d5c8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1d5cc:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1d5ce:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1d5d2:	1ba4      	subs	r4, r4, r6
   1d5d4:	403c      	ands	r4, r7
	if (available < len) {
   1d5d6:	42a2      	cmp	r2, r4
		len = available;
   1d5d8:	bf88      	it	hi
   1d5da:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1d5dc:	18b0      	adds	r0, r6, r2
   1d5de:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1d5e0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1d5e2:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1d5e4:	f38e 8811 	msr	BASEPRI, lr
   1d5e8:	f3bf 8f6f 	isb	sy
   1d5ec:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1d5ee:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1d5f0:	4290      	cmp	r0, r2
   1d5f2:	d119      	bne.n	1d628 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1d5f4:	4566      	cmp	r6, ip
   1d5f6:	d10d      	bne.n	1d614 <rng_pool_get+0x60>
	__asm__ volatile(
   1d5f8:	f04f 0540 	mov.w	r5, #64	; 0x40
   1d5fc:	f3ef 8011 	mrs	r0, BASEPRI
   1d600:	f385 8812 	msr	BASEPRI_MAX, r5
   1d604:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1d608:	781d      	ldrb	r5, [r3, #0]
   1d60a:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1d60c:	f380 8811 	msr	BASEPRI, r0
   1d610:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1d614:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1d616:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1d618:	b290      	uxth	r0, r2
	available = available - len;
   1d61a:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1d61c:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1d61e:	bf22      	ittt	cs
   1d620:	4b06      	ldrcs	r3, [pc, #24]	; (1d63c <rng_pool_get+0x88>)
   1d622:	2201      	movcs	r2, #1
   1d624:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1d626:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1d628:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1d62c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1d62e:	f89e e005 	ldrb.w	lr, [lr, #5]
   1d632:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1d636:	403d      	ands	r5, r7
   1d638:	e7da      	b.n	1d5f0 <rng_pool_get+0x3c>
   1d63a:	bf00      	nop
   1d63c:	4000d000 	.word	0x4000d000

0001d640 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1d640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d644:	4614      	mov	r4, r2
   1d646:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1d648:	6902      	ldr	r2, [r0, #16]
   1d64a:	4b2c      	ldr	r3, [pc, #176]	; (1d6fc <entropy_nrf5_get_entropy_isr+0xbc>)
   1d64c:	429a      	cmp	r2, r3
{
   1d64e:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1d650:	d00a      	beq.n	1d668 <entropy_nrf5_get_entropy_isr+0x28>
   1d652:	492b      	ldr	r1, [pc, #172]	; (1d700 <entropy_nrf5_get_entropy_isr+0xc0>)
   1d654:	482b      	ldr	r0, [pc, #172]	; (1d704 <entropy_nrf5_get_entropy_isr+0xc4>)
   1d656:	f240 1205 	movw	r2, #261	; 0x105
   1d65a:	f008 ff50 	bl	264fe <assert_print>
   1d65e:	4828      	ldr	r0, [pc, #160]	; (1d700 <entropy_nrf5_get_entropy_isr+0xc0>)
   1d660:	f240 1105 	movw	r1, #261	; 0x105
   1d664:	f008 ff44 	bl	264f0 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1d668:	43eb      	mvns	r3, r5
   1d66a:	f013 0501 	ands.w	r5, r3, #1
   1d66e:	d006      	beq.n	1d67e <entropy_nrf5_get_entropy_isr+0x3e>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1d670:	4825      	ldr	r0, [pc, #148]	; (1d708 <entropy_nrf5_get_entropy_isr+0xc8>)
   1d672:	4622      	mov	r2, r4
   1d674:	4631      	mov	r1, r6
   1d676:	f7ff ff9d 	bl	1d5b4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1d67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1d67e:	b3a4      	cbz	r4, 1d6ea <entropy_nrf5_get_entropy_isr+0xaa>
	__asm__ volatile(
   1d680:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d684:	f3ef 8811 	mrs	r8, BASEPRI
   1d688:	f383 8812 	msr	BASEPRI_MAX, r3
   1d68c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1d690:	200d      	movs	r0, #13
   1d692:	f7f6 fd3b 	bl	1410c <arch_irq_is_enabled>
   1d696:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1d698:	200d      	movs	r0, #13
   1d69a:	f7f6 fd23 	bl	140e4 <arch_irq_disable>
	__asm__ volatile(
   1d69e:	f388 8811 	msr	BASEPRI, r8
   1d6a2:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d6a6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1d70c <entropy_nrf5_get_entropy_isr+0xcc>
   1d6aa:	f8df 9064 	ldr.w	r9, [pc, #100]	; 1d710 <entropy_nrf5_get_entropy_isr+0xd0>
   1d6ae:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1d6b2:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1d6b6:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1d6ba:	2301      	movs	r3, #1
   1d6bc:	f8c8 3000 	str.w	r3, [r8]
   1d6c0:	4625      	mov	r5, r4
   1d6c2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1d6c6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1d6ca:	b183      	cbz	r3, 1d6ee <entropy_nrf5_get_entropy_isr+0xae>
			byte = random_byte_get();
   1d6cc:	f7ff ff54 	bl	1d578 <random_byte_get>
			if (byte < 0) {
   1d6d0:	1e03      	subs	r3, r0, #0
   1d6d2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1d6d6:	dbf6      	blt.n	1d6c6 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   1d6d8:	3d01      	subs	r5, #1
   1d6da:	b2ad      	uxth	r5, r5
   1d6dc:	5573      	strb	r3, [r6, r5]
		} while (len);
   1d6de:	2d00      	cmp	r5, #0
   1d6e0:	d1f1      	bne.n	1d6c6 <entropy_nrf5_get_entropy_isr+0x86>
		if (irq_enabled) {
   1d6e2:	b117      	cbz	r7, 1d6ea <entropy_nrf5_get_entropy_isr+0xaa>
			irq_enable(IRQN);
   1d6e4:	200d      	movs	r0, #13
   1d6e6:	f7f6 fced 	bl	140c4 <arch_irq_enable>
	return cnt;
   1d6ea:	4620      	mov	r0, r4
   1d6ec:	e7c5      	b.n	1d67a <entropy_nrf5_get_entropy_isr+0x3a>
   1d6ee:	f3bf 8f4f 	dsb	sy
				__WFE();
   1d6f2:	bf20      	wfe
				__SEV();
   1d6f4:	bf40      	sev
				__WFE();
   1d6f6:	bf20      	wfe
   1d6f8:	e7e5      	b.n	1d6c6 <entropy_nrf5_get_entropy_isr+0x86>
   1d6fa:	bf00      	nop
   1d6fc:	20002788 	.word	0x20002788
   1d700:	0002d1fe 	.word	0x0002d1fe
   1d704:	0002aa75 	.word	0x0002aa75
   1d708:	200027b8 	.word	0x200027b8
   1d70c:	4000d000 	.word	0x4000d000
   1d710:	e000e100 	.word	0xe000e100

0001d714 <entropy_nrf5_get_entropy>:
{
   1d714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1d718:	4b1a      	ldr	r3, [pc, #104]	; (1d784 <entropy_nrf5_get_entropy+0x70>)
{
   1d71a:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1d71c:	6902      	ldr	r2, [r0, #16]
   1d71e:	429a      	cmp	r2, r3
{
   1d720:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1d722:	d008      	beq.n	1d736 <entropy_nrf5_get_entropy+0x22>
   1d724:	4918      	ldr	r1, [pc, #96]	; (1d788 <entropy_nrf5_get_entropy+0x74>)
   1d726:	4819      	ldr	r0, [pc, #100]	; (1d78c <entropy_nrf5_get_entropy+0x78>)
   1d728:	22e7      	movs	r2, #231	; 0xe7
   1d72a:	f008 fee8 	bl	264fe <assert_print>
   1d72e:	4816      	ldr	r0, [pc, #88]	; (1d788 <entropy_nrf5_get_entropy+0x74>)
   1d730:	21e7      	movs	r1, #231	; 0xe7
   1d732:	f008 fedd 	bl	264f0 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1d736:	4e13      	ldr	r6, [pc, #76]	; (1d784 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1d738:	f106 0745 	add.w	r7, r6, #69	; 0x45
   1d73c:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   1d740:	b914      	cbnz	r4, 1d748 <entropy_nrf5_get_entropy+0x34>
}
   1d742:	4620      	mov	r0, r4
   1d744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d748:	f04f 33ff 	mov.w	r3, #4294967295
   1d74c:	f04f 32ff 	mov.w	r2, #4294967295
   1d750:	4630      	mov	r0, r6
   1d752:	f003 f929 	bl	209a8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1d756:	4622      	mov	r2, r4
   1d758:	4649      	mov	r1, r9
   1d75a:	4638      	mov	r0, r7
   1d75c:	f7ff ff2a 	bl	1d5b4 <rng_pool_get>
   1d760:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1d762:	4630      	mov	r0, r6
   1d764:	f003 f8e6 	bl	20934 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1d768:	b93d      	cbnz	r5, 1d77a <entropy_nrf5_get_entropy+0x66>
	return z_impl_k_sem_take(sem, timeout);
   1d76a:	f04f 32ff 	mov.w	r2, #4294967295
   1d76e:	f04f 33ff 	mov.w	r3, #4294967295
   1d772:	4640      	mov	r0, r8
   1d774:	f003 f918 	bl	209a8 <z_impl_k_sem_take>
			continue;
   1d778:	e7e2      	b.n	1d740 <entropy_nrf5_get_entropy+0x2c>
		len -= bytes;
   1d77a:	1b64      	subs	r4, r4, r5
   1d77c:	b2a4      	uxth	r4, r4
		buf += bytes;
   1d77e:	44a9      	add	r9, r5
   1d780:	e7de      	b.n	1d740 <entropy_nrf5_get_entropy+0x2c>
   1d782:	bf00      	nop
   1d784:	20002788 	.word	0x20002788
   1d788:	0002d1fe 	.word	0x0002d1fe
   1d78c:	0002aa75 	.word	0x0002aa75

0001d790 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1d790:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1d792:	4c20      	ldr	r4, [pc, #128]	; (1d814 <entropy_nrf5_init+0x84>)
   1d794:	6903      	ldr	r3, [r0, #16]
   1d796:	42a3      	cmp	r3, r4
   1d798:	d00a      	beq.n	1d7b0 <entropy_nrf5_init+0x20>
   1d79a:	491f      	ldr	r1, [pc, #124]	; (1d818 <entropy_nrf5_init+0x88>)
   1d79c:	481f      	ldr	r0, [pc, #124]	; (1d81c <entropy_nrf5_init+0x8c>)
   1d79e:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1d7a2:	f008 feac 	bl	264fe <assert_print>
   1d7a6:	481c      	ldr	r0, [pc, #112]	; (1d818 <entropy_nrf5_init+0x88>)
   1d7a8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1d7ac:	f008 fea0 	bl	264f0 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d7b0:	2201      	movs	r2, #1
   1d7b2:	4611      	mov	r1, r2
   1d7b4:	4817      	ldr	r0, [pc, #92]	; (1d814 <entropy_nrf5_init+0x84>)
   1d7b6:	f00c f8b1 	bl	2991c <z_impl_k_sem_init>
   1d7ba:	2201      	movs	r2, #1
   1d7bc:	2100      	movs	r1, #0
   1d7be:	4818      	ldr	r0, [pc, #96]	; (1d820 <entropy_nrf5_init+0x90>)
   1d7c0:	f00c f8ac 	bl	2991c <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1d7c4:	f240 4307 	movw	r3, #1031	; 0x407
   1d7c8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1d7cc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d7d0:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1d7d2:	230c      	movs	r3, #12
   1d7d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1d7d8:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1d7da:	4b12      	ldr	r3, [pc, #72]	; (1d824 <entropy_nrf5_init+0x94>)
   1d7dc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1d7e0:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1d7e4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1d7e8:	f022 0201 	bic.w	r2, r2, #1
   1d7ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1d7f0:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d7f2:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1d7f6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1d7fa:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1d7fe:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1d800:	6019      	str	r1, [r3, #0]
   1d802:	200d      	movs	r0, #13
   1d804:	f7f6 fc90 	bl	14128 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1d808:	200d      	movs	r0, #13
   1d80a:	f7f6 fc5b 	bl	140c4 <arch_irq_enable>

	return 0;
}
   1d80e:	4628      	mov	r0, r5
   1d810:	bd38      	pop	{r3, r4, r5, pc}
   1d812:	bf00      	nop
   1d814:	20002788 	.word	0x20002788
   1d818:	0002d1fe 	.word	0x0002d1fe
   1d81c:	0002aa75 	.word	0x0002aa75
   1d820:	200027a0 	.word	0x200027a0
   1d824:	4000d000 	.word	0x4000d000

0001d828 <isr>:
{
   1d828:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1d82a:	f7ff fea5 	bl	1d578 <random_byte_get>
	if (byte < 0) {
   1d82e:	2800      	cmp	r0, #0
   1d830:	db20      	blt.n	1d874 <isr+0x4c>
	uint8_t last  = rngp->last;
   1d832:	4b17      	ldr	r3, [pc, #92]	; (1d890 <isr+0x68>)
   1d834:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1d838:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1d83c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1d840:	1a51      	subs	r1, r2, r1
   1d842:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1d846:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1d848:	d10d      	bne.n	1d866 <isr+0x3e>
	uint8_t last  = rngp->last;
   1d84a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1d84e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1d852:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1d856:	1a51      	subs	r1, r2, r1
   1d858:	ea34 0101 	bics.w	r1, r4, r1
   1d85c:	d10b      	bne.n	1d876 <isr+0x4e>
   1d85e:	4b0d      	ldr	r3, [pc, #52]	; (1d894 <isr+0x6c>)
   1d860:	2201      	movs	r2, #1
   1d862:	605a      	str	r2, [r3, #4]
}
   1d864:	e00e      	b.n	1d884 <isr+0x5c>
	rngp->buffer[last] = byte;
   1d866:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1d868:	3201      	adds	r2, #1
   1d86a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1d86c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1d870:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1d874:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1d876:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1d878:	3201      	adds	r2, #1
   1d87a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1d87c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1d880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1d884:	4804      	ldr	r0, [pc, #16]	; (1d898 <isr+0x70>)
}
   1d886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d88a:	f003 b853 	b.w	20934 <z_impl_k_sem_give>
   1d88e:	bf00      	nop
   1d890:	20002788 	.word	0x20002788
   1d894:	4000d000 	.word	0x4000d000
   1d898:	200027a0 	.word	0x200027a0

0001d89c <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1d89c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d89e:	460f      	mov	r7, r1
   1d8a0:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dev != NULL);
   1d8a2:	b940      	cbnz	r0, 1d8b6 <entropy_cc3xx_rng_get_entropy+0x1a>
   1d8a4:	4918      	ldr	r1, [pc, #96]	; (1d908 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1d8a6:	4819      	ldr	r0, [pc, #100]	; (1d90c <entropy_cc3xx_rng_get_entropy+0x70>)
   1d8a8:	2220      	movs	r2, #32
   1d8aa:	f008 fe28 	bl	264fe <assert_print>
   1d8ae:	4816      	ldr	r0, [pc, #88]	; (1d908 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1d8b0:	2120      	movs	r1, #32
   1d8b2:	f008 fe1d 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1d8b6:	b947      	cbnz	r7, 1d8ca <entropy_cc3xx_rng_get_entropy+0x2e>
   1d8b8:	4913      	ldr	r1, [pc, #76]	; (1d908 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1d8ba:	4814      	ldr	r0, [pc, #80]	; (1d90c <entropy_cc3xx_rng_get_entropy+0x70>)
   1d8bc:	2221      	movs	r2, #33	; 0x21
   1d8be:	f008 fe1e 	bl	264fe <assert_print>
   1d8c2:	4811      	ldr	r0, [pc, #68]	; (1d908 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1d8c4:	2121      	movs	r1, #33	; 0x21
   1d8c6:	f008 fe13 	bl	264f0 <assert_post_action>
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1d8ca:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1d8ce:	2400      	movs	r4, #0
	while (offset < length) {
   1d8d0:	42a6      	cmp	r6, r4
   1d8d2:	d803      	bhi.n	1d8dc <entropy_cc3xx_rng_get_entropy+0x40>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   1d8d4:	d116      	bne.n	1d904 <entropy_cc3xx_rng_get_entropy+0x68>
		err = 0;
   1d8d6:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1d8d8:	b003      	add	sp, #12
   1d8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1d8dc:	1b33      	subs	r3, r6, r4
   1d8de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1d8e2:	bf38      	it	cc
   1d8e4:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   1d8e6:	462a      	mov	r2, r5
   1d8e8:	ab01      	add	r3, sp, #4
   1d8ea:	1939      	adds	r1, r7, r4
   1d8ec:	2000      	movs	r0, #0
   1d8ee:	f005 ff4b 	bl	23788 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   1d8f2:	b920      	cbnz	r0, 1d8fe <entropy_cc3xx_rng_get_entropy+0x62>
		if (olen != chunk_size) {
   1d8f4:	9b01      	ldr	r3, [sp, #4]
   1d8f6:	42ab      	cmp	r3, r5
   1d8f8:	d101      	bne.n	1d8fe <entropy_cc3xx_rng_get_entropy+0x62>
		offset += chunk_size;
   1d8fa:	442c      	add	r4, r5
   1d8fc:	e7e8      	b.n	1d8d0 <entropy_cc3xx_rng_get_entropy+0x34>
			return -EINVAL;
   1d8fe:	f06f 0015 	mvn.w	r0, #21
   1d902:	e7e9      	b.n	1d8d8 <entropy_cc3xx_rng_get_entropy+0x3c>
	int err = EINVAL;
   1d904:	2016      	movs	r0, #22
   1d906:	e7e7      	b.n	1d8d8 <entropy_cc3xx_rng_get_entropy+0x3c>
   1d908:	0002d24f 	.word	0x0002d24f
   1d90c:	0002aa75 	.word	0x0002aa75

0001d910 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1d910:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1d912:	2301      	movs	r3, #1
   1d914:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d916:	4a11      	ldr	r2, [pc, #68]	; (1d95c <compare_int_lock+0x4c>)
   1d918:	f3bf 8f5b 	dmb	ish
   1d91c:	43dc      	mvns	r4, r3
   1d91e:	e852 1f00 	ldrex	r1, [r2]
   1d922:	ea01 0c04 	and.w	ip, r1, r4
   1d926:	e842 ce00 	strex	lr, ip, [r2]
   1d92a:	f1be 0f00 	cmp.w	lr, #0
   1d92e:	d1f6      	bne.n	1d91e <compare_int_lock+0xe>
   1d930:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d934:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d938:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1d93c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1d940:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1d944:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1d948:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d94c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1d950:	420b      	tst	r3, r1
}
   1d952:	bf14      	ite	ne
   1d954:	2001      	movne	r0, #1
   1d956:	2000      	moveq	r0, #0
   1d958:	bd10      	pop	{r4, pc}
   1d95a:	bf00      	nop
   1d95c:	200027e0 	.word	0x200027e0

0001d960 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1d960:	4919      	ldr	r1, [pc, #100]	; (1d9c8 <sys_clock_timeout_handler+0x68>)
{
   1d962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d964:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1d966:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1d96a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1d96c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1d970:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1d974:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1d976:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1d97a:	d222      	bcs.n	1d9c2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1d97c:	4b13      	ldr	r3, [pc, #76]	; (1d9cc <sys_clock_timeout_handler+0x6c>)
   1d97e:	681b      	ldr	r3, [r3, #0]
   1d980:	0a1a      	lsrs	r2, r3, #8
   1d982:	061b      	lsls	r3, r3, #24
   1d984:	195e      	adds	r6, r3, r5
   1d986:	4b12      	ldr	r3, [pc, #72]	; (1d9d0 <sys_clock_timeout_handler+0x70>)
   1d988:	f142 0700 	adc.w	r7, r2, #0
   1d98c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1d990:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1d992:	f004 ff11 	bl	227b8 <sys_clock_announce>
    return p_reg->CC[ch];
   1d996:	00a3      	lsls	r3, r4, #2
   1d998:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d99c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1d9a0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1d9a4:	42aa      	cmp	r2, r5
   1d9a6:	d10b      	bne.n	1d9c0 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1d9a8:	b91e      	cbnz	r6, 1d9b2 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1d9aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1d9ae:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1d9b2:	4b08      	ldr	r3, [pc, #32]	; (1d9d4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d9b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1d9b8:	fa00 f404 	lsl.w	r4, r0, r4
   1d9bc:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1d9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1d9c2:	2600      	movs	r6, #0
   1d9c4:	e7e5      	b.n	1d992 <sys_clock_timeout_handler+0x32>
   1d9c6:	bf00      	nop
   1d9c8:	20001c48 	.word	0x20001c48
   1d9cc:	200027e4 	.word	0x200027e4
   1d9d0:	20001c30 	.word	0x20001c30
   1d9d4:	40011000 	.word	0x40011000

0001d9d8 <compare_int_unlock>:
	if (key) {
   1d9d8:	b319      	cbz	r1, 1da22 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d9da:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1d9de:	2301      	movs	r3, #1
   1d9e0:	4a10      	ldr	r2, [pc, #64]	; (1da24 <compare_int_unlock+0x4c>)
   1d9e2:	4083      	lsls	r3, r0
   1d9e4:	e852 1f00 	ldrex	r1, [r2]
   1d9e8:	4319      	orrs	r1, r3
   1d9ea:	e842 1c00 	strex	ip, r1, [r2]
   1d9ee:	f1bc 0f00 	cmp.w	ip, #0
   1d9f2:	d1f7      	bne.n	1d9e4 <compare_int_unlock+0xc>
   1d9f4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1d9f8:	4a0b      	ldr	r2, [pc, #44]	; (1da28 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d9fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d9fe:	4083      	lsls	r3, r0
   1da00:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1da04:	4b09      	ldr	r3, [pc, #36]	; (1da2c <compare_int_unlock+0x54>)
   1da06:	f3bf 8f5b 	dmb	ish
   1da0a:	681b      	ldr	r3, [r3, #0]
   1da0c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1da10:	fa23 f000 	lsr.w	r0, r3, r0
   1da14:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1da16:	bf42      	ittt	mi
   1da18:	4b05      	ldrmi	r3, [pc, #20]	; (1da30 <compare_int_unlock+0x58>)
   1da1a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1da1e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1da22:	4770      	bx	lr
   1da24:	200027e0 	.word	0x200027e0
   1da28:	40011000 	.word	0x40011000
   1da2c:	200027dc 	.word	0x200027dc
   1da30:	e000e100 	.word	0xe000e100

0001da34 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1da34:	4b0d      	ldr	r3, [pc, #52]	; (1da6c <z_nrf_rtc_timer_read+0x38>)
   1da36:	6818      	ldr	r0, [r3, #0]
   1da38:	0a01      	lsrs	r1, r0, #8
   1da3a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1da3c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1da40:	4b0b      	ldr	r3, [pc, #44]	; (1da70 <z_nrf_rtc_timer_read+0x3c>)
   1da42:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1da46:	1818      	adds	r0, r3, r0
   1da48:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1da4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1da50:	d20a      	bcs.n	1da68 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1da52:	4b08      	ldr	r3, [pc, #32]	; (1da74 <z_nrf_rtc_timer_read+0x40>)
   1da54:	e9d3 2300 	ldrd	r2, r3, [r3]
   1da58:	4290      	cmp	r0, r2
   1da5a:	eb71 0303 	sbcs.w	r3, r1, r3
   1da5e:	d203      	bcs.n	1da68 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1da60:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1da64:	f141 0100 	adc.w	r1, r1, #0
}
   1da68:	4770      	bx	lr
   1da6a:	bf00      	nop
   1da6c:	200027e4 	.word	0x200027e4
   1da70:	40011000 	.word	0x40011000
   1da74:	20001c30 	.word	0x20001c30

0001da78 <compare_set>:
{
   1da78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da7c:	b085      	sub	sp, #20
   1da7e:	4616      	mov	r6, r2
   1da80:	4698      	mov	r8, r3
   1da82:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1da84:	f7ff ff44 	bl	1d910 <compare_int_lock>
   1da88:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1da8a:	f7ff ffd3 	bl	1da34 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1da8e:	42b0      	cmp	r0, r6
   1da90:	eb71 0308 	sbcs.w	r3, r1, r8
   1da94:	d278      	bcs.n	1db88 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   1da96:	4b46      	ldr	r3, [pc, #280]	; (1dbb0 <compare_set+0x138>)
   1da98:	1a30      	subs	r0, r6, r0
   1da9a:	eb68 0101 	sbc.w	r1, r8, r1
   1da9e:	4298      	cmp	r0, r3
   1daa0:	f171 0300 	sbcs.w	r3, r1, #0
   1daa4:	f080 8081 	bcs.w	1dbaa <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   1daa8:	4b42      	ldr	r3, [pc, #264]	; (1dbb4 <compare_set+0x13c>)
   1daaa:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1daae:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1dab2:	45d8      	cmp	r8, fp
   1dab4:	bf08      	it	eq
   1dab6:	4556      	cmpeq	r6, sl
   1dab8:	d051      	beq.n	1db5e <compare_set+0xe6>
   1daba:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1dabe:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1dac2:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1dac6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1daca:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dacc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1dad0:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dad4:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1dad6:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1dada:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dade:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1dae0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1dae4:	4b34      	ldr	r3, [pc, #208]	; (1dbb8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dae6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1daea:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   1daec:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1daf0:	1a40      	subs	r0, r0, r1
   1daf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1daf6:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1dafa:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1dafc:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1db00:	d107      	bne.n	1db12 <compare_set+0x9a>
   1db02:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1db06:	2013      	movs	r0, #19
   1db08:	f00b ffb5 	bl	29a76 <z_impl_k_busy_wait>
   1db0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1db10:	4b29      	ldr	r3, [pc, #164]	; (1dbb8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1db12:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1db16:	eba4 000c 	sub.w	r0, r4, ip
   1db1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1db1e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1db22:	bf88      	it	hi
   1db24:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1db26:	2000      	movs	r0, #0
   1db28:	6038      	str	r0, [r7, #0]
   1db2a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1db2c:	9801      	ldr	r0, [sp, #4]
   1db2e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1db32:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1db36:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1db3a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1db3e:	4281      	cmp	r1, r0
   1db40:	d006      	beq.n	1db50 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1db42:	1a20      	subs	r0, r4, r0
   1db44:	3802      	subs	r0, #2
   1db46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1db4a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1db4e:	d819      	bhi.n	1db84 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   1db50:	1aa4      	subs	r4, r4, r2
   1db52:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1db56:	eb14 0a06 	adds.w	sl, r4, r6
   1db5a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1db5e:	4915      	ldr	r1, [pc, #84]	; (1dbb4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   1db60:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1db62:	012b      	lsls	r3, r5, #4
   1db64:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   1db68:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   1db6c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1db6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1db70:	6053      	str	r3, [r2, #4]
	return ret;
   1db72:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   1db74:	4628      	mov	r0, r5
   1db76:	9900      	ldr	r1, [sp, #0]
   1db78:	f7ff ff2e 	bl	1d9d8 <compare_int_unlock>
}
   1db7c:	4620      	mov	r0, r4
   1db7e:	b005      	add	sp, #20
   1db80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db84:	4620      	mov	r0, r4
   1db86:	e7b1      	b.n	1daec <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1db88:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1db8a:	4a0c      	ldr	r2, [pc, #48]	; (1dbbc <compare_set+0x144>)
   1db8c:	f3bf 8f5b 	dmb	ish
   1db90:	40ab      	lsls	r3, r5
   1db92:	e852 1f00 	ldrex	r1, [r2]
   1db96:	4319      	orrs	r1, r3
   1db98:	e842 1000 	strex	r0, r1, [r2]
   1db9c:	2800      	cmp	r0, #0
   1db9e:	d1f8      	bne.n	1db92 <compare_set+0x11a>
   1dba0:	f3bf 8f5b 	dmb	ish
   1dba4:	46b2      	mov	sl, r6
   1dba6:	46c3      	mov	fp, r8
   1dba8:	e7d9      	b.n	1db5e <compare_set+0xe6>
			return -EINVAL;
   1dbaa:	f06f 0415 	mvn.w	r4, #21
   1dbae:	e7e1      	b.n	1db74 <compare_set+0xfc>
   1dbb0:	01000001 	.word	0x01000001
   1dbb4:	20001c38 	.word	0x20001c38
   1dbb8:	40011000 	.word	0x40011000
   1dbbc:	200027dc 	.word	0x200027dc

0001dbc0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1dbc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1dbc2:	4b19      	ldr	r3, [pc, #100]	; (1dc28 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1dbc4:	4d19      	ldr	r5, [pc, #100]	; (1dc2c <sys_clock_driver_init+0x6c>)
   1dbc6:	2400      	movs	r4, #0
   1dbc8:	f04f 30ff 	mov.w	r0, #4294967295
   1dbcc:	f04f 31ff 	mov.w	r1, #4294967295
   1dbd0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1dbd4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1dbd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1dbdc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dbe0:	4b13      	ldr	r3, [pc, #76]	; (1dc30 <sys_clock_driver_init+0x70>)
   1dbe2:	2602      	movs	r6, #2
   1dbe4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1dbe8:	2101      	movs	r1, #1
   1dbea:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1dbee:	2011      	movs	r0, #17
   1dbf0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1dbf4:	4622      	mov	r2, r4
   1dbf6:	f7f6 fa97 	bl	14128 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1dbfa:	2011      	movs	r0, #17
   1dbfc:	f7f6 fa62 	bl	140c4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1dc00:	4a0c      	ldr	r2, [pc, #48]	; (1dc34 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1dc02:	2301      	movs	r3, #1
   1dc04:	60ab      	str	r3, [r5, #8]
   1dc06:	602b      	str	r3, [r5, #0]
   1dc08:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1dc0a:	4b0b      	ldr	r3, [pc, #44]	; (1dc38 <sys_clock_driver_init+0x78>)
   1dc0c:	4a0b      	ldr	r2, [pc, #44]	; (1dc3c <sys_clock_driver_init+0x7c>)
   1dc0e:	9300      	str	r3, [sp, #0]
   1dc10:	9401      	str	r4, [sp, #4]
   1dc12:	2300      	movs	r3, #0
   1dc14:	4620      	mov	r0, r4
   1dc16:	f7ff ff2f 	bl	1da78 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1dc1a:	4630      	mov	r0, r6
   1dc1c:	f7ff f892 	bl	1cd44 <z_nrf_clock_control_lf_on>

	return 0;
}
   1dc20:	4620      	mov	r0, r4
   1dc22:	b002      	add	sp, #8
   1dc24:	bd70      	pop	{r4, r5, r6, pc}
   1dc26:	bf00      	nop
   1dc28:	20001c38 	.word	0x20001c38
   1dc2c:	40011000 	.word	0x40011000
   1dc30:	e000e100 	.word	0xe000e100
   1dc34:	200027e0 	.word	0x200027e0
   1dc38:	0001d961 	.word	0x0001d961
   1dc3c:	007fffff 	.word	0x007fffff

0001dc40 <rtc_nrf_isr>:
{
   1dc40:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1dc44:	4c2c      	ldr	r4, [pc, #176]	; (1dcf8 <rtc_nrf_isr+0xb8>)
   1dc46:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1dc4a:	0799      	lsls	r1, r3, #30
   1dc4c:	d50b      	bpl.n	1dc66 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc4e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1dc52:	b143      	cbz	r3, 1dc66 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1dc54:	4a29      	ldr	r2, [pc, #164]	; (1dcfc <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dc56:	2300      	movs	r3, #0
   1dc58:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1dc5c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1dc60:	6813      	ldr	r3, [r2, #0]
   1dc62:	3301      	adds	r3, #1
   1dc64:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1dc66:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1dc6a:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1dc6c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1dc70:	03d2      	lsls	r2, r2, #15
   1dc72:	d52d      	bpl.n	1dcd0 <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dc74:	f3bf 8f5b 	dmb	ish
   1dc78:	4a21      	ldr	r2, [pc, #132]	; (1dd00 <rtc_nrf_isr+0xc0>)
   1dc7a:	e852 1f00 	ldrex	r1, [r2]
   1dc7e:	f021 0001 	bic.w	r0, r1, #1
   1dc82:	e842 0500 	strex	r5, r0, [r2]
   1dc86:	2d00      	cmp	r5, #0
   1dc88:	d1f7      	bne.n	1dc7a <rtc_nrf_isr+0x3a>
   1dc8a:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1dc8e:	b911      	cbnz	r1, 1dc96 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc90:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   1dc94:	b1e2      	cbz	r2, 1dcd0 <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dc96:	2500      	movs	r5, #0
   1dc98:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1dc9c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1dca0:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1dca4:	f7ff fec6 	bl	1da34 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1dca8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1dcac:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1dcae:	4b15      	ldr	r3, [pc, #84]	; (1dd04 <rtc_nrf_isr+0xc4>)
   1dcb0:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1dcb4:	42b0      	cmp	r0, r6
   1dcb6:	41b9      	sbcs	r1, r7
   1dcb8:	d20f      	bcs.n	1dcda <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1dcba:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1dcbc:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1dcc0:	b141      	cbz	r1, 1dcd4 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   1dcc2:	f8cd 8000 	str.w	r8, [sp]
   1dcc6:	4632      	mov	r2, r6
   1dcc8:	463b      	mov	r3, r7
   1dcca:	2000      	movs	r0, #0
   1dccc:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1dcce:	e001      	b.n	1dcd4 <rtc_nrf_isr+0x94>
   1dcd0:	f383 8810 	msr	PRIMASK, r3
}
   1dcd4:	b002      	add	sp, #8
   1dcd6:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1dcda:	f04f 3aff 	mov.w	sl, #4294967295
   1dcde:	f04f 3bff 	mov.w	fp, #4294967295
			user_context = cc_data[chan].user_context;
   1dce2:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1dce6:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   1dcea:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1dcec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1dcf0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1dcf4:	e7e2      	b.n	1dcbc <rtc_nrf_isr+0x7c>
   1dcf6:	bf00      	nop
   1dcf8:	40011000 	.word	0x40011000
   1dcfc:	200027e4 	.word	0x200027e4
   1dd00:	200027dc 	.word	0x200027dc
   1dd04:	20001c38 	.word	0x20001c38

0001dd08 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1dd08:	1c43      	adds	r3, r0, #1
{
   1dd0a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1dd0c:	d021      	beq.n	1dd52 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1dd0e:	2801      	cmp	r0, #1
   1dd10:	dd21      	ble.n	1dd56 <sys_clock_set_timeout+0x4e>
   1dd12:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1dd16:	da20      	bge.n	1dd5a <sys_clock_set_timeout+0x52>
   1dd18:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1dd1a:	f7ff fe8b 	bl	1da34 <z_nrf_rtc_timer_read>
   1dd1e:	4b10      	ldr	r3, [pc, #64]	; (1dd60 <sys_clock_set_timeout+0x58>)
   1dd20:	e9d3 1300 	ldrd	r1, r3, [r3]
   1dd24:	1a40      	subs	r0, r0, r1
		ticks = 0;
   1dd26:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1dd2a:	bf28      	it	cs
   1dd2c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1dd2e:	3001      	adds	r0, #1
   1dd30:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   1dd32:	480c      	ldr	r0, [pc, #48]	; (1dd64 <sys_clock_set_timeout+0x5c>)
   1dd34:	4282      	cmp	r2, r0
   1dd36:	bf28      	it	cs
   1dd38:	4602      	movcs	r2, r0
   1dd3a:	1852      	adds	r2, r2, r1
   1dd3c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1dd40:	4909      	ldr	r1, [pc, #36]	; (1dd68 <sys_clock_set_timeout+0x60>)
   1dd42:	9001      	str	r0, [sp, #4]
   1dd44:	9100      	str	r1, [sp, #0]
   1dd46:	f143 0300 	adc.w	r3, r3, #0
   1dd4a:	f7ff fe95 	bl	1da78 <compare_set>
}
   1dd4e:	b002      	add	sp, #8
   1dd50:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1dd52:	4804      	ldr	r0, [pc, #16]	; (1dd64 <sys_clock_set_timeout+0x5c>)
   1dd54:	e7e0      	b.n	1dd18 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1dd56:	2400      	movs	r4, #0
   1dd58:	e7df      	b.n	1dd1a <sys_clock_set_timeout+0x12>
   1dd5a:	4c02      	ldr	r4, [pc, #8]	; (1dd64 <sys_clock_set_timeout+0x5c>)
   1dd5c:	e7dd      	b.n	1dd1a <sys_clock_set_timeout+0x12>
   1dd5e:	bf00      	nop
   1dd60:	20001c48 	.word	0x20001c48
   1dd64:	007fffff 	.word	0x007fffff
   1dd68:	0001d961 	.word	0x0001d961

0001dd6c <sys_clock_elapsed>:
{
   1dd6c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1dd6e:	f7ff fe61 	bl	1da34 <z_nrf_rtc_timer_read>
   1dd72:	4b02      	ldr	r3, [pc, #8]	; (1dd7c <sys_clock_elapsed+0x10>)
   1dd74:	681b      	ldr	r3, [r3, #0]
}
   1dd76:	1ac0      	subs	r0, r0, r3
   1dd78:	bd08      	pop	{r3, pc}
   1dd7a:	bf00      	nop
   1dd7c:	20001c48 	.word	0x20001c48

0001dd80 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1dd80:	4602      	mov	r2, r0
   1dd82:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1dd84:	4801      	ldr	r0, [pc, #4]	; (1dd8c <multithreading_lock_acquire+0xc>)
   1dd86:	f002 bb55 	b.w	20434 <z_impl_k_mutex_lock>
   1dd8a:	bf00      	nop
   1dd8c:	2000083c 	.word	0x2000083c

0001dd90 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1dd90:	4801      	ldr	r0, [pc, #4]	; (1dd98 <multithreading_lock_release+0x8>)
   1dd92:	f002 bc21 	b.w	205d8 <z_impl_k_mutex_unlock>
   1dd96:	bf00      	nop
   1dd98:	2000083c 	.word	0x2000083c

0001dd9c <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1dd9c:	4803      	ldr	r0, [pc, #12]	; (1ddac <k_sys_fatal_error_handler+0x10>)
{
   1dd9e:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   1dda0:	2145      	movs	r1, #69	; 0x45
   1dda2:	f008 fbba 	bl	2651a <z_log_minimal_printk>
		sys_arch_reboot(0);
   1dda6:	2000      	movs	r0, #0
   1dda8:	f7f6 feea 	bl	14b80 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1ddac:	0002d28f 	.word	0x0002d28f

0001ddb0 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1ddb0:	b508      	push	{r3, lr}
   1ddb2:	4602      	mov	r2, r0
   1ddb4:	460b      	mov	r3, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1ddb6:	4805      	ldr	r0, [pc, #20]	; (1ddcc <sdc_assertion_handler+0x1c>)
   1ddb8:	2145      	movs	r1, #69	; 0x45
   1ddba:	f008 fbae 	bl	2651a <z_log_minimal_printk>
	k_oops();
   1ddbe:	4040      	eors	r0, r0
   1ddc0:	f380 8811 	msr	BASEPRI, r0
   1ddc4:	f04f 0003 	mov.w	r0, #3
   1ddc8:	df02      	svc	2
}
   1ddca:	bd08      	pop	{r3, pc}
   1ddcc:	0002d2b1 	.word	0x0002d2b1

0001ddd0 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1ddd0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1ddd2:	4804      	ldr	r0, [pc, #16]	; (1dde4 <hci_driver_init+0x14>)
   1ddd4:	f7f8 f96a 	bl	160ac <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1ddd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1dddc:	4802      	ldr	r0, [pc, #8]	; (1dde8 <hci_driver_init+0x18>)
   1ddde:	f7e7 bb5f 	b.w	54a0 <sdc_init>
   1dde2:	bf00      	nop
   1dde4:	0002a778 	.word	0x0002a778
   1dde8:	0001ddb1 	.word	0x0001ddb1

0001ddec <rand_prio_low_vector_get_blocking>:
{
   1ddec:	b570      	push	{r4, r5, r6, lr}
   1ddee:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1ddf0:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1ddf2:	4b10      	ldr	r3, [pc, #64]	; (1de34 <rand_prio_low_vector_get_blocking+0x48>)
   1ddf4:	689e      	ldr	r6, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1ddf6:	6833      	ldr	r3, [r6, #0]
   1ddf8:	b943      	cbnz	r3, 1de0c <rand_prio_low_vector_get_blocking+0x20>
   1ddfa:	490f      	ldr	r1, [pc, #60]	; (1de38 <rand_prio_low_vector_get_blocking+0x4c>)
   1ddfc:	480f      	ldr	r0, [pc, #60]	; (1de3c <rand_prio_low_vector_get_blocking+0x50>)
   1ddfe:	224b      	movs	r2, #75	; 0x4b
   1de00:	f008 fb7d 	bl	264fe <assert_print>
   1de04:	480c      	ldr	r0, [pc, #48]	; (1de38 <rand_prio_low_vector_get_blocking+0x4c>)
   1de06:	214b      	movs	r1, #75	; 0x4b
   1de08:	f008 fb72 	bl	264f0 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1de0c:	6833      	ldr	r3, [r6, #0]
   1de0e:	4809      	ldr	r0, [pc, #36]	; (1de34 <rand_prio_low_vector_get_blocking+0x48>)
   1de10:	462a      	mov	r2, r5
   1de12:	4621      	mov	r1, r4
   1de14:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1de16:	b160      	cbz	r0, 1de32 <rand_prio_low_vector_get_blocking+0x46>
   1de18:	4909      	ldr	r1, [pc, #36]	; (1de40 <rand_prio_low_vector_get_blocking+0x54>)
   1de1a:	4808      	ldr	r0, [pc, #32]	; (1de3c <rand_prio_low_vector_get_blocking+0x50>)
   1de1c:	f240 12d9 	movw	r2, #473	; 0x1d9
   1de20:	f008 fb6d 	bl	264fe <assert_print>
}
   1de24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1de28:	4805      	ldr	r0, [pc, #20]	; (1de40 <rand_prio_low_vector_get_blocking+0x54>)
   1de2a:	f240 11d9 	movw	r1, #473	; 0x1d9
   1de2e:	f008 bb5f 	b.w	264f0 <assert_post_action>
}
   1de32:	bd70      	pop	{r4, r5, r6, pc}
   1de34:	00029d14 	.word	0x00029d14
   1de38:	0002d2db 	.word	0x0002d2db
   1de3c:	0002aa75 	.word	0x0002aa75
   1de40:	0002d30f 	.word	0x0002d30f

0001de44 <hci_driver_open>:
{
   1de44:	b570      	push	{r4, r5, r6, lr}
   1de46:	b088      	sub	sp, #32
		hci_ecdh_init();
   1de48:	f000 fe1a 	bl	1ea80 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1de4c:	a803      	add	r0, sp, #12
   1de4e:	f7e7 fa8b 	bl	5368 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1de52:	4a4f      	ldr	r2, [pc, #316]	; (1df90 <hci_driver_open+0x14c>)
   1de54:	484f      	ldr	r0, [pc, #316]	; (1df94 <hci_driver_open+0x150>)
   1de56:	2149      	movs	r1, #73	; 0x49
   1de58:	f008 fb5f 	bl	2651a <z_log_minimal_printk>
   1de5c:	2214      	movs	r2, #20
   1de5e:	a903      	add	r1, sp, #12
   1de60:	2003      	movs	r0, #3
   1de62:	f7f5 f873 	bl	12f4c <z_log_minimal_hexdump_print>
			err = sdc_support_adv();
   1de66:	f7e7 fb99 	bl	559c <sdc_support_adv>
			if (err) {
   1de6a:	b118      	cbz	r0, 1de74 <hci_driver_open+0x30>
				return -ENOTSUP;
   1de6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1de70:	b008      	add	sp, #32
   1de72:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_peripheral();
   1de74:	f7e7 fbc4 	bl	5600 <sdc_support_peripheral>
		if (err) {
   1de78:	2800      	cmp	r0, #0
   1de7a:	d1f7      	bne.n	1de6c <hci_driver_open+0x28>
			err = sdc_support_dle_peripheral();
   1de7c:	f7e7 fb9e 	bl	55bc <sdc_support_dle_peripheral>
			if (err) {
   1de80:	2800      	cmp	r0, #0
   1de82:	d1f3      	bne.n	1de6c <hci_driver_open+0x28>
		err = sdc_support_le_2m_phy();
   1de84:	f7e7 fbaa 	bl	55dc <sdc_support_le_2m_phy>
		if (err) {
   1de88:	2800      	cmp	r0, #0
   1de8a:	d1ef      	bne.n	1de6c <hci_driver_open+0x28>
			err = sdc_support_phy_update_peripheral();
   1de8c:	f7e7 fbc8 	bl	5620 <sdc_support_phy_update_peripheral>
			if (err) {
   1de90:	4605      	mov	r5, r0
   1de92:	2800      	cmp	r0, #0
   1de94:	d1ea      	bne.n	1de6c <hci_driver_open+0x28>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1de96:	466c      	mov	r4, sp
   1de98:	4622      	mov	r2, r4
   1de9a:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1de9c:	f88d 0000 	strb.w	r0, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dea0:	f7e7 fa70 	bl	5384 <sdc_cfg_set>
	if (required_memory < 0) {
   1dea4:	2800      	cmp	r0, #0
   1dea6:	dbe3      	blt.n	1de70 <hci_driver_open+0x2c>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1dea8:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1deaa:	4622      	mov	r2, r4
   1deac:	2102      	movs	r1, #2
   1deae:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1deb0:	f88d 6000 	strb.w	r6, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1deb4:	f7e7 fa66 	bl	5384 <sdc_cfg_set>
	if (required_memory < 0) {
   1deb8:	2800      	cmp	r0, #0
   1deba:	dbd9      	blt.n	1de70 <hci_driver_open+0x2c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1debc:	4b36      	ldr	r3, [pc, #216]	; (1df98 <hci_driver_open+0x154>)
   1debe:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dec0:	4622      	mov	r2, r4
   1dec2:	2103      	movs	r1, #3
   1dec4:	4628      	mov	r0, r5
   1dec6:	f7e7 fa5d 	bl	5384 <sdc_cfg_set>
	if (required_memory < 0) {
   1deca:	2800      	cmp	r0, #0
   1decc:	dbd0      	blt.n	1de70 <hci_driver_open+0x2c>
	cfg.event_length.event_length_us =
   1dece:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ded2:	4622      	mov	r2, r4
   1ded4:	2104      	movs	r1, #4
   1ded6:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   1ded8:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1deda:	f7e7 fa53 	bl	5384 <sdc_cfg_set>
	if (required_memory < 0) {
   1dede:	2800      	cmp	r0, #0
   1dee0:	dbc6      	blt.n	1de70 <hci_driver_open+0x2c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dee2:	4622      	mov	r2, r4
   1dee4:	2105      	movs	r1, #5
   1dee6:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1dee8:	f88d 6000 	strb.w	r6, [sp]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1deec:	f7e7 fa4a 	bl	5384 <sdc_cfg_set>
	if (required_memory < 0) {
   1def0:	2800      	cmp	r0, #0
   1def2:	dbbd      	blt.n	1de70 <hci_driver_open+0x2c>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1def4:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1def6:	4622      	mov	r2, r4
   1def8:	2107      	movs	r1, #7
   1defa:	2000      	movs	r0, #0
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1defc:	f8ad 3000 	strh.w	r3, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1df00:	f7e7 fa40 	bl	5384 <sdc_cfg_set>
		if (required_memory < 0) {
   1df04:	2800      	cmp	r0, #0
   1df06:	dbb3      	blt.n	1de70 <hci_driver_open+0x2c>
	if (required_memory > sizeof(sdc_mempool)) {
   1df08:	f240 7214 	movw	r2, #1812	; 0x714
   1df0c:	4290      	cmp	r0, r2
   1df0e:	dd0d      	ble.n	1df2c <hci_driver_open+0xe8>
		BT_ERR("Allocated memory too low: %u < %u",
   1df10:	4603      	mov	r3, r0
   1df12:	2145      	movs	r1, #69	; 0x45
   1df14:	4821      	ldr	r0, [pc, #132]	; (1df9c <hci_driver_open+0x158>)
   1df16:	f008 fb00 	bl	2651a <z_log_minimal_printk>
		k_panic();
   1df1a:	4040      	eors	r0, r0
   1df1c:	f380 8811 	msr	BASEPRI, r0
   1df20:	f04f 0004 	mov.w	r0, #4
   1df24:	df02      	svc	2
		return -ENOMEM;
   1df26:	f06f 000b 	mvn.w	r0, #11
   1df2a:	e7a1      	b.n	1de70 <hci_driver_open+0x2c>
   1df2c:	481c      	ldr	r0, [pc, #112]	; (1dfa0 <hci_driver_open+0x15c>)
   1df2e:	f00b fc72 	bl	29816 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1df32:	b930      	cbnz	r0, 1df42 <hci_driver_open+0xfe>
		BT_ERR("Entropy source device not ready");
   1df34:	481b      	ldr	r0, [pc, #108]	; (1dfa4 <hci_driver_open+0x160>)
   1df36:	2145      	movs	r1, #69	; 0x45
   1df38:	f008 faef 	bl	2651a <z_log_minimal_printk>
		return -ENODEV;
   1df3c:	f06f 0012 	mvn.w	r0, #18
   1df40:	e796      	b.n	1de70 <hci_driver_open+0x2c>
	sdc_rand_source_t rand_functions = {
   1df42:	4b19      	ldr	r3, [pc, #100]	; (1dfa8 <hci_driver_open+0x164>)
   1df44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1df48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1df4c:	4620      	mov	r0, r4
   1df4e:	f7e7 fbb9 	bl	56c4 <sdc_rand_source_register>
	if (err) {
   1df52:	4602      	mov	r2, r0
   1df54:	b130      	cbz	r0, 1df64 <hci_driver_open+0x120>
		BT_ERR("Failed to register rand source (%d)", err);
   1df56:	4815      	ldr	r0, [pc, #84]	; (1dfac <hci_driver_open+0x168>)
   1df58:	2145      	movs	r1, #69	; 0x45
   1df5a:	f008 fade 	bl	2651a <z_log_minimal_printk>
		return -EINVAL;
   1df5e:	f06f 0015 	mvn.w	r0, #21
   1df62:	e785      	b.n	1de70 <hci_driver_open+0x2c>
	k_work_init(&receive_work, receive_work_handler);
   1df64:	4912      	ldr	r1, [pc, #72]	; (1dfb0 <hci_driver_open+0x16c>)
   1df66:	4813      	ldr	r0, [pc, #76]	; (1dfb4 <hci_driver_open+0x170>)
   1df68:	f002 ff86 	bl	20e78 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1df6c:	f04f 30ff 	mov.w	r0, #4294967295
   1df70:	f04f 31ff 	mov.w	r1, #4294967295
   1df74:	f7ff ff04 	bl	1dd80 <multithreading_lock_acquire>
	if (!err) {
   1df78:	4604      	mov	r4, r0
   1df7a:	b930      	cbnz	r0, 1df8a <hci_driver_open+0x146>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   1df7c:	490e      	ldr	r1, [pc, #56]	; (1dfb8 <hci_driver_open+0x174>)
   1df7e:	480f      	ldr	r0, [pc, #60]	; (1dfbc <hci_driver_open+0x178>)
   1df80:	f7e7 fa66 	bl	5450 <sdc_enable>
   1df84:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1df86:	f7ff ff03 	bl	1dd90 <multithreading_lock_release>
	if (err < 0) {
   1df8a:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1df8e:	e76f      	b.n	1de70 <hci_driver_open+0x2c>
   1df90:	0002d348 	.word	0x0002d348
   1df94:	0002d36f 	.word	0x0002d36f
   1df98:	02031b1b 	.word	0x02031b1b
   1df9c:	0002d377 	.word	0x0002d377
   1dfa0:	00029d14 	.word	0x00029d14
   1dfa4:	0002d39e 	.word	0x0002d39e
   1dfa8:	0002a120 	.word	0x0002a120
   1dfac:	0002d3c3 	.word	0x0002d3c3
   1dfb0:	000295ef 	.word	0x000295ef
   1dfb4:	200027e8 	.word	0x200027e8
   1dfb8:	200034fe 	.word	0x200034fe
   1dfbc:	0001e0bd 	.word	0x0001e0bd

0001dfc0 <rand_prio_low_vector_get>:
{
   1dfc0:	b538      	push	{r3, r4, r5, lr}
   1dfc2:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1dfc4:	480d      	ldr	r0, [pc, #52]	; (1dffc <rand_prio_low_vector_get+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1dfc6:	6883      	ldr	r3, [r0, #8]
   1dfc8:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1dfca:	460a      	mov	r2, r1
   1dfcc:	b19d      	cbz	r5, 1dff6 <rand_prio_low_vector_get+0x36>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1dfce:	4621      	mov	r1, r4
   1dfd0:	2300      	movs	r3, #0
   1dfd2:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1dfd4:	1e04      	subs	r4, r0, #0
   1dfd6:	da0a      	bge.n	1dfee <rand_prio_low_vector_get+0x2e>
   1dfd8:	4909      	ldr	r1, [pc, #36]	; (1e000 <rand_prio_low_vector_get+0x40>)
   1dfda:	480a      	ldr	r0, [pc, #40]	; (1e004 <rand_prio_low_vector_get+0x44>)
   1dfdc:	f240 12c9 	movw	r2, #457	; 0x1c9
   1dfe0:	f008 fa8d 	bl	264fe <assert_print>
   1dfe4:	4806      	ldr	r0, [pc, #24]	; (1e000 <rand_prio_low_vector_get+0x40>)
   1dfe6:	f240 11c9 	movw	r1, #457	; 0x1c9
   1dfea:	f008 fa81 	bl	264f0 <assert_post_action>
	return ret >= 0 ? ret : 0;
   1dfee:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1dff2:	b2c0      	uxtb	r0, r0
   1dff4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1dff6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1dffa:	e7ed      	b.n	1dfd8 <rand_prio_low_vector_get+0x18>
   1dffc:	00029d14 	.word	0x00029d14
   1e000:	0002d30f 	.word	0x0002d30f
   1e004:	0002aa75 	.word	0x0002aa75

0001e008 <event_packet_process.constprop.0>:
static void event_packet_process(uint8_t *hci_buf)
   1e008:	b570      	push	{r4, r5, r6, lr}
	switch (hdr->evt) {
   1e00a:	4e16      	ldr	r6, [pc, #88]	; (1e064 <event_packet_process.constprop.0+0x5c>)
   1e00c:	7830      	ldrb	r0, [r6, #0]
   1e00e:	283e      	cmp	r0, #62	; 0x3e
   1e010:	d012      	beq.n	1e038 <event_packet_process.constprop.0+0x30>
   1e012:	28ff      	cmp	r0, #255	; 0xff
   1e014:	d017      	beq.n	1e046 <event_packet_process.constprop.0+0x3e>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e016:	f04f 32ff 	mov.w	r2, #4294967295
   1e01a:	f04f 33ff 	mov.w	r3, #4294967295
		switch (subevent) {
   1e01e:	2400      	movs	r4, #0
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e020:	4621      	mov	r1, r4
   1e022:	f7f7 f801 	bl	15028 <bt_buf_get_evt>
	if (!evt_buf) {
   1e026:	4605      	mov	r5, r0
   1e028:	b980      	cbnz	r0, 1e04c <event_packet_process.constprop.0+0x44>
		if (discardable) {
   1e02a:	b9d4      	cbnz	r4, 1e062 <event_packet_process.constprop.0+0x5a>
}
   1e02c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("No event buffer available");
   1e030:	480d      	ldr	r0, [pc, #52]	; (1e068 <event_packet_process.constprop.0+0x60>)
   1e032:	2145      	movs	r1, #69	; 0x45
   1e034:	f008 ba71 	b.w	2651a <z_log_minimal_printk>
		switch (me->subevent) {
   1e038:	78b3      	ldrb	r3, [r6, #2]
   1e03a:	2b02      	cmp	r3, #2
		switch (subevent) {
   1e03c:	d1eb      	bne.n	1e016 <event_packet_process.constprop.0+0xe>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e03e:	2200      	movs	r2, #0
   1e040:	2300      	movs	r3, #0
		switch (subevent) {
   1e042:	2401      	movs	r4, #1
   1e044:	e7ec      	b.n	1e020 <event_packet_process.constprop.0+0x18>
   1e046:	78b3      	ldrb	r3, [r6, #2]
   1e048:	2b80      	cmp	r3, #128	; 0x80
   1e04a:	e7f7      	b.n	1e03c <event_packet_process.constprop.0+0x34>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1e04c:	7872      	ldrb	r2, [r6, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e04e:	4905      	ldr	r1, [pc, #20]	; (1e064 <event_packet_process.constprop.0+0x5c>)
   1e050:	3202      	adds	r2, #2
   1e052:	3008      	adds	r0, #8
   1e054:	f00b f958 	bl	29308 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1e058:	4628      	mov	r0, r5
}
   1e05a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_recv(evt_buf);
   1e05e:	f7f7 bfff 	b.w	16060 <bt_recv>
}
   1e062:	bd70      	pop	{r4, r5, r6, pc}
   1e064:	200034b5 	.word	0x200034b5
   1e068:	0002d3ec 	.word	0x0002d3ec

0001e06c <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1e06c:	4901      	ldr	r1, [pc, #4]	; (1e074 <receive_signal_raise+0x8>)
   1e06e:	4802      	ldr	r0, [pc, #8]	; (1e078 <receive_signal_raise+0xc>)
   1e070:	f00b bcb5 	b.w	299de <k_work_submit_to_queue>
   1e074:	200027e8 	.word	0x200027e8
   1e078:	20001cd0 	.word	0x20001cd0

0001e07c <data_packet_process.constprop.0>:
static void data_packet_process(uint8_t *hci_buf)
   1e07c:	b510      	push	{r4, lr}
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1e07e:	f04f 32ff 	mov.w	r2, #4294967295
   1e082:	f04f 33ff 	mov.w	r3, #4294967295
   1e086:	2003      	movs	r0, #3
   1e088:	f7f6 ff8c 	bl	14fa4 <bt_buf_get_rx>
	if (!data_buf) {
   1e08c:	4604      	mov	r4, r0
   1e08e:	b928      	cbnz	r0, 1e09c <data_packet_process.constprop.0+0x20>
}
   1e090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("No data buffer available");
   1e094:	4807      	ldr	r0, [pc, #28]	; (1e0b4 <data_packet_process.constprop.0+0x38>)
   1e096:	2145      	movs	r1, #69	; 0x45
   1e098:	f008 ba3f 	b.w	2651a <z_log_minimal_printk>
	len = sys_le16_to_cpu(hdr->len);
   1e09c:	4906      	ldr	r1, [pc, #24]	; (1e0b8 <data_packet_process.constprop.0+0x3c>)
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1e09e:	884a      	ldrh	r2, [r1, #2]
   1e0a0:	3008      	adds	r0, #8
   1e0a2:	3204      	adds	r2, #4
   1e0a4:	f00b f930 	bl	29308 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1e0a8:	4620      	mov	r0, r4
}
   1e0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_recv(data_buf);
   1e0ae:	f7f7 bfd7 	b.w	16060 <bt_recv>
   1e0b2:	bf00      	nop
   1e0b4:	0002d40b 	.word	0x0002d40b
   1e0b8:	200034b5 	.word	0x200034b5

0001e0bc <hci_driver_receive_process>:
{
   1e0bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e0be:	f04f 30ff 	mov.w	r0, #4294967295
   1e0c2:	f04f 31ff 	mov.w	r1, #4294967295
   1e0c6:	f7ff fe5b 	bl	1dd80 <multithreading_lock_acquire>
	if (!errcode) {
   1e0ca:	b1c8      	cbz	r0, 1e100 <hci_driver_receive_process+0x44>
		return false;
   1e0cc:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e0ce:	f04f 30ff 	mov.w	r0, #4294967295
   1e0d2:	f04f 31ff 	mov.w	r1, #4294967295
   1e0d6:	f7ff fe53 	bl	1dd80 <multithreading_lock_acquire>
	if (!errcode) {
   1e0da:	b1e8      	cbz	r0, 1e118 <hci_driver_receive_process+0x5c>
		return false;
   1e0dc:	2500      	movs	r5, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e0de:	f04f 30ff 	mov.w	r0, #4294967295
   1e0e2:	f04f 31ff 	mov.w	r1, #4294967295
   1e0e6:	f7ff fe4b 	bl	1dd80 <multithreading_lock_acquire>
	if (!errcode) {
   1e0ea:	b308      	cbz	r0, 1e130 <hci_driver_receive_process+0x74>
		return false;
   1e0ec:	2400      	movs	r4, #0
	if (received_evt || received_data || received_msg) {
   1e0ee:	b916      	cbnz	r6, 1e0f6 <hci_driver_receive_process+0x3a>
   1e0f0:	b90d      	cbnz	r5, 1e0f6 <hci_driver_receive_process+0x3a>
   1e0f2:	2c00      	cmp	r4, #0
   1e0f4:	d03f      	beq.n	1e176 <hci_driver_receive_process+0xba>
}
   1e0f6:	b002      	add	sp, #8
   1e0f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   1e0fc:	f7ff bfb6 	b.w	1e06c <receive_signal_raise>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1e100:	481e      	ldr	r0, [pc, #120]	; (1e17c <hci_driver_receive_process+0xc0>)
   1e102:	f000 fb3f 	bl	1e784 <hci_internal_evt_get>
   1e106:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1e108:	f7ff fe42 	bl	1dd90 <multithreading_lock_release>
	if (errcode) {
   1e10c:	2c00      	cmp	r4, #0
   1e10e:	d1dd      	bne.n	1e0cc <hci_driver_receive_process+0x10>
	event_packet_process(p_hci_buffer);
   1e110:	f7ff ff7a 	bl	1e008 <event_packet_process.constprop.0>
	return true;
   1e114:	2601      	movs	r6, #1
   1e116:	e7da      	b.n	1e0ce <hci_driver_receive_process+0x12>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1e118:	4818      	ldr	r0, [pc, #96]	; (1e17c <hci_driver_receive_process+0xc0>)
   1e11a:	f7ef ff60 	bl	dfde <sdc_hci_data_get>
   1e11e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1e120:	f7ff fe36 	bl	1dd90 <multithreading_lock_release>
	if (errcode) {
   1e124:	2c00      	cmp	r4, #0
   1e126:	d1d9      	bne.n	1e0dc <hci_driver_receive_process+0x20>
	data_packet_process(p_hci_buffer);
   1e128:	f7ff ffa8 	bl	1e07c <data_packet_process.constprop.0>
	return true;
   1e12c:	2501      	movs	r5, #1
   1e12e:	e7d6      	b.n	1e0de <hci_driver_receive_process+0x22>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1e130:	4812      	ldr	r0, [pc, #72]	; (1e17c <hci_driver_receive_process+0xc0>)
   1e132:	f10d 0107 	add.w	r1, sp, #7
   1e136:	f000 fb37 	bl	1e7a8 <hci_internal_msg_get>
   1e13a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1e13c:	f7ff fe28 	bl	1dd90 <multithreading_lock_release>
	if (errcode) {
   1e140:	2c00      	cmp	r4, #0
   1e142:	d1d3      	bne.n	1e0ec <hci_driver_receive_process+0x30>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1e144:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e148:	2b04      	cmp	r3, #4
   1e14a:	d103      	bne.n	1e154 <hci_driver_receive_process+0x98>
		event_packet_process(p_hci_buffer);
   1e14c:	f7ff ff5c 	bl	1e008 <event_packet_process.constprop.0>
	return true;
   1e150:	2401      	movs	r4, #1
   1e152:	e7cc      	b.n	1e0ee <hci_driver_receive_process+0x32>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1e154:	2b02      	cmp	r3, #2
   1e156:	d102      	bne.n	1e15e <hci_driver_receive_process+0xa2>
		data_packet_process(p_hci_buffer);
   1e158:	f7ff ff90 	bl	1e07c <data_packet_process.constprop.0>
   1e15c:	e7f8      	b.n	1e150 <hci_driver_receive_process+0x94>
		__ASSERT(false, "sdc_hci_msg_type_t has changed. This if-else needs a new branch");
   1e15e:	4908      	ldr	r1, [pc, #32]	; (1e180 <hci_driver_receive_process+0xc4>)
   1e160:	4808      	ldr	r0, [pc, #32]	; (1e184 <hci_driver_receive_process+0xc8>)
   1e162:	f44f 72cd 	mov.w	r2, #410	; 0x19a
   1e166:	f008 f9ca 	bl	264fe <assert_print>
   1e16a:	4805      	ldr	r0, [pc, #20]	; (1e180 <hci_driver_receive_process+0xc4>)
   1e16c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
   1e170:	f008 f9be 	bl	264f0 <assert_post_action>
		return false;
   1e174:	e7bb      	b.n	1e0ee <hci_driver_receive_process+0x32>
}
   1e176:	b002      	add	sp, #8
   1e178:	bd70      	pop	{r4, r5, r6, pc}
   1e17a:	bf00      	nop
   1e17c:	200034b5 	.word	0x200034b5
   1e180:	0002d30f 	.word	0x0002d30f
   1e184:	0002aa75 	.word	0x0002aa75

0001e188 <rand_prio_high_vector_get>:
{
   1e188:	b538      	push	{r3, r4, r5, lr}
   1e18a:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   1e18c:	480d      	ldr	r0, [pc, #52]	; (1e1c4 <rand_prio_high_vector_get+0x3c>)
	if (unlikely(!api->get_entropy_isr)) {
   1e18e:	6883      	ldr	r3, [r0, #8]
   1e190:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1e192:	460a      	mov	r2, r1
   1e194:	b19d      	cbz	r5, 1e1be <rand_prio_high_vector_get+0x36>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1e196:	4621      	mov	r1, r4
   1e198:	2300      	movs	r3, #0
   1e19a:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1e19c:	1e04      	subs	r4, r0, #0
   1e19e:	da0a      	bge.n	1e1b6 <rand_prio_high_vector_get+0x2e>
   1e1a0:	4909      	ldr	r1, [pc, #36]	; (1e1c8 <rand_prio_high_vector_get+0x40>)
   1e1a2:	480a      	ldr	r0, [pc, #40]	; (1e1cc <rand_prio_high_vector_get+0x44>)
   1e1a4:	f240 12d1 	movw	r2, #465	; 0x1d1
   1e1a8:	f008 f9a9 	bl	264fe <assert_print>
   1e1ac:	4806      	ldr	r0, [pc, #24]	; (1e1c8 <rand_prio_high_vector_get+0x40>)
   1e1ae:	f240 11d1 	movw	r1, #465	; 0x1d1
   1e1b2:	f008 f99d 	bl	264f0 <assert_post_action>
	return ret >= 0 ? ret : 0;
   1e1b6:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1e1ba:	b2c0      	uxtb	r0, r0
   1e1bc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1e1be:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e1c2:	e7ed      	b.n	1e1a0 <rand_prio_high_vector_get+0x18>
   1e1c4:	00029d14 	.word	0x00029d14
   1e1c8:	0002d30f 	.word	0x0002d30f
   1e1cc:	0002aa75 	.word	0x0002aa75

0001e1d0 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1e1d0:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1e1d2:	4c87      	ldr	r4, [pc, #540]	; (1e3f0 <hci_internal_cmd_put+0x220>)
   1e1d4:	7823      	ldrb	r3, [r4, #0]
   1e1d6:	2b00      	cmp	r3, #0
   1e1d8:	f040 82ce 	bne.w	1e778 <hci_internal_cmd_put+0x5a8>
	return ((uint16_t)src[1] << 8) | src[0];
   1e1dc:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   1e1de:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1e1e2:	b22b      	sxth	r3, r5
   1e1e4:	ea4f 2295 	mov.w	r2, r5, lsr #10
   1e1e8:	d20d      	bcs.n	1e206 <hci_internal_cmd_put+0x36>
   1e1ea:	b17a      	cbz	r2, 1e20c <hci_internal_cmd_put+0x3c>
   1e1ec:	3a01      	subs	r2, #1
   1e1ee:	2a07      	cmp	r2, #7
   1e1f0:	d80c      	bhi.n	1e20c <hci_internal_cmd_put+0x3c>
   1e1f2:	e8df f012 	tbh	[pc, r2, lsl #1]
   1e1f6:	000d      	.short	0x000d
   1e1f8:	0029000b 	.word	0x0029000b
   1e1fc:	000b005d 	.word	0x000b005d
   1e200:	000b000b 	.word	0x000b000b
   1e204:	0101      	.short	0x0101
   1e206:	2a3f      	cmp	r2, #63	; 0x3f
   1e208:	f000 822b 	beq.w	1e662 <hci_internal_cmd_put+0x492>
	switch (opcode)	{
   1e20c:	2001      	movs	r0, #1
   1e20e:	e00e      	b.n	1e22e <hci_internal_cmd_put+0x5e>
	switch (opcode)	{
   1e210:	f240 4206 	movw	r2, #1030	; 0x406
   1e214:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e216:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1e21a:	d006      	beq.n	1e22a <hci_internal_cmd_put+0x5a>
   1e21c:	f240 421d 	movw	r2, #1053	; 0x41d
   1e220:	4293      	cmp	r3, r2
   1e222:	d1f3      	bne.n	1e20c <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1e224:	f7f0 f80e 	bl	e244 <sdc_hci_cmd_lc_read_remote_version_information>
   1e228:	e001      	b.n	1e22e <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1e22a:	f7f0 f809 	bl	e240 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e22e:	230f      	movs	r3, #15
   1e230:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e232:	2304      	movs	r3, #4
   1e234:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1e236:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1e238:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1e23a:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1e23c:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1e240:	2301      	movs	r3, #1
   1e242:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1e244:	2000      	movs	r0, #0
}
   1e246:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   1e248:	f640 4263 	movw	r2, #3171	; 0xc63
   1e24c:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e24e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1e252:	d025      	beq.n	1e2a0 <hci_internal_cmd_put+0xd0>
   1e254:	dc0f      	bgt.n	1e276 <hci_internal_cmd_put+0xa6>
   1e256:	f640 4203 	movw	r2, #3075	; 0xc03
   1e25a:	4293      	cmp	r3, r2
   1e25c:	d018      	beq.n	1e290 <hci_internal_cmd_put+0xc0>
   1e25e:	f640 422d 	movw	r2, #3117	; 0xc2d
   1e262:	4293      	cmp	r3, r2
   1e264:	d017      	beq.n	1e296 <hci_internal_cmd_put+0xc6>
   1e266:	f640 4201 	movw	r2, #3073	; 0xc01
   1e26a:	4293      	cmp	r3, r2
   1e26c:	d1ce      	bne.n	1e20c <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1e26e:	f7ef fee7 	bl	e040 <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1e272:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1e274:	e0b8      	b.n	1e3e8 <hci_internal_cmd_put+0x218>
	switch (opcode)	{
   1e276:	f640 427b 	movw	r2, #3195	; 0xc7b
   1e27a:	4293      	cmp	r3, r2
   1e27c:	d013      	beq.n	1e2a6 <hci_internal_cmd_put+0xd6>
   1e27e:	f640 427c 	movw	r2, #3196	; 0xc7c
   1e282:	4293      	cmp	r3, r2
   1e284:	d1c2      	bne.n	1e20c <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1e286:	495b      	ldr	r1, [pc, #364]	; (1e3f4 <hci_internal_cmd_put+0x224>)
   1e288:	f7ef fee4 	bl	e054 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1e28c:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e28e:	e0ab      	b.n	1e3e8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_cb_reset();
   1e290:	f7e7 fb06 	bl	58a0 <sdc_hci_cmd_cb_reset>
   1e294:	e7ed      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1e296:	4957      	ldr	r1, [pc, #348]	; (1e3f4 <hci_internal_cmd_put+0x224>)
   1e298:	f7ef fed0 	bl	e03c <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1e29c:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e29e:	e0a3      	b.n	1e3e8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1e2a0:	f7ef fed3 	bl	e04a <sdc_hci_cmd_cb_set_event_mask_page_2>
   1e2a4:	e7e5      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1e2a6:	4953      	ldr	r1, [pc, #332]	; (1e3f4 <hci_internal_cmd_put+0x224>)
   1e2a8:	f7ef fec6 	bl	e038 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1e2ac:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e2ae:	e09b      	b.n	1e3e8 <hci_internal_cmd_put+0x218>
	switch (opcode)	{
   1e2b0:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   1e2b4:	3b01      	subs	r3, #1
   1e2b6:	2b08      	cmp	r3, #8
   1e2b8:	d8a8      	bhi.n	1e20c <hci_internal_cmd_put+0x3c>
   1e2ba:	a201      	add	r2, pc, #4	; (adr r2, 1e2c0 <hci_internal_cmd_put+0xf0>)
   1e2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e2c0:	0001e2e5 	.word	0x0001e2e5
   1e2c4:	0001e2ef 	.word	0x0001e2ef
   1e2c8:	0001e3c9 	.word	0x0001e3c9
   1e2cc:	0001e20d 	.word	0x0001e20d
   1e2d0:	0001e20d 	.word	0x0001e20d
   1e2d4:	0001e20d 	.word	0x0001e20d
   1e2d8:	0001e20d 	.word	0x0001e20d
   1e2dc:	0001e20d 	.word	0x0001e20d
   1e2e0:	0001e3e1 	.word	0x0001e3e1
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1e2e4:	4843      	ldr	r0, [pc, #268]	; (1e3f4 <hci_internal_cmd_put+0x224>)
   1e2e6:	f7ef ff6e 	bl	e1c6 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1e2ea:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1e2ec:	e07c      	b.n	1e3e8 <hci_internal_cmd_put+0x218>
	memset(cmds, 0, sizeof(*cmds));
   1e2ee:	4841      	ldr	r0, [pc, #260]	; (1e3f4 <hci_internal_cmd_put+0x224>)
   1e2f0:	222f      	movs	r2, #47	; 0x2f
   1e2f2:	2100      	movs	r1, #0
   1e2f4:	f008 ffa2 	bl	2723c <memset>
	cmds->hci_disconnect = 1;
   1e2f8:	79e3      	ldrb	r3, [r4, #7]
   1e2fa:	f043 0320 	orr.w	r3, r3, #32
   1e2fe:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1e300:	7a63      	ldrb	r3, [r4, #9]
   1e302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e306:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1e308:	7b23      	ldrb	r3, [r4, #12]
   1e30a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e30e:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1e310:	7c63      	ldrb	r3, [r4, #17]
   1e312:	f043 0304 	orr.w	r3, r3, #4
   1e316:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1e318:	7d63      	ldrb	r3, [r4, #21]
   1e31a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1e31e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1e322:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1e324:	7da3      	ldrb	r3, [r4, #22]
   1e326:	f043 0302 	orr.w	r3, r3, #2
   1e32a:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1e32c:	7f63      	ldrb	r3, [r4, #29]
   1e32e:	f043 0304 	orr.w	r3, r3, #4
   1e332:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1e334:	f894 3020 	ldrb.w	r3, [r4, #32]
   1e338:	f063 0308 	orn	r3, r3, #8
   1e33c:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1e340:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1e344:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1e348:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1e34c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1e350:	f063 030c 	orn	r3, r3, #12
   1e354:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1e358:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1e35c:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1e360:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1e364:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1e368:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1e36c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1e370:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1e374:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1e378:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1e37c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e380:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1e384:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1e388:	f023 0307 	bic.w	r3, r3, #7
   1e38c:	f043 0307 	orr.w	r3, r3, #7
   1e390:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1e394:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1e398:	f063 0307 	orn	r3, r3, #7
   1e39c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1e3a0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1e3a4:	f043 0301 	orr.w	r3, r3, #1
   1e3a8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1e3ac:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1e3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e3b4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1e3b8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1e3bc:	f043 0304 	orr.w	r3, r3, #4
   1e3c0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   1e3c4:	2344      	movs	r3, #68	; 0x44
   1e3c6:	e0e2      	b.n	1e58e <hci_internal_cmd_put+0x3be>
	memset(features, 0, sizeof(*features));
   1e3c8:	480a      	ldr	r0, [pc, #40]	; (1e3f4 <hci_internal_cmd_put+0x224>)
   1e3ca:	2208      	movs	r2, #8
   1e3cc:	2100      	movs	r1, #0
   1e3ce:	f008 ff35 	bl	2723c <memset>
	features->bdedr_not_supported = 1;
   1e3d2:	7ae3      	ldrb	r3, [r4, #11]
   1e3d4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1e3d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1e3dc:	72e3      	strb	r3, [r4, #11]
   1e3de:	e0d5      	b.n	1e58c <hci_internal_cmd_put+0x3bc>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1e3e0:	4804      	ldr	r0, [pc, #16]	; (1e3f4 <hci_internal_cmd_put+0x224>)
   1e3e2:	f7ef feee 	bl	e1c2 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e3e6:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1e3e8:	2801      	cmp	r0, #1
   1e3ea:	f040 80d1 	bne.w	1e590 <hci_internal_cmd_put+0x3c0>
   1e3ee:	e71e      	b.n	1e22e <hci_internal_cmd_put+0x5e>
   1e3f0:	20003c12 	.word	0x20003c12
   1e3f4:	20003c19 	.word	0x20003c19
	switch (opcode)	{
   1e3f8:	f242 024b 	movw	r2, #8267	; 0x204b
   1e3fc:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e3fe:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1e402:	f300 80a3 	bgt.w	1e54c <hci_internal_cmd_put+0x37c>
   1e406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   1e40a:	f77f aeff 	ble.w	1e20c <hci_internal_cmd_put+0x3c>
   1e40e:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   1e412:	3b01      	subs	r3, #1
   1e414:	2b4a      	cmp	r3, #74	; 0x4a
   1e416:	f63f aef9 	bhi.w	1e20c <hci_internal_cmd_put+0x3c>
   1e41a:	a201      	add	r2, pc, #4	; (adr r2, 1e420 <hci_internal_cmd_put+0x250>)
   1e41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e420:	0001e55d 	.word	0x0001e55d
   1e424:	0001e563 	.word	0x0001e563
   1e428:	0001e56b 	.word	0x0001e56b
   1e42c:	0001e20d 	.word	0x0001e20d
   1e430:	0001e5a1 	.word	0x0001e5a1
   1e434:	0001e5a7 	.word	0x0001e5a7
   1e438:	0001e5ad 	.word	0x0001e5ad
   1e43c:	0001e5b7 	.word	0x0001e5b7
   1e440:	0001e5bd 	.word	0x0001e5bd
   1e444:	0001e5c3 	.word	0x0001e5c3
   1e448:	0001e20d 	.word	0x0001e20d
   1e44c:	0001e20d 	.word	0x0001e20d
   1e450:	0001e20d 	.word	0x0001e20d
   1e454:	0001e20d 	.word	0x0001e20d
   1e458:	0001e5c9 	.word	0x0001e5c9
   1e45c:	0001e5d1 	.word	0x0001e5d1
   1e460:	0001e5d7 	.word	0x0001e5d7
   1e464:	0001e5dd 	.word	0x0001e5dd
   1e468:	0001e20d 	.word	0x0001e20d
   1e46c:	0001e20d 	.word	0x0001e20d
   1e470:	0001e5e3 	.word	0x0001e5e3
   1e474:	0001e5ed 	.word	0x0001e5ed
   1e478:	0001e5f3 	.word	0x0001e5f3
   1e47c:	0001e5fd 	.word	0x0001e5fd
   1e480:	0001e20d 	.word	0x0001e20d
   1e484:	0001e605 	.word	0x0001e605
   1e488:	0001e60d 	.word	0x0001e60d
   1e48c:	0001e615 	.word	0x0001e615
   1e490:	0001e20d 	.word	0x0001e20d
   1e494:	0001e20d 	.word	0x0001e20d
   1e498:	0001e20d 	.word	0x0001e20d
   1e49c:	0001e20d 	.word	0x0001e20d
   1e4a0:	0001e20d 	.word	0x0001e20d
   1e4a4:	0001e61d 	.word	0x0001e61d
   1e4a8:	0001e625 	.word	0x0001e625
   1e4ac:	0001e62d 	.word	0x0001e62d
   1e4b0:	0001e633 	.word	0x0001e633
   1e4b4:	0001e639 	.word	0x0001e639
   1e4b8:	0001e20d 	.word	0x0001e20d
   1e4bc:	0001e20d 	.word	0x0001e20d
   1e4c0:	0001e20d 	.word	0x0001e20d
   1e4c4:	0001e20d 	.word	0x0001e20d
   1e4c8:	0001e20d 	.word	0x0001e20d
   1e4cc:	0001e20d 	.word	0x0001e20d
   1e4d0:	0001e20d 	.word	0x0001e20d
   1e4d4:	0001e20d 	.word	0x0001e20d
   1e4d8:	0001e63f 	.word	0x0001e63f
   1e4dc:	0001e647 	.word	0x0001e647
   1e4e0:	0001e64f 	.word	0x0001e64f
   1e4e4:	0001e655 	.word	0x0001e655
   1e4e8:	0001e20d 	.word	0x0001e20d
   1e4ec:	0001e20d 	.word	0x0001e20d
   1e4f0:	0001e20d 	.word	0x0001e20d
   1e4f4:	0001e20d 	.word	0x0001e20d
   1e4f8:	0001e20d 	.word	0x0001e20d
   1e4fc:	0001e20d 	.word	0x0001e20d
   1e500:	0001e20d 	.word	0x0001e20d
   1e504:	0001e20d 	.word	0x0001e20d
   1e508:	0001e20d 	.word	0x0001e20d
   1e50c:	0001e20d 	.word	0x0001e20d
   1e510:	0001e20d 	.word	0x0001e20d
   1e514:	0001e20d 	.word	0x0001e20d
   1e518:	0001e20d 	.word	0x0001e20d
   1e51c:	0001e20d 	.word	0x0001e20d
   1e520:	0001e20d 	.word	0x0001e20d
   1e524:	0001e20d 	.word	0x0001e20d
   1e528:	0001e20d 	.word	0x0001e20d
   1e52c:	0001e20d 	.word	0x0001e20d
   1e530:	0001e20d 	.word	0x0001e20d
   1e534:	0001e20d 	.word	0x0001e20d
   1e538:	0001e20d 	.word	0x0001e20d
   1e53c:	0001e20d 	.word	0x0001e20d
   1e540:	0001e20d 	.word	0x0001e20d
   1e544:	0001e20d 	.word	0x0001e20d
   1e548:	0001e65b 	.word	0x0001e65b
   1e54c:	f242 025e 	movw	r2, #8286	; 0x205e
   1e550:	4293      	cmp	r3, r2
   1e552:	f47f ae5b 	bne.w	1e20c <hci_internal_cmd_put+0x3c>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1e556:	f00b f873 	bl	29640 <hci_cmd_le_generate_dhkey_v2>
   1e55a:	e68a      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1e55c:	f7ef fe63 	bl	e226 <sdc_hci_cmd_le_set_event_mask>
   1e560:	e687      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e562:	4887      	ldr	r0, [pc, #540]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e564:	f7ef fe43 	bl	e1ee <sdc_hci_cmd_le_read_buffer_size>
   1e568:	e698      	b.n	1e29c <hci_internal_cmd_put+0xcc>
	memset(features, 0, sizeof(*features));
   1e56a:	4885      	ldr	r0, [pc, #532]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e56c:	2205      	movs	r2, #5
   1e56e:	2100      	movs	r1, #0
   1e570:	f008 fe64 	bl	2723c <memset>
	features->le_encryption = 1;
   1e574:	79e3      	ldrb	r3, [r4, #7]
   1e576:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1e57a:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1e57e:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1e580:	7a23      	ldrb	r3, [r4, #8]
   1e582:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1e586:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1e58a:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1e58c:	230c      	movs	r3, #12
		return 0;
   1e58e:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e590:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1e592:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1e594:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e596:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1e598:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1e59a:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1e59c:	71a0      	strb	r0, [r4, #6]
}
   1e59e:	e64f      	b.n	1e240 <hci_internal_cmd_put+0x70>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1e5a0:	f7ef fe48 	bl	e234 <sdc_hci_cmd_le_set_random_address>
   1e5a4:	e665      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1e5a6:	f7ef fe38 	bl	e21a <sdc_hci_cmd_le_set_adv_params>
   1e5aa:	e662      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1e5ac:	4874      	ldr	r0, [pc, #464]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e5ae:	f7ef fe1c 	bl	e1ea <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1e5b2:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1e5b4:	e718      	b.n	1e3e8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1e5b6:	f7ef fe2c 	bl	e212 <sdc_hci_cmd_le_set_adv_data>
   1e5ba:	e65a      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1e5bc:	f7ef fe3c 	bl	e238 <sdc_hci_cmd_le_set_scan_response_data>
   1e5c0:	e657      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1e5c2:	f7ef fe28 	bl	e216 <sdc_hci_cmd_le_set_adv_enable>
   1e5c6:	e654      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1e5c8:	486d      	ldr	r0, [pc, #436]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e5ca:	f7ef fe14 	bl	e1f6 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1e5ce:	e7f0      	b.n	1e5b2 <hci_internal_cmd_put+0x3e2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1e5d0:	f7ef fdfd 	bl	e1ce <sdc_hci_cmd_le_clear_filter_accept_list>
   1e5d4:	e64d      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1e5d6:	f7ef fdf8 	bl	e1ca <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1e5da:	e64a      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1e5dc:	f7ef fe17 	bl	e20e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1e5e0:	e647      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1e5e2:	4967      	ldr	r1, [pc, #412]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e5e4:	f7ef fe05 	bl	e1f2 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1e5e8:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1e5ea:	e6fd      	b.n	1e3e8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1e5ec:	f7ef fe09 	bl	e202 <sdc_hci_cmd_le_read_remote_features>
   1e5f0:	e61d      	b.n	1e22e <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1e5f2:	4963      	ldr	r1, [pc, #396]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e5f4:	f7ef fded 	bl	e1d2 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1e5f8:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1e5fa:	e6f5      	b.n	1e3e8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1e5fc:	4860      	ldr	r0, [pc, #384]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e5fe:	f7ef fdf2 	bl	e1e6 <sdc_hci_cmd_le_rand>
   1e602:	e672      	b.n	1e2ea <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1e604:	495e      	ldr	r1, [pc, #376]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e606:	f7ef fdea 	bl	e1de <sdc_hci_cmd_le_long_term_key_request_reply>
   1e60a:	e63f      	b.n	1e28c <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1e60c:	495c      	ldr	r1, [pc, #368]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e60e:	f7ef fde2 	bl	e1d6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1e612:	e63b      	b.n	1e28c <hci_internal_cmd_put+0xbc>
	*buf = states1;
   1e614:	238f      	movs	r3, #143	; 0x8f
   1e616:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1e618:	23c0      	movs	r3, #192	; 0xc0
   1e61a:	e6df      	b.n	1e3dc <hci_internal_cmd_put+0x20c>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1e61c:	4958      	ldr	r1, [pc, #352]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e61e:	f7ef fdfe 	bl	e21e <sdc_hci_cmd_le_set_data_length>
   1e622:	e633      	b.n	1e28c <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1e624:	4856      	ldr	r0, [pc, #344]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e626:	f7ef fdee 	bl	e206 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1e62a:	e63f      	b.n	1e2ac <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1e62c:	f7ef fe06 	bl	e23c <sdc_hci_cmd_le_write_suggested_default_data_length>
   1e630:	e61f      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return hci_cmd_le_read_local_p256_public_key();
   1e632:	f000 fa4f 	bl	1ead4 <hci_cmd_le_read_local_p256_public_key>
   1e636:	e5fa      	b.n	1e22e <hci_internal_cmd_put+0x5e>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1e638:	f00a ffff 	bl	2963a <hci_cmd_le_generate_dhkey>
   1e63c:	e5f7      	b.n	1e22e <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1e63e:	4850      	ldr	r0, [pc, #320]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e640:	f7ef fddb 	bl	e1fa <sdc_hci_cmd_le_read_max_data_length>
   1e644:	e651      	b.n	1e2ea <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e646:	494e      	ldr	r1, [pc, #312]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e648:	f7ef fdd9 	bl	e1fe <sdc_hci_cmd_le_read_phy>
   1e64c:	e62e      	b.n	1e2ac <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1e64e:	f7ef fde8 	bl	e222 <sdc_hci_cmd_le_set_default_phy>
   1e652:	e60e      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1e654:	f7ef fdec 	bl	e230 <sdc_hci_cmd_le_set_phy>
   1e658:	e5e9      	b.n	1e22e <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e65a:	4849      	ldr	r0, [pc, #292]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e65c:	f7ef fdd5 	bl	e20a <sdc_hci_cmd_le_read_transmit_power>
   1e660:	e614      	b.n	1e28c <hci_internal_cmd_put+0xbc>
	switch (opcode)	{
   1e662:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1e666:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e668:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1e66c:	d820      	bhi.n	1e6b0 <hci_internal_cmd_put+0x4e0>
   1e66e:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1e672:	f43f adcb 	beq.w	1e20c <hci_internal_cmd_put+0x3c>
   1e676:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1e67a:	3b01      	subs	r3, #1
   1e67c:	2b09      	cmp	r3, #9
   1e67e:	f63f adc5 	bhi.w	1e20c <hci_internal_cmd_put+0x3c>
   1e682:	a201      	add	r2, pc, #4	; (adr r2, 1e688 <hci_internal_cmd_put+0x4b8>)
   1e684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e688:	0001e6f5 	.word	0x0001e6f5
   1e68c:	0001e6ff 	.word	0x0001e6ff
   1e690:	0001e20d 	.word	0x0001e20d
   1e694:	0001e20d 	.word	0x0001e20d
   1e698:	0001e20d 	.word	0x0001e20d
   1e69c:	0001e737 	.word	0x0001e737
   1e6a0:	0001e20d 	.word	0x0001e20d
   1e6a4:	0001e20d 	.word	0x0001e20d
   1e6a8:	0001e723 	.word	0x0001e723
   1e6ac:	0001e72d 	.word	0x0001e72d
   1e6b0:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1e6b4:	b29b      	uxth	r3, r3
   1e6b6:	2b09      	cmp	r3, #9
   1e6b8:	f63f ada8 	bhi.w	1e20c <hci_internal_cmd_put+0x3c>
   1e6bc:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1e6c0:	2b09      	cmp	r3, #9
   1e6c2:	f63f ada3 	bhi.w	1e20c <hci_internal_cmd_put+0x3c>
   1e6c6:	a201      	add	r2, pc, #4	; (adr r2, 1e6cc <hci_internal_cmd_put+0x4fc>)
   1e6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e6cc:	0001e73d 	.word	0x0001e73d
   1e6d0:	0001e755 	.word	0x0001e755
   1e6d4:	0001e75b 	.word	0x0001e75b
   1e6d8:	0001e761 	.word	0x0001e761
   1e6dc:	0001e767 	.word	0x0001e767
   1e6e0:	0001e76d 	.word	0x0001e76d
   1e6e4:	0001e20d 	.word	0x0001e20d
   1e6e8:	0001e20d 	.word	0x0001e20d
   1e6ec:	0001e20d 	.word	0x0001e20d
   1e6f0:	0001e773 	.word	0x0001e773
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1e6f4:	4822      	ldr	r0, [pc, #136]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e6f6:	f7e7 f8e7 	bl	58c8 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1e6fa:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1e6fc:	e674      	b.n	1e3e8 <hci_internal_cmd_put+0x218>
	memset(cmds, 0, sizeof(*cmds));
   1e6fe:	4820      	ldr	r0, [pc, #128]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e700:	2202      	movs	r2, #2
   1e702:	2100      	movs	r1, #0
   1e704:	f008 fd9a 	bl	2723c <memset>
	cmds->read_version_info = 1;
   1e708:	79e3      	ldrb	r3, [r4, #7]
   1e70a:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1e70e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1e712:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1e714:	7a23      	ldrb	r3, [r4, #8]
   1e716:	f023 0307 	bic.w	r3, r3, #7
   1e71a:	f043 0307 	orr.w	r3, r3, #7
   1e71e:	7223      	strb	r3, [r4, #8]
}
   1e720:	e650      	b.n	1e3c4 <hci_internal_cmd_put+0x1f4>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1e722:	4817      	ldr	r0, [pc, #92]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e724:	f7ef fcfc 	bl	e120 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1e728:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1e72a:	e65d      	b.n	1e3e8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1e72c:	4814      	ldr	r0, [pc, #80]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e72e:	f7ef fcaa 	bl	e086 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1e732:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1e734:	e658      	b.n	1e3e8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1e736:	f7ef fd42 	bl	e1be <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1e73a:	e59a      	b.n	1e272 <hci_internal_cmd_put+0xa2>
	memset(cmds, 0, sizeof(*cmds));
   1e73c:	4810      	ldr	r0, [pc, #64]	; (1e780 <hci_internal_cmd_put+0x5b0>)
   1e73e:	2202      	movs	r2, #2
   1e740:	2100      	movs	r1, #0
   1e742:	f008 fd7b 	bl	2723c <memset>
	cmds->read_supported_vs_commands = 1;
   1e746:	79e3      	ldrb	r3, [r4, #7]
   1e748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1e74c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1e750:	71e3      	strb	r3, [r4, #7]
}
   1e752:	e637      	b.n	1e3c4 <hci_internal_cmd_put+0x1f4>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1e754:	f7ef fc8c 	bl	e070 <sdc_hci_cmd_vs_llpm_mode_set>
   1e758:	e58b      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1e75a:	f7ef fc85 	bl	e068 <sdc_hci_cmd_vs_conn_update>
   1e75e:	e588      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1e760:	f7ef fc7a 	bl	e058 <sdc_hci_cmd_vs_conn_event_extend>
   1e764:	e585      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1e766:	f7ef fc89 	bl	e07c <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1e76a:	e582      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1e76c:	f7ef fc7e 	bl	e06c <sdc_hci_cmd_vs_event_length_set>
   1e770:	e57f      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1e772:	f7ef fc7f 	bl	e074 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1e776:	e57c      	b.n	1e272 <hci_internal_cmd_put+0xa2>
		return -NRF_EPERM;
   1e778:	f04f 30ff 	mov.w	r0, #4294967295
   1e77c:	e563      	b.n	1e246 <hci_internal_cmd_put+0x76>
   1e77e:	bf00      	nop
   1e780:	20003c19 	.word	0x20003c19

0001e784 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1e784:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1e786:	4c07      	ldr	r4, [pc, #28]	; (1e7a4 <hci_internal_evt_get+0x20>)
   1e788:	7823      	ldrb	r3, [r4, #0]
   1e78a:	b91b      	cbnz	r3, 1e794 <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1e78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1e790:	f7ef bc3d 	b.w	e00e <sdc_hci_evt_get>
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1e794:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1e796:	1c61      	adds	r1, r4, #1
   1e798:	3202      	adds	r2, #2
   1e79a:	f008 fd44 	bl	27226 <memcpy>
		cmd_complete_or_status.occurred = false;
   1e79e:	2000      	movs	r0, #0
   1e7a0:	7020      	strb	r0, [r4, #0]
}
   1e7a2:	bd10      	pop	{r4, pc}
   1e7a4:	20003c12 	.word	0x20003c12

0001e7a8 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1e7a8:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1e7aa:	4c09      	ldr	r4, [pc, #36]	; (1e7d0 <hci_internal_msg_get+0x28>)
   1e7ac:	7823      	ldrb	r3, [r4, #0]
{
   1e7ae:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1e7b0:	b91b      	cbnz	r3, 1e7ba <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1e7b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1e7b6:	f7ef bc37 	b.w	e028 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1e7ba:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1e7bc:	1c61      	adds	r1, r4, #1
   1e7be:	3202      	adds	r2, #2
   1e7c0:	f008 fd31 	bl	27226 <memcpy>
		cmd_complete_or_status.occurred = false;
   1e7c4:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1e7c6:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1e7c8:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1e7ca:	702b      	strb	r3, [r5, #0]
}
   1e7cc:	bd38      	pop	{r3, r4, r5, pc}
   1e7ce:	bf00      	nop
   1e7d0:	20003c12 	.word	0x20003c12

0001e7d4 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e7d4:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1e7d6:	b570      	push	{r4, r5, r6, lr}
   1e7d8:	4604      	mov	r4, r0
   1e7da:	460d      	mov	r5, r1
   1e7dc:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e7e0:	d915      	bls.n	1e80e <sys_memcpy_swap.constprop.0+0x3a>
   1e7e2:	42b0      	cmp	r0, r6
   1e7e4:	d20a      	bcs.n	1e7fc <sys_memcpy_swap.constprop.0+0x28>
   1e7e6:	490c      	ldr	r1, [pc, #48]	; (1e818 <sys_memcpy_swap.constprop.0+0x44>)
   1e7e8:	480c      	ldr	r0, [pc, #48]	; (1e81c <sys_memcpy_swap.constprop.0+0x48>)
   1e7ea:	f240 2217 	movw	r2, #535	; 0x217
   1e7ee:	f007 fe86 	bl	264fe <assert_print>
   1e7f2:	4809      	ldr	r0, [pc, #36]	; (1e818 <sys_memcpy_swap.constprop.0+0x44>)
   1e7f4:	f240 2117 	movw	r1, #535	; 0x217
   1e7f8:	f007 fe7a 	bl	264f0 <assert_post_action>
	for (; length > 0; length--) {
   1e7fc:	4633      	mov	r3, r6
   1e7fe:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1e800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1e804:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   1e808:	42ab      	cmp	r3, r5
   1e80a:	d1f9      	bne.n	1e800 <sys_memcpy_swap.constprop.0+0x2c>
}
   1e80c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e80e:	d0ea      	beq.n	1e7e6 <sys_memcpy_swap.constprop.0+0x12>
   1e810:	f100 0310 	add.w	r3, r0, #16
   1e814:	4299      	cmp	r1, r3
   1e816:	e7e5      	b.n	1e7e4 <sys_memcpy_swap.constprop.0+0x10>
   1e818:	0002cb30 	.word	0x0002cb30
   1e81c:	0002aa75 	.word	0x0002aa75

0001e820 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1e820:	b570      	push	{r4, r5, r6, lr}
   1e822:	4605      	mov	r5, r0
   1e824:	460c      	mov	r4, r1
   1e826:	4e0e      	ldr	r6, [pc, #56]	; (1e860 <bt_rand+0x40>)
   1e828:	4630      	mov	r0, r6
   1e82a:	f00a fff4 	bl	29816 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1e82e:	b198      	cbz	r0, 1e858 <bt_rand+0x38>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1e830:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   1e832:	68b6      	ldr	r6, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   1e834:	6833      	ldr	r3, [r6, #0]
   1e836:	b943      	cbnz	r3, 1e84a <bt_rand+0x2a>
   1e838:	490a      	ldr	r1, [pc, #40]	; (1e864 <bt_rand+0x44>)
   1e83a:	480b      	ldr	r0, [pc, #44]	; (1e868 <bt_rand+0x48>)
   1e83c:	224b      	movs	r2, #75	; 0x4b
   1e83e:	f007 fe5e 	bl	264fe <assert_print>
   1e842:	4808      	ldr	r0, [pc, #32]	; (1e864 <bt_rand+0x44>)
   1e844:	214b      	movs	r1, #75	; 0x4b
   1e846:	f007 fe53 	bl	264f0 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1e84a:	6833      	ldr	r3, [r6, #0]
   1e84c:	4804      	ldr	r0, [pc, #16]	; (1e860 <bt_rand+0x40>)
   1e84e:	4622      	mov	r2, r4
   1e850:	4629      	mov	r1, r5
}
   1e852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e856:	4718      	bx	r3
   1e858:	f06f 0012 	mvn.w	r0, #18
   1e85c:	bd70      	pop	{r4, r5, r6, pc}
   1e85e:	bf00      	nop
   1e860:	00029d14 	.word	0x00029d14
   1e864:	0002d2db 	.word	0x0002d2db
   1e868:	0002aa75 	.word	0x0002aa75

0001e86c <sys_memcpy_swap.constprop.0>:
   1e86c:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1e86e:	b570      	push	{r4, r5, r6, lr}
   1e870:	4604      	mov	r4, r0
   1e872:	460d      	mov	r5, r1
   1e874:	f101 0620 	add.w	r6, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e878:	d915      	bls.n	1e8a6 <sys_memcpy_swap.constprop.0+0x3a>
   1e87a:	42b0      	cmp	r0, r6
   1e87c:	d20a      	bcs.n	1e894 <sys_memcpy_swap.constprop.0+0x28>
   1e87e:	490c      	ldr	r1, [pc, #48]	; (1e8b0 <sys_memcpy_swap.constprop.0+0x44>)
   1e880:	480c      	ldr	r0, [pc, #48]	; (1e8b4 <sys_memcpy_swap.constprop.0+0x48>)
   1e882:	f240 2217 	movw	r2, #535	; 0x217
   1e886:	f007 fe3a 	bl	264fe <assert_print>
   1e88a:	4809      	ldr	r0, [pc, #36]	; (1e8b0 <sys_memcpy_swap.constprop.0+0x44>)
   1e88c:	f240 2117 	movw	r1, #535	; 0x217
   1e890:	f007 fe2e 	bl	264f0 <assert_post_action>
	for (; length > 0; length--) {
   1e894:	4633      	mov	r3, r6
   1e896:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1e898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1e89c:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   1e8a0:	42ab      	cmp	r3, r5
   1e8a2:	d1f9      	bne.n	1e898 <sys_memcpy_swap.constprop.0+0x2c>
}
   1e8a4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e8a6:	d0ea      	beq.n	1e87e <sys_memcpy_swap.constprop.0+0x12>
   1e8a8:	f100 0320 	add.w	r3, r0, #32
   1e8ac:	4299      	cmp	r1, r3
   1e8ae:	e7e5      	b.n	1e87c <sys_memcpy_swap.constprop.0+0x10>
   1e8b0:	0002cb30 	.word	0x0002cb30
   1e8b4:	0002aa75 	.word	0x0002aa75

0001e8b8 <ecdh_p256_common_secret>:

static uint8_t common_secret(bool use_debug)
{
	int err;

	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1e8b8:	4b1e      	ldr	r3, [pc, #120]	; (1e934 <ecdh_p256_common_secret+0x7c>)
   1e8ba:	491f      	ldr	r1, [pc, #124]	; (1e938 <ecdh_p256_common_secret+0x80>)
   1e8bc:	f103 0220 	add.w	r2, r3, #32
   1e8c0:	2800      	cmp	r0, #0
   1e8c2:	bf08      	it	eq
   1e8c4:	4619      	moveq	r1, r3

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1e8c6:	b570      	push	{r4, r5, r6, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1e8c8:	4610      	mov	r0, r2
   1e8ca:	f004 fb83 	bl	22fd4 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1e8ce:	4602      	mov	r2, r0
   1e8d0:	b348      	cbz	r0, 1e926 <ecdh_p256_common_secret+0x6e>
		BT_ERR("public key is not valid (err %d)", err);
   1e8d2:	481a      	ldr	r0, [pc, #104]	; (1e93c <ecdh_p256_common_secret+0x84>)
   1e8d4:	2145      	movs	r1, #69	; 0x45
   1e8d6:	f007 fe20 	bl	2651a <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   1e8da:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1e8dc:	f04f 32ff 	mov.w	r2, #4294967295
   1e8e0:	f04f 33ff 	mov.w	r3, #4294967295
   1e8e4:	2001      	movs	r0, #1
   1e8e6:	f7f6 fb5d 	bl	14fa4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1e8ea:	f100 0608 	add.w	r6, r0, #8
   1e8ee:	2102      	movs	r1, #2
   1e8f0:	4605      	mov	r5, r0
   1e8f2:	4630      	mov	r0, r6
   1e8f4:	f7fe f898 	bl	1ca28 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1e8f8:	233e      	movs	r3, #62	; 0x3e
   1e8fa:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1e8fc:	2322      	movs	r3, #34	; 0x22
   1e8fe:	7043      	strb	r3, [r0, #1]
   1e900:	2101      	movs	r1, #1
   1e902:	4630      	mov	r0, r6
   1e904:	f7fe f890 	bl	1ca28 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1e908:	2309      	movs	r3, #9
   1e90a:	7003      	strb	r3, [r0, #0]
   1e90c:	2121      	movs	r1, #33	; 0x21
   1e90e:	4630      	mov	r0, r6
   1e910:	f7fe f88a 	bl	1ca28 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1e914:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1e918:	b13c      	cbz	r4, 1e92a <ecdh_p256_common_secret+0x72>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1e91a:	2220      	movs	r2, #32
   1e91c:	21ff      	movs	r1, #255	; 0xff
   1e91e:	f008 fc8d 	bl	2723c <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1e922:	4628      	mov	r0, r5
   1e924:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1e926:	4604      	mov	r4, r0
   1e928:	e7d8      	b.n	1e8dc <ecdh_p256_common_secret+0x24>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1e92a:	4905      	ldr	r1, [pc, #20]	; (1e940 <ecdh_p256_common_secret+0x88>)
   1e92c:	f7ff ff9e 	bl	1e86c <sys_memcpy_swap.constprop.0>
   1e930:	e7f7      	b.n	1e922 <ecdh_p256_common_secret+0x6a>
   1e932:	bf00      	nop
   1e934:	20003c59 	.word	0x20003c59
   1e938:	0002d4ba 	.word	0x0002d4ba
   1e93c:	0002d46a 	.word	0x0002d46a
   1e940:	20003c79 	.word	0x20003c79

0001e944 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1e944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e946:	4e38      	ldr	r6, [pc, #224]	; (1ea28 <ecdh_cmd_process+0xe4>)
   1e948:	f3bf 8f5b 	dmb	ish
   1e94c:	6833      	ldr	r3, [r6, #0]
   1e94e:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1e952:	2b02      	cmp	r3, #2
   1e954:	d059      	beq.n	1ea0a <ecdh_cmd_process+0xc6>
   1e956:	2b04      	cmp	r3, #4
   1e958:	d05c      	beq.n	1ea14 <ecdh_cmd_process+0xd0>
   1e95a:	2b01      	cmp	r3, #1
   1e95c:	d15c      	bne.n	1ea18 <ecdh_cmd_process+0xd4>
		err = bt_rand(ecdh.private_key_be, 32);
   1e95e:	4c33      	ldr	r4, [pc, #204]	; (1ea2c <ecdh_cmd_process+0xe8>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1e960:	4f33      	ldr	r7, [pc, #204]	; (1ea30 <ecdh_cmd_process+0xec>)
		err = bt_rand(ecdh.private_key_be, 32);
   1e962:	2120      	movs	r1, #32
   1e964:	4620      	mov	r0, r4
   1e966:	f7ff ff5b 	bl	1e820 <bt_rand>
		if (err) {
   1e96a:	2800      	cmp	r0, #0
   1e96c:	d142      	bne.n	1e9f4 <ecdh_cmd_process+0xb0>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1e96e:	2220      	movs	r2, #32
   1e970:	4639      	mov	r1, r7
   1e972:	4620      	mov	r0, r4
   1e974:	f008 fc2e 	bl	271d4 <memcmp>
   1e978:	2800      	cmp	r0, #0
   1e97a:	d0f2      	beq.n	1e962 <ecdh_cmd_process+0x1e>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1e97c:	482d      	ldr	r0, [pc, #180]	; (1ea34 <ecdh_cmd_process+0xf0>)
   1e97e:	4621      	mov	r1, r4
   1e980:	f004 fb14 	bl	22fac <ocrypto_ecdh_p256_public_key>
	} while (err);
   1e984:	4605      	mov	r5, r0
   1e986:	2800      	cmp	r0, #0
   1e988:	d1eb      	bne.n	1e962 <ecdh_cmd_process+0x1e>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1e98a:	f04f 32ff 	mov.w	r2, #4294967295
   1e98e:	f04f 33ff 	mov.w	r3, #4294967295
   1e992:	2001      	movs	r0, #1
   1e994:	f7f6 fb06 	bl	14fa4 <bt_buf_get_rx>
   1e998:	f100 0708 	add.w	r7, r0, #8
   1e99c:	2102      	movs	r1, #2
   1e99e:	4604      	mov	r4, r0
   1e9a0:	4638      	mov	r0, r7
   1e9a2:	f7fe f841 	bl	1ca28 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1e9a6:	233e      	movs	r3, #62	; 0x3e
   1e9a8:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1e9aa:	2342      	movs	r3, #66	; 0x42
   1e9ac:	7043      	strb	r3, [r0, #1]
   1e9ae:	2101      	movs	r1, #1
   1e9b0:	4638      	mov	r0, r7
   1e9b2:	f7fe f839 	bl	1ca28 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1e9b6:	2308      	movs	r3, #8
   1e9b8:	7003      	strb	r3, [r0, #0]
   1e9ba:	2141      	movs	r1, #65	; 0x41
   1e9bc:	4638      	mov	r0, r7
   1e9be:	f7fe f833 	bl	1ca28 <net_buf_simple_add>
   1e9c2:	4607      	mov	r7, r0
	evt->status = status;
   1e9c4:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1e9c8:	b1b5      	cbz	r5, 1e9f8 <ecdh_cmd_process+0xb4>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1e9ca:	2240      	movs	r2, #64	; 0x40
   1e9cc:	2100      	movs	r1, #0
   1e9ce:	f008 fc35 	bl	2723c <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e9d2:	f3bf 8f5b 	dmb	ish
   1e9d6:	2300      	movs	r3, #0
   1e9d8:	e856 2f00 	ldrex	r2, [r6]
   1e9dc:	e846 3100 	strex	r1, r3, [r6]
   1e9e0:	2900      	cmp	r1, #0
   1e9e2:	d1f9      	bne.n	1e9d8 <ecdh_cmd_process+0x94>
   1e9e4:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1e9e8:	b1e4      	cbz	r4, 1ea24 <ecdh_cmd_process+0xe0>
		bt_recv(buf);
   1e9ea:	4620      	mov	r0, r4
	}
}
   1e9ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   1e9f0:	f7f7 bb36 	b.w	16060 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1e9f4:	251f      	movs	r5, #31
   1e9f6:	e7c8      	b.n	1e98a <ecdh_cmd_process+0x46>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1e9f8:	490e      	ldr	r1, [pc, #56]	; (1ea34 <ecdh_cmd_process+0xf0>)
   1e9fa:	f7ff ff37 	bl	1e86c <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1e9fe:	490e      	ldr	r1, [pc, #56]	; (1ea38 <ecdh_cmd_process+0xf4>)
   1ea00:	f107 0021 	add.w	r0, r7, #33	; 0x21
   1ea04:	f7ff ff32 	bl	1e86c <sys_memcpy_swap.constprop.0>
		break;
   1ea08:	e7e3      	b.n	1e9d2 <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(false);
   1ea0a:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1ea0c:	f7ff ff54 	bl	1e8b8 <ecdh_p256_common_secret>
   1ea10:	4604      	mov	r4, r0
		break;
   1ea12:	e7de      	b.n	1e9d2 <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(true);
   1ea14:	2001      	movs	r0, #1
   1ea16:	e7f9      	b.n	1ea0c <ecdh_cmd_process+0xc8>
		BT_WARN("Unknown command");
   1ea18:	4808      	ldr	r0, [pc, #32]	; (1ea3c <ecdh_cmd_process+0xf8>)
   1ea1a:	2157      	movs	r1, #87	; 0x57
   1ea1c:	f007 fd7d 	bl	2651a <z_log_minimal_printk>
		buf = NULL;
   1ea20:	2400      	movs	r4, #0
		break;
   1ea22:	e7d6      	b.n	1e9d2 <ecdh_cmd_process+0x8e>
}
   1ea24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ea26:	bf00      	nop
   1ea28:	200027f8 	.word	0x200027f8
   1ea2c:	20003c59 	.word	0x20003c59
   1ea30:	0002d4ba 	.word	0x0002d4ba
   1ea34:	20003c79 	.word	0x20003c79
   1ea38:	20003c99 	.word	0x20003c99
   1ea3c:	0002d490 	.word	0x0002d490

0001ea40 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1ea40:	b510      	push	{r4, lr}
   1ea42:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1ea44:	2210      	movs	r2, #16
   1ea46:	2100      	movs	r1, #0
   1ea48:	a801      	add	r0, sp, #4
   1ea4a:	f008 fbf7 	bl	2723c <memset>
   1ea4e:	4c0b      	ldr	r4, [pc, #44]	; (1ea7c <ecdh_thread+0x3c>)
   1ea50:	9405      	str	r4, [sp, #20]
   1ea52:	2301      	movs	r3, #1
   1ea54:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1ea58:	f04f 32ff 	mov.w	r2, #4294967295
   1ea5c:	f04f 33ff 	mov.w	r3, #4294967295
   1ea60:	2101      	movs	r1, #1
   1ea62:	a801      	add	r0, sp, #4
   1ea64:	f004 f946 	bl	22cf4 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1ea68:	4620      	mov	r0, r4
   1ea6a:	f00b f8cf 	bl	29c0c <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1ea6e:	9b04      	ldr	r3, [sp, #16]
   1ea70:	f36f 3352 	bfc	r3, #13, #6
   1ea74:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1ea76:	f7ff ff65 	bl	1e944 <ecdh_cmd_process>
	while (true) {
   1ea7a:	e7ed      	b.n	1ea58 <ecdh_thread+0x18>
   1ea7c:	200027fc 	.word	0x200027fc

0001ea80 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1ea80:	b510      	push	{r4, lr}
   1ea82:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1ea84:	480e      	ldr	r0, [pc, #56]	; (1eac0 <hci_ecdh_init+0x40>)
   1ea86:	f00b f8bc 	bl	29c02 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ea8a:	4c0e      	ldr	r4, [pc, #56]	; (1eac4 <hci_ecdh_init+0x44>)
   1ea8c:	490e      	ldr	r1, [pc, #56]	; (1eac8 <hci_ecdh_init+0x48>)
   1ea8e:	2200      	movs	r2, #0
   1ea90:	2300      	movs	r3, #0
   1ea92:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ea96:	2300      	movs	r3, #0
   1ea98:	220a      	movs	r2, #10
   1ea9a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1ea9e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1eaa2:	9300      	str	r3, [sp, #0]
   1eaa4:	f44f 7262 	mov.w	r2, #904	; 0x388
   1eaa8:	4b08      	ldr	r3, [pc, #32]	; (1eacc <hci_ecdh_init+0x4c>)
   1eaaa:	4620      	mov	r0, r4
   1eaac:	f001 fbaa 	bl	20204 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1eab0:	4907      	ldr	r1, [pc, #28]	; (1ead0 <hci_ecdh_init+0x50>)
   1eab2:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1eab4:	b008      	add	sp, #32
   1eab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1eaba:	f00a bee4 	b.w	29886 <z_impl_k_thread_name_set>
   1eabe:	bf00      	nop
   1eac0:	200027fc 	.word	0x200027fc
   1eac4:	20001c50 	.word	0x20001c50
   1eac8:	20005180 	.word	0x20005180
   1eacc:	0001ea41 	.word	0x0001ea41
   1ead0:	0002d4a5 	.word	0x0002d4a5

0001ead4 <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1ead4:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ead6:	4b0b      	ldr	r3, [pc, #44]	; (1eb04 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1ead8:	f3bf 8f5b 	dmb	ish
   1eadc:	2201      	movs	r2, #1
   1eade:	e853 1f00 	ldrex	r1, [r3]
   1eae2:	2900      	cmp	r1, #0
   1eae4:	d103      	bne.n	1eaee <hci_cmd_le_read_local_p256_public_key+0x1a>
   1eae6:	e843 2000 	strex	r0, r2, [r3]
   1eaea:	2800      	cmp	r0, #0
   1eaec:	d1f7      	bne.n	1eade <hci_cmd_le_read_local_p256_public_key+0xa>
   1eaee:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1eaf2:	d105      	bne.n	1eb00 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1eaf4:	4804      	ldr	r0, [pc, #16]	; (1eb08 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1eaf6:	2100      	movs	r1, #0
   1eaf8:	f004 f9d2 	bl	22ea0 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1eafc:	2000      	movs	r0, #0
}
   1eafe:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1eb00:	200c      	movs	r0, #12
   1eb02:	e7fc      	b.n	1eafe <hci_cmd_le_read_local_p256_public_key+0x2a>
   1eb04:	200027f8 	.word	0x200027f8
   1eb08:	200027fc 	.word	0x200027fc

0001eb0c <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1eb0c:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1eb0e:	2900      	cmp	r1, #0
   1eb10:	4b11      	ldr	r3, [pc, #68]	; (1eb58 <cmd_le_generate_dhkey+0x4c>)
   1eb12:	f3bf 8f5b 	dmb	ish
{
   1eb16:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1eb18:	bf14      	ite	ne
   1eb1a:	2204      	movne	r2, #4
   1eb1c:	2202      	moveq	r2, #2
   1eb1e:	e853 1f00 	ldrex	r1, [r3]
   1eb22:	2900      	cmp	r1, #0
   1eb24:	d103      	bne.n	1eb2e <cmd_le_generate_dhkey+0x22>
   1eb26:	e843 2000 	strex	r0, r2, [r3]
   1eb2a:	2800      	cmp	r0, #0
   1eb2c:	d1f7      	bne.n	1eb1e <cmd_le_generate_dhkey+0x12>
   1eb2e:	f3bf 8f5b 	dmb	ish
   1eb32:	d10e      	bne.n	1eb52 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1eb34:	4621      	mov	r1, r4
   1eb36:	4809      	ldr	r0, [pc, #36]	; (1eb5c <cmd_le_generate_dhkey+0x50>)
   1eb38:	f7ff fe98 	bl	1e86c <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1eb3c:	4808      	ldr	r0, [pc, #32]	; (1eb60 <cmd_le_generate_dhkey+0x54>)
   1eb3e:	f104 0120 	add.w	r1, r4, #32
   1eb42:	f7ff fe93 	bl	1e86c <sys_memcpy_swap.constprop.0>
   1eb46:	4807      	ldr	r0, [pc, #28]	; (1eb64 <cmd_le_generate_dhkey+0x58>)
   1eb48:	2100      	movs	r1, #0
   1eb4a:	f004 f9a9 	bl	22ea0 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1eb4e:	2000      	movs	r0, #0
}
   1eb50:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1eb52:	200c      	movs	r0, #12
   1eb54:	e7fc      	b.n	1eb50 <cmd_le_generate_dhkey+0x44>
   1eb56:	bf00      	nop
   1eb58:	200027f8 	.word	0x200027f8
   1eb5c:	20003c79 	.word	0x20003c79
   1eb60:	20003c99 	.word	0x20003c99
   1eb64:	200027fc 	.word	0x200027fc

0001eb68 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1eb68:	b508      	push	{r3, lr}
   1eb6a:	4602      	mov	r2, r0
   1eb6c:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1eb6e:	4805      	ldr	r0, [pc, #20]	; (1eb84 <m_assert_handler+0x1c>)
   1eb70:	2145      	movs	r1, #69	; 0x45
   1eb72:	f007 fcd2 	bl	2651a <z_log_minimal_printk>
	k_oops();
   1eb76:	4040      	eors	r0, r0
   1eb78:	f380 8811 	msr	BASEPRI, r0
   1eb7c:	f04f 0003 	mov.w	r0, #3
   1eb80:	df02      	svc	2
}
   1eb82:	bd08      	pop	{r3, pc}
   1eb84:	0002d4da 	.word	0x0002d4da

0001eb88 <mpsl_low_prio_work_handler>:
{
   1eb88:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1eb8a:	f04f 30ff 	mov.w	r0, #4294967295
   1eb8e:	f04f 31ff 	mov.w	r1, #4294967295
   1eb92:	f7ff f8f5 	bl	1dd80 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1eb96:	b140      	cbz	r0, 1ebaa <mpsl_low_prio_work_handler+0x22>
   1eb98:	4907      	ldr	r1, [pc, #28]	; (1ebb8 <mpsl_low_prio_work_handler+0x30>)
   1eb9a:	4808      	ldr	r0, [pc, #32]	; (1ebbc <mpsl_low_prio_work_handler+0x34>)
   1eb9c:	2247      	movs	r2, #71	; 0x47
   1eb9e:	f007 fcae 	bl	264fe <assert_print>
   1eba2:	4805      	ldr	r0, [pc, #20]	; (1ebb8 <mpsl_low_prio_work_handler+0x30>)
   1eba4:	2147      	movs	r1, #71	; 0x47
   1eba6:	f007 fca3 	bl	264f0 <assert_post_action>
	mpsl_low_priority_process();
   1ebaa:	f7ee fdbe 	bl	d72a <mpsl_low_priority_process>
}
   1ebae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1ebb2:	f7ff b8ed 	b.w	1dd90 <multithreading_lock_release>
   1ebb6:	bf00      	nop
   1ebb8:	0002d4f3 	.word	0x0002d4f3
   1ebbc:	0002aa75 	.word	0x0002aa75

0001ebc0 <mpsl_low_prio_irq_handler>:
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1ebc0:	4901      	ldr	r1, [pc, #4]	; (1ebc8 <mpsl_low_prio_irq_handler+0x8>)
   1ebc2:	4802      	ldr	r0, [pc, #8]	; (1ebcc <mpsl_low_prio_irq_handler+0xc>)
   1ebc4:	f00a bf0b 	b.w	299de <k_work_submit_to_queue>
   1ebc8:	2000280c 	.word	0x2000280c
   1ebcc:	20001cd0 	.word	0x20001cd0

0001ebd0 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1ebd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1ebd2:	2332      	movs	r3, #50	; 0x32
   1ebd4:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ebd8:	4a13      	ldr	r2, [pc, #76]	; (1ec28 <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   1ebda:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1ebdc:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ebde:	2119      	movs	r1, #25
   1ebe0:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1ebe2:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1ebe6:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1ebea:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ebee:	f7e6 f9f5 	bl	4fdc <mpsl_init>
	if (err) {
   1ebf2:	4604      	mov	r4, r0
   1ebf4:	b9a0      	cbnz	r0, 1ec20 <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1ebf6:	480d      	ldr	r0, [pc, #52]	; (1ec2c <mpsl_lib_init+0x5c>)
   1ebf8:	4629      	mov	r1, r5
   1ebfa:	f7ee fc79 	bl	d4f0 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   1ebfe:	4604      	mov	r4, r0
   1ec00:	b970      	cbnz	r0, 1ec20 <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1ec02:	4601      	mov	r1, r0
   1ec04:	462a      	mov	r2, r5
   1ec06:	2008      	movs	r0, #8
   1ec08:	f7f5 fa8e 	bl	14128 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1ec0c:	462a      	mov	r2, r5
   1ec0e:	4621      	mov	r1, r4
   1ec10:	200b      	movs	r0, #11
   1ec12:	f7f5 fa89 	bl	14128 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1ec16:	462a      	mov	r2, r5
   1ec18:	4621      	mov	r1, r4
   1ec1a:	4628      	mov	r0, r5
   1ec1c:	f7f5 fa84 	bl	14128 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   1ec20:	4620      	mov	r0, r4
   1ec22:	b003      	add	sp, #12
   1ec24:	bd30      	pop	{r4, r5, pc}
   1ec26:	bf00      	nop
   1ec28:	0001eb69 	.word	0x0001eb69
   1ec2c:	2000281c 	.word	0x2000281c

0001ec30 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1ec30:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1ec32:	4d0d      	ldr	r5, [pc, #52]	; (1ec68 <mpsl_low_prio_init+0x38>)
   1ec34:	490d      	ldr	r1, [pc, #52]	; (1ec6c <mpsl_low_prio_init+0x3c>)
   1ec36:	2400      	movs	r4, #0
   1ec38:	9400      	str	r4, [sp, #0]
   1ec3a:	f06f 0309 	mvn.w	r3, #9
   1ec3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ec42:	4628      	mov	r0, r5
   1ec44:	f002 f9d6 	bl	20ff4 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1ec48:	4909      	ldr	r1, [pc, #36]	; (1ec70 <mpsl_low_prio_init+0x40>)
   1ec4a:	4628      	mov	r0, r5
   1ec4c:	f00a fe1b 	bl	29886 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1ec50:	4908      	ldr	r1, [pc, #32]	; (1ec74 <mpsl_low_prio_init+0x44>)
   1ec52:	4809      	ldr	r0, [pc, #36]	; (1ec78 <mpsl_low_prio_init+0x48>)
   1ec54:	f002 f910 	bl	20e78 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1ec58:	4622      	mov	r2, r4
   1ec5a:	2104      	movs	r1, #4
   1ec5c:	2019      	movs	r0, #25
   1ec5e:	f7f5 fa63 	bl	14128 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1ec62:	4620      	mov	r0, r4
   1ec64:	b003      	add	sp, #12
   1ec66:	bd30      	pop	{r4, r5, pc}
   1ec68:	20001cd0 	.word	0x20001cd0
   1ec6c:	20005580 	.word	0x20005580
   1ec70:	0002d520 	.word	0x0002d520
   1ec74:	0001eb89 	.word	0x0001eb89
   1ec78:	2000280c 	.word	0x2000280c

0001ec7c <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1ec7c:	4b01      	ldr	r3, [pc, #4]	; (1ec84 <mpsl_hfclk_callback+0x8>)
   1ec7e:	2000      	movs	r0, #0
   1ec80:	681b      	ldr	r3, [r3, #0]
   1ec82:	4718      	bx	r3
   1ec84:	2000284c 	.word	0x2000284c

0001ec88 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1ec88:	b510      	push	{r4, lr}
	switch (domain) {
   1ec8a:	b130      	cbz	r0, 1ec9a <nrfx_clock_start+0x12>
   1ec8c:	2801      	cmp	r0, #1
   1ec8e:	d10a      	bne.n	1eca6 <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1ec90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1ec94:	4809      	ldr	r0, [pc, #36]	; (1ecbc <nrfx_clock_start+0x34>)
   1ec96:	f7e6 b817 	b.w	4cc8 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1ec9a:	4b09      	ldr	r3, [pc, #36]	; (1ecc0 <nrfx_clock_start+0x38>)
}
   1ec9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1eca0:	681b      	ldr	r3, [r3, #0]
   1eca2:	2001      	movs	r0, #1
   1eca4:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1eca6:	4907      	ldr	r1, [pc, #28]	; (1ecc4 <nrfx_clock_start+0x3c>)
   1eca8:	4807      	ldr	r0, [pc, #28]	; (1ecc8 <nrfx_clock_start+0x40>)
   1ecaa:	221c      	movs	r2, #28
   1ecac:	f007 fc27 	bl	264fe <assert_print>
}
   1ecb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   1ecb4:	4803      	ldr	r0, [pc, #12]	; (1ecc4 <nrfx_clock_start+0x3c>)
   1ecb6:	211c      	movs	r1, #28
   1ecb8:	f007 bc1a 	b.w	264f0 <assert_post_action>
   1ecbc:	0001ec7d 	.word	0x0001ec7d
   1ecc0:	2000284c 	.word	0x2000284c
   1ecc4:	0002d534 	.word	0x0002d534
   1ecc8:	0002aa75 	.word	0x0002aa75

0001eccc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1eccc:	b508      	push	{r3, lr}
	switch (domain) {
   1ecce:	b180      	cbz	r0, 1ecf2 <nrfx_clock_stop+0x26>
   1ecd0:	2801      	cmp	r0, #1
   1ecd2:	d103      	bne.n	1ecdc <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1ecd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1ecd8:	f7e5 bfe8 	b.w	4cac <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1ecdc:	4905      	ldr	r1, [pc, #20]	; (1ecf4 <nrfx_clock_stop+0x28>)
   1ecde:	4806      	ldr	r0, [pc, #24]	; (1ecf8 <nrfx_clock_stop+0x2c>)
   1ece0:	222a      	movs	r2, #42	; 0x2a
   1ece2:	f007 fc0c 	bl	264fe <assert_print>
}
   1ece6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   1ecea:	4802      	ldr	r0, [pc, #8]	; (1ecf4 <nrfx_clock_stop+0x28>)
   1ecec:	212a      	movs	r1, #42	; 0x2a
   1ecee:	f007 bbff 	b.w	264f0 <assert_post_action>
}
   1ecf2:	bd08      	pop	{r3, pc}
   1ecf4:	0002d534 	.word	0x0002d534
   1ecf8:	0002aa75 	.word	0x0002aa75

0001ecfc <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1ecfc:	4b01      	ldr	r3, [pc, #4]	; (1ed04 <nrfx_clock_init+0x8>)
   1ecfe:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1ed00:	4801      	ldr	r0, [pc, #4]	; (1ed08 <nrfx_clock_init+0xc>)
   1ed02:	4770      	bx	lr
   1ed04:	2000284c 	.word	0x2000284c
   1ed08:	0bad0000 	.word	0x0bad0000

0001ed0c <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1ed0c:	b538      	push	{r3, r4, r5, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   1ed0e:	4d33      	ldr	r5, [pc, #204]	; (1eddc <timeslot_callback+0xd0>)
   1ed10:	7e2b      	ldrb	r3, [r5, #24]
   1ed12:	4283      	cmp	r3, r0
{
   1ed14:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(session_id == _context.session_id);
   1ed16:	d008      	beq.n	1ed2a <timeslot_callback+0x1e>
   1ed18:	4931      	ldr	r1, [pc, #196]	; (1ede0 <timeslot_callback+0xd4>)
   1ed1a:	4832      	ldr	r0, [pc, #200]	; (1ede4 <timeslot_callback+0xd8>)
   1ed1c:	2250      	movs	r2, #80	; 0x50
   1ed1e:	f007 fbee 	bl	264fe <assert_print>
   1ed22:	482f      	ldr	r0, [pc, #188]	; (1ede0 <timeslot_callback+0xd4>)
   1ed24:	2150      	movs	r1, #80	; 0x50
   1ed26:	f007 fbe3 	bl	264f0 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ed2a:	f3bf 8f5b 	dmb	ish
   1ed2e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1ed30:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   1ed34:	b10b      	cbz	r3, 1ed3a <timeslot_callback+0x2e>
		return NULL;
	}

	switch (signal) {
   1ed36:	2000      	movs	r0, #0
   1ed38:	e023      	b.n	1ed82 <timeslot_callback+0x76>
   1ed3a:	2c09      	cmp	r4, #9
   1ed3c:	d847      	bhi.n	1edce <timeslot_callback+0xc2>
   1ed3e:	a301      	add	r3, pc, #4	; (adr r3, 1ed44 <timeslot_callback+0x38>)
   1ed40:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   1ed44:	0001ed6d 	.word	0x0001ed6d
   1ed48:	0001edcf 	.word	0x0001edcf
   1ed4c:	0001edcf 	.word	0x0001edcf
   1ed50:	0001edcf 	.word	0x0001edcf
   1ed54:	0001edcf 	.word	0x0001edcf
   1ed58:	0001eda5 	.word	0x0001eda5
   1ed5c:	0001eda5 	.word	0x0001eda5
   1ed60:	0001ed9d 	.word	0x0001ed9d
   1ed64:	0001edcf 	.word	0x0001edcf
   1ed68:	0001ed37 	.word	0x0001ed37
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   1ed6c:	6a2b      	ldr	r3, [r5, #32]
   1ed6e:	e9d3 2000 	ldrd	r2, r0, [r3]
   1ed72:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   1ed74:	2801      	cmp	r0, #1
   1ed76:	d005      	beq.n	1ed84 <timeslot_callback+0x78>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   1ed78:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   1ed7a:	2302      	movs	r3, #2
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   1ed7c:	481a      	ldr	r0, [pc, #104]	; (1ede8 <timeslot_callback+0xdc>)
			_context.return_param.callback_action =
   1ed7e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
   1ed82:	bd38      	pop	{r3, r4, r5, pc}
			_context.timeslot_request.params.earliest.timeout_us =
   1ed84:	f247 5330 	movw	r3, #30000	; 0x7530
			_context.timeslot_request.params.earliest.priority =
   1ed88:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   1ed8c:	4817      	ldr	r0, [pc, #92]	; (1edec <timeslot_callback+0xe0>)
			_context.timeslot_request.params.earliest.timeout_us =
   1ed8e:	632b      	str	r3, [r5, #48]	; 0x30
			_context.return_param.callback_action =
   1ed90:	2303      	movs	r3, #3
			_context.return_param.params.request.p_next =
   1ed92:	63a8      	str	r0, [r5, #56]	; 0x38
			_context.return_param.callback_action =
   1ed94:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	return &_context.return_param;
   1ed98:	3010      	adds	r0, #16
   1ed9a:	e7f2      	b.n	1ed82 <timeslot_callback+0x76>
	z_impl_k_sem_give(sem);
   1ed9c:	480f      	ldr	r0, [pc, #60]	; (1eddc <timeslot_callback+0xd0>)
   1ed9e:	f001 fdc9 	bl	20934 <z_impl_k_sem_give>
   1eda2:	e7c8      	b.n	1ed36 <timeslot_callback+0x2a>
	_context.timeslot_request.params.earliest.timeout_us =
   1eda4:	4b12      	ldr	r3, [pc, #72]	; (1edf0 <timeslot_callback+0xe4>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1eda6:	4911      	ldr	r1, [pc, #68]	; (1edec <timeslot_callback+0xe0>)
   1eda8:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.timeout_us =
   1edaa:	632b      	str	r3, [r5, #48]	; 0x30
	_context.timeslot_request.params.earliest.priority =
   1edac:	2400      	movs	r4, #0
   1edae:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1edb2:	f7ee fb41 	bl	d438 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   1edb6:	2800      	cmp	r0, #0
   1edb8:	d0bd      	beq.n	1ed36 <timeslot_callback+0x2a>
   1edba:	4909      	ldr	r1, [pc, #36]	; (1ede0 <timeslot_callback+0xd4>)
   1edbc:	4809      	ldr	r0, [pc, #36]	; (1ede4 <timeslot_callback+0xd8>)
   1edbe:	2248      	movs	r2, #72	; 0x48
   1edc0:	f007 fb9d 	bl	264fe <assert_print>
   1edc4:	2148      	movs	r1, #72	; 0x48
		__ASSERT(false, "unexpected signal: %u", signal);
   1edc6:	4806      	ldr	r0, [pc, #24]	; (1ede0 <timeslot_callback+0xd4>)
   1edc8:	f007 fb92 	bl	264f0 <assert_post_action>
		return NULL;
   1edcc:	e7b3      	b.n	1ed36 <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
   1edce:	4904      	ldr	r1, [pc, #16]	; (1ede0 <timeslot_callback+0xd4>)
   1edd0:	4804      	ldr	r0, [pc, #16]	; (1ede4 <timeslot_callback+0xd8>)
   1edd2:	227c      	movs	r2, #124	; 0x7c
   1edd4:	f007 fb93 	bl	264fe <assert_print>
   1edd8:	217c      	movs	r1, #124	; 0x7c
   1edda:	e7f4      	b.n	1edc6 <timeslot_callback+0xba>
   1eddc:	20002850 	.word	0x20002850
   1ede0:	0002d571 	.word	0x0002d571
   1ede4:	0002aa75 	.word	0x0002aa75
   1ede8:	20002884 	.word	0x20002884
   1edec:	20002874 	.word	0x20002874
   1edf0:	0f423fff 	.word	0x0f423fff

0001edf4 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1edf4:	4802      	ldr	r0, [pc, #8]	; (1ee00 <nrf_flash_sync_init+0xc>)
   1edf6:	2201      	movs	r2, #1
   1edf8:	2100      	movs	r1, #0
   1edfa:	f00a bd8f 	b.w	2991c <z_impl_k_sem_init>
   1edfe:	bf00      	nop
   1ee00:	20002850 	.word	0x20002850

0001ee04 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   1ee04:	4b01      	ldr	r3, [pc, #4]	; (1ee0c <nrf_flash_sync_set_context+0x8>)
   1ee06:	61d8      	str	r0, [r3, #28]
}
   1ee08:	4770      	bx	lr
   1ee0a:	bf00      	nop
   1ee0c:	20002850 	.word	0x20002850

0001ee10 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1ee10:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ee12:	f04f 31ff 	mov.w	r1, #4294967295
{
   1ee16:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ee18:	f04f 30ff 	mov.w	r0, #4294967295
   1ee1c:	f7fe ffb0 	bl	1dd80 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1ee20:	b140      	cbz	r0, 1ee34 <nrf_flash_sync_exe+0x24>
   1ee22:	494d      	ldr	r1, [pc, #308]	; (1ef58 <nrf_flash_sync_exe+0x148>)
   1ee24:	484d      	ldr	r0, [pc, #308]	; (1ef5c <nrf_flash_sync_exe+0x14c>)
   1ee26:	2299      	movs	r2, #153	; 0x99
   1ee28:	f007 fb69 	bl	264fe <assert_print>
   1ee2c:	484a      	ldr	r0, [pc, #296]	; (1ef58 <nrf_flash_sync_exe+0x148>)
   1ee2e:	2199      	movs	r1, #153	; 0x99
   1ee30:	f007 fb5e 	bl	264f0 <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1ee34:	4c4a      	ldr	r4, [pc, #296]	; (1ef60 <nrf_flash_sync_exe+0x150>)
   1ee36:	484b      	ldr	r0, [pc, #300]	; (1ef64 <nrf_flash_sync_exe+0x154>)
   1ee38:	f104 0118 	add.w	r1, r4, #24
   1ee3c:	f7e2 fd5e 	bl	18fc <mpsl_timeslot_session_open>
   1ee40:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   1ee42:	f7fe ffa5 	bl	1dd90 <multithreading_lock_release>

	if (ret < 0) {
   1ee46:	2d00      	cmp	r5, #0
   1ee48:	da07      	bge.n	1ee5a <nrf_flash_sync_exe+0x4a>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   1ee4a:	4847      	ldr	r0, [pc, #284]	; (1ef68 <nrf_flash_sync_exe+0x158>)
   1ee4c:	462a      	mov	r2, r5
   1ee4e:	2145      	movs	r1, #69	; 0x45
   1ee50:	f007 fb63 	bl	2651a <z_log_minimal_printk>
		return -ENOMEM;
   1ee54:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   1ee58:	bd70      	pop	{r4, r5, r6, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1ee5a:	f240 1301 	movw	r3, #257	; 0x101
   1ee5e:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1ee60:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   1ee62:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1ee64:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   1ee66:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   1ee68:	f247 5330 	movw	r3, #30000	; 0x7530
   1ee6c:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1ee6e:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   1ee70:	f06f 0373 	mvn.w	r3, #115	; 0x73
   1ee74:	63e3      	str	r3, [r4, #60]	; 0x3c
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1ee76:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ee7a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1ee7e:	f3bf 8f5b 	dmb	ish
   1ee82:	e853 1f00 	ldrex	r1, [r3]
   1ee86:	e843 2000 	strex	r0, r2, [r3]
   1ee8a:	2800      	cmp	r0, #0
   1ee8c:	d1f9      	bne.n	1ee82 <nrf_flash_sync_exe+0x72>
   1ee8e:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   1ee92:	68a2      	ldr	r2, [r4, #8]
   1ee94:	461d      	mov	r5, r3
   1ee96:	b142      	cbz	r2, 1eeaa <nrf_flash_sync_exe+0x9a>
   1ee98:	492f      	ldr	r1, [pc, #188]	; (1ef58 <nrf_flash_sync_exe+0x148>)
   1ee9a:	4830      	ldr	r0, [pc, #192]	; (1ef5c <nrf_flash_sync_exe+0x14c>)
   1ee9c:	22af      	movs	r2, #175	; 0xaf
   1ee9e:	f007 fb2e 	bl	264fe <assert_print>
   1eea2:	482d      	ldr	r0, [pc, #180]	; (1ef58 <nrf_flash_sync_exe+0x148>)
   1eea4:	21af      	movs	r1, #175	; 0xaf
   1eea6:	f007 fb23 	bl	264f0 <assert_post_action>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1eeaa:	f04f 30ff 	mov.w	r0, #4294967295
   1eeae:	f04f 31ff 	mov.w	r1, #4294967295
   1eeb2:	f7fe ff65 	bl	1dd80 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1eeb6:	b140      	cbz	r0, 1eeca <nrf_flash_sync_exe+0xba>
   1eeb8:	4927      	ldr	r1, [pc, #156]	; (1ef58 <nrf_flash_sync_exe+0x148>)
   1eeba:	4828      	ldr	r0, [pc, #160]	; (1ef5c <nrf_flash_sync_exe+0x14c>)
   1eebc:	22b2      	movs	r2, #178	; 0xb2
   1eebe:	f007 fb1e 	bl	264fe <assert_print>
   1eec2:	4825      	ldr	r0, [pc, #148]	; (1ef58 <nrf_flash_sync_exe+0x148>)
   1eec4:	21b2      	movs	r1, #178	; 0xb2
   1eec6:	f007 fb13 	bl	264f0 <assert_post_action>
	ret = mpsl_timeslot_request(_context.session_id, req);
   1eeca:	4928      	ldr	r1, [pc, #160]	; (1ef6c <nrf_flash_sync_exe+0x15c>)
   1eecc:	7e20      	ldrb	r0, [r4, #24]
   1eece:	f7ee fab3 	bl	d438 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   1eed2:	b140      	cbz	r0, 1eee6 <nrf_flash_sync_exe+0xd6>
   1eed4:	4920      	ldr	r1, [pc, #128]	; (1ef58 <nrf_flash_sync_exe+0x148>)
   1eed6:	4821      	ldr	r0, [pc, #132]	; (1ef5c <nrf_flash_sync_exe+0x14c>)
   1eed8:	22b4      	movs	r2, #180	; 0xb4
   1eeda:	f007 fb10 	bl	264fe <assert_print>
   1eede:	481e      	ldr	r0, [pc, #120]	; (1ef58 <nrf_flash_sync_exe+0x148>)
   1eee0:	21b4      	movs	r1, #180	; 0xb4
   1eee2:	f007 fb05 	bl	264f0 <assert_post_action>
	MULTITHREADING_LOCK_RELEASE();
   1eee6:	f7fe ff53 	bl	1dd90 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   1eeea:	4a21      	ldr	r2, [pc, #132]	; (1ef70 <nrf_flash_sync_exe+0x160>)
   1eeec:	481c      	ldr	r0, [pc, #112]	; (1ef60 <nrf_flash_sync_exe+0x150>)
   1eeee:	2300      	movs	r3, #0
   1eef0:	f001 fd5a 	bl	209a8 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1eef4:	2800      	cmp	r0, #0
   1eef6:	da0e      	bge.n	1ef16 <nrf_flash_sync_exe+0x106>
		LOG_ERR("timeout");
   1eef8:	481e      	ldr	r0, [pc, #120]	; (1ef74 <nrf_flash_sync_exe+0x164>)
   1eefa:	2145      	movs	r1, #69	; 0x45
   1eefc:	f007 fb0d 	bl	2651a <z_log_minimal_printk>
   1ef00:	f3bf 8f5b 	dmb	ish
   1ef04:	2301      	movs	r3, #1
   1ef06:	e855 2f00 	ldrex	r2, [r5]
   1ef0a:	e845 3100 	strex	r1, r3, [r5]
   1ef0e:	2900      	cmp	r1, #0
   1ef10:	d1f9      	bne.n	1ef06 <nrf_flash_sync_exe+0xf6>
   1ef12:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ef16:	f04f 30ff 	mov.w	r0, #4294967295
   1ef1a:	f04f 31ff 	mov.w	r1, #4294967295
   1ef1e:	f7fe ff2f 	bl	1dd80 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1ef22:	b140      	cbz	r0, 1ef36 <nrf_flash_sync_exe+0x126>
   1ef24:	490c      	ldr	r1, [pc, #48]	; (1ef58 <nrf_flash_sync_exe+0x148>)
   1ef26:	480d      	ldr	r0, [pc, #52]	; (1ef5c <nrf_flash_sync_exe+0x14c>)
   1ef28:	22bf      	movs	r2, #191	; 0xbf
   1ef2a:	f007 fae8 	bl	264fe <assert_print>
   1ef2e:	480a      	ldr	r0, [pc, #40]	; (1ef58 <nrf_flash_sync_exe+0x148>)
   1ef30:	21bf      	movs	r1, #191	; 0xbf
   1ef32:	f007 fadd 	bl	264f0 <assert_post_action>
	mpsl_timeslot_session_close(_context.session_id);
   1ef36:	7e20      	ldrb	r0, [r4, #24]
   1ef38:	f7ee fab9 	bl	d4ae <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1ef3c:	f7fe ff28 	bl	1dd90 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ef40:	f3bf 8f5b 	dmb	ish
   1ef44:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1ef46:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   1ef4a:	b113      	cbz	r3, 1ef52 <nrf_flash_sync_exe+0x142>
	z_impl_k_sem_reset(sem);
   1ef4c:	4804      	ldr	r0, [pc, #16]	; (1ef60 <nrf_flash_sync_exe+0x150>)
   1ef4e:	f001 fd95 	bl	20a7c <z_impl_k_sem_reset>
	return _context.status;
   1ef52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1ef54:	e780      	b.n	1ee58 <nrf_flash_sync_exe+0x48>
   1ef56:	bf00      	nop
   1ef58:	0002d571 	.word	0x0002d571
   1ef5c:	0002aa75 	.word	0x0002aa75
   1ef60:	20002850 	.word	0x20002850
   1ef64:	0001ed0d 	.word	0x0001ed0d
   1ef68:	0002d5ab 	.word	0x0002d5ab
   1ef6c:	20002874 	.word	0x20002874
   1ef70:	000b7b44 	.word	0x000b7b44
   1ef74:	0002d5d6 	.word	0x0002d5d6

0001ef78 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef78:	4b07      	ldr	r3, [pc, #28]	; (1ef98 <nrf_flash_sync_check_time_limit+0x20>)
   1ef7a:	2201      	movs	r2, #1
   1ef7c:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   1ef7e:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   1ef82:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   1ef86:	4418      	add	r0, r3
   1ef88:	4b04      	ldr	r3, [pc, #16]	; (1ef9c <nrf_flash_sync_check_time_limit+0x24>)
   1ef8a:	69db      	ldr	r3, [r3, #28]
}
   1ef8c:	4298      	cmp	r0, r3
   1ef8e:	bf34      	ite	cc
   1ef90:	2000      	movcc	r0, #0
   1ef92:	2001      	movcs	r0, #1
   1ef94:	4770      	bx	lr
   1ef96:	bf00      	nop
   1ef98:	40008000 	.word	0x40008000
   1ef9c:	20002850 	.word	0x20002850

0001efa0 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   1efa0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1efa4:	4905      	ldr	r1, [pc, #20]	; (1efbc <__NVIC_SystemReset+0x1c>)
   1efa6:	4b06      	ldr	r3, [pc, #24]	; (1efc0 <__NVIC_SystemReset+0x20>)
   1efa8:	68ca      	ldr	r2, [r1, #12]
   1efaa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1efae:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1efb0:	60cb      	str	r3, [r1, #12]
   1efb2:	f3bf 8f4f 	dsb	sy
    __NOP();
   1efb6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1efb8:	e7fd      	b.n	1efb6 <__NVIC_SystemReset+0x16>
   1efba:	bf00      	nop
   1efbc:	e000ed00 	.word	0xe000ed00
   1efc0:	05fa0004 	.word	0x05fa0004

0001efc4 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1efc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1efc8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1efcc:	2a08      	cmp	r2, #8
   1efce:	d106      	bne.n	1efde <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1efd0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1efd4:	2b05      	cmp	r3, #5
   1efd6:	d802      	bhi.n	1efde <nrf52_errata_103+0x1a>
   1efd8:	4a02      	ldr	r2, [pc, #8]	; (1efe4 <nrf52_errata_103+0x20>)
   1efda:	5cd0      	ldrb	r0, [r2, r3]
   1efdc:	4770      	bx	lr
        return false;
   1efde:	2000      	movs	r0, #0
}
   1efe0:	4770      	bx	lr
   1efe2:	bf00      	nop
   1efe4:	0002d5f9 	.word	0x0002d5f9

0001efe8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1efe8:	4a02      	ldr	r2, [pc, #8]	; (1eff4 <nvmc_wait+0xc>)
   1efea:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1efee:	2b00      	cmp	r3, #0
   1eff0:	d0fb      	beq.n	1efea <nvmc_wait+0x2>
}
   1eff2:	4770      	bx	lr
   1eff4:	4001e000 	.word	0x4001e000

0001eff8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1eff8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1effa:	f00a fb65 	bl	296c8 <nrf52_errata_136>
   1effe:	b140      	cbz	r0, 1f012 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1f000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f004:	2200      	movs	r2, #0
   1f006:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1f00a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1f00e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1f012:	f00a fb59 	bl	296c8 <nrf52_errata_136>
   1f016:	2800      	cmp	r0, #0
   1f018:	d046      	beq.n	1f0a8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f01e:	4b65      	ldr	r3, [pc, #404]	; (1f1b4 <SystemInit+0x1bc>)
   1f020:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1f024:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f028:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1f02c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f030:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1f034:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f038:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1f03c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f040:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1f044:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f048:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1f04c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f050:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1f054:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f058:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1f05c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f060:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1f064:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f068:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1f06c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f070:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1f074:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f078:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1f07c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f080:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1f084:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f088:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1f08c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f090:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f094:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f098:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f09c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f0a0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f0a4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1f0a8:	f7ff ff8c 	bl	1efc4 <nrf52_errata_103>
   1f0ac:	b118      	cbz	r0, 1f0b6 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1f0ae:	4b42      	ldr	r3, [pc, #264]	; (1f1b8 <SystemInit+0x1c0>)
   1f0b0:	4a42      	ldr	r2, [pc, #264]	; (1f1bc <SystemInit+0x1c4>)
   1f0b2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1f0b6:	f7ff ff85 	bl	1efc4 <nrf52_errata_103>
   1f0ba:	b118      	cbz	r0, 1f0c4 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1f0bc:	4b40      	ldr	r3, [pc, #256]	; (1f1c0 <SystemInit+0x1c8>)
   1f0be:	22fb      	movs	r2, #251	; 0xfb
   1f0c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1f0c4:	f7ff ff7e 	bl	1efc4 <nrf52_errata_103>
   1f0c8:	b170      	cbz	r0, 1f0e8 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1f0ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1f0ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f0d2:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1f0d6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1f0da:	f022 020f 	bic.w	r2, r2, #15
   1f0de:	f003 030f 	and.w	r3, r3, #15
   1f0e2:	4313      	orrs	r3, r2
   1f0e4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1f0e8:	f7ff ff6c 	bl	1efc4 <nrf52_errata_103>
   1f0ec:	b120      	cbz	r0, 1f0f8 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1f0ee:	4b35      	ldr	r3, [pc, #212]	; (1f1c4 <SystemInit+0x1cc>)
   1f0f0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f0f4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1f0f8:	f00a fae6 	bl	296c8 <nrf52_errata_136>
   1f0fc:	b148      	cbz	r0, 1f112 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f0fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f102:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f106:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f108:	bf44      	itt	mi
   1f10a:	f06f 0201 	mvnmi.w	r2, #1
   1f10e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f112:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f116:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f11a:	2a08      	cmp	r2, #8
   1f11c:	d10e      	bne.n	1f13c <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f11e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1f122:	2b05      	cmp	r3, #5
   1f124:	d802      	bhi.n	1f12c <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1f126:	4a28      	ldr	r2, [pc, #160]	; (1f1c8 <SystemInit+0x1d0>)
   1f128:	5cd3      	ldrb	r3, [r2, r3]
   1f12a:	b13b      	cbz	r3, 1f13c <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1f12c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f130:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1f134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f138:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   1f13c:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   1f140:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1f144:	07db      	lsls	r3, r3, #31
   1f146:	d514      	bpl.n	1f172 <SystemInit+0x17a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f148:	4820      	ldr	r0, [pc, #128]	; (1f1cc <SystemInit+0x1d4>)
   1f14a:	2301      	movs	r3, #1
   1f14c:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1f150:	f7ff ff4a 	bl	1efe8 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   1f154:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1f158:	f023 0301 	bic.w	r3, r3, #1
   1f15c:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   1f160:	f7ff ff42 	bl	1efe8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f164:	2300      	movs	r3, #0
   1f166:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1f16a:	f7ff ff3d 	bl	1efe8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   1f16e:	f7ff ff17 	bl	1efa0 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f172:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   1f176:	2b00      	cmp	r3, #0
   1f178:	db03      	blt.n	1f182 <SystemInit+0x18a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f17a:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f17e:	2b00      	cmp	r3, #0
   1f180:	da14      	bge.n	1f1ac <SystemInit+0x1b4>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f182:	4912      	ldr	r1, [pc, #72]	; (1f1cc <SystemInit+0x1d4>)
   1f184:	2301      	movs	r3, #1
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f186:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f18a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f18e:	2412      	movs	r4, #18
    nvmc_wait();
   1f190:	f7ff ff2a 	bl	1efe8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f194:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1f198:	f7ff ff26 	bl	1efe8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1f19c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1f1a0:	f7ff ff22 	bl	1efe8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f1a4:	2300      	movs	r3, #0
   1f1a6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   1f1aa:	e7de      	b.n	1f16a <SystemInit+0x172>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1f1ac:	4b08      	ldr	r3, [pc, #32]	; (1f1d0 <SystemInit+0x1d8>)
   1f1ae:	4a09      	ldr	r2, [pc, #36]	; (1f1d4 <SystemInit+0x1dc>)
   1f1b0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1f1b2:	bd10      	pop	{r4, pc}
   1f1b4:	4000c000 	.word	0x4000c000
   1f1b8:	40005000 	.word	0x40005000
   1f1bc:	00038148 	.word	0x00038148
   1f1c0:	4000f000 	.word	0x4000f000
   1f1c4:	40029000 	.word	0x40029000
   1f1c8:	0002d5f3 	.word	0x0002d5f3
   1f1cc:	4001e000 	.word	0x4001e000
   1f1d0:	200005fc 	.word	0x200005fc
   1f1d4:	03d09000 	.word	0x03d09000

0001f1d8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1f1d8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f1da:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1f1dc:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1f1de:	fab2 f382 	clz	r3, r2
   1f1e2:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   1f1e6:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   1f1e8:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   1f1ea:	d014      	beq.n	1f216 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f1ec:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f1f0:	fa05 f303 	lsl.w	r3, r5, r3
   1f1f4:	ea22 0303 	bic.w	r3, r2, r3
   1f1f8:	e850 6f00 	ldrex	r6, [r0]
   1f1fc:	4296      	cmp	r6, r2
   1f1fe:	d104      	bne.n	1f20a <nrfx_flag32_alloc+0x32>
   1f200:	e840 3c00 	strex	ip, r3, [r0]
   1f204:	f1bc 0f00 	cmp.w	ip, #0
   1f208:	d1f6      	bne.n	1f1f8 <nrfx_flag32_alloc+0x20>
   1f20a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f20e:	d1e5      	bne.n	1f1dc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1f210:	4802      	ldr	r0, [pc, #8]	; (1f21c <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   1f212:	700c      	strb	r4, [r1, #0]
}
   1f214:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1f216:	4802      	ldr	r0, [pc, #8]	; (1f220 <nrfx_flag32_alloc+0x48>)
   1f218:	e7fc      	b.n	1f214 <nrfx_flag32_alloc+0x3c>
   1f21a:	bf00      	nop
   1f21c:	0bad0000 	.word	0x0bad0000
   1f220:	0bad0002 	.word	0x0bad0002

0001f224 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1f224:	6803      	ldr	r3, [r0, #0]
   1f226:	40cb      	lsrs	r3, r1
   1f228:	07db      	lsls	r3, r3, #31
{
   1f22a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1f22c:	d415      	bmi.n	1f25a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1f22e:	2301      	movs	r3, #1
   1f230:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1f234:	6803      	ldr	r3, [r0, #0]
   1f236:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1f23a:	ea41 0203 	orr.w	r2, r1, r3
   1f23e:	e850 4f00 	ldrex	r4, [r0]
   1f242:	429c      	cmp	r4, r3
   1f244:	d104      	bne.n	1f250 <nrfx_flag32_free+0x2c>
   1f246:	e840 2c00 	strex	ip, r2, [r0]
   1f24a:	f1bc 0f00 	cmp.w	ip, #0
   1f24e:	d1f6      	bne.n	1f23e <nrfx_flag32_free+0x1a>
   1f250:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f254:	d1ee      	bne.n	1f234 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1f256:	4802      	ldr	r0, [pc, #8]	; (1f260 <nrfx_flag32_free+0x3c>)
}
   1f258:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f25a:	4802      	ldr	r0, [pc, #8]	; (1f264 <nrfx_flag32_free+0x40>)
   1f25c:	e7fc      	b.n	1f258 <nrfx_flag32_free+0x34>
   1f25e:	bf00      	nop
   1f260:	0bad0000 	.word	0x0bad0000
   1f264:	0bad0004 	.word	0x0bad0004

0001f268 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f268:	4b03      	ldr	r3, [pc, #12]	; (1f278 <pin_in_use_by_te+0x10>)
   1f26a:	3008      	adds	r0, #8
   1f26c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f270:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1f274:	4770      	bx	lr
   1f276:	bf00      	nop
   1f278:	20000600 	.word	0x20000600

0001f27c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f27c:	4b04      	ldr	r3, [pc, #16]	; (1f290 <pin_has_trigger+0x14>)
   1f27e:	3008      	adds	r0, #8
   1f280:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f284:	f010 001c 	ands.w	r0, r0, #28
   1f288:	bf18      	it	ne
   1f28a:	2001      	movne	r0, #1
   1f28c:	4770      	bx	lr
   1f28e:	bf00      	nop
   1f290:	20000600 	.word	0x20000600

0001f294 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f294:	4b03      	ldr	r3, [pc, #12]	; (1f2a4 <pin_is_output+0x10>)
   1f296:	3008      	adds	r0, #8
   1f298:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f29c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1f2a0:	4770      	bx	lr
   1f2a2:	bf00      	nop
   1f2a4:	20000600 	.word	0x20000600

0001f2a8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1f2a8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f2aa:	f100 0308 	add.w	r3, r0, #8
   1f2ae:	4c0c      	ldr	r4, [pc, #48]	; (1f2e0 <call_handler+0x38>)
   1f2b0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1f2b4:	05da      	lsls	r2, r3, #23
{
   1f2b6:	4605      	mov	r5, r0
   1f2b8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f2ba:	d507      	bpl.n	1f2cc <call_handler+0x24>
   1f2bc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1f2c0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1f2c4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1f2c8:	6852      	ldr	r2, [r2, #4]
   1f2ca:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1f2cc:	68a3      	ldr	r3, [r4, #8]
   1f2ce:	b12b      	cbz	r3, 1f2dc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f2d0:	68e2      	ldr	r2, [r4, #12]
   1f2d2:	4631      	mov	r1, r6
   1f2d4:	4628      	mov	r0, r5
    }
}
   1f2d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f2da:	4718      	bx	r3
}
   1f2dc:	bd70      	pop	{r4, r5, r6, pc}
   1f2de:	bf00      	nop
   1f2e0:	20000600 	.word	0x20000600

0001f2e4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f2e4:	4a19      	ldr	r2, [pc, #100]	; (1f34c <release_handler+0x68>)
   1f2e6:	3008      	adds	r0, #8
{
   1f2e8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f2ea:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1f2ee:	05d9      	lsls	r1, r3, #23
   1f2f0:	d51d      	bpl.n	1f32e <release_handler+0x4a>
   1f2f2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1f2f6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f2fa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f2fe:	f102 0410 	add.w	r4, r2, #16
   1f302:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f304:	f834 3b02 	ldrh.w	r3, [r4], #2
   1f308:	f413 7f80 	tst.w	r3, #256	; 0x100
   1f30c:	d003      	beq.n	1f316 <release_handler+0x32>
   1f30e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1f312:	4299      	cmp	r1, r3
   1f314:	d00b      	beq.n	1f32e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f316:	3001      	adds	r0, #1
   1f318:	2830      	cmp	r0, #48	; 0x30
   1f31a:	d1f3      	bne.n	1f304 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1f31c:	2300      	movs	r3, #0
   1f31e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f322:	480b      	ldr	r0, [pc, #44]	; (1f350 <release_handler+0x6c>)
   1f324:	f7ff ff7e 	bl	1f224 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f328:	4b0a      	ldr	r3, [pc, #40]	; (1f354 <release_handler+0x70>)
   1f32a:	4298      	cmp	r0, r3
   1f32c:	d100      	bne.n	1f330 <release_handler+0x4c>
}
   1f32e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f330:	4909      	ldr	r1, [pc, #36]	; (1f358 <release_handler+0x74>)
   1f332:	480a      	ldr	r0, [pc, #40]	; (1f35c <release_handler+0x78>)
   1f334:	f44f 7299 	mov.w	r2, #306	; 0x132
   1f338:	f007 f8e1 	bl	264fe <assert_print>
}
   1f33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f340:	4805      	ldr	r0, [pc, #20]	; (1f358 <release_handler+0x74>)
   1f342:	f44f 7199 	mov.w	r1, #306	; 0x132
   1f346:	f007 b8d3 	b.w	264f0 <assert_post_action>
   1f34a:	bf00      	nop
   1f34c:	20000600 	.word	0x20000600
   1f350:	20000674 	.word	0x20000674
   1f354:	0bad0000 	.word	0x0bad0000
   1f358:	0002d5ff 	.word	0x0002d5ff
   1f35c:	0002aa75 	.word	0x0002aa75

0001f360 <pin_handler_trigger_uninit>:
{
   1f360:	b538      	push	{r3, r4, r5, lr}
   1f362:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1f364:	f7ff ff80 	bl	1f268 <pin_in_use_by_te>
   1f368:	4c09      	ldr	r4, [pc, #36]	; (1f390 <pin_handler_trigger_uninit+0x30>)
   1f36a:	f102 0508 	add.w	r5, r2, #8
   1f36e:	b140      	cbz	r0, 1f382 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f370:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1f374:	4907      	ldr	r1, [pc, #28]	; (1f394 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1f376:	0b5b      	lsrs	r3, r3, #13
   1f378:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1f37c:	2000      	movs	r0, #0
   1f37e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1f382:	4610      	mov	r0, r2
   1f384:	f7ff ffae 	bl	1f2e4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1f388:	2300      	movs	r3, #0
   1f38a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1f38e:	bd38      	pop	{r3, r4, r5, pc}
   1f390:	20000600 	.word	0x20000600
   1f394:	40006000 	.word	0x40006000

0001f398 <nrf_gpio_pin_port_decode>:
{
   1f398:	b510      	push	{r4, lr}
   1f39a:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f39c:	6800      	ldr	r0, [r0, #0]
   1f39e:	f00a f99d 	bl	296dc <nrf_gpio_pin_present_check>
   1f3a2:	b950      	cbnz	r0, 1f3ba <nrf_gpio_pin_port_decode+0x22>
   1f3a4:	4911      	ldr	r1, [pc, #68]	; (1f3ec <nrf_gpio_pin_port_decode+0x54>)
   1f3a6:	4812      	ldr	r0, [pc, #72]	; (1f3f0 <nrf_gpio_pin_port_decode+0x58>)
   1f3a8:	f240 2247 	movw	r2, #583	; 0x247
   1f3ac:	f007 f8a7 	bl	264fe <assert_print>
   1f3b0:	480e      	ldr	r0, [pc, #56]	; (1f3ec <nrf_gpio_pin_port_decode+0x54>)
   1f3b2:	f240 2147 	movw	r1, #583	; 0x247
   1f3b6:	f007 f89b 	bl	264f0 <assert_post_action>
    uint32_t pin_number = *p_pin;
   1f3ba:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1f3bc:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f3c0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1f3c2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f3c4:	d00c      	beq.n	1f3e0 <nrf_gpio_pin_port_decode+0x48>
   1f3c6:	2b01      	cmp	r3, #1
   1f3c8:	d00d      	beq.n	1f3e6 <nrf_gpio_pin_port_decode+0x4e>
            NRFX_ASSERT(0);
   1f3ca:	4908      	ldr	r1, [pc, #32]	; (1f3ec <nrf_gpio_pin_port_decode+0x54>)
   1f3cc:	4808      	ldr	r0, [pc, #32]	; (1f3f0 <nrf_gpio_pin_port_decode+0x58>)
   1f3ce:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1f3d2:	f007 f894 	bl	264fe <assert_print>
   1f3d6:	4805      	ldr	r0, [pc, #20]	; (1f3ec <nrf_gpio_pin_port_decode+0x54>)
   1f3d8:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1f3dc:	f007 f888 	bl	264f0 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f3e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1f3e4:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   1f3e6:	4803      	ldr	r0, [pc, #12]	; (1f3f4 <nrf_gpio_pin_port_decode+0x5c>)
   1f3e8:	e7fc      	b.n	1f3e4 <nrf_gpio_pin_port_decode+0x4c>
   1f3ea:	bf00      	nop
   1f3ec:	0002d0f6 	.word	0x0002d0f6
   1f3f0:	0002aa75 	.word	0x0002aa75
   1f3f4:	50000300 	.word	0x50000300

0001f3f8 <nrfx_gpiote_input_configure>:
{
   1f3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3fa:	4604      	mov	r4, r0
   1f3fc:	b085      	sub	sp, #20
   1f3fe:	4617      	mov	r7, r2
   1f400:	461d      	mov	r5, r3
    if (p_input_config)
   1f402:	b1f1      	cbz	r1, 1f442 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   1f404:	f00a f97b 	bl	296fe <pin_is_task_output>
   1f408:	b110      	cbz	r0, 1f410 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   1f40a:	484d      	ldr	r0, [pc, #308]	; (1f540 <nrfx_gpiote_input_configure+0x148>)
}
   1f40c:	b005      	add	sp, #20
   1f40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f410:	460b      	mov	r3, r1
   1f412:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f416:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1f41a:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f41e:	f10d 020f 	add.w	r2, sp, #15
   1f422:	f10d 010e 	add.w	r1, sp, #14
   1f426:	4620      	mov	r0, r4
   1f428:	f00a f978 	bl	2971c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f42c:	4a45      	ldr	r2, [pc, #276]	; (1f544 <nrfx_gpiote_input_configure+0x14c>)
   1f42e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1f432:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f436:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f43a:	f043 0301 	orr.w	r3, r3, #1
   1f43e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1f442:	b197      	cbz	r7, 1f46a <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
   1f444:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f446:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1f448:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1f44a:	f7ff ff23 	bl	1f294 <pin_is_output>
   1f44e:	b180      	cbz	r0, 1f472 <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
   1f450:	2a00      	cmp	r2, #0
   1f452:	d1da      	bne.n	1f40a <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f454:	4a3b      	ldr	r2, [pc, #236]	; (1f544 <nrfx_gpiote_input_configure+0x14c>)
   1f456:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f45a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f45e:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f462:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1f466:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1f46a:	2d00      	cmp	r5, #0
   1f46c:	d13d      	bne.n	1f4ea <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
   1f46e:	4836      	ldr	r0, [pc, #216]	; (1f548 <nrfx_gpiote_input_configure+0x150>)
   1f470:	e7cc      	b.n	1f40c <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1f472:	4f34      	ldr	r7, [pc, #208]	; (1f544 <nrfx_gpiote_input_configure+0x14c>)
   1f474:	f104 0c08 	add.w	ip, r4, #8
   1f478:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
   1f47c:	f021 0120 	bic.w	r1, r1, #32
   1f480:	04c9      	lsls	r1, r1, #19
   1f482:	0cc9      	lsrs	r1, r1, #19
   1f484:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
   1f488:	2a00      	cmp	r2, #0
   1f48a:	d0e3      	beq.n	1f454 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
   1f48c:	2e03      	cmp	r6, #3
   1f48e:	d8bc      	bhi.n	1f40a <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1f490:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1f492:	b92e      	cbnz	r6, 1f4a0 <nrfx_gpiote_input_configure+0xa8>
   1f494:	4a2d      	ldr	r2, [pc, #180]	; (1f54c <nrfx_gpiote_input_configure+0x154>)
   1f496:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1f49a:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1f49e:	e7d9      	b.n	1f454 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f4a0:	009a      	lsls	r2, r3, #2
   1f4a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f4a6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f4aa:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
   1f4ae:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f4b2:	f020 0003 	bic.w	r0, r0, #3
   1f4b6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f4ba:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f4be:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1f4c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1f4c6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f4ca:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1f4ce:	0220      	lsls	r0, r4, #8
   1f4d0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   1f4d4:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   1f4d8:	ea40 000e 	orr.w	r0, r0, lr
   1f4dc:	f041 0120 	orr.w	r1, r1, #32
   1f4e0:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
   1f4e4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1f4e8:	e7b4      	b.n	1f454 <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1f4ea:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1f4ee:	4620      	mov	r0, r4
   1f4f0:	f7ff fef8 	bl	1f2e4 <release_handler>
    if (!handler)
   1f4f4:	2e00      	cmp	r6, #0
   1f4f6:	d0ba      	beq.n	1f46e <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f4f8:	4d12      	ldr	r5, [pc, #72]	; (1f544 <nrfx_gpiote_input_configure+0x14c>)
   1f4fa:	682b      	ldr	r3, [r5, #0]
   1f4fc:	429e      	cmp	r6, r3
   1f4fe:	d104      	bne.n	1f50a <nrfx_gpiote_input_configure+0x112>
   1f500:	686b      	ldr	r3, [r5, #4]
   1f502:	429f      	cmp	r7, r3
   1f504:	d101      	bne.n	1f50a <nrfx_gpiote_input_configure+0x112>
   1f506:	2200      	movs	r2, #0
   1f508:	e00a      	b.n	1f520 <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1f50a:	4811      	ldr	r0, [pc, #68]	; (1f550 <nrfx_gpiote_input_configure+0x158>)
   1f50c:	f10d 010f 	add.w	r1, sp, #15
   1f510:	f7ff fe62 	bl	1f1d8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1f514:	4b0c      	ldr	r3, [pc, #48]	; (1f548 <nrfx_gpiote_input_configure+0x150>)
   1f516:	4298      	cmp	r0, r3
   1f518:	f47f af78 	bne.w	1f40c <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   1f51c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1f520:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1f524:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f528:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1f52a:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f52c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1f530:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1f534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f538:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1f53c:	e797      	b.n	1f46e <nrfx_gpiote_input_configure+0x76>
   1f53e:	bf00      	nop
   1f540:	0bad0004 	.word	0x0bad0004
   1f544:	20000600 	.word	0x20000600
   1f548:	0bad0000 	.word	0x0bad0000
   1f54c:	40006000 	.word	0x40006000
   1f550:	20000674 	.word	0x20000674

0001f554 <nrfx_gpiote_output_configure>:
{
   1f554:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f556:	4604      	mov	r4, r0
   1f558:	b085      	sub	sp, #20
   1f55a:	4615      	mov	r5, r2
    if (p_config)
   1f55c:	b321      	cbz	r1, 1f5a8 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1f55e:	f7ff fe99 	bl	1f294 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1f562:	b920      	cbnz	r0, 1f56e <nrfx_gpiote_output_configure+0x1a>
   1f564:	4620      	mov	r0, r4
   1f566:	f7ff fe7f 	bl	1f268 <pin_in_use_by_te>
   1f56a:	2800      	cmp	r0, #0
   1f56c:	d15e      	bne.n	1f62c <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1f56e:	4620      	mov	r0, r4
   1f570:	f7ff fe84 	bl	1f27c <pin_has_trigger>
   1f574:	b110      	cbz	r0, 1f57c <nrfx_gpiote_output_configure+0x28>
   1f576:	784b      	ldrb	r3, [r1, #1]
   1f578:	2b01      	cmp	r3, #1
   1f57a:	d057      	beq.n	1f62c <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f57c:	2301      	movs	r3, #1
   1f57e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1f582:	2300      	movs	r3, #0
   1f584:	e9cd 1300 	strd	r1, r3, [sp]
   1f588:	1c4a      	adds	r2, r1, #1
   1f58a:	1c8b      	adds	r3, r1, #2
   1f58c:	4620      	mov	r0, r4
   1f58e:	f10d 010f 	add.w	r1, sp, #15
   1f592:	f00a f8c3 	bl	2971c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1f596:	4a26      	ldr	r2, [pc, #152]	; (1f630 <nrfx_gpiote_output_configure+0xdc>)
   1f598:	f104 0108 	add.w	r1, r4, #8
   1f59c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f5a0:	f043 0303 	orr.w	r3, r3, #3
   1f5a4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1f5a8:	b915      	cbnz	r5, 1f5b0 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1f5aa:	4822      	ldr	r0, [pc, #136]	; (1f634 <nrfx_gpiote_output_configure+0xe0>)
}
   1f5ac:	b005      	add	sp, #20
   1f5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1f5b0:	4620      	mov	r0, r4
   1f5b2:	f7ff fe6f 	bl	1f294 <pin_is_output>
        if (pin_is_input(pin))
   1f5b6:	b3c8      	cbz	r0, 1f62c <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f5b8:	4e1d      	ldr	r6, [pc, #116]	; (1f630 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   1f5ba:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f5be:	f104 0708 	add.w	r7, r4, #8
   1f5c2:	4661      	mov	r1, ip
   1f5c4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1f5c8:	0089      	lsls	r1, r1, #2
   1f5ca:	f020 0020 	bic.w	r0, r0, #32
   1f5ce:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f5d2:	04c0      	lsls	r0, r0, #19
   1f5d4:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1f5d8:	0cc0      	lsrs	r0, r0, #19
   1f5da:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1f5de:	2300      	movs	r3, #0
   1f5e0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1f5e4:	786a      	ldrb	r2, [r5, #1]
   1f5e6:	2a00      	cmp	r2, #0
   1f5e8:	d0df      	beq.n	1f5aa <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1f5ea:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1f5ee:	78ad      	ldrb	r5, [r5, #2]
   1f5f0:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1f5f4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f5f8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f5fc:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1f600:	0223      	lsls	r3, r4, #8
   1f602:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f606:	0412      	lsls	r2, r2, #16
   1f608:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f60c:	ea43 030e 	orr.w	r3, r3, lr
   1f610:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f612:	052a      	lsls	r2, r5, #20
   1f614:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f618:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f61c:	4313      	orrs	r3, r2
   1f61e:	f040 0020 	orr.w	r0, r0, #32
   1f622:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1f626:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f62a:	e7be      	b.n	1f5aa <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
   1f62c:	4802      	ldr	r0, [pc, #8]	; (1f638 <nrfx_gpiote_output_configure+0xe4>)
   1f62e:	e7bd      	b.n	1f5ac <nrfx_gpiote_output_configure+0x58>
   1f630:	20000600 	.word	0x20000600
   1f634:	0bad0000 	.word	0x0bad0000
   1f638:	0bad0004 	.word	0x0bad0004

0001f63c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1f63c:	4b01      	ldr	r3, [pc, #4]	; (1f644 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1f63e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1f642:	4770      	bx	lr
   1f644:	20000600 	.word	0x20000600

0001f648 <nrfx_gpiote_channel_get>:
{
   1f648:	b538      	push	{r3, r4, r5, lr}
   1f64a:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   1f64c:	460d      	mov	r5, r1
   1f64e:	b951      	cbnz	r1, 1f666 <nrfx_gpiote_channel_get+0x1e>
   1f650:	490c      	ldr	r1, [pc, #48]	; (1f684 <nrfx_gpiote_channel_get+0x3c>)
   1f652:	480d      	ldr	r0, [pc, #52]	; (1f688 <nrfx_gpiote_channel_get+0x40>)
   1f654:	f240 2235 	movw	r2, #565	; 0x235
   1f658:	f006 ff51 	bl	264fe <assert_print>
   1f65c:	4809      	ldr	r0, [pc, #36]	; (1f684 <nrfx_gpiote_channel_get+0x3c>)
   1f65e:	f240 2135 	movw	r1, #565	; 0x235
   1f662:	f006 ff45 	bl	264f0 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1f666:	4620      	mov	r0, r4
   1f668:	f7ff fdfe 	bl	1f268 <pin_in_use_by_te>
   1f66c:	b138      	cbz	r0, 1f67e <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f66e:	4b07      	ldr	r3, [pc, #28]	; (1f68c <nrfx_gpiote_channel_get+0x44>)
        return NRFX_SUCCESS;
   1f670:	4807      	ldr	r0, [pc, #28]	; (1f690 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f672:	3408      	adds	r4, #8
   1f674:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   1f678:	0b5b      	lsrs	r3, r3, #13
   1f67a:	702b      	strb	r3, [r5, #0]
}
   1f67c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f67e:	4805      	ldr	r0, [pc, #20]	; (1f694 <nrfx_gpiote_channel_get+0x4c>)
   1f680:	e7fc      	b.n	1f67c <nrfx_gpiote_channel_get+0x34>
   1f682:	bf00      	nop
   1f684:	0002d5ff 	.word	0x0002d5ff
   1f688:	0002aa75 	.word	0x0002aa75
   1f68c:	20000600 	.word	0x20000600
   1f690:	0bad0000 	.word	0x0bad0000
   1f694:	0bad0004 	.word	0x0bad0004

0001f698 <nrfx_gpiote_init>:
{
   1f698:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f69a:	4c0f      	ldr	r4, [pc, #60]	; (1f6d8 <nrfx_gpiote_init+0x40>)
   1f69c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1f6a0:	b9bd      	cbnz	r5, 1f6d2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1f6a2:	2260      	movs	r2, #96	; 0x60
   1f6a4:	4629      	mov	r1, r5
   1f6a6:	f104 0010 	add.w	r0, r4, #16
   1f6aa:	f007 fdc7 	bl	2723c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1f6ae:	2006      	movs	r0, #6
   1f6b0:	f7f4 fd08 	bl	140c4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f6b4:	4b09      	ldr	r3, [pc, #36]	; (1f6dc <nrfx_gpiote_init+0x44>)
    return err_code;
   1f6b6:	480a      	ldr	r0, [pc, #40]	; (1f6e0 <nrfx_gpiote_init+0x48>)
   1f6b8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1f6bc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1f6c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1f6c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f6c8:	2301      	movs	r3, #1
   1f6ca:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1f6ce:	6763      	str	r3, [r4, #116]	; 0x74
}
   1f6d0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1f6d2:	4804      	ldr	r0, [pc, #16]	; (1f6e4 <nrfx_gpiote_init+0x4c>)
   1f6d4:	e7fc      	b.n	1f6d0 <nrfx_gpiote_init+0x38>
   1f6d6:	bf00      	nop
   1f6d8:	20000600 	.word	0x20000600
   1f6dc:	40006000 	.word	0x40006000
   1f6e0:	0bad0000 	.word	0x0bad0000
   1f6e4:	0bad0005 	.word	0x0bad0005

0001f6e8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1f6e8:	4b03      	ldr	r3, [pc, #12]	; (1f6f8 <nrfx_gpiote_is_init+0x10>)
   1f6ea:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1f6ee:	3800      	subs	r0, #0
   1f6f0:	bf18      	it	ne
   1f6f2:	2001      	movne	r0, #1
   1f6f4:	4770      	bx	lr
   1f6f6:	bf00      	nop
   1f6f8:	20000600 	.word	0x20000600

0001f6fc <nrfx_gpiote_channel_free>:
{
   1f6fc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1f6fe:	4801      	ldr	r0, [pc, #4]	; (1f704 <nrfx_gpiote_channel_free+0x8>)
   1f700:	f7ff bd90 	b.w	1f224 <nrfx_flag32_free>
   1f704:	20000670 	.word	0x20000670

0001f708 <nrfx_gpiote_channel_alloc>:
{
   1f708:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1f70a:	4801      	ldr	r0, [pc, #4]	; (1f710 <nrfx_gpiote_channel_alloc+0x8>)
   1f70c:	f7ff bd64 	b.w	1f1d8 <nrfx_flag32_alloc>
   1f710:	20000670 	.word	0x20000670

0001f714 <nrfx_gpiote_trigger_enable>:
{
   1f714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f716:	4604      	mov	r4, r0
   1f718:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   1f71a:	f7ff fdaf 	bl	1f27c <pin_has_trigger>
   1f71e:	b950      	cbnz	r0, 1f736 <nrfx_gpiote_trigger_enable+0x22>
   1f720:	492f      	ldr	r1, [pc, #188]	; (1f7e0 <nrfx_gpiote_trigger_enable+0xcc>)
   1f722:	4830      	ldr	r0, [pc, #192]	; (1f7e4 <nrfx_gpiote_trigger_enable+0xd0>)
   1f724:	f240 32df 	movw	r2, #991	; 0x3df
   1f728:	f006 fee9 	bl	264fe <assert_print>
   1f72c:	482c      	ldr	r0, [pc, #176]	; (1f7e0 <nrfx_gpiote_trigger_enable+0xcc>)
   1f72e:	f240 31df 	movw	r1, #991	; 0x3df
   1f732:	f006 fedd 	bl	264f0 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f736:	4620      	mov	r0, r4
   1f738:	f7ff fd96 	bl	1f268 <pin_in_use_by_te>
   1f73c:	4e2a      	ldr	r6, [pc, #168]	; (1f7e8 <nrfx_gpiote_trigger_enable+0xd4>)
   1f73e:	f104 0708 	add.w	r7, r4, #8
   1f742:	b318      	cbz	r0, 1f78c <nrfx_gpiote_trigger_enable+0x78>
    return !pin_is_output(pin);
   1f744:	4620      	mov	r0, r4
   1f746:	f7ff fda5 	bl	1f294 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f74a:	4602      	mov	r2, r0
   1f74c:	b9f0      	cbnz	r0, 1f78c <nrfx_gpiote_trigger_enable+0x78>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f74e:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1f752:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   1f754:	4608      	mov	r0, r1
   1f756:	f009 ffdd 	bl	29714 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   1f75a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1f75e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f762:	601a      	str	r2, [r3, #0]
   1f764:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f766:	008b      	lsls	r3, r1, #2
   1f768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f76c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1f770:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f774:	f042 0201 	orr.w	r2, r2, #1
   1f778:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   1f77c:	b125      	cbz	r5, 1f788 <nrfx_gpiote_trigger_enable+0x74>
    p_reg->INTENSET = mask;
   1f77e:	4a1b      	ldr	r2, [pc, #108]	; (1f7ec <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1f780:	2301      	movs	r3, #1
   1f782:	408b      	lsls	r3, r1
   1f784:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f788:	b003      	add	sp, #12
   1f78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   1f78c:	b955      	cbnz	r5, 1f7a4 <nrfx_gpiote_trigger_enable+0x90>
   1f78e:	4914      	ldr	r1, [pc, #80]	; (1f7e0 <nrfx_gpiote_trigger_enable+0xcc>)
   1f790:	4814      	ldr	r0, [pc, #80]	; (1f7e4 <nrfx_gpiote_trigger_enable+0xd0>)
   1f792:	f240 32ee 	movw	r2, #1006	; 0x3ee
   1f796:	f006 feb2 	bl	264fe <assert_print>
   1f79a:	4811      	ldr	r0, [pc, #68]	; (1f7e0 <nrfx_gpiote_trigger_enable+0xcc>)
   1f79c:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1f7a0:	f006 fea6 	bl	264f0 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f7a4:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1f7a8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1f7ac:	2b04      	cmp	r3, #4
   1f7ae:	d012      	beq.n	1f7d6 <nrfx_gpiote_trigger_enable+0xc2>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1f7b0:	2b05      	cmp	r3, #5
   1f7b2:	d012      	beq.n	1f7da <nrfx_gpiote_trigger_enable+0xc6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f7b4:	a801      	add	r0, sp, #4
   1f7b6:	9401      	str	r4, [sp, #4]
   1f7b8:	f7ff fdee 	bl	1f398 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f7bc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1f7be:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f7c2:	40d9      	lsrs	r1, r3
   1f7c4:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f7c8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f7ca:	4620      	mov	r0, r4
}
   1f7cc:	b003      	add	sp, #12
   1f7ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f7d2:	f009 bfee 	b.w	297b2 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1f7d6:	2103      	movs	r1, #3
   1f7d8:	e7f7      	b.n	1f7ca <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1f7da:	2102      	movs	r1, #2
   1f7dc:	e7f5      	b.n	1f7ca <nrfx_gpiote_trigger_enable+0xb6>
   1f7de:	bf00      	nop
   1f7e0:	0002d5ff 	.word	0x0002d5ff
   1f7e4:	0002aa75 	.word	0x0002aa75
   1f7e8:	20000600 	.word	0x20000600
   1f7ec:	40006000 	.word	0x40006000

0001f7f0 <nrfx_gpiote_trigger_disable>:
{
   1f7f0:	b508      	push	{r3, lr}
   1f7f2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f7f4:	f7ff fd38 	bl	1f268 <pin_in_use_by_te>
   1f7f8:	b1c8      	cbz	r0, 1f82e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1f7fa:	4610      	mov	r0, r2
   1f7fc:	f7ff fd4a 	bl	1f294 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f800:	b9a8      	cbnz	r0, 1f82e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f802:	3208      	adds	r2, #8
   1f804:	4b0d      	ldr	r3, [pc, #52]	; (1f83c <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   1f806:	490e      	ldr	r1, [pc, #56]	; (1f840 <nrfx_gpiote_trigger_disable+0x50>)
   1f808:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f80c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f80e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f810:	409a      	lsls	r2, r3
   1f812:	009b      	lsls	r3, r3, #2
   1f814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f818:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1f81c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f820:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f824:	f022 0203 	bic.w	r2, r2, #3
   1f828:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1f82c:	bd08      	pop	{r3, pc}
   1f82e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f832:	2100      	movs	r1, #0
   1f834:	4610      	mov	r0, r2
   1f836:	f009 bfbc 	b.w	297b2 <nrf_gpio_cfg_sense_set>
   1f83a:	bf00      	nop
   1f83c:	20000600 	.word	0x20000600
   1f840:	40006000 	.word	0x40006000

0001f844 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1f844:	4b0e      	ldr	r3, [pc, #56]	; (1f880 <nrfx_gpiote_pin_uninit+0x3c>)
   1f846:	f100 0208 	add.w	r2, r0, #8
{
   1f84a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1f84c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1f850:	07db      	lsls	r3, r3, #31
{
   1f852:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1f854:	d511      	bpl.n	1f87a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1f856:	f7ff ffcb 	bl	1f7f0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1f85a:	4620      	mov	r0, r4
   1f85c:	f7ff fd80 	bl	1f360 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f860:	a801      	add	r0, sp, #4
   1f862:	9401      	str	r4, [sp, #4]
   1f864:	f7ff fd98 	bl	1f398 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1f868:	9b01      	ldr	r3, [sp, #4]
   1f86a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f86e:	2202      	movs	r2, #2
   1f870:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1f874:	4803      	ldr	r0, [pc, #12]	; (1f884 <nrfx_gpiote_pin_uninit+0x40>)
}
   1f876:	b002      	add	sp, #8
   1f878:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f87a:	4803      	ldr	r0, [pc, #12]	; (1f888 <nrfx_gpiote_pin_uninit+0x44>)
   1f87c:	e7fb      	b.n	1f876 <nrfx_gpiote_pin_uninit+0x32>
   1f87e:	bf00      	nop
   1f880:	20000600 	.word	0x20000600
   1f884:	0bad0000 	.word	0x0bad0000
   1f888:	0bad0004 	.word	0x0bad0004

0001f88c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1f88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f890:	4b65      	ldr	r3, [pc, #404]	; (1fa28 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1f892:	4866      	ldr	r0, [pc, #408]	; (1fa2c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f894:	4966      	ldr	r1, [pc, #408]	; (1fa30 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
   1f896:	2600      	movs	r6, #0
{
   1f898:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1f89a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f89c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f89e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1f8a0:	b135      	cbz	r5, 1f8b0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1f8a2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1f8a6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f8a8:	bf1e      	ittt	ne
   1f8aa:	601c      	strne	r4, [r3, #0]
   1f8ac:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1f8ae:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f8b0:	3304      	adds	r3, #4
   1f8b2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1f8b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f8b8:	d1f1      	bne.n	1f89e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f8ba:	f8df 8170 	ldr.w	r8, [pc, #368]	; 1fa2c <nrfx_gpiote_irq_handler+0x1a0>
   1f8be:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1f8c2:	2b00      	cmp	r3, #0
   1f8c4:	f000 8093 	beq.w	1f9ee <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   1f8c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f8cc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1f8d0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1f8d2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1f8d6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1f8da:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1f8dc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1f8e0:	2700      	movs	r7, #0
            while (latch[i])
   1f8e2:	f10d 0910 	add.w	r9, sp, #16
   1f8e6:	017b      	lsls	r3, r7, #5
   1f8e8:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1f8ea:	f04f 0a01 	mov.w	sl, #1
   1f8ee:	e04b      	b.n	1f988 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   1f8f0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f8f2:	4a50      	ldr	r2, [pc, #320]	; (1fa34 <nrfx_gpiote_irq_handler+0x1a8>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1f8f4:	fa94 f4a4 	rbit	r4, r4
   1f8f8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1f8fc:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f8fe:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1f902:	08e0      	lsrs	r0, r4, #3
   1f904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1f908:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   1f90a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1f90e:	fa0a fc02 	lsl.w	ip, sl, r2
   1f912:	f819 2000 	ldrb.w	r2, [r9, r0]
   1f916:	ea22 020c 	bic.w	r2, r2, ip
   1f91a:	0899      	lsrs	r1, r3, #2
   1f91c:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f920:	a803      	add	r0, sp, #12
   1f922:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1f926:	9101      	str	r1, [sp, #4]
   1f928:	f7ff fd36 	bl	1f398 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f92c:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
   1f92e:	9901      	ldr	r1, [sp, #4]
   1f930:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1f934:	074b      	lsls	r3, r1, #29
   1f936:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f93a:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1f93c:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   1f940:	d529      	bpl.n	1f996 <nrfx_gpiote_irq_handler+0x10a>
        call_handler(pin, trigger);
   1f942:	4659      	mov	r1, fp
   1f944:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f946:	b2d5      	uxtb	r5, r2
   1f948:	f7ff fcae 	bl	1f2a8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f94c:	a803      	add	r0, sp, #12
   1f94e:	9403      	str	r4, [sp, #12]
   1f950:	f7ff fd22 	bl	1f398 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f954:	9b03      	ldr	r3, [sp, #12]
   1f956:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f95a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1f95e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1f962:	429d      	cmp	r5, r3
   1f964:	d107      	bne.n	1f976 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f966:	2100      	movs	r1, #0
   1f968:	4620      	mov	r0, r4
   1f96a:	f009 ff22 	bl	297b2 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1f96e:	4629      	mov	r1, r5
   1f970:	4620      	mov	r0, r4
   1f972:	f009 ff1e 	bl	297b2 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f976:	a803      	add	r0, sp, #12
   1f978:	9403      	str	r4, [sp, #12]
   1f97a:	f7ff fd0d 	bl	1f398 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1f97e:	9b03      	ldr	r3, [sp, #12]
   1f980:	fa0a f303 	lsl.w	r3, sl, r3
   1f984:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1f988:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   1f98c:	2c00      	cmp	r4, #0
   1f98e:	d1af      	bne.n	1f8f0 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1f990:	b9cf      	cbnz	r7, 1f9c6 <nrfx_gpiote_irq_handler+0x13a>
   1f992:	2701      	movs	r7, #1
   1f994:	e7a7      	b.n	1f8e6 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f996:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f998:	bf0c      	ite	eq
   1f99a:	2103      	moveq	r1, #3
   1f99c:	2102      	movne	r1, #2
   1f99e:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f9a0:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f9a2:	f009 ff06 	bl	297b2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f9a6:	2d03      	cmp	r5, #3
   1f9a8:	d004      	beq.n	1f9b4 <nrfx_gpiote_irq_handler+0x128>
   1f9aa:	9a01      	ldr	r2, [sp, #4]
   1f9ac:	2a02      	cmp	r2, #2
   1f9ae:	d106      	bne.n	1f9be <nrfx_gpiote_irq_handler+0x132>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f9b0:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1f9b2:	d1e0      	bne.n	1f976 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   1f9b4:	4659      	mov	r1, fp
   1f9b6:	4620      	mov	r0, r4
   1f9b8:	f7ff fc76 	bl	1f2a8 <call_handler>
   1f9bc:	e7db      	b.n	1f976 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f9be:	2a03      	cmp	r2, #3
   1f9c0:	d1d9      	bne.n	1f976 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1f9c2:	2d02      	cmp	r5, #2
   1f9c4:	e7f5      	b.n	1f9b2 <nrfx_gpiote_irq_handler+0x126>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f9c6:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   1f9ca:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1f9ce:	491a      	ldr	r1, [pc, #104]	; (1fa38 <nrfx_gpiote_irq_handler+0x1ac>)
   1f9d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1f9d4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1f9d8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1f9da:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1f9de:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   1f9e2:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1f9e4:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   1f9e8:	4313      	orrs	r3, r2
   1f9ea:	f47f af79 	bne.w	1f8e0 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1f9ee:	2401      	movs	r4, #1
    while (mask)
   1f9f0:	b916      	cbnz	r6, 1f9f8 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1f9f2:	b007      	add	sp, #28
   1f9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1f9f8:	fa96 f3a6 	rbit	r3, r6
   1f9fc:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1fa00:	fa04 f203 	lsl.w	r2, r4, r3
   1fa04:	009b      	lsls	r3, r3, #2
   1fa06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fa0a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1fa0e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1fa12:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1fa16:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1fa1a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1fa1e:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1fa22:	f7ff fc41 	bl	1f2a8 <call_handler>
   1fa26:	e7e3      	b.n	1f9f0 <nrfx_gpiote_irq_handler+0x164>
   1fa28:	40006100 	.word	0x40006100
   1fa2c:	40006000 	.word	0x40006000
   1fa30:	40006120 	.word	0x40006120
   1fa34:	20000600 	.word	0x20000600
   1fa38:	50000300 	.word	0x50000300

0001fa3c <nvmc_word_write>:
   1fa3c:	4a04      	ldr	r2, [pc, #16]	; (1fa50 <nvmc_word_write+0x14>)
   1fa3e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1fa42:	07db      	lsls	r3, r3, #31
   1fa44:	d5fb      	bpl.n	1fa3e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1fa46:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1fa48:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1fa4c:	4770      	bx	lr
   1fa4e:	bf00      	nop
   1fa50:	4001e000 	.word	0x4001e000

0001fa54 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1fa54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1fa58:	b510      	push	{r4, lr}
   1fa5a:	6913      	ldr	r3, [r2, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   1fa5c:	6952      	ldr	r2, [r2, #20]
    return flash_page_size_get() * flash_page_count_get();
   1fa5e:	4353      	muls	r3, r2
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fa60:	4298      	cmp	r0, r3
{
   1fa62:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fa64:	d30a      	bcc.n	1fa7c <nrfx_nvmc_page_erase+0x28>
    NRFX_ASSERT(is_valid_address(addr, false));
   1fa66:	4912      	ldr	r1, [pc, #72]	; (1fab0 <nrfx_nvmc_page_erase+0x5c>)
   1fa68:	4812      	ldr	r0, [pc, #72]	; (1fab4 <nrfx_nvmc_page_erase+0x60>)
   1fa6a:	f44f 7283 	mov.w	r2, #262	; 0x106
   1fa6e:	f006 fd46 	bl	264fe <assert_print>
   1fa72:	480f      	ldr	r0, [pc, #60]	; (1fab0 <nrfx_nvmc_page_erase+0x5c>)
   1fa74:	f44f 7183 	mov.w	r1, #262	; 0x106
   1fa78:	f006 fd3a 	bl	264f0 <assert_post_action>
    return p_reg->CODEPAGESIZE;
   1fa7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fa80:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1fa82:	fbb4 f3f2 	udiv	r3, r4, r2
   1fa86:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   1fa8a:	b973      	cbnz	r3, 1faaa <nrfx_nvmc_page_erase+0x56>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1fa8c:	4b0a      	ldr	r3, [pc, #40]	; (1fab8 <nrfx_nvmc_page_erase+0x64>)
   1fa8e:	2202      	movs	r2, #2
   1fa90:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1fa94:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1fa98:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1fa9c:	07d2      	lsls	r2, r2, #31
   1fa9e:	d5fb      	bpl.n	1fa98 <nrfx_nvmc_page_erase+0x44>
    p_reg->CONFIG = (uint32_t)mode;
   1faa0:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1faa2:	4806      	ldr	r0, [pc, #24]	; (1fabc <nrfx_nvmc_page_erase+0x68>)
   1faa4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1faa8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1faaa:	4805      	ldr	r0, [pc, #20]	; (1fac0 <nrfx_nvmc_page_erase+0x6c>)
   1faac:	e7fc      	b.n	1faa8 <nrfx_nvmc_page_erase+0x54>
   1faae:	bf00      	nop
   1fab0:	0002d63d 	.word	0x0002d63d
   1fab4:	0002aa75 	.word	0x0002aa75
   1fab8:	4001e000 	.word	0x4001e000
   1fabc:	0bad0000 	.word	0x0bad0000
   1fac0:	0bad000a 	.word	0x0bad000a

0001fac4 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1fac4:	b570      	push	{r4, r5, r6, lr}
   1fac6:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   1fac8:	2101      	movs	r1, #1
{
   1faca:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   1facc:	f009 fe80 	bl	297d0 <is_valid_address>
   1fad0:	b950      	cbnz	r0, 1fae8 <nrfx_nvmc_word_write+0x24>
   1fad2:	4912      	ldr	r1, [pc, #72]	; (1fb1c <nrfx_nvmc_word_write+0x58>)
   1fad4:	4812      	ldr	r0, [pc, #72]	; (1fb20 <nrfx_nvmc_word_write+0x5c>)
   1fad6:	f44f 72ca 	mov.w	r2, #404	; 0x194
   1fada:	f006 fd10 	bl	264fe <assert_print>
   1fade:	480f      	ldr	r0, [pc, #60]	; (1fb1c <nrfx_nvmc_word_write+0x58>)
   1fae0:	f44f 71ca 	mov.w	r1, #404	; 0x194
   1fae4:	f006 fd04 	bl	264f0 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1fae8:	07a3      	lsls	r3, r4, #30
   1faea:	d00a      	beq.n	1fb02 <nrfx_nvmc_word_write+0x3e>
   1faec:	490b      	ldr	r1, [pc, #44]	; (1fb1c <nrfx_nvmc_word_write+0x58>)
   1faee:	480c      	ldr	r0, [pc, #48]	; (1fb20 <nrfx_nvmc_word_write+0x5c>)
   1faf0:	f240 1295 	movw	r2, #405	; 0x195
   1faf4:	f006 fd03 	bl	264fe <assert_print>
   1faf8:	4808      	ldr	r0, [pc, #32]	; (1fb1c <nrfx_nvmc_word_write+0x58>)
   1fafa:	f240 1195 	movw	r1, #405	; 0x195
   1fafe:	f006 fcf7 	bl	264f0 <assert_post_action>
   1fb02:	4e08      	ldr	r6, [pc, #32]	; (1fb24 <nrfx_nvmc_word_write+0x60>)
   1fb04:	2301      	movs	r3, #1
   1fb06:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1fb0a:	4629      	mov	r1, r5
   1fb0c:	4620      	mov	r0, r4
   1fb0e:	f7ff ff95 	bl	1fa3c <nvmc_word_write>
   1fb12:	2300      	movs	r3, #0
   1fb14:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1fb18:	bd70      	pop	{r4, r5, r6, pc}
   1fb1a:	bf00      	nop
   1fb1c:	0002d63d 	.word	0x0002d63d
   1fb20:	0002aa75 	.word	0x0002aa75
   1fb24:	4001e000 	.word	0x4001e000

0001fb28 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fb28:	4b0e      	ldr	r3, [pc, #56]	; (1fb64 <z_sys_init_run_level+0x3c>)
{
   1fb2a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fb2c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1fb30:	3001      	adds	r0, #1
   1fb32:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1fb36:	42a6      	cmp	r6, r4
   1fb38:	d800      	bhi.n	1fb3c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1fb3a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1fb3c:	e9d4 3500 	ldrd	r3, r5, [r4]
   1fb40:	4628      	mov	r0, r5
   1fb42:	4798      	blx	r3
		if (dev != NULL) {
   1fb44:	b165      	cbz	r5, 1fb60 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   1fb46:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   1fb48:	b130      	cbz	r0, 1fb58 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1fb4a:	2800      	cmp	r0, #0
   1fb4c:	bfb8      	it	lt
   1fb4e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1fb50:	28ff      	cmp	r0, #255	; 0xff
   1fb52:	bfa8      	it	ge
   1fb54:	20ff      	movge	r0, #255	; 0xff
   1fb56:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1fb58:	785a      	ldrb	r2, [r3, #1]
   1fb5a:	f042 0201 	orr.w	r2, r2, #1
   1fb5e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fb60:	3408      	adds	r4, #8
   1fb62:	e7e8      	b.n	1fb36 <z_sys_init_run_level+0xe>
   1fb64:	0002a790 	.word	0x0002a790

0001fb68 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1fb68:	4b01      	ldr	r3, [pc, #4]	; (1fb70 <z_impl_z_errno+0x8>)
   1fb6a:	6898      	ldr	r0, [r3, #8]
}
   1fb6c:	3064      	adds	r0, #100	; 0x64
   1fb6e:	4770      	bx	lr
   1fb70:	20002894 	.word	0x20002894

0001fb74 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1fb74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fb76:	4604      	mov	r4, r0
   1fb78:	460e      	mov	r6, r1
	__asm__ volatile(
   1fb7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fb7e:	f3ef 8711 	mrs	r7, BASEPRI
   1fb82:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb86:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1fb8a:	f002 fb3b 	bl	22204 <z_impl_z_current_get>
   1fb8e:	2c04      	cmp	r4, #4
   1fb90:	bf96      	itet	ls
   1fb92:	4b1e      	ldrls	r3, [pc, #120]	; (1fc0c <z_fatal_error+0x98>)
   1fb94:	4b1e      	ldrhi	r3, [pc, #120]	; (1fc10 <z_fatal_error+0x9c>)
   1fb96:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1fb9a:	2200      	movs	r2, #0
   1fb9c:	4605      	mov	r5, r0
   1fb9e:	9200      	str	r2, [sp, #0]
   1fba0:	481c      	ldr	r0, [pc, #112]	; (1fc14 <z_fatal_error+0xa0>)
   1fba2:	4622      	mov	r2, r4
   1fba4:	2145      	movs	r1, #69	; 0x45
   1fba6:	f006 fcb8 	bl	2651a <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1fbaa:	b13e      	cbz	r6, 1fbbc <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1fbac:	69f3      	ldr	r3, [r6, #28]
   1fbae:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1fbb2:	b11b      	cbz	r3, 1fbbc <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   1fbb4:	4818      	ldr	r0, [pc, #96]	; (1fc18 <z_fatal_error+0xa4>)
   1fbb6:	2145      	movs	r1, #69	; 0x45
   1fbb8:	f006 fcaf 	bl	2651a <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1fbbc:	b135      	cbz	r5, 1fbcc <z_fatal_error+0x58>
   1fbbe:	4628      	mov	r0, r5
   1fbc0:	f009 fe64 	bl	2988c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1fbc4:	4603      	mov	r3, r0
   1fbc6:	b108      	cbz	r0, 1fbcc <z_fatal_error+0x58>
   1fbc8:	7802      	ldrb	r2, [r0, #0]
   1fbca:	b902      	cbnz	r2, 1fbce <z_fatal_error+0x5a>
		thread_name = "unknown";
   1fbcc:	4b13      	ldr	r3, [pc, #76]	; (1fc1c <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1fbce:	4814      	ldr	r0, [pc, #80]	; (1fc20 <z_fatal_error+0xac>)
   1fbd0:	462a      	mov	r2, r5
   1fbd2:	2145      	movs	r1, #69	; 0x45
   1fbd4:	f006 fca1 	bl	2651a <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1fbd8:	4631      	mov	r1, r6
   1fbda:	4620      	mov	r0, r4
   1fbdc:	f7fe f8de 	bl	1dd9c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1fbe0:	2c04      	cmp	r4, #4
   1fbe2:	d108      	bne.n	1fbf6 <z_fatal_error+0x82>
   1fbe4:	490f      	ldr	r1, [pc, #60]	; (1fc24 <z_fatal_error+0xb0>)
   1fbe6:	4810      	ldr	r0, [pc, #64]	; (1fc28 <z_fatal_error+0xb4>)
   1fbe8:	2293      	movs	r2, #147	; 0x93
   1fbea:	f006 fc88 	bl	264fe <assert_print>
   1fbee:	480d      	ldr	r0, [pc, #52]	; (1fc24 <z_fatal_error+0xb0>)
   1fbf0:	2193      	movs	r1, #147	; 0x93
   1fbf2:	f006 fc7d 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   1fbf6:	f387 8811 	msr	BASEPRI, r7
   1fbfa:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1fbfe:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1fc00:	b003      	add	sp, #12
   1fc02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1fc06:	f7f4 be5b 	b.w	148c0 <z_impl_k_thread_abort>
   1fc0a:	bf00      	nop
   1fc0c:	0002a7a8 	.word	0x0002a7a8
   1fc10:	0002d679 	.word	0x0002d679
   1fc14:	0002d68f 	.word	0x0002d68f
   1fc18:	0002d6bc 	.word	0x0002d6bc
   1fc1c:	0002d687 	.word	0x0002d687
   1fc20:	0002d6e2 	.word	0x0002d6e2
   1fc24:	0002d6ff 	.word	0x0002d6ff
   1fc28:	0002aa75 	.word	0x0002aa75

0001fc2c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1fc2c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1fc2e:	4b0a      	ldr	r3, [pc, #40]	; (1fc58 <bg_thread_main+0x2c>)
   1fc30:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1fc32:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1fc34:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1fc36:	f7ff ff77 	bl	1fb28 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1fc3a:	f003 f9ab 	bl	22f94 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1fc3e:	2003      	movs	r0, #3
   1fc40:	f7ff ff72 	bl	1fb28 <z_sys_init_run_level>

	z_init_static_threads();
   1fc44:	f000 fb26 	bl	20294 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1fc48:	f7f2 f8fa 	bl	11e40 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1fc4c:	4a03      	ldr	r2, [pc, #12]	; (1fc5c <bg_thread_main+0x30>)
   1fc4e:	7b13      	ldrb	r3, [r2, #12]
   1fc50:	f023 0301 	bic.w	r3, r3, #1
   1fc54:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1fc56:	bd08      	pop	{r3, pc}
   1fc58:	20003cb9 	.word	0x20003cb9
   1fc5c:	20001df0 	.word	0x20001df0

0001fc60 <z_bss_zero>:
{
   1fc60:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1fc62:	4803      	ldr	r0, [pc, #12]	; (1fc70 <z_bss_zero+0x10>)
   1fc64:	4a03      	ldr	r2, [pc, #12]	; (1fc74 <z_bss_zero+0x14>)
   1fc66:	2100      	movs	r1, #0
   1fc68:	1a12      	subs	r2, r2, r0
   1fc6a:	f009 fdde 	bl	2982a <z_early_memset>
}
   1fc6e:	bd08      	pop	{r3, pc}
   1fc70:	20000a28 	.word	0x20000a28
   1fc74:	20003cbc 	.word	0x20003cbc

0001fc78 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1fc78:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1fc7a:	2300      	movs	r3, #0
{
   1fc7c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1fc7e:	2201      	movs	r2, #1
   1fc80:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1fc84:	4e13      	ldr	r6, [pc, #76]	; (1fcd4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1fc86:	4d14      	ldr	r5, [pc, #80]	; (1fcd8 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1fc88:	9301      	str	r3, [sp, #4]
   1fc8a:	220f      	movs	r2, #15
   1fc8c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1fc90:	4912      	ldr	r1, [pc, #72]	; (1fcdc <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1fc92:	2318      	movs	r3, #24
   1fc94:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1fc98:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1fc9c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1fc9e:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1fca2:	fb00 1104 	mla	r1, r0, r4, r1
   1fca6:	4b0e      	ldr	r3, [pc, #56]	; (1fce0 <z_init_cpu+0x68>)
   1fca8:	9500      	str	r5, [sp, #0]
   1fcaa:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1fcae:	4630      	mov	r0, r6
   1fcb0:	f000 fa50 	bl	20154 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1fcb4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1fcb6:	480b      	ldr	r0, [pc, #44]	; (1fce4 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   1fcb8:	752c      	strb	r4, [r5, #20]
   1fcba:	f023 0304 	bic.w	r3, r3, #4
   1fcbe:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1fcc0:	f44f 6304 	mov.w	r3, #2112	; 0x840
   1fcc4:	fb03 0404 	mla	r4, r3, r4, r0
   1fcc8:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1fcca:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1fccc:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1fcce:	b006      	add	sp, #24
   1fcd0:	bd70      	pop	{r4, r5, r6, pc}
   1fcd2:	bf00      	nop
   1fcd4:	20001d70 	.word	0x20001d70
   1fcd8:	20002894 	.word	0x20002894
   1fcdc:	20006200 	.word	0x20006200
   1fce0:	000203d9 	.word	0x000203d9
   1fce4:	20006380 	.word	0x20006380

0001fce8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1fce8:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1fcea:	4b2e      	ldr	r3, [pc, #184]	; (1fda4 <z_cstart+0xbc>)
   1fcec:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1fcee:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1fcf2:	4d2d      	ldr	r5, [pc, #180]	; (1fda8 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   1fcf4:	4e2d      	ldr	r6, [pc, #180]	; (1fdac <z_cstart+0xc4>)
   1fcf6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fcf8:	4f2d      	ldr	r7, [pc, #180]	; (1fdb0 <z_cstart+0xc8>)
   1fcfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1fcfe:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1fd00:	23e0      	movs	r3, #224	; 0xe0
   1fd02:	2400      	movs	r4, #0
   1fd04:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1fd08:	2320      	movs	r3, #32
   1fd0a:	77eb      	strb	r3, [r5, #31]
   1fd0c:	762c      	strb	r4, [r5, #24]
   1fd0e:	766c      	strb	r4, [r5, #25]
   1fd10:	76ac      	strb	r4, [r5, #26]
   1fd12:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1fd16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1fd18:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1fd1c:	626b      	str	r3, [r5, #36]	; 0x24
   1fd1e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1fd22:	f7f4 fd41 	bl	147a8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1fd26:	f7f4 f981 	bl	1402c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1fd2a:	f04f 33ff 	mov.w	r3, #4294967295
   1fd2e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1fd30:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1fd32:	f7f4 fea5 	bl	14a80 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1fd36:	f7f4 fdd9 	bl	148ec <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1fd3a:	f240 1301 	movw	r3, #257	; 0x101
   1fd3e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1fd42:	ab06      	add	r3, sp, #24
   1fd44:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1fd46:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1fd4a:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1fd4c:	f009 fd62 	bl	29814 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1fd50:	4620      	mov	r0, r4
   1fd52:	f7ff fee9 	bl	1fb28 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1fd56:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1fd58:	4d16      	ldr	r5, [pc, #88]	; (1fdb4 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1fd5a:	f7ff fee5 	bl	1fb28 <z_sys_init_run_level>
	z_sched_init();
   1fd5e:	f002 f907 	bl	21f70 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fd62:	4b15      	ldr	r3, [pc, #84]	; (1fdb8 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   1fd64:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fd66:	9305      	str	r3, [sp, #20]
   1fd68:	2301      	movs	r3, #1
   1fd6a:	4914      	ldr	r1, [pc, #80]	; (1fdbc <z_cstart+0xd4>)
   1fd6c:	9400      	str	r4, [sp, #0]
   1fd6e:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1fd72:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1fd76:	463b      	mov	r3, r7
   1fd78:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1fd7c:	4628      	mov	r0, r5
   1fd7e:	f000 f9e9 	bl	20154 <z_setup_new_thread>
   1fd82:	7b6a      	ldrb	r2, [r5, #13]
   1fd84:	4606      	mov	r6, r0
   1fd86:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1fd8a:	4628      	mov	r0, r5
   1fd8c:	736a      	strb	r2, [r5, #13]
   1fd8e:	f001 fdf1 	bl	21974 <z_ready_thread>
	z_init_cpu(0);
   1fd92:	4620      	mov	r0, r4
   1fd94:	f7ff ff70 	bl	1fc78 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1fd98:	463a      	mov	r2, r7
   1fd9a:	4631      	mov	r1, r6
   1fd9c:	4628      	mov	r0, r5
   1fd9e:	f7f4 faa3 	bl	142e8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1fda2:	bf00      	nop
   1fda4:	20006bc0 	.word	0x20006bc0
   1fda8:	e000ed00 	.word	0xe000ed00
   1fdac:	20002894 	.word	0x20002894
   1fdb0:	0001fc2d 	.word	0x0001fc2d
   1fdb4:	20001df0 	.word	0x20001df0
   1fdb8:	0002d76b 	.word	0x0002d76b
   1fdbc:	200059c0 	.word	0x200059c0

0001fdc0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1fdc0:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1fdc2:	4c0c      	ldr	r4, [pc, #48]	; (1fdf4 <statics_init+0x34>)
   1fdc4:	4d0c      	ldr	r5, [pc, #48]	; (1fdf8 <statics_init+0x38>)
   1fdc6:	4e0d      	ldr	r6, [pc, #52]	; (1fdfc <statics_init+0x3c>)
   1fdc8:	42ac      	cmp	r4, r5
   1fdca:	d908      	bls.n	1fdde <statics_init+0x1e>
   1fdcc:	480c      	ldr	r0, [pc, #48]	; (1fe00 <statics_init+0x40>)
   1fdce:	4631      	mov	r1, r6
   1fdd0:	2218      	movs	r2, #24
   1fdd2:	f006 fb94 	bl	264fe <assert_print>
   1fdd6:	2118      	movs	r1, #24
   1fdd8:	4630      	mov	r0, r6
   1fdda:	f006 fb89 	bl	264f0 <assert_post_action>
   1fdde:	42ac      	cmp	r4, r5
   1fde0:	d301      	bcc.n	1fde6 <statics_init+0x26>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1fde2:	2000      	movs	r0, #0
   1fde4:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1fde6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1fdea:	4620      	mov	r0, r4
   1fdec:	f009 fd21 	bl	29832 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1fdf0:	3418      	adds	r4, #24
   1fdf2:	e7e9      	b.n	1fdc8 <statics_init+0x8>
   1fdf4:	20000828 	.word	0x20000828
   1fdf8:	20000828 	.word	0x20000828
   1fdfc:	0002d773 	.word	0x0002d773
   1fe00:	0002aa75 	.word	0x0002aa75

0001fe04 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1fe04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe08:	b085      	sub	sp, #20
   1fe0a:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   1fe0e:	4606      	mov	r6, r0
   1fe10:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fe12:	4648      	mov	r0, r9
   1fe14:	4639      	mov	r1, r7
{
   1fe16:	4690      	mov	r8, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fe18:	f009 fe31 	bl	29a7e <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1fe1c:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fe20:	e9cd 0102 	strd	r0, r1, [sp, #8]
	__asm__ volatile(
   1fe24:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe28:	f3ef 8411 	mrs	r4, BASEPRI
   1fe2c:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fe34:	4628      	mov	r0, r5
   1fe36:	f000 faa9 	bl	2038c <z_spin_lock_valid>
   1fe3a:	b940      	cbnz	r0, 1fe4e <k_heap_aligned_alloc+0x4a>
   1fe3c:	4932      	ldr	r1, [pc, #200]	; (1ff08 <k_heap_aligned_alloc+0x104>)
   1fe3e:	4833      	ldr	r0, [pc, #204]	; (1ff0c <k_heap_aligned_alloc+0x108>)
   1fe40:	228e      	movs	r2, #142	; 0x8e
   1fe42:	f006 fb5c 	bl	264fe <assert_print>
   1fe46:	4830      	ldr	r0, [pc, #192]	; (1ff08 <k_heap_aligned_alloc+0x104>)
   1fe48:	218e      	movs	r1, #142	; 0x8e
   1fe4a:	f006 fb51 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fe4e:	4628      	mov	r0, r5
   1fe50:	f000 faba 	bl	203c8 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fe54:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1fe58:	b15b      	cbz	r3, 1fe72 <k_heap_aligned_alloc+0x6e>
   1fe5a:	ea59 0307 	orrs.w	r3, r9, r7
   1fe5e:	d008      	beq.n	1fe72 <k_heap_aligned_alloc+0x6e>
   1fe60:	492b      	ldr	r1, [pc, #172]	; (1ff10 <k_heap_aligned_alloc+0x10c>)
   1fe62:	482a      	ldr	r0, [pc, #168]	; (1ff0c <k_heap_aligned_alloc+0x108>)
   1fe64:	2249      	movs	r2, #73	; 0x49
   1fe66:	f006 fb4a 	bl	264fe <assert_print>
   1fe6a:	4829      	ldr	r0, [pc, #164]	; (1ff10 <k_heap_aligned_alloc+0x10c>)
   1fe6c:	2149      	movs	r1, #73	; 0x49
   1fe6e:	f006 fb3f 	bl	264f0 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fe72:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1ff08 <k_heap_aligned_alloc+0x104>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fe76:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1fe7a:	4642      	mov	r2, r8
   1fe7c:	4659      	mov	r1, fp
   1fe7e:	4630      	mov	r0, r6
   1fe80:	f7f2 fb92 	bl	125a8 <sys_heap_aligned_alloc>
   1fe84:	4607      	mov	r7, r0
		now = sys_clock_tick_get();
   1fe86:	f002 fd3b 	bl	22900 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1fe8a:	b1a7      	cbz	r7, 1feb6 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fe8c:	4628      	mov	r0, r5
   1fe8e:	f000 fa8b 	bl	203a8 <z_spin_unlock_valid>
   1fe92:	b940      	cbnz	r0, 1fea6 <k_heap_aligned_alloc+0xa2>
   1fe94:	491c      	ldr	r1, [pc, #112]	; (1ff08 <k_heap_aligned_alloc+0x104>)
   1fe96:	481d      	ldr	r0, [pc, #116]	; (1ff0c <k_heap_aligned_alloc+0x108>)
   1fe98:	22b9      	movs	r2, #185	; 0xb9
   1fe9a:	f006 fb30 	bl	264fe <assert_print>
   1fe9e:	481a      	ldr	r0, [pc, #104]	; (1ff08 <k_heap_aligned_alloc+0x104>)
   1fea0:	21b9      	movs	r1, #185	; 0xb9
   1fea2:	f006 fb25 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   1fea6:	f384 8811 	msr	BASEPRI, r4
   1feaa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1feae:	4638      	mov	r0, r7
   1feb0:	b005      	add	sp, #20
   1feb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1feb6:	9b02      	ldr	r3, [sp, #8]
   1feb8:	1a18      	subs	r0, r3, r0
   1feba:	9b03      	ldr	r3, [sp, #12]
   1febc:	eb63 0101 	sbc.w	r1, r3, r1
   1fec0:	2801      	cmp	r0, #1
   1fec2:	f171 0300 	sbcs.w	r3, r1, #0
   1fec6:	dbe1      	blt.n	1fe8c <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fec8:	e9cd 0100 	strd	r0, r1, [sp]
   1fecc:	4652      	mov	r2, sl
   1fece:	4621      	mov	r1, r4
   1fed0:	4628      	mov	r0, r5
   1fed2:	f001 feb3 	bl	21c3c <z_pend_curr>
	__asm__ volatile(
   1fed6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1feda:	f3ef 8411 	mrs	r4, BASEPRI
   1fede:	f383 8812 	msr	BASEPRI_MAX, r3
   1fee2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fee6:	4628      	mov	r0, r5
   1fee8:	f000 fa50 	bl	2038c <z_spin_lock_valid>
   1feec:	b940      	cbnz	r0, 1ff00 <k_heap_aligned_alloc+0xfc>
   1feee:	4807      	ldr	r0, [pc, #28]	; (1ff0c <k_heap_aligned_alloc+0x108>)
   1fef0:	4649      	mov	r1, r9
   1fef2:	228e      	movs	r2, #142	; 0x8e
   1fef4:	f006 fb03 	bl	264fe <assert_print>
   1fef8:	218e      	movs	r1, #142	; 0x8e
   1fefa:	4648      	mov	r0, r9
   1fefc:	f006 faf8 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ff00:	4628      	mov	r0, r5
   1ff02:	f000 fa61 	bl	203c8 <z_spin_lock_set_owner>
	return k;
   1ff06:	e7b8      	b.n	1fe7a <k_heap_aligned_alloc+0x76>
   1ff08:	0002ac34 	.word	0x0002ac34
   1ff0c:	0002aa75 	.word	0x0002aa75
   1ff10:	0002d773 	.word	0x0002d773

0001ff14 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1ff14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ff16:	4604      	mov	r4, r0
   1ff18:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1ff1a:	f100 0514 	add.w	r5, r0, #20
   1ff1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ff22:	f3ef 8711 	mrs	r7, BASEPRI
   1ff26:	f383 8812 	msr	BASEPRI_MAX, r3
   1ff2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ff2e:	4628      	mov	r0, r5
   1ff30:	f000 fa2c 	bl	2038c <z_spin_lock_valid>
   1ff34:	b940      	cbnz	r0, 1ff48 <k_heap_free+0x34>
   1ff36:	4916      	ldr	r1, [pc, #88]	; (1ff90 <k_heap_free+0x7c>)
   1ff38:	4816      	ldr	r0, [pc, #88]	; (1ff94 <k_heap_free+0x80>)
   1ff3a:	228e      	movs	r2, #142	; 0x8e
   1ff3c:	f006 fadf 	bl	264fe <assert_print>
   1ff40:	4813      	ldr	r0, [pc, #76]	; (1ff90 <k_heap_free+0x7c>)
   1ff42:	218e      	movs	r1, #142	; 0x8e
   1ff44:	f006 fad4 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ff48:	4628      	mov	r0, r5
   1ff4a:	f000 fa3d 	bl	203c8 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1ff4e:	4620      	mov	r0, r4
   1ff50:	4631      	mov	r1, r6
   1ff52:	f7f2 faf1 	bl	12538 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1ff56:	f104 000c 	add.w	r0, r4, #12
   1ff5a:	f009 fd78 	bl	29a4e <z_unpend_all>
   1ff5e:	b128      	cbz	r0, 1ff6c <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   1ff60:	4639      	mov	r1, r7
   1ff62:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1ff64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1ff68:	f001 bad4 	b.w	21514 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ff6c:	4628      	mov	r0, r5
   1ff6e:	f000 fa1b 	bl	203a8 <z_spin_unlock_valid>
   1ff72:	b940      	cbnz	r0, 1ff86 <k_heap_free+0x72>
   1ff74:	4906      	ldr	r1, [pc, #24]	; (1ff90 <k_heap_free+0x7c>)
   1ff76:	4807      	ldr	r0, [pc, #28]	; (1ff94 <k_heap_free+0x80>)
   1ff78:	22b9      	movs	r2, #185	; 0xb9
   1ff7a:	f006 fac0 	bl	264fe <assert_print>
   1ff7e:	4804      	ldr	r0, [pc, #16]	; (1ff90 <k_heap_free+0x7c>)
   1ff80:	21b9      	movs	r1, #185	; 0xb9
   1ff82:	f006 fab5 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   1ff86:	f387 8811 	msr	BASEPRI, r7
   1ff8a:	f3bf 8f6f 	isb	sy
}
   1ff8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff90:	0002ac34 	.word	0x0002ac34
   1ff94:	0002aa75 	.word	0x0002aa75

0001ff98 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1ff98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ff9a:	4c14      	ldr	r4, [pc, #80]	; (1ffec <init_mem_slab_module+0x54>)
   1ff9c:	4d14      	ldr	r5, [pc, #80]	; (1fff0 <init_mem_slab_module+0x58>)
   1ff9e:	4e15      	ldr	r6, [pc, #84]	; (1fff4 <init_mem_slab_module+0x5c>)
   1ffa0:	42ac      	cmp	r4, r5
   1ffa2:	d908      	bls.n	1ffb6 <init_mem_slab_module+0x1e>
   1ffa4:	4814      	ldr	r0, [pc, #80]	; (1fff8 <init_mem_slab_module+0x60>)
   1ffa6:	4631      	mov	r1, r6
   1ffa8:	223d      	movs	r2, #61	; 0x3d
   1ffaa:	f006 faa8 	bl	264fe <assert_print>
   1ffae:	213d      	movs	r1, #61	; 0x3d
   1ffb0:	4630      	mov	r0, r6
   1ffb2:	f006 fa9d 	bl	264f0 <assert_post_action>
   1ffb6:	42ac      	cmp	r4, r5
   1ffb8:	d301      	bcc.n	1ffbe <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1ffba:	2000      	movs	r0, #0
	return rc;
}
   1ffbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1ffbe:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1ffc2:	ea42 0301 	orr.w	r3, r2, r1
   1ffc6:	f013 0303 	ands.w	r3, r3, #3
   1ffca:	d10b      	bne.n	1ffe4 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   1ffcc:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   1ffce:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ffd0:	4283      	cmp	r3, r0
   1ffd2:	d101      	bne.n	1ffd8 <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ffd4:	3420      	adds	r4, #32
   1ffd6:	e7e3      	b.n	1ffa0 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   1ffd8:	69a7      	ldr	r7, [r4, #24]
   1ffda:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ffdc:	3301      	adds	r3, #1
		slab->free_list = p;
   1ffde:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   1ffe0:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1ffe2:	e7f5      	b.n	1ffd0 <init_mem_slab_module+0x38>
	return rc;
   1ffe4:	f06f 0015 	mvn.w	r0, #21
   1ffe8:	e7e8      	b.n	1ffbc <init_mem_slab_module+0x24>
   1ffea:	bf00      	nop
   1ffec:	200007c8 	.word	0x200007c8
   1fff0:	20000828 	.word	0x20000828
   1fff4:	0002d795 	.word	0x0002d795
   1fff8:	0002aa75 	.word	0x0002aa75

0001fffc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1fffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20000:	4604      	mov	r4, r0
   20002:	460d      	mov	r5, r1
   20004:	4690      	mov	r8, r2
   20006:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20008:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2000c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20010:	f3ef 8911 	mrs	r9, BASEPRI
   20014:	f383 8812 	msr	BASEPRI_MAX, r3
   20018:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2001c:	4630      	mov	r0, r6
   2001e:	f000 f9b5 	bl	2038c <z_spin_lock_valid>
   20022:	b940      	cbnz	r0, 20036 <k_mem_slab_alloc+0x3a>
   20024:	491f      	ldr	r1, [pc, #124]	; (200a4 <k_mem_slab_alloc+0xa8>)
   20026:	4820      	ldr	r0, [pc, #128]	; (200a8 <k_mem_slab_alloc+0xac>)
   20028:	228e      	movs	r2, #142	; 0x8e
   2002a:	f006 fa68 	bl	264fe <assert_print>
   2002e:	481d      	ldr	r0, [pc, #116]	; (200a4 <k_mem_slab_alloc+0xa8>)
   20030:	218e      	movs	r1, #142	; 0x8e
   20032:	f006 fa5d 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20036:	4630      	mov	r0, r6
   20038:	f000 f9c6 	bl	203c8 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2003c:	69a3      	ldr	r3, [r4, #24]
   2003e:	b1c3      	cbz	r3, 20072 <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   20040:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   20042:	681b      	ldr	r3, [r3, #0]
   20044:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   20046:	69e3      	ldr	r3, [r4, #28]
   20048:	3301      	adds	r3, #1
   2004a:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2004c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2004e:	4630      	mov	r0, r6
   20050:	f000 f9aa 	bl	203a8 <z_spin_unlock_valid>
   20054:	b940      	cbnz	r0, 20068 <k_mem_slab_alloc+0x6c>
   20056:	4913      	ldr	r1, [pc, #76]	; (200a4 <k_mem_slab_alloc+0xa8>)
   20058:	4813      	ldr	r0, [pc, #76]	; (200a8 <k_mem_slab_alloc+0xac>)
   2005a:	22b9      	movs	r2, #185	; 0xb9
   2005c:	f006 fa4f 	bl	264fe <assert_print>
   20060:	4810      	ldr	r0, [pc, #64]	; (200a4 <k_mem_slab_alloc+0xa8>)
   20062:	21b9      	movs	r1, #185	; 0xb9
   20064:	f006 fa44 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   20068:	f389 8811 	msr	BASEPRI, r9
   2006c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   20070:	e013      	b.n	2009a <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   20072:	ea58 0207 	orrs.w	r2, r8, r7
   20076:	d103      	bne.n	20080 <k_mem_slab_alloc+0x84>
		*mem = NULL;
   20078:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   2007a:	f06f 040b 	mvn.w	r4, #11
   2007e:	e7e6      	b.n	2004e <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   20080:	4622      	mov	r2, r4
   20082:	e9cd 8700 	strd	r8, r7, [sp]
   20086:	4649      	mov	r1, r9
   20088:	4630      	mov	r0, r6
   2008a:	f001 fdd7 	bl	21c3c <z_pend_curr>
		if (result == 0) {
   2008e:	4604      	mov	r4, r0
   20090:	b918      	cbnz	r0, 2009a <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   20092:	4b06      	ldr	r3, [pc, #24]	; (200ac <k_mem_slab_alloc+0xb0>)
   20094:	689b      	ldr	r3, [r3, #8]
   20096:	695b      	ldr	r3, [r3, #20]
   20098:	602b      	str	r3, [r5, #0]
}
   2009a:	4620      	mov	r0, r4
   2009c:	b003      	add	sp, #12
   2009e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   200a2:	bf00      	nop
   200a4:	0002ac34 	.word	0x0002ac34
   200a8:	0002aa75 	.word	0x0002aa75
   200ac:	20002894 	.word	0x20002894

000200b0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   200b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   200b4:	4604      	mov	r4, r0
   200b6:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   200b8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   200bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   200c0:	f3ef 8711 	mrs	r7, BASEPRI
   200c4:	f383 8812 	msr	BASEPRI_MAX, r3
   200c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   200cc:	4630      	mov	r0, r6
   200ce:	f000 f95d 	bl	2038c <z_spin_lock_valid>
   200d2:	b940      	cbnz	r0, 200e6 <k_mem_slab_free+0x36>
   200d4:	491d      	ldr	r1, [pc, #116]	; (2014c <k_mem_slab_free+0x9c>)
   200d6:	481e      	ldr	r0, [pc, #120]	; (20150 <k_mem_slab_free+0xa0>)
   200d8:	228e      	movs	r2, #142	; 0x8e
   200da:	f006 fa10 	bl	264fe <assert_print>
   200de:	481b      	ldr	r0, [pc, #108]	; (2014c <k_mem_slab_free+0x9c>)
   200e0:	218e      	movs	r1, #142	; 0x8e
   200e2:	f006 fa05 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   200e6:	4630      	mov	r0, r6
   200e8:	f000 f96e 	bl	203c8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   200ec:	f8d4 8018 	ldr.w	r8, [r4, #24]
   200f0:	f1b8 0f00 	cmp.w	r8, #0
   200f4:	d10f      	bne.n	20116 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   200f6:	4620      	mov	r0, r4
   200f8:	f001 fefc 	bl	21ef4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   200fc:	b158      	cbz	r0, 20116 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   200fe:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20100:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   20102:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   20106:	f001 fc35 	bl	21974 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2010a:	4639      	mov	r1, r7
   2010c:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2010e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   20112:	f001 b9ff 	b.w	21514 <z_reschedule>
	**(char ***) mem = slab->free_list;
   20116:	682b      	ldr	r3, [r5, #0]
   20118:	69a2      	ldr	r2, [r4, #24]
   2011a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2011c:	682b      	ldr	r3, [r5, #0]
   2011e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   20120:	69e3      	ldr	r3, [r4, #28]
   20122:	3b01      	subs	r3, #1
   20124:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20126:	4630      	mov	r0, r6
   20128:	f000 f93e 	bl	203a8 <z_spin_unlock_valid>
   2012c:	b940      	cbnz	r0, 20140 <k_mem_slab_free+0x90>
   2012e:	4907      	ldr	r1, [pc, #28]	; (2014c <k_mem_slab_free+0x9c>)
   20130:	4807      	ldr	r0, [pc, #28]	; (20150 <k_mem_slab_free+0xa0>)
   20132:	22b9      	movs	r2, #185	; 0xb9
   20134:	f006 f9e3 	bl	264fe <assert_print>
   20138:	4804      	ldr	r0, [pc, #16]	; (2014c <k_mem_slab_free+0x9c>)
   2013a:	21b9      	movs	r1, #185	; 0xb9
   2013c:	f006 f9d8 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   20140:	f387 8811 	msr	BASEPRI, r7
   20144:	f3bf 8f6f 	isb	sy
}
   20148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2014c:	0002ac34 	.word	0x0002ac34
   20150:	0002aa75 	.word	0x0002aa75

00020154 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   20154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20158:	b085      	sub	sp, #20
   2015a:	4604      	mov	r4, r0
   2015c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   20160:	f1b8 0f0f 	cmp.w	r8, #15
{
   20164:	460f      	mov	r7, r1
   20166:	4615      	mov	r5, r2
   20168:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   2016a:	d132      	bne.n	201d2 <z_setup_new_thread+0x7e>
   2016c:	4b21      	ldr	r3, [pc, #132]	; (201f4 <z_setup_new_thread+0xa0>)
   2016e:	4599      	cmp	r9, r3
   20170:	d133      	bne.n	201da <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   20172:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   20176:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2017a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2017c:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2017e:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   20180:	2304      	movs	r3, #4
   20182:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20184:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   20188:	f107 0340 	add.w	r3, r7, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   2018c:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20190:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   20192:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20196:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20198:	f105 0840 	add.w	r8, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2019c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2019e:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   201a0:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   201a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   201a4:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   201a6:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   201a8:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   201aa:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   201ae:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   201b0:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   201b2:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   201b4:	4642      	mov	r2, r8
   201b6:	4639      	mov	r1, r7
   201b8:	4620      	mov	r0, r4
   201ba:	f7f4 f863 	bl	14284 <arch_new_thread>
	if (!_current) {
   201be:	4b0e      	ldr	r3, [pc, #56]	; (201f8 <z_setup_new_thread+0xa4>)
	new_thread->init_data = NULL;
   201c0:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   201c2:	689b      	ldr	r3, [r3, #8]
   201c4:	b103      	cbz	r3, 201c8 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   201c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   201c8:	6763      	str	r3, [r4, #116]	; 0x74
}
   201ca:	4640      	mov	r0, r8
   201cc:	b005      	add	sp, #20
   201ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   201d2:	f108 0310 	add.w	r3, r8, #16
   201d6:	2b1e      	cmp	r3, #30
   201d8:	d9cb      	bls.n	20172 <z_setup_new_thread+0x1e>
   201da:	4908      	ldr	r1, [pc, #32]	; (201fc <z_setup_new_thread+0xa8>)
   201dc:	4808      	ldr	r0, [pc, #32]	; (20200 <z_setup_new_thread+0xac>)
   201de:	f44f 7206 	mov.w	r2, #536	; 0x218
   201e2:	f006 f98c 	bl	264fe <assert_print>
   201e6:	4805      	ldr	r0, [pc, #20]	; (201fc <z_setup_new_thread+0xa8>)
   201e8:	f44f 7106 	mov.w	r1, #536	; 0x218
   201ec:	f006 f980 	bl	264f0 <assert_post_action>
   201f0:	e7bf      	b.n	20172 <z_setup_new_thread+0x1e>
   201f2:	bf00      	nop
   201f4:	000203d9 	.word	0x000203d9
   201f8:	20002894 	.word	0x20002894
   201fc:	0002d7ba 	.word	0x0002d7ba
   20200:	0002aa75 	.word	0x0002aa75

00020204 <z_impl_k_thread_create>:
{
   20204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20208:	b087      	sub	sp, #28
   2020a:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   2020e:	4604      	mov	r4, r0
   20210:	460f      	mov	r7, r1
   20212:	4690      	mov	r8, r2
   20214:	4699      	mov	r9, r3
   20216:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2021a:	b153      	cbz	r3, 20232 <z_impl_k_thread_create+0x2e>
   2021c:	491a      	ldr	r1, [pc, #104]	; (20288 <z_impl_k_thread_create+0x84>)
   2021e:	481b      	ldr	r0, [pc, #108]	; (2028c <z_impl_k_thread_create+0x88>)
   20220:	f240 2287 	movw	r2, #647	; 0x287
   20224:	f006 f96b 	bl	264fe <assert_print>
   20228:	4817      	ldr	r0, [pc, #92]	; (20288 <z_impl_k_thread_create+0x84>)
   2022a:	f240 2187 	movw	r1, #647	; 0x287
   2022e:	f006 f95f 	bl	264f0 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20232:	2300      	movs	r3, #0
   20234:	9305      	str	r3, [sp, #20]
   20236:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20238:	9304      	str	r3, [sp, #16]
   2023a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2023c:	9303      	str	r3, [sp, #12]
   2023e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20240:	9302      	str	r3, [sp, #8]
   20242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20244:	9301      	str	r3, [sp, #4]
   20246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20248:	9300      	str	r3, [sp, #0]
   2024a:	4642      	mov	r2, r8
   2024c:	464b      	mov	r3, r9
   2024e:	4639      	mov	r1, r7
   20250:	4620      	mov	r0, r4
   20252:	f7ff ff7f 	bl	20154 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   20256:	f1b5 3fff 	cmp.w	r5, #4294967295
   2025a:	bf08      	it	eq
   2025c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   20260:	d005      	beq.n	2026e <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20262:	ea55 0306 	orrs.w	r3, r5, r6
   20266:	d106      	bne.n	20276 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   20268:	4620      	mov	r0, r4
   2026a:	f001 fbb9 	bl	219e0 <z_sched_start>
}
   2026e:	4620      	mov	r0, r4
   20270:	b007      	add	sp, #28
   20272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   20276:	4906      	ldr	r1, [pc, #24]	; (20290 <z_impl_k_thread_create+0x8c>)
   20278:	4632      	mov	r2, r6
   2027a:	462b      	mov	r3, r5
   2027c:	f104 0018 	add.w	r0, r4, #24
   20280:	f002 f93c 	bl	224fc <z_add_timeout>
   20284:	e7f3      	b.n	2026e <z_impl_k_thread_create+0x6a>
   20286:	bf00      	nop
   20288:	0002d7ba 	.word	0x0002d7ba
   2028c:	0002aa75 	.word	0x0002aa75
   20290:	00021a65 	.word	0x00021a65

00020294 <z_init_static_threads>:
{
   20294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20298:	4c37      	ldr	r4, [pc, #220]	; (20378 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2029a:	4d38      	ldr	r5, [pc, #224]	; (2037c <z_init_static_threads+0xe8>)
   2029c:	4f38      	ldr	r7, [pc, #224]	; (20380 <z_init_static_threads+0xec>)
{
   2029e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   202a0:	42ac      	cmp	r4, r5
   202a2:	4626      	mov	r6, r4
   202a4:	d90a      	bls.n	202bc <z_init_static_threads+0x28>
   202a6:	4837      	ldr	r0, [pc, #220]	; (20384 <z_init_static_threads+0xf0>)
   202a8:	4639      	mov	r1, r7
   202aa:	f240 22ee 	movw	r2, #750	; 0x2ee
   202ae:	f006 f926 	bl	264fe <assert_print>
   202b2:	f240 21ee 	movw	r1, #750	; 0x2ee
   202b6:	4638      	mov	r0, r7
   202b8:	f006 f91a 	bl	264f0 <assert_post_action>
   202bc:	42ae      	cmp	r6, r5
   202be:	f104 0430 	add.w	r4, r4, #48	; 0x30
   202c2:	d31b      	bcc.n	202fc <z_init_static_threads+0x68>
	k_sched_lock();
   202c4:	f001 f95c 	bl	21580 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   202c8:	4c2b      	ldr	r4, [pc, #172]	; (20378 <z_init_static_threads+0xe4>)
   202ca:	4e2d      	ldr	r6, [pc, #180]	; (20380 <z_init_static_threads+0xec>)
   202cc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 20384 <z_init_static_threads+0xf0>
   202d0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 20388 <z_init_static_threads+0xf4>
   202d4:	42ac      	cmp	r4, r5
   202d6:	d90a      	bls.n	202ee <z_init_static_threads+0x5a>
   202d8:	4631      	mov	r1, r6
   202da:	4640      	mov	r0, r8
   202dc:	f240 320d 	movw	r2, #781	; 0x30d
   202e0:	f006 f90d 	bl	264fe <assert_print>
   202e4:	f240 310d 	movw	r1, #781	; 0x30d
   202e8:	4630      	mov	r0, r6
   202ea:	f006 f901 	bl	264f0 <assert_post_action>
   202ee:	42ac      	cmp	r4, r5
   202f0:	d320      	bcc.n	20334 <z_init_static_threads+0xa0>
}
   202f2:	b007      	add	sp, #28
   202f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   202f8:	f001 bda0 	b.w	21e3c <k_sched_unlock>
		z_setup_new_thread(
   202fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20300:	9305      	str	r3, [sp, #20]
   20302:	f854 3c10 	ldr.w	r3, [r4, #-16]
   20306:	9304      	str	r3, [sp, #16]
   20308:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2030c:	9303      	str	r3, [sp, #12]
   2030e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   20312:	9302      	str	r3, [sp, #8]
   20314:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   20318:	9301      	str	r3, [sp, #4]
   2031a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2031e:	9300      	str	r3, [sp, #0]
   20320:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   20324:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   20328:	f7ff ff14 	bl	20154 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2032c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   20330:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   20332:	e7b5      	b.n	202a0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   20334:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20336:	1c5a      	adds	r2, r3, #1
   20338:	d00f      	beq.n	2035a <z_init_static_threads+0xc6>
					    K_MSEC(thread_data->init_delay));
   2033a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   2033e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   20342:	f240 30e7 	movw	r0, #999	; 0x3e7
   20346:	2100      	movs	r1, #0
   20348:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2034c:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   20350:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20352:	d104      	bne.n	2035e <z_init_static_threads+0xca>
	z_sched_start(thread);
   20354:	4638      	mov	r0, r7
   20356:	f001 fb43 	bl	219e0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2035a:	3430      	adds	r4, #48	; 0x30
   2035c:	e7ba      	b.n	202d4 <z_init_static_threads+0x40>
   2035e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20362:	2300      	movs	r3, #0
   20364:	f7e0 fecc 	bl	1100 <__aeabi_uldivmod>
   20368:	4602      	mov	r2, r0
   2036a:	460b      	mov	r3, r1
   2036c:	f107 0018 	add.w	r0, r7, #24
   20370:	4649      	mov	r1, r9
   20372:	f002 f8c3 	bl	224fc <z_add_timeout>
   20376:	e7f0      	b.n	2035a <z_init_static_threads+0xc6>
   20378:	200007c8 	.word	0x200007c8
   2037c:	200007c8 	.word	0x200007c8
   20380:	0002d7ba 	.word	0x0002d7ba
   20384:	0002aa75 	.word	0x0002aa75
   20388:	00021a65 	.word	0x00021a65

0002038c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   2038c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   2038e:	b138      	cbz	r0, 203a0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   20390:	4b04      	ldr	r3, [pc, #16]	; (203a4 <z_spin_lock_valid+0x18>)
   20392:	7d1b      	ldrb	r3, [r3, #20]
   20394:	f000 0003 	and.w	r0, r0, #3
   20398:	1ac0      	subs	r0, r0, r3
   2039a:	bf18      	it	ne
   2039c:	2001      	movne	r0, #1
   2039e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   203a0:	2001      	movs	r0, #1
}
   203a2:	4770      	bx	lr
   203a4:	20002894 	.word	0x20002894

000203a8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   203a8:	4906      	ldr	r1, [pc, #24]	; (203c4 <z_spin_unlock_valid+0x1c>)
{
   203aa:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   203ac:	688a      	ldr	r2, [r1, #8]
   203ae:	7d08      	ldrb	r0, [r1, #20]
   203b0:	6819      	ldr	r1, [r3, #0]
   203b2:	4302      	orrs	r2, r0
   203b4:	4291      	cmp	r1, r2
   203b6:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   203ba:	bf04      	itt	eq
   203bc:	6018      	streq	r0, [r3, #0]
	return true;
   203be:	2001      	moveq	r0, #1
}
   203c0:	4770      	bx	lr
   203c2:	bf00      	nop
   203c4:	20002894 	.word	0x20002894

000203c8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   203c8:	4a02      	ldr	r2, [pc, #8]	; (203d4 <z_spin_lock_set_owner+0xc>)
   203ca:	7d11      	ldrb	r1, [r2, #20]
   203cc:	6893      	ldr	r3, [r2, #8]
   203ce:	430b      	orrs	r3, r1
   203d0:	6003      	str	r3, [r0, #0]
}
   203d2:	4770      	bx	lr
   203d4:	20002894 	.word	0x20002894

000203d8 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   203d8:	4c12      	ldr	r4, [pc, #72]	; (20424 <idle+0x4c>)
{
   203da:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   203dc:	68a3      	ldr	r3, [r4, #8]
   203de:	f993 300e 	ldrsb.w	r3, [r3, #14]
   203e2:	2b00      	cmp	r3, #0
   203e4:	da08      	bge.n	203f8 <idle+0x20>
   203e6:	4910      	ldr	r1, [pc, #64]	; (20428 <idle+0x50>)
   203e8:	4810      	ldr	r0, [pc, #64]	; (2042c <idle+0x54>)
   203ea:	2227      	movs	r2, #39	; 0x27
   203ec:	f006 f887 	bl	264fe <assert_print>
   203f0:	480d      	ldr	r0, [pc, #52]	; (20428 <idle+0x50>)
   203f2:	2127      	movs	r1, #39	; 0x27
   203f4:	f006 f87c 	bl	264f0 <assert_post_action>
	return !z_sys_post_kernel;
   203f8:	4d0d      	ldr	r5, [pc, #52]	; (20430 <idle+0x58>)
	__asm__ volatile(
   203fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   203fe:	f3ef 8311 	mrs	r3, BASEPRI
   20402:	f382 8812 	msr	BASEPRI_MAX, r2
   20406:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2040a:	f002 f961 	bl	226d0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2040e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   20410:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20412:	b913      	cbnz	r3, 2041a <idle+0x42>
	arch_cpu_idle();
   20414:	f7f3 fe10 	bl	14038 <arch_cpu_idle>
}
   20418:	e7ef      	b.n	203fa <idle+0x22>
   2041a:	f7f3 fbf3 	bl	13c04 <pm_system_suspend>
   2041e:	2800      	cmp	r0, #0
   20420:	d1eb      	bne.n	203fa <idle+0x22>
   20422:	e7f7      	b.n	20414 <idle+0x3c>
   20424:	20002894 	.word	0x20002894
   20428:	0002d7dd 	.word	0x0002d7dd
   2042c:	0002aa75 	.word	0x0002aa75
   20430:	20003cb9 	.word	0x20003cb9

00020434 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   20434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20438:	4604      	mov	r4, r0
   2043a:	4617      	mov	r7, r2
   2043c:	461e      	mov	r6, r3
   2043e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20442:	b143      	cbz	r3, 20456 <z_impl_k_mutex_lock+0x22>
   20444:	495f      	ldr	r1, [pc, #380]	; (205c4 <z_impl_k_mutex_lock+0x190>)
   20446:	4860      	ldr	r0, [pc, #384]	; (205c8 <z_impl_k_mutex_lock+0x194>)
   20448:	2265      	movs	r2, #101	; 0x65
   2044a:	f006 f858 	bl	264fe <assert_print>
   2044e:	485d      	ldr	r0, [pc, #372]	; (205c4 <z_impl_k_mutex_lock+0x190>)
   20450:	2165      	movs	r1, #101	; 0x65
   20452:	f006 f84d 	bl	264f0 <assert_post_action>
   20456:	f04f 0340 	mov.w	r3, #64	; 0x40
   2045a:	f3ef 8811 	mrs	r8, BASEPRI
   2045e:	f383 8812 	msr	BASEPRI_MAX, r3
   20462:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20466:	4859      	ldr	r0, [pc, #356]	; (205cc <z_impl_k_mutex_lock+0x198>)
   20468:	f7ff ff90 	bl	2038c <z_spin_lock_valid>
   2046c:	b940      	cbnz	r0, 20480 <z_impl_k_mutex_lock+0x4c>
   2046e:	4958      	ldr	r1, [pc, #352]	; (205d0 <z_impl_k_mutex_lock+0x19c>)
   20470:	4855      	ldr	r0, [pc, #340]	; (205c8 <z_impl_k_mutex_lock+0x194>)
   20472:	228e      	movs	r2, #142	; 0x8e
   20474:	f006 f843 	bl	264fe <assert_print>
   20478:	4855      	ldr	r0, [pc, #340]	; (205d0 <z_impl_k_mutex_lock+0x19c>)
   2047a:	218e      	movs	r1, #142	; 0x8e
   2047c:	f006 f838 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20480:	4852      	ldr	r0, [pc, #328]	; (205cc <z_impl_k_mutex_lock+0x198>)
   20482:	f7ff ffa1 	bl	203c8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   20486:	68e3      	ldr	r3, [r4, #12]
   20488:	4a52      	ldr	r2, [pc, #328]	; (205d4 <z_impl_k_mutex_lock+0x1a0>)
   2048a:	b1d3      	cbz	r3, 204c2 <z_impl_k_mutex_lock+0x8e>
   2048c:	68a0      	ldr	r0, [r4, #8]
   2048e:	6891      	ldr	r1, [r2, #8]
   20490:	4288      	cmp	r0, r1
   20492:	d033      	beq.n	204fc <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   20494:	ea57 0306 	orrs.w	r3, r7, r6
   20498:	d132      	bne.n	20500 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2049a:	484c      	ldr	r0, [pc, #304]	; (205cc <z_impl_k_mutex_lock+0x198>)
   2049c:	f7ff ff84 	bl	203a8 <z_spin_unlock_valid>
   204a0:	b940      	cbnz	r0, 204b4 <z_impl_k_mutex_lock+0x80>
   204a2:	494b      	ldr	r1, [pc, #300]	; (205d0 <z_impl_k_mutex_lock+0x19c>)
   204a4:	4848      	ldr	r0, [pc, #288]	; (205c8 <z_impl_k_mutex_lock+0x194>)
   204a6:	22b9      	movs	r2, #185	; 0xb9
   204a8:	f006 f829 	bl	264fe <assert_print>
   204ac:	4848      	ldr	r0, [pc, #288]	; (205d0 <z_impl_k_mutex_lock+0x19c>)
   204ae:	21b9      	movs	r1, #185	; 0xb9
   204b0:	f006 f81e 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   204b4:	f388 8811 	msr	BASEPRI, r8
   204b8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   204bc:	f06f 000f 	mvn.w	r0, #15
   204c0:	e019      	b.n	204f6 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   204c2:	6891      	ldr	r1, [r2, #8]
   204c4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   204c8:	4840      	ldr	r0, [pc, #256]	; (205cc <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   204ca:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   204cc:	3301      	adds	r3, #1
   204ce:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   204d0:	6893      	ldr	r3, [r2, #8]
   204d2:	60a3      	str	r3, [r4, #8]
   204d4:	f7ff ff68 	bl	203a8 <z_spin_unlock_valid>
   204d8:	b940      	cbnz	r0, 204ec <z_impl_k_mutex_lock+0xb8>
   204da:	493d      	ldr	r1, [pc, #244]	; (205d0 <z_impl_k_mutex_lock+0x19c>)
   204dc:	483a      	ldr	r0, [pc, #232]	; (205c8 <z_impl_k_mutex_lock+0x194>)
   204de:	22b9      	movs	r2, #185	; 0xb9
   204e0:	f006 f80d 	bl	264fe <assert_print>
   204e4:	483a      	ldr	r0, [pc, #232]	; (205d0 <z_impl_k_mutex_lock+0x19c>)
   204e6:	21b9      	movs	r1, #185	; 0xb9
   204e8:	f006 f802 	bl	264f0 <assert_post_action>
   204ec:	f388 8811 	msr	BASEPRI, r8
   204f0:	f3bf 8f6f 	isb	sy
		return 0;
   204f4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   204f6:	b002      	add	sp, #8
   204f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   204fc:	6921      	ldr	r1, [r4, #16]
   204fe:	e7e3      	b.n	204c8 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20500:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20504:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   20508:	4299      	cmp	r1, r3
   2050a:	bfa8      	it	ge
   2050c:	4619      	movge	r1, r3
   2050e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   20512:	4291      	cmp	r1, r2
   20514:	bfb8      	it	lt
   20516:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   20518:	428b      	cmp	r3, r1
   2051a:	dd3e      	ble.n	2059a <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   2051c:	f009 f9c1 	bl	298a2 <adjust_owner_prio.isra.0>
   20520:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20522:	e9cd 7600 	strd	r7, r6, [sp]
   20526:	4829      	ldr	r0, [pc, #164]	; (205cc <z_impl_k_mutex_lock+0x198>)
   20528:	4622      	mov	r2, r4
   2052a:	4641      	mov	r1, r8
   2052c:	f001 fb86 	bl	21c3c <z_pend_curr>
	if (got_mutex == 0) {
   20530:	2800      	cmp	r0, #0
   20532:	d0e0      	beq.n	204f6 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   20534:	f04f 0340 	mov.w	r3, #64	; 0x40
   20538:	f3ef 8611 	mrs	r6, BASEPRI
   2053c:	f383 8812 	msr	BASEPRI_MAX, r3
   20540:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20544:	4821      	ldr	r0, [pc, #132]	; (205cc <z_impl_k_mutex_lock+0x198>)
   20546:	f7ff ff21 	bl	2038c <z_spin_lock_valid>
   2054a:	b940      	cbnz	r0, 2055e <z_impl_k_mutex_lock+0x12a>
   2054c:	4920      	ldr	r1, [pc, #128]	; (205d0 <z_impl_k_mutex_lock+0x19c>)
   2054e:	481e      	ldr	r0, [pc, #120]	; (205c8 <z_impl_k_mutex_lock+0x194>)
   20550:	228e      	movs	r2, #142	; 0x8e
   20552:	f005 ffd4 	bl	264fe <assert_print>
   20556:	481e      	ldr	r0, [pc, #120]	; (205d0 <z_impl_k_mutex_lock+0x19c>)
   20558:	218e      	movs	r1, #142	; 0x8e
   2055a:	f005 ffc9 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2055e:	481b      	ldr	r0, [pc, #108]	; (205cc <z_impl_k_mutex_lock+0x198>)
   20560:	f7ff ff32 	bl	203c8 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20564:	6823      	ldr	r3, [r4, #0]
   20566:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20568:	429c      	cmp	r4, r3
   2056a:	d00a      	beq.n	20582 <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2056c:	b14b      	cbz	r3, 20582 <z_impl_k_mutex_lock+0x14e>
   2056e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20572:	4299      	cmp	r1, r3
   20574:	bfa8      	it	ge
   20576:	4619      	movge	r1, r3
   20578:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   2057c:	4299      	cmp	r1, r3
   2057e:	bfb8      	it	lt
   20580:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   20582:	68a0      	ldr	r0, [r4, #8]
   20584:	f009 f98d 	bl	298a2 <adjust_owner_prio.isra.0>
   20588:	b900      	cbnz	r0, 2058c <z_impl_k_mutex_lock+0x158>
	if (resched) {
   2058a:	b145      	cbz	r5, 2059e <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   2058c:	480f      	ldr	r0, [pc, #60]	; (205cc <z_impl_k_mutex_lock+0x198>)
   2058e:	4631      	mov	r1, r6
   20590:	f000 ffc0 	bl	21514 <z_reschedule>
	return -EAGAIN;
   20594:	f06f 000a 	mvn.w	r0, #10
   20598:	e7ad      	b.n	204f6 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   2059a:	2500      	movs	r5, #0
   2059c:	e7c1      	b.n	20522 <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2059e:	480b      	ldr	r0, [pc, #44]	; (205cc <z_impl_k_mutex_lock+0x198>)
   205a0:	f7ff ff02 	bl	203a8 <z_spin_unlock_valid>
   205a4:	b940      	cbnz	r0, 205b8 <z_impl_k_mutex_lock+0x184>
   205a6:	490a      	ldr	r1, [pc, #40]	; (205d0 <z_impl_k_mutex_lock+0x19c>)
   205a8:	4807      	ldr	r0, [pc, #28]	; (205c8 <z_impl_k_mutex_lock+0x194>)
   205aa:	22b9      	movs	r2, #185	; 0xb9
   205ac:	f005 ffa7 	bl	264fe <assert_print>
   205b0:	4807      	ldr	r0, [pc, #28]	; (205d0 <z_impl_k_mutex_lock+0x19c>)
   205b2:	21b9      	movs	r1, #185	; 0xb9
   205b4:	f005 ff9c 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   205b8:	f386 8811 	msr	BASEPRI, r6
   205bc:	f3bf 8f6f 	isb	sy
   205c0:	e7e8      	b.n	20594 <z_impl_k_mutex_lock+0x160>
   205c2:	bf00      	nop
   205c4:	0002d7fe 	.word	0x0002d7fe
   205c8:	0002aa75 	.word	0x0002aa75
   205cc:	200028bc 	.word	0x200028bc
   205d0:	0002ac34 	.word	0x0002ac34
   205d4:	20002894 	.word	0x20002894

000205d8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   205d8:	b538      	push	{r3, r4, r5, lr}
   205da:	4604      	mov	r4, r0
   205dc:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   205e0:	b143      	cbz	r3, 205f4 <z_impl_k_mutex_unlock+0x1c>
   205e2:	4934      	ldr	r1, [pc, #208]	; (206b4 <z_impl_k_mutex_unlock+0xdc>)
   205e4:	4834      	ldr	r0, [pc, #208]	; (206b8 <z_impl_k_mutex_unlock+0xe0>)
   205e6:	22c7      	movs	r2, #199	; 0xc7
   205e8:	f005 ff89 	bl	264fe <assert_print>
   205ec:	4831      	ldr	r0, [pc, #196]	; (206b4 <z_impl_k_mutex_unlock+0xdc>)
   205ee:	21c7      	movs	r1, #199	; 0xc7
   205f0:	f005 ff7e 	bl	264f0 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   205f4:	68a3      	ldr	r3, [r4, #8]
   205f6:	2b00      	cmp	r3, #0
   205f8:	d055      	beq.n	206a6 <z_impl_k_mutex_unlock+0xce>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   205fa:	4a30      	ldr	r2, [pc, #192]	; (206bc <z_impl_k_mutex_unlock+0xe4>)
   205fc:	6892      	ldr	r2, [r2, #8]
   205fe:	4293      	cmp	r3, r2
   20600:	d154      	bne.n	206ac <z_impl_k_mutex_unlock+0xd4>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   20602:	68e3      	ldr	r3, [r4, #12]
   20604:	b943      	cbnz	r3, 20618 <z_impl_k_mutex_unlock+0x40>
   20606:	492b      	ldr	r1, [pc, #172]	; (206b4 <z_impl_k_mutex_unlock+0xdc>)
   20608:	482b      	ldr	r0, [pc, #172]	; (206b8 <z_impl_k_mutex_unlock+0xe0>)
   2060a:	22df      	movs	r2, #223	; 0xdf
   2060c:	f005 ff77 	bl	264fe <assert_print>
   20610:	4828      	ldr	r0, [pc, #160]	; (206b4 <z_impl_k_mutex_unlock+0xdc>)
   20612:	21df      	movs	r1, #223	; 0xdf
   20614:	f005 ff6c 	bl	264f0 <assert_post_action>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   20618:	68e3      	ldr	r3, [r4, #12]
   2061a:	2b01      	cmp	r3, #1
   2061c:	d903      	bls.n	20626 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count--;
   2061e:	3b01      	subs	r3, #1
   20620:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   20622:	2000      	movs	r0, #0
}
   20624:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   20626:	f04f 0340 	mov.w	r3, #64	; 0x40
   2062a:	f3ef 8511 	mrs	r5, BASEPRI
   2062e:	f383 8812 	msr	BASEPRI_MAX, r3
   20632:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20636:	4822      	ldr	r0, [pc, #136]	; (206c0 <z_impl_k_mutex_unlock+0xe8>)
   20638:	f7ff fea8 	bl	2038c <z_spin_lock_valid>
   2063c:	b940      	cbnz	r0, 20650 <z_impl_k_mutex_unlock+0x78>
   2063e:	4921      	ldr	r1, [pc, #132]	; (206c4 <z_impl_k_mutex_unlock+0xec>)
   20640:	481d      	ldr	r0, [pc, #116]	; (206b8 <z_impl_k_mutex_unlock+0xe0>)
   20642:	228e      	movs	r2, #142	; 0x8e
   20644:	f005 ff5b 	bl	264fe <assert_print>
   20648:	481e      	ldr	r0, [pc, #120]	; (206c4 <z_impl_k_mutex_unlock+0xec>)
   2064a:	218e      	movs	r1, #142	; 0x8e
   2064c:	f005 ff50 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20650:	481b      	ldr	r0, [pc, #108]	; (206c0 <z_impl_k_mutex_unlock+0xe8>)
   20652:	f7ff feb9 	bl	203c8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   20656:	6921      	ldr	r1, [r4, #16]
   20658:	68a0      	ldr	r0, [r4, #8]
   2065a:	f009 f922 	bl	298a2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2065e:	4620      	mov	r0, r4
   20660:	f001 fc48 	bl	21ef4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   20664:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20666:	b158      	cbz	r0, 20680 <z_impl_k_mutex_unlock+0xa8>
		mutex->owner_orig_prio = new_owner->base.prio;
   20668:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2066c:	6122      	str	r2, [r4, #16]
   2066e:	2400      	movs	r4, #0
   20670:	67c4      	str	r4, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   20672:	f001 f97f 	bl	21974 <z_ready_thread>
		z_reschedule(&lock, key);
   20676:	4812      	ldr	r0, [pc, #72]	; (206c0 <z_impl_k_mutex_unlock+0xe8>)
   20678:	4629      	mov	r1, r5
   2067a:	f000 ff4b 	bl	21514 <z_reschedule>
   2067e:	e7d0      	b.n	20622 <z_impl_k_mutex_unlock+0x4a>
		mutex->lock_count = 0U;
   20680:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20682:	480f      	ldr	r0, [pc, #60]	; (206c0 <z_impl_k_mutex_unlock+0xe8>)
   20684:	f7ff fe90 	bl	203a8 <z_spin_unlock_valid>
   20688:	b940      	cbnz	r0, 2069c <z_impl_k_mutex_unlock+0xc4>
   2068a:	490e      	ldr	r1, [pc, #56]	; (206c4 <z_impl_k_mutex_unlock+0xec>)
   2068c:	480a      	ldr	r0, [pc, #40]	; (206b8 <z_impl_k_mutex_unlock+0xe0>)
   2068e:	22b9      	movs	r2, #185	; 0xb9
   20690:	f005 ff35 	bl	264fe <assert_print>
   20694:	480b      	ldr	r0, [pc, #44]	; (206c4 <z_impl_k_mutex_unlock+0xec>)
   20696:	21b9      	movs	r1, #185	; 0xb9
   20698:	f005 ff2a 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   2069c:	f385 8811 	msr	BASEPRI, r5
   206a0:	f3bf 8f6f 	isb	sy
   206a4:	e7bd      	b.n	20622 <z_impl_k_mutex_unlock+0x4a>
		return -EINVAL;
   206a6:	f06f 0015 	mvn.w	r0, #21
   206aa:	e7bb      	b.n	20624 <z_impl_k_mutex_unlock+0x4c>
		return -EPERM;
   206ac:	f04f 30ff 	mov.w	r0, #4294967295
   206b0:	e7b8      	b.n	20624 <z_impl_k_mutex_unlock+0x4c>
   206b2:	bf00      	nop
   206b4:	0002d7fe 	.word	0x0002d7fe
   206b8:	0002aa75 	.word	0x0002aa75
   206bc:	20002894 	.word	0x20002894
   206c0:	200028bc 	.word	0x200028bc
   206c4:	0002ac34 	.word	0x0002ac34

000206c8 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   206c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   206cc:	4604      	mov	r4, r0
   206ce:	f89d a020 	ldrb.w	sl, [sp, #32]
   206d2:	460d      	mov	r5, r1
   206d4:	4690      	mov	r8, r2
   206d6:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   206d8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   206dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   206e0:	f3ef 8711 	mrs	r7, BASEPRI
   206e4:	f383 8812 	msr	BASEPRI_MAX, r3
   206e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   206ec:	4630      	mov	r0, r6
   206ee:	f7ff fe4d 	bl	2038c <z_spin_lock_valid>
   206f2:	b940      	cbnz	r0, 20706 <queue_insert+0x3e>
   206f4:	4936      	ldr	r1, [pc, #216]	; (207d0 <queue_insert+0x108>)
   206f6:	4837      	ldr	r0, [pc, #220]	; (207d4 <queue_insert+0x10c>)
   206f8:	228e      	movs	r2, #142	; 0x8e
   206fa:	f005 ff00 	bl	264fe <assert_print>
   206fe:	4834      	ldr	r0, [pc, #208]	; (207d0 <queue_insert+0x108>)
   20700:	218e      	movs	r1, #142	; 0x8e
   20702:	f005 fef5 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20706:	4630      	mov	r0, r6
   20708:	f7ff fe5e 	bl	203c8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   2070c:	f1ba 0f00 	cmp.w	sl, #0
   20710:	d000      	beq.n	20714 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   20712:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20714:	f104 000c 	add.w	r0, r4, #12
   20718:	f001 fbec 	bl	21ef4 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2071c:	b158      	cbz	r0, 20736 <queue_insert+0x6e>
   2071e:	2400      	movs	r4, #0
   20720:	67c4      	str	r4, [r0, #124]	; 0x7c
   20722:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   20726:	f001 f925 	bl	21974 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2072a:	4630      	mov	r0, r6
   2072c:	4639      	mov	r1, r7
   2072e:	f000 fef1 	bl	21514 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   20732:	2000      	movs	r0, #0
   20734:	e019      	b.n	2076a <queue_insert+0xa2>
	if (alloc) {
   20736:	f1b9 0f00 	cmp.w	r9, #0
   2073a:	d028      	beq.n	2078e <queue_insert+0xc6>
	return z_thread_aligned_alloc(0, size);
   2073c:	2108      	movs	r1, #8
   2073e:	f002 fbf9 	bl	22f34 <z_thread_aligned_alloc>
		if (anode == NULL) {
   20742:	b9a0      	cbnz	r0, 2076e <queue_insert+0xa6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20744:	4630      	mov	r0, r6
   20746:	f7ff fe2f 	bl	203a8 <z_spin_unlock_valid>
   2074a:	b940      	cbnz	r0, 2075e <queue_insert+0x96>
   2074c:	4920      	ldr	r1, [pc, #128]	; (207d0 <queue_insert+0x108>)
   2074e:	4821      	ldr	r0, [pc, #132]	; (207d4 <queue_insert+0x10c>)
   20750:	22b9      	movs	r2, #185	; 0xb9
   20752:	f005 fed4 	bl	264fe <assert_print>
   20756:	481e      	ldr	r0, [pc, #120]	; (207d0 <queue_insert+0x108>)
   20758:	21b9      	movs	r1, #185	; 0xb9
   2075a:	f005 fec9 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   2075e:	f387 8811 	msr	BASEPRI, r7
   20762:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20766:	f06f 000b 	mvn.w	r0, #11
}
   2076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2076e:	2301      	movs	r3, #1
		anode->data = data;
   20770:	f8c0 8004 	str.w	r8, [r0, #4]
   20774:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20776:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20778:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2077c:	b95d      	cbnz	r5, 20796 <queue_insert+0xce>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2077e:	6823      	ldr	r3, [r4, #0]
   20780:	4313      	orrs	r3, r2
   20782:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20784:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   20786:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20788:	b973      	cbnz	r3, 207a8 <queue_insert+0xe0>
	list->tail = node;
   2078a:	6060      	str	r0, [r4, #4]
}
   2078c:	e00c      	b.n	207a8 <queue_insert+0xe0>
	node->next_and_flags = flags;
   2078e:	f8c8 9000 	str.w	r9, [r8]
}
   20792:	4640      	mov	r0, r8
   20794:	e7ef      	b.n	20776 <queue_insert+0xae>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20796:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20798:	f033 0303 	bics.w	r3, r3, #3
   2079c:	d110      	bne.n	207c0 <queue_insert+0xf8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2079e:	6002      	str	r2, [r0, #0]
	return list->tail;
   207a0:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   207a2:	b93a      	cbnz	r2, 207b4 <queue_insert+0xec>
	list->head = node;
   207a4:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   207a8:	2104      	movs	r1, #4
   207aa:	f104 0014 	add.w	r0, r4, #20
   207ae:	f009 fa1a 	bl	29be6 <z_handle_obj_poll_events>
   207b2:	e7ba      	b.n	2072a <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   207b4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   207b6:	f003 0303 	and.w	r3, r3, #3
   207ba:	4303      	orrs	r3, r0
   207bc:	6013      	str	r3, [r2, #0]
   207be:	e7e4      	b.n	2078a <queue_insert+0xc2>
   207c0:	4313      	orrs	r3, r2
   207c2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   207c4:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   207c6:	f003 0303 	and.w	r3, r3, #3
   207ca:	4303      	orrs	r3, r0
   207cc:	602b      	str	r3, [r5, #0]
}
   207ce:	e7eb      	b.n	207a8 <queue_insert+0xe0>
   207d0:	0002ac34 	.word	0x0002ac34
   207d4:	0002aa75 	.word	0x0002aa75

000207d8 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   207d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   207dc:	4605      	mov	r5, r0
   207de:	4616      	mov	r6, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   207e0:	460c      	mov	r4, r1
   207e2:	2900      	cmp	r1, #0
   207e4:	d045      	beq.n	20872 <k_queue_append_list+0x9a>
   207e6:	2a00      	cmp	r2, #0
   207e8:	d043      	beq.n	20872 <k_queue_append_list+0x9a>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   207ea:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   207ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   207f2:	f3ef 8911 	mrs	r9, BASEPRI
   207f6:	f383 8812 	msr	BASEPRI_MAX, r3
   207fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   207fe:	4638      	mov	r0, r7
   20800:	f7ff fdc4 	bl	2038c <z_spin_lock_valid>
   20804:	b940      	cbnz	r0, 20818 <k_queue_append_list+0x40>
   20806:	491c      	ldr	r1, [pc, #112]	; (20878 <k_queue_append_list+0xa0>)
   20808:	481c      	ldr	r0, [pc, #112]	; (2087c <k_queue_append_list+0xa4>)
   2080a:	228e      	movs	r2, #142	; 0x8e
   2080c:	f005 fe77 	bl	264fe <assert_print>
   20810:	4819      	ldr	r0, [pc, #100]	; (20878 <k_queue_append_list+0xa0>)
   20812:	218e      	movs	r1, #142	; 0x8e
   20814:	f005 fe6c 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20818:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   2081a:	f105 080c 	add.w	r8, r5, #12
   2081e:	f7ff fdd3 	bl	203c8 <z_spin_lock_set_owner>
   20822:	4640      	mov	r0, r8
   20824:	f001 fb66 	bl	21ef4 <z_unpend_first_thread>
   20828:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   2082c:	b920      	cbnz	r0, 20838 <k_queue_append_list+0x60>
	return list->tail;
   2082e:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   20830:	b9ca      	cbnz	r2, 20866 <k_queue_append_list+0x8e>
	list->head = node;
   20832:	602c      	str	r4, [r5, #0]
	list->tail = node;
   20834:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   20836:	e00a      	b.n	2084e <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   20838:	6144      	str	r4, [r0, #20]
   2083a:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2083e:	f001 f899 	bl	21974 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   20842:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   20844:	4640      	mov	r0, r8
   20846:	f001 fb55 	bl	21ef4 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2084a:	2c00      	cmp	r4, #0
   2084c:	d1ee      	bne.n	2082c <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2084e:	2104      	movs	r1, #4
   20850:	f105 0014 	add.w	r0, r5, #20
   20854:	f009 f9c7 	bl	29be6 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20858:	4638      	mov	r0, r7
   2085a:	4649      	mov	r1, r9
   2085c:	f000 fe5a 	bl	21514 <z_reschedule>
	return 0;
   20860:	2000      	movs	r0, #0
}
   20862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20866:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20868:	f003 0303 	and.w	r3, r3, #3
   2086c:	431c      	orrs	r4, r3
   2086e:	6014      	str	r4, [r2, #0]
}
   20870:	e7e0      	b.n	20834 <k_queue_append_list+0x5c>
		return -EINVAL;
   20872:	f06f 0015 	mvn.w	r0, #21
   20876:	e7f4      	b.n	20862 <k_queue_append_list+0x8a>
   20878:	0002ac34 	.word	0x0002ac34
   2087c:	0002aa75 	.word	0x0002aa75

00020880 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   20880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20884:	4605      	mov	r5, r0
   20886:	4690      	mov	r8, r2
   20888:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2088a:	f100 0608 	add.w	r6, r0, #8
   2088e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20892:	f3ef 8911 	mrs	r9, BASEPRI
   20896:	f383 8812 	msr	BASEPRI_MAX, r3
   2089a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2089e:	4630      	mov	r0, r6
   208a0:	f7ff fd74 	bl	2038c <z_spin_lock_valid>
   208a4:	b940      	cbnz	r0, 208b8 <z_impl_k_queue_get+0x38>
   208a6:	4920      	ldr	r1, [pc, #128]	; (20928 <z_impl_k_queue_get+0xa8>)
   208a8:	4820      	ldr	r0, [pc, #128]	; (2092c <z_impl_k_queue_get+0xac>)
   208aa:	228e      	movs	r2, #142	; 0x8e
   208ac:	f005 fe27 	bl	264fe <assert_print>
   208b0:	481d      	ldr	r0, [pc, #116]	; (20928 <z_impl_k_queue_get+0xa8>)
   208b2:	218e      	movs	r1, #142	; 0x8e
   208b4:	f005 fe1c 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   208b8:	4630      	mov	r0, r6
   208ba:	f7ff fd85 	bl	203c8 <z_spin_lock_set_owner>
	return list->head;
   208be:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   208c0:	b30c      	cbz	r4, 20906 <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   208c2:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   208c4:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   208c6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   208ca:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   208cc:	4620      	mov	r0, r4
	list->head = node;
   208ce:	602b      	str	r3, [r5, #0]
	list->tail = node;
   208d0:	bf08      	it	eq
   208d2:	606b      	streq	r3, [r5, #4]
   208d4:	2101      	movs	r1, #1
   208d6:	f008 fff3 	bl	298c0 <z_queue_node_peek>
   208da:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   208dc:	4630      	mov	r0, r6
   208de:	f7ff fd63 	bl	203a8 <z_spin_unlock_valid>
   208e2:	b940      	cbnz	r0, 208f6 <z_impl_k_queue_get+0x76>
   208e4:	4910      	ldr	r1, [pc, #64]	; (20928 <z_impl_k_queue_get+0xa8>)
   208e6:	4811      	ldr	r0, [pc, #68]	; (2092c <z_impl_k_queue_get+0xac>)
   208e8:	22b9      	movs	r2, #185	; 0xb9
   208ea:	f005 fe08 	bl	264fe <assert_print>
   208ee:	480e      	ldr	r0, [pc, #56]	; (20928 <z_impl_k_queue_get+0xa8>)
   208f0:	21b9      	movs	r1, #185	; 0xb9
   208f2:	f005 fdfd 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   208f6:	f389 8811 	msr	BASEPRI, r9
   208fa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   208fe:	4620      	mov	r0, r4
   20900:	b003      	add	sp, #12
   20902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20906:	ea58 0307 	orrs.w	r3, r8, r7
   2090a:	d0e7      	beq.n	208dc <z_impl_k_queue_get+0x5c>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2090c:	e9cd 8700 	strd	r8, r7, [sp]
   20910:	f105 020c 	add.w	r2, r5, #12
   20914:	4649      	mov	r1, r9
   20916:	4630      	mov	r0, r6
   20918:	f001 f990 	bl	21c3c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2091c:	2800      	cmp	r0, #0
   2091e:	d1ee      	bne.n	208fe <z_impl_k_queue_get+0x7e>
   20920:	4b03      	ldr	r3, [pc, #12]	; (20930 <z_impl_k_queue_get+0xb0>)
   20922:	689b      	ldr	r3, [r3, #8]
   20924:	695c      	ldr	r4, [r3, #20]
   20926:	e7ea      	b.n	208fe <z_impl_k_queue_get+0x7e>
   20928:	0002ac34 	.word	0x0002ac34
   2092c:	0002aa75 	.word	0x0002aa75
   20930:	20002894 	.word	0x20002894

00020934 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   20934:	b538      	push	{r3, r4, r5, lr}
   20936:	4604      	mov	r4, r0
	__asm__ volatile(
   20938:	f04f 0340 	mov.w	r3, #64	; 0x40
   2093c:	f3ef 8511 	mrs	r5, BASEPRI
   20940:	f383 8812 	msr	BASEPRI_MAX, r3
   20944:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20948:	4814      	ldr	r0, [pc, #80]	; (2099c <z_impl_k_sem_give+0x68>)
   2094a:	f7ff fd1f 	bl	2038c <z_spin_lock_valid>
   2094e:	b940      	cbnz	r0, 20962 <z_impl_k_sem_give+0x2e>
   20950:	4913      	ldr	r1, [pc, #76]	; (209a0 <z_impl_k_sem_give+0x6c>)
   20952:	4814      	ldr	r0, [pc, #80]	; (209a4 <z_impl_k_sem_give+0x70>)
   20954:	228e      	movs	r2, #142	; 0x8e
   20956:	f005 fdd2 	bl	264fe <assert_print>
   2095a:	4811      	ldr	r0, [pc, #68]	; (209a0 <z_impl_k_sem_give+0x6c>)
   2095c:	218e      	movs	r1, #142	; 0x8e
   2095e:	f005 fdc7 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20962:	480e      	ldr	r0, [pc, #56]	; (2099c <z_impl_k_sem_give+0x68>)
   20964:	f7ff fd30 	bl	203c8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   20968:	4620      	mov	r0, r4
   2096a:	f001 fac3 	bl	21ef4 <z_unpend_first_thread>

	if (thread != NULL) {
   2096e:	b148      	cbz	r0, 20984 <z_impl_k_sem_give+0x50>
   20970:	2200      	movs	r2, #0
   20972:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   20974:	f000 fffe 	bl	21974 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20978:	4629      	mov	r1, r5
   2097a:	4808      	ldr	r0, [pc, #32]	; (2099c <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2097c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   20980:	f000 bdc8 	b.w	21514 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20984:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20988:	429a      	cmp	r2, r3
   2098a:	bf18      	it	ne
   2098c:	3301      	addne	r3, #1
   2098e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20990:	2102      	movs	r1, #2
   20992:	f104 0010 	add.w	r0, r4, #16
   20996:	f009 f926 	bl	29be6 <z_handle_obj_poll_events>
}
   2099a:	e7ed      	b.n	20978 <z_impl_k_sem_give+0x44>
   2099c:	200028c0 	.word	0x200028c0
   209a0:	0002ac34 	.word	0x0002ac34
   209a4:	0002aa75 	.word	0x0002aa75

000209a8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   209a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   209aa:	4604      	mov	r4, r0
   209ac:	4616      	mov	r6, r2
   209ae:	461d      	mov	r5, r3
   209b0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   209b4:	b15b      	cbz	r3, 209ce <z_impl_k_sem_take+0x26>
   209b6:	ea52 0305 	orrs.w	r3, r2, r5
   209ba:	d008      	beq.n	209ce <z_impl_k_sem_take+0x26>
   209bc:	492b      	ldr	r1, [pc, #172]	; (20a6c <z_impl_k_sem_take+0xc4>)
   209be:	482c      	ldr	r0, [pc, #176]	; (20a70 <z_impl_k_sem_take+0xc8>)
   209c0:	2279      	movs	r2, #121	; 0x79
   209c2:	f005 fd9c 	bl	264fe <assert_print>
   209c6:	4829      	ldr	r0, [pc, #164]	; (20a6c <z_impl_k_sem_take+0xc4>)
   209c8:	2179      	movs	r1, #121	; 0x79
   209ca:	f005 fd91 	bl	264f0 <assert_post_action>
   209ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   209d2:	f3ef 8711 	mrs	r7, BASEPRI
   209d6:	f383 8812 	msr	BASEPRI_MAX, r3
   209da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   209de:	4825      	ldr	r0, [pc, #148]	; (20a74 <z_impl_k_sem_take+0xcc>)
   209e0:	f7ff fcd4 	bl	2038c <z_spin_lock_valid>
   209e4:	b940      	cbnz	r0, 209f8 <z_impl_k_sem_take+0x50>
   209e6:	4924      	ldr	r1, [pc, #144]	; (20a78 <z_impl_k_sem_take+0xd0>)
   209e8:	4821      	ldr	r0, [pc, #132]	; (20a70 <z_impl_k_sem_take+0xc8>)
   209ea:	228e      	movs	r2, #142	; 0x8e
   209ec:	f005 fd87 	bl	264fe <assert_print>
   209f0:	4821      	ldr	r0, [pc, #132]	; (20a78 <z_impl_k_sem_take+0xd0>)
   209f2:	218e      	movs	r1, #142	; 0x8e
   209f4:	f005 fd7c 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   209f8:	481e      	ldr	r0, [pc, #120]	; (20a74 <z_impl_k_sem_take+0xcc>)
   209fa:	f7ff fce5 	bl	203c8 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   209fe:	68a3      	ldr	r3, [r4, #8]
   20a00:	b1ab      	cbz	r3, 20a2e <z_impl_k_sem_take+0x86>
		sem->count--;
   20a02:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a04:	481b      	ldr	r0, [pc, #108]	; (20a74 <z_impl_k_sem_take+0xcc>)
   20a06:	60a3      	str	r3, [r4, #8]
   20a08:	f7ff fcce 	bl	203a8 <z_spin_unlock_valid>
   20a0c:	b940      	cbnz	r0, 20a20 <z_impl_k_sem_take+0x78>
   20a0e:	491a      	ldr	r1, [pc, #104]	; (20a78 <z_impl_k_sem_take+0xd0>)
   20a10:	4817      	ldr	r0, [pc, #92]	; (20a70 <z_impl_k_sem_take+0xc8>)
   20a12:	22b9      	movs	r2, #185	; 0xb9
   20a14:	f005 fd73 	bl	264fe <assert_print>
   20a18:	4817      	ldr	r0, [pc, #92]	; (20a78 <z_impl_k_sem_take+0xd0>)
   20a1a:	21b9      	movs	r1, #185	; 0xb9
   20a1c:	f005 fd68 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   20a20:	f387 8811 	msr	BASEPRI, r7
   20a24:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   20a28:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   20a2a:	b003      	add	sp, #12
   20a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20a2e:	ea56 0305 	orrs.w	r3, r6, r5
   20a32:	d113      	bne.n	20a5c <z_impl_k_sem_take+0xb4>
   20a34:	480f      	ldr	r0, [pc, #60]	; (20a74 <z_impl_k_sem_take+0xcc>)
   20a36:	f7ff fcb7 	bl	203a8 <z_spin_unlock_valid>
   20a3a:	b940      	cbnz	r0, 20a4e <z_impl_k_sem_take+0xa6>
   20a3c:	490e      	ldr	r1, [pc, #56]	; (20a78 <z_impl_k_sem_take+0xd0>)
   20a3e:	480c      	ldr	r0, [pc, #48]	; (20a70 <z_impl_k_sem_take+0xc8>)
   20a40:	22b9      	movs	r2, #185	; 0xb9
   20a42:	f005 fd5c 	bl	264fe <assert_print>
   20a46:	480c      	ldr	r0, [pc, #48]	; (20a78 <z_impl_k_sem_take+0xd0>)
   20a48:	21b9      	movs	r1, #185	; 0xb9
   20a4a:	f005 fd51 	bl	264f0 <assert_post_action>
   20a4e:	f387 8811 	msr	BASEPRI, r7
   20a52:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   20a56:	f06f 000f 	mvn.w	r0, #15
   20a5a:	e7e6      	b.n	20a2a <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20a5c:	e9cd 6500 	strd	r6, r5, [sp]
   20a60:	4622      	mov	r2, r4
   20a62:	4639      	mov	r1, r7
   20a64:	4803      	ldr	r0, [pc, #12]	; (20a74 <z_impl_k_sem_take+0xcc>)
   20a66:	f001 f8e9 	bl	21c3c <z_pend_curr>
	return ret;
   20a6a:	e7de      	b.n	20a2a <z_impl_k_sem_take+0x82>
   20a6c:	0002d820 	.word	0x0002d820
   20a70:	0002aa75 	.word	0x0002aa75
   20a74:	200028c0 	.word	0x200028c0
   20a78:	0002ac34 	.word	0x0002ac34

00020a7c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   20a7c:	b570      	push	{r4, r5, r6, lr}
   20a7e:	4604      	mov	r4, r0
	__asm__ volatile(
   20a80:	f04f 0340 	mov.w	r3, #64	; 0x40
   20a84:	f3ef 8511 	mrs	r5, BASEPRI
   20a88:	f383 8812 	msr	BASEPRI_MAX, r3
   20a8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a90:	4812      	ldr	r0, [pc, #72]	; (20adc <z_impl_k_sem_reset+0x60>)
   20a92:	f7ff fc7b 	bl	2038c <z_spin_lock_valid>
   20a96:	b940      	cbnz	r0, 20aaa <z_impl_k_sem_reset+0x2e>
   20a98:	4911      	ldr	r1, [pc, #68]	; (20ae0 <z_impl_k_sem_reset+0x64>)
   20a9a:	4812      	ldr	r0, [pc, #72]	; (20ae4 <z_impl_k_sem_reset+0x68>)
   20a9c:	228e      	movs	r2, #142	; 0x8e
   20a9e:	f005 fd2e 	bl	264fe <assert_print>
   20aa2:	480f      	ldr	r0, [pc, #60]	; (20ae0 <z_impl_k_sem_reset+0x64>)
   20aa4:	218e      	movs	r1, #142	; 0x8e
   20aa6:	f005 fd23 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20aaa:	480c      	ldr	r0, [pc, #48]	; (20adc <z_impl_k_sem_reset+0x60>)
   20aac:	f7ff fc8c 	bl	203c8 <z_spin_lock_set_owner>
   20ab0:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   20ab4:	4620      	mov	r0, r4
   20ab6:	f001 fa1d 	bl	21ef4 <z_unpend_first_thread>
		if (thread == NULL) {
   20aba:	b118      	cbz	r0, 20ac4 <z_impl_k_sem_reset+0x48>
   20abc:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   20abe:	f000 ff59 	bl	21974 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   20ac2:	e7f7      	b.n	20ab4 <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   20ac4:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20ac6:	2102      	movs	r1, #2
   20ac8:	f104 0010 	add.w	r0, r4, #16
   20acc:	f009 f88b 	bl	29be6 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   20ad0:	4629      	mov	r1, r5
   20ad2:	4802      	ldr	r0, [pc, #8]	; (20adc <z_impl_k_sem_reset+0x60>)
}
   20ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   20ad8:	f000 bd1c 	b.w	21514 <z_reschedule>
   20adc:	200028c0 	.word	0x200028c0
   20ae0:	0002ac34 	.word	0x0002ac34
   20ae4:	0002aa75 	.word	0x0002aa75

00020ae8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   20ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   20aea:	4b09      	ldr	r3, [pc, #36]	; (20b10 <k_sys_work_q_init+0x28>)
   20aec:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   20aee:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   20af0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   20af2:	9300      	str	r3, [sp, #0]
   20af4:	4907      	ldr	r1, [pc, #28]	; (20b14 <k_sys_work_q_init+0x2c>)
   20af6:	4808      	ldr	r0, [pc, #32]	; (20b18 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   20af8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   20afc:	f04f 33ff 	mov.w	r3, #4294967295
   20b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
   20b04:	f000 fa76 	bl	20ff4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   20b08:	4620      	mov	r0, r4
   20b0a:	b004      	add	sp, #16
   20b0c:	bd10      	pop	{r4, pc}
   20b0e:	bf00      	nop
   20b10:	0002d840 	.word	0x0002d840
   20b14:	20006bc0 	.word	0x20006bc0
   20b18:	20001e70 	.word	0x20001e70

00020b1c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   20b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b20:	4e70      	ldr	r6, [pc, #448]	; (20ce4 <work_queue_main+0x1c8>)
	return list->head;
   20b22:	4f71      	ldr	r7, [pc, #452]	; (20ce8 <work_queue_main+0x1cc>)
   20b24:	b085      	sub	sp, #20
   20b26:	4604      	mov	r4, r0
   20b28:	f04f 0340 	mov.w	r3, #64	; 0x40
   20b2c:	f3ef 8811 	mrs	r8, BASEPRI
   20b30:	f383 8812 	msr	BASEPRI_MAX, r3
   20b34:	f3bf 8f6f 	isb	sy
   20b38:	4630      	mov	r0, r6
   20b3a:	f7ff fc27 	bl	2038c <z_spin_lock_valid>
   20b3e:	b940      	cbnz	r0, 20b52 <work_queue_main+0x36>
   20b40:	496a      	ldr	r1, [pc, #424]	; (20cec <work_queue_main+0x1d0>)
   20b42:	486b      	ldr	r0, [pc, #428]	; (20cf0 <work_queue_main+0x1d4>)
   20b44:	228e      	movs	r2, #142	; 0x8e
   20b46:	f005 fcda 	bl	264fe <assert_print>
   20b4a:	4868      	ldr	r0, [pc, #416]	; (20cec <work_queue_main+0x1d0>)
   20b4c:	218e      	movs	r1, #142	; 0x8e
   20b4e:	f005 fccf 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20b52:	4630      	mov	r0, r6
   20b54:	f7ff fc38 	bl	203c8 <z_spin_lock_set_owner>
   20b58:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   20b5c:	b9b5      	cbnz	r5, 20b8c <work_queue_main+0x70>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   20b5e:	2102      	movs	r1, #2
   20b60:	f104 0098 	add.w	r0, r4, #152	; 0x98
   20b64:	f008 feea 	bl	2993c <flag_test_and_clear>
   20b68:	2800      	cmp	r0, #0
   20b6a:	f040 8084 	bne.w	20c76 <work_queue_main+0x15a>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   20b6e:	2300      	movs	r3, #0
   20b70:	9302      	str	r3, [sp, #8]
   20b72:	f04f 32ff 	mov.w	r2, #4294967295
   20b76:	f04f 33ff 	mov.w	r3, #4294967295
   20b7a:	e9cd 2300 	strd	r2, r3, [sp]
   20b7e:	4641      	mov	r1, r8
   20b80:	f104 0288 	add.w	r2, r4, #136	; 0x88
   20b84:	4630      	mov	r0, r6
   20b86:	f001 fc43 	bl	22410 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   20b8a:	e7cd      	b.n	20b28 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20b8c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   20b90:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   20b92:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20b96:	4295      	cmp	r5, r2
   20b98:	d101      	bne.n	20b9e <work_queue_main+0x82>
	list->tail = node;
   20b9a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   20b9e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
			handler = work->handler;
   20ba2:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp |= BIT(bit);
   20ba6:	f043 0302 	orr.w	r3, r3, #2
   20baa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   20bae:	68eb      	ldr	r3, [r5, #12]
   20bb0:	f023 0304 	bic.w	r3, r3, #4
   20bb4:	f043 0301 	orr.w	r3, r3, #1
   20bb8:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20bba:	4630      	mov	r0, r6
   20bbc:	f7ff fbf4 	bl	203a8 <z_spin_unlock_valid>
   20bc0:	b940      	cbnz	r0, 20bd4 <work_queue_main+0xb8>
   20bc2:	494a      	ldr	r1, [pc, #296]	; (20cec <work_queue_main+0x1d0>)
   20bc4:	484a      	ldr	r0, [pc, #296]	; (20cf0 <work_queue_main+0x1d4>)
   20bc6:	22b9      	movs	r2, #185	; 0xb9
   20bc8:	f005 fc99 	bl	264fe <assert_print>
   20bcc:	4847      	ldr	r0, [pc, #284]	; (20cec <work_queue_main+0x1d0>)
   20bce:	21b9      	movs	r1, #185	; 0xb9
   20bd0:	f005 fc8e 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   20bd4:	f388 8811 	msr	BASEPRI, r8
   20bd8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   20bdc:	f1b9 0f00 	cmp.w	r9, #0
   20be0:	d10a      	bne.n	20bf8 <work_queue_main+0xdc>
   20be2:	4944      	ldr	r1, [pc, #272]	; (20cf4 <work_queue_main+0x1d8>)
   20be4:	4842      	ldr	r0, [pc, #264]	; (20cf0 <work_queue_main+0x1d4>)
   20be6:	f240 229b 	movw	r2, #667	; 0x29b
   20bea:	f005 fc88 	bl	264fe <assert_print>
   20bee:	4841      	ldr	r0, [pc, #260]	; (20cf4 <work_queue_main+0x1d8>)
   20bf0:	f240 219b 	movw	r1, #667	; 0x29b
   20bf4:	f005 fc7c 	bl	264f0 <assert_post_action>
		handler(work);
   20bf8:	4628      	mov	r0, r5
   20bfa:	47c8      	blx	r9
	__asm__ volatile(
   20bfc:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c00:	f3ef 8a11 	mrs	sl, BASEPRI
   20c04:	f383 8812 	msr	BASEPRI_MAX, r3
   20c08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c0c:	4630      	mov	r0, r6
   20c0e:	f7ff fbbd 	bl	2038c <z_spin_lock_valid>
   20c12:	b940      	cbnz	r0, 20c26 <work_queue_main+0x10a>
   20c14:	4935      	ldr	r1, [pc, #212]	; (20cec <work_queue_main+0x1d0>)
   20c16:	4836      	ldr	r0, [pc, #216]	; (20cf0 <work_queue_main+0x1d4>)
   20c18:	228e      	movs	r2, #142	; 0x8e
   20c1a:	f005 fc70 	bl	264fe <assert_print>
   20c1e:	4833      	ldr	r0, [pc, #204]	; (20cec <work_queue_main+0x1d0>)
   20c20:	218e      	movs	r1, #142	; 0x8e
   20c22:	f005 fc65 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20c26:	4630      	mov	r0, r6
   20c28:	f7ff fbce 	bl	203c8 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   20c2c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20c2e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   20c30:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20c34:	d429      	bmi.n	20c8a <work_queue_main+0x16e>
	*flagp &= ~BIT(bit);
   20c36:	60ea      	str	r2, [r5, #12]
   20c38:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   20c3c:	f023 0302 	bic.w	r3, r3, #2
   20c40:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c44:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   20c46:	f3c3 2500 	ubfx	r5, r3, #8, #1
   20c4a:	f7ff fbad 	bl	203a8 <z_spin_unlock_valid>
   20c4e:	b940      	cbnz	r0, 20c62 <work_queue_main+0x146>
   20c50:	4926      	ldr	r1, [pc, #152]	; (20cec <work_queue_main+0x1d0>)
   20c52:	4827      	ldr	r0, [pc, #156]	; (20cf0 <work_queue_main+0x1d4>)
   20c54:	22b9      	movs	r2, #185	; 0xb9
   20c56:	f005 fc52 	bl	264fe <assert_print>
   20c5a:	4824      	ldr	r0, [pc, #144]	; (20cec <work_queue_main+0x1d0>)
   20c5c:	21b9      	movs	r1, #185	; 0xb9
   20c5e:	f005 fc47 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   20c62:	f38a 8811 	msr	BASEPRI, sl
   20c66:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   20c6a:	2d00      	cmp	r5, #0
   20c6c:	f47f af5c 	bne.w	20b28 <work_queue_main+0xc>
	z_impl_k_yield();
   20c70:	f001 f98a 	bl	21f88 <z_impl_k_yield>
}
   20c74:	e758      	b.n	20b28 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   20c76:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   20c7a:	2200      	movs	r2, #0
   20c7c:	2101      	movs	r1, #1
   20c7e:	4628      	mov	r0, r5
   20c80:	f001 fb80 	bl	22384 <z_sched_wake>
   20c84:	2800      	cmp	r0, #0
   20c86:	d1f8      	bne.n	20c7a <work_queue_main+0x15e>
   20c88:	e771      	b.n	20b6e <work_queue_main+0x52>
	return list->head;
   20c8a:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   20c8c:	f023 0303 	bic.w	r3, r3, #3
   20c90:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   20c92:	2800      	cmp	r0, #0
   20c94:	d0d0      	beq.n	20c38 <work_queue_main+0x11c>
	return node->next;
   20c96:	f04f 0800 	mov.w	r8, #0
   20c9a:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   20c9e:	46c3      	mov	fp, r8
		if (wc->work == work) {
   20ca0:	6843      	ldr	r3, [r0, #4]
   20ca2:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   20ca4:	4602      	mov	r2, r0
		if (wc->work == work) {
   20ca6:	d10d      	bne.n	20cc4 <work_queue_main+0x1a8>
	return node->next;
   20ca8:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   20caa:	f1b8 0f00 	cmp.w	r8, #0
   20cae:	d111      	bne.n	20cd4 <work_queue_main+0x1b8>
   20cb0:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   20cb2:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   20cb4:	4283      	cmp	r3, r0
   20cb6:	d100      	bne.n	20cba <work_queue_main+0x19e>
	list->tail = node;
   20cb8:	607a      	str	r2, [r7, #4]
	parent->next = child;
   20cba:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   20cbe:	f7ff fe39 	bl	20934 <z_impl_k_sem_give>
}
   20cc2:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   20cc4:	f1b9 0f00 	cmp.w	r9, #0
   20cc8:	d0b6      	beq.n	20c38 <work_queue_main+0x11c>
	return node->next;
   20cca:	4648      	mov	r0, r9
   20ccc:	4690      	mov	r8, r2
   20cce:	f8d9 9000 	ldr.w	r9, [r9]
   20cd2:	e7e5      	b.n	20ca0 <work_queue_main+0x184>
	return list->tail;
   20cd4:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   20cd6:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   20cda:	4298      	cmp	r0, r3
	list->tail = node;
   20cdc:	bf08      	it	eq
   20cde:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   20ce2:	e7ea      	b.n	20cba <work_queue_main+0x19e>
   20ce4:	200028c4 	.word	0x200028c4
   20ce8:	200028c8 	.word	0x200028c8
   20cec:	0002ac34 	.word	0x0002ac34
   20cf0:	0002aa75 	.word	0x0002aa75
   20cf4:	0002d849 	.word	0x0002d849

00020cf8 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   20cf8:	68c3      	ldr	r3, [r0, #12]
{
   20cfa:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   20cfc:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   20d00:	079b      	lsls	r3, r3, #30
{
   20d02:	4605      	mov	r5, r0
   20d04:	460c      	mov	r4, r1
	if (ret) {
   20d06:	d50d      	bpl.n	20d24 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   20d08:	2201      	movs	r2, #1
   20d0a:	2100      	movs	r1, #0
   20d0c:	f104 0008 	add.w	r0, r4, #8
   20d10:	f008 fe04 	bl	2991c <z_impl_k_sem_init>
	parent->next = child;
   20d14:	2300      	movs	r3, #0
   20d16:	6023      	str	r3, [r4, #0]
	return list->tail;
   20d18:	4b05      	ldr	r3, [pc, #20]	; (20d30 <cancel_sync_locked+0x38>)
	canceler->work = work;
   20d1a:	6065      	str	r5, [r4, #4]
   20d1c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   20d1e:	b91a      	cbnz	r2, 20d28 <cancel_sync_locked+0x30>
	list->head = node;
   20d20:	e9c3 4400 	strd	r4, r4, [r3]
}
   20d24:	4630      	mov	r0, r6
   20d26:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   20d28:	6014      	str	r4, [r2, #0]
	list->tail = node;
   20d2a:	605c      	str	r4, [r3, #4]
}
   20d2c:	e7fa      	b.n	20d24 <cancel_sync_locked+0x2c>
   20d2e:	bf00      	nop
   20d30:	200028c8 	.word	0x200028c8

00020d34 <submit_to_queue_locked>:
{
   20d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   20d36:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20d38:	079a      	lsls	r2, r3, #30
{
   20d3a:	4604      	mov	r4, r0
   20d3c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20d3e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   20d42:	d42a      	bmi.n	20d9a <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   20d44:	075f      	lsls	r7, r3, #29
   20d46:	d42a      	bmi.n	20d9e <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
   20d48:	680a      	ldr	r2, [r1, #0]
   20d4a:	b90a      	cbnz	r2, 20d50 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   20d4c:	6882      	ldr	r2, [r0, #8]
   20d4e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   20d50:	07d8      	lsls	r0, r3, #31
   20d52:	d527      	bpl.n	20da4 <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
   20d54:	68a3      	ldr	r3, [r4, #8]
   20d56:	b953      	cbnz	r3, 20d6e <submit_to_queue_locked+0x3a>
   20d58:	4923      	ldr	r1, [pc, #140]	; (20de8 <submit_to_queue_locked+0xb4>)
   20d5a:	4824      	ldr	r0, [pc, #144]	; (20dec <submit_to_queue_locked+0xb8>)
   20d5c:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   20d60:	f005 fbcd 	bl	264fe <assert_print>
   20d64:	4820      	ldr	r0, [pc, #128]	; (20de8 <submit_to_queue_locked+0xb4>)
   20d66:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   20d6a:	f005 fbc1 	bl	264f0 <assert_post_action>
			*queuep = work->queue;
   20d6e:	68a3      	ldr	r3, [r4, #8]
   20d70:	6033      	str	r3, [r6, #0]
			ret = 2;
   20d72:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   20d74:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   20d76:	b38f      	cbz	r7, 20ddc <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   20d78:	4b1d      	ldr	r3, [pc, #116]	; (20df0 <submit_to_queue_locked+0xbc>)
   20d7a:	689b      	ldr	r3, [r3, #8]
   20d7c:	42bb      	cmp	r3, r7
   20d7e:	d113      	bne.n	20da8 <submit_to_queue_locked+0x74>
   20d80:	f008 fd7b 	bl	2987a <k_is_in_isr>
   20d84:	f080 0001 	eor.w	r0, r0, #1
   20d88:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   20d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20d8e:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   20d90:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20d94:	d525      	bpl.n	20de2 <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
   20d96:	b14a      	cbz	r2, 20dac <submit_to_queue_locked+0x78>
   20d98:	b950      	cbnz	r0, 20db0 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   20d9a:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   20d9e:	2300      	movs	r3, #0
   20da0:	6033      	str	r3, [r6, #0]
	return ret;
   20da2:	e015      	b.n	20dd0 <submit_to_queue_locked+0x9c>
		ret = 1;
   20da4:	2501      	movs	r5, #1
   20da6:	e7e5      	b.n	20d74 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   20da8:	2000      	movs	r0, #0
   20daa:	e7ee      	b.n	20d8a <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
   20dac:	071b      	lsls	r3, r3, #28
   20dae:	d4f4      	bmi.n	20d9a <submit_to_queue_locked+0x66>
	parent->next = child;
   20db0:	2300      	movs	r3, #0
   20db2:	6023      	str	r3, [r4, #0]
	return list->tail;
   20db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   20db8:	b963      	cbnz	r3, 20dd4 <submit_to_queue_locked+0xa0>
	list->head = node;
   20dba:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   20dbe:	4638      	mov	r0, r7
   20dc0:	f008 fdd5 	bl	2996e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   20dc4:	68e3      	ldr	r3, [r4, #12]
   20dc6:	f043 0304 	orr.w	r3, r3, #4
   20dca:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   20dcc:	6833      	ldr	r3, [r6, #0]
   20dce:	60a3      	str	r3, [r4, #8]
}
   20dd0:	4628      	mov	r0, r5
   20dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   20dd4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20dd6:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   20dda:	e7f0      	b.n	20dbe <submit_to_queue_locked+0x8a>
		return -EINVAL;
   20ddc:	f06f 0515 	mvn.w	r5, #21
   20de0:	e7dd      	b.n	20d9e <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
   20de2:	f06f 0512 	mvn.w	r5, #18
   20de6:	e7da      	b.n	20d9e <submit_to_queue_locked+0x6a>
   20de8:	0002d849 	.word	0x0002d849
   20dec:	0002aa75 	.word	0x0002aa75
   20df0:	20002894 	.word	0x20002894

00020df4 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   20df4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20df6:	4604      	mov	r4, r0
	__asm__ volatile(
   20df8:	f04f 0340 	mov.w	r3, #64	; 0x40
   20dfc:	f3ef 8511 	mrs	r5, BASEPRI
   20e00:	f383 8812 	msr	BASEPRI_MAX, r3
   20e04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e08:	4818      	ldr	r0, [pc, #96]	; (20e6c <work_timeout+0x78>)
   20e0a:	f7ff fabf 	bl	2038c <z_spin_lock_valid>
   20e0e:	b940      	cbnz	r0, 20e22 <work_timeout+0x2e>
   20e10:	4917      	ldr	r1, [pc, #92]	; (20e70 <work_timeout+0x7c>)
   20e12:	4818      	ldr	r0, [pc, #96]	; (20e74 <work_timeout+0x80>)
   20e14:	228e      	movs	r2, #142	; 0x8e
   20e16:	f005 fb72 	bl	264fe <assert_print>
   20e1a:	4815      	ldr	r0, [pc, #84]	; (20e70 <work_timeout+0x7c>)
   20e1c:	218e      	movs	r1, #142	; 0x8e
   20e1e:	f005 fb67 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20e22:	4812      	ldr	r0, [pc, #72]	; (20e6c <work_timeout+0x78>)
   20e24:	f7ff fad0 	bl	203c8 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   20e28:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20e2a:	2103      	movs	r1, #3
   20e2c:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   20e2e:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20e30:	f1a4 0610 	sub.w	r6, r4, #16
   20e34:	f008 fd82 	bl	2993c <flag_test_and_clear>
   20e38:	b128      	cbz	r0, 20e46 <work_timeout+0x52>
		queue = dw->queue;
   20e3a:	69a3      	ldr	r3, [r4, #24]
   20e3c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   20e3e:	a901      	add	r1, sp, #4
   20e40:	4630      	mov	r0, r6
   20e42:	f7ff ff77 	bl	20d34 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e46:	4809      	ldr	r0, [pc, #36]	; (20e6c <work_timeout+0x78>)
   20e48:	f7ff faae 	bl	203a8 <z_spin_unlock_valid>
   20e4c:	b940      	cbnz	r0, 20e60 <work_timeout+0x6c>
   20e4e:	4908      	ldr	r1, [pc, #32]	; (20e70 <work_timeout+0x7c>)
   20e50:	4808      	ldr	r0, [pc, #32]	; (20e74 <work_timeout+0x80>)
   20e52:	22b9      	movs	r2, #185	; 0xb9
   20e54:	f005 fb53 	bl	264fe <assert_print>
   20e58:	4805      	ldr	r0, [pc, #20]	; (20e70 <work_timeout+0x7c>)
   20e5a:	21b9      	movs	r1, #185	; 0xb9
   20e5c:	f005 fb48 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   20e60:	f385 8811 	msr	BASEPRI, r5
   20e64:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   20e68:	b002      	add	sp, #8
   20e6a:	bd70      	pop	{r4, r5, r6, pc}
   20e6c:	200028c4 	.word	0x200028c4
   20e70:	0002ac34 	.word	0x0002ac34
   20e74:	0002aa75 	.word	0x0002aa75

00020e78 <k_work_init>:
{
   20e78:	b538      	push	{r3, r4, r5, lr}
   20e7a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   20e7c:	4604      	mov	r4, r0
   20e7e:	b940      	cbnz	r0, 20e92 <k_work_init+0x1a>
   20e80:	490c      	ldr	r1, [pc, #48]	; (20eb4 <k_work_init+0x3c>)
   20e82:	480d      	ldr	r0, [pc, #52]	; (20eb8 <k_work_init+0x40>)
   20e84:	2289      	movs	r2, #137	; 0x89
   20e86:	f005 fb3a 	bl	264fe <assert_print>
   20e8a:	480a      	ldr	r0, [pc, #40]	; (20eb4 <k_work_init+0x3c>)
   20e8c:	2189      	movs	r1, #137	; 0x89
   20e8e:	f005 fb2f 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   20e92:	b945      	cbnz	r5, 20ea6 <k_work_init+0x2e>
   20e94:	4907      	ldr	r1, [pc, #28]	; (20eb4 <k_work_init+0x3c>)
   20e96:	4808      	ldr	r0, [pc, #32]	; (20eb8 <k_work_init+0x40>)
   20e98:	228a      	movs	r2, #138	; 0x8a
   20e9a:	f005 fb30 	bl	264fe <assert_print>
   20e9e:	4805      	ldr	r0, [pc, #20]	; (20eb4 <k_work_init+0x3c>)
   20ea0:	218a      	movs	r1, #138	; 0x8a
   20ea2:	f005 fb25 	bl	264f0 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   20ea6:	2210      	movs	r2, #16
   20ea8:	2100      	movs	r1, #0
   20eaa:	4620      	mov	r0, r4
   20eac:	f006 f9c6 	bl	2723c <memset>
   20eb0:	6065      	str	r5, [r4, #4]
}
   20eb2:	bd38      	pop	{r3, r4, r5, pc}
   20eb4:	0002d849 	.word	0x0002d849
   20eb8:	0002aa75 	.word	0x0002aa75

00020ebc <k_work_busy_get>:
{
   20ebc:	b538      	push	{r3, r4, r5, lr}
   20ebe:	4604      	mov	r4, r0
	__asm__ volatile(
   20ec0:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ec4:	f3ef 8511 	mrs	r5, BASEPRI
   20ec8:	f383 8812 	msr	BASEPRI_MAX, r3
   20ecc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ed0:	4812      	ldr	r0, [pc, #72]	; (20f1c <k_work_busy_get+0x60>)
   20ed2:	f7ff fa5b 	bl	2038c <z_spin_lock_valid>
   20ed6:	b940      	cbnz	r0, 20eea <k_work_busy_get+0x2e>
   20ed8:	4911      	ldr	r1, [pc, #68]	; (20f20 <k_work_busy_get+0x64>)
   20eda:	4812      	ldr	r0, [pc, #72]	; (20f24 <k_work_busy_get+0x68>)
   20edc:	228e      	movs	r2, #142	; 0x8e
   20ede:	f005 fb0e 	bl	264fe <assert_print>
   20ee2:	480f      	ldr	r0, [pc, #60]	; (20f20 <k_work_busy_get+0x64>)
   20ee4:	218e      	movs	r1, #142	; 0x8e
   20ee6:	f005 fb03 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20eea:	480c      	ldr	r0, [pc, #48]	; (20f1c <k_work_busy_get+0x60>)
   20eec:	f7ff fa6c 	bl	203c8 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   20ef0:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ef2:	480a      	ldr	r0, [pc, #40]	; (20f1c <k_work_busy_get+0x60>)
   20ef4:	f004 040f 	and.w	r4, r4, #15
   20ef8:	f7ff fa56 	bl	203a8 <z_spin_unlock_valid>
   20efc:	b940      	cbnz	r0, 20f10 <k_work_busy_get+0x54>
   20efe:	4908      	ldr	r1, [pc, #32]	; (20f20 <k_work_busy_get+0x64>)
   20f00:	4808      	ldr	r0, [pc, #32]	; (20f24 <k_work_busy_get+0x68>)
   20f02:	22b9      	movs	r2, #185	; 0xb9
   20f04:	f005 fafb 	bl	264fe <assert_print>
   20f08:	4805      	ldr	r0, [pc, #20]	; (20f20 <k_work_busy_get+0x64>)
   20f0a:	21b9      	movs	r1, #185	; 0xb9
   20f0c:	f005 faf0 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   20f10:	f385 8811 	msr	BASEPRI, r5
   20f14:	f3bf 8f6f 	isb	sy
}
   20f18:	4620      	mov	r0, r4
   20f1a:	bd38      	pop	{r3, r4, r5, pc}
   20f1c:	200028c4 	.word	0x200028c4
   20f20:	0002ac34 	.word	0x0002ac34
   20f24:	0002aa75 	.word	0x0002aa75

00020f28 <z_work_submit_to_queue>:
{
   20f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   20f2a:	460c      	mov	r4, r1
{
   20f2c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   20f2e:	b951      	cbnz	r1, 20f46 <z_work_submit_to_queue+0x1e>
   20f30:	491d      	ldr	r1, [pc, #116]	; (20fa8 <z_work_submit_to_queue+0x80>)
   20f32:	481e      	ldr	r0, [pc, #120]	; (20fac <z_work_submit_to_queue+0x84>)
   20f34:	f44f 72ba 	mov.w	r2, #372	; 0x174
   20f38:	f005 fae1 	bl	264fe <assert_print>
   20f3c:	481a      	ldr	r0, [pc, #104]	; (20fa8 <z_work_submit_to_queue+0x80>)
   20f3e:	f44f 71ba 	mov.w	r1, #372	; 0x174
   20f42:	f005 fad5 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   20f46:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f4a:	f3ef 8511 	mrs	r5, BASEPRI
   20f4e:	f383 8812 	msr	BASEPRI_MAX, r3
   20f52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f56:	4816      	ldr	r0, [pc, #88]	; (20fb0 <z_work_submit_to_queue+0x88>)
   20f58:	f7ff fa18 	bl	2038c <z_spin_lock_valid>
   20f5c:	b940      	cbnz	r0, 20f70 <z_work_submit_to_queue+0x48>
   20f5e:	4915      	ldr	r1, [pc, #84]	; (20fb4 <z_work_submit_to_queue+0x8c>)
   20f60:	4812      	ldr	r0, [pc, #72]	; (20fac <z_work_submit_to_queue+0x84>)
   20f62:	228e      	movs	r2, #142	; 0x8e
   20f64:	f005 facb 	bl	264fe <assert_print>
   20f68:	4812      	ldr	r0, [pc, #72]	; (20fb4 <z_work_submit_to_queue+0x8c>)
   20f6a:	218e      	movs	r1, #142	; 0x8e
   20f6c:	f005 fac0 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20f70:	480f      	ldr	r0, [pc, #60]	; (20fb0 <z_work_submit_to_queue+0x88>)
   20f72:	f7ff fa29 	bl	203c8 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   20f76:	4620      	mov	r0, r4
   20f78:	a901      	add	r1, sp, #4
   20f7a:	f7ff fedb 	bl	20d34 <submit_to_queue_locked>
   20f7e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f80:	480b      	ldr	r0, [pc, #44]	; (20fb0 <z_work_submit_to_queue+0x88>)
   20f82:	f7ff fa11 	bl	203a8 <z_spin_unlock_valid>
   20f86:	b940      	cbnz	r0, 20f9a <z_work_submit_to_queue+0x72>
   20f88:	490a      	ldr	r1, [pc, #40]	; (20fb4 <z_work_submit_to_queue+0x8c>)
   20f8a:	4808      	ldr	r0, [pc, #32]	; (20fac <z_work_submit_to_queue+0x84>)
   20f8c:	22b9      	movs	r2, #185	; 0xb9
   20f8e:	f005 fab6 	bl	264fe <assert_print>
   20f92:	4808      	ldr	r0, [pc, #32]	; (20fb4 <z_work_submit_to_queue+0x8c>)
   20f94:	21b9      	movs	r1, #185	; 0xb9
   20f96:	f005 faab 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   20f9a:	f385 8811 	msr	BASEPRI, r5
   20f9e:	f3bf 8f6f 	isb	sy
}
   20fa2:	4620      	mov	r0, r4
   20fa4:	b003      	add	sp, #12
   20fa6:	bd30      	pop	{r4, r5, pc}
   20fa8:	0002d849 	.word	0x0002d849
   20fac:	0002aa75 	.word	0x0002aa75
   20fb0:	200028c4 	.word	0x200028c4
   20fb4:	0002ac34 	.word	0x0002ac34

00020fb8 <k_work_submit>:
{
   20fb8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   20fba:	4801      	ldr	r0, [pc, #4]	; (20fc0 <k_work_submit+0x8>)
   20fbc:	f008 bd0f 	b.w	299de <k_work_submit_to_queue>
   20fc0:	20001e70 	.word	0x20001e70

00020fc4 <k_work_queue_init>:
{
   20fc4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(queue != NULL);
   20fc6:	4604      	mov	r4, r0
   20fc8:	b950      	cbnz	r0, 20fe0 <k_work_queue_init+0x1c>
   20fca:	4908      	ldr	r1, [pc, #32]	; (20fec <k_work_queue_init+0x28>)
   20fcc:	4808      	ldr	r0, [pc, #32]	; (20ff0 <k_work_queue_init+0x2c>)
   20fce:	f240 22b9 	movw	r2, #697	; 0x2b9
   20fd2:	f005 fa94 	bl	264fe <assert_print>
   20fd6:	4805      	ldr	r0, [pc, #20]	; (20fec <k_work_queue_init+0x28>)
   20fd8:	f240 21b9 	movw	r1, #697	; 0x2b9
   20fdc:	f005 fa88 	bl	264f0 <assert_post_action>
	*queue = (struct k_work_q) {
   20fe0:	22a0      	movs	r2, #160	; 0xa0
   20fe2:	2100      	movs	r1, #0
   20fe4:	4620      	mov	r0, r4
   20fe6:	f006 f929 	bl	2723c <memset>
}
   20fea:	bd10      	pop	{r4, pc}
   20fec:	0002d849 	.word	0x0002d849
   20ff0:	0002aa75 	.word	0x0002aa75

00020ff4 <k_work_queue_start>:
{
   20ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ff8:	b088      	sub	sp, #32
   20ffa:	460e      	mov	r6, r1
   20ffc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   20ffe:	4617      	mov	r7, r2
   21000:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   21002:	4604      	mov	r4, r0
   21004:	b950      	cbnz	r0, 2101c <k_work_queue_start+0x28>
   21006:	492d      	ldr	r1, [pc, #180]	; (210bc <k_work_queue_start+0xc8>)
   21008:	482d      	ldr	r0, [pc, #180]	; (210c0 <k_work_queue_start+0xcc>)
   2100a:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   2100e:	f005 fa76 	bl	264fe <assert_print>
   21012:	482a      	ldr	r0, [pc, #168]	; (210bc <k_work_queue_start+0xc8>)
   21014:	f44f 7132 	mov.w	r1, #712	; 0x2c8
   21018:	f005 fa6a 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   2101c:	b956      	cbnz	r6, 21034 <k_work_queue_start+0x40>
   2101e:	4927      	ldr	r1, [pc, #156]	; (210bc <k_work_queue_start+0xc8>)
   21020:	4827      	ldr	r0, [pc, #156]	; (210c0 <k_work_queue_start+0xcc>)
   21022:	f240 22c9 	movw	r2, #713	; 0x2c9
   21026:	f005 fa6a 	bl	264fe <assert_print>
   2102a:	4824      	ldr	r0, [pc, #144]	; (210bc <k_work_queue_start+0xc8>)
   2102c:	f240 21c9 	movw	r1, #713	; 0x2c9
   21030:	f005 fa5e 	bl	264f0 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   21034:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   21038:	07db      	lsls	r3, r3, #31
   2103a:	d50a      	bpl.n	21052 <k_work_queue_start+0x5e>
   2103c:	491f      	ldr	r1, [pc, #124]	; (210bc <k_work_queue_start+0xc8>)
   2103e:	4820      	ldr	r0, [pc, #128]	; (210c0 <k_work_queue_start+0xcc>)
   21040:	f240 22ca 	movw	r2, #714	; 0x2ca
   21044:	f005 fa5b 	bl	264fe <assert_print>
   21048:	481c      	ldr	r0, [pc, #112]	; (210bc <k_work_queue_start+0xc8>)
   2104a:	f240 21ca 	movw	r1, #714	; 0x2ca
   2104e:	f005 fa4f 	bl	264f0 <assert_post_action>
	list->head = NULL;
   21052:	2300      	movs	r3, #0
	list->tail = NULL;
   21054:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   21058:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2105c:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   21060:	f104 0390 	add.w	r3, r4, #144	; 0x90
   21064:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   21068:	b32d      	cbz	r5, 210b6 <k_work_queue_start+0xc2>
   2106a:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2106c:	2b00      	cmp	r3, #0
   2106e:	f240 1101 	movw	r1, #257	; 0x101
   21072:	bf08      	it	eq
   21074:	2101      	moveq	r1, #1
	*flagp = flags;
   21076:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2107a:	f04f 32ff 	mov.w	r2, #4294967295
   2107e:	f04f 33ff 	mov.w	r3, #4294967295
   21082:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21086:	2200      	movs	r2, #0
   21088:	e9cd 8203 	strd	r8, r2, [sp, #12]
   2108c:	e9cd 2201 	strd	r2, r2, [sp, #4]
   21090:	4b0c      	ldr	r3, [pc, #48]	; (210c4 <k_work_queue_start+0xd0>)
   21092:	9400      	str	r4, [sp, #0]
   21094:	463a      	mov	r2, r7
   21096:	4631      	mov	r1, r6
   21098:	4620      	mov	r0, r4
   2109a:	f7ff f8b3 	bl	20204 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   2109e:	b125      	cbz	r5, 210aa <k_work_queue_start+0xb6>
   210a0:	6829      	ldr	r1, [r5, #0]
   210a2:	b111      	cbz	r1, 210aa <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
   210a4:	4620      	mov	r0, r4
   210a6:	f008 fbee 	bl	29886 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   210aa:	4620      	mov	r0, r4
}
   210ac:	b008      	add	sp, #32
   210ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   210b2:	f008 bbed 	b.w	29890 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   210b6:	2101      	movs	r1, #1
   210b8:	e7dd      	b.n	21076 <k_work_queue_start+0x82>
   210ba:	bf00      	nop
   210bc:	0002d849 	.word	0x0002d849
   210c0:	0002aa75 	.word	0x0002aa75
   210c4:	00020b1d 	.word	0x00020b1d

000210c8 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   210c8:	b538      	push	{r3, r4, r5, lr}
   210ca:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   210cc:	4604      	mov	r4, r0
   210ce:	b950      	cbnz	r0, 210e6 <k_work_init_delayable+0x1e>
   210d0:	4910      	ldr	r1, [pc, #64]	; (21114 <k_work_init_delayable+0x4c>)
   210d2:	4811      	ldr	r0, [pc, #68]	; (21118 <k_work_init_delayable+0x50>)
   210d4:	f44f 7250 	mov.w	r2, #832	; 0x340
   210d8:	f005 fa11 	bl	264fe <assert_print>
   210dc:	480d      	ldr	r0, [pc, #52]	; (21114 <k_work_init_delayable+0x4c>)
   210de:	f44f 7150 	mov.w	r1, #832	; 0x340
   210e2:	f005 fa05 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   210e6:	b955      	cbnz	r5, 210fe <k_work_init_delayable+0x36>
   210e8:	490a      	ldr	r1, [pc, #40]	; (21114 <k_work_init_delayable+0x4c>)
   210ea:	480b      	ldr	r0, [pc, #44]	; (21118 <k_work_init_delayable+0x50>)
   210ec:	f240 3241 	movw	r2, #833	; 0x341
   210f0:	f005 fa05 	bl	264fe <assert_print>
   210f4:	4807      	ldr	r0, [pc, #28]	; (21114 <k_work_init_delayable+0x4c>)
   210f6:	f240 3141 	movw	r1, #833	; 0x341
   210fa:	f005 f9f9 	bl	264f0 <assert_post_action>

	*dwork = (struct k_work_delayable){
   210fe:	2230      	movs	r2, #48	; 0x30
   21100:	2100      	movs	r1, #0
   21102:	4620      	mov	r0, r4
   21104:	f006 f89a 	bl	2723c <memset>
   21108:	f44f 7380 	mov.w	r3, #256	; 0x100
   2110c:	6065      	str	r5, [r4, #4]
   2110e:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   21110:	bd38      	pop	{r3, r4, r5, pc}
   21112:	bf00      	nop
   21114:	0002d849 	.word	0x0002d849
   21118:	0002aa75 	.word	0x0002aa75

0002111c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2111c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2111e:	4616      	mov	r6, r2
   21120:	9001      	str	r0, [sp, #4]
   21122:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   21124:	460c      	mov	r4, r1
   21126:	b951      	cbnz	r1, 2113e <k_work_schedule_for_queue+0x22>
   21128:	4929      	ldr	r1, [pc, #164]	; (211d0 <k_work_schedule_for_queue+0xb4>)
   2112a:	482a      	ldr	r0, [pc, #168]	; (211d4 <k_work_schedule_for_queue+0xb8>)
   2112c:	f240 32b7 	movw	r2, #951	; 0x3b7
   21130:	f005 f9e5 	bl	264fe <assert_print>
   21134:	4826      	ldr	r0, [pc, #152]	; (211d0 <k_work_schedule_for_queue+0xb4>)
   21136:	f240 31b7 	movw	r1, #951	; 0x3b7
   2113a:	f005 f9d9 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   2113e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21142:	f3ef 8711 	mrs	r7, BASEPRI
   21146:	f383 8812 	msr	BASEPRI_MAX, r3
   2114a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2114e:	4822      	ldr	r0, [pc, #136]	; (211d8 <k_work_schedule_for_queue+0xbc>)
   21150:	f7ff f91c 	bl	2038c <z_spin_lock_valid>
   21154:	b940      	cbnz	r0, 21168 <k_work_schedule_for_queue+0x4c>
   21156:	4921      	ldr	r1, [pc, #132]	; (211dc <k_work_schedule_for_queue+0xc0>)
   21158:	481e      	ldr	r0, [pc, #120]	; (211d4 <k_work_schedule_for_queue+0xb8>)
   2115a:	228e      	movs	r2, #142	; 0x8e
   2115c:	f005 f9cf 	bl	264fe <assert_print>
   21160:	481e      	ldr	r0, [pc, #120]	; (211dc <k_work_schedule_for_queue+0xc0>)
   21162:	218e      	movs	r1, #142	; 0x8e
   21164:	f005 f9c4 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21168:	481b      	ldr	r0, [pc, #108]	; (211d8 <k_work_schedule_for_queue+0xbc>)
   2116a:	f7ff f92d 	bl	203c8 <z_spin_lock_set_owner>
	return *flagp;
   2116e:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   21170:	f013 0f0e 	tst.w	r3, #14
   21174:	d129      	bne.n	211ca <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21176:	ea55 0206 	orrs.w	r2, r5, r6
   2117a:	d118      	bne.n	211ae <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   2117c:	4620      	mov	r0, r4
   2117e:	a901      	add	r1, sp, #4
   21180:	f7ff fdd8 	bl	20d34 <submit_to_queue_locked>
   21184:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21186:	4814      	ldr	r0, [pc, #80]	; (211d8 <k_work_schedule_for_queue+0xbc>)
   21188:	f7ff f90e 	bl	203a8 <z_spin_unlock_valid>
   2118c:	b940      	cbnz	r0, 211a0 <k_work_schedule_for_queue+0x84>
   2118e:	4913      	ldr	r1, [pc, #76]	; (211dc <k_work_schedule_for_queue+0xc0>)
   21190:	4810      	ldr	r0, [pc, #64]	; (211d4 <k_work_schedule_for_queue+0xb8>)
   21192:	22b9      	movs	r2, #185	; 0xb9
   21194:	f005 f9b3 	bl	264fe <assert_print>
   21198:	4810      	ldr	r0, [pc, #64]	; (211dc <k_work_schedule_for_queue+0xc0>)
   2119a:	21b9      	movs	r1, #185	; 0xb9
   2119c:	f005 f9a8 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   211a0:	f387 8811 	msr	BASEPRI, r7
   211a4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   211a8:	4620      	mov	r0, r4
   211aa:	b003      	add	sp, #12
   211ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   211ae:	f043 0308 	orr.w	r3, r3, #8
   211b2:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   211b4:	9b01      	ldr	r3, [sp, #4]
   211b6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   211b8:	f104 0010 	add.w	r0, r4, #16
   211bc:	4908      	ldr	r1, [pc, #32]	; (211e0 <k_work_schedule_for_queue+0xc4>)
   211be:	4632      	mov	r2, r6
   211c0:	462b      	mov	r3, r5
   211c2:	f001 f99b 	bl	224fc <z_add_timeout>
	return ret;
   211c6:	2401      	movs	r4, #1
   211c8:	e7dd      	b.n	21186 <k_work_schedule_for_queue+0x6a>
	int ret = 0;
   211ca:	2400      	movs	r4, #0
   211cc:	e7db      	b.n	21186 <k_work_schedule_for_queue+0x6a>
   211ce:	bf00      	nop
   211d0:	0002d849 	.word	0x0002d849
   211d4:	0002aa75 	.word	0x0002aa75
   211d8:	200028c4 	.word	0x200028c4
   211dc:	0002ac34 	.word	0x0002ac34
   211e0:	00020df5 	.word	0x00020df5

000211e4 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   211e4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   211e6:	4801      	ldr	r0, [pc, #4]	; (211ec <k_work_schedule+0x8>)
   211e8:	f7ff bf98 	b.w	2111c <k_work_schedule_for_queue>
   211ec:	20001e70 	.word	0x20001e70

000211f0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   211f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   211f2:	4616      	mov	r6, r2
   211f4:	9001      	str	r0, [sp, #4]
   211f6:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   211f8:	460c      	mov	r4, r1
   211fa:	b951      	cbnz	r1, 21212 <k_work_reschedule_for_queue+0x22>
   211fc:	4928      	ldr	r1, [pc, #160]	; (212a0 <k_work_reschedule_for_queue+0xb0>)
   211fe:	4829      	ldr	r0, [pc, #164]	; (212a4 <k_work_reschedule_for_queue+0xb4>)
   21200:	f240 32db 	movw	r2, #987	; 0x3db
   21204:	f005 f97b 	bl	264fe <assert_print>
   21208:	4825      	ldr	r0, [pc, #148]	; (212a0 <k_work_reschedule_for_queue+0xb0>)
   2120a:	f240 31db 	movw	r1, #987	; 0x3db
   2120e:	f005 f96f 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21212:	f04f 0340 	mov.w	r3, #64	; 0x40
   21216:	f3ef 8711 	mrs	r7, BASEPRI
   2121a:	f383 8812 	msr	BASEPRI_MAX, r3
   2121e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21222:	4821      	ldr	r0, [pc, #132]	; (212a8 <k_work_reschedule_for_queue+0xb8>)
   21224:	f7ff f8b2 	bl	2038c <z_spin_lock_valid>
   21228:	b940      	cbnz	r0, 2123c <k_work_reschedule_for_queue+0x4c>
   2122a:	4920      	ldr	r1, [pc, #128]	; (212ac <k_work_reschedule_for_queue+0xbc>)
   2122c:	481d      	ldr	r0, [pc, #116]	; (212a4 <k_work_reschedule_for_queue+0xb4>)
   2122e:	228e      	movs	r2, #142	; 0x8e
   21230:	f005 f965 	bl	264fe <assert_print>
   21234:	481d      	ldr	r0, [pc, #116]	; (212ac <k_work_reschedule_for_queue+0xbc>)
   21236:	218e      	movs	r1, #142	; 0x8e
   21238:	f005 f95a 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2123c:	481a      	ldr	r0, [pc, #104]	; (212a8 <k_work_reschedule_for_queue+0xb8>)
   2123e:	f7ff f8c3 	bl	203c8 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   21242:	4620      	mov	r0, r4
   21244:	f008 fb85 	bl	29952 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21248:	ea55 0306 	orrs.w	r3, r5, r6
   2124c:	d118      	bne.n	21280 <k_work_reschedule_for_queue+0x90>
		return submit_to_queue_locked(work, queuep);
   2124e:	4620      	mov	r0, r4
   21250:	a901      	add	r1, sp, #4
   21252:	f7ff fd6f 	bl	20d34 <submit_to_queue_locked>
   21256:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21258:	4813      	ldr	r0, [pc, #76]	; (212a8 <k_work_reschedule_for_queue+0xb8>)
   2125a:	f7ff f8a5 	bl	203a8 <z_spin_unlock_valid>
   2125e:	b940      	cbnz	r0, 21272 <k_work_reschedule_for_queue+0x82>
   21260:	4912      	ldr	r1, [pc, #72]	; (212ac <k_work_reschedule_for_queue+0xbc>)
   21262:	4810      	ldr	r0, [pc, #64]	; (212a4 <k_work_reschedule_for_queue+0xb4>)
   21264:	22b9      	movs	r2, #185	; 0xb9
   21266:	f005 f94a 	bl	264fe <assert_print>
   2126a:	4810      	ldr	r0, [pc, #64]	; (212ac <k_work_reschedule_for_queue+0xbc>)
   2126c:	21b9      	movs	r1, #185	; 0xb9
   2126e:	f005 f93f 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21272:	f387 8811 	msr	BASEPRI, r7
   21276:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2127a:	4620      	mov	r0, r4
   2127c:	b003      	add	sp, #12
   2127e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   21280:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21282:	490b      	ldr	r1, [pc, #44]	; (212b0 <k_work_reschedule_for_queue+0xc0>)
	*flagp |= BIT(bit);
   21284:	f043 0308 	orr.w	r3, r3, #8
   21288:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2128a:	9b01      	ldr	r3, [sp, #4]
   2128c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2128e:	f104 0010 	add.w	r0, r4, #16
   21292:	4632      	mov	r2, r6
   21294:	462b      	mov	r3, r5
   21296:	f001 f931 	bl	224fc <z_add_timeout>
	return ret;
   2129a:	2401      	movs	r4, #1
   2129c:	e7dc      	b.n	21258 <k_work_reschedule_for_queue+0x68>
   2129e:	bf00      	nop
   212a0:	0002d849 	.word	0x0002d849
   212a4:	0002aa75 	.word	0x0002aa75
   212a8:	200028c4 	.word	0x200028c4
   212ac:	0002ac34 	.word	0x0002ac34
   212b0:	00020df5 	.word	0x00020df5

000212b4 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   212b4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   212b6:	4801      	ldr	r0, [pc, #4]	; (212bc <k_work_reschedule+0x8>)
   212b8:	f7ff bf9a 	b.w	211f0 <k_work_reschedule_for_queue>
   212bc:	20001e70 	.word	0x20001e70

000212c0 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   212c0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   212c2:	4604      	mov	r4, r0
   212c4:	b950      	cbnz	r0, 212dc <k_work_cancel_delayable+0x1c>
   212c6:	491e      	ldr	r1, [pc, #120]	; (21340 <k_work_cancel_delayable+0x80>)
   212c8:	481e      	ldr	r0, [pc, #120]	; (21344 <k_work_cancel_delayable+0x84>)
   212ca:	f240 32fd 	movw	r2, #1021	; 0x3fd
   212ce:	f005 f916 	bl	264fe <assert_print>
   212d2:	481b      	ldr	r0, [pc, #108]	; (21340 <k_work_cancel_delayable+0x80>)
   212d4:	f240 31fd 	movw	r1, #1021	; 0x3fd
   212d8:	f005 f90a 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   212dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   212e0:	f3ef 8511 	mrs	r5, BASEPRI
   212e4:	f383 8812 	msr	BASEPRI_MAX, r3
   212e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   212ec:	4816      	ldr	r0, [pc, #88]	; (21348 <k_work_cancel_delayable+0x88>)
   212ee:	f7ff f84d 	bl	2038c <z_spin_lock_valid>
   212f2:	b940      	cbnz	r0, 21306 <k_work_cancel_delayable+0x46>
   212f4:	4915      	ldr	r1, [pc, #84]	; (2134c <k_work_cancel_delayable+0x8c>)
   212f6:	4813      	ldr	r0, [pc, #76]	; (21344 <k_work_cancel_delayable+0x84>)
   212f8:	228e      	movs	r2, #142	; 0x8e
   212fa:	f005 f900 	bl	264fe <assert_print>
   212fe:	4813      	ldr	r0, [pc, #76]	; (2134c <k_work_cancel_delayable+0x8c>)
   21300:	218e      	movs	r1, #142	; 0x8e
   21302:	f005 f8f5 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21306:	4810      	ldr	r0, [pc, #64]	; (21348 <k_work_cancel_delayable+0x88>)
   21308:	f7ff f85e 	bl	203c8 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   2130c:	4620      	mov	r0, r4
   2130e:	f008 fb20 	bl	29952 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   21312:	4620      	mov	r0, r4
   21314:	f008 fb32 	bl	2997c <cancel_async_locked>
   21318:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2131a:	480b      	ldr	r0, [pc, #44]	; (21348 <k_work_cancel_delayable+0x88>)
   2131c:	f7ff f844 	bl	203a8 <z_spin_unlock_valid>
   21320:	b940      	cbnz	r0, 21334 <k_work_cancel_delayable+0x74>
   21322:	490a      	ldr	r1, [pc, #40]	; (2134c <k_work_cancel_delayable+0x8c>)
   21324:	4807      	ldr	r0, [pc, #28]	; (21344 <k_work_cancel_delayable+0x84>)
   21326:	22b9      	movs	r2, #185	; 0xb9
   21328:	f005 f8e9 	bl	264fe <assert_print>
   2132c:	4807      	ldr	r0, [pc, #28]	; (2134c <k_work_cancel_delayable+0x8c>)
   2132e:	21b9      	movs	r1, #185	; 0xb9
   21330:	f005 f8de 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21334:	f385 8811 	msr	BASEPRI, r5
   21338:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2133c:	4620      	mov	r0, r4
   2133e:	bd38      	pop	{r3, r4, r5, pc}
   21340:	0002d849 	.word	0x0002d849
   21344:	0002aa75 	.word	0x0002aa75
   21348:	200028c4 	.word	0x200028c4
   2134c:	0002ac34 	.word	0x0002ac34

00021350 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   21350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21354:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   21356:	4605      	mov	r5, r0
   21358:	b950      	cbnz	r0, 21370 <k_work_cancel_delayable_sync+0x20>
   2135a:	4936      	ldr	r1, [pc, #216]	; (21434 <k_work_cancel_delayable_sync+0xe4>)
   2135c:	4836      	ldr	r0, [pc, #216]	; (21438 <k_work_cancel_delayable_sync+0xe8>)
   2135e:	f240 420e 	movw	r2, #1038	; 0x40e
   21362:	f005 f8cc 	bl	264fe <assert_print>
   21366:	4833      	ldr	r0, [pc, #204]	; (21434 <k_work_cancel_delayable_sync+0xe4>)
   21368:	f240 410e 	movw	r1, #1038	; 0x40e
   2136c:	f005 f8c0 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   21370:	b956      	cbnz	r6, 21388 <k_work_cancel_delayable_sync+0x38>
   21372:	4930      	ldr	r1, [pc, #192]	; (21434 <k_work_cancel_delayable_sync+0xe4>)
   21374:	4830      	ldr	r0, [pc, #192]	; (21438 <k_work_cancel_delayable_sync+0xe8>)
   21376:	f240 420f 	movw	r2, #1039	; 0x40f
   2137a:	f005 f8c0 	bl	264fe <assert_print>
   2137e:	482d      	ldr	r0, [pc, #180]	; (21434 <k_work_cancel_delayable_sync+0xe4>)
   21380:	f240 410f 	movw	r1, #1039	; 0x40f
   21384:	f005 f8b4 	bl	264f0 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   21388:	f008 fa77 	bl	2987a <k_is_in_isr>
   2138c:	b150      	cbz	r0, 213a4 <k_work_cancel_delayable_sync+0x54>
   2138e:	4929      	ldr	r1, [pc, #164]	; (21434 <k_work_cancel_delayable_sync+0xe4>)
   21390:	4829      	ldr	r0, [pc, #164]	; (21438 <k_work_cancel_delayable_sync+0xe8>)
   21392:	f44f 6282 	mov.w	r2, #1040	; 0x410
   21396:	f005 f8b2 	bl	264fe <assert_print>
   2139a:	4826      	ldr	r0, [pc, #152]	; (21434 <k_work_cancel_delayable_sync+0xe4>)
   2139c:	f44f 6182 	mov.w	r1, #1040	; 0x410
   213a0:	f005 f8a6 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   213a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   213a8:	f3ef 8811 	mrs	r8, BASEPRI
   213ac:	f383 8812 	msr	BASEPRI_MAX, r3
   213b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   213b4:	4821      	ldr	r0, [pc, #132]	; (2143c <k_work_cancel_delayable_sync+0xec>)
   213b6:	f7fe ffe9 	bl	2038c <z_spin_lock_valid>
   213ba:	b940      	cbnz	r0, 213ce <k_work_cancel_delayable_sync+0x7e>
   213bc:	4920      	ldr	r1, [pc, #128]	; (21440 <k_work_cancel_delayable_sync+0xf0>)
   213be:	481e      	ldr	r0, [pc, #120]	; (21438 <k_work_cancel_delayable_sync+0xe8>)
   213c0:	228e      	movs	r2, #142	; 0x8e
   213c2:	f005 f89c 	bl	264fe <assert_print>
   213c6:	481e      	ldr	r0, [pc, #120]	; (21440 <k_work_cancel_delayable_sync+0xf0>)
   213c8:	218e      	movs	r1, #142	; 0x8e
   213ca:	f005 f891 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   213ce:	481b      	ldr	r0, [pc, #108]	; (2143c <k_work_cancel_delayable_sync+0xec>)
   213d0:	f7fe fffa 	bl	203c8 <z_spin_lock_set_owner>
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   213d4:	68ec      	ldr	r4, [r5, #12]
   213d6:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   213da:	2c00      	cmp	r4, #0
   213dc:	bf14      	ite	ne
   213de:	2701      	movne	r7, #1
   213e0:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   213e2:	d00a      	beq.n	213fa <k_work_cancel_delayable_sync+0xaa>
	(void)unschedule_locked(dwork);
   213e4:	4628      	mov	r0, r5
   213e6:	f008 fab4 	bl	29952 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   213ea:	4628      	mov	r0, r5
   213ec:	f008 fac6 	bl	2997c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   213f0:	4631      	mov	r1, r6
   213f2:	4628      	mov	r0, r5
   213f4:	f7ff fc80 	bl	20cf8 <cancel_sync_locked>
   213f8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   213fa:	4810      	ldr	r0, [pc, #64]	; (2143c <k_work_cancel_delayable_sync+0xec>)
   213fc:	f7fe ffd4 	bl	203a8 <z_spin_unlock_valid>
   21400:	b940      	cbnz	r0, 21414 <k_work_cancel_delayable_sync+0xc4>
   21402:	490f      	ldr	r1, [pc, #60]	; (21440 <k_work_cancel_delayable_sync+0xf0>)
   21404:	480c      	ldr	r0, [pc, #48]	; (21438 <k_work_cancel_delayable_sync+0xe8>)
   21406:	22b9      	movs	r2, #185	; 0xb9
   21408:	f005 f879 	bl	264fe <assert_print>
   2140c:	480c      	ldr	r0, [pc, #48]	; (21440 <k_work_cancel_delayable_sync+0xf0>)
   2140e:	21b9      	movs	r1, #185	; 0xb9
   21410:	f005 f86e 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21414:	f388 8811 	msr	BASEPRI, r8
   21418:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2141c:	b13c      	cbz	r4, 2142e <k_work_cancel_delayable_sync+0xde>
	return z_impl_k_sem_take(sem, timeout);
   2141e:	f04f 32ff 	mov.w	r2, #4294967295
   21422:	f04f 33ff 	mov.w	r3, #4294967295
   21426:	f106 0008 	add.w	r0, r6, #8
   2142a:	f7ff fabd 	bl	209a8 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2142e:	4638      	mov	r0, r7
   21430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21434:	0002d849 	.word	0x0002d849
   21438:	0002aa75 	.word	0x0002aa75
   2143c:	200028c4 	.word	0x200028c4
   21440:	0002ac34 	.word	0x0002ac34

00021444 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   21444:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   21446:	4d07      	ldr	r5, [pc, #28]	; (21464 <z_reset_time_slice+0x20>)
   21448:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   2144a:	b154      	cbz	r4, 21462 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   2144c:	f7fc fc8e 	bl	1dd6c <sys_clock_elapsed>
   21450:	4b05      	ldr	r3, [pc, #20]	; (21468 <z_reset_time_slice+0x24>)
   21452:	4404      	add	r4, r0
   21454:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   21456:	6828      	ldr	r0, [r5, #0]
   21458:	2100      	movs	r1, #0
	}
}
   2145a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   2145e:	f001 b96d 	b.w	2273c <z_set_timeout_expiry>
}
   21462:	bd38      	pop	{r3, r4, r5, pc}
   21464:	200028dc 	.word	0x200028dc
   21468:	20002894 	.word	0x20002894

0002146c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   2146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2146e:	4604      	mov	r4, r0
   21470:	460d      	mov	r5, r1
	__asm__ volatile(
   21472:	f04f 0340 	mov.w	r3, #64	; 0x40
   21476:	f3ef 8711 	mrs	r7, BASEPRI
   2147a:	f383 8812 	msr	BASEPRI_MAX, r3
   2147e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21482:	481e      	ldr	r0, [pc, #120]	; (214fc <k_sched_time_slice_set+0x90>)
   21484:	f7fe ff82 	bl	2038c <z_spin_lock_valid>
   21488:	b940      	cbnz	r0, 2149c <k_sched_time_slice_set+0x30>
   2148a:	491d      	ldr	r1, [pc, #116]	; (21500 <k_sched_time_slice_set+0x94>)
   2148c:	481d      	ldr	r0, [pc, #116]	; (21504 <k_sched_time_slice_set+0x98>)
   2148e:	228e      	movs	r2, #142	; 0x8e
   21490:	f005 f835 	bl	264fe <assert_print>
   21494:	481a      	ldr	r0, [pc, #104]	; (21500 <k_sched_time_slice_set+0x94>)
   21496:	218e      	movs	r1, #142	; 0x8e
   21498:	f005 f82a 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2149c:	4817      	ldr	r0, [pc, #92]	; (214fc <k_sched_time_slice_set+0x90>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2149e:	4e1a      	ldr	r6, [pc, #104]	; (21508 <k_sched_time_slice_set+0x9c>)
   214a0:	f7fe ff92 	bl	203c8 <z_spin_lock_set_owner>
   214a4:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   214a6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   214aa:	f240 30e7 	movw	r0, #999	; 0x3e7
   214ae:	6131      	str	r1, [r6, #16]
   214b0:	2300      	movs	r3, #0
   214b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   214b6:	fbe4 010c 	umlal	r0, r1, r4, ip
   214ba:	f7df fe21 	bl	1100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   214be:	2c00      	cmp	r4, #0
   214c0:	4b12      	ldr	r3, [pc, #72]	; (2150c <k_sched_time_slice_set+0xa0>)
   214c2:	dc17      	bgt.n	214f4 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   214c4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   214c6:	4b12      	ldr	r3, [pc, #72]	; (21510 <k_sched_time_slice_set+0xa4>)
		z_reset_time_slice(_current);
   214c8:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   214ca:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   214cc:	f7ff ffba 	bl	21444 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   214d0:	480a      	ldr	r0, [pc, #40]	; (214fc <k_sched_time_slice_set+0x90>)
   214d2:	f7fe ff69 	bl	203a8 <z_spin_unlock_valid>
   214d6:	b940      	cbnz	r0, 214ea <k_sched_time_slice_set+0x7e>
   214d8:	4909      	ldr	r1, [pc, #36]	; (21500 <k_sched_time_slice_set+0x94>)
   214da:	480a      	ldr	r0, [pc, #40]	; (21504 <k_sched_time_slice_set+0x98>)
   214dc:	22b9      	movs	r2, #185	; 0xb9
   214de:	f005 f80e 	bl	264fe <assert_print>
   214e2:	4807      	ldr	r0, [pc, #28]	; (21500 <k_sched_time_slice_set+0x94>)
   214e4:	21b9      	movs	r1, #185	; 0xb9
   214e6:	f005 f803 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   214ea:	f387 8811 	msr	BASEPRI, r7
   214ee:	f3bf 8f6f 	isb	sy
	}
}
   214f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   214f4:	2802      	cmp	r0, #2
   214f6:	bfb8      	it	lt
   214f8:	2002      	movlt	r0, #2
   214fa:	e7e3      	b.n	214c4 <k_sched_time_slice_set+0x58>
   214fc:	200028d4 	.word	0x200028d4
   21500:	0002ac34 	.word	0x0002ac34
   21504:	0002aa75 	.word	0x0002aa75
   21508:	20002894 	.word	0x20002894
   2150c:	200028dc 	.word	0x200028dc
   21510:	200028d8 	.word	0x200028d8

00021514 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   21514:	b510      	push	{r4, lr}
   21516:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21518:	460c      	mov	r4, r1
   2151a:	b9c1      	cbnz	r1, 2154e <z_reschedule+0x3a>
   2151c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   21520:	b9aa      	cbnz	r2, 2154e <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   21522:	4a14      	ldr	r2, [pc, #80]	; (21574 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   21524:	69d1      	ldr	r1, [r2, #28]
   21526:	6892      	ldr	r2, [r2, #8]
   21528:	4291      	cmp	r1, r2
   2152a:	d010      	beq.n	2154e <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2152c:	f7fe ff3c 	bl	203a8 <z_spin_unlock_valid>
   21530:	b940      	cbnz	r0, 21544 <z_reschedule+0x30>
   21532:	4911      	ldr	r1, [pc, #68]	; (21578 <z_reschedule+0x64>)
   21534:	4811      	ldr	r0, [pc, #68]	; (2157c <z_reschedule+0x68>)
   21536:	22d0      	movs	r2, #208	; 0xd0
   21538:	f004 ffe1 	bl	264fe <assert_print>
   2153c:	480e      	ldr	r0, [pc, #56]	; (21578 <z_reschedule+0x64>)
   2153e:	21d0      	movs	r1, #208	; 0xd0
   21540:	f004 ffd6 	bl	264f0 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   21544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   21548:	2000      	movs	r0, #0
   2154a:	f7f2 be47 	b.w	141dc <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2154e:	4618      	mov	r0, r3
   21550:	f7fe ff2a 	bl	203a8 <z_spin_unlock_valid>
   21554:	b940      	cbnz	r0, 21568 <z_reschedule+0x54>
   21556:	4908      	ldr	r1, [pc, #32]	; (21578 <z_reschedule+0x64>)
   21558:	4808      	ldr	r0, [pc, #32]	; (2157c <z_reschedule+0x68>)
   2155a:	22b9      	movs	r2, #185	; 0xb9
   2155c:	f004 ffcf 	bl	264fe <assert_print>
   21560:	4805      	ldr	r0, [pc, #20]	; (21578 <z_reschedule+0x64>)
   21562:	21b9      	movs	r1, #185	; 0xb9
   21564:	f004 ffc4 	bl	264f0 <assert_post_action>
   21568:	f384 8811 	msr	BASEPRI, r4
   2156c:	f3bf 8f6f 	isb	sy
   21570:	bd10      	pop	{r4, pc}
   21572:	bf00      	nop
   21574:	20002894 	.word	0x20002894
   21578:	0002ac34 	.word	0x0002ac34
   2157c:	0002aa75 	.word	0x0002aa75

00021580 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   21580:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21582:	f04f 0340 	mov.w	r3, #64	; 0x40
   21586:	f3ef 8511 	mrs	r5, BASEPRI
   2158a:	f383 8812 	msr	BASEPRI_MAX, r3
   2158e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21592:	4820      	ldr	r0, [pc, #128]	; (21614 <k_sched_lock+0x94>)
   21594:	f7fe fefa 	bl	2038c <z_spin_lock_valid>
   21598:	b940      	cbnz	r0, 215ac <k_sched_lock+0x2c>
   2159a:	491f      	ldr	r1, [pc, #124]	; (21618 <k_sched_lock+0x98>)
   2159c:	481f      	ldr	r0, [pc, #124]	; (2161c <k_sched_lock+0x9c>)
   2159e:	228e      	movs	r2, #142	; 0x8e
   215a0:	f004 ffad 	bl	264fe <assert_print>
   215a4:	481c      	ldr	r0, [pc, #112]	; (21618 <k_sched_lock+0x98>)
   215a6:	218e      	movs	r1, #142	; 0x8e
   215a8:	f004 ffa2 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   215ac:	4819      	ldr	r0, [pc, #100]	; (21614 <k_sched_lock+0x94>)
   215ae:	f7fe ff0b 	bl	203c8 <z_spin_lock_set_owner>
   215b2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   215b6:	b143      	cbz	r3, 215ca <k_sched_lock+0x4a>
   215b8:	4919      	ldr	r1, [pc, #100]	; (21620 <k_sched_lock+0xa0>)
   215ba:	4818      	ldr	r0, [pc, #96]	; (2161c <k_sched_lock+0x9c>)
   215bc:	22fd      	movs	r2, #253	; 0xfd
   215be:	f004 ff9e 	bl	264fe <assert_print>
   215c2:	4817      	ldr	r0, [pc, #92]	; (21620 <k_sched_lock+0xa0>)
   215c4:	21fd      	movs	r1, #253	; 0xfd
   215c6:	f004 ff93 	bl	264f0 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   215ca:	4c16      	ldr	r4, [pc, #88]	; (21624 <k_sched_lock+0xa4>)
   215cc:	68a3      	ldr	r3, [r4, #8]
   215ce:	7bdb      	ldrb	r3, [r3, #15]
   215d0:	2b01      	cmp	r3, #1
   215d2:	d108      	bne.n	215e6 <k_sched_lock+0x66>
   215d4:	4912      	ldr	r1, [pc, #72]	; (21620 <k_sched_lock+0xa0>)
   215d6:	4811      	ldr	r0, [pc, #68]	; (2161c <k_sched_lock+0x9c>)
   215d8:	22fe      	movs	r2, #254	; 0xfe
   215da:	f004 ff90 	bl	264fe <assert_print>
   215de:	4810      	ldr	r0, [pc, #64]	; (21620 <k_sched_lock+0xa0>)
   215e0:	21fe      	movs	r1, #254	; 0xfe
   215e2:	f004 ff85 	bl	264f0 <assert_post_action>
	--_current->base.sched_locked;
   215e6:	68a2      	ldr	r2, [r4, #8]
   215e8:	7bd3      	ldrb	r3, [r2, #15]
   215ea:	3b01      	subs	r3, #1
   215ec:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   215ee:	4809      	ldr	r0, [pc, #36]	; (21614 <k_sched_lock+0x94>)
   215f0:	f7fe feda 	bl	203a8 <z_spin_unlock_valid>
   215f4:	b940      	cbnz	r0, 21608 <k_sched_lock+0x88>
   215f6:	4908      	ldr	r1, [pc, #32]	; (21618 <k_sched_lock+0x98>)
   215f8:	4808      	ldr	r0, [pc, #32]	; (2161c <k_sched_lock+0x9c>)
   215fa:	22b9      	movs	r2, #185	; 0xb9
   215fc:	f004 ff7f 	bl	264fe <assert_print>
   21600:	4805      	ldr	r0, [pc, #20]	; (21618 <k_sched_lock+0x98>)
   21602:	21b9      	movs	r1, #185	; 0xb9
   21604:	f004 ff74 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21608:	f385 8811 	msr	BASEPRI, r5
   2160c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   21610:	bd38      	pop	{r3, r4, r5, pc}
   21612:	bf00      	nop
   21614:	200028d4 	.word	0x200028d4
   21618:	0002ac34 	.word	0x0002ac34
   2161c:	0002aa75 	.word	0x0002aa75
   21620:	0002d86a 	.word	0x0002d86a
   21624:	20002894 	.word	0x20002894

00021628 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21628:	4b0b      	ldr	r3, [pc, #44]	; (21658 <z_priq_dumb_remove+0x30>)
   2162a:	4299      	cmp	r1, r3
{
   2162c:	b510      	push	{r4, lr}
   2162e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21630:	d10a      	bne.n	21648 <z_priq_dumb_remove+0x20>
   21632:	490a      	ldr	r1, [pc, #40]	; (2165c <z_priq_dumb_remove+0x34>)
   21634:	480a      	ldr	r0, [pc, #40]	; (21660 <z_priq_dumb_remove+0x38>)
   21636:	f240 4262 	movw	r2, #1122	; 0x462
   2163a:	f004 ff60 	bl	264fe <assert_print>
   2163e:	4807      	ldr	r0, [pc, #28]	; (2165c <z_priq_dumb_remove+0x34>)
   21640:	f240 4162 	movw	r1, #1122	; 0x462
   21644:	f004 ff54 	bl	264f0 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   21648:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   2164c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2164e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21650:	2300      	movs	r3, #0
	node->prev = NULL;
   21652:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   21656:	bd10      	pop	{r4, pc}
   21658:	20001d70 	.word	0x20001d70
   2165c:	0002d895 	.word	0x0002d895
   21660:	0002aa75 	.word	0x0002aa75

00021664 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   21664:	6883      	ldr	r3, [r0, #8]
{
   21666:	b510      	push	{r4, lr}
   21668:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2166a:	b953      	cbnz	r3, 21682 <unpend_thread_no_timeout+0x1e>
   2166c:	490a      	ldr	r1, [pc, #40]	; (21698 <unpend_thread_no_timeout+0x34>)
   2166e:	480b      	ldr	r0, [pc, #44]	; (2169c <unpend_thread_no_timeout+0x38>)
   21670:	f44f 7235 	mov.w	r2, #724	; 0x2d4
   21674:	f004 ff43 	bl	264fe <assert_print>
   21678:	4807      	ldr	r0, [pc, #28]	; (21698 <unpend_thread_no_timeout+0x34>)
   2167a:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   2167e:	f004 ff37 	bl	264f0 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21682:	68a0      	ldr	r0, [r4, #8]
   21684:	4621      	mov	r1, r4
   21686:	f7ff ffcf 	bl	21628 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2168a:	7b63      	ldrb	r3, [r4, #13]
   2168c:	f023 0302 	bic.w	r3, r3, #2
   21690:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21692:	2300      	movs	r3, #0
   21694:	60a3      	str	r3, [r4, #8]
}
   21696:	bd10      	pop	{r4, pc}
   21698:	0002d895 	.word	0x0002d895
   2169c:	0002aa75 	.word	0x0002aa75

000216a0 <z_unpend_thread>:
{
   216a0:	b538      	push	{r3, r4, r5, lr}
   216a2:	4604      	mov	r4, r0
	__asm__ volatile(
   216a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   216a8:	f3ef 8511 	mrs	r5, BASEPRI
   216ac:	f383 8812 	msr	BASEPRI_MAX, r3
   216b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   216b4:	4814      	ldr	r0, [pc, #80]	; (21708 <z_unpend_thread+0x68>)
   216b6:	f7fe fe69 	bl	2038c <z_spin_lock_valid>
   216ba:	b940      	cbnz	r0, 216ce <z_unpend_thread+0x2e>
   216bc:	4913      	ldr	r1, [pc, #76]	; (2170c <z_unpend_thread+0x6c>)
   216be:	4814      	ldr	r0, [pc, #80]	; (21710 <z_unpend_thread+0x70>)
   216c0:	228e      	movs	r2, #142	; 0x8e
   216c2:	f004 ff1c 	bl	264fe <assert_print>
   216c6:	4811      	ldr	r0, [pc, #68]	; (2170c <z_unpend_thread+0x6c>)
   216c8:	218e      	movs	r1, #142	; 0x8e
   216ca:	f004 ff11 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   216ce:	480e      	ldr	r0, [pc, #56]	; (21708 <z_unpend_thread+0x68>)
   216d0:	f7fe fe7a 	bl	203c8 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   216d4:	4620      	mov	r0, r4
   216d6:	f7ff ffc5 	bl	21664 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   216da:	480b      	ldr	r0, [pc, #44]	; (21708 <z_unpend_thread+0x68>)
   216dc:	f7fe fe64 	bl	203a8 <z_spin_unlock_valid>
   216e0:	b940      	cbnz	r0, 216f4 <z_unpend_thread+0x54>
   216e2:	490a      	ldr	r1, [pc, #40]	; (2170c <z_unpend_thread+0x6c>)
   216e4:	480a      	ldr	r0, [pc, #40]	; (21710 <z_unpend_thread+0x70>)
   216e6:	22b9      	movs	r2, #185	; 0xb9
   216e8:	f004 ff09 	bl	264fe <assert_print>
   216ec:	4807      	ldr	r0, [pc, #28]	; (2170c <z_unpend_thread+0x6c>)
   216ee:	21b9      	movs	r1, #185	; 0xb9
   216f0:	f004 fefe 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   216f4:	f385 8811 	msr	BASEPRI, r5
   216f8:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   216fc:	f104 0018 	add.w	r0, r4, #24
}
   21700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21704:	f000 bfa8 	b.w	22658 <z_abort_timeout>
   21708:	200028d4 	.word	0x200028d4
   2170c:	0002ac34 	.word	0x0002ac34
   21710:	0002aa75 	.word	0x0002aa75

00021714 <update_cache>:
{
   21714:	b538      	push	{r3, r4, r5, lr}
   21716:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   21718:	4812      	ldr	r0, [pc, #72]	; (21764 <update_cache+0x50>)
   2171a:	4d13      	ldr	r5, [pc, #76]	; (21768 <update_cache+0x54>)
   2171c:	f008 f991 	bl	29a42 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   21720:	4604      	mov	r4, r0
   21722:	b900      	cbnz	r0, 21726 <update_cache+0x12>
   21724:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   21726:	b9aa      	cbnz	r2, 21754 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   21728:	68ab      	ldr	r3, [r5, #8]
   2172a:	b943      	cbnz	r3, 2173e <update_cache+0x2a>
   2172c:	490f      	ldr	r1, [pc, #60]	; (2176c <update_cache+0x58>)
   2172e:	4810      	ldr	r0, [pc, #64]	; (21770 <update_cache+0x5c>)
   21730:	2289      	movs	r2, #137	; 0x89
   21732:	f004 fee4 	bl	264fe <assert_print>
   21736:	480d      	ldr	r0, [pc, #52]	; (2176c <update_cache+0x58>)
   21738:	2189      	movs	r1, #137	; 0x89
   2173a:	f004 fed9 	bl	264f0 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2173e:	68ab      	ldr	r3, [r5, #8]
   21740:	7b5a      	ldrb	r2, [r3, #13]
   21742:	06d2      	lsls	r2, r2, #27
   21744:	d106      	bne.n	21754 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21746:	69a2      	ldr	r2, [r4, #24]
   21748:	b922      	cbnz	r2, 21754 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   2174a:	89da      	ldrh	r2, [r3, #14]
   2174c:	2a7f      	cmp	r2, #127	; 0x7f
   2174e:	d901      	bls.n	21754 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   21750:	61eb      	str	r3, [r5, #28]
}
   21752:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   21754:	68ab      	ldr	r3, [r5, #8]
   21756:	42a3      	cmp	r3, r4
   21758:	d002      	beq.n	21760 <update_cache+0x4c>
			z_reset_time_slice(thread);
   2175a:	4620      	mov	r0, r4
   2175c:	f7ff fe72 	bl	21444 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   21760:	61ec      	str	r4, [r5, #28]
}
   21762:	e7f6      	b.n	21752 <update_cache+0x3e>
   21764:	200028b4 	.word	0x200028b4
   21768:	20002894 	.word	0x20002894
   2176c:	0002d895 	.word	0x0002d895
   21770:	0002aa75 	.word	0x0002aa75

00021774 <move_thread_to_end_of_prio_q>:
{
   21774:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   21776:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2177a:	7b43      	ldrb	r3, [r0, #13]
   2177c:	2a00      	cmp	r2, #0
{
   2177e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21780:	da06      	bge.n	21790 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21786:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21788:	4601      	mov	r1, r0
   2178a:	481d      	ldr	r0, [pc, #116]	; (21800 <move_thread_to_end_of_prio_q+0x8c>)
   2178c:	f7ff ff4c 	bl	21628 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21790:	7b63      	ldrb	r3, [r4, #13]
   21792:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21796:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21798:	4b1a      	ldr	r3, [pc, #104]	; (21804 <move_thread_to_end_of_prio_q+0x90>)
   2179a:	429c      	cmp	r4, r3
   2179c:	d108      	bne.n	217b0 <move_thread_to_end_of_prio_q+0x3c>
   2179e:	491a      	ldr	r1, [pc, #104]	; (21808 <move_thread_to_end_of_prio_q+0x94>)
   217a0:	481a      	ldr	r0, [pc, #104]	; (2180c <move_thread_to_end_of_prio_q+0x98>)
   217a2:	22ba      	movs	r2, #186	; 0xba
   217a4:	f004 feab 	bl	264fe <assert_print>
   217a8:	4817      	ldr	r0, [pc, #92]	; (21808 <move_thread_to_end_of_prio_q+0x94>)
   217aa:	21ba      	movs	r1, #186	; 0xba
   217ac:	f004 fea0 	bl	264f0 <assert_post_action>
	return list->head == list;
   217b0:	4a17      	ldr	r2, [pc, #92]	; (21810 <move_thread_to_end_of_prio_q+0x9c>)
	return (node == list->tail) ? NULL : node->next;
   217b2:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   217b6:	f102 0520 	add.w	r5, r2, #32
   217ba:	42ab      	cmp	r3, r5
   217bc:	d01b      	beq.n	217f6 <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   217be:	b1d3      	cbz	r3, 217f6 <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
   217c0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   217c4:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   217c8:	428e      	cmp	r6, r1
   217ca:	d00f      	beq.n	217ec <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
   217cc:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   217ce:	2900      	cmp	r1, #0
   217d0:	dd0c      	ble.n	217ec <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
   217d2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   217d4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   217d8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   217da:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   217dc:	6890      	ldr	r0, [r2, #8]
   217de:	1b03      	subs	r3, r0, r4
   217e0:	4258      	negs	r0, r3
}
   217e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   217e6:	4158      	adcs	r0, r3
   217e8:	f7ff bf94 	b.w	21714 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   217ec:	4283      	cmp	r3, r0
   217ee:	d002      	beq.n	217f6 <move_thread_to_end_of_prio_q+0x82>
   217f0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   217f2:	2b00      	cmp	r3, #0
   217f4:	d1e6      	bne.n	217c4 <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
   217f6:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   217fa:	6004      	str	r4, [r0, #0]
	list->tail = node;
   217fc:	6254      	str	r4, [r2, #36]	; 0x24
}
   217fe:	e7ed      	b.n	217dc <move_thread_to_end_of_prio_q+0x68>
   21800:	200028b4 	.word	0x200028b4
   21804:	20001d70 	.word	0x20001d70
   21808:	0002d895 	.word	0x0002d895
   2180c:	0002aa75 	.word	0x0002aa75
   21810:	20002894 	.word	0x20002894

00021814 <z_time_slice>:
{
   21814:	b570      	push	{r4, r5, r6, lr}
   21816:	4605      	mov	r5, r0
	__asm__ volatile(
   21818:	f04f 0340 	mov.w	r3, #64	; 0x40
   2181c:	f3ef 8611 	mrs	r6, BASEPRI
   21820:	f383 8812 	msr	BASEPRI_MAX, r3
   21824:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21828:	4825      	ldr	r0, [pc, #148]	; (218c0 <z_time_slice+0xac>)
   2182a:	f7fe fdaf 	bl	2038c <z_spin_lock_valid>
   2182e:	b940      	cbnz	r0, 21842 <z_time_slice+0x2e>
   21830:	4924      	ldr	r1, [pc, #144]	; (218c4 <z_time_slice+0xb0>)
   21832:	4825      	ldr	r0, [pc, #148]	; (218c8 <z_time_slice+0xb4>)
   21834:	228e      	movs	r2, #142	; 0x8e
   21836:	f004 fe62 	bl	264fe <assert_print>
   2183a:	4822      	ldr	r0, [pc, #136]	; (218c4 <z_time_slice+0xb0>)
   2183c:	218e      	movs	r1, #142	; 0x8e
   2183e:	f004 fe57 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21842:	481f      	ldr	r0, [pc, #124]	; (218c0 <z_time_slice+0xac>)
   21844:	f7fe fdc0 	bl	203c8 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   21848:	4b20      	ldr	r3, [pc, #128]	; (218cc <z_time_slice+0xb8>)
   2184a:	4a21      	ldr	r2, [pc, #132]	; (218d0 <z_time_slice+0xbc>)
   2184c:	689c      	ldr	r4, [r3, #8]
   2184e:	6811      	ldr	r1, [r2, #0]
   21850:	428c      	cmp	r4, r1
   21852:	d114      	bne.n	2187e <z_time_slice+0x6a>
	z_reset_time_slice(curr);
   21854:	4620      	mov	r0, r4
   21856:	f7ff fdf5 	bl	21444 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2185a:	4819      	ldr	r0, [pc, #100]	; (218c0 <z_time_slice+0xac>)
   2185c:	f7fe fda4 	bl	203a8 <z_spin_unlock_valid>
   21860:	b940      	cbnz	r0, 21874 <z_time_slice+0x60>
   21862:	4918      	ldr	r1, [pc, #96]	; (218c4 <z_time_slice+0xb0>)
   21864:	4818      	ldr	r0, [pc, #96]	; (218c8 <z_time_slice+0xb4>)
   21866:	22b9      	movs	r2, #185	; 0xb9
   21868:	f004 fe49 	bl	264fe <assert_print>
   2186c:	4815      	ldr	r0, [pc, #84]	; (218c4 <z_time_slice+0xb0>)
   2186e:	21b9      	movs	r1, #185	; 0xb9
   21870:	f004 fe3e 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21874:	f386 8811 	msr	BASEPRI, r6
   21878:	f3bf 8f6f 	isb	sy
}
   2187c:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   2187e:	2100      	movs	r1, #0
   21880:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   21882:	4a14      	ldr	r2, [pc, #80]	; (218d4 <z_time_slice+0xc0>)
	if (slice_time(_current) && sliceable(_current)) {
   21884:	6812      	ldr	r2, [r2, #0]
   21886:	b1c2      	cbz	r2, 218ba <z_time_slice+0xa6>
		&& !z_is_idle_thread_object(thread);
   21888:	89e2      	ldrh	r2, [r4, #14]
   2188a:	2a7f      	cmp	r2, #127	; 0x7f
   2188c:	d815      	bhi.n	218ba <z_time_slice+0xa6>
		&& !z_is_thread_prevented_from_running(thread)
   2188e:	7b62      	ldrb	r2, [r4, #13]
   21890:	06d2      	lsls	r2, r2, #27
   21892:	d112      	bne.n	218ba <z_time_slice+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   21894:	4a10      	ldr	r2, [pc, #64]	; (218d8 <z_time_slice+0xc4>)
   21896:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2189a:	6812      	ldr	r2, [r2, #0]
   2189c:	4291      	cmp	r1, r2
   2189e:	db0c      	blt.n	218ba <z_time_slice+0xa6>
	if (slice_time(_current) && sliceable(_current)) {
   218a0:	4a0e      	ldr	r2, [pc, #56]	; (218dc <z_time_slice+0xc8>)
   218a2:	4294      	cmp	r4, r2
   218a4:	d009      	beq.n	218ba <z_time_slice+0xa6>
		if (ticks >= _current_cpu->slice_ticks) {
   218a6:	691a      	ldr	r2, [r3, #16]
   218a8:	42aa      	cmp	r2, r5
   218aa:	dc03      	bgt.n	218b4 <z_time_slice+0xa0>
		move_thread_to_end_of_prio_q(curr);
   218ac:	4620      	mov	r0, r4
   218ae:	f7ff ff61 	bl	21774 <move_thread_to_end_of_prio_q>
   218b2:	e7cf      	b.n	21854 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   218b4:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   218b6:	611a      	str	r2, [r3, #16]
   218b8:	e7cf      	b.n	2185a <z_time_slice+0x46>
   218ba:	2200      	movs	r2, #0
   218bc:	e7fb      	b.n	218b6 <z_time_slice+0xa2>
   218be:	bf00      	nop
   218c0:	200028d4 	.word	0x200028d4
   218c4:	0002ac34 	.word	0x0002ac34
   218c8:	0002aa75 	.word	0x0002aa75
   218cc:	20002894 	.word	0x20002894
   218d0:	200028d0 	.word	0x200028d0
   218d4:	200028dc 	.word	0x200028dc
   218d8:	200028d8 	.word	0x200028d8
   218dc:	20001d70 	.word	0x20001d70

000218e0 <ready_thread>:
{
   218e0:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   218e2:	f990 200d 	ldrsb.w	r2, [r0, #13]
   218e6:	7b43      	ldrb	r3, [r0, #13]
   218e8:	2a00      	cmp	r2, #0
{
   218ea:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   218ec:	db38      	blt.n	21960 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   218ee:	06da      	lsls	r2, r3, #27
   218f0:	d136      	bne.n	21960 <ready_thread+0x80>
   218f2:	6982      	ldr	r2, [r0, #24]
   218f4:	2a00      	cmp	r2, #0
   218f6:	d133      	bne.n	21960 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   218f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   218fc:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   218fe:	4b19      	ldr	r3, [pc, #100]	; (21964 <ready_thread+0x84>)
   21900:	4298      	cmp	r0, r3
   21902:	d108      	bne.n	21916 <ready_thread+0x36>
   21904:	4918      	ldr	r1, [pc, #96]	; (21968 <ready_thread+0x88>)
   21906:	4819      	ldr	r0, [pc, #100]	; (2196c <ready_thread+0x8c>)
   21908:	22ba      	movs	r2, #186	; 0xba
   2190a:	f004 fdf8 	bl	264fe <assert_print>
   2190e:	4816      	ldr	r0, [pc, #88]	; (21968 <ready_thread+0x88>)
   21910:	21ba      	movs	r1, #186	; 0xba
   21912:	f004 fded 	bl	264f0 <assert_post_action>
	return list->head == list;
   21916:	4a16      	ldr	r2, [pc, #88]	; (21970 <ready_thread+0x90>)
	return (node == list->tail) ? NULL : node->next;
   21918:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2191c:	f102 0520 	add.w	r5, r2, #32
   21920:	42ab      	cmp	r3, r5
   21922:	d018      	beq.n	21956 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21924:	b1bb      	cbz	r3, 21956 <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
   21926:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2192a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2192e:	428e      	cmp	r6, r1
   21930:	d00c      	beq.n	2194c <ready_thread+0x6c>
		return b2 - b1;
   21932:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   21934:	2900      	cmp	r1, #0
   21936:	dd09      	ble.n	2194c <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
   21938:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2193a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2193e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21940:	605c      	str	r4, [r3, #4]
}
   21942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   21946:	2000      	movs	r0, #0
   21948:	f7ff bee4 	b.w	21714 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2194c:	4298      	cmp	r0, r3
   2194e:	d002      	beq.n	21956 <ready_thread+0x76>
   21950:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21952:	2b00      	cmp	r3, #0
   21954:	d1e9      	bne.n	2192a <ready_thread+0x4a>
	node->prev = tail;
   21956:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   2195a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   2195c:	6254      	str	r4, [r2, #36]	; 0x24
}
   2195e:	e7f0      	b.n	21942 <ready_thread+0x62>
}
   21960:	bd70      	pop	{r4, r5, r6, pc}
   21962:	bf00      	nop
   21964:	20001d70 	.word	0x20001d70
   21968:	0002d895 	.word	0x0002d895
   2196c:	0002aa75 	.word	0x0002aa75
   21970:	20002894 	.word	0x20002894

00021974 <z_ready_thread>:
{
   21974:	b538      	push	{r3, r4, r5, lr}
   21976:	4604      	mov	r4, r0
	__asm__ volatile(
   21978:	f04f 0340 	mov.w	r3, #64	; 0x40
   2197c:	f3ef 8511 	mrs	r5, BASEPRI
   21980:	f383 8812 	msr	BASEPRI_MAX, r3
   21984:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21988:	4812      	ldr	r0, [pc, #72]	; (219d4 <z_ready_thread+0x60>)
   2198a:	f7fe fcff 	bl	2038c <z_spin_lock_valid>
   2198e:	b940      	cbnz	r0, 219a2 <z_ready_thread+0x2e>
   21990:	4911      	ldr	r1, [pc, #68]	; (219d8 <z_ready_thread+0x64>)
   21992:	4812      	ldr	r0, [pc, #72]	; (219dc <z_ready_thread+0x68>)
   21994:	228e      	movs	r2, #142	; 0x8e
   21996:	f004 fdb2 	bl	264fe <assert_print>
   2199a:	480f      	ldr	r0, [pc, #60]	; (219d8 <z_ready_thread+0x64>)
   2199c:	218e      	movs	r1, #142	; 0x8e
   2199e:	f004 fda7 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   219a2:	480c      	ldr	r0, [pc, #48]	; (219d4 <z_ready_thread+0x60>)
   219a4:	f7fe fd10 	bl	203c8 <z_spin_lock_set_owner>
			ready_thread(thread);
   219a8:	4620      	mov	r0, r4
   219aa:	f7ff ff99 	bl	218e0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219ae:	4809      	ldr	r0, [pc, #36]	; (219d4 <z_ready_thread+0x60>)
   219b0:	f7fe fcfa 	bl	203a8 <z_spin_unlock_valid>
   219b4:	b940      	cbnz	r0, 219c8 <z_ready_thread+0x54>
   219b6:	4908      	ldr	r1, [pc, #32]	; (219d8 <z_ready_thread+0x64>)
   219b8:	4808      	ldr	r0, [pc, #32]	; (219dc <z_ready_thread+0x68>)
   219ba:	22b9      	movs	r2, #185	; 0xb9
   219bc:	f004 fd9f 	bl	264fe <assert_print>
   219c0:	4805      	ldr	r0, [pc, #20]	; (219d8 <z_ready_thread+0x64>)
   219c2:	21b9      	movs	r1, #185	; 0xb9
   219c4:	f004 fd94 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   219c8:	f385 8811 	msr	BASEPRI, r5
   219cc:	f3bf 8f6f 	isb	sy
}
   219d0:	bd38      	pop	{r3, r4, r5, pc}
   219d2:	bf00      	nop
   219d4:	200028d4 	.word	0x200028d4
   219d8:	0002ac34 	.word	0x0002ac34
   219dc:	0002aa75 	.word	0x0002aa75

000219e0 <z_sched_start>:
{
   219e0:	b538      	push	{r3, r4, r5, lr}
   219e2:	4604      	mov	r4, r0
	__asm__ volatile(
   219e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   219e8:	f3ef 8511 	mrs	r5, BASEPRI
   219ec:	f383 8812 	msr	BASEPRI_MAX, r3
   219f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   219f4:	4818      	ldr	r0, [pc, #96]	; (21a58 <z_sched_start+0x78>)
   219f6:	f7fe fcc9 	bl	2038c <z_spin_lock_valid>
   219fa:	b940      	cbnz	r0, 21a0e <z_sched_start+0x2e>
   219fc:	4917      	ldr	r1, [pc, #92]	; (21a5c <z_sched_start+0x7c>)
   219fe:	4818      	ldr	r0, [pc, #96]	; (21a60 <z_sched_start+0x80>)
   21a00:	228e      	movs	r2, #142	; 0x8e
   21a02:	f004 fd7c 	bl	264fe <assert_print>
   21a06:	4815      	ldr	r0, [pc, #84]	; (21a5c <z_sched_start+0x7c>)
   21a08:	218e      	movs	r1, #142	; 0x8e
   21a0a:	f004 fd71 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21a0e:	4812      	ldr	r0, [pc, #72]	; (21a58 <z_sched_start+0x78>)
   21a10:	f7fe fcda 	bl	203c8 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21a14:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   21a16:	075a      	lsls	r2, r3, #29
   21a18:	d411      	bmi.n	21a3e <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a1a:	480f      	ldr	r0, [pc, #60]	; (21a58 <z_sched_start+0x78>)
   21a1c:	f7fe fcc4 	bl	203a8 <z_spin_unlock_valid>
   21a20:	b940      	cbnz	r0, 21a34 <z_sched_start+0x54>
   21a22:	490e      	ldr	r1, [pc, #56]	; (21a5c <z_sched_start+0x7c>)
   21a24:	480e      	ldr	r0, [pc, #56]	; (21a60 <z_sched_start+0x80>)
   21a26:	22b9      	movs	r2, #185	; 0xb9
   21a28:	f004 fd69 	bl	264fe <assert_print>
   21a2c:	480b      	ldr	r0, [pc, #44]	; (21a5c <z_sched_start+0x7c>)
   21a2e:	21b9      	movs	r1, #185	; 0xb9
   21a30:	f004 fd5e 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21a34:	f385 8811 	msr	BASEPRI, r5
   21a38:	f3bf 8f6f 	isb	sy
}
   21a3c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21a3e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   21a42:	4620      	mov	r0, r4
   21a44:	7363      	strb	r3, [r4, #13]
   21a46:	f7ff ff4b 	bl	218e0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21a4a:	4629      	mov	r1, r5
   21a4c:	4802      	ldr	r0, [pc, #8]	; (21a58 <z_sched_start+0x78>)
}
   21a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   21a52:	f7ff bd5f 	b.w	21514 <z_reschedule>
   21a56:	bf00      	nop
   21a58:	200028d4 	.word	0x200028d4
   21a5c:	0002ac34 	.word	0x0002ac34
   21a60:	0002aa75 	.word	0x0002aa75

00021a64 <z_thread_timeout>:
{
   21a64:	b570      	push	{r4, r5, r6, lr}
   21a66:	4604      	mov	r4, r0
	__asm__ volatile(
   21a68:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a6c:	f3ef 8611 	mrs	r6, BASEPRI
   21a70:	f383 8812 	msr	BASEPRI_MAX, r3
   21a74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a78:	481b      	ldr	r0, [pc, #108]	; (21ae8 <z_thread_timeout+0x84>)
   21a7a:	f7fe fc87 	bl	2038c <z_spin_lock_valid>
   21a7e:	b940      	cbnz	r0, 21a92 <z_thread_timeout+0x2e>
   21a80:	491a      	ldr	r1, [pc, #104]	; (21aec <z_thread_timeout+0x88>)
   21a82:	481b      	ldr	r0, [pc, #108]	; (21af0 <z_thread_timeout+0x8c>)
   21a84:	228e      	movs	r2, #142	; 0x8e
   21a86:	f004 fd3a 	bl	264fe <assert_print>
   21a8a:	4818      	ldr	r0, [pc, #96]	; (21aec <z_thread_timeout+0x88>)
   21a8c:	218e      	movs	r1, #142	; 0x8e
   21a8e:	f004 fd2f 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21a92:	4815      	ldr	r0, [pc, #84]	; (21ae8 <z_thread_timeout+0x84>)
   21a94:	f7fe fc98 	bl	203c8 <z_spin_lock_set_owner>
		if (!killed) {
   21a98:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   21a9c:	f013 0f28 	tst.w	r3, #40	; 0x28
   21aa0:	d110      	bne.n	21ac4 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   21aa2:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   21aa6:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   21aaa:	b113      	cbz	r3, 21ab2 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   21aac:	4628      	mov	r0, r5
   21aae:	f7ff fdd9 	bl	21664 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   21ab2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   21ab6:	f023 0314 	bic.w	r3, r3, #20
   21aba:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   21abe:	4628      	mov	r0, r5
   21ac0:	f7ff ff0e 	bl	218e0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ac4:	4808      	ldr	r0, [pc, #32]	; (21ae8 <z_thread_timeout+0x84>)
   21ac6:	f7fe fc6f 	bl	203a8 <z_spin_unlock_valid>
   21aca:	b940      	cbnz	r0, 21ade <z_thread_timeout+0x7a>
   21acc:	4907      	ldr	r1, [pc, #28]	; (21aec <z_thread_timeout+0x88>)
   21ace:	4808      	ldr	r0, [pc, #32]	; (21af0 <z_thread_timeout+0x8c>)
   21ad0:	22b9      	movs	r2, #185	; 0xb9
   21ad2:	f004 fd14 	bl	264fe <assert_print>
   21ad6:	4805      	ldr	r0, [pc, #20]	; (21aec <z_thread_timeout+0x88>)
   21ad8:	21b9      	movs	r1, #185	; 0xb9
   21ada:	f004 fd09 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21ade:	f386 8811 	msr	BASEPRI, r6
   21ae2:	f3bf 8f6f 	isb	sy
}
   21ae6:	bd70      	pop	{r4, r5, r6, pc}
   21ae8:	200028d4 	.word	0x200028d4
   21aec:	0002ac34 	.word	0x0002ac34
   21af0:	0002aa75 	.word	0x0002aa75

00021af4 <unready_thread>:
{
   21af4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   21af6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21afa:	7b43      	ldrb	r3, [r0, #13]
   21afc:	2a00      	cmp	r2, #0
{
   21afe:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21b00:	da06      	bge.n	21b10 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21b06:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21b08:	4601      	mov	r1, r0
   21b0a:	4806      	ldr	r0, [pc, #24]	; (21b24 <unready_thread+0x30>)
   21b0c:	f7ff fd8c 	bl	21628 <z_priq_dumb_remove>
	update_cache(thread == _current);
   21b10:	4b05      	ldr	r3, [pc, #20]	; (21b28 <unready_thread+0x34>)
   21b12:	6898      	ldr	r0, [r3, #8]
   21b14:	1b03      	subs	r3, r0, r4
   21b16:	4258      	negs	r0, r3
}
   21b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   21b1c:	4158      	adcs	r0, r3
   21b1e:	f7ff bdf9 	b.w	21714 <update_cache>
   21b22:	bf00      	nop
   21b24:	200028b4 	.word	0x200028b4
   21b28:	20002894 	.word	0x20002894

00021b2c <add_to_waitq_locked>:
{
   21b2c:	b538      	push	{r3, r4, r5, lr}
   21b2e:	4604      	mov	r4, r0
   21b30:	460d      	mov	r5, r1
	unready_thread(thread);
   21b32:	f7ff ffdf 	bl	21af4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   21b36:	7b63      	ldrb	r3, [r4, #13]
   21b38:	f043 0302 	orr.w	r3, r3, #2
   21b3c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   21b3e:	b1f5      	cbz	r5, 21b7e <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21b40:	4b15      	ldr	r3, [pc, #84]	; (21b98 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   21b42:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21b44:	429c      	cmp	r4, r3
   21b46:	d108      	bne.n	21b5a <add_to_waitq_locked+0x2e>
   21b48:	4914      	ldr	r1, [pc, #80]	; (21b9c <add_to_waitq_locked+0x70>)
   21b4a:	4815      	ldr	r0, [pc, #84]	; (21ba0 <add_to_waitq_locked+0x74>)
   21b4c:	22ba      	movs	r2, #186	; 0xba
   21b4e:	f004 fcd6 	bl	264fe <assert_print>
   21b52:	4812      	ldr	r0, [pc, #72]	; (21b9c <add_to_waitq_locked+0x70>)
   21b54:	21ba      	movs	r1, #186	; 0xba
   21b56:	f004 fccb 	bl	264f0 <assert_post_action>
	return list->head == list;
   21b5a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b5c:	429d      	cmp	r5, r3
   21b5e:	d015      	beq.n	21b8c <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b60:	b1a3      	cbz	r3, 21b8c <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
   21b62:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   21b66:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   21b6a:	4291      	cmp	r1, r2
   21b6c:	d008      	beq.n	21b80 <add_to_waitq_locked+0x54>
		return b2 - b1;
   21b6e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   21b70:	2a00      	cmp	r2, #0
   21b72:	dd05      	ble.n	21b80 <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
   21b74:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21b76:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   21b7a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21b7c:	605c      	str	r4, [r3, #4]
}
   21b7e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   21b80:	686a      	ldr	r2, [r5, #4]
   21b82:	4293      	cmp	r3, r2
   21b84:	d002      	beq.n	21b8c <add_to_waitq_locked+0x60>
   21b86:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b88:	2b00      	cmp	r3, #0
   21b8a:	d1ec      	bne.n	21b66 <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
   21b8c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   21b8e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   21b92:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21b94:	606c      	str	r4, [r5, #4]
}
   21b96:	e7f2      	b.n	21b7e <add_to_waitq_locked+0x52>
   21b98:	20001d70 	.word	0x20001d70
   21b9c:	0002d895 	.word	0x0002d895
   21ba0:	0002aa75 	.word	0x0002aa75

00021ba4 <pend>:
{
   21ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ba8:	4604      	mov	r4, r0
   21baa:	4688      	mov	r8, r1
   21bac:	4616      	mov	r6, r2
   21bae:	461d      	mov	r5, r3
	__asm__ volatile(
   21bb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   21bb4:	f3ef 8711 	mrs	r7, BASEPRI
   21bb8:	f383 8812 	msr	BASEPRI_MAX, r3
   21bbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21bc0:	481a      	ldr	r0, [pc, #104]	; (21c2c <pend+0x88>)
   21bc2:	f7fe fbe3 	bl	2038c <z_spin_lock_valid>
   21bc6:	b940      	cbnz	r0, 21bda <pend+0x36>
   21bc8:	4919      	ldr	r1, [pc, #100]	; (21c30 <pend+0x8c>)
   21bca:	481a      	ldr	r0, [pc, #104]	; (21c34 <pend+0x90>)
   21bcc:	228e      	movs	r2, #142	; 0x8e
   21bce:	f004 fc96 	bl	264fe <assert_print>
   21bd2:	4817      	ldr	r0, [pc, #92]	; (21c30 <pend+0x8c>)
   21bd4:	218e      	movs	r1, #142	; 0x8e
   21bd6:	f004 fc8b 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21bda:	4814      	ldr	r0, [pc, #80]	; (21c2c <pend+0x88>)
   21bdc:	f7fe fbf4 	bl	203c8 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   21be0:	4620      	mov	r0, r4
   21be2:	4641      	mov	r1, r8
   21be4:	f7ff ffa2 	bl	21b2c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21be8:	4810      	ldr	r0, [pc, #64]	; (21c2c <pend+0x88>)
   21bea:	f7fe fbdd 	bl	203a8 <z_spin_unlock_valid>
   21bee:	b940      	cbnz	r0, 21c02 <pend+0x5e>
   21bf0:	490f      	ldr	r1, [pc, #60]	; (21c30 <pend+0x8c>)
   21bf2:	4810      	ldr	r0, [pc, #64]	; (21c34 <pend+0x90>)
   21bf4:	22b9      	movs	r2, #185	; 0xb9
   21bf6:	f004 fc82 	bl	264fe <assert_print>
   21bfa:	480d      	ldr	r0, [pc, #52]	; (21c30 <pend+0x8c>)
   21bfc:	21b9      	movs	r1, #185	; 0xb9
   21bfe:	f004 fc77 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21c02:	f387 8811 	msr	BASEPRI, r7
   21c06:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21c0a:	f1b5 3fff 	cmp.w	r5, #4294967295
   21c0e:	bf08      	it	eq
   21c10:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   21c14:	d008      	beq.n	21c28 <pend+0x84>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21c16:	4632      	mov	r2, r6
   21c18:	462b      	mov	r3, r5
   21c1a:	f104 0018 	add.w	r0, r4, #24
   21c1e:	4906      	ldr	r1, [pc, #24]	; (21c38 <pend+0x94>)
}
   21c20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21c24:	f000 bc6a 	b.w	224fc <z_add_timeout>
   21c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21c2c:	200028d4 	.word	0x200028d4
   21c30:	0002ac34 	.word	0x0002ac34
   21c34:	0002aa75 	.word	0x0002aa75
   21c38:	00021a65 	.word	0x00021a65

00021c3c <z_pend_curr>:
{
   21c3c:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   21c3e:	4b0e      	ldr	r3, [pc, #56]	; (21c78 <z_pend_curr+0x3c>)
{
   21c40:	4605      	mov	r5, r0
	pending_current = _current;
   21c42:	6898      	ldr	r0, [r3, #8]
   21c44:	4b0d      	ldr	r3, [pc, #52]	; (21c7c <z_pend_curr+0x40>)
{
   21c46:	460c      	mov	r4, r1
	pending_current = _current;
   21c48:	6018      	str	r0, [r3, #0]
{
   21c4a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   21c4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21c50:	f7ff ffa8 	bl	21ba4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c54:	4628      	mov	r0, r5
   21c56:	f7fe fba7 	bl	203a8 <z_spin_unlock_valid>
   21c5a:	b940      	cbnz	r0, 21c6e <z_pend_curr+0x32>
   21c5c:	4908      	ldr	r1, [pc, #32]	; (21c80 <z_pend_curr+0x44>)
   21c5e:	4809      	ldr	r0, [pc, #36]	; (21c84 <z_pend_curr+0x48>)
   21c60:	22d0      	movs	r2, #208	; 0xd0
   21c62:	f004 fc4c 	bl	264fe <assert_print>
   21c66:	4806      	ldr	r0, [pc, #24]	; (21c80 <z_pend_curr+0x44>)
   21c68:	21d0      	movs	r1, #208	; 0xd0
   21c6a:	f004 fc41 	bl	264f0 <assert_post_action>
   21c6e:	4620      	mov	r0, r4
}
   21c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21c74:	f7f2 bab2 	b.w	141dc <arch_swap>
   21c78:	20002894 	.word	0x20002894
   21c7c:	200028d0 	.word	0x200028d0
   21c80:	0002ac34 	.word	0x0002ac34
   21c84:	0002aa75 	.word	0x0002aa75

00021c88 <z_set_prio>:
{
   21c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21c8a:	4604      	mov	r4, r0
   21c8c:	460d      	mov	r5, r1
	__asm__ volatile(
   21c8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c92:	f3ef 8611 	mrs	r6, BASEPRI
   21c96:	f383 8812 	msr	BASEPRI_MAX, r3
   21c9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c9e:	4834      	ldr	r0, [pc, #208]	; (21d70 <z_set_prio+0xe8>)
   21ca0:	f7fe fb74 	bl	2038c <z_spin_lock_valid>
   21ca4:	b940      	cbnz	r0, 21cb8 <z_set_prio+0x30>
   21ca6:	4933      	ldr	r1, [pc, #204]	; (21d74 <z_set_prio+0xec>)
   21ca8:	4833      	ldr	r0, [pc, #204]	; (21d78 <z_set_prio+0xf0>)
   21caa:	228e      	movs	r2, #142	; 0x8e
   21cac:	f004 fc27 	bl	264fe <assert_print>
   21cb0:	4830      	ldr	r0, [pc, #192]	; (21d74 <z_set_prio+0xec>)
   21cb2:	218e      	movs	r1, #142	; 0x8e
   21cb4:	f004 fc1c 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21cb8:	482d      	ldr	r0, [pc, #180]	; (21d70 <z_set_prio+0xe8>)
   21cba:	f7fe fb85 	bl	203c8 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   21cbe:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21cc0:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   21cc2:	b26d      	sxtb	r5, r5
   21cc4:	d151      	bne.n	21d6a <z_set_prio+0xe2>
		if (need_sched) {
   21cc6:	69a2      	ldr	r2, [r4, #24]
   21cc8:	2a00      	cmp	r2, #0
   21cca:	d14e      	bne.n	21d6a <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21cd0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21cd2:	482a      	ldr	r0, [pc, #168]	; (21d7c <z_set_prio+0xf4>)
   21cd4:	4621      	mov	r1, r4
   21cd6:	f7ff fca7 	bl	21628 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21cda:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   21cdc:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   21cde:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21ce2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21ce4:	4b26      	ldr	r3, [pc, #152]	; (21d80 <z_set_prio+0xf8>)
   21ce6:	429c      	cmp	r4, r3
   21ce8:	d108      	bne.n	21cfc <z_set_prio+0x74>
   21cea:	4926      	ldr	r1, [pc, #152]	; (21d84 <z_set_prio+0xfc>)
   21cec:	4822      	ldr	r0, [pc, #136]	; (21d78 <z_set_prio+0xf0>)
   21cee:	22ba      	movs	r2, #186	; 0xba
   21cf0:	f004 fc05 	bl	264fe <assert_print>
   21cf4:	4823      	ldr	r0, [pc, #140]	; (21d84 <z_set_prio+0xfc>)
   21cf6:	21ba      	movs	r1, #186	; 0xba
   21cf8:	f004 fbfa 	bl	264f0 <assert_post_action>
	return list->head == list;
   21cfc:	4a22      	ldr	r2, [pc, #136]	; (21d88 <z_set_prio+0x100>)
	return (node == list->tail) ? NULL : node->next;
   21cfe:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21d02:	f102 0520 	add.w	r5, r2, #32
   21d06:	42ab      	cmp	r3, r5
   21d08:	d02a      	beq.n	21d60 <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21d0a:	b34b      	cbz	r3, 21d60 <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
   21d0c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   21d10:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   21d14:	428f      	cmp	r7, r1
   21d16:	d01e      	beq.n	21d56 <z_set_prio+0xce>
		return b2 - b1;
   21d18:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   21d1a:	2900      	cmp	r1, #0
   21d1c:	dd1b      	ble.n	21d56 <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   21d1e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21d20:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   21d24:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21d26:	605c      	str	r4, [r3, #4]
			update_cache(1);
   21d28:	2001      	movs	r0, #1
   21d2a:	f7ff fcf3 	bl	21714 <update_cache>
   21d2e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d30:	480f      	ldr	r0, [pc, #60]	; (21d70 <z_set_prio+0xe8>)
   21d32:	f7fe fb39 	bl	203a8 <z_spin_unlock_valid>
   21d36:	b940      	cbnz	r0, 21d4a <z_set_prio+0xc2>
   21d38:	490e      	ldr	r1, [pc, #56]	; (21d74 <z_set_prio+0xec>)
   21d3a:	480f      	ldr	r0, [pc, #60]	; (21d78 <z_set_prio+0xf0>)
   21d3c:	22b9      	movs	r2, #185	; 0xb9
   21d3e:	f004 fbde 	bl	264fe <assert_print>
   21d42:	480c      	ldr	r0, [pc, #48]	; (21d74 <z_set_prio+0xec>)
   21d44:	21b9      	movs	r1, #185	; 0xb9
   21d46:	f004 fbd3 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21d4a:	f386 8811 	msr	BASEPRI, r6
   21d4e:	f3bf 8f6f 	isb	sy
}
   21d52:	4620      	mov	r0, r4
   21d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   21d56:	4283      	cmp	r3, r0
   21d58:	d002      	beq.n	21d60 <z_set_prio+0xd8>
   21d5a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21d5c:	2b00      	cmp	r3, #0
   21d5e:	d1d7      	bne.n	21d10 <z_set_prio+0x88>
	node->prev = tail;
   21d60:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   21d64:	6004      	str	r4, [r0, #0]
	list->tail = node;
   21d66:	6254      	str	r4, [r2, #36]	; 0x24
}
   21d68:	e7de      	b.n	21d28 <z_set_prio+0xa0>
			thread->base.prio = prio;
   21d6a:	73a5      	strb	r5, [r4, #14]
   21d6c:	2400      	movs	r4, #0
   21d6e:	e7df      	b.n	21d30 <z_set_prio+0xa8>
   21d70:	200028d4 	.word	0x200028d4
   21d74:	0002ac34 	.word	0x0002ac34
   21d78:	0002aa75 	.word	0x0002aa75
   21d7c:	200028b4 	.word	0x200028b4
   21d80:	20001d70 	.word	0x20001d70
   21d84:	0002d895 	.word	0x0002d895
   21d88:	20002894 	.word	0x20002894

00021d8c <z_impl_k_thread_suspend>:
{
   21d8c:	b570      	push	{r4, r5, r6, lr}
   21d8e:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   21d90:	3018      	adds	r0, #24
   21d92:	f000 fc61 	bl	22658 <z_abort_timeout>
	__asm__ volatile(
   21d96:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d9a:	f3ef 8611 	mrs	r6, BASEPRI
   21d9e:	f383 8812 	msr	BASEPRI_MAX, r3
   21da2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21da6:	4820      	ldr	r0, [pc, #128]	; (21e28 <z_impl_k_thread_suspend+0x9c>)
   21da8:	f7fe faf0 	bl	2038c <z_spin_lock_valid>
   21dac:	b940      	cbnz	r0, 21dc0 <z_impl_k_thread_suspend+0x34>
   21dae:	491f      	ldr	r1, [pc, #124]	; (21e2c <z_impl_k_thread_suspend+0xa0>)
   21db0:	481f      	ldr	r0, [pc, #124]	; (21e30 <z_impl_k_thread_suspend+0xa4>)
   21db2:	228e      	movs	r2, #142	; 0x8e
   21db4:	f004 fba3 	bl	264fe <assert_print>
   21db8:	481c      	ldr	r0, [pc, #112]	; (21e2c <z_impl_k_thread_suspend+0xa0>)
   21dba:	218e      	movs	r1, #142	; 0x8e
   21dbc:	f004 fb98 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21dc0:	4819      	ldr	r0, [pc, #100]	; (21e28 <z_impl_k_thread_suspend+0x9c>)
   21dc2:	f7fe fb01 	bl	203c8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   21dc6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   21dca:	7b63      	ldrb	r3, [r4, #13]
   21dcc:	2a00      	cmp	r2, #0
   21dce:	da06      	bge.n	21dde <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   21dd4:	4817      	ldr	r0, [pc, #92]	; (21e34 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21dd6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21dd8:	4621      	mov	r1, r4
   21dda:	f7ff fc25 	bl	21628 <z_priq_dumb_remove>
		update_cache(thread == _current);
   21dde:	4d16      	ldr	r5, [pc, #88]	; (21e38 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21de0:	7b63      	ldrb	r3, [r4, #13]
   21de2:	68a8      	ldr	r0, [r5, #8]
   21de4:	f043 0310 	orr.w	r3, r3, #16
   21de8:	7363      	strb	r3, [r4, #13]
   21dea:	1b03      	subs	r3, r0, r4
   21dec:	4258      	negs	r0, r3
   21dee:	4158      	adcs	r0, r3
   21df0:	f7ff fc90 	bl	21714 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21df4:	480c      	ldr	r0, [pc, #48]	; (21e28 <z_impl_k_thread_suspend+0x9c>)
   21df6:	f7fe fad7 	bl	203a8 <z_spin_unlock_valid>
   21dfa:	b940      	cbnz	r0, 21e0e <z_impl_k_thread_suspend+0x82>
   21dfc:	490b      	ldr	r1, [pc, #44]	; (21e2c <z_impl_k_thread_suspend+0xa0>)
   21dfe:	480c      	ldr	r0, [pc, #48]	; (21e30 <z_impl_k_thread_suspend+0xa4>)
   21e00:	22b9      	movs	r2, #185	; 0xb9
   21e02:	f004 fb7c 	bl	264fe <assert_print>
   21e06:	4809      	ldr	r0, [pc, #36]	; (21e2c <z_impl_k_thread_suspend+0xa0>)
   21e08:	21b9      	movs	r1, #185	; 0xb9
   21e0a:	f004 fb71 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21e0e:	f386 8811 	msr	BASEPRI, r6
   21e12:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   21e16:	68ab      	ldr	r3, [r5, #8]
   21e18:	42a3      	cmp	r3, r4
   21e1a:	d103      	bne.n	21e24 <z_impl_k_thread_suspend+0x98>
}
   21e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   21e20:	f007 be05 	b.w	29a2e <z_reschedule_unlocked>
}
   21e24:	bd70      	pop	{r4, r5, r6, pc}
   21e26:	bf00      	nop
   21e28:	200028d4 	.word	0x200028d4
   21e2c:	0002ac34 	.word	0x0002ac34
   21e30:	0002aa75 	.word	0x0002aa75
   21e34:	200028b4 	.word	0x200028b4
   21e38:	20002894 	.word	0x20002894

00021e3c <k_sched_unlock>:
{
   21e3c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21e3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e42:	f3ef 8511 	mrs	r5, BASEPRI
   21e46:	f383 8812 	msr	BASEPRI_MAX, r3
   21e4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e4e:	4824      	ldr	r0, [pc, #144]	; (21ee0 <k_sched_unlock+0xa4>)
   21e50:	f7fe fa9c 	bl	2038c <z_spin_lock_valid>
   21e54:	b940      	cbnz	r0, 21e68 <k_sched_unlock+0x2c>
   21e56:	4923      	ldr	r1, [pc, #140]	; (21ee4 <k_sched_unlock+0xa8>)
   21e58:	4823      	ldr	r0, [pc, #140]	; (21ee8 <k_sched_unlock+0xac>)
   21e5a:	228e      	movs	r2, #142	; 0x8e
   21e5c:	f004 fb4f 	bl	264fe <assert_print>
   21e60:	4820      	ldr	r0, [pc, #128]	; (21ee4 <k_sched_unlock+0xa8>)
   21e62:	218e      	movs	r1, #142	; 0x8e
   21e64:	f004 fb44 	bl	264f0 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   21e68:	4c20      	ldr	r4, [pc, #128]	; (21eec <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   21e6a:	481d      	ldr	r0, [pc, #116]	; (21ee0 <k_sched_unlock+0xa4>)
   21e6c:	f7fe faac 	bl	203c8 <z_spin_lock_set_owner>
   21e70:	68a3      	ldr	r3, [r4, #8]
   21e72:	7bdb      	ldrb	r3, [r3, #15]
   21e74:	b953      	cbnz	r3, 21e8c <k_sched_unlock+0x50>
   21e76:	491e      	ldr	r1, [pc, #120]	; (21ef0 <k_sched_unlock+0xb4>)
   21e78:	481b      	ldr	r0, [pc, #108]	; (21ee8 <k_sched_unlock+0xac>)
   21e7a:	f240 32d6 	movw	r2, #982	; 0x3d6
   21e7e:	f004 fb3e 	bl	264fe <assert_print>
   21e82:	481b      	ldr	r0, [pc, #108]	; (21ef0 <k_sched_unlock+0xb4>)
   21e84:	f240 31d6 	movw	r1, #982	; 0x3d6
   21e88:	f004 fb32 	bl	264f0 <assert_post_action>
   21e8c:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   21e90:	b153      	cbz	r3, 21ea8 <k_sched_unlock+0x6c>
   21e92:	4917      	ldr	r1, [pc, #92]	; (21ef0 <k_sched_unlock+0xb4>)
   21e94:	4814      	ldr	r0, [pc, #80]	; (21ee8 <k_sched_unlock+0xac>)
   21e96:	f240 32d7 	movw	r2, #983	; 0x3d7
   21e9a:	f004 fb30 	bl	264fe <assert_print>
   21e9e:	4814      	ldr	r0, [pc, #80]	; (21ef0 <k_sched_unlock+0xb4>)
   21ea0:	f240 31d7 	movw	r1, #983	; 0x3d7
   21ea4:	f004 fb24 	bl	264f0 <assert_post_action>
		++_current->base.sched_locked;
   21ea8:	68a2      	ldr	r2, [r4, #8]
   21eaa:	7bd3      	ldrb	r3, [r2, #15]
   21eac:	3301      	adds	r3, #1
		update_cache(0);
   21eae:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   21eb0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   21eb2:	f7ff fc2f 	bl	21714 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21eb6:	480a      	ldr	r0, [pc, #40]	; (21ee0 <k_sched_unlock+0xa4>)
   21eb8:	f7fe fa76 	bl	203a8 <z_spin_unlock_valid>
   21ebc:	b940      	cbnz	r0, 21ed0 <k_sched_unlock+0x94>
   21ebe:	4909      	ldr	r1, [pc, #36]	; (21ee4 <k_sched_unlock+0xa8>)
   21ec0:	4809      	ldr	r0, [pc, #36]	; (21ee8 <k_sched_unlock+0xac>)
   21ec2:	22b9      	movs	r2, #185	; 0xb9
   21ec4:	f004 fb1b 	bl	264fe <assert_print>
   21ec8:	4806      	ldr	r0, [pc, #24]	; (21ee4 <k_sched_unlock+0xa8>)
   21eca:	21b9      	movs	r1, #185	; 0xb9
   21ecc:	f004 fb10 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21ed0:	f385 8811 	msr	BASEPRI, r5
   21ed4:	f3bf 8f6f 	isb	sy
}
   21ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   21edc:	f007 bda7 	b.w	29a2e <z_reschedule_unlocked>
   21ee0:	200028d4 	.word	0x200028d4
   21ee4:	0002ac34 	.word	0x0002ac34
   21ee8:	0002aa75 	.word	0x0002aa75
   21eec:	20002894 	.word	0x20002894
   21ef0:	0002d895 	.word	0x0002d895

00021ef4 <z_unpend_first_thread>:
{
   21ef4:	b538      	push	{r3, r4, r5, lr}
   21ef6:	4604      	mov	r4, r0
	__asm__ volatile(
   21ef8:	f04f 0340 	mov.w	r3, #64	; 0x40
   21efc:	f3ef 8511 	mrs	r5, BASEPRI
   21f00:	f383 8812 	msr	BASEPRI_MAX, r3
   21f04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f08:	4816      	ldr	r0, [pc, #88]	; (21f64 <z_unpend_first_thread+0x70>)
   21f0a:	f7fe fa3f 	bl	2038c <z_spin_lock_valid>
   21f0e:	b940      	cbnz	r0, 21f22 <z_unpend_first_thread+0x2e>
   21f10:	4915      	ldr	r1, [pc, #84]	; (21f68 <z_unpend_first_thread+0x74>)
   21f12:	4816      	ldr	r0, [pc, #88]	; (21f6c <z_unpend_first_thread+0x78>)
   21f14:	228e      	movs	r2, #142	; 0x8e
   21f16:	f004 faf2 	bl	264fe <assert_print>
   21f1a:	4813      	ldr	r0, [pc, #76]	; (21f68 <z_unpend_first_thread+0x74>)
   21f1c:	218e      	movs	r1, #142	; 0x8e
   21f1e:	f004 fae7 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21f22:	4810      	ldr	r0, [pc, #64]	; (21f64 <z_unpend_first_thread+0x70>)
   21f24:	f7fe fa50 	bl	203c8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   21f28:	4620      	mov	r0, r4
   21f2a:	f007 fd8a 	bl	29a42 <z_priq_dumb_best>
		if (thread != NULL) {
   21f2e:	4604      	mov	r4, r0
   21f30:	b128      	cbz	r0, 21f3e <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   21f32:	f7ff fb97 	bl	21664 <unpend_thread_no_timeout>
   21f36:	f104 0018 	add.w	r0, r4, #24
   21f3a:	f000 fb8d 	bl	22658 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f3e:	4809      	ldr	r0, [pc, #36]	; (21f64 <z_unpend_first_thread+0x70>)
   21f40:	f7fe fa32 	bl	203a8 <z_spin_unlock_valid>
   21f44:	b940      	cbnz	r0, 21f58 <z_unpend_first_thread+0x64>
   21f46:	4908      	ldr	r1, [pc, #32]	; (21f68 <z_unpend_first_thread+0x74>)
   21f48:	4808      	ldr	r0, [pc, #32]	; (21f6c <z_unpend_first_thread+0x78>)
   21f4a:	22b9      	movs	r2, #185	; 0xb9
   21f4c:	f004 fad7 	bl	264fe <assert_print>
   21f50:	4805      	ldr	r0, [pc, #20]	; (21f68 <z_unpend_first_thread+0x74>)
   21f52:	21b9      	movs	r1, #185	; 0xb9
   21f54:	f004 facc 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21f58:	f385 8811 	msr	BASEPRI, r5
   21f5c:	f3bf 8f6f 	isb	sy
}
   21f60:	4620      	mov	r0, r4
   21f62:	bd38      	pop	{r3, r4, r5, pc}
   21f64:	200028d4 	.word	0x200028d4
   21f68:	0002ac34 	.word	0x0002ac34
   21f6c:	0002aa75 	.word	0x0002aa75

00021f70 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   21f70:	4b04      	ldr	r3, [pc, #16]	; (21f84 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21f72:	2100      	movs	r1, #0
   21f74:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   21f78:	e9c3 2208 	strd	r2, r2, [r3, #32]
   21f7c:	4608      	mov	r0, r1
   21f7e:	f7ff ba75 	b.w	2146c <k_sched_time_slice_set>
   21f82:	bf00      	nop
   21f84:	20002894 	.word	0x20002894

00021f88 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   21f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f8a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21f8e:	b153      	cbz	r3, 21fa6 <z_impl_k_yield+0x1e>
   21f90:	4938      	ldr	r1, [pc, #224]	; (22074 <z_impl_k_yield+0xec>)
   21f92:	4839      	ldr	r0, [pc, #228]	; (22078 <z_impl_k_yield+0xf0>)
   21f94:	f240 525d 	movw	r2, #1373	; 0x55d
   21f98:	f004 fab1 	bl	264fe <assert_print>
   21f9c:	4835      	ldr	r0, [pc, #212]	; (22074 <z_impl_k_yield+0xec>)
   21f9e:	f240 515d 	movw	r1, #1373	; 0x55d
   21fa2:	f004 faa5 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   21fa6:	f04f 0340 	mov.w	r3, #64	; 0x40
   21faa:	f3ef 8611 	mrs	r6, BASEPRI
   21fae:	f383 8812 	msr	BASEPRI_MAX, r3
   21fb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21fb6:	4831      	ldr	r0, [pc, #196]	; (2207c <z_impl_k_yield+0xf4>)
   21fb8:	f7fe f9e8 	bl	2038c <z_spin_lock_valid>
   21fbc:	b940      	cbnz	r0, 21fd0 <z_impl_k_yield+0x48>
   21fbe:	4930      	ldr	r1, [pc, #192]	; (22080 <z_impl_k_yield+0xf8>)
   21fc0:	482d      	ldr	r0, [pc, #180]	; (22078 <z_impl_k_yield+0xf0>)
   21fc2:	228e      	movs	r2, #142	; 0x8e
   21fc4:	f004 fa9b 	bl	264fe <assert_print>
   21fc8:	482d      	ldr	r0, [pc, #180]	; (22080 <z_impl_k_yield+0xf8>)
   21fca:	218e      	movs	r1, #142	; 0x8e
   21fcc:	f004 fa90 	bl	264f0 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   21fd0:	4d2c      	ldr	r5, [pc, #176]	; (22084 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   21fd2:	482a      	ldr	r0, [pc, #168]	; (2207c <z_impl_k_yield+0xf4>)
   21fd4:	f7fe f9f8 	bl	203c8 <z_spin_lock_set_owner>
   21fd8:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21fda:	7b4b      	ldrb	r3, [r1, #13]
   21fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21fe0:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21fe2:	f105 0020 	add.w	r0, r5, #32
   21fe6:	f7ff fb1f 	bl	21628 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   21fea:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   21fec:	7b63      	ldrb	r3, [r4, #13]
   21fee:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21ff2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21ff4:	4b24      	ldr	r3, [pc, #144]	; (22088 <z_impl_k_yield+0x100>)
   21ff6:	429c      	cmp	r4, r3
   21ff8:	d108      	bne.n	2200c <z_impl_k_yield+0x84>
   21ffa:	491e      	ldr	r1, [pc, #120]	; (22074 <z_impl_k_yield+0xec>)
   21ffc:	481e      	ldr	r0, [pc, #120]	; (22078 <z_impl_k_yield+0xf0>)
   21ffe:	22ba      	movs	r2, #186	; 0xba
   22000:	f004 fa7d 	bl	264fe <assert_print>
   22004:	481b      	ldr	r0, [pc, #108]	; (22074 <z_impl_k_yield+0xec>)
   22006:	21ba      	movs	r1, #186	; 0xba
   22008:	f004 fa72 	bl	264f0 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   2200c:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22010:	481e      	ldr	r0, [pc, #120]	; (2208c <z_impl_k_yield+0x104>)
   22012:	4283      	cmp	r3, r0
   22014:	d028      	beq.n	22068 <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22016:	b33b      	cbz	r3, 22068 <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
   22018:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2201c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   22020:	4297      	cmp	r7, r2
   22022:	d01c      	beq.n	2205e <z_impl_k_yield+0xd6>
		return b2 - b1;
   22024:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   22026:	2a00      	cmp	r2, #0
   22028:	dd19      	ble.n	2205e <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
   2202a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2202c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22030:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22032:	605c      	str	r4, [r3, #4]
	update_cache(1);
   22034:	2001      	movs	r0, #1
   22036:	f7ff fb6d 	bl	21714 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2203a:	4810      	ldr	r0, [pc, #64]	; (2207c <z_impl_k_yield+0xf4>)
   2203c:	f7fe f9b4 	bl	203a8 <z_spin_unlock_valid>
   22040:	b940      	cbnz	r0, 22054 <z_impl_k_yield+0xcc>
   22042:	490f      	ldr	r1, [pc, #60]	; (22080 <z_impl_k_yield+0xf8>)
   22044:	480c      	ldr	r0, [pc, #48]	; (22078 <z_impl_k_yield+0xf0>)
   22046:	22d0      	movs	r2, #208	; 0xd0
   22048:	f004 fa59 	bl	264fe <assert_print>
   2204c:	480c      	ldr	r0, [pc, #48]	; (22080 <z_impl_k_yield+0xf8>)
   2204e:	21d0      	movs	r1, #208	; 0xd0
   22050:	f004 fa4e 	bl	264f0 <assert_post_action>
   22054:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   22056:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2205a:	f7f2 b8bf 	b.w	141dc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2205e:	428b      	cmp	r3, r1
   22060:	d002      	beq.n	22068 <z_impl_k_yield+0xe0>
   22062:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22064:	2b00      	cmp	r3, #0
   22066:	d1d9      	bne.n	2201c <z_impl_k_yield+0x94>
	node->prev = tail;
   22068:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   2206c:	600c      	str	r4, [r1, #0]
	list->tail = node;
   2206e:	626c      	str	r4, [r5, #36]	; 0x24
}
   22070:	e7e0      	b.n	22034 <z_impl_k_yield+0xac>
   22072:	bf00      	nop
   22074:	0002d895 	.word	0x0002d895
   22078:	0002aa75 	.word	0x0002aa75
   2207c:	200028d4 	.word	0x200028d4
   22080:	0002ac34 	.word	0x0002ac34
   22084:	20002894 	.word	0x20002894
   22088:	20001d70 	.word	0x20001d70
   2208c:	200028b4 	.word	0x200028b4

00022090 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   22090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22094:	4605      	mov	r5, r0
   22096:	460e      	mov	r6, r1
   22098:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2209c:	b153      	cbz	r3, 220b4 <z_tick_sleep+0x24>
   2209e:	493a      	ldr	r1, [pc, #232]	; (22188 <z_tick_sleep+0xf8>)
   220a0:	483a      	ldr	r0, [pc, #232]	; (2218c <z_tick_sleep+0xfc>)
   220a2:	f240 5279 	movw	r2, #1401	; 0x579
   220a6:	f004 fa2a 	bl	264fe <assert_print>
   220aa:	4837      	ldr	r0, [pc, #220]	; (22188 <z_tick_sleep+0xf8>)
   220ac:	f240 5179 	movw	r1, #1401	; 0x579
   220b0:	f004 fa1e 	bl	264f0 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   220b4:	ea55 0306 	orrs.w	r3, r5, r6
   220b8:	d103      	bne.n	220c2 <z_tick_sleep+0x32>
	z_impl_k_yield();
   220ba:	f7ff ff65 	bl	21f88 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   220be:	2000      	movs	r0, #0
   220c0:	e05f      	b.n	22182 <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
   220c2:	f06f 0401 	mvn.w	r4, #1
   220c6:	1b64      	subs	r4, r4, r5
   220c8:	f04f 33ff 	mov.w	r3, #4294967295
   220cc:	eb63 0306 	sbc.w	r3, r3, r6
   220d0:	2c01      	cmp	r4, #1
   220d2:	f173 0300 	sbcs.w	r3, r3, #0
   220d6:	da02      	bge.n	220de <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   220d8:	f007 fcc9 	bl	29a6e <sys_clock_tick_get_32>
   220dc:	1944      	adds	r4, r0, r5
   220de:	f04f 0340 	mov.w	r3, #64	; 0x40
   220e2:	f3ef 8811 	mrs	r8, BASEPRI
   220e6:	f383 8812 	msr	BASEPRI_MAX, r3
   220ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   220ee:	4828      	ldr	r0, [pc, #160]	; (22190 <z_tick_sleep+0x100>)
   220f0:	f7fe f94c 	bl	2038c <z_spin_lock_valid>
   220f4:	b940      	cbnz	r0, 22108 <z_tick_sleep+0x78>
   220f6:	4927      	ldr	r1, [pc, #156]	; (22194 <z_tick_sleep+0x104>)
   220f8:	4824      	ldr	r0, [pc, #144]	; (2218c <z_tick_sleep+0xfc>)
   220fa:	228e      	movs	r2, #142	; 0x8e
   220fc:	f004 f9ff 	bl	264fe <assert_print>
   22100:	4824      	ldr	r0, [pc, #144]	; (22194 <z_tick_sleep+0x104>)
   22102:	218e      	movs	r1, #142	; 0x8e
   22104:	f004 f9f4 	bl	264f0 <assert_post_action>
	pending_current = _current;
   22108:	4f23      	ldr	r7, [pc, #140]	; (22198 <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   2210a:	4821      	ldr	r0, [pc, #132]	; (22190 <z_tick_sleep+0x100>)
   2210c:	f7fe f95c 	bl	203c8 <z_spin_lock_set_owner>
   22110:	4b22      	ldr	r3, [pc, #136]	; (2219c <z_tick_sleep+0x10c>)
   22112:	68b8      	ldr	r0, [r7, #8]
   22114:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   22116:	f7ff fced 	bl	21af4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2211a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2211c:	4920      	ldr	r1, [pc, #128]	; (221a0 <z_tick_sleep+0x110>)
   2211e:	462a      	mov	r2, r5
   22120:	4633      	mov	r3, r6
   22122:	3018      	adds	r0, #24
   22124:	f000 f9ea 	bl	224fc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   22128:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2212a:	4819      	ldr	r0, [pc, #100]	; (22190 <z_tick_sleep+0x100>)
   2212c:	7b53      	ldrb	r3, [r2, #13]
   2212e:	f043 0310 	orr.w	r3, r3, #16
   22132:	7353      	strb	r3, [r2, #13]
   22134:	f7fe f938 	bl	203a8 <z_spin_unlock_valid>
   22138:	b940      	cbnz	r0, 2214c <z_tick_sleep+0xbc>
   2213a:	4916      	ldr	r1, [pc, #88]	; (22194 <z_tick_sleep+0x104>)
   2213c:	4813      	ldr	r0, [pc, #76]	; (2218c <z_tick_sleep+0xfc>)
   2213e:	22d0      	movs	r2, #208	; 0xd0
   22140:	f004 f9dd 	bl	264fe <assert_print>
   22144:	4813      	ldr	r0, [pc, #76]	; (22194 <z_tick_sleep+0x104>)
   22146:	21d0      	movs	r1, #208	; 0xd0
   22148:	f004 f9d2 	bl	264f0 <assert_post_action>
   2214c:	4640      	mov	r0, r8
   2214e:	f7f2 f845 	bl	141dc <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   22152:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   22154:	7b5b      	ldrb	r3, [r3, #13]
   22156:	06db      	lsls	r3, r3, #27
   22158:	d50a      	bpl.n	22170 <z_tick_sleep+0xe0>
   2215a:	490b      	ldr	r1, [pc, #44]	; (22188 <z_tick_sleep+0xf8>)
   2215c:	480b      	ldr	r0, [pc, #44]	; (2218c <z_tick_sleep+0xfc>)
   2215e:	f240 529a 	movw	r2, #1434	; 0x59a
   22162:	f004 f9cc 	bl	264fe <assert_print>
   22166:	4808      	ldr	r0, [pc, #32]	; (22188 <z_tick_sleep+0xf8>)
   22168:	f240 519a 	movw	r1, #1434	; 0x59a
   2216c:	f004 f9c0 	bl	264f0 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   22170:	f007 fc7d 	bl	29a6e <sys_clock_tick_get_32>
   22174:	1a20      	subs	r0, r4, r0
   22176:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2217a:	2801      	cmp	r0, #1
   2217c:	f173 0300 	sbcs.w	r3, r3, #0
   22180:	db9d      	blt.n	220be <z_tick_sleep+0x2e>
}
   22182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22186:	bf00      	nop
   22188:	0002d895 	.word	0x0002d895
   2218c:	0002aa75 	.word	0x0002aa75
   22190:	200028d4 	.word	0x200028d4
   22194:	0002ac34 	.word	0x0002ac34
   22198:	20002894 	.word	0x20002894
   2219c:	200028d0 	.word	0x200028d0
   221a0:	00021a65 	.word	0x00021a65

000221a4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   221a4:	b538      	push	{r3, r4, r5, lr}
   221a6:	4605      	mov	r5, r0
   221a8:	460c      	mov	r4, r1
   221aa:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   221ae:	b153      	cbz	r3, 221c6 <z_impl_k_sleep+0x22>
   221b0:	4911      	ldr	r1, [pc, #68]	; (221f8 <z_impl_k_sleep+0x54>)
   221b2:	4812      	ldr	r0, [pc, #72]	; (221fc <z_impl_k_sleep+0x58>)
   221b4:	f240 52a9 	movw	r2, #1449	; 0x5a9
   221b8:	f004 f9a1 	bl	264fe <assert_print>
   221bc:	480e      	ldr	r0, [pc, #56]	; (221f8 <z_impl_k_sleep+0x54>)
   221be:	f240 51a9 	movw	r1, #1449	; 0x5a9
   221c2:	f004 f995 	bl	264f0 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   221c6:	f1b4 3fff 	cmp.w	r4, #4294967295
   221ca:	bf08      	it	eq
   221cc:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   221d0:	d106      	bne.n	221e0 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   221d2:	4b0b      	ldr	r3, [pc, #44]	; (22200 <z_impl_k_sleep+0x5c>)
   221d4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   221d6:	f7ff fdd9 	bl	21d8c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   221da:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   221de:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   221e0:	4628      	mov	r0, r5
   221e2:	4621      	mov	r1, r4
   221e4:	f7ff ff54 	bl	22090 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   221e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   221ec:	fb80 0303 	smull	r0, r3, r0, r3
   221f0:	0bc0      	lsrs	r0, r0, #15
   221f2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   221f6:	e7f2      	b.n	221de <z_impl_k_sleep+0x3a>
   221f8:	0002d895 	.word	0x0002d895
   221fc:	0002aa75 	.word	0x0002aa75
   22200:	20002894 	.word	0x20002894

00022204 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   22204:	4b01      	ldr	r3, [pc, #4]	; (2220c <z_impl_z_current_get+0x8>)
   22206:	6898      	ldr	r0, [r3, #8]
   22208:	4770      	bx	lr
   2220a:	bf00      	nop
   2220c:	20002894 	.word	0x20002894

00022210 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   22210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22214:	4604      	mov	r4, r0
   22216:	f04f 0340 	mov.w	r3, #64	; 0x40
   2221a:	f3ef 8611 	mrs	r6, BASEPRI
   2221e:	f383 8812 	msr	BASEPRI_MAX, r3
   22222:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22226:	4851      	ldr	r0, [pc, #324]	; (2236c <z_thread_abort+0x15c>)
   22228:	f7fe f8b0 	bl	2038c <z_spin_lock_valid>
   2222c:	b940      	cbnz	r0, 22240 <z_thread_abort+0x30>
   2222e:	4950      	ldr	r1, [pc, #320]	; (22370 <z_thread_abort+0x160>)
   22230:	4850      	ldr	r0, [pc, #320]	; (22374 <z_thread_abort+0x164>)
   22232:	228e      	movs	r2, #142	; 0x8e
   22234:	f004 f963 	bl	264fe <assert_print>
   22238:	484d      	ldr	r0, [pc, #308]	; (22370 <z_thread_abort+0x160>)
   2223a:	218e      	movs	r1, #142	; 0x8e
   2223c:	f004 f958 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22240:	484a      	ldr	r0, [pc, #296]	; (2236c <z_thread_abort+0x15c>)
   22242:	f7fe f8c1 	bl	203c8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   22246:	7b23      	ldrb	r3, [r4, #12]
   22248:	07d9      	lsls	r1, r3, #31
   2224a:	d523      	bpl.n	22294 <z_thread_abort+0x84>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2224c:	4847      	ldr	r0, [pc, #284]	; (2236c <z_thread_abort+0x15c>)
   2224e:	f7fe f8ab 	bl	203a8 <z_spin_unlock_valid>
   22252:	b940      	cbnz	r0, 22266 <z_thread_abort+0x56>
   22254:	4946      	ldr	r1, [pc, #280]	; (22370 <z_thread_abort+0x160>)
   22256:	4847      	ldr	r0, [pc, #284]	; (22374 <z_thread_abort+0x164>)
   22258:	22b9      	movs	r2, #185	; 0xb9
   2225a:	f004 f950 	bl	264fe <assert_print>
   2225e:	4844      	ldr	r0, [pc, #272]	; (22370 <z_thread_abort+0x160>)
   22260:	21b9      	movs	r1, #185	; 0xb9
   22262:	f004 f945 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   22266:	f386 8811 	msr	BASEPRI, r6
   2226a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   2226e:	f240 62b5 	movw	r2, #1717	; 0x6b5
   22272:	4941      	ldr	r1, [pc, #260]	; (22378 <z_thread_abort+0x168>)
   22274:	483f      	ldr	r0, [pc, #252]	; (22374 <z_thread_abort+0x164>)
   22276:	f004 f942 	bl	264fe <assert_print>
   2227a:	483f      	ldr	r0, [pc, #252]	; (22378 <z_thread_abort+0x168>)
   2227c:	f240 61b5 	movw	r1, #1717	; 0x6b5
   22280:	f004 f936 	bl	264f0 <assert_post_action>
		k_panic();
   22284:	4040      	eors	r0, r0
   22286:	f380 8811 	msr	BASEPRI, r0
   2228a:	f04f 0004 	mov.w	r0, #4
   2228e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   22290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   22294:	7b63      	ldrb	r3, [r4, #13]
   22296:	071a      	lsls	r2, r3, #28
   22298:	d511      	bpl.n	222be <z_thread_abort+0xae>
   2229a:	4834      	ldr	r0, [pc, #208]	; (2236c <z_thread_abort+0x15c>)
   2229c:	f7fe f884 	bl	203a8 <z_spin_unlock_valid>
   222a0:	b940      	cbnz	r0, 222b4 <z_thread_abort+0xa4>
   222a2:	4933      	ldr	r1, [pc, #204]	; (22370 <z_thread_abort+0x160>)
   222a4:	4833      	ldr	r0, [pc, #204]	; (22374 <z_thread_abort+0x164>)
   222a6:	22b9      	movs	r2, #185	; 0xb9
   222a8:	f004 f929 	bl	264fe <assert_print>
   222ac:	4830      	ldr	r0, [pc, #192]	; (22370 <z_thread_abort+0x160>)
   222ae:	21b9      	movs	r1, #185	; 0xb9
   222b0:	f004 f91e 	bl	264f0 <assert_post_action>
   222b4:	f386 8811 	msr	BASEPRI, r6
   222b8:	f3bf 8f6f 	isb	sy
   222bc:	e7e8      	b.n	22290 <z_thread_abort+0x80>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   222be:	f023 0220 	bic.w	r2, r3, #32
   222c2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   222c6:	09d2      	lsrs	r2, r2, #7
   222c8:	d138      	bne.n	2233c <z_thread_abort+0x12c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   222ca:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   222cc:	68a3      	ldr	r3, [r4, #8]
   222ce:	b113      	cbz	r3, 222d6 <z_thread_abort+0xc6>
			unpend_thread_no_timeout(thread);
   222d0:	4620      	mov	r0, r4
   222d2:	f7ff f9c7 	bl	21664 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   222d6:	f104 0018 	add.w	r0, r4, #24
   222da:	f000 f9bd 	bl	22658 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   222de:	f104 0758 	add.w	r7, r4, #88	; 0x58
   222e2:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   222e6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   222e8:	42bd      	cmp	r5, r7
   222ea:	d000      	beq.n	222ee <z_thread_abort+0xde>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   222ec:	bb85      	cbnz	r5, 22350 <z_thread_abort+0x140>
		update_cache(1);
   222ee:	2001      	movs	r0, #1
   222f0:	f7ff fa10 	bl	21714 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   222f4:	4b21      	ldr	r3, [pc, #132]	; (2237c <z_thread_abort+0x16c>)
   222f6:	689b      	ldr	r3, [r3, #8]
   222f8:	42a3      	cmp	r3, r4
   222fa:	d1ce      	bne.n	2229a <z_thread_abort+0x8a>
   222fc:	f3ef 8305 	mrs	r3, IPSR
   22300:	2b00      	cmp	r3, #0
   22302:	d1ca      	bne.n	2229a <z_thread_abort+0x8a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22304:	4819      	ldr	r0, [pc, #100]	; (2236c <z_thread_abort+0x15c>)
   22306:	f7fe f84f 	bl	203a8 <z_spin_unlock_valid>
   2230a:	b940      	cbnz	r0, 2231e <z_thread_abort+0x10e>
   2230c:	4918      	ldr	r1, [pc, #96]	; (22370 <z_thread_abort+0x160>)
   2230e:	4819      	ldr	r0, [pc, #100]	; (22374 <z_thread_abort+0x164>)
   22310:	22d0      	movs	r2, #208	; 0xd0
   22312:	f004 f8f4 	bl	264fe <assert_print>
   22316:	4816      	ldr	r0, [pc, #88]	; (22370 <z_thread_abort+0x160>)
   22318:	21d0      	movs	r1, #208	; 0xd0
   2231a:	f004 f8e9 	bl	264f0 <assert_post_action>
   2231e:	4630      	mov	r0, r6
   22320:	f7f1 ff5c 	bl	141dc <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   22324:	4914      	ldr	r1, [pc, #80]	; (22378 <z_thread_abort+0x168>)
   22326:	4813      	ldr	r0, [pc, #76]	; (22374 <z_thread_abort+0x164>)
   22328:	f240 62e4 	movw	r2, #1764	; 0x6e4
   2232c:	f004 f8e7 	bl	264fe <assert_print>
   22330:	4811      	ldr	r0, [pc, #68]	; (22378 <z_thread_abort+0x168>)
   22332:	f240 61e4 	movw	r1, #1764	; 0x6e4
   22336:	f004 f8db 	bl	264f0 <assert_post_action>
   2233a:	e7ae      	b.n	2229a <z_thread_abort+0x8a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2233c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   22340:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   22344:	480e      	ldr	r0, [pc, #56]	; (22380 <z_thread_abort+0x170>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22346:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22348:	4621      	mov	r1, r4
   2234a:	f7ff f96d 	bl	21628 <z_priq_dumb_remove>
}
   2234e:	e7bd      	b.n	222cc <z_thread_abort+0xbc>
		unpend_thread_no_timeout(thread);
   22350:	4628      	mov	r0, r5
   22352:	f7ff f987 	bl	21664 <unpend_thread_no_timeout>
   22356:	f105 0018 	add.w	r0, r5, #24
   2235a:	f000 f97d 	bl	22658 <z_abort_timeout>
   2235e:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   22362:	4628      	mov	r0, r5
   22364:	f7ff fabc 	bl	218e0 <ready_thread>
   22368:	e7bd      	b.n	222e6 <z_thread_abort+0xd6>
   2236a:	bf00      	nop
   2236c:	200028d4 	.word	0x200028d4
   22370:	0002ac34 	.word	0x0002ac34
   22374:	0002aa75 	.word	0x0002aa75
   22378:	0002d895 	.word	0x0002d895
   2237c:	20002894 	.word	0x20002894
   22380:	200028b4 	.word	0x200028b4

00022384 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   22384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22386:	4604      	mov	r4, r0
   22388:	460e      	mov	r6, r1
   2238a:	4615      	mov	r5, r2
	__asm__ volatile(
   2238c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22390:	f3ef 8711 	mrs	r7, BASEPRI
   22394:	f383 8812 	msr	BASEPRI_MAX, r3
   22398:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2239c:	4819      	ldr	r0, [pc, #100]	; (22404 <z_sched_wake+0x80>)
   2239e:	f7fd fff5 	bl	2038c <z_spin_lock_valid>
   223a2:	b940      	cbnz	r0, 223b6 <z_sched_wake+0x32>
   223a4:	4918      	ldr	r1, [pc, #96]	; (22408 <z_sched_wake+0x84>)
   223a6:	4819      	ldr	r0, [pc, #100]	; (2240c <z_sched_wake+0x88>)
   223a8:	228e      	movs	r2, #142	; 0x8e
   223aa:	f004 f8a8 	bl	264fe <assert_print>
   223ae:	4816      	ldr	r0, [pc, #88]	; (22408 <z_sched_wake+0x84>)
   223b0:	218e      	movs	r1, #142	; 0x8e
   223b2:	f004 f89d 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   223b6:	4813      	ldr	r0, [pc, #76]	; (22404 <z_sched_wake+0x80>)
   223b8:	f7fe f806 	bl	203c8 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   223bc:	4620      	mov	r0, r4
   223be:	f007 fb40 	bl	29a42 <z_priq_dumb_best>

		if (thread != NULL) {
   223c2:	4604      	mov	r4, r0
   223c4:	b158      	cbz	r0, 223de <z_sched_wake+0x5a>
   223c6:	67c6      	str	r6, [r0, #124]	; 0x7c
   223c8:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   223ca:	f7ff f94b 	bl	21664 <unpend_thread_no_timeout>
   223ce:	f104 0018 	add.w	r0, r4, #24
   223d2:	f000 f941 	bl	22658 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   223d6:	4620      	mov	r0, r4
   223d8:	f7ff fa82 	bl	218e0 <ready_thread>
			ret = true;
   223dc:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223de:	4809      	ldr	r0, [pc, #36]	; (22404 <z_sched_wake+0x80>)
   223e0:	f7fd ffe2 	bl	203a8 <z_spin_unlock_valid>
   223e4:	b940      	cbnz	r0, 223f8 <z_sched_wake+0x74>
   223e6:	4908      	ldr	r1, [pc, #32]	; (22408 <z_sched_wake+0x84>)
   223e8:	4808      	ldr	r0, [pc, #32]	; (2240c <z_sched_wake+0x88>)
   223ea:	22b9      	movs	r2, #185	; 0xb9
   223ec:	f004 f887 	bl	264fe <assert_print>
   223f0:	4805      	ldr	r0, [pc, #20]	; (22408 <z_sched_wake+0x84>)
   223f2:	21b9      	movs	r1, #185	; 0xb9
   223f4:	f004 f87c 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   223f8:	f387 8811 	msr	BASEPRI, r7
   223fc:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   22400:	4620      	mov	r0, r4
   22402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22404:	200028d4 	.word	0x200028d4
   22408:	0002ac34 	.word	0x0002ac34
   2240c:	0002aa75 	.word	0x0002aa75

00022410 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   22410:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22412:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   22416:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22418:	e9cd 6700 	strd	r6, r7, [sp]
   2241c:	f7ff fc0e 	bl	21c3c <z_pend_curr>

	if (data != NULL) {
   22420:	b11c      	cbz	r4, 2242a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   22422:	4b03      	ldr	r3, [pc, #12]	; (22430 <z_sched_wait+0x20>)
   22424:	689b      	ldr	r3, [r3, #8]
   22426:	695b      	ldr	r3, [r3, #20]
   22428:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2242a:	b002      	add	sp, #8
   2242c:	bdd0      	pop	{r4, r6, r7, pc}
   2242e:	bf00      	nop
   22430:	20002894 	.word	0x20002894

00022434 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   22434:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   22436:	4806      	ldr	r0, [pc, #24]	; (22450 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   22438:	4a06      	ldr	r2, [pc, #24]	; (22454 <z_data_copy+0x20>)
   2243a:	4907      	ldr	r1, [pc, #28]	; (22458 <z_data_copy+0x24>)
   2243c:	1a12      	subs	r2, r2, r0
   2243e:	f007 f9f6 	bl	2982e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   22446:	4a05      	ldr	r2, [pc, #20]	; (2245c <z_data_copy+0x28>)
   22448:	4905      	ldr	r1, [pc, #20]	; (22460 <z_data_copy+0x2c>)
   2244a:	4806      	ldr	r0, [pc, #24]	; (22464 <z_data_copy+0x30>)
   2244c:	f007 b9ef 	b.w	2982e <z_early_memcpy>
   22450:	20000000 	.word	0x20000000
   22454:	20000a28 	.word	0x20000a28
   22458:	0002d958 	.word	0x0002d958
   2245c:	00000000 	.word	0x00000000
   22460:	0002d958 	.word	0x0002d958
   22464:	20000000 	.word	0x20000000

00022468 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22468:	4b03      	ldr	r3, [pc, #12]	; (22478 <elapsed+0x10>)
   2246a:	681b      	ldr	r3, [r3, #0]
   2246c:	b90b      	cbnz	r3, 22472 <elapsed+0xa>
   2246e:	f7fb bc7d 	b.w	1dd6c <sys_clock_elapsed>
}
   22472:	2000      	movs	r0, #0
   22474:	4770      	bx	lr
   22476:	bf00      	nop
   22478:	200028e0 	.word	0x200028e0

0002247c <next_timeout>:
	return list->head == list;
   2247c:	4b10      	ldr	r3, [pc, #64]	; (224c0 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   2247e:	b510      	push	{r4, lr}
   22480:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22482:	429c      	cmp	r4, r3
   22484:	bf08      	it	eq
   22486:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   22488:	f7ff ffee 	bl	22468 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   2248c:	b1a4      	cbz	r4, 224b8 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2248e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   22492:	1a1b      	subs	r3, r3, r0
   22494:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   22498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2249c:	f170 0200 	sbcs.w	r2, r0, #0
   224a0:	da0a      	bge.n	224b8 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   224a2:	2800      	cmp	r0, #0
   224a4:	bfac      	ite	ge
   224a6:	4618      	movge	r0, r3
   224a8:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   224aa:	4b06      	ldr	r3, [pc, #24]	; (224c4 <next_timeout+0x48>)
   224ac:	691b      	ldr	r3, [r3, #16]
   224ae:	b113      	cbz	r3, 224b6 <next_timeout+0x3a>
   224b0:	4298      	cmp	r0, r3
   224b2:	bfa8      	it	ge
   224b4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   224b6:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   224b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   224bc:	e7f5      	b.n	224aa <next_timeout+0x2e>
   224be:	bf00      	nop
   224c0:	2000067c 	.word	0x2000067c
   224c4:	20002894 	.word	0x20002894

000224c8 <remove_timeout>:
{
   224c8:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   224ca:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   224cc:	b168      	cbz	r0, 224ea <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   224ce:	4a0a      	ldr	r2, [pc, #40]	; (224f8 <remove_timeout+0x30>)
   224d0:	6852      	ldr	r2, [r2, #4]
   224d2:	4290      	cmp	r0, r2
   224d4:	d009      	beq.n	224ea <remove_timeout+0x22>
	if (next(t) != NULL) {
   224d6:	b143      	cbz	r3, 224ea <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   224d8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   224dc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   224e0:	1912      	adds	r2, r2, r4
   224e2:	eb41 0105 	adc.w	r1, r1, r5
   224e6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   224ea:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   224ec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   224ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   224f0:	2300      	movs	r3, #0
	node->prev = NULL;
   224f2:	e9c0 3300 	strd	r3, r3, [r0]
}
   224f6:	bd30      	pop	{r4, r5, pc}
   224f8:	2000067c 	.word	0x2000067c

000224fc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   224fc:	f1b3 3fff 	cmp.w	r3, #4294967295
   22500:	bf08      	it	eq
   22502:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   22506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2250a:	4604      	mov	r4, r0
   2250c:	460e      	mov	r6, r1
   2250e:	4698      	mov	r8, r3
   22510:	4615      	mov	r5, r2
   22512:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22514:	f000 8090 	beq.w	22638 <z_add_timeout+0x13c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   22518:	6803      	ldr	r3, [r0, #0]
   2251a:	b143      	cbz	r3, 2252e <z_add_timeout+0x32>
   2251c:	4947      	ldr	r1, [pc, #284]	; (2263c <z_add_timeout+0x140>)
   2251e:	4848      	ldr	r0, [pc, #288]	; (22640 <z_add_timeout+0x144>)
   22520:	2263      	movs	r2, #99	; 0x63
   22522:	f003 ffec 	bl	264fe <assert_print>
   22526:	4845      	ldr	r0, [pc, #276]	; (2263c <z_add_timeout+0x140>)
   22528:	2163      	movs	r1, #99	; 0x63
   2252a:	f003 ffe1 	bl	264f0 <assert_post_action>
	to->fn = fn;
   2252e:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   22530:	f04f 0340 	mov.w	r3, #64	; 0x40
   22534:	f3ef 8611 	mrs	r6, BASEPRI
   22538:	f383 8812 	msr	BASEPRI_MAX, r3
   2253c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22540:	4840      	ldr	r0, [pc, #256]	; (22644 <z_add_timeout+0x148>)
   22542:	f7fd ff23 	bl	2038c <z_spin_lock_valid>
   22546:	b940      	cbnz	r0, 2255a <z_add_timeout+0x5e>
   22548:	493f      	ldr	r1, [pc, #252]	; (22648 <z_add_timeout+0x14c>)
   2254a:	483d      	ldr	r0, [pc, #244]	; (22640 <z_add_timeout+0x144>)
   2254c:	228e      	movs	r2, #142	; 0x8e
   2254e:	f003 ffd6 	bl	264fe <assert_print>
   22552:	483d      	ldr	r0, [pc, #244]	; (22648 <z_add_timeout+0x14c>)
   22554:	218e      	movs	r1, #142	; 0x8e
   22556:	f003 ffcb 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2255a:	483a      	ldr	r0, [pc, #232]	; (22644 <z_add_timeout+0x148>)
   2255c:	f7fd ff34 	bl	203c8 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   22560:	f06f 0201 	mvn.w	r2, #1
   22564:	1b53      	subs	r3, r2, r5
   22566:	f04f 30ff 	mov.w	r0, #4294967295
   2256a:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2256e:	2b00      	cmp	r3, #0
   22570:	db1b      	blt.n	225aa <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   22572:	4b36      	ldr	r3, [pc, #216]	; (2264c <z_add_timeout+0x150>)
   22574:	e9d3 1300 	ldrd	r1, r3, [r3]
   22578:	1a52      	subs	r2, r2, r1
   2257a:	eb60 0303 	sbc.w	r3, r0, r3
   2257e:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   22580:	eb63 0707 	sbc.w	r7, r3, r7
   22584:	2d01      	cmp	r5, #1
   22586:	f177 0300 	sbcs.w	r3, r7, #0
   2258a:	bfbc      	itt	lt
   2258c:	2501      	movlt	r5, #1
   2258e:	2700      	movlt	r7, #0
   22590:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   22594:	4a2e      	ldr	r2, [pc, #184]	; (22650 <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
   22596:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2259a:	4293      	cmp	r3, r2
   2259c:	d118      	bne.n	225d0 <z_add_timeout+0xd4>
	node->prev = tail;
   2259e:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   225a2:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   225a6:	6054      	str	r4, [r2, #4]
}
   225a8:	e026      	b.n	225f8 <z_add_timeout+0xfc>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   225aa:	f7ff ff5d 	bl	22468 <elapsed>
   225ae:	3501      	adds	r5, #1
   225b0:	f148 0800 	adc.w	r8, r8, #0
   225b4:	182d      	adds	r5, r5, r0
   225b6:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   225ba:	e9c4 5004 	strd	r5, r0, [r4, #16]
   225be:	e7e9      	b.n	22594 <z_add_timeout+0x98>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   225c0:	1a09      	subs	r1, r1, r0
   225c2:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   225c6:	459c      	cmp	ip, r3
   225c8:	e9c4 1504 	strd	r1, r5, [r4, #16]
   225cc:	d0e7      	beq.n	2259e <z_add_timeout+0xa2>
   225ce:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   225d0:	2b00      	cmp	r3, #0
   225d2:	d0e4      	beq.n	2259e <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   225d4:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   225d8:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   225dc:	4281      	cmp	r1, r0
   225de:	eb75 0e07 	sbcs.w	lr, r5, r7
   225e2:	daed      	bge.n	225c0 <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
   225e4:	1a41      	subs	r1, r0, r1
   225e6:	eb67 0505 	sbc.w	r5, r7, r5
   225ea:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   225ee:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   225f0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   225f4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   225f6:	605c      	str	r4, [r3, #4]
	return list->head == list;
   225f8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   225fa:	4293      	cmp	r3, r2
   225fc:	d00b      	beq.n	22616 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   225fe:	429c      	cmp	r4, r3
   22600:	d109      	bne.n	22616 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   22602:	f7ff ff3b 	bl	2247c <next_timeout>

			if (next_time == 0 ||
   22606:	b118      	cbz	r0, 22610 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   22608:	4b12      	ldr	r3, [pc, #72]	; (22654 <z_add_timeout+0x158>)
			if (next_time == 0 ||
   2260a:	691b      	ldr	r3, [r3, #16]
   2260c:	4283      	cmp	r3, r0
   2260e:	d002      	beq.n	22616 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   22610:	2100      	movs	r1, #0
   22612:	f7fb fb79 	bl	1dd08 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22616:	480b      	ldr	r0, [pc, #44]	; (22644 <z_add_timeout+0x148>)
   22618:	f7fd fec6 	bl	203a8 <z_spin_unlock_valid>
   2261c:	b940      	cbnz	r0, 22630 <z_add_timeout+0x134>
   2261e:	490a      	ldr	r1, [pc, #40]	; (22648 <z_add_timeout+0x14c>)
   22620:	4807      	ldr	r0, [pc, #28]	; (22640 <z_add_timeout+0x144>)
   22622:	22b9      	movs	r2, #185	; 0xb9
   22624:	f003 ff6b 	bl	264fe <assert_print>
   22628:	4807      	ldr	r0, [pc, #28]	; (22648 <z_add_timeout+0x14c>)
   2262a:	21b9      	movs	r1, #185	; 0xb9
   2262c:	f003 ff60 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   22630:	f386 8811 	msr	BASEPRI, r6
   22634:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   22638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2263c:	0002d8b7 	.word	0x0002d8b7
   22640:	0002aa75 	.word	0x0002aa75
   22644:	200028e4 	.word	0x200028e4
   22648:	0002ac34 	.word	0x0002ac34
   2264c:	20001f10 	.word	0x20001f10
   22650:	2000067c 	.word	0x2000067c
   22654:	20002894 	.word	0x20002894

00022658 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   22658:	b538      	push	{r3, r4, r5, lr}
   2265a:	4604      	mov	r4, r0
	__asm__ volatile(
   2265c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22660:	f3ef 8511 	mrs	r5, BASEPRI
   22664:	f383 8812 	msr	BASEPRI_MAX, r3
   22668:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2266c:	4815      	ldr	r0, [pc, #84]	; (226c4 <z_abort_timeout+0x6c>)
   2266e:	f7fd fe8d 	bl	2038c <z_spin_lock_valid>
   22672:	b940      	cbnz	r0, 22686 <z_abort_timeout+0x2e>
   22674:	4914      	ldr	r1, [pc, #80]	; (226c8 <z_abort_timeout+0x70>)
   22676:	4815      	ldr	r0, [pc, #84]	; (226cc <z_abort_timeout+0x74>)
   22678:	228e      	movs	r2, #142	; 0x8e
   2267a:	f003 ff40 	bl	264fe <assert_print>
   2267e:	4812      	ldr	r0, [pc, #72]	; (226c8 <z_abort_timeout+0x70>)
   22680:	218e      	movs	r1, #142	; 0x8e
   22682:	f003 ff35 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22686:	480f      	ldr	r0, [pc, #60]	; (226c4 <z_abort_timeout+0x6c>)
   22688:	f7fd fe9e 	bl	203c8 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2268c:	6823      	ldr	r3, [r4, #0]
   2268e:	b1b3      	cbz	r3, 226be <z_abort_timeout+0x66>
			remove_timeout(to);
   22690:	4620      	mov	r0, r4
   22692:	f7ff ff19 	bl	224c8 <remove_timeout>
			ret = 0;
   22696:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22698:	480a      	ldr	r0, [pc, #40]	; (226c4 <z_abort_timeout+0x6c>)
   2269a:	f7fd fe85 	bl	203a8 <z_spin_unlock_valid>
   2269e:	b940      	cbnz	r0, 226b2 <z_abort_timeout+0x5a>
   226a0:	4909      	ldr	r1, [pc, #36]	; (226c8 <z_abort_timeout+0x70>)
   226a2:	480a      	ldr	r0, [pc, #40]	; (226cc <z_abort_timeout+0x74>)
   226a4:	22b9      	movs	r2, #185	; 0xb9
   226a6:	f003 ff2a 	bl	264fe <assert_print>
   226aa:	4807      	ldr	r0, [pc, #28]	; (226c8 <z_abort_timeout+0x70>)
   226ac:	21b9      	movs	r1, #185	; 0xb9
   226ae:	f003 ff1f 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   226b2:	f385 8811 	msr	BASEPRI, r5
   226b6:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   226ba:	4620      	mov	r0, r4
   226bc:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   226be:	f06f 0415 	mvn.w	r4, #21
   226c2:	e7e9      	b.n	22698 <z_abort_timeout+0x40>
   226c4:	200028e4 	.word	0x200028e4
   226c8:	0002ac34 	.word	0x0002ac34
   226cc:	0002aa75 	.word	0x0002aa75

000226d0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   226d0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   226d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   226d6:	f3ef 8511 	mrs	r5, BASEPRI
   226da:	f383 8812 	msr	BASEPRI_MAX, r3
   226de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226e2:	4813      	ldr	r0, [pc, #76]	; (22730 <z_get_next_timeout_expiry+0x60>)
   226e4:	f7fd fe52 	bl	2038c <z_spin_lock_valid>
   226e8:	b940      	cbnz	r0, 226fc <z_get_next_timeout_expiry+0x2c>
   226ea:	4912      	ldr	r1, [pc, #72]	; (22734 <z_get_next_timeout_expiry+0x64>)
   226ec:	4812      	ldr	r0, [pc, #72]	; (22738 <z_get_next_timeout_expiry+0x68>)
   226ee:	228e      	movs	r2, #142	; 0x8e
   226f0:	f003 ff05 	bl	264fe <assert_print>
   226f4:	480f      	ldr	r0, [pc, #60]	; (22734 <z_get_next_timeout_expiry+0x64>)
   226f6:	218e      	movs	r1, #142	; 0x8e
   226f8:	f003 fefa 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   226fc:	480c      	ldr	r0, [pc, #48]	; (22730 <z_get_next_timeout_expiry+0x60>)
   226fe:	f7fd fe63 	bl	203c8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   22702:	f7ff febb 	bl	2247c <next_timeout>
   22706:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22708:	4809      	ldr	r0, [pc, #36]	; (22730 <z_get_next_timeout_expiry+0x60>)
   2270a:	f7fd fe4d 	bl	203a8 <z_spin_unlock_valid>
   2270e:	b940      	cbnz	r0, 22722 <z_get_next_timeout_expiry+0x52>
   22710:	4908      	ldr	r1, [pc, #32]	; (22734 <z_get_next_timeout_expiry+0x64>)
   22712:	4809      	ldr	r0, [pc, #36]	; (22738 <z_get_next_timeout_expiry+0x68>)
   22714:	22b9      	movs	r2, #185	; 0xb9
   22716:	f003 fef2 	bl	264fe <assert_print>
   2271a:	4806      	ldr	r0, [pc, #24]	; (22734 <z_get_next_timeout_expiry+0x64>)
   2271c:	21b9      	movs	r1, #185	; 0xb9
   2271e:	f003 fee7 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   22722:	f385 8811 	msr	BASEPRI, r5
   22726:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2272a:	4620      	mov	r0, r4
   2272c:	bd38      	pop	{r3, r4, r5, pc}
   2272e:	bf00      	nop
   22730:	200028e4 	.word	0x200028e4
   22734:	0002ac34 	.word	0x0002ac34
   22738:	0002aa75 	.word	0x0002aa75

0002273c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   2273c:	b570      	push	{r4, r5, r6, lr}
   2273e:	4604      	mov	r4, r0
   22740:	460d      	mov	r5, r1
	__asm__ volatile(
   22742:	f04f 0340 	mov.w	r3, #64	; 0x40
   22746:	f3ef 8611 	mrs	r6, BASEPRI
   2274a:	f383 8812 	msr	BASEPRI_MAX, r3
   2274e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22752:	4816      	ldr	r0, [pc, #88]	; (227ac <z_set_timeout_expiry+0x70>)
   22754:	f7fd fe1a 	bl	2038c <z_spin_lock_valid>
   22758:	b940      	cbnz	r0, 2276c <z_set_timeout_expiry+0x30>
   2275a:	4915      	ldr	r1, [pc, #84]	; (227b0 <z_set_timeout_expiry+0x74>)
   2275c:	4815      	ldr	r0, [pc, #84]	; (227b4 <z_set_timeout_expiry+0x78>)
   2275e:	228e      	movs	r2, #142	; 0x8e
   22760:	f003 fecd 	bl	264fe <assert_print>
   22764:	4812      	ldr	r0, [pc, #72]	; (227b0 <z_set_timeout_expiry+0x74>)
   22766:	218e      	movs	r1, #142	; 0x8e
   22768:	f003 fec2 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2276c:	480f      	ldr	r0, [pc, #60]	; (227ac <z_set_timeout_expiry+0x70>)
   2276e:	f7fd fe2b 	bl	203c8 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   22772:	f7ff fe83 	bl	2247c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   22776:	2801      	cmp	r0, #1
   22778:	dd05      	ble.n	22786 <z_set_timeout_expiry+0x4a>
   2277a:	42a0      	cmp	r0, r4
   2277c:	db03      	blt.n	22786 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2277e:	4629      	mov	r1, r5
   22780:	4620      	mov	r0, r4
   22782:	f7fb fac1 	bl	1dd08 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22786:	4809      	ldr	r0, [pc, #36]	; (227ac <z_set_timeout_expiry+0x70>)
   22788:	f7fd fe0e 	bl	203a8 <z_spin_unlock_valid>
   2278c:	b940      	cbnz	r0, 227a0 <z_set_timeout_expiry+0x64>
   2278e:	4908      	ldr	r1, [pc, #32]	; (227b0 <z_set_timeout_expiry+0x74>)
   22790:	4808      	ldr	r0, [pc, #32]	; (227b4 <z_set_timeout_expiry+0x78>)
   22792:	22b9      	movs	r2, #185	; 0xb9
   22794:	f003 feb3 	bl	264fe <assert_print>
   22798:	4805      	ldr	r0, [pc, #20]	; (227b0 <z_set_timeout_expiry+0x74>)
   2279a:	21b9      	movs	r1, #185	; 0xb9
   2279c:	f003 fea8 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   227a0:	f386 8811 	msr	BASEPRI, r6
   227a4:	f3bf 8f6f 	isb	sy
		}
	}
}
   227a8:	bd70      	pop	{r4, r5, r6, pc}
   227aa:	bf00      	nop
   227ac:	200028e4 	.word	0x200028e4
   227b0:	0002ac34 	.word	0x0002ac34
   227b4:	0002aa75 	.word	0x0002aa75

000227b8 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   227b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   227bc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   227be:	f7ff f829 	bl	21814 <z_time_slice>
	__asm__ volatile(
   227c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   227c6:	f3ef 8611 	mrs	r6, BASEPRI
   227ca:	f383 8812 	msr	BASEPRI_MAX, r3
   227ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227d2:	4845      	ldr	r0, [pc, #276]	; (228e8 <sys_clock_announce+0x130>)
   227d4:	f7fd fdda 	bl	2038c <z_spin_lock_valid>
   227d8:	b940      	cbnz	r0, 227ec <sys_clock_announce+0x34>
   227da:	4944      	ldr	r1, [pc, #272]	; (228ec <sys_clock_announce+0x134>)
   227dc:	4844      	ldr	r0, [pc, #272]	; (228f0 <sys_clock_announce+0x138>)
   227de:	228e      	movs	r2, #142	; 0x8e
   227e0:	f003 fe8d 	bl	264fe <assert_print>
   227e4:	4841      	ldr	r0, [pc, #260]	; (228ec <sys_clock_announce+0x134>)
   227e6:	218e      	movs	r1, #142	; 0x8e
   227e8:	f003 fe82 	bl	264f0 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   227ec:	f8df 8104 	ldr.w	r8, [pc, #260]	; 228f4 <sys_clock_announce+0x13c>
	z_spin_lock_set_owner(l);
   227f0:	483d      	ldr	r0, [pc, #244]	; (228e8 <sys_clock_announce+0x130>)
	return list->head == list;
   227f2:	f8df 9104 	ldr.w	r9, [pc, #260]	; 228f8 <sys_clock_announce+0x140>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   227f6:	4f41      	ldr	r7, [pc, #260]	; (228fc <sys_clock_announce+0x144>)
   227f8:	f7fd fde6 	bl	203c8 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   227fc:	f8c8 4000 	str.w	r4, [r8]
   22800:	f8d9 4000 	ldr.w	r4, [r9]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   22804:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22808:	454c      	cmp	r4, r9
		curr_tick += dt;
   2280a:	e9d7 2c00 	ldrd	r2, ip, [r7]
   2280e:	ea4f 71e3 	mov.w	r1, r3, asr #31
   22812:	d00b      	beq.n	2282c <sys_clock_announce+0x74>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   22814:	b154      	cbz	r4, 2282c <sys_clock_announce+0x74>
   22816:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
   2281a:	42ab      	cmp	r3, r5
   2281c:	eb71 0e00 	sbcs.w	lr, r1, r0
   22820:	da24      	bge.n	2286c <sys_clock_announce+0xb4>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   22822:	1aed      	subs	r5, r5, r3
   22824:	eb60 0001 	sbc.w	r0, r0, r1
   22828:	e9c4 5004 	strd	r5, r0, [r4, #16]
	}

	curr_tick += announce_remaining;
   2282c:	189b      	adds	r3, r3, r2
   2282e:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
   22832:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   22834:	e9c7 3100 	strd	r3, r1, [r7]
	announce_remaining = 0;
   22838:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   2283c:	f7ff fe1e 	bl	2247c <next_timeout>
   22840:	4621      	mov	r1, r4
   22842:	f7fb fa61 	bl	1dd08 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22846:	4828      	ldr	r0, [pc, #160]	; (228e8 <sys_clock_announce+0x130>)
   22848:	f7fd fdae 	bl	203a8 <z_spin_unlock_valid>
   2284c:	b940      	cbnz	r0, 22860 <sys_clock_announce+0xa8>
   2284e:	4927      	ldr	r1, [pc, #156]	; (228ec <sys_clock_announce+0x134>)
   22850:	4827      	ldr	r0, [pc, #156]	; (228f0 <sys_clock_announce+0x138>)
   22852:	22b9      	movs	r2, #185	; 0xb9
   22854:	f003 fe53 	bl	264fe <assert_print>
   22858:	4824      	ldr	r0, [pc, #144]	; (228ec <sys_clock_announce+0x134>)
   2285a:	21b9      	movs	r1, #185	; 0xb9
   2285c:	f003 fe48 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   22860:	f386 8811 	msr	BASEPRI, r6
   22864:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   22868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2286c:	18aa      	adds	r2, r5, r2
   2286e:	eb4c 71e5 	adc.w	r1, ip, r5, asr #31
   22872:	e9c7 2100 	strd	r2, r1, [r7]
		t->dticks = 0;
   22876:	2300      	movs	r3, #0
   22878:	2200      	movs	r2, #0
		remove_timeout(t);
   2287a:	4620      	mov	r0, r4
		t->dticks = 0;
   2287c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   22880:	f7ff fe22 	bl	224c8 <remove_timeout>
   22884:	4818      	ldr	r0, [pc, #96]	; (228e8 <sys_clock_announce+0x130>)
   22886:	f7fd fd8f 	bl	203a8 <z_spin_unlock_valid>
   2288a:	b940      	cbnz	r0, 2289e <sys_clock_announce+0xe6>
   2288c:	4917      	ldr	r1, [pc, #92]	; (228ec <sys_clock_announce+0x134>)
   2288e:	4818      	ldr	r0, [pc, #96]	; (228f0 <sys_clock_announce+0x138>)
   22890:	22b9      	movs	r2, #185	; 0xb9
   22892:	f003 fe34 	bl	264fe <assert_print>
   22896:	4815      	ldr	r0, [pc, #84]	; (228ec <sys_clock_announce+0x134>)
   22898:	21b9      	movs	r1, #185	; 0xb9
   2289a:	f003 fe29 	bl	264f0 <assert_post_action>
   2289e:	f386 8811 	msr	BASEPRI, r6
   228a2:	f3bf 8f6f 	isb	sy
		t->fn(t);
   228a6:	68a3      	ldr	r3, [r4, #8]
   228a8:	4620      	mov	r0, r4
   228aa:	4798      	blx	r3
	__asm__ volatile(
   228ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   228b0:	f3ef 8611 	mrs	r6, BASEPRI
   228b4:	f383 8812 	msr	BASEPRI_MAX, r3
   228b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228bc:	480a      	ldr	r0, [pc, #40]	; (228e8 <sys_clock_announce+0x130>)
   228be:	f7fd fd65 	bl	2038c <z_spin_lock_valid>
   228c2:	b940      	cbnz	r0, 228d6 <sys_clock_announce+0x11e>
   228c4:	4909      	ldr	r1, [pc, #36]	; (228ec <sys_clock_announce+0x134>)
   228c6:	480a      	ldr	r0, [pc, #40]	; (228f0 <sys_clock_announce+0x138>)
   228c8:	228e      	movs	r2, #142	; 0x8e
   228ca:	f003 fe18 	bl	264fe <assert_print>
   228ce:	4807      	ldr	r0, [pc, #28]	; (228ec <sys_clock_announce+0x134>)
   228d0:	218e      	movs	r1, #142	; 0x8e
   228d2:	f003 fe0d 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   228d6:	4804      	ldr	r0, [pc, #16]	; (228e8 <sys_clock_announce+0x130>)
   228d8:	f7fd fd76 	bl	203c8 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   228dc:	f8d8 3000 	ldr.w	r3, [r8]
   228e0:	1b5b      	subs	r3, r3, r5
   228e2:	f8c8 3000 	str.w	r3, [r8]
   228e6:	e78b      	b.n	22800 <sys_clock_announce+0x48>
   228e8:	200028e4 	.word	0x200028e4
   228ec:	0002ac34 	.word	0x0002ac34
   228f0:	0002aa75 	.word	0x0002aa75
   228f4:	200028e0 	.word	0x200028e0
   228f8:	2000067c 	.word	0x2000067c
   228fc:	20001f10 	.word	0x20001f10

00022900 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   22900:	b570      	push	{r4, r5, r6, lr}
   22902:	f04f 0340 	mov.w	r3, #64	; 0x40
   22906:	f3ef 8611 	mrs	r6, BASEPRI
   2290a:	f383 8812 	msr	BASEPRI_MAX, r3
   2290e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22912:	4816      	ldr	r0, [pc, #88]	; (2296c <sys_clock_tick_get+0x6c>)
   22914:	f7fd fd3a 	bl	2038c <z_spin_lock_valid>
   22918:	b940      	cbnz	r0, 2292c <sys_clock_tick_get+0x2c>
   2291a:	4915      	ldr	r1, [pc, #84]	; (22970 <sys_clock_tick_get+0x70>)
   2291c:	4815      	ldr	r0, [pc, #84]	; (22974 <sys_clock_tick_get+0x74>)
   2291e:	228e      	movs	r2, #142	; 0x8e
   22920:	f003 fded 	bl	264fe <assert_print>
   22924:	4812      	ldr	r0, [pc, #72]	; (22970 <sys_clock_tick_get+0x70>)
   22926:	218e      	movs	r1, #142	; 0x8e
   22928:	f003 fde2 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2292c:	480f      	ldr	r0, [pc, #60]	; (2296c <sys_clock_tick_get+0x6c>)
   2292e:	f7fd fd4b 	bl	203c8 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   22932:	f7ff fd99 	bl	22468 <elapsed>
   22936:	4a10      	ldr	r2, [pc, #64]	; (22978 <sys_clock_tick_get+0x78>)
   22938:	e9d2 4500 	ldrd	r4, r5, [r2]
   2293c:	1904      	adds	r4, r0, r4
   2293e:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22942:	480a      	ldr	r0, [pc, #40]	; (2296c <sys_clock_tick_get+0x6c>)
   22944:	f7fd fd30 	bl	203a8 <z_spin_unlock_valid>
   22948:	b940      	cbnz	r0, 2295c <sys_clock_tick_get+0x5c>
   2294a:	4909      	ldr	r1, [pc, #36]	; (22970 <sys_clock_tick_get+0x70>)
   2294c:	4809      	ldr	r0, [pc, #36]	; (22974 <sys_clock_tick_get+0x74>)
   2294e:	22b9      	movs	r2, #185	; 0xb9
   22950:	f003 fdd5 	bl	264fe <assert_print>
   22954:	4806      	ldr	r0, [pc, #24]	; (22970 <sys_clock_tick_get+0x70>)
   22956:	21b9      	movs	r1, #185	; 0xb9
   22958:	f003 fdca 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   2295c:	f386 8811 	msr	BASEPRI, r6
   22960:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22964:	4620      	mov	r0, r4
   22966:	4629      	mov	r1, r5
   22968:	bd70      	pop	{r4, r5, r6, pc}
   2296a:	bf00      	nop
   2296c:	200028e4 	.word	0x200028e4
   22970:	0002ac34 	.word	0x0002ac34
   22974:	0002aa75 	.word	0x0002aa75
   22978:	20001f10 	.word	0x20001f10

0002297c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   2297c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   22980:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22982:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 22b4c <register_events+0x1d0>
   22986:	4f72      	ldr	r7, [pc, #456]	; (22b50 <register_events+0x1d4>)
   22988:	4d72      	ldr	r5, [pc, #456]	; (22b54 <register_events+0x1d8>)
{
   2298a:	9100      	str	r1, [sp, #0]
   2298c:	4614      	mov	r4, r2
   2298e:	9301      	str	r3, [sp, #4]
   22990:	4681      	mov	r9, r0
	int events_registered = 0;
   22992:	46b0      	mov	r8, r6
	for (int ii = 0; ii < num_events; ii++) {
   22994:	9b00      	ldr	r3, [sp, #0]
   22996:	429e      	cmp	r6, r3
   22998:	db03      	blt.n	229a2 <register_events+0x26>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   2299a:	4640      	mov	r0, r8
   2299c:	b003      	add	sp, #12
   2299e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   229a2:	f04f 0240 	mov.w	r2, #64	; 0x40
   229a6:	f3ef 8b11 	mrs	fp, BASEPRI
   229aa:	f382 8812 	msr	BASEPRI_MAX, r2
   229ae:	f3bf 8f6f 	isb	sy
   229b2:	4650      	mov	r0, sl
   229b4:	f7fd fcea 	bl	2038c <z_spin_lock_valid>
   229b8:	b940      	cbnz	r0, 229cc <register_events+0x50>
   229ba:	4639      	mov	r1, r7
   229bc:	4628      	mov	r0, r5
   229be:	228e      	movs	r2, #142	; 0x8e
   229c0:	f003 fd9d 	bl	264fe <assert_print>
   229c4:	218e      	movs	r1, #142	; 0x8e
   229c6:	4638      	mov	r0, r7
   229c8:	f003 fd92 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   229cc:	4650      	mov	r0, sl
   229ce:	f7fd fcfb 	bl	203c8 <z_spin_lock_set_owner>
	switch (event->type) {
   229d2:	f899 200d 	ldrb.w	r2, [r9, #13]
   229d6:	f002 021f 	and.w	r2, r2, #31
   229da:	2a08      	cmp	r2, #8
   229dc:	d853      	bhi.n	22a86 <register_events+0x10a>
   229de:	e8df f002 	tbb	[pc, r2]
   229e2:	4431      	.short	0x4431
   229e4:	522d5205 	.word	0x522d5205
   229e8:	5252      	.short	0x5252
   229ea:	4b          	.byte	0x4b
   229eb:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   229ec:	f8d9 2010 	ldr.w	r2, [r9, #16]
   229f0:	6892      	ldr	r2, [r2, #8]
   229f2:	b33a      	cbz	r2, 22a44 <register_events+0xc8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   229f4:	2202      	movs	r2, #2
	event->state |= state;
   229f6:	f8d9 100c 	ldr.w	r1, [r9, #12]
   229fa:	f3c1 3c45 	ubfx	ip, r1, #13, #6
   229fe:	ea42 020c 	orr.w	r2, r2, ip
	event->poller = NULL;
   22a02:	2000      	movs	r0, #0
	event->state |= state;
   22a04:	f362 3152 	bfi	r1, r2, #13, #6
	event->poller = NULL;
   22a08:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   22a0c:	f8c9 100c 	str.w	r1, [r9, #12]
			poller->is_polling = false;
   22a10:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a12:	4650      	mov	r0, sl
   22a14:	f7fd fcc8 	bl	203a8 <z_spin_unlock_valid>
   22a18:	b940      	cbnz	r0, 22a2c <register_events+0xb0>
   22a1a:	4639      	mov	r1, r7
   22a1c:	4628      	mov	r0, r5
   22a1e:	22b9      	movs	r2, #185	; 0xb9
   22a20:	f003 fd6d 	bl	264fe <assert_print>
   22a24:	21b9      	movs	r1, #185	; 0xb9
   22a26:	4638      	mov	r0, r7
   22a28:	f003 fd62 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   22a2c:	f38b 8811 	msr	BASEPRI, fp
   22a30:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   22a34:	3601      	adds	r6, #1
   22a36:	f109 0914 	add.w	r9, r9, #20
   22a3a:	e7ab      	b.n	22994 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   22a3c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   22a40:	6812      	ldr	r2, [r2, #0]
   22a42:	bb52      	cbnz	r2, 22a9a <register_events+0x11e>
		} else if (!just_check && poller->is_polling) {
   22a44:	9b01      	ldr	r3, [sp, #4]
   22a46:	2b00      	cmp	r3, #0
   22a48:	d1e3      	bne.n	22a12 <register_events+0x96>
   22a4a:	7822      	ldrb	r2, [r4, #0]
   22a4c:	2a00      	cmp	r2, #0
   22a4e:	d0e0      	beq.n	22a12 <register_events+0x96>
	switch (event->type) {
   22a50:	f899 200d 	ldrb.w	r2, [r9, #13]
   22a54:	f002 021f 	and.w	r2, r2, #31
   22a58:	2a08      	cmp	r2, #8
   22a5a:	d86d      	bhi.n	22b38 <register_events+0x1bc>
   22a5c:	e8df f002 	tbb	[pc, r2]
   22a60:	6c1f4932 	.word	0x6c1f4932
   22a64:	6c6c6c37 	.word	0x6c6c6c37
   22a68:	5a          	.byte	0x5a
   22a69:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   22a6a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   22a6e:	6892      	ldr	r2, [r2, #8]
   22a70:	2a00      	cmp	r2, #0
   22a72:	d0e7      	beq.n	22a44 <register_events+0xc8>
			*state = K_POLL_STATE_SIGNALED;
   22a74:	2201      	movs	r2, #1
   22a76:	e7be      	b.n	229f6 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   22a78:	f8d9 2010 	ldr.w	r2, [r9, #16]
   22a7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
   22a7e:	2a00      	cmp	r2, #0
   22a80:	d0e0      	beq.n	22a44 <register_events+0xc8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   22a82:	2210      	movs	r2, #16
   22a84:	e7b7      	b.n	229f6 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   22a86:	4628      	mov	r0, r5
   22a88:	4933      	ldr	r1, [pc, #204]	; (22b58 <register_events+0x1dc>)
   22a8a:	225c      	movs	r2, #92	; 0x5c
   22a8c:	f003 fd37 	bl	264fe <assert_print>
   22a90:	4831      	ldr	r0, [pc, #196]	; (22b58 <register_events+0x1dc>)
   22a92:	215c      	movs	r1, #92	; 0x5c
   22a94:	f003 fd2c 	bl	264f0 <assert_post_action>
		break;
   22a98:	e7d4      	b.n	22a44 <register_events+0xc8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   22a9a:	2204      	movs	r2, #4
   22a9c:	e7ab      	b.n	229f6 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22a9e:	f8d9 2010 	ldr.w	r2, [r9, #16]
   22aa2:	b942      	cbnz	r2, 22ab6 <register_events+0x13a>
   22aa4:	492c      	ldr	r1, [pc, #176]	; (22b58 <register_events+0x1dc>)
   22aa6:	4628      	mov	r0, r5
   22aa8:	2286      	movs	r2, #134	; 0x86
   22aaa:	f003 fd28 	bl	264fe <assert_print>
   22aae:	482a      	ldr	r0, [pc, #168]	; (22b58 <register_events+0x1dc>)
   22ab0:	2186      	movs	r1, #134	; 0x86
   22ab2:	f003 fd1d 	bl	264f0 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   22ab6:	f8d9 0010 	ldr.w	r0, [r9, #16]
   22aba:	4622      	mov	r2, r4
   22abc:	4649      	mov	r1, r9
   22abe:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   22ac0:	f007 f808 	bl	29ad4 <add_event>
	event->poller = poller;
   22ac4:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   22ac8:	f108 0801 	add.w	r8, r8, #1
   22acc:	e7a1      	b.n	22a12 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22ace:	f8d9 2010 	ldr.w	r2, [r9, #16]
   22ad2:	b942      	cbnz	r2, 22ae6 <register_events+0x16a>
   22ad4:	4920      	ldr	r1, [pc, #128]	; (22b58 <register_events+0x1dc>)
   22ad6:	4628      	mov	r0, r5
   22ad8:	228a      	movs	r2, #138	; 0x8a
   22ada:	f003 fd10 	bl	264fe <assert_print>
   22ade:	481e      	ldr	r0, [pc, #120]	; (22b58 <register_events+0x1dc>)
   22ae0:	218a      	movs	r1, #138	; 0x8a
   22ae2:	f003 fd05 	bl	264f0 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   22ae6:	f8d9 0010 	ldr.w	r0, [r9, #16]
   22aea:	4622      	mov	r2, r4
   22aec:	4649      	mov	r1, r9
   22aee:	3014      	adds	r0, #20
   22af0:	e7e6      	b.n	22ac0 <register_events+0x144>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22af2:	f8d9 2010 	ldr.w	r2, [r9, #16]
   22af6:	b942      	cbnz	r2, 22b0a <register_events+0x18e>
   22af8:	4917      	ldr	r1, [pc, #92]	; (22b58 <register_events+0x1dc>)
   22afa:	4628      	mov	r0, r5
   22afc:	228e      	movs	r2, #142	; 0x8e
   22afe:	f003 fcfe 	bl	264fe <assert_print>
   22b02:	4815      	ldr	r0, [pc, #84]	; (22b58 <register_events+0x1dc>)
   22b04:	218e      	movs	r1, #142	; 0x8e
   22b06:	f003 fcf3 	bl	264f0 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   22b0a:	f8d9 0010 	ldr.w	r0, [r9, #16]
   22b0e:	4622      	mov	r2, r4
   22b10:	4649      	mov	r1, r9
   22b12:	e7d5      	b.n	22ac0 <register_events+0x144>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   22b14:	f8d9 2010 	ldr.w	r2, [r9, #16]
   22b18:	b942      	cbnz	r2, 22b2c <register_events+0x1b0>
   22b1a:	490f      	ldr	r1, [pc, #60]	; (22b58 <register_events+0x1dc>)
   22b1c:	4628      	mov	r0, r5
   22b1e:	2292      	movs	r2, #146	; 0x92
   22b20:	f003 fced 	bl	264fe <assert_print>
   22b24:	480c      	ldr	r0, [pc, #48]	; (22b58 <register_events+0x1dc>)
   22b26:	2192      	movs	r1, #146	; 0x92
   22b28:	f003 fce2 	bl	264f0 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   22b2c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   22b30:	4622      	mov	r2, r4
   22b32:	4649      	mov	r1, r9
   22b34:	3028      	adds	r0, #40	; 0x28
   22b36:	e7c3      	b.n	22ac0 <register_events+0x144>
		__ASSERT(false, "invalid event type\n");
   22b38:	4628      	mov	r0, r5
   22b3a:	4907      	ldr	r1, [pc, #28]	; (22b58 <register_events+0x1dc>)
   22b3c:	2299      	movs	r2, #153	; 0x99
   22b3e:	f003 fcde 	bl	264fe <assert_print>
   22b42:	4805      	ldr	r0, [pc, #20]	; (22b58 <register_events+0x1dc>)
   22b44:	2199      	movs	r1, #153	; 0x99
   22b46:	f003 fcd3 	bl	264f0 <assert_post_action>
		break;
   22b4a:	e7bb      	b.n	22ac4 <register_events+0x148>
   22b4c:	200028e8 	.word	0x200028e8
   22b50:	0002ac34 	.word	0x0002ac34
   22b54:	0002aa75 	.word	0x0002aa75
   22b58:	0002d8db 	.word	0x0002d8db

00022b5c <clear_event_registrations>:
{
   22b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22b60:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   22b62:	4d45      	ldr	r5, [pc, #276]	; (22c78 <clear_event_registrations+0x11c>)
   22b64:	4e45      	ldr	r6, [pc, #276]	; (22c7c <clear_event_registrations+0x120>)
   22b66:	f8df 9118 	ldr.w	r9, [pc, #280]	; 22c80 <clear_event_registrations+0x124>
{
   22b6a:	4690      	mov	r8, r2
	while (num_events--) {
   22b6c:	460f      	mov	r7, r1
   22b6e:	fb04 0401 	mla	r4, r4, r1, r0
   22b72:	b90f      	cbnz	r7, 22b78 <clear_event_registrations+0x1c>
}
   22b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   22b78:	2300      	movs	r3, #0
   22b7a:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   22b7e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   22b82:	f003 031f 	and.w	r3, r3, #31
   22b86:	f1a4 0a14 	sub.w	sl, r4, #20
   22b8a:	2b08      	cmp	r3, #8
   22b8c:	d83e      	bhi.n	22c0c <clear_event_registrations+0xb0>
   22b8e:	e8df f003 	tbb	[pc, r3]
   22b92:	2746      	.short	0x2746
   22b94:	3d1c3d05 	.word	0x3d1c3d05
   22b98:	3d3d      	.short	0x3d3d
   22b9a:	32          	.byte	0x32
   22b9b:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22b9c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22ba0:	b943      	cbnz	r3, 22bb4 <clear_event_registrations+0x58>
   22ba2:	4629      	mov	r1, r5
   22ba4:	22a9      	movs	r2, #169	; 0xa9
   22ba6:	4630      	mov	r0, r6
   22ba8:	f003 fca9 	bl	264fe <assert_print>
   22bac:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   22bae:	4628      	mov	r0, r5
   22bb0:	f003 fc9e 	bl	264f0 <assert_post_action>
	return node->next != NULL;
   22bb4:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   22bb8:	b38b      	cbz	r3, 22c1e <clear_event_registrations+0xc2>
	sys_dnode_t *const prev = node->prev;
   22bba:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   22bbe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22bc0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22bc2:	2300      	movs	r3, #0
	node->prev = NULL;
   22bc4:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   22bc8:	e029      	b.n	22c1e <clear_event_registrations+0xc2>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22bca:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22bce:	2b00      	cmp	r3, #0
   22bd0:	d1f0      	bne.n	22bb4 <clear_event_registrations+0x58>
   22bd2:	4629      	mov	r1, r5
   22bd4:	22ad      	movs	r2, #173	; 0xad
   22bd6:	4630      	mov	r0, r6
   22bd8:	f003 fc91 	bl	264fe <assert_print>
   22bdc:	21ad      	movs	r1, #173	; 0xad
   22bde:	e7e6      	b.n	22bae <clear_event_registrations+0x52>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22be0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22be4:	2b00      	cmp	r3, #0
   22be6:	d1e5      	bne.n	22bb4 <clear_event_registrations+0x58>
   22be8:	4629      	mov	r1, r5
   22bea:	22b1      	movs	r2, #177	; 0xb1
   22bec:	4630      	mov	r0, r6
   22bee:	f003 fc86 	bl	264fe <assert_print>
   22bf2:	21b1      	movs	r1, #177	; 0xb1
   22bf4:	e7db      	b.n	22bae <clear_event_registrations+0x52>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   22bf6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22bfa:	2b00      	cmp	r3, #0
   22bfc:	d1da      	bne.n	22bb4 <clear_event_registrations+0x58>
   22bfe:	4629      	mov	r1, r5
   22c00:	22b5      	movs	r2, #181	; 0xb5
   22c02:	4630      	mov	r0, r6
   22c04:	f003 fc7b 	bl	264fe <assert_print>
   22c08:	21b5      	movs	r1, #181	; 0xb5
   22c0a:	e7d0      	b.n	22bae <clear_event_registrations+0x52>
		__ASSERT(false, "invalid event type\n");
   22c0c:	4629      	mov	r1, r5
   22c0e:	4630      	mov	r0, r6
   22c10:	22bc      	movs	r2, #188	; 0xbc
   22c12:	f003 fc74 	bl	264fe <assert_print>
   22c16:	21bc      	movs	r1, #188	; 0xbc
   22c18:	4628      	mov	r0, r5
   22c1a:	f003 fc69 	bl	264f0 <assert_post_action>
   22c1e:	4648      	mov	r0, r9
   22c20:	f7fd fbc2 	bl	203a8 <z_spin_unlock_valid>
   22c24:	b940      	cbnz	r0, 22c38 <clear_event_registrations+0xdc>
   22c26:	4917      	ldr	r1, [pc, #92]	; (22c84 <clear_event_registrations+0x128>)
   22c28:	4630      	mov	r0, r6
   22c2a:	22b9      	movs	r2, #185	; 0xb9
   22c2c:	f003 fc67 	bl	264fe <assert_print>
   22c30:	4814      	ldr	r0, [pc, #80]	; (22c84 <clear_event_registrations+0x128>)
   22c32:	21b9      	movs	r1, #185	; 0xb9
   22c34:	f003 fc5c 	bl	264f0 <assert_post_action>
   22c38:	f388 8811 	msr	BASEPRI, r8
   22c3c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22c40:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c44:	f3ef 8811 	mrs	r8, BASEPRI
   22c48:	f383 8812 	msr	BASEPRI_MAX, r3
   22c4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c50:	4648      	mov	r0, r9
   22c52:	f7fd fb9b 	bl	2038c <z_spin_lock_valid>
   22c56:	b940      	cbnz	r0, 22c6a <clear_event_registrations+0x10e>
   22c58:	490a      	ldr	r1, [pc, #40]	; (22c84 <clear_event_registrations+0x128>)
   22c5a:	4630      	mov	r0, r6
   22c5c:	228e      	movs	r2, #142	; 0x8e
   22c5e:	f003 fc4e 	bl	264fe <assert_print>
   22c62:	4808      	ldr	r0, [pc, #32]	; (22c84 <clear_event_registrations+0x128>)
   22c64:	218e      	movs	r1, #142	; 0x8e
   22c66:	f003 fc43 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22c6a:	4648      	mov	r0, r9
   22c6c:	f7fd fbac 	bl	203c8 <z_spin_lock_set_owner>
	return k;
   22c70:	3f01      	subs	r7, #1
   22c72:	4654      	mov	r4, sl
   22c74:	e77d      	b.n	22b72 <clear_event_registrations+0x16>
   22c76:	bf00      	nop
   22c78:	0002d8db 	.word	0x0002d8db
   22c7c:	0002aa75 	.word	0x0002aa75
   22c80:	200028e8 	.word	0x200028e8
   22c84:	0002ac34 	.word	0x0002ac34

00022c88 <k_poll_event_init>:
{
   22c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c8a:	4605      	mov	r5, r0
   22c8c:	460f      	mov	r7, r1
   22c8e:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   22c90:	4614      	mov	r4, r2
   22c92:	b142      	cbz	r2, 22ca6 <k_poll_event_init+0x1e>
   22c94:	4915      	ldr	r1, [pc, #84]	; (22cec <k_poll_event_init+0x64>)
   22c96:	4816      	ldr	r0, [pc, #88]	; (22cf0 <k_poll_event_init+0x68>)
   22c98:	222d      	movs	r2, #45	; 0x2d
   22c9a:	f003 fc30 	bl	264fe <assert_print>
   22c9e:	4813      	ldr	r0, [pc, #76]	; (22cec <k_poll_event_init+0x64>)
   22ca0:	212d      	movs	r1, #45	; 0x2d
   22ca2:	f003 fc25 	bl	264f0 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   22ca6:	2f1f      	cmp	r7, #31
   22ca8:	d908      	bls.n	22cbc <k_poll_event_init+0x34>
   22caa:	4910      	ldr	r1, [pc, #64]	; (22cec <k_poll_event_init+0x64>)
   22cac:	4810      	ldr	r0, [pc, #64]	; (22cf0 <k_poll_event_init+0x68>)
   22cae:	222f      	movs	r2, #47	; 0x2f
   22cb0:	f003 fc25 	bl	264fe <assert_print>
   22cb4:	480d      	ldr	r0, [pc, #52]	; (22cec <k_poll_event_init+0x64>)
   22cb6:	212f      	movs	r1, #47	; 0x2f
   22cb8:	f003 fc1a 	bl	264f0 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   22cbc:	b946      	cbnz	r6, 22cd0 <k_poll_event_init+0x48>
   22cbe:	490b      	ldr	r1, [pc, #44]	; (22cec <k_poll_event_init+0x64>)
   22cc0:	480b      	ldr	r0, [pc, #44]	; (22cf0 <k_poll_event_init+0x68>)
   22cc2:	2230      	movs	r2, #48	; 0x30
   22cc4:	f003 fc1b 	bl	264fe <assert_print>
   22cc8:	4808      	ldr	r0, [pc, #32]	; (22cec <k_poll_event_init+0x64>)
   22cca:	2130      	movs	r1, #48	; 0x30
   22ccc:	f003 fc10 	bl	264f0 <assert_post_action>
	event->poller = NULL;
   22cd0:	2300      	movs	r3, #0
	event->type = type;
   22cd2:	04e4      	lsls	r4, r4, #19
   22cd4:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   22cd6:	60ab      	str	r3, [r5, #8]
	event->type = type;
   22cd8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   22cdc:	7b2b      	ldrb	r3, [r5, #12]
   22cde:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   22ce2:	433c      	orrs	r4, r7
   22ce4:	431c      	orrs	r4, r3
	event->obj = obj;
   22ce6:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   22cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22cec:	0002d8db 	.word	0x0002d8db
   22cf0:	0002aa75 	.word	0x0002aa75

00022cf4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   22cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22cf8:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   22cfa:	4b63      	ldr	r3, [pc, #396]	; (22e88 <z_impl_k_poll+0x194>)
   22cfc:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   22cfe:	2301      	movs	r3, #1
{
   22d00:	4604      	mov	r4, r0
   22d02:	4688      	mov	r8, r1
   22d04:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   22d06:	f107 0960 	add.w	r9, r7, #96	; 0x60
	poller->is_polling = true;
   22d0a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   22d0e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
   22d12:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   22d16:	b153      	cbz	r3, 22d2e <z_impl_k_poll+0x3a>
   22d18:	495c      	ldr	r1, [pc, #368]	; (22e8c <z_impl_k_poll+0x198>)
   22d1a:	485d      	ldr	r0, [pc, #372]	; (22e90 <z_impl_k_poll+0x19c>)
   22d1c:	f44f 728d 	mov.w	r2, #282	; 0x11a
   22d20:	f003 fbed 	bl	264fe <assert_print>
   22d24:	4859      	ldr	r0, [pc, #356]	; (22e8c <z_impl_k_poll+0x198>)
   22d26:	f44f 718d 	mov.w	r1, #282	; 0x11a
   22d2a:	f003 fbe1 	bl	264f0 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   22d2e:	b954      	cbnz	r4, 22d46 <z_impl_k_poll+0x52>
   22d30:	4956      	ldr	r1, [pc, #344]	; (22e8c <z_impl_k_poll+0x198>)
   22d32:	4857      	ldr	r0, [pc, #348]	; (22e90 <z_impl_k_poll+0x19c>)
   22d34:	f240 121b 	movw	r2, #283	; 0x11b
   22d38:	f003 fbe1 	bl	264fe <assert_print>
   22d3c:	4853      	ldr	r0, [pc, #332]	; (22e8c <z_impl_k_poll+0x198>)
   22d3e:	f240 111b 	movw	r1, #283	; 0x11b
   22d42:	f003 fbd5 	bl	264f0 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   22d46:	f1b8 0f00 	cmp.w	r8, #0
   22d4a:	da0a      	bge.n	22d62 <z_impl_k_poll+0x6e>
   22d4c:	494f      	ldr	r1, [pc, #316]	; (22e8c <z_impl_k_poll+0x198>)
   22d4e:	4850      	ldr	r0, [pc, #320]	; (22e90 <z_impl_k_poll+0x19c>)
   22d50:	f44f 728e 	mov.w	r2, #284	; 0x11c
   22d54:	f003 fbd3 	bl	264fe <assert_print>
   22d58:	484c      	ldr	r0, [pc, #304]	; (22e8c <z_impl_k_poll+0x198>)
   22d5a:	f44f 718e 	mov.w	r1, #284	; 0x11c
   22d5e:	f003 fbc7 	bl	264f0 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   22d62:	ea56 0305 	orrs.w	r3, r6, r5
   22d66:	bf0c      	ite	eq
   22d68:	2301      	moveq	r3, #1
   22d6a:	2300      	movne	r3, #0
   22d6c:	4641      	mov	r1, r8
   22d6e:	464a      	mov	r2, r9
   22d70:	4620      	mov	r0, r4
   22d72:	f7ff fe03 	bl	2297c <register_events>
   22d76:	4680      	mov	r8, r0
   22d78:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d7c:	f3ef 8911 	mrs	r9, BASEPRI
   22d80:	f383 8812 	msr	BASEPRI_MAX, r3
   22d84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d88:	4842      	ldr	r0, [pc, #264]	; (22e94 <z_impl_k_poll+0x1a0>)
   22d8a:	f7fd faff 	bl	2038c <z_spin_lock_valid>
   22d8e:	b940      	cbnz	r0, 22da2 <z_impl_k_poll+0xae>
   22d90:	4941      	ldr	r1, [pc, #260]	; (22e98 <z_impl_k_poll+0x1a4>)
   22d92:	483f      	ldr	r0, [pc, #252]	; (22e90 <z_impl_k_poll+0x19c>)
   22d94:	228e      	movs	r2, #142	; 0x8e
   22d96:	f003 fbb2 	bl	264fe <assert_print>
   22d9a:	483f      	ldr	r0, [pc, #252]	; (22e98 <z_impl_k_poll+0x1a4>)
   22d9c:	218e      	movs	r1, #142	; 0x8e
   22d9e:	f003 fba7 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22da2:	483c      	ldr	r0, [pc, #240]	; (22e94 <z_impl_k_poll+0x1a0>)
   22da4:	f7fd fb10 	bl	203c8 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   22da8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   22dac:	b9d3      	cbnz	r3, 22de4 <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   22dae:	4620      	mov	r0, r4
   22db0:	464a      	mov	r2, r9
   22db2:	4641      	mov	r1, r8
   22db4:	f7ff fed2 	bl	22b5c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22db8:	4836      	ldr	r0, [pc, #216]	; (22e94 <z_impl_k_poll+0x1a0>)
   22dba:	f7fd faf5 	bl	203a8 <z_spin_unlock_valid>
   22dbe:	b940      	cbnz	r0, 22dd2 <z_impl_k_poll+0xde>
   22dc0:	4935      	ldr	r1, [pc, #212]	; (22e98 <z_impl_k_poll+0x1a4>)
   22dc2:	4833      	ldr	r0, [pc, #204]	; (22e90 <z_impl_k_poll+0x19c>)
   22dc4:	22b9      	movs	r2, #185	; 0xb9
   22dc6:	f003 fb9a 	bl	264fe <assert_print>
   22dca:	4833      	ldr	r0, [pc, #204]	; (22e98 <z_impl_k_poll+0x1a4>)
   22dcc:	21b9      	movs	r1, #185	; 0xb9
   22dce:	f003 fb8f 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   22dd2:	f389 8811 	msr	BASEPRI, r9
   22dd6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
   22dda:	2500      	movs	r5, #0
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   22ddc:	4628      	mov	r0, r5
   22dde:	b003      	add	sp, #12
   22de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   22de4:	2300      	movs	r3, #0
   22de6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22dea:	ea56 0305 	orrs.w	r3, r6, r5
   22dee:	d113      	bne.n	22e18 <z_impl_k_poll+0x124>
   22df0:	4828      	ldr	r0, [pc, #160]	; (22e94 <z_impl_k_poll+0x1a0>)
   22df2:	f7fd fad9 	bl	203a8 <z_spin_unlock_valid>
   22df6:	b940      	cbnz	r0, 22e0a <z_impl_k_poll+0x116>
   22df8:	4927      	ldr	r1, [pc, #156]	; (22e98 <z_impl_k_poll+0x1a4>)
   22dfa:	4825      	ldr	r0, [pc, #148]	; (22e90 <z_impl_k_poll+0x19c>)
   22dfc:	22b9      	movs	r2, #185	; 0xb9
   22dfe:	f003 fb7e 	bl	264fe <assert_print>
   22e02:	4825      	ldr	r0, [pc, #148]	; (22e98 <z_impl_k_poll+0x1a4>)
   22e04:	21b9      	movs	r1, #185	; 0xb9
   22e06:	f003 fb73 	bl	264f0 <assert_post_action>
   22e0a:	f389 8811 	msr	BASEPRI, r9
   22e0e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   22e12:	f06f 050a 	mvn.w	r5, #10
   22e16:	e7e1      	b.n	22ddc <z_impl_k_poll+0xe8>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22e18:	e9cd 6500 	strd	r6, r5, [sp]
   22e1c:	4a1f      	ldr	r2, [pc, #124]	; (22e9c <z_impl_k_poll+0x1a8>)
   22e1e:	481d      	ldr	r0, [pc, #116]	; (22e94 <z_impl_k_poll+0x1a0>)
   22e20:	4649      	mov	r1, r9
   22e22:	f7fe ff0b 	bl	21c3c <z_pend_curr>
   22e26:	4605      	mov	r5, r0
	__asm__ volatile(
   22e28:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e2c:	f3ef 8611 	mrs	r6, BASEPRI
   22e30:	f383 8812 	msr	BASEPRI_MAX, r3
   22e34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22e38:	4816      	ldr	r0, [pc, #88]	; (22e94 <z_impl_k_poll+0x1a0>)
   22e3a:	f7fd faa7 	bl	2038c <z_spin_lock_valid>
   22e3e:	b940      	cbnz	r0, 22e52 <z_impl_k_poll+0x15e>
   22e40:	4915      	ldr	r1, [pc, #84]	; (22e98 <z_impl_k_poll+0x1a4>)
   22e42:	4813      	ldr	r0, [pc, #76]	; (22e90 <z_impl_k_poll+0x19c>)
   22e44:	228e      	movs	r2, #142	; 0x8e
   22e46:	f003 fb5a 	bl	264fe <assert_print>
   22e4a:	4813      	ldr	r0, [pc, #76]	; (22e98 <z_impl_k_poll+0x1a4>)
   22e4c:	218e      	movs	r1, #142	; 0x8e
   22e4e:	f003 fb4f 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22e52:	4810      	ldr	r0, [pc, #64]	; (22e94 <z_impl_k_poll+0x1a0>)
   22e54:	f7fd fab8 	bl	203c8 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   22e58:	4620      	mov	r0, r4
   22e5a:	4632      	mov	r2, r6
   22e5c:	4641      	mov	r1, r8
   22e5e:	f7ff fe7d 	bl	22b5c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e62:	480c      	ldr	r0, [pc, #48]	; (22e94 <z_impl_k_poll+0x1a0>)
   22e64:	f7fd faa0 	bl	203a8 <z_spin_unlock_valid>
   22e68:	b940      	cbnz	r0, 22e7c <z_impl_k_poll+0x188>
   22e6a:	490b      	ldr	r1, [pc, #44]	; (22e98 <z_impl_k_poll+0x1a4>)
   22e6c:	4808      	ldr	r0, [pc, #32]	; (22e90 <z_impl_k_poll+0x19c>)
   22e6e:	22b9      	movs	r2, #185	; 0xb9
   22e70:	f003 fb45 	bl	264fe <assert_print>
   22e74:	4808      	ldr	r0, [pc, #32]	; (22e98 <z_impl_k_poll+0x1a4>)
   22e76:	21b9      	movs	r1, #185	; 0xb9
   22e78:	f003 fb3a 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   22e7c:	f386 8811 	msr	BASEPRI, r6
   22e80:	f3bf 8f6f 	isb	sy
	return swap_rc;
   22e84:	e7aa      	b.n	22ddc <z_impl_k_poll+0xe8>
   22e86:	bf00      	nop
   22e88:	20002894 	.word	0x20002894
   22e8c:	0002d8db 	.word	0x0002d8db
   22e90:	0002aa75 	.word	0x0002aa75
   22e94:	200028e8 	.word	0x200028e8
   22e98:	0002ac34 	.word	0x0002ac34
   22e9c:	20000684 	.word	0x20000684

00022ea0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   22ea0:	b570      	push	{r4, r5, r6, lr}
   22ea2:	4604      	mov	r4, r0
   22ea4:	460d      	mov	r5, r1
	__asm__ volatile(
   22ea6:	f04f 0340 	mov.w	r3, #64	; 0x40
   22eaa:	f3ef 8611 	mrs	r6, BASEPRI
   22eae:	f383 8812 	msr	BASEPRI_MAX, r3
   22eb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22eb6:	481c      	ldr	r0, [pc, #112]	; (22f28 <z_impl_k_poll_signal_raise+0x88>)
   22eb8:	f7fd fa68 	bl	2038c <z_spin_lock_valid>
   22ebc:	b940      	cbnz	r0, 22ed0 <z_impl_k_poll_signal_raise+0x30>
   22ebe:	491b      	ldr	r1, [pc, #108]	; (22f2c <z_impl_k_poll_signal_raise+0x8c>)
   22ec0:	481b      	ldr	r0, [pc, #108]	; (22f30 <z_impl_k_poll_signal_raise+0x90>)
   22ec2:	228e      	movs	r2, #142	; 0x8e
   22ec4:	f003 fb1b 	bl	264fe <assert_print>
   22ec8:	4818      	ldr	r0, [pc, #96]	; (22f2c <z_impl_k_poll_signal_raise+0x8c>)
   22eca:	218e      	movs	r1, #142	; 0x8e
   22ecc:	f003 fb10 	bl	264f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ed0:	4815      	ldr	r0, [pc, #84]	; (22f28 <z_impl_k_poll_signal_raise+0x88>)
   22ed2:	f7fd fa79 	bl	203c8 <z_spin_lock_set_owner>
	return list->head == list;
   22ed6:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   22ed8:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   22eda:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   22edc:	4284      	cmp	r4, r0
   22ede:	60a1      	str	r1, [r4, #8]
   22ee0:	d112      	bne.n	22f08 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ee2:	4811      	ldr	r0, [pc, #68]	; (22f28 <z_impl_k_poll_signal_raise+0x88>)
   22ee4:	f7fd fa60 	bl	203a8 <z_spin_unlock_valid>
   22ee8:	b940      	cbnz	r0, 22efc <z_impl_k_poll_signal_raise+0x5c>
   22eea:	4910      	ldr	r1, [pc, #64]	; (22f2c <z_impl_k_poll_signal_raise+0x8c>)
   22eec:	4810      	ldr	r0, [pc, #64]	; (22f30 <z_impl_k_poll_signal_raise+0x90>)
   22eee:	22b9      	movs	r2, #185	; 0xb9
   22ef0:	f003 fb05 	bl	264fe <assert_print>
   22ef4:	480d      	ldr	r0, [pc, #52]	; (22f2c <z_impl_k_poll_signal_raise+0x8c>)
   22ef6:	21b9      	movs	r1, #185	; 0xb9
   22ef8:	f003 fafa 	bl	264f0 <assert_post_action>
	__asm__ volatile(
   22efc:	f386 8811 	msr	BASEPRI, r6
   22f00:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   22f04:	2400      	movs	r4, #0
   22f06:	e00d      	b.n	22f24 <z_impl_k_poll_signal_raise+0x84>
	sys_dnode_t *const next = node->next;
   22f08:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22f0c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22f0e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22f10:	2300      	movs	r3, #0
	node->prev = NULL;
   22f12:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22f16:	f006 fe0c 	bl	29b32 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   22f1a:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22f1c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   22f1e:	4802      	ldr	r0, [pc, #8]	; (22f28 <z_impl_k_poll_signal_raise+0x88>)
   22f20:	f7fe faf8 	bl	21514 <z_reschedule>
	return rc;
}
   22f24:	4620      	mov	r0, r4
   22f26:	bd70      	pop	{r4, r5, r6, pc}
   22f28:	200028e8 	.word	0x200028e8
   22f2c:	0002ac34 	.word	0x0002ac34
   22f30:	0002aa75 	.word	0x0002aa75

00022f34 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   22f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22f36:	4605      	mov	r5, r0
   22f38:	460e      	mov	r6, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   22f3a:	f006 fc9e 	bl	2987a <k_is_in_isr>
   22f3e:	b978      	cbnz	r0, 22f60 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   22f40:	4b11      	ldr	r3, [pc, #68]	; (22f88 <z_thread_aligned_alloc+0x54>)
   22f42:	689b      	ldr	r3, [r3, #8]
   22f44:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   22f46:	b1e4      	cbz	r4, 22f82 <z_thread_aligned_alloc+0x4e>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22f48:	1d32      	adds	r2, r6, #4
   22f4a:	d209      	bcs.n	22f60 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   22f4c:	2000      	movs	r0, #0
   22f4e:	2100      	movs	r1, #0
   22f50:	e9cd 0100 	strd	r0, r1, [sp]
   22f54:	f045 0104 	orr.w	r1, r5, #4
   22f58:	4620      	mov	r0, r4
   22f5a:	f7fc ff53 	bl	1fe04 <k_heap_aligned_alloc>
	if (mem == NULL) {
   22f5e:	b908      	cbnz	r0, 22f64 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   22f60:	2400      	movs	r4, #0
	}

	return ret;
   22f62:	e00e      	b.n	22f82 <z_thread_aligned_alloc+0x4e>
	*heap_ref = heap;
   22f64:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   22f66:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   22f68:	b15d      	cbz	r5, 22f82 <z_thread_aligned_alloc+0x4e>
   22f6a:	3d01      	subs	r5, #1
   22f6c:	422c      	tst	r4, r5
   22f6e:	d008      	beq.n	22f82 <z_thread_aligned_alloc+0x4e>
   22f70:	4906      	ldr	r1, [pc, #24]	; (22f8c <z_thread_aligned_alloc+0x58>)
   22f72:	4807      	ldr	r0, [pc, #28]	; (22f90 <z_thread_aligned_alloc+0x5c>)
   22f74:	2225      	movs	r2, #37	; 0x25
   22f76:	f003 fac2 	bl	264fe <assert_print>
   22f7a:	4804      	ldr	r0, [pc, #16]	; (22f8c <z_thread_aligned_alloc+0x58>)
   22f7c:	2125      	movs	r1, #37	; 0x25
   22f7e:	f003 fab7 	bl	264f0 <assert_post_action>
}
   22f82:	4620      	mov	r0, r4
   22f84:	b002      	add	sp, #8
   22f86:	bd70      	pop	{r4, r5, r6, pc}
   22f88:	20002894 	.word	0x20002894
   22f8c:	0002d8fc 	.word	0x0002d8fc
   22f90:	0002aa75 	.word	0x0002aa75

00022f94 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   22f94:	4a02      	ldr	r2, [pc, #8]	; (22fa0 <boot_banner+0xc>)
   22f96:	4903      	ldr	r1, [pc, #12]	; (22fa4 <boot_banner+0x10>)
   22f98:	4803      	ldr	r0, [pc, #12]	; (22fa8 <boot_banner+0x14>)
   22f9a:	f003 b8bf 	b.w	2611c <printk>
   22f9e:	bf00      	nop
   22fa0:	0002d6e1 	.word	0x0002d6e1
   22fa4:	0002d920 	.word	0x0002d920
   22fa8:	0002d92f 	.word	0x0002d92f

00022fac <ocrypto_ecdh_p256_public_key>:
   22fac:	b530      	push	{r4, r5, lr}
   22fae:	b099      	sub	sp, #100	; 0x64
   22fb0:	4605      	mov	r5, r0
   22fb2:	4668      	mov	r0, sp
   22fb4:	f000 f828 	bl	23008 <ocrypto_sc_p256_from32bytes>
   22fb8:	4669      	mov	r1, sp
   22fba:	4604      	mov	r4, r0
   22fbc:	a808      	add	r0, sp, #32
   22fbe:	f000 fa53 	bl	23468 <ocrypto_curve_p256_scalarmult_base>
   22fc2:	a908      	add	r1, sp, #32
   22fc4:	4304      	orrs	r4, r0
   22fc6:	4628      	mov	r0, r5
   22fc8:	f000 f98a 	bl	232e0 <ocrypto_curve_p256_to64bytes>
   22fcc:	4620      	mov	r0, r4
   22fce:	b019      	add	sp, #100	; 0x64
   22fd0:	bd30      	pop	{r4, r5, pc}
   22fd2:	bf00      	nop

00022fd4 <ocrypto_ecdh_p256_common_secret>:
   22fd4:	b570      	push	{r4, r5, r6, lr}
   22fd6:	b098      	sub	sp, #96	; 0x60
   22fd8:	4605      	mov	r5, r0
   22fda:	4668      	mov	r0, sp
   22fdc:	4616      	mov	r6, r2
   22fde:	f000 f813 	bl	23008 <ocrypto_sc_p256_from32bytes>
   22fe2:	4631      	mov	r1, r6
   22fe4:	4604      	mov	r4, r0
   22fe6:	a808      	add	r0, sp, #32
   22fe8:	f000 f946 	bl	23278 <ocrypto_curve_p256_from64bytes>
   22fec:	a908      	add	r1, sp, #32
   22fee:	466a      	mov	r2, sp
   22ff0:	4304      	orrs	r4, r0
   22ff2:	4608      	mov	r0, r1
   22ff4:	f000 f982 	bl	232fc <ocrypto_curve_p256_scalarmult>
   22ff8:	a908      	add	r1, sp, #32
   22ffa:	4304      	orrs	r4, r0
   22ffc:	4628      	mov	r0, r5
   22ffe:	f000 f96d 	bl	232dc <ocrypto_curve_p256_to32bytes>
   23002:	4620      	mov	r0, r4
   23004:	b018      	add	sp, #96	; 0x60
   23006:	bd70      	pop	{r4, r5, r6, pc}

00023008 <ocrypto_sc_p256_from32bytes>:
   23008:	b570      	push	{r4, r5, r6, lr}
   2300a:	680b      	ldr	r3, [r1, #0]
   2300c:	4e12      	ldr	r6, [pc, #72]	; (23058 <ocrypto_sc_p256_from32bytes+0x50>)
   2300e:	ba1b      	rev	r3, r3
   23010:	61c3      	str	r3, [r0, #28]
   23012:	684b      	ldr	r3, [r1, #4]
   23014:	ba1b      	rev	r3, r3
   23016:	6183      	str	r3, [r0, #24]
   23018:	688b      	ldr	r3, [r1, #8]
   2301a:	ba1b      	rev	r3, r3
   2301c:	6143      	str	r3, [r0, #20]
   2301e:	68cb      	ldr	r3, [r1, #12]
   23020:	ba1b      	rev	r3, r3
   23022:	6103      	str	r3, [r0, #16]
   23024:	690b      	ldr	r3, [r1, #16]
   23026:	ba1b      	rev	r3, r3
   23028:	60c3      	str	r3, [r0, #12]
   2302a:	694b      	ldr	r3, [r1, #20]
   2302c:	ba1b      	rev	r3, r3
   2302e:	6083      	str	r3, [r0, #8]
   23030:	698b      	ldr	r3, [r1, #24]
   23032:	ba1b      	rev	r3, r3
   23034:	6043      	str	r3, [r0, #4]
   23036:	69cb      	ldr	r3, [r1, #28]
   23038:	ba1b      	rev	r3, r3
   2303a:	4632      	mov	r2, r6
   2303c:	6003      	str	r3, [r0, #0]
   2303e:	4601      	mov	r1, r0
   23040:	4604      	mov	r4, r0
   23042:	f7de f897 	bl	1174 <ocrypto_bigint_sub256>
   23046:	4631      	mov	r1, r6
   23048:	4605      	mov	r5, r0
   2304a:	4602      	mov	r2, r0
   2304c:	4620      	mov	r0, r4
   2304e:	f7de f8b1 	bl	11b4 <ocrypto_bigint_cadd256>
   23052:	1e68      	subs	r0, r5, #1
   23054:	bd70      	pop	{r4, r5, r6, pc}
   23056:	bf00      	nop
   23058:	0002a7bc 	.word	0x0002a7bc

0002305c <p256_zdblu>:
   2305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23060:	b088      	sub	sp, #32
   23062:	460c      	mov	r4, r1
   23064:	4606      	mov	r6, r0
   23066:	f102 0120 	add.w	r1, r2, #32
   2306a:	4668      	mov	r0, sp
   2306c:	f106 0720 	add.w	r7, r6, #32
   23070:	4690      	mov	r8, r2
   23072:	f7de fb89 	bl	1788 <ocrypto_mod_p256_sqr>
   23076:	466a      	mov	r2, sp
   23078:	4669      	mov	r1, sp
   2307a:	4668      	mov	r0, sp
   2307c:	f7de fa96 	bl	15ac <ocrypto_mod_p256_add>
   23080:	4669      	mov	r1, sp
   23082:	4638      	mov	r0, r7
   23084:	f7de fb80 	bl	1788 <ocrypto_mod_p256_sqr>
   23088:	463a      	mov	r2, r7
   2308a:	4639      	mov	r1, r7
   2308c:	4638      	mov	r0, r7
   2308e:	f104 0520 	add.w	r5, r4, #32
   23092:	f7de fa8b 	bl	15ac <ocrypto_mod_p256_add>
   23096:	466a      	mov	r2, sp
   23098:	4669      	mov	r1, sp
   2309a:	4668      	mov	r0, sp
   2309c:	f7de fa86 	bl	15ac <ocrypto_mod_p256_add>
   230a0:	4641      	mov	r1, r8
   230a2:	4628      	mov	r0, r5
   230a4:	f7de fb70 	bl	1788 <ocrypto_mod_p256_sqr>
   230a8:	466a      	mov	r2, sp
   230aa:	4641      	mov	r1, r8
   230ac:	4630      	mov	r0, r6
   230ae:	f7de fb53 	bl	1758 <ocrypto_mod_p256_mul>
   230b2:	462a      	mov	r2, r5
   230b4:	4629      	mov	r1, r5
   230b6:	4668      	mov	r0, sp
   230b8:	f7de fa78 	bl	15ac <ocrypto_mod_p256_add>
   230bc:	462a      	mov	r2, r5
   230be:	4669      	mov	r1, sp
   230c0:	4668      	mov	r0, sp
   230c2:	f7de fa73 	bl	15ac <ocrypto_mod_p256_add>
   230c6:	4a12      	ldr	r2, [pc, #72]	; (23110 <p256_zdblu+0xb4>)
   230c8:	4669      	mov	r1, sp
   230ca:	4668      	mov	r0, sp
   230cc:	f7de fa6e 	bl	15ac <ocrypto_mod_p256_add>
   230d0:	4669      	mov	r1, sp
   230d2:	4620      	mov	r0, r4
   230d4:	f7de fb58 	bl	1788 <ocrypto_mod_p256_sqr>
   230d8:	4632      	mov	r2, r6
   230da:	4621      	mov	r1, r4
   230dc:	4620      	mov	r0, r4
   230de:	f7de faa3 	bl	1628 <ocrypto_mod_p256_sub>
   230e2:	4632      	mov	r2, r6
   230e4:	4621      	mov	r1, r4
   230e6:	4620      	mov	r0, r4
   230e8:	f7de fa9e 	bl	1628 <ocrypto_mod_p256_sub>
   230ec:	4622      	mov	r2, r4
   230ee:	4631      	mov	r1, r6
   230f0:	4628      	mov	r0, r5
   230f2:	f7de fa99 	bl	1628 <ocrypto_mod_p256_sub>
   230f6:	466a      	mov	r2, sp
   230f8:	4629      	mov	r1, r5
   230fa:	4628      	mov	r0, r5
   230fc:	f7de fb2c 	bl	1758 <ocrypto_mod_p256_mul>
   23100:	463a      	mov	r2, r7
   23102:	4629      	mov	r1, r5
   23104:	4628      	mov	r0, r5
   23106:	f7de fa8f 	bl	1628 <ocrypto_mod_p256_sub>
   2310a:	b008      	add	sp, #32
   2310c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23110:	0002a85c 	.word	0x0002a85c

00023114 <p256_zaddc>:
   23114:	b5f0      	push	{r4, r5, r6, r7, lr}
   23116:	b099      	sub	sp, #100	; 0x64
   23118:	4604      	mov	r4, r0
   2311a:	460d      	mov	r5, r1
   2311c:	460a      	mov	r2, r1
   2311e:	4601      	mov	r1, r0
   23120:	4668      	mov	r0, sp
   23122:	f7de fa81 	bl	1628 <ocrypto_mod_p256_sub>
   23126:	4669      	mov	r1, sp
   23128:	4668      	mov	r0, sp
   2312a:	f7de fb2d 	bl	1788 <ocrypto_mod_p256_sqr>
   2312e:	466a      	mov	r2, sp
   23130:	4621      	mov	r1, r4
   23132:	a808      	add	r0, sp, #32
   23134:	f105 0620 	add.w	r6, r5, #32
   23138:	f104 0720 	add.w	r7, r4, #32
   2313c:	f7de fb0c 	bl	1758 <ocrypto_mod_p256_mul>
   23140:	466a      	mov	r2, sp
   23142:	4629      	mov	r1, r5
   23144:	4668      	mov	r0, sp
   23146:	f7de fb07 	bl	1758 <ocrypto_mod_p256_mul>
   2314a:	4632      	mov	r2, r6
   2314c:	4639      	mov	r1, r7
   2314e:	a810      	add	r0, sp, #64	; 0x40
   23150:	f7de fa2c 	bl	15ac <ocrypto_mod_p256_add>
   23154:	4632      	mov	r2, r6
   23156:	4639      	mov	r1, r7
   23158:	4630      	mov	r0, r6
   2315a:	f7de fa65 	bl	1628 <ocrypto_mod_p256_sub>
   2315e:	4631      	mov	r1, r6
   23160:	4628      	mov	r0, r5
   23162:	f7de fb11 	bl	1788 <ocrypto_mod_p256_sqr>
   23166:	466a      	mov	r2, sp
   23168:	a908      	add	r1, sp, #32
   2316a:	4620      	mov	r0, r4
   2316c:	f7de fa1e 	bl	15ac <ocrypto_mod_p256_add>
   23170:	4622      	mov	r2, r4
   23172:	4629      	mov	r1, r5
   23174:	4628      	mov	r0, r5
   23176:	f7de fa57 	bl	1628 <ocrypto_mod_p256_sub>
   2317a:	466a      	mov	r2, sp
   2317c:	a908      	add	r1, sp, #32
   2317e:	4668      	mov	r0, sp
   23180:	f7de fa52 	bl	1628 <ocrypto_mod_p256_sub>
   23184:	466a      	mov	r2, sp
   23186:	4639      	mov	r1, r7
   23188:	4638      	mov	r0, r7
   2318a:	f7de fae5 	bl	1758 <ocrypto_mod_p256_mul>
   2318e:	462a      	mov	r2, r5
   23190:	a908      	add	r1, sp, #32
   23192:	4668      	mov	r0, sp
   23194:	f7de fa48 	bl	1628 <ocrypto_mod_p256_sub>
   23198:	466a      	mov	r2, sp
   2319a:	4631      	mov	r1, r6
   2319c:	4630      	mov	r0, r6
   2319e:	f7de fadb 	bl	1758 <ocrypto_mod_p256_mul>
   231a2:	463a      	mov	r2, r7
   231a4:	4631      	mov	r1, r6
   231a6:	4630      	mov	r0, r6
   231a8:	f7de fa3e 	bl	1628 <ocrypto_mod_p256_sub>
   231ac:	a910      	add	r1, sp, #64	; 0x40
   231ae:	4668      	mov	r0, sp
   231b0:	f7de faea 	bl	1788 <ocrypto_mod_p256_sqr>
   231b4:	4622      	mov	r2, r4
   231b6:	4669      	mov	r1, sp
   231b8:	4620      	mov	r0, r4
   231ba:	f7de fa35 	bl	1628 <ocrypto_mod_p256_sub>
   231be:	a908      	add	r1, sp, #32
   231c0:	4622      	mov	r2, r4
   231c2:	4608      	mov	r0, r1
   231c4:	f7de fa30 	bl	1628 <ocrypto_mod_p256_sub>
   231c8:	a910      	add	r1, sp, #64	; 0x40
   231ca:	aa08      	add	r2, sp, #32
   231cc:	4608      	mov	r0, r1
   231ce:	f7de fac3 	bl	1758 <ocrypto_mod_p256_mul>
   231d2:	463a      	mov	r2, r7
   231d4:	a910      	add	r1, sp, #64	; 0x40
   231d6:	4638      	mov	r0, r7
   231d8:	f7de fa26 	bl	1628 <ocrypto_mod_p256_sub>
   231dc:	b019      	add	sp, #100	; 0x64
   231de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000231e0 <p256_zaddu>:
   231e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   231e4:	b088      	sub	sp, #32
   231e6:	460c      	mov	r4, r1
   231e8:	4605      	mov	r5, r0
   231ea:	4690      	mov	r8, r2
   231ec:	460a      	mov	r2, r1
   231ee:	4601      	mov	r1, r0
   231f0:	4668      	mov	r0, sp
   231f2:	f7de fa19 	bl	1628 <ocrypto_mod_p256_sub>
   231f6:	4669      	mov	r1, sp
   231f8:	4668      	mov	r0, sp
   231fa:	f7de fac5 	bl	1788 <ocrypto_mod_p256_sqr>
   231fe:	466a      	mov	r2, sp
   23200:	4629      	mov	r1, r5
   23202:	4628      	mov	r0, r5
   23204:	f104 0620 	add.w	r6, r4, #32
   23208:	f7de faa6 	bl	1758 <ocrypto_mod_p256_mul>
   2320c:	f105 0720 	add.w	r7, r5, #32
   23210:	466a      	mov	r2, sp
   23212:	4621      	mov	r1, r4
   23214:	4668      	mov	r0, sp
   23216:	f7de fa9f 	bl	1758 <ocrypto_mod_p256_mul>
   2321a:	4632      	mov	r2, r6
   2321c:	4639      	mov	r1, r7
   2321e:	4630      	mov	r0, r6
   23220:	f7de fa02 	bl	1628 <ocrypto_mod_p256_sub>
   23224:	4631      	mov	r1, r6
   23226:	4620      	mov	r0, r4
   23228:	f7de faae 	bl	1788 <ocrypto_mod_p256_sqr>
   2322c:	462a      	mov	r2, r5
   2322e:	4621      	mov	r1, r4
   23230:	4620      	mov	r0, r4
   23232:	f7de f9f9 	bl	1628 <ocrypto_mod_p256_sub>
   23236:	466a      	mov	r2, sp
   23238:	4621      	mov	r1, r4
   2323a:	4620      	mov	r0, r4
   2323c:	f7de f9f4 	bl	1628 <ocrypto_mod_p256_sub>
   23240:	466a      	mov	r2, sp
   23242:	4629      	mov	r1, r5
   23244:	4640      	mov	r0, r8
   23246:	f7de f9ef 	bl	1628 <ocrypto_mod_p256_sub>
   2324a:	4642      	mov	r2, r8
   2324c:	4639      	mov	r1, r7
   2324e:	4638      	mov	r0, r7
   23250:	f7de fa82 	bl	1758 <ocrypto_mod_p256_mul>
   23254:	4622      	mov	r2, r4
   23256:	4629      	mov	r1, r5
   23258:	4668      	mov	r0, sp
   2325a:	f7de f9e5 	bl	1628 <ocrypto_mod_p256_sub>
   2325e:	466a      	mov	r2, sp
   23260:	4631      	mov	r1, r6
   23262:	4630      	mov	r0, r6
   23264:	f7de fa78 	bl	1758 <ocrypto_mod_p256_mul>
   23268:	463a      	mov	r2, r7
   2326a:	4631      	mov	r1, r6
   2326c:	4630      	mov	r0, r6
   2326e:	f7de f9db 	bl	1628 <ocrypto_mod_p256_sub>
   23272:	b008      	add	sp, #32
   23274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023278 <ocrypto_curve_p256_from64bytes>:
   23278:	b570      	push	{r4, r5, r6, lr}
   2327a:	f100 0620 	add.w	r6, r0, #32
   2327e:	b090      	sub	sp, #64	; 0x40
   23280:	460d      	mov	r5, r1
   23282:	4604      	mov	r4, r0
   23284:	f000 f914 	bl	234b0 <ocrypto_mod_p256_from_bytes>
   23288:	f105 0120 	add.w	r1, r5, #32
   2328c:	4630      	mov	r0, r6
   2328e:	f000 f90f 	bl	234b0 <ocrypto_mod_p256_from_bytes>
   23292:	4621      	mov	r1, r4
   23294:	a808      	add	r0, sp, #32
   23296:	f7de fa77 	bl	1788 <ocrypto_mod_p256_sqr>
   2329a:	a908      	add	r1, sp, #32
   2329c:	4608      	mov	r0, r1
   2329e:	4a0d      	ldr	r2, [pc, #52]	; (232d4 <ocrypto_curve_p256_from64bytes+0x5c>)
   232a0:	f7de f984 	bl	15ac <ocrypto_mod_p256_add>
   232a4:	a908      	add	r1, sp, #32
   232a6:	4622      	mov	r2, r4
   232a8:	4608      	mov	r0, r1
   232aa:	f7de fa55 	bl	1758 <ocrypto_mod_p256_mul>
   232ae:	a908      	add	r1, sp, #32
   232b0:	4a09      	ldr	r2, [pc, #36]	; (232d8 <ocrypto_curve_p256_from64bytes+0x60>)
   232b2:	4608      	mov	r0, r1
   232b4:	f7de f97a 	bl	15ac <ocrypto_mod_p256_add>
   232b8:	4631      	mov	r1, r6
   232ba:	4668      	mov	r0, sp
   232bc:	f7de fa64 	bl	1788 <ocrypto_mod_p256_sqr>
   232c0:	2220      	movs	r2, #32
   232c2:	4669      	mov	r1, sp
   232c4:	eb0d 0002 	add.w	r0, sp, r2
   232c8:	f7de f942 	bl	1550 <ocrypto_constant_time_equal>
   232cc:	3801      	subs	r0, #1
   232ce:	b010      	add	sp, #64	; 0x40
   232d0:	bd70      	pop	{r4, r5, r6, pc}
   232d2:	bf00      	nop
   232d4:	0002a85c 	.word	0x0002a85c
   232d8:	0002a87c 	.word	0x0002a87c

000232dc <ocrypto_curve_p256_to32bytes>:
   232dc:	f000 b902 	b.w	234e4 <ocrypto_mod_p256_to_bytes>

000232e0 <ocrypto_curve_p256_to64bytes>:
   232e0:	b538      	push	{r3, r4, r5, lr}
   232e2:	4604      	mov	r4, r0
   232e4:	460d      	mov	r5, r1
   232e6:	f000 f8fd 	bl	234e4 <ocrypto_mod_p256_to_bytes>
   232ea:	f105 0120 	add.w	r1, r5, #32
   232ee:	f104 0020 	add.w	r0, r4, #32
   232f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   232f6:	f000 b8f5 	b.w	234e4 <ocrypto_mod_p256_to_bytes>
   232fa:	bf00      	nop

000232fc <ocrypto_curve_p256_scalarmult>:
   232fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23300:	4613      	mov	r3, r2
   23302:	b0b8      	sub	sp, #224	; 0xe0
   23304:	4a54      	ldr	r2, [pc, #336]	; (23458 <ocrypto_curve_p256_scalarmult+0x15c>)
   23306:	4689      	mov	r9, r1
   23308:	4680      	mov	r8, r0
   2330a:	4619      	mov	r1, r3
   2330c:	a810      	add	r0, sp, #64	; 0x40
   2330e:	f7dd ff31 	bl	1174 <ocrypto_bigint_sub256>
   23312:	4952      	ldr	r1, [pc, #328]	; (2345c <ocrypto_curve_p256_scalarmult+0x160>)
   23314:	4602      	mov	r2, r0
   23316:	a810      	add	r0, sp, #64	; 0x40
   23318:	f7dd ff4c 	bl	11b4 <ocrypto_bigint_cadd256>
   2331c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   2331e:	494e      	ldr	r1, [pc, #312]	; (23458 <ocrypto_curve_p256_scalarmult+0x15c>)
   23320:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   23324:	4607      	mov	r7, r0
   23326:	f1c6 0201 	rsb	r2, r6, #1
   2332a:	a810      	add	r0, sp, #64	; 0x40
   2332c:	f7dd ff42 	bl	11b4 <ocrypto_bigint_cadd256>
   23330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   23332:	464a      	mov	r2, r9
   23334:	ea6f 0a03 	mvn.w	sl, r3
   23338:	a928      	add	r1, sp, #160	; 0xa0
   2333a:	a818      	add	r0, sp, #96	; 0x60
   2333c:	f7ff fe8e 	bl	2305c <p256_zdblu>
   23340:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   23344:	a920      	add	r1, sp, #128	; 0x80
   23346:	f1ca 0201 	rsb	r2, sl, #1
   2334a:	4608      	mov	r0, r1
   2334c:	f000 f892 	bl	23474 <ocrypto_mod_p256_cneg>
   23350:	f1c7 0701 	rsb	r7, r7, #1
   23354:	24fe      	movs	r4, #254	; 0xfe
   23356:	466a      	mov	r2, sp
   23358:	a918      	add	r1, sp, #96	; 0x60
   2335a:	a828      	add	r0, sp, #160	; 0xa0
   2335c:	f7ff ff40 	bl	231e0 <p256_zaddu>
   23360:	1162      	asrs	r2, r4, #5
   23362:	ab38      	add	r3, sp, #224	; 0xe0
   23364:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23368:	f004 011f 	and.w	r1, r4, #31
   2336c:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   23370:	40cb      	lsrs	r3, r1
   23372:	4655      	mov	r5, sl
   23374:	f003 0a01 	and.w	sl, r3, #1
   23378:	ea8a 0505 	eor.w	r5, sl, r5
   2337c:	462a      	mov	r2, r5
   2337e:	a928      	add	r1, sp, #160	; 0xa0
   23380:	a818      	add	r0, sp, #96	; 0x60
   23382:	f7dd ff73 	bl	126c <ocrypto_bigint_cswap256>
   23386:	462a      	mov	r2, r5
   23388:	a930      	add	r1, sp, #192	; 0xc0
   2338a:	a820      	add	r0, sp, #128	; 0x80
   2338c:	f7dd ff6e 	bl	126c <ocrypto_bigint_cswap256>
   23390:	3c01      	subs	r4, #1
   23392:	a928      	add	r1, sp, #160	; 0xa0
   23394:	a818      	add	r0, sp, #96	; 0x60
   23396:	f7ff febd 	bl	23114 <p256_zaddc>
   2339a:	1c63      	adds	r3, r4, #1
   2339c:	d1db      	bne.n	23356 <ocrypto_curve_p256_scalarmult+0x5a>
   2339e:	f1ca 0201 	rsb	r2, sl, #1
   233a2:	a920      	add	r1, sp, #128	; 0x80
   233a4:	a808      	add	r0, sp, #32
   233a6:	f000 f865 	bl	23474 <ocrypto_mod_p256_cneg>
   233aa:	ea86 060a 	eor.w	r6, r6, sl
   233ae:	466a      	mov	r2, sp
   233b0:	a918      	add	r1, sp, #96	; 0x60
   233b2:	a828      	add	r0, sp, #160	; 0xa0
   233b4:	f7ff ff14 	bl	231e0 <p256_zaddu>
   233b8:	a928      	add	r1, sp, #160	; 0xa0
   233ba:	4632      	mov	r2, r6
   233bc:	a818      	add	r0, sp, #96	; 0x60
   233be:	f7dd ff55 	bl	126c <ocrypto_bigint_cswap256>
   233c2:	4632      	mov	r2, r6
   233c4:	a930      	add	r1, sp, #192	; 0xc0
   233c6:	a820      	add	r0, sp, #128	; 0x80
   233c8:	f7dd ff50 	bl	126c <ocrypto_bigint_cswap256>
   233cc:	a908      	add	r1, sp, #32
   233ce:	466a      	mov	r2, sp
   233d0:	4608      	mov	r0, r1
   233d2:	f7de f9c1 	bl	1758 <ocrypto_mod_p256_mul>
   233d6:	a908      	add	r1, sp, #32
   233d8:	4608      	mov	r0, r1
   233da:	f000 f89d 	bl	23518 <ocrypto_mod_p256_inv>
   233de:	a908      	add	r1, sp, #32
   233e0:	f108 0420 	add.w	r4, r8, #32
   233e4:	f109 0220 	add.w	r2, r9, #32
   233e8:	4608      	mov	r0, r1
   233ea:	f7de f9b5 	bl	1758 <ocrypto_mod_p256_mul>
   233ee:	a920      	add	r1, sp, #128	; 0x80
   233f0:	aa08      	add	r2, sp, #32
   233f2:	4620      	mov	r0, r4
   233f4:	f7de f9b0 	bl	1758 <ocrypto_mod_p256_mul>
   233f8:	aa08      	add	r2, sp, #32
   233fa:	a918      	add	r1, sp, #96	; 0x60
   233fc:	4668      	mov	r0, sp
   233fe:	f7de f9ab 	bl	1758 <ocrypto_mod_p256_mul>
   23402:	4669      	mov	r1, sp
   23404:	4668      	mov	r0, sp
   23406:	f7de f9bf 	bl	1788 <ocrypto_mod_p256_sqr>
   2340a:	aa18      	add	r2, sp, #96	; 0x60
   2340c:	4669      	mov	r1, sp
   2340e:	a808      	add	r0, sp, #32
   23410:	f7de f9a2 	bl	1758 <ocrypto_mod_p256_mul>
   23414:	4621      	mov	r1, r4
   23416:	4668      	mov	r0, sp
   23418:	f7de f9b6 	bl	1788 <ocrypto_mod_p256_sqr>
   2341c:	aa08      	add	r2, sp, #32
   2341e:	4669      	mov	r1, sp
   23420:	4610      	mov	r0, r2
   23422:	f7de f901 	bl	1628 <ocrypto_mod_p256_sub>
   23426:	4a0e      	ldr	r2, [pc, #56]	; (23460 <ocrypto_curve_p256_scalarmult+0x164>)
   23428:	a908      	add	r1, sp, #32
   2342a:	4668      	mov	r0, sp
   2342c:	f7de f8fc 	bl	1628 <ocrypto_mod_p256_sub>
   23430:	4620      	mov	r0, r4
   23432:	2120      	movs	r1, #32
   23434:	f7de f8a0 	bl	1578 <ocrypto_constant_time_is_zero>
   23438:	a908      	add	r1, sp, #32
   2343a:	4243      	negs	r3, r0
   2343c:	4602      	mov	r2, r0
   2343e:	4668      	mov	r0, sp
   23440:	431f      	orrs	r7, r3
   23442:	f7dd ff13 	bl	126c <ocrypto_bigint_cswap256>
   23446:	4640      	mov	r0, r8
   23448:	4a06      	ldr	r2, [pc, #24]	; (23464 <ocrypto_curve_p256_scalarmult+0x168>)
   2344a:	4669      	mov	r1, sp
   2344c:	f7de f984 	bl	1758 <ocrypto_mod_p256_mul>
   23450:	4638      	mov	r0, r7
   23452:	b038      	add	sp, #224	; 0xe0
   23454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23458:	0002a89c 	.word	0x0002a89c
   2345c:	0002a81c 	.word	0x0002a81c
   23460:	0002a87c 	.word	0x0002a87c
   23464:	0002a83c 	.word	0x0002a83c

00023468 <ocrypto_curve_p256_scalarmult_base>:
   23468:	460a      	mov	r2, r1
   2346a:	4901      	ldr	r1, [pc, #4]	; (23470 <ocrypto_curve_p256_scalarmult_base+0x8>)
   2346c:	f7ff bf46 	b.w	232fc <ocrypto_curve_p256_scalarmult>
   23470:	0002a7dc 	.word	0x0002a7dc

00023474 <ocrypto_mod_p256_cneg>:
   23474:	b570      	push	{r4, r5, r6, lr}
   23476:	b088      	sub	sp, #32
   23478:	4604      	mov	r4, r0
   2347a:	460d      	mov	r5, r1
   2347c:	4616      	mov	r6, r2
   2347e:	2100      	movs	r1, #0
   23480:	2220      	movs	r2, #32
   23482:	4668      	mov	r0, sp
   23484:	f003 feda 	bl	2723c <memset>
   23488:	2300      	movs	r3, #0
   2348a:	4629      	mov	r1, r5
   2348c:	2220      	movs	r2, #32
   2348e:	4620      	mov	r0, r4
   23490:	9300      	str	r3, [sp, #0]
   23492:	f003 fec8 	bl	27226 <memcpy>
   23496:	462a      	mov	r2, r5
   23498:	4669      	mov	r1, sp
   2349a:	4668      	mov	r0, sp
   2349c:	f7de f8c4 	bl	1628 <ocrypto_mod_p256_sub>
   234a0:	4632      	mov	r2, r6
   234a2:	4669      	mov	r1, sp
   234a4:	4620      	mov	r0, r4
   234a6:	f7dd fee1 	bl	126c <ocrypto_bigint_cswap256>
   234aa:	b008      	add	sp, #32
   234ac:	bd70      	pop	{r4, r5, r6, pc}
   234ae:	bf00      	nop

000234b0 <ocrypto_mod_p256_from_bytes>:
   234b0:	680b      	ldr	r3, [r1, #0]
   234b2:	ba1b      	rev	r3, r3
   234b4:	61c3      	str	r3, [r0, #28]
   234b6:	684b      	ldr	r3, [r1, #4]
   234b8:	ba1b      	rev	r3, r3
   234ba:	6183      	str	r3, [r0, #24]
   234bc:	688b      	ldr	r3, [r1, #8]
   234be:	ba1b      	rev	r3, r3
   234c0:	6143      	str	r3, [r0, #20]
   234c2:	68cb      	ldr	r3, [r1, #12]
   234c4:	ba1b      	rev	r3, r3
   234c6:	6103      	str	r3, [r0, #16]
   234c8:	690b      	ldr	r3, [r1, #16]
   234ca:	ba1b      	rev	r3, r3
   234cc:	60c3      	str	r3, [r0, #12]
   234ce:	694b      	ldr	r3, [r1, #20]
   234d0:	ba1b      	rev	r3, r3
   234d2:	6083      	str	r3, [r0, #8]
   234d4:	698b      	ldr	r3, [r1, #24]
   234d6:	ba1b      	rev	r3, r3
   234d8:	6043      	str	r3, [r0, #4]
   234da:	69cb      	ldr	r3, [r1, #28]
   234dc:	ba1b      	rev	r3, r3
   234de:	6003      	str	r3, [r0, #0]
   234e0:	4770      	bx	lr
   234e2:	bf00      	nop

000234e4 <ocrypto_mod_p256_to_bytes>:
   234e4:	69cb      	ldr	r3, [r1, #28]
   234e6:	ba1b      	rev	r3, r3
   234e8:	6003      	str	r3, [r0, #0]
   234ea:	698b      	ldr	r3, [r1, #24]
   234ec:	ba1b      	rev	r3, r3
   234ee:	6043      	str	r3, [r0, #4]
   234f0:	694b      	ldr	r3, [r1, #20]
   234f2:	ba1b      	rev	r3, r3
   234f4:	6083      	str	r3, [r0, #8]
   234f6:	690b      	ldr	r3, [r1, #16]
   234f8:	ba1b      	rev	r3, r3
   234fa:	60c3      	str	r3, [r0, #12]
   234fc:	68cb      	ldr	r3, [r1, #12]
   234fe:	ba1b      	rev	r3, r3
   23500:	6103      	str	r3, [r0, #16]
   23502:	688b      	ldr	r3, [r1, #8]
   23504:	ba1b      	rev	r3, r3
   23506:	6143      	str	r3, [r0, #20]
   23508:	684b      	ldr	r3, [r1, #4]
   2350a:	ba1b      	rev	r3, r3
   2350c:	6183      	str	r3, [r0, #24]
   2350e:	680b      	ldr	r3, [r1, #0]
   23510:	ba1b      	rev	r3, r3
   23512:	61c3      	str	r3, [r0, #28]
   23514:	4770      	bx	lr
   23516:	bf00      	nop

00023518 <ocrypto_mod_p256_inv>:
   23518:	b570      	push	{r4, r5, r6, lr}
   2351a:	b098      	sub	sp, #96	; 0x60
   2351c:	460d      	mov	r5, r1
   2351e:	4606      	mov	r6, r0
   23520:	a810      	add	r0, sp, #64	; 0x40
   23522:	f7de f931 	bl	1788 <ocrypto_mod_p256_sqr>
   23526:	462a      	mov	r2, r5
   23528:	a910      	add	r1, sp, #64	; 0x40
   2352a:	4668      	mov	r0, sp
   2352c:	f7de f914 	bl	1758 <ocrypto_mod_p256_mul>
   23530:	4669      	mov	r1, sp
   23532:	a810      	add	r0, sp, #64	; 0x40
   23534:	f7de f928 	bl	1788 <ocrypto_mod_p256_sqr>
   23538:	a910      	add	r1, sp, #64	; 0x40
   2353a:	4608      	mov	r0, r1
   2353c:	f7de f924 	bl	1788 <ocrypto_mod_p256_sqr>
   23540:	466a      	mov	r2, sp
   23542:	a910      	add	r1, sp, #64	; 0x40
   23544:	a808      	add	r0, sp, #32
   23546:	f7de f907 	bl	1758 <ocrypto_mod_p256_mul>
   2354a:	a908      	add	r1, sp, #32
   2354c:	a810      	add	r0, sp, #64	; 0x40
   2354e:	f7de f91b 	bl	1788 <ocrypto_mod_p256_sqr>
   23552:	a910      	add	r1, sp, #64	; 0x40
   23554:	4608      	mov	r0, r1
   23556:	f7de f917 	bl	1788 <ocrypto_mod_p256_sqr>
   2355a:	a910      	add	r1, sp, #64	; 0x40
   2355c:	4608      	mov	r0, r1
   2355e:	f7de f913 	bl	1788 <ocrypto_mod_p256_sqr>
   23562:	a910      	add	r1, sp, #64	; 0x40
   23564:	4608      	mov	r0, r1
   23566:	f7de f90f 	bl	1788 <ocrypto_mod_p256_sqr>
   2356a:	a910      	add	r1, sp, #64	; 0x40
   2356c:	aa08      	add	r2, sp, #32
   2356e:	4608      	mov	r0, r1
   23570:	f7de f8f2 	bl	1758 <ocrypto_mod_p256_mul>
   23574:	a910      	add	r1, sp, #64	; 0x40
   23576:	4608      	mov	r0, r1
   23578:	f7de f906 	bl	1788 <ocrypto_mod_p256_sqr>
   2357c:	a910      	add	r1, sp, #64	; 0x40
   2357e:	4608      	mov	r0, r1
   23580:	f7de f902 	bl	1788 <ocrypto_mod_p256_sqr>
   23584:	a910      	add	r1, sp, #64	; 0x40
   23586:	466a      	mov	r2, sp
   23588:	a808      	add	r0, sp, #32
   2358a:	f7de f8e5 	bl	1758 <ocrypto_mod_p256_mul>
   2358e:	2405      	movs	r4, #5
   23590:	a908      	add	r1, sp, #32
   23592:	a810      	add	r0, sp, #64	; 0x40
   23594:	f7de f8f8 	bl	1788 <ocrypto_mod_p256_sqr>
   23598:	a910      	add	r1, sp, #64	; 0x40
   2359a:	4608      	mov	r0, r1
   2359c:	f7de f8f4 	bl	1788 <ocrypto_mod_p256_sqr>
   235a0:	3c01      	subs	r4, #1
   235a2:	a910      	add	r1, sp, #64	; 0x40
   235a4:	d1f5      	bne.n	23592 <ocrypto_mod_p256_inv+0x7a>
   235a6:	aa08      	add	r2, sp, #32
   235a8:	4608      	mov	r0, r1
   235aa:	f7de f8d5 	bl	1758 <ocrypto_mod_p256_mul>
   235ae:	2405      	movs	r4, #5
   235b0:	a910      	add	r1, sp, #64	; 0x40
   235b2:	4608      	mov	r0, r1
   235b4:	f7de f8e8 	bl	1788 <ocrypto_mod_p256_sqr>
   235b8:	a910      	add	r1, sp, #64	; 0x40
   235ba:	4608      	mov	r0, r1
   235bc:	f7de f8e4 	bl	1788 <ocrypto_mod_p256_sqr>
   235c0:	3c01      	subs	r4, #1
   235c2:	d1f5      	bne.n	235b0 <ocrypto_mod_p256_inv+0x98>
   235c4:	a910      	add	r1, sp, #64	; 0x40
   235c6:	aa08      	add	r2, sp, #32
   235c8:	4608      	mov	r0, r1
   235ca:	f7de f8c5 	bl	1758 <ocrypto_mod_p256_mul>
   235ce:	a910      	add	r1, sp, #64	; 0x40
   235d0:	a808      	add	r0, sp, #32
   235d2:	f7de f8d9 	bl	1788 <ocrypto_mod_p256_sqr>
   235d6:	a908      	add	r1, sp, #32
   235d8:	4608      	mov	r0, r1
   235da:	f7de f8d5 	bl	1788 <ocrypto_mod_p256_sqr>
   235de:	a908      	add	r1, sp, #32
   235e0:	466a      	mov	r2, sp
   235e2:	4668      	mov	r0, sp
   235e4:	f7de f8b8 	bl	1758 <ocrypto_mod_p256_mul>
   235e8:	2410      	movs	r4, #16
   235ea:	4669      	mov	r1, sp
   235ec:	a810      	add	r0, sp, #64	; 0x40
   235ee:	f7de f8cb 	bl	1788 <ocrypto_mod_p256_sqr>
   235f2:	a910      	add	r1, sp, #64	; 0x40
   235f4:	4608      	mov	r0, r1
   235f6:	f7de f8c7 	bl	1788 <ocrypto_mod_p256_sqr>
   235fa:	3c01      	subs	r4, #1
   235fc:	a910      	add	r1, sp, #64	; 0x40
   235fe:	d1f5      	bne.n	235ec <ocrypto_mod_p256_inv+0xd4>
   23600:	462a      	mov	r2, r5
   23602:	4608      	mov	r0, r1
   23604:	f7de f8a8 	bl	1758 <ocrypto_mod_p256_mul>
   23608:	2440      	movs	r4, #64	; 0x40
   2360a:	a910      	add	r1, sp, #64	; 0x40
   2360c:	4608      	mov	r0, r1
   2360e:	f7de f8bb 	bl	1788 <ocrypto_mod_p256_sqr>
   23612:	a910      	add	r1, sp, #64	; 0x40
   23614:	4608      	mov	r0, r1
   23616:	f7de f8b7 	bl	1788 <ocrypto_mod_p256_sqr>
   2361a:	3c01      	subs	r4, #1
   2361c:	d1f5      	bne.n	2360a <ocrypto_mod_p256_inv+0xf2>
   2361e:	a910      	add	r1, sp, #64	; 0x40
   23620:	466a      	mov	r2, sp
   23622:	4608      	mov	r0, r1
   23624:	f7de f898 	bl	1758 <ocrypto_mod_p256_mul>
   23628:	2410      	movs	r4, #16
   2362a:	a910      	add	r1, sp, #64	; 0x40
   2362c:	4608      	mov	r0, r1
   2362e:	f7de f8ab 	bl	1788 <ocrypto_mod_p256_sqr>
   23632:	a910      	add	r1, sp, #64	; 0x40
   23634:	4608      	mov	r0, r1
   23636:	f7de f8a7 	bl	1788 <ocrypto_mod_p256_sqr>
   2363a:	3c01      	subs	r4, #1
   2363c:	d1f5      	bne.n	2362a <ocrypto_mod_p256_inv+0x112>
   2363e:	a910      	add	r1, sp, #64	; 0x40
   23640:	466a      	mov	r2, sp
   23642:	4608      	mov	r0, r1
   23644:	f7de f888 	bl	1758 <ocrypto_mod_p256_mul>
   23648:	2410      	movs	r4, #16
   2364a:	a910      	add	r1, sp, #64	; 0x40
   2364c:	4608      	mov	r0, r1
   2364e:	f7de f89b 	bl	1788 <ocrypto_mod_p256_sqr>
   23652:	a910      	add	r1, sp, #64	; 0x40
   23654:	4608      	mov	r0, r1
   23656:	f7de f897 	bl	1788 <ocrypto_mod_p256_sqr>
   2365a:	3c01      	subs	r4, #1
   2365c:	d1f5      	bne.n	2364a <ocrypto_mod_p256_inv+0x132>
   2365e:	a910      	add	r1, sp, #64	; 0x40
   23660:	aa08      	add	r2, sp, #32
   23662:	4608      	mov	r0, r1
   23664:	f7de f878 	bl	1758 <ocrypto_mod_p256_mul>
   23668:	462a      	mov	r2, r5
   2366a:	a910      	add	r1, sp, #64	; 0x40
   2366c:	4630      	mov	r0, r6
   2366e:	f7de f873 	bl	1758 <ocrypto_mod_p256_mul>
   23672:	b018      	add	sp, #96	; 0x60
   23674:	bd70      	pop	{r4, r5, r6, pc}
   23676:	bf00      	nop

00023678 <nrf_cc3xx_platform_init>:
   23678:	b510      	push	{r4, lr}
   2367a:	4c0c      	ldr	r4, [pc, #48]	; (236ac <nrf_cc3xx_platform_init+0x34>)
   2367c:	6823      	ldr	r3, [r4, #0]
   2367e:	b113      	cbz	r3, 23686 <nrf_cc3xx_platform_init+0xe>
   23680:	4b0b      	ldr	r3, [pc, #44]	; (236b0 <nrf_cc3xx_platform_init+0x38>)
   23682:	681b      	ldr	r3, [r3, #0]
   23684:	b92b      	cbnz	r3, 23692 <nrf_cc3xx_platform_init+0x1a>
   23686:	f000 fe7d 	bl	24384 <CC_LibInit>
   2368a:	b930      	cbnz	r0, 2369a <nrf_cc3xx_platform_init+0x22>
   2368c:	4b08      	ldr	r3, [pc, #32]	; (236b0 <nrf_cc3xx_platform_init+0x38>)
   2368e:	2201      	movs	r2, #1
   23690:	601a      	str	r2, [r3, #0]
   23692:	2301      	movs	r3, #1
   23694:	6023      	str	r3, [r4, #0]
   23696:	2000      	movs	r0, #0
   23698:	bd10      	pop	{r4, pc}
   2369a:	3801      	subs	r0, #1
   2369c:	2806      	cmp	r0, #6
   2369e:	d901      	bls.n	236a4 <nrf_cc3xx_platform_init+0x2c>
   236a0:	4804      	ldr	r0, [pc, #16]	; (236b4 <nrf_cc3xx_platform_init+0x3c>)
   236a2:	bd10      	pop	{r4, pc}
   236a4:	4b04      	ldr	r3, [pc, #16]	; (236b8 <nrf_cc3xx_platform_init+0x40>)
   236a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   236aa:	bd10      	pop	{r4, pc}
   236ac:	200028ec 	.word	0x200028ec
   236b0:	200028f0 	.word	0x200028f0
   236b4:	ffff8ffe 	.word	0xffff8ffe
   236b8:	0002a8bc 	.word	0x0002a8bc

000236bc <nrf_cc3xx_platform_abort>:
   236bc:	f3bf 8f4f 	dsb	sy
   236c0:	4905      	ldr	r1, [pc, #20]	; (236d8 <nrf_cc3xx_platform_abort+0x1c>)
   236c2:	4b06      	ldr	r3, [pc, #24]	; (236dc <nrf_cc3xx_platform_abort+0x20>)
   236c4:	68ca      	ldr	r2, [r1, #12]
   236c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   236ca:	4313      	orrs	r3, r2
   236cc:	60cb      	str	r3, [r1, #12]
   236ce:	f3bf 8f4f 	dsb	sy
   236d2:	bf00      	nop
   236d4:	e7fd      	b.n	236d2 <nrf_cc3xx_platform_abort+0x16>
   236d6:	bf00      	nop
   236d8:	e000ed00 	.word	0xe000ed00
   236dc:	05fa0004 	.word	0x05fa0004

000236e0 <CC_PalAbort>:
   236e0:	b410      	push	{r4}
   236e2:	4b09      	ldr	r3, [pc, #36]	; (23708 <CC_PalAbort+0x28>)
   236e4:	4909      	ldr	r1, [pc, #36]	; (2370c <CC_PalAbort+0x2c>)
   236e6:	4c0a      	ldr	r4, [pc, #40]	; (23710 <CC_PalAbort+0x30>)
   236e8:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   236ec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   236f0:	6849      	ldr	r1, [r1, #4]
   236f2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   236f6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   236fa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   236fe:	2300      	movs	r3, #0
   23700:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   23704:	bc10      	pop	{r4}
   23706:	4708      	bx	r1
   23708:	5002b000 	.word	0x5002b000
   2370c:	2000068c 	.word	0x2000068c
   23710:	5002a000 	.word	0x5002a000

00023714 <nrf_cc3xx_platform_set_abort>:
   23714:	e9d0 1200 	ldrd	r1, r2, [r0]
   23718:	4b01      	ldr	r3, [pc, #4]	; (23720 <nrf_cc3xx_platform_set_abort+0xc>)
   2371a:	e9c3 1200 	strd	r1, r2, [r3]
   2371e:	4770      	bx	lr
   23720:	2000068c 	.word	0x2000068c

00023724 <nrf_cc3xx_platform_ctr_drbg_init>:
   23724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23728:	4c14      	ldr	r4, [pc, #80]	; (2377c <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   2372a:	4e15      	ldr	r6, [pc, #84]	; (23780 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   2372c:	2800      	cmp	r0, #0
   2372e:	bf18      	it	ne
   23730:	4604      	movne	r4, r0
   23732:	b083      	sub	sp, #12
   23734:	6823      	ldr	r3, [r4, #0]
   23736:	42b3      	cmp	r3, r6
   23738:	d01c      	beq.n	23774 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   2373a:	460d      	mov	r5, r1
   2373c:	4620      	mov	r0, r4
   2373e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   23742:	f104 0904 	add.w	r9, r4, #4
   23746:	4617      	mov	r7, r2
   23748:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   2374c:	f000 f8d0 	bl	238f0 <mbedtls_platform_zeroize>
   23750:	4648      	mov	r0, r9
   23752:	f000 fd05 	bl	24160 <cc_mbedtls_entropy_init>
   23756:	4640      	mov	r0, r8
   23758:	f000 fb32 	bl	23dc0 <cc_mbedtls_ctr_drbg_init>
   2375c:	4909      	ldr	r1, [pc, #36]	; (23784 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   2375e:	9700      	str	r7, [sp, #0]
   23760:	462b      	mov	r3, r5
   23762:	464a      	mov	r2, r9
   23764:	4640      	mov	r0, r8
   23766:	f000 fb41 	bl	23dec <cc_mbedtls_ctr_drbg_seed>
   2376a:	b900      	cbnz	r0, 2376e <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   2376c:	6026      	str	r6, [r4, #0]
   2376e:	b003      	add	sp, #12
   23770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23774:	2000      	movs	r0, #0
   23776:	b003      	add	sp, #12
   23778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2377c:	200028f4 	.word	0x200028f4
   23780:	5ac9bca5 	.word	0x5ac9bca5
   23784:	000241e1 	.word	0x000241e1

00023788 <nrf_cc3xx_platform_ctr_drbg_get>:
   23788:	b570      	push	{r4, r5, r6, lr}
   2378a:	4d0d      	ldr	r5, [pc, #52]	; (237c0 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   2378c:	2800      	cmp	r0, #0
   2378e:	bf18      	it	ne
   23790:	4605      	movne	r5, r0
   23792:	461e      	mov	r6, r3
   23794:	6828      	ldr	r0, [r5, #0]
   23796:	4b0b      	ldr	r3, [pc, #44]	; (237c4 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   23798:	4298      	cmp	r0, r3
   2379a:	b082      	sub	sp, #8
   2379c:	d10d      	bne.n	237ba <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   2379e:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   237a2:	2500      	movs	r5, #0
   237a4:	9500      	str	r5, [sp, #0]
   237a6:	462b      	mov	r3, r5
   237a8:	4614      	mov	r4, r2
   237aa:	f000 fb6d 	bl	23e88 <cc_mbedtls_ctr_drbg_random_with_add>
   237ae:	2800      	cmp	r0, #0
   237b0:	bf18      	it	ne
   237b2:	462c      	movne	r4, r5
   237b4:	6034      	str	r4, [r6, #0]
   237b6:	b002      	add	sp, #8
   237b8:	bd70      	pop	{r4, r5, r6, pc}
   237ba:	4803      	ldr	r0, [pc, #12]	; (237c8 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   237bc:	e7fb      	b.n	237b6 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   237be:	bf00      	nop
   237c0:	200028f4 	.word	0x200028f4
   237c4:	5ac9bca5 	.word	0x5ac9bca5
   237c8:	ffff8fe8 	.word	0xffff8fe8

000237cc <mutex_free>:
   237cc:	b510      	push	{r4, lr}
   237ce:	4604      	mov	r4, r0
   237d0:	b130      	cbz	r0, 237e0 <mutex_free+0x14>
   237d2:	6863      	ldr	r3, [r4, #4]
   237d4:	06db      	lsls	r3, r3, #27
   237d6:	d502      	bpl.n	237de <mutex_free+0x12>
   237d8:	2300      	movs	r3, #0
   237da:	6023      	str	r3, [r4, #0]
   237dc:	6063      	str	r3, [r4, #4]
   237de:	bd10      	pop	{r4, pc}
   237e0:	4b02      	ldr	r3, [pc, #8]	; (237ec <mutex_free+0x20>)
   237e2:	4803      	ldr	r0, [pc, #12]	; (237f0 <mutex_free+0x24>)
   237e4:	685b      	ldr	r3, [r3, #4]
   237e6:	4798      	blx	r3
   237e8:	e7f3      	b.n	237d2 <mutex_free+0x6>
   237ea:	bf00      	nop
   237ec:	2000068c 	.word	0x2000068c
   237f0:	0002a8d8 	.word	0x0002a8d8

000237f4 <mutex_lock>:
   237f4:	b1b0      	cbz	r0, 23824 <mutex_lock+0x30>
   237f6:	6843      	ldr	r3, [r0, #4]
   237f8:	b193      	cbz	r3, 23820 <mutex_lock+0x2c>
   237fa:	06db      	lsls	r3, r3, #27
   237fc:	d50e      	bpl.n	2381c <mutex_lock+0x28>
   237fe:	2301      	movs	r3, #1
   23800:	e850 2f00 	ldrex	r2, [r0]
   23804:	4619      	mov	r1, r3
   23806:	e840 1c00 	strex	ip, r1, [r0]
   2380a:	f09c 0f00 	teq	ip, #0
   2380e:	d1f7      	bne.n	23800 <mutex_lock+0xc>
   23810:	2a01      	cmp	r2, #1
   23812:	d0f5      	beq.n	23800 <mutex_lock+0xc>
   23814:	f3bf 8f5f 	dmb	sy
   23818:	2000      	movs	r0, #0
   2381a:	4770      	bx	lr
   2381c:	4803      	ldr	r0, [pc, #12]	; (2382c <mutex_lock+0x38>)
   2381e:	4770      	bx	lr
   23820:	4803      	ldr	r0, [pc, #12]	; (23830 <mutex_lock+0x3c>)
   23822:	4770      	bx	lr
   23824:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   23828:	4770      	bx	lr
   2382a:	bf00      	nop
   2382c:	ffff8fe9 	.word	0xffff8fe9
   23830:	ffff8fea 	.word	0xffff8fea

00023834 <mutex_unlock>:
   23834:	b168      	cbz	r0, 23852 <mutex_unlock+0x1e>
   23836:	6843      	ldr	r3, [r0, #4]
   23838:	b13b      	cbz	r3, 2384a <mutex_unlock+0x16>
   2383a:	06db      	lsls	r3, r3, #27
   2383c:	d507      	bpl.n	2384e <mutex_unlock+0x1a>
   2383e:	f3bf 8f5f 	dmb	sy
   23842:	2300      	movs	r3, #0
   23844:	6003      	str	r3, [r0, #0]
   23846:	4618      	mov	r0, r3
   23848:	4770      	bx	lr
   2384a:	4803      	ldr	r0, [pc, #12]	; (23858 <mutex_unlock+0x24>)
   2384c:	4770      	bx	lr
   2384e:	4803      	ldr	r0, [pc, #12]	; (2385c <mutex_unlock+0x28>)
   23850:	4770      	bx	lr
   23852:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   23856:	4770      	bx	lr
   23858:	ffff8fea 	.word	0xffff8fea
   2385c:	ffff8fe9 	.word	0xffff8fe9

00023860 <mutex_init>:
   23860:	b510      	push	{r4, lr}
   23862:	4604      	mov	r4, r0
   23864:	b120      	cbz	r0, 23870 <mutex_init+0x10>
   23866:	2200      	movs	r2, #0
   23868:	2311      	movs	r3, #17
   2386a:	6022      	str	r2, [r4, #0]
   2386c:	6063      	str	r3, [r4, #4]
   2386e:	bd10      	pop	{r4, pc}
   23870:	4801      	ldr	r0, [pc, #4]	; (23878 <mutex_init+0x18>)
   23872:	f7ff ff35 	bl	236e0 <CC_PalAbort>
   23876:	e7f6      	b.n	23866 <mutex_init+0x6>
   23878:	0002a900 	.word	0x0002a900

0002387c <nrf_cc3xx_platform_set_mutexes>:
   2387c:	b570      	push	{r4, r5, r6, lr}
   2387e:	e9d0 2300 	ldrd	r2, r3, [r0]
   23882:	4c13      	ldr	r4, [pc, #76]	; (238d0 <nrf_cc3xx_platform_set_mutexes+0x54>)
   23884:	4d13      	ldr	r5, [pc, #76]	; (238d4 <nrf_cc3xx_platform_set_mutexes+0x58>)
   23886:	6063      	str	r3, [r4, #4]
   23888:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   2388c:	e9c4 3002 	strd	r3, r0, [r4, #8]
   23890:	6022      	str	r2, [r4, #0]
   23892:	4b11      	ldr	r3, [pc, #68]	; (238d8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   23894:	6808      	ldr	r0, [r1, #0]
   23896:	6018      	str	r0, [r3, #0]
   23898:	6848      	ldr	r0, [r1, #4]
   2389a:	6058      	str	r0, [r3, #4]
   2389c:	6888      	ldr	r0, [r1, #8]
   2389e:	6098      	str	r0, [r3, #8]
   238a0:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   238a4:	60d8      	str	r0, [r3, #12]
   238a6:	6119      	str	r1, [r3, #16]
   238a8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   238ac:	06db      	lsls	r3, r3, #27
   238ae:	d50d      	bpl.n	238cc <nrf_cc3xx_platform_set_mutexes+0x50>
   238b0:	2300      	movs	r3, #0
   238b2:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   238b6:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   238ba:	f505 708a 	add.w	r0, r5, #276	; 0x114
   238be:	4790      	blx	r2
   238c0:	6823      	ldr	r3, [r4, #0]
   238c2:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   238c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   238ca:	4718      	bx	r3
   238cc:	bd70      	pop	{r4, r5, r6, pc}
   238ce:	bf00      	nop
   238d0:	2000069c 	.word	0x2000069c
   238d4:	200028f4 	.word	0x200028f4
   238d8:	200006ac 	.word	0x200006ac

000238dc <mbedtls_zeroize_internal>:
   238dc:	b138      	cbz	r0, 238ee <mbedtls_zeroize_internal+0x12>
   238de:	b131      	cbz	r1, 238ee <mbedtls_zeroize_internal+0x12>
   238e0:	4401      	add	r1, r0
   238e2:	2200      	movs	r2, #0
   238e4:	4603      	mov	r3, r0
   238e6:	3001      	adds	r0, #1
   238e8:	4281      	cmp	r1, r0
   238ea:	701a      	strb	r2, [r3, #0]
   238ec:	d1fa      	bne.n	238e4 <mbedtls_zeroize_internal+0x8>
   238ee:	4770      	bx	lr

000238f0 <mbedtls_platform_zeroize>:
   238f0:	b138      	cbz	r0, 23902 <mbedtls_platform_zeroize+0x12>
   238f2:	b131      	cbz	r1, 23902 <mbedtls_platform_zeroize+0x12>
   238f4:	4401      	add	r1, r0
   238f6:	2200      	movs	r2, #0
   238f8:	4603      	mov	r3, r0
   238fa:	3001      	adds	r0, #1
   238fc:	4288      	cmp	r0, r1
   238fe:	701a      	strb	r2, [r3, #0]
   23900:	d1fa      	bne.n	238f8 <mbedtls_platform_zeroize+0x8>
   23902:	4770      	bx	lr

00023904 <block_cipher_df>:
   23904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23908:	b0b7      	sub	sp, #220	; 0xdc
   2390a:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   2390e:	9005      	str	r0, [sp, #20]
   23910:	f200 8147 	bhi.w	23ba2 <block_cipher_df+0x29e>
   23914:	4614      	mov	r4, r2
   23916:	460d      	mov	r5, r1
   23918:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   2391c:	2100      	movs	r1, #0
   2391e:	48a2      	ldr	r0, [pc, #648]	; (23ba8 <block_cipher_df+0x2a4>)
   23920:	f003 fc8c 	bl	2723c <memset>
   23924:	a819      	add	r0, sp, #100	; 0x64
   23926:	f001 f9cb 	bl	24cc0 <cc_mbedtls_aes_init>
   2392a:	489f      	ldr	r0, [pc, #636]	; (23ba8 <block_cipher_df+0x2a4>)
   2392c:	2300      	movs	r3, #0
   2392e:	8203      	strh	r3, [r0, #16]
   23930:	ba63      	rev16	r3, r4
   23932:	8243      	strh	r3, [r0, #18]
   23934:	2320      	movs	r3, #32
   23936:	4629      	mov	r1, r5
   23938:	75c3      	strb	r3, [r0, #23]
   2393a:	4605      	mov	r5, r0
   2393c:	4622      	mov	r2, r4
   2393e:	3018      	adds	r0, #24
   23940:	f003 fc71 	bl	27226 <memcpy>
   23944:	462b      	mov	r3, r5
   23946:	4423      	add	r3, r4
   23948:	2280      	movs	r2, #128	; 0x80
   2394a:	761a      	strb	r2, [r3, #24]
   2394c:	4b97      	ldr	r3, [pc, #604]	; (23bac <block_cipher_df+0x2a8>)
   2394e:	930d      	str	r3, [sp, #52]	; 0x34
   23950:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   23954:	930e      	str	r3, [sp, #56]	; 0x38
   23956:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   2395a:	930f      	str	r3, [sp, #60]	; 0x3c
   2395c:	a90d      	add	r1, sp, #52	; 0x34
   2395e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   23962:	a819      	add	r0, sp, #100	; 0x64
   23964:	9310      	str	r3, [sp, #64]	; 0x40
   23966:	f001 f9c1 	bl	24cec <cc_mbedtls_aes_setkey_enc>
   2396a:	4605      	mov	r5, r0
   2396c:	2800      	cmp	r0, #0
   2396e:	f040 80f4 	bne.w	23b5a <block_cipher_df+0x256>
   23972:	f104 0319 	add.w	r3, r4, #25
   23976:	9306      	str	r3, [sp, #24]
   23978:	f10d 0820 	add.w	r8, sp, #32
   2397c:	ab11      	add	r3, sp, #68	; 0x44
   2397e:	9304      	str	r3, [sp, #16]
   23980:	9307      	str	r3, [sp, #28]
   23982:	46c1      	mov	r9, r8
   23984:	2210      	movs	r2, #16
   23986:	2100      	movs	r1, #0
   23988:	4648      	mov	r0, r9
   2398a:	f003 fc57 	bl	2723c <memset>
   2398e:	f8df a220 	ldr.w	sl, [pc, #544]	; 23bb0 <block_cipher_df+0x2ac>
   23992:	9b06      	ldr	r3, [sp, #24]
   23994:	9300      	str	r3, [sp, #0]
   23996:	f8cd 900c 	str.w	r9, [sp, #12]
   2399a:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   2399e:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   239a2:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   239a6:	f89d 5020 	ldrb.w	r5, [sp, #32]
   239aa:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   239ae:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   239b2:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   239b6:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   239ba:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   239be:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   239c2:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   239c6:	406a      	eors	r2, r5
   239c8:	ea8e 0e00 	eor.w	lr, lr, r0
   239cc:	9d00      	ldr	r5, [sp, #0]
   239ce:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   239d2:	9202      	str	r2, [sp, #8]
   239d4:	ea8c 0c03 	eor.w	ip, ip, r3
   239d8:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   239dc:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   239e0:	2d10      	cmp	r5, #16
   239e2:	ea80 0003 	eor.w	r0, r0, r3
   239e6:	462b      	mov	r3, r5
   239e8:	bf8c      	ite	hi
   239ea:	3b10      	subhi	r3, #16
   239ec:	1b6b      	subls	r3, r5, r5
   239ee:	9300      	str	r3, [sp, #0]
   239f0:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   239f4:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   239f8:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   239fc:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   23a00:	4061      	eors	r1, r4
   23a02:	405f      	eors	r7, r3
   23a04:	2400      	movs	r4, #0
   23a06:	406a      	eors	r2, r5
   23a08:	ea8b 0b06 	eor.w	fp, fp, r6
   23a0c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   23a10:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   23a14:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   23a18:	9601      	str	r6, [sp, #4]
   23a1a:	4626      	mov	r6, r4
   23a1c:	406b      	eors	r3, r5
   23a1e:	f36b 0607 	bfi	r6, fp, #0, #8
   23a22:	4625      	mov	r5, r4
   23a24:	f367 260f 	bfi	r6, r7, #8, #8
   23a28:	462f      	mov	r7, r5
   23a2a:	f361 0707 	bfi	r7, r1, #0, #8
   23a2e:	9902      	ldr	r1, [sp, #8]
   23a30:	f361 0507 	bfi	r5, r1, #0, #8
   23a34:	f362 250f 	bfi	r5, r2, #8, #8
   23a38:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   23a3c:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   23a40:	f363 270f 	bfi	r7, r3, #8, #8
   23a44:	ea82 0909 	eor.w	r9, r2, r9
   23a48:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   23a4c:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   23a50:	ea83 0808 	eor.w	r8, r3, r8
   23a54:	404a      	eors	r2, r1
   23a56:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   23a5a:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   23a5e:	f36e 0407 	bfi	r4, lr, #0, #8
   23a62:	404b      	eors	r3, r1
   23a64:	f368 4717 	bfi	r7, r8, #16, #8
   23a68:	f36c 240f 	bfi	r4, ip, #8, #8
   23a6c:	f363 671f 	bfi	r7, r3, #24, #8
   23a70:	9b03      	ldr	r3, [sp, #12]
   23a72:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   23a76:	f8dd e004 	ldr.w	lr, [sp, #4]
   23a7a:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   23a7e:	ea8c 0c0e 	eor.w	ip, ip, lr
   23a82:	f36c 4617 	bfi	r6, ip, #16, #8
   23a86:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   23a8a:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   23a8e:	ea8c 0c08 	eor.w	ip, ip, r8
   23a92:	f36c 661f 	bfi	r6, ip, #24, #8
   23a96:	f369 4517 	bfi	r5, r9, #16, #8
   23a9a:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   23a9e:	960b      	str	r6, [sp, #44]	; 0x2c
   23aa0:	f362 651f 	bfi	r5, r2, #24, #8
   23aa4:	f360 4417 	bfi	r4, r0, #16, #8
   23aa8:	9508      	str	r5, [sp, #32]
   23aaa:	ea8c 050e 	eor.w	r5, ip, lr
   23aae:	f365 641f 	bfi	r4, r5, #24, #8
   23ab2:	461a      	mov	r2, r3
   23ab4:	2101      	movs	r1, #1
   23ab6:	a819      	add	r0, sp, #100	; 0x64
   23ab8:	f10a 0a10 	add.w	sl, sl, #16
   23abc:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   23ac0:	f001 f92e 	bl	24d20 <cc_mbedtls_aes_crypt_ecb>
   23ac4:	2800      	cmp	r0, #0
   23ac6:	d168      	bne.n	23b9a <block_cipher_df+0x296>
   23ac8:	9b00      	ldr	r3, [sp, #0]
   23aca:	2b00      	cmp	r3, #0
   23acc:	f47f af65 	bne.w	2399a <block_cipher_df+0x96>
   23ad0:	9c07      	ldr	r4, [sp, #28]
   23ad2:	f8dd 900c 	ldr.w	r9, [sp, #12]
   23ad6:	4620      	mov	r0, r4
   23ad8:	2210      	movs	r2, #16
   23ada:	3410      	adds	r4, #16
   23adc:	4649      	mov	r1, r9
   23ade:	9407      	str	r4, [sp, #28]
   23ae0:	f003 fba1 	bl	27226 <memcpy>
   23ae4:	4a30      	ldr	r2, [pc, #192]	; (23ba8 <block_cipher_df+0x2a4>)
   23ae6:	78d3      	ldrb	r3, [r2, #3]
   23ae8:	3301      	adds	r3, #1
   23aea:	70d3      	strb	r3, [r2, #3]
   23aec:	ab19      	add	r3, sp, #100	; 0x64
   23aee:	429c      	cmp	r4, r3
   23af0:	f47f af48 	bne.w	23984 <block_cipher_df+0x80>
   23af4:	9904      	ldr	r1, [sp, #16]
   23af6:	2280      	movs	r2, #128	; 0x80
   23af8:	4618      	mov	r0, r3
   23afa:	f001 f8f7 	bl	24cec <cc_mbedtls_aes_setkey_enc>
   23afe:	46c8      	mov	r8, r9
   23b00:	4605      	mov	r5, r0
   23b02:	bb70      	cbnz	r0, 23b62 <block_cipher_df+0x25e>
   23b04:	9c05      	ldr	r4, [sp, #20]
   23b06:	f104 0620 	add.w	r6, r4, #32
   23b0a:	ab15      	add	r3, sp, #84	; 0x54
   23b0c:	461a      	mov	r2, r3
   23b0e:	2101      	movs	r1, #1
   23b10:	a819      	add	r0, sp, #100	; 0x64
   23b12:	f001 f905 	bl	24d20 <cc_mbedtls_aes_crypt_ecb>
   23b16:	2210      	movs	r2, #16
   23b18:	4605      	mov	r5, r0
   23b1a:	bb10      	cbnz	r0, 23b62 <block_cipher_df+0x25e>
   23b1c:	4620      	mov	r0, r4
   23b1e:	a915      	add	r1, sp, #84	; 0x54
   23b20:	3410      	adds	r4, #16
   23b22:	f003 fb80 	bl	27226 <memcpy>
   23b26:	42b4      	cmp	r4, r6
   23b28:	d1ef      	bne.n	23b0a <block_cipher_df+0x206>
   23b2a:	a819      	add	r0, sp, #100	; 0x64
   23b2c:	f001 f8d8 	bl	24ce0 <cc_mbedtls_aes_free>
   23b30:	481d      	ldr	r0, [pc, #116]	; (23ba8 <block_cipher_df+0x2a4>)
   23b32:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   23b36:	f7ff fedb 	bl	238f0 <mbedtls_platform_zeroize>
   23b3a:	9804      	ldr	r0, [sp, #16]
   23b3c:	2120      	movs	r1, #32
   23b3e:	f7ff fed7 	bl	238f0 <mbedtls_platform_zeroize>
   23b42:	a80d      	add	r0, sp, #52	; 0x34
   23b44:	2110      	movs	r1, #16
   23b46:	f7ff fed3 	bl	238f0 <mbedtls_platform_zeroize>
   23b4a:	4640      	mov	r0, r8
   23b4c:	2110      	movs	r1, #16
   23b4e:	f7ff fecf 	bl	238f0 <mbedtls_platform_zeroize>
   23b52:	4628      	mov	r0, r5
   23b54:	b037      	add	sp, #220	; 0xdc
   23b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b5a:	ab11      	add	r3, sp, #68	; 0x44
   23b5c:	9304      	str	r3, [sp, #16]
   23b5e:	f10d 0820 	add.w	r8, sp, #32
   23b62:	a819      	add	r0, sp, #100	; 0x64
   23b64:	f001 f8bc 	bl	24ce0 <cc_mbedtls_aes_free>
   23b68:	480f      	ldr	r0, [pc, #60]	; (23ba8 <block_cipher_df+0x2a4>)
   23b6a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   23b6e:	f7ff febf 	bl	238f0 <mbedtls_platform_zeroize>
   23b72:	9804      	ldr	r0, [sp, #16]
   23b74:	2120      	movs	r1, #32
   23b76:	f7ff febb 	bl	238f0 <mbedtls_platform_zeroize>
   23b7a:	a80d      	add	r0, sp, #52	; 0x34
   23b7c:	2110      	movs	r1, #16
   23b7e:	f7ff feb7 	bl	238f0 <mbedtls_platform_zeroize>
   23b82:	4640      	mov	r0, r8
   23b84:	2110      	movs	r1, #16
   23b86:	f7ff feb3 	bl	238f0 <mbedtls_platform_zeroize>
   23b8a:	9805      	ldr	r0, [sp, #20]
   23b8c:	2120      	movs	r1, #32
   23b8e:	f7ff feaf 	bl	238f0 <mbedtls_platform_zeroize>
   23b92:	4628      	mov	r0, r5
   23b94:	b037      	add	sp, #220	; 0xdc
   23b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b9a:	f8dd 800c 	ldr.w	r8, [sp, #12]
   23b9e:	4605      	mov	r5, r0
   23ba0:	e7df      	b.n	23b62 <block_cipher_df+0x25e>
   23ba2:	f06f 0537 	mvn.w	r5, #55	; 0x37
   23ba6:	e7f4      	b.n	23b92 <block_cipher_df+0x28e>
   23ba8:	20002ac4 	.word	0x20002ac4
   23bac:	03020100 	.word	0x03020100
   23bb0:	20002ad4 	.word	0x20002ad4

00023bb4 <ctr_drbg_update_internal>:
   23bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23bb8:	b088      	sub	sp, #32
   23bba:	4604      	mov	r4, r0
   23bbc:	460d      	mov	r5, r1
   23bbe:	2220      	movs	r2, #32
   23bc0:	2100      	movs	r1, #0
   23bc2:	4668      	mov	r0, sp
   23bc4:	f003 fb3a 	bl	2723c <memset>
   23bc8:	f104 0620 	add.w	r6, r4, #32
   23bcc:	466f      	mov	r7, sp
   23bce:	7be2      	ldrb	r2, [r4, #15]
   23bd0:	3201      	adds	r2, #1
   23bd2:	b2d2      	uxtb	r2, r2
   23bd4:	73e2      	strb	r2, [r4, #15]
   23bd6:	2a00      	cmp	r2, #0
   23bd8:	d14d      	bne.n	23c76 <ctr_drbg_update_internal+0xc2>
   23bda:	7ba2      	ldrb	r2, [r4, #14]
   23bdc:	3201      	adds	r2, #1
   23bde:	b2d2      	uxtb	r2, r2
   23be0:	73a2      	strb	r2, [r4, #14]
   23be2:	2a00      	cmp	r2, #0
   23be4:	d147      	bne.n	23c76 <ctr_drbg_update_internal+0xc2>
   23be6:	7b63      	ldrb	r3, [r4, #13]
   23be8:	3301      	adds	r3, #1
   23bea:	b2db      	uxtb	r3, r3
   23bec:	7363      	strb	r3, [r4, #13]
   23bee:	2b00      	cmp	r3, #0
   23bf0:	d141      	bne.n	23c76 <ctr_drbg_update_internal+0xc2>
   23bf2:	7b23      	ldrb	r3, [r4, #12]
   23bf4:	3301      	adds	r3, #1
   23bf6:	b2db      	uxtb	r3, r3
   23bf8:	7323      	strb	r3, [r4, #12]
   23bfa:	2b00      	cmp	r3, #0
   23bfc:	d13b      	bne.n	23c76 <ctr_drbg_update_internal+0xc2>
   23bfe:	7ae3      	ldrb	r3, [r4, #11]
   23c00:	3301      	adds	r3, #1
   23c02:	b2db      	uxtb	r3, r3
   23c04:	72e3      	strb	r3, [r4, #11]
   23c06:	2b00      	cmp	r3, #0
   23c08:	d135      	bne.n	23c76 <ctr_drbg_update_internal+0xc2>
   23c0a:	7aa3      	ldrb	r3, [r4, #10]
   23c0c:	3301      	adds	r3, #1
   23c0e:	b2db      	uxtb	r3, r3
   23c10:	72a3      	strb	r3, [r4, #10]
   23c12:	2b00      	cmp	r3, #0
   23c14:	d12f      	bne.n	23c76 <ctr_drbg_update_internal+0xc2>
   23c16:	7a63      	ldrb	r3, [r4, #9]
   23c18:	3301      	adds	r3, #1
   23c1a:	b2db      	uxtb	r3, r3
   23c1c:	7263      	strb	r3, [r4, #9]
   23c1e:	bb53      	cbnz	r3, 23c76 <ctr_drbg_update_internal+0xc2>
   23c20:	7a23      	ldrb	r3, [r4, #8]
   23c22:	3301      	adds	r3, #1
   23c24:	b2db      	uxtb	r3, r3
   23c26:	7223      	strb	r3, [r4, #8]
   23c28:	bb2b      	cbnz	r3, 23c76 <ctr_drbg_update_internal+0xc2>
   23c2a:	79e3      	ldrb	r3, [r4, #7]
   23c2c:	3301      	adds	r3, #1
   23c2e:	b2db      	uxtb	r3, r3
   23c30:	71e3      	strb	r3, [r4, #7]
   23c32:	bb03      	cbnz	r3, 23c76 <ctr_drbg_update_internal+0xc2>
   23c34:	79a3      	ldrb	r3, [r4, #6]
   23c36:	3301      	adds	r3, #1
   23c38:	b2db      	uxtb	r3, r3
   23c3a:	71a3      	strb	r3, [r4, #6]
   23c3c:	b9db      	cbnz	r3, 23c76 <ctr_drbg_update_internal+0xc2>
   23c3e:	7963      	ldrb	r3, [r4, #5]
   23c40:	3301      	adds	r3, #1
   23c42:	b2db      	uxtb	r3, r3
   23c44:	7163      	strb	r3, [r4, #5]
   23c46:	b9b3      	cbnz	r3, 23c76 <ctr_drbg_update_internal+0xc2>
   23c48:	7923      	ldrb	r3, [r4, #4]
   23c4a:	3301      	adds	r3, #1
   23c4c:	b2db      	uxtb	r3, r3
   23c4e:	7123      	strb	r3, [r4, #4]
   23c50:	b98b      	cbnz	r3, 23c76 <ctr_drbg_update_internal+0xc2>
   23c52:	78e3      	ldrb	r3, [r4, #3]
   23c54:	3301      	adds	r3, #1
   23c56:	b2db      	uxtb	r3, r3
   23c58:	70e3      	strb	r3, [r4, #3]
   23c5a:	b963      	cbnz	r3, 23c76 <ctr_drbg_update_internal+0xc2>
   23c5c:	78a3      	ldrb	r3, [r4, #2]
   23c5e:	3301      	adds	r3, #1
   23c60:	b2db      	uxtb	r3, r3
   23c62:	70a3      	strb	r3, [r4, #2]
   23c64:	b93b      	cbnz	r3, 23c76 <ctr_drbg_update_internal+0xc2>
   23c66:	7863      	ldrb	r3, [r4, #1]
   23c68:	3301      	adds	r3, #1
   23c6a:	b2db      	uxtb	r3, r3
   23c6c:	7063      	strb	r3, [r4, #1]
   23c6e:	b913      	cbnz	r3, 23c76 <ctr_drbg_update_internal+0xc2>
   23c70:	7823      	ldrb	r3, [r4, #0]
   23c72:	3301      	adds	r3, #1
   23c74:	7023      	strb	r3, [r4, #0]
   23c76:	463b      	mov	r3, r7
   23c78:	4622      	mov	r2, r4
   23c7a:	2101      	movs	r1, #1
   23c7c:	4630      	mov	r0, r6
   23c7e:	f001 f84f 	bl	24d20 <cc_mbedtls_aes_crypt_ecb>
   23c82:	4680      	mov	r8, r0
   23c84:	bb50      	cbnz	r0, 23cdc <ctr_drbg_update_internal+0x128>
   23c86:	3710      	adds	r7, #16
   23c88:	ab08      	add	r3, sp, #32
   23c8a:	429f      	cmp	r7, r3
   23c8c:	d19f      	bne.n	23bce <ctr_drbg_update_internal+0x1a>
   23c8e:	9a00      	ldr	r2, [sp, #0]
   23c90:	682b      	ldr	r3, [r5, #0]
   23c92:	9906      	ldr	r1, [sp, #24]
   23c94:	4053      	eors	r3, r2
   23c96:	9300      	str	r3, [sp, #0]
   23c98:	9a01      	ldr	r2, [sp, #4]
   23c9a:	686b      	ldr	r3, [r5, #4]
   23c9c:	4053      	eors	r3, r2
   23c9e:	9301      	str	r3, [sp, #4]
   23ca0:	9a02      	ldr	r2, [sp, #8]
   23ca2:	68ab      	ldr	r3, [r5, #8]
   23ca4:	4053      	eors	r3, r2
   23ca6:	9302      	str	r3, [sp, #8]
   23ca8:	9a03      	ldr	r2, [sp, #12]
   23caa:	68eb      	ldr	r3, [r5, #12]
   23cac:	4053      	eors	r3, r2
   23cae:	9303      	str	r3, [sp, #12]
   23cb0:	9a04      	ldr	r2, [sp, #16]
   23cb2:	692b      	ldr	r3, [r5, #16]
   23cb4:	4053      	eors	r3, r2
   23cb6:	9304      	str	r3, [sp, #16]
   23cb8:	9a05      	ldr	r2, [sp, #20]
   23cba:	696b      	ldr	r3, [r5, #20]
   23cbc:	4053      	eors	r3, r2
   23cbe:	69aa      	ldr	r2, [r5, #24]
   23cc0:	9305      	str	r3, [sp, #20]
   23cc2:	404a      	eors	r2, r1
   23cc4:	69eb      	ldr	r3, [r5, #28]
   23cc6:	9206      	str	r2, [sp, #24]
   23cc8:	9a07      	ldr	r2, [sp, #28]
   23cca:	4630      	mov	r0, r6
   23ccc:	4053      	eors	r3, r2
   23cce:	4669      	mov	r1, sp
   23cd0:	2280      	movs	r2, #128	; 0x80
   23cd2:	9307      	str	r3, [sp, #28]
   23cd4:	f001 f80a 	bl	24cec <cc_mbedtls_aes_setkey_enc>
   23cd8:	4680      	mov	r8, r0
   23cda:	b138      	cbz	r0, 23cec <ctr_drbg_update_internal+0x138>
   23cdc:	4668      	mov	r0, sp
   23cde:	2120      	movs	r1, #32
   23ce0:	f7ff fe06 	bl	238f0 <mbedtls_platform_zeroize>
   23ce4:	4640      	mov	r0, r8
   23ce6:	b008      	add	sp, #32
   23ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23cec:	2210      	movs	r2, #16
   23cee:	eb0d 0102 	add.w	r1, sp, r2
   23cf2:	4620      	mov	r0, r4
   23cf4:	f003 fa97 	bl	27226 <memcpy>
   23cf8:	e7f0      	b.n	23cdc <ctr_drbg_update_internal+0x128>
   23cfa:	bf00      	nop

00023cfc <mbedtls_ctr_drbg_reseed_internal>:
   23cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23d00:	4604      	mov	r4, r0
   23d02:	6980      	ldr	r0, [r0, #24]
   23d04:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   23d08:	d852      	bhi.n	23db0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   23d0a:	461d      	mov	r5, r3
   23d0c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   23d10:	42ab      	cmp	r3, r5
   23d12:	d34d      	bcc.n	23db0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   23d14:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   23d18:	1a18      	subs	r0, r3, r0
   23d1a:	4290      	cmp	r0, r2
   23d1c:	4616      	mov	r6, r2
   23d1e:	d347      	bcc.n	23db0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   23d20:	f8df 9098 	ldr.w	r9, [pc, #152]	; 23dbc <mbedtls_ctr_drbg_reseed_internal+0xc0>
   23d24:	f44f 72c0 	mov.w	r2, #384	; 0x180
   23d28:	460f      	mov	r7, r1
   23d2a:	4648      	mov	r0, r9
   23d2c:	2100      	movs	r1, #0
   23d2e:	f003 fa85 	bl	2723c <memset>
   23d32:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   23d36:	69a2      	ldr	r2, [r4, #24]
   23d38:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   23d3c:	4649      	mov	r1, r9
   23d3e:	4798      	blx	r3
   23d40:	2800      	cmp	r0, #0
   23d42:	d138      	bne.n	23db6 <mbedtls_ctr_drbg_reseed_internal+0xba>
   23d44:	f8d4 8018 	ldr.w	r8, [r4, #24]
   23d48:	b13d      	cbz	r5, 23d5a <mbedtls_ctr_drbg_reseed_internal+0x5e>
   23d4a:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   23d4e:	462a      	mov	r2, r5
   23d50:	eb09 0108 	add.w	r1, r9, r8
   23d54:	4798      	blx	r3
   23d56:	bb70      	cbnz	r0, 23db6 <mbedtls_ctr_drbg_reseed_internal+0xba>
   23d58:	44a8      	add	r8, r5
   23d5a:	b107      	cbz	r7, 23d5e <mbedtls_ctr_drbg_reseed_internal+0x62>
   23d5c:	b9c6      	cbnz	r6, 23d90 <mbedtls_ctr_drbg_reseed_internal+0x94>
   23d5e:	4917      	ldr	r1, [pc, #92]	; (23dbc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   23d60:	4642      	mov	r2, r8
   23d62:	4608      	mov	r0, r1
   23d64:	f7ff fdce 	bl	23904 <block_cipher_df>
   23d68:	4605      	mov	r5, r0
   23d6a:	b138      	cbz	r0, 23d7c <mbedtls_ctr_drbg_reseed_internal+0x80>
   23d6c:	4813      	ldr	r0, [pc, #76]	; (23dbc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   23d6e:	f44f 71c0 	mov.w	r1, #384	; 0x180
   23d72:	f7ff fdbd 	bl	238f0 <mbedtls_platform_zeroize>
   23d76:	4628      	mov	r0, r5
   23d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23d7c:	490f      	ldr	r1, [pc, #60]	; (23dbc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   23d7e:	4620      	mov	r0, r4
   23d80:	f7ff ff18 	bl	23bb4 <ctr_drbg_update_internal>
   23d84:	4605      	mov	r5, r0
   23d86:	2800      	cmp	r0, #0
   23d88:	d1f0      	bne.n	23d6c <mbedtls_ctr_drbg_reseed_internal+0x70>
   23d8a:	2301      	movs	r3, #1
   23d8c:	6123      	str	r3, [r4, #16]
   23d8e:	e7ed      	b.n	23d6c <mbedtls_ctr_drbg_reseed_internal+0x70>
   23d90:	eb09 0008 	add.w	r0, r9, r8
   23d94:	4639      	mov	r1, r7
   23d96:	4632      	mov	r2, r6
   23d98:	f003 fa45 	bl	27226 <memcpy>
   23d9c:	4907      	ldr	r1, [pc, #28]	; (23dbc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   23d9e:	44b0      	add	r8, r6
   23da0:	4642      	mov	r2, r8
   23da2:	4608      	mov	r0, r1
   23da4:	f7ff fdae 	bl	23904 <block_cipher_df>
   23da8:	4605      	mov	r5, r0
   23daa:	2800      	cmp	r0, #0
   23dac:	d1de      	bne.n	23d6c <mbedtls_ctr_drbg_reseed_internal+0x70>
   23dae:	e7e5      	b.n	23d7c <mbedtls_ctr_drbg_reseed_internal+0x80>
   23db0:	f06f 0537 	mvn.w	r5, #55	; 0x37
   23db4:	e7df      	b.n	23d76 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   23db6:	f06f 0533 	mvn.w	r5, #51	; 0x33
   23dba:	e7dc      	b.n	23d76 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   23dbc:	20002c64 	.word	0x20002c64

00023dc0 <cc_mbedtls_ctr_drbg_init>:
   23dc0:	b510      	push	{r4, lr}
   23dc2:	22a4      	movs	r2, #164	; 0xa4
   23dc4:	4604      	mov	r4, r0
   23dc6:	2100      	movs	r1, #0
   23dc8:	f003 fa38 	bl	2723c <memset>
   23dcc:	4b06      	ldr	r3, [pc, #24]	; (23de8 <cc_mbedtls_ctr_drbg_init+0x28>)
   23dce:	f04f 31ff 	mov.w	r1, #4294967295
   23dd2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   23dd6:	6121      	str	r1, [r4, #16]
   23dd8:	61e2      	str	r2, [r4, #28]
   23dda:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   23dde:	681b      	ldr	r3, [r3, #0]
   23de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23de4:	4718      	bx	r3
   23de6:	bf00      	nop
   23de8:	200006f0 	.word	0x200006f0

00023dec <cc_mbedtls_ctr_drbg_seed>:
   23dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23df0:	b085      	sub	sp, #20
   23df2:	4605      	mov	r5, r0
   23df4:	460f      	mov	r7, r1
   23df6:	4616      	mov	r6, r2
   23df8:	2100      	movs	r1, #0
   23dfa:	2210      	movs	r2, #16
   23dfc:	4668      	mov	r0, sp
   23dfe:	4699      	mov	r9, r3
   23e00:	f003 fa1c 	bl	2723c <memset>
   23e04:	4b1e      	ldr	r3, [pc, #120]	; (23e80 <cc_mbedtls_ctr_drbg_seed+0x94>)
   23e06:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   23e0a:	681b      	ldr	r3, [r3, #0]
   23e0c:	4640      	mov	r0, r8
   23e0e:	4798      	blx	r3
   23e10:	b120      	cbz	r0, 23e1c <cc_mbedtls_ctr_drbg_seed+0x30>
   23e12:	4604      	mov	r4, r0
   23e14:	4620      	mov	r0, r4
   23e16:	b005      	add	sp, #20
   23e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23e1c:	f105 0420 	add.w	r4, r5, #32
   23e20:	4620      	mov	r0, r4
   23e22:	f000 ff4d 	bl	24cc0 <cc_mbedtls_aes_init>
   23e26:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   23e2a:	69ae      	ldr	r6, [r5, #24]
   23e2c:	692b      	ldr	r3, [r5, #16]
   23e2e:	b9ee      	cbnz	r6, 23e6c <cc_mbedtls_ctr_drbg_seed+0x80>
   23e30:	2220      	movs	r2, #32
   23e32:	2b00      	cmp	r3, #0
   23e34:	61aa      	str	r2, [r5, #24]
   23e36:	db20      	blt.n	23e7a <cc_mbedtls_ctr_drbg_seed+0x8e>
   23e38:	461e      	mov	r6, r3
   23e3a:	4620      	mov	r0, r4
   23e3c:	4669      	mov	r1, sp
   23e3e:	2280      	movs	r2, #128	; 0x80
   23e40:	f000 ff54 	bl	24cec <cc_mbedtls_aes_setkey_enc>
   23e44:	4604      	mov	r4, r0
   23e46:	b930      	cbnz	r0, 23e56 <cc_mbedtls_ctr_drbg_seed+0x6a>
   23e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23e4a:	4633      	mov	r3, r6
   23e4c:	4649      	mov	r1, r9
   23e4e:	4628      	mov	r0, r5
   23e50:	f7ff ff54 	bl	23cfc <mbedtls_ctr_drbg_reseed_internal>
   23e54:	4604      	mov	r4, r0
   23e56:	4b0b      	ldr	r3, [pc, #44]	; (23e84 <cc_mbedtls_ctr_drbg_seed+0x98>)
   23e58:	4640      	mov	r0, r8
   23e5a:	681b      	ldr	r3, [r3, #0]
   23e5c:	4798      	blx	r3
   23e5e:	2800      	cmp	r0, #0
   23e60:	bf18      	it	ne
   23e62:	4604      	movne	r4, r0
   23e64:	4620      	mov	r0, r4
   23e66:	b005      	add	sp, #20
   23e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23e6c:	2b00      	cmp	r3, #0
   23e6e:	dae3      	bge.n	23e38 <cc_mbedtls_ctr_drbg_seed+0x4c>
   23e70:	2e17      	cmp	r6, #23
   23e72:	d802      	bhi.n	23e7a <cc_mbedtls_ctr_drbg_seed+0x8e>
   23e74:	3601      	adds	r6, #1
   23e76:	0876      	lsrs	r6, r6, #1
   23e78:	e7df      	b.n	23e3a <cc_mbedtls_ctr_drbg_seed+0x4e>
   23e7a:	2600      	movs	r6, #0
   23e7c:	e7dd      	b.n	23e3a <cc_mbedtls_ctr_drbg_seed+0x4e>
   23e7e:	bf00      	nop
   23e80:	200006f4 	.word	0x200006f4
   23e84:	200006f8 	.word	0x200006f8

00023e88 <cc_mbedtls_ctr_drbg_random_with_add>:
   23e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e8c:	b08d      	sub	sp, #52	; 0x34
   23e8e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   23e92:	9f16      	ldr	r7, [sp, #88]	; 0x58
   23e94:	f200 80e3 	bhi.w	2405e <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   23e98:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   23e9c:	f200 80dc 	bhi.w	24058 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   23ea0:	4604      	mov	r4, r0
   23ea2:	4615      	mov	r5, r2
   23ea4:	460e      	mov	r6, r1
   23ea6:	2220      	movs	r2, #32
   23ea8:	2100      	movs	r1, #0
   23eaa:	a804      	add	r0, sp, #16
   23eac:	4698      	mov	r8, r3
   23eae:	f003 f9c5 	bl	2723c <memset>
   23eb2:	4b6c      	ldr	r3, [pc, #432]	; (24064 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   23eb4:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   23eb8:	681b      	ldr	r3, [r3, #0]
   23eba:	4648      	mov	r0, r9
   23ebc:	4798      	blx	r3
   23ebe:	4683      	mov	fp, r0
   23ec0:	2800      	cmp	r0, #0
   23ec2:	f040 8092 	bne.w	23fea <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   23ec6:	6922      	ldr	r2, [r4, #16]
   23ec8:	69e3      	ldr	r3, [r4, #28]
   23eca:	429a      	cmp	r2, r3
   23ecc:	f300 8091 	bgt.w	23ff2 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   23ed0:	6963      	ldr	r3, [r4, #20]
   23ed2:	2b00      	cmp	r3, #0
   23ed4:	f040 808d 	bne.w	23ff2 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   23ed8:	2f00      	cmp	r7, #0
   23eda:	f040 80a9 	bne.w	24030 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   23ede:	f8df a188 	ldr.w	sl, [pc, #392]	; 24068 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   23ee2:	466f      	mov	r7, sp
   23ee4:	2d00      	cmp	r5, #0
   23ee6:	f000 8098 	beq.w	2401a <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   23eea:	f104 0820 	add.w	r8, r4, #32
   23eee:	466f      	mov	r7, sp
   23ef0:	e00e      	b.n	23f10 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   23ef2:	2d10      	cmp	r5, #16
   23ef4:	46ab      	mov	fp, r5
   23ef6:	bf28      	it	cs
   23ef8:	f04f 0b10 	movcs.w	fp, #16
   23efc:	4630      	mov	r0, r6
   23efe:	465a      	mov	r2, fp
   23f00:	4639      	mov	r1, r7
   23f02:	f003 f990 	bl	27226 <memcpy>
   23f06:	ebb5 050b 	subs.w	r5, r5, fp
   23f0a:	445e      	add	r6, fp
   23f0c:	f000 8085 	beq.w	2401a <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   23f10:	7be3      	ldrb	r3, [r4, #15]
   23f12:	3301      	adds	r3, #1
   23f14:	b2db      	uxtb	r3, r3
   23f16:	73e3      	strb	r3, [r4, #15]
   23f18:	2b00      	cmp	r3, #0
   23f1a:	d14d      	bne.n	23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f1c:	7ba3      	ldrb	r3, [r4, #14]
   23f1e:	3301      	adds	r3, #1
   23f20:	b2db      	uxtb	r3, r3
   23f22:	73a3      	strb	r3, [r4, #14]
   23f24:	2b00      	cmp	r3, #0
   23f26:	d147      	bne.n	23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f28:	7b63      	ldrb	r3, [r4, #13]
   23f2a:	3301      	adds	r3, #1
   23f2c:	b2db      	uxtb	r3, r3
   23f2e:	7363      	strb	r3, [r4, #13]
   23f30:	2b00      	cmp	r3, #0
   23f32:	d141      	bne.n	23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f34:	7b23      	ldrb	r3, [r4, #12]
   23f36:	3301      	adds	r3, #1
   23f38:	b2db      	uxtb	r3, r3
   23f3a:	7323      	strb	r3, [r4, #12]
   23f3c:	2b00      	cmp	r3, #0
   23f3e:	d13b      	bne.n	23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f40:	7ae3      	ldrb	r3, [r4, #11]
   23f42:	3301      	adds	r3, #1
   23f44:	b2db      	uxtb	r3, r3
   23f46:	72e3      	strb	r3, [r4, #11]
   23f48:	2b00      	cmp	r3, #0
   23f4a:	d135      	bne.n	23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f4c:	7aa3      	ldrb	r3, [r4, #10]
   23f4e:	3301      	adds	r3, #1
   23f50:	b2db      	uxtb	r3, r3
   23f52:	72a3      	strb	r3, [r4, #10]
   23f54:	2b00      	cmp	r3, #0
   23f56:	d12f      	bne.n	23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f58:	7a63      	ldrb	r3, [r4, #9]
   23f5a:	3301      	adds	r3, #1
   23f5c:	b2db      	uxtb	r3, r3
   23f5e:	7263      	strb	r3, [r4, #9]
   23f60:	bb53      	cbnz	r3, 23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f62:	7a23      	ldrb	r3, [r4, #8]
   23f64:	3301      	adds	r3, #1
   23f66:	b2db      	uxtb	r3, r3
   23f68:	7223      	strb	r3, [r4, #8]
   23f6a:	bb2b      	cbnz	r3, 23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f6c:	79e3      	ldrb	r3, [r4, #7]
   23f6e:	3301      	adds	r3, #1
   23f70:	b2db      	uxtb	r3, r3
   23f72:	71e3      	strb	r3, [r4, #7]
   23f74:	bb03      	cbnz	r3, 23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f76:	79a3      	ldrb	r3, [r4, #6]
   23f78:	3301      	adds	r3, #1
   23f7a:	b2db      	uxtb	r3, r3
   23f7c:	71a3      	strb	r3, [r4, #6]
   23f7e:	b9db      	cbnz	r3, 23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f80:	7963      	ldrb	r3, [r4, #5]
   23f82:	3301      	adds	r3, #1
   23f84:	b2db      	uxtb	r3, r3
   23f86:	7163      	strb	r3, [r4, #5]
   23f88:	b9b3      	cbnz	r3, 23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f8a:	7923      	ldrb	r3, [r4, #4]
   23f8c:	3301      	adds	r3, #1
   23f8e:	b2db      	uxtb	r3, r3
   23f90:	7123      	strb	r3, [r4, #4]
   23f92:	b98b      	cbnz	r3, 23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f94:	78e3      	ldrb	r3, [r4, #3]
   23f96:	3301      	adds	r3, #1
   23f98:	b2db      	uxtb	r3, r3
   23f9a:	70e3      	strb	r3, [r4, #3]
   23f9c:	b963      	cbnz	r3, 23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23f9e:	78a3      	ldrb	r3, [r4, #2]
   23fa0:	3301      	adds	r3, #1
   23fa2:	b2db      	uxtb	r3, r3
   23fa4:	70a3      	strb	r3, [r4, #2]
   23fa6:	b93b      	cbnz	r3, 23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23fa8:	7863      	ldrb	r3, [r4, #1]
   23faa:	3301      	adds	r3, #1
   23fac:	b2db      	uxtb	r3, r3
   23fae:	7063      	strb	r3, [r4, #1]
   23fb0:	b913      	cbnz	r3, 23fb8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   23fb2:	7823      	ldrb	r3, [r4, #0]
   23fb4:	3301      	adds	r3, #1
   23fb6:	7023      	strb	r3, [r4, #0]
   23fb8:	463b      	mov	r3, r7
   23fba:	4622      	mov	r2, r4
   23fbc:	2101      	movs	r1, #1
   23fbe:	4640      	mov	r0, r8
   23fc0:	f000 feae 	bl	24d20 <cc_mbedtls_aes_crypt_ecb>
   23fc4:	4683      	mov	fp, r0
   23fc6:	2800      	cmp	r0, #0
   23fc8:	d093      	beq.n	23ef2 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   23fca:	f8da 3000 	ldr.w	r3, [sl]
   23fce:	4648      	mov	r0, r9
   23fd0:	4798      	blx	r3
   23fd2:	2120      	movs	r1, #32
   23fd4:	4603      	mov	r3, r0
   23fd6:	a804      	add	r0, sp, #16
   23fd8:	2b00      	cmp	r3, #0
   23fda:	bf18      	it	ne
   23fdc:	469b      	movne	fp, r3
   23fde:	f7ff fc87 	bl	238f0 <mbedtls_platform_zeroize>
   23fe2:	2110      	movs	r1, #16
   23fe4:	4638      	mov	r0, r7
   23fe6:	f7ff fc83 	bl	238f0 <mbedtls_platform_zeroize>
   23fea:	4658      	mov	r0, fp
   23fec:	b00d      	add	sp, #52	; 0x34
   23fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ff2:	463a      	mov	r2, r7
   23ff4:	4641      	mov	r1, r8
   23ff6:	2300      	movs	r3, #0
   23ff8:	4620      	mov	r0, r4
   23ffa:	f7ff fe7f 	bl	23cfc <mbedtls_ctr_drbg_reseed_internal>
   23ffe:	f8df a068 	ldr.w	sl, [pc, #104]	; 24068 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   24002:	2800      	cmp	r0, #0
   24004:	f43f af6d 	beq.w	23ee2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   24008:	f8da 3000 	ldr.w	r3, [sl]
   2400c:	4648      	mov	r0, r9
   2400e:	4798      	blx	r3
   24010:	4683      	mov	fp, r0
   24012:	2800      	cmp	r0, #0
   24014:	f43f af65 	beq.w	23ee2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   24018:	e7e7      	b.n	23fea <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2401a:	a904      	add	r1, sp, #16
   2401c:	4620      	mov	r0, r4
   2401e:	f7ff fdc9 	bl	23bb4 <ctr_drbg_update_internal>
   24022:	4683      	mov	fp, r0
   24024:	2800      	cmp	r0, #0
   24026:	d1d0      	bne.n	23fca <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   24028:	6923      	ldr	r3, [r4, #16]
   2402a:	3301      	adds	r3, #1
   2402c:	6123      	str	r3, [r4, #16]
   2402e:	e7cc      	b.n	23fca <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   24030:	463a      	mov	r2, r7
   24032:	4641      	mov	r1, r8
   24034:	a804      	add	r0, sp, #16
   24036:	f7ff fc65 	bl	23904 <block_cipher_df>
   2403a:	4683      	mov	fp, r0
   2403c:	b118      	cbz	r0, 24046 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   2403e:	f8df a028 	ldr.w	sl, [pc, #40]	; 24068 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   24042:	466f      	mov	r7, sp
   24044:	e7c1      	b.n	23fca <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   24046:	a904      	add	r1, sp, #16
   24048:	4620      	mov	r0, r4
   2404a:	f7ff fdb3 	bl	23bb4 <ctr_drbg_update_internal>
   2404e:	4683      	mov	fp, r0
   24050:	2800      	cmp	r0, #0
   24052:	f43f af44 	beq.w	23ede <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   24056:	e7f2      	b.n	2403e <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   24058:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   2405c:	e7c5      	b.n	23fea <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2405e:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   24062:	e7c2      	b.n	23fea <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   24064:	200006f4 	.word	0x200006f4
   24068:	200006f8 	.word	0x200006f8

0002406c <entropy_update>:
   2406c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24070:	2b20      	cmp	r3, #32
   24072:	b08b      	sub	sp, #44	; 0x2c
   24074:	461d      	mov	r5, r3
   24076:	4606      	mov	r6, r0
   24078:	4688      	mov	r8, r1
   2407a:	4691      	mov	r9, r2
   2407c:	d826      	bhi.n	240cc <entropy_update+0x60>
   2407e:	b2db      	uxtb	r3, r3
   24080:	af02      	add	r7, sp, #8
   24082:	f88d 8004 	strb.w	r8, [sp, #4]
   24086:	46b0      	mov	r8, r6
   24088:	f88d 3005 	strb.w	r3, [sp, #5]
   2408c:	f858 1b04 	ldr.w	r1, [r8], #4
   24090:	b921      	cbnz	r1, 2409c <entropy_update+0x30>
   24092:	4640      	mov	r0, r8
   24094:	f000 fe88 	bl	24da8 <cc_mbedtls_sha256_starts>
   24098:	4604      	mov	r4, r0
   2409a:	b940      	cbnz	r0, 240ae <entropy_update+0x42>
   2409c:	2301      	movs	r3, #1
   2409e:	6033      	str	r3, [r6, #0]
   240a0:	2202      	movs	r2, #2
   240a2:	a901      	add	r1, sp, #4
   240a4:	4640      	mov	r0, r8
   240a6:	f000 fe93 	bl	24dd0 <cc_mbedtls_sha256_update>
   240aa:	4604      	mov	r4, r0
   240ac:	b138      	cbz	r0, 240be <entropy_update+0x52>
   240ae:	4638      	mov	r0, r7
   240b0:	2120      	movs	r1, #32
   240b2:	f7ff fc1d 	bl	238f0 <mbedtls_platform_zeroize>
   240b6:	4620      	mov	r0, r4
   240b8:	b00b      	add	sp, #44	; 0x2c
   240ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   240be:	462a      	mov	r2, r5
   240c0:	4649      	mov	r1, r9
   240c2:	4640      	mov	r0, r8
   240c4:	f000 fe84 	bl	24dd0 <cc_mbedtls_sha256_update>
   240c8:	4604      	mov	r4, r0
   240ca:	e7f0      	b.n	240ae <entropy_update+0x42>
   240cc:	af02      	add	r7, sp, #8
   240ce:	4619      	mov	r1, r3
   240d0:	4610      	mov	r0, r2
   240d2:	2300      	movs	r3, #0
   240d4:	463a      	mov	r2, r7
   240d6:	f001 f803 	bl	250e0 <cc_mbedtls_sha256>
   240da:	4604      	mov	r4, r0
   240dc:	2800      	cmp	r0, #0
   240de:	d1e6      	bne.n	240ae <entropy_update+0x42>
   240e0:	2320      	movs	r3, #32
   240e2:	46b9      	mov	r9, r7
   240e4:	461d      	mov	r5, r3
   240e6:	e7cc      	b.n	24082 <entropy_update+0x16>

000240e8 <entropy_gather_internal.part.0>:
   240e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   240ea:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   240ee:	b0a7      	sub	sp, #156	; 0x9c
   240f0:	2b00      	cmp	r3, #0
   240f2:	bfd8      	it	le
   240f4:	ae02      	addle	r6, sp, #8
   240f6:	dd2c      	ble.n	24152 <entropy_gather_internal.part.0+0x6a>
   240f8:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   240fc:	4605      	mov	r5, r0
   240fe:	2300      	movs	r3, #0
   24100:	ae02      	add	r6, sp, #8
   24102:	9301      	str	r3, [sp, #4]
   24104:	f1a4 0701 	sub.w	r7, r4, #1
   24108:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   2410c:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   24110:	ab01      	add	r3, sp, #4
   24112:	2290      	movs	r2, #144	; 0x90
   24114:	4631      	mov	r1, r6
   24116:	47a0      	blx	r4
   24118:	fab7 f787 	clz	r7, r7
   2411c:	097f      	lsrs	r7, r7, #5
   2411e:	4604      	mov	r4, r0
   24120:	b910      	cbnz	r0, 24128 <entropy_gather_internal.part.0+0x40>
   24122:	9b01      	ldr	r3, [sp, #4]
   24124:	b93b      	cbnz	r3, 24136 <entropy_gather_internal.part.0+0x4e>
   24126:	b1a7      	cbz	r7, 24152 <entropy_gather_internal.part.0+0x6a>
   24128:	4630      	mov	r0, r6
   2412a:	2190      	movs	r1, #144	; 0x90
   2412c:	f7ff fbe0 	bl	238f0 <mbedtls_platform_zeroize>
   24130:	4620      	mov	r0, r4
   24132:	b027      	add	sp, #156	; 0x9c
   24134:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24136:	4601      	mov	r1, r0
   24138:	4632      	mov	r2, r6
   2413a:	4628      	mov	r0, r5
   2413c:	f7ff ff96 	bl	2406c <entropy_update>
   24140:	b950      	cbnz	r0, 24158 <entropy_gather_internal.part.0+0x70>
   24142:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   24146:	9a01      	ldr	r2, [sp, #4]
   24148:	4413      	add	r3, r2
   2414a:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   2414e:	2f00      	cmp	r7, #0
   24150:	d1ea      	bne.n	24128 <entropy_gather_internal.part.0+0x40>
   24152:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   24156:	e7e7      	b.n	24128 <entropy_gather_internal.part.0+0x40>
   24158:	4604      	mov	r4, r0
   2415a:	4620      	mov	r0, r4
   2415c:	b027      	add	sp, #156	; 0x9c
   2415e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024160 <cc_mbedtls_entropy_init>:
   24160:	b570      	push	{r4, r5, r6, lr}
   24162:	2500      	movs	r5, #0
   24164:	4604      	mov	r4, r0
   24166:	2214      	movs	r2, #20
   24168:	4629      	mov	r1, r5
   2416a:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   2416e:	30fc      	adds	r0, #252	; 0xfc
   24170:	f003 f864 	bl	2723c <memset>
   24174:	4b16      	ldr	r3, [pc, #88]	; (241d0 <cc_mbedtls_entropy_init+0x70>)
   24176:	f504 7688 	add.w	r6, r4, #272	; 0x110
   2417a:	681b      	ldr	r3, [r3, #0]
   2417c:	4630      	mov	r0, r6
   2417e:	4798      	blx	r3
   24180:	4620      	mov	r0, r4
   24182:	f840 5b04 	str.w	r5, [r0], #4
   24186:	f000 fdf5 	bl	24d74 <cc_mbedtls_sha256_init>
   2418a:	4b12      	ldr	r3, [pc, #72]	; (241d4 <cc_mbedtls_entropy_init+0x74>)
   2418c:	4630      	mov	r0, r6
   2418e:	681b      	ldr	r3, [r3, #0]
   24190:	4798      	blx	r3
   24192:	b9d8      	cbnz	r0, 241cc <cc_mbedtls_entropy_init+0x6c>
   24194:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24198:	42ab      	cmp	r3, r5
   2419a:	dc11      	bgt.n	241c0 <cc_mbedtls_entropy_init+0x60>
   2419c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   241a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   241a4:	2120      	movs	r1, #32
   241a6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   241aa:	2101      	movs	r1, #1
   241ac:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   241b0:	3301      	adds	r3, #1
   241b2:	4909      	ldr	r1, [pc, #36]	; (241d8 <cc_mbedtls_entropy_init+0x78>)
   241b4:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   241b8:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   241bc:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   241c0:	4b06      	ldr	r3, [pc, #24]	; (241dc <cc_mbedtls_entropy_init+0x7c>)
   241c2:	4630      	mov	r0, r6
   241c4:	681b      	ldr	r3, [r3, #0]
   241c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   241ca:	4718      	bx	r3
   241cc:	bd70      	pop	{r4, r5, r6, pc}
   241ce:	bf00      	nop
   241d0:	200006f0 	.word	0x200006f0
   241d4:	200006f4 	.word	0x200006f4
   241d8:	00024bc5 	.word	0x00024bc5
   241dc:	200006f8 	.word	0x200006f8

000241e0 <cc_mbedtls_entropy_func>:
   241e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   241e4:	2a20      	cmp	r2, #32
   241e6:	b088      	sub	sp, #32
   241e8:	d876      	bhi.n	242d8 <cc_mbedtls_entropy_func+0xf8>
   241ea:	4b3d      	ldr	r3, [pc, #244]	; (242e0 <cc_mbedtls_entropy_func+0x100>)
   241ec:	f500 7988 	add.w	r9, r0, #272	; 0x110
   241f0:	681b      	ldr	r3, [r3, #0]
   241f2:	4604      	mov	r4, r0
   241f4:	4648      	mov	r0, r9
   241f6:	4617      	mov	r7, r2
   241f8:	4688      	mov	r8, r1
   241fa:	4798      	blx	r3
   241fc:	4605      	mov	r5, r0
   241fe:	bba0      	cbnz	r0, 2426a <cc_mbedtls_entropy_func+0x8a>
   24200:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24204:	f240 1601 	movw	r6, #257	; 0x101
   24208:	e001      	b.n	2420e <cc_mbedtls_entropy_func+0x2e>
   2420a:	3e01      	subs	r6, #1
   2420c:	d060      	beq.n	242d0 <cc_mbedtls_entropy_func+0xf0>
   2420e:	4620      	mov	r0, r4
   24210:	b37b      	cbz	r3, 24272 <cc_mbedtls_entropy_func+0x92>
   24212:	f7ff ff69 	bl	240e8 <entropy_gather_internal.part.0>
   24216:	4605      	mov	r5, r0
   24218:	bb68      	cbnz	r0, 24276 <cc_mbedtls_entropy_func+0x96>
   2421a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2421e:	2b00      	cmp	r3, #0
   24220:	ddf3      	ble.n	2420a <cc_mbedtls_entropy_func+0x2a>
   24222:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   24226:	4290      	cmp	r0, r2
   24228:	d3ef      	bcc.n	2420a <cc_mbedtls_entropy_func+0x2a>
   2422a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2422e:	2a01      	cmp	r2, #1
   24230:	d1eb      	bne.n	2420a <cc_mbedtls_entropy_func+0x2a>
   24232:	281f      	cmp	r0, #31
   24234:	d9e9      	bls.n	2420a <cc_mbedtls_entropy_func+0x2a>
   24236:	466e      	mov	r6, sp
   24238:	4629      	mov	r1, r5
   2423a:	2220      	movs	r2, #32
   2423c:	4630      	mov	r0, r6
   2423e:	f104 0a04 	add.w	sl, r4, #4
   24242:	f002 fffb 	bl	2723c <memset>
   24246:	4631      	mov	r1, r6
   24248:	4650      	mov	r0, sl
   2424a:	f000 fdeb 	bl	24e24 <cc_mbedtls_sha256_finish>
   2424e:	4605      	mov	r5, r0
   24250:	b198      	cbz	r0, 2427a <cc_mbedtls_entropy_func+0x9a>
   24252:	2120      	movs	r1, #32
   24254:	4630      	mov	r0, r6
   24256:	f7ff fb4b 	bl	238f0 <mbedtls_platform_zeroize>
   2425a:	4b22      	ldr	r3, [pc, #136]	; (242e4 <cc_mbedtls_entropy_func+0x104>)
   2425c:	4648      	mov	r0, r9
   2425e:	681b      	ldr	r3, [r3, #0]
   24260:	4798      	blx	r3
   24262:	2800      	cmp	r0, #0
   24264:	bf18      	it	ne
   24266:	f06f 051d 	mvnne.w	r5, #29
   2426a:	4628      	mov	r0, r5
   2426c:	b008      	add	sp, #32
   2426e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24272:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   24276:	466e      	mov	r6, sp
   24278:	e7eb      	b.n	24252 <cc_mbedtls_entropy_func+0x72>
   2427a:	4650      	mov	r0, sl
   2427c:	f000 fd8e 	bl	24d9c <cc_mbedtls_sha256_free>
   24280:	4650      	mov	r0, sl
   24282:	f000 fd77 	bl	24d74 <cc_mbedtls_sha256_init>
   24286:	4629      	mov	r1, r5
   24288:	4650      	mov	r0, sl
   2428a:	f000 fd8d 	bl	24da8 <cc_mbedtls_sha256_starts>
   2428e:	4605      	mov	r5, r0
   24290:	2800      	cmp	r0, #0
   24292:	d1de      	bne.n	24252 <cc_mbedtls_entropy_func+0x72>
   24294:	4650      	mov	r0, sl
   24296:	2220      	movs	r2, #32
   24298:	4631      	mov	r1, r6
   2429a:	f000 fd99 	bl	24dd0 <cc_mbedtls_sha256_update>
   2429e:	4605      	mov	r5, r0
   242a0:	2800      	cmp	r0, #0
   242a2:	d1d6      	bne.n	24252 <cc_mbedtls_entropy_func+0x72>
   242a4:	4603      	mov	r3, r0
   242a6:	4632      	mov	r2, r6
   242a8:	2120      	movs	r1, #32
   242aa:	4630      	mov	r0, r6
   242ac:	f000 ff18 	bl	250e0 <cc_mbedtls_sha256>
   242b0:	4605      	mov	r5, r0
   242b2:	2800      	cmp	r0, #0
   242b4:	d1cd      	bne.n	24252 <cc_mbedtls_entropy_func+0x72>
   242b6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   242ba:	2b00      	cmp	r3, #0
   242bc:	bfc4      	itt	gt
   242be:	2300      	movgt	r3, #0
   242c0:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   242c4:	463a      	mov	r2, r7
   242c6:	4640      	mov	r0, r8
   242c8:	4631      	mov	r1, r6
   242ca:	f002 ffac 	bl	27226 <memcpy>
   242ce:	e7c0      	b.n	24252 <cc_mbedtls_entropy_func+0x72>
   242d0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   242d4:	466e      	mov	r6, sp
   242d6:	e7bc      	b.n	24252 <cc_mbedtls_entropy_func+0x72>
   242d8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   242dc:	e7c5      	b.n	2426a <cc_mbedtls_entropy_func+0x8a>
   242de:	bf00      	nop
   242e0:	200006f4 	.word	0x200006f4
   242e4:	200006f8 	.word	0x200006f8

000242e8 <RndStartupTest.constprop.0>:
   242e8:	b530      	push	{r4, r5, lr}
   242ea:	b08d      	sub	sp, #52	; 0x34
   242ec:	2100      	movs	r1, #0
   242ee:	2228      	movs	r2, #40	; 0x28
   242f0:	a802      	add	r0, sp, #8
   242f2:	9101      	str	r1, [sp, #4]
   242f4:	f002 ffa2 	bl	2723c <memset>
   242f8:	a802      	add	r0, sp, #8
   242fa:	f000 ff19 	bl	25130 <RNG_PLAT_SetUserRngParameters>
   242fe:	4604      	mov	r4, r0
   24300:	b110      	cbz	r0, 24308 <RndStartupTest.constprop.0+0x20>
   24302:	4620      	mov	r0, r4
   24304:	b00d      	add	sp, #52	; 0x34
   24306:	bd30      	pop	{r4, r5, pc}
   24308:	4d18      	ldr	r5, [pc, #96]	; (2436c <RndStartupTest.constprop.0+0x84>)
   2430a:	f04f 31ff 	mov.w	r1, #4294967295
   2430e:	6828      	ldr	r0, [r5, #0]
   24310:	f000 f946 	bl	245a0 <CC_PalMutexLock>
   24314:	4604      	mov	r4, r0
   24316:	b9c0      	cbnz	r0, 2434a <RndStartupTest.constprop.0+0x62>
   24318:	2000      	movs	r0, #0
   2431a:	f000 f971 	bl	24600 <CC_PalPowerSaveModeSelect>
   2431e:	bb00      	cbnz	r0, 24362 <RndStartupTest.constprop.0+0x7a>
   24320:	4a13      	ldr	r2, [pc, #76]	; (24370 <RndStartupTest.constprop.0+0x88>)
   24322:	a902      	add	r1, sp, #8
   24324:	a801      	add	r0, sp, #4
   24326:	f000 fc3f 	bl	24ba8 <LLF_RND_RunTrngStartupTest>
   2432a:	4604      	mov	r4, r0
   2432c:	2001      	movs	r0, #1
   2432e:	f000 f967 	bl	24600 <CC_PalPowerSaveModeSelect>
   24332:	b990      	cbnz	r0, 2435a <RndStartupTest.constprop.0+0x72>
   24334:	6828      	ldr	r0, [r5, #0]
   24336:	f000 f93b 	bl	245b0 <CC_PalMutexUnlock>
   2433a:	2800      	cmp	r0, #0
   2433c:	d0e1      	beq.n	24302 <RndStartupTest.constprop.0+0x1a>
   2433e:	480d      	ldr	r0, [pc, #52]	; (24374 <RndStartupTest.constprop.0+0x8c>)
   24340:	f7ff f9ce 	bl	236e0 <CC_PalAbort>
   24344:	4620      	mov	r0, r4
   24346:	b00d      	add	sp, #52	; 0x34
   24348:	bd30      	pop	{r4, r5, pc}
   2434a:	480b      	ldr	r0, [pc, #44]	; (24378 <RndStartupTest.constprop.0+0x90>)
   2434c:	f7ff f9c8 	bl	236e0 <CC_PalAbort>
   24350:	2c01      	cmp	r4, #1
   24352:	bf08      	it	eq
   24354:	2405      	moveq	r4, #5
   24356:	d0ed      	beq.n	24334 <RndStartupTest.constprop.0+0x4c>
   24358:	e7de      	b.n	24318 <RndStartupTest.constprop.0+0x30>
   2435a:	4808      	ldr	r0, [pc, #32]	; (2437c <RndStartupTest.constprop.0+0x94>)
   2435c:	f7ff f9c0 	bl	236e0 <CC_PalAbort>
   24360:	e7e8      	b.n	24334 <RndStartupTest.constprop.0+0x4c>
   24362:	4807      	ldr	r0, [pc, #28]	; (24380 <RndStartupTest.constprop.0+0x98>)
   24364:	f7ff f9bc 	bl	236e0 <CC_PalAbort>
   24368:	e7da      	b.n	24320 <RndStartupTest.constprop.0+0x38>
   2436a:	bf00      	nop
   2436c:	200006ec 	.word	0x200006ec
   24370:	20002e50 	.word	0x20002e50
   24374:	0002a97c 	.word	0x0002a97c
   24378:	0002a924 	.word	0x0002a924
   2437c:	0002a95c 	.word	0x0002a95c
   24380:	0002a93c 	.word	0x0002a93c

00024384 <CC_LibInit>:
   24384:	b530      	push	{r4, r5, lr}
   24386:	b083      	sub	sp, #12
   24388:	f000 f85c 	bl	24444 <CC_HalInit>
   2438c:	b128      	cbz	r0, 2439a <CC_LibInit+0x16>
   2438e:	f000 f8ab 	bl	244e8 <CC_PalTerminate>
   24392:	2403      	movs	r4, #3
   24394:	4620      	mov	r0, r4
   24396:	b003      	add	sp, #12
   24398:	bd30      	pop	{r4, r5, pc}
   2439a:	f000 f877 	bl	2448c <CC_PalInit>
   2439e:	b9d8      	cbnz	r0, 243d8 <CC_LibInit+0x54>
   243a0:	f000 f92e 	bl	24600 <CC_PalPowerSaveModeSelect>
   243a4:	b9e0      	cbnz	r0, 243e0 <CC_LibInit+0x5c>
   243a6:	4c22      	ldr	r4, [pc, #136]	; (24430 <CC_LibInit+0xac>)
   243a8:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   243ac:	0e1b      	lsrs	r3, r3, #24
   243ae:	2bf0      	cmp	r3, #240	; 0xf0
   243b0:	d10a      	bne.n	243c8 <CC_LibInit+0x44>
   243b2:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   243b6:	4b1f      	ldr	r3, [pc, #124]	; (24434 <CC_LibInit+0xb0>)
   243b8:	429a      	cmp	r2, r3
   243ba:	d031      	beq.n	24420 <CC_LibInit+0x9c>
   243bc:	f000 f844 	bl	24448 <CC_HalTerminate>
   243c0:	2407      	movs	r4, #7
   243c2:	f000 f891 	bl	244e8 <CC_PalTerminate>
   243c6:	e7e5      	b.n	24394 <CC_LibInit+0x10>
   243c8:	f000 f83e 	bl	24448 <CC_HalTerminate>
   243cc:	f000 f88c 	bl	244e8 <CC_PalTerminate>
   243d0:	2406      	movs	r4, #6
   243d2:	4620      	mov	r0, r4
   243d4:	b003      	add	sp, #12
   243d6:	bd30      	pop	{r4, r5, pc}
   243d8:	2404      	movs	r4, #4
   243da:	4620      	mov	r0, r4
   243dc:	b003      	add	sp, #12
   243de:	bd30      	pop	{r4, r5, pc}
   243e0:	f000 f832 	bl	24448 <CC_HalTerminate>
   243e4:	f000 f880 	bl	244e8 <CC_PalTerminate>
   243e8:	f7ff ff7e 	bl	242e8 <RndStartupTest.constprop.0>
   243ec:	4604      	mov	r4, r0
   243ee:	b998      	cbnz	r0, 24418 <CC_LibInit+0x94>
   243f0:	4d11      	ldr	r5, [pc, #68]	; (24438 <CC_LibInit+0xb4>)
   243f2:	682b      	ldr	r3, [r5, #0]
   243f4:	2b00      	cmp	r3, #0
   243f6:	d1cd      	bne.n	24394 <CC_LibInit+0x10>
   243f8:	4602      	mov	r2, r0
   243fa:	4601      	mov	r1, r0
   243fc:	f7ff f992 	bl	23724 <nrf_cc3xx_platform_ctr_drbg_init>
   24400:	b950      	cbnz	r0, 24418 <CC_LibInit+0x94>
   24402:	490e      	ldr	r1, [pc, #56]	; (2443c <CC_LibInit+0xb8>)
   24404:	ab01      	add	r3, sp, #4
   24406:	2268      	movs	r2, #104	; 0x68
   24408:	f7ff f9be 	bl	23788 <nrf_cc3xx_platform_ctr_drbg_get>
   2440c:	b920      	cbnz	r0, 24418 <CC_LibInit+0x94>
   2440e:	4b0c      	ldr	r3, [pc, #48]	; (24440 <CC_LibInit+0xbc>)
   24410:	602b      	str	r3, [r5, #0]
   24412:	4620      	mov	r0, r4
   24414:	b003      	add	sp, #12
   24416:	bd30      	pop	{r4, r5, pc}
   24418:	2405      	movs	r4, #5
   2441a:	4620      	mov	r0, r4
   2441c:	b003      	add	sp, #12
   2441e:	bd30      	pop	{r4, r5, pc}
   24420:	2001      	movs	r0, #1
   24422:	f000 f8ed 	bl	24600 <CC_PalPowerSaveModeSelect>
   24426:	2800      	cmp	r0, #0
   24428:	d1da      	bne.n	243e0 <CC_LibInit+0x5c>
   2442a:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   2442e:	e7db      	b.n	243e8 <CC_LibInit+0x64>
   24430:	5002b000 	.word	0x5002b000
   24434:	20e00000 	.word	0x20e00000
   24438:	20002e4c 	.word	0x20002e4c
   2443c:	20002de4 	.word	0x20002de4
   24440:	5a5aea5a 	.word	0x5a5aea5a

00024444 <CC_HalInit>:
   24444:	2000      	movs	r0, #0
   24446:	4770      	bx	lr

00024448 <CC_HalTerminate>:
   24448:	2000      	movs	r0, #0
   2444a:	4770      	bx	lr

0002444c <CC_HalClearInterruptBit>:
   2444c:	0543      	lsls	r3, r0, #21
   2444e:	d504      	bpl.n	2445a <CC_HalClearInterruptBit+0xe>
   24450:	4b04      	ldr	r3, [pc, #16]	; (24464 <CC_HalClearInterruptBit+0x18>)
   24452:	f04f 32ff 	mov.w	r2, #4294967295
   24456:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   2445a:	4b02      	ldr	r3, [pc, #8]	; (24464 <CC_HalClearInterruptBit+0x18>)
   2445c:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   24460:	4770      	bx	lr
   24462:	bf00      	nop
   24464:	5002b000 	.word	0x5002b000

00024468 <CC_HalMaskInterrupt>:
   24468:	4b01      	ldr	r3, [pc, #4]	; (24470 <CC_HalMaskInterrupt+0x8>)
   2446a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   2446e:	4770      	bx	lr
   24470:	5002b000 	.word	0x5002b000

00024474 <CC_HalWaitInterrupt>:
   24474:	b108      	cbz	r0, 2447a <CC_HalWaitInterrupt+0x6>
   24476:	f000 b86b 	b.w	24550 <CC_PalWaitInterrupt>
   2447a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   2447e:	4770      	bx	lr

00024480 <CC_HalWaitInterruptRND>:
   24480:	b108      	cbz	r0, 24486 <CC_HalWaitInterruptRND+0x6>
   24482:	f000 b84f 	b.w	24524 <CC_PalWaitInterruptRND>
   24486:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   2448a:	4770      	bx	lr

0002448c <CC_PalInit>:
   2448c:	b510      	push	{r4, lr}
   2448e:	4811      	ldr	r0, [pc, #68]	; (244d4 <CC_PalInit+0x48>)
   24490:	f000 f872 	bl	24578 <CC_PalMutexCreate>
   24494:	b100      	cbz	r0, 24498 <CC_PalInit+0xc>
   24496:	bd10      	pop	{r4, pc}
   24498:	480f      	ldr	r0, [pc, #60]	; (244d8 <CC_PalInit+0x4c>)
   2449a:	f000 f86d 	bl	24578 <CC_PalMutexCreate>
   2449e:	2800      	cmp	r0, #0
   244a0:	d1f9      	bne.n	24496 <CC_PalInit+0xa>
   244a2:	4c0e      	ldr	r4, [pc, #56]	; (244dc <CC_PalInit+0x50>)
   244a4:	4620      	mov	r0, r4
   244a6:	f000 f867 	bl	24578 <CC_PalMutexCreate>
   244aa:	2800      	cmp	r0, #0
   244ac:	d1f3      	bne.n	24496 <CC_PalInit+0xa>
   244ae:	4b0c      	ldr	r3, [pc, #48]	; (244e0 <CC_PalInit+0x54>)
   244b0:	480c      	ldr	r0, [pc, #48]	; (244e4 <CC_PalInit+0x58>)
   244b2:	601c      	str	r4, [r3, #0]
   244b4:	f000 f860 	bl	24578 <CC_PalMutexCreate>
   244b8:	4601      	mov	r1, r0
   244ba:	2800      	cmp	r0, #0
   244bc:	d1eb      	bne.n	24496 <CC_PalInit+0xa>
   244be:	f000 f82d 	bl	2451c <CC_PalDmaInit>
   244c2:	4604      	mov	r4, r0
   244c4:	b108      	cbz	r0, 244ca <CC_PalInit+0x3e>
   244c6:	4620      	mov	r0, r4
   244c8:	bd10      	pop	{r4, pc}
   244ca:	f000 f87b 	bl	245c4 <CC_PalPowerSaveModeInit>
   244ce:	4620      	mov	r0, r4
   244d0:	e7fa      	b.n	244c8 <CC_PalInit+0x3c>
   244d2:	bf00      	nop
   244d4:	200006e8 	.word	0x200006e8
   244d8:	200006dc 	.word	0x200006dc
   244dc:	200006e4 	.word	0x200006e4
   244e0:	200006ec 	.word	0x200006ec
   244e4:	200006e0 	.word	0x200006e0

000244e8 <CC_PalTerminate>:
   244e8:	b508      	push	{r3, lr}
   244ea:	4808      	ldr	r0, [pc, #32]	; (2450c <CC_PalTerminate+0x24>)
   244ec:	f000 f84e 	bl	2458c <CC_PalMutexDestroy>
   244f0:	4807      	ldr	r0, [pc, #28]	; (24510 <CC_PalTerminate+0x28>)
   244f2:	f000 f84b 	bl	2458c <CC_PalMutexDestroy>
   244f6:	4807      	ldr	r0, [pc, #28]	; (24514 <CC_PalTerminate+0x2c>)
   244f8:	f000 f848 	bl	2458c <CC_PalMutexDestroy>
   244fc:	4806      	ldr	r0, [pc, #24]	; (24518 <CC_PalTerminate+0x30>)
   244fe:	f000 f845 	bl	2458c <CC_PalMutexDestroy>
   24502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24506:	f000 b80b 	b.w	24520 <CC_PalDmaTerminate>
   2450a:	bf00      	nop
   2450c:	200006e8 	.word	0x200006e8
   24510:	200006dc 	.word	0x200006dc
   24514:	200006e4 	.word	0x200006e4
   24518:	200006e0 	.word	0x200006e0

0002451c <CC_PalDmaInit>:
   2451c:	2000      	movs	r0, #0
   2451e:	4770      	bx	lr

00024520 <CC_PalDmaTerminate>:
   24520:	4770      	bx	lr
   24522:	bf00      	nop

00024524 <CC_PalWaitInterruptRND>:
   24524:	b410      	push	{r4}
   24526:	4c09      	ldr	r4, [pc, #36]	; (2454c <CC_PalWaitInterruptRND+0x28>)
   24528:	4602      	mov	r2, r0
   2452a:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   2452e:	4213      	tst	r3, r2
   24530:	d0fb      	beq.n	2452a <CC_PalWaitInterruptRND+0x6>
   24532:	b121      	cbz	r1, 2453e <CC_PalWaitInterruptRND+0x1a>
   24534:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   24538:	600b      	str	r3, [r1, #0]
   2453a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2453e:	4b03      	ldr	r3, [pc, #12]	; (2454c <CC_PalWaitInterruptRND+0x28>)
   24540:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   24544:	2000      	movs	r0, #0
   24546:	bc10      	pop	{r4}
   24548:	4770      	bx	lr
   2454a:	bf00      	nop
   2454c:	5002b000 	.word	0x5002b000

00024550 <CC_PalWaitInterrupt>:
   24550:	4a04      	ldr	r2, [pc, #16]	; (24564 <CC_PalWaitInterrupt+0x14>)
   24552:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   24556:	4218      	tst	r0, r3
   24558:	d0fb      	beq.n	24552 <CC_PalWaitInterrupt+0x2>
   2455a:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   2455e:	2000      	movs	r0, #0
   24560:	4770      	bx	lr
   24562:	bf00      	nop
   24564:	5002b000 	.word	0x5002b000

00024568 <CC_PalMemCopyPlat>:
   24568:	f002 be45 	b.w	271f6 <memmove>

0002456c <CC_PalMemSetPlat>:
   2456c:	f002 be66 	b.w	2723c <memset>

00024570 <CC_PalMemSetZeroPlat>:
   24570:	460a      	mov	r2, r1
   24572:	2100      	movs	r1, #0
   24574:	f002 be62 	b.w	2723c <memset>

00024578 <CC_PalMutexCreate>:
   24578:	b508      	push	{r3, lr}
   2457a:	4b03      	ldr	r3, [pc, #12]	; (24588 <CC_PalMutexCreate+0x10>)
   2457c:	6802      	ldr	r2, [r0, #0]
   2457e:	681b      	ldr	r3, [r3, #0]
   24580:	6810      	ldr	r0, [r2, #0]
   24582:	4798      	blx	r3
   24584:	2000      	movs	r0, #0
   24586:	bd08      	pop	{r3, pc}
   24588:	2000069c 	.word	0x2000069c

0002458c <CC_PalMutexDestroy>:
   2458c:	b508      	push	{r3, lr}
   2458e:	4b03      	ldr	r3, [pc, #12]	; (2459c <CC_PalMutexDestroy+0x10>)
   24590:	6802      	ldr	r2, [r0, #0]
   24592:	685b      	ldr	r3, [r3, #4]
   24594:	6810      	ldr	r0, [r2, #0]
   24596:	4798      	blx	r3
   24598:	2000      	movs	r0, #0
   2459a:	bd08      	pop	{r3, pc}
   2459c:	2000069c 	.word	0x2000069c

000245a0 <CC_PalMutexLock>:
   245a0:	4b02      	ldr	r3, [pc, #8]	; (245ac <CC_PalMutexLock+0xc>)
   245a2:	6802      	ldr	r2, [r0, #0]
   245a4:	689b      	ldr	r3, [r3, #8]
   245a6:	6810      	ldr	r0, [r2, #0]
   245a8:	4718      	bx	r3
   245aa:	bf00      	nop
   245ac:	2000069c 	.word	0x2000069c

000245b0 <CC_PalMutexUnlock>:
   245b0:	b508      	push	{r3, lr}
   245b2:	4b03      	ldr	r3, [pc, #12]	; (245c0 <CC_PalMutexUnlock+0x10>)
   245b4:	6802      	ldr	r2, [r0, #0]
   245b6:	68db      	ldr	r3, [r3, #12]
   245b8:	6810      	ldr	r0, [r2, #0]
   245ba:	4798      	blx	r3
   245bc:	2000      	movs	r0, #0
   245be:	bd08      	pop	{r3, pc}
   245c0:	2000069c 	.word	0x2000069c

000245c4 <CC_PalPowerSaveModeInit>:
   245c4:	b570      	push	{r4, r5, r6, lr}
   245c6:	4c09      	ldr	r4, [pc, #36]	; (245ec <CC_PalPowerSaveModeInit+0x28>)
   245c8:	4d09      	ldr	r5, [pc, #36]	; (245f0 <CC_PalPowerSaveModeInit+0x2c>)
   245ca:	6920      	ldr	r0, [r4, #16]
   245cc:	68ab      	ldr	r3, [r5, #8]
   245ce:	4798      	blx	r3
   245d0:	b118      	cbz	r0, 245da <CC_PalPowerSaveModeInit+0x16>
   245d2:	4b08      	ldr	r3, [pc, #32]	; (245f4 <CC_PalPowerSaveModeInit+0x30>)
   245d4:	4808      	ldr	r0, [pc, #32]	; (245f8 <CC_PalPowerSaveModeInit+0x34>)
   245d6:	685b      	ldr	r3, [r3, #4]
   245d8:	4798      	blx	r3
   245da:	4a08      	ldr	r2, [pc, #32]	; (245fc <CC_PalPowerSaveModeInit+0x38>)
   245dc:	68eb      	ldr	r3, [r5, #12]
   245de:	6920      	ldr	r0, [r4, #16]
   245e0:	2100      	movs	r1, #0
   245e2:	6011      	str	r1, [r2, #0]
   245e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   245e8:	4718      	bx	r3
   245ea:	bf00      	nop
   245ec:	200006ac 	.word	0x200006ac
   245f0:	2000069c 	.word	0x2000069c
   245f4:	2000068c 	.word	0x2000068c
   245f8:	0002a994 	.word	0x0002a994
   245fc:	20003070 	.word	0x20003070

00024600 <CC_PalPowerSaveModeSelect>:
   24600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24602:	4d1a      	ldr	r5, [pc, #104]	; (2466c <CC_PalPowerSaveModeSelect+0x6c>)
   24604:	4e1a      	ldr	r6, [pc, #104]	; (24670 <CC_PalPowerSaveModeSelect+0x70>)
   24606:	4604      	mov	r4, r0
   24608:	68b2      	ldr	r2, [r6, #8]
   2460a:	6928      	ldr	r0, [r5, #16]
   2460c:	4790      	blx	r2
   2460e:	b9e8      	cbnz	r0, 2464c <CC_PalPowerSaveModeSelect+0x4c>
   24610:	4f18      	ldr	r7, [pc, #96]	; (24674 <CC_PalPowerSaveModeSelect+0x74>)
   24612:	683b      	ldr	r3, [r7, #0]
   24614:	b14c      	cbz	r4, 2462a <CC_PalPowerSaveModeSelect+0x2a>
   24616:	b1a3      	cbz	r3, 24642 <CC_PalPowerSaveModeSelect+0x42>
   24618:	2b01      	cmp	r3, #1
   2461a:	d019      	beq.n	24650 <CC_PalPowerSaveModeSelect+0x50>
   2461c:	3b01      	subs	r3, #1
   2461e:	603b      	str	r3, [r7, #0]
   24620:	6928      	ldr	r0, [r5, #16]
   24622:	68f3      	ldr	r3, [r6, #12]
   24624:	4798      	blx	r3
   24626:	2000      	movs	r0, #0
   24628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2462a:	b943      	cbnz	r3, 2463e <CC_PalPowerSaveModeSelect+0x3e>
   2462c:	4a12      	ldr	r2, [pc, #72]	; (24678 <CC_PalPowerSaveModeSelect+0x78>)
   2462e:	2101      	movs	r1, #1
   24630:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   24634:	4911      	ldr	r1, [pc, #68]	; (2467c <CC_PalPowerSaveModeSelect+0x7c>)
   24636:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   2463a:	2a00      	cmp	r2, #0
   2463c:	d1fb      	bne.n	24636 <CC_PalPowerSaveModeSelect+0x36>
   2463e:	3301      	adds	r3, #1
   24640:	603b      	str	r3, [r7, #0]
   24642:	68f3      	ldr	r3, [r6, #12]
   24644:	6928      	ldr	r0, [r5, #16]
   24646:	4798      	blx	r3
   24648:	2000      	movs	r0, #0
   2464a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2464c:	480c      	ldr	r0, [pc, #48]	; (24680 <CC_PalPowerSaveModeSelect+0x80>)
   2464e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24650:	4a0a      	ldr	r2, [pc, #40]	; (2467c <CC_PalPowerSaveModeSelect+0x7c>)
   24652:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   24656:	2b00      	cmp	r3, #0
   24658:	d1fb      	bne.n	24652 <CC_PalPowerSaveModeSelect+0x52>
   2465a:	4a07      	ldr	r2, [pc, #28]	; (24678 <CC_PalPowerSaveModeSelect+0x78>)
   2465c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   24660:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   24664:	f7ff ff00 	bl	24468 <CC_HalMaskInterrupt>
   24668:	683b      	ldr	r3, [r7, #0]
   2466a:	e7d7      	b.n	2461c <CC_PalPowerSaveModeSelect+0x1c>
   2466c:	200006ac 	.word	0x200006ac
   24670:	2000069c 	.word	0x2000069c
   24674:	20003070 	.word	0x20003070
   24678:	5002a000 	.word	0x5002a000
   2467c:	5002b000 	.word	0x5002b000
   24680:	ffff8fe9 	.word	0xffff8fe9

00024684 <mutex_init>:
   24684:	4b01      	ldr	r3, [pc, #4]	; (2468c <mutex_init+0x8>)
   24686:	681b      	ldr	r3, [r3, #0]
   24688:	4718      	bx	r3
   2468a:	bf00      	nop
   2468c:	2000069c 	.word	0x2000069c

00024690 <mutex_lock>:
   24690:	4b01      	ldr	r3, [pc, #4]	; (24698 <mutex_lock+0x8>)
   24692:	689b      	ldr	r3, [r3, #8]
   24694:	4718      	bx	r3
   24696:	bf00      	nop
   24698:	2000069c 	.word	0x2000069c

0002469c <mutex_unlock>:
   2469c:	4b01      	ldr	r3, [pc, #4]	; (246a4 <mutex_unlock+0x8>)
   2469e:	68db      	ldr	r3, [r3, #12]
   246a0:	4718      	bx	r3
   246a2:	bf00      	nop
   246a4:	2000069c 	.word	0x2000069c

000246a8 <startTrngHW>:
   246a8:	2800      	cmp	r0, #0
   246aa:	f000 8084 	beq.w	247b6 <startTrngHW+0x10e>
   246ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   246b2:	460c      	mov	r4, r1
   246b4:	b083      	sub	sp, #12
   246b6:	2900      	cmp	r1, #0
   246b8:	d078      	beq.n	247ac <startTrngHW+0x104>
   246ba:	461d      	mov	r5, r3
   246bc:	2b00      	cmp	r3, #0
   246be:	d075      	beq.n	247ac <startTrngHW+0x104>
   246c0:	4607      	mov	r7, r0
   246c2:	b11a      	cbz	r2, 246cc <startTrngHW+0x24>
   246c4:	2201      	movs	r2, #1
   246c6:	2300      	movs	r3, #0
   246c8:	602a      	str	r2, [r5, #0]
   246ca:	6003      	str	r3, [r0, #0]
   246cc:	682b      	ldr	r3, [r5, #0]
   246ce:	2b00      	cmp	r3, #0
   246d0:	d067      	beq.n	247a2 <startTrngHW+0xfa>
   246d2:	4629      	mov	r1, r5
   246d4:	4620      	mov	r0, r4
   246d6:	f000 fde9 	bl	252ac <LLF_RND_GetFastestRosc>
   246da:	4603      	mov	r3, r0
   246dc:	2800      	cmp	r0, #0
   246de:	d161      	bne.n	247a4 <startTrngHW+0xfc>
   246e0:	6828      	ldr	r0, [r5, #0]
   246e2:	4621      	mov	r1, r4
   246e4:	f000 fdc4 	bl	25270 <LLF_RND_GetRoscSampleCnt>
   246e8:	4603      	mov	r3, r0
   246ea:	2800      	cmp	r0, #0
   246ec:	d15a      	bne.n	247a4 <startTrngHW+0xfc>
   246ee:	682a      	ldr	r2, [r5, #0]
   246f0:	2a08      	cmp	r2, #8
   246f2:	d072      	beq.n	247da <startTrngHW+0x132>
   246f4:	2a04      	cmp	r2, #4
   246f6:	d073      	beq.n	247e0 <startTrngHW+0x138>
   246f8:	f1a2 0802 	sub.w	r8, r2, #2
   246fc:	fab8 f888 	clz	r8, r8
   24700:	ea4f 1858 	mov.w	r8, r8, lsr #5
   24704:	4e38      	ldr	r6, [pc, #224]	; (247e8 <startTrngHW+0x140>)
   24706:	2001      	movs	r0, #1
   24708:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   2470c:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   24710:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   24714:	6a62      	ldr	r2, [r4, #36]	; 0x24
   24716:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   2471a:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   2471e:	428a      	cmp	r2, r1
   24720:	d1f6      	bne.n	24710 <startTrngHW+0x68>
   24722:	f04f 0900 	mov.w	r9, #0
   24726:	9301      	str	r3, [sp, #4]
   24728:	f04f 30ff 	mov.w	r0, #4294967295
   2472c:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   24730:	f7ff fe8c 	bl	2444c <CC_HalClearInterruptBit>
   24734:	f06f 021b 	mvn.w	r2, #27
   24738:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   2473c:	4648      	mov	r0, r9
   2473e:	f7ff fe93 	bl	24468 <CC_HalMaskInterrupt>
   24742:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   24746:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   2474a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   2474e:	f7ff fe8b 	bl	24468 <CC_HalMaskInterrupt>
   24752:	220a      	movs	r2, #10
   24754:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   24758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2475a:	2b01      	cmp	r3, #1
   2475c:	9b01      	ldr	r3, [sp, #4]
   2475e:	d02d      	beq.n	247bc <startTrngHW+0x114>
   24760:	6922      	ldr	r2, [r4, #16]
   24762:	4922      	ldr	r1, [pc, #136]	; (247ec <startTrngHW+0x144>)
   24764:	fba1 1202 	umull	r1, r2, r1, r2
   24768:	0912      	lsrs	r2, r2, #4
   2476a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2476c:	fb01 f202 	mul.w	r2, r1, r2
   24770:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   24774:	491c      	ldr	r1, [pc, #112]	; (247e8 <startTrngHW+0x140>)
   24776:	03d2      	lsls	r2, r2, #15
   24778:	0992      	lsrs	r2, r2, #6
   2477a:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   2477e:	2201      	movs	r2, #1
   24780:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   24784:	683a      	ldr	r2, [r7, #0]
   24786:	6829      	ldr	r1, [r5, #0]
   24788:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   2478c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   24790:	603a      	str	r2, [r7, #0]
   24792:	6829      	ldr	r1, [r5, #0]
   24794:	4618      	mov	r0, r3
   24796:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2479a:	603a      	str	r2, [r7, #0]
   2479c:	b003      	add	sp, #12
   2479e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   247a2:	4b13      	ldr	r3, [pc, #76]	; (247f0 <startTrngHW+0x148>)
   247a4:	4618      	mov	r0, r3
   247a6:	b003      	add	sp, #12
   247a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   247ac:	4b11      	ldr	r3, [pc, #68]	; (247f4 <startTrngHW+0x14c>)
   247ae:	4618      	mov	r0, r3
   247b0:	b003      	add	sp, #12
   247b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   247b6:	4b0f      	ldr	r3, [pc, #60]	; (247f4 <startTrngHW+0x14c>)
   247b8:	4618      	mov	r0, r3
   247ba:	4770      	bx	lr
   247bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   247c0:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   247c4:	3101      	adds	r1, #1
   247c6:	d006      	beq.n	247d6 <startTrngHW+0x12e>
   247c8:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   247cc:	4907      	ldr	r1, [pc, #28]	; (247ec <startTrngHW+0x144>)
   247ce:	fba1 1202 	umull	r1, r2, r1, r2
   247d2:	0912      	lsrs	r2, r2, #4
   247d4:	e7c9      	b.n	2476a <startTrngHW+0xc2>
   247d6:	2216      	movs	r2, #22
   247d8:	e7c7      	b.n	2476a <startTrngHW+0xc2>
   247da:	f04f 0803 	mov.w	r8, #3
   247de:	e791      	b.n	24704 <startTrngHW+0x5c>
   247e0:	f04f 0802 	mov.w	r8, #2
   247e4:	e78e      	b.n	24704 <startTrngHW+0x5c>
   247e6:	bf00      	nop
   247e8:	5002b000 	.word	0x5002b000
   247ec:	aaaaaaab 	.word	0xaaaaaaab
   247f0:	00f10c31 	.word	0x00f10c31
   247f4:	00f10c35 	.word	0x00f10c35

000247f8 <LLF_RND_RepetitionCounterTest.part.0>:
   247f8:	b570      	push	{r4, r5, r6, lr}
   247fa:	00c9      	lsls	r1, r1, #3
   247fc:	2400      	movs	r4, #0
   247fe:	1e4e      	subs	r6, r1, #1
   24800:	f04f 0c01 	mov.w	ip, #1
   24804:	4625      	mov	r5, r4
   24806:	46a6      	mov	lr, r4
   24808:	e008      	b.n	2481c <LLF_RND_RepetitionCounterTest.part.0+0x24>
   2480a:	459e      	cmp	lr, r3
   2480c:	d015      	beq.n	2483a <LLF_RND_RepetitionCounterTest.part.0+0x42>
   2480e:	2501      	movs	r5, #1
   24810:	45b4      	cmp	ip, r6
   24812:	d817      	bhi.n	24844 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   24814:	3401      	adds	r4, #1
   24816:	f10c 0c01 	add.w	ip, ip, #1
   2481a:	469e      	mov	lr, r3
   2481c:	0963      	lsrs	r3, r4, #5
   2481e:	f004 011f 	and.w	r1, r4, #31
   24822:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   24826:	291f      	cmp	r1, #31
   24828:	fa23 f301 	lsr.w	r3, r3, r1
   2482c:	bf18      	it	ne
   2482e:	f003 0301 	andne.w	r3, r3, #1
   24832:	2c00      	cmp	r4, #0
   24834:	d1e9      	bne.n	2480a <LLF_RND_RepetitionCounterTest.part.0+0x12>
   24836:	2501      	movs	r5, #1
   24838:	e7ec      	b.n	24814 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   2483a:	3501      	adds	r5, #1
   2483c:	4295      	cmp	r5, r2
   2483e:	d1e7      	bne.n	24810 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   24840:	4801      	ldr	r0, [pc, #4]	; (24848 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   24842:	bd70      	pop	{r4, r5, r6, pc}
   24844:	2000      	movs	r0, #0
   24846:	bd70      	pop	{r4, r5, r6, pc}
   24848:	00f10c36 	.word	0x00f10c36

0002484c <LLF_RND_AdaptiveProportionTest>:
   2484c:	2800      	cmp	r0, #0
   2484e:	d03f      	beq.n	248d0 <LLF_RND_AdaptiveProportionTest+0x84>
   24850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24854:	1e4c      	subs	r4, r1, #1
   24856:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   2485a:	d228      	bcs.n	248ae <LLF_RND_AdaptiveProportionTest+0x62>
   2485c:	b33b      	cbz	r3, 248ae <LLF_RND_AdaptiveProportionTest+0x62>
   2485e:	b332      	cbz	r2, 248ae <LLF_RND_AdaptiveProportionTest+0x62>
   24860:	f04f 0e00 	mov.w	lr, #0
   24864:	00cf      	lsls	r7, r1, #3
   24866:	4676      	mov	r6, lr
   24868:	4675      	mov	r5, lr
   2486a:	4674      	mov	r4, lr
   2486c:	f103 38ff 	add.w	r8, r3, #4294967295
   24870:	0961      	lsrs	r1, r4, #5
   24872:	f004 0c1f 	and.w	ip, r4, #31
   24876:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   2487a:	f1bc 0f1f 	cmp.w	ip, #31
   2487e:	fa21 f10c 	lsr.w	r1, r1, ip
   24882:	bf18      	it	ne
   24884:	f001 0101 	andne.w	r1, r1, #1
   24888:	b1a4      	cbz	r4, 248b4 <LLF_RND_AdaptiveProportionTest+0x68>
   2488a:	42ab      	cmp	r3, r5
   2488c:	d018      	beq.n	248c0 <LLF_RND_AdaptiveProportionTest+0x74>
   2488e:	428e      	cmp	r6, r1
   24890:	bf08      	it	eq
   24892:	f10e 0e01 	addeq.w	lr, lr, #1
   24896:	45a8      	cmp	r8, r5
   24898:	d015      	beq.n	248c6 <LLF_RND_AdaptiveProportionTest+0x7a>
   2489a:	3501      	adds	r5, #1
   2489c:	4631      	mov	r1, r6
   2489e:	3401      	adds	r4, #1
   248a0:	42bc      	cmp	r4, r7
   248a2:	d001      	beq.n	248a8 <LLF_RND_AdaptiveProportionTest+0x5c>
   248a4:	460e      	mov	r6, r1
   248a6:	e7e3      	b.n	24870 <LLF_RND_AdaptiveProportionTest+0x24>
   248a8:	2000      	movs	r0, #0
   248aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   248ae:	4809      	ldr	r0, [pc, #36]	; (248d4 <LLF_RND_AdaptiveProportionTest+0x88>)
   248b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   248b4:	f04f 0e01 	mov.w	lr, #1
   248b8:	4674      	mov	r4, lr
   248ba:	4675      	mov	r5, lr
   248bc:	460e      	mov	r6, r1
   248be:	e7d7      	b.n	24870 <LLF_RND_AdaptiveProportionTest+0x24>
   248c0:	2501      	movs	r5, #1
   248c2:	46ae      	mov	lr, r5
   248c4:	e7eb      	b.n	2489e <LLF_RND_AdaptiveProportionTest+0x52>
   248c6:	4572      	cmp	r2, lr
   248c8:	d3f1      	bcc.n	248ae <LLF_RND_AdaptiveProportionTest+0x62>
   248ca:	4631      	mov	r1, r6
   248cc:	461d      	mov	r5, r3
   248ce:	e7e6      	b.n	2489e <LLF_RND_AdaptiveProportionTest+0x52>
   248d0:	4800      	ldr	r0, [pc, #0]	; (248d4 <LLF_RND_AdaptiveProportionTest+0x88>)
   248d2:	4770      	bx	lr
   248d4:	00f10c37 	.word	0x00f10c37

000248d8 <getTrngSource>:
   248d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248dc:	b091      	sub	sp, #68	; 0x44
   248de:	460d      	mov	r5, r1
   248e0:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   248e4:	4681      	mov	r9, r0
   248e6:	2900      	cmp	r1, #0
   248e8:	d14c      	bne.n	24984 <getTrngSource+0xac>
   248ea:	6928      	ldr	r0, [r5, #16]
   248ec:	9006      	str	r0, [sp, #24]
   248ee:	981a      	ldr	r0, [sp, #104]	; 0x68
   248f0:	601c      	str	r4, [r3, #0]
   248f2:	2300      	movs	r3, #0
   248f4:	6003      	str	r3, [r0, #0]
   248f6:	2a00      	cmp	r2, #0
   248f8:	f000 8124 	beq.w	24b44 <getTrngSource+0x26c>
   248fc:	4b9d      	ldr	r3, [pc, #628]	; (24b74 <getTrngSource+0x29c>)
   248fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   24900:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   24904:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   24908:	429a      	cmp	r2, r3
   2490a:	d147      	bne.n	2499c <getTrngSource+0xc4>
   2490c:	290a      	cmp	r1, #10
   2490e:	d145      	bne.n	2499c <getTrngSource+0xc4>
   24910:	f899 3003 	ldrb.w	r3, [r9, #3]
   24914:	9308      	str	r3, [sp, #32]
   24916:	f104 0308 	add.w	r3, r4, #8
   2491a:	9a06      	ldr	r2, [sp, #24]
   2491c:	9307      	str	r3, [sp, #28]
   2491e:	4b96      	ldr	r3, [pc, #600]	; (24b78 <getTrngSource+0x2a0>)
   24920:	4c94      	ldr	r4, [pc, #592]	; (24b74 <getTrngSource+0x29c>)
   24922:	fba3 1302 	umull	r1, r3, r3, r2
   24926:	089b      	lsrs	r3, r3, #2
   24928:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2492c:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   24930:	9303      	str	r3, [sp, #12]
   24932:	2304      	movs	r3, #4
   24934:	9305      	str	r3, [sp, #20]
   24936:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   24938:	9e06      	ldr	r6, [sp, #24]
   2493a:	601e      	str	r6, [r3, #0]
   2493c:	2e00      	cmp	r6, #0
   2493e:	d033      	beq.n	249a8 <getTrngSource+0xd0>
   24940:	f8dd 801c 	ldr.w	r8, [sp, #28]
   24944:	2700      	movs	r7, #0
   24946:	f04f 0a01 	mov.w	sl, #1
   2494a:	f000 fcbf 	bl	252cc <LLF_RND_TurnOffTrng>
   2494e:	2300      	movs	r3, #0
   24950:	9309      	str	r3, [sp, #36]	; 0x24
   24952:	f1b9 0f00 	cmp.w	r9, #0
   24956:	f000 80df 	beq.w	24b18 <getTrngSource+0x240>
   2495a:	2d00      	cmp	r5, #0
   2495c:	f000 80dc 	beq.w	24b18 <getTrngSource+0x240>
   24960:	9b08      	ldr	r3, [sp, #32]
   24962:	b1eb      	cbz	r3, 249a0 <getTrngSource+0xc8>
   24964:	a908      	add	r1, sp, #32
   24966:	4628      	mov	r0, r5
   24968:	f000 fca0 	bl	252ac <LLF_RND_GetFastestRosc>
   2496c:	2800      	cmp	r0, #0
   2496e:	d03e      	beq.n	249ee <getTrngSource+0x116>
   24970:	4b82      	ldr	r3, [pc, #520]	; (24b7c <getTrngSource+0x2a4>)
   24972:	4298      	cmp	r0, r3
   24974:	d118      	bne.n	249a8 <getTrngSource+0xd0>
   24976:	9003      	str	r0, [sp, #12]
   24978:	f000 fca8 	bl	252cc <LLF_RND_TurnOffTrng>
   2497c:	9803      	ldr	r0, [sp, #12]
   2497e:	b011      	add	sp, #68	; 0x44
   24980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24984:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   24988:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   2498c:	3601      	adds	r6, #1
   2498e:	bf14      	ite	ne
   24990:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   24994:	f44f 7004 	moveq.w	r0, #528	; 0x210
   24998:	9006      	str	r0, [sp, #24]
   2499a:	e7a8      	b.n	248ee <getTrngSource+0x16>
   2499c:	4878      	ldr	r0, [pc, #480]	; (24b80 <getTrngSource+0x2a8>)
   2499e:	e7ea      	b.n	24976 <getTrngSource+0x9e>
   249a0:	4878      	ldr	r0, [pc, #480]	; (24b84 <getTrngSource+0x2ac>)
   249a2:	4b76      	ldr	r3, [pc, #472]	; (24b7c <getTrngSource+0x2a4>)
   249a4:	4298      	cmp	r0, r3
   249a6:	d0e6      	beq.n	24976 <getTrngSource+0x9e>
   249a8:	9b08      	ldr	r3, [sp, #32]
   249aa:	2b08      	cmp	r3, #8
   249ac:	f000 80c8 	beq.w	24b40 <getTrngSource+0x268>
   249b0:	005b      	lsls	r3, r3, #1
   249b2:	2200      	movs	r2, #0
   249b4:	9308      	str	r3, [sp, #32]
   249b6:	9200      	str	r2, [sp, #0]
   249b8:	ab08      	add	r3, sp, #32
   249ba:	4629      	mov	r1, r5
   249bc:	4648      	mov	r0, r9
   249be:	f7ff fe73 	bl	246a8 <startTrngHW>
   249c2:	4b70      	ldr	r3, [pc, #448]	; (24b84 <getTrngSource+0x2ac>)
   249c4:	4298      	cmp	r0, r3
   249c6:	f000 80b7 	beq.w	24b38 <getTrngSource+0x260>
   249ca:	2800      	cmp	r0, #0
   249cc:	d1d3      	bne.n	24976 <getTrngSource+0x9e>
   249ce:	f8d9 2000 	ldr.w	r2, [r9]
   249d2:	0a13      	lsrs	r3, r2, #8
   249d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   249d8:	4313      	orrs	r3, r2
   249da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   249de:	f8c9 3000 	str.w	r3, [r9]
   249e2:	9b05      	ldr	r3, [sp, #20]
   249e4:	3b01      	subs	r3, #1
   249e6:	9305      	str	r3, [sp, #20]
   249e8:	d1a5      	bne.n	24936 <getTrngSource+0x5e>
   249ea:	2000      	movs	r0, #0
   249ec:	e7c3      	b.n	24976 <getTrngSource+0x9e>
   249ee:	9808      	ldr	r0, [sp, #32]
   249f0:	4629      	mov	r1, r5
   249f2:	f000 fc3d 	bl	25270 <LLF_RND_GetRoscSampleCnt>
   249f6:	2800      	cmp	r0, #0
   249f8:	d1ba      	bne.n	24970 <getTrngSource+0x98>
   249fa:	9b08      	ldr	r3, [sp, #32]
   249fc:	2b08      	cmp	r3, #8
   249fe:	f000 8095 	beq.w	24b2c <getTrngSource+0x254>
   24a02:	2b04      	cmp	r3, #4
   24a04:	f000 8095 	beq.w	24b32 <getTrngSource+0x25a>
   24a08:	f1a3 0302 	sub.w	r3, r3, #2
   24a0c:	fab3 f383 	clz	r3, r3
   24a10:	095b      	lsrs	r3, r3, #5
   24a12:	9304      	str	r3, [sp, #16]
   24a14:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   24a18:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   24a1c:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   24a20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   24a22:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   24a26:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   24a2a:	4293      	cmp	r3, r2
   24a2c:	d1f6      	bne.n	24a1c <getTrngSource+0x144>
   24a2e:	f04f 0b00 	mov.w	fp, #0
   24a32:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   24a36:	f04f 30ff 	mov.w	r0, #4294967295
   24a3a:	f7ff fd07 	bl	2444c <CC_HalClearInterruptBit>
   24a3e:	f06f 031b 	mvn.w	r3, #27
   24a42:	4658      	mov	r0, fp
   24a44:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   24a48:	f7ff fd0e 	bl	24468 <CC_HalMaskInterrupt>
   24a4c:	9b04      	ldr	r3, [sp, #16]
   24a4e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   24a52:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   24a56:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   24a5a:	f7ff fd05 	bl	24468 <CC_HalMaskInterrupt>
   24a5e:	230a      	movs	r3, #10
   24a60:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   24a64:	692b      	ldr	r3, [r5, #16]
   24a66:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   24a6a:	fbab 2303 	umull	r2, r3, fp, r3
   24a6e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   24a70:	091b      	lsrs	r3, r3, #4
   24a72:	fb02 f303 	mul.w	r3, r2, r3
   24a76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   24a7a:	03db      	lsls	r3, r3, #15
   24a7c:	099b      	lsrs	r3, r3, #6
   24a7e:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   24a82:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   24a86:	9908      	ldr	r1, [sp, #32]
   24a88:	f8d9 2000 	ldr.w	r2, [r9]
   24a8c:	020b      	lsls	r3, r1, #8
   24a8e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   24a92:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   24a96:	4313      	orrs	r3, r2
   24a98:	f8c9 3000 	str.w	r3, [r9]
   24a9c:	a809      	add	r0, sp, #36	; 0x24
   24a9e:	f000 fbd7 	bl	25250 <LLF_RND_WaitRngInterrupt>
   24aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24aa4:	f003 031a 	and.w	r3, r3, #26
   24aa8:	4303      	orrs	r3, r0
   24aaa:	f47f af7d 	bne.w	249a8 <getTrngSource+0xd0>
   24aae:	fbab 3b06 	umull	r3, fp, fp, r6
   24ab2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   24ab6:	930a      	str	r3, [sp, #40]	; 0x28
   24ab8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   24abc:	930b      	str	r3, [sp, #44]	; 0x2c
   24abe:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   24ac2:	930c      	str	r3, [sp, #48]	; 0x30
   24ac4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   24ac8:	930d      	str	r3, [sp, #52]	; 0x34
   24aca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   24ace:	930e      	str	r3, [sp, #56]	; 0x38
   24ad0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   24ad4:	930f      	str	r3, [sp, #60]	; 0x3c
   24ad6:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   24ada:	d101      	bne.n	24ae0 <getTrngSource+0x208>
   24adc:	9b03      	ldr	r3, [sp, #12]
   24ade:	b9eb      	cbnz	r3, 24b1c <getTrngSource+0x244>
   24ae0:	4640      	mov	r0, r8
   24ae2:	2218      	movs	r2, #24
   24ae4:	a90a      	add	r1, sp, #40	; 0x28
   24ae6:	3e18      	subs	r6, #24
   24ae8:	f108 0818 	add.w	r8, r8, #24
   24aec:	f7ff fd3c 	bl	24568 <CC_PalMemCopyPlat>
   24af0:	3701      	adds	r7, #1
   24af2:	2e00      	cmp	r6, #0
   24af4:	f47f af29 	bne.w	2494a <getTrngSource+0x72>
   24af8:	9b06      	ldr	r3, [sp, #24]
   24afa:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   24afe:	d836      	bhi.n	24b6e <getTrngSource+0x296>
   24b00:	9e07      	ldr	r6, [sp, #28]
   24b02:	696a      	ldr	r2, [r5, #20]
   24b04:	4619      	mov	r1, r3
   24b06:	4630      	mov	r0, r6
   24b08:	461f      	mov	r7, r3
   24b0a:	f7ff fe75 	bl	247f8 <LLF_RND_RepetitionCounterTest.part.0>
   24b0e:	b320      	cbz	r0, 24b5a <getTrngSource+0x282>
   24b10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   24b12:	2300      	movs	r3, #0
   24b14:	6013      	str	r3, [r2, #0]
   24b16:	e72b      	b.n	24970 <getTrngSource+0x98>
   24b18:	481b      	ldr	r0, [pc, #108]	; (24b88 <getTrngSource+0x2b0>)
   24b1a:	e729      	b.n	24970 <getTrngSource+0x98>
   24b1c:	4640      	mov	r0, r8
   24b1e:	461a      	mov	r2, r3
   24b20:	a90a      	add	r1, sp, #40	; 0x28
   24b22:	1af6      	subs	r6, r6, r3
   24b24:	4498      	add	r8, r3
   24b26:	f7ff fd1f 	bl	24568 <CC_PalMemCopyPlat>
   24b2a:	e7e1      	b.n	24af0 <getTrngSource+0x218>
   24b2c:	2303      	movs	r3, #3
   24b2e:	9304      	str	r3, [sp, #16]
   24b30:	e770      	b.n	24a14 <getTrngSource+0x13c>
   24b32:	2302      	movs	r3, #2
   24b34:	9304      	str	r3, [sp, #16]
   24b36:	e76d      	b.n	24a14 <getTrngSource+0x13c>
   24b38:	6a2b      	ldr	r3, [r5, #32]
   24b3a:	2b00      	cmp	r3, #0
   24b3c:	f43f af1b 	beq.w	24976 <getTrngSource+0x9e>
   24b40:	4812      	ldr	r0, [pc, #72]	; (24b8c <getTrngSource+0x2b4>)
   24b42:	e718      	b.n	24976 <getTrngSource+0x9e>
   24b44:	9100      	str	r1, [sp, #0]
   24b46:	ab08      	add	r3, sp, #32
   24b48:	2201      	movs	r2, #1
   24b4a:	4629      	mov	r1, r5
   24b4c:	4648      	mov	r0, r9
   24b4e:	f7ff fdab 	bl	246a8 <startTrngHW>
   24b52:	2800      	cmp	r0, #0
   24b54:	f43f aedf 	beq.w	24916 <getTrngSource+0x3e>
   24b58:	e70d      	b.n	24976 <getTrngSource+0x9e>
   24b5a:	69aa      	ldr	r2, [r5, #24]
   24b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   24b60:	4639      	mov	r1, r7
   24b62:	4630      	mov	r0, r6
   24b64:	f7ff fe72 	bl	2484c <LLF_RND_AdaptiveProportionTest>
   24b68:	2800      	cmp	r0, #0
   24b6a:	d1d1      	bne.n	24b10 <getTrngSource+0x238>
   24b6c:	e73d      	b.n	249ea <getTrngSource+0x112>
   24b6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   24b70:	601e      	str	r6, [r3, #0]
   24b72:	e719      	b.n	249a8 <getTrngSource+0xd0>
   24b74:	5002b000 	.word	0x5002b000
   24b78:	aaaaaaab 	.word	0xaaaaaaab
   24b7c:	00f10c02 	.word	0x00f10c02
   24b80:	00f10c30 	.word	0x00f10c30
   24b84:	00f10c31 	.word	0x00f10c31
   24b88:	00f10c35 	.word	0x00f10c35
   24b8c:	00f10c32 	.word	0x00f10c32

00024b90 <LLF_RND_GetTrngSource>:
   24b90:	b410      	push	{r4}
   24b92:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   24b96:	9401      	str	r4, [sp, #4]
   24b98:	9c03      	ldr	r4, [sp, #12]
   24b9a:	9402      	str	r4, [sp, #8]
   24b9c:	2400      	movs	r4, #0
   24b9e:	9403      	str	r4, [sp, #12]
   24ba0:	bc10      	pop	{r4}
   24ba2:	f7ff be99 	b.w	248d8 <getTrngSource>
   24ba6:	bf00      	nop

00024ba8 <LLF_RND_RunTrngStartupTest>:
   24ba8:	b510      	push	{r4, lr}
   24baa:	b086      	sub	sp, #24
   24bac:	ab05      	add	r3, sp, #20
   24bae:	2401      	movs	r4, #1
   24bb0:	e9cd 2401 	strd	r2, r4, [sp, #4]
   24bb4:	9300      	str	r3, [sp, #0]
   24bb6:	2200      	movs	r2, #0
   24bb8:	ab04      	add	r3, sp, #16
   24bba:	f7ff fe8d 	bl	248d8 <getTrngSource>
   24bbe:	b006      	add	sp, #24
   24bc0:	bd10      	pop	{r4, pc}
   24bc2:	bf00      	nop

00024bc4 <mbedtls_hardware_poll>:
   24bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   24bc6:	b089      	sub	sp, #36	; 0x24
   24bc8:	9205      	str	r2, [sp, #20]
   24bca:	2900      	cmp	r1, #0
   24bcc:	d064      	beq.n	24c98 <mbedtls_hardware_poll+0xd4>
   24bce:	461c      	mov	r4, r3
   24bd0:	2b00      	cmp	r3, #0
   24bd2:	d061      	beq.n	24c98 <mbedtls_hardware_poll+0xd4>
   24bd4:	4615      	mov	r5, r2
   24bd6:	2a00      	cmp	r2, #0
   24bd8:	d05e      	beq.n	24c98 <mbedtls_hardware_poll+0xd4>
   24bda:	4f31      	ldr	r7, [pc, #196]	; (24ca0 <mbedtls_hardware_poll+0xdc>)
   24bdc:	460e      	mov	r6, r1
   24bde:	6838      	ldr	r0, [r7, #0]
   24be0:	f04f 31ff 	mov.w	r1, #4294967295
   24be4:	f7ff fcdc 	bl	245a0 <CC_PalMutexLock>
   24be8:	2800      	cmp	r0, #0
   24bea:	d14b      	bne.n	24c84 <mbedtls_hardware_poll+0xc0>
   24bec:	2000      	movs	r0, #0
   24bee:	f7ff fd07 	bl	24600 <CC_PalPowerSaveModeSelect>
   24bf2:	2800      	cmp	r0, #0
   24bf4:	d142      	bne.n	24c7c <mbedtls_hardware_poll+0xb8>
   24bf6:	482b      	ldr	r0, [pc, #172]	; (24ca4 <mbedtls_hardware_poll+0xe0>)
   24bf8:	f000 fa9a 	bl	25130 <RNG_PLAT_SetUserRngParameters>
   24bfc:	b1d8      	cbz	r0, 24c36 <mbedtls_hardware_poll+0x72>
   24bfe:	2001      	movs	r0, #1
   24c00:	f04f 36ff 	mov.w	r6, #4294967295
   24c04:	f7ff fcfc 	bl	24600 <CC_PalPowerSaveModeSelect>
   24c08:	2800      	cmp	r0, #0
   24c0a:	d133      	bne.n	24c74 <mbedtls_hardware_poll+0xb0>
   24c0c:	4826      	ldr	r0, [pc, #152]	; (24ca8 <mbedtls_hardware_poll+0xe4>)
   24c0e:	f44f 7108 	mov.w	r1, #544	; 0x220
   24c12:	f7fe fe63 	bl	238dc <mbedtls_zeroize_internal>
   24c16:	4825      	ldr	r0, [pc, #148]	; (24cac <mbedtls_hardware_poll+0xe8>)
   24c18:	2104      	movs	r1, #4
   24c1a:	f7fe fe5f 	bl	238dc <mbedtls_zeroize_internal>
   24c1e:	4821      	ldr	r0, [pc, #132]	; (24ca4 <mbedtls_hardware_poll+0xe0>)
   24c20:	2128      	movs	r1, #40	; 0x28
   24c22:	f7fe fe5b 	bl	238dc <mbedtls_zeroize_internal>
   24c26:	6838      	ldr	r0, [r7, #0]
   24c28:	f7ff fcc2 	bl	245b0 <CC_PalMutexUnlock>
   24c2c:	2800      	cmp	r0, #0
   24c2e:	d12d      	bne.n	24c8c <mbedtls_hardware_poll+0xc8>
   24c30:	4630      	mov	r0, r6
   24c32:	b009      	add	sp, #36	; 0x24
   24c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24c36:	4b1c      	ldr	r3, [pc, #112]	; (24ca8 <mbedtls_hardware_poll+0xe4>)
   24c38:	9302      	str	r3, [sp, #8]
   24c3a:	ab07      	add	r3, sp, #28
   24c3c:	9003      	str	r0, [sp, #12]
   24c3e:	4602      	mov	r2, r0
   24c40:	9300      	str	r3, [sp, #0]
   24c42:	4918      	ldr	r1, [pc, #96]	; (24ca4 <mbedtls_hardware_poll+0xe0>)
   24c44:	4819      	ldr	r0, [pc, #100]	; (24cac <mbedtls_hardware_poll+0xe8>)
   24c46:	9401      	str	r4, [sp, #4]
   24c48:	ab05      	add	r3, sp, #20
   24c4a:	f7ff ffa1 	bl	24b90 <LLF_RND_GetTrngSource>
   24c4e:	4603      	mov	r3, r0
   24c50:	2800      	cmp	r0, #0
   24c52:	d1d4      	bne.n	24bfe <mbedtls_hardware_poll+0x3a>
   24c54:	6822      	ldr	r2, [r4, #0]
   24c56:	42aa      	cmp	r2, r5
   24c58:	d3d1      	bcc.n	24bfe <mbedtls_hardware_poll+0x3a>
   24c5a:	9907      	ldr	r1, [sp, #28]
   24c5c:	4630      	mov	r0, r6
   24c5e:	3108      	adds	r1, #8
   24c60:	462a      	mov	r2, r5
   24c62:	461e      	mov	r6, r3
   24c64:	f7ff fc80 	bl	24568 <CC_PalMemCopyPlat>
   24c68:	6025      	str	r5, [r4, #0]
   24c6a:	2001      	movs	r0, #1
   24c6c:	f7ff fcc8 	bl	24600 <CC_PalPowerSaveModeSelect>
   24c70:	2800      	cmp	r0, #0
   24c72:	d0cb      	beq.n	24c0c <mbedtls_hardware_poll+0x48>
   24c74:	480e      	ldr	r0, [pc, #56]	; (24cb0 <mbedtls_hardware_poll+0xec>)
   24c76:	f7fe fd33 	bl	236e0 <CC_PalAbort>
   24c7a:	e7c7      	b.n	24c0c <mbedtls_hardware_poll+0x48>
   24c7c:	480d      	ldr	r0, [pc, #52]	; (24cb4 <mbedtls_hardware_poll+0xf0>)
   24c7e:	f7fe fd2f 	bl	236e0 <CC_PalAbort>
   24c82:	e7b8      	b.n	24bf6 <mbedtls_hardware_poll+0x32>
   24c84:	480c      	ldr	r0, [pc, #48]	; (24cb8 <mbedtls_hardware_poll+0xf4>)
   24c86:	f7fe fd2b 	bl	236e0 <CC_PalAbort>
   24c8a:	e7af      	b.n	24bec <mbedtls_hardware_poll+0x28>
   24c8c:	480b      	ldr	r0, [pc, #44]	; (24cbc <mbedtls_hardware_poll+0xf8>)
   24c8e:	f7fe fd27 	bl	236e0 <CC_PalAbort>
   24c92:	4630      	mov	r0, r6
   24c94:	b009      	add	sp, #36	; 0x24
   24c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24c98:	f04f 36ff 	mov.w	r6, #4294967295
   24c9c:	e7c8      	b.n	24c30 <mbedtls_hardware_poll+0x6c>
   24c9e:	bf00      	nop
   24ca0:	200006ec 	.word	0x200006ec
   24ca4:	20003298 	.word	0x20003298
   24ca8:	20003078 	.word	0x20003078
   24cac:	20003074 	.word	0x20003074
   24cb0:	0002a95c 	.word	0x0002a95c
   24cb4:	0002a93c 	.word	0x0002a93c
   24cb8:	0002a924 	.word	0x0002a924
   24cbc:	0002a9b4 	.word	0x0002a9b4

00024cc0 <cc_mbedtls_aes_init>:
   24cc0:	b510      	push	{r4, lr}
   24cc2:	4604      	mov	r4, r0
   24cc4:	b130      	cbz	r0, 24cd4 <cc_mbedtls_aes_init+0x14>
   24cc6:	2200      	movs	r2, #0
   24cc8:	2301      	movs	r3, #1
   24cca:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   24cce:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   24cd2:	bd10      	pop	{r4, pc}
   24cd4:	4801      	ldr	r0, [pc, #4]	; (24cdc <cc_mbedtls_aes_init+0x1c>)
   24cd6:	f7fe fd03 	bl	236e0 <CC_PalAbort>
   24cda:	e7f4      	b.n	24cc6 <cc_mbedtls_aes_init+0x6>
   24cdc:	0002a9cc 	.word	0x0002a9cc

00024ce0 <cc_mbedtls_aes_free>:
   24ce0:	b118      	cbz	r0, 24cea <cc_mbedtls_aes_free+0xa>
   24ce2:	2274      	movs	r2, #116	; 0x74
   24ce4:	2100      	movs	r1, #0
   24ce6:	f7ff bc41 	b.w	2456c <CC_PalMemSetPlat>
   24cea:	4770      	bx	lr

00024cec <cc_mbedtls_aes_setkey_enc>:
   24cec:	b190      	cbz	r0, 24d14 <cc_mbedtls_aes_setkey_enc+0x28>
   24cee:	b1a1      	cbz	r1, 24d1a <cc_mbedtls_aes_setkey_enc+0x2e>
   24cf0:	b510      	push	{r4, lr}
   24cf2:	2a80      	cmp	r2, #128	; 0x80
   24cf4:	f04f 0400 	mov.w	r4, #0
   24cf8:	6384      	str	r4, [r0, #56]	; 0x38
   24cfa:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   24cfe:	d106      	bne.n	24d0e <cc_mbedtls_aes_setkey_enc+0x22>
   24d00:	2210      	movs	r2, #16
   24d02:	6304      	str	r4, [r0, #48]	; 0x30
   24d04:	4410      	add	r0, r2
   24d06:	f7ff fc2f 	bl	24568 <CC_PalMemCopyPlat>
   24d0a:	4620      	mov	r0, r4
   24d0c:	bd10      	pop	{r4, pc}
   24d0e:	f06f 001f 	mvn.w	r0, #31
   24d12:	bd10      	pop	{r4, pc}
   24d14:	f06f 0021 	mvn.w	r0, #33	; 0x21
   24d18:	4770      	bx	lr
   24d1a:	f06f 001f 	mvn.w	r0, #31
   24d1e:	4770      	bx	lr

00024d20 <cc_mbedtls_aes_crypt_ecb>:
   24d20:	b328      	cbz	r0, 24d6e <cc_mbedtls_aes_crypt_ecb+0x4e>
   24d22:	b322      	cbz	r2, 24d6e <cc_mbedtls_aes_crypt_ecb+0x4e>
   24d24:	b31b      	cbz	r3, 24d6e <cc_mbedtls_aes_crypt_ecb+0x4e>
   24d26:	2901      	cmp	r1, #1
   24d28:	d821      	bhi.n	24d6e <cc_mbedtls_aes_crypt_ecb+0x4e>
   24d2a:	b570      	push	{r4, r5, r6, lr}
   24d2c:	4604      	mov	r4, r0
   24d2e:	6b81      	ldr	r1, [r0, #56]	; 0x38
   24d30:	b086      	sub	sp, #24
   24d32:	d017      	beq.n	24d64 <cc_mbedtls_aes_crypt_ecb+0x44>
   24d34:	2901      	cmp	r1, #1
   24d36:	d117      	bne.n	24d68 <cc_mbedtls_aes_crypt_ecb+0x48>
   24d38:	2510      	movs	r5, #16
   24d3a:	2100      	movs	r1, #0
   24d3c:	eb0d 0605 	add.w	r6, sp, r5
   24d40:	6361      	str	r1, [r4, #52]	; 0x34
   24d42:	4610      	mov	r0, r2
   24d44:	9500      	str	r5, [sp, #0]
   24d46:	9601      	str	r6, [sp, #4]
   24d48:	aa02      	add	r2, sp, #8
   24d4a:	4629      	mov	r1, r5
   24d4c:	f000 faca 	bl	252e4 <SetDataBuffersInfo>
   24d50:	b950      	cbnz	r0, 24d68 <cc_mbedtls_aes_crypt_ecb+0x48>
   24d52:	462b      	mov	r3, r5
   24d54:	4632      	mov	r2, r6
   24d56:	a902      	add	r1, sp, #8
   24d58:	4620      	mov	r0, r4
   24d5a:	f000 fd4b 	bl	257f4 <ProcessAesDrv>
   24d5e:	b918      	cbnz	r0, 24d68 <cc_mbedtls_aes_crypt_ecb+0x48>
   24d60:	b006      	add	sp, #24
   24d62:	bd70      	pop	{r4, r5, r6, pc}
   24d64:	2900      	cmp	r1, #0
   24d66:	d0e7      	beq.n	24d38 <cc_mbedtls_aes_crypt_ecb+0x18>
   24d68:	f06f 0021 	mvn.w	r0, #33	; 0x21
   24d6c:	e7f8      	b.n	24d60 <cc_mbedtls_aes_crypt_ecb+0x40>
   24d6e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   24d72:	4770      	bx	lr

00024d74 <cc_mbedtls_sha256_init>:
   24d74:	b510      	push	{r4, lr}
   24d76:	4604      	mov	r4, r0
   24d78:	b128      	cbz	r0, 24d86 <cc_mbedtls_sha256_init+0x12>
   24d7a:	4620      	mov	r0, r4
   24d7c:	21f4      	movs	r1, #244	; 0xf4
   24d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24d82:	f7ff bbf5 	b.w	24570 <CC_PalMemSetZeroPlat>
   24d86:	4804      	ldr	r0, [pc, #16]	; (24d98 <cc_mbedtls_sha256_init+0x24>)
   24d88:	f7fe fcaa 	bl	236e0 <CC_PalAbort>
   24d8c:	4620      	mov	r0, r4
   24d8e:	21f4      	movs	r1, #244	; 0xf4
   24d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24d94:	f7ff bbec 	b.w	24570 <CC_PalMemSetZeroPlat>
   24d98:	0002a9e0 	.word	0x0002a9e0

00024d9c <cc_mbedtls_sha256_free>:
   24d9c:	b110      	cbz	r0, 24da4 <cc_mbedtls_sha256_free+0x8>
   24d9e:	21f4      	movs	r1, #244	; 0xf4
   24da0:	f7fe bd9c 	b.w	238dc <mbedtls_zeroize_internal>
   24da4:	4770      	bx	lr
   24da6:	bf00      	nop

00024da8 <cc_mbedtls_sha256_starts>:
   24da8:	b508      	push	{r3, lr}
   24daa:	b161      	cbz	r1, 24dc6 <cc_mbedtls_sha256_starts+0x1e>
   24dac:	2901      	cmp	r1, #1
   24dae:	d107      	bne.n	24dc0 <cc_mbedtls_sha256_starts+0x18>
   24db0:	2102      	movs	r1, #2
   24db2:	f000 f85b 	bl	24e6c <mbedtls_sha_starts_internal>
   24db6:	2800      	cmp	r0, #0
   24db8:	bf18      	it	ne
   24dba:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   24dbe:	bd08      	pop	{r3, pc}
   24dc0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24dc4:	bd08      	pop	{r3, pc}
   24dc6:	2101      	movs	r1, #1
   24dc8:	f000 f850 	bl	24e6c <mbedtls_sha_starts_internal>
   24dcc:	e7f3      	b.n	24db6 <cc_mbedtls_sha256_starts+0xe>
   24dce:	bf00      	nop

00024dd0 <cc_mbedtls_sha256_update>:
   24dd0:	b530      	push	{r4, r5, lr}
   24dd2:	4605      	mov	r5, r0
   24dd4:	1888      	adds	r0, r1, r2
   24dd6:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   24dda:	b0a1      	sub	sp, #132	; 0x84
   24ddc:	460b      	mov	r3, r1
   24dde:	4614      	mov	r4, r2
   24de0:	d801      	bhi.n	24de6 <cc_mbedtls_sha256_update+0x16>
   24de2:	2a80      	cmp	r2, #128	; 0x80
   24de4:	d90c      	bls.n	24e00 <cc_mbedtls_sha256_update+0x30>
   24de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   24dea:	d917      	bls.n	24e1c <cc_mbedtls_sha256_update+0x4c>
   24dec:	4622      	mov	r2, r4
   24dee:	4619      	mov	r1, r3
   24df0:	4628      	mov	r0, r5
   24df2:	f000 f87d 	bl	24ef0 <mbedtls_sha_update_internal>
   24df6:	4604      	mov	r4, r0
   24df8:	b984      	cbnz	r4, 24e1c <cc_mbedtls_sha256_update+0x4c>
   24dfa:	4620      	mov	r0, r4
   24dfc:	b021      	add	sp, #132	; 0x84
   24dfe:	bd30      	pop	{r4, r5, pc}
   24e00:	4668      	mov	r0, sp
   24e02:	f7ff fbb1 	bl	24568 <CC_PalMemCopyPlat>
   24e06:	4622      	mov	r2, r4
   24e08:	4669      	mov	r1, sp
   24e0a:	4628      	mov	r0, r5
   24e0c:	f000 f870 	bl	24ef0 <mbedtls_sha_update_internal>
   24e10:	2180      	movs	r1, #128	; 0x80
   24e12:	4604      	mov	r4, r0
   24e14:	4668      	mov	r0, sp
   24e16:	f7ff fbab 	bl	24570 <CC_PalMemSetZeroPlat>
   24e1a:	e7ed      	b.n	24df8 <cc_mbedtls_sha256_update+0x28>
   24e1c:	f06f 0436 	mvn.w	r4, #54	; 0x36
   24e20:	e7eb      	b.n	24dfa <cc_mbedtls_sha256_update+0x2a>
   24e22:	bf00      	nop

00024e24 <cc_mbedtls_sha256_finish>:
   24e24:	b570      	push	{r4, r5, r6, lr}
   24e26:	b1e8      	cbz	r0, 24e64 <cc_mbedtls_sha256_finish+0x40>
   24e28:	460e      	mov	r6, r1
   24e2a:	b1d9      	cbz	r1, 24e64 <cc_mbedtls_sha256_finish+0x40>
   24e2c:	4604      	mov	r4, r0
   24e2e:	f000 f831 	bl	24e94 <mbedtls_sha_finish_internal>
   24e32:	4605      	mov	r5, r0
   24e34:	b9b0      	cbnz	r0, 24e64 <cc_mbedtls_sha256_finish+0x40>
   24e36:	6823      	ldr	r3, [r4, #0]
   24e38:	2b01      	cmp	r3, #1
   24e3a:	d00b      	beq.n	24e54 <cc_mbedtls_sha256_finish+0x30>
   24e3c:	2b02      	cmp	r3, #2
   24e3e:	d001      	beq.n	24e44 <cc_mbedtls_sha256_finish+0x20>
   24e40:	4628      	mov	r0, r5
   24e42:	bd70      	pop	{r4, r5, r6, pc}
   24e44:	221c      	movs	r2, #28
   24e46:	f104 0108 	add.w	r1, r4, #8
   24e4a:	4630      	mov	r0, r6
   24e4c:	f7ff fb8c 	bl	24568 <CC_PalMemCopyPlat>
   24e50:	4628      	mov	r0, r5
   24e52:	bd70      	pop	{r4, r5, r6, pc}
   24e54:	2220      	movs	r2, #32
   24e56:	f104 0108 	add.w	r1, r4, #8
   24e5a:	4630      	mov	r0, r6
   24e5c:	f7ff fb84 	bl	24568 <CC_PalMemCopyPlat>
   24e60:	4628      	mov	r0, r5
   24e62:	bd70      	pop	{r4, r5, r6, pc}
   24e64:	f06f 0536 	mvn.w	r5, #54	; 0x36
   24e68:	e7ea      	b.n	24e40 <cc_mbedtls_sha256_finish+0x1c>
   24e6a:	bf00      	nop

00024e6c <mbedtls_sha_starts_internal>:
   24e6c:	b178      	cbz	r0, 24e8e <mbedtls_sha_starts_internal+0x22>
   24e6e:	b538      	push	{r3, r4, r5, lr}
   24e70:	4604      	mov	r4, r0
   24e72:	460d      	mov	r5, r1
   24e74:	21f0      	movs	r1, #240	; 0xf0
   24e76:	f7ff fb7b 	bl	24570 <CC_PalMemSetZeroPlat>
   24e7a:	2340      	movs	r3, #64	; 0x40
   24e7c:	6025      	str	r5, [r4, #0]
   24e7e:	65e3      	str	r3, [r4, #92]	; 0x5c
   24e80:	4620      	mov	r0, r4
   24e82:	f000 fa63 	bl	2534c <InitHashDrv>
   24e86:	3800      	subs	r0, #0
   24e88:	bf18      	it	ne
   24e8a:	2001      	movne	r0, #1
   24e8c:	bd38      	pop	{r3, r4, r5, pc}
   24e8e:	2001      	movs	r0, #1
   24e90:	4770      	bx	lr
   24e92:	bf00      	nop

00024e94 <mbedtls_sha_finish_internal>:
   24e94:	b570      	push	{r4, r5, r6, lr}
   24e96:	6e05      	ldr	r5, [r0, #96]	; 0x60
   24e98:	b0a4      	sub	sp, #144	; 0x90
   24e9a:	4604      	mov	r4, r0
   24e9c:	ae04      	add	r6, sp, #16
   24e9e:	b9e5      	cbnz	r5, 24eda <mbedtls_sha_finish_internal+0x46>
   24ea0:	2201      	movs	r2, #1
   24ea2:	2300      	movs	r3, #0
   24ea4:	6062      	str	r2, [r4, #4]
   24ea6:	4630      	mov	r0, r6
   24ea8:	e9cd 3300 	strd	r3, r3, [sp]
   24eac:	aa02      	add	r2, sp, #8
   24eae:	4629      	mov	r1, r5
   24eb0:	f000 fa18 	bl	252e4 <SetDataBuffersInfo>
   24eb4:	b110      	cbz	r0, 24ebc <mbedtls_sha_finish_internal+0x28>
   24eb6:	2001      	movs	r0, #1
   24eb8:	b024      	add	sp, #144	; 0x90
   24eba:	bd70      	pop	{r4, r5, r6, pc}
   24ebc:	462a      	mov	r2, r5
   24ebe:	a902      	add	r1, sp, #8
   24ec0:	4620      	mov	r0, r4
   24ec2:	f000 fa6d 	bl	253a0 <ProcessHashDrv>
   24ec6:	2800      	cmp	r0, #0
   24ec8:	d1f5      	bne.n	24eb6 <mbedtls_sha_finish_internal+0x22>
   24eca:	4620      	mov	r0, r4
   24ecc:	f000 fb7e 	bl	255cc <FinishHashDrv>
   24ed0:	2800      	cmp	r0, #0
   24ed2:	d1f0      	bne.n	24eb6 <mbedtls_sha_finish_internal+0x22>
   24ed4:	6620      	str	r0, [r4, #96]	; 0x60
   24ed6:	b024      	add	sp, #144	; 0x90
   24ed8:	bd70      	pop	{r4, r5, r6, pc}
   24eda:	2d80      	cmp	r5, #128	; 0x80
   24edc:	462a      	mov	r2, r5
   24ede:	f100 0164 	add.w	r1, r0, #100	; 0x64
   24ee2:	bf28      	it	cs
   24ee4:	2280      	movcs	r2, #128	; 0x80
   24ee6:	4630      	mov	r0, r6
   24ee8:	f7ff fb3e 	bl	24568 <CC_PalMemCopyPlat>
   24eec:	6e25      	ldr	r5, [r4, #96]	; 0x60
   24eee:	e7d7      	b.n	24ea0 <mbedtls_sha_finish_internal+0xc>

00024ef0 <mbedtls_sha_update_internal>:
   24ef0:	2800      	cmp	r0, #0
   24ef2:	f000 80cd 	beq.w	25090 <mbedtls_sha_update_internal+0x1a0>
   24ef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24efa:	4615      	mov	r5, r2
   24efc:	b0a5      	sub	sp, #148	; 0x94
   24efe:	2a00      	cmp	r2, #0
   24f00:	f000 80b4 	beq.w	2506c <mbedtls_sha_update_internal+0x17c>
   24f04:	460f      	mov	r7, r1
   24f06:	2900      	cmp	r1, #0
   24f08:	f000 80ac 	beq.w	25064 <mbedtls_sha_update_internal+0x174>
   24f0c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   24f10:	4606      	mov	r6, r0
   24f12:	6e00      	ldr	r0, [r0, #96]	; 0x60
   24f14:	d37d      	bcc.n	25012 <mbedtls_sha_update_internal+0x122>
   24f16:	f64f 78ff 	movw	r8, #65535	; 0xffff
   24f1a:	f106 0964 	add.w	r9, r6, #100	; 0x64
   24f1e:	e014      	b.n	24f4a <mbedtls_sha_update_internal+0x5a>
   24f20:	4283      	cmp	r3, r0
   24f22:	46ba      	mov	sl, r7
   24f24:	f64f 74ff 	movw	r4, #65535	; 0xffff
   24f28:	d029      	beq.n	24f7e <mbedtls_sha_update_internal+0x8e>
   24f2a:	fbb4 fbf3 	udiv	fp, r4, r3
   24f2e:	fb03 fb0b 	mul.w	fp, r3, fp
   24f32:	f1bb 0f00 	cmp.w	fp, #0
   24f36:	d144      	bne.n	24fc2 <mbedtls_sha_update_internal+0xd2>
   24f38:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   24f3c:	4447      	add	r7, r8
   24f3e:	3dff      	subs	r5, #255	; 0xff
   24f40:	2c00      	cmp	r4, #0
   24f42:	d159      	bne.n	24ff8 <mbedtls_sha_update_internal+0x108>
   24f44:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   24f48:	d363      	bcc.n	25012 <mbedtls_sha_update_internal+0x122>
   24f4a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   24f4c:	1a1c      	subs	r4, r3, r0
   24f4e:	fbb4 f2f3 	udiv	r2, r4, r3
   24f52:	fb03 4412 	mls	r4, r3, r2, r4
   24f56:	2c00      	cmp	r4, #0
   24f58:	d0e2      	beq.n	24f20 <mbedtls_sha_update_internal+0x30>
   24f5a:	4544      	cmp	r4, r8
   24f5c:	bf28      	it	cs
   24f5e:	4644      	movcs	r4, r8
   24f60:	4622      	mov	r2, r4
   24f62:	4448      	add	r0, r9
   24f64:	4639      	mov	r1, r7
   24f66:	f7ff faff 	bl	24568 <CC_PalMemCopyPlat>
   24f6a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   24f6c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   24f6e:	4420      	add	r0, r4
   24f70:	4283      	cmp	r3, r0
   24f72:	eb07 0a04 	add.w	sl, r7, r4
   24f76:	6630      	str	r0, [r6, #96]	; 0x60
   24f78:	eba8 0404 	sub.w	r4, r8, r4
   24f7c:	d1d5      	bne.n	24f2a <mbedtls_sha_update_internal+0x3a>
   24f7e:	2b80      	cmp	r3, #128	; 0x80
   24f80:	bf28      	it	cs
   24f82:	2380      	movcs	r3, #128	; 0x80
   24f84:	461a      	mov	r2, r3
   24f86:	4649      	mov	r1, r9
   24f88:	a804      	add	r0, sp, #16
   24f8a:	f7ff faed 	bl	24568 <CC_PalMemCopyPlat>
   24f8e:	2300      	movs	r3, #0
   24f90:	e9cd 3300 	strd	r3, r3, [sp]
   24f94:	aa02      	add	r2, sp, #8
   24f96:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   24f98:	a804      	add	r0, sp, #16
   24f9a:	f000 f9a3 	bl	252e4 <SetDataBuffersInfo>
   24f9e:	2800      	cmp	r0, #0
   24fa0:	d160      	bne.n	25064 <mbedtls_sha_update_internal+0x174>
   24fa2:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   24fa4:	a902      	add	r1, sp, #8
   24fa6:	4630      	mov	r0, r6
   24fa8:	f000 f9fa 	bl	253a0 <ProcessHashDrv>
   24fac:	2800      	cmp	r0, #0
   24fae:	d159      	bne.n	25064 <mbedtls_sha_update_internal+0x174>
   24fb0:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   24fb2:	fbb4 fbf3 	udiv	fp, r4, r3
   24fb6:	fb03 fb0b 	mul.w	fp, r3, fp
   24fba:	6630      	str	r0, [r6, #96]	; 0x60
   24fbc:	f1bb 0f00 	cmp.w	fp, #0
   24fc0:	d0ba      	beq.n	24f38 <mbedtls_sha_update_internal+0x48>
   24fc2:	2300      	movs	r3, #0
   24fc4:	e9cd 3300 	strd	r3, r3, [sp]
   24fc8:	aa02      	add	r2, sp, #8
   24fca:	4659      	mov	r1, fp
   24fcc:	4650      	mov	r0, sl
   24fce:	f000 f989 	bl	252e4 <SetDataBuffersInfo>
   24fd2:	2800      	cmp	r0, #0
   24fd4:	d146      	bne.n	25064 <mbedtls_sha_update_internal+0x174>
   24fd6:	a902      	add	r1, sp, #8
   24fd8:	465a      	mov	r2, fp
   24fda:	4630      	mov	r0, r6
   24fdc:	f000 f9e0 	bl	253a0 <ProcessHashDrv>
   24fe0:	2800      	cmp	r0, #0
   24fe2:	d13f      	bne.n	25064 <mbedtls_sha_update_internal+0x174>
   24fe4:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   24fe8:	eba4 040b 	sub.w	r4, r4, fp
   24fec:	6e30      	ldr	r0, [r6, #96]	; 0x60
   24fee:	44da      	add	sl, fp
   24ff0:	4447      	add	r7, r8
   24ff2:	3dff      	subs	r5, #255	; 0xff
   24ff4:	2c00      	cmp	r4, #0
   24ff6:	d0a5      	beq.n	24f44 <mbedtls_sha_update_internal+0x54>
   24ff8:	3019      	adds	r0, #25
   24ffa:	4651      	mov	r1, sl
   24ffc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   25000:	4622      	mov	r2, r4
   25002:	f7ff fab1 	bl	24568 <CC_PalMemCopyPlat>
   25006:	6e30      	ldr	r0, [r6, #96]	; 0x60
   25008:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2500c:	4420      	add	r0, r4
   2500e:	6630      	str	r0, [r6, #96]	; 0x60
   25010:	d29b      	bcs.n	24f4a <mbedtls_sha_update_internal+0x5a>
   25012:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   25014:	1a14      	subs	r4, r2, r0
   25016:	fbb4 f3f2 	udiv	r3, r4, r2
   2501a:	fb02 4413 	mls	r4, r2, r3, r4
   2501e:	42ac      	cmp	r4, r5
   25020:	bf28      	it	cs
   25022:	462c      	movcs	r4, r5
   25024:	bb34      	cbnz	r4, 25074 <mbedtls_sha_update_internal+0x184>
   25026:	4290      	cmp	r0, r2
   25028:	d034      	beq.n	25094 <mbedtls_sha_update_internal+0x1a4>
   2502a:	fbb5 f4f2 	udiv	r4, r5, r2
   2502e:	fb02 f404 	mul.w	r4, r2, r4
   25032:	b96c      	cbnz	r4, 25050 <mbedtls_sha_update_internal+0x160>
   25034:	b1d5      	cbz	r5, 2506c <mbedtls_sha_update_internal+0x17c>
   25036:	6e33      	ldr	r3, [r6, #96]	; 0x60
   25038:	3319      	adds	r3, #25
   2503a:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   2503e:	462a      	mov	r2, r5
   25040:	4639      	mov	r1, r7
   25042:	f7ff fa91 	bl	24568 <CC_PalMemCopyPlat>
   25046:	6e33      	ldr	r3, [r6, #96]	; 0x60
   25048:	442b      	add	r3, r5
   2504a:	2000      	movs	r0, #0
   2504c:	6633      	str	r3, [r6, #96]	; 0x60
   2504e:	e00a      	b.n	25066 <mbedtls_sha_update_internal+0x176>
   25050:	2300      	movs	r3, #0
   25052:	e9cd 3300 	strd	r3, r3, [sp]
   25056:	aa02      	add	r2, sp, #8
   25058:	4621      	mov	r1, r4
   2505a:	4638      	mov	r0, r7
   2505c:	f000 f942 	bl	252e4 <SetDataBuffersInfo>
   25060:	2800      	cmp	r0, #0
   25062:	d033      	beq.n	250cc <mbedtls_sha_update_internal+0x1dc>
   25064:	2001      	movs	r0, #1
   25066:	b025      	add	sp, #148	; 0x94
   25068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2506c:	4628      	mov	r0, r5
   2506e:	b025      	add	sp, #148	; 0x94
   25070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25074:	f106 0364 	add.w	r3, r6, #100	; 0x64
   25078:	4639      	mov	r1, r7
   2507a:	4622      	mov	r2, r4
   2507c:	4418      	add	r0, r3
   2507e:	f7ff fa73 	bl	24568 <CC_PalMemCopyPlat>
   25082:	6e30      	ldr	r0, [r6, #96]	; 0x60
   25084:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   25086:	4420      	add	r0, r4
   25088:	1b2d      	subs	r5, r5, r4
   2508a:	4427      	add	r7, r4
   2508c:	6630      	str	r0, [r6, #96]	; 0x60
   2508e:	e7ca      	b.n	25026 <mbedtls_sha_update_internal+0x136>
   25090:	2001      	movs	r0, #1
   25092:	4770      	bx	lr
   25094:	2a80      	cmp	r2, #128	; 0x80
   25096:	bf28      	it	cs
   25098:	2280      	movcs	r2, #128	; 0x80
   2509a:	f106 0164 	add.w	r1, r6, #100	; 0x64
   2509e:	a804      	add	r0, sp, #16
   250a0:	f7ff fa62 	bl	24568 <CC_PalMemCopyPlat>
   250a4:	2300      	movs	r3, #0
   250a6:	e9cd 3300 	strd	r3, r3, [sp]
   250aa:	a804      	add	r0, sp, #16
   250ac:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   250ae:	aa02      	add	r2, sp, #8
   250b0:	f000 f918 	bl	252e4 <SetDataBuffersInfo>
   250b4:	2800      	cmp	r0, #0
   250b6:	d1d5      	bne.n	25064 <mbedtls_sha_update_internal+0x174>
   250b8:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   250ba:	a902      	add	r1, sp, #8
   250bc:	4630      	mov	r0, r6
   250be:	f000 f96f 	bl	253a0 <ProcessHashDrv>
   250c2:	2800      	cmp	r0, #0
   250c4:	d1ce      	bne.n	25064 <mbedtls_sha_update_internal+0x174>
   250c6:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   250c8:	6630      	str	r0, [r6, #96]	; 0x60
   250ca:	e7ae      	b.n	2502a <mbedtls_sha_update_internal+0x13a>
   250cc:	a902      	add	r1, sp, #8
   250ce:	4622      	mov	r2, r4
   250d0:	4630      	mov	r0, r6
   250d2:	f000 f965 	bl	253a0 <ProcessHashDrv>
   250d6:	2800      	cmp	r0, #0
   250d8:	d1c4      	bne.n	25064 <mbedtls_sha_update_internal+0x174>
   250da:	4427      	add	r7, r4
   250dc:	1b2d      	subs	r5, r5, r4
   250de:	e7a9      	b.n	25034 <mbedtls_sha_update_internal+0x144>

000250e0 <cc_mbedtls_sha256>:
   250e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   250e2:	461c      	mov	r4, r3
   250e4:	4605      	mov	r5, r0
   250e6:	4811      	ldr	r0, [pc, #68]	; (2512c <cc_mbedtls_sha256+0x4c>)
   250e8:	460e      	mov	r6, r1
   250ea:	4617      	mov	r7, r2
   250ec:	f7ff fe42 	bl	24d74 <cc_mbedtls_sha256_init>
   250f0:	4621      	mov	r1, r4
   250f2:	480e      	ldr	r0, [pc, #56]	; (2512c <cc_mbedtls_sha256+0x4c>)
   250f4:	f7ff fe58 	bl	24da8 <cc_mbedtls_sha256_starts>
   250f8:	4604      	mov	r4, r0
   250fa:	b120      	cbz	r0, 25106 <cc_mbedtls_sha256+0x26>
   250fc:	480b      	ldr	r0, [pc, #44]	; (2512c <cc_mbedtls_sha256+0x4c>)
   250fe:	f7ff fe4d 	bl	24d9c <cc_mbedtls_sha256_free>
   25102:	4620      	mov	r0, r4
   25104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25106:	4809      	ldr	r0, [pc, #36]	; (2512c <cc_mbedtls_sha256+0x4c>)
   25108:	4632      	mov	r2, r6
   2510a:	4629      	mov	r1, r5
   2510c:	f7ff fe60 	bl	24dd0 <cc_mbedtls_sha256_update>
   25110:	4604      	mov	r4, r0
   25112:	2800      	cmp	r0, #0
   25114:	d1f2      	bne.n	250fc <cc_mbedtls_sha256+0x1c>
   25116:	4639      	mov	r1, r7
   25118:	4804      	ldr	r0, [pc, #16]	; (2512c <cc_mbedtls_sha256+0x4c>)
   2511a:	f7ff fe83 	bl	24e24 <cc_mbedtls_sha256_finish>
   2511e:	4604      	mov	r4, r0
   25120:	4802      	ldr	r0, [pc, #8]	; (2512c <cc_mbedtls_sha256+0x4c>)
   25122:	f7ff fe3b 	bl	24d9c <cc_mbedtls_sha256_free>
   25126:	4620      	mov	r0, r4
   25128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2512a:	bf00      	nop
   2512c:	200032c0 	.word	0x200032c0

00025130 <RNG_PLAT_SetUserRngParameters>:
   25130:	b530      	push	{r4, r5, lr}
   25132:	b083      	sub	sp, #12
   25134:	231c      	movs	r3, #28
   25136:	a901      	add	r1, sp, #4
   25138:	4604      	mov	r4, r0
   2513a:	9301      	str	r3, [sp, #4]
   2513c:	f000 f834 	bl	251a8 <CC_PalTrngParamGet>
   25140:	4605      	mov	r5, r0
   25142:	b938      	cbnz	r0, 25154 <RNG_PLAT_SetUserRngParameters+0x24>
   25144:	9b01      	ldr	r3, [sp, #4]
   25146:	2b1c      	cmp	r3, #28
   25148:	d007      	beq.n	2515a <RNG_PLAT_SetUserRngParameters+0x2a>
   2514a:	4d15      	ldr	r5, [pc, #84]	; (251a0 <RNG_PLAT_SetUserRngParameters+0x70>)
   2514c:	211c      	movs	r1, #28
   2514e:	4620      	mov	r0, r4
   25150:	f7ff fa0e 	bl	24570 <CC_PalMemSetZeroPlat>
   25154:	4628      	mov	r0, r5
   25156:	b003      	add	sp, #12
   25158:	bd30      	pop	{r4, r5, pc}
   2515a:	e9d4 3200 	ldrd	r3, r2, [r4]
   2515e:	2101      	movs	r1, #1
   25160:	3b00      	subs	r3, #0
   25162:	61e1      	str	r1, [r4, #28]
   25164:	bf18      	it	ne
   25166:	2301      	movne	r3, #1
   25168:	b10a      	cbz	r2, 2516e <RNG_PLAT_SetUserRngParameters+0x3e>
   2516a:	f043 0302 	orr.w	r3, r3, #2
   2516e:	68a2      	ldr	r2, [r4, #8]
   25170:	b932      	cbnz	r2, 25180 <RNG_PLAT_SetUserRngParameters+0x50>
   25172:	68e2      	ldr	r2, [r4, #12]
   25174:	b942      	cbnz	r2, 25188 <RNG_PLAT_SetUserRngParameters+0x58>
   25176:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2517a:	b97b      	cbnz	r3, 2519c <RNG_PLAT_SetUserRngParameters+0x6c>
   2517c:	4d09      	ldr	r5, [pc, #36]	; (251a4 <RNG_PLAT_SetUserRngParameters+0x74>)
   2517e:	e7e5      	b.n	2514c <RNG_PLAT_SetUserRngParameters+0x1c>
   25180:	68e2      	ldr	r2, [r4, #12]
   25182:	f043 0304 	orr.w	r3, r3, #4
   25186:	b13a      	cbz	r2, 25198 <RNG_PLAT_SetUserRngParameters+0x68>
   25188:	f043 0308 	orr.w	r3, r3, #8
   2518c:	2200      	movs	r2, #0
   2518e:	4628      	mov	r0, r5
   25190:	e9c4 3208 	strd	r3, r2, [r4, #32]
   25194:	b003      	add	sp, #12
   25196:	bd30      	pop	{r4, r5, pc}
   25198:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2519c:	4615      	mov	r5, r2
   2519e:	e7d9      	b.n	25154 <RNG_PLAT_SetUserRngParameters+0x24>
   251a0:	00f00c37 	.word	0x00f00c37
   251a4:	00f00c0e 	.word	0x00f00c0e

000251a8 <CC_PalTrngParamGet>:
   251a8:	b118      	cbz	r0, 251b2 <CC_PalTrngParamGet+0xa>
   251aa:	b111      	cbz	r1, 251b2 <CC_PalTrngParamGet+0xa>
   251ac:	680b      	ldr	r3, [r1, #0]
   251ae:	2b1c      	cmp	r3, #28
   251b0:	d001      	beq.n	251b6 <CC_PalTrngParamGet+0xe>
   251b2:	2001      	movs	r0, #1
   251b4:	4770      	bx	lr
   251b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   251ba:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   251be:	3201      	adds	r2, #1
   251c0:	bf14      	ite	ne
   251c2:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   251c6:	f241 225c 	movweq	r2, #4700	; 0x125c
   251ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   251ce:	6002      	str	r2, [r0, #0]
   251d0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   251d4:	3201      	adds	r2, #1
   251d6:	bf14      	ite	ne
   251d8:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   251dc:	f641 1264 	movweq	r2, #6500	; 0x1964
   251e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   251e4:	6042      	str	r2, [r0, #4]
   251e6:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   251ea:	3201      	adds	r2, #1
   251ec:	bf14      	ite	ne
   251ee:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   251f2:	f640 62d8 	movweq	r2, #3800	; 0xed8
   251f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   251fa:	6082      	str	r2, [r0, #8]
   251fc:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   25200:	3201      	adds	r2, #1
   25202:	bf14      	ite	ne
   25204:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   25208:	f241 3288 	movweq	r2, #5000	; 0x1388
   2520c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25210:	60c2      	str	r2, [r0, #12]
   25212:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   25216:	3201      	adds	r2, #1
   25218:	bf14      	ite	ne
   2521a:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   2521e:	2290      	moveq	r2, #144	; 0x90
   25220:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25224:	6102      	str	r2, [r0, #16]
   25226:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   2522a:	3201      	adds	r2, #1
   2522c:	bf14      	ite	ne
   2522e:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   25232:	2251      	moveq	r2, #81	; 0x51
   25234:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25238:	6142      	str	r2, [r0, #20]
   2523a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   2523e:	3201      	adds	r2, #1
   25240:	bf14      	ite	ne
   25242:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   25246:	f240 3337 	movweq	r3, #823	; 0x337
   2524a:	6183      	str	r3, [r0, #24]
   2524c:	2000      	movs	r0, #0
   2524e:	4770      	bx	lr

00025250 <LLF_RND_WaitRngInterrupt>:
   25250:	b508      	push	{r3, lr}
   25252:	4601      	mov	r1, r0
   25254:	f44f 6080 	mov.w	r0, #1024	; 0x400
   25258:	f7ff f912 	bl	24480 <CC_HalWaitInterruptRND>
   2525c:	4b03      	ldr	r3, [pc, #12]	; (2526c <LLF_RND_WaitRngInterrupt+0x1c>)
   2525e:	2200      	movs	r2, #0
   25260:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   25264:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   25268:	bd08      	pop	{r3, pc}
   2526a:	bf00      	nop
   2526c:	5002b000 	.word	0x5002b000

00025270 <LLF_RND_GetRoscSampleCnt>:
   25270:	3801      	subs	r0, #1
   25272:	2807      	cmp	r0, #7
   25274:	d805      	bhi.n	25282 <LLF_RND_GetRoscSampleCnt+0x12>
   25276:	e8df f000 	tbb	[pc, r0]
   2527a:	0e12      	.short	0x0e12
   2527c:	04040a04 	.word	0x04040a04
   25280:	0604      	.short	0x0604
   25282:	4809      	ldr	r0, [pc, #36]	; (252a8 <LLF_RND_GetRoscSampleCnt+0x38>)
   25284:	4770      	bx	lr
   25286:	68cb      	ldr	r3, [r1, #12]
   25288:	624b      	str	r3, [r1, #36]	; 0x24
   2528a:	2000      	movs	r0, #0
   2528c:	4770      	bx	lr
   2528e:	688b      	ldr	r3, [r1, #8]
   25290:	624b      	str	r3, [r1, #36]	; 0x24
   25292:	2000      	movs	r0, #0
   25294:	4770      	bx	lr
   25296:	684b      	ldr	r3, [r1, #4]
   25298:	624b      	str	r3, [r1, #36]	; 0x24
   2529a:	2000      	movs	r0, #0
   2529c:	4770      	bx	lr
   2529e:	680b      	ldr	r3, [r1, #0]
   252a0:	624b      	str	r3, [r1, #36]	; 0x24
   252a2:	2000      	movs	r0, #0
   252a4:	4770      	bx	lr
   252a6:	bf00      	nop
   252a8:	00f10c31 	.word	0x00f10c31

000252ac <LLF_RND_GetFastestRosc>:
   252ac:	680b      	ldr	r3, [r1, #0]
   252ae:	e002      	b.n	252b6 <LLF_RND_GetFastestRosc+0xa>
   252b0:	2b08      	cmp	r3, #8
   252b2:	600b      	str	r3, [r1, #0]
   252b4:	d806      	bhi.n	252c4 <LLF_RND_GetFastestRosc+0x18>
   252b6:	6a02      	ldr	r2, [r0, #32]
   252b8:	4213      	tst	r3, r2
   252ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
   252be:	d0f7      	beq.n	252b0 <LLF_RND_GetFastestRosc+0x4>
   252c0:	2000      	movs	r0, #0
   252c2:	4770      	bx	lr
   252c4:	4800      	ldr	r0, [pc, #0]	; (252c8 <LLF_RND_GetFastestRosc+0x1c>)
   252c6:	4770      	bx	lr
   252c8:	00f10c31 	.word	0x00f10c31

000252cc <LLF_RND_TurnOffTrng>:
   252cc:	4b04      	ldr	r3, [pc, #16]	; (252e0 <LLF_RND_TurnOffTrng+0x14>)
   252ce:	2200      	movs	r2, #0
   252d0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   252d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   252d8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   252dc:	f7ff b8b6 	b.w	2444c <CC_HalClearInterruptBit>
   252e0:	5002b000 	.word	0x5002b000

000252e4 <SetDataBuffersInfo>:
   252e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   252e6:	b083      	sub	sp, #12
   252e8:	461d      	mov	r5, r3
   252ea:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   252ee:	f04f 0300 	mov.w	r3, #0
   252f2:	f88d 3007 	strb.w	r3, [sp, #7]
   252f6:	d324      	bcc.n	25342 <SetDataBuffersInfo+0x5e>
   252f8:	468c      	mov	ip, r1
   252fa:	4484      	add	ip, r0
   252fc:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   25300:	4604      	mov	r4, r0
   25302:	d81e      	bhi.n	25342 <SetDataBuffersInfo+0x5e>
   25304:	4617      	mov	r7, r2
   25306:	f10d 0307 	add.w	r3, sp, #7
   2530a:	2201      	movs	r2, #1
   2530c:	f000 fe68 	bl	25fe0 <CC_PalDataBufferAttrGet>
   25310:	4606      	mov	r6, r0
   25312:	b9b0      	cbnz	r0, 25342 <SetDataBuffersInfo+0x5e>
   25314:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25316:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2531a:	603c      	str	r4, [r7, #0]
   2531c:	713b      	strb	r3, [r7, #4]
   2531e:	b192      	cbz	r2, 25346 <SetDataBuffersInfo+0x62>
   25320:	b14d      	cbz	r5, 25336 <SetDataBuffersInfo+0x52>
   25322:	4602      	mov	r2, r0
   25324:	9908      	ldr	r1, [sp, #32]
   25326:	f10d 0307 	add.w	r3, sp, #7
   2532a:	4628      	mov	r0, r5
   2532c:	f000 fe58 	bl	25fe0 <CC_PalDataBufferAttrGet>
   25330:	b938      	cbnz	r0, 25342 <SetDataBuffersInfo+0x5e>
   25332:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25336:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25338:	4630      	mov	r0, r6
   2533a:	6015      	str	r5, [r2, #0]
   2533c:	7113      	strb	r3, [r2, #4]
   2533e:	b003      	add	sp, #12
   25340:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25342:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   25346:	4630      	mov	r0, r6
   25348:	b003      	add	sp, #12
   2534a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002534c <InitHashDrv>:
   2534c:	b1e8      	cbz	r0, 2538a <InitHashDrv+0x3e>
   2534e:	b510      	push	{r4, lr}
   25350:	6804      	ldr	r4, [r0, #0]
   25352:	2c01      	cmp	r4, #1
   25354:	d004      	beq.n	25360 <InitHashDrv+0x14>
   25356:	2c02      	cmp	r4, #2
   25358:	d010      	beq.n	2537c <InitHashDrv+0x30>
   2535a:	b144      	cbz	r4, 2536e <InitHashDrv+0x22>
   2535c:	480c      	ldr	r0, [pc, #48]	; (25390 <InitHashDrv+0x44>)
   2535e:	bd10      	pop	{r4, pc}
   25360:	490c      	ldr	r1, [pc, #48]	; (25394 <InitHashDrv+0x48>)
   25362:	2220      	movs	r2, #32
   25364:	3008      	adds	r0, #8
   25366:	f7ff f8ff 	bl	24568 <CC_PalMemCopyPlat>
   2536a:	2000      	movs	r0, #0
   2536c:	bd10      	pop	{r4, pc}
   2536e:	490a      	ldr	r1, [pc, #40]	; (25398 <InitHashDrv+0x4c>)
   25370:	2214      	movs	r2, #20
   25372:	3008      	adds	r0, #8
   25374:	f7ff f8f8 	bl	24568 <CC_PalMemCopyPlat>
   25378:	4620      	mov	r0, r4
   2537a:	bd10      	pop	{r4, pc}
   2537c:	4907      	ldr	r1, [pc, #28]	; (2539c <InitHashDrv+0x50>)
   2537e:	2220      	movs	r2, #32
   25380:	3008      	adds	r0, #8
   25382:	f7ff f8f1 	bl	24568 <CC_PalMemCopyPlat>
   25386:	2000      	movs	r0, #0
   25388:	bd10      	pop	{r4, pc}
   2538a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2538e:	4770      	bx	lr
   25390:	00f30001 	.word	0x00f30001
   25394:	0002aa24 	.word	0x0002aa24
   25398:	0002a9f0 	.word	0x0002a9f0
   2539c:	0002aa04 	.word	0x0002aa04

000253a0 <ProcessHashDrv>:
   253a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   253a4:	2900      	cmp	r1, #0
   253a6:	f000 80f9 	beq.w	2559c <ProcessHashDrv+0x1fc>
   253aa:	4604      	mov	r4, r0
   253ac:	2800      	cmp	r0, #0
   253ae:	f000 80f9 	beq.w	255a4 <ProcessHashDrv+0x204>
   253b2:	6803      	ldr	r3, [r0, #0]
   253b4:	4690      	mov	r8, r2
   253b6:	460f      	mov	r7, r1
   253b8:	2b00      	cmp	r3, #0
   253ba:	f000 80c3 	beq.w	25544 <ProcessHashDrv+0x1a4>
   253be:	3b01      	subs	r3, #1
   253c0:	2b01      	cmp	r3, #1
   253c2:	f200 80d7 	bhi.w	25574 <ProcessHashDrv+0x1d4>
   253c6:	4879      	ldr	r0, [pc, #484]	; (255ac <ProcessHashDrv+0x20c>)
   253c8:	f04f 31ff 	mov.w	r1, #4294967295
   253cc:	f04f 0902 	mov.w	r9, #2
   253d0:	f7ff f8e6 	bl	245a0 <CC_PalMutexLock>
   253d4:	2800      	cmp	r0, #0
   253d6:	f040 80bf 	bne.w	25558 <ProcessHashDrv+0x1b8>
   253da:	2000      	movs	r0, #0
   253dc:	f7ff f910 	bl	24600 <CC_PalPowerSaveModeSelect>
   253e0:	4606      	mov	r6, r0
   253e2:	2800      	cmp	r0, #0
   253e4:	f040 80c2 	bne.w	2556c <ProcessHashDrv+0x1cc>
   253e8:	4a71      	ldr	r2, [pc, #452]	; (255b0 <ProcessHashDrv+0x210>)
   253ea:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   253ee:	2b00      	cmp	r3, #0
   253f0:	d1fb      	bne.n	253ea <ProcessHashDrv+0x4a>
   253f2:	4d6f      	ldr	r5, [pc, #444]	; (255b0 <ProcessHashDrv+0x210>)
   253f4:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   253f8:	2b00      	cmp	r3, #0
   253fa:	d1fb      	bne.n	253f4 <ProcessHashDrv+0x54>
   253fc:	f04f 30ff 	mov.w	r0, #4294967295
   25400:	f7ff f824 	bl	2444c <CC_HalClearInterruptBit>
   25404:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   25408:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   2540c:	f7ff f82c 	bl	24468 <CC_HalMaskInterrupt>
   25410:	2301      	movs	r3, #1
   25412:	2207      	movs	r2, #7
   25414:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   25418:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   2541c:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   25420:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   25422:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   25426:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   25428:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   2542c:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   25430:	6823      	ldr	r3, [r4, #0]
   25432:	b15b      	cbz	r3, 2544c <ProcessHashDrv+0xac>
   25434:	3b01      	subs	r3, #1
   25436:	2b01      	cmp	r3, #1
   25438:	d818      	bhi.n	2546c <ProcessHashDrv+0xcc>
   2543a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2543c:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   25440:	6a23      	ldr	r3, [r4, #32]
   25442:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   25446:	69e3      	ldr	r3, [r4, #28]
   25448:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   2544c:	4b58      	ldr	r3, [pc, #352]	; (255b0 <ProcessHashDrv+0x210>)
   2544e:	69a2      	ldr	r2, [r4, #24]
   25450:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   25454:	6962      	ldr	r2, [r4, #20]
   25456:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   2545a:	6922      	ldr	r2, [r4, #16]
   2545c:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   25460:	68e2      	ldr	r2, [r4, #12]
   25462:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   25466:	68a2      	ldr	r2, [r4, #8]
   25468:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   2546c:	4a50      	ldr	r2, [pc, #320]	; (255b0 <ProcessHashDrv+0x210>)
   2546e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25472:	2b00      	cmp	r3, #0
   25474:	d1fb      	bne.n	2546e <ProcessHashDrv+0xce>
   25476:	f1b8 0f00 	cmp.w	r8, #0
   2547a:	d05f      	beq.n	2553c <ProcessHashDrv+0x19c>
   2547c:	6863      	ldr	r3, [r4, #4]
   2547e:	2b01      	cmp	r3, #1
   25480:	bf08      	it	eq
   25482:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   25486:	4b4a      	ldr	r3, [pc, #296]	; (255b0 <ProcessHashDrv+0x210>)
   25488:	683a      	ldr	r2, [r7, #0]
   2548a:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   2548e:	2040      	movs	r0, #64	; 0x40
   25490:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   25494:	f7fe ffee 	bl	24474 <CC_HalWaitInterrupt>
   25498:	4606      	mov	r6, r0
   2549a:	4a45      	ldr	r2, [pc, #276]	; (255b0 <ProcessHashDrv+0x210>)
   2549c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   254a0:	2b00      	cmp	r3, #0
   254a2:	d1fb      	bne.n	2549c <ProcessHashDrv+0xfc>
   254a4:	4a42      	ldr	r2, [pc, #264]	; (255b0 <ProcessHashDrv+0x210>)
   254a6:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   254aa:	2b00      	cmp	r3, #0
   254ac:	d1fb      	bne.n	254a6 <ProcessHashDrv+0x106>
   254ae:	6823      	ldr	r3, [r4, #0]
   254b0:	b15b      	cbz	r3, 254ca <ProcessHashDrv+0x12a>
   254b2:	3b01      	subs	r3, #1
   254b4:	2b01      	cmp	r3, #1
   254b6:	d818      	bhi.n	254ea <ProcessHashDrv+0x14a>
   254b8:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   254bc:	6263      	str	r3, [r4, #36]	; 0x24
   254be:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   254c2:	6223      	str	r3, [r4, #32]
   254c4:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   254c8:	61e3      	str	r3, [r4, #28]
   254ca:	4b39      	ldr	r3, [pc, #228]	; (255b0 <ProcessHashDrv+0x210>)
   254cc:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   254d0:	61a2      	str	r2, [r4, #24]
   254d2:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   254d6:	6162      	str	r2, [r4, #20]
   254d8:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   254dc:	6122      	str	r2, [r4, #16]
   254de:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   254e2:	60e2      	str	r2, [r4, #12]
   254e4:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   254e8:	60a3      	str	r3, [r4, #8]
   254ea:	4a31      	ldr	r2, [pc, #196]	; (255b0 <ProcessHashDrv+0x210>)
   254ec:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   254f0:	64a1      	str	r1, [r4, #72]	; 0x48
   254f2:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   254f6:	64e1      	str	r1, [r4, #76]	; 0x4c
   254f8:	2300      	movs	r3, #0
   254fa:	2101      	movs	r1, #1
   254fc:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   25500:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   25504:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   25508:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2550c:	2b00      	cmp	r3, #0
   2550e:	d1fb      	bne.n	25508 <ProcessHashDrv+0x168>
   25510:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   25514:	2e00      	cmp	r6, #0
   25516:	d13b      	bne.n	25590 <ProcessHashDrv+0x1f0>
   25518:	4b25      	ldr	r3, [pc, #148]	; (255b0 <ProcessHashDrv+0x210>)
   2551a:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   2551e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   25522:	f7fe ffa1 	bl	24468 <CC_HalMaskInterrupt>
   25526:	2001      	movs	r0, #1
   25528:	f7ff f86a 	bl	24600 <CC_PalPowerSaveModeSelect>
   2552c:	bb60      	cbnz	r0, 25588 <ProcessHashDrv+0x1e8>
   2552e:	481f      	ldr	r0, [pc, #124]	; (255ac <ProcessHashDrv+0x20c>)
   25530:	f7ff f83e 	bl	245b0 <CC_PalMutexUnlock>
   25534:	bb10      	cbnz	r0, 2557c <ProcessHashDrv+0x1dc>
   25536:	4630      	mov	r0, r6
   25538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2553c:	2304      	movs	r3, #4
   2553e:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   25542:	e7aa      	b.n	2549a <ProcessHashDrv+0xfa>
   25544:	4819      	ldr	r0, [pc, #100]	; (255ac <ProcessHashDrv+0x20c>)
   25546:	f04f 31ff 	mov.w	r1, #4294967295
   2554a:	f04f 0901 	mov.w	r9, #1
   2554e:	f7ff f827 	bl	245a0 <CC_PalMutexLock>
   25552:	2800      	cmp	r0, #0
   25554:	f43f af41 	beq.w	253da <ProcessHashDrv+0x3a>
   25558:	4816      	ldr	r0, [pc, #88]	; (255b4 <ProcessHashDrv+0x214>)
   2555a:	f7fe f8c1 	bl	236e0 <CC_PalAbort>
   2555e:	2000      	movs	r0, #0
   25560:	f7ff f84e 	bl	24600 <CC_PalPowerSaveModeSelect>
   25564:	4606      	mov	r6, r0
   25566:	2800      	cmp	r0, #0
   25568:	f43f af3e 	beq.w	253e8 <ProcessHashDrv+0x48>
   2556c:	4812      	ldr	r0, [pc, #72]	; (255b8 <ProcessHashDrv+0x218>)
   2556e:	f7fe f8b7 	bl	236e0 <CC_PalAbort>
   25572:	e739      	b.n	253e8 <ProcessHashDrv+0x48>
   25574:	4e11      	ldr	r6, [pc, #68]	; (255bc <ProcessHashDrv+0x21c>)
   25576:	4630      	mov	r0, r6
   25578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2557c:	4810      	ldr	r0, [pc, #64]	; (255c0 <ProcessHashDrv+0x220>)
   2557e:	f7fe f8af 	bl	236e0 <CC_PalAbort>
   25582:	4630      	mov	r0, r6
   25584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25588:	480e      	ldr	r0, [pc, #56]	; (255c4 <ProcessHashDrv+0x224>)
   2558a:	f7fe f8a9 	bl	236e0 <CC_PalAbort>
   2558e:	e7ce      	b.n	2552e <ProcessHashDrv+0x18e>
   25590:	2110      	movs	r1, #16
   25592:	f104 0008 	add.w	r0, r4, #8
   25596:	f7fe ffeb 	bl	24570 <CC_PalMemSetZeroPlat>
   2559a:	e7bd      	b.n	25518 <ProcessHashDrv+0x178>
   2559c:	4e0a      	ldr	r6, [pc, #40]	; (255c8 <ProcessHashDrv+0x228>)
   2559e:	4630      	mov	r0, r6
   255a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   255a4:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   255a8:	e7c5      	b.n	25536 <ProcessHashDrv+0x196>
   255aa:	bf00      	nop
   255ac:	200006e8 	.word	0x200006e8
   255b0:	5002b000 	.word	0x5002b000
   255b4:	0002a924 	.word	0x0002a924
   255b8:	0002a93c 	.word	0x0002a93c
   255bc:	00f30001 	.word	0x00f30001
   255c0:	0002a97c 	.word	0x0002a97c
   255c4:	0002a95c 	.word	0x0002a95c
   255c8:	00f30003 	.word	0x00f30003

000255cc <FinishHashDrv>:
   255cc:	b398      	cbz	r0, 25636 <FinishHashDrv+0x6a>
   255ce:	b470      	push	{r4, r5, r6}
   255d0:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   255d4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   255d8:	ba26      	rev	r6, r4
   255da:	ba0d      	rev	r5, r1
   255dc:	ba14      	rev	r4, r2
   255de:	ba19      	rev	r1, r3
   255e0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   255e4:	ba12      	rev	r2, r2
   255e6:	e9c0 4104 	strd	r4, r1, [r0, #16]
   255ea:	6182      	str	r2, [r0, #24]
   255ec:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   255f0:	e9c0 6502 	strd	r6, r5, [r0, #8]
   255f4:	ba1b      	rev	r3, r3
   255f6:	ba25      	rev	r5, r4
   255f8:	e9c0 3507 	strd	r3, r5, [r0, #28]
   255fc:	ba14      	rev	r4, r2
   255fe:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   25602:	6a81      	ldr	r1, [r0, #40]	; 0x28
   25604:	ba12      	rev	r2, r2
   25606:	ba09      	rev	r1, r1
   25608:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   2560c:	62c2      	str	r2, [r0, #44]	; 0x2c
   2560e:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   25612:	ba1b      	rev	r3, r3
   25614:	ba25      	rev	r5, r4
   25616:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   2561a:	ba14      	rev	r4, r2
   2561c:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   25620:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   25622:	ba12      	rev	r2, r2
   25624:	ba09      	rev	r1, r1
   25626:	ba1b      	rev	r3, r3
   25628:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   2562c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   25630:	2000      	movs	r0, #0
   25632:	bc70      	pop	{r4, r5, r6}
   25634:	4770      	bx	lr
   25636:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2563a:	4770      	bx	lr

0002563c <LoadAesKey>:
   2563c:	2800      	cmp	r0, #0
   2563e:	d046      	beq.n	256ce <LoadAesKey+0x92>
   25640:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   25644:	2b00      	cmp	r3, #0
   25646:	d033      	beq.n	256b0 <LoadAesKey+0x74>
   25648:	2b03      	cmp	r3, #3
   2564a:	b510      	push	{r4, lr}
   2564c:	d013      	beq.n	25676 <LoadAesKey+0x3a>
   2564e:	4821      	ldr	r0, [pc, #132]	; (256d4 <LoadAesKey+0x98>)
   25650:	4c21      	ldr	r4, [pc, #132]	; (256d8 <LoadAesKey+0x9c>)
   25652:	6822      	ldr	r2, [r4, #0]
   25654:	4b21      	ldr	r3, [pc, #132]	; (256dc <LoadAesKey+0xa0>)
   25656:	6812      	ldr	r2, [r2, #0]
   25658:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   2565c:	6822      	ldr	r2, [r4, #0]
   2565e:	6852      	ldr	r2, [r2, #4]
   25660:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   25664:	6822      	ldr	r2, [r4, #0]
   25666:	6892      	ldr	r2, [r2, #8]
   25668:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2566c:	6822      	ldr	r2, [r4, #0]
   2566e:	68d2      	ldr	r2, [r2, #12]
   25670:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   25674:	bd10      	pop	{r4, pc}
   25676:	6b01      	ldr	r1, [r0, #48]	; 0x30
   25678:	6c00      	ldr	r0, [r0, #64]	; 0x40
   2567a:	4c17      	ldr	r4, [pc, #92]	; (256d8 <LoadAesKey+0x9c>)
   2567c:	f000 fbac 	bl	25dd8 <kmu_validate_kdr_slot_and_size>
   25680:	2800      	cmp	r0, #0
   25682:	d1e6      	bne.n	25652 <LoadAesKey+0x16>
   25684:	6822      	ldr	r2, [r4, #0]
   25686:	4b15      	ldr	r3, [pc, #84]	; (256dc <LoadAesKey+0xa0>)
   25688:	6812      	ldr	r2, [r2, #0]
   2568a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   2568e:	6822      	ldr	r2, [r4, #0]
   25690:	6852      	ldr	r2, [r2, #4]
   25692:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   25696:	6822      	ldr	r2, [r4, #0]
   25698:	6892      	ldr	r2, [r2, #8]
   2569a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2569e:	6822      	ldr	r2, [r4, #0]
   256a0:	68d2      	ldr	r2, [r2, #12]
   256a2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   256a6:	f000 fba3 	bl	25df0 <kmu_use_kdr_key>
   256aa:	2800      	cmp	r0, #0
   256ac:	d1d1      	bne.n	25652 <LoadAesKey+0x16>
   256ae:	bd10      	pop	{r4, pc}
   256b0:	4a0a      	ldr	r2, [pc, #40]	; (256dc <LoadAesKey+0xa0>)
   256b2:	6901      	ldr	r1, [r0, #16]
   256b4:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   256b8:	6941      	ldr	r1, [r0, #20]
   256ba:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   256be:	6981      	ldr	r1, [r0, #24]
   256c0:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   256c4:	69c1      	ldr	r1, [r0, #28]
   256c6:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   256ca:	4618      	mov	r0, r3
   256cc:	4770      	bx	lr
   256ce:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   256d2:	4770      	bx	lr
   256d4:	00f10009 	.word	0x00f10009
   256d8:	200006d8 	.word	0x200006d8
   256dc:	5002b000 	.word	0x5002b000

000256e0 <InitAes.part.0>:
   256e0:	4a37      	ldr	r2, [pc, #220]	; (257c0 <InitAes.part.0+0xe0>)
   256e2:	b538      	push	{r3, r4, r5, lr}
   256e4:	4604      	mov	r4, r0
   256e6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   256ea:	2b00      	cmp	r3, #0
   256ec:	d1fb      	bne.n	256e6 <InitAes.part.0+0x6>
   256ee:	4a34      	ldr	r2, [pc, #208]	; (257c0 <InitAes.part.0+0xe0>)
   256f0:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   256f4:	2b00      	cmp	r3, #0
   256f6:	d1fb      	bne.n	256f0 <InitAes.part.0+0x10>
   256f8:	4a31      	ldr	r2, [pc, #196]	; (257c0 <InitAes.part.0+0xe0>)
   256fa:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   256fe:	2b00      	cmp	r3, #0
   25700:	d1fb      	bne.n	256fa <InitAes.part.0+0x1a>
   25702:	4a2f      	ldr	r2, [pc, #188]	; (257c0 <InitAes.part.0+0xe0>)
   25704:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   25708:	2b00      	cmp	r3, #0
   2570a:	d1fb      	bne.n	25704 <InitAes.part.0+0x24>
   2570c:	4a2c      	ldr	r2, [pc, #176]	; (257c0 <InitAes.part.0+0xe0>)
   2570e:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   25712:	2b00      	cmp	r3, #0
   25714:	d1fb      	bne.n	2570e <InitAes.part.0+0x2e>
   25716:	4d2a      	ldr	r5, [pc, #168]	; (257c0 <InitAes.part.0+0xe0>)
   25718:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   2571c:	2b00      	cmp	r3, #0
   2571e:	d1fb      	bne.n	25718 <InitAes.part.0+0x38>
   25720:	f04f 30ff 	mov.w	r0, #4294967295
   25724:	f7fe fe92 	bl	2444c <CC_HalClearInterruptBit>
   25728:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2572a:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   2572e:	f023 0304 	bic.w	r3, r3, #4
   25732:	2b03      	cmp	r3, #3
   25734:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   25736:	d039      	beq.n	257ac <InitAes.part.0+0xcc>
   25738:	2b01      	cmp	r3, #1
   2573a:	bf0c      	ite	eq
   2573c:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   25740:	f020 0020 	bicne.w	r0, r0, #32
   25744:	f7fe fe90 	bl	24468 <CC_HalMaskInterrupt>
   25748:	4a1d      	ldr	r2, [pc, #116]	; (257c0 <InitAes.part.0+0xe0>)
   2574a:	2301      	movs	r3, #1
   2574c:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   25750:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25754:	2b00      	cmp	r3, #0
   25756:	d1fb      	bne.n	25750 <InitAes.part.0+0x70>
   25758:	4a19      	ldr	r2, [pc, #100]	; (257c0 <InitAes.part.0+0xe0>)
   2575a:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   2575e:	2b00      	cmp	r3, #0
   25760:	d1fb      	bne.n	2575a <InitAes.part.0+0x7a>
   25762:	4917      	ldr	r1, [pc, #92]	; (257c0 <InitAes.part.0+0xe0>)
   25764:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   25768:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   2576c:	2b00      	cmp	r3, #0
   2576e:	d1fb      	bne.n	25768 <InitAes.part.0+0x88>
   25770:	4a13      	ldr	r2, [pc, #76]	; (257c0 <InitAes.part.0+0xe0>)
   25772:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   25776:	2b00      	cmp	r3, #0
   25778:	d1fb      	bne.n	25772 <InitAes.part.0+0x92>
   2577a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   2577c:	f022 0104 	bic.w	r1, r2, #4
   25780:	2903      	cmp	r1, #3
   25782:	bf18      	it	ne
   25784:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   25786:	490e      	ldr	r1, [pc, #56]	; (257c0 <InitAes.part.0+0xe0>)
   25788:	ea4f 0282 	mov.w	r2, r2, lsl #2
   2578c:	bf18      	it	ne
   2578e:	f003 0301 	andne.w	r3, r3, #1
   25792:	f002 021c 	and.w	r2, r2, #28
   25796:	4313      	orrs	r3, r2
   25798:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   2579c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2579e:	2b07      	cmp	r3, #7
   257a0:	bf04      	itt	eq
   257a2:	2301      	moveq	r3, #1
   257a4:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   257a8:	2000      	movs	r0, #0
   257aa:	bd38      	pop	{r3, r4, r5, pc}
   257ac:	2b01      	cmp	r3, #1
   257ae:	bf0c      	ite	eq
   257b0:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   257b4:	f020 0010 	bicne.w	r0, r0, #16
   257b8:	f7fe fe56 	bl	24468 <CC_HalMaskInterrupt>
   257bc:	e7c4      	b.n	25748 <InitAes.part.0+0x68>
   257be:	bf00      	nop
   257c0:	5002b000 	.word	0x5002b000

000257c4 <write_invalid_key>:
   257c4:	4a09      	ldr	r2, [pc, #36]	; (257ec <write_invalid_key+0x28>)
   257c6:	4b0a      	ldr	r3, [pc, #40]	; (257f0 <write_invalid_key+0x2c>)
   257c8:	6811      	ldr	r1, [r2, #0]
   257ca:	6809      	ldr	r1, [r1, #0]
   257cc:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   257d0:	6811      	ldr	r1, [r2, #0]
   257d2:	6849      	ldr	r1, [r1, #4]
   257d4:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   257d8:	6811      	ldr	r1, [r2, #0]
   257da:	6889      	ldr	r1, [r1, #8]
   257dc:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   257e0:	6812      	ldr	r2, [r2, #0]
   257e2:	68d2      	ldr	r2, [r2, #12]
   257e4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   257e8:	4770      	bx	lr
   257ea:	bf00      	nop
   257ec:	200006d8 	.word	0x200006d8
   257f0:	5002b000 	.word	0x5002b000

000257f4 <ProcessAesDrv>:
   257f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   257f8:	b085      	sub	sp, #20
   257fa:	2900      	cmp	r1, #0
   257fc:	f000 80a3 	beq.w	25946 <ProcessAesDrv+0x152>
   25800:	4690      	mov	r8, r2
   25802:	2a00      	cmp	r2, #0
   25804:	f000 809f 	beq.w	25946 <ProcessAesDrv+0x152>
   25808:	4605      	mov	r5, r0
   2580a:	2800      	cmp	r0, #0
   2580c:	f000 813c 	beq.w	25a88 <ProcessAesDrv+0x294>
   25810:	4699      	mov	r9, r3
   25812:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   25814:	460e      	mov	r6, r1
   25816:	2b00      	cmp	r3, #0
   25818:	d151      	bne.n	258be <ProcessAesDrv+0xca>
   2581a:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   2581e:	d253      	bcs.n	258c8 <ProcessAesDrv+0xd4>
   25820:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   25824:	2b04      	cmp	r3, #4
   25826:	f000 8112 	beq.w	25a4e <ProcessAesDrv+0x25a>
   2582a:	2700      	movs	r7, #0
   2582c:	48a6      	ldr	r0, [pc, #664]	; (25ac8 <ProcessAesDrv+0x2d4>)
   2582e:	f04f 31ff 	mov.w	r1, #4294967295
   25832:	f7fe feb5 	bl	245a0 <CC_PalMutexLock>
   25836:	2800      	cmp	r0, #0
   25838:	f040 80e8 	bne.w	25a0c <ProcessAesDrv+0x218>
   2583c:	2000      	movs	r0, #0
   2583e:	f7fe fedf 	bl	24600 <CC_PalPowerSaveModeSelect>
   25842:	2800      	cmp	r0, #0
   25844:	f040 80eb 	bne.w	25a1e <ProcessAesDrv+0x22a>
   25848:	48a0      	ldr	r0, [pc, #640]	; (25acc <ProcessAesDrv+0x2d8>)
   2584a:	2301      	movs	r3, #1
   2584c:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   25850:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   25854:	2c00      	cmp	r4, #0
   25856:	d1fb      	bne.n	25850 <ProcessAesDrv+0x5c>
   25858:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2585a:	2b03      	cmp	r3, #3
   2585c:	dc39      	bgt.n	258d2 <ProcessAesDrv+0xde>
   2585e:	2b00      	cmp	r3, #0
   25860:	da3a      	bge.n	258d8 <ProcessAesDrv+0xe4>
   25862:	4c9b      	ldr	r4, [pc, #620]	; (25ad0 <ProcessAesDrv+0x2dc>)
   25864:	4a99      	ldr	r2, [pc, #612]	; (25acc <ProcessAesDrv+0x2d8>)
   25866:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2586a:	2b00      	cmp	r3, #0
   2586c:	d1fb      	bne.n	25866 <ProcessAesDrv+0x72>
   2586e:	2f00      	cmp	r7, #0
   25870:	f040 80e4 	bne.w	25a3c <ProcessAesDrv+0x248>
   25874:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25876:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   25878:	f023 0304 	bic.w	r3, r3, #4
   2587c:	2b03      	cmp	r3, #3
   2587e:	4b93      	ldr	r3, [pc, #588]	; (25acc <ProcessAesDrv+0x2d8>)
   25880:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   25884:	d056      	beq.n	25934 <ProcessAesDrv+0x140>
   25886:	2a01      	cmp	r2, #1
   25888:	bf0c      	ite	eq
   2588a:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   2588e:	f040 0020 	orrne.w	r0, r0, #32
   25892:	f7fe fde9 	bl	24468 <CC_HalMaskInterrupt>
   25896:	4b8d      	ldr	r3, [pc, #564]	; (25acc <ProcessAesDrv+0x2d8>)
   25898:	2200      	movs	r2, #0
   2589a:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   2589e:	2001      	movs	r0, #1
   258a0:	f7fe feae 	bl	24600 <CC_PalPowerSaveModeSelect>
   258a4:	2800      	cmp	r0, #0
   258a6:	f040 80c5 	bne.w	25a34 <ProcessAesDrv+0x240>
   258aa:	4887      	ldr	r0, [pc, #540]	; (25ac8 <ProcessAesDrv+0x2d4>)
   258ac:	f7fe fe80 	bl	245b0 <CC_PalMutexUnlock>
   258b0:	2800      	cmp	r0, #0
   258b2:	f040 80b8 	bne.w	25a26 <ProcessAesDrv+0x232>
   258b6:	4620      	mov	r0, r4
   258b8:	b005      	add	sp, #20
   258ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   258be:	2b01      	cmp	r3, #1
   258c0:	d1ae      	bne.n	25820 <ProcessAesDrv+0x2c>
   258c2:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   258c6:	d3ab      	bcc.n	25820 <ProcessAesDrv+0x2c>
   258c8:	4c82      	ldr	r4, [pc, #520]	; (25ad4 <ProcessAesDrv+0x2e0>)
   258ca:	4620      	mov	r0, r4
   258cc:	b005      	add	sp, #20
   258ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   258d2:	3b06      	subs	r3, #6
   258d4:	2b01      	cmp	r3, #1
   258d6:	d8c4      	bhi.n	25862 <ProcessAesDrv+0x6e>
   258d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   258da:	2b01      	cmp	r3, #1
   258dc:	f200 80d2 	bhi.w	25a84 <ProcessAesDrv+0x290>
   258e0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   258e2:	2b01      	cmp	r3, #1
   258e4:	d834      	bhi.n	25950 <ProcessAesDrv+0x15c>
   258e6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   258e8:	2b01      	cmp	r3, #1
   258ea:	f200 8122 	bhi.w	25b32 <ProcessAesDrv+0x33e>
   258ee:	4628      	mov	r0, r5
   258f0:	f7ff fef6 	bl	256e0 <InitAes.part.0>
   258f4:	4604      	mov	r4, r0
   258f6:	2800      	cmp	r0, #0
   258f8:	d1b4      	bne.n	25864 <ProcessAesDrv+0x70>
   258fa:	4628      	mov	r0, r5
   258fc:	f7ff fe9e 	bl	2563c <LoadAesKey>
   25900:	4604      	mov	r4, r0
   25902:	2800      	cmp	r0, #0
   25904:	d1ae      	bne.n	25864 <ProcessAesDrv+0x70>
   25906:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25908:	2b07      	cmp	r3, #7
   2590a:	d8aa      	bhi.n	25862 <ProcessAesDrv+0x6e>
   2590c:	a201      	add	r2, pc, #4	; (adr r2, 25914 <ProcessAesDrv+0x120>)
   2590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   25912:	bf00      	nop
   25914:	00025971 	.word	0x00025971
   25918:	00025955 	.word	0x00025955
   2591c:	00025af9 	.word	0x00025af9
   25920:	00025955 	.word	0x00025955
   25924:	00025863 	.word	0x00025863
   25928:	00025863 	.word	0x00025863
   2592c:	00025af9 	.word	0x00025af9
   25930:	00025955 	.word	0x00025955
   25934:	2a01      	cmp	r2, #1
   25936:	bf0c      	ite	eq
   25938:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   2593c:	f040 0010 	orrne.w	r0, r0, #16
   25940:	f7fe fd92 	bl	24468 <CC_HalMaskInterrupt>
   25944:	e7a7      	b.n	25896 <ProcessAesDrv+0xa2>
   25946:	4c64      	ldr	r4, [pc, #400]	; (25ad8 <ProcessAesDrv+0x2e4>)
   25948:	4620      	mov	r0, r4
   2594a:	b005      	add	sp, #20
   2594c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25950:	4c62      	ldr	r4, [pc, #392]	; (25adc <ProcessAesDrv+0x2e8>)
   25952:	e787      	b.n	25864 <ProcessAesDrv+0x70>
   25954:	4b5d      	ldr	r3, [pc, #372]	; (25acc <ProcessAesDrv+0x2d8>)
   25956:	682a      	ldr	r2, [r5, #0]
   25958:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   2595c:	686a      	ldr	r2, [r5, #4]
   2595e:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   25962:	68aa      	ldr	r2, [r5, #8]
   25964:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   25968:	68ea      	ldr	r2, [r5, #12]
   2596a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   2596e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25970:	6832      	ldr	r2, [r6, #0]
   25972:	f023 0304 	bic.w	r3, r3, #4
   25976:	2b03      	cmp	r3, #3
   25978:	d00d      	beq.n	25996 <ProcessAesDrv+0x1a2>
   2597a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   2597c:	f8d8 1000 	ldr.w	r1, [r8]
   25980:	2b01      	cmp	r3, #1
   25982:	4b52      	ldr	r3, [pc, #328]	; (25acc <ProcessAesDrv+0x2d8>)
   25984:	bf0b      	itete	eq
   25986:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   2598a:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   2598e:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   25992:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   25996:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   25998:	2b01      	cmp	r3, #1
   2599a:	4b4c      	ldr	r3, [pc, #304]	; (25acc <ProcessAesDrv+0x2d8>)
   2599c:	bf0b      	itete	eq
   2599e:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   259a2:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   259a6:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   259aa:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   259ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   259b0:	f023 0304 	bic.w	r3, r3, #4
   259b4:	2b03      	cmp	r3, #3
   259b6:	d06a      	beq.n	25a8e <ProcessAesDrv+0x29a>
   259b8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   259ba:	2b01      	cmp	r3, #1
   259bc:	bf0c      	ite	eq
   259be:	2080      	moveq	r0, #128	; 0x80
   259c0:	2020      	movne	r0, #32
   259c2:	f7fe fd57 	bl	24474 <CC_HalWaitInterrupt>
   259c6:	4604      	mov	r4, r0
   259c8:	2800      	cmp	r0, #0
   259ca:	f47f af4b 	bne.w	25864 <ProcessAesDrv+0x70>
   259ce:	4b3f      	ldr	r3, [pc, #252]	; (25acc <ProcessAesDrv+0x2d8>)
   259d0:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   259d4:	2c00      	cmp	r4, #0
   259d6:	d1fb      	bne.n	259d0 <ProcessAesDrv+0x1dc>
   259d8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   259da:	3b01      	subs	r3, #1
   259dc:	2b06      	cmp	r3, #6
   259de:	d812      	bhi.n	25a06 <ProcessAesDrv+0x212>
   259e0:	e8df f003 	tbb	[pc, r3]
   259e4:	11049904 	.word	0x11049904
   259e8:	9911      	.short	0x9911
   259ea:	04          	.byte	0x04
   259eb:	00          	.byte	0x00
   259ec:	4b37      	ldr	r3, [pc, #220]	; (25acc <ProcessAesDrv+0x2d8>)
   259ee:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   259f2:	602a      	str	r2, [r5, #0]
   259f4:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   259f8:	606a      	str	r2, [r5, #4]
   259fa:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   259fe:	60aa      	str	r2, [r5, #8]
   25a00:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   25a04:	60eb      	str	r3, [r5, #12]
   25a06:	2301      	movs	r3, #1
   25a08:	65ab      	str	r3, [r5, #88]	; 0x58
   25a0a:	e72b      	b.n	25864 <ProcessAesDrv+0x70>
   25a0c:	4834      	ldr	r0, [pc, #208]	; (25ae0 <ProcessAesDrv+0x2ec>)
   25a0e:	f7fd fe67 	bl	236e0 <CC_PalAbort>
   25a12:	2000      	movs	r0, #0
   25a14:	f7fe fdf4 	bl	24600 <CC_PalPowerSaveModeSelect>
   25a18:	2800      	cmp	r0, #0
   25a1a:	f43f af15 	beq.w	25848 <ProcessAesDrv+0x54>
   25a1e:	4831      	ldr	r0, [pc, #196]	; (25ae4 <ProcessAesDrv+0x2f0>)
   25a20:	f7fd fe5e 	bl	236e0 <CC_PalAbort>
   25a24:	e710      	b.n	25848 <ProcessAesDrv+0x54>
   25a26:	4830      	ldr	r0, [pc, #192]	; (25ae8 <ProcessAesDrv+0x2f4>)
   25a28:	f7fd fe5a 	bl	236e0 <CC_PalAbort>
   25a2c:	4620      	mov	r0, r4
   25a2e:	b005      	add	sp, #20
   25a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a34:	482d      	ldr	r0, [pc, #180]	; (25aec <ProcessAesDrv+0x2f8>)
   25a36:	f7fd fe53 	bl	236e0 <CC_PalAbort>
   25a3a:	e736      	b.n	258aa <ProcessAesDrv+0xb6>
   25a3c:	2304      	movs	r3, #4
   25a3e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   25a42:	2120      	movs	r1, #32
   25a44:	f105 0010 	add.w	r0, r5, #16
   25a48:	f7fe fd92 	bl	24570 <CC_PalMemSetZeroPlat>
   25a4c:	e712      	b.n	25874 <ProcessAesDrv+0x80>
   25a4e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   25a50:	6c28      	ldr	r0, [r5, #64]	; 0x40
   25a52:	f000 f9b5 	bl	25dc0 <kmu_validate_slot_and_size>
   25a56:	b998      	cbnz	r0, 25a80 <ProcessAesDrv+0x28c>
   25a58:	4f25      	ldr	r7, [pc, #148]	; (25af0 <ProcessAesDrv+0x2fc>)
   25a5a:	4c1c      	ldr	r4, [pc, #112]	; (25acc <ProcessAesDrv+0x2d8>)
   25a5c:	683b      	ldr	r3, [r7, #0]
   25a5e:	681b      	ldr	r3, [r3, #0]
   25a60:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   25a64:	683b      	ldr	r3, [r7, #0]
   25a66:	685b      	ldr	r3, [r3, #4]
   25a68:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   25a6c:	683b      	ldr	r3, [r7, #0]
   25a6e:	689b      	ldr	r3, [r3, #8]
   25a70:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   25a74:	683b      	ldr	r3, [r7, #0]
   25a76:	68db      	ldr	r3, [r3, #12]
   25a78:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   25a7c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   25a7e:	b161      	cbz	r1, 25a9a <ProcessAesDrv+0x2a6>
   25a80:	2701      	movs	r7, #1
   25a82:	e6d3      	b.n	2582c <ProcessAesDrv+0x38>
   25a84:	4c1b      	ldr	r4, [pc, #108]	; (25af4 <ProcessAesDrv+0x300>)
   25a86:	e6ed      	b.n	25864 <ProcessAesDrv+0x70>
   25a88:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   25a8c:	e713      	b.n	258b6 <ProcessAesDrv+0xc2>
   25a8e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   25a90:	2b01      	cmp	r3, #1
   25a92:	bf0c      	ite	eq
   25a94:	2040      	moveq	r0, #64	; 0x40
   25a96:	2010      	movne	r0, #16
   25a98:	e793      	b.n	259c2 <ProcessAesDrv+0x1ce>
   25a9a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   25a9c:	9301      	str	r3, [sp, #4]
   25a9e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   25aa0:	9300      	str	r3, [sp, #0]
   25aa2:	f105 0a10 	add.w	sl, r5, #16
   25aa6:	f04f 0b10 	mov.w	fp, #16
   25aaa:	f8cd a008 	str.w	sl, [sp, #8]
   25aae:	f8cd b00c 	str.w	fp, [sp, #12]
   25ab2:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   25ab6:	6c28      	ldr	r0, [r5, #64]	; 0x40
   25ab8:	f000 f9a4 	bl	25e04 <kmu_derive_cmac>
   25abc:	2800      	cmp	r0, #0
   25abe:	d13a      	bne.n	25b36 <ProcessAesDrv+0x342>
   25ac0:	2300      	movs	r3, #0
   25ac2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   25ac6:	e7db      	b.n	25a80 <ProcessAesDrv+0x28c>
   25ac8:	200006e8 	.word	0x200006e8
   25acc:	5002b000 	.word	0x5002b000
   25ad0:	00f10001 	.word	0x00f10001
   25ad4:	00f10005 	.word	0x00f10005
   25ad8:	00f1000b 	.word	0x00f1000b
   25adc:	00f10003 	.word	0x00f10003
   25ae0:	0002a924 	.word	0x0002a924
   25ae4:	0002a93c 	.word	0x0002a93c
   25ae8:	0002a97c 	.word	0x0002a97c
   25aec:	0002a95c 	.word	0x0002a95c
   25af0:	200006d8 	.word	0x200006d8
   25af4:	00f10002 	.word	0x00f10002
   25af8:	4b19      	ldr	r3, [pc, #100]	; (25b60 <ProcessAesDrv+0x36c>)
   25afa:	682a      	ldr	r2, [r5, #0]
   25afc:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   25b00:	686a      	ldr	r2, [r5, #4]
   25b02:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   25b06:	68aa      	ldr	r2, [r5, #8]
   25b08:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   25b0c:	68ea      	ldr	r2, [r5, #12]
   25b0e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   25b12:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25b14:	e72c      	b.n	25970 <ProcessAesDrv+0x17c>
   25b16:	4b12      	ldr	r3, [pc, #72]	; (25b60 <ProcessAesDrv+0x36c>)
   25b18:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   25b1c:	602a      	str	r2, [r5, #0]
   25b1e:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   25b22:	606a      	str	r2, [r5, #4]
   25b24:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   25b28:	60aa      	str	r2, [r5, #8]
   25b2a:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   25b2e:	60eb      	str	r3, [r5, #12]
   25b30:	e769      	b.n	25a06 <ProcessAesDrv+0x212>
   25b32:	4c0c      	ldr	r4, [pc, #48]	; (25b64 <ProcessAesDrv+0x370>)
   25b34:	e696      	b.n	25864 <ProcessAesDrv+0x70>
   25b36:	683b      	ldr	r3, [r7, #0]
   25b38:	681b      	ldr	r3, [r3, #0]
   25b3a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   25b3e:	683b      	ldr	r3, [r7, #0]
   25b40:	685b      	ldr	r3, [r3, #4]
   25b42:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   25b46:	683b      	ldr	r3, [r7, #0]
   25b48:	689b      	ldr	r3, [r3, #8]
   25b4a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   25b4e:	683b      	ldr	r3, [r7, #0]
   25b50:	68db      	ldr	r3, [r3, #12]
   25b52:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   25b56:	4659      	mov	r1, fp
   25b58:	4650      	mov	r0, sl
   25b5a:	f7fe fd09 	bl	24570 <CC_PalMemSetZeroPlat>
   25b5e:	e7af      	b.n	25ac0 <ProcessAesDrv+0x2cc>
   25b60:	5002b000 	.word	0x5002b000
   25b64:	00f10004 	.word	0x00f10004

00025b68 <FinishAesDrv>:
   25b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b6c:	b301      	cbz	r1, 25bb0 <FinishAesDrv+0x48>
   25b6e:	b1fa      	cbz	r2, 25bb0 <FinishAesDrv+0x48>
   25b70:	4604      	mov	r4, r0
   25b72:	2800      	cmp	r0, #0
   25b74:	d07c      	beq.n	25c70 <FinishAesDrv+0x108>
   25b76:	461d      	mov	r5, r3
   25b78:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25b7a:	2b07      	cmp	r3, #7
   25b7c:	460e      	mov	r6, r1
   25b7e:	d01b      	beq.n	25bb8 <FinishAesDrv+0x50>
   25b80:	b95d      	cbnz	r5, 25b9a <FinishAesDrv+0x32>
   25b82:	2b03      	cmp	r3, #3
   25b84:	d110      	bne.n	25ba8 <FinishAesDrv+0x40>
   25b86:	6d83      	ldr	r3, [r0, #88]	; 0x58
   25b88:	b973      	cbnz	r3, 25ba8 <FinishAesDrv+0x40>
   25b8a:	f100 0364 	add.w	r3, r0, #100	; 0x64
   25b8e:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   25b92:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   25b96:	600b      	str	r3, [r1, #0]
   25b98:	2510      	movs	r5, #16
   25b9a:	462b      	mov	r3, r5
   25b9c:	4631      	mov	r1, r6
   25b9e:	4620      	mov	r0, r4
   25ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25ba4:	f7ff be26 	b.w	257f4 <ProcessAesDrv>
   25ba8:	462f      	mov	r7, r5
   25baa:	4638      	mov	r0, r7
   25bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25bb0:	4f77      	ldr	r7, [pc, #476]	; (25d90 <FinishAesDrv+0x228>)
   25bb2:	4638      	mov	r0, r7
   25bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25bb8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   25bba:	2b00      	cmp	r3, #0
   25bbc:	d15b      	bne.n	25c76 <FinishAesDrv+0x10e>
   25bbe:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   25bc2:	d25d      	bcs.n	25c80 <FinishAesDrv+0x118>
   25bc4:	b915      	cbnz	r5, 25bcc <FinishAesDrv+0x64>
   25bc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   25bc8:	2b00      	cmp	r3, #0
   25bca:	d159      	bne.n	25c80 <FinishAesDrv+0x118>
   25bcc:	4871      	ldr	r0, [pc, #452]	; (25d94 <FinishAesDrv+0x22c>)
   25bce:	f04f 31ff 	mov.w	r1, #4294967295
   25bd2:	f7fe fce5 	bl	245a0 <CC_PalMutexLock>
   25bd6:	2800      	cmp	r0, #0
   25bd8:	f040 80b8 	bne.w	25d4c <FinishAesDrv+0x1e4>
   25bdc:	2000      	movs	r0, #0
   25bde:	f7fe fd0f 	bl	24600 <CC_PalPowerSaveModeSelect>
   25be2:	2800      	cmp	r0, #0
   25be4:	f040 80ae 	bne.w	25d44 <FinishAesDrv+0x1dc>
   25be8:	4a6b      	ldr	r2, [pc, #428]	; (25d98 <FinishAesDrv+0x230>)
   25bea:	2301      	movs	r3, #1
   25bec:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   25bf0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25bf4:	2b00      	cmp	r3, #0
   25bf6:	d1fb      	bne.n	25bf0 <FinishAesDrv+0x88>
   25bf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25bfa:	2b03      	cmp	r3, #3
   25bfc:	dd20      	ble.n	25c40 <FinishAesDrv+0xd8>
   25bfe:	3b06      	subs	r3, #6
   25c00:	2b01      	cmp	r3, #1
   25c02:	d81f      	bhi.n	25c44 <FinishAesDrv+0xdc>
   25c04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   25c06:	2b01      	cmp	r3, #1
   25c08:	d83c      	bhi.n	25c84 <FinishAesDrv+0x11c>
   25c0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   25c0c:	2b01      	cmp	r3, #1
   25c0e:	f200 80a5 	bhi.w	25d5c <FinishAesDrv+0x1f4>
   25c12:	6e23      	ldr	r3, [r4, #96]	; 0x60
   25c14:	2b01      	cmp	r3, #1
   25c16:	f200 80a3 	bhi.w	25d60 <FinishAesDrv+0x1f8>
   25c1a:	4620      	mov	r0, r4
   25c1c:	f7ff fd60 	bl	256e0 <InitAes.part.0>
   25c20:	4607      	mov	r7, r0
   25c22:	b980      	cbnz	r0, 25c46 <FinishAesDrv+0xde>
   25c24:	4620      	mov	r0, r4
   25c26:	f7ff fd09 	bl	2563c <LoadAesKey>
   25c2a:	4607      	mov	r7, r0
   25c2c:	b958      	cbnz	r0, 25c46 <FinishAesDrv+0xde>
   25c2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25c30:	2b07      	cmp	r3, #7
   25c32:	d807      	bhi.n	25c44 <FinishAesDrv+0xdc>
   25c34:	e8df f003 	tbb	[pc, r3]
   25c38:	285c2835 	.word	0x285c2835
   25c3c:	285c0606 	.word	0x285c0606
   25c40:	2b00      	cmp	r3, #0
   25c42:	dadf      	bge.n	25c04 <FinishAesDrv+0x9c>
   25c44:	4f55      	ldr	r7, [pc, #340]	; (25d9c <FinishAesDrv+0x234>)
   25c46:	4a54      	ldr	r2, [pc, #336]	; (25d98 <FinishAesDrv+0x230>)
   25c48:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   25c4c:	2b00      	cmp	r3, #0
   25c4e:	d1fb      	bne.n	25c48 <FinishAesDrv+0xe0>
   25c50:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   25c54:	2001      	movs	r0, #1
   25c56:	f7fe fcd3 	bl	24600 <CC_PalPowerSaveModeSelect>
   25c5a:	2800      	cmp	r0, #0
   25c5c:	d17a      	bne.n	25d54 <FinishAesDrv+0x1ec>
   25c5e:	484d      	ldr	r0, [pc, #308]	; (25d94 <FinishAesDrv+0x22c>)
   25c60:	f7fe fca6 	bl	245b0 <CC_PalMutexUnlock>
   25c64:	2800      	cmp	r0, #0
   25c66:	d0a0      	beq.n	25baa <FinishAesDrv+0x42>
   25c68:	484d      	ldr	r0, [pc, #308]	; (25da0 <FinishAesDrv+0x238>)
   25c6a:	f7fd fd39 	bl	236e0 <CC_PalAbort>
   25c6e:	e79c      	b.n	25baa <FinishAesDrv+0x42>
   25c70:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   25c74:	e799      	b.n	25baa <FinishAesDrv+0x42>
   25c76:	2b01      	cmp	r3, #1
   25c78:	d1a4      	bne.n	25bc4 <FinishAesDrv+0x5c>
   25c7a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   25c7e:	d3a1      	bcc.n	25bc4 <FinishAesDrv+0x5c>
   25c80:	4f48      	ldr	r7, [pc, #288]	; (25da4 <FinishAesDrv+0x23c>)
   25c82:	e792      	b.n	25baa <FinishAesDrv+0x42>
   25c84:	4f48      	ldr	r7, [pc, #288]	; (25da8 <FinishAesDrv+0x240>)
   25c86:	e7de      	b.n	25c46 <FinishAesDrv+0xde>
   25c88:	4b43      	ldr	r3, [pc, #268]	; (25d98 <FinishAesDrv+0x230>)
   25c8a:	6822      	ldr	r2, [r4, #0]
   25c8c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   25c90:	6862      	ldr	r2, [r4, #4]
   25c92:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   25c96:	68a2      	ldr	r2, [r4, #8]
   25c98:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   25c9c:	68e2      	ldr	r2, [r4, #12]
   25c9e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   25ca2:	4b3d      	ldr	r3, [pc, #244]	; (25d98 <FinishAesDrv+0x230>)
   25ca4:	2201      	movs	r2, #1
   25ca6:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   25caa:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   25cae:	2d00      	cmp	r5, #0
   25cb0:	d158      	bne.n	25d64 <FinishAesDrv+0x1fc>
   25cb2:	6da1      	ldr	r1, [r4, #88]	; 0x58
   25cb4:	b909      	cbnz	r1, 25cba <FinishAesDrv+0x152>
   25cb6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   25cba:	4b37      	ldr	r3, [pc, #220]	; (25d98 <FinishAesDrv+0x230>)
   25cbc:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   25cc0:	2f00      	cmp	r7, #0
   25cc2:	d1fb      	bne.n	25cbc <FinishAesDrv+0x154>
   25cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25cc6:	3b01      	subs	r3, #1
   25cc8:	2b06      	cmp	r3, #6
   25cca:	d8bc      	bhi.n	25c46 <FinishAesDrv+0xde>
   25ccc:	a201      	add	r2, pc, #4	; (adr r2, 25cd4 <FinishAesDrv+0x16c>)
   25cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   25cd2:	bf00      	nop
   25cd4:	00025d0d 	.word	0x00025d0d
   25cd8:	00025d29 	.word	0x00025d29
   25cdc:	00025d0d 	.word	0x00025d0d
   25ce0:	00025c47 	.word	0x00025c47
   25ce4:	00025c47 	.word	0x00025c47
   25ce8:	00025d29 	.word	0x00025d29
   25cec:	00025d0d 	.word	0x00025d0d
   25cf0:	4b29      	ldr	r3, [pc, #164]	; (25d98 <FinishAesDrv+0x230>)
   25cf2:	6822      	ldr	r2, [r4, #0]
   25cf4:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   25cf8:	6862      	ldr	r2, [r4, #4]
   25cfa:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   25cfe:	68a2      	ldr	r2, [r4, #8]
   25d00:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   25d04:	68e2      	ldr	r2, [r4, #12]
   25d06:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   25d0a:	e7ca      	b.n	25ca2 <FinishAesDrv+0x13a>
   25d0c:	4b22      	ldr	r3, [pc, #136]	; (25d98 <FinishAesDrv+0x230>)
   25d0e:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   25d12:	6022      	str	r2, [r4, #0]
   25d14:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   25d18:	6062      	str	r2, [r4, #4]
   25d1a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   25d1e:	60a2      	str	r2, [r4, #8]
   25d20:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   25d24:	60e3      	str	r3, [r4, #12]
   25d26:	e78e      	b.n	25c46 <FinishAesDrv+0xde>
   25d28:	4b1b      	ldr	r3, [pc, #108]	; (25d98 <FinishAesDrv+0x230>)
   25d2a:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   25d2e:	6022      	str	r2, [r4, #0]
   25d30:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   25d34:	6062      	str	r2, [r4, #4]
   25d36:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   25d3a:	60a2      	str	r2, [r4, #8]
   25d3c:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   25d40:	60e3      	str	r3, [r4, #12]
   25d42:	e780      	b.n	25c46 <FinishAesDrv+0xde>
   25d44:	4819      	ldr	r0, [pc, #100]	; (25dac <FinishAesDrv+0x244>)
   25d46:	f7fd fccb 	bl	236e0 <CC_PalAbort>
   25d4a:	e74d      	b.n	25be8 <FinishAesDrv+0x80>
   25d4c:	4818      	ldr	r0, [pc, #96]	; (25db0 <FinishAesDrv+0x248>)
   25d4e:	f7fd fcc7 	bl	236e0 <CC_PalAbort>
   25d52:	e743      	b.n	25bdc <FinishAesDrv+0x74>
   25d54:	4817      	ldr	r0, [pc, #92]	; (25db4 <FinishAesDrv+0x24c>)
   25d56:	f7fd fcc3 	bl	236e0 <CC_PalAbort>
   25d5a:	e780      	b.n	25c5e <FinishAesDrv+0xf6>
   25d5c:	4f16      	ldr	r7, [pc, #88]	; (25db8 <FinishAesDrv+0x250>)
   25d5e:	e772      	b.n	25c46 <FinishAesDrv+0xde>
   25d60:	4f16      	ldr	r7, [pc, #88]	; (25dbc <FinishAesDrv+0x254>)
   25d62:	e770      	b.n	25c46 <FinishAesDrv+0xde>
   25d64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   25d66:	6832      	ldr	r2, [r6, #0]
   25d68:	2901      	cmp	r1, #1
   25d6a:	d00a      	beq.n	25d82 <FinishAesDrv+0x21a>
   25d6c:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   25d70:	2010      	movs	r0, #16
   25d72:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   25d76:	f7fe fb7d 	bl	24474 <CC_HalWaitInterrupt>
   25d7a:	4607      	mov	r7, r0
   25d7c:	2800      	cmp	r0, #0
   25d7e:	d09c      	beq.n	25cba <FinishAesDrv+0x152>
   25d80:	e761      	b.n	25c46 <FinishAesDrv+0xde>
   25d82:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   25d86:	2040      	movs	r0, #64	; 0x40
   25d88:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   25d8c:	e7f3      	b.n	25d76 <FinishAesDrv+0x20e>
   25d8e:	bf00      	nop
   25d90:	00f1000b 	.word	0x00f1000b
   25d94:	200006e8 	.word	0x200006e8
   25d98:	5002b000 	.word	0x5002b000
   25d9c:	00f10001 	.word	0x00f10001
   25da0:	0002a97c 	.word	0x0002a97c
   25da4:	00f10005 	.word	0x00f10005
   25da8:	00f10002 	.word	0x00f10002
   25dac:	0002a93c 	.word	0x0002a93c
   25db0:	0002a924 	.word	0x0002a924
   25db4:	0002a95c 	.word	0x0002a95c
   25db8:	00f10003 	.word	0x00f10003
   25dbc:	00f10004 	.word	0x00f10004

00025dc0 <kmu_validate_slot_and_size>:
   25dc0:	b921      	cbnz	r1, 25dcc <kmu_validate_slot_and_size+0xc>
   25dc2:	4b03      	ldr	r3, [pc, #12]	; (25dd0 <kmu_validate_slot_and_size+0x10>)
   25dc4:	2800      	cmp	r0, #0
   25dc6:	bf18      	it	ne
   25dc8:	4618      	movne	r0, r3
   25dca:	4770      	bx	lr
   25dcc:	4801      	ldr	r0, [pc, #4]	; (25dd4 <kmu_validate_slot_and_size+0x14>)
   25dce:	4770      	bx	lr
   25dd0:	00f70001 	.word	0x00f70001
   25dd4:	00f70003 	.word	0x00f70003

00025dd8 <kmu_validate_kdr_slot_and_size>:
   25dd8:	b921      	cbnz	r1, 25de4 <kmu_validate_kdr_slot_and_size+0xc>
   25dda:	4b03      	ldr	r3, [pc, #12]	; (25de8 <kmu_validate_kdr_slot_and_size+0x10>)
   25ddc:	2800      	cmp	r0, #0
   25dde:	bf18      	it	ne
   25de0:	4618      	movne	r0, r3
   25de2:	4770      	bx	lr
   25de4:	4801      	ldr	r0, [pc, #4]	; (25dec <kmu_validate_kdr_slot_and_size+0x14>)
   25de6:	4770      	bx	lr
   25de8:	00f70001 	.word	0x00f70001
   25dec:	00f70003 	.word	0x00f70003

00025df0 <kmu_use_kdr_key>:
   25df0:	4b03      	ldr	r3, [pc, #12]	; (25e00 <kmu_use_kdr_key+0x10>)
   25df2:	2000      	movs	r0, #0
   25df4:	2201      	movs	r2, #1
   25df6:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   25dfa:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   25dfe:	4770      	bx	lr
   25e00:	5002b000 	.word	0x5002b000

00025e04 <kmu_derive_cmac>:
   25e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25e08:	b0cc      	sub	sp, #304	; 0x130
   25e0a:	2400      	movs	r4, #0
   25e0c:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   25e0e:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   25e12:	4682      	mov	sl, r0
   25e14:	4689      	mov	r9, r1
   25e16:	4616      	mov	r6, r2
   25e18:	4621      	mov	r1, r4
   25e1a:	2274      	movs	r2, #116	; 0x74
   25e1c:	a80e      	add	r0, sp, #56	; 0x38
   25e1e:	461f      	mov	r7, r3
   25e20:	f001 fa0c 	bl	2723c <memset>
   25e24:	2280      	movs	r2, #128	; 0x80
   25e26:	4621      	mov	r1, r4
   25e28:	a82c      	add	r0, sp, #176	; 0xb0
   25e2a:	942b      	str	r4, [sp, #172]	; 0xac
   25e2c:	f001 fa06 	bl	2723c <memset>
   25e30:	2384      	movs	r3, #132	; 0x84
   25e32:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   25e36:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   25e3a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   25e3e:	9305      	str	r3, [sp, #20]
   25e40:	d863      	bhi.n	25f0a <kmu_derive_cmac+0x106>
   25e42:	f7ff fcbf 	bl	257c4 <write_invalid_key>
   25e46:	ab05      	add	r3, sp, #20
   25e48:	4630      	mov	r0, r6
   25e4a:	ae2b      	add	r6, sp, #172	; 0xac
   25e4c:	9301      	str	r3, [sp, #4]
   25e4e:	9502      	str	r5, [sp, #8]
   25e50:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   25e54:	4639      	mov	r1, r7
   25e56:	9600      	str	r6, [sp, #0]
   25e58:	f000 f862 	bl	25f20 <UtilCmacBuildDataForDerivation>
   25e5c:	2800      	cmp	r0, #0
   25e5e:	d14f      	bne.n	25f00 <kmu_derive_cmac+0xfc>
   25e60:	2303      	movs	r3, #3
   25e62:	f88d 3013 	strb.w	r3, [sp, #19]
   25e66:	f89d 3013 	ldrb.w	r3, [sp, #19]
   25e6a:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   25e6e:	2307      	movs	r3, #7
   25e70:	2200      	movs	r2, #0
   25e72:	901c      	str	r0, [sp, #112]	; 0x70
   25e74:	2110      	movs	r1, #16
   25e76:	a80e      	add	r0, sp, #56	; 0x38
   25e78:	931b      	str	r3, [sp, #108]	; 0x6c
   25e7a:	2401      	movs	r4, #1
   25e7c:	2301      	movs	r3, #1
   25e7e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   25e82:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   25e86:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   25e8a:	9426      	str	r4, [sp, #152]	; 0x98
   25e8c:	f10d 0920 	add.w	r9, sp, #32
   25e90:	f7fe fb6e 	bl	24570 <CC_PalMemSetZeroPlat>
   25e94:	2210      	movs	r2, #16
   25e96:	9200      	str	r2, [sp, #0]
   25e98:	9905      	ldr	r1, [sp, #20]
   25e9a:	f8cd 9004 	str.w	r9, [sp, #4]
   25e9e:	ab0a      	add	r3, sp, #40	; 0x28
   25ea0:	4630      	mov	r0, r6
   25ea2:	aa06      	add	r2, sp, #24
   25ea4:	f7ff fa1e 	bl	252e4 <SetDataBuffersInfo>
   25ea8:	4607      	mov	r7, r0
   25eaa:	b170      	cbz	r0, 25eca <kmu_derive_cmac+0xc6>
   25eac:	e01d      	b.n	25eea <kmu_derive_cmac+0xe6>
   25eae:	a90e      	add	r1, sp, #56	; 0x38
   25eb0:	eb08 0007 	add.w	r0, r8, r7
   25eb4:	f7fe fb58 	bl	24568 <CC_PalMemCopyPlat>
   25eb8:	2110      	movs	r1, #16
   25eba:	a80e      	add	r0, sp, #56	; 0x38
   25ebc:	f7fe fb58 	bl	24570 <CC_PalMemSetZeroPlat>
   25ec0:	3401      	adds	r4, #1
   25ec2:	1bad      	subs	r5, r5, r6
   25ec4:	4437      	add	r7, r6
   25ec6:	b2e4      	uxtb	r4, r4
   25ec8:	d024      	beq.n	25f14 <kmu_derive_cmac+0x110>
   25eca:	2d10      	cmp	r5, #16
   25ecc:	464a      	mov	r2, r9
   25ece:	9b05      	ldr	r3, [sp, #20]
   25ed0:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   25ed4:	a906      	add	r1, sp, #24
   25ed6:	a80e      	add	r0, sp, #56	; 0x38
   25ed8:	462e      	mov	r6, r5
   25eda:	bf28      	it	cs
   25edc:	2610      	movcs	r6, #16
   25ede:	f7ff fe43 	bl	25b68 <FinishAesDrv>
   25ee2:	4632      	mov	r2, r6
   25ee4:	2800      	cmp	r0, #0
   25ee6:	d0e2      	beq.n	25eae <kmu_derive_cmac+0xaa>
   25ee8:	4607      	mov	r7, r0
   25eea:	a80e      	add	r0, sp, #56	; 0x38
   25eec:	2274      	movs	r2, #116	; 0x74
   25eee:	2100      	movs	r1, #0
   25ef0:	f7fe fb3c 	bl	2456c <CC_PalMemSetPlat>
   25ef4:	f7ff fc66 	bl	257c4 <write_invalid_key>
   25ef8:	4638      	mov	r0, r7
   25efa:	b04c      	add	sp, #304	; 0x130
   25efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25f00:	4f05      	ldr	r7, [pc, #20]	; (25f18 <kmu_derive_cmac+0x114>)
   25f02:	4638      	mov	r0, r7
   25f04:	b04c      	add	sp, #304	; 0x130
   25f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25f0a:	4f04      	ldr	r7, [pc, #16]	; (25f1c <kmu_derive_cmac+0x118>)
   25f0c:	4638      	mov	r0, r7
   25f0e:	b04c      	add	sp, #304	; 0x130
   25f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25f14:	462f      	mov	r7, r5
   25f16:	e7e8      	b.n	25eea <kmu_derive_cmac+0xe6>
   25f18:	00f1000e 	.word	0x00f1000e
   25f1c:	00f1000f 	.word	0x00f1000f

00025f20 <UtilCmacBuildDataForDerivation>:
   25f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25f24:	b082      	sub	sp, #8
   25f26:	461e      	mov	r6, r3
   25f28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   25f2a:	2300      	movs	r3, #0
   25f2c:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   25f30:	9301      	str	r3, [sp, #4]
   25f32:	d83e      	bhi.n	25fb2 <UtilCmacBuildDataForDerivation+0x92>
   25f34:	00e4      	lsls	r4, r4, #3
   25f36:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   25f3a:	4617      	mov	r7, r2
   25f3c:	f101 32ff 	add.w	r2, r1, #4294967295
   25f40:	bf34      	ite	cc
   25f42:	2303      	movcc	r3, #3
   25f44:	2304      	movcs	r3, #4
   25f46:	2a3f      	cmp	r2, #63	; 0x3f
   25f48:	460d      	mov	r5, r1
   25f4a:	9300      	str	r3, [sp, #0]
   25f4c:	d831      	bhi.n	25fb2 <UtilCmacBuildDataForDerivation+0x92>
   25f4e:	b380      	cbz	r0, 25fb2 <UtilCmacBuildDataForDerivation+0x92>
   25f50:	b116      	cbz	r6, 25f58 <UtilCmacBuildDataForDerivation+0x38>
   25f52:	b377      	cbz	r7, 25fb2 <UtilCmacBuildDataForDerivation+0x92>
   25f54:	2e40      	cmp	r6, #64	; 0x40
   25f56:	d82c      	bhi.n	25fb2 <UtilCmacBuildDataForDerivation+0x92>
   25f58:	9a08      	ldr	r2, [sp, #32]
   25f5a:	b352      	cbz	r2, 25fb2 <UtilCmacBuildDataForDerivation+0x92>
   25f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25f5e:	6811      	ldr	r1, [r2, #0]
   25f60:	b339      	cbz	r1, 25fb2 <UtilCmacBuildDataForDerivation+0x92>
   25f62:	19aa      	adds	r2, r5, r6
   25f64:	4413      	add	r3, r2
   25f66:	4299      	cmp	r1, r3
   25f68:	d323      	bcc.n	25fb2 <UtilCmacBuildDataForDerivation+0x92>
   25f6a:	9b08      	ldr	r3, [sp, #32]
   25f6c:	4601      	mov	r1, r0
   25f6e:	462a      	mov	r2, r5
   25f70:	1c58      	adds	r0, r3, #1
   25f72:	f7fe faf9 	bl	24568 <CC_PalMemCopyPlat>
   25f76:	9b08      	ldr	r3, [sp, #32]
   25f78:	f105 0802 	add.w	r8, r5, #2
   25f7c:	441d      	add	r5, r3
   25f7e:	2300      	movs	r3, #0
   25f80:	706b      	strb	r3, [r5, #1]
   25f82:	bb0e      	cbnz	r6, 25fc8 <UtilCmacBuildDataForDerivation+0xa8>
   25f84:	9b08      	ldr	r3, [sp, #32]
   25f86:	9400      	str	r4, [sp, #0]
   25f88:	2cff      	cmp	r4, #255	; 0xff
   25f8a:	eb03 0008 	add.w	r0, r3, r8
   25f8e:	d914      	bls.n	25fba <UtilCmacBuildDataForDerivation+0x9a>
   25f90:	0223      	lsls	r3, r4, #8
   25f92:	b29b      	uxth	r3, r3
   25f94:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   25f98:	2202      	movs	r2, #2
   25f9a:	a901      	add	r1, sp, #4
   25f9c:	9401      	str	r4, [sp, #4]
   25f9e:	f7fe fae3 	bl	24568 <CC_PalMemCopyPlat>
   25fa2:	f108 0302 	add.w	r3, r8, #2
   25fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25fa8:	2000      	movs	r0, #0
   25faa:	6013      	str	r3, [r2, #0]
   25fac:	b002      	add	sp, #8
   25fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25fb2:	480a      	ldr	r0, [pc, #40]	; (25fdc <UtilCmacBuildDataForDerivation+0xbc>)
   25fb4:	b002      	add	sp, #8
   25fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25fba:	2201      	movs	r2, #1
   25fbc:	4669      	mov	r1, sp
   25fbe:	f7fe fad3 	bl	24568 <CC_PalMemCopyPlat>
   25fc2:	f108 0301 	add.w	r3, r8, #1
   25fc6:	e7ee      	b.n	25fa6 <UtilCmacBuildDataForDerivation+0x86>
   25fc8:	9b08      	ldr	r3, [sp, #32]
   25fca:	4632      	mov	r2, r6
   25fcc:	eb03 0008 	add.w	r0, r3, r8
   25fd0:	4639      	mov	r1, r7
   25fd2:	f7fe fac9 	bl	24568 <CC_PalMemCopyPlat>
   25fd6:	44b0      	add	r8, r6
   25fd8:	e7d4      	b.n	25f84 <UtilCmacBuildDataForDerivation+0x64>
   25fda:	bf00      	nop
   25fdc:	80000006 	.word	0x80000006

00025fe0 <CC_PalDataBufferAttrGet>:
   25fe0:	2000      	movs	r0, #0
   25fe2:	7018      	strb	r0, [r3, #0]
   25fe4:	4770      	bx	lr
   25fe6:	bf00      	nop

00025fe8 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   25fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   25fea:	2364      	movs	r3, #100	; 0x64
{
   25fec:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   25fee:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   25ff0:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   25ff2:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   25ff6:	b111      	cbz	r1, 25ffe <u8_to_dec+0x16>
   25ff8:	3d01      	subs	r5, #1
   25ffa:	d101      	bne.n	26000 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   25ffc:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   25ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   26000:	429a      	cmp	r2, r3
		digit = value / divisor;
   26002:	fbb2 f7f3 	udiv	r7, r2, r3
   26006:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   26008:	d202      	bcs.n	26010 <u8_to_dec+0x28>
   2600a:	2b01      	cmp	r3, #1
   2600c:	d000      	beq.n	26010 <u8_to_dec+0x28>
   2600e:	b130      	cbz	r0, 2601e <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   26010:	3630      	adds	r6, #48	; 0x30
			buflen--;
   26012:	3901      	subs	r1, #1
			num_digits++;
   26014:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   26016:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   2601a:	b2c9      	uxtb	r1, r1
			num_digits++;
   2601c:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   2601e:	fb03 2217 	mls	r2, r3, r7, r2
   26022:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   26024:	fbb3 f3fc 	udiv	r3, r3, ip
   26028:	e7e5      	b.n	25ff6 <u8_to_dec+0xe>

0002602a <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2602a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2602e:	b2db      	uxtb	r3, r3
   26030:	2b09      	cmp	r3, #9
   26032:	d802      	bhi.n	2603a <char2hex+0x10>
		*x = c - '0';
   26034:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   26036:	2000      	movs	r0, #0
   26038:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2603a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2603e:	2b05      	cmp	r3, #5
   26040:	d802      	bhi.n	26048 <char2hex+0x1e>
		*x = c - 'a' + 10;
   26042:	3857      	subs	r0, #87	; 0x57
   26044:	7008      	strb	r0, [r1, #0]
   26046:	e7f6      	b.n	26036 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   26048:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2604c:	2b05      	cmp	r3, #5
   2604e:	d801      	bhi.n	26054 <char2hex+0x2a>
		*x = c - 'A' + 10;
   26050:	3837      	subs	r0, #55	; 0x37
   26052:	e7f7      	b.n	26044 <char2hex+0x1a>
		return -EINVAL;
   26054:	f06f 0015 	mvn.w	r0, #21
}
   26058:	4770      	bx	lr

0002605a <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2605a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2605c:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2605e:	f001 0001 	and.w	r0, r1, #1
   26062:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   26066:	429d      	cmp	r5, r3
   26068:	ea4f 0651 	mov.w	r6, r1, lsr #1
   2606c:	d903      	bls.n	26076 <hex2bin+0x1c>
		return 0;
   2606e:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   26070:	4628      	mov	r0, r5
   26072:	b003      	add	sp, #12
   26074:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   26076:	b158      	cbz	r0, 26090 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   26078:	7820      	ldrb	r0, [r4, #0]
   2607a:	f10d 0107 	add.w	r1, sp, #7
   2607e:	f7ff ffd4 	bl	2602a <char2hex>
   26082:	2800      	cmp	r0, #0
   26084:	dbf3      	blt.n	2606e <hex2bin+0x14>
		buf[0] = dec;
   26086:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2608a:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   2608e:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   26090:	3401      	adds	r4, #1
   26092:	4416      	add	r6, r2
   26094:	42b2      	cmp	r2, r6
   26096:	d0eb      	beq.n	26070 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   26098:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2609c:	f10d 0107 	add.w	r1, sp, #7
   260a0:	f7ff ffc3 	bl	2602a <char2hex>
   260a4:	2800      	cmp	r0, #0
   260a6:	dbe2      	blt.n	2606e <hex2bin+0x14>
		buf[i] = dec << 4;
   260a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   260ac:	011b      	lsls	r3, r3, #4
   260ae:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   260b0:	f814 0b02 	ldrb.w	r0, [r4], #2
   260b4:	f7ff ffb9 	bl	2602a <char2hex>
   260b8:	2800      	cmp	r0, #0
   260ba:	dbd8      	blt.n	2606e <hex2bin+0x14>
		buf[i] += dec;
   260bc:	7813      	ldrb	r3, [r2, #0]
   260be:	f89d 1007 	ldrb.w	r1, [sp, #7]
   260c2:	440b      	add	r3, r1
   260c4:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   260c8:	e7e4      	b.n	26094 <hex2bin+0x3a>

000260ca <sys_notify_validate>:
	if (notify == NULL) {
   260ca:	4603      	mov	r3, r0
   260cc:	b140      	cbz	r0, 260e0 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   260ce:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   260d0:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   260d4:	2a02      	cmp	r2, #2
   260d6:	d006      	beq.n	260e6 <sys_notify_validate+0x1c>
   260d8:	2a03      	cmp	r2, #3
   260da:	d004      	beq.n	260e6 <sys_notify_validate+0x1c>
   260dc:	2a01      	cmp	r2, #1
   260de:	d005      	beq.n	260ec <sys_notify_validate+0x22>
		return -EINVAL;
   260e0:	f06f 0015 	mvn.w	r0, #21
}
   260e4:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   260e6:	681a      	ldr	r2, [r3, #0]
   260e8:	2a00      	cmp	r2, #0
   260ea:	d0f9      	beq.n	260e0 <sys_notify_validate+0x16>
		notify->result = 0;
   260ec:	2000      	movs	r0, #0
   260ee:	6098      	str	r0, [r3, #8]
   260f0:	4770      	bx	lr

000260f2 <arch_printk_char_out>:
}
   260f2:	2000      	movs	r0, #0
   260f4:	4770      	bx	lr

000260f6 <str_out>:
{
   260f6:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   260f8:	688a      	ldr	r2, [r1, #8]
   260fa:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   260fc:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   260fe:	b114      	cbz	r4, 26106 <str_out+0x10>
   26100:	684b      	ldr	r3, [r1, #4]
   26102:	4293      	cmp	r3, r2
   26104:	dc01      	bgt.n	2610a <str_out+0x14>
		ctx->count++;
   26106:	608d      	str	r5, [r1, #8]
}
   26108:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2610a:	3b01      	subs	r3, #1
   2610c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2610e:	bf08      	it	eq
   26110:	2200      	moveq	r2, #0
   26112:	608d      	str	r5, [r1, #8]
   26114:	bf0c      	ite	eq
   26116:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   26118:	54a0      	strbne	r0, [r4, r2]
   2611a:	e7f5      	b.n	26108 <str_out+0x12>

0002611c <printk>:
{
   2611c:	b40f      	push	{r0, r1, r2, r3}
   2611e:	b507      	push	{r0, r1, r2, lr}
   26120:	a904      	add	r1, sp, #16
   26122:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   26126:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   26128:	f7eb ff7e 	bl	12028 <vprintk>
}
   2612c:	b003      	add	sp, #12
   2612e:	f85d eb04 	ldr.w	lr, [sp], #4
   26132:	b004      	add	sp, #16
   26134:	4770      	bx	lr

00026136 <snprintk>:
{
   26136:	b40c      	push	{r2, r3}
   26138:	b507      	push	{r0, r1, r2, lr}
   2613a:	ab04      	add	r3, sp, #16
   2613c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   26140:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   26142:	f7eb ff7f 	bl	12044 <vsnprintk>
}
   26146:	b003      	add	sp, #12
   26148:	f85d eb04 	ldr.w	lr, [sp], #4
   2614c:	b002      	add	sp, #8
   2614e:	4770      	bx	lr

00026150 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26150:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   26152:	f013 0307 	ands.w	r3, r3, #7
   26156:	d105      	bne.n	26164 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   26158:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2615a:	2b00      	cmp	r3, #0
   2615c:	bf0c      	ite	eq
   2615e:	2000      	moveq	r0, #0
   26160:	2003      	movne	r0, #3
   26162:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   26164:	2b02      	cmp	r3, #2
   26166:	d105      	bne.n	26174 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   26168:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   2616a:	2b00      	cmp	r3, #0
   2616c:	bf14      	ite	ne
   2616e:	2000      	movne	r0, #0
   26170:	2004      	moveq	r0, #4
   26172:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   26174:	2b01      	cmp	r3, #1
   26176:	d105      	bne.n	26184 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   26178:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2617a:	2b00      	cmp	r3, #0
   2617c:	bf0c      	ite	eq
   2617e:	2000      	moveq	r0, #0
   26180:	2005      	movne	r0, #5
   26182:	4770      	bx	lr
	int evt = EVT_NOP;
   26184:	2000      	movs	r0, #0
}
   26186:	4770      	bx	lr

00026188 <notify_one>:
{
   26188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2618c:	460d      	mov	r5, r1
   2618e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26190:	4619      	mov	r1, r3
   26192:	1d28      	adds	r0, r5, #4
{
   26194:	4690      	mov	r8, r2
   26196:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26198:	f7eb ff14 	bl	11fc4 <sys_notify_finalize>
	if (cb) {
   2619c:	4604      	mov	r4, r0
   2619e:	b138      	cbz	r0, 261b0 <notify_one+0x28>
		cb(mgr, cli, state, res);
   261a0:	4633      	mov	r3, r6
   261a2:	4642      	mov	r2, r8
   261a4:	4629      	mov	r1, r5
   261a6:	4638      	mov	r0, r7
   261a8:	46a4      	mov	ip, r4
}
   261aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   261ae:	4760      	bx	ip
}
   261b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000261b4 <validate_args>:
{
   261b4:	b510      	push	{r4, lr}
   261b6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   261b8:	b140      	cbz	r0, 261cc <validate_args+0x18>
   261ba:	b139      	cbz	r1, 261cc <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   261bc:	1d08      	adds	r0, r1, #4
   261be:	f7ff ff84 	bl	260ca <sys_notify_validate>
	if ((rv == 0)
   261c2:	b928      	cbnz	r0, 261d0 <validate_args+0x1c>
	    && ((cli->notify.flags
   261c4:	68a3      	ldr	r3, [r4, #8]
   261c6:	f033 0303 	bics.w	r3, r3, #3
   261ca:	d001      	beq.n	261d0 <validate_args+0x1c>
		rv = -EINVAL;
   261cc:	f06f 0015 	mvn.w	r0, #21
}
   261d0:	bd10      	pop	{r4, pc}

000261d2 <onoff_manager_init>:
{
   261d2:	b538      	push	{r3, r4, r5, lr}
   261d4:	460c      	mov	r4, r1
	if ((mgr == NULL)
   261d6:	4605      	mov	r5, r0
   261d8:	b158      	cbz	r0, 261f2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   261da:	b151      	cbz	r1, 261f2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   261dc:	680b      	ldr	r3, [r1, #0]
   261de:	b143      	cbz	r3, 261f2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   261e0:	684b      	ldr	r3, [r1, #4]
   261e2:	b133      	cbz	r3, 261f2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   261e4:	2220      	movs	r2, #32
   261e6:	2100      	movs	r1, #0
   261e8:	f001 f828 	bl	2723c <memset>
   261ec:	612c      	str	r4, [r5, #16]
	return 0;
   261ee:	2000      	movs	r0, #0
}
   261f0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   261f2:	f06f 0015 	mvn.w	r0, #21
   261f6:	e7fb      	b.n	261f0 <onoff_manager_init+0x1e>

000261f8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   261f8:	4604      	mov	r4, r0
   261fa:	b508      	push	{r3, lr}
   261fc:	4608      	mov	r0, r1
   261fe:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   26200:	461a      	mov	r2, r3
   26202:	47a0      	blx	r4
	return z_impl_z_current_get();
   26204:	f7fb fffe 	bl	22204 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   26208:	f7ee fb5a 	bl	148c0 <z_impl_k_thread_abort>

0002620c <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2620c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   26210:	8840      	ldrh	r0, [r0, #2]
}
   26212:	0840      	lsrs	r0, r0, #1
   26214:	4770      	bx	lr

00026216 <free_list_add>:
{
   26216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26218:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2621a:	f7ff fff7 	bl	2620c <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2621e:	fab0 f080 	clz	r0, r0
   26222:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   26226:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   2622a:	00ca      	lsls	r2, r1, #3
   2622c:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   26230:	1d17      	adds	r7, r2, #4
{
   26232:	460c      	mov	r4, r1
   26234:	3206      	adds	r2, #6
   26236:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   26238:	b956      	cbnz	r6, 26250 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2623a:	2101      	movs	r1, #1
   2623c:	fa01 f000 	lsl.w	r0, r1, r0
   26240:	68d9      	ldr	r1, [r3, #12]
   26242:	4301      	orrs	r1, r0
   26244:	60d9      	str	r1, [r3, #12]
		b->next = c;
   26246:	f8cc 4010 	str.w	r4, [ip, #16]
   2624a:	53dd      	strh	r5, [r3, r7]
   2624c:	529d      	strh	r5, [r3, r2]
}
   2624e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   26250:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   26252:	3104      	adds	r1, #4
   26254:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   26256:	53d8      	strh	r0, [r3, r7]
   26258:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2625c:	529e      	strh	r6, [r3, r2]
   2625e:	80c5      	strh	r5, [r0, #6]
   26260:	525d      	strh	r5, [r3, r1]
   26262:	e7f4      	b.n	2624e <free_list_add+0x38>

00026264 <free_list_remove_bidx>:
{
   26264:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   26266:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2626a:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2626c:	4299      	cmp	r1, r3
   2626e:	f102 0104 	add.w	r1, r2, #4
   26272:	d10a      	bne.n	2628a <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   26274:	2301      	movs	r3, #1
   26276:	fa03 f202 	lsl.w	r2, r3, r2
   2627a:	68c3      	ldr	r3, [r0, #12]
   2627c:	ea23 0302 	bic.w	r3, r3, r2
   26280:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   26282:	2300      	movs	r3, #0
   26284:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   26288:	bd10      	pop	{r4, pc}
   2628a:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2628c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   26290:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   26294:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   26298:	80cb      	strh	r3, [r1, #6]
   2629a:	8082      	strh	r2, [r0, #4]
}
   2629c:	e7f4      	b.n	26288 <free_list_remove_bidx+0x24>

0002629e <free_list_remove>:
{
   2629e:	b508      	push	{r3, lr}
   262a0:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   262a2:	f7ff ffb3 	bl	2620c <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   262a6:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   262aa:	f1c2 021f 	rsb	r2, r2, #31
   262ae:	4618      	mov	r0, r3
}
   262b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   262b4:	f7ff bfd6 	b.w	26264 <free_list_remove_bidx>

000262b8 <alloc_chunk>:
{
   262b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   262bc:	fab1 f581 	clz	r5, r1
   262c0:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   262c4:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   262c8:	4603      	mov	r3, r0
	if (b->next) {
   262ca:	693a      	ldr	r2, [r7, #16]
{
   262cc:	460e      	mov	r6, r1
	if (b->next) {
   262ce:	b1c2      	cbz	r2, 26302 <alloc_chunk+0x4a>
   262d0:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   262d4:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   262d6:	4618      	mov	r0, r3
   262d8:	4621      	mov	r1, r4
   262da:	f7ff ff97 	bl	2620c <chunk_size>
   262de:	42b0      	cmp	r0, r6
   262e0:	d306      	bcc.n	262f0 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   262e2:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   262e4:	4618      	mov	r0, r3
   262e6:	f7ff ffbd 	bl	26264 <free_list_remove_bidx>
}
   262ea:	4620      	mov	r0, r4
   262ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   262f0:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   262f4:	f1b8 0801 	subs.w	r8, r8, #1
   262f8:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   262fa:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   262fc:	d001      	beq.n	26302 <alloc_chunk+0x4a>
   262fe:	4282      	cmp	r2, r0
   26300:	d1e8      	bne.n	262d4 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   26302:	f1c5 0220 	rsb	r2, r5, #32
   26306:	f04f 34ff 	mov.w	r4, #4294967295
   2630a:	4094      	lsls	r4, r2
   2630c:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2630e:	4014      	ands	r4, r2
   26310:	d0eb      	beq.n	262ea <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   26312:	fa94 f2a4 	rbit	r2, r4
   26316:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2631a:	1d11      	adds	r1, r2, #4
   2631c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   26320:	4621      	mov	r1, r4
   26322:	e7df      	b.n	262e4 <alloc_chunk+0x2c>

00026324 <merge_chunks>:
{
   26324:	b538      	push	{r3, r4, r5, lr}
   26326:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26328:	f7ff ff70 	bl	2620c <chunk_size>
{
   2632c:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2632e:	4604      	mov	r4, r0
   26330:	4611      	mov	r1, r2
   26332:	4618      	mov	r0, r3
   26334:	f7ff ff6a 	bl	2620c <chunk_size>
		((uint16_t *)cmem)[f] = val;
   26338:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2633c:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2633e:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   26340:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   26342:	4618      	mov	r0, r3
   26344:	f7ff ff62 	bl	2620c <chunk_size>
	void *cmem = &buf[c];
   26348:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2634a:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2634e:	bd38      	pop	{r3, r4, r5, pc}

00026350 <split_chunks>:
{
   26350:	b538      	push	{r3, r4, r5, lr}
   26352:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   26354:	f7ff ff5a 	bl	2620c <chunk_size>
{
   26358:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   2635a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2635c:	1a51      	subs	r1, r2, r1
   2635e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   26362:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26364:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   26366:	8060      	strh	r0, [r4, #2]
   26368:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2636c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2636e:	8044      	strh	r4, [r0, #2]
   26370:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   26374:	4618      	mov	r0, r3
   26376:	4611      	mov	r1, r2
   26378:	f7ff ff48 	bl	2620c <chunk_size>
	void *cmem = &buf[c];
   2637c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2637e:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   26382:	bd38      	pop	{r3, r4, r5, pc}

00026384 <free_chunk>:
{
   26384:	b538      	push	{r3, r4, r5, lr}
   26386:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   26388:	f7ff ff40 	bl	2620c <chunk_size>
   2638c:	460c      	mov	r4, r1
   2638e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   26390:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26394:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   26396:	07da      	lsls	r2, r3, #31
   26398:	d40a      	bmi.n	263b0 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2639a:	4628      	mov	r0, r5
   2639c:	f7ff ff7f 	bl	2629e <free_list_remove>
	return c + chunk_size(h, c);
   263a0:	4621      	mov	r1, r4
   263a2:	4628      	mov	r0, r5
   263a4:	f7ff ff32 	bl	2620c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   263a8:	1822      	adds	r2, r4, r0
   263aa:	4628      	mov	r0, r5
   263ac:	f7ff ffba 	bl	26324 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   263b0:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   263b4:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   263b6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   263ba:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   263bc:	07db      	lsls	r3, r3, #31
   263be:	d40c      	bmi.n	263da <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   263c0:	4628      	mov	r0, r5
   263c2:	f7ff ff6c 	bl	2629e <free_list_remove>
		return ((uint16_t *)cmem)[f];
   263c6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   263ca:	4622      	mov	r2, r4
   263cc:	1a61      	subs	r1, r4, r1
   263ce:	4628      	mov	r0, r5
   263d0:	f7ff ffa8 	bl	26324 <merge_chunks>
   263d4:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   263d8:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   263da:	4621      	mov	r1, r4
   263dc:	4628      	mov	r0, r5
}
   263de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   263e2:	f7ff bf18 	b.w	26216 <free_list_add>

000263e6 <sys_heap_alloc>:
{
   263e6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   263e8:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   263ea:	b909      	cbnz	r1, 263f0 <sys_heap_alloc+0xa>
		return NULL;
   263ec:	2000      	movs	r0, #0
}
   263ee:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   263f0:	68ab      	ldr	r3, [r5, #8]
   263f2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   263f6:	d9f9      	bls.n	263ec <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   263f8:	310b      	adds	r1, #11
   263fa:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   263fc:	4621      	mov	r1, r4
   263fe:	4628      	mov	r0, r5
   26400:	f7ff ff5a 	bl	262b8 <alloc_chunk>
	if (c == 0U) {
   26404:	4606      	mov	r6, r0
   26406:	2800      	cmp	r0, #0
   26408:	d0f0      	beq.n	263ec <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2640a:	4601      	mov	r1, r0
   2640c:	4628      	mov	r0, r5
   2640e:	f7ff fefd 	bl	2620c <chunk_size>
   26412:	42a0      	cmp	r0, r4
   26414:	d907      	bls.n	26426 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   26416:	1932      	adds	r2, r6, r4
   26418:	4628      	mov	r0, r5
   2641a:	f7ff ff99 	bl	26350 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2641e:	4611      	mov	r1, r2
   26420:	4628      	mov	r0, r5
   26422:	f7ff fef8 	bl	26216 <free_list_add>
	void *cmem = &buf[c];
   26426:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2642a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2642c:	8853      	ldrh	r3, [r2, #2]
   2642e:	f043 0301 	orr.w	r3, r3, #1
   26432:	8053      	strh	r3, [r2, #2]
   26434:	3004      	adds	r0, #4
	return mem;
   26436:	e7da      	b.n	263ee <sys_heap_alloc+0x8>

00026438 <encode_uint>:
{
   26438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2643c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   2643e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   26440:	2b6f      	cmp	r3, #111	; 0x6f
{
   26442:	4680      	mov	r8, r0
   26444:	460f      	mov	r7, r1
   26446:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26448:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   2644c:	d029      	beq.n	264a2 <encode_uint+0x6a>
   2644e:	d824      	bhi.n	2649a <encode_uint+0x62>
		return 16;
   26450:	2b58      	cmp	r3, #88	; 0x58
   26452:	bf14      	ite	ne
   26454:	260a      	movne	r6, #10
   26456:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   26458:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   2645c:	4632      	mov	r2, r6
   2645e:	2300      	movs	r3, #0
   26460:	4640      	mov	r0, r8
   26462:	4639      	mov	r1, r7
   26464:	f7da fe4c 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26468:	2a09      	cmp	r2, #9
   2646a:	b2d4      	uxtb	r4, r2
   2646c:	d81e      	bhi.n	264ac <encode_uint+0x74>
   2646e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   26470:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26472:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   26474:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26478:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   2647c:	d301      	bcc.n	26482 <encode_uint+0x4a>
   2647e:	45d1      	cmp	r9, sl
   26480:	d811      	bhi.n	264a6 <encode_uint+0x6e>
	if (conv->flag_hash) {
   26482:	782b      	ldrb	r3, [r5, #0]
   26484:	069b      	lsls	r3, r3, #26
   26486:	d505      	bpl.n	26494 <encode_uint+0x5c>
		if (radix == 8) {
   26488:	2e08      	cmp	r6, #8
   2648a:	d115      	bne.n	264b8 <encode_uint+0x80>
			conv->altform_0 = true;
   2648c:	78ab      	ldrb	r3, [r5, #2]
   2648e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   26492:	70ab      	strb	r3, [r5, #2]
}
   26494:	4648      	mov	r0, r9
   26496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2649a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   2649e:	2b70      	cmp	r3, #112	; 0x70
   264a0:	e7d7      	b.n	26452 <encode_uint+0x1a>
	switch (specifier) {
   264a2:	2608      	movs	r6, #8
   264a4:	e7d8      	b.n	26458 <encode_uint+0x20>
		value /= radix;
   264a6:	4680      	mov	r8, r0
   264a8:	460f      	mov	r7, r1
   264aa:	e7d7      	b.n	2645c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   264ac:	f1bb 0f19 	cmp.w	fp, #25
   264b0:	bf94      	ite	ls
   264b2:	3437      	addls	r4, #55	; 0x37
   264b4:	3457      	addhi	r4, #87	; 0x57
   264b6:	e7db      	b.n	26470 <encode_uint+0x38>
		} else if (radix == 16) {
   264b8:	2e10      	cmp	r6, #16
   264ba:	d1eb      	bne.n	26494 <encode_uint+0x5c>
			conv->altform_0c = true;
   264bc:	78ab      	ldrb	r3, [r5, #2]
   264be:	f043 0310 	orr.w	r3, r3, #16
   264c2:	e7e6      	b.n	26492 <encode_uint+0x5a>

000264c4 <outs>:
{
   264c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   264c8:	4607      	mov	r7, r0
   264ca:	4688      	mov	r8, r1
   264cc:	4615      	mov	r5, r2
   264ce:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   264d0:	4614      	mov	r4, r2
   264d2:	42b4      	cmp	r4, r6
   264d4:	eba4 0005 	sub.w	r0, r4, r5
   264d8:	d302      	bcc.n	264e0 <outs+0x1c>
   264da:	b93e      	cbnz	r6, 264ec <outs+0x28>
   264dc:	7823      	ldrb	r3, [r4, #0]
   264de:	b12b      	cbz	r3, 264ec <outs+0x28>
		int rc = out((int)*sp++, ctx);
   264e0:	f814 0b01 	ldrb.w	r0, [r4], #1
   264e4:	4641      	mov	r1, r8
   264e6:	47b8      	blx	r7
		if (rc < 0) {
   264e8:	2800      	cmp	r0, #0
   264ea:	daf2      	bge.n	264d2 <outs+0xe>
}
   264ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000264f0 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   264f0:	4040      	eors	r0, r0
   264f2:	f380 8811 	msr	BASEPRI, r0
   264f6:	f04f 0004 	mov.w	r0, #4
   264fa:	df02      	svc	2
}
   264fc:	4770      	bx	lr

000264fe <assert_print>:

void assert_print(const char *fmt, ...)
{
   264fe:	b40f      	push	{r0, r1, r2, r3}
   26500:	b507      	push	{r0, r1, r2, lr}
   26502:	a904      	add	r1, sp, #16
   26504:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   26508:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2650a:	f7eb fd8d 	bl	12028 <vprintk>

	va_end(ap);
}
   2650e:	b003      	add	sp, #12
   26510:	f85d eb04 	ldr.w	lr, [sp], #4
   26514:	b004      	add	sp, #16
   26516:	4770      	bx	lr

00026518 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   26518:	4770      	bx	lr

0002651a <z_log_minimal_printk>:
{
   2651a:	b40f      	push	{r0, r1, r2, r3}
   2651c:	b507      	push	{r0, r1, r2, lr}
   2651e:	a904      	add	r1, sp, #16
   26520:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   26524:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   26526:	f7eb fd7f 	bl	12028 <vprintk>
}
   2652a:	b003      	add	sp, #12
   2652c:	f85d eb04 	ldr.w	lr, [sp], #4
   26530:	b004      	add	sp, #16
   26532:	4770      	bx	lr

00026534 <nvs_flash_rd>:
{
   26534:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   26536:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   26538:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   2653a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2653c:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2653e:	fa16 f181 	uxtah	r1, r6, r1
   26542:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   26546:	6884      	ldr	r4, [r0, #8]
   26548:	6824      	ldr	r4, [r4, #0]
   2654a:	46a4      	mov	ip, r4
}
   2654c:	bc70      	pop	{r4, r5, r6}
   2654e:	4760      	bx	ip

00026550 <nvs_flash_block_cmp>:
{
   26550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26554:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   26556:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   26558:	681d      	ldr	r5, [r3, #0]
   2655a:	426d      	negs	r5, r5
{
   2655c:	b089      	sub	sp, #36	; 0x24
   2655e:	4681      	mov	r9, r0
   26560:	460e      	mov	r6, r1
   26562:	4617      	mov	r7, r2
	block_size =
   26564:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   26568:	b91c      	cbnz	r4, 26572 <nvs_flash_block_cmp+0x22>
	return 0;
   2656a:	4620      	mov	r0, r4
}
   2656c:	b009      	add	sp, #36	; 0x24
   2656e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   26572:	42ac      	cmp	r4, r5
   26574:	46a0      	mov	r8, r4
   26576:	bf28      	it	cs
   26578:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2657a:	4643      	mov	r3, r8
   2657c:	466a      	mov	r2, sp
   2657e:	4631      	mov	r1, r6
   26580:	4648      	mov	r0, r9
   26582:	f7ff ffd7 	bl	26534 <nvs_flash_rd>
		if (rc) {
   26586:	2800      	cmp	r0, #0
   26588:	d1f0      	bne.n	2656c <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2658a:	4642      	mov	r2, r8
   2658c:	4669      	mov	r1, sp
   2658e:	4638      	mov	r0, r7
   26590:	f000 fe20 	bl	271d4 <memcmp>
		if (rc) {
   26594:	b920      	cbnz	r0, 265a0 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   26596:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2659a:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2659c:	4447      	add	r7, r8
   2659e:	e7e3      	b.n	26568 <nvs_flash_block_cmp+0x18>
			return 1;
   265a0:	2001      	movs	r0, #1
   265a2:	e7e3      	b.n	2656c <nvs_flash_block_cmp+0x1c>

000265a4 <nvs_flash_cmp_const>:
{
   265a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   265a8:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   265aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   265ac:	681d      	ldr	r5, [r3, #0]
   265ae:	426d      	negs	r5, r5
{
   265b0:	b088      	sub	sp, #32
	block_size =
   265b2:	f005 0520 	and.w	r5, r5, #32
{
   265b6:	4607      	mov	r7, r0
   265b8:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   265ba:	4668      	mov	r0, sp
{
   265bc:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   265be:	462a      	mov	r2, r5
   265c0:	f000 fe3c 	bl	2723c <memset>
	while (len) {
   265c4:	b91c      	cbnz	r4, 265ce <nvs_flash_cmp_const+0x2a>
	return 0;
   265c6:	4620      	mov	r0, r4
}
   265c8:	b008      	add	sp, #32
   265ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   265ce:	42ac      	cmp	r4, r5
   265d0:	46a0      	mov	r8, r4
   265d2:	bf28      	it	cs
   265d4:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   265d6:	4643      	mov	r3, r8
   265d8:	466a      	mov	r2, sp
   265da:	4631      	mov	r1, r6
   265dc:	4638      	mov	r0, r7
   265de:	f7ff ffb7 	bl	26550 <nvs_flash_block_cmp>
		if (rc) {
   265e2:	2800      	cmp	r0, #0
   265e4:	d1f0      	bne.n	265c8 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   265e6:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   265ea:	4446      	add	r6, r8
   265ec:	e7ea      	b.n	265c4 <nvs_flash_cmp_const+0x20>

000265ee <nvs_flash_erase_sector>:
{
   265ee:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   265f0:	8982      	ldrh	r2, [r0, #12]
   265f2:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   265f4:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   265f6:	0c09      	lsrs	r1, r1, #16
{
   265f8:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   265fa:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   265fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   265fe:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   26602:	6883      	ldr	r3, [r0, #8]
   26604:	689b      	ldr	r3, [r3, #8]
   26606:	4798      	blx	r3
	if (rc) {
   26608:	b950      	cbnz	r0, 26620 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2660a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2660c:	89a3      	ldrh	r3, [r4, #12]
   2660e:	7912      	ldrb	r2, [r2, #4]
   26610:	4629      	mov	r1, r5
   26612:	4620      	mov	r0, r4
   26614:	f7ff ffc6 	bl	265a4 <nvs_flash_cmp_const>
		rc = -ENXIO;
   26618:	2800      	cmp	r0, #0
   2661a:	bf18      	it	ne
   2661c:	f06f 0005 	mvnne.w	r0, #5
}
   26620:	bd38      	pop	{r3, r4, r5, pc}

00026622 <nvs_ate_crc8_update>:
{
   26622:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26624:	4601      	mov	r1, r0
{
   26626:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26628:	2207      	movs	r2, #7
   2662a:	20ff      	movs	r0, #255	; 0xff
   2662c:	f7eb fcb2 	bl	11f94 <crc8_ccitt>
	entry->crc8 = crc8;
   26630:	71e0      	strb	r0, [r4, #7]
}
   26632:	bd10      	pop	{r4, pc}

00026634 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   26634:	680b      	ldr	r3, [r1, #0]
   26636:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2663a:	0c1a      	lsrs	r2, r3, #16
   2663c:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   26640:	bf08      	it	eq
   26642:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   26646:	600b      	str	r3, [r1, #0]
}
   26648:	4770      	bx	lr

0002664a <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2664a:	7803      	ldrb	r3, [r0, #0]
   2664c:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2664e:	bf81      	itttt	hi
   26650:	f101 31ff 	addhi.w	r1, r1, #4294967295
   26654:	18c9      	addhi	r1, r1, r3
   26656:	425b      	neghi	r3, r3
   26658:	4019      	andhi	r1, r3
}
   2665a:	4608      	mov	r0, r1
   2665c:	4770      	bx	lr

0002665e <nvs_ate_valid>:
{
   2665e:	b570      	push	{r4, r5, r6, lr}
   26660:	460c      	mov	r4, r1
   26662:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26664:	2108      	movs	r1, #8
   26666:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   26668:	f7ff ffef 	bl	2664a <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2666c:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2666e:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   26670:	4621      	mov	r1, r4
   26672:	20ff      	movs	r0, #255	; 0xff
   26674:	f7eb fc8e 	bl	11f94 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   26678:	79e3      	ldrb	r3, [r4, #7]
   2667a:	4283      	cmp	r3, r0
   2667c:	d107      	bne.n	2668e <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2667e:	89a8      	ldrh	r0, [r5, #12]
   26680:	8863      	ldrh	r3, [r4, #2]
   26682:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   26684:	4283      	cmp	r3, r0
   26686:	bf2c      	ite	cs
   26688:	2000      	movcs	r0, #0
   2668a:	2001      	movcc	r0, #1
}
   2668c:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2668e:	2000      	movs	r0, #0
   26690:	e7fc      	b.n	2668c <nvs_ate_valid+0x2e>

00026692 <nvs_close_ate_valid>:
{
   26692:	b538      	push	{r3, r4, r5, lr}
   26694:	4605      	mov	r5, r0
   26696:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   26698:	f7ff ffe1 	bl	2665e <nvs_ate_valid>
   2669c:	b1a0      	cbz	r0, 266c8 <nvs_close_ate_valid+0x36>
   2669e:	88a0      	ldrh	r0, [r4, #4]
   266a0:	b998      	cbnz	r0, 266ca <nvs_close_ate_valid+0x38>
   266a2:	8822      	ldrh	r2, [r4, #0]
   266a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   266a8:	429a      	cmp	r2, r3
   266aa:	d10d      	bne.n	266c8 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   266ac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   266ae:	2108      	movs	r1, #8
   266b0:	f7ff ffcb 	bl	2664a <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   266b4:	8862      	ldrh	r2, [r4, #2]
   266b6:	89ab      	ldrh	r3, [r5, #12]
   266b8:	1a9b      	subs	r3, r3, r2
   266ba:	fbb3 f2f0 	udiv	r2, r3, r0
   266be:	fb02 3010 	mls	r0, r2, r0, r3
   266c2:	fab0 f080 	clz	r0, r0
   266c6:	0940      	lsrs	r0, r0, #5
}
   266c8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   266ca:	2000      	movs	r0, #0
   266cc:	e7fc      	b.n	266c8 <nvs_close_ate_valid+0x36>

000266ce <nvs_prev_ate>:
{
   266ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   266d0:	4605      	mov	r5, r0
   266d2:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   266d4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   266d6:	2108      	movs	r1, #8
   266d8:	f7ff ffb7 	bl	2664a <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   266dc:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   266de:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   266e0:	2308      	movs	r3, #8
   266e2:	4628      	mov	r0, r5
   266e4:	f7ff ff26 	bl	26534 <nvs_flash_rd>
	if (rc) {
   266e8:	4604      	mov	r4, r0
   266ea:	2800      	cmp	r0, #0
   266ec:	d138      	bne.n	26760 <nvs_prev_ate+0x92>
	*addr += ate_size;
   266ee:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   266f0:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   266f2:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   266f4:	b29a      	uxth	r2, r3
   266f6:	1bc7      	subs	r7, r0, r7
   266f8:	42ba      	cmp	r2, r7
	*addr += ate_size;
   266fa:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   266fc:	d130      	bne.n	26760 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   266fe:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   26700:	bf03      	ittte	eq
   26702:	89e9      	ldrheq	r1, [r5, #14]
   26704:	f101 31ff 	addeq.w	r1, r1, #4294967295
   26708:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   2670c:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   26710:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26712:	2308      	movs	r3, #8
   26714:	466a      	mov	r2, sp
   26716:	4628      	mov	r0, r5
   26718:	f7ff ff0c 	bl	26534 <nvs_flash_rd>
	if (rc) {
   2671c:	4604      	mov	r4, r0
   2671e:	b9f8      	cbnz	r0, 26760 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   26720:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   26722:	466a      	mov	r2, sp
   26724:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   26726:	4603      	mov	r3, r0
		if (data8[i] != value) {
   26728:	f812 0b01 	ldrb.w	r0, [r2], #1
   2672c:	4281      	cmp	r1, r0
   2672e:	d10c      	bne.n	2674a <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   26730:	3301      	adds	r3, #1
   26732:	2b08      	cmp	r3, #8
   26734:	d1f8      	bne.n	26728 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   26736:	686b      	ldr	r3, [r5, #4]
   26738:	e005      	b.n	26746 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   2673a:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   2673c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   26740:	0c1b      	lsrs	r3, r3, #16
   26742:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   26744:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   26746:	6033      	str	r3, [r6, #0]
		return 0;
   26748:	e00a      	b.n	26760 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2674a:	4669      	mov	r1, sp
   2674c:	4628      	mov	r0, r5
   2674e:	f7ff ffa0 	bl	26692 <nvs_close_ate_valid>
   26752:	2800      	cmp	r0, #0
   26754:	d1f1      	bne.n	2673a <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   26756:	4631      	mov	r1, r6
   26758:	4628      	mov	r0, r5
   2675a:	f7ec fc57 	bl	1300c <nvs_recover_last_ate>
   2675e:	4604      	mov	r4, r0
}
   26760:	4620      	mov	r0, r4
   26762:	b003      	add	sp, #12
   26764:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026766 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   26766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2676a:	8985      	ldrh	r5, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2676c:	4607      	mov	r7, r0
	offset += addr & ADDR_OFFS_MASK;
   2676e:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   26770:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   26772:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   26774:	fa10 f181 	uxtah	r1, r0, r1
   26778:	fb03 1505 	mla	r5, r3, r5, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2677e:	681e      	ldr	r6, [r3, #0]
   26780:	4276      	negs	r6, r6
	if (blen > 0) {
   26782:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   26784:	b089      	sub	sp, #36	; 0x24
   26786:	4690      	mov	r8, r2
	if (blen > 0) {
   26788:	d00a      	beq.n	267a0 <nvs_flash_al_wrt.part.0+0x3a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2678a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2678c:	6883      	ldr	r3, [r0, #8]
   2678e:	4629      	mov	r1, r5
   26790:	f8d3 9004 	ldr.w	r9, [r3, #4]
   26794:	4633      	mov	r3, r6
   26796:	47c8      	blx	r9
		if (rc) {
   26798:	b9c0      	cbnz	r0, 267cc <nvs_flash_al_wrt.part.0+0x66>
		len -= blen;
   2679a:	1ba4      	subs	r4, r4, r6
		offset += blen;
   2679c:	4435      	add	r5, r6
		data8 += blen;
   2679e:	44b0      	add	r8, r6
	if (len) {
   267a0:	b1bc      	cbz	r4, 267d2 <nvs_flash_al_wrt.part.0+0x6c>
		memcpy(buf, data8, len);
   267a2:	4622      	mov	r2, r4
   267a4:	4641      	mov	r1, r8
   267a6:	4668      	mov	r0, sp
   267a8:	f000 fd3d 	bl	27226 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   267ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   267ae:	681a      	ldr	r2, [r3, #0]
   267b0:	7919      	ldrb	r1, [r3, #4]
   267b2:	1b12      	subs	r2, r2, r4
   267b4:	eb0d 0004 	add.w	r0, sp, r4
   267b8:	f000 fd40 	bl	2723c <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   267bc:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   267c0:	681b      	ldr	r3, [r3, #0]
   267c2:	6882      	ldr	r2, [r0, #8]
   267c4:	4629      	mov	r1, r5
   267c6:	6854      	ldr	r4, [r2, #4]
   267c8:	466a      	mov	r2, sp
   267ca:	47a0      	blx	r4
}
   267cc:	b009      	add	sp, #36	; 0x24
   267ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
end:
   267d2:	4620      	mov	r0, r4
   267d4:	e7fa      	b.n	267cc <nvs_flash_al_wrt.part.0+0x66>

000267d6 <nvs_flash_data_wrt>:
{
   267d6:	b538      	push	{r3, r4, r5, lr}
   267d8:	4604      	mov	r4, r0
	if (!len) {
   267da:	4615      	mov	r5, r2
   267dc:	b12a      	cbz	r2, 267ea <nvs_flash_data_wrt+0x14>
   267de:	4613      	mov	r3, r2
   267e0:	460a      	mov	r2, r1
   267e2:	6881      	ldr	r1, [r0, #8]
   267e4:	f7ff ffbf 	bl	26766 <nvs_flash_al_wrt.part.0>
   267e8:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   267ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   267ec:	4629      	mov	r1, r5
   267ee:	f7ff ff2c 	bl	2664a <nvs_al_size.isra.0>
   267f2:	68a3      	ldr	r3, [r4, #8]
   267f4:	4403      	add	r3, r0
   267f6:	60a3      	str	r3, [r4, #8]
}
   267f8:	4610      	mov	r0, r2
   267fa:	bd38      	pop	{r3, r4, r5, pc}

000267fc <nvs_flash_ate_wrt>:
{
   267fc:	b510      	push	{r4, lr}
   267fe:	460a      	mov	r2, r1
	if (!len) {
   26800:	2308      	movs	r3, #8
   26802:	6841      	ldr	r1, [r0, #4]
{
   26804:	4604      	mov	r4, r0
   26806:	f7ff ffae 	bl	26766 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2680a:	2108      	movs	r1, #8
   2680c:	4602      	mov	r2, r0
   2680e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   26810:	f7ff ff1b 	bl	2664a <nvs_al_size.isra.0>
   26814:	6863      	ldr	r3, [r4, #4]
   26816:	1a1b      	subs	r3, r3, r0
   26818:	6063      	str	r3, [r4, #4]
}
   2681a:	4610      	mov	r0, r2
   2681c:	bd10      	pop	{r4, pc}

0002681e <nvs_add_gc_done_ate>:
{
   2681e:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   26820:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26824:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   26828:	2300      	movs	r3, #0
{
   2682a:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2682c:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   26830:	6883      	ldr	r3, [r0, #8]
   26832:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   26836:	4668      	mov	r0, sp
   26838:	f7ff fef3 	bl	26622 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2683c:	4669      	mov	r1, sp
   2683e:	4620      	mov	r0, r4
   26840:	f7ff ffdc 	bl	267fc <nvs_flash_ate_wrt>
}
   26844:	b002      	add	sp, #8
   26846:	bd10      	pop	{r4, pc}

00026848 <nvs_gc>:
{
   26848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2684c:	4604      	mov	r4, r0
   2684e:	b093      	sub	sp, #76	; 0x4c
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26850:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   26852:	2108      	movs	r1, #8
   26854:	f7ff fef9 	bl	2664a <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   26858:	6863      	ldr	r3, [r4, #4]
   2685a:	0c1b      	lsrs	r3, r3, #16
   2685c:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2685e:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   26860:	a901      	add	r1, sp, #4
   26862:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   26864:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
   26866:	f7ff fee5 	bl	26634 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2686a:	9b01      	ldr	r3, [sp, #4]
   2686c:	89a1      	ldrh	r1, [r4, #12]
   2686e:	4419      	add	r1, r3
   26870:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26872:	2308      	movs	r3, #8
   26874:	aa04      	add	r2, sp, #16
   26876:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   26878:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2687a:	f7ff fe5b 	bl	26534 <nvs_flash_rd>
	if (rc < 0) {
   2687e:	2800      	cmp	r0, #0
   26880:	f2c0 8094 	blt.w	269ac <nvs_gc+0x164>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   26884:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26886:	aa04      	add	r2, sp, #16
   26888:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2688a:	2300      	movs	r3, #0
		if (data8[i] != value) {
   2688c:	f812 0b01 	ldrb.w	r0, [r2], #1
   26890:	4281      	cmp	r1, r0
   26892:	d17c      	bne.n	2698e <nvs_gc+0x146>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   26894:	3301      	adds	r3, #1
   26896:	2b08      	cmp	r3, #8
   26898:	d1f8      	bne.n	2688c <nvs_gc+0x44>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2689a:	68a0      	ldr	r0, [r4, #8]
   2689c:	6863      	ldr	r3, [r4, #4]
   2689e:	4428      	add	r0, r5
   268a0:	4283      	cmp	r3, r0
   268a2:	d26e      	bcs.n	26982 <nvs_gc+0x13a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   268a4:	9901      	ldr	r1, [sp, #4]
   268a6:	4620      	mov	r0, r4
   268a8:	f7ff fea1 	bl	265ee <nvs_flash_erase_sector>
	if (rc) {
   268ac:	e07e      	b.n	269ac <nvs_gc+0x164>
		gc_addr &= ADDR_SECT_MASK;
   268ae:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
   268b0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
   268b4:	0c1b      	lsrs	r3, r3, #16
   268b6:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   268b8:	4413      	add	r3, r2
   268ba:	9302      	str	r3, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   268bc:	aa06      	add	r2, sp, #24
   268be:	a902      	add	r1, sp, #8
   268c0:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   268c2:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   268c6:	f7ff ff02 	bl	266ce <nvs_prev_ate>
		if (rc) {
   268ca:	2800      	cmp	r0, #0
   268cc:	d16e      	bne.n	269ac <nvs_gc+0x164>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   268ce:	a906      	add	r1, sp, #24
   268d0:	4620      	mov	r0, r4
   268d2:	f7ff fec4 	bl	2665e <nvs_ate_valid>
   268d6:	2800      	cmp	r0, #0
   268d8:	d034      	beq.n	26944 <nvs_gc+0xfc>
		wlk_addr = fs->ate_wra;
   268da:	6863      	ldr	r3, [r4, #4]
   268dc:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   268de:	aa08      	add	r2, sp, #32
   268e0:	a903      	add	r1, sp, #12
   268e2:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   268e4:	9e03      	ldr	r6, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   268e6:	f7ff fef2 	bl	266ce <nvs_prev_ate>
			if (rc) {
   268ea:	2800      	cmp	r0, #0
   268ec:	d15e      	bne.n	269ac <nvs_gc+0x164>
			if ((wlk_ate.id == gc_ate.id) &&
   268ee:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   268f2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   268f6:	429a      	cmp	r2, r3
   268f8:	d027      	beq.n	2694a <nvs_gc+0x102>
		} while (wlk_addr != fs->ate_wra);
   268fa:	6862      	ldr	r2, [r4, #4]
   268fc:	9b03      	ldr	r3, [sp, #12]
   268fe:	429a      	cmp	r2, r3
   26900:	d1ed      	bne.n	268de <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   26902:	4556      	cmp	r6, sl
   26904:	d11e      	bne.n	26944 <nvs_gc+0xfc>
   26906:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2690a:	b1db      	cbz	r3, 26944 <nvs_gc+0xfc>
			data_addr += gc_ate.offset;
   2690c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   26910:	ea4f 471a 	mov.w	r7, sl, lsr #16
   26914:	043f      	lsls	r7, r7, #16
			data_addr += gc_ate.offset;
   26916:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   26918:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2691a:	68a3      	ldr	r3, [r4, #8]
   2691c:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   26920:	f7ff fe7f 	bl	26622 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   26924:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   26926:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2692a:	681e      	ldr	r6, [r3, #0]
   2692c:	4276      	negs	r6, r6
	block_size =
   2692e:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   26932:	f1b8 0f00 	cmp.w	r8, #0
   26936:	d10f      	bne.n	26958 <nvs_gc+0x110>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   26938:	a906      	add	r1, sp, #24
   2693a:	4620      	mov	r0, r4
   2693c:	f7ff ff5e 	bl	267fc <nvs_flash_ate_wrt>
			if (rc) {
   26940:	2800      	cmp	r0, #0
   26942:	d133      	bne.n	269ac <nvs_gc+0x164>
	} while (gc_prev_addr != stop_addr);
   26944:	45ca      	cmp	sl, r9
   26946:	d1b9      	bne.n	268bc <nvs_gc+0x74>
gc_done:
   26948:	e7a7      	b.n	2689a <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2694a:	a908      	add	r1, sp, #32
   2694c:	4620      	mov	r0, r4
   2694e:	f7ff fe86 	bl	2665e <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   26952:	2800      	cmp	r0, #0
   26954:	d0d1      	beq.n	268fa <nvs_gc+0xb2>
   26956:	e7d4      	b.n	26902 <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
   26958:	4546      	cmp	r6, r8
   2695a:	46b3      	mov	fp, r6
   2695c:	bf28      	it	cs
   2695e:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   26960:	465b      	mov	r3, fp
   26962:	aa0a      	add	r2, sp, #40	; 0x28
   26964:	4639      	mov	r1, r7
   26966:	4620      	mov	r0, r4
   26968:	f7ff fde4 	bl	26534 <nvs_flash_rd>
		if (rc) {
   2696c:	b9f0      	cbnz	r0, 269ac <nvs_gc+0x164>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   2696e:	465a      	mov	r2, fp
   26970:	a90a      	add	r1, sp, #40	; 0x28
   26972:	4620      	mov	r0, r4
   26974:	f7ff ff2f 	bl	267d6 <nvs_flash_data_wrt>
		if (rc) {
   26978:	b9c0      	cbnz	r0, 269ac <nvs_gc+0x164>
		len -= bytes_to_copy;
   2697a:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   2697e:	445f      	add	r7, fp
   26980:	e7d7      	b.n	26932 <nvs_gc+0xea>
		rc = nvs_add_gc_done_ate(fs);
   26982:	4620      	mov	r0, r4
   26984:	f7ff ff4b 	bl	2681e <nvs_add_gc_done_ate>
		if (rc) {
   26988:	2800      	cmp	r0, #0
   2698a:	d08b      	beq.n	268a4 <nvs_gc+0x5c>
   2698c:	e00e      	b.n	269ac <nvs_gc+0x164>
	stop_addr = gc_addr - ate_size;
   2698e:	9b02      	ldr	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   26990:	a904      	add	r1, sp, #16
   26992:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   26994:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   26998:	f7ff fe7b 	bl	26692 <nvs_close_ate_valid>
   2699c:	2800      	cmp	r0, #0
   2699e:	d186      	bne.n	268ae <nvs_gc+0x66>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   269a0:	a902      	add	r1, sp, #8
   269a2:	4620      	mov	r0, r4
   269a4:	f7ec fb32 	bl	1300c <nvs_recover_last_ate>
		if (rc) {
   269a8:	2800      	cmp	r0, #0
   269aa:	d087      	beq.n	268bc <nvs_gc+0x74>
}
   269ac:	b013      	add	sp, #76	; 0x4c
   269ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000269b2 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   269b2:	2300      	movs	r3, #0
   269b4:	461a      	mov	r2, r3
   269b6:	f7ec bced 	b.w	13394 <nvs_write>

000269ba <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   269ba:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   269bc:	2400      	movs	r4, #0
   269be:	9400      	str	r4, [sp, #0]
   269c0:	f7ec fdb2 	bl	13528 <nvs_read_hist>
	return rc;
}
   269c4:	b002      	add	sp, #8
   269c6:	bd10      	pop	{r4, pc}

000269c8 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   269c8:	4770      	bx	lr

000269ca <get_sectors_cb>:
{
   269ca:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   269cc:	6802      	ldr	r2, [r0, #0]
   269ce:	684c      	ldr	r4, [r1, #4]
   269d0:	42a2      	cmp	r2, r4
   269d2:	d316      	bcc.n	26a02 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   269d4:	688b      	ldr	r3, [r1, #8]
   269d6:	4423      	add	r3, r4
   269d8:	429a      	cmp	r2, r3
   269da:	d206      	bcs.n	269ea <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   269dc:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   269e0:	42ab      	cmp	r3, r5
   269e2:	d304      	bcc.n	269ee <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   269e4:	f06f 030b 	mvn.w	r3, #11
   269e8:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   269ea:	2000      	movs	r0, #0
   269ec:	e00a      	b.n	26a04 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   269ee:	68cd      	ldr	r5, [r1, #12]
   269f0:	1b12      	subs	r2, r2, r4
   269f2:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   269f6:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   269fa:	6842      	ldr	r2, [r0, #4]
   269fc:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   269fe:	3301      	adds	r3, #1
   26a00:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   26a02:	2001      	movs	r0, #1
}
   26a04:	bd70      	pop	{r4, r5, r6, pc}

00026a06 <settings_load>:
	return settings_load_subtree(NULL);
   26a06:	2000      	movs	r0, #0
   26a08:	f7ec be7e 	b.w	13708 <settings_load_subtree>

00026a0c <settings_delete>:
	return settings_save_one(name, NULL, 0);
   26a0c:	2200      	movs	r2, #0
   26a0e:	4611      	mov	r1, r2
   26a10:	f7ec be40 	b.w	13694 <settings_save_one>

00026a14 <settings_name_steq>:
{
   26a14:	4603      	mov	r3, r0
   26a16:	b530      	push	{r4, r5, lr}
   26a18:	4608      	mov	r0, r1
	if (next) {
   26a1a:	b10a      	cbz	r2, 26a20 <settings_name_steq+0xc>
		*next = NULL;
   26a1c:	2100      	movs	r1, #0
   26a1e:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   26a20:	b163      	cbz	r3, 26a3c <settings_name_steq+0x28>
   26a22:	b190      	cbz	r0, 26a4a <settings_name_steq+0x36>
   26a24:	1e41      	subs	r1, r0, #1
   26a26:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   26a28:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   26a2c:	4604      	mov	r4, r0
   26a2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   26a32:	b15d      	cbz	r5, 26a4c <settings_name_steq+0x38>
   26a34:	429d      	cmp	r5, r3
   26a36:	d101      	bne.n	26a3c <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   26a38:	2d3d      	cmp	r5, #61	; 0x3d
   26a3a:	d1f5      	bne.n	26a28 <settings_name_steq+0x14>
	return 0;
   26a3c:	2000      	movs	r0, #0
   26a3e:	e004      	b.n	26a4a <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   26a40:	2b3d      	cmp	r3, #61	; 0x3d
   26a42:	d008      	beq.n	26a56 <settings_name_steq+0x42>
   26a44:	fab3 f083 	clz	r0, r3
   26a48:	0940      	lsrs	r0, r0, #5
}
   26a4a:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   26a4c:	2b2f      	cmp	r3, #47	; 0x2f
   26a4e:	d1f7      	bne.n	26a40 <settings_name_steq+0x2c>
		if (next) {
   26a50:	b10a      	cbz	r2, 26a56 <settings_name_steq+0x42>
			*next = name + 1;
   26a52:	3401      	adds	r4, #1
   26a54:	6014      	str	r4, [r2, #0]
		return 1;
   26a56:	2001      	movs	r0, #1
   26a58:	e7f7      	b.n	26a4a <settings_name_steq+0x36>

00026a5a <settings_name_next>:
{
   26a5a:	b530      	push	{r4, r5, lr}
   26a5c:	4603      	mov	r3, r0
	if (next) {
   26a5e:	b109      	cbz	r1, 26a64 <settings_name_next+0xa>
		*next = NULL;
   26a60:	2200      	movs	r2, #0
   26a62:	600a      	str	r2, [r1, #0]
	if (!name) {
   26a64:	b16b      	cbz	r3, 26a82 <settings_name_next+0x28>
   26a66:	461a      	mov	r2, r3
   26a68:	4614      	mov	r4, r2
   26a6a:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   26a6c:	f812 5b01 	ldrb.w	r5, [r2], #1
   26a70:	b135      	cbz	r5, 26a80 <settings_name_next+0x26>
   26a72:	2d3d      	cmp	r5, #61	; 0x3d
   26a74:	d004      	beq.n	26a80 <settings_name_next+0x26>
   26a76:	2d2f      	cmp	r5, #47	; 0x2f
   26a78:	d1f6      	bne.n	26a68 <settings_name_next+0xe>
		if (next) {
   26a7a:	b109      	cbz	r1, 26a80 <settings_name_next+0x26>
			*next = name + 1;
   26a7c:	3401      	adds	r4, #1
   26a7e:	600c      	str	r4, [r1, #0]
}
   26a80:	bd30      	pop	{r4, r5, pc}
		return 0;
   26a82:	4618      	mov	r0, r3
   26a84:	e7fc      	b.n	26a80 <settings_name_next+0x26>

00026a86 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = (struct settings_nvs *)cs;

	return &cf->cf_nvs;
}
   26a86:	3008      	adds	r0, #8
   26a88:	4770      	bx	lr

00026a8a <settings_nvs_read_fn>:
{
   26a8a:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   26a8c:	4613      	mov	r3, r2
{
   26a8e:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   26a90:	460a      	mov	r2, r1
   26a92:	8881      	ldrh	r1, [r0, #4]
   26a94:	6800      	ldr	r0, [r0, #0]
   26a96:	f7ff ff90 	bl	269ba <nvs_read>
}
   26a9a:	42a0      	cmp	r0, r4
   26a9c:	bfa8      	it	ge
   26a9e:	4620      	movge	r0, r4
   26aa0:	bd10      	pop	{r4, pc}

00026aa2 <settings_nvs_save>:
{
   26aa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26aa6:	b097      	sub	sp, #92	; 0x5c
   26aa8:	4604      	mov	r4, r0
   26aaa:	9201      	str	r2, [sp, #4]
   26aac:	469b      	mov	fp, r3
	if (!name) {
   26aae:	4689      	mov	r9, r1
   26ab0:	2900      	cmp	r1, #0
   26ab2:	d069      	beq.n	26b88 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   26ab4:	b1da      	cbz	r2, 26aee <settings_nvs_save+0x4c>
   26ab6:	fabb f78b 	clz	r7, fp
   26aba:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   26abc:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   26abe:	3501      	adds	r5, #1
   26ac0:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   26ac2:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   26ac4:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   26ac8:	1e6e      	subs	r6, r5, #1
   26aca:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   26acc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   26ad0:	d02e      	beq.n	26b30 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   26ad2:	234a      	movs	r3, #74	; 0x4a
   26ad4:	aa03      	add	r2, sp, #12
   26ad6:	4631      	mov	r1, r6
   26ad8:	4650      	mov	r0, sl
   26ada:	f7ff ff6e 	bl	269ba <nvs_read>
		if (rc < 0) {
   26ade:	2800      	cmp	r0, #0
   26ae0:	da07      	bge.n	26af2 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   26ae2:	f110 0f02 	cmn.w	r0, #2
   26ae6:	bf08      	it	eq
   26ae8:	46b0      	moveq	r8, r6
   26aea:	4635      	mov	r5, r6
   26aec:	e7ec      	b.n	26ac8 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   26aee:	2701      	movs	r7, #1
   26af0:	e7e4      	b.n	26abc <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   26af2:	ab16      	add	r3, sp, #88	; 0x58
   26af4:	4418      	add	r0, r3
   26af6:	2300      	movs	r3, #0
   26af8:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   26afc:	a903      	add	r1, sp, #12
   26afe:	4648      	mov	r0, r9
   26b00:	f000 fb4b 	bl	2719a <strcmp>
   26b04:	2800      	cmp	r0, #0
   26b06:	d1f0      	bne.n	26aea <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   26b08:	2f00      	cmp	r7, #0
   26b0a:	d03b      	beq.n	26b84 <settings_nvs_save+0xe2>
   26b0c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   26b0e:	42b3      	cmp	r3, r6
   26b10:	d142      	bne.n	26b98 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   26b12:	4622      	mov	r2, r4
   26b14:	1e73      	subs	r3, r6, #1
   26b16:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   26b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   26b1e:	2302      	movs	r3, #2
   26b20:	4650      	mov	r0, sl
   26b22:	f7ec fc37 	bl	13394 <nvs_write>
			if (rc < 0) {
   26b26:	2800      	cmp	r0, #0
   26b28:	da36      	bge.n	26b98 <settings_nvs_save+0xf6>
}
   26b2a:	b017      	add	sp, #92	; 0x5c
   26b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   26b30:	bb6f      	cbnz	r7, 26b8e <settings_nvs_save+0xec>
	write_name = true;
   26b32:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   26b34:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   26b38:	d02b      	beq.n	26b92 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   26b3a:	f104 0508 	add.w	r5, r4, #8
   26b3e:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   26b42:	9a01      	ldr	r2, [sp, #4]
   26b44:	465b      	mov	r3, fp
   26b46:	b289      	uxth	r1, r1
   26b48:	4628      	mov	r0, r5
   26b4a:	f7ec fc23 	bl	13394 <nvs_write>
	if (rc < 0) {
   26b4e:	2800      	cmp	r0, #0
   26b50:	dbeb      	blt.n	26b2a <settings_nvs_save+0x88>
	if (write_name) {
   26b52:	b157      	cbz	r7, 26b6a <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   26b54:	4648      	mov	r0, r9
   26b56:	f000 fb10 	bl	2717a <strlen>
   26b5a:	464a      	mov	r2, r9
   26b5c:	4603      	mov	r3, r0
   26b5e:	4641      	mov	r1, r8
   26b60:	4628      	mov	r0, r5
   26b62:	f7ec fc17 	bl	13394 <nvs_write>
		if (rc < 0) {
   26b66:	2800      	cmp	r0, #0
   26b68:	dbdf      	blt.n	26b2a <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   26b6a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   26b6c:	4543      	cmp	r3, r8
   26b6e:	d220      	bcs.n	26bb2 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   26b70:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   26b72:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   26b74:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   26b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   26b7c:	4628      	mov	r0, r5
   26b7e:	f7ec fc09 	bl	13394 <nvs_write>
   26b82:	e016      	b.n	26bb2 <settings_nvs_save+0x110>
   26b84:	46b0      	mov	r8, r6
   26b86:	e7d5      	b.n	26b34 <settings_nvs_save+0x92>
		return -EINVAL;
   26b88:	f06f 0015 	mvn.w	r0, #21
   26b8c:	e7cd      	b.n	26b2a <settings_nvs_save+0x88>
		return 0;
   26b8e:	2000      	movs	r0, #0
   26b90:	e7cb      	b.n	26b2a <settings_nvs_save+0x88>
		return -ENOMEM;
   26b92:	f06f 000b 	mvn.w	r0, #11
   26b96:	e7c8      	b.n	26b2a <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   26b98:	4631      	mov	r1, r6
   26b9a:	4650      	mov	r0, sl
   26b9c:	f7ff ff09 	bl	269b2 <nvs_delete>
			if (rc >= 0) {
   26ba0:	2800      	cmp	r0, #0
   26ba2:	dbc2      	blt.n	26b2a <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   26ba4:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   26ba8:	313f      	adds	r1, #63	; 0x3f
   26baa:	b289      	uxth	r1, r1
   26bac:	4650      	mov	r0, sl
   26bae:	f7ff ff00 	bl	269b2 <nvs_delete>
	if (rc < 0) {
   26bb2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   26bb6:	e7b8      	b.n	26b2a <settings_nvs_save+0x88>

00026bb8 <settings_nvs_backend_init>:
	cf->cf_nvs.flash_device = cf->flash_dev;
   26bb8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   26bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26bbc:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = cf->flash_dev;
   26bbe:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   26bc0:	b1c3      	cbz	r3, 26bf4 <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   26bc2:	f100 0608 	add.w	r6, r0, #8
   26bc6:	4630      	mov	r0, r6
   26bc8:	f7ec fa52 	bl	13070 <nvs_mount>
	if (rc) {
   26bcc:	4605      	mov	r5, r0
   26bce:	b970      	cbnz	r0, 26bee <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   26bd0:	2302      	movs	r3, #2
   26bd2:	f10d 0206 	add.w	r2, sp, #6
   26bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   26bda:	4630      	mov	r0, r6
   26bdc:	f7ff feed 	bl	269ba <nvs_read>
	if (rc < 0) {
   26be0:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   26be2:	bfac      	ite	ge
   26be4:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   26be8:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   26bec:	8723      	strh	r3, [r4, #56]	; 0x38
}
   26bee:	4628      	mov	r0, r5
   26bf0:	b002      	add	sp, #8
   26bf2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   26bf4:	f06f 0512 	mvn.w	r5, #18
   26bf8:	e7f9      	b.n	26bee <settings_nvs_backend_init+0x36>

00026bfa <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   26bfa:	b538      	push	{r3, r4, r5, lr}
   26bfc:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   26bfe:	42ab      	cmp	r3, r5
{
   26c00:	4611      	mov	r1, r2
   26c02:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   26c04:	d804      	bhi.n	26c10 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   26c06:	461a      	mov	r2, r3
   26c08:	f000 fb0d 	bl	27226 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   26c0c:	4620      	mov	r0, r4
   26c0e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   26c10:	2400      	movs	r4, #0
   26c12:	e7fb      	b.n	26c0c <_copy+0x12>

00026c14 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   26c14:	f000 bb12 	b.w	2723c <memset>

00026c18 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   26c18:	09c3      	lsrs	r3, r0, #7
   26c1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26c1e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   26c22:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   26c26:	b2c0      	uxtb	r0, r0
   26c28:	4770      	bx	lr

00026c2a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   26c2a:	78cb      	ldrb	r3, [r1, #3]
   26c2c:	7802      	ldrb	r2, [r0, #0]
   26c2e:	4053      	eors	r3, r2
   26c30:	7003      	strb	r3, [r0, #0]
   26c32:	884b      	ldrh	r3, [r1, #2]
   26c34:	7842      	ldrb	r2, [r0, #1]
   26c36:	4053      	eors	r3, r2
   26c38:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   26c3a:	680a      	ldr	r2, [r1, #0]
   26c3c:	7883      	ldrb	r3, [r0, #2]
   26c3e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26c42:	7083      	strb	r3, [r0, #2]
   26c44:	680a      	ldr	r2, [r1, #0]
   26c46:	78c3      	ldrb	r3, [r0, #3]
   26c48:	4053      	eors	r3, r2
   26c4a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   26c4c:	79cb      	ldrb	r3, [r1, #7]
   26c4e:	7902      	ldrb	r2, [r0, #4]
   26c50:	4053      	eors	r3, r2
   26c52:	7103      	strb	r3, [r0, #4]
   26c54:	88cb      	ldrh	r3, [r1, #6]
   26c56:	7942      	ldrb	r2, [r0, #5]
   26c58:	4053      	eors	r3, r2
   26c5a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   26c5c:	684a      	ldr	r2, [r1, #4]
   26c5e:	7983      	ldrb	r3, [r0, #6]
   26c60:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26c64:	7183      	strb	r3, [r0, #6]
   26c66:	684a      	ldr	r2, [r1, #4]
   26c68:	79c3      	ldrb	r3, [r0, #7]
   26c6a:	4053      	eors	r3, r2
   26c6c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   26c6e:	7acb      	ldrb	r3, [r1, #11]
   26c70:	7a02      	ldrb	r2, [r0, #8]
   26c72:	4053      	eors	r3, r2
   26c74:	7203      	strb	r3, [r0, #8]
   26c76:	7a42      	ldrb	r2, [r0, #9]
   26c78:	894b      	ldrh	r3, [r1, #10]
   26c7a:	4053      	eors	r3, r2
   26c7c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   26c7e:	688a      	ldr	r2, [r1, #8]
   26c80:	7a83      	ldrb	r3, [r0, #10]
   26c82:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26c86:	7283      	strb	r3, [r0, #10]
   26c88:	688a      	ldr	r2, [r1, #8]
   26c8a:	7ac3      	ldrb	r3, [r0, #11]
   26c8c:	4053      	eors	r3, r2
   26c8e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   26c90:	7bcb      	ldrb	r3, [r1, #15]
   26c92:	7b02      	ldrb	r2, [r0, #12]
   26c94:	4053      	eors	r3, r2
   26c96:	7303      	strb	r3, [r0, #12]
   26c98:	89cb      	ldrh	r3, [r1, #14]
   26c9a:	7b42      	ldrb	r2, [r0, #13]
   26c9c:	4053      	eors	r3, r2
   26c9e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   26ca0:	68ca      	ldr	r2, [r1, #12]
   26ca2:	7b83      	ldrb	r3, [r0, #14]
   26ca4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26ca8:	7383      	strb	r3, [r0, #14]
   26caa:	68ca      	ldr	r2, [r1, #12]
   26cac:	7bc3      	ldrb	r3, [r0, #15]
   26cae:	4053      	eors	r3, r2
   26cb0:	73c3      	strb	r3, [r0, #15]
}
   26cb2:	4770      	bx	lr

00026cb4 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   26cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   26cb6:	7802      	ldrb	r2, [r0, #0]
   26cb8:	f88d 2000 	strb.w	r2, [sp]
   26cbc:	7942      	ldrb	r2, [r0, #5]
   26cbe:	f88d 2001 	strb.w	r2, [sp, #1]
   26cc2:	7a82      	ldrb	r2, [r0, #10]
   26cc4:	f88d 2002 	strb.w	r2, [sp, #2]
   26cc8:	7bc2      	ldrb	r2, [r0, #15]
   26cca:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   26cce:	7902      	ldrb	r2, [r0, #4]
   26cd0:	f88d 2004 	strb.w	r2, [sp, #4]
   26cd4:	7a42      	ldrb	r2, [r0, #9]
   26cd6:	f88d 2005 	strb.w	r2, [sp, #5]
   26cda:	7b82      	ldrb	r2, [r0, #14]
   26cdc:	f88d 2006 	strb.w	r2, [sp, #6]
   26ce0:	78c2      	ldrb	r2, [r0, #3]
   26ce2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   26ce6:	7a02      	ldrb	r2, [r0, #8]
   26ce8:	f88d 2008 	strb.w	r2, [sp, #8]
   26cec:	7b42      	ldrb	r2, [r0, #13]
   26cee:	f88d 2009 	strb.w	r2, [sp, #9]
   26cf2:	7882      	ldrb	r2, [r0, #2]
   26cf4:	f88d 200a 	strb.w	r2, [sp, #10]
   26cf8:	79c2      	ldrb	r2, [r0, #7]
   26cfa:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   26cfe:	7b02      	ldrb	r2, [r0, #12]
   26d00:	f88d 200c 	strb.w	r2, [sp, #12]
   26d04:	7842      	ldrb	r2, [r0, #1]
   26d06:	7ac3      	ldrb	r3, [r0, #11]
   26d08:	f88d 200d 	strb.w	r2, [sp, #13]
   26d0c:	7982      	ldrb	r2, [r0, #6]
   26d0e:	f88d 200e 	strb.w	r2, [sp, #14]
   26d12:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   26d16:	2310      	movs	r3, #16
   26d18:	466a      	mov	r2, sp
   26d1a:	4619      	mov	r1, r3
   26d1c:	f7ff ff6d 	bl	26bfa <_copy>
}
   26d20:	b005      	add	sp, #20
   26d22:	f85d fb04 	ldr.w	pc, [sp], #4

00026d26 <mult_row_column>:
{
   26d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d28:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   26d2a:	7808      	ldrb	r0, [r1, #0]
{
   26d2c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   26d2e:	f7ff ff73 	bl	26c18 <_double_byte>
   26d32:	4605      	mov	r5, r0
   26d34:	7860      	ldrb	r0, [r4, #1]
   26d36:	f7ff ff6f 	bl	26c18 <_double_byte>
   26d3a:	78a2      	ldrb	r2, [r4, #2]
   26d3c:	7863      	ldrb	r3, [r4, #1]
   26d3e:	4053      	eors	r3, r2
   26d40:	78e2      	ldrb	r2, [r4, #3]
   26d42:	4053      	eors	r3, r2
   26d44:	405d      	eors	r5, r3
   26d46:	4045      	eors	r5, r0
   26d48:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   26d4a:	7860      	ldrb	r0, [r4, #1]
   26d4c:	7827      	ldrb	r7, [r4, #0]
   26d4e:	f7ff ff63 	bl	26c18 <_double_byte>
   26d52:	4605      	mov	r5, r0
   26d54:	78a0      	ldrb	r0, [r4, #2]
   26d56:	f7ff ff5f 	bl	26c18 <_double_byte>
   26d5a:	78a3      	ldrb	r3, [r4, #2]
   26d5c:	405f      	eors	r7, r3
   26d5e:	78e3      	ldrb	r3, [r4, #3]
   26d60:	405f      	eors	r7, r3
   26d62:	407d      	eors	r5, r7
   26d64:	4045      	eors	r5, r0
   26d66:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   26d68:	78a0      	ldrb	r0, [r4, #2]
   26d6a:	7865      	ldrb	r5, [r4, #1]
   26d6c:	7827      	ldrb	r7, [r4, #0]
   26d6e:	f7ff ff53 	bl	26c18 <_double_byte>
   26d72:	406f      	eors	r7, r5
   26d74:	4605      	mov	r5, r0
   26d76:	78e0      	ldrb	r0, [r4, #3]
   26d78:	f7ff ff4e 	bl	26c18 <_double_byte>
   26d7c:	78e3      	ldrb	r3, [r4, #3]
   26d7e:	405f      	eors	r7, r3
   26d80:	407d      	eors	r5, r7
   26d82:	4045      	eors	r5, r0
   26d84:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   26d86:	7820      	ldrb	r0, [r4, #0]
   26d88:	f7ff ff46 	bl	26c18 <_double_byte>
   26d8c:	7863      	ldrb	r3, [r4, #1]
   26d8e:	7825      	ldrb	r5, [r4, #0]
   26d90:	405d      	eors	r5, r3
   26d92:	78a3      	ldrb	r3, [r4, #2]
   26d94:	405d      	eors	r5, r3
   26d96:	4045      	eors	r5, r0
   26d98:	78e0      	ldrb	r0, [r4, #3]
   26d9a:	f7ff ff3d 	bl	26c18 <_double_byte>
   26d9e:	b2ed      	uxtb	r5, r5
   26da0:	4045      	eors	r5, r0
   26da2:	70f5      	strb	r5, [r6, #3]
}
   26da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026da6 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   26da6:	b570      	push	{r4, r5, r6, lr}
   26da8:	4614      	mov	r4, r2
   26daa:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   26dac:	4605      	mov	r5, r0
   26dae:	2800      	cmp	r0, #0
   26db0:	d049      	beq.n	26e46 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   26db2:	2900      	cmp	r1, #0
   26db4:	d049      	beq.n	26e4a <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   26db6:	2a00      	cmp	r2, #0
   26db8:	d049      	beq.n	26e4e <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   26dba:	2310      	movs	r3, #16
   26dbc:	460a      	mov	r2, r1
   26dbe:	4668      	mov	r0, sp
   26dc0:	4619      	mov	r1, r3
   26dc2:	f7ff ff1a 	bl	26bfa <_copy>
	add_round_key(state, s->words);
   26dc6:	4621      	mov	r1, r4
   26dc8:	4668      	mov	r0, sp
   26dca:	f7ff ff2e 	bl	26c2a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   26dce:	3410      	adds	r4, #16
   26dd0:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   26dd4:	4668      	mov	r0, sp
   26dd6:	f7ed f801 	bl	13ddc <sub_bytes>
		shift_rows(state);
   26dda:	4668      	mov	r0, sp
   26ddc:	f7ff ff6a 	bl	26cb4 <shift_rows>
	mult_row_column(t, s);
   26de0:	4669      	mov	r1, sp
   26de2:	a804      	add	r0, sp, #16
   26de4:	f7ff ff9f 	bl	26d26 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   26de8:	a901      	add	r1, sp, #4
   26dea:	a805      	add	r0, sp, #20
   26dec:	f7ff ff9b 	bl	26d26 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   26df0:	a902      	add	r1, sp, #8
   26df2:	a806      	add	r0, sp, #24
   26df4:	f7ff ff97 	bl	26d26 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   26df8:	a903      	add	r1, sp, #12
   26dfa:	a807      	add	r0, sp, #28
   26dfc:	f7ff ff93 	bl	26d26 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   26e00:	2310      	movs	r3, #16
   26e02:	4619      	mov	r1, r3
   26e04:	eb0d 0203 	add.w	r2, sp, r3
   26e08:	4668      	mov	r0, sp
   26e0a:	f7ff fef6 	bl	26bfa <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   26e0e:	4621      	mov	r1, r4
   26e10:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   26e12:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   26e14:	f7ff ff09 	bl	26c2a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   26e18:	42a6      	cmp	r6, r4
   26e1a:	d1db      	bne.n	26dd4 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   26e1c:	f7ec ffde 	bl	13ddc <sub_bytes>
	shift_rows(state);
   26e20:	4668      	mov	r0, sp
   26e22:	f7ff ff47 	bl	26cb4 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   26e26:	4631      	mov	r1, r6
   26e28:	4668      	mov	r0, sp
   26e2a:	f7ff fefe 	bl	26c2a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   26e2e:	2310      	movs	r3, #16
   26e30:	4619      	mov	r1, r3
   26e32:	466a      	mov	r2, sp
   26e34:	4628      	mov	r0, r5
   26e36:	f7ff fee0 	bl	26bfa <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   26e3a:	4668      	mov	r0, sp
   26e3c:	2210      	movs	r2, #16
   26e3e:	2100      	movs	r1, #0
   26e40:	f7ff fee8 	bl	26c14 <_set>

	return TC_CRYPTO_SUCCESS;
   26e44:	2001      	movs	r0, #1
}
   26e46:	b008      	add	sp, #32
   26e48:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   26e4a:	4608      	mov	r0, r1
   26e4c:	e7fb      	b.n	26e46 <tc_aes_encrypt+0xa0>
   26e4e:	4610      	mov	r0, r2
   26e50:	e7f9      	b.n	26e46 <tc_aes_encrypt+0xa0>

00026e52 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   26e52:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26e54:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   26e56:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26e58:	f912 3b10 	ldrsb.w	r3, [r2], #16
   26e5c:	2b00      	cmp	r3, #0
   26e5e:	bfb4      	ite	lt
   26e60:	2387      	movlt	r3, #135	; 0x87
   26e62:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   26e64:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   26e68:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   26e6c:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   26e6e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   26e72:	d002      	beq.n	26e7a <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   26e74:	7813      	ldrb	r3, [r2, #0]
   26e76:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   26e78:	e7f4      	b.n	26e64 <gf_double+0x12>
	}
}
   26e7a:	bd10      	pop	{r4, pc}

00026e7c <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   26e7c:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   26e7e:	b120      	cbz	r0, 26e8a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   26e80:	2258      	movs	r2, #88	; 0x58
   26e82:	2100      	movs	r1, #0
   26e84:	f7ff fec6 	bl	26c14 <_set>
   26e88:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   26e8a:	bd08      	pop	{r3, pc}

00026e8c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   26e8c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26e8e:	4604      	mov	r4, r0
   26e90:	b188      	cbz	r0, 26eb6 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   26e92:	2210      	movs	r2, #16
   26e94:	2100      	movs	r1, #0
   26e96:	f7ff febd 	bl	26c14 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   26e9a:	2210      	movs	r2, #16
   26e9c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26ea0:	2100      	movs	r1, #0
   26ea2:	f7ff feb7 	bl	26c14 <_set>
	s->leftover_offset = 0;
   26ea6:	2300      	movs	r3, #0
   26ea8:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   26eaa:	2200      	movs	r2, #0
   26eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   26eb0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   26eb4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   26eb6:	bd10      	pop	{r4, pc}

00026eb8 <tc_cmac_setup>:
{
   26eb8:	b570      	push	{r4, r5, r6, lr}
   26eba:	460d      	mov	r5, r1
   26ebc:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   26ebe:	4604      	mov	r4, r0
   26ec0:	b310      	cbz	r0, 26f08 <tc_cmac_setup+0x50>
   26ec2:	b311      	cbz	r1, 26f0a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   26ec4:	2258      	movs	r2, #88	; 0x58
   26ec6:	2100      	movs	r1, #0
   26ec8:	f7ff fea4 	bl	26c14 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   26ecc:	4629      	mov	r1, r5
	s->sched = sched;
   26ece:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   26ed0:	4630      	mov	r0, r6
   26ed2:	f7ec ff8f 	bl	13df4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   26ed6:	2210      	movs	r2, #16
   26ed8:	2100      	movs	r1, #0
   26eda:	4620      	mov	r0, r4
   26edc:	f7ff fe9a 	bl	26c14 <_set>
	gf_double (s->K1, s->iv);
   26ee0:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   26ee4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26ee6:	4621      	mov	r1, r4
   26ee8:	4620      	mov	r0, r4
   26eea:	f7ff ff5c 	bl	26da6 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   26eee:	4621      	mov	r1, r4
   26ef0:	4628      	mov	r0, r5
   26ef2:	f7ff ffae 	bl	26e52 <gf_double>
	gf_double (s->K2, s->K1);
   26ef6:	4629      	mov	r1, r5
   26ef8:	f104 0020 	add.w	r0, r4, #32
   26efc:	f7ff ffa9 	bl	26e52 <gf_double>
	tc_cmac_init(s);
   26f00:	4620      	mov	r0, r4
   26f02:	f7ff ffc3 	bl	26e8c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   26f06:	2001      	movs	r0, #1
}
   26f08:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   26f0a:	4608      	mov	r0, r1
   26f0c:	e7fc      	b.n	26f08 <tc_cmac_setup+0x50>

00026f0e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   26f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26f12:	460d      	mov	r5, r1
   26f14:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26f16:	4604      	mov	r4, r0
   26f18:	2800      	cmp	r0, #0
   26f1a:	d061      	beq.n	26fe0 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   26f1c:	b912      	cbnz	r2, 26f24 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   26f1e:	2001      	movs	r0, #1
}
   26f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   26f24:	2900      	cmp	r1, #0
   26f26:	d05b      	beq.n	26fe0 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   26f28:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   26f2c:	ea53 0102 	orrs.w	r1, r3, r2
   26f30:	d056      	beq.n	26fe0 <tc_cmac_update+0xd2>
	s->countdown--;
   26f32:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   26f34:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   26f38:	f142 32ff 	adc.w	r2, r2, #4294967295
   26f3c:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   26f40:	f1b8 0f00 	cmp.w	r8, #0
   26f44:	d02a      	beq.n	26f9c <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   26f46:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26f4a:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   26f4e:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26f50:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   26f52:	d208      	bcs.n	26f66 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26f54:	462a      	mov	r2, r5
   26f56:	4633      	mov	r3, r6
   26f58:	4631      	mov	r1, r6
   26f5a:	f7ff fe4e 	bl	26bfa <_copy>
			s->leftover_offset += data_length;
   26f5e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   26f60:	4432      	add	r2, r6
   26f62:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   26f64:	e7db      	b.n	26f1e <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   26f66:	463b      	mov	r3, r7
   26f68:	462a      	mov	r2, r5
   26f6a:	4639      	mov	r1, r7
   26f6c:	f7ff fe45 	bl	26bfa <_copy>
		data_length -= remaining_space;
   26f70:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   26f72:	2300      	movs	r3, #0
   26f74:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   26f76:	4446      	add	r6, r8
		data += remaining_space;
   26f78:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26f7a:	1e63      	subs	r3, r4, #1
   26f7c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   26f80:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26f84:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26f88:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   26f8a:	ea82 0200 	eor.w	r2, r2, r0
   26f8e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26f90:	d1f6      	bne.n	26f80 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26f92:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26f94:	4621      	mov	r1, r4
   26f96:	4620      	mov	r0, r4
   26f98:	f7ff ff05 	bl	26da6 <tc_aes_encrypt>
   26f9c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   26fa0:	2e10      	cmp	r6, #16
   26fa2:	d80a      	bhi.n	26fba <tc_cmac_update+0xac>
	if (data_length > 0) {
   26fa4:	2e00      	cmp	r6, #0
   26fa6:	d0ba      	beq.n	26f1e <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   26fa8:	4633      	mov	r3, r6
   26faa:	462a      	mov	r2, r5
   26fac:	4631      	mov	r1, r6
   26fae:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26fb2:	f7ff fe22 	bl	26bfa <_copy>
		s->leftover_offset = data_length;
   26fb6:	6466      	str	r6, [r4, #68]	; 0x44
   26fb8:	e7b1      	b.n	26f1e <tc_cmac_update+0x10>
   26fba:	1e63      	subs	r3, r4, #1
   26fbc:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   26fbe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26fc2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26fc6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   26fc8:	ea82 0200 	eor.w	r2, r2, r0
   26fcc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26fce:	d1f6      	bne.n	26fbe <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26fd0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26fd2:	4621      	mov	r1, r4
   26fd4:	4620      	mov	r0, r4
   26fd6:	f7ff fee6 	bl	26da6 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   26fda:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   26fdc:	3e10      	subs	r6, #16
   26fde:	e7df      	b.n	26fa0 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   26fe0:	2000      	movs	r0, #0
   26fe2:	e79d      	b.n	26f20 <tc_cmac_update+0x12>

00026fe4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   26fe4:	b570      	push	{r4, r5, r6, lr}
   26fe6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   26fe8:	4605      	mov	r5, r0
   26fea:	b1e8      	cbz	r0, 27028 <tc_cmac_final+0x44>
   26fec:	b369      	cbz	r1, 2704a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   26fee:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   26ff0:	2a10      	cmp	r2, #16
   26ff2:	d11a      	bne.n	2702a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   26ff4:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26ff6:	1e63      	subs	r3, r4, #1
   26ff8:	3901      	subs	r1, #1
   26ffa:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26ffe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27002:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   27006:	4072      	eors	r2, r6
   27008:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2700c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2700e:	ea82 0206 	eor.w	r2, r2, r6
   27012:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27014:	d1f3      	bne.n	26ffe <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   27016:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27018:	4621      	mov	r1, r4
   2701a:	4628      	mov	r0, r5
   2701c:	f7ff fec3 	bl	26da6 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   27020:	4620      	mov	r0, r4
   27022:	f7ff ff2b 	bl	26e7c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   27026:	2001      	movs	r0, #1
}
   27028:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2702a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2702e:	2100      	movs	r1, #0
   27030:	f1c2 0210 	rsb	r2, r2, #16
   27034:	4420      	add	r0, r4
   27036:	f7ff fded 	bl	26c14 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2703a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2703c:	4423      	add	r3, r4
   2703e:	2280      	movs	r2, #128	; 0x80
   27040:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   27044:	f104 0120 	add.w	r1, r4, #32
   27048:	e7d5      	b.n	26ff6 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2704a:	4608      	mov	r0, r1
   2704c:	e7ec      	b.n	27028 <tc_cmac_final+0x44>

0002704e <abort_function>:
{
   2704e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   27050:	2000      	movs	r0, #0
   27052:	f7eb ff65 	bl	12f20 <sys_reboot>

00027056 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   27056:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   27058:	6800      	ldr	r0, [r0, #0]
   2705a:	f7ed b805 	b.w	14068 <z_arm_fatal_error>

0002705e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2705e:	2100      	movs	r1, #0
   27060:	2001      	movs	r0, #1
   27062:	f7ed b801 	b.w	14068 <z_arm_fatal_error>

00027066 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   27066:	b508      	push	{r3, lr}
	handler();
   27068:	f7ed f898 	bl	1419c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2706c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   27070:	f7ed b970 	b.w	14354 <z_arm_exc_exit>

00027074 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   27074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27078:	4607      	mov	r7, r0
   2707a:	4688      	mov	r8, r1
	register const char *s = nptr;
   2707c:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   2707e:	4621      	mov	r1, r4
   27080:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   27084:	2b20      	cmp	r3, #32
   27086:	d0fa      	beq.n	2707e <strtoul+0xa>
   27088:	f1a3 0009 	sub.w	r0, r3, #9
   2708c:	2804      	cmp	r0, #4
   2708e:	d9f6      	bls.n	2707e <strtoul+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   27090:	2b2d      	cmp	r3, #45	; 0x2d
   27092:	d12f      	bne.n	270f4 <strtoul+0x80>
		neg = 1;
		c = *s++;
   27094:	784b      	ldrb	r3, [r1, #1]
   27096:	1c8c      	adds	r4, r1, #2
		neg = 1;
   27098:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2709c:	2a00      	cmp	r2, #0
   2709e:	d05e      	beq.n	2715e <strtoul+0xea>
   270a0:	2a10      	cmp	r2, #16
   270a2:	d109      	bne.n	270b8 <strtoul+0x44>
   270a4:	2b30      	cmp	r3, #48	; 0x30
   270a6:	d107      	bne.n	270b8 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   270a8:	7823      	ldrb	r3, [r4, #0]
   270aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   270ae:	2b58      	cmp	r3, #88	; 0x58
   270b0:	d150      	bne.n	27154 <strtoul+0xe0>
		c = s[1];
   270b2:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   270b4:	2210      	movs	r2, #16
		s += 2;
   270b6:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   270b8:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   270bc:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   270be:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   270c2:	fb02 fe01 	mul.w	lr, r2, r1
   270c6:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   270ca:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   270cc:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   270d0:	2d09      	cmp	r5, #9
   270d2:	d816      	bhi.n	27102 <strtoul+0x8e>
			c -= '0';
   270d4:	462b      	mov	r3, r5
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   270d6:	429a      	cmp	r2, r3
   270d8:	dd23      	ble.n	27122 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   270da:	2e00      	cmp	r6, #0
   270dc:	db1e      	blt.n	2711c <strtoul+0xa8>
   270de:	4288      	cmp	r0, r1
   270e0:	d81c      	bhi.n	2711c <strtoul+0xa8>
   270e2:	d101      	bne.n	270e8 <strtoul+0x74>
   270e4:	4573      	cmp	r3, lr
   270e6:	dc19      	bgt.n	2711c <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   270e8:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   270ec:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   270ee:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   270f2:	e7eb      	b.n	270cc <strtoul+0x58>
	} else if (c == '+') {
   270f4:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   270f6:	bf04      	itt	eq
   270f8:	784b      	ldrbeq	r3, [r1, #1]
   270fa:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   270fc:	f04f 0c00 	mov.w	ip, #0
   27100:	e7cc      	b.n	2709c <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   27102:	f043 0520 	orr.w	r5, r3, #32
   27106:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   27108:	2d19      	cmp	r5, #25
   2710a:	d80a      	bhi.n	27122 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2710c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   27110:	2d1a      	cmp	r5, #26
   27112:	bf34      	ite	cc
   27114:	2537      	movcc	r5, #55	; 0x37
   27116:	2557      	movcs	r5, #87	; 0x57
   27118:	1b5b      	subs	r3, r3, r5
   2711a:	e7dc      	b.n	270d6 <strtoul+0x62>
			any = -1;
   2711c:	f04f 36ff 	mov.w	r6, #4294967295
   27120:	e7e5      	b.n	270ee <strtoul+0x7a>
		}
	}
	if (any < 0) {
   27122:	2e00      	cmp	r6, #0
   27124:	da0a      	bge.n	2713c <strtoul+0xc8>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   27126:	f7f8 fd1f 	bl	1fb68 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2712a:	2322      	movs	r3, #34	; 0x22
   2712c:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2712e:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   27132:	f1b8 0f00 	cmp.w	r8, #0
   27136:	d109      	bne.n	2714c <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   27138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   2713c:	f1bc 0f00 	cmp.w	ip, #0
   27140:	d000      	beq.n	27144 <strtoul+0xd0>
		acc = -acc;
   27142:	4240      	negs	r0, r0
	if (endptr != NULL) {
   27144:	f1b8 0f00 	cmp.w	r8, #0
   27148:	d0f6      	beq.n	27138 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   2714a:	b106      	cbz	r6, 2714e <strtoul+0xda>
   2714c:	1e67      	subs	r7, r4, #1
   2714e:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   27152:	e7f1      	b.n	27138 <strtoul+0xc4>
	if (base == 0) {
   27154:	2330      	movs	r3, #48	; 0x30
   27156:	2a00      	cmp	r2, #0
   27158:	d1ae      	bne.n	270b8 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   2715a:	2208      	movs	r2, #8
   2715c:	e7ac      	b.n	270b8 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   2715e:	2b30      	cmp	r3, #48	; 0x30
   27160:	d0a2      	beq.n	270a8 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   27162:	220a      	movs	r2, #10
   27164:	e7a8      	b.n	270b8 <strtoul+0x44>

00027166 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   27166:	3901      	subs	r1, #1
   27168:	4603      	mov	r3, r0
   2716a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2716e:	b90a      	cbnz	r2, 27174 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   27170:	701a      	strb	r2, [r3, #0]

	return dest;
}
   27172:	4770      	bx	lr
		*d = *s;
   27174:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   27178:	e7f7      	b.n	2716a <strcpy+0x4>

0002717a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2717a:	4603      	mov	r3, r0
	size_t n = 0;
   2717c:	2000      	movs	r0, #0

	while (*s != '\0') {
   2717e:	5c1a      	ldrb	r2, [r3, r0]
   27180:	b902      	cbnz	r2, 27184 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   27182:	4770      	bx	lr
		n++;
   27184:	3001      	adds	r0, #1
   27186:	e7fa      	b.n	2717e <strlen+0x4>

00027188 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   27188:	4603      	mov	r3, r0
	size_t n = 0;
   2718a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2718c:	5c1a      	ldrb	r2, [r3, r0]
   2718e:	b10a      	cbz	r2, 27194 <strnlen+0xc>
   27190:	4288      	cmp	r0, r1
   27192:	d100      	bne.n	27196 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   27194:	4770      	bx	lr
		n++;
   27196:	3001      	adds	r0, #1
   27198:	e7f8      	b.n	2718c <strnlen+0x4>

0002719a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2719a:	1e43      	subs	r3, r0, #1
   2719c:	3901      	subs	r1, #1
   2719e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   271a2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   271a6:	4282      	cmp	r2, r0
   271a8:	d101      	bne.n	271ae <strcmp+0x14>
   271aa:	2a00      	cmp	r2, #0
   271ac:	d1f7      	bne.n	2719e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   271ae:	1a10      	subs	r0, r2, r0
   271b0:	4770      	bx	lr

000271b2 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   271b2:	b510      	push	{r4, lr}
   271b4:	3901      	subs	r1, #1
   271b6:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   271b8:	4282      	cmp	r2, r0
   271ba:	d009      	beq.n	271d0 <strncmp+0x1e>
   271bc:	7803      	ldrb	r3, [r0, #0]
   271be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   271c2:	42a3      	cmp	r3, r4
   271c4:	d100      	bne.n	271c8 <strncmp+0x16>
   271c6:	b90b      	cbnz	r3, 271cc <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   271c8:	1b18      	subs	r0, r3, r4
   271ca:	e002      	b.n	271d2 <strncmp+0x20>
		s1++;
   271cc:	3001      	adds	r0, #1
		n--;
   271ce:	e7f3      	b.n	271b8 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   271d0:	2000      	movs	r0, #0
}
   271d2:	bd10      	pop	{r4, pc}

000271d4 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   271d4:	b510      	push	{r4, lr}
   271d6:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   271d8:	b15a      	cbz	r2, 271f2 <memcmp+0x1e>
   271da:	3901      	subs	r1, #1
   271dc:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   271de:	f813 0b01 	ldrb.w	r0, [r3], #1
   271e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   271e6:	42a3      	cmp	r3, r4
   271e8:	d001      	beq.n	271ee <memcmp+0x1a>
   271ea:	4290      	cmp	r0, r2
   271ec:	d0f7      	beq.n	271de <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   271ee:	1a80      	subs	r0, r0, r2
}
   271f0:	bd10      	pop	{r4, pc}
		return 0;
   271f2:	4610      	mov	r0, r2
   271f4:	e7fc      	b.n	271f0 <memcmp+0x1c>

000271f6 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   271f6:	1a43      	subs	r3, r0, r1
   271f8:	4293      	cmp	r3, r2
{
   271fa:	b510      	push	{r4, lr}
   271fc:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   27200:	d308      	bcc.n	27214 <memmove+0x1e>
   27202:	3901      	subs	r1, #1
	char *dest = d;
   27204:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   27206:	429a      	cmp	r2, r3
   27208:	d007      	beq.n	2721a <memmove+0x24>
			*dest = *src;
   2720a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2720e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   27212:	e7f8      	b.n	27206 <memmove+0x10>
   27214:	440a      	add	r2, r1
		while (n > 0) {
   27216:	428a      	cmp	r2, r1
   27218:	d100      	bne.n	2721c <memmove+0x26>
		}
	}

	return d;
}
   2721a:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
   2721c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   27220:	f803 4d01 	strb.w	r4, [r3, #-1]!
   27224:	e7f7      	b.n	27216 <memmove+0x20>

00027226 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   27226:	b510      	push	{r4, lr}
   27228:	1e43      	subs	r3, r0, #1
   2722a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2722c:	4291      	cmp	r1, r2
   2722e:	d100      	bne.n	27232 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   27230:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   27232:	f811 4b01 	ldrb.w	r4, [r1], #1
   27236:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2723a:	e7f7      	b.n	2722c <memcpy+0x6>

0002723c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2723c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2723e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   27240:	4603      	mov	r3, r0
	while (n > 0) {
   27242:	4293      	cmp	r3, r2
   27244:	d100      	bne.n	27248 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   27246:	4770      	bx	lr
		*(d_byte++) = c_byte;
   27248:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2724c:	e7f9      	b.n	27242 <memset+0x6>

0002724e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2724e:	2806      	cmp	r0, #6
   27250:	d108      	bne.n	27264 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   27252:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27256:	2201      	movs	r2, #1
   27258:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2725c:	f3bf 8f4f 	dsb	sy
        __WFE();
   27260:	bf20      	wfe
    while (true)
   27262:	e7fd      	b.n	27260 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   27264:	4770      	bx	lr

00027266 <pm_state_exit_post_ops>:
   27266:	2300      	movs	r3, #0
   27268:	f383 8811 	msr	BASEPRI, r3
   2726c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   27270:	4770      	bx	lr

00027272 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   27272:	b530      	push	{r4, r5, lr}
	memcpy(res, r, 3);
   27274:	2203      	movs	r2, #3
{
   27276:	b087      	sub	sp, #28
   27278:	4605      	mov	r5, r0
   2727a:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   2727c:	a802      	add	r0, sp, #8
   2727e:	4411      	add	r1, r2
   27280:	f7ff ffd1 	bl	27226 <memcpy>
	(void)memset(res + 3, 0, 13);
   27284:	220d      	movs	r2, #13
   27286:	2100      	movs	r1, #0
   27288:	f10d 000b 	add.w	r0, sp, #11
   2728c:	f7ff ffd6 	bl	2723c <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   27290:	aa02      	add	r2, sp, #8
   27292:	4611      	mov	r1, r2
   27294:	4628      	mov	r0, r5
   27296:	f002 f9ac 	bl	295f2 <bt_encrypt_le>
	if (err) {
   2729a:	b970      	cbnz	r0, 272ba <bt_rpa_irk_matches+0x48>
	memcpy(out, res, 3);
   2729c:	2203      	movs	r2, #3
   2729e:	a902      	add	r1, sp, #8
   272a0:	a801      	add	r0, sp, #4
   272a2:	f7ff ffc0 	bl	27226 <memcpy>
	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   272a6:	2203      	movs	r2, #3
   272a8:	a901      	add	r1, sp, #4
   272aa:	4620      	mov	r0, r4
   272ac:	f7ff ff92 	bl	271d4 <memcmp>
   272b0:	fab0 f080 	clz	r0, r0
   272b4:	0940      	lsrs	r0, r0, #5
}
   272b6:	b007      	add	sp, #28
   272b8:	bd30      	pop	{r4, r5, pc}
		return false;
   272ba:	2000      	movs	r0, #0
   272bc:	e7fb      	b.n	272b6 <bt_rpa_irk_matches+0x44>

000272be <bt_settings_decode_key>:
{
   272be:	b570      	push	{r4, r5, r6, lr}
   272c0:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   272c2:	2100      	movs	r1, #0
{
   272c4:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   272c6:	f7ff fbc8 	bl	26a5a <settings_name_next>
   272ca:	280d      	cmp	r0, #13
   272cc:	d118      	bne.n	27300 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   272ce:	7b23      	ldrb	r3, [r4, #12]
   272d0:	2b30      	cmp	r3, #48	; 0x30
   272d2:	d111      	bne.n	272f8 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   272d4:	2300      	movs	r3, #0
   272d6:	702b      	strb	r3, [r5, #0]
   272d8:	f104 060c 	add.w	r6, r4, #12
   272dc:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   272de:	462a      	mov	r2, r5
   272e0:	4620      	mov	r0, r4
   272e2:	2301      	movs	r3, #1
   272e4:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   272e6:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   272e8:	f7fe feb7 	bl	2605a <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   272ec:	42b4      	cmp	r4, r6
   272ee:	f105 35ff 	add.w	r5, r5, #4294967295
   272f2:	d1f4      	bne.n	272de <bt_settings_decode_key+0x20>
	return 0;
   272f4:	2000      	movs	r0, #0
}
   272f6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   272f8:	2b31      	cmp	r3, #49	; 0x31
   272fa:	d101      	bne.n	27300 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   272fc:	2301      	movs	r3, #1
   272fe:	e7ea      	b.n	272d6 <bt_settings_decode_key+0x18>
		return -EINVAL;
   27300:	f06f 0015 	mvn.w	r0, #21
   27304:	e7f7      	b.n	272f6 <bt_settings_decode_key+0x38>

00027306 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   27306:	b510      	push	{r4, lr}
   27308:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2730a:	7801      	ldrb	r1, [r0, #0]
   2730c:	7822      	ldrb	r2, [r4, #0]
   2730e:	428a      	cmp	r2, r1
{
   27310:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   27312:	d00f      	beq.n	27334 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   27314:	4669      	mov	r1, sp
   27316:	f7ed fe0f 	bl	14f38 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2731a:	a905      	add	r1, sp, #20
   2731c:	4620      	mov	r0, r4
   2731e:	f7ed fe0b 	bl	14f38 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   27322:	2210      	movs	r2, #16
   27324:	f10d 0115 	add.w	r1, sp, #21
   27328:	f10d 0001 	add.w	r0, sp, #1
   2732c:	f7ff ff52 	bl	271d4 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   27330:	b00a      	add	sp, #40	; 0x28
   27332:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   27334:	2a01      	cmp	r2, #1
   27336:	d006      	beq.n	27346 <bt_uuid_cmp+0x40>
   27338:	2a02      	cmp	r2, #2
   2733a:	d007      	beq.n	2734c <bt_uuid_cmp+0x46>
   2733c:	b972      	cbnz	r2, 2735c <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2733e:	8840      	ldrh	r0, [r0, #2]
   27340:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   27342:	1ac0      	subs	r0, r0, r3
   27344:	e7f4      	b.n	27330 <bt_uuid_cmp+0x2a>
   27346:	6840      	ldr	r0, [r0, #4]
   27348:	6863      	ldr	r3, [r4, #4]
   2734a:	e7fa      	b.n	27342 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2734c:	2210      	movs	r2, #16
   2734e:	1c61      	adds	r1, r4, #1
   27350:	3001      	adds	r0, #1
}
   27352:	b00a      	add	sp, #40	; 0x28
   27354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   27358:	f7ff bf3c 	b.w	271d4 <memcmp>
	switch (u1->type) {
   2735c:	f06f 0015 	mvn.w	r0, #21
   27360:	e7e6      	b.n	27330 <bt_uuid_cmp+0x2a>

00027362 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   27362:	2a04      	cmp	r2, #4
{
   27364:	b510      	push	{r4, lr}
	switch (data_len) {
   27366:	d00a      	beq.n	2737e <bt_uuid_create+0x1c>
   27368:	2a10      	cmp	r2, #16
   2736a:	d00d      	beq.n	27388 <bt_uuid_create+0x26>
   2736c:	2a02      	cmp	r2, #2
   2736e:	f04f 0300 	mov.w	r3, #0
   27372:	d10f      	bne.n	27394 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   27374:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   27376:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   27378:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2737a:	2001      	movs	r0, #1
}
   2737c:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   2737e:	2301      	movs	r3, #1
   27380:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   27382:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   27384:	6042      	str	r2, [r0, #4]
		break;
   27386:	e7f8      	b.n	2737a <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   27388:	2302      	movs	r3, #2
   2738a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2738e:	f7ff ff4a 	bl	27226 <memcpy>
		break;
   27392:	e7f2      	b.n	2737a <bt_uuid_create+0x18>
	switch (data_len) {
   27394:	4618      	mov	r0, r3
   27396:	e7f1      	b.n	2737c <bt_uuid_create+0x1a>

00027398 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   27398:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2739a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2739c:	2106      	movs	r1, #6
{
   2739e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   273a0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   273a4:	f7f7 fa3c 	bl	1e820 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   273a8:	b918      	cbnz	r0, 273b2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   273aa:	79a3      	ldrb	r3, [r4, #6]
   273ac:	f063 033f 	orn	r3, r3, #63	; 0x3f
   273b0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   273b2:	bd10      	pop	{r4, pc}

000273b4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   273b4:	280f      	cmp	r0, #15
   273b6:	d806      	bhi.n	273c6 <bt_hci_evt_get_flags+0x12>
   273b8:	280d      	cmp	r0, #13
   273ba:	d80b      	bhi.n	273d4 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   273bc:	2805      	cmp	r0, #5
   273be:	bf14      	ite	ne
   273c0:	2002      	movne	r0, #2
   273c2:	2003      	moveq	r0, #3
   273c4:	4770      	bx	lr
	switch (evt) {
   273c6:	2813      	cmp	r0, #19
   273c8:	d004      	beq.n	273d4 <bt_hci_evt_get_flags+0x20>
   273ca:	281a      	cmp	r0, #26
   273cc:	bf14      	ite	ne
   273ce:	2002      	movne	r0, #2
   273d0:	2001      	moveq	r0, #1
   273d2:	4770      	bx	lr
   273d4:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   273d6:	4770      	bx	lr

000273d8 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   273d8:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   273dc:	b193      	cbz	r3, 27404 <update_sec_level+0x2c>
   273de:	7b5a      	ldrb	r2, [r3, #13]
   273e0:	07d1      	lsls	r1, r2, #31
   273e2:	d50f      	bpl.n	27404 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   273e4:	06d2      	lsls	r2, r2, #27
   273e6:	d50b      	bpl.n	27400 <update_sec_level+0x28>
   273e8:	7b1b      	ldrb	r3, [r3, #12]
   273ea:	2b10      	cmp	r3, #16
   273ec:	d108      	bne.n	27400 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   273ee:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   273f0:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   273f2:	7a82      	ldrb	r2, [r0, #10]
   273f4:	7a40      	ldrb	r0, [r0, #9]
}
   273f6:	4282      	cmp	r2, r0
   273f8:	bf8c      	ite	hi
   273fa:	2000      	movhi	r0, #0
   273fc:	2001      	movls	r0, #1
   273fe:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   27400:	2303      	movs	r3, #3
   27402:	e7f5      	b.n	273f0 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   27404:	2302      	movs	r3, #2
   27406:	e7f3      	b.n	273f0 <update_sec_level+0x18>

00027408 <hci_vendor_event>:
}
   27408:	4770      	bx	lr

0002740a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2740a:	2207      	movs	r2, #7
   2740c:	f7ff bf0b 	b.w	27226 <memcpy>

00027410 <atomic_or>:
{
   27410:	4603      	mov	r3, r0
}
   27412:	f3bf 8f5b 	dmb	ish
   27416:	e853 0f00 	ldrex	r0, [r3]
   2741a:	ea40 0201 	orr.w	r2, r0, r1
   2741e:	e843 2c00 	strex	ip, r2, [r3]
   27422:	f1bc 0f00 	cmp.w	ip, #0
   27426:	d1f6      	bne.n	27416 <atomic_or+0x6>
   27428:	f3bf 8f5b 	dmb	ish
   2742c:	4770      	bx	lr

0002742e <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2742e:	f3bf 8f5b 	dmb	ish
   27432:	e850 3f00 	ldrex	r3, [r0]
   27436:	400b      	ands	r3, r1
   27438:	e840 3200 	strex	r2, r3, [r0]
   2743c:	2a00      	cmp	r2, #0
   2743e:	d1f8      	bne.n	27432 <atomic_and.isra.0+0x4>
   27440:	f3bf 8f5b 	dmb	ish
}
   27444:	4770      	bx	lr

00027446 <sys_put_le64>:
	dst[1] = val >> 8;
   27446:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2744a:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2744c:	0e00      	lsrs	r0, r0, #24
   2744e:	7053      	strb	r3, [r2, #1]
   27450:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   27452:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   27454:	f3c1 2007 	ubfx	r0, r1, #8, #8
   27458:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2745a:	7093      	strb	r3, [r2, #2]
   2745c:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2745e:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   27460:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   27462:	71d1      	strb	r1, [r2, #7]
}
   27464:	4770      	bx	lr

00027466 <bt_hci_disconnect>:
{
   27466:	b570      	push	{r4, r5, r6, lr}
   27468:	4606      	mov	r6, r0
   2746a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2746c:	f240 4006 	movw	r0, #1030	; 0x406
   27470:	2103      	movs	r1, #3
   27472:	f7ee f93f 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   27476:	4604      	mov	r4, r0
   27478:	b168      	cbz	r0, 27496 <bt_hci_disconnect+0x30>
   2747a:	2103      	movs	r1, #3
   2747c:	3008      	adds	r0, #8
   2747e:	f7f5 fad3 	bl	1ca28 <net_buf_simple_add>
	disconn->reason = reason;
   27482:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   27484:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   27486:	4621      	mov	r1, r4
   27488:	2200      	movs	r2, #0
}
   2748a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2748e:	f240 4006 	movw	r0, #1030	; 0x406
   27492:	f7ee b977 	b.w	15784 <bt_hci_cmd_send_sync>
}
   27496:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2749a:	bd70      	pop	{r4, r5, r6, pc}

0002749c <bt_le_set_data_len>:
{
   2749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2749e:	4607      	mov	r7, r0
   274a0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   274a2:	f242 0022 	movw	r0, #8226	; 0x2022
   274a6:	2106      	movs	r1, #6
{
   274a8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   274aa:	f7ee f923 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   274ae:	4604      	mov	r4, r0
   274b0:	b178      	cbz	r0, 274d2 <bt_le_set_data_len+0x36>
   274b2:	2106      	movs	r1, #6
   274b4:	3008      	adds	r0, #8
   274b6:	f7f5 fab7 	bl	1ca28 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   274ba:	883b      	ldrh	r3, [r7, #0]
   274bc:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   274be:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   274c0:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   274c2:	4621      	mov	r1, r4
   274c4:	2200      	movs	r2, #0
}
   274c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   274ca:	f242 0022 	movw	r0, #8226	; 0x2022
   274ce:	f7ee b959 	b.w	15784 <bt_hci_cmd_send_sync>
}
   274d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   274d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000274d8 <bt_le_set_phy>:
{
   274d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   274dc:	4680      	mov	r8, r0
   274de:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   274e0:	f242 0032 	movw	r0, #8242	; 0x2032
   274e4:	2107      	movs	r1, #7
{
   274e6:	f89d 9020 	ldrb.w	r9, [sp, #32]
   274ea:	4616      	mov	r6, r2
   274ec:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   274ee:	f7ee f901 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   274f2:	4604      	mov	r4, r0
   274f4:	b198      	cbz	r0, 2751e <bt_le_set_phy+0x46>
   274f6:	2107      	movs	r1, #7
   274f8:	3008      	adds	r0, #8
   274fa:	f7f5 fa95 	bl	1ca28 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   274fe:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   27502:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   27504:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   27506:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   27508:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2750a:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2750e:	4621      	mov	r1, r4
   27510:	2200      	movs	r2, #0
}
   27512:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   27516:	f242 0032 	movw	r0, #8242	; 0x2032
   2751a:	f7ee b933 	b.w	15784 <bt_hci_cmd_send_sync>
}
   2751e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027526 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   27526:	6880      	ldr	r0, [r0, #8]
   27528:	f7ee b9da 	b.w	158e0 <bt_hci_le_enh_conn_complete>

0002752c <le_legacy_conn_complete>:
{
   2752c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2752e:	6881      	ldr	r1, [r0, #8]
{
   27530:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   27532:	780b      	ldrb	r3, [r1, #0]
   27534:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   27538:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2753c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   27540:	78cb      	ldrb	r3, [r1, #3]
   27542:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   27546:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2754a:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   2754e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   27552:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   27556:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2755a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   2755e:	7c4b      	ldrb	r3, [r1, #17]
   27560:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   27564:	a803      	add	r0, sp, #12
   27566:	3104      	adds	r1, #4
   27568:	f7ff ff4f 	bl	2740a <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2756c:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   2756e:	4669      	mov	r1, sp
   27570:	2206      	movs	r2, #6
   27572:	f10d 0013 	add.w	r0, sp, #19
   27576:	9400      	str	r4, [sp, #0]
   27578:	f8ad 4004 	strh.w	r4, [sp, #4]
   2757c:	f7ff fe53 	bl	27226 <memcpy>
   27580:	2206      	movs	r2, #6
   27582:	4669      	mov	r1, sp
   27584:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   27588:	9400      	str	r4, [sp, #0]
   2758a:	f8ad 4004 	strh.w	r4, [sp, #4]
   2758e:	f7ff fe4a 	bl	27226 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   27592:	a802      	add	r0, sp, #8
   27594:	f7ee f9a4 	bl	158e0 <bt_hci_le_enh_conn_complete>
}
   27598:	b00a      	add	sp, #40	; 0x28
   2759a:	bd10      	pop	{r4, pc}

0002759c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2759c:	8803      	ldrh	r3, [r0, #0]
   2759e:	8842      	ldrh	r2, [r0, #2]
   275a0:	4293      	cmp	r3, r2
{
   275a2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   275a4:	d819      	bhi.n	275da <bt_le_conn_params_valid+0x3e>
   275a6:	2b05      	cmp	r3, #5
   275a8:	d917      	bls.n	275da <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   275aa:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   275ae:	d814      	bhi.n	275da <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   275b0:	8883      	ldrh	r3, [r0, #4]
   275b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   275b6:	d210      	bcs.n	275da <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   275b8:	88c0      	ldrh	r0, [r0, #6]
   275ba:	f1a0 010a 	sub.w	r1, r0, #10
   275be:	b289      	uxth	r1, r1
   275c0:	f640 4476 	movw	r4, #3190	; 0xc76
   275c4:	42a1      	cmp	r1, r4
   275c6:	d808      	bhi.n	275da <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   275c8:	3301      	adds	r3, #1
   275ca:	b29b      	uxth	r3, r3
   275cc:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   275ce:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   275d2:	bf34      	ite	cc
   275d4:	2001      	movcc	r0, #1
   275d6:	2000      	movcs	r0, #0
}
   275d8:	bd10      	pop	{r4, pc}
		return false;
   275da:	2000      	movs	r0, #0
   275dc:	e7fc      	b.n	275d8 <bt_le_conn_params_valid+0x3c>

000275de <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   275de:	2000      	movs	r0, #0
   275e0:	4770      	bx	lr

000275e2 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   275e2:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   275e4:	f7f4 fd9c 	bl	1c120 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   275e8:	b118      	cbz	r0, 275f2 <bt_addr_le_is_bonded+0x10>
   275ea:	89c0      	ldrh	r0, [r0, #14]
   275ec:	3800      	subs	r0, #0
   275ee:	bf18      	it	ne
   275f0:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   275f2:	bd08      	pop	{r3, pc}

000275f4 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   275f4:	2207      	movs	r2, #7
   275f6:	f7ff be16 	b.w	27226 <memcpy>

000275fa <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   275fa:	f3bf 8f5b 	dmb	ish
   275fe:	6800      	ldr	r0, [r0, #0]
   27600:	f3bf 8f5b 	dmb	ish
}
   27604:	4770      	bx	lr

00027606 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27606:	f100 0310 	add.w	r3, r0, #16
   2760a:	f3bf 8f5b 	dmb	ish
   2760e:	e853 2f00 	ldrex	r2, [r3]
   27612:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   27616:	e843 1c00 	strex	ip, r1, [r3]
   2761a:	f1bc 0f00 	cmp.w	ip, #0
   2761e:	d1f6      	bne.n	2760e <adv_unpause_enabled+0x8>
   27620:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   27624:	0453      	lsls	r3, r2, #17
   27626:	d502      	bpl.n	2762e <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   27628:	2101      	movs	r1, #1
   2762a:	f000 b984 	b.w	27936 <bt_le_adv_set_enable>
}
   2762e:	4770      	bx	lr

00027630 <hci_id_add>:
{
   27630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27634:	4688      	mov	r8, r1
   27636:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   27638:	4605      	mov	r5, r0
   2763a:	bb08      	cbnz	r0, 27680 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2763c:	2127      	movs	r1, #39	; 0x27
   2763e:	f242 0027 	movw	r0, #8231	; 0x2027
   27642:	f7ee f857 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   27646:	4604      	mov	r4, r0
   27648:	b1f0      	cbz	r0, 27688 <hci_id_add+0x58>
   2764a:	2127      	movs	r1, #39	; 0x27
   2764c:	3008      	adds	r0, #8
   2764e:	f7f5 f9eb 	bl	1ca28 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   27652:	4641      	mov	r1, r8
   27654:	4606      	mov	r6, r0
   27656:	f7ff ffcd 	bl	275f4 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   2765a:	4639      	mov	r1, r7
   2765c:	2210      	movs	r2, #16
   2765e:	1df0      	adds	r0, r6, #7
   27660:	f7ff fde1 	bl	27226 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   27664:	4629      	mov	r1, r5
   27666:	2210      	movs	r2, #16
   27668:	f106 0017 	add.w	r0, r6, #23
   2766c:	f7ff fde6 	bl	2723c <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   27670:	462a      	mov	r2, r5
   27672:	4621      	mov	r1, r4
   27674:	f242 0027 	movw	r0, #8231	; 0x2027
}
   27678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2767c:	f7ee b882 	b.w	15784 <bt_hci_cmd_send_sync>
		return -EINVAL;
   27680:	f06f 0015 	mvn.w	r0, #21
}
   27684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   27688:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2768c:	e7fa      	b.n	27684 <hci_id_add+0x54>

0002768e <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2768e:	7a03      	ldrb	r3, [r0, #8]
   27690:	075b      	lsls	r3, r3, #29
{
   27692:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   27694:	d505      	bpl.n	276a2 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   27696:	4601      	mov	r1, r0
   27698:	322a      	adds	r2, #42	; 0x2a
   2769a:	f811 0b01 	ldrb.w	r0, [r1], #1
   2769e:	f7ff bfc7 	b.w	27630 <hci_id_add>
}
   276a2:	4770      	bx	lr

000276a4 <addr_res_enable>:
{
   276a4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   276a6:	2101      	movs	r1, #1
{
   276a8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   276aa:	f242 002d 	movw	r0, #8237	; 0x202d
   276ae:	f7ee f821 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   276b2:	4604      	mov	r4, r0
   276b4:	b158      	cbz	r0, 276ce <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   276b6:	4629      	mov	r1, r5
   276b8:	3008      	adds	r0, #8
   276ba:	f001 fe31 	bl	29320 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   276be:	4621      	mov	r1, r4
   276c0:	2200      	movs	r2, #0
}
   276c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   276c6:	f242 002d 	movw	r0, #8237	; 0x202d
   276ca:	f7ee b85b 	b.w	15784 <bt_hci_cmd_send_sync>
}
   276ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
   276d2:	bd38      	pop	{r3, r4, r5, pc}

000276d4 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   276d4:	f100 0210 	add.w	r2, r0, #16
{
   276d8:	b508      	push	{r3, lr}
   276da:	4603      	mov	r3, r0
   276dc:	4610      	mov	r0, r2
   276de:	f7ff ff8c 	bl	275fa <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   276e2:	0641      	lsls	r1, r0, #25
   276e4:	d511      	bpl.n	2770a <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   276e6:	f3bf 8f5b 	dmb	ish
   276ea:	e852 1f00 	ldrex	r1, [r2]
   276ee:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   276f2:	e842 1000 	strex	r0, r1, [r2]
   276f6:	2800      	cmp	r0, #0
   276f8:	d1f7      	bne.n	276ea <adv_pause_enabled+0x16>
   276fa:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   276fe:	4618      	mov	r0, r3
   27700:	2100      	movs	r1, #0
}
   27702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   27706:	f000 b916 	b.w	27936 <bt_le_adv_set_enable>
}
   2770a:	bd08      	pop	{r3, pc}

0002770c <bt_lookup_id_addr>:
{
   2770c:	b510      	push	{r4, lr}
   2770e:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   27710:	f7f4 fcce 	bl	1c0b0 <bt_keys_find_irk>
		if (keys) {
   27714:	b100      	cbz	r0, 27718 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   27716:	1c44      	adds	r4, r0, #1
}
   27718:	4620      	mov	r0, r4
   2771a:	bd10      	pop	{r4, pc}

0002771c <bt_id_set_adv_private_addr>:
{
   2771c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2771e:	2106      	movs	r1, #6
   27720:	4668      	mov	r0, sp
   27722:	f7f7 f87d 	bl	1e820 <bt_rand>
	if (err) {
   27726:	b940      	cbnz	r0, 2773a <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   27728:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   2772c:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2772e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27732:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   27736:	f7ee fd89 	bl	1624c <set_random_address>
}
   2773a:	b003      	add	sp, #12
   2773c:	f85d fb04 	ldr.w	pc, [sp], #4

00027740 <bt_id_adv_random_addr_check>:
}
   27740:	2001      	movs	r0, #1
   27742:	4770      	bx	lr

00027744 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   27744:	7a03      	ldrb	r3, [r0, #8]
   27746:	07d9      	lsls	r1, r3, #31
   27748:	d504      	bpl.n	27754 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2774a:	f023 0301 	bic.w	r3, r3, #1
   2774e:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   27750:	f7ee be04 	b.w	1635c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   27754:	0799      	lsls	r1, r3, #30
   27756:	d504      	bpl.n	27762 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   27758:	f023 0302 	bic.w	r3, r3, #2
   2775c:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2775e:	f7ee beb1 	b.w	164c4 <bt_id_del>
}
   27762:	4770      	bx	lr

00027764 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   27764:	2000      	movs	r0, #0
   27766:	4770      	bx	lr

00027768 <get_adv_channel_map>:
{
   27768:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2776a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2776e:	bf0c      	ite	eq
   27770:	2007      	moveq	r0, #7
   27772:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   27774:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   27776:	bf48      	it	mi
   27778:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2777c:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2777e:	bf48      	it	mi
   27780:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   27784:	4770      	bx	lr

00027786 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27786:	f3bf 8f5b 	dmb	ish
   2778a:	6800      	ldr	r0, [r0, #0]
   2778c:	f3bf 8f5b 	dmb	ish
}
   27790:	4770      	bx	lr

00027792 <atomic_and>:
{
   27792:	4603      	mov	r3, r0
}
   27794:	f3bf 8f5b 	dmb	ish
   27798:	e853 0f00 	ldrex	r0, [r3]
   2779c:	ea00 0201 	and.w	r2, r0, r1
   277a0:	e843 2c00 	strex	ip, r2, [r3]
   277a4:	f1bc 0f00 	cmp.w	ip, #0
   277a8:	d1f6      	bne.n	27798 <atomic_and+0x6>
   277aa:	f3bf 8f5b 	dmb	ish
   277ae:	4770      	bx	lr

000277b0 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   277b0:	2301      	movs	r3, #1
{
   277b2:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   277b4:	fa03 f101 	lsl.w	r1, r3, r1
{
   277b8:	4604      	mov	r4, r0
	if (val) {
   277ba:	b162      	cbz	r2, 277d6 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   277bc:	f3bf 8f5b 	dmb	ish
   277c0:	e854 3f00 	ldrex	r3, [r4]
   277c4:	430b      	orrs	r3, r1
   277c6:	e844 3200 	strex	r2, r3, [r4]
   277ca:	2a00      	cmp	r2, #0
   277cc:	d1f8      	bne.n	277c0 <atomic_set_bit_to+0x10>
   277ce:	f3bf 8f5b 	dmb	ish
	}
}
   277d2:	bc10      	pop	{r4}
   277d4:	4770      	bx	lr
   277d6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   277d8:	43c9      	mvns	r1, r1
   277da:	f7ff bfda 	b.w	27792 <atomic_and>

000277de <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   277de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   277e2:	b087      	sub	sp, #28
   277e4:	4605      	mov	r5, r0
   277e6:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   277ea:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   277ee:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   277f2:	460c      	mov	r4, r1
   277f4:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   277f6:	2100      	movs	r1, #0
   277f8:	2210      	movs	r2, #16
   277fa:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   277fc:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   277fe:	f7ff fd1d 	bl	2723c <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   27802:	b186      	cbz	r6, 27826 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   27804:	f7ee fd04 	bl	16210 <bt_get_name>
   27808:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2780a:	2c00      	cmp	r4, #0
   2780c:	d139      	bne.n	27882 <le_adv_update.constprop.0+0xa4>
   2780e:	2f00      	cmp	r7, #0
   27810:	d142      	bne.n	27898 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   27812:	4658      	mov	r0, fp
   27814:	f7ff fcb1 	bl	2717a <strlen>
   27818:	2309      	movs	r3, #9
   2781a:	f88d 3000 	strb.w	r3, [sp]
   2781e:	f88d 0001 	strb.w	r0, [sp, #1]
   27822:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   27826:	2e01      	cmp	r6, #1
			d_len = 2;
   27828:	bf0c      	ite	eq
   2782a:	2202      	moveq	r2, #2
		d_len = 1;
   2782c:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2782e:	a902      	add	r1, sp, #8
   27830:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   27834:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   27838:	bf04      	itt	eq
   2783a:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   2783e:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   27840:	f7ef f878 	bl	16934 <hci_set_ad>
		if (err) {
   27844:	4604      	mov	r4, r0
   27846:	b978      	cbnz	r0, 27868 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   27848:	f1ba 0f00 	cmp.w	sl, #0
   2784c:	d126      	bne.n	2789c <le_adv_update.constprop.0+0xbe>
   2784e:	3510      	adds	r5, #16
   27850:	f3bf 8f5b 	dmb	ish
   27854:	e855 3f00 	ldrex	r3, [r5]
   27858:	f043 0304 	orr.w	r3, r3, #4
   2785c:	e845 3200 	strex	r2, r3, [r5]
   27860:	2a00      	cmp	r2, #0
   27862:	d1f7      	bne.n	27854 <le_adv_update.constprop.0+0x76>
   27864:	f3bf 8f5b 	dmb	ish
}
   27868:	4620      	mov	r0, r4
   2786a:	b007      	add	sp, #28
   2786c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   27870:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   27874:	3a08      	subs	r2, #8
   27876:	2a01      	cmp	r2, #1
   27878:	d925      	bls.n	278c6 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2787a:	3301      	adds	r3, #1
   2787c:	4598      	cmp	r8, r3
   2787e:	d1f7      	bne.n	27870 <le_adv_update.constprop.0+0x92>
   27880:	e7c5      	b.n	2780e <le_adv_update.constprop.0+0x30>
   27882:	2300      	movs	r3, #0
   27884:	e7fa      	b.n	2787c <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   27886:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2788a:	3a08      	subs	r2, #8
   2788c:	2a01      	cmp	r2, #1
   2788e:	d91a      	bls.n	278c6 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   27890:	3301      	adds	r3, #1
   27892:	4599      	cmp	r9, r3
   27894:	d1f7      	bne.n	27886 <le_adv_update.constprop.0+0xa8>
   27896:	e7bc      	b.n	27812 <le_adv_update.constprop.0+0x34>
   27898:	2300      	movs	r3, #0
   2789a:	e7fa      	b.n	27892 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   2789c:	2e02      	cmp	r6, #2
   2789e:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   278a2:	bf08      	it	eq
   278a4:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   278a6:	a902      	add	r1, sp, #8
			d_len = 2;
   278a8:	bf08      	it	eq
   278aa:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   278ac:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   278b0:	bf08      	it	eq
   278b2:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   278b6:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   278ba:	f7ef f83b 	bl	16934 <hci_set_ad>
		if (err) {
   278be:	2800      	cmp	r0, #0
   278c0:	d0c5      	beq.n	2784e <le_adv_update.constprop.0+0x70>
   278c2:	4604      	mov	r4, r0
   278c4:	e7d0      	b.n	27868 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   278c6:	f06f 0415 	mvn.w	r4, #21
   278ca:	e7cd      	b.n	27868 <le_adv_update.constprop.0+0x8a>

000278cc <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   278cc:	6843      	ldr	r3, [r0, #4]
   278ce:	f013 0008 	ands.w	r0, r3, #8
   278d2:	d00a      	beq.n	278ea <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   278d4:	035a      	lsls	r2, r3, #13
   278d6:	d407      	bmi.n	278e8 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   278d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   278dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   278e0:	bf0c      	ite	eq
   278e2:	2001      	moveq	r0, #1
   278e4:	2002      	movne	r0, #2
   278e6:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   278e8:	2001      	movs	r0, #1
}
   278ea:	4770      	bx	lr

000278ec <bt_le_adv_set_enable_legacy>:
{
   278ec:	b570      	push	{r4, r5, r6, lr}
   278ee:	4606      	mov	r6, r0
   278f0:	b086      	sub	sp, #24
   278f2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   278f4:	f242 000a 	movw	r0, #8202	; 0x200a
   278f8:	2101      	movs	r1, #1
   278fa:	f7ed fefb 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   278fe:	4604      	mov	r4, r0
   27900:	b1b0      	cbz	r0, 27930 <bt_le_adv_set_enable_legacy+0x44>
   27902:	3008      	adds	r0, #8
	if (enable) {
   27904:	b195      	cbz	r5, 2792c <bt_le_adv_set_enable_legacy+0x40>
   27906:	2101      	movs	r1, #1
   27908:	f001 fd0a 	bl	29320 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2790c:	f106 0210 	add.w	r2, r6, #16
   27910:	a903      	add	r1, sp, #12
   27912:	4620      	mov	r0, r4
   27914:	9500      	str	r5, [sp, #0]
   27916:	2306      	movs	r3, #6
   27918:	f7ed feda 	bl	156d0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2791c:	2200      	movs	r2, #0
   2791e:	4621      	mov	r1, r4
   27920:	f242 000a 	movw	r0, #8202	; 0x200a
   27924:	f7ed ff2e 	bl	15784 <bt_hci_cmd_send_sync>
}
   27928:	b006      	add	sp, #24
   2792a:	bd70      	pop	{r4, r5, r6, pc}
   2792c:	4629      	mov	r1, r5
   2792e:	e7eb      	b.n	27908 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   27930:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27934:	e7f8      	b.n	27928 <bt_le_adv_set_enable_legacy+0x3c>

00027936 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   27936:	f7ff bfd9 	b.w	278ec <bt_le_adv_set_enable_legacy>

0002793a <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2793a:	3018      	adds	r0, #24
   2793c:	f7f9 bcc0 	b.w	212c0 <k_work_cancel_delayable>

00027940 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27940:	b510      	push	{r4, lr}
   27942:	4603      	mov	r3, r0
	return list->head;
   27944:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27946:	2200      	movs	r2, #0
   27948:	b158      	cbz	r0, 27962 <sys_slist_find_and_remove+0x22>
   2794a:	4288      	cmp	r0, r1
   2794c:	d10f      	bne.n	2796e <sys_slist_find_and_remove+0x2e>
	return node->next;
   2794e:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   27950:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   27952:	b93a      	cbnz	r2, 27964 <sys_slist_find_and_remove+0x24>
   27954:	42a1      	cmp	r1, r4
	list->head = node;
   27956:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   27958:	d100      	bne.n	2795c <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2795a:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2795c:	2300      	movs	r3, #0
   2795e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27960:	2001      	movs	r0, #1
   27962:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   27964:	42a1      	cmp	r1, r4
	parent->next = child;
   27966:	6010      	str	r0, [r2, #0]
	list->tail = node;
   27968:	bf08      	it	eq
   2796a:	605a      	streq	r2, [r3, #4]
}
   2796c:	e7f6      	b.n	2795c <sys_slist_find_and_remove+0x1c>
	return node->next;
   2796e:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27970:	6800      	ldr	r0, [r0, #0]
   27972:	e7e9      	b.n	27948 <sys_slist_find_and_remove+0x8>

00027974 <atomic_and>:
{
   27974:	4603      	mov	r3, r0
}
   27976:	f3bf 8f5b 	dmb	ish
   2797a:	e853 0f00 	ldrex	r0, [r3]
   2797e:	ea00 0201 	and.w	r2, r0, r1
   27982:	e843 2c00 	strex	ip, r2, [r3]
   27986:	f1bc 0f00 	cmp.w	ip, #0
   2798a:	d1f6      	bne.n	2797a <atomic_and+0x6>
   2798c:	f3bf 8f5b 	dmb	ish
   27990:	4770      	bx	lr

00027992 <tx_complete_work>:
	tx_notify(conn);
   27992:	3828      	subs	r0, #40	; 0x28
   27994:	f7ef bbde 	b.w	17154 <tx_notify>

00027998 <bt_conn_reset_rx_state>:
{
   27998:	b510      	push	{r4, lr}
   2799a:	4604      	mov	r4, r0
	if (!conn->rx) {
   2799c:	6900      	ldr	r0, [r0, #16]
   2799e:	b118      	cbz	r0, 279a8 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   279a0:	f7f4 ff2c 	bl	1c7fc <net_buf_unref>
	conn->rx = NULL;
   279a4:	2300      	movs	r3, #0
   279a6:	6123      	str	r3, [r4, #16]
}
   279a8:	bd10      	pop	{r4, pc}

000279aa <bt_conn_ref>:
{
   279aa:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   279ac:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   279b0:	f3bf 8f5b 	dmb	ish
   279b4:	6813      	ldr	r3, [r2, #0]
   279b6:	f3bf 8f5b 	dmb	ish
		if (!old) {
   279ba:	b17b      	cbz	r3, 279dc <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   279bc:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   279c0:	1c59      	adds	r1, r3, #1
   279c2:	e852 4f00 	ldrex	r4, [r2]
   279c6:	429c      	cmp	r4, r3
   279c8:	d104      	bne.n	279d4 <bt_conn_ref+0x2a>
   279ca:	e842 1c00 	strex	ip, r1, [r2]
   279ce:	f1bc 0f00 	cmp.w	ip, #0
   279d2:	d1f6      	bne.n	279c2 <bt_conn_ref+0x18>
   279d4:	f3bf 8f5b 	dmb	ish
   279d8:	d1ea      	bne.n	279b0 <bt_conn_ref+0x6>
}
   279da:	bd10      	pop	{r4, pc}
			return NULL;
   279dc:	4618      	mov	r0, r3
   279de:	e7fc      	b.n	279da <bt_conn_ref+0x30>

000279e0 <conn_lookup_handle>:
{
   279e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   279e4:	4607      	mov	r7, r0
   279e6:	460e      	mov	r6, r1
   279e8:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   279ea:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   279ec:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   279f0:	42b4      	cmp	r4, r6
   279f2:	d103      	bne.n	279fc <conn_lookup_handle+0x1c>
	return NULL;
   279f4:	2300      	movs	r3, #0
}
   279f6:	4618      	mov	r0, r3
   279f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   279fc:	fb09 7004 	mla	r0, r9, r4, r7
   27a00:	f7ff ffd3 	bl	279aa <bt_conn_ref>
   27a04:	4603      	mov	r3, r0
		if (!conn) {
   27a06:	b158      	cbz	r0, 27a20 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   27a08:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   27a0a:	2d01      	cmp	r5, #1
   27a0c:	d002      	beq.n	27a14 <conn_lookup_handle+0x34>
   27a0e:	3d07      	subs	r5, #7
   27a10:	2d01      	cmp	r5, #1
   27a12:	d803      	bhi.n	27a1c <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   27a14:	881a      	ldrh	r2, [r3, #0]
   27a16:	4542      	cmp	r2, r8
   27a18:	d0ed      	beq.n	279f6 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   27a1a:	4618      	mov	r0, r3
   27a1c:	f7ef fdf2 	bl	17604 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   27a20:	3401      	adds	r4, #1
   27a22:	e7e5      	b.n	279f0 <conn_lookup_handle+0x10>

00027a24 <bt_conn_connected>:
{
   27a24:	b510      	push	{r4, lr}
   27a26:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   27a28:	f7f0 fa88 	bl	17f3c <bt_l2cap_connected>
	notify_connected(conn);
   27a2c:	4620      	mov	r0, r4
}
   27a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   27a32:	f7ef bb5f 	b.w	170f4 <notify_connected>

00027a36 <bt_conn_disconnect>:
{
   27a36:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   27a38:	7b43      	ldrb	r3, [r0, #13]
   27a3a:	3b02      	subs	r3, #2
{
   27a3c:	4604      	mov	r4, r0
	switch (conn->state) {
   27a3e:	2b06      	cmp	r3, #6
   27a40:	d805      	bhi.n	27a4e <bt_conn_disconnect+0x18>
   27a42:	e8df f003 	tbb	[pc, r3]
   27a46:	0408      	.short	0x0408
   27a48:	0e0c0404 	.word	0x0e0c0404
   27a4c:	0c          	.byte	0x0c
   27a4d:	00          	.byte	0x00
   27a4e:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   27a52:	4628      	mov	r0, r5
   27a54:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   27a56:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   27a58:	2100      	movs	r1, #0
   27a5a:	f7ef fe0b 	bl	17674 <bt_conn_set_state>
		return 0;
   27a5e:	2500      	movs	r5, #0
   27a60:	e7f7      	b.n	27a52 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   27a62:	8800      	ldrh	r0, [r0, #0]
   27a64:	f7ff fcff 	bl	27466 <bt_hci_disconnect>
	if (err) {
   27a68:	4605      	mov	r5, r0
   27a6a:	2800      	cmp	r0, #0
   27a6c:	d1f1      	bne.n	27a52 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   27a6e:	7b63      	ldrb	r3, [r4, #13]
   27a70:	2b07      	cmp	r3, #7
   27a72:	d1ee      	bne.n	27a52 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   27a74:	2108      	movs	r1, #8
   27a76:	4620      	mov	r0, r4
   27a78:	f7ef fdfc 	bl	17674 <bt_conn_set_state>
   27a7c:	e7e9      	b.n	27a52 <bt_conn_disconnect+0x1c>

00027a7e <bt_conn_set_security>:
{
   27a7e:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   27a80:	7b43      	ldrb	r3, [r0, #13]
   27a82:	2b07      	cmp	r3, #7
{
   27a84:	4604      	mov	r4, r0
   27a86:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   27a88:	d124      	bne.n	27ad4 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   27a8a:	7a43      	ldrb	r3, [r0, #9]
   27a8c:	428b      	cmp	r3, r1
   27a8e:	d224      	bcs.n	27ada <bt_conn_set_security+0x5c>
   27a90:	7a83      	ldrb	r3, [r0, #10]
   27a92:	428b      	cmp	r3, r1
   27a94:	d221      	bcs.n	27ada <bt_conn_set_security+0x5c>
	if (val) {
   27a96:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   27a98:	f100 0004 	add.w	r0, r0, #4
   27a9c:	d515      	bpl.n	27aca <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27a9e:	f3bf 8f5b 	dmb	ish
   27aa2:	e850 3f00 	ldrex	r3, [r0]
   27aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   27aaa:	e840 3200 	strex	r2, r3, [r0]
   27aae:	2a00      	cmp	r2, #0
   27ab0:	d1f7      	bne.n	27aa2 <bt_conn_set_security+0x24>
   27ab2:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   27ab6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   27aba:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   27abc:	4620      	mov	r0, r4
   27abe:	f7f3 fdf3 	bl	1b6a8 <bt_smp_start_security>
	if (err) {
   27ac2:	b108      	cbz	r0, 27ac8 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   27ac4:	7a63      	ldrb	r3, [r4, #9]
   27ac6:	72a3      	strb	r3, [r4, #10]
}
   27ac8:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27aca:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   27ace:	f7ff ff51 	bl	27974 <atomic_and>
   27ad2:	e7f0      	b.n	27ab6 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   27ad4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27ad8:	e7f6      	b.n	27ac8 <bt_conn_set_security+0x4a>
		return 0;
   27ada:	2000      	movs	r0, #0
   27adc:	e7f4      	b.n	27ac8 <bt_conn_set_security+0x4a>

00027ade <bt_conn_get_security>:
}
   27ade:	7a40      	ldrb	r0, [r0, #9]
   27ae0:	4770      	bx	lr

00027ae2 <bt_conn_is_peer_addr_le>:
{
   27ae2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   27ae4:	7a03      	ldrb	r3, [r0, #8]
   27ae6:	428b      	cmp	r3, r1
{
   27ae8:	4604      	mov	r4, r0
   27aea:	4615      	mov	r5, r2
	if (id != conn->id) {
   27aec:	d115      	bne.n	27b1a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   27aee:	f100 0190 	add.w	r1, r0, #144	; 0x90
   27af2:	2207      	movs	r2, #7
   27af4:	4628      	mov	r0, r5
   27af6:	f7ff fb6d 	bl	271d4 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   27afa:	b180      	cbz	r0, 27b1e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   27afc:	78e3      	ldrb	r3, [r4, #3]
   27afe:	2207      	movs	r2, #7
   27b00:	b943      	cbnz	r3, 27b14 <bt_conn_is_peer_addr_le+0x32>
   27b02:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   27b06:	4628      	mov	r0, r5
   27b08:	f7ff fb64 	bl	271d4 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   27b0c:	fab0 f080 	clz	r0, r0
   27b10:	0940      	lsrs	r0, r0, #5
}
   27b12:	bd38      	pop	{r3, r4, r5, pc}
   27b14:	f104 0197 	add.w	r1, r4, #151	; 0x97
   27b18:	e7f5      	b.n	27b06 <bt_conn_is_peer_addr_le+0x24>
		return false;
   27b1a:	2000      	movs	r0, #0
   27b1c:	e7f9      	b.n	27b12 <bt_conn_is_peer_addr_le+0x30>
		return true;
   27b1e:	2001      	movs	r0, #1
   27b20:	e7f7      	b.n	27b12 <bt_conn_is_peer_addr_le+0x30>

00027b22 <bt_conn_le_conn_update>:
{
   27b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b24:	4607      	mov	r7, r0
   27b26:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   27b28:	f242 0013 	movw	r0, #8211	; 0x2013
   27b2c:	210e      	movs	r1, #14
   27b2e:	f7ed fde1 	bl	156f4 <bt_hci_cmd_create>
	if (!buf) {
   27b32:	4606      	mov	r6, r0
   27b34:	b1d0      	cbz	r0, 27b6c <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   27b36:	210e      	movs	r1, #14
   27b38:	3008      	adds	r0, #8
   27b3a:	f7f4 ff75 	bl	1ca28 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   27b3e:	220e      	movs	r2, #14
   27b40:	4604      	mov	r4, r0
   27b42:	2100      	movs	r1, #0
   27b44:	f7ff fb7a 	bl	2723c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   27b48:	883b      	ldrh	r3, [r7, #0]
   27b4a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   27b4c:	882b      	ldrh	r3, [r5, #0]
   27b4e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   27b50:	886b      	ldrh	r3, [r5, #2]
   27b52:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   27b54:	88ab      	ldrh	r3, [r5, #4]
   27b56:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   27b58:	88eb      	ldrh	r3, [r5, #6]
   27b5a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27b5c:	4631      	mov	r1, r6
   27b5e:	2200      	movs	r2, #0
}
   27b60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27b64:	f242 0013 	movw	r0, #8211	; 0x2013
   27b68:	f7ed be0c 	b.w	15784 <bt_hci_cmd_send_sync>
}
   27b6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027b72 <l2cap_connected>:
}
   27b72:	4770      	bx	lr

00027b74 <l2cap_disconnected>:
   27b74:	4770      	bx	lr

00027b76 <bt_l2cap_chan_del>:
{
   27b76:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   27b78:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   27b7c:	4604      	mov	r4, r0
	if (!chan->conn) {
   27b7e:	b123      	cbz	r3, 27b8a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   27b80:	686b      	ldr	r3, [r5, #4]
   27b82:	b103      	cbz	r3, 27b86 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   27b84:	4798      	blx	r3
	chan->conn = NULL;
   27b86:	2300      	movs	r3, #0
   27b88:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   27b8a:	68e3      	ldr	r3, [r4, #12]
   27b8c:	b10b      	cbz	r3, 27b92 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   27b8e:	4620      	mov	r0, r4
   27b90:	4798      	blx	r3
	if (ops->released) {
   27b92:	69eb      	ldr	r3, [r5, #28]
   27b94:	b11b      	cbz	r3, 27b9e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   27b96:	4620      	mov	r0, r4
}
   27b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   27b9c:	4718      	bx	r3
}
   27b9e:	bd70      	pop	{r4, r5, r6, pc}

00027ba0 <bt_l2cap_disconnected>:
	return list->head;
   27ba0:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
   27ba2:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27ba4:	b160      	cbz	r0, 27bc0 <bt_l2cap_disconnected+0x20>
	return node->next;
   27ba6:	f850 4908 	ldr.w	r4, [r0], #-8
   27baa:	b104      	cbz	r4, 27bae <bt_l2cap_disconnected+0xe>
   27bac:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   27bae:	f7ff ffe2 	bl	27b76 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27bb2:	b12c      	cbz	r4, 27bc0 <bt_l2cap_disconnected+0x20>
   27bb4:	68a3      	ldr	r3, [r4, #8]
   27bb6:	b103      	cbz	r3, 27bba <bt_l2cap_disconnected+0x1a>
   27bb8:	3b08      	subs	r3, #8
{
   27bba:	4620      	mov	r0, r4
   27bbc:	461c      	mov	r4, r3
   27bbe:	e7f6      	b.n	27bae <bt_l2cap_disconnected+0xe>
}
   27bc0:	bd10      	pop	{r4, pc}

00027bc2 <bt_l2cap_security_changed>:
	return list->head;
   27bc2:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
   27bc4:	b538      	push	{r3, r4, r5, lr}
   27bc6:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27bc8:	b178      	cbz	r0, 27bea <bt_l2cap_security_changed+0x28>
	return node->next;
   27bca:	f850 4908 	ldr.w	r4, [r0], #-8
   27bce:	b104      	cbz	r4, 27bd2 <bt_l2cap_security_changed+0x10>
   27bd0:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   27bd2:	6843      	ldr	r3, [r0, #4]
   27bd4:	689b      	ldr	r3, [r3, #8]
   27bd6:	b10b      	cbz	r3, 27bdc <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   27bd8:	4629      	mov	r1, r5
   27bda:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27bdc:	b12c      	cbz	r4, 27bea <bt_l2cap_security_changed+0x28>
   27bde:	68a3      	ldr	r3, [r4, #8]
   27be0:	b103      	cbz	r3, 27be4 <bt_l2cap_security_changed+0x22>
   27be2:	3b08      	subs	r3, #8
{
   27be4:	4620      	mov	r0, r4
   27be6:	461c      	mov	r4, r3
   27be8:	e7f3      	b.n	27bd2 <bt_l2cap_security_changed+0x10>
}
   27bea:	bd38      	pop	{r3, r4, r5, pc}

00027bec <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   27bec:	3104      	adds	r1, #4
   27bee:	f7ef be37 	b.w	17860 <bt_conn_create_pdu_timeout>

00027bf2 <bt_l2cap_send_cb>:
{
   27bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27bf6:	4614      	mov	r4, r2
   27bf8:	4605      	mov	r5, r0
   27bfa:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   27bfc:	f102 0008 	add.w	r0, r2, #8
   27c00:	2104      	movs	r1, #4
   27c02:	461e      	mov	r6, r3
   27c04:	f8dd 8018 	ldr.w	r8, [sp, #24]
   27c08:	f7f4 feb6 	bl	1c978 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27c0c:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   27c0e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27c10:	3a04      	subs	r2, #4
   27c12:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   27c14:	4643      	mov	r3, r8
   27c16:	4632      	mov	r2, r6
   27c18:	4621      	mov	r1, r4
   27c1a:	4628      	mov	r0, r5
}
   27c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   27c20:	f7ef bc64 	b.w	174ec <bt_conn_send_cb>

00027c24 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   27c24:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27c26:	b130      	cbz	r0, 27c36 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   27c28:	8b83      	ldrh	r3, [r0, #28]
   27c2a:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27c2c:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   27c30:	d001      	beq.n	27c36 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   27c32:	6880      	ldr	r0, [r0, #8]
   27c34:	e7f7      	b.n	27c26 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   27c36:	4770      	bx	lr

00027c38 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   27c38:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27c3a:	b130      	cbz	r0, 27c4a <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27c3c:	8983      	ldrh	r3, [r0, #12]
   27c3e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27c40:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27c44:	d001      	beq.n	27c4a <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   27c46:	6880      	ldr	r0, [r0, #8]
   27c48:	e7f7      	b.n	27c3a <bt_l2cap_le_lookup_rx_cid+0x2>
}
   27c4a:	4770      	bx	lr

00027c4c <bt_l2cap_init>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   27c4c:	4770      	bx	lr

00027c4e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   27c4e:	4603      	mov	r3, r0
	return list->head;
   27c50:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   27c52:	b128      	cbz	r0, 27c60 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27c54:	6859      	ldr	r1, [r3, #4]
	return node->next;
   27c56:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   27c58:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27c5a:	4288      	cmp	r0, r1
	list->tail = node;
   27c5c:	bf08      	it	eq
   27c5e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   27c60:	4770      	bx	lr

00027c62 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   27c62:	4603      	mov	r3, r0
	size_t bytes = 0;
   27c64:	2000      	movs	r0, #0

	while (buf) {
   27c66:	b903      	cbnz	r3, 27c6a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   27c68:	4770      	bx	lr
		bytes += buf->len;
   27c6a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   27c6c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   27c6e:	4410      	add	r0, r2
		buf = buf->frags;
   27c70:	e7f9      	b.n	27c66 <net_buf_frags_len+0x4>

00027c72 <attr_read_type_cb>:
{
   27c72:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   27c74:	68d4      	ldr	r4, [r2, #12]
   27c76:	7823      	ldrb	r3, [r4, #0]
   27c78:	3102      	adds	r1, #2
   27c7a:	b913      	cbnz	r3, 27c82 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   27c7c:	7021      	strb	r1, [r4, #0]
	return true;
   27c7e:	2001      	movs	r0, #1
   27c80:	e006      	b.n	27c90 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   27c82:	428b      	cmp	r3, r1
   27c84:	d0fb      	beq.n	27c7e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   27c86:	8983      	ldrh	r3, [r0, #12]
   27c88:	3b02      	subs	r3, #2
   27c8a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   27c8c:	2000      	movs	r0, #0
   27c8e:	6110      	str	r0, [r2, #16]
}
   27c90:	bd10      	pop	{r4, pc}

00027c92 <att_prepare_write_req>:
}
   27c92:	2006      	movs	r0, #6
   27c94:	4770      	bx	lr

00027c96 <att_op_get_type>:
	switch (op) {
   27c96:	2852      	cmp	r0, #82	; 0x52
   27c98:	d830      	bhi.n	27cfc <att_op_get_type+0x66>
   27c9a:	b388      	cbz	r0, 27d00 <att_op_get_type+0x6a>
   27c9c:	1e43      	subs	r3, r0, #1
   27c9e:	2b51      	cmp	r3, #81	; 0x51
   27ca0:	d82e      	bhi.n	27d00 <att_op_get_type+0x6a>
   27ca2:	e8df f003 	tbb	[pc, r3]
   27ca6:	3933      	.short	0x3933
   27ca8:	39333933 	.word	0x39333933
   27cac:	39333933 	.word	0x39333933
   27cb0:	39333933 	.word	0x39333933
   27cb4:	39333933 	.word	0x39333933
   27cb8:	392d2d33 	.word	0x392d2d33
   27cbc:	2d333933 	.word	0x2d333933
   27cc0:	29372d35 	.word	0x29372d35
   27cc4:	2d33392d 	.word	0x2d33392d
   27cc8:	2d2d2d35 	.word	0x2d2d2d35
   27ccc:	2d2d2d2d 	.word	0x2d2d2d2d
   27cd0:	2d2d2d2d 	.word	0x2d2d2d2d
   27cd4:	2d2d2d2d 	.word	0x2d2d2d2d
   27cd8:	2d2d2d2d 	.word	0x2d2d2d2d
   27cdc:	2d2d2d2d 	.word	0x2d2d2d2d
   27ce0:	2d2d2d2d 	.word	0x2d2d2d2d
   27ce4:	2d2d2d2d 	.word	0x2d2d2d2d
   27ce8:	2d2d2d2d 	.word	0x2d2d2d2d
   27cec:	2d2d2d2d 	.word	0x2d2d2d2d
   27cf0:	2d2d2d2d 	.word	0x2d2d2d2d
   27cf4:	3b2d2d2d 	.word	0x3b2d2d2d
   27cf8:	2004      	movs	r0, #4
   27cfa:	4770      	bx	lr
   27cfc:	28d2      	cmp	r0, #210	; 0xd2
   27cfe:	d00d      	beq.n	27d1c <att_op_get_type+0x86>
		return ATT_COMMAND;
   27d00:	f010 0f40 	tst.w	r0, #64	; 0x40
   27d04:	bf0c      	ite	eq
   27d06:	2006      	moveq	r0, #6
   27d08:	2000      	movne	r0, #0
   27d0a:	4770      	bx	lr
		return ATT_RESPONSE;
   27d0c:	2002      	movs	r0, #2
   27d0e:	4770      	bx	lr
		return ATT_NOTIFICATION;
   27d10:	2003      	movs	r0, #3
   27d12:	4770      	bx	lr
		return ATT_INDICATION;
   27d14:	2005      	movs	r0, #5
   27d16:	4770      	bx	lr
		return ATT_REQUEST;
   27d18:	2001      	movs	r0, #1
   27d1a:	4770      	bx	lr
		return ATT_COMMAND;
   27d1c:	2000      	movs	r0, #0
}
   27d1e:	4770      	bx	lr

00027d20 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27d20:	f3bf 8f5b 	dmb	ish
   27d24:	6800      	ldr	r0, [r0, #0]
   27d26:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27d2a:	4108      	asrs	r0, r1
}
   27d2c:	f000 0001 	and.w	r0, r0, #1
   27d30:	4770      	bx	lr

00027d32 <bt_gatt_foreach_attr>:
{
   27d32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   27d34:	e9cd 2301 	strd	r2, r3, [sp, #4]
   27d38:	2300      	movs	r3, #0
   27d3a:	9300      	str	r3, [sp, #0]
   27d3c:	461a      	mov	r2, r3
   27d3e:	f7f1 ff1f 	bl	19b80 <bt_gatt_foreach_attr_type>
}
   27d42:	b005      	add	sp, #20
   27d44:	f85d fb04 	ldr.w	pc, [sp], #4

00027d48 <find_info_cb>:
{
   27d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   27d4a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   27d4c:	6817      	ldr	r7, [r2, #0]
{
   27d4e:	4605      	mov	r5, r0
   27d50:	460e      	mov	r6, r1
   27d52:	4614      	mov	r4, r2
	if (!data->rsp) {
   27d54:	b963      	cbnz	r3, 27d70 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   27d56:	6850      	ldr	r0, [r2, #4]
   27d58:	2101      	movs	r1, #1
   27d5a:	3008      	adds	r0, #8
   27d5c:	f7f4 fe64 	bl	1ca28 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27d60:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   27d62:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27d64:	781b      	ldrb	r3, [r3, #0]
   27d66:	2b00      	cmp	r3, #0
   27d68:	bf0c      	ite	eq
   27d6a:	2301      	moveq	r3, #1
   27d6c:	2302      	movne	r3, #2
   27d6e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   27d70:	68a3      	ldr	r3, [r4, #8]
   27d72:	781b      	ldrb	r3, [r3, #0]
   27d74:	2b01      	cmp	r3, #1
   27d76:	d003      	beq.n	27d80 <find_info_cb+0x38>
   27d78:	2b02      	cmp	r3, #2
   27d7a:	d018      	beq.n	27dae <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   27d7c:	2000      	movs	r0, #0
   27d7e:	e015      	b.n	27dac <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   27d80:	682b      	ldr	r3, [r5, #0]
   27d82:	781b      	ldrb	r3, [r3, #0]
   27d84:	2b00      	cmp	r3, #0
   27d86:	d1f9      	bne.n	27d7c <find_info_cb+0x34>
   27d88:	6860      	ldr	r0, [r4, #4]
   27d8a:	2104      	movs	r1, #4
   27d8c:	3008      	adds	r0, #8
   27d8e:	f7f4 fe4b 	bl	1ca28 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   27d92:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   27d94:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   27d96:	885b      	ldrh	r3, [r3, #2]
   27d98:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   27d9a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   27d9c:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   27d9e:	899b      	ldrh	r3, [r3, #12]
   27da0:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   27da2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   27da4:	2804      	cmp	r0, #4
   27da6:	bf94      	ite	ls
   27da8:	2000      	movls	r0, #0
   27daa:	2001      	movhi	r0, #1
}
   27dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   27dae:	682b      	ldr	r3, [r5, #0]
   27db0:	781b      	ldrb	r3, [r3, #0]
   27db2:	2b02      	cmp	r3, #2
   27db4:	d1e2      	bne.n	27d7c <find_info_cb+0x34>
   27db6:	6860      	ldr	r0, [r4, #4]
   27db8:	2112      	movs	r1, #18
   27dba:	3008      	adds	r0, #8
   27dbc:	f7f4 fe34 	bl	1ca28 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   27dc0:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   27dc2:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   27dc4:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   27dc6:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   27dca:	3101      	adds	r1, #1
   27dcc:	f7ff fa2b 	bl	27226 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   27dd0:	6863      	ldr	r3, [r4, #4]
   27dd2:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   27dd4:	899b      	ldrh	r3, [r3, #12]
   27dd6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   27dd8:	2812      	cmp	r0, #18
   27dda:	e7e4      	b.n	27da6 <find_info_cb+0x5e>

00027ddc <att_chan_mtu_updated>:
{
   27ddc:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   27dde:	6806      	ldr	r6, [r0, #0]
	return list->head;
   27de0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27de2:	b1c3      	cbz	r3, 27e16 <att_chan_mtu_updated+0x3a>
   27de4:	461a      	mov	r2, r3
	return node->next;
   27de6:	f852 49f0 	ldr.w	r4, [r2], #-240
   27dea:	b104      	cbz	r4, 27dee <att_chan_mtu_updated+0x12>
   27dec:	3cf0      	subs	r4, #240	; 0xf0
{
   27dee:	2300      	movs	r3, #0
   27df0:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   27df2:	4290      	cmp	r0, r2
   27df4:	d007      	beq.n	27e06 <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   27df6:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   27df8:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   27dfa:	42a9      	cmp	r1, r5
   27dfc:	bf38      	it	cc
   27dfe:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   27e00:	4293      	cmp	r3, r2
   27e02:	bf38      	it	cc
   27e04:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27e06:	b13c      	cbz	r4, 27e18 <att_chan_mtu_updated+0x3c>
   27e08:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   27e0c:	b105      	cbz	r5, 27e10 <att_chan_mtu_updated+0x34>
   27e0e:	3df0      	subs	r5, #240	; 0xf0
{
   27e10:	4622      	mov	r2, r4
   27e12:	462c      	mov	r4, r5
   27e14:	e7ed      	b.n	27df2 <att_chan_mtu_updated+0x16>
   27e16:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27e18:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   27e1a:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27e1c:	428c      	cmp	r4, r1
   27e1e:	d801      	bhi.n	27e24 <att_chan_mtu_updated+0x48>
   27e20:	429a      	cmp	r2, r3
   27e22:	d909      	bls.n	27e38 <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   27e24:	429a      	cmp	r2, r3
   27e26:	bf38      	it	cc
   27e28:	461a      	movcc	r2, r3
   27e2a:	42a1      	cmp	r1, r4
   27e2c:	6830      	ldr	r0, [r6, #0]
   27e2e:	bf38      	it	cc
   27e30:	4621      	movcc	r1, r4
}
   27e32:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   27e34:	f7f2 bca4 	b.w	1a780 <bt_gatt_att_max_mtu_changed>
}
   27e38:	bc70      	pop	{r4, r5, r6}
   27e3a:	4770      	bx	lr

00027e3c <attr_read_group_cb>:
	if (!data->rsp->len) {
   27e3c:	68d0      	ldr	r0, [r2, #12]
   27e3e:	7803      	ldrb	r3, [r0, #0]
   27e40:	3104      	adds	r1, #4
   27e42:	b913      	cbnz	r3, 27e4a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   27e44:	7001      	strb	r1, [r0, #0]
	return true;
   27e46:	2001      	movs	r0, #1
}
   27e48:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   27e4a:	428b      	cmp	r3, r1
   27e4c:	d0fb      	beq.n	27e46 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   27e4e:	6891      	ldr	r1, [r2, #8]
   27e50:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   27e52:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   27e54:	3b04      	subs	r3, #4
   27e56:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   27e58:	6110      	str	r0, [r2, #16]
		return false;
   27e5a:	4770      	bx	lr

00027e5c <write_cb>:
{
   27e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27e5e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   27e60:	4601      	mov	r1, r0
{
   27e62:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   27e64:	f44f 7295 	mov.w	r2, #298	; 0x12a
   27e68:	6820      	ldr	r0, [r4, #0]
   27e6a:	f000 fdf2 	bl	28a52 <bt_gatt_check_perm>
   27e6e:	4605      	mov	r5, r0
   27e70:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   27e72:	bb20      	cbnz	r0, 27ebe <write_cb+0x62>
	if (!data->req) {
   27e74:	7a23      	ldrb	r3, [r4, #8]
   27e76:	b1ab      	cbz	r3, 27ea4 <write_cb+0x48>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   27e78:	2b18      	cmp	r3, #24
   27e7a:	bf14      	ite	ne
   27e7c:	2300      	movne	r3, #0
   27e7e:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   27e80:	9301      	str	r3, [sp, #4]
   27e82:	8a63      	ldrh	r3, [r4, #18]
   27e84:	9300      	str	r3, [sp, #0]
   27e86:	68b7      	ldr	r7, [r6, #8]
   27e88:	8a23      	ldrh	r3, [r4, #16]
   27e8a:	68e2      	ldr	r2, [r4, #12]
   27e8c:	6820      	ldr	r0, [r4, #0]
   27e8e:	4631      	mov	r1, r6
   27e90:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   27e92:	1e03      	subs	r3, r0, #0
   27e94:	db08      	blt.n	27ea8 <write_cb+0x4c>
   27e96:	8a22      	ldrh	r2, [r4, #16]
   27e98:	4293      	cmp	r3, r2
   27e9a:	d10e      	bne.n	27eba <write_cb+0x5e>
	data->err = 0U;
   27e9c:	2300      	movs	r3, #0
   27e9e:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   27ea0:	2501      	movs	r5, #1
   27ea2:	e007      	b.n	27eb4 <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   27ea4:	2302      	movs	r3, #2
   27ea6:	e7eb      	b.n	27e80 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   27ea8:	f113 0fff 	cmn.w	r3, #255	; 0xff
   27eac:	d305      	bcc.n	27eba <write_cb+0x5e>
		return -err;
   27eae:	425b      	negs	r3, r3
   27eb0:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   27eb2:	7523      	strb	r3, [r4, #20]
}
   27eb4:	4628      	mov	r0, r5
   27eb6:	b003      	add	sp, #12
   27eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   27eba:	230e      	movs	r3, #14
   27ebc:	e7f9      	b.n	27eb2 <write_cb+0x56>
		return BT_GATT_ITER_STOP;
   27ebe:	2500      	movs	r5, #0
   27ec0:	e7f8      	b.n	27eb4 <write_cb+0x58>

00027ec2 <att_chan_read>:
{
   27ec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ec6:	4680      	mov	r8, r0
   27ec8:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27eca:	4610      	mov	r0, r2
{
   27ecc:	4699      	mov	r9, r3
   27ece:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27ed0:	f7ff fec7 	bl	27c62 <net_buf_frags_len>
   27ed4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   27ed8:	4283      	cmp	r3, r0
{
   27eda:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27edc:	d97a      	bls.n	27fd4 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   27ede:	f8d8 3004 	ldr.w	r3, [r8, #4]
   27ee2:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   27ee4:	4630      	mov	r0, r6
   27ee6:	f7f4 fce5 	bl	1c8b4 <net_buf_frag_last>
	size_t len, total = 0;
   27eea:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   27eee:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27ef0:	4630      	mov	r0, r6
   27ef2:	f7ff feb6 	bl	27c62 <net_buf_frags_len>
   27ef6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   27efa:	f105 0708 	add.w	r7, r5, #8
   27efe:	1a24      	subs	r4, r4, r0
   27f00:	4638      	mov	r0, r7
   27f02:	f001 f9f9 	bl	292f8 <net_buf_simple_tailroom>
   27f06:	4284      	cmp	r4, r0
   27f08:	d211      	bcs.n	27f2e <att_chan_read+0x6c>
   27f0a:	4630      	mov	r0, r6
   27f0c:	f7ff fea9 	bl	27c62 <net_buf_frags_len>
   27f10:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   27f14:	1a24      	subs	r4, r4, r0
		if (!len) {
   27f16:	bb34      	cbnz	r4, 27f66 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   27f18:	79b0      	ldrb	r0, [r6, #6]
   27f1a:	f7f4 f9dd 	bl	1c2d8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   27f1e:	2200      	movs	r2, #0
   27f20:	2300      	movs	r3, #0
   27f22:	f001 f9d8 	bl	292d6 <net_buf_alloc_fixed>
			if (!frag) {
   27f26:	4605      	mov	r5, r0
   27f28:	b930      	cbnz	r0, 27f38 <att_chan_read+0x76>
	return total;
   27f2a:	4657      	mov	r7, sl
   27f2c:	e02c      	b.n	27f88 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   27f2e:	4638      	mov	r0, r7
   27f30:	f001 f9e2 	bl	292f8 <net_buf_simple_tailroom>
   27f34:	4604      	mov	r4, r0
   27f36:	e7ee      	b.n	27f16 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   27f38:	4601      	mov	r1, r0
   27f3a:	4630      	mov	r0, r6
   27f3c:	f7f4 fcfa 	bl	1c934 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27f40:	4630      	mov	r0, r6
   27f42:	f7ff fe8e 	bl	27c62 <net_buf_frags_len>
   27f46:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   27f4a:	f105 0708 	add.w	r7, r5, #8
   27f4e:	1a24      	subs	r4, r4, r0
   27f50:	4638      	mov	r0, r7
   27f52:	f001 f9d1 	bl	292f8 <net_buf_simple_tailroom>
   27f56:	4284      	cmp	r4, r0
   27f58:	d21a      	bcs.n	27f90 <att_chan_read+0xce>
   27f5a:	4630      	mov	r0, r6
   27f5c:	f7ff fe81 	bl	27c62 <net_buf_frags_len>
   27f60:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   27f64:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   27f66:	68a9      	ldr	r1, [r5, #8]
   27f68:	89aa      	ldrh	r2, [r5, #12]
   27f6a:	f8db 7004 	ldr.w	r7, [fp, #4]
   27f6e:	9803      	ldr	r0, [sp, #12]
   27f70:	f8cd 9000 	str.w	r9, [sp]
   27f74:	440a      	add	r2, r1
   27f76:	b2a3      	uxth	r3, r4
   27f78:	4659      	mov	r1, fp
   27f7a:	47b8      	blx	r7
		if (read < 0) {
   27f7c:	1e07      	subs	r7, r0, #0
   27f7e:	da0c      	bge.n	27f9a <att_chan_read+0xd8>
				return total;
   27f80:	f1ba 0f00 	cmp.w	sl, #0
   27f84:	bf18      	it	ne
   27f86:	4657      	movne	r7, sl
}
   27f88:	4638      	mov	r0, r7
   27f8a:	b005      	add	sp, #20
   27f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f90:	4638      	mov	r0, r7
   27f92:	f001 f9b1 	bl	292f8 <net_buf_simple_tailroom>
   27f96:	4604      	mov	r4, r0
   27f98:	e7e5      	b.n	27f66 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   27f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27f9c:	b993      	cbnz	r3, 27fc4 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   27f9e:	4639      	mov	r1, r7
   27fa0:	f105 0008 	add.w	r0, r5, #8
   27fa4:	f7f4 fd40 	bl	1ca28 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27fa8:	4630      	mov	r0, r6
   27faa:	f7ff fe5a 	bl	27c62 <net_buf_frags_len>
   27fae:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   27fb2:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27fb4:	4283      	cmp	r3, r0
		total += read;
   27fb6:	44ba      	add	sl, r7
		offset += read;
   27fb8:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27fbc:	d9b5      	bls.n	27f2a <att_chan_read+0x68>
   27fbe:	42a7      	cmp	r7, r4
   27fc0:	d096      	beq.n	27ef0 <att_chan_read+0x2e>
   27fc2:	e7b2      	b.n	27f2a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   27fc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   27fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27fc8:	4639      	mov	r1, r7
   27fca:	4628      	mov	r0, r5
   27fcc:	4798      	blx	r3
   27fce:	2800      	cmp	r0, #0
   27fd0:	d1e5      	bne.n	27f9e <att_chan_read+0xdc>
   27fd2:	e7aa      	b.n	27f2a <att_chan_read+0x68>
		return 0;
   27fd4:	2700      	movs	r7, #0
   27fd6:	e7d7      	b.n	27f88 <att_chan_read+0xc6>

00027fd8 <process_queue>:
{
   27fd8:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   27fda:	2200      	movs	r2, #0
{
   27fdc:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   27fde:	2300      	movs	r3, #0
   27fe0:	4608      	mov	r0, r1
{
   27fe2:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   27fe4:	f7f4 faba 	bl	1c55c <net_buf_get>
	if (buf) {
   27fe8:	4605      	mov	r5, r0
   27fea:	b158      	cbz	r0, 28004 <process_queue+0x2c>
	return chan_send(chan, buf);
   27fec:	4601      	mov	r1, r0
   27fee:	4620      	mov	r0, r4
   27ff0:	f7f0 fa2a 	bl	18448 <chan_send>
		if (err) {
   27ff4:	4604      	mov	r4, r0
   27ff6:	b118      	cbz	r0, 28000 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   27ff8:	4629      	mov	r1, r5
   27ffa:	4630      	mov	r0, r6
   27ffc:	f001 fc84 	bl	29908 <k_queue_prepend>
}
   28000:	4620      	mov	r0, r4
   28002:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   28004:	f06f 0401 	mvn.w	r4, #1
   28008:	e7fa      	b.n	28000 <process_queue+0x28>

0002800a <bt_att_chan_send_rsp>:
{
   2800a:	b538      	push	{r3, r4, r5, lr}
   2800c:	4604      	mov	r4, r0
   2800e:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   28010:	f7f0 fa1a 	bl	18448 <chan_send>
	if (err) {
   28014:	b130      	cbz	r0, 28024 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   28016:	4629      	mov	r1, r5
   28018:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   2801c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   28020:	f7f4 bbbe 	b.w	1c7a0 <net_buf_put>
}
   28024:	bd38      	pop	{r3, r4, r5, pc}

00028026 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28026:	b510      	push	{r4, lr}
	return list->head;
   28028:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2802a:	2200      	movs	r2, #0
   2802c:	b153      	cbz	r3, 28044 <sys_slist_find_and_remove.isra.0+0x1e>
   2802e:	428b      	cmp	r3, r1
   28030:	d10e      	bne.n	28050 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   28032:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   28034:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   28036:	b932      	cbnz	r2, 28046 <sys_slist_find_and_remove.isra.0+0x20>
   28038:	42a1      	cmp	r1, r4
	list->head = node;
   2803a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2803c:	d100      	bne.n	28040 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2803e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   28040:	2300      	movs	r3, #0
   28042:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28044:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   28046:	42a1      	cmp	r1, r4
	parent->next = child;
   28048:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2804a:	bf08      	it	eq
   2804c:	6042      	streq	r2, [r0, #4]
}
   2804e:	e7f7      	b.n	28040 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   28050:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28052:	681b      	ldr	r3, [r3, #0]
   28054:	e7ea      	b.n	2802c <sys_slist_find_and_remove.isra.0+0x6>

00028056 <att_exec_write_req>:
   28056:	2006      	movs	r0, #6
   28058:	4770      	bx	lr

0002805a <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2805a:	2301      	movs	r3, #1
   2805c:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28060:	f3bf 8f5b 	dmb	ish
   28064:	e850 3f00 	ldrex	r3, [r0]
   28068:	ea43 0201 	orr.w	r2, r3, r1
   2806c:	e840 2c00 	strex	ip, r2, [r0]
   28070:	f1bc 0f00 	cmp.w	ip, #0
   28074:	d1f6      	bne.n	28064 <atomic_test_and_set_bit+0xa>
   28076:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2807a:	4219      	tst	r1, r3
}
   2807c:	bf14      	ite	ne
   2807e:	2001      	movne	r0, #1
   28080:	2000      	moveq	r0, #0
   28082:	4770      	bx	lr

00028084 <read_cb>:
{
   28084:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   28088:	f8d2 8000 	ldr.w	r8, [r2]
{
   2808c:	4606      	mov	r6, r0
	data->err = 0x00;
   2808e:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   28090:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   28094:	7317      	strb	r7, [r2, #12]
{
   28096:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28098:	4631      	mov	r1, r6
   2809a:	2295      	movs	r2, #149	; 0x95
   2809c:	f000 fcd9 	bl	28a52 <bt_gatt_check_perm>
   280a0:	4604      	mov	r4, r0
   280a2:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   280a4:	b9a0      	cbnz	r0, 280d0 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   280a6:	e9cd 0000 	strd	r0, r0, [sp]
   280aa:	88ab      	ldrh	r3, [r5, #4]
   280ac:	68aa      	ldr	r2, [r5, #8]
   280ae:	4631      	mov	r1, r6
   280b0:	4640      	mov	r0, r8
   280b2:	f7ff ff06 	bl	27ec2 <att_chan_read>
	if (ret < 0) {
   280b6:	1e03      	subs	r3, r0, #0
   280b8:	da0c      	bge.n	280d4 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   280ba:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   280be:	bf26      	itte	cs
   280c0:	425b      	negcs	r3, r3
   280c2:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   280c4:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   280c6:	732b      	strb	r3, [r5, #12]
}
   280c8:	4620      	mov	r0, r4
   280ca:	b002      	add	sp, #8
   280cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   280d0:	463c      	mov	r4, r7
   280d2:	e7f9      	b.n	280c8 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   280d4:	2401      	movs	r4, #1
   280d6:	e7f7      	b.n	280c8 <read_cb+0x44>

000280d8 <read_vl_cb>:
{
   280d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   280dc:	f8d2 8000 	ldr.w	r8, [r2]
{
   280e0:	4606      	mov	r6, r0
	data->err = 0x00;
   280e2:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   280e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   280e8:	7317      	strb	r7, [r2, #12]
{
   280ea:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   280ec:	4631      	mov	r1, r6
   280ee:	2295      	movs	r2, #149	; 0x95
   280f0:	f000 fcaf 	bl	28a52 <bt_gatt_check_perm>
   280f4:	4604      	mov	r4, r0
   280f6:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   280f8:	bb18      	cbnz	r0, 28142 <read_vl_cb+0x6a>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   280fa:	68a8      	ldr	r0, [r5, #8]
   280fc:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   28100:	8982      	ldrh	r2, [r0, #12]
   28102:	1a9b      	subs	r3, r3, r2
   28104:	2b01      	cmp	r3, #1
   28106:	dd15      	ble.n	28134 <read_vl_cb+0x5c>
   28108:	2102      	movs	r1, #2
   2810a:	3008      	adds	r0, #8
   2810c:	f7f4 fc8c 	bl	1ca28 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   28110:	88ab      	ldrh	r3, [r5, #4]
   28112:	68aa      	ldr	r2, [r5, #8]
   28114:	e9cd 4400 	strd	r4, r4, [sp]
   28118:	4607      	mov	r7, r0
   2811a:	4631      	mov	r1, r6
   2811c:	4640      	mov	r0, r8
   2811e:	f7ff fed0 	bl	27ec2 <att_chan_read>
	if (read < 0) {
   28122:	1e03      	subs	r3, r0, #0
   28124:	da0a      	bge.n	2813c <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   28126:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2812a:	bf26      	itte	cs
   2812c:	425b      	negcs	r3, r3
   2812e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   28130:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   28132:	732b      	strb	r3, [r5, #12]
}
   28134:	4620      	mov	r0, r4
   28136:	b002      	add	sp, #8
   28138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   2813c:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2813e:	2401      	movs	r4, #1
   28140:	e7f8      	b.n	28134 <read_vl_cb+0x5c>
		return BT_GATT_ITER_STOP;
   28142:	463c      	mov	r4, r7
   28144:	e7f6      	b.n	28134 <read_vl_cb+0x5c>

00028146 <bt_att_sent>:
{
   28146:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2814a:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2814c:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2814e:	f100 0394 	add.w	r3, r0, #148	; 0x94
	struct bt_att *att = chan->att;
   28152:	f850 6c04 	ldr.w	r6, [r0, #-4]
   28156:	f3bf 8f5b 	dmb	ish
   2815a:	e853 2f00 	ldrex	r2, [r3]
   2815e:	f022 0210 	bic.w	r2, r2, #16
   28162:	e843 2100 	strex	r1, r2, [r3]
   28166:	2900      	cmp	r1, #0
   28168:	d1f7      	bne.n	2815a <bt_att_sent+0x14>
   2816a:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2816e:	b3a6      	cbz	r6, 281da <bt_att_sent+0x94>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   28170:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
   28174:	f1b8 0f00 	cmp.w	r8, #0
   28178:	d113      	bne.n	281a2 <bt_att_sent+0x5c>
   2817a:	6873      	ldr	r3, [r6, #4]
   2817c:	b18b      	cbz	r3, 281a2 <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2817e:	1d30      	adds	r0, r6, #4
   28180:	f7ff fd65 	bl	27c4e <sys_slist_get>
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   28184:	f8d0 9008 	ldr.w	r9, [r0, #8]
		sys_snode_t *node = sys_slist_get(&att->reqs);
   28188:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2818a:	4648      	mov	r0, r9
   2818c:	f7ff fd69 	bl	27c62 <net_buf_frags_len>
   28190:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   28192:	4283      	cmp	r3, r0
   28194:	d212      	bcs.n	281bc <bt_att_sent+0x76>
	parent->next = child;
   28196:	6873      	ldr	r3, [r6, #4]
   28198:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2819a:	68b3      	ldr	r3, [r6, #8]
	list->head = node;
   2819c:	6075      	str	r5, [r6, #4]
Z_GENLIST_PREPEND(slist, snode)
   2819e:	b903      	cbnz	r3, 281a2 <bt_att_sent+0x5c>
	list->tail = node;
   281a0:	60b5      	str	r5, [r6, #8]
	err = process_queue(chan, &chan->tx_queue);
   281a2:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   281a6:	4638      	mov	r0, r7
   281a8:	f7ff ff16 	bl	27fd8 <process_queue>
	if (!err) {
   281ac:	b1a8      	cbz	r0, 281da <bt_att_sent+0x94>
	(void)process_queue(chan, &att->tx_queue);
   281ae:	f106 010c 	add.w	r1, r6, #12
   281b2:	4638      	mov	r0, r7
}
   281b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	(void)process_queue(chan, &att->tx_queue);
   281b8:	f7ff bf0e 	b.w	27fd8 <process_queue>
	chan->req = req;
   281bc:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	return chan_send(chan, buf);
   281c0:	4649      	mov	r1, r9
	req->buf = NULL;
   281c2:	f8c5 8008 	str.w	r8, [r5, #8]
	return chan_send(chan, buf);
   281c6:	4638      	mov	r0, r7
   281c8:	f7f0 f93e 	bl	18448 <chan_send>
	if (err) {
   281cc:	2800      	cmp	r0, #0
   281ce:	d004      	beq.n	281da <bt_att_sent+0x94>
		req->buf = buf;
   281d0:	f8c5 9008 	str.w	r9, [r5, #8]
		chan->req = NULL;
   281d4:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   281d8:	dbdd      	blt.n	28196 <bt_att_sent+0x50>
}
   281da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000281de <att_req_send_process>:
{
   281de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   281e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
   281e4:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   281e6:	2c00      	cmp	r4, #0
   281e8:	d03b      	beq.n	28262 <att_req_send_process+0x84>
	return node->next;
   281ea:	f854 59f0 	ldr.w	r5, [r4], #-240
   281ee:	b105      	cbz	r5, 281f2 <att_req_send_process+0x14>
   281f0:	3df0      	subs	r5, #240	; 0xf0
{
   281f2:	2300      	movs	r3, #0
   281f4:	461e      	mov	r6, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   281f6:	f108 0704 	add.w	r7, r8, #4
		if (chan->req) {
   281fa:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   281fe:	b9e2      	cbnz	r2, 2823a <att_req_send_process+0x5c>
		if (!req && prev &&
   28200:	b16e      	cbz	r6, 2821e <att_req_send_process+0x40>
	sys_snode_t *node = sys_slist_get(reqs);
   28202:	4638      	mov	r0, r7
   28204:	f7ff fd23 	bl	27c4e <sys_slist_get>
	if (node) {
   28208:	4606      	mov	r6, r0
   2820a:	b9c0      	cbnz	r0, 2823e <att_req_send_process+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2820c:	b34d      	cbz	r5, 28262 <att_req_send_process+0x84>
   2820e:	f8d5 20f0 	ldr.w	r2, [r5, #240]	; 0xf0
   28212:	b102      	cbz	r2, 28216 <att_req_send_process+0x38>
   28214:	3af0      	subs	r2, #240	; 0xf0
{
   28216:	4623      	mov	r3, r4
   28218:	462c      	mov	r4, r5
   2821a:	4615      	mov	r5, r2
   2821c:	e7ed      	b.n	281fa <att_req_send_process+0x1c>
		if (!req && prev &&
   2821e:	2b00      	cmp	r3, #0
   28220:	d0ef      	beq.n	28202 <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   28222:	2103      	movs	r1, #3
   28224:	f104 0098 	add.w	r0, r4, #152	; 0x98
   28228:	f7ff fd7a 	bl	27d20 <atomic_test_bit>
   2822c:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2822e:	f103 0098 	add.w	r0, r3, #152	; 0x98
   28232:	f7ff fd75 	bl	27d20 <atomic_test_bit>
		if (!req && prev &&
   28236:	4282      	cmp	r2, r0
   28238:	d1e3      	bne.n	28202 <att_req_send_process+0x24>
   2823a:	461c      	mov	r4, r3
   2823c:	e7e6      	b.n	2820c <att_req_send_process+0x2e>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2823e:	4601      	mov	r1, r0
   28240:	4620      	mov	r0, r4
   28242:	f7f0 f965 	bl	18510 <bt_att_chan_req_send>
   28246:	2800      	cmp	r0, #0
   28248:	da0b      	bge.n	28262 <att_req_send_process+0x84>
	parent->next = child;
   2824a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2824e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   28250:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   28254:	f8c8 6004 	str.w	r6, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   28258:	2b00      	cmp	r3, #0
   2825a:	d1d7      	bne.n	2820c <att_req_send_process+0x2e>
	list->tail = node;
   2825c:	f8c8 6008 	str.w	r6, [r8, #8]
}
   28260:	e7d4      	b.n	2820c <att_req_send_process+0x2e>
}
   28262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028266 <bt_att_status>:
{
   28266:	b538      	push	{r3, r4, r5, lr}
   28268:	4605      	mov	r5, r0
   2826a:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2826c:	2100      	movs	r1, #0
   2826e:	f7ff fd57 	bl	27d20 <atomic_test_bit>
   28272:	b1c0      	cbz	r0, 282a6 <bt_att_status+0x40>
	if (!chan->att) {
   28274:	f855 0c04 	ldr.w	r0, [r5, #-4]
   28278:	b1a8      	cbz	r0, 282a6 <bt_att_status+0x40>
	if (chan->req) {
   2827a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2827e:	b993      	cbnz	r3, 282a6 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   28280:	3004      	adds	r0, #4
   28282:	f7ff fce4 	bl	27c4e <sys_slist_get>
	if (!node) {
   28286:	4604      	mov	r4, r0
   28288:	b168      	cbz	r0, 282a6 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2828a:	4601      	mov	r1, r0
   2828c:	1f28      	subs	r0, r5, #4
   2828e:	f7f0 f93f 	bl	18510 <bt_att_chan_req_send>
   28292:	2800      	cmp	r0, #0
   28294:	da07      	bge.n	282a6 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   28296:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   2829a:	685a      	ldr	r2, [r3, #4]
   2829c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2829e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   282a0:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   282a2:	b902      	cbnz	r2, 282a6 <bt_att_status+0x40>
	list->tail = node;
   282a4:	609c      	str	r4, [r3, #8]
}
   282a6:	bd38      	pop	{r3, r4, r5, pc}

000282a8 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   282a8:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   282aa:	6883      	ldr	r3, [r0, #8]
   282ac:	695b      	ldr	r3, [r3, #20]
   282ae:	b10b      	cbz	r3, 282b4 <att_sent+0xc>
		chan->ops->sent(chan);
   282b0:	3004      	adds	r0, #4
   282b2:	4718      	bx	r3
}
   282b4:	4770      	bx	lr

000282b6 <att_unknown>:
{
   282b6:	b510      	push	{r4, lr}
   282b8:	460c      	mov	r4, r1
	if (!err) {
   282ba:	b90a      	cbnz	r2, 282c0 <att_unknown+0xa>
		att_sent(conn, user_data);
   282bc:	f7ff fff4 	bl	282a8 <att_sent>
	tx_meta_data_free(user_data);
   282c0:	4620      	mov	r0, r4
}
   282c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   282c6:	f7ef bf85 	b.w	181d4 <tx_meta_data_free>

000282ca <att_tx_complete>:
{
   282ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   282ce:	4606      	mov	r6, r0
   282d0:	460d      	mov	r5, r1
	if (!err) {
   282d2:	4614      	mov	r4, r2
   282d4:	b90a      	cbnz	r2, 282da <att_tx_complete+0x10>
		att_sent(conn, user_data);
   282d6:	f7ff ffe7 	bl	282a8 <att_sent>
	tx_meta_data_free(data);
   282da:	4628      	mov	r0, r5
	bt_gatt_complete_func_t func = data->func;
   282dc:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   282de:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   282e2:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   282e6:	f7ef ff75 	bl	181d4 <tx_meta_data_free>
	if (!err && func) {
   282ea:	b904      	cbnz	r4, 282ee <att_tx_complete+0x24>
   282ec:	b92f      	cbnz	r7, 282fa <att_tx_complete+0x30>
}
   282ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   282f2:	4649      	mov	r1, r9
   282f4:	4630      	mov	r0, r6
   282f6:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   282f8:	3401      	adds	r4, #1
   282fa:	b2a3      	uxth	r3, r4
   282fc:	4598      	cmp	r8, r3
   282fe:	d8f8      	bhi.n	282f2 <att_tx_complete+0x28>
   28300:	e7f5      	b.n	282ee <att_tx_complete+0x24>

00028302 <att_req_sent>:
{
   28302:	b510      	push	{r4, lr}
   28304:	460c      	mov	r4, r1
	if (!err) {
   28306:	b90a      	cbnz	r2, 2830c <att_req_sent+0xa>
		att_sent(conn, user_data);
   28308:	f7ff ffce 	bl	282a8 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2830c:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2830e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   28312:	b12b      	cbz	r3, 28320 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   28314:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   28318:	2300      	movs	r3, #0
   2831a:	30c0      	adds	r0, #192	; 0xc0
   2831c:	f7f8 ffca 	bl	212b4 <k_work_reschedule>
	tx_meta_data_free(user_data);
   28320:	4620      	mov	r0, r4
}
   28322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   28326:	f7ef bf55 	b.w	181d4 <tx_meta_data_free>

0002832a <att_cfm_sent>:
{
   2832a:	b510      	push	{r4, lr}
   2832c:	460c      	mov	r4, r1
	if (!err) {
   2832e:	b90a      	cbnz	r2, 28334 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   28330:	f7ff ffba 	bl	282a8 <att_sent>
   28334:	6823      	ldr	r3, [r4, #0]
   28336:	f3bf 8f5b 	dmb	ish
   2833a:	3398      	adds	r3, #152	; 0x98
   2833c:	e853 2f00 	ldrex	r2, [r3]
   28340:	f022 0202 	bic.w	r2, r2, #2
   28344:	e843 2100 	strex	r1, r2, [r3]
   28348:	2900      	cmp	r1, #0
   2834a:	d1f7      	bne.n	2833c <att_cfm_sent+0x12>
   2834c:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   28350:	4620      	mov	r0, r4
}
   28352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   28356:	f7ef bf3d 	b.w	181d4 <tx_meta_data_free>

0002835a <att_rsp_sent>:
{
   2835a:	b510      	push	{r4, lr}
   2835c:	460c      	mov	r4, r1
	if (!err) {
   2835e:	b90a      	cbnz	r2, 28364 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   28360:	f7ff ffa2 	bl	282a8 <att_sent>
   28364:	6823      	ldr	r3, [r4, #0]
   28366:	f3bf 8f5b 	dmb	ish
   2836a:	3398      	adds	r3, #152	; 0x98
   2836c:	e853 2f00 	ldrex	r2, [r3]
   28370:	f022 0201 	bic.w	r2, r2, #1
   28374:	e843 2100 	strex	r1, r2, [r3]
   28378:	2900      	cmp	r1, #0
   2837a:	d1f7      	bne.n	2836c <att_rsp_sent+0x12>
   2837c:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   28380:	4620      	mov	r0, r4
}
   28382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   28386:	f7ef bf25 	b.w	181d4 <tx_meta_data_free>

0002838a <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2838a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2838e:	4688      	mov	r8, r1
   28390:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   28392:	2101      	movs	r1, #1
   28394:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   28396:	4605      	mov	r5, r0
   28398:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2839a:	f7f0 f9cb 	bl	18734 <bt_att_chan_create_pdu>
	if (!buf) {
   2839e:	4604      	mov	r4, r0
   283a0:	b170      	cbz	r0, 283c0 <send_err_rsp.part.0+0x36>
   283a2:	2104      	movs	r1, #4
   283a4:	3008      	adds	r0, #8
   283a6:	f7f4 fb3f 	bl	1ca28 <net_buf_simple_add>
	rsp->request = req;
   283aa:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   283ae:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   283b0:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf);
   283b4:	4621      	mov	r1, r4
   283b6:	4628      	mov	r0, r5
}
   283b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   283bc:	f7ff be25 	b.w	2800a <bt_att_chan_send_rsp>
}
   283c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000283c4 <att_write_req>:
{
   283c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   283c6:	460c      	mov	r4, r1
   283c8:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   283ca:	f101 0008 	add.w	r0, r1, #8
   283ce:	f000 ff87 	bl	292e0 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   283d2:	89a2      	ldrh	r2, [r4, #12]
   283d4:	9201      	str	r2, [sp, #4]
   283d6:	68a2      	ldr	r2, [r4, #8]
   283d8:	9200      	str	r2, [sp, #0]
   283da:	4603      	mov	r3, r0
   283dc:	2213      	movs	r2, #19
   283de:	2112      	movs	r1, #18
   283e0:	4628      	mov	r0, r5
   283e2:	f7f0 fa6d 	bl	188c0 <att_write_rsp.constprop.0>
}
   283e6:	b003      	add	sp, #12
   283e8:	bd30      	pop	{r4, r5, pc}

000283ea <att_write_cmd>:
{
   283ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   283ec:	460c      	mov	r4, r1
   283ee:	4605      	mov	r5, r0
   283f0:	f101 0008 	add.w	r0, r1, #8
   283f4:	f000 ff74 	bl	292e0 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   283f8:	89a2      	ldrh	r2, [r4, #12]
   283fa:	9201      	str	r2, [sp, #4]
   283fc:	68a2      	ldr	r2, [r4, #8]
   283fe:	9200      	str	r2, [sp, #0]
   28400:	2200      	movs	r2, #0
   28402:	4603      	mov	r3, r0
   28404:	4611      	mov	r1, r2
   28406:	4628      	mov	r0, r5
   28408:	f7f0 fa5a 	bl	188c0 <att_write_rsp.constprop.0>
}
   2840c:	b003      	add	sp, #12
   2840e:	bd30      	pop	{r4, r5, pc}

00028410 <att_read_blob_req>:
{
   28410:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   28412:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   28414:	8813      	ldrh	r3, [r2, #0]
   28416:	8852      	ldrh	r2, [r2, #2]
   28418:	9200      	str	r2, [sp, #0]
   2841a:	210c      	movs	r1, #12
   2841c:	220d      	movs	r2, #13
   2841e:	f7f0 fc13 	bl	18c48 <att_read_rsp>
}
   28422:	b003      	add	sp, #12
   28424:	f85d fb04 	ldr.w	pc, [sp], #4

00028428 <att_read_req>:
{
   28428:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2842a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2842c:	2200      	movs	r2, #0
   2842e:	881b      	ldrh	r3, [r3, #0]
   28430:	9200      	str	r2, [sp, #0]
   28432:	210a      	movs	r1, #10
   28434:	220b      	movs	r2, #11
   28436:	f7f0 fc07 	bl	18c48 <att_read_rsp>
}
   2843a:	b003      	add	sp, #12
   2843c:	f85d fb04 	ldr.w	pc, [sp], #4

00028440 <att_mtu_req>:
{
   28440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28442:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   28444:	f850 2b98 	ldr.w	r2, [r0], #152
{
   28448:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2844a:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2844c:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2844e:	f7ff fc67 	bl	27d20 <atomic_test_bit>
   28452:	4604      	mov	r4, r0
   28454:	b9f0      	cbnz	r0, 28494 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   28456:	689b      	ldr	r3, [r3, #8]
   28458:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2845a:	2e16      	cmp	r6, #22
   2845c:	d91c      	bls.n	28498 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2845e:	4638      	mov	r0, r7
   28460:	2202      	movs	r2, #2
   28462:	f7f0 fa99 	bl	18998 <bt_att_create_pdu>
	if (!pdu) {
   28466:	4607      	mov	r7, r0
   28468:	b1c0      	cbz	r0, 2849c <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2846a:	2102      	movs	r1, #2
   2846c:	3008      	adds	r0, #8
   2846e:	f7f4 fadb 	bl	1ca28 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   28472:	2341      	movs	r3, #65	; 0x41
   28474:	7003      	strb	r3, [r0, #0]
   28476:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   28478:	4639      	mov	r1, r7
   2847a:	4628      	mov	r0, r5
   2847c:	f7ff fdc5 	bl	2800a <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   28480:	2e41      	cmp	r6, #65	; 0x41
   28482:	bf28      	it	cs
   28484:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   28486:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   28488:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2848a:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2848c:	f7ff fca6 	bl	27ddc <att_chan_mtu_updated>
	return 0;
   28490:	4620      	mov	r0, r4
}
   28492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   28494:	2006      	movs	r0, #6
   28496:	e7fc      	b.n	28492 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   28498:	2004      	movs	r0, #4
   2849a:	e7fa      	b.n	28492 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2849c:	200e      	movs	r0, #14
   2849e:	e7f8      	b.n	28492 <att_mtu_req+0x52>

000284a0 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   284a0:	898a      	ldrh	r2, [r1, #12]
   284a2:	6889      	ldr	r1, [r1, #8]
   284a4:	2300      	movs	r3, #0
   284a6:	f7f0 bd85 	b.w	18fb4 <att_handle_rsp>

000284aa <bt_att_encrypt_change>:
	if (!att_chan->att) {
   284aa:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   284ae:	b570      	push	{r4, r5, r6, lr}
   284b0:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   284b2:	1f06      	subs	r6, r0, #4
	if (!att_chan->att) {
   284b4:	2b00      	cmp	r3, #0
   284b6:	d039      	beq.n	2852c <bt_att_encrypt_change+0x82>
	if (hci_status) {
   284b8:	b171      	cbz	r1, 284d8 <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
   284ba:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   284be:	2b00      	cmp	r3, #0
   284c0:	d034      	beq.n	2852c <bt_att_encrypt_change+0x82>
   284c2:	7c1b      	ldrb	r3, [r3, #16]
   284c4:	07da      	lsls	r2, r3, #31
   284c6:	d531      	bpl.n	2852c <bt_att_encrypt_change+0x82>
		return BT_ATT_ERR_AUTHENTICATION;
   284c8:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   284ca:	2200      	movs	r2, #0
   284cc:	4630      	mov	r0, r6
   284ce:	4611      	mov	r1, r2
}
   284d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   284d4:	f7f0 bd6e 	b.w	18fb4 <att_handle_rsp>
	struct bt_conn *conn = le_chan->chan.conn;
   284d8:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   284da:	4628      	mov	r0, r5
   284dc:	f7f2 f964 	bl	1a7a8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   284e0:	7a6b      	ldrb	r3, [r5, #9]
   284e2:	2b01      	cmp	r3, #1
   284e4:	d022      	beq.n	2852c <bt_att_encrypt_change+0x82>
	if (!(att_chan->req && att_chan->req->retrying)) {
   284e6:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   284ea:	b1fd      	cbz	r5, 2852c <bt_att_encrypt_change+0x82>
   284ec:	7c2b      	ldrb	r3, [r5, #16]
   284ee:	07db      	lsls	r3, r3, #31
   284f0:	d51c      	bpl.n	2852c <bt_att_encrypt_change+0x82>
	if (!req->encode) {
   284f2:	68eb      	ldr	r3, [r5, #12]
   284f4:	2b00      	cmp	r3, #0
   284f6:	d0e7      	beq.n	284c8 <bt_att_encrypt_change+0x1e>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   284f8:	696a      	ldr	r2, [r5, #20]
   284fa:	7c69      	ldrb	r1, [r5, #17]
   284fc:	4630      	mov	r0, r6
   284fe:	f7f0 f919 	bl	18734 <bt_att_chan_create_pdu>
	if (!buf) {
   28502:	4604      	mov	r4, r0
   28504:	b150      	cbz	r0, 2851c <bt_att_encrypt_change+0x72>
	if (req->encode(buf, req->len, req->user_data)) {
   28506:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2850a:	68eb      	ldr	r3, [r5, #12]
   2850c:	4798      	blx	r3
   2850e:	b138      	cbz	r0, 28520 <bt_att_encrypt_change+0x76>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   28510:	6960      	ldr	r0, [r4, #20]
   28512:	f7ef fe5f 	bl	181d4 <tx_meta_data_free>
		net_buf_unref(buf);
   28516:	4620      	mov	r0, r4
   28518:	f7f4 f970 	bl	1c7fc <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2851c:	230e      	movs	r3, #14
   2851e:	e7d4      	b.n	284ca <bt_att_encrypt_change+0x20>
	if (chan_send(att_chan, buf)) {
   28520:	4621      	mov	r1, r4
   28522:	4630      	mov	r0, r6
   28524:	f7ef ff90 	bl	18448 <chan_send>
   28528:	2800      	cmp	r0, #0
   2852a:	d1f1      	bne.n	28510 <bt_att_encrypt_change+0x66>
}
   2852c:	bd70      	pop	{r4, r5, r6, pc}

0002852e <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2852e:	2001      	movs	r0, #1
   28530:	4770      	bx	lr

00028532 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   28532:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   28534:	f7ef fe12 	bl	1815c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   28538:	b198      	cbz	r0, 28562 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   2853a:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2853c:	b18b      	cbz	r3, 28562 <bt_att_clear_out_of_sync_sent+0x30>
   2853e:	f3bf 8f5b 	dmb	ish
   28542:	3bf0      	subs	r3, #240	; 0xf0
   28544:	f103 0298 	add.w	r2, r3, #152	; 0x98
   28548:	e852 1f00 	ldrex	r1, [r2]
   2854c:	f021 0120 	bic.w	r1, r1, #32
   28550:	e842 1000 	strex	r0, r1, [r2]
   28554:	2800      	cmp	r0, #0
   28556:	d1f7      	bne.n	28548 <bt_att_clear_out_of_sync_sent+0x16>
   28558:	f3bf 8f5b 	dmb	ish
	return node->next;
   2855c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   28560:	e7ec      	b.n	2853c <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   28562:	bd08      	pop	{r3, pc}

00028564 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   28564:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   28566:	2104      	movs	r1, #4
   28568:	f7ff fb66 	bl	27c38 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2856c:	b128      	cbz	r0, 2857a <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2856e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   28572:	2105      	movs	r1, #5
   28574:	3094      	adds	r0, #148	; 0x94
   28576:	f7ff bbd3 	b.w	27d20 <atomic_test_bit>
}
   2857a:	bd08      	pop	{r3, pc}

0002857c <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2857c:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   2857e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   28582:	2201      	movs	r2, #1
   28584:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   28586:	7403      	strb	r3, [r0, #16]
}
   28588:	4770      	bx	lr

0002858a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2858a:	6010      	str	r0, [r2, #0]
}
   2858c:	2000      	movs	r0, #0
   2858e:	4770      	bx	lr

00028590 <gatt_ccc_changed>:
{
   28590:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   28592:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   28594:	895a      	ldrh	r2, [r3, #10]
   28596:	428a      	cmp	r2, r1
   28598:	d003      	beq.n	285a2 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2859a:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2859c:	68db      	ldr	r3, [r3, #12]
   2859e:	b103      	cbz	r3, 285a2 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   285a0:	4718      	bx	r3
}
   285a2:	4770      	bx	lr

000285a4 <gatt_indicate_rsp>:
{
   285a4:	b510      	push	{r4, lr}
   285a6:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   285a8:	68a3      	ldr	r3, [r4, #8]
{
   285aa:	460a      	mov	r2, r1
	if (params->func) {
   285ac:	b10b      	cbz	r3, 285b2 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   285ae:	4621      	mov	r1, r4
   285b0:	4798      	blx	r3
	params->_ref--;
   285b2:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   285b4:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   285b6:	3b01      	subs	r3, #1
   285b8:	b2db      	uxtb	r3, r3
   285ba:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   285bc:	b122      	cbz	r2, 285c8 <gatt_indicate_rsp+0x24>
   285be:	b91b      	cbnz	r3, 285c8 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   285c0:	4620      	mov	r0, r4
}
   285c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   285c6:	4710      	bx	r2
}
   285c8:	bd10      	pop	{r4, pc}

000285ca <match_uuid>:
	data->attr = attr;
   285ca:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   285cc:	8091      	strh	r1, [r2, #4]
}
   285ce:	2000      	movs	r0, #0
   285d0:	4770      	bx	lr

000285d2 <ccc_set_cb>:
}
   285d2:	2000      	movs	r0, #0
   285d4:	4770      	bx	lr

000285d6 <gen_hash_m>:
{
   285d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   285d8:	6807      	ldr	r7, [r0, #0]
   285da:	783d      	ldrb	r5, [r7, #0]
{
   285dc:	b089      	sub	sp, #36	; 0x24
   285de:	4606      	mov	r6, r0
   285e0:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   285e2:	b10d      	cbz	r5, 285e8 <gen_hash_m+0x12>
	switch (u16->val) {
   285e4:	2501      	movs	r5, #1
   285e6:	e014      	b.n	28612 <gen_hash_m+0x3c>
   285e8:	887b      	ldrh	r3, [r7, #2]
   285ea:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   285ee:	d004      	beq.n	285fa <gen_hash_m+0x24>
   285f0:	d812      	bhi.n	28618 <gen_hash_m+0x42>
   285f2:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   285f6:	2b03      	cmp	r3, #3
   285f8:	d8f4      	bhi.n	285e4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   285fa:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   285fe:	2202      	movs	r2, #2
   28600:	f10d 010a 	add.w	r1, sp, #10
   28604:	4620      	mov	r0, r4
   28606:	f7fe fc82 	bl	26f0e <tc_cmac_update>
   2860a:	b9e0      	cbnz	r0, 28646 <gen_hash_m+0x70>
			state->err = -EINVAL;
   2860c:	f06f 0315 	mvn.w	r3, #21
   28610:	65a3      	str	r3, [r4, #88]	; 0x58
}
   28612:	4628      	mov	r0, r5
   28614:	b009      	add	sp, #36	; 0x24
   28616:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   28618:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2861c:	33ff      	adds	r3, #255	; 0xff
   2861e:	b29b      	uxth	r3, r3
   28620:	2b04      	cmp	r3, #4
   28622:	d8df      	bhi.n	285e4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   28624:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28628:	2202      	movs	r2, #2
   2862a:	f10d 010a 	add.w	r1, sp, #10
   2862e:	4620      	mov	r0, r4
   28630:	f7fe fc6d 	bl	26f0e <tc_cmac_update>
   28634:	2800      	cmp	r0, #0
   28636:	d0e9      	beq.n	2860c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   28638:	887b      	ldrh	r3, [r7, #2]
   2863a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2863e:	2202      	movs	r2, #2
   28640:	f10d 010a 	add.w	r1, sp, #10
   28644:	e016      	b.n	28674 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   28646:	887b      	ldrh	r3, [r7, #2]
   28648:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2864c:	2202      	movs	r2, #2
   2864e:	f10d 010a 	add.w	r1, sp, #10
   28652:	4620      	mov	r0, r4
   28654:	f7fe fc5b 	bl	26f0e <tc_cmac_update>
   28658:	2800      	cmp	r0, #0
   2865a:	d0d7      	beq.n	2860c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2865c:	2000      	movs	r0, #0
   2865e:	aa03      	add	r2, sp, #12
   28660:	6877      	ldr	r7, [r6, #4]
   28662:	9000      	str	r0, [sp, #0]
   28664:	2313      	movs	r3, #19
   28666:	4631      	mov	r1, r6
   28668:	47b8      	blx	r7
		if (len < 0) {
   2866a:	1e02      	subs	r2, r0, #0
   2866c:	da01      	bge.n	28672 <gen_hash_m+0x9c>
			state->err = len;
   2866e:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   28670:	e7cf      	b.n	28612 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   28672:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28674:	4620      	mov	r0, r4
   28676:	f7fe fc4a 	bl	26f0e <tc_cmac_update>
   2867a:	2800      	cmp	r0, #0
   2867c:	d1b2      	bne.n	285e4 <gen_hash_m+0xe>
   2867e:	e7c5      	b.n	2860c <gen_hash_m+0x36>

00028680 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28680:	f3bf 8f5b 	dmb	ish
   28684:	6800      	ldr	r0, [r0, #0]
   28686:	f3bf 8f5b 	dmb	ish
}
   2868a:	4770      	bx	lr

0002868c <atomic_or>:
{
   2868c:	4603      	mov	r3, r0
}
   2868e:	f3bf 8f5b 	dmb	ish
   28692:	e853 0f00 	ldrex	r0, [r3]
   28696:	ea40 0201 	orr.w	r2, r0, r1
   2869a:	e843 2c00 	strex	ip, r2, [r3]
   2869e:	f1bc 0f00 	cmp.w	ip, #0
   286a2:	d1f6      	bne.n	28692 <atomic_or+0x6>
   286a4:	f3bf 8f5b 	dmb	ish
   286a8:	4770      	bx	lr

000286aa <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   286aa:	2207      	movs	r2, #7
   286ac:	f7fe bdbb 	b.w	27226 <memcpy>

000286b0 <clear_ccc_cfg>:
{
   286b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   286b2:	2500      	movs	r5, #0
{
   286b4:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   286b6:	4669      	mov	r1, sp
   286b8:	3001      	adds	r0, #1
   286ba:	9500      	str	r5, [sp, #0]
   286bc:	f8cd 5003 	str.w	r5, [sp, #3]
   286c0:	f7ff fff3 	bl	286aa <bt_addr_le_copy>
	cfg->id = 0U;
   286c4:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   286c6:	8125      	strh	r5, [r4, #8]
}
   286c8:	b003      	add	sp, #12
   286ca:	bd30      	pop	{r4, r5, pc}

000286cc <atomic_and>:
{
   286cc:	4603      	mov	r3, r0
}
   286ce:	f3bf 8f5b 	dmb	ish
   286d2:	e853 0f00 	ldrex	r0, [r3]
   286d6:	ea00 0201 	and.w	r2, r0, r1
   286da:	e843 2c00 	strex	ip, r2, [r3]
   286de:	f1bc 0f00 	cmp.w	ip, #0
   286e2:	d1f6      	bne.n	286d2 <atomic_and+0x6>
   286e4:	f3bf 8f5b 	dmb	ish
   286e8:	4770      	bx	lr

000286ea <clear_cf_cfg>:
{
   286ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   286ec:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   286ee:	2500      	movs	r5, #0
   286f0:	4669      	mov	r1, sp
   286f2:	3001      	adds	r0, #1
   286f4:	9500      	str	r5, [sp, #0]
   286f6:	f8cd 5003 	str.w	r5, [sp, #3]
   286fa:	f7ff ffd6 	bl	286aa <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   286fe:	f104 0008 	add.w	r0, r4, #8
   28702:	2201      	movs	r2, #1
   28704:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28706:	340c      	adds	r4, #12
   28708:	f7fe fd98 	bl	2723c <memset>
   2870c:	f3bf 8f5b 	dmb	ish
   28710:	e854 3f00 	ldrex	r3, [r4]
   28714:	e844 5200 	strex	r2, r5, [r4]
   28718:	2a00      	cmp	r2, #0
   2871a:	d1f9      	bne.n	28710 <clear_cf_cfg+0x26>
   2871c:	f3bf 8f5b 	dmb	ish
}
   28720:	b003      	add	sp, #12
   28722:	bd30      	pop	{r4, r5, pc}

00028724 <read_ppcp>:
{
   28724:	b513      	push	{r0, r1, r4, lr}
   28726:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   28728:	2218      	movs	r2, #24
{
   2872a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2872e:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   28732:	2228      	movs	r2, #40	; 0x28
   28734:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   28738:	2200      	movs	r2, #0
   2873a:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   2873e:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   28740:	f04f 022a 	mov.w	r2, #42	; 0x2a
   28744:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   28748:	d80b      	bhi.n	28762 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   2874a:	f1c1 0408 	rsb	r4, r1, #8
   2874e:	429c      	cmp	r4, r3
   28750:	bfa8      	it	ge
   28752:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   28754:	4622      	mov	r2, r4
   28756:	4469      	add	r1, sp
   28758:	f7fe fd65 	bl	27226 <memcpy>
}
   2875c:	4620      	mov	r0, r4
   2875e:	b002      	add	sp, #8
   28760:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28762:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   28766:	e7f9      	b.n	2875c <read_ppcp+0x38>

00028768 <read_appearance>:
{
   28768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2876a:	4615      	mov	r5, r2
   2876c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   28770:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   28772:	f7fe ff34 	bl	275de <bt_get_appearance>
	if (offset > value_len) {
   28776:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   28778:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2877c:	d80e      	bhi.n	2879c <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   2877e:	f1c6 0402 	rsb	r4, r6, #2
   28782:	42bc      	cmp	r4, r7
   28784:	bfa8      	it	ge
   28786:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28788:	f10d 0306 	add.w	r3, sp, #6
   2878c:	4622      	mov	r2, r4
   2878e:	1999      	adds	r1, r3, r6
   28790:	4628      	mov	r0, r5
   28792:	f7fe fd48 	bl	27226 <memcpy>
}
   28796:	4620      	mov	r0, r4
   28798:	b003      	add	sp, #12
   2879a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2879c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   287a0:	e7f9      	b.n	28796 <read_appearance+0x2e>

000287a2 <read_name>:
{
   287a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   287a6:	4698      	mov	r8, r3
   287a8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   287ac:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   287ae:	f7ed fd2f 	bl	16210 <bt_get_name>
   287b2:	4607      	mov	r7, r0
				 strlen(name));
   287b4:	f7fe fce1 	bl	2717a <strlen>
	if (offset > value_len) {
   287b8:	b283      	uxth	r3, r0
   287ba:	42b3      	cmp	r3, r6
   287bc:	d30c      	bcc.n	287d8 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   287be:	1b9c      	subs	r4, r3, r6
   287c0:	4544      	cmp	r4, r8
   287c2:	bfa8      	it	ge
   287c4:	4644      	movge	r4, r8
   287c6:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   287c8:	4622      	mov	r2, r4
   287ca:	19b9      	adds	r1, r7, r6
   287cc:	4628      	mov	r0, r5
   287ce:	f7fe fd2a 	bl	27226 <memcpy>
}
   287d2:	4620      	mov	r0, r4
   287d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   287d8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   287dc:	e7f9      	b.n	287d2 <read_name+0x30>

000287de <cf_read>:
{
   287de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   287e0:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   287e2:	2300      	movs	r3, #0
{
   287e4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   287e8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   287ec:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   287ee:	f7f0 fd4d 	bl	1928c <find_cf_cfg>
	if (cfg) {
   287f2:	b128      	cbz	r0, 28800 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   287f4:	f100 0108 	add.w	r1, r0, #8
   287f8:	2201      	movs	r2, #1
   287fa:	a801      	add	r0, sp, #4
   287fc:	f7fe fd13 	bl	27226 <memcpy>
	if (offset > value_len) {
   28800:	2e01      	cmp	r6, #1
   28802:	d80d      	bhi.n	28820 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   28804:	f1c6 0401 	rsb	r4, r6, #1
   28808:	42bc      	cmp	r4, r7
   2880a:	bfa8      	it	ge
   2880c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2880e:	ab01      	add	r3, sp, #4
   28810:	4622      	mov	r2, r4
   28812:	1999      	adds	r1, r3, r6
   28814:	4628      	mov	r0, r5
   28816:	f7fe fd06 	bl	27226 <memcpy>
}
   2881a:	4620      	mov	r0, r4
   2881c:	b003      	add	sp, #12
   2881e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28820:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   28824:	e7f9      	b.n	2881a <cf_read+0x3c>

00028826 <bt_gatt_attr_read_service>:
{
   28826:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   28828:	68c9      	ldr	r1, [r1, #12]
{
   2882a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2882e:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   28830:	780b      	ldrb	r3, [r1, #0]
{
   28832:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   28834:	b993      	cbnz	r3, 2885c <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   28836:	884b      	ldrh	r3, [r1, #2]
   28838:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   2883c:	2d02      	cmp	r5, #2
   2883e:	d819      	bhi.n	28874 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   28840:	f1c5 0202 	rsb	r2, r5, #2
   28844:	4294      	cmp	r4, r2
   28846:	bfa8      	it	ge
   28848:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2884a:	f10d 0306 	add.w	r3, sp, #6
   2884e:	4622      	mov	r2, r4
   28850:	1959      	adds	r1, r3, r5
   28852:	f7fe fce8 	bl	27226 <memcpy>
}
   28856:	4620      	mov	r0, r4
   28858:	b003      	add	sp, #12
   2885a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2885c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2885e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   28862:	d807      	bhi.n	28874 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   28864:	f1c5 0210 	rsb	r2, r5, #16
   28868:	4294      	cmp	r4, r2
   2886a:	bfa8      	it	ge
   2886c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2886e:	4622      	mov	r2, r4
   28870:	4429      	add	r1, r5
   28872:	e7ee      	b.n	28852 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28874:	f06f 0406 	mvn.w	r4, #6
   28878:	e7ed      	b.n	28856 <bt_gatt_attr_read_service+0x30>

0002887a <ccc_find_cfg>:
{
   2887a:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2887c:	7803      	ldrb	r3, [r0, #0]
   2887e:	4293      	cmp	r3, r2
{
   28880:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   28882:	d001      	beq.n	28888 <ccc_find_cfg+0xe>
	return NULL;
   28884:	2000      	movs	r0, #0
}
   28886:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   28888:	2207      	movs	r2, #7
   2888a:	3001      	adds	r0, #1
   2888c:	f7fe fca2 	bl	271d4 <memcmp>
		if (id == ccc->cfg[i].id &&
   28890:	2800      	cmp	r0, #0
   28892:	d1f7      	bne.n	28884 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   28894:	4620      	mov	r0, r4
   28896:	e7f6      	b.n	28886 <ccc_find_cfg+0xc>

00028898 <find_ccc_cfg>:
{
   28898:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2889a:	460c      	mov	r4, r1
						    &cfg->peer)) {
   2889c:	1c4d      	adds	r5, r1, #1
		if (conn) {
   2889e:	b148      	cbz	r0, 288b4 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   288a0:	7809      	ldrb	r1, [r1, #0]
   288a2:	462a      	mov	r2, r5
   288a4:	f7ff f91d 	bl	27ae2 <bt_conn_is_peer_addr_le>
	return NULL;
   288a8:	2800      	cmp	r0, #0
   288aa:	bf08      	it	eq
   288ac:	2400      	moveq	r4, #0
}
   288ae:	4620      	mov	r0, r4
   288b0:	b003      	add	sp, #12
   288b2:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   288b4:	9000      	str	r0, [sp, #0]
   288b6:	2207      	movs	r2, #7
   288b8:	f8cd 0003 	str.w	r0, [sp, #3]
   288bc:	4669      	mov	r1, sp
   288be:	4628      	mov	r0, r5
   288c0:	f7fe fc88 	bl	271d4 <memcmp>
	return NULL;
   288c4:	2800      	cmp	r0, #0
   288c6:	bf18      	it	ne
   288c8:	2400      	movne	r4, #0
   288ca:	e7f0      	b.n	288ae <find_ccc_cfg+0x16>

000288cc <bt_gatt_attr_read_ccc>:
{
   288cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   288ce:	68c9      	ldr	r1, [r1, #12]
{
   288d0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   288d4:	4615      	mov	r5, r2
   288d6:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   288d8:	f7ff ffde 	bl	28898 <find_ccc_cfg>
	if (cfg) {
   288dc:	b100      	cbz	r0, 288e0 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   288de:	8900      	ldrh	r0, [r0, #8]
   288e0:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   288e4:	2e02      	cmp	r6, #2
   288e6:	d80e      	bhi.n	28906 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   288e8:	f1c6 0402 	rsb	r4, r6, #2
   288ec:	42bc      	cmp	r4, r7
   288ee:	bfa8      	it	ge
   288f0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   288f2:	f10d 0306 	add.w	r3, sp, #6
   288f6:	4622      	mov	r2, r4
   288f8:	1999      	adds	r1, r3, r6
   288fa:	4628      	mov	r0, r5
   288fc:	f7fe fc93 	bl	27226 <memcpy>
}
   28900:	4620      	mov	r0, r4
   28902:	b003      	add	sp, #12
   28904:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28906:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2890a:	e7f9      	b.n	28900 <bt_gatt_attr_read_ccc+0x34>

0002890c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2890c:	2a02      	cmp	r2, #2
{
   2890e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   28910:	d108      	bne.n	28924 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   28912:	2300      	movs	r3, #0
   28914:	f100 0190 	add.w	r1, r0, #144	; 0x90
   28918:	461a      	mov	r2, r3
   2891a:	7a00      	ldrb	r0, [r0, #8]
   2891c:	f7f0 ff16 	bl	1974c <sc_save>
}
   28920:	2002      	movs	r0, #2
   28922:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   28924:	f7f0 ff7c 	bl	19820 <sc_clear>
   28928:	e7fa      	b.n	28920 <sc_ccc_cfg_write+0x14>

0002892a <sc_restore_rsp>:
{
   2892a:	b538      	push	{r3, r4, r5, lr}
   2892c:	4604      	mov	r4, r0
   2892e:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   28930:	f7ff fdfd 	bl	2852e <bt_att_fixed_chan_only>
   28934:	b150      	cbz	r0, 2894c <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   28936:	4620      	mov	r0, r4
   28938:	f7f0 fca8 	bl	1928c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2893c:	b130      	cbz	r0, 2894c <sc_restore_rsp+0x22>
   2893e:	7a03      	ldrb	r3, [r0, #8]
   28940:	07db      	lsls	r3, r3, #31
   28942:	d503      	bpl.n	2894c <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   28944:	2101      	movs	r1, #1
   28946:	300c      	adds	r0, #12
   28948:	f7ff fea0 	bl	2868c <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2894c:	b985      	cbnz	r5, 28970 <sc_restore_rsp+0x46>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2894e:	7a20      	ldrb	r0, [r4, #8]
   28950:	f104 0190 	add.w	r1, r4, #144	; 0x90
   28954:	f7f0 fed8 	bl	19708 <find_sc_cfg>
		if (sc_cfg) {
   28958:	4604      	mov	r4, r0
   2895a:	b148      	cbz	r0, 28970 <sc_restore_rsp+0x46>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2895c:	4629      	mov	r1, r5
   2895e:	2204      	movs	r2, #4
   28960:	3008      	adds	r0, #8
   28962:	f7fe fc6b 	bl	2723c <memset>
		sc_store(cfg);
   28966:	4620      	mov	r0, r4
}
   28968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2896c:	f7f0 bcfc 	b.w	19368 <sc_store>
}
   28970:	bd38      	pop	{r3, r4, r5, pc}

00028972 <bt_gatt_attr_read>:
{
   28972:	b538      	push	{r3, r4, r5, lr}
   28974:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   28978:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   2897c:	42a9      	cmp	r1, r5
{
   2897e:	4610      	mov	r0, r2
	if (offset > value_len) {
   28980:	d80b      	bhi.n	2899a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   28982:	1a6d      	subs	r5, r5, r1
   28984:	429d      	cmp	r5, r3
   28986:	bfa8      	it	ge
   28988:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2898a:	9b05      	ldr	r3, [sp, #20]
   2898c:	b2ad      	uxth	r5, r5
   2898e:	462a      	mov	r2, r5
   28990:	4419      	add	r1, r3
   28992:	f7fe fc48 	bl	27226 <memcpy>
}
   28996:	4628      	mov	r0, r5
   28998:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2899a:	f06f 0506 	mvn.w	r5, #6
   2899e:	e7fa      	b.n	28996 <bt_gatt_attr_read+0x24>

000289a0 <bt_gatt_attr_value_handle>:
{
   289a0:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   289a2:	4604      	mov	r4, r0
   289a4:	b910      	cbnz	r0, 289ac <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   289a6:	2000      	movs	r0, #0
}
   289a8:	b002      	add	sp, #8
   289aa:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   289ac:	2300      	movs	r3, #0
   289ae:	f88d 3004 	strb.w	r3, [sp, #4]
   289b2:	6800      	ldr	r0, [r0, #0]
   289b4:	f642 0303 	movw	r3, #10243	; 0x2803
   289b8:	a901      	add	r1, sp, #4
   289ba:	f8ad 3006 	strh.w	r3, [sp, #6]
   289be:	f7fe fca2 	bl	27306 <bt_uuid_cmp>
   289c2:	2800      	cmp	r0, #0
   289c4:	d1ef      	bne.n	289a6 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   289c6:	68e3      	ldr	r3, [r4, #12]
   289c8:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   289ca:	2800      	cmp	r0, #0
   289cc:	d1ec      	bne.n	289a8 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   289ce:	4620      	mov	r0, r4
   289d0:	f7f1 f892 	bl	19af8 <bt_gatt_attr_get_handle>
   289d4:	3001      	adds	r0, #1
   289d6:	b280      	uxth	r0, r0
	return handle;
   289d8:	e7e6      	b.n	289a8 <bt_gatt_attr_value_handle+0x8>

000289da <bt_gatt_attr_read_chrc>:
{
   289da:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   289dc:	68cf      	ldr	r7, [r1, #12]
{
   289de:	b087      	sub	sp, #28
   289e0:	4608      	mov	r0, r1
   289e2:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   289e4:	79bb      	ldrb	r3, [r7, #6]
   289e6:	f88d 3004 	strb.w	r3, [sp, #4]
{
   289ea:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   289ee:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   289f0:	f7ff ffd6 	bl	289a0 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   289f4:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   289f6:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   289fa:	780b      	ldrb	r3, [r1, #0]
   289fc:	b99b      	cbnz	r3, 28a26 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   289fe:	884b      	ldrh	r3, [r1, #2]
   28a00:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   28a04:	2105      	movs	r1, #5
	if (offset > value_len) {
   28a06:	42b1      	cmp	r1, r6
   28a08:	d315      	bcc.n	28a36 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   28a0a:	1b89      	subs	r1, r1, r6
   28a0c:	42a1      	cmp	r1, r4
   28a0e:	bfa8      	it	ge
   28a10:	4621      	movge	r1, r4
   28a12:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   28a14:	ab01      	add	r3, sp, #4
   28a16:	4622      	mov	r2, r4
   28a18:	1999      	adds	r1, r3, r6
   28a1a:	4628      	mov	r0, r5
   28a1c:	f7fe fc03 	bl	27226 <memcpy>
}
   28a20:	4620      	mov	r0, r4
   28a22:	b007      	add	sp, #28
   28a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   28a26:	3101      	adds	r1, #1
   28a28:	2210      	movs	r2, #16
   28a2a:	f10d 0007 	add.w	r0, sp, #7
   28a2e:	f7fe fbfa 	bl	27226 <memcpy>
		value_len += 16U;
   28a32:	2113      	movs	r1, #19
   28a34:	e7e7      	b.n	28a06 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28a36:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   28a3a:	e7f1      	b.n	28a20 <bt_gatt_attr_read_chrc+0x46>

00028a3c <bt_gatt_foreach_attr>:
{
   28a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   28a3e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28a42:	2300      	movs	r3, #0
   28a44:	9300      	str	r3, [sp, #0]
   28a46:	461a      	mov	r2, r3
   28a48:	f7f1 f89a 	bl	19b80 <bt_gatt_foreach_attr_type>
}
   28a4c:	b005      	add	sp, #20
   28a4e:	f85d fb04 	ldr.w	pc, [sp], #4

00028a52 <bt_gatt_check_perm>:
{
   28a52:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   28a54:	07d3      	lsls	r3, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28a56:	8a4c      	ldrh	r4, [r1, #18]
{
   28a58:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   28a5a:	d504      	bpl.n	28a66 <bt_gatt_check_perm+0x14>
   28a5c:	f014 0f95 	tst.w	r4, #149	; 0x95
   28a60:	d026      	beq.n	28ab0 <bt_gatt_check_perm+0x5e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28a62:	684b      	ldr	r3, [r1, #4]
   28a64:	b323      	cbz	r3, 28ab0 <bt_gatt_check_perm+0x5e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   28a66:	0790      	lsls	r0, r2, #30
   28a68:	d504      	bpl.n	28a74 <bt_gatt_check_perm+0x22>
   28a6a:	f414 7f95 	tst.w	r4, #298	; 0x12a
   28a6e:	d021      	beq.n	28ab4 <bt_gatt_check_perm+0x62>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   28a70:	688b      	ldr	r3, [r1, #8]
   28a72:	b1fb      	cbz	r3, 28ab4 <bt_gatt_check_perm+0x62>
	mask &= attr->perm;
   28a74:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   28a76:	f414 7fc0 	tst.w	r4, #384	; 0x180
   28a7a:	d007      	beq.n	28a8c <bt_gatt_check_perm+0x3a>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   28a7c:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   28a80:	b90b      	cbnz	r3, 28a86 <bt_gatt_check_perm+0x34>
			return BT_ATT_ERR_AUTHENTICATION;
   28a82:	2005      	movs	r0, #5
}
   28a84:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   28a86:	7b5b      	ldrb	r3, [r3, #13]
   28a88:	06db      	lsls	r3, r3, #27
   28a8a:	d5fa      	bpl.n	28a82 <bt_gatt_check_perm+0x30>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   28a8c:	f014 0f30 	tst.w	r4, #48	; 0x30
   28a90:	d108      	bne.n	28aa4 <bt_gatt_check_perm+0x52>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   28a92:	f014 000c 	ands.w	r0, r4, #12
   28a96:	d0f5      	beq.n	28a84 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   28a98:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   28a9a:	2b00      	cmp	r3, #0
   28a9c:	bf14      	ite	ne
   28a9e:	2000      	movne	r0, #0
   28aa0:	200f      	moveq	r0, #15
   28aa2:	e7ef      	b.n	28a84 <bt_gatt_check_perm+0x32>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   28aa4:	4628      	mov	r0, r5
   28aa6:	f7ff f81a 	bl	27ade <bt_conn_get_security>
   28aaa:	2802      	cmp	r0, #2
   28aac:	d8f1      	bhi.n	28a92 <bt_gatt_check_perm+0x40>
   28aae:	e7e8      	b.n	28a82 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   28ab0:	2002      	movs	r0, #2
   28ab2:	e7e7      	b.n	28a84 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   28ab4:	2003      	movs	r0, #3
   28ab6:	e7e5      	b.n	28a84 <bt_gatt_check_perm+0x32>

00028ab8 <bt_gatt_change_aware>:
{
   28ab8:	b570      	push	{r4, r5, r6, lr}
   28aba:	4606      	mov	r6, r0
   28abc:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   28abe:	f7f0 fbe5 	bl	1928c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28ac2:	b910      	cbnz	r0, 28aca <bt_gatt_change_aware+0x12>
		return true;
   28ac4:	2401      	movs	r4, #1
}
   28ac6:	4620      	mov	r0, r4
   28ac8:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28aca:	7a03      	ldrb	r3, [r0, #8]
   28acc:	07da      	lsls	r2, r3, #31
   28ace:	d5f9      	bpl.n	28ac4 <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   28ad0:	f100 050c 	add.w	r5, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28ad4:	4628      	mov	r0, r5
   28ad6:	f7ff fdd3 	bl	28680 <atomic_get>
   28ada:	07c3      	lsls	r3, r0, #31
   28adc:	d4f2      	bmi.n	28ac4 <bt_gatt_change_aware+0xc>
	if (!req) {
   28ade:	b90c      	cbnz	r4, 28ae4 <bt_gatt_change_aware+0x2c>
		return false;
   28ae0:	2400      	movs	r4, #0
   28ae2:	e7f0      	b.n	28ac6 <bt_gatt_change_aware+0xe>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28ae4:	f06f 0102 	mvn.w	r1, #2
   28ae8:	4628      	mov	r0, r5
   28aea:	f7ff fdef 	bl	286cc <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   28aee:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   28af2:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   28af4:	d006      	beq.n	28b04 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   28af6:	f7ff fd1c 	bl	28532 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   28afa:	2101      	movs	r1, #1
   28afc:	4628      	mov	r0, r5
   28afe:	f7ff fdc5 	bl	2868c <atomic_or>
}
   28b02:	e7e0      	b.n	28ac6 <bt_gatt_change_aware+0xe>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   28b04:	f7ff fd13 	bl	2852e <bt_att_fixed_chan_only>
   28b08:	2800      	cmp	r0, #0
   28b0a:	d0e9      	beq.n	28ae0 <bt_gatt_change_aware+0x28>
   28b0c:	4630      	mov	r0, r6
   28b0e:	f7ff fd29 	bl	28564 <bt_att_out_of_sync_sent_on_fixed>
   28b12:	4604      	mov	r4, r0
   28b14:	2800      	cmp	r0, #0
   28b16:	d0e3      	beq.n	28ae0 <bt_gatt_change_aware+0x28>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28b18:	f06f 0102 	mvn.w	r1, #2
   28b1c:	4628      	mov	r0, r5
   28b1e:	f7ff fdd5 	bl	286cc <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   28b22:	4630      	mov	r0, r6
   28b24:	e7e7      	b.n	28af6 <bt_gatt_change_aware+0x3e>

00028b26 <ccc_delayed_store>:
{
   28b26:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   28b28:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   28b2c:	4605      	mov	r5, r0
		if (!conn) {
   28b2e:	b194      	cbz	r4, 28b56 <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   28b30:	f104 0690 	add.w	r6, r4, #144	; 0x90
   28b34:	7a20      	ldrb	r0, [r4, #8]
   28b36:	4631      	mov	r1, r6
   28b38:	f7fe fd53 	bl	275e2 <bt_addr_le_is_bonded>
   28b3c:	b158      	cbz	r0, 28b56 <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   28b3e:	2300      	movs	r3, #0
   28b40:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   28b44:	7a20      	ldrb	r0, [r4, #8]
   28b46:	4631      	mov	r1, r6
   28b48:	f7f1 fe3e 	bl	1a7c8 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   28b4c:	4620      	mov	r0, r4
}
   28b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   28b52:	f7ee bd57 	b.w	17604 <bt_conn_unref>
}
   28b56:	bd70      	pop	{r4, r5, r6, pc}

00028b58 <smp_pairing_rsp>:
}
   28b58:	2007      	movs	r0, #7
   28b5a:	4770      	bx	lr

00028b5c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28b5c:	f3bf 8f5b 	dmb	ish
   28b60:	6800      	ldr	r0, [r0, #0]
   28b62:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28b66:	4108      	asrs	r0, r1
}
   28b68:	f000 0001 	and.w	r0, r0, #1
   28b6c:	4770      	bx	lr

00028b6e <update_keys_check>:
{
   28b6e:	b510      	push	{r4, lr}
   28b70:	4603      	mov	r3, r0
	if (!keys ||
   28b72:	b1d9      	cbz	r1, 28bac <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   28b74:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   28b76:	f010 0f24 	tst.w	r0, #36	; 0x24
   28b7a:	d017      	beq.n	28bac <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   28b7c:	7d1a      	ldrb	r2, [r3, #20]
   28b7e:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   28b80:	7b09      	ldrb	r1, [r1, #12]
   28b82:	42a2      	cmp	r2, r4
   28b84:	bf28      	it	cs
   28b86:	4622      	movcs	r2, r4
   28b88:	4291      	cmp	r1, r2
   28b8a:	d901      	bls.n	28b90 <update_keys_check+0x22>
		return false;
   28b8c:	2000      	movs	r0, #0
}
   28b8e:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   28b90:	0682      	lsls	r2, r0, #26
   28b92:	d404      	bmi.n	28b9e <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   28b94:	7a18      	ldrb	r0, [r3, #8]
   28b96:	3800      	subs	r0, #0
   28b98:	bf18      	it	ne
   28b9a:	2001      	movne	r0, #1
   28b9c:	e7f7      	b.n	28b8e <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   28b9e:	2105      	movs	r1, #5
   28ba0:	1d18      	adds	r0, r3, #4
   28ba2:	f7ff ffdb 	bl	28b5c <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   28ba6:	2800      	cmp	r0, #0
   28ba8:	d1f4      	bne.n	28b94 <update_keys_check+0x26>
   28baa:	e7ef      	b.n	28b8c <update_keys_check+0x1e>
		return true;
   28bac:	2001      	movs	r0, #1
   28bae:	e7ee      	b.n	28b8e <update_keys_check+0x20>

00028bb0 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28bb0:	2301      	movs	r3, #1
   28bb2:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28bb4:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28bb6:	f3bf 8f5b 	dmb	ish
   28bba:	e850 2f00 	ldrex	r2, [r0]
   28bbe:	401a      	ands	r2, r3
   28bc0:	e840 2100 	strex	r1, r2, [r0]
   28bc4:	2900      	cmp	r1, #0
   28bc6:	d1f8      	bne.n	28bba <atomic_clear_bit+0xa>
   28bc8:	f3bf 8f5b 	dmb	ish
}
   28bcc:	4770      	bx	lr

00028bce <bt_smp_aes_cmac>:
{
   28bce:	b570      	push	{r4, r5, r6, lr}
   28bd0:	b0c2      	sub	sp, #264	; 0x108
   28bd2:	460d      	mov	r5, r1
   28bd4:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   28bd6:	4601      	mov	r1, r0
   28bd8:	aa16      	add	r2, sp, #88	; 0x58
   28bda:	4668      	mov	r0, sp
{
   28bdc:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   28bde:	f7fe f96b 	bl	26eb8 <tc_cmac_setup>
   28be2:	b150      	cbz	r0, 28bfa <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   28be4:	4632      	mov	r2, r6
   28be6:	4629      	mov	r1, r5
   28be8:	4668      	mov	r0, sp
   28bea:	f7fe f990 	bl	26f0e <tc_cmac_update>
   28bee:	b120      	cbz	r0, 28bfa <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   28bf0:	4669      	mov	r1, sp
   28bf2:	4620      	mov	r0, r4
   28bf4:	f7fe f9f6 	bl	26fe4 <tc_cmac_final>
   28bf8:	b918      	cbnz	r0, 28c02 <bt_smp_aes_cmac+0x34>
		return -EIO;
   28bfa:	f06f 0004 	mvn.w	r0, #4
}
   28bfe:	b042      	add	sp, #264	; 0x108
   28c00:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   28c02:	2000      	movs	r0, #0
   28c04:	e7fb      	b.n	28bfe <bt_smp_aes_cmac+0x30>

00028c06 <smp_security_request>:
   28c06:	2007      	movs	r0, #7
   28c08:	4770      	bx	lr

00028c0a <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   28c0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28c0c:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   28c0e:	2200      	movs	r2, #0
   28c10:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   28c12:	4604      	mov	r4, r0
   28c14:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   28c16:	460a      	mov	r2, r1
   28c18:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   28c1c:	2106      	movs	r1, #6
   28c1e:	f7fe ffe8 	bl	27bf2 <bt_l2cap_send_cb>
   28c22:	b128      	cbz	r0, 28c30 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   28c24:	4628      	mov	r0, r5
}
   28c26:	b003      	add	sp, #12
   28c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   28c2c:	f7f3 bde6 	b.w	1c7fc <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   28c30:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   28c34:	2300      	movs	r3, #0
   28c36:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   28c3a:	b003      	add	sp, #12
   28c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   28c40:	f7f8 bb38 	b.w	212b4 <k_work_reschedule>

00028c44 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   28c44:	b510      	push	{r4, lr}
   28c46:	1e43      	subs	r3, r0, #1
   28c48:	f100 0210 	add.w	r2, r0, #16
   28c4c:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   28c4e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28c52:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28c56:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   28c58:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   28c5a:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   28c5c:	d1f7      	bne.n	28c4e <sys_mem_swap.constprop.0+0xa>
	}
}
   28c5e:	bd10      	pop	{r4, pc}

00028c60 <smp_f6>:
{
   28c60:	b5f0      	push	{r4, r5, r6, r7, lr}
   28c62:	b097      	sub	sp, #92	; 0x5c
   28c64:	4605      	mov	r5, r0
   28c66:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   28c68:	a805      	add	r0, sp, #20
   28c6a:	2210      	movs	r2, #16
{
   28c6c:	461c      	mov	r4, r3
   28c6e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   28c70:	f7f1 fedc 	bl	1aa2c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   28c74:	2210      	movs	r2, #16
   28c76:	4631      	mov	r1, r6
   28c78:	a809      	add	r0, sp, #36	; 0x24
   28c7a:	f7f1 fed7 	bl	1aa2c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   28c7e:	4621      	mov	r1, r4
   28c80:	2210      	movs	r2, #16
   28c82:	a80d      	add	r0, sp, #52	; 0x34
   28c84:	f7f1 fed2 	bl	1aa2c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   28c88:	991c      	ldr	r1, [sp, #112]	; 0x70
   28c8a:	2203      	movs	r2, #3
   28c8c:	a811      	add	r0, sp, #68	; 0x44
   28c8e:	f7f1 fecd 	bl	1aa2c <sys_memcpy_swap>
	m[51] = a1->type;
   28c92:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   28c94:	f814 3b01 	ldrb.w	r3, [r4], #1
   28c98:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   28c9c:	4621      	mov	r1, r4
   28c9e:	2206      	movs	r2, #6
   28ca0:	a812      	add	r0, sp, #72	; 0x48
   28ca2:	f7fe fac0 	bl	27226 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   28ca6:	4621      	mov	r1, r4
   28ca8:	2206      	movs	r2, #6
   28caa:	a812      	add	r0, sp, #72	; 0x48
   28cac:	f7f1 febe 	bl	1aa2c <sys_memcpy_swap>
	m[58] = a2->type;
   28cb0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   28cb2:	f814 3b01 	ldrb.w	r3, [r4], #1
   28cb6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   28cba:	4621      	mov	r1, r4
   28cbc:	2206      	movs	r2, #6
   28cbe:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   28cc2:	f7fe fab0 	bl	27226 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   28cc6:	4621      	mov	r1, r4
   28cc8:	2206      	movs	r2, #6
   28cca:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   28cce:	f7f1 fead 	bl	1aa2c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   28cd2:	2210      	movs	r2, #16
   28cd4:	4629      	mov	r1, r5
   28cd6:	a801      	add	r0, sp, #4
   28cd8:	f7f1 fea8 	bl	1aa2c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   28cdc:	463b      	mov	r3, r7
   28cde:	2241      	movs	r2, #65	; 0x41
   28ce0:	a905      	add	r1, sp, #20
   28ce2:	a801      	add	r0, sp, #4
   28ce4:	f7ff ff73 	bl	28bce <bt_smp_aes_cmac>
	if (err) {
   28ce8:	4604      	mov	r4, r0
   28cea:	b910      	cbnz	r0, 28cf2 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   28cec:	4638      	mov	r0, r7
   28cee:	f7ff ffa9 	bl	28c44 <sys_mem_swap.constprop.0>
}
   28cf2:	4620      	mov	r0, r4
   28cf4:	b017      	add	sp, #92	; 0x5c
   28cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028cf8 <smp_f4>:
{
   28cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   28cfa:	b097      	sub	sp, #92	; 0x5c
   28cfc:	4614      	mov	r4, r2
   28cfe:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   28d00:	2220      	movs	r2, #32
   28d02:	4601      	mov	r1, r0
   28d04:	a805      	add	r0, sp, #20
{
   28d06:	461d      	mov	r5, r3
   28d08:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   28d0a:	f7f1 fe8f 	bl	1aa2c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   28d0e:	2220      	movs	r2, #32
   28d10:	4631      	mov	r1, r6
   28d12:	a80d      	add	r0, sp, #52	; 0x34
   28d14:	f7f1 fe8a 	bl	1aa2c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   28d18:	4621      	mov	r1, r4
   28d1a:	2210      	movs	r2, #16
   28d1c:	a801      	add	r0, sp, #4
	m[64] = z;
   28d1e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   28d22:	f7f1 fe83 	bl	1aa2c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   28d26:	463b      	mov	r3, r7
   28d28:	2241      	movs	r2, #65	; 0x41
   28d2a:	a905      	add	r1, sp, #20
   28d2c:	a801      	add	r0, sp, #4
   28d2e:	f7ff ff4e 	bl	28bce <bt_smp_aes_cmac>
	if (err) {
   28d32:	4604      	mov	r4, r0
   28d34:	b910      	cbnz	r0, 28d3c <smp_f4+0x44>
	sys_mem_swap(res, 16);
   28d36:	4638      	mov	r0, r7
   28d38:	f7ff ff84 	bl	28c44 <sys_mem_swap.constprop.0>
}
   28d3c:	4620      	mov	r0, r4
   28d3e:	b017      	add	sp, #92	; 0x5c
   28d40:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028d42 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28d42:	2301      	movs	r3, #1
   28d44:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28d46:	f3bf 8f5b 	dmb	ish
   28d4a:	e850 2f00 	ldrex	r2, [r0]
   28d4e:	431a      	orrs	r2, r3
   28d50:	e840 2100 	strex	r1, r2, [r0]
   28d54:	2900      	cmp	r1, #0
   28d56:	d1f8      	bne.n	28d4a <atomic_set_bit+0x8>
   28d58:	f3bf 8f5b 	dmb	ish
}
   28d5c:	4770      	bx	lr

00028d5e <smp_keypress_notif>:
{
   28d5e:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   28d60:	210e      	movs	r1, #14
   28d62:	f7ff ffee 	bl	28d42 <atomic_set_bit>
}
   28d66:	2000      	movs	r0, #0
   28d68:	bd08      	pop	{r3, pc}

00028d6a <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   28d6a:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   28d6c:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   28d6e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   28d70:	4628      	mov	r0, r5
   28d72:	2104      	movs	r1, #4
   28d74:	f7ff fef2 	bl	28b5c <atomic_test_bit>
   28d78:	b970      	cbnz	r0, 28d98 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   28d7a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   28d7e:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   28d80:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   28d82:	4608      	mov	r0, r1
   28d84:	f7fe ff32 	bl	27bec <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   28d88:	4604      	mov	r4, r0
   28d8a:	b938      	cbnz	r0, 28d9c <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   28d8c:	2104      	movs	r1, #4
   28d8e:	4628      	mov	r0, r5
   28d90:	f7ff ffd7 	bl	28d42 <atomic_set_bit>
}
   28d94:	4620      	mov	r0, r4
   28d96:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   28d98:	2200      	movs	r2, #0
   28d9a:	e7f0      	b.n	28d7e <smp_create_pdu.constprop.0+0x14>
   28d9c:	2101      	movs	r1, #1
   28d9e:	3008      	adds	r0, #8
   28da0:	f7f3 fe42 	bl	1ca28 <net_buf_simple_add>
	hdr->code = op;
   28da4:	7006      	strb	r6, [r0, #0]
	return buf;
   28da6:	e7f5      	b.n	28d94 <smp_create_pdu.constprop.0+0x2a>

00028da8 <send_pairing_rsp>:
{
   28da8:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   28daa:	2102      	movs	r1, #2
{
   28dac:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   28dae:	f7ff ffdc 	bl	28d6a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   28db2:	4604      	mov	r4, r0
   28db4:	b178      	cbz	r0, 28dd6 <send_pairing_rsp+0x2e>
   28db6:	2106      	movs	r1, #6
   28db8:	3008      	adds	r0, #8
   28dba:	f7f3 fe35 	bl	1ca28 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   28dbe:	2206      	movs	r2, #6
   28dc0:	f105 0111 	add.w	r1, r5, #17
   28dc4:	f7fe fa2f 	bl	27226 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   28dc8:	4628      	mov	r0, r5
   28dca:	2200      	movs	r2, #0
   28dcc:	4621      	mov	r1, r4
   28dce:	f7ff ff1c 	bl	28c0a <smp_send.constprop.0>
	return 0;
   28dd2:	2000      	movs	r0, #0
}
   28dd4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   28dd6:	2008      	movs	r0, #8
   28dd8:	e7fc      	b.n	28dd4 <send_pairing_rsp+0x2c>

00028dda <smp_send_pairing_random>:
{
   28dda:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   28ddc:	2104      	movs	r1, #4
{
   28dde:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   28de0:	f7ff ffc3 	bl	28d6a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   28de4:	4604      	mov	r4, r0
   28de6:	b178      	cbz	r0, 28e08 <smp_send_pairing_random+0x2e>
   28de8:	2110      	movs	r1, #16
   28dea:	3008      	adds	r0, #8
   28dec:	f7f3 fe1c 	bl	1ca28 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   28df0:	2210      	movs	r2, #16
   28df2:	f105 0127 	add.w	r1, r5, #39	; 0x27
   28df6:	f7fe fa16 	bl	27226 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   28dfa:	4628      	mov	r0, r5
   28dfc:	2200      	movs	r2, #0
   28dfe:	4621      	mov	r1, r4
   28e00:	f7ff ff03 	bl	28c0a <smp_send.constprop.0>
	return 0;
   28e04:	2000      	movs	r0, #0
}
   28e06:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   28e08:	2008      	movs	r0, #8
   28e0a:	e7fc      	b.n	28e06 <smp_send_pairing_random+0x2c>

00028e0c <smp_dhkey_check>:
{
   28e0c:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   28e0e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   28e12:	78db      	ldrb	r3, [r3, #3]
   28e14:	2b01      	cmp	r3, #1
{
   28e16:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   28e18:	d114      	bne.n	28e44 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   28e1a:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   28e1c:	1d05      	adds	r5, r0, #4
   28e1e:	2110      	movs	r1, #16
   28e20:	4628      	mov	r0, r5
   28e22:	f7ff fec5 	bl	28bb0 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   28e26:	4631      	mov	r1, r6
   28e28:	2210      	movs	r2, #16
   28e2a:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   28e2e:	f7fe f9fa 	bl	27226 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   28e32:	2107      	movs	r1, #7
   28e34:	4628      	mov	r0, r5
   28e36:	f7ff fe91 	bl	28b5c <atomic_test_bit>
   28e3a:	b128      	cbz	r0, 28e48 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28e3c:	2109      	movs	r1, #9
   28e3e:	4628      	mov	r0, r5
   28e40:	f7ff ff7f 	bl	28d42 <atomic_set_bit>
}
   28e44:	2000      	movs	r0, #0
   28e46:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28e48:	210a      	movs	r1, #10
   28e4a:	4628      	mov	r0, r5
   28e4c:	f7ff fe86 	bl	28b5c <atomic_test_bit>
   28e50:	2800      	cmp	r0, #0
   28e52:	d1f3      	bne.n	28e3c <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   28e54:	4620      	mov	r0, r4
}
   28e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   28e5a:	f7f2 b9af 	b.w	1b1bc <compute_and_check_and_send_periph_dhcheck>

00028e5e <smp_signing_info>:
   28e5e:	2007      	movs	r0, #7
   28e60:	4770      	bx	lr

00028e62 <atomic_test_and_clear_bit>:
{
   28e62:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   28e64:	2301      	movs	r3, #1
   28e66:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28e6a:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28e6c:	f3bf 8f5b 	dmb	ish
   28e70:	e850 3f00 	ldrex	r3, [r0]
   28e74:	ea03 0c02 	and.w	ip, r3, r2
   28e78:	e840 ce00 	strex	lr, ip, [r0]
   28e7c:	f1be 0f00 	cmp.w	lr, #0
   28e80:	d1f6      	bne.n	28e70 <atomic_test_and_clear_bit+0xe>
   28e82:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   28e86:	420b      	tst	r3, r1
}
   28e88:	bf14      	ite	ne
   28e8a:	2001      	movne	r0, #1
   28e8c:	2000      	moveq	r0, #0
   28e8e:	f85d fb04 	ldr.w	pc, [sp], #4

00028e92 <smp_reset>:
{
   28e92:	b538      	push	{r3, r4, r5, lr}
   28e94:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28e96:	1d03      	adds	r3, r0, #4
   28e98:	2500      	movs	r5, #0
   28e9a:	f3bf 8f5b 	dmb	ish
   28e9e:	e853 2f00 	ldrex	r2, [r3]
   28ea2:	e843 5100 	strex	r1, r5, [r3]
   28ea6:	2900      	cmp	r1, #0
   28ea8:	d1f9      	bne.n	28e9e <smp_reset+0xc>
   28eaa:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   28eae:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   28eb2:	f7f8 fa05 	bl	212c0 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   28eb6:	7225      	strb	r5, [r4, #8]
   28eb8:	f3bf 8f5b 	dmb	ish
   28ebc:	e854 3f00 	ldrex	r3, [r4]
   28ec0:	e844 5200 	strex	r2, r5, [r4]
   28ec4:	2a00      	cmp	r2, #0
   28ec6:	d1f9      	bne.n	28ebc <smp_reset+0x2a>
   28ec8:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   28ecc:	4620      	mov	r0, r4
   28ece:	2101      	movs	r1, #1
}
   28ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   28ed4:	f7ff bf35 	b.w	28d42 <atomic_set_bit>

00028ed8 <smp_c1>:
{
   28ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28edc:	b089      	sub	sp, #36	; 0x24
   28ede:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   28ee2:	4699      	mov	r9, r3
	p1[0] = ia->type;
   28ee4:	783b      	ldrb	r3, [r7, #0]
{
   28ee6:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   28ee8:	f88d 3000 	strb.w	r3, [sp]
{
   28eec:	460c      	mov	r4, r1
	p1[1] = ra->type;
   28eee:	f898 3000 	ldrb.w	r3, [r8]
   28ef2:	f88d 3001 	strb.w	r3, [sp, #1]
{
   28ef6:	4611      	mov	r1, r2
   28ef8:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   28efa:	2207      	movs	r2, #7
   28efc:	f10d 0002 	add.w	r0, sp, #2
   28f00:	f7fe f991 	bl	27226 <memcpy>
	memcpy(p1 + 9, pres, 7);
   28f04:	2207      	movs	r2, #7
   28f06:	4649      	mov	r1, r9
   28f08:	f10d 0009 	add.w	r0, sp, #9
   28f0c:	f7fe f98b 	bl	27226 <memcpy>
	while (len--) {
   28f10:	f104 0010 	add.w	r0, r4, #16
   28f14:	4629      	mov	r1, r5
   28f16:	466a      	mov	r2, sp
   28f18:	42a0      	cmp	r0, r4
   28f1a:	d127      	bne.n	28f6c <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   28f1c:	462a      	mov	r2, r5
   28f1e:	4629      	mov	r1, r5
   28f20:	4630      	mov	r0, r6
   28f22:	f000 fb66 	bl	295f2 <bt_encrypt_le>
	if (err) {
   28f26:	4604      	mov	r4, r0
   28f28:	b9e0      	cbnz	r0, 28f64 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   28f2a:	2206      	movs	r2, #6
   28f2c:	f108 0101 	add.w	r1, r8, #1
   28f30:	a804      	add	r0, sp, #16
   28f32:	f7fe f978 	bl	27226 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   28f36:	2206      	movs	r2, #6
   28f38:	1c79      	adds	r1, r7, #1
   28f3a:	f10d 0016 	add.w	r0, sp, #22
   28f3e:	f7fe f972 	bl	27226 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   28f42:	2204      	movs	r2, #4
   28f44:	4621      	mov	r1, r4
   28f46:	a807      	add	r0, sp, #28
   28f48:	f7fe f978 	bl	2723c <memset>
	while (len--) {
   28f4c:	f105 0010 	add.w	r0, r5, #16
   28f50:	462a      	mov	r2, r5
   28f52:	ab04      	add	r3, sp, #16
   28f54:	4282      	cmp	r2, r0
   28f56:	d112      	bne.n	28f7e <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   28f58:	462a      	mov	r2, r5
   28f5a:	4629      	mov	r1, r5
   28f5c:	4630      	mov	r0, r6
   28f5e:	f000 fb48 	bl	295f2 <bt_encrypt_le>
   28f62:	4604      	mov	r4, r0
}
   28f64:	4620      	mov	r0, r4
   28f66:	b009      	add	sp, #36	; 0x24
   28f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   28f6c:	f814 3b01 	ldrb.w	r3, [r4], #1
   28f70:	f812 cb01 	ldrb.w	ip, [r2], #1
   28f74:	ea83 030c 	eor.w	r3, r3, ip
   28f78:	f801 3b01 	strb.w	r3, [r1], #1
   28f7c:	e7cc      	b.n	28f18 <smp_c1+0x40>
   28f7e:	f812 1b01 	ldrb.w	r1, [r2], #1
   28f82:	f813 4b01 	ldrb.w	r4, [r3], #1
   28f86:	4061      	eors	r1, r4
   28f88:	f802 1c01 	strb.w	r1, [r2, #-1]
   28f8c:	e7e2      	b.n	28f54 <smp_c1+0x7c>

00028f8e <legacy_pairing_confirm>:
{
   28f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28f90:	1d07      	adds	r7, r0, #4
{
   28f92:	b085      	sub	sp, #20
   28f94:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28f96:	210a      	movs	r1, #10
   28f98:	4638      	mov	r0, r7
   28f9a:	f7ff fddf 	bl	28b5c <atomic_test_bit>
   28f9e:	bb88      	cbnz	r0, 29004 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   28fa0:	2104      	movs	r1, #4
   28fa2:	4628      	mov	r0, r5
   28fa4:	f7ff fecd 	bl	28d42 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28fa8:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   28faa:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28fae:	f7ff fedc 	bl	28d6a <smp_create_pdu.constprop.0>
	if (!buf) {
   28fb2:	4606      	mov	r6, r0
   28fb4:	b1c0      	cbz	r0, 28fe8 <legacy_pairing_confirm+0x5a>
   28fb6:	2110      	movs	r1, #16
   28fb8:	3008      	adds	r0, #8
   28fba:	f7f3 fd35 	bl	1ca28 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   28fbe:	f104 039e 	add.w	r3, r4, #158	; 0x9e
   28fc2:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   28fc4:	9002      	str	r0, [sp, #8]
   28fc6:	9301      	str	r3, [sp, #4]
   28fc8:	9400      	str	r4, [sp, #0]
   28fca:	f105 0310 	add.w	r3, r5, #16
   28fce:	f105 0209 	add.w	r2, r5, #9
   28fd2:	f105 0127 	add.w	r1, r5, #39	; 0x27
   28fd6:	f105 0047 	add.w	r0, r5, #71	; 0x47
   28fda:	f7ff ff7d 	bl	28ed8 <smp_c1>
   28fde:	4604      	mov	r4, r0
   28fe0:	b120      	cbz	r0, 28fec <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   28fe2:	4630      	mov	r0, r6
   28fe4:	f7f3 fc0a 	bl	1c7fc <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   28fe8:	2008      	movs	r0, #8
   28fea:	e009      	b.n	29000 <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   28fec:	4602      	mov	r2, r0
   28fee:	4631      	mov	r1, r6
   28ff0:	4628      	mov	r0, r5
   28ff2:	f7ff fe0a 	bl	28c0a <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   28ff6:	4621      	mov	r1, r4
   28ff8:	4638      	mov	r0, r7
   28ffa:	f7ff fdd9 	bl	28bb0 <atomic_clear_bit>
	return 0;
   28ffe:	2000      	movs	r0, #0
}
   29000:	b005      	add	sp, #20
   29002:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   29004:	2100      	movs	r1, #0
   29006:	4638      	mov	r0, r7
   29008:	f7ff fe9b 	bl	28d42 <atomic_set_bit>
   2900c:	e7f7      	b.n	28ffe <legacy_pairing_confirm+0x70>

0002900e <bt_smp_request_ltk>:
{
   2900e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   29012:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   29016:	e9cd 2300 	strd	r2, r3, [sp]
   2901a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2901c:	f7f1 fd2c 	bl	1aa78 <smp_chan_get>
	if (!smp) {
   29020:	4605      	mov	r5, r0
   29022:	2800      	cmp	r0, #0
   29024:	f000 8090 	beq.w	29148 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   29028:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2902c:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   2902e:	f1b9 0f00 	cmp.w	r9, #0
   29032:	d12a      	bne.n	2908a <bt_smp_request_ltk+0x7c>
   29034:	e9dd 2300 	ldrd	r2, r3, [sp]
   29038:	4313      	orrs	r3, r2
   2903a:	d126      	bne.n	2908a <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2903c:	2103      	movs	r1, #3
   2903e:	4638      	mov	r0, r7
   29040:	f7ff fd8c 	bl	28b5c <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   29044:	b308      	cbz	r0, 2908a <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   29046:	2101      	movs	r1, #1
   29048:	4638      	mov	r0, r7
   2904a:	f7ff fd87 	bl	28b5c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2904e:	4606      	mov	r6, r0
   29050:	b1d8      	cbz	r0, 2908a <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   29052:	7d2c      	ldrb	r4, [r5, #20]
   29054:	7b6b      	ldrb	r3, [r5, #13]
   29056:	429c      	cmp	r4, r3
   29058:	bf28      	it	cs
   2905a:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2905c:	4622      	mov	r2, r4
   2905e:	f105 0147 	add.w	r1, r5, #71	; 0x47
   29062:	4640      	mov	r0, r8
   29064:	f7fe f8df 	bl	27226 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   29068:	2c0f      	cmp	r4, #15
   2906a:	d806      	bhi.n	2907a <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   2906c:	f1c4 0210 	rsb	r2, r4, #16
   29070:	4649      	mov	r1, r9
   29072:	eb08 0004 	add.w	r0, r8, r4
   29076:	f7fe f8e1 	bl	2723c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2907a:	2101      	movs	r1, #1
   2907c:	4638      	mov	r0, r7
   2907e:	f7ff fe60 	bl	28d42 <atomic_set_bit>
}
   29082:	4630      	mov	r0, r6
   29084:	b003      	add	sp, #12
   29086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2908a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2908e:	b983      	cbnz	r3, 290b2 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   29090:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   29094:	7a21      	ldrb	r1, [r4, #8]
   29096:	4632      	mov	r2, r6
   29098:	2020      	movs	r0, #32
   2909a:	f7f2 fff3 	bl	1c084 <bt_keys_find>
   2909e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   290a2:	b930      	cbnz	r0, 290b2 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   290a4:	7a21      	ldrb	r1, [r4, #8]
   290a6:	4632      	mov	r2, r6
   290a8:	2001      	movs	r0, #1
   290aa:	f7f2 ffeb 	bl	1c084 <bt_keys_find>
   290ae:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   290b2:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   290b6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   290ba:	b9ee      	cbnz	r6, 290f8 <bt_smp_request_ltk+0xea>
   290bc:	e9dd 2300 	ldrd	r2, r3, [sp]
   290c0:	4313      	orrs	r3, r2
   290c2:	d119      	bne.n	290f8 <bt_smp_request_ltk+0xea>
   290c4:	b388      	cbz	r0, 2912a <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   290c6:	89c3      	ldrh	r3, [r0, #14]
   290c8:	069a      	lsls	r2, r3, #26
   290ca:	d516      	bpl.n	290fa <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   290cc:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   290ce:	f100 011a 	add.w	r1, r0, #26
   290d2:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   290d4:	4640      	mov	r0, r8
   290d6:	f7fe f8a6 	bl	27226 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   290da:	2c0f      	cmp	r4, #15
   290dc:	d806      	bhi.n	290ec <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   290de:	f1c4 0210 	rsb	r2, r4, #16
   290e2:	4631      	mov	r1, r6
   290e4:	eb08 0004 	add.w	r0, r8, r4
   290e8:	f7fe f8a8 	bl	2723c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   290ec:	2101      	movs	r1, #1
   290ee:	4638      	mov	r0, r7
   290f0:	f7ff fe27 	bl	28d42 <atomic_set_bit>
		return true;
   290f4:	2601      	movs	r6, #1
   290f6:	e7c4      	b.n	29082 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   290f8:	b1b8      	cbz	r0, 2912a <bt_smp_request_ltk+0x11c>
   290fa:	89c3      	ldrh	r3, [r0, #14]
   290fc:	07db      	lsls	r3, r3, #31
   290fe:	d514      	bpl.n	2912a <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   29100:	2208      	movs	r2, #8
   29102:	4669      	mov	r1, sp
   29104:	3040      	adds	r0, #64	; 0x40
   29106:	f7fe f865 	bl	271d4 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2910a:	b970      	cbnz	r0, 2912a <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2910c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   29110:	2202      	movs	r2, #2
   29112:	a90a      	add	r1, sp, #40	; 0x28
   29114:	3048      	adds	r0, #72	; 0x48
   29116:	f7fe f85d 	bl	271d4 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2911a:	4606      	mov	r6, r0
   2911c:	b928      	cbnz	r0, 2912a <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   2911e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   29122:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   29124:	314a      	adds	r1, #74	; 0x4a
   29126:	4622      	mov	r2, r4
   29128:	e7d4      	b.n	290d4 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2912a:	210f      	movs	r1, #15
   2912c:	4638      	mov	r0, r7
   2912e:	f7ff fd15 	bl	28b5c <atomic_test_bit>
   29132:	b120      	cbz	r0, 2913e <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   29134:	2202      	movs	r2, #2
   29136:	2106      	movs	r1, #6
   29138:	4620      	mov	r0, r4
   2913a:	f7ee fca7 	bl	17a8c <bt_conn_security_changed>
	smp_reset(smp);
   2913e:	4628      	mov	r0, r5
   29140:	f7ff fea7 	bl	28e92 <smp_reset>
	return false;
   29144:	2600      	movs	r6, #0
   29146:	e79c      	b.n	29082 <bt_smp_request_ltk+0x74>
		return false;
   29148:	4606      	mov	r6, r0
   2914a:	e79a      	b.n	29082 <bt_smp_request_ltk+0x74>

0002914c <bt_smp_sign>:
   2914c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29150:	4770      	bx	lr

00029152 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29152:	1d03      	adds	r3, r0, #4
{
   29154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29156:	4605      	mov	r5, r0
   29158:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2915a:	4618      	mov	r0, r3
   2915c:	2103      	movs	r1, #3
   2915e:	f7ff fcfd 	bl	28b5c <atomic_test_bit>
   29162:	b1f0      	cbz	r0, 291a2 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   29164:	4631      	mov	r1, r6
   29166:	4628      	mov	r0, r5
   29168:	f7f2 fb6c 	bl	1b844 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2916c:	2105      	movs	r1, #5
   2916e:	4628      	mov	r0, r5
   29170:	f7ff fdfb 	bl	28d6a <smp_create_pdu.constprop.0>
	if (!buf) {
   29174:	4604      	mov	r4, r0
   29176:	b308      	cbz	r0, 291bc <smp_error+0x6a>
   29178:	2101      	movs	r1, #1
   2917a:	3008      	adds	r0, #8
   2917c:	f7f3 fc54 	bl	1ca28 <net_buf_simple_add>
	rsp->reason = reason;
   29180:	7006      	strb	r6, [r0, #0]
   29182:	2600      	movs	r6, #0
   29184:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   29188:	9600      	str	r6, [sp, #0]
   2918a:	4633      	mov	r3, r6
   2918c:	4622      	mov	r2, r4
   2918e:	2106      	movs	r1, #6
   29190:	f7fe fd2f 	bl	27bf2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   29194:	b118      	cbz	r0, 2919e <smp_error+0x4c>
		net_buf_unref(buf);
   29196:	4620      	mov	r0, r4
   29198:	f7f3 fb30 	bl	1c7fc <net_buf_unref>
	return 0;
   2919c:	4630      	mov	r0, r6
}
   2919e:	b002      	add	sp, #8
   291a0:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   291a2:	2101      	movs	r1, #1
   291a4:	4618      	mov	r0, r3
   291a6:	f7ff fcd9 	bl	28b5c <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   291aa:	2800      	cmp	r0, #0
   291ac:	d1da      	bne.n	29164 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   291ae:	210f      	movs	r1, #15
   291b0:	4618      	mov	r0, r3
   291b2:	f7ff fcd3 	bl	28b5c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   291b6:	2800      	cmp	r0, #0
   291b8:	d1d4      	bne.n	29164 <smp_error+0x12>
   291ba:	e7d7      	b.n	2916c <smp_error+0x1a>
		return -ENOBUFS;
   291bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   291c0:	e7ed      	b.n	2919e <smp_error+0x4c>

000291c2 <bt_smp_dhkey_ready>:
{
   291c2:	b570      	push	{r4, r5, r6, lr}
   291c4:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   291c6:	2008      	movs	r0, #8
   291c8:	f7f1 fbc2 	bl	1a950 <smp_find>
	if (smp) {
   291cc:	4604      	mov	r4, r0
   291ce:	b1b8      	cbz	r0, 29200 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   291d0:	1d05      	adds	r5, r0, #4
   291d2:	2108      	movs	r1, #8
   291d4:	4628      	mov	r0, r5
   291d6:	f7ff fceb 	bl	28bb0 <atomic_clear_bit>
	if (!dhkey) {
   291da:	b38e      	cbz	r6, 29240 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   291dc:	2107      	movs	r1, #7
   291de:	f7ff fce7 	bl	28bb0 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   291e2:	4631      	mov	r1, r6
   291e4:	2220      	movs	r2, #32
   291e6:	f104 0097 	add.w	r0, r4, #151	; 0x97
   291ea:	f7fe f81c 	bl	27226 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   291ee:	210a      	movs	r1, #10
   291f0:	4628      	mov	r0, r5
   291f2:	f7ff fcb3 	bl	28b5c <atomic_test_bit>
   291f6:	b168      	cbz	r0, 29214 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   291f8:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   291fa:	4628      	mov	r0, r5
   291fc:	f7ff fda1 	bl	28d42 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   29200:	2007      	movs	r0, #7
   29202:	f7f1 fba5 	bl	1a950 <smp_find>
		if (smp) {
   29206:	4604      	mov	r4, r0
   29208:	b118      	cbz	r0, 29212 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2920a:	f7f1 fc7d 	bl	1ab08 <smp_dhkey_generate>
			if (err) {
   2920e:	4601      	mov	r1, r0
   29210:	b990      	cbnz	r0, 29238 <bt_smp_dhkey_ready+0x76>
}
   29212:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   29214:	2110      	movs	r1, #16
   29216:	4628      	mov	r0, r5
   29218:	f7ff fca0 	bl	28b5c <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2921c:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2921e:	2800      	cmp	r0, #0
   29220:	d1eb      	bne.n	291fa <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   29222:	4628      	mov	r0, r5
   29224:	f7ff fc9a 	bl	28b5c <atomic_test_bit>
   29228:	2800      	cmp	r0, #0
   2922a:	d0e9      	beq.n	29200 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2922c:	4620      	mov	r0, r4
   2922e:	f7f1 ffc5 	bl	1b1bc <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   29232:	4601      	mov	r1, r0
   29234:	2800      	cmp	r0, #0
   29236:	d0e3      	beq.n	29200 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   29238:	4620      	mov	r0, r4
   2923a:	f7ff ff8a 	bl	29152 <smp_error>
   2923e:	e7df      	b.n	29200 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   29240:	210b      	movs	r1, #11
   29242:	e7f9      	b.n	29238 <bt_smp_dhkey_ready+0x76>

00029244 <bt_smp_disconnected>:
{
   29244:	b570      	push	{r4, r5, r6, lr}
   29246:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   29248:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2924c:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29250:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   29252:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   29256:	f7f8 f833 	bl	212c0 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2925a:	2103      	movs	r1, #3
   2925c:	4620      	mov	r0, r4
   2925e:	f7ff fc7d 	bl	28b5c <atomic_test_bit>
   29262:	b1a0      	cbz	r0, 2928e <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   29264:	2108      	movs	r1, #8
   29266:	4630      	mov	r0, r6
   29268:	f7f2 faec 	bl	1b844 <smp_pairing_complete>
	if (keys) {
   2926c:	b13d      	cbz	r5, 2927e <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2926e:	89eb      	ldrh	r3, [r5, #14]
   29270:	b113      	cbz	r3, 29278 <bt_smp_disconnected+0x34>
   29272:	7b6b      	ldrb	r3, [r5, #13]
   29274:	079b      	lsls	r3, r3, #30
   29276:	d502      	bpl.n	2927e <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   29278:	4628      	mov	r0, r5
   2927a:	f7f2 ff61 	bl	1c140 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2927e:	4630      	mov	r0, r6
   29280:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
}
   29284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   29288:	2100      	movs	r1, #0
   2928a:	f7fd bfd7 	b.w	2723c <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2928e:	2101      	movs	r1, #1
   29290:	4620      	mov	r0, r4
   29292:	f7ff fc63 	bl	28b5c <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29296:	2800      	cmp	r0, #0
   29298:	d1e4      	bne.n	29264 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2929a:	210f      	movs	r1, #15
   2929c:	4620      	mov	r0, r4
   2929e:	f7ff fc5d 	bl	28b5c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   292a2:	2800      	cmp	r0, #0
   292a4:	d1de      	bne.n	29264 <bt_smp_disconnected+0x20>
   292a6:	e7e1      	b.n	2926c <bt_smp_disconnected+0x28>

000292a8 <id_add>:
	bt_id_add(keys);
   292a8:	f7ed b858 	b.w	1635c <bt_id_add>

000292ac <bt_keys_get_type>:
{
   292ac:	b570      	push	{r4, r5, r6, lr}
   292ae:	4604      	mov	r4, r0
   292b0:	460d      	mov	r5, r1
   292b2:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   292b4:	f7f2 fee6 	bl	1c084 <bt_keys_find>
	if (keys) {
   292b8:	b938      	cbnz	r0, 292ca <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   292ba:	4631      	mov	r1, r6
   292bc:	4628      	mov	r0, r5
   292be:	f7f2 fea1 	bl	1c004 <bt_keys_get_addr>
	if (!keys) {
   292c2:	b110      	cbz	r0, 292ca <bt_keys_get_type+0x1e>
	keys->keys |= type;
   292c4:	89c3      	ldrh	r3, [r0, #14]
   292c6:	431c      	orrs	r4, r3
   292c8:	81c4      	strh	r4, [r0, #14]
}
   292ca:	bd70      	pop	{r4, r5, r6, pc}

000292cc <bt_keys_add_type>:
	keys->keys |= type;
   292cc:	89c3      	ldrh	r3, [r0, #14]
   292ce:	4319      	orrs	r1, r3
   292d0:	81c1      	strh	r1, [r0, #14]
}
   292d2:	4770      	bx	lr

000292d4 <fixed_data_unref>:
}
   292d4:	4770      	bx	lr

000292d6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   292d6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   292d8:	6849      	ldr	r1, [r1, #4]
   292da:	6809      	ldr	r1, [r1, #0]
   292dc:	f7f3 b850 	b.w	1c380 <net_buf_alloc_len>

000292e0 <net_buf_simple_pull_le16>:
{
   292e0:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   292e2:	6803      	ldr	r3, [r0, #0]
   292e4:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   292e6:	2102      	movs	r1, #2
   292e8:	f7f3 fb64 	bl	1c9b4 <net_buf_simple_pull>
}
   292ec:	4620      	mov	r0, r4
   292ee:	bd10      	pop	{r4, pc}

000292f0 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   292f0:	6802      	ldr	r2, [r0, #0]
   292f2:	6880      	ldr	r0, [r0, #8]
}
   292f4:	1a10      	subs	r0, r2, r0
   292f6:	4770      	bx	lr

000292f8 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   292f8:	8883      	ldrh	r3, [r0, #4]
   292fa:	88c2      	ldrh	r2, [r0, #6]
   292fc:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   292fe:	6803      	ldr	r3, [r0, #0]
   29300:	6880      	ldr	r0, [r0, #8]
   29302:	1a18      	subs	r0, r3, r0
}
   29304:	1a10      	subs	r0, r2, r0
   29306:	4770      	bx	lr

00029308 <net_buf_simple_add_mem>:
{
   29308:	b538      	push	{r3, r4, r5, lr}
   2930a:	460d      	mov	r5, r1
   2930c:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2930e:	4611      	mov	r1, r2
   29310:	f7f3 fb8a 	bl	1ca28 <net_buf_simple_add>
   29314:	4622      	mov	r2, r4
   29316:	4629      	mov	r1, r5
}
   29318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2931c:	f7fd bf83 	b.w	27226 <memcpy>

00029320 <net_buf_simple_add_u8>:
{
   29320:	b510      	push	{r4, lr}
   29322:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   29324:	2101      	movs	r1, #1
   29326:	f7f3 fb7f 	bl	1ca28 <net_buf_simple_add>
	*u8 = val;
   2932a:	7004      	strb	r4, [r0, #0]
}
   2932c:	bd10      	pop	{r4, pc}

0002932e <set_on_state>:
	__asm__ volatile(
   2932e:	f04f 0340 	mov.w	r3, #64	; 0x40
   29332:	f3ef 8211 	mrs	r2, BASEPRI
   29336:	f383 8812 	msr	BASEPRI_MAX, r3
   2933a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2933e:	6803      	ldr	r3, [r0, #0]
   29340:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   29344:	f043 0302 	orr.w	r3, r3, #2
   29348:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2934a:	f382 8811 	msr	BASEPRI, r2
   2934e:	f3bf 8f6f 	isb	sy
}
   29352:	4770      	bx	lr

00029354 <async_start>:
{
   29354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29356:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   29358:	6904      	ldr	r4, [r0, #16]
{
   2935a:	4605      	mov	r5, r0
   2935c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2935e:	f04f 0040 	mov.w	r0, #64	; 0x40
   29362:	f3ef 8c11 	mrs	ip, BASEPRI
   29366:	f380 8812 	msr	BASEPRI_MAX, r0
   2936a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2936e:	260c      	movs	r6, #12
   29370:	fb06 4601 	mla	r6, r6, r1, r4
   29374:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   29376:	f000 0e07 	and.w	lr, r0, #7
   2937a:	f1be 0f01 	cmp.w	lr, #1
   2937e:	d110      	bne.n	293a2 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   29380:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
   29382:	2600      	movs	r6, #0
	__asm__ volatile(
   29384:	f38c 8811 	msr	BASEPRI, ip
   29388:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2938c:	b93e      	cbnz	r6, 2939e <async_start+0x4a>
	subdata->cb = cb;
   2938e:	200c      	movs	r0, #12
   29390:	4341      	muls	r1, r0
   29392:	440c      	add	r4, r1
	subdata->user_data = user_data;
   29394:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   29398:	686b      	ldr	r3, [r5, #4]
   2939a:	585b      	ldr	r3, [r3, r1]
   2939c:	4798      	blx	r3
}
   2939e:	4630      	mov	r0, r6
   293a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   293a2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   293a6:	4287      	cmp	r7, r0
   293a8:	bf14      	ite	ne
   293aa:	f04f 36ff 	movne.w	r6, #4294967295
   293ae:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   293b2:	e7e7      	b.n	29384 <async_start+0x30>

000293b4 <api_start>:
{
   293b4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   293b6:	2480      	movs	r4, #128	; 0x80
   293b8:	9400      	str	r4, [sp, #0]
   293ba:	f7ff ffcb 	bl	29354 <async_start>
}
   293be:	b002      	add	sp, #8
   293c0:	bd10      	pop	{r4, pc}

000293c2 <onoff_started_callback>:
	return &data->mgr[type];
   293c2:	6900      	ldr	r0, [r0, #16]
   293c4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   293c6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   293ca:	2100      	movs	r1, #0
   293cc:	4710      	bx	r2

000293ce <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   293ce:	2000      	movs	r0, #0
   293d0:	f7f5 bc5a 	b.w	1ec88 <nrfx_clock_start>

000293d4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   293d4:	2000      	movs	r0, #0
   293d6:	f7f5 bc79 	b.w	1eccc <nrfx_clock_stop>

000293da <api_stop>:
	return stop(dev, subsys, CTX_API);
   293da:	2280      	movs	r2, #128	; 0x80
   293dc:	f7f3 bb8a 	b.w	1caf4 <stop>

000293e0 <blocking_start_callback>:
{
   293e0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   293e2:	f7f7 baa7 	b.w	20934 <z_impl_k_sem_give>

000293e6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   293e6:	6843      	ldr	r3, [r0, #4]
   293e8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   293ea:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   293ee:	600b      	str	r3, [r1, #0]
}
   293f0:	2000      	movs	r0, #0
   293f2:	4770      	bx	lr

000293f4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   293f4:	6843      	ldr	r3, [r0, #4]
   293f6:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   293f8:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   293fc:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   29400:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   29404:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   29408:	2000      	movs	r0, #0
   2940a:	4770      	bx	lr

0002940c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2940c:	6843      	ldr	r3, [r0, #4]
   2940e:	685b      	ldr	r3, [r3, #4]
}
   29410:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   29412:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   29416:	4770      	bx	lr

00029418 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29418:	6843      	ldr	r3, [r0, #4]
   2941a:	685b      	ldr	r3, [r3, #4]
}
   2941c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2941e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   29422:	4770      	bx	lr

00029424 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29424:	6843      	ldr	r3, [r0, #4]
   29426:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   29428:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2942c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   29430:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   29432:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   29436:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2943a:	2000      	movs	r0, #0
   2943c:	4770      	bx	lr

0002943e <is_regular_addr_valid>:
{
   2943e:	b538      	push	{r3, r4, r5, lr}
   29440:	4605      	mov	r5, r0
   29442:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   29444:	f000 f9d8 	bl	297f8 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   29448:	2d00      	cmp	r5, #0
   2944a:	db07      	blt.n	2945c <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2944c:	42a8      	cmp	r0, r5
   2944e:	d905      	bls.n	2945c <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   29450:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   29452:	4284      	cmp	r4, r0
   29454:	bf8c      	ite	hi
   29456:	2000      	movhi	r0, #0
   29458:	2001      	movls	r0, #1
}
   2945a:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2945c:	2000      	movs	r0, #0
   2945e:	e7fc      	b.n	2945a <is_regular_addr_valid+0x1c>

00029460 <nrf_power_pofcon_set.constprop.0>:
    uint32_t pofcon = p_reg->POFCON;
   29460:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   29464:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   29468:	f023 031f 	bic.w	r3, r3, #31
   2946c:	4303      	orrs	r3, r0
    pofcon |=
   2946e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    p_reg->POFCON = pofcon;
   29472:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   29476:	4770      	bx	lr

00029478 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   29478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2947c:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   2947e:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   29480:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   29484:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   29486:	f8c4 8000 	str.w	r8, [r4]
{
   2948a:	460d      	mov	r5, r1
   2948c:	4616      	mov	r6, r2
	info->index = 0U;
   2948e:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   29492:	aa01      	add	r2, sp, #4
   29494:	4669      	mov	r1, sp
   29496:	4798      	blx	r3

	while (layout_size--) {
   29498:	e9dd 7c00 	ldrd	r7, ip, [sp]
   2949c:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   2949e:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   294a2:	4560      	cmp	r0, ip
   294a4:	d104      	bne.n	294b0 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   294a6:	f06f 0015 	mvn.w	r0, #21
}
   294aa:	b003      	add	sp, #12
   294ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   294b0:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   294b4:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   294b6:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   294b8:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   294bc:	b985      	cbnz	r5, 294e0 <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   294be:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   294c0:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   294c4:	4543      	cmp	r3, r8
   294c6:	bf28      	it	cs
   294c8:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   294ca:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   294ce:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   294d0:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   294d2:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   294d4:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   294d6:	f100 0001 	add.w	r0, r0, #1
   294da:	d9e2      	bls.n	294a2 <flash_get_page_info+0x2a>
			return 0;
   294dc:	2000      	movs	r0, #0
   294de:	e7e4      	b.n	294aa <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   294e0:	1aab      	subs	r3, r5, r2
   294e2:	fbb3 f3f9 	udiv	r3, r3, r9
   294e6:	e7eb      	b.n	294c0 <flash_get_page_info+0x48>

000294e8 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   294e8:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   294ea:	2200      	movs	r2, #0
   294ec:	f7ff bfc4 	b.w	29478 <flash_get_page_info>

000294f0 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   294f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   294f4:	6883      	ldr	r3, [r0, #8]
{
   294f6:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   294f8:	691b      	ldr	r3, [r3, #16]
{
   294fa:	4688      	mov	r8, r1
   294fc:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   294fe:	a901      	add	r1, sp, #4
   29500:	aa02      	add	r2, sp, #8
   29502:	4798      	blx	r3
	off_t off = 0;
   29504:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   29506:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   29508:	4625      	mov	r5, r4
   2950a:	9b02      	ldr	r3, [sp, #8]
   2950c:	42ab      	cmp	r3, r5
   2950e:	d802      	bhi.n	29516 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   29510:	b006      	add	sp, #24
   29512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   29516:	9f01      	ldr	r7, [sp, #4]
   29518:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2951c:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2951e:	687b      	ldr	r3, [r7, #4]
   29520:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   29522:	683a      	ldr	r2, [r7, #0]
   29524:	42b2      	cmp	r2, r6
   29526:	eb0a 0306 	add.w	r3, sl, r6
   2952a:	d802      	bhi.n	29532 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2952c:	3501      	adds	r5, #1
   2952e:	469a      	mov	sl, r3
   29530:	e7eb      	b.n	2950a <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   29532:	4649      	mov	r1, r9
   29534:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   29536:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   29538:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2953a:	47c0      	blx	r8
   2953c:	2800      	cmp	r0, #0
   2953e:	d0e7      	beq.n	29510 <flash_page_foreach+0x20>
			off += page_info.size;
   29540:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   29542:	3601      	adds	r6, #1
			off += page_info.size;
   29544:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   29546:	e7ec      	b.n	29522 <flash_page_foreach+0x32>

00029548 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   29548:	2000      	movs	r0, #0
   2954a:	4770      	bx	lr

0002954c <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2954c:	b538      	push	{r3, r4, r5, lr}
   2954e:	460c      	mov	r4, r1
   29550:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   29552:	f7ec fe51 	bl	161f8 <bt_is_ready>
   29556:	b128      	cbz	r0, 29564 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   29558:	4629      	mov	r1, r5
   2955a:	4620      	mov	r0, r4
}
   2955c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   29560:	f7ec b992 	b.w	15888 <bt_hci_le_rand>
}
   29564:	f06f 000a 	mvn.w	r0, #10
   29568:	bd38      	pop	{r3, r4, r5, pc}

0002956a <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2956a:	2200      	movs	r2, #0
{
   2956c:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2956e:	4611      	mov	r1, r2
   29570:	4610      	mov	r0, r2
   29572:	f7fa f8d7 	bl	23724 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   29576:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   29578:	bf18      	it	ne
   2957a:	f06f 0015 	mvnne.w	r0, #21
   2957e:	bd08      	pop	{r3, pc}

00029580 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   29580:	4770      	bx	lr

00029582 <hci_driver_send>:
{
   29582:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   29584:	8983      	ldrh	r3, [r0, #12]
{
   29586:	4605      	mov	r5, r0
	if (!buf->len) {
   29588:	b373      	cbz	r3, 295e8 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2958a:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2958c:	b1a3      	cbz	r3, 295b8 <hci_driver_send+0x36>
   2958e:	2b02      	cmp	r3, #2
   29590:	d12a      	bne.n	295e8 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   29592:	f04f 30ff 	mov.w	r0, #4294967295
   29596:	f04f 31ff 	mov.w	r1, #4294967295
   2959a:	f7f4 fbf1 	bl	1dd80 <multithreading_lock_acquire>
	if (!errcode) {
   2959e:	4604      	mov	r4, r0
   295a0:	b940      	cbnz	r0, 295b4 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   295a2:	68a8      	ldr	r0, [r5, #8]
   295a4:	f7e4 fd28 	bl	dff8 <sdc_hci_data_put>
   295a8:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   295aa:	f7f4 fbf1 	bl	1dd90 <multithreading_lock_release>
		if (errcode) {
   295ae:	b1b4      	cbz	r4, 295de <hci_driver_send+0x5c>
			receive_signal_raise();
   295b0:	f7f4 fd5c 	bl	1e06c <receive_signal_raise>
}
   295b4:	4620      	mov	r0, r4
   295b6:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   295b8:	f04f 30ff 	mov.w	r0, #4294967295
   295bc:	f04f 31ff 	mov.w	r1, #4294967295
   295c0:	f7f4 fbde 	bl	1dd80 <multithreading_lock_acquire>
	if (!errcode) {
   295c4:	4604      	mov	r4, r0
   295c6:	2800      	cmp	r0, #0
   295c8:	d1f4      	bne.n	295b4 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   295ca:	68a8      	ldr	r0, [r5, #8]
   295cc:	f7f4 fe00 	bl	1e1d0 <hci_internal_cmd_put>
   295d0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   295d2:	f7f4 fbdd 	bl	1dd90 <multithreading_lock_release>
	if (errcode) {
   295d6:	2c00      	cmp	r4, #0
   295d8:	d1ec      	bne.n	295b4 <hci_driver_send+0x32>
	receive_signal_raise();
   295da:	f7f4 fd47 	bl	1e06c <receive_signal_raise>
		net_buf_unref(buf);
   295de:	4628      	mov	r0, r5
   295e0:	f7f3 f90c 	bl	1c7fc <net_buf_unref>
   295e4:	2400      	movs	r4, #0
   295e6:	e7e5      	b.n	295b4 <hci_driver_send+0x32>
	switch (type) {
   295e8:	f06f 0415 	mvn.w	r4, #21
   295ec:	e7e2      	b.n	295b4 <hci_driver_send+0x32>

000295ee <receive_work_handler>:
	hci_driver_receive_process();
   295ee:	f7f4 bd65 	b.w	1e0bc <hci_driver_receive_process>

000295f2 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   295f2:	b530      	push	{r4, r5, lr}
   295f4:	b08d      	sub	sp, #52	; 0x34
   295f6:	460c      	mov	r4, r1
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	BT_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   295f8:	4601      	mov	r1, r0
   295fa:	4668      	mov	r0, sp
{
   295fc:	4615      	mov	r5, r2
	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   295fe:	f7f5 f8e9 	bl	1e7d4 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   29602:	4621      	mov	r1, r4
   29604:	a804      	add	r0, sp, #16
   29606:	f7f5 f8e5 	bl	1e7d4 <sys_memcpy_swap.constprop.0>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2960a:	f04f 30ff 	mov.w	r0, #4294967295
   2960e:	f04f 31ff 	mov.w	r1, #4294967295
   29612:	f7f4 fbb5 	bl	1dd80 <multithreading_lock_acquire>

	if (!errcode) {
   29616:	4604      	mov	r4, r0
   29618:	b960      	cbnz	r0, 29634 <bt_encrypt_le+0x42>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2961a:	aa08      	add	r2, sp, #32
   2961c:	a904      	add	r1, sp, #16
   2961e:	4668      	mov	r0, sp
   29620:	f7e4 fa5e 	bl	dae0 <sdc_soc_ecb_block_encrypt>
   29624:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   29626:	f7f4 fbb3 	bl	1dd90 <multithreading_lock_release>
	}

	if (!errcode) {
   2962a:	b91c      	cbnz	r4, 29634 <bt_encrypt_le+0x42>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   2962c:	a908      	add	r1, sp, #32
   2962e:	4628      	mov	r0, r5
   29630:	f7f5 f8d0 	bl	1e7d4 <sys_memcpy_swap.constprop.0>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   29634:	4620      	mov	r0, r4
   29636:	b00d      	add	sp, #52	; 0x34
   29638:	bd30      	pop	{r4, r5, pc}

0002963a <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2963a:	2100      	movs	r1, #0
   2963c:	f7f5 ba66 	b.w	1eb0c <cmd_le_generate_dhkey>

00029640 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   29640:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   29644:	2901      	cmp	r1, #1
   29646:	d801      	bhi.n	2964c <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   29648:	f7f5 ba60 	b.w	1eb0c <cmd_le_generate_dhkey>
}
   2964c:	2012      	movs	r0, #18
   2964e:	4770      	bx	lr

00029650 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   29650:	4668      	mov	r0, sp
   29652:	f020 0107 	bic.w	r1, r0, #7
   29656:	468d      	mov	sp, r1
   29658:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2965a:	f7da fccb 	bl	3ff4 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2965e:	f7ea fd8f 	bl	14180 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   29662:	f7ea fe77 	bl	14354 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   29666:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2966a:	4685      	mov	sp, r0
   2966c:	4770      	bx	lr

0002966e <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2966e:	4668      	mov	r0, sp
   29670:	f020 0107 	bic.w	r1, r0, #7
   29674:	468d      	mov	sp, r1
   29676:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   29678:	f7da fc32 	bl	3ee0 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2967c:	f7ea fd80 	bl	14180 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   29680:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29684:	4685      	mov	sp, r0
   29686:	4770      	bx	lr

00029688 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   29688:	4668      	mov	r0, sp
   2968a:	f020 0107 	bic.w	r1, r0, #7
   2968e:	468d      	mov	sp, r1
   29690:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   29692:	f7d8 f995 	bl	19c0 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   29696:	f7ea fd73 	bl	14180 <_arch_isr_direct_pm>
   2969a:	f7ea fe5b 	bl	14354 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2969e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   296a2:	4685      	mov	sp, r0
   296a4:	4770      	bx	lr

000296a6 <nrfx_clock_enable>:
}
   296a6:	4770      	bx	lr

000296a8 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   296a8:	f7db b914 	b.w	48d4 <MPSL_IRQ_CLOCK_Handler>

000296ac <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   296ac:	f7db bcce 	b.w	504c <mpsl_is_initialized>

000296b0 <nrf_flash_sync_get_timestamp_begin>:
}
   296b0:	4770      	bx	lr

000296b2 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   296b2:	f7f9 bfe1 	b.w	23678 <nrf_cc3xx_platform_init>

000296b6 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   296b6:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   296b8:	f7ea fbee 	bl	13e98 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   296bc:	f7ea fca0 	bl	14000 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   296c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   296c4:	f7f9 bfd8 	b.w	23678 <nrf_cc3xx_platform_init>

000296c8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   296c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   296cc:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   296d0:	f1a0 0308 	sub.w	r3, r0, #8
   296d4:	4258      	negs	r0, r3
   296d6:	4158      	adcs	r0, r3
   296d8:	4770      	bx	lr

000296da <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   296da:	4700      	bx	r0

000296dc <nrf_gpio_pin_present_check>:
    switch (port)
   296dc:	0943      	lsrs	r3, r0, #5
   296de:	d00b      	beq.n	296f8 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   296e0:	2b01      	cmp	r3, #1
   296e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   296e6:	bf18      	it	ne
   296e8:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   296ea:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   296ee:	fa23 f000 	lsr.w	r0, r3, r0
}
   296f2:	f000 0001 	and.w	r0, r0, #1
   296f6:	4770      	bx	lr
    switch (port)
   296f8:	f04f 33ff 	mov.w	r3, #4294967295
   296fc:	e7f5      	b.n	296ea <nrf_gpio_pin_present_check+0xe>

000296fe <pin_is_task_output>:
{
   296fe:	b508      	push	{r3, lr}
   29700:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   29702:	f7f5 fdc7 	bl	1f294 <pin_is_output>
   29706:	b110      	cbz	r0, 2970e <pin_is_task_output+0x10>
   29708:	4610      	mov	r0, r2
   2970a:	f7f5 fdad 	bl	1f268 <pin_in_use_by_te>
}
   2970e:	f000 0001 	and.w	r0, r0, #1
   29712:	bd08      	pop	{r3, pc}

00029714 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   29714:	0080      	lsls	r0, r0, #2
}
   29716:	f500 7080 	add.w	r0, r0, #256	; 0x100
   2971a:	4770      	bx	lr

0002971c <nrf_gpio_reconfigure>:
{
   2971c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29720:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29722:	a801      	add	r0, sp, #4
{
   29724:	460e      	mov	r6, r1
   29726:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2972a:	4690      	mov	r8, r2
   2972c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2972e:	f7f5 fe33 	bl	1f398 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29732:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   29734:	f1b8 0f00 	cmp.w	r8, #0
   29738:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2973c:	bf14      	ite	ne
   2973e:	2302      	movne	r3, #2
   29740:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29742:	2e00      	cmp	r6, #0
   29744:	bf18      	it	ne
   29746:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2974a:	2d00      	cmp	r5, #0
   2974c:	bf14      	ite	ne
   2974e:	210c      	movne	r1, #12
   29750:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   29752:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   29754:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   29758:	bf14      	ite	ne
   2975a:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   2975e:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   29760:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29762:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29766:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2976a:	bf14      	ite	ne
   2976c:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   29770:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29772:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   29774:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   29778:	b106      	cbz	r6, 2977c <nrf_gpio_reconfigure+0x60>
   2977a:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2977c:	f1b8 0f00 	cmp.w	r8, #0
   29780:	d003      	beq.n	2978a <nrf_gpio_reconfigure+0x6e>
   29782:	f898 8000 	ldrb.w	r8, [r8]
   29786:	ea4f 0848 	mov.w	r8, r8, lsl #1
   2978a:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2978c:	b10d      	cbz	r5, 29792 <nrf_gpio_reconfigure+0x76>
   2978e:	782d      	ldrb	r5, [r5, #0]
   29790:	00ad      	lsls	r5, r5, #2
   29792:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   29796:	b10c      	cbz	r4, 2979c <nrf_gpio_reconfigure+0x80>
   29798:	7822      	ldrb	r2, [r4, #0]
   2979a:	0214      	lsls	r4, r2, #8
   2979c:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2979e:	b10f      	cbz	r7, 297a4 <nrf_gpio_reconfigure+0x88>
   297a0:	783f      	ldrb	r7, [r7, #0]
   297a2:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   297a4:	432c      	orrs	r4, r5
   297a6:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   297a8:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   297ac:	b002      	add	sp, #8
   297ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000297b2 <nrf_gpio_cfg_sense_set>:
{
   297b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   297b4:	f10d 030f 	add.w	r3, sp, #15
   297b8:	9301      	str	r3, [sp, #4]
   297ba:	2300      	movs	r3, #0
{
   297bc:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   297c0:	9300      	str	r3, [sp, #0]
   297c2:	461a      	mov	r2, r3
   297c4:	4619      	mov	r1, r3
   297c6:	f7ff ffa9 	bl	2971c <nrf_gpio_reconfigure>
}
   297ca:	b005      	add	sp, #20
   297cc:	f85d fb04 	ldr.w	pc, [sp], #4

000297d0 <is_valid_address>:
{
   297d0:	4603      	mov	r3, r0
   297d2:	4608      	mov	r0, r1
   297d4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   297d8:	690a      	ldr	r2, [r1, #16]
    return p_reg->CODESIZE;
   297da:	6949      	ldr	r1, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   297dc:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   297de:	4293      	cmp	r3, r2
   297e0:	d308      	bcc.n	297f4 <is_valid_address+0x24>
    if (uicr_allowed &&
   297e2:	b140      	cbz	r0, 297f6 <is_valid_address+0x26>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   297e4:	f1a3 2010 	sub.w	r0, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   297e8:	f5b0 7f42 	cmp.w	r0, #776	; 0x308
   297ec:	bf2c      	ite	cs
   297ee:	2000      	movcs	r0, #0
   297f0:	2001      	movcc	r0, #1
   297f2:	4770      	bx	lr
        return true;
   297f4:	2001      	movs	r0, #1
}
   297f6:	4770      	bx	lr

000297f8 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   297f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   297fc:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   297fe:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   29800:	4350      	muls	r0, r2
   29802:	4770      	bx	lr

00029804 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   29804:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29808:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2980a:	4770      	bx	lr

0002980c <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2980c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29810:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   29812:	4770      	bx	lr

00029814 <z_device_state_init>:
}
   29814:	4770      	bx	lr

00029816 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   29816:	b138      	cbz	r0, 29828 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   29818:	68c3      	ldr	r3, [r0, #12]
   2981a:	8818      	ldrh	r0, [r3, #0]
   2981c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   29820:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   29824:	4258      	negs	r0, r3
   29826:	4158      	adcs	r0, r3
}
   29828:	4770      	bx	lr

0002982a <z_early_memset>:
	(void) memset(dst, c, n);
   2982a:	f7fd bd07 	b.w	2723c <memset>

0002982e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2982e:	f7fd bcfa 	b.w	27226 <memcpy>

00029832 <k_heap_init>:
{
   29832:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   29834:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   29838:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2983c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2983e:	f7e8 bf2f 	b.w	126a0 <sys_heap_init>

00029842 <k_mem_slab_init>:
{
   29842:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   29844:	2400      	movs	r4, #0
   29846:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   29848:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2984a:	ea41 0402 	orr.w	r4, r1, r2
   2984e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   29852:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   29856:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   29858:	d10c      	bne.n	29874 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   2985a:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2985c:	42a3      	cmp	r3, r4
   2985e:	d103      	bne.n	29868 <k_mem_slab_init+0x26>
   29860:	e9c0 0000 	strd	r0, r0, [r0]
}
   29864:	2000      	movs	r0, #0
}
   29866:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   29868:	6985      	ldr	r5, [r0, #24]
   2986a:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2986c:	3401      	adds	r4, #1
		slab->free_list = p;
   2986e:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   29870:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   29872:	e7f3      	b.n	2985c <k_mem_slab_init+0x1a>
		return -EINVAL;
   29874:	f06f 0015 	mvn.w	r0, #21
	return rc;
   29878:	e7f5      	b.n	29866 <k_mem_slab_init+0x24>

0002987a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2987a:	f3ef 8005 	mrs	r0, IPSR
}
   2987e:	3800      	subs	r0, #0
   29880:	bf18      	it	ne
   29882:	2001      	movne	r0, #1
   29884:	4770      	bx	lr

00029886 <z_impl_k_thread_name_set>:
}
   29886:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2988a:	4770      	bx	lr

0002988c <k_thread_name_get>:
}
   2988c:	2000      	movs	r0, #0
   2988e:	4770      	bx	lr

00029890 <z_impl_k_thread_start>:
	z_sched_start(thread);
   29890:	f7f8 b8a6 	b.w	219e0 <z_sched_start>

00029894 <z_pm_save_idle_exit>:
{
   29894:	b508      	push	{r3, lr}
	pm_system_resume();
   29896:	f7ea f977 	bl	13b88 <pm_system_resume>
}
   2989a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2989e:	f7ff be6f 	b.w	29580 <sys_clock_idle_exit>

000298a2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   298a2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   298a6:	428b      	cmp	r3, r1
   298a8:	d001      	beq.n	298ae <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   298aa:	f7f8 b9ed 	b.w	21c88 <z_set_prio>
}
   298ae:	2000      	movs	r0, #0
   298b0:	4770      	bx	lr

000298b2 <z_impl_k_mutex_init>:
{
   298b2:	4603      	mov	r3, r0
	mutex->owner = NULL;
   298b4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   298b6:	e9c3 0002 	strd	r0, r0, [r3, #8]
   298ba:	e9c3 3300 	strd	r3, r3, [r3]
}
   298be:	4770      	bx	lr

000298c0 <z_queue_node_peek>:
{
   298c0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   298c2:	4604      	mov	r4, r0
   298c4:	b130      	cbz	r0, 298d4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   298c6:	6802      	ldr	r2, [r0, #0]
   298c8:	0793      	lsls	r3, r2, #30
   298ca:	d003      	beq.n	298d4 <z_queue_node_peek+0x14>
		ret = anode->data;
   298cc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   298ce:	b109      	cbz	r1, 298d4 <z_queue_node_peek+0x14>
			k_free(anode);
   298d0:	f000 f99f 	bl	29c12 <k_free>
}
   298d4:	4620      	mov	r0, r4
   298d6:	bd10      	pop	{r4, pc}

000298d8 <z_impl_k_queue_init>:
	list->head = NULL;
   298d8:	2300      	movs	r3, #0
	list->tail = NULL;
   298da:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   298de:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   298e0:	f100 030c 	add.w	r3, r0, #12
   298e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   298e8:	f100 0314 	add.w	r3, r0, #20
   298ec:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   298f0:	4770      	bx	lr

000298f2 <k_queue_append>:
{
   298f2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   298f4:	2301      	movs	r3, #1
   298f6:	9300      	str	r3, [sp, #0]
   298f8:	2300      	movs	r3, #0
{
   298fa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   298fc:	4619      	mov	r1, r3
   298fe:	f7f6 fee3 	bl	206c8 <queue_insert>
}
   29902:	b003      	add	sp, #12
   29904:	f85d fb04 	ldr.w	pc, [sp], #4

00029908 <k_queue_prepend>:
{
   29908:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2990a:	2300      	movs	r3, #0
{
   2990c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2990e:	9300      	str	r3, [sp, #0]
   29910:	4619      	mov	r1, r3
   29912:	f7f6 fed9 	bl	206c8 <queue_insert>
}
   29916:	b003      	add	sp, #12
   29918:	f85d fb04 	ldr.w	pc, [sp], #4

0002991c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2991c:	b15a      	cbz	r2, 29936 <z_impl_k_sem_init+0x1a>
   2991e:	428a      	cmp	r2, r1
   29920:	d309      	bcc.n	29936 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   29922:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   29926:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2992a:	e9c0 0000 	strd	r0, r0, [r0]
   2992e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   29932:	2000      	movs	r0, #0
   29934:	4770      	bx	lr
		return -EINVAL;
   29936:	f06f 0015 	mvn.w	r0, #21
}
   2993a:	4770      	bx	lr

0002993c <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2993c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2993e:	2301      	movs	r3, #1
   29940:	408b      	lsls	r3, r1
   29942:	ea22 0303 	bic.w	r3, r2, r3
   29946:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   29948:	fa22 f001 	lsr.w	r0, r2, r1
}
   2994c:	f000 0001 	and.w	r0, r0, #1
   29950:	4770      	bx	lr

00029952 <unschedule_locked>:
{
   29952:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29954:	2103      	movs	r1, #3
{
   29956:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29958:	300c      	adds	r0, #12
   2995a:	f7ff ffef 	bl	2993c <flag_test_and_clear>
   2995e:	4604      	mov	r4, r0
   29960:	b118      	cbz	r0, 2996a <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   29962:	f105 0010 	add.w	r0, r5, #16
   29966:	f7f8 fe77 	bl	22658 <z_abort_timeout>
}
   2996a:	4620      	mov	r0, r4
   2996c:	bd38      	pop	{r3, r4, r5, pc}

0002996e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2996e:	b120      	cbz	r0, 2997a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   29970:	2200      	movs	r2, #0
   29972:	4611      	mov	r1, r2
   29974:	3088      	adds	r0, #136	; 0x88
   29976:	f7f8 bd05 	b.w	22384 <z_sched_wake>
}
   2997a:	4770      	bx	lr

0002997c <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2997c:	68c3      	ldr	r3, [r0, #12]
{
   2997e:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29980:	f3c3 0540 	ubfx	r5, r3, #1, #1
   29984:	079b      	lsls	r3, r3, #30
{
   29986:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29988:	d416      	bmi.n	299b8 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2998a:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2998c:	2102      	movs	r1, #2
   2998e:	300c      	adds	r0, #12
   29990:	f7ff ffd4 	bl	2993c <flag_test_and_clear>
   29994:	b180      	cbz	r0, 299b8 <cancel_async_locked+0x3c>
	return list->head;
   29996:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2999a:	b16a      	cbz	r2, 299b8 <cancel_async_locked+0x3c>
   2999c:	4294      	cmp	r4, r2
   2999e:	d11b      	bne.n	299d8 <cancel_async_locked+0x5c>
	return node->next;
   299a0:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   299a2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   299a6:	b98d      	cbnz	r5, 299cc <cancel_async_locked+0x50>
   299a8:	428c      	cmp	r4, r1
	list->head = node;
   299aa:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   299ae:	d101      	bne.n	299b4 <cancel_async_locked+0x38>
	list->tail = node;
   299b0:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   299b4:	2300      	movs	r3, #0
   299b6:	6023      	str	r3, [r4, #0]
	return *flagp;
   299b8:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   299ba:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   299be:	bf1e      	ittt	ne
   299c0:	f043 0302 	orrne.w	r3, r3, #2
   299c4:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   299c6:	f003 000f 	andne.w	r0, r3, #15
}
   299ca:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   299cc:	428c      	cmp	r4, r1
	parent->next = child;
   299ce:	602a      	str	r2, [r5, #0]
	list->tail = node;
   299d0:	bf08      	it	eq
   299d2:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   299d6:	e7ed      	b.n	299b4 <cancel_async_locked+0x38>
	return node->next;
   299d8:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   299da:	6812      	ldr	r2, [r2, #0]
   299dc:	e7dd      	b.n	2999a <cancel_async_locked+0x1e>

000299de <k_work_submit_to_queue>:
{
   299de:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   299e0:	f7f7 faa2 	bl	20f28 <z_work_submit_to_queue>
	if (ret > 0) {
   299e4:	1e04      	subs	r4, r0, #0
   299e6:	dd09      	ble.n	299fc <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   299e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   299ec:	f3ef 8011 	mrs	r0, BASEPRI
   299f0:	f383 8812 	msr	BASEPRI_MAX, r3
   299f4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   299f8:	f000 f80d 	bl	29a16 <z_reschedule_irqlock>
}
   299fc:	4620      	mov	r0, r4
   299fe:	bd10      	pop	{r4, pc}

00029a00 <k_work_delayable_busy_get>:
   29a00:	f7f7 ba5c 	b.w	20ebc <k_work_busy_get>

00029a04 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   29a04:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   29a08:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   29a0c:	4283      	cmp	r3, r0
		return b2 - b1;
   29a0e:	bf14      	ite	ne
   29a10:	1ac0      	subne	r0, r0, r3
	return 0;
   29a12:	2000      	moveq	r0, #0
}
   29a14:	4770      	bx	lr

00029a16 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   29a16:	4603      	mov	r3, r0
   29a18:	b920      	cbnz	r0, 29a24 <z_reschedule_irqlock+0xe>
   29a1a:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   29a1e:	b90a      	cbnz	r2, 29a24 <z_reschedule_irqlock+0xe>
   29a20:	f7ea bbdc 	b.w	141dc <arch_swap>
	__asm__ volatile(
   29a24:	f383 8811 	msr	BASEPRI, r3
   29a28:	f3bf 8f6f 	isb	sy
}
   29a2c:	4770      	bx	lr

00029a2e <z_reschedule_unlocked>:
	__asm__ volatile(
   29a2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   29a32:	f3ef 8011 	mrs	r0, BASEPRI
   29a36:	f383 8812 	msr	BASEPRI_MAX, r3
   29a3a:	f3bf 8f6f 	isb	sy
   29a3e:	f7ff bfea 	b.w	29a16 <z_reschedule_irqlock>

00029a42 <z_priq_dumb_best>:
{
   29a42:	4603      	mov	r3, r0
	return list->head == list;
   29a44:	6800      	ldr	r0, [r0, #0]
}
   29a46:	4283      	cmp	r3, r0
   29a48:	bf08      	it	eq
   29a4a:	2000      	moveq	r0, #0
   29a4c:	4770      	bx	lr

00029a4e <z_unpend_all>:
{
   29a4e:	b538      	push	{r3, r4, r5, lr}
   29a50:	4605      	mov	r5, r0
	int need_sched = 0;
   29a52:	2000      	movs	r0, #0
   29a54:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29a56:	42a5      	cmp	r5, r4
   29a58:	d000      	beq.n	29a5c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   29a5a:	b904      	cbnz	r4, 29a5e <z_unpend_all+0x10>
}
   29a5c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   29a5e:	4620      	mov	r0, r4
   29a60:	f7f7 fe1e 	bl	216a0 <z_unpend_thread>
		z_ready_thread(thread);
   29a64:	4620      	mov	r0, r4
   29a66:	f7f7 ff85 	bl	21974 <z_ready_thread>
		need_sched = 1;
   29a6a:	2001      	movs	r0, #1
   29a6c:	e7f2      	b.n	29a54 <z_unpend_all+0x6>

00029a6e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   29a6e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   29a70:	f7f8 ff46 	bl	22900 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   29a74:	bd08      	pop	{r3, pc}

00029a76 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   29a76:	b108      	cbz	r0, 29a7c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   29a78:	f7eb b898 	b.w	14bac <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   29a7c:	4770      	bx	lr

00029a7e <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29a7e:	f1b1 3fff 	cmp.w	r1, #4294967295
   29a82:	bf08      	it	eq
   29a84:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   29a88:	b538      	push	{r3, r4, r5, lr}
   29a8a:	4605      	mov	r5, r0
   29a8c:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29a8e:	d01d      	beq.n	29acc <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   29a90:	ea51 0300 	orrs.w	r3, r1, r0
   29a94:	d103      	bne.n	29a9e <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   29a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   29a9a:	f7f8 bf31 	b.w	22900 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   29a9e:	f06f 0301 	mvn.w	r3, #1
   29aa2:	1a18      	subs	r0, r3, r0
   29aa4:	f04f 33ff 	mov.w	r3, #4294967295
   29aa8:	eb63 0101 	sbc.w	r1, r3, r1
   29aac:	2900      	cmp	r1, #0
   29aae:	da0c      	bge.n	29aca <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   29ab0:	f7f8 ff26 	bl	22900 <sys_clock_tick_get>
   29ab4:	2d01      	cmp	r5, #1
   29ab6:	4622      	mov	r2, r4
   29ab8:	f174 0400 	sbcs.w	r4, r4, #0
   29abc:	462b      	mov	r3, r5
   29abe:	bfbc      	itt	lt
   29ac0:	2301      	movlt	r3, #1
   29ac2:	2200      	movlt	r2, #0
   29ac4:	1818      	adds	r0, r3, r0
   29ac6:	eb41 0102 	adc.w	r1, r1, r2
}
   29aca:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   29acc:	f04f 30ff 	mov.w	r0, #4294967295
   29ad0:	4601      	mov	r1, r0
   29ad2:	e7fa      	b.n	29aca <sys_clock_timeout_end_calc+0x4c>

00029ad4 <add_event>:
{
   29ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29ad6:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   29ad8:	e9d0 1300 	ldrd	r1, r3, [r0]
   29adc:	4288      	cmp	r0, r1
   29ade:	4604      	mov	r4, r0
   29ae0:	d00d      	beq.n	29afe <add_event+0x2a>
	if ((pending == NULL) ||
   29ae2:	b163      	cbz	r3, 29afe <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29ae4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29ae6:	b100      	cbz	r0, 29aea <add_event+0x16>
   29ae8:	3860      	subs	r0, #96	; 0x60
   29aea:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29aee:	4639      	mov	r1, r7
   29af0:	f7ff ff88 	bl	29a04 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   29af4:	2800      	cmp	r0, #0
   29af6:	dc02      	bgt.n	29afe <add_event+0x2a>
	return list->head == list;
   29af8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29afa:	42b4      	cmp	r4, r6
   29afc:	d109      	bne.n	29b12 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   29afe:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   29b00:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   29b04:	601d      	str	r5, [r3, #0]
	list->tail = node;
   29b06:	6065      	str	r5, [r4, #4]
}
   29b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   29b0a:	6863      	ldr	r3, [r4, #4]
   29b0c:	42b3      	cmp	r3, r6
   29b0e:	d0f6      	beq.n	29afe <add_event+0x2a>
   29b10:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   29b12:	2e00      	cmp	r6, #0
   29b14:	d0f3      	beq.n	29afe <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   29b16:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29b18:	b101      	cbz	r1, 29b1c <add_event+0x48>
   29b1a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   29b1c:	4638      	mov	r0, r7
   29b1e:	f7ff ff71 	bl	29a04 <z_sched_prio_cmp>
   29b22:	2800      	cmp	r0, #0
   29b24:	ddf1      	ble.n	29b0a <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   29b26:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   29b28:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   29b2c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   29b2e:	6075      	str	r5, [r6, #4]
			return;
   29b30:	e7ea      	b.n	29b08 <add_event+0x34>

00029b32 <signal_poll_event>:
{
   29b32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   29b36:	6884      	ldr	r4, [r0, #8]
{
   29b38:	4605      	mov	r5, r0
   29b3a:	460e      	mov	r6, r1
	if (poller != NULL) {
   29b3c:	b144      	cbz	r4, 29b50 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   29b3e:	7863      	ldrb	r3, [r4, #1]
   29b40:	2b01      	cmp	r3, #1
   29b42:	d136      	bne.n	29bb2 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   29b44:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   29b48:	f013 0302 	ands.w	r3, r3, #2
   29b4c:	d10a      	bne.n	29b64 <signal_poll_event+0x32>
		poller->is_polling = false;
   29b4e:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   29b50:	68eb      	ldr	r3, [r5, #12]
   29b52:	f3c3 3145 	ubfx	r1, r3, #13, #6
   29b56:	430e      	orrs	r6, r1
	event->poller = NULL;
   29b58:	2000      	movs	r0, #0
	event->state |= state;
   29b5a:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   29b5e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   29b60:	60eb      	str	r3, [r5, #12]
	return retcode;
   29b62:	e00b      	b.n	29b7c <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   29b64:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   29b68:	f1b3 3fff 	cmp.w	r3, #4294967295
   29b6c:	bf08      	it	eq
   29b6e:	f112 0f02 	cmneq.w	r2, #2
   29b72:	d105      	bne.n	29b80 <signal_poll_event+0x4e>
		poller->is_polling = false;
   29b74:	2300      	movs	r3, #0
   29b76:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   29b78:	f06f 000a 	mvn.w	r0, #10
}
   29b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29b80:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   29b84:	4640      	mov	r0, r8
   29b86:	f7f7 fd8b 	bl	216a0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   29b8a:	2e08      	cmp	r6, #8
   29b8c:	bf0c      	ite	eq
   29b8e:	f06f 0303 	mvneq.w	r3, #3
   29b92:	2300      	movne	r3, #0
   29b94:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   29b96:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   29b9a:	06db      	lsls	r3, r3, #27
   29b9c:	d102      	bne.n	29ba4 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   29b9e:	f854 7c48 	ldr.w	r7, [r4, #-72]
   29ba2:	b10f      	cbz	r7, 29ba8 <signal_poll_event+0x76>
		poller->is_polling = false;
   29ba4:	2300      	movs	r3, #0
   29ba6:	e7d2      	b.n	29b4e <signal_poll_event+0x1c>
	z_ready_thread(thread);
   29ba8:	4640      	mov	r0, r8
   29baa:	f7f7 fee3 	bl	21974 <z_ready_thread>
		poller->is_polling = false;
   29bae:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   29bb0:	e7ce      	b.n	29b50 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   29bb2:	2b02      	cmp	r3, #2
   29bb4:	d1f6      	bne.n	29ba4 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   29bb6:	7823      	ldrb	r3, [r4, #0]
   29bb8:	2b00      	cmp	r3, #0
   29bba:	d0c9      	beq.n	29b50 <signal_poll_event+0x1e>
   29bbc:	f854 7c04 	ldr.w	r7, [r4, #-4]
   29bc0:	2f00      	cmp	r7, #0
   29bc2:	d0f4      	beq.n	29bae <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   29bc4:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   29bc8:	f1a4 0914 	sub.w	r9, r4, #20
   29bcc:	f104 0014 	add.w	r0, r4, #20
   29bd0:	f7f8 fd42 	bl	22658 <z_abort_timeout>
		twork->poll_result = 0;
   29bd4:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   29bd8:	4649      	mov	r1, r9
   29bda:	4638      	mov	r0, r7
   29bdc:	f7f7 f9a4 	bl	20f28 <z_work_submit_to_queue>
		poller->is_polling = false;
   29be0:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   29be4:	e7b4      	b.n	29b50 <signal_poll_event+0x1e>

00029be6 <z_handle_obj_poll_events>:
{
   29be6:	4603      	mov	r3, r0
	return list->head == list;
   29be8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   29bea:	4283      	cmp	r3, r0
   29bec:	d008      	beq.n	29c00 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   29bee:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   29bf2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29bf4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29bf6:	2300      	movs	r3, #0
	node->prev = NULL;
   29bf8:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   29bfc:	f7ff bf99 	b.w	29b32 <signal_poll_event>
}
   29c00:	4770      	bx	lr

00029c02 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   29c02:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   29c04:	e9c0 0000 	strd	r0, r0, [r0]
   29c08:	6083      	str	r3, [r0, #8]
}
   29c0a:	4770      	bx	lr

00029c0c <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   29c0c:	2300      	movs	r3, #0
   29c0e:	6083      	str	r3, [r0, #8]
}
   29c10:	4770      	bx	lr

00029c12 <k_free>:
	if (ptr != NULL) {
   29c12:	b120      	cbz	r0, 29c1e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   29c14:	1f01      	subs	r1, r0, #4
   29c16:	f850 0c04 	ldr.w	r0, [r0, #-4]
   29c1a:	f7f6 b97b 	b.w	1ff14 <k_heap_free>
}
   29c1e:	4770      	bx	lr

00029c20 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   29c20:	4770      	bx	lr
